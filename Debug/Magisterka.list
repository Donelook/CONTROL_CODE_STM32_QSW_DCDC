
Magisterka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a94  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  08016c78  08016c78  00017c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080174a8  080174a8  000193b0  2**0
                  CONTENTS
  4 .ARM          00000008  080174a8  080174a8  000184a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080174b0  080174b0  000193b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080174b0  080174b0  000184b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080174b4  080174b4  000184b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b0  20000000  080174b8  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002328  200003b0  08017868  000193b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200026d8  08017868  000196d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000193b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025a29  00000000  00000000  000193e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ee3  00000000  00000000  0003ee09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  00043cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000180f  00000000  00000000  00045c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d56d  00000000  00000000  00047437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000267de  00000000  00000000  000749a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f256  00000000  00000000  0009b182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ba3d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fc0  00000000  00000000  001ba41c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001c43dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200003b0 	.word	0x200003b0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08016c5c 	.word	0x08016c5c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003b4 	.word	0x200003b4
 800021c:	08016c5c 	.word	0x08016c5c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	0000      	movs	r0, r0
	...

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103e:	f003 fb56 	bl	80046ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001042:	f000 fcf5 	bl	8001a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001046:	f001 fb27 	bl	8002698 <MX_GPIO_Init>
  MX_DMA_Init();
 800104a:	f001 fadb 	bl	8002604 <MX_DMA_Init>
  MX_ADC3_Init();
 800104e:	f000 fdb5 	bl	8001bbc <MX_ADC3_Init>
  MX_ADC4_Init();
 8001052:	f000 fe7f 	bl	8001d54 <MX_ADC4_Init>
  MX_ADC5_Init();
 8001056:	f000 fee3 	bl	8001e20 <MX_ADC5_Init>
  MX_DAC1_Init();
 800105a:	f000 ff67 	bl	8001f2c <MX_DAC1_Init>
  MX_DAC2_Init();
 800105e:	f000 ffb1 	bl	8001fc4 <MX_DAC2_Init>
  MX_TIM1_Init();
 8001062:	f000 ffe9 	bl	8002038 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001066:	f001 f96f 	bl	8002348 <MX_TIM8_Init>
  MX_UART4_Init();
 800106a:	f001 fa7f 	bl	800256c <MX_UART4_Init>
  MX_ADC1_Init();
 800106e:	f000 fd2d 	bl	8001acc <MX_ADC1_Init>
  MX_TIM4_Init();
 8001072:	f001 f87b 	bl	800216c <MX_TIM4_Init>
  MX_USB_Device_Init();
 8001076:	f00f f9bd 	bl	80103f4 <MX_USB_Device_Init>
  MX_TIM15_Init();
 800107a:	f001 f9ff 	bl	800247c <MX_TIM15_Init>
  MX_TIM16_Init();
 800107e:	f001 fa4f 	bl	8002520 <MX_TIM16_Init>
  MX_TIM7_Init();
 8001082:	f001 f92b 	bl	80022dc <MX_TIM7_Init>
  MX_TIM6_Init();
 8001086:	f001 f8e9 	bl	800225c <MX_TIM6_Init>
  MX_CORDIC_Init();
 800108a:	f000 ff3b 	bl	8001f04 <MX_CORDIC_Init>
  /* USER CODE BEGIN 2 */

  sCordicConfig.Function   = CORDIC_FUNCTION_SQUAREROOT;       /* Compute sine (and cosine) */
 800108e:	4b85      	ldr	r3, [pc, #532]	@ (80012a4 <main+0x26c>)
 8001090:	2209      	movs	r2, #9
 8001092:	601a      	str	r2, [r3, #0]
  sCordicConfig.Precision  = CORDIC_PRECISION_6CYCLES;    /* Maximum precision (24 iterations) */
 8001094:	4b83      	ldr	r3, [pc, #524]	@ (80012a4 <main+0x26c>)
 8001096:	2260      	movs	r2, #96	@ 0x60
 8001098:	619a      	str	r2, [r3, #24]
  sCordicConfig.Scale      = CORDIC_SCALE_0;              /* No additional scaling */
 800109a:	4b82      	ldr	r3, [pc, #520]	@ (80012a4 <main+0x26c>)
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
  sCordicConfig.NbWrite    = CORDIC_NBWRITE_1;            /* One input (angle); implicit modulus = 1 */
 80010a0:	4b80      	ldr	r3, [pc, #512]	@ (80012a4 <main+0x26c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  sCordicConfig.NbRead     = CORDIC_NBREAD_1;             /* Two outputs (sine and cosine) */
 80010a6:	4b7f      	ldr	r3, [pc, #508]	@ (80012a4 <main+0x26c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
  sCordicConfig.InSize     = CORDIC_INSIZE_32BITS;        /* 32-bit input (Q1.31 format) */
 80010ac:	4b7d      	ldr	r3, [pc, #500]	@ (80012a4 <main+0x26c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  sCordicConfig.OutSize    = CORDIC_OUTSIZE_32BITS;       /* 32-bit output (Q1.31 format) */
 80010b2:	4b7c      	ldr	r3, [pc, #496]	@ (80012a4 <main+0x26c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]


  if (HAL_CORDIC_Configure(&hcordic, &sCordicConfig) != HAL_OK)
 80010b8:	497a      	ldr	r1, [pc, #488]	@ (80012a4 <main+0x26c>)
 80010ba:	487b      	ldr	r0, [pc, #492]	@ (80012a8 <main+0x270>)
 80010bc:	f005 f84a 	bl	8006154 <HAL_CORDIC_Configure>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <main+0x92>
    {
      /* Configuration Error */
      Error_Handler();
 80010c6:	f002 fd0d 	bl	8003ae4 <Error_Handler>

  while (1)
  {


	  	  	  	  checkfaults = Check_Faults();
 80010ca:	f001 fd73 	bl	8002bb4 <Check_Faults>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b76      	ldr	r3, [pc, #472]	@ (80012ac <main+0x274>)
 80010d4:	701a      	strb	r2, [r3, #0]

	  	  	  	  if (dataReceivedFlag) {
 80010d6:	4b76      	ldr	r3, [pc, #472]	@ (80012b0 <main+0x278>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <main+0xb2>
	  	  	  	      // Process the data
	  	  	  	      ParseUSBCommand();  // Function to handle the received command
 80010e0:	f002 f900 	bl	80032e4 <ParseUSBCommand>

	  	  	  	      // Clear the flag after processing
	  	  	  	      dataReceivedFlag = 0;
 80010e4:	4b72      	ldr	r3, [pc, #456]	@ (80012b0 <main+0x278>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
	  	  	  	  }

	  	  	  	  interlock = HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin);
 80010ea:	2104      	movs	r1, #4
 80010ec:	4871      	ldr	r0, [pc, #452]	@ (80012b4 <main+0x27c>)
 80010ee:	f006 f91b 	bl	8007328 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b70      	ldr	r3, [pc, #448]	@ (80012b8 <main+0x280>)
 80010f8:	701a      	strb	r2, [r3, #0]

	  	          if (interlock &&  start_program && !(checkfaults)) {
 80010fa:	4b6f      	ldr	r3, [pc, #444]	@ (80012b8 <main+0x280>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00e      	beq.n	8001120 <main+0xe8>
 8001102:	4b6e      	ldr	r3, [pc, #440]	@ (80012bc <main+0x284>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00a      	beq.n	8001120 <main+0xe8>
 800110a:	4b68      	ldr	r3, [pc, #416]	@ (80012ac <main+0x274>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d106      	bne.n	8001120 <main+0xe8>
	  	        	//USB_SendString("State: EVENT start_program \r\n");
	  	              event = EVENT_START;
 8001112:	4b6b      	ldr	r3, [pc, #428]	@ (80012c0 <main+0x288>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
	  	              start_program = 0;
 8001118:	4b68      	ldr	r3, [pc, #416]	@ (80012bc <main+0x284>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
 800111e:	e019      	b.n	8001154 <main+0x11c>
	  	          }else if (interlock &&  stop_program && !(checkfaults)) {
 8001120:	4b65      	ldr	r3, [pc, #404]	@ (80012b8 <main+0x280>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00e      	beq.n	8001146 <main+0x10e>
 8001128:	4b66      	ldr	r3, [pc, #408]	@ (80012c4 <main+0x28c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00a      	beq.n	8001146 <main+0x10e>
 8001130:	4b5e      	ldr	r3, [pc, #376]	@ (80012ac <main+0x274>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d106      	bne.n	8001146 <main+0x10e>
		  	        	//USB_SendString("State: EVENT start_program \r\n");
		  	              event = EVENT_SHUTDOWN;
 8001138:	4b61      	ldr	r3, [pc, #388]	@ (80012c0 <main+0x288>)
 800113a:	2203      	movs	r2, #3
 800113c:	701a      	strb	r2, [r3, #0]
		  	              stop_program = 0;
 800113e:	4b61      	ldr	r3, [pc, #388]	@ (80012c4 <main+0x28c>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e006      	b.n	8001154 <main+0x11c>
		  	          }
	  	          else if (clear_fault) {
 8001146:	4b60      	ldr	r3, [pc, #384]	@ (80012c8 <main+0x290>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <main+0x11c>
	  	        	  /* clear fault condition */
	  	              event = EVENT_CLEAR_FAULT;
 800114e:	4b5c      	ldr	r3, [pc, #368]	@ (80012c0 <main+0x288>)
 8001150:	2202      	movs	r2, #2
 8001152:	701a      	strb	r2, [r3, #0]
	  	          }

	  	         if (!interlock || checkfaults /* fault condition */)
 8001154:	4b58      	ldr	r3, [pc, #352]	@ (80012b8 <main+0x280>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <main+0x12c>
 800115c:	4b53      	ldr	r3, [pc, #332]	@ (80012ac <main+0x274>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <main+0x132>
	  	       	 {
	  	       	  	event = EVENT_FAULT;
 8001164:	4b56      	ldr	r3, [pc, #344]	@ (80012c0 <main+0x288>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
	  	       	 }

	  	          // Handle the event and update the state
	  	          currentState = handle_event(currentState, event);
 800116a:	4b58      	ldr	r3, [pc, #352]	@ (80012cc <main+0x294>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	4a54      	ldr	r2, [pc, #336]	@ (80012c0 <main+0x288>)
 8001170:	7812      	ldrb	r2, [r2, #0]
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f001 fbdb 	bl	8002930 <handle_event>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	4b53      	ldr	r3, [pc, #332]	@ (80012cc <main+0x294>)
 8001180:	701a      	strb	r2, [r3, #0]

	  	          // Perform actions based on the current state
	  	          switch (currentState) {
 8001182:	4b52      	ldr	r3, [pc, #328]	@ (80012cc <main+0x294>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b04      	cmp	r3, #4
 8001188:	f200 840e 	bhi.w	80019a8 <main+0x970>
 800118c:	a201      	add	r2, pc, #4	@ (adr r2, 8001194 <main+0x15c>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	080011a9 	.word	0x080011a9
 8001198:	08001267 	.word	0x08001267
 800119c:	08001315 	.word	0x08001315
 80011a0:	08001895 	.word	0x08001895
 80011a4:	08001909 	.word	0x08001909
	  	              {
	  	            	//GPIOs
	  	            	//CUrrent Sensors OCD pin needed to go low in reset condition after fault event
	  	            	//HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_SET);
	  	            	//HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 80011a8:	2201      	movs	r2, #1
 80011aa:	2104      	movs	r1, #4
 80011ac:	4848      	ldr	r0, [pc, #288]	@ (80012d0 <main+0x298>)
 80011ae:	f006 f8d3 	bl	8007358 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP
 80011b2:	2200      	movs	r2, #0
 80011b4:	2120      	movs	r1, #32
 80011b6:	483f      	ldr	r0, [pc, #252]	@ (80012b4 <main+0x27c>)
 80011b8:	f006 f8ce 	bl	8007358 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	2120      	movs	r1, #32
 80011c0:	4844      	ldr	r0, [pc, #272]	@ (80012d4 <main+0x29c>)
 80011c2:	f006 f8c9 	bl	8007358 <HAL_GPIO_WritePin>
	  	            	HAL_Delay(1000);
 80011c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011ca:	f003 fb01 	bl	80047d0 <HAL_Delay>
	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2120      	movs	r1, #32
 80011d2:	4840      	ldr	r0, [pc, #256]	@ (80012d4 <main+0x29c>)
 80011d4:	f006 f8c0 	bl	8007358 <HAL_GPIO_WritePin>
	  	            	  // Start PWM for delay time transfer to FPGA
	  	            	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011d8:	2100      	movs	r1, #0
 80011da:	483f      	ldr	r0, [pc, #252]	@ (80012d8 <main+0x2a0>)
 80011dc:	f009 f81a 	bl	800a214 <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80011e0:	2104      	movs	r1, #4
 80011e2:	483e      	ldr	r0, [pc, #248]	@ (80012dc <main+0x2a4>)
 80011e4:	f009 f816 	bl	800a214 <HAL_TIM_PWM_Start>

	  	            	  //DAC for  current reference
	  	            	  ///DAC1_OUT1 	- MAX1
	  	            	  //DAC1_OUT2 	- MAX2
	  	            	  //DAC2_OUT1	- MIN
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_1);
 80011e8:	2100      	movs	r1, #0
 80011ea:	483d      	ldr	r0, [pc, #244]	@ (80012e0 <main+0x2a8>)
 80011ec:	f005 f9ec 	bl	80065c8 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_2);
 80011f0:	2110      	movs	r1, #16
 80011f2:	483b      	ldr	r0, [pc, #236]	@ (80012e0 <main+0x2a8>)
 80011f4:	f005 f9e8 	bl	80065c8 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac2,DAC2_CHANNEL_1);
 80011f8:	2100      	movs	r1, #0
 80011fa:	483a      	ldr	r0, [pc, #232]	@ (80012e4 <main+0x2ac>)
 80011fc:	f005 f9e4 	bl	80065c8 <HAL_DAC_Start>

	  	            	//if( HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, BUFFER_SIZE, DAC_ALIGN_12B_R)!= HAL_OK) printf("error");
	  	            	//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);

	  	            	  // FAN PWM and 5s timer6 for check temperature and change duty cycle
	  	            	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001200:	2100      	movs	r1, #0
 8001202:	4839      	ldr	r0, [pc, #228]	@ (80012e8 <main+0x2b0>)
 8001204:	f009 f806 	bl	800a214 <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_Base_Start_IT(&htim6);
 8001208:	4838      	ldr	r0, [pc, #224]	@ (80012ec <main+0x2b4>)
 800120a:	f008 ff05 	bl	800a018 <HAL_TIM_Base_Start_IT>

	  	            	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800120e:	217f      	movs	r1, #127	@ 0x7f
 8001210:	4837      	ldr	r0, [pc, #220]	@ (80012f0 <main+0x2b8>)
 8001212:	f004 fe03 	bl	8005e1c <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8001216:	217f      	movs	r1, #127	@ 0x7f
 8001218:	4836      	ldr	r0, [pc, #216]	@ (80012f4 <main+0x2bc>)
 800121a:	f004 fdff 	bl	8005e1c <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 800121e:	217f      	movs	r1, #127	@ 0x7f
 8001220:	4835      	ldr	r0, [pc, #212]	@ (80012f8 <main+0x2c0>)
 8001222:	f004 fdfb 	bl	8005e1c <HAL_ADCEx_Calibration_Start>

	  	            	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_dma_buffer, 5);
 8001226:	2205      	movs	r2, #5
 8001228:	4934      	ldr	r1, [pc, #208]	@ (80012fc <main+0x2c4>)
 800122a:	4831      	ldr	r0, [pc, #196]	@ (80012f0 <main+0x2b8>)
 800122c:	f003 fef2 	bl	8005014 <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4_dma_buffer, 2);
 8001230:	2202      	movs	r2, #2
 8001232:	4933      	ldr	r1, [pc, #204]	@ (8001300 <main+0x2c8>)
 8001234:	482f      	ldr	r0, [pc, #188]	@ (80012f4 <main+0x2bc>)
 8001236:	f003 feed 	bl	8005014 <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adc5_dma_buffer, 10);
 800123a:	220a      	movs	r2, #10
 800123c:	4931      	ldr	r1, [pc, #196]	@ (8001304 <main+0x2cc>)
 800123e:	482e      	ldr	r0, [pc, #184]	@ (80012f8 <main+0x2c0>)
 8001240:	f003 fee8 	bl	8005014 <HAL_ADC_Start_DMA>

	  	            	Set_PWM_DutyCycle(20);
 8001244:	2014      	movs	r0, #20
 8001246:	f001 fbcd 	bl	80029e4 <Set_PWM_DutyCycle>

	  	            	current_sensor1_vref = adc3_dma_buffer[0];// reference for imax imin
 800124a:	4b2c      	ldr	r3, [pc, #176]	@ (80012fc <main+0x2c4>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	b29a      	uxth	r2, r3
 8001250:	4b2d      	ldr	r3, [pc, #180]	@ (8001308 <main+0x2d0>)
 8001252:	801a      	strh	r2, [r3, #0]
	  	            	current_sensor2_vref = adc3_dma_buffer[1];// reference for imax imin
 8001254:	4b29      	ldr	r3, [pc, #164]	@ (80012fc <main+0x2c4>)
 8001256:	885b      	ldrh	r3, [r3, #2]
 8001258:	b29a      	uxth	r2, r3
 800125a:	4b2c      	ldr	r3, [pc, #176]	@ (800130c <main+0x2d4>)
 800125c:	801a      	strh	r2, [r3, #0]

	  	            	currentState = STATE_STANDBY;
 800125e:	4b1b      	ldr	r3, [pc, #108]	@ (80012cc <main+0x294>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 8001264:	e3a7      	b.n	80019b6 <main+0x97e>
	  	              case STATE_STANDBY:
	  	                  // Wait for start_program signal
	  	              {
	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
	  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
	  	            	checkreads = Check_Ready();
 8001266:	f001 fcdf 	bl	8002c28 <Check_Ready>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	4b28      	ldr	r3, [pc, #160]	@ (8001310 <main+0x2d8>)
 8001270:	701a      	strb	r2, [r3, #0]
	  	            	  if(start_program && interlock &&  !(checkfaults)   && checkreads){
 8001272:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <main+0x284>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8399 	beq.w	80019ae <main+0x976>
 800127c:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <main+0x280>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 8394 	beq.w	80019ae <main+0x976>
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <main+0x274>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	f040 838f 	bne.w	80019ae <main+0x976>
 8001290:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <main+0x2d8>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 838a 	beq.w	80019ae <main+0x976>
	  	            		  currentState = STATE_REGULATION;//STATE_SOFT_START;
 800129a:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <main+0x294>)
 800129c:	2202      	movs	r2, #2
 800129e:	701a      	strb	r2, [r3, #0]
		  	            	//once = 1;
		  	            	  }*/
	  	            	  }

	  	              }
	  	                  break;
 80012a0:	e385      	b.n	80019ae <main+0x976>
 80012a2:	bf00      	nop
 80012a4:	20000b88 	.word	0x20000b88
 80012a8:	2000069c 	.word	0x2000069c
 80012ac:	20000b7c 	.word	0x20000b7c
 80012b0:	20000b68 	.word	0x20000b68
 80012b4:	48000800 	.word	0x48000800
 80012b8:	20000b84 	.word	0x20000b84
 80012bc:	20000b78 	.word	0x20000b78
 80012c0:	20000024 	.word	0x20000024
 80012c4:	20000b79 	.word	0x20000b79
 80012c8:	20000b7a 	.word	0x20000b7a
 80012cc:	20000b7b 	.word	0x20000b7b
 80012d0:	48001400 	.word	0x48001400
 80012d4:	48001000 	.word	0x48001000
 80012d8:	200007ac 	.word	0x200007ac
 80012dc:	200008dc 	.word	0x200008dc
 80012e0:	200006c4 	.word	0x200006c4
 80012e4:	200006d8 	.word	0x200006d8
 80012e8:	200007f8 	.word	0x200007f8
 80012ec:	20000844 	.word	0x20000844
 80012f0:	20000438 	.word	0x20000438
 80012f4:	200004a4 	.word	0x200004a4
 80012f8:	20000510 	.word	0x20000510
 80012fc:	20000a70 	.word	0x20000a70
 8001300:	20000a84 	.word	0x20000a84
 8001304:	20000a90 	.word	0x20000a90
 8001308:	20000a54 	.word	0x20000a54
 800130c:	20000a56 	.word	0x20000a56
 8001310:	20000b7d 	.word	0x20000b7d

	  	              case STATE_REGULATION:
	  	                  // Maintain output voltage/current
	  	            	  // 20khz sample time of regulators Timer 15
	  	                  {
	  	                	if(once == 0){
 8001314:	4b86      	ldr	r3, [pc, #536]	@ (8001530 <main+0x4f8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d107      	bne.n	800132c <main+0x2f4>
	  	                			  	            	  //Start timer that start_program ramp and pi regulation
	  	                			  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
 800131c:	2200      	movs	r2, #0
 800131e:	2104      	movs	r1, #4
 8001320:	4884      	ldr	r0, [pc, #528]	@ (8001534 <main+0x4fc>)
 8001322:	f006 f819 	bl	8007358 <HAL_GPIO_WritePin>


	  	                			  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
	  	                			  	            	HAL_TIM_Base_Start_IT(&htim15); // START TIM15 THATS IS MAIN CONTROL LOOP
 8001326:	4884      	ldr	r0, [pc, #528]	@ (8001538 <main+0x500>)
 8001328:	f008 fe76 	bl	800a018 <HAL_TIM_Base_Start_IT>
	  	                			  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
	  	                			  	            	//RAMP_FINISHED = 0;
	  	                			  	            	//once = 1;
	  	                			  	            	  }
	  	                	  if(flag_control)
 800132c:	4b83      	ldr	r3, [pc, #524]	@ (800153c <main+0x504>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 833f 	beq.w	80019b4 <main+0x97c>
	  	                	  {
	  	                		// start_ticks = SysTick->VAL;

	  	                		  	  	input_vol = Low_pass_filter(input_voltage, input_vol, input_vol_x_n1, input_vol_y_n1); //input_voltage;
 8001336:	4b82      	ldr	r3, [pc, #520]	@ (8001540 <main+0x508>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001342:	4b80      	ldr	r3, [pc, #512]	@ (8001544 <main+0x50c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	ee07 3a10 	vmov	s14, r3
 800134a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800134e:	4b7e      	ldr	r3, [pc, #504]	@ (8001548 <main+0x510>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	ee06 3a90 	vmov	s13, r3
 8001356:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800135a:	4b7c      	ldr	r3, [pc, #496]	@ (800154c <main+0x514>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	ee06 3a10 	vmov	s12, r3
 8001362:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8001366:	eef0 1a46 	vmov.f32	s3, s12
 800136a:	eeb0 1a66 	vmov.f32	s2, s13
 800136e:	eef0 0a47 	vmov.f32	s1, s14
 8001372:	eeb0 0a67 	vmov.f32	s0, s15
 8001376:	f001 fea7 	bl	80030c8 <Low_pass_filter>
 800137a:	eef0 7a40 	vmov.f32	s15, s0
 800137e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001382:	ee17 2a90 	vmov	r2, s15
 8001386:	4b6f      	ldr	r3, [pc, #444]	@ (8001544 <main+0x50c>)
 8001388:	601a      	str	r2, [r3, #0]
	  	                		  	  	output_vol = Low_pass_filter(output_voltage, output_vol, output_vol_x_n1, output_vol_y_n1); //output_voltage;
 800138a:	4b71      	ldr	r3, [pc, #452]	@ (8001550 <main+0x518>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	ee07 3a90 	vmov	s15, r3
 8001392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001396:	4b6f      	ldr	r3, [pc, #444]	@ (8001554 <main+0x51c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	ee07 3a10 	vmov	s14, r3
 800139e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80013a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001558 <main+0x520>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	ee06 3a90 	vmov	s13, r3
 80013aa:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80013ae:	4b6b      	ldr	r3, [pc, #428]	@ (800155c <main+0x524>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	ee06 3a10 	vmov	s12, r3
 80013b6:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80013ba:	eef0 1a46 	vmov.f32	s3, s12
 80013be:	eeb0 1a66 	vmov.f32	s2, s13
 80013c2:	eef0 0a47 	vmov.f32	s1, s14
 80013c6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ca:	f001 fe7d 	bl	80030c8 <Low_pass_filter>
 80013ce:	eef0 7a40 	vmov.f32	s15, s0
 80013d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d6:	ee17 2a90 	vmov	r2, s15
 80013da:	4b5e      	ldr	r3, [pc, #376]	@ (8001554 <main+0x51c>)
 80013dc:	601a      	str	r2, [r3, #0]
	  	                		  	  	input_vol_x_n1 = input_voltage;
 80013de:	4b58      	ldr	r3, [pc, #352]	@ (8001540 <main+0x508>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a59      	ldr	r2, [pc, #356]	@ (8001548 <main+0x510>)
 80013e4:	6013      	str	r3, [r2, #0]
	  	                		  	  	input_vol_y_n1 = input_vol;
 80013e6:	4b57      	ldr	r3, [pc, #348]	@ (8001544 <main+0x50c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a58      	ldr	r2, [pc, #352]	@ (800154c <main+0x514>)
 80013ec:	6013      	str	r3, [r2, #0]
	  	                		  	  	output_vol_x_n1 = output_voltage;
 80013ee:	4b58      	ldr	r3, [pc, #352]	@ (8001550 <main+0x518>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a59      	ldr	r2, [pc, #356]	@ (8001558 <main+0x520>)
 80013f4:	6013      	str	r3, [r2, #0]
	  	                		  	  	output_vol_y_n1 = output_vol;
 80013f6:	4b57      	ldr	r3, [pc, #348]	@ (8001554 <main+0x51c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a58      	ldr	r2, [pc, #352]	@ (800155c <main+0x524>)
 80013fc:	6013      	str	r3, [r2, #0]

	  	                		  	  	Gv = (float)output_voltage/(float)input_voltage;//output_voltage/input_voltage;
 80013fe:	4b54      	ldr	r3, [pc, #336]	@ (8001550 <main+0x518>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800140a:	4b4d      	ldr	r3, [pc, #308]	@ (8001540 <main+0x508>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	ee07 3a90 	vmov	s15, r3
 8001412:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800141a:	4b51      	ldr	r3, [pc, #324]	@ (8001560 <main+0x528>)
 800141c:	edc3 7a00 	vstr	s15, [r3]

	  	                				if(Gv<2) //CZARY
 8001420:	4b4f      	ldr	r3, [pc, #316]	@ (8001560 <main+0x528>)
 8001422:	edd3 7a00 	vldr	s15, [r3]
 8001426:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800142a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800142e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001432:	f140 80a5 	bpl.w	8001580 <main+0x548>
	  	                				{

	  	                					delay_tr = approx_acos2((1-Gv))*INV_wr;
 8001436:	4b4a      	ldr	r3, [pc, #296]	@ (8001560 <main+0x528>)
 8001438:	edd3 7a00 	vldr	s15, [r3]
 800143c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001444:	eeb0 0a67 	vmov.f32	s0, s15
 8001448:	f002 fa04 	bl	8003854 <approx_acos2>
 800144c:	ee10 3a10 	vmov	r3, s0
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f8a1 	bl	8000598 <__aeabi_f2d>
 8001456:	a332      	add	r3, pc, #200	@ (adr r3, 8001520 <main+0x4e8>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7ff f8f4 	bl	8000648 <__aeabi_dmul>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f7ff fbe6 	bl	8000c38 <__aeabi_d2f>
 800146c:	4603      	mov	r3, r0
 800146e:	4a3d      	ldr	r2, [pc, #244]	@ (8001564 <main+0x52c>)
 8001470:	6013      	str	r3, [r2, #0]
	  	                					 // start_ticks = SysTick->VAL;

	  	                					cordic_input = float_to_integer(((2-Gv)/Gv), 100, 32);
 8001472:	4b3b      	ldr	r3, [pc, #236]	@ (8001560 <main+0x528>)
 8001474:	edd3 7a00 	vldr	s15, [r3]
 8001478:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800147c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001480:	4b37      	ldr	r3, [pc, #220]	@ (8001560 <main+0x528>)
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800148a:	2120      	movs	r1, #32
 800148c:	2064      	movs	r0, #100	@ 0x64
 800148e:	eeb0 0a66 	vmov.f32	s0, s13
 8001492:	f002 f8e1 	bl	8003658 <float_to_integer>
 8001496:	4603      	mov	r3, r0
 8001498:	4a33      	ldr	r2, [pc, #204]	@ (8001568 <main+0x530>)
 800149a:	6013      	str	r3, [r2, #0]
	  	                					HAL_CORDIC_Calculate(&hcordic, &cordic_input, &result_q31, 1, 100);//sqrt((2-Gv)/Gv))
 800149c:	2364      	movs	r3, #100	@ 0x64
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2301      	movs	r3, #1
 80014a2:	4a32      	ldr	r2, [pc, #200]	@ (800156c <main+0x534>)
 80014a4:	4930      	ldr	r1, [pc, #192]	@ (8001568 <main+0x530>)
 80014a6:	4832      	ldr	r0, [pc, #200]	@ (8001570 <main+0x538>)
 80014a8:	f004 fe90 	bl	80061cc <HAL_CORDIC_Calculate>
	  	                					resultcordic = integer_to_float(result_q31, 10, 1, 32); // result of sqrt((((2-Gv)/Gv)) ) in float
 80014ac:	4b2f      	ldr	r3, [pc, #188]	@ (800156c <main+0x534>)
 80014ae:	6818      	ldr	r0, [r3, #0]
 80014b0:	2320      	movs	r3, #32
 80014b2:	2201      	movs	r2, #1
 80014b4:	210a      	movs	r1, #10
 80014b6:	f002 f955 	bl	8003764 <integer_to_float>
 80014ba:	eef0 7a40 	vmov.f32	s15, s0
 80014be:	4b2d      	ldr	r3, [pc, #180]	@ (8001574 <main+0x53c>)
 80014c0:	edc3 7a00 	vstr	s15, [r3]


	  	                					imin = (int)(Imin_Factor*output_vol*resultcordic*INV_Z); //[mA] Negative current needed to Zero voltage switching in resonance
 80014c4:	4b23      	ldr	r3, [pc, #140]	@ (8001554 <main+0x51c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	ee07 3a90 	vmov	s15, r3
 80014cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014d0:	4b29      	ldr	r3, [pc, #164]	@ (8001578 <main+0x540>)
 80014d2:	edd3 7a00 	vldr	s15, [r3]
 80014d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014da:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <main+0x53c>)
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e4:	ee17 0a90 	vmov	r0, s15
 80014e8:	f7ff f856 	bl	8000598 <__aeabi_f2d>
 80014ec:	a30e      	add	r3, pc, #56	@ (adr r3, 8001528 <main+0x4f0>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7ff f8a9 	bl	8000648 <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff fb53 	bl	8000ba8 <__aeabi_d2iz>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <main+0x544>)
 8001508:	601a      	str	r2, [r3, #0]

	  	                					if(imin>4000) imin = 4000;
 800150a:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <main+0x544>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001512:	d96f      	bls.n	80015f4 <main+0x5bc>
 8001514:	4b19      	ldr	r3, [pc, #100]	@ (800157c <main+0x544>)
 8001516:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	e06a      	b.n	80015f4 <main+0x5bc>
 800151e:	bf00      	nop
 8001520:	155f05f7 	.word	0x155f05f7
 8001524:	3e4eb582 	.word	0x3e4eb582
 8001528:	411d99a8 	.word	0x411d99a8
 800152c:	3f7c9e24 	.word	0x3f7c9e24
 8001530:	20000b80 	.word	0x20000b80
 8001534:	48001400 	.word	0x48001400
 8001538:	20000928 	.word	0x20000928
 800153c:	20000b85 	.word	0x20000b85
 8001540:	20000a64 	.word	0x20000a64
 8001544:	20000030 	.word	0x20000030
 8001548:	20000038 	.word	0x20000038
 800154c:	2000003c 	.word	0x2000003c
 8001550:	20000a7c 	.word	0x20000a7c
 8001554:	20000034 	.word	0x20000034
 8001558:	20000040 	.word	0x20000040
 800155c:	20000044 	.word	0x20000044
 8001560:	20000014 	.word	0x20000014
 8001564:	20000004 	.word	0x20000004
 8001568:	20000050 	.word	0x20000050
 800156c:	20000048 	.word	0x20000048
 8001570:	2000069c 	.word	0x2000069c
 8001574:	2000004c 	.word	0x2000004c
 8001578:	2000002c 	.word	0x2000002c
 800157c:	20000a60 	.word	0x20000a60
	  	                				} else if(Gv>=2)
 8001580:	4ba5      	ldr	r3, [pc, #660]	@ (8001818 <main+0x7e0>)
 8001582:	edd3 7a00 	vldr	s15, [r3]
 8001586:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800158a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001592:	db2f      	blt.n	80015f4 <main+0x5bc>
	  	                				{
	  	                					delay_tr = (M_PI-approx_acos2((1/(Gv-1))))*INV_wr;
 8001594:	4ba0      	ldr	r3, [pc, #640]	@ (8001818 <main+0x7e0>)
 8001596:	edd3 7a00 	vldr	s15, [r3]
 800159a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800159e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80015a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015aa:	eeb0 0a47 	vmov.f32	s0, s14
 80015ae:	f002 f951 	bl	8003854 <approx_acos2>
 80015b2:	ee10 3a10 	vmov	r3, s0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ffee 	bl	8000598 <__aeabi_f2d>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	a18d      	add	r1, pc, #564	@ (adr r1, 80017f8 <main+0x7c0>)
 80015c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015c6:	f7fe fe87 	bl	80002d8 <__aeabi_dsub>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	a38b      	add	r3, pc, #556	@ (adr r3, 8001800 <main+0x7c8>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7ff f836 	bl	8000648 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	f7ff fb28 	bl	8000c38 <__aeabi_d2f>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a8c      	ldr	r2, [pc, #560]	@ (800181c <main+0x7e4>)
 80015ec:	6013      	str	r3, [r2, #0]
	  	                					imin = 0;
 80015ee:	4b8c      	ldr	r3, [pc, #560]	@ (8001820 <main+0x7e8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
	  	                				}
	  	                				if(/*once == 0*/delay_tr<0.001){
 80015f4:	4b89      	ldr	r3, [pc, #548]	@ (800181c <main+0x7e4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ffcd 	bl	8000598 <__aeabi_f2d>
 80015fe:	a382      	add	r3, pc, #520	@ (adr r3, 8001808 <main+0x7d0>)
 8001600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001604:	f7ff fa92 	bl	8000b2c <__aeabi_dcmplt>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d034      	beq.n	8001678 <main+0x640>

	  	                					int delay_tr_freq = (int)(1/delay_tr);
 800160e:	4b83      	ldr	r3, [pc, #524]	@ (800181c <main+0x7e4>)
 8001610:	ed93 7a00 	vldr	s14, [r3]
 8001614:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800161c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001620:	ee17 3a90 	vmov	r3, s15
 8001624:	607b      	str	r3, [r7, #4]

	  	                					if(delay_tr_freq>10000000) delay_tr_freq = 1000000;//10Mhz
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a7e      	ldr	r2, [pc, #504]	@ (8001824 <main+0x7ec>)
 800162a:	4293      	cmp	r3, r2
 800162c:	dd01      	ble.n	8001632 <main+0x5fa>
 800162e:	4b7e      	ldr	r3, [pc, #504]	@ (8001828 <main+0x7f0>)
 8001630:	607b      	str	r3, [r7, #4]

	  	                					if(abs(delay_tr_freq_ACC-delay_tr_freq)>=10000) {
 8001632:	4b7e      	ldr	r3, [pc, #504]	@ (800182c <main+0x7f4>)
 8001634:	ed93 7a00 	vldr	s14, [r3]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800164a:	ee17 3a90 	vmov	r3, s15
 800164e:	2b00      	cmp	r3, #0
 8001650:	bfb8      	it	lt
 8001652:	425b      	neglt	r3, r3
 8001654:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001658:	4293      	cmp	r3, r2
 800165a:	dd0d      	ble.n	8001678 <main+0x640>
	  	                						Update_PWM_Frequency(&htim1, TIM_CHANNEL_1, delay_tr_freq); // Set TIM1 CH1 to freq that is delay tr and send to fpga
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	461a      	mov	r2, r3
 8001660:	2100      	movs	r1, #0
 8001662:	4873      	ldr	r0, [pc, #460]	@ (8001830 <main+0x7f8>)
 8001664:	f001 fa36 	bl	8002ad4 <Update_PWM_Frequency>
	  	                						delay_tr_freq_ACC = delay_tr_freq;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	ee07 3a90 	vmov	s15, r3
 800166e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001672:	4b6e      	ldr	r3, [pc, #440]	@ (800182c <main+0x7f4>)
 8001674:	edc3 7a00 	vstr	s15, [r3]
	  	                					}
	  	                				}

	  	                				if(RAMP_FINISHED == 0) RAMP(); // Adding to Vramp stepping voltage to create starting ramp
 8001678:	4b6e      	ldr	r3, [pc, #440]	@ (8001834 <main+0x7fc>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <main+0x64c>
 8001680:	f001 fc0a 	bl	8002e98 <RAMP>

	  	                				regulatorPI(&imax1, &Integral_I, output_voltage, Vramp, LIM_PEAK_POS, LIM_PEAK_NEG, Kp, Ti, Ts);
 8001684:	4b6c      	ldr	r3, [pc, #432]	@ (8001838 <main+0x800>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	ee07 3a90 	vmov	s15, r3
 800168c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001690:	4b6a      	ldr	r3, [pc, #424]	@ (800183c <main+0x804>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	ee07 3a10 	vmov	s14, r3
 8001698:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800169c:	4b68      	ldr	r3, [pc, #416]	@ (8001840 <main+0x808>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	ee06 3a90 	vmov	s13, r3
 80016a4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80016a8:	4b66      	ldr	r3, [pc, #408]	@ (8001844 <main+0x80c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	ee06 3a10 	vmov	s12, r3
 80016b0:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80016b4:	4b64      	ldr	r3, [pc, #400]	@ (8001848 <main+0x810>)
 80016b6:	edd3 5a00 	vldr	s11, [r3]
 80016ba:	4b64      	ldr	r3, [pc, #400]	@ (800184c <main+0x814>)
 80016bc:	ed93 5a00 	vldr	s10, [r3]
 80016c0:	ed9f 3a63 	vldr	s6, [pc, #396]	@ 8001850 <main+0x818>
 80016c4:	eef0 2a45 	vmov.f32	s5, s10
 80016c8:	eeb0 2a65 	vmov.f32	s4, s11
 80016cc:	eef0 1a46 	vmov.f32	s3, s12
 80016d0:	eeb0 1a66 	vmov.f32	s2, s13
 80016d4:	eef0 0a47 	vmov.f32	s1, s14
 80016d8:	eeb0 0a67 	vmov.f32	s0, s15
 80016dc:	495d      	ldr	r1, [pc, #372]	@ (8001854 <main+0x81c>)
 80016de:	485e      	ldr	r0, [pc, #376]	@ (8001858 <main+0x820>)
 80016e0:	f001 fc14 	bl	8002f0c <regulatorPI>

	  	                				if(/*once == 0*/ output_vol>40000)
 80016e4:	4b5d      	ldr	r3, [pc, #372]	@ (800185c <main+0x824>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f649 4240 	movw	r2, #40000	@ 0x9c40
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d95b      	bls.n	80017a8 <main+0x770>
	  	                				{
	  	                					delay_hc = (2*C_CAP*output_vol)*(1/imax1);
 80016f0:	4b5a      	ldr	r3, [pc, #360]	@ (800185c <main+0x824>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff2d 	bl	8000554 <__aeabi_ui2d>
 80016fa:	a345      	add	r3, pc, #276	@ (adr r3, 8001810 <main+0x7d8>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	f7fe ffa2 	bl	8000648 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4614      	mov	r4, r2
 800170a:	461d      	mov	r5, r3
 800170c:	4b52      	ldr	r3, [pc, #328]	@ (8001858 <main+0x820>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d103      	bne.n	800171c <main+0x6e4>
 8001714:	f04f 0000 	mov.w	r0, #0
 8001718:	4951      	ldr	r1, [pc, #324]	@ (8001860 <main+0x828>)
 800171a:	e003      	b.n	8001724 <main+0x6ec>
 800171c:	f04f 0000 	mov.w	r0, #0
 8001720:	f04f 0100 	mov.w	r1, #0
 8001724:	4622      	mov	r2, r4
 8001726:	462b      	mov	r3, r5
 8001728:	f7fe ff8e 	bl	8000648 <__aeabi_dmul>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff fa80 	bl	8000c38 <__aeabi_d2f>
 8001738:	4603      	mov	r3, r0
 800173a:	4a4a      	ldr	r2, [pc, #296]	@ (8001864 <main+0x82c>)
 800173c:	6013      	str	r3, [r2, #0]
	  	                					int delay_hc_freq = (int)(1/delay_hc);
 800173e:	4b49      	ldr	r3, [pc, #292]	@ (8001864 <main+0x82c>)
 8001740:	ed93 7a00 	vldr	s14, [r3]
 8001744:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800174c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001750:	ee17 3a90 	vmov	r3, s15
 8001754:	603b      	str	r3, [r7, #0]
	  	                					if(delay_hc_freq>10000000) delay_hc_freq = 1000000;//10Mhz jakis problem
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	4a32      	ldr	r2, [pc, #200]	@ (8001824 <main+0x7ec>)
 800175a:	4293      	cmp	r3, r2
 800175c:	dd01      	ble.n	8001762 <main+0x72a>
 800175e:	4b32      	ldr	r3, [pc, #200]	@ (8001828 <main+0x7f0>)
 8001760:	603b      	str	r3, [r7, #0]

	  	                					if(abs(delay_hc_freq_ACC-delay_hc_freq)>=10000) {
 8001762:	4b41      	ldr	r3, [pc, #260]	@ (8001868 <main+0x830>)
 8001764:	ed93 7a00 	vldr	s14, [r3]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001776:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800177a:	ee17 3a90 	vmov	r3, s15
 800177e:	2b00      	cmp	r3, #0
 8001780:	bfb8      	it	lt
 8001782:	425b      	neglt	r3, r3
 8001784:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001788:	4293      	cmp	r3, r2
 800178a:	dd0d      	ble.n	80017a8 <main+0x770>
	  	                						Update_PWM_Frequency(&htim8, TIM_CHANNEL_2, delay_hc_freq); // Set TIM8 CH1 o freq that is delay hc and send to fpga
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	2104      	movs	r1, #4
 8001792:	4836      	ldr	r0, [pc, #216]	@ (800186c <main+0x834>)
 8001794:	f001 f99e 	bl	8002ad4 <Update_PWM_Frequency>
	  	                						delay_hc_freq_ACC = delay_hc_freq;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	ee07 3a90 	vmov	s15, r3
 800179e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a2:	4b31      	ldr	r3, [pc, #196]	@ (8001868 <main+0x830>)
 80017a4:	edc3 7a00 	vstr	s15, [r3]
	  	                					}
	  	                				}

	  	                				imax2 =  imax1 + imax2_sum;//
 80017a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001858 <main+0x820>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b30      	ldr	r3, [pc, #192]	@ (8001870 <main+0x838>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4413      	add	r3, r2
 80017b2:	4a30      	ldr	r2, [pc, #192]	@ (8001874 <main+0x83c>)
 80017b4:	6013      	str	r3, [r2, #0]

	  	                				if(once == 0){
 80017b6:	4b30      	ldr	r3, [pc, #192]	@ (8001878 <main+0x840>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10b      	bne.n	80017d6 <main+0x79e>
	  	                					HAL_Delay(500);
 80017be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017c2:	f003 f805 	bl	80047d0 <HAL_Delay>
	  	                					HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
 80017c6:	2201      	movs	r2, #1
 80017c8:	2120      	movs	r1, #32
 80017ca:	482c      	ldr	r0, [pc, #176]	@ (800187c <main+0x844>)
 80017cc:	f005 fdc4 	bl	8007358 <HAL_GPIO_WritePin>
	  	                					once = 1;
 80017d0:	4b29      	ldr	r3, [pc, #164]	@ (8001878 <main+0x840>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
	  	                				}

	  	                				flag_control = 0;
 80017d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001880 <main+0x848>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
	  	                				stop_ticks = SysTick->VAL;
 80017dc:	4b29      	ldr	r3, [pc, #164]	@ (8001884 <main+0x84c>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b29      	ldr	r3, [pc, #164]	@ (8001888 <main+0x850>)
 80017e4:	601a      	str	r2, [r3, #0]
	  	                				elapsed_ticks = start_ticks-stop_ticks;
 80017e6:	4b29      	ldr	r3, [pc, #164]	@ (800188c <main+0x854>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4b27      	ldr	r3, [pc, #156]	@ (8001888 <main+0x850>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	4a27      	ldr	r2, [pc, #156]	@ (8001890 <main+0x858>)
 80017f2:	6013      	str	r3, [r2, #0]
	  	                	  }

	  	                  }
	  	                  break;
 80017f4:	e0de      	b.n	80019b4 <main+0x97c>
 80017f6:	bf00      	nop
 80017f8:	54442d18 	.word	0x54442d18
 80017fc:	400921fb 	.word	0x400921fb
 8001800:	155f05f7 	.word	0x155f05f7
 8001804:	3e4eb582 	.word	0x3e4eb582
 8001808:	d2f1a9fc 	.word	0xd2f1a9fc
 800180c:	3f50624d 	.word	0x3f50624d
 8001810:	e5c45270 	.word	0xe5c45270
 8001814:	3e32e5d9 	.word	0x3e32e5d9
 8001818:	20000014 	.word	0x20000014
 800181c:	20000004 	.word	0x20000004
 8001820:	20000a60 	.word	0x20000a60
 8001824:	00989680 	.word	0x00989680
 8001828:	000f4240 	.word	0x000f4240
 800182c:	2000000c 	.word	0x2000000c
 8001830:	200007ac 	.word	0x200007ac
 8001834:	20000a88 	.word	0x20000a88
 8001838:	20000a7c 	.word	0x20000a7c
 800183c:	20000a82 	.word	0x20000a82
 8001840:	20000020 	.word	0x20000020
 8001844:	20000b6c 	.word	0x20000b6c
 8001848:	20000018 	.word	0x20000018
 800184c:	2000001c 	.word	0x2000001c
 8001850:	3851b717 	.word	0x3851b717
 8001854:	20000b70 	.word	0x20000b70
 8001858:	20000a58 	.word	0x20000a58
 800185c:	20000034 	.word	0x20000034
 8001860:	3ff00000 	.word	0x3ff00000
 8001864:	20000008 	.word	0x20000008
 8001868:	20000010 	.word	0x20000010
 800186c:	200008dc 	.word	0x200008dc
 8001870:	20000a8c 	.word	0x20000a8c
 8001874:	20000a5c 	.word	0x20000a5c
 8001878:	20000b80 	.word	0x20000b80
 800187c:	48000800 	.word	0x48000800
 8001880:	20000b85 	.word	0x20000b85
 8001884:	e000e010 	.word	0xe000e010
 8001888:	20000ba8 	.word	0x20000ba8
 800188c:	20000ba4 	.word	0x20000ba4
 8001890:	20000bac 	.word	0x20000bac
	  	              case STATE_FAULT:
	  	                  // Handle fault condition
	  	            	  // Turn off all gate drivers and stop FPGA
	  	              {
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP drives mosfet etc
 8001894:	2200      	movs	r2, #0
 8001896:	2120      	movs	r1, #32
 8001898:	4848      	ldr	r0, [pc, #288]	@ (80019bc <main+0x984>)
 800189a:	f005 fd5d 	bl	8007358 <HAL_GPIO_WritePin>

	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!


	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 800189e:	4848      	ldr	r0, [pc, #288]	@ (80019c0 <main+0x988>)
 80018a0:	f008 fc32 	bl	800a108 <HAL_TIM_Base_Stop_IT>

	  	            	HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port,NOT_RST_1_Pin, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2180      	movs	r1, #128	@ 0x80
 80018a8:	4846      	ldr	r0, [pc, #280]	@ (80019c4 <main+0x98c>)
 80018aa:	f005 fd55 	bl	8007358 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_2_GPIO_Port,NOT_RST_2_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018b4:	4844      	ldr	r0, [pc, #272]	@ (80019c8 <main+0x990>)
 80018b6:	f005 fd4f 	bl	8007358 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port,NOT_RST_3_Pin, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2101      	movs	r1, #1
 80018be:	4843      	ldr	r0, [pc, #268]	@ (80019cc <main+0x994>)
 80018c0:	f005 fd4a 	bl	8007358 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port,NOT_RST_4_Pin, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2140      	movs	r1, #64	@ 0x40
 80018c8:	483c      	ldr	r0, [pc, #240]	@ (80019bc <main+0x984>)
 80018ca:	f005 fd45 	bl	8007358 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2102      	movs	r1, #2
 80018d2:	483d      	ldr	r0, [pc, #244]	@ (80019c8 <main+0x990>)
 80018d4:	f005 fd40 	bl	8007358 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018de:	483c      	ldr	r0, [pc, #240]	@ (80019d0 <main+0x998>)
 80018e0:	f005 fd3a 	bl	8007358 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 80018e4:	2201      	movs	r2, #1
 80018e6:	2120      	movs	r1, #32
 80018e8:	4837      	ldr	r0, [pc, #220]	@ (80019c8 <main+0x990>)
 80018ea:	f005 fd35 	bl	8007358 <HAL_GPIO_WritePin>

	  	            	HAL_TIM_Base_Start(&htim7); // timer for reset OCD and INTERLOCK reset turn off
 80018ee:	4839      	ldr	r0, [pc, #228]	@ (80019d4 <main+0x99c>)
 80018f0:	f008 fb22 	bl	8009f38 <HAL_TIM_Base_Start>


	  	            	once = 0;
 80018f4:	4b38      	ldr	r3, [pc, #224]	@ (80019d8 <main+0x9a0>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
	  	            	start_program = 0;
 80018fa:	4b38      	ldr	r3, [pc, #224]	@ (80019dc <main+0x9a4>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
	  	            	currentState = STATE_SHUTDOWN;
 8001900:	4b37      	ldr	r3, [pc, #220]	@ (80019e0 <main+0x9a8>)
 8001902:	2204      	movs	r2, #4
 8001904:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 8001906:	e056      	b.n	80019b6 <main+0x97e>
	  	              case STATE_SHUTDOWN:
	  	                  // Safely shut down the converter
	  	              {
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	2120      	movs	r1, #32
 800190c:	482b      	ldr	r0, [pc, #172]	@ (80019bc <main+0x984>)
 800190e:	f005 fd23 	bl	8007358 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 8001912:	2201      	movs	r2, #1
 8001914:	2104      	movs	r1, #4
 8001916:	482e      	ldr	r0, [pc, #184]	@ (80019d0 <main+0x998>)
 8001918:	f005 fd1e 	bl	8007358 <HAL_GPIO_WritePin>
	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 800191c:	4828      	ldr	r0, [pc, #160]	@ (80019c0 <main+0x988>)
 800191e:	f008 fbf3 	bl	800a108 <HAL_TIM_Base_Stop_IT>
	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
	  	            	RAMP_FINISHED = 0;
 8001922:	4b30      	ldr	r3, [pc, #192]	@ (80019e4 <main+0x9ac>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
						once = 0;
 8001928:	4b2b      	ldr	r3, [pc, #172]	@ (80019d8 <main+0x9a0>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
	  	            	imax1 = 1;
 800192e:	4b2e      	ldr	r3, [pc, #184]	@ (80019e8 <main+0x9b0>)
 8001930:	2201      	movs	r2, #1
 8001932:	601a      	str	r2, [r3, #0]
						imax2 = 1;
 8001934:	4b2d      	ldr	r3, [pc, #180]	@ (80019ec <main+0x9b4>)
 8001936:	2201      	movs	r2, #1
 8001938:	601a      	str	r2, [r3, #0]
						vout = 1;
 800193a:	4b2d      	ldr	r3, [pc, #180]	@ (80019f0 <main+0x9b8>)
 800193c:	2201      	movs	r2, #1
 800193e:	801a      	strh	r2, [r3, #0]
						Vramp = 1;
 8001940:	4b2c      	ldr	r3, [pc, #176]	@ (80019f4 <main+0x9bc>)
 8001942:	2201      	movs	r2, #1
 8001944:	801a      	strh	r2, [r3, #0]
						delay_tr = 1;
 8001946:	4b2c      	ldr	r3, [pc, #176]	@ (80019f8 <main+0x9c0>)
 8001948:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800194c:	601a      	str	r2, [r3, #0]
						delay_hc = 1;
 800194e:	4b2b      	ldr	r3, [pc, #172]	@ (80019fc <main+0x9c4>)
 8001950:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001954:	601a      	str	r2, [r3, #0]
						Gv = 1;
 8001956:	4b2a      	ldr	r3, [pc, #168]	@ (8001a00 <main+0x9c8>)
 8001958:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800195c:	601a      	str	r2, [r3, #0]
						Integral_I = 1;
 800195e:	4b29      	ldr	r3, [pc, #164]	@ (8001a04 <main+0x9cc>)
 8001960:	2201      	movs	r2, #1
 8001962:	601a      	str	r2, [r3, #0]
						prev_delta = 1;
 8001964:	4b28      	ldr	r3, [pc, #160]	@ (8001a08 <main+0x9d0>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]
						input_vol = 1;
 800196a:	4b28      	ldr	r3, [pc, #160]	@ (8001a0c <main+0x9d4>)
 800196c:	2201      	movs	r2, #1
 800196e:	601a      	str	r2, [r3, #0]
						input_voltage =1;
 8001970:	4b27      	ldr	r3, [pc, #156]	@ (8001a10 <main+0x9d8>)
 8001972:	2201      	movs	r2, #1
 8001974:	601a      	str	r2, [r3, #0]
						output_vol = 1;
 8001976:	4b27      	ldr	r3, [pc, #156]	@ (8001a14 <main+0x9dc>)
 8001978:	2201      	movs	r2, #1
 800197a:	601a      	str	r2, [r3, #0]
						output_voltage =1;
 800197c:	4b26      	ldr	r3, [pc, #152]	@ (8001a18 <main+0x9e0>)
 800197e:	2201      	movs	r2, #1
 8001980:	601a      	str	r2, [r3, #0]
						input_vol_x_n1 = 1;
 8001982:	4b26      	ldr	r3, [pc, #152]	@ (8001a1c <main+0x9e4>)
 8001984:	2201      	movs	r2, #1
 8001986:	601a      	str	r2, [r3, #0]
						input_vol_y_n1 = 1;
 8001988:	4b25      	ldr	r3, [pc, #148]	@ (8001a20 <main+0x9e8>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]
						output_vol_x_n1 = 1;
 800198e:	4b25      	ldr	r3, [pc, #148]	@ (8001a24 <main+0x9ec>)
 8001990:	2201      	movs	r2, #1
 8001992:	601a      	str	r2, [r3, #0]
						output_vol_y_n1 = 1;
 8001994:	4b24      	ldr	r3, [pc, #144]	@ (8001a28 <main+0x9f0>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]
						imin = 1;
 800199a:	4b24      	ldr	r3, [pc, #144]	@ (8001a2c <main+0x9f4>)
 800199c:	2201      	movs	r2, #1
 800199e:	601a      	str	r2, [r3, #0]

	  	            	currentState = STATE_STANDBY;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <main+0x9a8>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
	  	              }

	  	                  break;
 80019a6:	e006      	b.n	80019b6 <main+0x97e>
	  	              default:
	  	                  break;
 80019a8:	bf00      	nop
 80019aa:	f7ff bb8e 	b.w	80010ca <main+0x92>
	  	                  break;
 80019ae:	bf00      	nop
 80019b0:	f7ff bb8b 	b.w	80010ca <main+0x92>
	  	                  break;
 80019b4:	bf00      	nop
	  	  	  	  checkfaults = Check_Faults();
 80019b6:	f7ff bb88 	b.w	80010ca <main+0x92>
 80019ba:	bf00      	nop
 80019bc:	48000800 	.word	0x48000800
 80019c0:	20000928 	.word	0x20000928
 80019c4:	48000400 	.word	0x48000400
 80019c8:	48001000 	.word	0x48001000
 80019cc:	48000c00 	.word	0x48000c00
 80019d0:	48001400 	.word	0x48001400
 80019d4:	20000890 	.word	0x20000890
 80019d8:	20000b80 	.word	0x20000b80
 80019dc:	20000b78 	.word	0x20000b78
 80019e0:	20000b7b 	.word	0x20000b7b
 80019e4:	20000a88 	.word	0x20000a88
 80019e8:	20000a58 	.word	0x20000a58
 80019ec:	20000a5c 	.word	0x20000a5c
 80019f0:	20000a80 	.word	0x20000a80
 80019f4:	20000a82 	.word	0x20000a82
 80019f8:	20000004 	.word	0x20000004
 80019fc:	20000008 	.word	0x20000008
 8001a00:	20000014 	.word	0x20000014
 8001a04:	20000b70 	.word	0x20000b70
 8001a08:	20000b74 	.word	0x20000b74
 8001a0c:	20000030 	.word	0x20000030
 8001a10:	20000a64 	.word	0x20000a64
 8001a14:	20000034 	.word	0x20000034
 8001a18:	20000a7c 	.word	0x20000a7c
 8001a1c:	20000038 	.word	0x20000038
 8001a20:	2000003c 	.word	0x2000003c
 8001a24:	20000040 	.word	0x20000040
 8001a28:	20000044 	.word	0x20000044
 8001a2c:	20000a60 	.word	0x20000a60

08001a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b094      	sub	sp, #80	@ 0x50
 8001a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a36:	f107 0318 	add.w	r3, r7, #24
 8001a3a:	2238      	movs	r2, #56	@ 0x38
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f010 f9b5 	bl	8011dae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
 8001a50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a52:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a56:	f007 f9e7 	bl	8008e28 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001a5a:	2322      	movs	r3, #34	@ 0x22
 8001a5c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a64:	2340      	movs	r3, #64	@ 0x40
 8001a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a70:	2302      	movs	r3, #2
 8001a72:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001a74:	2304      	movs	r3, #4
 8001a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001a78:	234b      	movs	r3, #75	@ 0x4b
 8001a7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a80:	2302      	movs	r3, #2
 8001a82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a84:	2302      	movs	r3, #2
 8001a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a88:	f107 0318 	add.w	r3, r7, #24
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f007 fa7f 	bl	8008f90 <HAL_RCC_OscConfig>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001a98:	f002 f824 	bl	8003ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a9c:	230f      	movs	r3, #15
 8001a9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	2104      	movs	r1, #4
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f007 fd7d 	bl	80095b4 <HAL_RCC_ClockConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ac0:	f002 f810 	bl	8003ae4 <Error_Handler>
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	3750      	adds	r7, #80	@ 0x50
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08c      	sub	sp, #48	@ 0x30
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f010 f962 	bl	8011dae <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001aea:	4b32      	ldr	r3, [pc, #200]	@ (8001bb4 <MX_ADC1_Init+0xe8>)
 8001aec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001af0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001af2:	4b30      	ldr	r3, [pc, #192]	@ (8001bb4 <MX_ADC1_Init+0xe8>)
 8001af4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001af8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001afa:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb4 <MX_ADC1_Init+0xe8>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b00:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb4 <MX_ADC1_Init+0xe8>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001b06:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb4 <MX_ADC1_Init+0xe8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b0c:	4b29      	ldr	r3, [pc, #164]	@ (8001bb4 <MX_ADC1_Init+0xe8>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b12:	4b28      	ldr	r3, [pc, #160]	@ (8001bb4 <MX_ADC1_Init+0xe8>)
 8001b14:	2204      	movs	r2, #4
 8001b16:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b18:	4b26      	ldr	r3, [pc, #152]	@ (8001bb4 <MX_ADC1_Init+0xe8>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b1e:	4b25      	ldr	r3, [pc, #148]	@ (8001bb4 <MX_ADC1_Init+0xe8>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001b24:	4b23      	ldr	r3, [pc, #140]	@ (8001bb4 <MX_ADC1_Init+0xe8>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b2a:	4b22      	ldr	r3, [pc, #136]	@ (8001bb4 <MX_ADC1_Init+0xe8>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b32:	4b20      	ldr	r3, [pc, #128]	@ (8001bb4 <MX_ADC1_Init+0xe8>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b38:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb4 <MX_ADC1_Init+0xe8>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb4 <MX_ADC1_Init+0xe8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b46:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb4 <MX_ADC1_Init+0xe8>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001b4c:	4b19      	ldr	r3, [pc, #100]	@ (8001bb4 <MX_ADC1_Init+0xe8>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b54:	4817      	ldr	r0, [pc, #92]	@ (8001bb4 <MX_ADC1_Init+0xe8>)
 8001b56:	f003 f8a1 	bl	8004c9c <HAL_ADC_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001b60:	f001 ffc0 	bl	8003ae4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4811      	ldr	r0, [pc, #68]	@ (8001bb4 <MX_ADC1_Init+0xe8>)
 8001b70:	f004 f9b6 	bl	8005ee0 <HAL_ADCEx_MultiModeConfigChannel>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001b7a:	f001 ffb3 	bl	8003ae4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <MX_ADC1_Init+0xec>)
 8001b80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b82:	2306      	movs	r3, #6
 8001b84:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001b86:	2307      	movs	r3, #7
 8001b88:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b8a:	237f      	movs	r3, #127	@ 0x7f
 8001b8c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b8e:	2304      	movs	r3, #4
 8001b90:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4806      	ldr	r0, [pc, #24]	@ (8001bb4 <MX_ADC1_Init+0xe8>)
 8001b9c:	f003 fb22 	bl	80051e4 <HAL_ADC_ConfigChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001ba6:	f001 ff9d 	bl	8003ae4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	3730      	adds	r7, #48	@ 0x30
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200003cc 	.word	0x200003cc
 8001bb8:	cb840000 	.word	0xcb840000

08001bbc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08c      	sub	sp, #48	@ 0x30
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f010 f8ea 	bl	8011dae <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001bda:	4b57      	ldr	r3, [pc, #348]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001bdc:	4a57      	ldr	r2, [pc, #348]	@ (8001d3c <MX_ADC3_Init+0x180>)
 8001bde:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001be0:	4b55      	ldr	r3, [pc, #340]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001be2:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001be6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001be8:	4b53      	ldr	r3, [pc, #332]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bee:	4b52      	ldr	r3, [pc, #328]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001bf4:	4b50      	ldr	r3, [pc, #320]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001bfa:	4b4f      	ldr	r3, [pc, #316]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c00:	4b4d      	ldr	r3, [pc, #308]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001c02:	2204      	movs	r2, #4
 8001c04:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001c06:	4b4c      	ldr	r3, [pc, #304]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001c0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 5;
 8001c12:	4b49      	ldr	r3, [pc, #292]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001c14:	2205      	movs	r2, #5
 8001c16:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001c18:	4b47      	ldr	r3, [pc, #284]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c20:	4b45      	ldr	r3, [pc, #276]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c26:	4b44      	ldr	r3, [pc, #272]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001c2c:	4b42      	ldr	r3, [pc, #264]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001c34:	4b40      	ldr	r3, [pc, #256]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001c36:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001c3c:	4b3e      	ldr	r3, [pc, #248]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001c44:	483c      	ldr	r0, [pc, #240]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001c46:	f003 f829 	bl	8004c9c <HAL_ADC_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 8001c50:	f001 ff48 	bl	8003ae4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4836      	ldr	r0, [pc, #216]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001c60:	f004 f93e 	bl	8005ee0 <HAL_ADCEx_MultiModeConfigChannel>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001c6a:	f001 ff3b 	bl	8003ae4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c6e:	4b34      	ldr	r3, [pc, #208]	@ (8001d40 <MX_ADC3_Init+0x184>)
 8001c70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c72:	2306      	movs	r3, #6
 8001c74:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c7a:	237f      	movs	r3, #127	@ 0x7f
 8001c7c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 38;
 8001c82:	2326      	movs	r3, #38	@ 0x26
 8001c84:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 8001c86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c8a:	61fb      	str	r3, [r7, #28]
  sConfig.OffsetSaturation = DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	4619      	mov	r1, r3
 8001c96:	4828      	ldr	r0, [pc, #160]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001c98:	f003 faa4 	bl	80051e4 <HAL_ADC_ConfigChannel>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001ca2:	f001 ff1f 	bl	8003ae4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001ca6:	4b27      	ldr	r3, [pc, #156]	@ (8001d44 <MX_ADC3_Init+0x188>)
 8001ca8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001caa:	230c      	movs	r3, #12
 8001cac:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_2;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 37;
 8001cb2:	2325      	movs	r3, #37	@ 0x25
 8001cb4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	4619      	mov	r1, r3
 8001cba:	481f      	ldr	r0, [pc, #124]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001cbc:	f003 fa92 	bl	80051e4 <HAL_ADC_ConfigChannel>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_ADC3_Init+0x10e>
  {
    Error_Handler();
 8001cc6:	f001 ff0d 	bl	8003ae4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001cca:	4b1f      	ldr	r3, [pc, #124]	@ (8001d48 <MX_ADC3_Init+0x18c>)
 8001ccc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001cce:	2312      	movs	r3, #18
 8001cd0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_3;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 8;
 8001cd6:	2308      	movs	r3, #8
 8001cd8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4816      	ldr	r0, [pc, #88]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001ce0:	f003 fa80 	bl	80051e4 <HAL_ADC_ConfigChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_ADC3_Init+0x132>
  {
    Error_Handler();
 8001cea:	f001 fefb 	bl	8003ae4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001cee:	4b17      	ldr	r3, [pc, #92]	@ (8001d4c <MX_ADC3_Init+0x190>)
 8001cf0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001cf2:	2318      	movs	r3, #24
 8001cf4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	4619      	mov	r1, r3
 8001d02:	480d      	ldr	r0, [pc, #52]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001d04:	f003 fa6e 	bl	80051e4 <HAL_ADC_ConfigChannel>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 8001d0e:	f001 fee9 	bl	8003ae4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d12:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <MX_ADC3_Init+0x194>)
 8001d14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001d16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <MX_ADC3_Init+0x17c>)
 8001d22:	f003 fa5f 	bl	80051e4 <HAL_ADC_ConfigChannel>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 8001d2c:	f001 feda 	bl	8003ae4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001d30:	bf00      	nop
 8001d32:	3730      	adds	r7, #48	@ 0x30
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000438 	.word	0x20000438
 8001d3c:	50000400 	.word	0x50000400
 8001d40:	04300002 	.word	0x04300002
 8001d44:	08600004 	.word	0x08600004
 8001d48:	0c900008 	.word	0x0c900008
 8001d4c:	10c00010 	.word	0x10c00010
 8001d50:	14f00020 	.word	0x14f00020

08001d54 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f010 f824 	bl	8011dae <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001d66:	4b2b      	ldr	r3, [pc, #172]	@ (8001e14 <MX_ADC4_Init+0xc0>)
 8001d68:	4a2b      	ldr	r2, [pc, #172]	@ (8001e18 <MX_ADC4_Init+0xc4>)
 8001d6a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001d6c:	4b29      	ldr	r3, [pc, #164]	@ (8001e14 <MX_ADC4_Init+0xc0>)
 8001d6e:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001d72:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001d74:	4b27      	ldr	r3, [pc, #156]	@ (8001e14 <MX_ADC4_Init+0xc0>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d7a:	4b26      	ldr	r3, [pc, #152]	@ (8001e14 <MX_ADC4_Init+0xc0>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001d80:	4b24      	ldr	r3, [pc, #144]	@ (8001e14 <MX_ADC4_Init+0xc0>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d86:	4b23      	ldr	r3, [pc, #140]	@ (8001e14 <MX_ADC4_Init+0xc0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d8c:	4b21      	ldr	r3, [pc, #132]	@ (8001e14 <MX_ADC4_Init+0xc0>)
 8001d8e:	2204      	movs	r2, #4
 8001d90:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001d92:	4b20      	ldr	r3, [pc, #128]	@ (8001e14 <MX_ADC4_Init+0xc0>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001d98:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <MX_ADC4_Init+0xc0>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e14 <MX_ADC4_Init+0xc0>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001da4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e14 <MX_ADC4_Init+0xc0>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dac:	4b19      	ldr	r3, [pc, #100]	@ (8001e14 <MX_ADC4_Init+0xc0>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001db2:	4b18      	ldr	r3, [pc, #96]	@ (8001e14 <MX_ADC4_Init+0xc0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001db8:	4b16      	ldr	r3, [pc, #88]	@ (8001e14 <MX_ADC4_Init+0xc0>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001dc0:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <MX_ADC4_Init+0xc0>)
 8001dc2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dc6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001dc8:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <MX_ADC4_Init+0xc0>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001dd0:	4810      	ldr	r0, [pc, #64]	@ (8001e14 <MX_ADC4_Init+0xc0>)
 8001dd2:	f002 ff63 	bl	8004c9c <HAL_ADC_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8001ddc:	f001 fe82 	bl	8003ae4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001de0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <MX_ADC4_Init+0xc8>)
 8001de2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001de4:	2306      	movs	r3, #6
 8001de6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001de8:	2307      	movs	r3, #7
 8001dea:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001dec:	237f      	movs	r3, #127	@ 0x7f
 8001dee:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001df0:	2304      	movs	r3, #4
 8001df2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001df8:	463b      	mov	r3, r7
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	@ (8001e14 <MX_ADC4_Init+0xc0>)
 8001dfe:	f003 f9f1 	bl	80051e4 <HAL_ADC_ConfigChannel>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 8001e08:	f001 fe6c 	bl	8003ae4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	200004a4 	.word	0x200004a4
 8001e18:	50000500 	.word	0x50000500
 8001e1c:	04300002 	.word	0x04300002

08001e20 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e26:	463b      	mov	r3, r7
 8001e28:	2220      	movs	r2, #32
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f00f ffbe 	bl	8011dae <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001e32:	4b31      	ldr	r3, [pc, #196]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001e34:	4a31      	ldr	r2, [pc, #196]	@ (8001efc <MX_ADC5_Init+0xdc>)
 8001e36:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001e38:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001e3a:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001e3e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001e40:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e46:	4b2c      	ldr	r3, [pc, #176]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e52:	4b29      	ldr	r3, [pc, #164]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e58:	4b27      	ldr	r3, [pc, #156]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001e5e:	4b26      	ldr	r3, [pc, #152]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8001e64:	4b24      	ldr	r3, [pc, #144]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8001e6a:	4b23      	ldr	r3, [pc, #140]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001e70:	4b21      	ldr	r3, [pc, #132]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e78:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001e84:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8001e92:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8001e9a:	4b17      	ldr	r3, [pc, #92]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001e9c:	221c      	movs	r2, #28
 8001e9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8001ea0:	4b15      	ldr	r3, [pc, #84]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001ea2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ea6:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001ea8:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001eae:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001eb4:	4810      	ldr	r0, [pc, #64]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001eb6:	f002 fef1 	bl	8004c9c <HAL_ADC_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_ADC5_Init+0xa4>
  {
    Error_Handler();
 8001ec0:	f001 fe10 	bl	8003ae4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f00 <MX_ADC5_Init+0xe0>)
 8001ec6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ec8:	2306      	movs	r3, #6
 8001eca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ed0:	237f      	movs	r3, #127	@ 0x7f
 8001ed2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001edc:	463b      	mov	r3, r7
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4805      	ldr	r0, [pc, #20]	@ (8001ef8 <MX_ADC5_Init+0xd8>)
 8001ee2:	f003 f97f 	bl	80051e4 <HAL_ADC_ConfigChannel>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_ADC5_Init+0xd0>
  {
    Error_Handler();
 8001eec:	f001 fdfa 	bl	8003ae4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001ef0:	bf00      	nop
 8001ef2:	3720      	adds	r7, #32
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000510 	.word	0x20000510
 8001efc:	50000600 	.word	0x50000600
 8001f00:	04300002 	.word	0x04300002

08001f04 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001f08:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <MX_CORDIC_Init+0x20>)
 8001f0a:	4a07      	ldr	r2, [pc, #28]	@ (8001f28 <MX_CORDIC_Init+0x24>)
 8001f0c:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001f0e:	4805      	ldr	r0, [pc, #20]	@ (8001f24 <MX_CORDIC_Init+0x20>)
 8001f10:	f004 f8ee 	bl	80060f0 <HAL_CORDIC_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001f1a:	f001 fde3 	bl	8003ae4 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	2000069c 	.word	0x2000069c
 8001f28:	40020c00 	.word	0x40020c00

08001f2c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08c      	sub	sp, #48	@ 0x30
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001f32:	463b      	mov	r3, r7
 8001f34:	2230      	movs	r2, #48	@ 0x30
 8001f36:	2100      	movs	r1, #0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f00f ff38 	bl	8011dae <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb8 <MX_DAC1_Init+0x8c>)
 8001f40:	4a1e      	ldr	r2, [pc, #120]	@ (8001fbc <MX_DAC1_Init+0x90>)
 8001f42:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001f44:	481c      	ldr	r0, [pc, #112]	@ (8001fb8 <MX_DAC1_Init+0x8c>)
 8001f46:	f004 fb1c 	bl	8006582 <HAL_DAC_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001f50:	f001 fdc8 	bl	8003ae4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001f54:	2302      	movs	r3, #2
 8001f56:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001f70:	2301      	movs	r3, #1
 8001f72:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f78:	463b      	mov	r3, r7
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	480e      	ldr	r0, [pc, #56]	@ (8001fb8 <MX_DAC1_Init+0x8c>)
 8001f80:	f004 fc1c 	bl	80067bc <HAL_DAC_ConfigChannel>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001f8a:	f001 fdab 	bl	8003ae4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001f8e:	463b      	mov	r3, r7
 8001f90:	2210      	movs	r2, #16
 8001f92:	4619      	mov	r1, r3
 8001f94:	4808      	ldr	r0, [pc, #32]	@ (8001fb8 <MX_DAC1_Init+0x8c>)
 8001f96:	f004 fc11 	bl	80067bc <HAL_DAC_ConfigChannel>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8001fa0:	f001 fda0 	bl	8003ae4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  __HAL_LINKDMA(&hdac1, DMA_Handle1, hdma_dac1_ch1);
 8001fa4:	4b04      	ldr	r3, [pc, #16]	@ (8001fb8 <MX_DAC1_Init+0x8c>)
 8001fa6:	4a06      	ldr	r2, [pc, #24]	@ (8001fc0 <MX_DAC1_Init+0x94>)
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <MX_DAC1_Init+0x94>)
 8001fac:	4a02      	ldr	r2, [pc, #8]	@ (8001fb8 <MX_DAC1_Init+0x8c>)
 8001fae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END DAC1_Init 2 */

}
 8001fb0:	bf00      	nop
 8001fb2:	3730      	adds	r7, #48	@ 0x30
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	200006c4 	.word	0x200006c4
 8001fbc:	50000800 	.word	0x50000800
 8001fc0:	200006ec 	.word	0x200006ec

08001fc4 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08c      	sub	sp, #48	@ 0x30
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001fca:	463b      	mov	r3, r7
 8001fcc:	2230      	movs	r2, #48	@ 0x30
 8001fce:	2100      	movs	r1, #0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f00f feec 	bl	8011dae <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001fd6:	4b16      	ldr	r3, [pc, #88]	@ (8002030 <MX_DAC2_Init+0x6c>)
 8001fd8:	4a16      	ldr	r2, [pc, #88]	@ (8002034 <MX_DAC2_Init+0x70>)
 8001fda:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001fdc:	4814      	ldr	r0, [pc, #80]	@ (8002030 <MX_DAC2_Init+0x6c>)
 8001fde:	f004 fad0 	bl	8006582 <HAL_DAC_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001fe8:	f001 fd7c 	bl	8003ae4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001fec:	2302      	movs	r3, #2
 8001fee:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002000:	2300      	movs	r3, #0
 8002002:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8002008:	2301      	movs	r3, #1
 800200a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800200c:	2300      	movs	r3, #0
 800200e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002010:	463b      	mov	r3, r7
 8002012:	2200      	movs	r2, #0
 8002014:	4619      	mov	r1, r3
 8002016:	4806      	ldr	r0, [pc, #24]	@ (8002030 <MX_DAC2_Init+0x6c>)
 8002018:	f004 fbd0 	bl	80067bc <HAL_DAC_ConfigChannel>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8002022:	f001 fd5f 	bl	8003ae4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8002026:	bf00      	nop
 8002028:	3730      	adds	r7, #48	@ 0x30
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200006d8 	.word	0x200006d8
 8002034:	50000c00 	.word	0x50000c00

08002038 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b098      	sub	sp, #96	@ 0x60
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800203e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800204a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	611a      	str	r2, [r3, #16]
 800205a:	615a      	str	r2, [r3, #20]
 800205c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	2234      	movs	r2, #52	@ 0x34
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f00f fea2 	bl	8011dae <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800206a:	4b3e      	ldr	r3, [pc, #248]	@ (8002164 <MX_TIM1_Init+0x12c>)
 800206c:	4a3e      	ldr	r2, [pc, #248]	@ (8002168 <MX_TIM1_Init+0x130>)
 800206e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002070:	4b3c      	ldr	r3, [pc, #240]	@ (8002164 <MX_TIM1_Init+0x12c>)
 8002072:	2200      	movs	r2, #0
 8002074:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002076:	4b3b      	ldr	r3, [pc, #236]	@ (8002164 <MX_TIM1_Init+0x12c>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210;
 800207c:	4b39      	ldr	r3, [pc, #228]	@ (8002164 <MX_TIM1_Init+0x12c>)
 800207e:	22d2      	movs	r2, #210	@ 0xd2
 8002080:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002082:	4b38      	ldr	r3, [pc, #224]	@ (8002164 <MX_TIM1_Init+0x12c>)
 8002084:	2200      	movs	r2, #0
 8002086:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002088:	4b36      	ldr	r3, [pc, #216]	@ (8002164 <MX_TIM1_Init+0x12c>)
 800208a:	2200      	movs	r2, #0
 800208c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208e:	4b35      	ldr	r3, [pc, #212]	@ (8002164 <MX_TIM1_Init+0x12c>)
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002094:	4833      	ldr	r0, [pc, #204]	@ (8002164 <MX_TIM1_Init+0x12c>)
 8002096:	f008 f866 	bl	800a166 <HAL_TIM_PWM_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80020a0:	f001 fd20 	bl	8003ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a4:	2300      	movs	r3, #0
 80020a6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020a8:	2300      	movs	r3, #0
 80020aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020b4:	4619      	mov	r1, r3
 80020b6:	482b      	ldr	r0, [pc, #172]	@ (8002164 <MX_TIM1_Init+0x12c>)
 80020b8:	f009 fa00 	bl	800b4bc <HAL_TIMEx_MasterConfigSynchronization>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80020c2:	f001 fd0f 	bl	8003ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020c6:	2360      	movs	r3, #96	@ 0x60
 80020c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020ce:	2300      	movs	r3, #0
 80020d0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020d2:	2300      	movs	r3, #0
 80020d4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020e6:	2200      	movs	r2, #0
 80020e8:	4619      	mov	r1, r3
 80020ea:	481e      	ldr	r0, [pc, #120]	@ (8002164 <MX_TIM1_Init+0x12c>)
 80020ec:	f008 faf4 	bl	800a6d8 <HAL_TIM_PWM_ConfigChannel>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80020f6:	f001 fcf5 	bl	8003ae4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 80020fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002164 <MX_TIM1_Init+0x12c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	699a      	ldr	r2, [r3, #24]
 8002100:	4b18      	ldr	r3, [pc, #96]	@ (8002164 <MX_TIM1_Init+0x12c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0208 	bic.w	r2, r2, #8
 8002108:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800211e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002122:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002128:	2300      	movs	r3, #0
 800212a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002130:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002134:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800213a:	2300      	movs	r3, #0
 800213c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	4619      	mov	r1, r3
 8002146:	4807      	ldr	r0, [pc, #28]	@ (8002164 <MX_TIM1_Init+0x12c>)
 8002148:	f009 fa4e 	bl	800b5e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8002152:	f001 fcc7 	bl	8003ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002156:	4803      	ldr	r0, [pc, #12]	@ (8002164 <MX_TIM1_Init+0x12c>)
 8002158:	f002 f864 	bl	8004224 <HAL_TIM_MspPostInit>

}
 800215c:	bf00      	nop
 800215e:	3760      	adds	r7, #96	@ 0x60
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	200007ac 	.word	0x200007ac
 8002168:	40012c00 	.word	0x40012c00

0800216c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08e      	sub	sp, #56	@ 0x38
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002172:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002180:	f107 031c 	add.w	r3, r7, #28
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800218c:	463b      	mov	r3, r7
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
 8002198:	611a      	str	r2, [r3, #16]
 800219a:	615a      	str	r2, [r3, #20]
 800219c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800219e:	4b2d      	ldr	r3, [pc, #180]	@ (8002254 <MX_TIM4_Init+0xe8>)
 80021a0:	4a2d      	ldr	r2, [pc, #180]	@ (8002258 <MX_TIM4_Init+0xec>)
 80021a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80021a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002254 <MX_TIM4_Init+0xe8>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002254 <MX_TIM4_Init+0xe8>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 679;
 80021b0:	4b28      	ldr	r3, [pc, #160]	@ (8002254 <MX_TIM4_Init+0xe8>)
 80021b2:	f240 22a7 	movw	r2, #679	@ 0x2a7
 80021b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b8:	4b26      	ldr	r3, [pc, #152]	@ (8002254 <MX_TIM4_Init+0xe8>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021be:	4b25      	ldr	r3, [pc, #148]	@ (8002254 <MX_TIM4_Init+0xe8>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021c4:	4823      	ldr	r0, [pc, #140]	@ (8002254 <MX_TIM4_Init+0xe8>)
 80021c6:	f007 fe5f 	bl	8009e88 <HAL_TIM_Base_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80021d0:	f001 fc88 	bl	8003ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021de:	4619      	mov	r1, r3
 80021e0:	481c      	ldr	r0, [pc, #112]	@ (8002254 <MX_TIM4_Init+0xe8>)
 80021e2:	f008 fb8d 	bl	800a900 <HAL_TIM_ConfigClockSource>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80021ec:	f001 fc7a 	bl	8003ae4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021f0:	4818      	ldr	r0, [pc, #96]	@ (8002254 <MX_TIM4_Init+0xe8>)
 80021f2:	f007 ffb8 	bl	800a166 <HAL_TIM_PWM_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80021fc:	f001 fc72 	bl	8003ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002204:	2300      	movs	r3, #0
 8002206:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002208:	f107 031c 	add.w	r3, r7, #28
 800220c:	4619      	mov	r1, r3
 800220e:	4811      	ldr	r0, [pc, #68]	@ (8002254 <MX_TIM4_Init+0xe8>)
 8002210:	f009 f954 	bl	800b4bc <HAL_TIMEx_MasterConfigSynchronization>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800221a:	f001 fc63 	bl	8003ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800221e:	2360      	movs	r3, #96	@ 0x60
 8002220:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800222e:	463b      	mov	r3, r7
 8002230:	2200      	movs	r2, #0
 8002232:	4619      	mov	r1, r3
 8002234:	4807      	ldr	r0, [pc, #28]	@ (8002254 <MX_TIM4_Init+0xe8>)
 8002236:	f008 fa4f 	bl	800a6d8 <HAL_TIM_PWM_ConfigChannel>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002240:	f001 fc50 	bl	8003ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002244:	4803      	ldr	r0, [pc, #12]	@ (8002254 <MX_TIM4_Init+0xe8>)
 8002246:	f001 ffed 	bl	8004224 <HAL_TIM_MspPostInit>

}
 800224a:	bf00      	nop
 800224c:	3738      	adds	r7, #56	@ 0x38
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	200007f8 	.word	0x200007f8
 8002258:	40000800 	.word	0x40000800

0800225c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800226c:	4b19      	ldr	r3, [pc, #100]	@ (80022d4 <MX_TIM6_Init+0x78>)
 800226e:	4a1a      	ldr	r2, [pc, #104]	@ (80022d8 <MX_TIM6_Init+0x7c>)
 8002270:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11549;
 8002272:	4b18      	ldr	r3, [pc, #96]	@ (80022d4 <MX_TIM6_Init+0x78>)
 8002274:	f642 521d 	movw	r2, #11549	@ 0x2d1d
 8002278:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227a:	4b16      	ldr	r3, [pc, #88]	@ (80022d4 <MX_TIM6_Init+0x78>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64934;
 8002280:	4b14      	ldr	r3, [pc, #80]	@ (80022d4 <MX_TIM6_Init+0x78>)
 8002282:	f64f 52a6 	movw	r2, #64934	@ 0xfda6
 8002286:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002288:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <MX_TIM6_Init+0x78>)
 800228a:	2200      	movs	r2, #0
 800228c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800228e:	4811      	ldr	r0, [pc, #68]	@ (80022d4 <MX_TIM6_Init+0x78>)
 8002290:	f007 fdfa 	bl	8009e88 <HAL_TIM_Base_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800229a:	f001 fc23 	bl	8003ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	4619      	mov	r1, r3
 80022aa:	480a      	ldr	r0, [pc, #40]	@ (80022d4 <MX_TIM6_Init+0x78>)
 80022ac:	f009 f906 	bl	800b4bc <HAL_TIMEx_MasterConfigSynchronization>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80022b6:	f001 fc15 	bl	8003ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	2036      	movs	r0, #54	@ 0x36
 80022c0:	f004 f92b 	bl	800651a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022c4:	2036      	movs	r0, #54	@ 0x36
 80022c6:	f004 f942 	bl	800654e <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM6_Init 2 */

}
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000844 	.word	0x20000844
 80022d8:	40001000 	.word	0x40001000

080022dc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80022ec:	4b14      	ldr	r3, [pc, #80]	@ (8002340 <MX_TIM7_Init+0x64>)
 80022ee:	4a15      	ldr	r2, [pc, #84]	@ (8002344 <MX_TIM7_Init+0x68>)
 80022f0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 14999;
 80022f2:	4b13      	ldr	r3, [pc, #76]	@ (8002340 <MX_TIM7_Init+0x64>)
 80022f4:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80022f8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fa:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <MX_TIM7_Init+0x64>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8002300:	4b0f      	ldr	r3, [pc, #60]	@ (8002340 <MX_TIM7_Init+0x64>)
 8002302:	2209      	movs	r2, #9
 8002304:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002306:	4b0e      	ldr	r3, [pc, #56]	@ (8002340 <MX_TIM7_Init+0x64>)
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800230c:	480c      	ldr	r0, [pc, #48]	@ (8002340 <MX_TIM7_Init+0x64>)
 800230e:	f007 fdbb 	bl	8009e88 <HAL_TIM_Base_Init>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002318:	f001 fbe4 	bl	8003ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800231c:	2300      	movs	r3, #0
 800231e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	4619      	mov	r1, r3
 8002328:	4805      	ldr	r0, [pc, #20]	@ (8002340 <MX_TIM7_Init+0x64>)
 800232a:	f009 f8c7 	bl	800b4bc <HAL_TIMEx_MasterConfigSynchronization>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002334:	f001 fbd6 	bl	8003ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002338:	bf00      	nop
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000890 	.word	0x20000890
 8002344:	40001400 	.word	0x40001400

08002348 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b098      	sub	sp, #96	@ 0x60
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800234e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800235a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
 8002368:	611a      	str	r2, [r3, #16]
 800236a:	615a      	str	r2, [r3, #20]
 800236c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	2234      	movs	r2, #52	@ 0x34
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f00f fd1a 	bl	8011dae <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800237a:	4b3e      	ldr	r3, [pc, #248]	@ (8002474 <MX_TIM8_Init+0x12c>)
 800237c:	4a3e      	ldr	r2, [pc, #248]	@ (8002478 <MX_TIM8_Init+0x130>)
 800237e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002380:	4b3c      	ldr	r3, [pc, #240]	@ (8002474 <MX_TIM8_Init+0x12c>)
 8002382:	2200      	movs	r2, #0
 8002384:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002386:	4b3b      	ldr	r3, [pc, #236]	@ (8002474 <MX_TIM8_Init+0x12c>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 210;
 800238c:	4b39      	ldr	r3, [pc, #228]	@ (8002474 <MX_TIM8_Init+0x12c>)
 800238e:	22d2      	movs	r2, #210	@ 0xd2
 8002390:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002392:	4b38      	ldr	r3, [pc, #224]	@ (8002474 <MX_TIM8_Init+0x12c>)
 8002394:	2200      	movs	r2, #0
 8002396:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002398:	4b36      	ldr	r3, [pc, #216]	@ (8002474 <MX_TIM8_Init+0x12c>)
 800239a:	2200      	movs	r2, #0
 800239c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800239e:	4b35      	ldr	r3, [pc, #212]	@ (8002474 <MX_TIM8_Init+0x12c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80023a4:	4833      	ldr	r0, [pc, #204]	@ (8002474 <MX_TIM8_Init+0x12c>)
 80023a6:	f007 fede 	bl	800a166 <HAL_TIM_PWM_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80023b0:	f001 fb98 	bl	8003ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b4:	2300      	movs	r3, #0
 80023b6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023b8:	2300      	movs	r3, #0
 80023ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80023c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023c4:	4619      	mov	r1, r3
 80023c6:	482b      	ldr	r0, [pc, #172]	@ (8002474 <MX_TIM8_Init+0x12c>)
 80023c8:	f009 f878 	bl	800b4bc <HAL_TIMEx_MasterConfigSynchronization>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 80023d2:	f001 fb87 	bl	8003ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023d6:	2360      	movs	r3, #96	@ 0x60
 80023d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023de:	2300      	movs	r3, #0
 80023e0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023e2:	2300      	movs	r3, #0
 80023e4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023ea:	2300      	movs	r3, #0
 80023ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023f2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80023f6:	2204      	movs	r2, #4
 80023f8:	4619      	mov	r1, r3
 80023fa:	481e      	ldr	r0, [pc, #120]	@ (8002474 <MX_TIM8_Init+0x12c>)
 80023fc:	f008 f96c 	bl	800a6d8 <HAL_TIM_PWM_ConfigChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8002406:	f001 fb6d 	bl	8003ae4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_2);
 800240a:	4b1a      	ldr	r3, [pc, #104]	@ (8002474 <MX_TIM8_Init+0x12c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699a      	ldr	r2, [r3, #24]
 8002410:	4b18      	ldr	r3, [pc, #96]	@ (8002474 <MX_TIM8_Init+0x12c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002418:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800241a:	2300      	movs	r3, #0
 800241c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800242e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002432:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002438:	2300      	movs	r3, #0
 800243a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800243c:	2300      	movs	r3, #0
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002440:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002444:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800244a:	2300      	movs	r3, #0
 800244c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800244e:	2300      	movs	r3, #0
 8002450:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	4619      	mov	r1, r3
 8002456:	4807      	ldr	r0, [pc, #28]	@ (8002474 <MX_TIM8_Init+0x12c>)
 8002458:	f009 f8c6 	bl	800b5e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 8002462:	f001 fb3f 	bl	8003ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002466:	4803      	ldr	r0, [pc, #12]	@ (8002474 <MX_TIM8_Init+0x12c>)
 8002468:	f001 fedc 	bl	8004224 <HAL_TIM_MspPostInit>

}
 800246c:	bf00      	nop
 800246e:	3760      	adds	r7, #96	@ 0x60
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	200008dc 	.word	0x200008dc
 8002478:	40013400 	.word	0x40013400

0800247c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002482:	f107 0310 	add.w	r3, r7, #16
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002490:	1d3b      	adds	r3, r7, #4
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800249a:	4b1f      	ldr	r3, [pc, #124]	@ (8002518 <MX_TIM15_Init+0x9c>)
 800249c:	4a1f      	ldr	r2, [pc, #124]	@ (800251c <MX_TIM15_Init+0xa0>)
 800249e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1499;
 80024a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002518 <MX_TIM15_Init+0x9c>)
 80024a2:	f240 52db 	movw	r2, #1499	@ 0x5db
 80024a6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002518 <MX_TIM15_Init+0x9c>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 4;
 80024ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002518 <MX_TIM15_Init+0x9c>)
 80024b0:	2204      	movs	r2, #4
 80024b2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b4:	4b18      	ldr	r3, [pc, #96]	@ (8002518 <MX_TIM15_Init+0x9c>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80024ba:	4b17      	ldr	r3, [pc, #92]	@ (8002518 <MX_TIM15_Init+0x9c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c0:	4b15      	ldr	r3, [pc, #84]	@ (8002518 <MX_TIM15_Init+0x9c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80024c6:	4814      	ldr	r0, [pc, #80]	@ (8002518 <MX_TIM15_Init+0x9c>)
 80024c8:	f007 fcde 	bl	8009e88 <HAL_TIM_Base_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80024d2:	f001 fb07 	bl	8003ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	4619      	mov	r1, r3
 80024e2:	480d      	ldr	r0, [pc, #52]	@ (8002518 <MX_TIM15_Init+0x9c>)
 80024e4:	f008 fa0c 	bl	800a900 <HAL_TIM_ConfigClockSource>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80024ee:	f001 faf9 	bl	8003ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	4619      	mov	r1, r3
 80024fe:	4806      	ldr	r0, [pc, #24]	@ (8002518 <MX_TIM15_Init+0x9c>)
 8002500:	f008 ffdc 	bl	800b4bc <HAL_TIMEx_MasterConfigSynchronization>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800250a:	f001 faeb 	bl	8003ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800250e:	bf00      	nop
 8002510:	3720      	adds	r7, #32
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000928 	.word	0x20000928
 800251c:	40014000 	.word	0x40014000

08002520 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002524:	4b0f      	ldr	r3, [pc, #60]	@ (8002564 <MX_TIM16_Init+0x44>)
 8002526:	4a10      	ldr	r2, [pc, #64]	@ (8002568 <MX_TIM16_Init+0x48>)
 8002528:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 14999;
 800252a:	4b0e      	ldr	r3, [pc, #56]	@ (8002564 <MX_TIM16_Init+0x44>)
 800252c:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8002530:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002532:	4b0c      	ldr	r3, [pc, #48]	@ (8002564 <MX_TIM16_Init+0x44>)
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 8002538:	4b0a      	ldr	r3, [pc, #40]	@ (8002564 <MX_TIM16_Init+0x44>)
 800253a:	2209      	movs	r2, #9
 800253c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800253e:	4b09      	ldr	r3, [pc, #36]	@ (8002564 <MX_TIM16_Init+0x44>)
 8002540:	2200      	movs	r2, #0
 8002542:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002544:	4b07      	ldr	r3, [pc, #28]	@ (8002564 <MX_TIM16_Init+0x44>)
 8002546:	2200      	movs	r2, #0
 8002548:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800254a:	4b06      	ldr	r3, [pc, #24]	@ (8002564 <MX_TIM16_Init+0x44>)
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002550:	4804      	ldr	r0, [pc, #16]	@ (8002564 <MX_TIM16_Init+0x44>)
 8002552:	f007 fc99 	bl	8009e88 <HAL_TIM_Base_Init>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800255c:	f001 fac2 	bl	8003ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000974 	.word	0x20000974
 8002568:	40014400 	.word	0x40014400

0800256c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002570:	4b22      	ldr	r3, [pc, #136]	@ (80025fc <MX_UART4_Init+0x90>)
 8002572:	4a23      	ldr	r2, [pc, #140]	@ (8002600 <MX_UART4_Init+0x94>)
 8002574:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002576:	4b21      	ldr	r3, [pc, #132]	@ (80025fc <MX_UART4_Init+0x90>)
 8002578:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800257c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800257e:	4b1f      	ldr	r3, [pc, #124]	@ (80025fc <MX_UART4_Init+0x90>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002584:	4b1d      	ldr	r3, [pc, #116]	@ (80025fc <MX_UART4_Init+0x90>)
 8002586:	2200      	movs	r2, #0
 8002588:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800258a:	4b1c      	ldr	r3, [pc, #112]	@ (80025fc <MX_UART4_Init+0x90>)
 800258c:	2200      	movs	r2, #0
 800258e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002590:	4b1a      	ldr	r3, [pc, #104]	@ (80025fc <MX_UART4_Init+0x90>)
 8002592:	220c      	movs	r2, #12
 8002594:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002596:	4b19      	ldr	r3, [pc, #100]	@ (80025fc <MX_UART4_Init+0x90>)
 8002598:	2200      	movs	r2, #0
 800259a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800259c:	4b17      	ldr	r3, [pc, #92]	@ (80025fc <MX_UART4_Init+0x90>)
 800259e:	2200      	movs	r2, #0
 80025a0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025a2:	4b16      	ldr	r3, [pc, #88]	@ (80025fc <MX_UART4_Init+0x90>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025a8:	4b14      	ldr	r3, [pc, #80]	@ (80025fc <MX_UART4_Init+0x90>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025ae:	4b13      	ldr	r3, [pc, #76]	@ (80025fc <MX_UART4_Init+0x90>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80025b4:	4811      	ldr	r0, [pc, #68]	@ (80025fc <MX_UART4_Init+0x90>)
 80025b6:	f009 f8f1 	bl	800b79c <HAL_UART_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80025c0:	f001 fa90 	bl	8003ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025c4:	2100      	movs	r1, #0
 80025c6:	480d      	ldr	r0, [pc, #52]	@ (80025fc <MX_UART4_Init+0x90>)
 80025c8:	f009 fe8c 	bl	800c2e4 <HAL_UARTEx_SetTxFifoThreshold>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80025d2:	f001 fa87 	bl	8003ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025d6:	2100      	movs	r1, #0
 80025d8:	4808      	ldr	r0, [pc, #32]	@ (80025fc <MX_UART4_Init+0x90>)
 80025da:	f009 fec1 	bl	800c360 <HAL_UARTEx_SetRxFifoThreshold>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80025e4:	f001 fa7e 	bl	8003ae4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80025e8:	4804      	ldr	r0, [pc, #16]	@ (80025fc <MX_UART4_Init+0x90>)
 80025ea:	f009 fe42 	bl	800c272 <HAL_UARTEx_DisableFifoMode>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80025f4:	f001 fa76 	bl	8003ae4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80025f8:	bf00      	nop
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	200009c0 	.word	0x200009c0
 8002600:	40004c00 	.word	0x40004c00

08002604 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800260a:	4b22      	ldr	r3, [pc, #136]	@ (8002694 <MX_DMA_Init+0x90>)
 800260c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800260e:	4a21      	ldr	r2, [pc, #132]	@ (8002694 <MX_DMA_Init+0x90>)
 8002610:	f043 0304 	orr.w	r3, r3, #4
 8002614:	6493      	str	r3, [r2, #72]	@ 0x48
 8002616:	4b1f      	ldr	r3, [pc, #124]	@ (8002694 <MX_DMA_Init+0x90>)
 8002618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	607b      	str	r3, [r7, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002622:	4b1c      	ldr	r3, [pc, #112]	@ (8002694 <MX_DMA_Init+0x90>)
 8002624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002626:	4a1b      	ldr	r2, [pc, #108]	@ (8002694 <MX_DMA_Init+0x90>)
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	6493      	str	r3, [r2, #72]	@ 0x48
 800262e:	4b19      	ldr	r3, [pc, #100]	@ (8002694 <MX_DMA_Init+0x90>)
 8002630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	2100      	movs	r1, #0
 800263e:	200b      	movs	r0, #11
 8002640:	f003 ff6b 	bl	800651a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002644:	200b      	movs	r0, #11
 8002646:	f003 ff82 	bl	800654e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	2100      	movs	r1, #0
 800264e:	200c      	movs	r0, #12
 8002650:	f003 ff63 	bl	800651a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002654:	200c      	movs	r0, #12
 8002656:	f003 ff7a 	bl	800654e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2100      	movs	r1, #0
 800265e:	200d      	movs	r0, #13
 8002660:	f003 ff5b 	bl	800651a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002664:	200d      	movs	r0, #13
 8002666:	f003 ff72 	bl	800654e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	200e      	movs	r0, #14
 8002670:	f003 ff53 	bl	800651a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002674:	200e      	movs	r0, #14
 8002676:	f003 ff6a 	bl	800654e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2100      	movs	r1, #0
 800267e:	200f      	movs	r0, #15
 8002680:	f003 ff4b 	bl	800651a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002684:	200f      	movs	r0, #15
 8002686:	f003 ff62 	bl	800654e <HAL_NVIC_EnableIRQ>

}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000

08002698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08c      	sub	sp, #48	@ 0x30
 800269c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269e:	f107 031c 	add.w	r3, r7, #28
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	60da      	str	r2, [r3, #12]
 80026ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026ae:	4b9a      	ldr	r3, [pc, #616]	@ (8002918 <MX_GPIO_Init+0x280>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b2:	4a99      	ldr	r2, [pc, #612]	@ (8002918 <MX_GPIO_Init+0x280>)
 80026b4:	f043 0310 	orr.w	r3, r3, #16
 80026b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ba:	4b97      	ldr	r3, [pc, #604]	@ (8002918 <MX_GPIO_Init+0x280>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026be:	f003 0310 	and.w	r3, r3, #16
 80026c2:	61bb      	str	r3, [r7, #24]
 80026c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c6:	4b94      	ldr	r3, [pc, #592]	@ (8002918 <MX_GPIO_Init+0x280>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ca:	4a93      	ldr	r2, [pc, #588]	@ (8002918 <MX_GPIO_Init+0x280>)
 80026cc:	f043 0304 	orr.w	r3, r3, #4
 80026d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026d2:	4b91      	ldr	r3, [pc, #580]	@ (8002918 <MX_GPIO_Init+0x280>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026de:	4b8e      	ldr	r3, [pc, #568]	@ (8002918 <MX_GPIO_Init+0x280>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e2:	4a8d      	ldr	r2, [pc, #564]	@ (8002918 <MX_GPIO_Init+0x280>)
 80026e4:	f043 0320 	orr.w	r3, r3, #32
 80026e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ea:	4b8b      	ldr	r3, [pc, #556]	@ (8002918 <MX_GPIO_Init+0x280>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f6:	4b88      	ldr	r3, [pc, #544]	@ (8002918 <MX_GPIO_Init+0x280>)
 80026f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fa:	4a87      	ldr	r2, [pc, #540]	@ (8002918 <MX_GPIO_Init+0x280>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002702:	4b85      	ldr	r3, [pc, #532]	@ (8002918 <MX_GPIO_Init+0x280>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800270e:	4b82      	ldr	r3, [pc, #520]	@ (8002918 <MX_GPIO_Init+0x280>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002712:	4a81      	ldr	r2, [pc, #516]	@ (8002918 <MX_GPIO_Init+0x280>)
 8002714:	f043 0302 	orr.w	r3, r3, #2
 8002718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800271a:	4b7f      	ldr	r3, [pc, #508]	@ (8002918 <MX_GPIO_Init+0x280>)
 800271c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002726:	4b7c      	ldr	r3, [pc, #496]	@ (8002918 <MX_GPIO_Init+0x280>)
 8002728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272a:	4a7b      	ldr	r2, [pc, #492]	@ (8002918 <MX_GPIO_Init+0x280>)
 800272c:	f043 0308 	orr.w	r3, r3, #8
 8002730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002732:	4b79      	ldr	r3, [pc, #484]	@ (8002918 <MX_GPIO_Init+0x280>)
 8002734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	607b      	str	r3, [r7, #4]
 800273c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 800273e:	2200      	movs	r2, #0
 8002740:	2120      	movs	r1, #32
 8002742:	4876      	ldr	r0, [pc, #472]	@ (800291c <MX_GPIO_Init+0x284>)
 8002744:	f004 fe08 	bl	8007358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
 8002748:	2201      	movs	r2, #1
 800274a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800274e:	4874      	ldr	r0, [pc, #464]	@ (8002920 <MX_GPIO_Init+0x288>)
 8002750:	f004 fe02 	bl	8007358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, GPIO_PIN_RESET);
 8002754:	2200      	movs	r2, #0
 8002756:	2104      	movs	r1, #4
 8002758:	4871      	ldr	r0, [pc, #452]	@ (8002920 <MX_GPIO_Init+0x288>)
 800275a:	f004 fdfd 	bl	8007358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 800275e:	2200      	movs	r2, #0
 8002760:	2120      	movs	r1, #32
 8002762:	4870      	ldr	r0, [pc, #448]	@ (8002924 <MX_GPIO_Init+0x28c>)
 8002764:	f004 fdf8 	bl	8007358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, NOT_RST_2_Pin|CS_OCD_1_Pin, GPIO_PIN_SET);
 8002768:	2201      	movs	r2, #1
 800276a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800276e:	486b      	ldr	r0, [pc, #428]	@ (800291c <MX_GPIO_Init+0x284>)
 8002770:	f004 fdf2 	bl	8007358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port, NOT_RST_4_Pin, GPIO_PIN_SET);
 8002774:	2201      	movs	r2, #1
 8002776:	2140      	movs	r1, #64	@ 0x40
 8002778:	486a      	ldr	r0, [pc, #424]	@ (8002924 <MX_GPIO_Init+0x28c>)
 800277a:	f004 fded 	bl	8007358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port, NOT_RST_3_Pin, GPIO_PIN_SET);
 800277e:	2201      	movs	r2, #1
 8002780:	2101      	movs	r1, #1
 8002782:	4869      	ldr	r0, [pc, #420]	@ (8002928 <MX_GPIO_Init+0x290>)
 8002784:	f004 fde8 	bl	8007358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port, NOT_RST_1_Pin, GPIO_PIN_SET);
 8002788:	2201      	movs	r2, #1
 800278a:	2180      	movs	r1, #128	@ 0x80
 800278c:	4867      	ldr	r0, [pc, #412]	@ (800292c <MX_GPIO_Init+0x294>)
 800278e:	f004 fde3 	bl	8007358 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NOT_FAULT_1_Pin CS_FAULT_2_Pin NOT_FAULT_2_Pin CS_FAULT_1_Pin */
  GPIO_InitStruct.Pin = NOT_FAULT_1_Pin|CS_FAULT_2_Pin|NOT_FAULT_2_Pin|CS_FAULT_1_Pin;
 8002792:	f640 0315 	movw	r3, #2069	@ 0x815
 8002796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002798:	2300      	movs	r3, #0
 800279a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027a0:	f107 031c 	add.w	r3, r7, #28
 80027a4:	4619      	mov	r1, r3
 80027a6:	485d      	ldr	r0, [pc, #372]	@ (800291c <MX_GPIO_Init+0x284>)
 80027a8:	f004 fc3c 	bl	8007024 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_INTERLOCK_Pin */
  GPIO_InitStruct.Pin = RESET_INTERLOCK_Pin;
 80027ac:	2320      	movs	r3, #32
 80027ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b0:	2301      	movs	r3, #1
 80027b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_INTERLOCK_GPIO_Port, &GPIO_InitStruct);
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	4619      	mov	r1, r3
 80027c2:	4856      	ldr	r0, [pc, #344]	@ (800291c <MX_GPIO_Init+0x284>)
 80027c4:	f004 fc2e 	bl	8007024 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_OCD_2_Pin */
  GPIO_InitStruct.Pin = CS_OCD_2_Pin;
 80027c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80027ce:	2311      	movs	r3, #17
 80027d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_OCD_2_GPIO_Port, &GPIO_InitStruct);
 80027da:	f107 031c 	add.w	r3, r7, #28
 80027de:	4619      	mov	r1, r3
 80027e0:	484f      	ldr	r0, [pc, #316]	@ (8002920 <MX_GPIO_Init+0x288>)
 80027e2:	f004 fc1f 	bl	8007024 <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_3_Pin */
  GPIO_InitStruct.Pin = READY_3_Pin;
 80027e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ec:	2300      	movs	r3, #0
 80027ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_3_GPIO_Port, &GPIO_InitStruct);
 80027f4:	f107 031c 	add.w	r3, r7, #28
 80027f8:	4619      	mov	r1, r3
 80027fa:	4849      	ldr	r0, [pc, #292]	@ (8002920 <MX_GPIO_Init+0x288>)
 80027fc:	f004 fc12 	bl	8007024 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERLOCK_Pin NOT_FAULT_4_Pin */
  GPIO_InitStruct.Pin = INTERLOCK_Pin|NOT_FAULT_4_Pin;
 8002800:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800280e:	f107 031c 	add.w	r3, r7, #28
 8002812:	4619      	mov	r1, r3
 8002814:	4843      	ldr	r0, [pc, #268]	@ (8002924 <MX_GPIO_Init+0x28c>)
 8002816:	f004 fc05 	bl	8007024 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_FPGA_Pin */
  GPIO_InitStruct.Pin = RESET_FPGA_Pin;
 800281a:	2304      	movs	r3, #4
 800281c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800281e:	2301      	movs	r3, #1
 8002820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002826:	2300      	movs	r3, #0
 8002828:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_FPGA_GPIO_Port, &GPIO_InitStruct);
 800282a:	f107 031c 	add.w	r3, r7, #28
 800282e:	4619      	mov	r1, r3
 8002830:	483b      	ldr	r0, [pc, #236]	@ (8002920 <MX_GPIO_Init+0x288>)
 8002832:	f004 fbf7 	bl	8007024 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_STOP_FPGA_Pin */
  GPIO_InitStruct.Pin = START_STOP_FPGA_Pin;
 8002836:	2320      	movs	r3, #32
 8002838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283a:	2301      	movs	r3, #1
 800283c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002842:	2300      	movs	r3, #0
 8002844:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(START_STOP_FPGA_GPIO_Port, &GPIO_InitStruct);
 8002846:	f107 031c 	add.w	r3, r7, #28
 800284a:	4619      	mov	r1, r3
 800284c:	4835      	ldr	r0, [pc, #212]	@ (8002924 <MX_GPIO_Init+0x28c>)
 800284e:	f004 fbe9 	bl	8007024 <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_2_Pin */
  GPIO_InitStruct.Pin = READY_2_Pin;
 8002852:	2301      	movs	r3, #1
 8002854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002856:	2300      	movs	r3, #0
 8002858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_2_GPIO_Port, &GPIO_InitStruct);
 800285e:	f107 031c 	add.w	r3, r7, #28
 8002862:	4619      	mov	r1, r3
 8002864:	4831      	ldr	r0, [pc, #196]	@ (800292c <MX_GPIO_Init+0x294>)
 8002866:	f004 fbdd 	bl	8007024 <HAL_GPIO_Init>

  /*Configure GPIO pins : NOT_RST_2_Pin CS_OCD_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_2_Pin|CS_OCD_1_Pin;
 800286a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800286e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002870:	2311      	movs	r3, #17
 8002872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002878:	2300      	movs	r3, #0
 800287a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800287c:	f107 031c 	add.w	r3, r7, #28
 8002880:	4619      	mov	r1, r3
 8002882:	4826      	ldr	r0, [pc, #152]	@ (800291c <MX_GPIO_Init+0x284>)
 8002884:	f004 fbce 	bl	8007024 <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_4_Pin */
  GPIO_InitStruct.Pin = NOT_RST_4_Pin;
 8002888:	2340      	movs	r3, #64	@ 0x40
 800288a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800288c:	2311      	movs	r3, #17
 800288e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002894:	2300      	movs	r3, #0
 8002896:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_4_GPIO_Port, &GPIO_InitStruct);
 8002898:	f107 031c 	add.w	r3, r7, #28
 800289c:	4619      	mov	r1, r3
 800289e:	4821      	ldr	r0, [pc, #132]	@ (8002924 <MX_GPIO_Init+0x28c>)
 80028a0:	f004 fbc0 	bl	8007024 <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_4_Pin */
  GPIO_InitStruct.Pin = READY_4_Pin;
 80028a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028aa:	2300      	movs	r3, #0
 80028ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_4_GPIO_Port, &GPIO_InitStruct);
 80028b2:	f107 031c 	add.w	r3, r7, #28
 80028b6:	4619      	mov	r1, r3
 80028b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028bc:	f004 fbb2 	bl	8007024 <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_3_Pin */
  GPIO_InitStruct.Pin = NOT_RST_3_Pin;
 80028c0:	2301      	movs	r3, #1
 80028c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80028c4:	2311      	movs	r3, #17
 80028c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028cc:	2300      	movs	r3, #0
 80028ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_3_GPIO_Port, &GPIO_InitStruct);
 80028d0:	f107 031c 	add.w	r3, r7, #28
 80028d4:	4619      	mov	r1, r3
 80028d6:	4814      	ldr	r0, [pc, #80]	@ (8002928 <MX_GPIO_Init+0x290>)
 80028d8:	f004 fba4 	bl	8007024 <HAL_GPIO_Init>

  /*Configure GPIO pins : READY_1_Pin PD5 NOT_FAULT_3_Pin */
  GPIO_InitStruct.Pin = READY_1_Pin|GPIO_PIN_5|NOT_FAULT_3_Pin;
 80028dc:	2370      	movs	r3, #112	@ 0x70
 80028de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028e0:	2300      	movs	r3, #0
 80028e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028e8:	f107 031c 	add.w	r3, r7, #28
 80028ec:	4619      	mov	r1, r3
 80028ee:	480e      	ldr	r0, [pc, #56]	@ (8002928 <MX_GPIO_Init+0x290>)
 80028f0:	f004 fb98 	bl	8007024 <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_1_Pin;
 80028f4:	2380      	movs	r3, #128	@ 0x80
 80028f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80028f8:	2311      	movs	r3, #17
 80028fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002900:	2300      	movs	r3, #0
 8002902:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_1_GPIO_Port, &GPIO_InitStruct);
 8002904:	f107 031c 	add.w	r3, r7, #28
 8002908:	4619      	mov	r1, r3
 800290a:	4808      	ldr	r0, [pc, #32]	@ (800292c <MX_GPIO_Init+0x294>)
 800290c:	f004 fb8a 	bl	8007024 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002910:	bf00      	nop
 8002912:	3730      	adds	r7, #48	@ 0x30
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000
 800291c:	48001000 	.word	0x48001000
 8002920:	48001400 	.word	0x48001400
 8002924:	48000800 	.word	0x48000800
 8002928:	48000c00 	.word	0x48000c00
 800292c:	48000400 	.word	0x48000400

08002930 <handle_event>:

/* USER CODE BEGIN 4 */

ConverterState handle_event(ConverterState currentState, ConverterEvent event) {
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	460a      	mov	r2, r1
 800293a:	71fb      	strb	r3, [r7, #7]
 800293c:	4613      	mov	r3, r2
 800293e:	71bb      	strb	r3, [r7, #6]
    switch (currentState) {
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	2b04      	cmp	r3, #4
 8002944:	d839      	bhi.n	80029ba <handle_event+0x8a>
 8002946:	a201      	add	r2, pc, #4	@ (adr r2, 800294c <handle_event+0x1c>)
 8002948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294c:	08002961 	.word	0x08002961
 8002950:	0800296f 	.word	0x0800296f
 8002954:	0800297d 	.word	0x0800297d
 8002958:	08002999 	.word	0x08002999
 800295c:	080029a7 	.word	0x080029a7
        case STATE_INIT:
            if (event == EVENT_START)
 8002960:	79bb      	ldrb	r3, [r7, #6]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d12b      	bne.n	80029be <handle_event+0x8e>
            {

            	currentState = STATE_STANDBY;
 8002966:	2301      	movs	r3, #1
 8002968:	71fb      	strb	r3, [r7, #7]
                return STATE_STANDBY;
 800296a:	2301      	movs	r3, #1
 800296c:	e031      	b.n	80029d2 <handle_event+0xa2>
            }
            break;

        case STATE_STANDBY:
            if (event == EVENT_START)
 800296e:	79bb      	ldrb	r3, [r7, #6]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d126      	bne.n	80029c2 <handle_event+0x92>
            {
            	currentState = STATE_REGULATION;
 8002974:	2302      	movs	r3, #2
 8002976:	71fb      	strb	r3, [r7, #7]
                return STATE_REGULATION;
 8002978:	2302      	movs	r3, #2
 800297a:	e02a      	b.n	80029d2 <handle_event+0xa2>
            }
            break;

        case STATE_REGULATION:
        	//USB_SendString("State: INIT -> RUNNING\r\n");
            if (event == EVENT_FAULT)
 800297c:	79bb      	ldrb	r3, [r7, #6]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d103      	bne.n	800298a <handle_event+0x5a>
            {
            	currentState = STATE_FAULT;
 8002982:	2303      	movs	r3, #3
 8002984:	71fb      	strb	r3, [r7, #7]
                return STATE_FAULT;
 8002986:	2303      	movs	r3, #3
 8002988:	e023      	b.n	80029d2 <handle_event+0xa2>

            } else if (event == EVENT_SHUTDOWN)
 800298a:	79bb      	ldrb	r3, [r7, #6]
 800298c:	2b03      	cmp	r3, #3
 800298e:	d11a      	bne.n	80029c6 <handle_event+0x96>
            {
            	currentState = STATE_SHUTDOWN;
 8002990:	2304      	movs	r3, #4
 8002992:	71fb      	strb	r3, [r7, #7]
                return STATE_SHUTDOWN;
 8002994:	2304      	movs	r3, #4
 8002996:	e01c      	b.n	80029d2 <handle_event+0xa2>
            }

            break;

        case STATE_FAULT:
            if (event == EVENT_CLEAR_FAULT)
 8002998:	79bb      	ldrb	r3, [r7, #6]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d115      	bne.n	80029ca <handle_event+0x9a>
            {
            	currentState = STATE_STANDBY;
 800299e:	2301      	movs	r3, #1
 80029a0:	71fb      	strb	r3, [r7, #7]
                return STATE_STANDBY;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e015      	b.n	80029d2 <handle_event+0xa2>
            }
            break;

        case STATE_SHUTDOWN:
            if (event == EVENT_START)
 80029a6:	79bb      	ldrb	r3, [r7, #6]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d110      	bne.n	80029ce <handle_event+0x9e>
            {
            	once = 0;
 80029ac:	4b0c      	ldr	r3, [pc, #48]	@ (80029e0 <handle_event+0xb0>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
            	currentState = STATE_REGULATION;
 80029b2:	2302      	movs	r3, #2
 80029b4:	71fb      	strb	r3, [r7, #7]
                return STATE_REGULATION;
 80029b6:	2302      	movs	r3, #2
 80029b8:	e00b      	b.n	80029d2 <handle_event+0xa2>
            }
            break;
        default:
            break;
 80029ba:	bf00      	nop
 80029bc:	e008      	b.n	80029d0 <handle_event+0xa0>
            break;
 80029be:	bf00      	nop
 80029c0:	e006      	b.n	80029d0 <handle_event+0xa0>
            break;
 80029c2:	bf00      	nop
 80029c4:	e004      	b.n	80029d0 <handle_event+0xa0>
            break;
 80029c6:	bf00      	nop
 80029c8:	e002      	b.n	80029d0 <handle_event+0xa0>
            break;
 80029ca:	bf00      	nop
 80029cc:	e000      	b.n	80029d0 <handle_event+0xa0>
            break;
 80029ce:	bf00      	nop
    }
    return currentState; // No state change
 80029d0:	79fb      	ldrb	r3, [r7, #7]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	20000b80 	.word	0x20000b80

080029e4 <Set_PWM_DutyCycle>:
       // float TEMPERATURE_AFTER_CONVERSION_FROM_ADC = (((adc_value/4096.0f)*3.3f) - 0.4f)/0.0195f;
       // return TEMPERATURE_AFTER_CONVERSION_FROM_ADC;

}

void Set_PWM_DutyCycle(uint32_t dutyCycle) { // dutycyle for FAN SPEED CONTROl
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
    if (dutyCycle > 100) dutyCycle = 100;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b64      	cmp	r3, #100	@ 0x64
 80029f0:	d901      	bls.n	80029f6 <Set_PWM_DutyCycle+0x12>
 80029f2:	2364      	movs	r3, #100	@ 0x64
 80029f4:	607b      	str	r3, [r7, #4]
    uint32_t pulse = (htim4.Init.Period + 1) * dutyCycle / 100 - 1;
 80029f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002a24 <Set_PWM_DutyCycle+0x40>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	3301      	adds	r3, #1
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
 8002a02:	4a09      	ldr	r2, [pc, #36]	@ (8002a28 <Set_PWM_DutyCycle+0x44>)
 8002a04:	fba2 2303 	umull	r2, r3, r2, r3
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	60fb      	str	r3, [r7, #12]
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 8002a0e:	4b05      	ldr	r3, [pc, #20]	@ (8002a24 <Set_PWM_DutyCycle+0x40>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002a16:	bf00      	nop
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	200007f8 	.word	0x200007f8
 8002a28:	51eb851f 	.word	0x51eb851f
 8002a2c:	00000000 	.word	0x00000000

08002a30 <HAL_ADC_ConvCpltCallback>:
//ADC save to array and moving average
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC5)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a20      	ldr	r2, [pc, #128]	@ (8002ac0 <HAL_ADC_ConvCpltCallback+0x90>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d135      	bne.n	8002aae <HAL_ADC_ConvCpltCallback+0x7e>
		    {
		        uint32_t sum = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 8002a46:	2300      	movs	r3, #0
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	e00b      	b.n	8002a64 <HAL_ADC_ConvCpltCallback+0x34>
		        {
		            sum += adc5_dma_buffer[i];
 8002a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac4 <HAL_ADC_ConvCpltCallback+0x94>)
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	3301      	adds	r3, #1
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b09      	cmp	r3, #9
 8002a68:	ddf0      	ble.n	8002a4c <HAL_ADC_ConvCpltCallback+0x1c>
		        }
		        adc_moving_average = ((sum / MA_WINDOW_SIZE)*3300)/4096;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4a16      	ldr	r2, [pc, #88]	@ (8002ac8 <HAL_ADC_ConvCpltCallback+0x98>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	08db      	lsrs	r3, r3, #3
 8002a74:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8002a78:	fb02 f303 	mul.w	r3, r2, r3
 8002a7c:	0b1b      	lsrs	r3, r3, #12
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	4b12      	ldr	r3, [pc, #72]	@ (8002acc <HAL_ADC_ConvCpltCallback+0x9c>)
 8002a82:	801a      	strh	r2, [r3, #0]
		        imax2_sum=(adc_moving_average-1450)*0.384;
 8002a84:	4b11      	ldr	r3, [pc, #68]	@ (8002acc <HAL_ADC_ConvCpltCallback+0x9c>)
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	f2a3 53aa 	subw	r3, r3, #1450	@ 0x5aa
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fd fd71 	bl	8000574 <__aeabi_i2d>
 8002a92:	a309      	add	r3, pc, #36	@ (adr r3, 8002ab8 <HAL_ADC_ConvCpltCallback+0x88>)
 8002a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a98:	f7fd fdd6 	bl	8000648 <__aeabi_dmul>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f7fe f8a8 	bl	8000bf8 <__aeabi_d2uiz>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	4a09      	ldr	r2, [pc, #36]	@ (8002ad0 <HAL_ADC_ConvCpltCallback+0xa0>)
 8002aac:	6013      	str	r3, [r2, #0]
		        // Restart the DMA transfer
		       // HAL_ADC_Start_DMA(hadc, (uint32_t*)adc5_dma_buffer, MA_WINDOW_SIZE);
		    }


}
 8002aae:	bf00      	nop
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	bc6a7efa 	.word	0xbc6a7efa
 8002abc:	3fd89374 	.word	0x3fd89374
 8002ac0:	50000600 	.word	0x50000600
 8002ac4:	20000a90 	.word	0x20000a90
 8002ac8:	cccccccd 	.word	0xcccccccd
 8002acc:	20000aa4 	.word	0x20000aa4
 8002ad0:	20000a8c 	.word	0x20000a8c

08002ad4 <Update_PWM_Frequency>:
        }
    }
}

void Update_PWM_Frequency(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t frequency)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	@ 0x24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
	 uint32_t timer_clock = 150000000;  // Assuming a 150 MHz timer clock
 8002ae0:	4b33      	ldr	r3, [pc, #204]	@ (8002bb0 <Update_PWM_Frequency+0xdc>)
 8002ae2:	61bb      	str	r3, [r7, #24]
	    uint32_t prescaler = htim->Init.Prescaler + 1;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	617b      	str	r3, [r7, #20]
	    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	61fb      	str	r3, [r7, #28]

	    // Ensure period is within valid range
	    if (period > 65535) {
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b04:	d314      	bcc.n	8002b30 <Update_PWM_Frequency+0x5c>
	        // Adjust prescaler to bring period within range
	        prescaler = (prescaler * (period / 65536)) + 1;
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	0c1b      	lsrs	r3, r3, #16
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	fb02 f303 	mul.w	r3, r2, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
	        period = (timer_clock / (prescaler * frequency)) - 1;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	fb02 f303 	mul.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	61fb      	str	r3, [r7, #28]
	        __HAL_TIM_SET_PRESCALER(htim, prescaler - 1);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	3a01      	subs	r2, #1
 8002b2e:	629a      	str	r2, [r3, #40]	@ 0x28
	    }

	    // Update the period register (ARR) with double buffering
	    __HAL_TIM_SET_AUTORELOAD(htim, period);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	60da      	str	r2, [r3, #12]

	    // Set the duty cycle to approximately 50%
	    uint32_t pulse = period / 2;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	085b      	lsrs	r3, r3, #1
 8002b42:	613b      	str	r3, [r7, #16]
	    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d104      	bne.n	8002b54 <Update_PWM_Frequency+0x80>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b52:	e023      	b.n	8002b9c <Update_PWM_Frequency+0xc8>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d104      	bne.n	8002b64 <Update_PWM_Frequency+0x90>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	6393      	str	r3, [r2, #56]	@ 0x38
 8002b62:	e01b      	b.n	8002b9c <Update_PWM_Frequency+0xc8>
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d104      	bne.n	8002b74 <Update_PWM_Frequency+0xa0>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002b72:	e013      	b.n	8002b9c <Update_PWM_Frequency+0xc8>
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b0c      	cmp	r3, #12
 8002b78:	d104      	bne.n	8002b84 <Update_PWM_Frequency+0xb0>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b82:	e00b      	b.n	8002b9c <Update_PWM_Frequency+0xc8>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b10      	cmp	r3, #16
 8002b88:	d104      	bne.n	8002b94 <Update_PWM_Frequency+0xc0>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	6493      	str	r3, [r2, #72]	@ 0x48
 8002b92:	e003      	b.n	8002b9c <Update_PWM_Frequency+0xc8>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	64d3      	str	r3, [r2, #76]	@ 0x4c

	    // Manually generate an update event by setting the UG bit in the EGR register
	    htim->Instance->EGR = TIM_EGR_UG;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_AUTORELOAD(htim, period);

    // Restart the timer PWM generation
    HAL_TIM_PWM_Stop(htim, channel);
    HAL_TIM_PWM_Start(htim, channel);*/
}
 8002ba4:	bf00      	nop
 8002ba6:	3724      	adds	r7, #36	@ 0x24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	08f0d180 	.word	0x08f0d180

08002bb4 <Check_Faults>:
	        dac_buffer[i] = (((1/3.3)*res12_b) + ((0.5/3.3)*res12_b) * sin(2 * M_PI * i/BUFFER_SIZE));
	    }
}

uint8_t Check_Faults()
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
	// Faults pins are from gate driver and they are active pull down
	// 4 fault pins from 4 gate driver + 2 fault pins from  2 currents sensors  = 6 pins
	if(HAL_GPIO_ReadPin(CS_FAULT_1_GPIO_Port, CS_FAULT_1_Pin) && HAL_GPIO_ReadPin(CS_FAULT_2_GPIO_Port, CS_FAULT_2_Pin)
 8002bb8:	2101      	movs	r1, #1
 8002bba:	4818      	ldr	r0, [pc, #96]	@ (8002c1c <Check_Faults+0x68>)
 8002bbc:	f004 fbb4 	bl	8007328 <HAL_GPIO_ReadPin>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d026      	beq.n	8002c14 <Check_Faults+0x60>
 8002bc6:	2110      	movs	r1, #16
 8002bc8:	4814      	ldr	r0, [pc, #80]	@ (8002c1c <Check_Faults+0x68>)
 8002bca:	f004 fbad 	bl	8007328 <HAL_GPIO_ReadPin>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01f      	beq.n	8002c14 <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_1_GPIO_Port, NOT_FAULT_1_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_2_GPIO_Port, NOT_FAULT_2_Pin)
 8002bd4:	2104      	movs	r1, #4
 8002bd6:	4811      	ldr	r0, [pc, #68]	@ (8002c1c <Check_Faults+0x68>)
 8002bd8:	f004 fba6 	bl	8007328 <HAL_GPIO_ReadPin>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d018      	beq.n	8002c14 <Check_Faults+0x60>
 8002be2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002be6:	480d      	ldr	r0, [pc, #52]	@ (8002c1c <Check_Faults+0x68>)
 8002be8:	f004 fb9e 	bl	8007328 <HAL_GPIO_ReadPin>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d010      	beq.n	8002c14 <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_3_GPIO_Port, NOT_FAULT_3_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_4_GPIO_Port, NOT_FAULT_4_Pin) )
 8002bf2:	2140      	movs	r1, #64	@ 0x40
 8002bf4:	480a      	ldr	r0, [pc, #40]	@ (8002c20 <Check_Faults+0x6c>)
 8002bf6:	f004 fb97 	bl	8007328 <HAL_GPIO_ReadPin>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d009      	beq.n	8002c14 <Check_Faults+0x60>
 8002c00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002c04:	4807      	ldr	r0, [pc, #28]	@ (8002c24 <Check_Faults+0x70>)
 8002c06:	f004 fb8f 	bl	8007328 <HAL_GPIO_ReadPin>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <Check_Faults+0x60>
		return 0; // if all pins is 1 then all is ready, there is not faults then return 0
 8002c10:	2300      	movs	r3, #0
 8002c12:	e000      	b.n	8002c16 <Check_Faults+0x62>

	return 1;
 8002c14:	2301      	movs	r3, #1
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	48001000 	.word	0x48001000
 8002c20:	48000c00 	.word	0x48000c00
 8002c24:	48000800 	.word	0x48000800

08002c28 <Check_Ready>:

uint8_t Check_Ready()
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
	// Ready pins are from gate driver and they are active pull up
	// 4 ready pins from 4 gate drivers
	if(HAL_GPIO_ReadPin(READY_1_GPIO_Port, READY_1_Pin) && HAL_GPIO_ReadPin(READY_2_GPIO_Port, READY_2_Pin)
 8002c2c:	2110      	movs	r1, #16
 8002c2e:	4811      	ldr	r0, [pc, #68]	@ (8002c74 <Check_Ready+0x4c>)
 8002c30:	f004 fb7a 	bl	8007328 <HAL_GPIO_ReadPin>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d019      	beq.n	8002c6e <Check_Ready+0x46>
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	480e      	ldr	r0, [pc, #56]	@ (8002c78 <Check_Ready+0x50>)
 8002c3e:	f004 fb73 	bl	8007328 <HAL_GPIO_ReadPin>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d012      	beq.n	8002c6e <Check_Ready+0x46>
			&& HAL_GPIO_ReadPin(READY_3_GPIO_Port, READY_3_Pin) && HAL_GPIO_ReadPin(READY_4_GPIO_Port, READY_4_Pin) )
 8002c48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c4c:	480b      	ldr	r0, [pc, #44]	@ (8002c7c <Check_Ready+0x54>)
 8002c4e:	f004 fb6b 	bl	8007328 <HAL_GPIO_ReadPin>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00a      	beq.n	8002c6e <Check_Ready+0x46>
 8002c58:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c60:	f004 fb62 	bl	8007328 <HAL_GPIO_ReadPin>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <Check_Ready+0x46>
			return 1; // return 1 when is gate drivers ready
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <Check_Ready+0x48>

		return 0;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	48000c00 	.word	0x48000c00
 8002c78:	48000400 	.word	0x48000400
 8002c7c:	48001400 	.word	0x48001400

08002c80 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002c80:	b5b0      	push	{r4, r5, r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	// SOFT start_program RAMP REALISATION
	//  Ts 20khz
	if(htim->Instance == TIM15)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a6e      	ldr	r2, [pc, #440]	@ (8002e48 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	f040 80b1 	bne.w	8002df6 <HAL_TIM_PeriodElapsedCallback+0x176>
	{
		//sythick1 =  HAL_GetTick();
		if(currentState == STATE_REGULATION )
 8002c94:	4b6d      	ldr	r3, [pc, #436]	@ (8002e4c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	f040 80a9 	bne.w	8002df0 <HAL_TIM_PeriodElapsedCallback+0x170>
		{
		//current_sensor1_vref = adc3_dma_buffer[0]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[0], pcb_temp)/4096)*3.3;
		//current_sensor2_vref = adc3_dma_buffer[1]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[1], pcb_temp)/4096)*3.3;

		input_voltage = (int)((((adc3_dma_buffer[2])*3300)/4096-200)*18.81);//[mV]		((Low_pass_filter(adc3_dma_buffer[2], input_voltage)/4096)*3.3-0.2)*27.1;
 8002c9e:	4b6c      	ldr	r3, [pc, #432]	@ (8002e50 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002ca0:	889b      	ldrh	r3, [r3, #4]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	da01      	bge.n	8002cb6 <HAL_TIM_PeriodElapsedCallback+0x36>
 8002cb2:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002cb6:	131b      	asrs	r3, r3, #12
 8002cb8:	3bc8      	subs	r3, #200	@ 0xc8
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fd fc5a 	bl	8000574 <__aeabi_i2d>
 8002cc0:	a35d      	add	r3, pc, #372	@ (adr r3, 8002e38 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc6:	f7fd fcbf 	bl	8000648 <__aeabi_dmul>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f7fd ff69 	bl	8000ba8 <__aeabi_d2iz>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b5e      	ldr	r3, [pc, #376]	@ (8002e54 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002cdc:	601a      	str	r2, [r3, #0]
		output_voltage = (int)((((adc4_dma_buffer[1])*3300)/4096-200)*18.81);//[mV] 		((Low_pass_filter(adc4_dma_buffer, output_voltage)/4096)*3.3-0.2)*27.1;
 8002cde:	4b5e      	ldr	r3, [pc, #376]	@ (8002e58 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002ce0:	885b      	ldrh	r3, [r3, #2]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002cea:	fb02 f303 	mul.w	r3, r2, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	da01      	bge.n	8002cf6 <HAL_TIM_PeriodElapsedCallback+0x76>
 8002cf2:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002cf6:	131b      	asrs	r3, r3, #12
 8002cf8:	3bc8      	subs	r3, #200	@ 0xc8
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fd fc3a 	bl	8000574 <__aeabi_i2d>
 8002d00:	a34d      	add	r3, pc, #308	@ (adr r3, 8002e38 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d06:	f7fd fc9f 	bl	8000648 <__aeabi_dmul>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	f7fd ff49 	bl	8000ba8 <__aeabi_d2iz>
 8002d16:	4603      	mov	r3, r0
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4b50      	ldr	r3, [pc, #320]	@ (8002e5c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002d1c:	601a      	str	r2, [r3, #0]
		if(once == 0) Update_PWM_Frequency(&htim8, TIM_CHANNEL_2, 7100000); // Set TIM8 CH1 o freq that is delay hc and send to fpga
		}

		imax2 = imax1 + imax2_sum; // imax2_sum signal from FPGA
		// imax1,2 each for branches to make 180 degree shift*/
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref+((int)imax1*0.025)); // imax1  1.5V is 0A;  1A is 20mV; 1 bit is 0.8mV; imax[mA]*0.02 [V/A]/0.8[mV] = Value for DAC
 8002d1e:	4b50      	ldr	r3, [pc, #320]	@ (8002e60 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd fc26 	bl	8000574 <__aeabi_i2d>
 8002d28:	4604      	mov	r4, r0
 8002d2a:	460d      	mov	r5, r1
 8002d2c:	4b4d      	ldr	r3, [pc, #308]	@ (8002e64 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fd fc1f 	bl	8000574 <__aeabi_i2d>
 8002d36:	a342      	add	r3, pc, #264	@ (adr r3, 8002e40 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3c:	f7fd fc84 	bl	8000648 <__aeabi_dmul>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4620      	mov	r0, r4
 8002d46:	4629      	mov	r1, r5
 8002d48:	f7fd fac8 	bl	80002dc <__adddf3>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4610      	mov	r0, r2
 8002d52:	4619      	mov	r1, r3
 8002d54:	f7fd ff50 	bl	8000bf8 <__aeabi_d2uiz>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4842      	ldr	r0, [pc, #264]	@ (8002e68 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002d60:	f003 fcf4 	bl	800674c <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, current_sensor2_vref+((int)imax2*0.025)); // imax2
 8002d64:	4b41      	ldr	r3, [pc, #260]	@ (8002e6c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fd fc03 	bl	8000574 <__aeabi_i2d>
 8002d6e:	4604      	mov	r4, r0
 8002d70:	460d      	mov	r5, r1
 8002d72:	4b3f      	ldr	r3, [pc, #252]	@ (8002e70 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fd fbfc 	bl	8000574 <__aeabi_i2d>
 8002d7c:	a330      	add	r3, pc, #192	@ (adr r3, 8002e40 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	f7fd fc61 	bl	8000648 <__aeabi_dmul>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	f7fd faa5 	bl	80002dc <__adddf3>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f7fd ff2d 	bl	8000bf8 <__aeabi_d2uiz>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2200      	movs	r2, #0
 8002da2:	2110      	movs	r1, #16
 8002da4:	4830      	ldr	r0, [pc, #192]	@ (8002e68 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002da6:	f003 fcd1 	bl	800674c <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref-((int)imin*0.25)); // imin uzyto tutaj wzmacniacza 10x dla sygnalu z sensora pradu wiec ma wzmocnienie 200mv/A a nie 20mv/a
 8002daa:	4b2d      	ldr	r3, [pc, #180]	@ (8002e60 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fd fbe0 	bl	8000574 <__aeabi_i2d>
 8002db4:	4604      	mov	r4, r0
 8002db6:	460d      	mov	r5, r1
 8002db8:	4b2e      	ldr	r3, [pc, #184]	@ (8002e74 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fd fbd9 	bl	8000574 <__aeabi_i2d>
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	4b2c      	ldr	r3, [pc, #176]	@ (8002e78 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002dc8:	f7fd fc3e 	bl	8000648 <__aeabi_dmul>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	4629      	mov	r1, r5
 8002dd4:	f7fd fa80 	bl	80002d8 <__aeabi_dsub>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4610      	mov	r0, r2
 8002dde:	4619      	mov	r1, r3
 8002de0:	f7fd ff0a 	bl	8000bf8 <__aeabi_d2uiz>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2200      	movs	r2, #0
 8002de8:	2100      	movs	r1, #0
 8002dea:	4824      	ldr	r0, [pc, #144]	@ (8002e7c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002dec:	f003 fcae 	bl	800674c <HAL_DAC_SetValue>
		//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
		//once = 1;
		//}

		//sythick2 =  HAL_GetTick() - sythick1;
		flag_control = 1;
 8002df0:	4b23      	ldr	r3, [pc, #140]	@ (8002e80 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM6) // 5 sec period
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a22      	ldr	r2, [pc, #136]	@ (8002e84 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d101      	bne.n	8002e04 <HAL_TIM_PeriodElapsedCallback+0x184>
		    {
		//if(currentState == STATE_SOFT_START || currentState == STATE_REGULATION )
				//{
				FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
 8002e00:	f000 f9ae 	bl	8003160 <FAN_Drive>
				//}
		    }


	if (htim->Instance == TIM7)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1f      	ldr	r2, [pc, #124]	@ (8002e88 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d110      	bne.n	8002e30 <HAL_TIM_PeriodElapsedCallback+0x1b0>
	    {
	        // Turn off OCD pins of currents sensors to reset current sensor 1us

	        HAL_GPIO_TogglePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin);
 8002e0e:	2102      	movs	r1, #2
 8002e10:	481e      	ldr	r0, [pc, #120]	@ (8002e8c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002e12:	f004 fab9 	bl	8007388 <HAL_GPIO_TogglePin>
	        HAL_GPIO_TogglePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin);
 8002e16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e1a:	481d      	ldr	r0, [pc, #116]	@ (8002e90 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002e1c:	f004 fab4 	bl	8007388 <HAL_GPIO_TogglePin>
	        HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 8002e20:	2200      	movs	r2, #0
 8002e22:	2120      	movs	r1, #32
 8002e24:	4819      	ldr	r0, [pc, #100]	@ (8002e8c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002e26:	f004 fa97 	bl	8007358 <HAL_GPIO_WritePin>
	        // Stop the timer
	        HAL_TIM_Base_Stop_IT(&htim7);
 8002e2a:	481a      	ldr	r0, [pc, #104]	@ (8002e94 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002e2c:	f007 f96c 	bl	800a108 <HAL_TIM_Base_Stop_IT>
	    }


}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bdb0      	pop	{r4, r5, r7, pc}
 8002e38:	28f5c28f 	.word	0x28f5c28f
 8002e3c:	4032cf5c 	.word	0x4032cf5c
 8002e40:	9999999a 	.word	0x9999999a
 8002e44:	3f999999 	.word	0x3f999999
 8002e48:	40014000 	.word	0x40014000
 8002e4c:	20000b7b 	.word	0x20000b7b
 8002e50:	20000a70 	.word	0x20000a70
 8002e54:	20000a64 	.word	0x20000a64
 8002e58:	20000a84 	.word	0x20000a84
 8002e5c:	20000a7c 	.word	0x20000a7c
 8002e60:	20000a54 	.word	0x20000a54
 8002e64:	20000a58 	.word	0x20000a58
 8002e68:	200006c4 	.word	0x200006c4
 8002e6c:	20000a56 	.word	0x20000a56
 8002e70:	20000a5c 	.word	0x20000a5c
 8002e74:	20000a60 	.word	0x20000a60
 8002e78:	3fd00000 	.word	0x3fd00000
 8002e7c:	200006d8 	.word	0x200006d8
 8002e80:	20000b85 	.word	0x20000b85
 8002e84:	40001000 	.word	0x40001000
 8002e88:	40001400 	.word	0x40001400
 8002e8c:	48001000 	.word	0x48001000
 8002e90:	48001400 	.word	0x48001400
 8002e94:	20000890 	.word	0x20000890

08002e98 <RAMP>:

void RAMP()
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
	// RAMP Voltage to soft-start
				if((vref-output_vol)>100)
 8002e9c:	4b15      	ldr	r3, [pc, #84]	@ (8002ef4 <RAMP+0x5c>)
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b15      	ldr	r3, [pc, #84]	@ (8002ef8 <RAMP+0x60>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b64      	cmp	r3, #100	@ 0x64
 8002eaa:	d913      	bls.n	8002ed4 <RAMP+0x3c>
				{

					Vramp = output_voltage+400000*Ts; // 200mV step per loop period
 8002eac:	4b13      	ldr	r3, [pc, #76]	@ (8002efc <RAMP+0x64>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd fb4f 	bl	8000554 <__aeabi_ui2d>
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	4b11      	ldr	r3, [pc, #68]	@ (8002f00 <RAMP+0x68>)
 8002ebc:	f7fd fa0e 	bl	80002dc <__adddf3>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f7fd fe96 	bl	8000bf8 <__aeabi_d2uiz>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f04 <RAMP+0x6c>)
 8002ed2:	801a      	strh	r2, [r3, #0]
				}
				//else if((vref-output_voltage)<-100)
				//{
				//	Vramp = output_voltage-4000000*Ts;
				//}
				if(Vramp>=48000)
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f04 <RAMP+0x6c>)
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d906      	bls.n	8002eee <RAMP+0x56>
				{
					Vramp = 48000; // 48V
 8002ee0:	4b08      	ldr	r3, [pc, #32]	@ (8002f04 <RAMP+0x6c>)
 8002ee2:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002ee6:	801a      	strh	r2, [r3, #0]
					RAMP_FINISHED = 1;
 8002ee8:	4b07      	ldr	r3, [pc, #28]	@ (8002f08 <RAMP+0x70>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	701a      	strb	r2, [r3, #0]
					//currentState = STATE_REGULATION;
				}


}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	20000034 	.word	0x20000034
 8002efc:	20000a7c 	.word	0x20000a7c
 8002f00:	40340000 	.word	0x40340000
 8002f04:	20000a82 	.word	0x20000a82
 8002f08:	20000a88 	.word	0x20000a88

08002f0c <regulatorPI>:

void regulatorPI(uint32_t *out, uint32_t *integral, float in, float in_zad, float limp, float limn, float kp, float ti, float Ts1)
{
 8002f0c:	b5b0      	push	{r4, r5, r7, lr}
 8002f0e:	b08c      	sub	sp, #48	@ 0x30
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6278      	str	r0, [r7, #36]	@ 0x24
 8002f14:	6239      	str	r1, [r7, #32]
 8002f16:	ed87 0a07 	vstr	s0, [r7, #28]
 8002f1a:	edc7 0a06 	vstr	s1, [r7, #24]
 8002f1e:	ed87 1a05 	vstr	s2, [r7, #20]
 8002f22:	edc7 1a04 	vstr	s3, [r7, #16]
 8002f26:	ed87 2a03 	vstr	s4, [r7, #12]
 8002f2a:	edc7 2a02 	vstr	s5, [r7, #8]
 8002f2e:	ed87 3a01 	vstr	s6, [r7, #4]
	// Tustin transfrom of PI regulator s -> 2/T * (Z-1)/(Z+1)
    float delta;
    uint32_t prev_out;
    delta = in_zad - in; // error
 8002f32:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f36:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f3e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    *integral = *integral + (delta + prev_delta) * (kp / ti) * Ts1 * 0.5 ; // I part
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd fb04 	bl	8000554 <__aeabi_ui2d>
 8002f4c:	4604      	mov	r4, r0
 8002f4e:	460d      	mov	r5, r1
 8002f50:	4b5a      	ldr	r3, [pc, #360]	@ (80030bc <regulatorPI+0x1b0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	ee07 3a90 	vmov	s15, r3
 8002f58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f5c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f64:	ed97 6a03 	vldr	s12, [r7, #12]
 8002f68:	edd7 6a02 	vldr	s13, [r7, #8]
 8002f6c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002f70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f74:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f7c:	ee17 0a90 	vmov	r0, s15
 8002f80:	f7fd fb0a 	bl	8000598 <__aeabi_f2d>
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	4b4d      	ldr	r3, [pc, #308]	@ (80030c0 <regulatorPI+0x1b4>)
 8002f8a:	f7fd fb5d 	bl	8000648 <__aeabi_dmul>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4620      	mov	r0, r4
 8002f94:	4629      	mov	r1, r5
 8002f96:	f7fd f9a1 	bl	80002dc <__adddf3>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f7fd fe29 	bl	8000bf8 <__aeabi_d2uiz>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	601a      	str	r2, [r3, #0]
    prev_delta = delta;
 8002fac:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fb4:	ee17 2a90 	vmov	r2, s15
 8002fb8:	4b40      	ldr	r3, [pc, #256]	@ (80030bc <regulatorPI+0x1b0>)
 8002fba:	601a      	str	r2, [r3, #0]
    prev_out = *out;
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (*integral >= limp) // limit peak positive
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	ee07 3a90 	vmov	s15, r3
 8002fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fce:	ed97 7a05 	vldr	s14, [r7, #20]
 8002fd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fda:	d807      	bhi.n	8002fec <regulatorPI+0xe0>
    {
        *integral = limp;
 8002fdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fe4:	ee17 2a90 	vmov	r2, s15
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	601a      	str	r2, [r3, #0]
    }
    if (*integral <= limn)// limit peak negative
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	ee07 3a90 	vmov	s15, r3
 8002ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ffc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003004:	db07      	blt.n	8003016 <regulatorPI+0x10a>
    {
        *integral = limn;
 8003006:	edd7 7a04 	vldr	s15, [r7, #16]
 800300a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800300e:	ee17 2a90 	vmov	r2, s15
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	601a      	str	r2, [r3, #0]
    }
    *out = (delta * kp + *integral); // Sum of P and I
 8003016:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800301a:	edd7 7a03 	vldr	s15, [r7, #12]
 800301e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	ee07 3a90 	vmov	s15, r3
 800302a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800302e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003036:	ee17 2a90 	vmov	r2, s15
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	601a      	str	r2, [r3, #0]
    if (*out >= limp) // limit peak positive
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	ee07 3a90 	vmov	s15, r3
 8003046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800304a:	ed97 7a05 	vldr	s14, [r7, #20]
 800304e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003056:	d807      	bhi.n	8003068 <regulatorPI+0x15c>
    {
        *out = limp;
 8003058:	edd7 7a05 	vldr	s15, [r7, #20]
 800305c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003060:	ee17 2a90 	vmov	r2, s15
 8003064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003066:	601a      	str	r2, [r3, #0]
    }
    if (*out <= limn)// limit peak negative
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	ee07 3a90 	vmov	s15, r3
 8003070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003074:	ed97 7a04 	vldr	s14, [r7, #16]
 8003078:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800307c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003080:	db07      	blt.n	8003092 <regulatorPI+0x186>
    {
        *out = limn;
 8003082:	edd7 7a04 	vldr	s15, [r7, #16]
 8003086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800308a:	ee17 2a90 	vmov	r2, s15
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	601a      	str	r2, [r3, #0]
    }
    if((*out - prev_out) < 50 || (*out - prev_out) > -50) // histeresis to probably prevent jitter
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b31      	cmp	r3, #49	@ 0x31
 800309c:	d906      	bls.n	80030ac <regulatorPI+0x1a0>
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f113 0f32 	cmn.w	r3, #50	@ 0x32
 80030aa:	d902      	bls.n	80030b2 <regulatorPI+0x1a6>
    {
    	*out = prev_out;
 80030ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030b0:	601a      	str	r2, [r3, #0]
    }
}
 80030b2:	bf00      	nop
 80030b4:	3730      	adds	r7, #48	@ 0x30
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bdb0      	pop	{r4, r5, r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20000b74 	.word	0x20000b74
 80030c0:	3fe00000 	.word	0x3fe00000
 80030c4:	00000000 	.word	0x00000000

080030c8 <Low_pass_filter>:

	    return y[0];
}*/

float Low_pass_filter(float new_sample, float old_sample, float old_sample_n1, float old_passed)
{
 80030c8:	b5b0      	push	{r4, r5, r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80030d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80030d6:	ed87 1a01 	vstr	s2, [r7, #4]
 80030da:	edc7 1a00 	vstr	s3, [r7]
	float Low_passed_sample = 0;
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]
	//Low_passed_sample = (float)ALPHA * new_sample + (1.0 - ALPHA) * old_sample;

	Low_passed_sample = (1-ALPHA)*0.5*(new_sample+old_sample_n1+ALPHA*old_passed);//(float)ALPHA * new_sample + (1.0 - ALPHA) * old_sample;
 80030e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80030e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80030ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030f0:	ee17 0a90 	vmov	r0, s15
 80030f4:	f7fd fa50 	bl	8000598 <__aeabi_f2d>
 80030f8:	4604      	mov	r4, r0
 80030fa:	460d      	mov	r5, r1
 80030fc:	6838      	ldr	r0, [r7, #0]
 80030fe:	f7fd fa4b 	bl	8000598 <__aeabi_f2d>
 8003102:	a313      	add	r3, pc, #76	@ (adr r3, 8003150 <Low_pass_filter+0x88>)
 8003104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003108:	f7fd fa9e 	bl	8000648 <__aeabi_dmul>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4620      	mov	r0, r4
 8003112:	4629      	mov	r1, r5
 8003114:	f7fd f8e2 	bl	80002dc <__adddf3>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4610      	mov	r0, r2
 800311e:	4619      	mov	r1, r3
 8003120:	a30d      	add	r3, pc, #52	@ (adr r3, 8003158 <Low_pass_filter+0x90>)
 8003122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003126:	f7fd fa8f 	bl	8000648 <__aeabi_dmul>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	4610      	mov	r0, r2
 8003130:	4619      	mov	r1, r3
 8003132:	f7fd fd81 	bl	8000c38 <__aeabi_d2f>
 8003136:	4603      	mov	r3, r0
 8003138:	617b      	str	r3, [r7, #20]
	return Low_passed_sample;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	ee07 3a90 	vmov	s15, r3

}
 8003140:	eeb0 0a67 	vmov.f32	s0, s15
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bdb0      	pop	{r4, r5, r7, pc}
 800314a:	bf00      	nop
 800314c:	f3af 8000 	nop.w
 8003150:	66666666 	.word	0x66666666
 8003154:	3fe66666 	.word	0x3fe66666
 8003158:	33333334 	.word	0x33333334
 800315c:	3fc33333 	.word	0x3fc33333

08003160 <FAN_Drive>:
void FAN_Drive()
{ //@ToDo poprawic ogarnac zeby a intach bylo
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
		pcb_temp = (adc3_dma_buffer[3]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[3], pcb_temp)/4096)*3.3;
 8003166:	4b44      	ldr	r3, [pc, #272]	@ (8003278 <FAN_Drive+0x118>)
 8003168:	88db      	ldrh	r3, [r3, #6]
 800316a:	b29b      	uxth	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8003172:	fb02 f303 	mul.w	r3, r2, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	da01      	bge.n	800317e <FAN_Drive+0x1e>
 800317a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800317e:	131b      	asrs	r3, r3, #12
 8003180:	461a      	mov	r2, r3
 8003182:	4b3e      	ldr	r3, [pc, #248]	@ (800327c <FAN_Drive+0x11c>)
 8003184:	601a      	str	r2, [r3, #0]
		heat_sink_temp = (adc3_dma_buffer[4]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[4], heat_sink_temp)/4096)*3.3;
 8003186:	4b3c      	ldr	r3, [pc, #240]	@ (8003278 <FAN_Drive+0x118>)
 8003188:	891b      	ldrh	r3, [r3, #8]
 800318a:	b29b      	uxth	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8003192:	fb02 f303 	mul.w	r3, r2, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	da01      	bge.n	800319e <FAN_Drive+0x3e>
 800319a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800319e:	131b      	asrs	r3, r3, #12
 80031a0:	461a      	mov	r2, r3
 80031a2:	4b37      	ldr	r3, [pc, #220]	@ (8003280 <FAN_Drive+0x120>)
 80031a4:	601a      	str	r2, [r3, #0]

		uint32_t temperature = 20;
 80031a6:	2314      	movs	r3, #20
 80031a8:	603b      	str	r3, [r7, #0]

		pcb_temp = (pcb_temp-400)/20;
 80031aa:	4b34      	ldr	r3, [pc, #208]	@ (800327c <FAN_Drive+0x11c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80031b2:	4a34      	ldr	r2, [pc, #208]	@ (8003284 <FAN_Drive+0x124>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	4a30      	ldr	r2, [pc, #192]	@ (800327c <FAN_Drive+0x11c>)
 80031bc:	6013      	str	r3, [r2, #0]
		heat_sink_temp = (heat_sink_temp-500)/10;
 80031be:	4b30      	ldr	r3, [pc, #192]	@ (8003280 <FAN_Drive+0x120>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80031c6:	4a2f      	ldr	r2, [pc, #188]	@ (8003284 <FAN_Drive+0x124>)
 80031c8:	fba2 2303 	umull	r2, r3, r2, r3
 80031cc:	08db      	lsrs	r3, r3, #3
 80031ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003280 <FAN_Drive+0x120>)
 80031d0:	6013      	str	r3, [r2, #0]
		// Choose the higher of the two temperatures
		temperature = (pcb_temp > heat_sink_temp) ? pcb_temp : heat_sink_temp;
 80031d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003280 <FAN_Drive+0x120>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	4b29      	ldr	r3, [pc, #164]	@ (800327c <FAN_Drive+0x11c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4293      	cmp	r3, r2
 80031dc:	bf38      	it	cc
 80031de:	4613      	movcc	r3, r2
 80031e0:	603b      	str	r3, [r7, #0]
		// Apply a non-linear (exponential) scaling for the fan speed
		// This scales the temperature to a value between 0 and 1, then applies an exponential curve
		uint32_t normalized_temp = ((temperature - 20) *100)/ 80;  // Normalizing between 0 (20°C) and 1000 (100°C)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2264      	movs	r2, #100	@ 0x64
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80031ee:	4a25      	ldr	r2, [pc, #148]	@ (8003284 <FAN_Drive+0x124>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	099b      	lsrs	r3, r3, #6
 80031f6:	607b      	str	r3, [r7, #4]
		if (normalized_temp > 100) normalized_temp = 100;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b64      	cmp	r3, #100	@ 0x64
 80031fc:	d901      	bls.n	8003202 <FAN_Drive+0xa2>
 80031fe:	2364      	movs	r3, #100	@ 0x64
 8003200:	607b      	str	r3, [r7, #4]
		if (normalized_temp < 0) normalized_temp = 0;

		duty_cycle = 20 + ((int)(pow(normalized_temp, 3) * 79))/1000000;  // Cubic curve for fan speed control
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fd f9a6 	bl	8000554 <__aeabi_ui2d>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8003268 <FAN_Drive+0x108>
 8003210:	ec43 2b10 	vmov	d0, r2, r3
 8003214:	f012 fda4 	bl	8015d60 <pow>
 8003218:	ec51 0b10 	vmov	r0, r1, d0
 800321c:	a314      	add	r3, pc, #80	@ (adr r3, 8003270 <FAN_Drive+0x110>)
 800321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003222:	f7fd fa11 	bl	8000648 <__aeabi_dmul>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	4610      	mov	r0, r2
 800322c:	4619      	mov	r1, r3
 800322e:	f7fd fcbb 	bl	8000ba8 <__aeabi_d2iz>
 8003232:	4603      	mov	r3, r0
 8003234:	4a14      	ldr	r2, [pc, #80]	@ (8003288 <FAN_Drive+0x128>)
 8003236:	fb82 1203 	smull	r1, r2, r2, r3
 800323a:	1492      	asrs	r2, r2, #18
 800323c:	17db      	asrs	r3, r3, #31
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	3314      	adds	r3, #20
 8003242:	4a12      	ldr	r2, [pc, #72]	@ (800328c <FAN_Drive+0x12c>)
 8003244:	6013      	str	r3, [r2, #0]

		// Enforce minimum and maximum duty cycles
		if (temperature < 20) {
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	2b13      	cmp	r3, #19
 800324a:	d803      	bhi.n	8003254 <FAN_Drive+0xf4>
		        duty_cycle = 20;
 800324c:	4b0f      	ldr	r3, [pc, #60]	@ (800328c <FAN_Drive+0x12c>)
 800324e:	2214      	movs	r2, #20
 8003250:	601a      	str	r2, [r3, #0]
		    	duty_cycle = 99;
		}

		//Set_PWM_DutyCycle(duty_cycle);

}
 8003252:	e005      	b.n	8003260 <FAN_Drive+0x100>
		} else if (temperature > 100) {
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b64      	cmp	r3, #100	@ 0x64
 8003258:	d902      	bls.n	8003260 <FAN_Drive+0x100>
		    	duty_cycle = 99;
 800325a:	4b0c      	ldr	r3, [pc, #48]	@ (800328c <FAN_Drive+0x12c>)
 800325c:	2263      	movs	r2, #99	@ 0x63
 800325e:	601a      	str	r2, [r3, #0]
}
 8003260:	bf00      	nop
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	00000000 	.word	0x00000000
 800326c:	40080000 	.word	0x40080000
 8003270:	00000000 	.word	0x00000000
 8003274:	4053c000 	.word	0x4053c000
 8003278:	20000a70 	.word	0x20000a70
 800327c:	20000a68 	.word	0x20000a68
 8003280:	20000a6c 	.word	0x20000a6c
 8003284:	cccccccd 	.word	0xcccccccd
 8003288:	431bde83 	.word	0x431bde83
 800328c:	20000028 	.word	0x20000028

08003290 <SendUSBMessage>:



void SendUSBMessage(const char* message) {
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(message);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7fd f811 	bl	80002c0 <strlen>
 800329e:	4603      	mov	r3, r0
 80032a0:	81fb      	strh	r3, [r7, #14]
    if (len > 127) len = 127;  // Limit to buffer size
 80032a2:	89fb      	ldrh	r3, [r7, #14]
 80032a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80032a6:	d901      	bls.n	80032ac <SendUSBMessage+0x1c>
 80032a8:	237f      	movs	r3, #127	@ 0x7f
 80032aa:	81fb      	strh	r3, [r7, #14]
    memcpy(USB_TX_Buffer, message, len);
 80032ac:	89fb      	ldrh	r3, [r7, #14]
 80032ae:	461a      	mov	r2, r3
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	480b      	ldr	r0, [pc, #44]	@ (80032e0 <SendUSBMessage+0x50>)
 80032b4:	f00e fe0d 	bl	8011ed2 <memcpy>
    USB_TX_Buffer[len] = '\0';  // Ensure null-terminated string
 80032b8:	89fb      	ldrh	r3, [r7, #14]
 80032ba:	4a09      	ldr	r2, [pc, #36]	@ (80032e0 <SendUSBMessage+0x50>)
 80032bc:	2100      	movs	r1, #0
 80032be:	54d1      	strb	r1, [r2, r3]
            break;
        }
      // HAL_Delay(10);  // Small delay before retrying
    } while (retry_count-- > 0);*/
    do {
            result = CDC_Transmit_FS((uint8_t*)message, len);
 80032c0:	89fb      	ldrh	r3, [r7, #14]
 80032c2:	4619      	mov	r1, r3
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f00d f969 	bl	801059c <CDC_Transmit_FS>
 80032ca:	4603      	mov	r3, r0
 80032cc:	737b      	strb	r3, [r7, #13]
        } while (result == USBD_BUSY); // Retry while USB is busy
 80032ce:	7b7b      	ldrb	r3, [r7, #13]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d0f5      	beq.n	80032c0 <SendUSBMessage+0x30>


}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000ae8 	.word	0x20000ae8

080032e4 <ParseUSBCommand>:

void ParseUSBCommand(void) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
	 if (dataReceivedFlag) {
 80032e8:	4ba6      	ldr	r3, [pc, #664]	@ (8003584 <ParseUSBCommand+0x2a0>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 8146 	beq.w	8003580 <ParseUSBCommand+0x29c>
	        if (strncmp((char*)USB_RX_Buffer, "SET_KP", 6) == 0) {
 80032f4:	2206      	movs	r2, #6
 80032f6:	49a4      	ldr	r1, [pc, #656]	@ (8003588 <ParseUSBCommand+0x2a4>)
 80032f8:	48a4      	ldr	r0, [pc, #656]	@ (800358c <ParseUSBCommand+0x2a8>)
 80032fa:	f00e fd60 	bl	8011dbe <strncmp>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d108      	bne.n	8003316 <ParseUSBCommand+0x32>
	            sscanf((char*)USB_RX_Buffer, "SET_KP %f", &Kp);
 8003304:	4aa2      	ldr	r2, [pc, #648]	@ (8003590 <ParseUSBCommand+0x2ac>)
 8003306:	49a3      	ldr	r1, [pc, #652]	@ (8003594 <ParseUSBCommand+0x2b0>)
 8003308:	48a0      	ldr	r0, [pc, #640]	@ (800358c <ParseUSBCommand+0x2a8>)
 800330a:	f00e fce1 	bl	8011cd0 <siscanf>
	            SendUSBMessage("KP Updated\n");
 800330e:	48a2      	ldr	r0, [pc, #648]	@ (8003598 <ParseUSBCommand+0x2b4>)
 8003310:	f7ff ffbe 	bl	8003290 <SendUSBMessage>
 8003314:	e12c      	b.n	8003570 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_Ti", 6) == 0) {
 8003316:	2206      	movs	r2, #6
 8003318:	49a0      	ldr	r1, [pc, #640]	@ (800359c <ParseUSBCommand+0x2b8>)
 800331a:	489c      	ldr	r0, [pc, #624]	@ (800358c <ParseUSBCommand+0x2a8>)
 800331c:	f00e fd4f 	bl	8011dbe <strncmp>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d108      	bne.n	8003338 <ParseUSBCommand+0x54>
	            sscanf((char*)USB_RX_Buffer, "SET_Ti %f", &Ti);
 8003326:	4a9e      	ldr	r2, [pc, #632]	@ (80035a0 <ParseUSBCommand+0x2bc>)
 8003328:	499e      	ldr	r1, [pc, #632]	@ (80035a4 <ParseUSBCommand+0x2c0>)
 800332a:	4898      	ldr	r0, [pc, #608]	@ (800358c <ParseUSBCommand+0x2a8>)
 800332c:	f00e fcd0 	bl	8011cd0 <siscanf>
	            SendUSBMessage("Ti Updated\n");
 8003330:	489d      	ldr	r0, [pc, #628]	@ (80035a8 <ParseUSBCommand+0x2c4>)
 8003332:	f7ff ffad 	bl	8003290 <SendUSBMessage>
 8003336:	e11b      	b.n	8003570 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_VREF", 8) == 0) {
 8003338:	2208      	movs	r2, #8
 800333a:	499c      	ldr	r1, [pc, #624]	@ (80035ac <ParseUSBCommand+0x2c8>)
 800333c:	4893      	ldr	r0, [pc, #588]	@ (800358c <ParseUSBCommand+0x2a8>)
 800333e:	f00e fd3e 	bl	8011dbe <strncmp>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d108      	bne.n	800335a <ParseUSBCommand+0x76>
	            sscanf((char*)USB_RX_Buffer, "SET_VREF %hu", &vref);
 8003348:	4a99      	ldr	r2, [pc, #612]	@ (80035b0 <ParseUSBCommand+0x2cc>)
 800334a:	499a      	ldr	r1, [pc, #616]	@ (80035b4 <ParseUSBCommand+0x2d0>)
 800334c:	488f      	ldr	r0, [pc, #572]	@ (800358c <ParseUSBCommand+0x2a8>)
 800334e:	f00e fcbf 	bl	8011cd0 <siscanf>
	            SendUSBMessage("vref Updated\n");
 8003352:	4899      	ldr	r0, [pc, #612]	@ (80035b8 <ParseUSBCommand+0x2d4>)
 8003354:	f7ff ff9c 	bl	8003290 <SendUSBMessage>
 8003358:	e10a      	b.n	8003570 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS1_VREF", 12) == 0) {
 800335a:	220c      	movs	r2, #12
 800335c:	4997      	ldr	r1, [pc, #604]	@ (80035bc <ParseUSBCommand+0x2d8>)
 800335e:	488b      	ldr	r0, [pc, #556]	@ (800358c <ParseUSBCommand+0x2a8>)
 8003360:	f00e fd2d 	bl	8011dbe <strncmp>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d108      	bne.n	800337c <ParseUSBCommand+0x98>
	            sscanf((char*)USB_RX_Buffer, "SET_CS1_VREF %d", &current_sensor1_vref);
 800336a:	4a95      	ldr	r2, [pc, #596]	@ (80035c0 <ParseUSBCommand+0x2dc>)
 800336c:	4995      	ldr	r1, [pc, #596]	@ (80035c4 <ParseUSBCommand+0x2e0>)
 800336e:	4887      	ldr	r0, [pc, #540]	@ (800358c <ParseUSBCommand+0x2a8>)
 8003370:	f00e fcae 	bl	8011cd0 <siscanf>
	            SendUSBMessage("current_sensor1_vref Updated\n");
 8003374:	4894      	ldr	r0, [pc, #592]	@ (80035c8 <ParseUSBCommand+0x2e4>)
 8003376:	f7ff ff8b 	bl	8003290 <SendUSBMessage>
 800337a:	e0f9      	b.n	8003570 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS2_VREF", 12) == 0) {
 800337c:	220c      	movs	r2, #12
 800337e:	4993      	ldr	r1, [pc, #588]	@ (80035cc <ParseUSBCommand+0x2e8>)
 8003380:	4882      	ldr	r0, [pc, #520]	@ (800358c <ParseUSBCommand+0x2a8>)
 8003382:	f00e fd1c 	bl	8011dbe <strncmp>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d108      	bne.n	800339e <ParseUSBCommand+0xba>
	            sscanf((char*)USB_RX_Buffer, "SET_CS2_VREF %d", &current_sensor2_vref);
 800338c:	4a90      	ldr	r2, [pc, #576]	@ (80035d0 <ParseUSBCommand+0x2ec>)
 800338e:	4991      	ldr	r1, [pc, #580]	@ (80035d4 <ParseUSBCommand+0x2f0>)
 8003390:	487e      	ldr	r0, [pc, #504]	@ (800358c <ParseUSBCommand+0x2a8>)
 8003392:	f00e fc9d 	bl	8011cd0 <siscanf>
	            SendUSBMessage("current_sensor2_vref Updated\n");
 8003396:	4890      	ldr	r0, [pc, #576]	@ (80035d8 <ParseUSBCommand+0x2f4>)
 8003398:	f7ff ff7a 	bl	8003290 <SendUSBMessage>
 800339c:	e0e8      	b.n	8003570 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_IMAX2_SUM", 13) == 0) {
 800339e:	220d      	movs	r2, #13
 80033a0:	498e      	ldr	r1, [pc, #568]	@ (80035dc <ParseUSBCommand+0x2f8>)
 80033a2:	487a      	ldr	r0, [pc, #488]	@ (800358c <ParseUSBCommand+0x2a8>)
 80033a4:	f00e fd0b 	bl	8011dbe <strncmp>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d108      	bne.n	80033c0 <ParseUSBCommand+0xdc>
	            sscanf((char*)USB_RX_Buffer, "SET_IMAX2_SUM %d", &imax2_sum);
 80033ae:	4a8c      	ldr	r2, [pc, #560]	@ (80035e0 <ParseUSBCommand+0x2fc>)
 80033b0:	498c      	ldr	r1, [pc, #560]	@ (80035e4 <ParseUSBCommand+0x300>)
 80033b2:	4876      	ldr	r0, [pc, #472]	@ (800358c <ParseUSBCommand+0x2a8>)
 80033b4:	f00e fc8c 	bl	8011cd0 <siscanf>
	            SendUSBMessage("imax2_sum Updated\n");
 80033b8:	488b      	ldr	r0, [pc, #556]	@ (80035e8 <ParseUSBCommand+0x304>)
 80033ba:	f7ff ff69 	bl	8003290 <SendUSBMessage>
 80033be:	e0d7      	b.n	8003570 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_TR", 12) == 0) {
 80033c0:	220c      	movs	r2, #12
 80033c2:	498a      	ldr	r1, [pc, #552]	@ (80035ec <ParseUSBCommand+0x308>)
 80033c4:	4871      	ldr	r0, [pc, #452]	@ (800358c <ParseUSBCommand+0x2a8>)
 80033c6:	f00e fcfa 	bl	8011dbe <strncmp>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d108      	bne.n	80033e2 <ParseUSBCommand+0xfe>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_TR %f", &delay_tr);
 80033d0:	4a87      	ldr	r2, [pc, #540]	@ (80035f0 <ParseUSBCommand+0x30c>)
 80033d2:	4988      	ldr	r1, [pc, #544]	@ (80035f4 <ParseUSBCommand+0x310>)
 80033d4:	486d      	ldr	r0, [pc, #436]	@ (800358c <ParseUSBCommand+0x2a8>)
 80033d6:	f00e fc7b 	bl	8011cd0 <siscanf>
	            SendUSBMessage("delay_tr Updated\n");
 80033da:	4887      	ldr	r0, [pc, #540]	@ (80035f8 <ParseUSBCommand+0x314>)
 80033dc:	f7ff ff58 	bl	8003290 <SendUSBMessage>
 80033e0:	e0c6      	b.n	8003570 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_HC", 12) == 0) {
 80033e2:	220c      	movs	r2, #12
 80033e4:	4985      	ldr	r1, [pc, #532]	@ (80035fc <ParseUSBCommand+0x318>)
 80033e6:	4869      	ldr	r0, [pc, #420]	@ (800358c <ParseUSBCommand+0x2a8>)
 80033e8:	f00e fce9 	bl	8011dbe <strncmp>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d108      	bne.n	8003404 <ParseUSBCommand+0x120>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_HC %f", &delay_hc);
 80033f2:	4a83      	ldr	r2, [pc, #524]	@ (8003600 <ParseUSBCommand+0x31c>)
 80033f4:	4983      	ldr	r1, [pc, #524]	@ (8003604 <ParseUSBCommand+0x320>)
 80033f6:	4865      	ldr	r0, [pc, #404]	@ (800358c <ParseUSBCommand+0x2a8>)
 80033f8:	f00e fc6a 	bl	8011cd0 <siscanf>
	            SendUSBMessage("delay_hc Updated\n");
 80033fc:	4882      	ldr	r0, [pc, #520]	@ (8003608 <ParseUSBCommand+0x324>)
 80033fe:	f7ff ff47 	bl	8003290 <SendUSBMessage>
 8003402:	e0b5      	b.n	8003570 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_KP", 6) == 0) {
 8003404:	2206      	movs	r2, #6
 8003406:	4981      	ldr	r1, [pc, #516]	@ (800360c <ParseUSBCommand+0x328>)
 8003408:	4860      	ldr	r0, [pc, #384]	@ (800358c <ParseUSBCommand+0x2a8>)
 800340a:	f00e fcd8 	bl	8011dbe <strncmp>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10e      	bne.n	8003432 <ParseUSBCommand+0x14e>
	            sprintf((char*)USB_TX_Buffer, "KP = %f\n", Kp);
 8003414:	4b5e      	ldr	r3, [pc, #376]	@ (8003590 <ParseUSBCommand+0x2ac>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f7fd f8bd 	bl	8000598 <__aeabi_f2d>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	497b      	ldr	r1, [pc, #492]	@ (8003610 <ParseUSBCommand+0x32c>)
 8003424:	487b      	ldr	r0, [pc, #492]	@ (8003614 <ParseUSBCommand+0x330>)
 8003426:	f00e fc33 	bl	8011c90 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800342a:	487a      	ldr	r0, [pc, #488]	@ (8003614 <ParseUSBCommand+0x330>)
 800342c:	f7ff ff30 	bl	8003290 <SendUSBMessage>
 8003430:	e09e      	b.n	8003570 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_Ti", 6) == 0) {
 8003432:	2206      	movs	r2, #6
 8003434:	4978      	ldr	r1, [pc, #480]	@ (8003618 <ParseUSBCommand+0x334>)
 8003436:	4855      	ldr	r0, [pc, #340]	@ (800358c <ParseUSBCommand+0x2a8>)
 8003438:	f00e fcc1 	bl	8011dbe <strncmp>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10e      	bne.n	8003460 <ParseUSBCommand+0x17c>
	            sprintf((char*)USB_TX_Buffer, "Ti = %f\n", Ti);
 8003442:	4b57      	ldr	r3, [pc, #348]	@ (80035a0 <ParseUSBCommand+0x2bc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7fd f8a6 	bl	8000598 <__aeabi_f2d>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4972      	ldr	r1, [pc, #456]	@ (800361c <ParseUSBCommand+0x338>)
 8003452:	4870      	ldr	r0, [pc, #448]	@ (8003614 <ParseUSBCommand+0x330>)
 8003454:	f00e fc1c 	bl	8011c90 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003458:	486e      	ldr	r0, [pc, #440]	@ (8003614 <ParseUSBCommand+0x330>)
 800345a:	f7ff ff19 	bl	8003290 <SendUSBMessage>
 800345e:	e087      	b.n	8003570 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_VREF", 8) == 0) {
 8003460:	2208      	movs	r2, #8
 8003462:	496f      	ldr	r1, [pc, #444]	@ (8003620 <ParseUSBCommand+0x33c>)
 8003464:	4849      	ldr	r0, [pc, #292]	@ (800358c <ParseUSBCommand+0x2a8>)
 8003466:	f00e fcaa 	bl	8011dbe <strncmp>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10a      	bne.n	8003486 <ParseUSBCommand+0x1a2>
	            sprintf((char*)USB_TX_Buffer, "vref = %hu\n", vref);
 8003470:	4b4f      	ldr	r3, [pc, #316]	@ (80035b0 <ParseUSBCommand+0x2cc>)
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	496b      	ldr	r1, [pc, #428]	@ (8003624 <ParseUSBCommand+0x340>)
 8003478:	4866      	ldr	r0, [pc, #408]	@ (8003614 <ParseUSBCommand+0x330>)
 800347a:	f00e fc09 	bl	8011c90 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800347e:	4865      	ldr	r0, [pc, #404]	@ (8003614 <ParseUSBCommand+0x330>)
 8003480:	f7ff ff06 	bl	8003290 <SendUSBMessage>
 8003484:	e074      	b.n	8003570 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS1_VREF", 12) == 0) {
 8003486:	220c      	movs	r2, #12
 8003488:	4967      	ldr	r1, [pc, #412]	@ (8003628 <ParseUSBCommand+0x344>)
 800348a:	4840      	ldr	r0, [pc, #256]	@ (800358c <ParseUSBCommand+0x2a8>)
 800348c:	f00e fc97 	bl	8011dbe <strncmp>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10a      	bne.n	80034ac <ParseUSBCommand+0x1c8>
	            sprintf((char*)USB_TX_Buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 8003496:	4b4a      	ldr	r3, [pc, #296]	@ (80035c0 <ParseUSBCommand+0x2dc>)
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	4963      	ldr	r1, [pc, #396]	@ (800362c <ParseUSBCommand+0x348>)
 800349e:	485d      	ldr	r0, [pc, #372]	@ (8003614 <ParseUSBCommand+0x330>)
 80034a0:	f00e fbf6 	bl	8011c90 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80034a4:	485b      	ldr	r0, [pc, #364]	@ (8003614 <ParseUSBCommand+0x330>)
 80034a6:	f7ff fef3 	bl	8003290 <SendUSBMessage>
 80034aa:	e061      	b.n	8003570 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS2_VREF", 12) == 0) {
 80034ac:	220c      	movs	r2, #12
 80034ae:	4960      	ldr	r1, [pc, #384]	@ (8003630 <ParseUSBCommand+0x34c>)
 80034b0:	4836      	ldr	r0, [pc, #216]	@ (800358c <ParseUSBCommand+0x2a8>)
 80034b2:	f00e fc84 	bl	8011dbe <strncmp>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10a      	bne.n	80034d2 <ParseUSBCommand+0x1ee>
	            sprintf((char*)USB_TX_Buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 80034bc:	4b44      	ldr	r3, [pc, #272]	@ (80035d0 <ParseUSBCommand+0x2ec>)
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	495c      	ldr	r1, [pc, #368]	@ (8003634 <ParseUSBCommand+0x350>)
 80034c4:	4853      	ldr	r0, [pc, #332]	@ (8003614 <ParseUSBCommand+0x330>)
 80034c6:	f00e fbe3 	bl	8011c90 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80034ca:	4852      	ldr	r0, [pc, #328]	@ (8003614 <ParseUSBCommand+0x330>)
 80034cc:	f7ff fee0 	bl	8003290 <SendUSBMessage>
 80034d0:	e04e      	b.n	8003570 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_IMAX2_SUM", 13) == 0) {
 80034d2:	220d      	movs	r2, #13
 80034d4:	4958      	ldr	r1, [pc, #352]	@ (8003638 <ParseUSBCommand+0x354>)
 80034d6:	482d      	ldr	r0, [pc, #180]	@ (800358c <ParseUSBCommand+0x2a8>)
 80034d8:	f00e fc71 	bl	8011dbe <strncmp>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <ParseUSBCommand+0x214>
	            sprintf((char*)USB_TX_Buffer, "imax2_sum = %f\n", imax2_sum);
 80034e2:	4b3f      	ldr	r3, [pc, #252]	@ (80035e0 <ParseUSBCommand+0x2fc>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	4954      	ldr	r1, [pc, #336]	@ (800363c <ParseUSBCommand+0x358>)
 80034ea:	484a      	ldr	r0, [pc, #296]	@ (8003614 <ParseUSBCommand+0x330>)
 80034ec:	f00e fbd0 	bl	8011c90 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80034f0:	4848      	ldr	r0, [pc, #288]	@ (8003614 <ParseUSBCommand+0x330>)
 80034f2:	f7ff fecd 	bl	8003290 <SendUSBMessage>
 80034f6:	e03b      	b.n	8003570 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_TR", 12) == 0) {
 80034f8:	220c      	movs	r2, #12
 80034fa:	4951      	ldr	r1, [pc, #324]	@ (8003640 <ParseUSBCommand+0x35c>)
 80034fc:	4823      	ldr	r0, [pc, #140]	@ (800358c <ParseUSBCommand+0x2a8>)
 80034fe:	f00e fc5e 	bl	8011dbe <strncmp>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10e      	bne.n	8003526 <ParseUSBCommand+0x242>
	            sprintf((char*)USB_TX_Buffer, "delay_tr = %f\n", delay_tr);
 8003508:	4b39      	ldr	r3, [pc, #228]	@ (80035f0 <ParseUSBCommand+0x30c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fd f843 	bl	8000598 <__aeabi_f2d>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	494b      	ldr	r1, [pc, #300]	@ (8003644 <ParseUSBCommand+0x360>)
 8003518:	483e      	ldr	r0, [pc, #248]	@ (8003614 <ParseUSBCommand+0x330>)
 800351a:	f00e fbb9 	bl	8011c90 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800351e:	483d      	ldr	r0, [pc, #244]	@ (8003614 <ParseUSBCommand+0x330>)
 8003520:	f7ff feb6 	bl	8003290 <SendUSBMessage>
 8003524:	e024      	b.n	8003570 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_HC", 12) == 0) {
 8003526:	220c      	movs	r2, #12
 8003528:	4947      	ldr	r1, [pc, #284]	@ (8003648 <ParseUSBCommand+0x364>)
 800352a:	4818      	ldr	r0, [pc, #96]	@ (800358c <ParseUSBCommand+0x2a8>)
 800352c:	f00e fc47 	bl	8011dbe <strncmp>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10e      	bne.n	8003554 <ParseUSBCommand+0x270>
	            sprintf((char*)USB_TX_Buffer, "delay_hc = %f\n", delay_hc);
 8003536:	4b32      	ldr	r3, [pc, #200]	@ (8003600 <ParseUSBCommand+0x31c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fd f82c 	bl	8000598 <__aeabi_f2d>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4941      	ldr	r1, [pc, #260]	@ (800364c <ParseUSBCommand+0x368>)
 8003546:	4833      	ldr	r0, [pc, #204]	@ (8003614 <ParseUSBCommand+0x330>)
 8003548:	f00e fba2 	bl	8011c90 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800354c:	4831      	ldr	r0, [pc, #196]	@ (8003614 <ParseUSBCommand+0x330>)
 800354e:	f7ff fe9f 	bl	8003290 <SendUSBMessage>
 8003552:	e00d      	b.n	8003570 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "DISPLAY_ALL", 11) == 0) {
 8003554:	220b      	movs	r2, #11
 8003556:	493e      	ldr	r1, [pc, #248]	@ (8003650 <ParseUSBCommand+0x36c>)
 8003558:	480c      	ldr	r0, [pc, #48]	@ (800358c <ParseUSBCommand+0x2a8>)
 800355a:	f00e fc30 	bl	8011dbe <strncmp>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d102      	bne.n	800356a <ParseUSBCommand+0x286>
	            DisplayAllVariables();
 8003564:	f000 f9c2 	bl	80038ec <DisplayAllVariables>
 8003568:	e002      	b.n	8003570 <ParseUSBCommand+0x28c>

	        } else {
	            SendUSBMessage("Unknown Command\n");
 800356a:	483a      	ldr	r0, [pc, #232]	@ (8003654 <ParseUSBCommand+0x370>)
 800356c:	f7ff fe90 	bl	8003290 <SendUSBMessage>
	        }
	        memset(USB_RX_Buffer, 0, sizeof(USB_RX_Buffer));  // Clear buffer
 8003570:	2240      	movs	r2, #64	@ 0x40
 8003572:	2100      	movs	r1, #0
 8003574:	4805      	ldr	r0, [pc, #20]	@ (800358c <ParseUSBCommand+0x2a8>)
 8003576:	f00e fc1a 	bl	8011dae <memset>
	        dataReceivedFlag = 0;
 800357a:	4b02      	ldr	r3, [pc, #8]	@ (8003584 <ParseUSBCommand+0x2a0>)
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
	    }
}
 8003580:	bf00      	nop
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20000b68 	.word	0x20000b68
 8003588:	08016c78 	.word	0x08016c78
 800358c:	20000aa8 	.word	0x20000aa8
 8003590:	20000018 	.word	0x20000018
 8003594:	08016c80 	.word	0x08016c80
 8003598:	08016c8c 	.word	0x08016c8c
 800359c:	08016c98 	.word	0x08016c98
 80035a0:	2000001c 	.word	0x2000001c
 80035a4:	08016ca0 	.word	0x08016ca0
 80035a8:	08016cac 	.word	0x08016cac
 80035ac:	08016cb8 	.word	0x08016cb8
 80035b0:	20000000 	.word	0x20000000
 80035b4:	08016cc4 	.word	0x08016cc4
 80035b8:	08016cd4 	.word	0x08016cd4
 80035bc:	08016ce4 	.word	0x08016ce4
 80035c0:	20000a54 	.word	0x20000a54
 80035c4:	08016cf4 	.word	0x08016cf4
 80035c8:	08016d04 	.word	0x08016d04
 80035cc:	08016d24 	.word	0x08016d24
 80035d0:	20000a56 	.word	0x20000a56
 80035d4:	08016d34 	.word	0x08016d34
 80035d8:	08016d44 	.word	0x08016d44
 80035dc:	08016d64 	.word	0x08016d64
 80035e0:	20000a8c 	.word	0x20000a8c
 80035e4:	08016d74 	.word	0x08016d74
 80035e8:	08016d88 	.word	0x08016d88
 80035ec:	08016d9c 	.word	0x08016d9c
 80035f0:	20000004 	.word	0x20000004
 80035f4:	08016dac 	.word	0x08016dac
 80035f8:	08016dbc 	.word	0x08016dbc
 80035fc:	08016dd0 	.word	0x08016dd0
 8003600:	20000008 	.word	0x20000008
 8003604:	08016de0 	.word	0x08016de0
 8003608:	08016df0 	.word	0x08016df0
 800360c:	08016e04 	.word	0x08016e04
 8003610:	08016e0c 	.word	0x08016e0c
 8003614:	20000ae8 	.word	0x20000ae8
 8003618:	08016e18 	.word	0x08016e18
 800361c:	08016e20 	.word	0x08016e20
 8003620:	08016e2c 	.word	0x08016e2c
 8003624:	08016e38 	.word	0x08016e38
 8003628:	08016e44 	.word	0x08016e44
 800362c:	08016e54 	.word	0x08016e54
 8003630:	08016e70 	.word	0x08016e70
 8003634:	08016e80 	.word	0x08016e80
 8003638:	08016e9c 	.word	0x08016e9c
 800363c:	08016eac 	.word	0x08016eac
 8003640:	08016ebc 	.word	0x08016ebc
 8003644:	08016ecc 	.word	0x08016ecc
 8003648:	08016edc 	.word	0x08016edc
 800364c:	08016eec 	.word	0x08016eec
 8003650:	08016efc 	.word	0x08016efc
 8003654:	08016f08 	.word	0x08016f08

08003658 <float_to_integer>:

// CORDIC
int32_t float_to_integer(float in, int scaling_factor, uint8_t bits){
 8003658:	b480      	push	{r7}
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003662:	60b8      	str	r0, [r7, #8]
 8003664:	460b      	mov	r3, r1
 8003666:	71fb      	strb	r3, [r7, #7]

	int32_t acc;
	if(bits == 32){
 8003668:	79fb      	ldrb	r3, [r7, #7]
 800366a:	2b20      	cmp	r3, #32
 800366c:	d135      	bne.n	80036da <float_to_integer+0x82>
	if(in <= 1){
 800366e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003672:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800367a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367e:	d811      	bhi.n	80036a4 <float_to_integer+0x4c>
		 acc = (uint32_t)(in*scaling_factor*2147483648);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	ee07 3a90 	vmov	s15, r3
 8003686:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800368a:	edd7 7a03 	vldr	s15, [r7, #12]
 800368e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003692:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800375c <float_to_integer+0x104>
 8003696:	ee67 7a87 	vmul.f32	s15, s15, s14
 800369a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800369e:	ee17 3a90 	vmov	r3, s15
 80036a2:	617b      	str	r3, [r7, #20]
	}

	if(in > 1){
 80036a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80036a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80036ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b4:	dd11      	ble.n	80036da <float_to_integer+0x82>
		 acc = (uint32_t)((in/scaling_factor)*2147483648);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	ee07 3a90 	vmov	s15, r3
 80036bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036c0:	edd7 6a03 	vldr	s13, [r7, #12]
 80036c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036c8:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800375c <float_to_integer+0x104>
 80036cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036d4:	ee17 3a90 	vmov	r3, s15
 80036d8:	617b      	str	r3, [r7, #20]
		}
}
	if(bits == 16){
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	2b10      	cmp	r3, #16
 80036de:	d135      	bne.n	800374c <float_to_integer+0xf4>
		if(in <= 1){
 80036e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80036e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80036e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f0:	d811      	bhi.n	8003716 <float_to_integer+0xbe>
			 acc = (uint32_t)(in*scaling_factor*32767);
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	ee07 3a90 	vmov	s15, r3
 80036f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003704:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003760 <float_to_integer+0x108>
 8003708:	ee67 7a87 	vmul.f32	s15, s15, s14
 800370c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003710:	ee17 3a90 	vmov	r3, s15
 8003714:	617b      	str	r3, [r7, #20]
		}

		if(in > 1){
 8003716:	edd7 7a03 	vldr	s15, [r7, #12]
 800371a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800371e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003726:	dd11      	ble.n	800374c <float_to_integer+0xf4>
			 acc = (uint32_t)((in/scaling_factor)*32767);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	ee07 3a90 	vmov	s15, r3
 800372e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003732:	edd7 6a03 	vldr	s13, [r7, #12]
 8003736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800373a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003760 <float_to_integer+0x108>
 800373e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003746:	ee17 3a90 	vmov	r3, s15
 800374a:	617b      	str	r3, [r7, #20]
			}
	}


	return acc;
 800374c:	697b      	ldr	r3, [r7, #20]
}
 800374e:	4618      	mov	r0, r3
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	4f000000 	.word	0x4f000000
 8003760:	46fffe00 	.word	0x46fffe00

08003764 <integer_to_float>:

float integer_to_float(int32_t result_cordic_integer, int squarted_scaling_factor, int8_t mode, uint8_t bits){
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	4611      	mov	r1, r2
 8003770:	461a      	mov	r2, r3
 8003772:	460b      	mov	r3, r1
 8003774:	71fb      	strb	r3, [r7, #7]
 8003776:	4613      	mov	r3, r2
 8003778:	71bb      	strb	r3, [r7, #6]
	float acc;

	if(bits == 32){
 800377a:	79bb      	ldrb	r3, [r7, #6]
 800377c:	2b20      	cmp	r3, #32
 800377e:	d12b      	bne.n	80037d8 <integer_to_float+0x74>
		// mode = 1 when float_to_integer() in is  <= 1
		if(mode){
 8003780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d011      	beq.n	80037ac <integer_to_float+0x48>
			acc = (float)((result_cordic_integer/2147483648.0f)/squarted_scaling_factor);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	ee07 3a90 	vmov	s15, r3
 800378e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003792:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800384c <integer_to_float+0xe8>
 8003796:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	ee07 3a90 	vmov	s15, r3
 80037a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037a8:	edc7 7a05 	vstr	s15, [r7, #20]
		}
		// mode = 0 when float_to_integer() in is > 1
		if(!mode){
 80037ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d111      	bne.n	80037d8 <integer_to_float+0x74>
			acc = (float)((result_cordic_integer/2147483648.0f)*squarted_scaling_factor);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037be:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800384c <integer_to_float+0xe8>
 80037c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	ee07 3a90 	vmov	s15, r3
 80037cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d4:	edc7 7a05 	vstr	s15, [r7, #20]
		}
	}

	if(bits == 16){
 80037d8:	79bb      	ldrb	r3, [r7, #6]
 80037da:	2b10      	cmp	r3, #16
 80037dc:	d12b      	bne.n	8003836 <integer_to_float+0xd2>
		// mode = 1 when float_to_integer() in is  <= 1
		if(mode){
 80037de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d011      	beq.n	800380a <integer_to_float+0xa6>
			acc = (float)((result_cordic_integer/32767.0f)/squarted_scaling_factor);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	ee07 3a90 	vmov	s15, r3
 80037ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037f0:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003850 <integer_to_float+0xec>
 80037f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	ee07 3a90 	vmov	s15, r3
 80037fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003806:	edc7 7a05 	vstr	s15, [r7, #20]
		}
		// mode = 0 when float_to_integer() in is > 1
		if(!mode){
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d111      	bne.n	8003836 <integer_to_float+0xd2>
			acc = (float)((result_cordic_integer/32767.0f)*squarted_scaling_factor);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	ee07 3a90 	vmov	s15, r3
 8003818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800381c:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8003850 <integer_to_float+0xec>
 8003820:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800382e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003832:	edc7 7a05 	vstr	s15, [r7, #20]
		}
	}

	return acc;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	ee07 3a90 	vmov	s15, r3

}
 800383c:	eeb0 0a67 	vmov.f32	s0, s15
 8003840:	371c      	adds	r7, #28
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	4f000000 	.word	0x4f000000
 8003850:	46fffe00 	.word	0x46fffe00

08003854 <approx_acos2>:
    // Example coefficients – you would need to adjust these for your range and precision.
    float a0 = 1.5708f;  // ~pi/2
    float a1 = -1.5700f;
    return a0 + a1 * x;
}
static inline float approx_acos2(float x) {
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	ed87 0a01 	vstr	s0, [r7, #4]
    // Example coefficients – you would need to adjust these for your range and precision.
	if (x < -1.0f) x = -1.0f;
 800385e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003862:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8003866:	eef4 7ac7 	vcmpe.f32	s15, s14
 800386a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386e:	d502      	bpl.n	8003876 <approx_acos2+0x22>
 8003870:	4b1a      	ldr	r3, [pc, #104]	@ (80038dc <approx_acos2+0x88>)
 8003872:	607b      	str	r3, [r7, #4]
 8003874:	e00b      	b.n	800388e <approx_acos2+0x3a>
	    else if (x > 1.0f) x = 1.0f;
 8003876:	edd7 7a01 	vldr	s15, [r7, #4]
 800387a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800387e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003886:	dd02      	ble.n	800388e <approx_acos2+0x3a>
 8003888:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800388c:	607b      	str	r3, [r7, #4]
	    float sqrt_val = sqrtf(1.0f - x);
 800388e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003892:	edd7 7a01 	vldr	s15, [r7, #4]
 8003896:	ee77 7a67 	vsub.f32	s15, s14, s15
 800389a:	eeb0 0a67 	vmov.f32	s0, s15
 800389e:	f012 facf 	bl	8015e40 <sqrtf>
 80038a2:	ed87 0a03 	vstr	s0, [r7, #12]
	    return sqrt_val * (1.5707963050f + x * (-0.2145988016f + 0.0889789874f * x));
 80038a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80038aa:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80038e0 <approx_acos2+0x8c>
 80038ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038b2:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80038e4 <approx_acos2+0x90>
 80038b6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80038ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80038be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c2:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80038e8 <approx_acos2+0x94>
 80038c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80038ce:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80038d2:	eeb0 0a67 	vmov.f32	s0, s15
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	bf800000 	.word	0xbf800000
 80038e0:	3db63a9e 	.word	0x3db63a9e
 80038e4:	3e5bbfca 	.word	0x3e5bbfca
 80038e8:	3fc90fda 	.word	0x3fc90fda

080038ec <DisplayAllVariables>:

	    // Return the corresponding LUT entry.
	    return acos_lut[index - 1];
}

void DisplayAllVariables(void) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b0a0      	sub	sp, #128	@ 0x80
 80038f0:	af00      	add	r7, sp, #0
    char buffer[128];

    sprintf(buffer, "KP = %f\n", Kp);
 80038f2:	4b5e      	ldr	r3, [pc, #376]	@ (8003a6c <DisplayAllVariables+0x180>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fc fe4e 	bl	8000598 <__aeabi_f2d>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4638      	mov	r0, r7
 8003902:	495b      	ldr	r1, [pc, #364]	@ (8003a70 <DisplayAllVariables+0x184>)
 8003904:	f00e f9c4 	bl	8011c90 <siprintf>
        SendUSBMessage(buffer);
 8003908:	463b      	mov	r3, r7
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff fcc0 	bl	8003290 <SendUSBMessage>

        sprintf(buffer, "Ti = %f\n", Ti);
 8003910:	4b58      	ldr	r3, [pc, #352]	@ (8003a74 <DisplayAllVariables+0x188>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f7fc fe3f 	bl	8000598 <__aeabi_f2d>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4638      	mov	r0, r7
 8003920:	4955      	ldr	r1, [pc, #340]	@ (8003a78 <DisplayAllVariables+0x18c>)
 8003922:	f00e f9b5 	bl	8011c90 <siprintf>
        SendUSBMessage(buffer);
 8003926:	463b      	mov	r3, r7
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff fcb1 	bl	8003290 <SendUSBMessage>

        sprintf(buffer, "vref = %hu\n", vref);
 800392e:	4b53      	ldr	r3, [pc, #332]	@ (8003a7c <DisplayAllVariables+0x190>)
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	463b      	mov	r3, r7
 8003936:	4952      	ldr	r1, [pc, #328]	@ (8003a80 <DisplayAllVariables+0x194>)
 8003938:	4618      	mov	r0, r3
 800393a:	f00e f9a9 	bl	8011c90 <siprintf>
        SendUSBMessage(buffer);
 800393e:	463b      	mov	r3, r7
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff fca5 	bl	8003290 <SendUSBMessage>

        sprintf(buffer, "imax1 = %f\n", imax1);
 8003946:	4b4f      	ldr	r3, [pc, #316]	@ (8003a84 <DisplayAllVariables+0x198>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	463b      	mov	r3, r7
 800394c:	494e      	ldr	r1, [pc, #312]	@ (8003a88 <DisplayAllVariables+0x19c>)
 800394e:	4618      	mov	r0, r3
 8003950:	f00e f99e 	bl	8011c90 <siprintf>
        SendUSBMessage(buffer);
 8003954:	463b      	mov	r3, r7
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff fc9a 	bl	8003290 <SendUSBMessage>

        sprintf(buffer, "imax2 = %f\n", imax2);
 800395c:	4b4b      	ldr	r3, [pc, #300]	@ (8003a8c <DisplayAllVariables+0x1a0>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	463b      	mov	r3, r7
 8003962:	494b      	ldr	r1, [pc, #300]	@ (8003a90 <DisplayAllVariables+0x1a4>)
 8003964:	4618      	mov	r0, r3
 8003966:	f00e f993 	bl	8011c90 <siprintf>
        SendUSBMessage(buffer);
 800396a:	463b      	mov	r3, r7
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fc8f 	bl	8003290 <SendUSBMessage>

        sprintf(buffer, "imin = %f\n", imin);
 8003972:	4b48      	ldr	r3, [pc, #288]	@ (8003a94 <DisplayAllVariables+0x1a8>)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	463b      	mov	r3, r7
 8003978:	4947      	ldr	r1, [pc, #284]	@ (8003a98 <DisplayAllVariables+0x1ac>)
 800397a:	4618      	mov	r0, r3
 800397c:	f00e f988 	bl	8011c90 <siprintf>
        SendUSBMessage(buffer);
 8003980:	463b      	mov	r3, r7
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff fc84 	bl	8003290 <SendUSBMessage>

        sprintf(buffer, "input_voltage = %f\n", input_voltage);
 8003988:	4b44      	ldr	r3, [pc, #272]	@ (8003a9c <DisplayAllVariables+0x1b0>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	463b      	mov	r3, r7
 800398e:	4944      	ldr	r1, [pc, #272]	@ (8003aa0 <DisplayAllVariables+0x1b4>)
 8003990:	4618      	mov	r0, r3
 8003992:	f00e f97d 	bl	8011c90 <siprintf>
        SendUSBMessage(buffer);
 8003996:	463b      	mov	r3, r7
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fc79 	bl	8003290 <SendUSBMessage>

        sprintf(buffer, "output_voltage = %f\n", output_voltage);
 800399e:	4b41      	ldr	r3, [pc, #260]	@ (8003aa4 <DisplayAllVariables+0x1b8>)
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	463b      	mov	r3, r7
 80039a4:	4940      	ldr	r1, [pc, #256]	@ (8003aa8 <DisplayAllVariables+0x1bc>)
 80039a6:	4618      	mov	r0, r3
 80039a8:	f00e f972 	bl	8011c90 <siprintf>
        SendUSBMessage(buffer);
 80039ac:	463b      	mov	r3, r7
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff fc6e 	bl	8003290 <SendUSBMessage>

        sprintf(buffer, "pcb_temp = %f\n", pcb_temp);
 80039b4:	4b3d      	ldr	r3, [pc, #244]	@ (8003aac <DisplayAllVariables+0x1c0>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	463b      	mov	r3, r7
 80039ba:	493d      	ldr	r1, [pc, #244]	@ (8003ab0 <DisplayAllVariables+0x1c4>)
 80039bc:	4618      	mov	r0, r3
 80039be:	f00e f967 	bl	8011c90 <siprintf>
        SendUSBMessage(buffer);
 80039c2:	463b      	mov	r3, r7
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff fc63 	bl	8003290 <SendUSBMessage>

        sprintf(buffer, "heat_sink_temp = %f\n", heat_sink_temp);
 80039ca:	4b3a      	ldr	r3, [pc, #232]	@ (8003ab4 <DisplayAllVariables+0x1c8>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	463b      	mov	r3, r7
 80039d0:	4939      	ldr	r1, [pc, #228]	@ (8003ab8 <DisplayAllVariables+0x1cc>)
 80039d2:	4618      	mov	r0, r3
 80039d4:	f00e f95c 	bl	8011c90 <siprintf>
        SendUSBMessage(buffer);
 80039d8:	463b      	mov	r3, r7
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff fc58 	bl	8003290 <SendUSBMessage>

        sprintf(buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 80039e0:	4b36      	ldr	r3, [pc, #216]	@ (8003abc <DisplayAllVariables+0x1d0>)
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	463b      	mov	r3, r7
 80039e8:	4935      	ldr	r1, [pc, #212]	@ (8003ac0 <DisplayAllVariables+0x1d4>)
 80039ea:	4618      	mov	r0, r3
 80039ec:	f00e f950 	bl	8011c90 <siprintf>
        SendUSBMessage(buffer);
 80039f0:	463b      	mov	r3, r7
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff fc4c 	bl	8003290 <SendUSBMessage>

        sprintf(buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 80039f8:	4b32      	ldr	r3, [pc, #200]	@ (8003ac4 <DisplayAllVariables+0x1d8>)
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	463b      	mov	r3, r7
 8003a00:	4931      	ldr	r1, [pc, #196]	@ (8003ac8 <DisplayAllVariables+0x1dc>)
 8003a02:	4618      	mov	r0, r3
 8003a04:	f00e f944 	bl	8011c90 <siprintf>
        SendUSBMessage(buffer);
 8003a08:	463b      	mov	r3, r7
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff fc40 	bl	8003290 <SendUSBMessage>

        sprintf(buffer, "imax2_sum = %f\n", imax2_sum);
 8003a10:	4b2e      	ldr	r3, [pc, #184]	@ (8003acc <DisplayAllVariables+0x1e0>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	463b      	mov	r3, r7
 8003a16:	492e      	ldr	r1, [pc, #184]	@ (8003ad0 <DisplayAllVariables+0x1e4>)
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f00e f939 	bl	8011c90 <siprintf>
        SendUSBMessage(buffer);
 8003a1e:	463b      	mov	r3, r7
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fc35 	bl	8003290 <SendUSBMessage>

        sprintf(buffer, "delay_tr = %f\n", delay_tr);
 8003a26:	4b2b      	ldr	r3, [pc, #172]	@ (8003ad4 <DisplayAllVariables+0x1e8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fc fdb4 	bl	8000598 <__aeabi_f2d>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4638      	mov	r0, r7
 8003a36:	4928      	ldr	r1, [pc, #160]	@ (8003ad8 <DisplayAllVariables+0x1ec>)
 8003a38:	f00e f92a 	bl	8011c90 <siprintf>
        SendUSBMessage(buffer);
 8003a3c:	463b      	mov	r3, r7
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff fc26 	bl	8003290 <SendUSBMessage>

        sprintf(buffer, "delay_hc = %f\n", delay_hc);
 8003a44:	4b25      	ldr	r3, [pc, #148]	@ (8003adc <DisplayAllVariables+0x1f0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fc fda5 	bl	8000598 <__aeabi_f2d>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4638      	mov	r0, r7
 8003a54:	4922      	ldr	r1, [pc, #136]	@ (8003ae0 <DisplayAllVariables+0x1f4>)
 8003a56:	f00e f91b 	bl	8011c90 <siprintf>
        SendUSBMessage(buffer);
 8003a5a:	463b      	mov	r3, r7
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff fc17 	bl	8003290 <SendUSBMessage>
}
 8003a62:	bf00      	nop
 8003a64:	3780      	adds	r7, #128	@ 0x80
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000018 	.word	0x20000018
 8003a70:	08016e0c 	.word	0x08016e0c
 8003a74:	2000001c 	.word	0x2000001c
 8003a78:	08016e20 	.word	0x08016e20
 8003a7c:	20000000 	.word	0x20000000
 8003a80:	08016e38 	.word	0x08016e38
 8003a84:	20000a58 	.word	0x20000a58
 8003a88:	08016f1c 	.word	0x08016f1c
 8003a8c:	20000a5c 	.word	0x20000a5c
 8003a90:	08016f28 	.word	0x08016f28
 8003a94:	20000a60 	.word	0x20000a60
 8003a98:	08016f34 	.word	0x08016f34
 8003a9c:	20000a64 	.word	0x20000a64
 8003aa0:	08016f40 	.word	0x08016f40
 8003aa4:	20000a7c 	.word	0x20000a7c
 8003aa8:	08016f54 	.word	0x08016f54
 8003aac:	20000a68 	.word	0x20000a68
 8003ab0:	08016f6c 	.word	0x08016f6c
 8003ab4:	20000a6c 	.word	0x20000a6c
 8003ab8:	08016f7c 	.word	0x08016f7c
 8003abc:	20000a54 	.word	0x20000a54
 8003ac0:	08016e54 	.word	0x08016e54
 8003ac4:	20000a56 	.word	0x20000a56
 8003ac8:	08016e80 	.word	0x08016e80
 8003acc:	20000a8c 	.word	0x20000a8c
 8003ad0:	08016eac 	.word	0x08016eac
 8003ad4:	20000004 	.word	0x20000004
 8003ad8:	08016ecc 	.word	0x08016ecc
 8003adc:	20000008 	.word	0x20000008
 8003ae0:	08016eec 	.word	0x08016eec

08003ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ae8:	b672      	cpsid	i
}
 8003aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003aec:	bf00      	nop
 8003aee:	e7fd      	b.n	8003aec <Error_Handler+0x8>

08003af0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003af6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b34 <HAL_MspInit+0x44>)
 8003af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003afa:	4a0e      	ldr	r2, [pc, #56]	@ (8003b34 <HAL_MspInit+0x44>)
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b02:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <HAL_MspInit+0x44>)
 8003b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	607b      	str	r3, [r7, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b0e:	4b09      	ldr	r3, [pc, #36]	@ (8003b34 <HAL_MspInit+0x44>)
 8003b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b12:	4a08      	ldr	r2, [pc, #32]	@ (8003b34 <HAL_MspInit+0x44>)
 8003b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b18:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b1a:	4b06      	ldr	r3, [pc, #24]	@ (8003b34 <HAL_MspInit+0x44>)
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003b26:	f005 fa23 	bl	8008f70 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40021000 	.word	0x40021000

08003b38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b0a4      	sub	sp, #144	@ 0x90
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b40:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	605a      	str	r2, [r3, #4]
 8003b4a:	609a      	str	r2, [r3, #8]
 8003b4c:	60da      	str	r2, [r3, #12]
 8003b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b50:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b54:	2254      	movs	r2, #84	@ 0x54
 8003b56:	2100      	movs	r1, #0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f00e f928 	bl	8011dae <memset>
  if(hadc->Instance==ADC1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b66:	d11c      	bne.n	8003ba2 <HAL_ADC_MspInit+0x6a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003b68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003b6e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003b72:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f005 ff37 	bl	80099ec <HAL_RCCEx_PeriphCLKConfig>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003b84:	f7ff ffae 	bl	8003ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003b88:	4b86      	ldr	r3, [pc, #536]	@ (8003da4 <HAL_ADC_MspInit+0x26c>)
 8003b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b8c:	4a85      	ldr	r2, [pc, #532]	@ (8003da4 <HAL_ADC_MspInit+0x26c>)
 8003b8e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b94:	4b83      	ldr	r3, [pc, #524]	@ (8003da4 <HAL_ADC_MspInit+0x26c>)
 8003b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8003ba0:	e185      	b.n	8003eae <HAL_ADC_MspInit+0x376>
  else if(hadc->Instance==ADC3)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a80      	ldr	r2, [pc, #512]	@ (8003da8 <HAL_ADC_MspInit+0x270>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	f040 8087 	bne.w	8003cbc <HAL_ADC_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003bae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003bb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003bb8:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f005 ff14 	bl	80099ec <HAL_RCCEx_PeriphCLKConfig>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_ADC_MspInit+0x96>
      Error_Handler();
 8003bca:	f7ff ff8b 	bl	8003ae4 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003bce:	4b77      	ldr	r3, [pc, #476]	@ (8003dac <HAL_ADC_MspInit+0x274>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	4a75      	ldr	r2, [pc, #468]	@ (8003dac <HAL_ADC_MspInit+0x274>)
 8003bd6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003bd8:	4b74      	ldr	r3, [pc, #464]	@ (8003dac <HAL_ADC_MspInit+0x274>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d10b      	bne.n	8003bf8 <HAL_ADC_MspInit+0xc0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003be0:	4b70      	ldr	r3, [pc, #448]	@ (8003da4 <HAL_ADC_MspInit+0x26c>)
 8003be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be4:	4a6f      	ldr	r2, [pc, #444]	@ (8003da4 <HAL_ADC_MspInit+0x26c>)
 8003be6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bec:	4b6d      	ldr	r3, [pc, #436]	@ (8003da4 <HAL_ADC_MspInit+0x26c>)
 8003bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bf4:	623b      	str	r3, [r7, #32]
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8003da4 <HAL_ADC_MspInit+0x26c>)
 8003bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bfc:	4a69      	ldr	r2, [pc, #420]	@ (8003da4 <HAL_ADC_MspInit+0x26c>)
 8003bfe:	f043 0302 	orr.w	r3, r3, #2
 8003c02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c04:	4b67      	ldr	r3, [pc, #412]	@ (8003da4 <HAL_ADC_MspInit+0x26c>)
 8003c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c10:	4b64      	ldr	r3, [pc, #400]	@ (8003da4 <HAL_ADC_MspInit+0x26c>)
 8003c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c14:	4a63      	ldr	r2, [pc, #396]	@ (8003da4 <HAL_ADC_MspInit+0x26c>)
 8003c16:	f043 0310 	orr.w	r3, r3, #16
 8003c1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c1c:	4b61      	ldr	r3, [pc, #388]	@ (8003da4 <HAL_ADC_MspInit+0x26c>)
 8003c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = CS_VREF_1_Pin|HEATSINK_TEMP_Pin;
 8003c28:	f242 0302 	movw	r3, #8194	@ 0x2002
 8003c2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c3a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003c3e:	4619      	mov	r1, r3
 8003c40:	485b      	ldr	r0, [pc, #364]	@ (8003db0 <HAL_ADC_MspInit+0x278>)
 8003c42:	f003 f9ef 	bl	8007024 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PCB_TEMP_Pin|CS_VREF_2_Pin|INPUT_V_ADC_Pin;
 8003c46:	f44f 530a 	mov.w	r3, #8832	@ 0x2280
 8003c4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c58:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4855      	ldr	r0, [pc, #340]	@ (8003db4 <HAL_ADC_MspInit+0x27c>)
 8003c60:	f003 f9e0 	bl	8007024 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel1;
 8003c64:	4b54      	ldr	r3, [pc, #336]	@ (8003db8 <HAL_ADC_MspInit+0x280>)
 8003c66:	4a55      	ldr	r2, [pc, #340]	@ (8003dbc <HAL_ADC_MspInit+0x284>)
 8003c68:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003c6a:	4b53      	ldr	r3, [pc, #332]	@ (8003db8 <HAL_ADC_MspInit+0x280>)
 8003c6c:	2225      	movs	r2, #37	@ 0x25
 8003c6e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c70:	4b51      	ldr	r3, [pc, #324]	@ (8003db8 <HAL_ADC_MspInit+0x280>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c76:	4b50      	ldr	r3, [pc, #320]	@ (8003db8 <HAL_ADC_MspInit+0x280>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003c7c:	4b4e      	ldr	r3, [pc, #312]	@ (8003db8 <HAL_ADC_MspInit+0x280>)
 8003c7e:	2280      	movs	r2, #128	@ 0x80
 8003c80:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c82:	4b4d      	ldr	r3, [pc, #308]	@ (8003db8 <HAL_ADC_MspInit+0x280>)
 8003c84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c88:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c8a:	4b4b      	ldr	r3, [pc, #300]	@ (8003db8 <HAL_ADC_MspInit+0x280>)
 8003c8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c90:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003c92:	4b49      	ldr	r3, [pc, #292]	@ (8003db8 <HAL_ADC_MspInit+0x280>)
 8003c94:	2220      	movs	r2, #32
 8003c96:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003c98:	4b47      	ldr	r3, [pc, #284]	@ (8003db8 <HAL_ADC_MspInit+0x280>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003c9e:	4846      	ldr	r0, [pc, #280]	@ (8003db8 <HAL_ADC_MspInit+0x280>)
 8003ca0:	f002 ff4e 	bl	8006b40 <HAL_DMA_Init>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_ADC_MspInit+0x176>
      Error_Handler();
 8003caa:	f7ff ff1b 	bl	8003ae4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a41      	ldr	r2, [pc, #260]	@ (8003db8 <HAL_ADC_MspInit+0x280>)
 8003cb2:	655a      	str	r2, [r3, #84]	@ 0x54
 8003cb4:	4a40      	ldr	r2, [pc, #256]	@ (8003db8 <HAL_ADC_MspInit+0x280>)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003cba:	e0f8      	b.n	8003eae <HAL_ADC_MspInit+0x376>
  else if(hadc->Instance==ADC4)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a3f      	ldr	r2, [pc, #252]	@ (8003dc0 <HAL_ADC_MspInit+0x288>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	f040 8082 	bne.w	8003dcc <HAL_ADC_MspInit+0x294>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003cc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003cce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003cd2:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cd4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f005 fe87 	bl	80099ec <HAL_RCCEx_PeriphCLKConfig>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <HAL_ADC_MspInit+0x1b0>
      Error_Handler();
 8003ce4:	f7ff fefe 	bl	8003ae4 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003ce8:	4b30      	ldr	r3, [pc, #192]	@ (8003dac <HAL_ADC_MspInit+0x274>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3301      	adds	r3, #1
 8003cee:	4a2f      	ldr	r2, [pc, #188]	@ (8003dac <HAL_ADC_MspInit+0x274>)
 8003cf0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003cf2:	4b2e      	ldr	r3, [pc, #184]	@ (8003dac <HAL_ADC_MspInit+0x274>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d10b      	bne.n	8003d12 <HAL_ADC_MspInit+0x1da>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8003da4 <HAL_ADC_MspInit+0x26c>)
 8003cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cfe:	4a29      	ldr	r2, [pc, #164]	@ (8003da4 <HAL_ADC_MspInit+0x26c>)
 8003d00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d06:	4b27      	ldr	r3, [pc, #156]	@ (8003da4 <HAL_ADC_MspInit+0x26c>)
 8003d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d12:	4b24      	ldr	r3, [pc, #144]	@ (8003da4 <HAL_ADC_MspInit+0x26c>)
 8003d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d16:	4a23      	ldr	r2, [pc, #140]	@ (8003da4 <HAL_ADC_MspInit+0x26c>)
 8003d18:	f043 0310 	orr.w	r3, r3, #16
 8003d1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d1e:	4b21      	ldr	r3, [pc, #132]	@ (8003da4 <HAL_ADC_MspInit+0x26c>)
 8003d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT_V_ADC_Pin;
 8003d2a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d30:	2303      	movs	r3, #3
 8003d32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(OUTPUT_V_ADC_GPIO_Port, &GPIO_InitStruct);
 8003d3c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003d40:	4619      	mov	r1, r3
 8003d42:	481c      	ldr	r0, [pc, #112]	@ (8003db4 <HAL_ADC_MspInit+0x27c>)
 8003d44:	f003 f96e 	bl	8007024 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel2;
 8003d48:	4b1e      	ldr	r3, [pc, #120]	@ (8003dc4 <HAL_ADC_MspInit+0x28c>)
 8003d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003dc8 <HAL_ADC_MspInit+0x290>)
 8003d4c:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8003d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003dc4 <HAL_ADC_MspInit+0x28c>)
 8003d50:	2226      	movs	r2, #38	@ 0x26
 8003d52:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d54:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc4 <HAL_ADC_MspInit+0x28c>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc4 <HAL_ADC_MspInit+0x28c>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8003d60:	4b18      	ldr	r3, [pc, #96]	@ (8003dc4 <HAL_ADC_MspInit+0x28c>)
 8003d62:	2280      	movs	r2, #128	@ 0x80
 8003d64:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d66:	4b17      	ldr	r3, [pc, #92]	@ (8003dc4 <HAL_ADC_MspInit+0x28c>)
 8003d68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d6c:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d6e:	4b15      	ldr	r3, [pc, #84]	@ (8003dc4 <HAL_ADC_MspInit+0x28c>)
 8003d70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d74:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8003d76:	4b13      	ldr	r3, [pc, #76]	@ (8003dc4 <HAL_ADC_MspInit+0x28c>)
 8003d78:	2220      	movs	r2, #32
 8003d7a:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003d7c:	4b11      	ldr	r3, [pc, #68]	@ (8003dc4 <HAL_ADC_MspInit+0x28c>)
 8003d7e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8003d82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8003d84:	480f      	ldr	r0, [pc, #60]	@ (8003dc4 <HAL_ADC_MspInit+0x28c>)
 8003d86:	f002 fedb 	bl	8006b40 <HAL_DMA_Init>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_ADC_MspInit+0x25c>
      Error_Handler();
 8003d90:	f7ff fea8 	bl	8003ae4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a0b      	ldr	r2, [pc, #44]	@ (8003dc4 <HAL_ADC_MspInit+0x28c>)
 8003d98:	655a      	str	r2, [r3, #84]	@ 0x54
 8003d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003dc4 <HAL_ADC_MspInit+0x28c>)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003da0:	e085      	b.n	8003eae <HAL_ADC_MspInit+0x376>
 8003da2:	bf00      	nop
 8003da4:	40021000 	.word	0x40021000
 8003da8:	50000400 	.word	0x50000400
 8003dac:	20000bb0 	.word	0x20000bb0
 8003db0:	48000400 	.word	0x48000400
 8003db4:	48001000 	.word	0x48001000
 8003db8:	2000057c 	.word	0x2000057c
 8003dbc:	40020008 	.word	0x40020008
 8003dc0:	50000500 	.word	0x50000500
 8003dc4:	200005dc 	.word	0x200005dc
 8003dc8:	4002001c 	.word	0x4002001c
  else if(hadc->Instance==ADC5)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a39      	ldr	r2, [pc, #228]	@ (8003eb8 <HAL_ADC_MspInit+0x380>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d16b      	bne.n	8003eae <HAL_ADC_MspInit+0x376>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003dd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003dda:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003ddc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003de0:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003de2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003de6:	4618      	mov	r0, r3
 8003de8:	f005 fe00 	bl	80099ec <HAL_RCCEx_PeriphCLKConfig>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_ADC_MspInit+0x2be>
      Error_Handler();
 8003df2:	f7ff fe77 	bl	8003ae4 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003df6:	4b31      	ldr	r3, [pc, #196]	@ (8003ebc <HAL_ADC_MspInit+0x384>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	4a2f      	ldr	r2, [pc, #188]	@ (8003ebc <HAL_ADC_MspInit+0x384>)
 8003dfe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003e00:	4b2e      	ldr	r3, [pc, #184]	@ (8003ebc <HAL_ADC_MspInit+0x384>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d10b      	bne.n	8003e20 <HAL_ADC_MspInit+0x2e8>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003e08:	4b2d      	ldr	r3, [pc, #180]	@ (8003ec0 <HAL_ADC_MspInit+0x388>)
 8003e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e0c:	4a2c      	ldr	r2, [pc, #176]	@ (8003ec0 <HAL_ADC_MspInit+0x388>)
 8003e0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e14:	4b2a      	ldr	r3, [pc, #168]	@ (8003ec0 <HAL_ADC_MspInit+0x388>)
 8003e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e20:	4b27      	ldr	r3, [pc, #156]	@ (8003ec0 <HAL_ADC_MspInit+0x388>)
 8003e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e24:	4a26      	ldr	r2, [pc, #152]	@ (8003ec0 <HAL_ADC_MspInit+0x388>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e2c:	4b24      	ldr	r3, [pc, #144]	@ (8003ec0 <HAL_ADC_MspInit+0x388>)
 8003e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMAX2_SUM_Pin;
 8003e38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(IMAX2_SUM_GPIO_Port, &GPIO_InitStruct);
 8003e4a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003e4e:	4619      	mov	r1, r3
 8003e50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e54:	f003 f8e6 	bl	8007024 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel3;
 8003e58:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec4 <HAL_ADC_MspInit+0x38c>)
 8003e5a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ec8 <HAL_ADC_MspInit+0x390>)
 8003e5c:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8003e5e:	4b19      	ldr	r3, [pc, #100]	@ (8003ec4 <HAL_ADC_MspInit+0x38c>)
 8003e60:	2227      	movs	r2, #39	@ 0x27
 8003e62:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e64:	4b17      	ldr	r3, [pc, #92]	@ (8003ec4 <HAL_ADC_MspInit+0x38c>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e6a:	4b16      	ldr	r3, [pc, #88]	@ (8003ec4 <HAL_ADC_MspInit+0x38c>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8003e70:	4b14      	ldr	r3, [pc, #80]	@ (8003ec4 <HAL_ADC_MspInit+0x38c>)
 8003e72:	2280      	movs	r2, #128	@ 0x80
 8003e74:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e76:	4b13      	ldr	r3, [pc, #76]	@ (8003ec4 <HAL_ADC_MspInit+0x38c>)
 8003e78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e7c:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e7e:	4b11      	ldr	r3, [pc, #68]	@ (8003ec4 <HAL_ADC_MspInit+0x38c>)
 8003e80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e84:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8003e86:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec4 <HAL_ADC_MspInit+0x38c>)
 8003e88:	2220      	movs	r2, #32
 8003e8a:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8003e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec4 <HAL_ADC_MspInit+0x38c>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8003e92:	480c      	ldr	r0, [pc, #48]	@ (8003ec4 <HAL_ADC_MspInit+0x38c>)
 8003e94:	f002 fe54 	bl	8006b40 <HAL_DMA_Init>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <HAL_ADC_MspInit+0x36a>
      Error_Handler();
 8003e9e:	f7ff fe21 	bl	8003ae4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a07      	ldr	r2, [pc, #28]	@ (8003ec4 <HAL_ADC_MspInit+0x38c>)
 8003ea6:	655a      	str	r2, [r3, #84]	@ 0x54
 8003ea8:	4a06      	ldr	r2, [pc, #24]	@ (8003ec4 <HAL_ADC_MspInit+0x38c>)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003eae:	bf00      	nop
 8003eb0:	3790      	adds	r7, #144	@ 0x90
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	50000600 	.word	0x50000600
 8003ebc:	20000bb0 	.word	0x20000bb0
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	2000063c 	.word	0x2000063c
 8003ec8:	40020030 	.word	0x40020030

08003ecc <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8003f04 <HAL_CORDIC_MspInit+0x38>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d10b      	bne.n	8003ef6 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003ede:	4b0a      	ldr	r3, [pc, #40]	@ (8003f08 <HAL_CORDIC_MspInit+0x3c>)
 8003ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ee2:	4a09      	ldr	r2, [pc, #36]	@ (8003f08 <HAL_CORDIC_MspInit+0x3c>)
 8003ee4:	f043 0308 	orr.w	r3, r3, #8
 8003ee8:	6493      	str	r3, [r2, #72]	@ 0x48
 8003eea:	4b07      	ldr	r3, [pc, #28]	@ (8003f08 <HAL_CORDIC_MspInit+0x3c>)
 8003eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8003ef6:	bf00      	nop
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40020c00 	.word	0x40020c00
 8003f08:	40021000 	.word	0x40021000

08003f0c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08c      	sub	sp, #48	@ 0x30
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f14:	f107 031c 	add.w	r3, r7, #28
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	605a      	str	r2, [r3, #4]
 8003f1e:	609a      	str	r2, [r3, #8]
 8003f20:	60da      	str	r2, [r3, #12]
 8003f22:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a5b      	ldr	r2, [pc, #364]	@ (8004098 <HAL_DAC_MspInit+0x18c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d159      	bne.n	8003fe2 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003f2e:	4b5b      	ldr	r3, [pc, #364]	@ (800409c <HAL_DAC_MspInit+0x190>)
 8003f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f32:	4a5a      	ldr	r2, [pc, #360]	@ (800409c <HAL_DAC_MspInit+0x190>)
 8003f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f3a:	4b58      	ldr	r3, [pc, #352]	@ (800409c <HAL_DAC_MspInit+0x190>)
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f42:	61bb      	str	r3, [r7, #24]
 8003f44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f46:	4b55      	ldr	r3, [pc, #340]	@ (800409c <HAL_DAC_MspInit+0x190>)
 8003f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f4a:	4a54      	ldr	r2, [pc, #336]	@ (800409c <HAL_DAC_MspInit+0x190>)
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f52:	4b52      	ldr	r3, [pc, #328]	@ (800409c <HAL_DAC_MspInit+0x190>)
 8003f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = IMAX_Pin|IMAX2_Pin;
 8003f5e:	2330      	movs	r3, #48	@ 0x30
 8003f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f62:	2303      	movs	r3, #3
 8003f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f6a:	f107 031c 	add.w	r3, r7, #28
 8003f6e:	4619      	mov	r1, r3
 8003f70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f74:	f003 f856 	bl	8007024 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel4;
 8003f78:	4b49      	ldr	r3, [pc, #292]	@ (80040a0 <HAL_DAC_MspInit+0x194>)
 8003f7a:	4a4a      	ldr	r2, [pc, #296]	@ (80040a4 <HAL_DAC_MspInit+0x198>)
 8003f7c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8003f7e:	4b48      	ldr	r3, [pc, #288]	@ (80040a0 <HAL_DAC_MspInit+0x194>)
 8003f80:	2206      	movs	r2, #6
 8003f82:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f84:	4b46      	ldr	r3, [pc, #280]	@ (80040a0 <HAL_DAC_MspInit+0x194>)
 8003f86:	2210      	movs	r2, #16
 8003f88:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f8a:	4b45      	ldr	r3, [pc, #276]	@ (80040a0 <HAL_DAC_MspInit+0x194>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003f90:	4b43      	ldr	r3, [pc, #268]	@ (80040a0 <HAL_DAC_MspInit+0x194>)
 8003f92:	2280      	movs	r2, #128	@ 0x80
 8003f94:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f96:	4b42      	ldr	r3, [pc, #264]	@ (80040a0 <HAL_DAC_MspInit+0x194>)
 8003f98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f9c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003f9e:	4b40      	ldr	r3, [pc, #256]	@ (80040a0 <HAL_DAC_MspInit+0x194>)
 8003fa0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fa4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003fa6:	4b3e      	ldr	r3, [pc, #248]	@ (80040a0 <HAL_DAC_MspInit+0x194>)
 8003fa8:	2220      	movs	r2, #32
 8003faa:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003fac:	4b3c      	ldr	r3, [pc, #240]	@ (80040a0 <HAL_DAC_MspInit+0x194>)
 8003fae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fb2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003fb4:	483a      	ldr	r0, [pc, #232]	@ (80040a0 <HAL_DAC_MspInit+0x194>)
 8003fb6:	f002 fdc3 	bl	8006b40 <HAL_DMA_Init>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8003fc0:	f7ff fd90 	bl	8003ae4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a36      	ldr	r2, [pc, #216]	@ (80040a0 <HAL_DAC_MspInit+0x194>)
 8003fc8:	609a      	str	r2, [r3, #8]
 8003fca:	4a35      	ldr	r2, [pc, #212]	@ (80040a0 <HAL_DAC_MspInit+0x194>)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	2036      	movs	r0, #54	@ 0x36
 8003fd6:	f002 faa0 	bl	800651a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003fda:	2036      	movs	r0, #54	@ 0x36
 8003fdc:	f002 fab7 	bl	800654e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8003fe0:	e055      	b.n	800408e <HAL_DAC_MspInit+0x182>
  else if(hdac->Instance==DAC2)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a30      	ldr	r2, [pc, #192]	@ (80040a8 <HAL_DAC_MspInit+0x19c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d150      	bne.n	800408e <HAL_DAC_MspInit+0x182>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8003fec:	4b2b      	ldr	r3, [pc, #172]	@ (800409c <HAL_DAC_MspInit+0x190>)
 8003fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff0:	4a2a      	ldr	r2, [pc, #168]	@ (800409c <HAL_DAC_MspInit+0x190>)
 8003ff2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ff6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ff8:	4b28      	ldr	r3, [pc, #160]	@ (800409c <HAL_DAC_MspInit+0x190>)
 8003ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004004:	4b25      	ldr	r3, [pc, #148]	@ (800409c <HAL_DAC_MspInit+0x190>)
 8004006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004008:	4a24      	ldr	r2, [pc, #144]	@ (800409c <HAL_DAC_MspInit+0x190>)
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004010:	4b22      	ldr	r3, [pc, #136]	@ (800409c <HAL_DAC_MspInit+0x190>)
 8004012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMIN_Pin;
 800401c:	2340      	movs	r3, #64	@ 0x40
 800401e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004020:	2303      	movs	r3, #3
 8004022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004024:	2300      	movs	r3, #0
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMIN_GPIO_Port, &GPIO_InitStruct);
 8004028:	f107 031c 	add.w	r3, r7, #28
 800402c:	4619      	mov	r1, r3
 800402e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004032:	f002 fff7 	bl	8007024 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel5;
 8004036:	4b1d      	ldr	r3, [pc, #116]	@ (80040ac <HAL_DAC_MspInit+0x1a0>)
 8004038:	4a1d      	ldr	r2, [pc, #116]	@ (80040b0 <HAL_DAC_MspInit+0x1a4>)
 800403a:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800403c:	4b1b      	ldr	r3, [pc, #108]	@ (80040ac <HAL_DAC_MspInit+0x1a0>)
 800403e:	2229      	movs	r2, #41	@ 0x29
 8004040:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004042:	4b1a      	ldr	r3, [pc, #104]	@ (80040ac <HAL_DAC_MspInit+0x1a0>)
 8004044:	2210      	movs	r2, #16
 8004046:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004048:	4b18      	ldr	r3, [pc, #96]	@ (80040ac <HAL_DAC_MspInit+0x1a0>)
 800404a:	2200      	movs	r2, #0
 800404c:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800404e:	4b17      	ldr	r3, [pc, #92]	@ (80040ac <HAL_DAC_MspInit+0x1a0>)
 8004050:	2280      	movs	r2, #128	@ 0x80
 8004052:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004054:	4b15      	ldr	r3, [pc, #84]	@ (80040ac <HAL_DAC_MspInit+0x1a0>)
 8004056:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800405a:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800405c:	4b13      	ldr	r3, [pc, #76]	@ (80040ac <HAL_DAC_MspInit+0x1a0>)
 800405e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004062:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8004064:	4b11      	ldr	r3, [pc, #68]	@ (80040ac <HAL_DAC_MspInit+0x1a0>)
 8004066:	2220      	movs	r2, #32
 8004068:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800406a:	4b10      	ldr	r3, [pc, #64]	@ (80040ac <HAL_DAC_MspInit+0x1a0>)
 800406c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004070:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8004072:	480e      	ldr	r0, [pc, #56]	@ (80040ac <HAL_DAC_MspInit+0x1a0>)
 8004074:	f002 fd64 	bl	8006b40 <HAL_DMA_Init>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_DAC_MspInit+0x176>
      Error_Handler();
 800407e:	f7ff fd31 	bl	8003ae4 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a09      	ldr	r2, [pc, #36]	@ (80040ac <HAL_DAC_MspInit+0x1a0>)
 8004086:	609a      	str	r2, [r3, #8]
 8004088:	4a08      	ldr	r2, [pc, #32]	@ (80040ac <HAL_DAC_MspInit+0x1a0>)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800408e:	bf00      	nop
 8004090:	3730      	adds	r7, #48	@ 0x30
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	50000800 	.word	0x50000800
 800409c:	40021000 	.word	0x40021000
 80040a0:	200006ec 	.word	0x200006ec
 80040a4:	40020044 	.word	0x40020044
 80040a8:	50000c00 	.word	0x50000c00
 80040ac:	2000074c 	.word	0x2000074c
 80040b0:	40020058 	.word	0x40020058

080040b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a16      	ldr	r2, [pc, #88]	@ (800411c <HAL_TIM_PWM_MspInit+0x68>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d114      	bne.n	80040f0 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040c6:	4b16      	ldr	r3, [pc, #88]	@ (8004120 <HAL_TIM_PWM_MspInit+0x6c>)
 80040c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ca:	4a15      	ldr	r2, [pc, #84]	@ (8004120 <HAL_TIM_PWM_MspInit+0x6c>)
 80040cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80040d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80040d2:	4b13      	ldr	r3, [pc, #76]	@ (8004120 <HAL_TIM_PWM_MspInit+0x6c>)
 80040d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80040de:	2200      	movs	r2, #0
 80040e0:	2100      	movs	r1, #0
 80040e2:	2018      	movs	r0, #24
 80040e4:	f002 fa19 	bl	800651a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80040e8:	2018      	movs	r0, #24
 80040ea:	f002 fa30 	bl	800654e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80040ee:	e010      	b.n	8004112 <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM8)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a0b      	ldr	r2, [pc, #44]	@ (8004124 <HAL_TIM_PWM_MspInit+0x70>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d10b      	bne.n	8004112 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80040fa:	4b09      	ldr	r3, [pc, #36]	@ (8004120 <HAL_TIM_PWM_MspInit+0x6c>)
 80040fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040fe:	4a08      	ldr	r2, [pc, #32]	@ (8004120 <HAL_TIM_PWM_MspInit+0x6c>)
 8004100:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004104:	6613      	str	r3, [r2, #96]	@ 0x60
 8004106:	4b06      	ldr	r3, [pc, #24]	@ (8004120 <HAL_TIM_PWM_MspInit+0x6c>)
 8004108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800410a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800410e:	60bb      	str	r3, [r7, #8]
 8004110:	68bb      	ldr	r3, [r7, #8]
}
 8004112:	bf00      	nop
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40012c00 	.word	0x40012c00
 8004120:	40021000 	.word	0x40021000
 8004124:	40013400 	.word	0x40013400

08004128 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a35      	ldr	r2, [pc, #212]	@ (800420c <HAL_TIM_Base_MspInit+0xe4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d10c      	bne.n	8004154 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800413a:	4b35      	ldr	r3, [pc, #212]	@ (8004210 <HAL_TIM_Base_MspInit+0xe8>)
 800413c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413e:	4a34      	ldr	r2, [pc, #208]	@ (8004210 <HAL_TIM_Base_MspInit+0xe8>)
 8004140:	f043 0304 	orr.w	r3, r3, #4
 8004144:	6593      	str	r3, [r2, #88]	@ 0x58
 8004146:	4b32      	ldr	r3, [pc, #200]	@ (8004210 <HAL_TIM_Base_MspInit+0xe8>)
 8004148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	61fb      	str	r3, [r7, #28]
 8004150:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004152:	e056      	b.n	8004202 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a2e      	ldr	r2, [pc, #184]	@ (8004214 <HAL_TIM_Base_MspInit+0xec>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d114      	bne.n	8004188 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800415e:	4b2c      	ldr	r3, [pc, #176]	@ (8004210 <HAL_TIM_Base_MspInit+0xe8>)
 8004160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004162:	4a2b      	ldr	r2, [pc, #172]	@ (8004210 <HAL_TIM_Base_MspInit+0xe8>)
 8004164:	f043 0310 	orr.w	r3, r3, #16
 8004168:	6593      	str	r3, [r2, #88]	@ 0x58
 800416a:	4b29      	ldr	r3, [pc, #164]	@ (8004210 <HAL_TIM_Base_MspInit+0xe8>)
 800416c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	61bb      	str	r3, [r7, #24]
 8004174:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004176:	2200      	movs	r2, #0
 8004178:	2100      	movs	r1, #0
 800417a:	2036      	movs	r0, #54	@ 0x36
 800417c:	f002 f9cd 	bl	800651a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004180:	2036      	movs	r0, #54	@ 0x36
 8004182:	f002 f9e4 	bl	800654e <HAL_NVIC_EnableIRQ>
}
 8004186:	e03c      	b.n	8004202 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM7)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a22      	ldr	r2, [pc, #136]	@ (8004218 <HAL_TIM_Base_MspInit+0xf0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d10c      	bne.n	80041ac <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004192:	4b1f      	ldr	r3, [pc, #124]	@ (8004210 <HAL_TIM_Base_MspInit+0xe8>)
 8004194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004196:	4a1e      	ldr	r2, [pc, #120]	@ (8004210 <HAL_TIM_Base_MspInit+0xe8>)
 8004198:	f043 0320 	orr.w	r3, r3, #32
 800419c:	6593      	str	r3, [r2, #88]	@ 0x58
 800419e:	4b1c      	ldr	r3, [pc, #112]	@ (8004210 <HAL_TIM_Base_MspInit+0xe8>)
 80041a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	697b      	ldr	r3, [r7, #20]
}
 80041aa:	e02a      	b.n	8004202 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM15)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a1a      	ldr	r2, [pc, #104]	@ (800421c <HAL_TIM_Base_MspInit+0xf4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d114      	bne.n	80041e0 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80041b6:	4b16      	ldr	r3, [pc, #88]	@ (8004210 <HAL_TIM_Base_MspInit+0xe8>)
 80041b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ba:	4a15      	ldr	r2, [pc, #84]	@ (8004210 <HAL_TIM_Base_MspInit+0xe8>)
 80041bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80041c2:	4b13      	ldr	r3, [pc, #76]	@ (8004210 <HAL_TIM_Base_MspInit+0xe8>)
 80041c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80041ce:	2200      	movs	r2, #0
 80041d0:	2100      	movs	r1, #0
 80041d2:	2018      	movs	r0, #24
 80041d4:	f002 f9a1 	bl	800651a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80041d8:	2018      	movs	r0, #24
 80041da:	f002 f9b8 	bl	800654e <HAL_NVIC_EnableIRQ>
}
 80041de:	e010      	b.n	8004202 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM16)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a0e      	ldr	r2, [pc, #56]	@ (8004220 <HAL_TIM_Base_MspInit+0xf8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d10b      	bne.n	8004202 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80041ea:	4b09      	ldr	r3, [pc, #36]	@ (8004210 <HAL_TIM_Base_MspInit+0xe8>)
 80041ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ee:	4a08      	ldr	r2, [pc, #32]	@ (8004210 <HAL_TIM_Base_MspInit+0xe8>)
 80041f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80041f6:	4b06      	ldr	r3, [pc, #24]	@ (8004210 <HAL_TIM_Base_MspInit+0xe8>)
 80041f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
}
 8004202:	bf00      	nop
 8004204:	3720      	adds	r7, #32
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	40000800 	.word	0x40000800
 8004210:	40021000 	.word	0x40021000
 8004214:	40001000 	.word	0x40001000
 8004218:	40001400 	.word	0x40001400
 800421c:	40014000 	.word	0x40014000
 8004220:	40014400 	.word	0x40014400

08004224 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08a      	sub	sp, #40	@ 0x28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800422c:	f107 0314 	add.w	r3, r7, #20
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	609a      	str	r2, [r3, #8]
 8004238:	60da      	str	r2, [r3, #12]
 800423a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a33      	ldr	r2, [pc, #204]	@ (8004310 <HAL_TIM_MspPostInit+0xec>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d11c      	bne.n	8004280 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004246:	4b33      	ldr	r3, [pc, #204]	@ (8004314 <HAL_TIM_MspPostInit+0xf0>)
 8004248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800424a:	4a32      	ldr	r2, [pc, #200]	@ (8004314 <HAL_TIM_MspPostInit+0xf0>)
 800424c:	f043 0304 	orr.w	r3, r3, #4
 8004250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004252:	4b30      	ldr	r3, [pc, #192]	@ (8004314 <HAL_TIM_MspPostInit+0xf0>)
 8004254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	613b      	str	r3, [r7, #16]
 800425c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DEADTIME_TR_Pin;
 800425e:	2301      	movs	r3, #1
 8004260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004262:	2302      	movs	r3, #2
 8004264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800426a:	2302      	movs	r3, #2
 800426c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800426e:	2302      	movs	r3, #2
 8004270:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_TR_GPIO_Port, &GPIO_InitStruct);
 8004272:	f107 0314 	add.w	r3, r7, #20
 8004276:	4619      	mov	r1, r3
 8004278:	4827      	ldr	r0, [pc, #156]	@ (8004318 <HAL_TIM_MspPostInit+0xf4>)
 800427a:	f002 fed3 	bl	8007024 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800427e:	e043      	b.n	8004308 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a25      	ldr	r2, [pc, #148]	@ (800431c <HAL_TIM_MspPostInit+0xf8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d11d      	bne.n	80042c6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800428a:	4b22      	ldr	r3, [pc, #136]	@ (8004314 <HAL_TIM_MspPostInit+0xf0>)
 800428c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428e:	4a21      	ldr	r2, [pc, #132]	@ (8004314 <HAL_TIM_MspPostInit+0xf0>)
 8004290:	f043 0308 	orr.w	r3, r3, #8
 8004294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004296:	4b1f      	ldr	r3, [pc, #124]	@ (8004314 <HAL_TIM_MspPostInit+0xf0>)
 8004298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 80042a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a8:	2302      	movs	r3, #2
 80042aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b0:	2300      	movs	r3, #0
 80042b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80042b4:	2302      	movs	r3, #2
 80042b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 80042b8:	f107 0314 	add.w	r3, r7, #20
 80042bc:	4619      	mov	r1, r3
 80042be:	4818      	ldr	r0, [pc, #96]	@ (8004320 <HAL_TIM_MspPostInit+0xfc>)
 80042c0:	f002 feb0 	bl	8007024 <HAL_GPIO_Init>
}
 80042c4:	e020      	b.n	8004308 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a16      	ldr	r2, [pc, #88]	@ (8004324 <HAL_TIM_MspPostInit+0x100>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d11b      	bne.n	8004308 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042d0:	4b10      	ldr	r3, [pc, #64]	@ (8004314 <HAL_TIM_MspPostInit+0xf0>)
 80042d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d4:	4a0f      	ldr	r2, [pc, #60]	@ (8004314 <HAL_TIM_MspPostInit+0xf0>)
 80042d6:	f043 0304 	orr.w	r3, r3, #4
 80042da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004314 <HAL_TIM_MspPostInit+0xf0>)
 80042de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEADTIME_HC_Pin;
 80042e8:	2380      	movs	r3, #128	@ 0x80
 80042ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ec:	2302      	movs	r3, #2
 80042ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042f4:	2302      	movs	r3, #2
 80042f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80042f8:	2304      	movs	r3, #4
 80042fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_HC_GPIO_Port, &GPIO_InitStruct);
 80042fc:	f107 0314 	add.w	r3, r7, #20
 8004300:	4619      	mov	r1, r3
 8004302:	4805      	ldr	r0, [pc, #20]	@ (8004318 <HAL_TIM_MspPostInit+0xf4>)
 8004304:	f002 fe8e 	bl	8007024 <HAL_GPIO_Init>
}
 8004308:	bf00      	nop
 800430a:	3728      	adds	r7, #40	@ 0x28
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40012c00 	.word	0x40012c00
 8004314:	40021000 	.word	0x40021000
 8004318:	48000800 	.word	0x48000800
 800431c:	40000800 	.word	0x40000800
 8004320:	48000c00 	.word	0x48000c00
 8004324:	40013400 	.word	0x40013400

08004328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b09e      	sub	sp, #120	@ 0x78
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004330:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	609a      	str	r2, [r3, #8]
 800433c:	60da      	str	r2, [r3, #12]
 800433e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004340:	f107 0310 	add.w	r3, r7, #16
 8004344:	2254      	movs	r2, #84	@ 0x54
 8004346:	2100      	movs	r1, #0
 8004348:	4618      	mov	r0, r3
 800434a:	f00d fd30 	bl	8011dae <memset>
  if(huart->Instance==UART4)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a1f      	ldr	r2, [pc, #124]	@ (80043d0 <HAL_UART_MspInit+0xa8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d136      	bne.n	80043c6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004358:	2308      	movs	r3, #8
 800435a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_HSI;
 800435c:	2380      	movs	r3, #128	@ 0x80
 800435e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004360:	f107 0310 	add.w	r3, r7, #16
 8004364:	4618      	mov	r0, r3
 8004366:	f005 fb41 	bl	80099ec <HAL_RCCEx_PeriphCLKConfig>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004370:	f7ff fbb8 	bl	8003ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004374:	4b17      	ldr	r3, [pc, #92]	@ (80043d4 <HAL_UART_MspInit+0xac>)
 8004376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004378:	4a16      	ldr	r2, [pc, #88]	@ (80043d4 <HAL_UART_MspInit+0xac>)
 800437a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800437e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004380:	4b14      	ldr	r3, [pc, #80]	@ (80043d4 <HAL_UART_MspInit+0xac>)
 8004382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004384:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800438c:	4b11      	ldr	r3, [pc, #68]	@ (80043d4 <HAL_UART_MspInit+0xac>)
 800438e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004390:	4a10      	ldr	r2, [pc, #64]	@ (80043d4 <HAL_UART_MspInit+0xac>)
 8004392:	f043 0304 	orr.w	r3, r3, #4
 8004396:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004398:	4b0e      	ldr	r3, [pc, #56]	@ (80043d4 <HAL_UART_MspInit+0xac>)
 800439a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	60bb      	str	r3, [r7, #8]
 80043a2:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80043a4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80043a8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043aa:	2302      	movs	r3, #2
 80043ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b2:	2300      	movs	r3, #0
 80043b4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80043b6:	2305      	movs	r3, #5
 80043b8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043ba:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80043be:	4619      	mov	r1, r3
 80043c0:	4805      	ldr	r0, [pc, #20]	@ (80043d8 <HAL_UART_MspInit+0xb0>)
 80043c2:	f002 fe2f 	bl	8007024 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80043c6:	bf00      	nop
 80043c8:	3778      	adds	r7, #120	@ 0x78
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40004c00 	.word	0x40004c00
 80043d4:	40021000 	.word	0x40021000
 80043d8:	48000800 	.word	0x48000800

080043dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80043e0:	bf00      	nop
 80043e2:	e7fd      	b.n	80043e0 <NMI_Handler+0x4>

080043e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043e8:	bf00      	nop
 80043ea:	e7fd      	b.n	80043e8 <HardFault_Handler+0x4>

080043ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043f0:	bf00      	nop
 80043f2:	e7fd      	b.n	80043f0 <MemManage_Handler+0x4>

080043f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043f8:	bf00      	nop
 80043fa:	e7fd      	b.n	80043f8 <BusFault_Handler+0x4>

080043fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004400:	bf00      	nop
 8004402:	e7fd      	b.n	8004400 <UsageFault_Handler+0x4>

08004404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004408:	bf00      	nop
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004412:	b480      	push	{r7}
 8004414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004416:	bf00      	nop
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004424:	bf00      	nop
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004432:	f000 f9af 	bl	8004794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004436:	bf00      	nop
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004440:	4802      	ldr	r0, [pc, #8]	@ (800444c <DMA1_Channel1_IRQHandler+0x10>)
 8004442:	f002 fca0 	bl	8006d86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004446:	bf00      	nop
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	2000057c 	.word	0x2000057c

08004450 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8004454:	4802      	ldr	r0, [pc, #8]	@ (8004460 <DMA1_Channel2_IRQHandler+0x10>)
 8004456:	f002 fc96 	bl	8006d86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800445a:	bf00      	nop
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	200005dc 	.word	0x200005dc

08004464 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8004468:	4802      	ldr	r0, [pc, #8]	@ (8004474 <DMA1_Channel3_IRQHandler+0x10>)
 800446a:	f002 fc8c 	bl	8006d86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800446e:	bf00      	nop
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	2000063c 	.word	0x2000063c

08004478 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800447c:	4802      	ldr	r0, [pc, #8]	@ (8004488 <DMA1_Channel4_IRQHandler+0x10>)
 800447e:	f002 fc82 	bl	8006d86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	200006ec 	.word	0x200006ec

0800448c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8004490:	4802      	ldr	r0, [pc, #8]	@ (800449c <DMA1_Channel5_IRQHandler+0x10>)
 8004492:	f002 fc78 	bl	8006d86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004496:	bf00      	nop
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	2000074c 	.word	0x2000074c

080044a0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80044a4:	4802      	ldr	r0, [pc, #8]	@ (80044b0 <USB_LP_IRQHandler+0x10>)
 80044a6:	f003 f879 	bl	800759c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80044aa:	bf00      	nop
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20002090 	.word	0x20002090

080044b4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80044b8:	4803      	ldr	r0, [pc, #12]	@ (80044c8 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80044ba:	f005 ffbd 	bl	800a438 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80044be:	4803      	ldr	r0, [pc, #12]	@ (80044cc <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80044c0:	f005 ffba 	bl	800a438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80044c4:	bf00      	nop
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	200007ac 	.word	0x200007ac
 80044cc:	20000928 	.word	0x20000928

080044d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
					HEAT_SINK_TEMP = (ADC3_DMA_BUFFER[4]/4096)*3.3;//(Low_pass_filter(ADC3_DMA_BUFFER[4], HEAT_SINK_TEMP)/4096)*3.3;
					FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
					}*/

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80044d4:	4803      	ldr	r0, [pc, #12]	@ (80044e4 <TIM6_DAC_IRQHandler+0x14>)
 80044d6:	f005 ffaf 	bl	800a438 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80044da:	4803      	ldr	r0, [pc, #12]	@ (80044e8 <TIM6_DAC_IRQHandler+0x18>)
 80044dc:	f002 f8e0 	bl	80066a0 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80044e0:	bf00      	nop
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	20000844 	.word	0x20000844
 80044e8:	200006c4 	.word	0x200006c4

080044ec <_getpid>:
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	2301      	movs	r3, #1
 80044f2:	4618      	mov	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <_kill>:
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
 8004506:	f00d fcb7 	bl	8011e78 <__errno>
 800450a:	4603      	mov	r3, r0
 800450c:	2216      	movs	r2, #22
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	f04f 33ff 	mov.w	r3, #4294967295
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <_exit>:
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	f04f 31ff 	mov.w	r1, #4294967295
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff ffe7 	bl	80044fc <_kill>
 800452e:	bf00      	nop
 8004530:	e7fd      	b.n	800452e <_exit+0x12>

08004532 <_read>:
 8004532:	b580      	push	{r7, lr}
 8004534:	b086      	sub	sp, #24
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	607a      	str	r2, [r7, #4]
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]
 8004542:	e00a      	b.n	800455a <_read+0x28>
 8004544:	f3af 8000 	nop.w
 8004548:	4601      	mov	r1, r0
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	60ba      	str	r2, [r7, #8]
 8004550:	b2ca      	uxtb	r2, r1
 8004552:	701a      	strb	r2, [r3, #0]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	3301      	adds	r3, #1
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	429a      	cmp	r2, r3
 8004560:	dbf0      	blt.n	8004544 <_read+0x12>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <_write>:
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	e009      	b.n	8004592 <_write+0x26>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	60ba      	str	r2, [r7, #8]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f3af 8000 	nop.w
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	3301      	adds	r3, #1
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	429a      	cmp	r2, r3
 8004598:	dbf1      	blt.n	800457e <_write+0x12>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <_close>:
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	f04f 33ff 	mov.w	r3, #4294967295
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <_fstat>:
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80045cc:	605a      	str	r2, [r3, #4]
 80045ce:	2300      	movs	r3, #0
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <_isatty>:
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	2301      	movs	r3, #1
 80045e6:	4618      	mov	r0, r3
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <_lseek>:
 80045f2:	b480      	push	{r7}
 80045f4:	b085      	sub	sp, #20
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	2300      	movs	r3, #0
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <_sbrk>:
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	4a14      	ldr	r2, [pc, #80]	@ (8004668 <_sbrk+0x5c>)
 8004616:	4b15      	ldr	r3, [pc, #84]	@ (800466c <_sbrk+0x60>)
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	4b13      	ldr	r3, [pc, #76]	@ (8004670 <_sbrk+0x64>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d102      	bne.n	800462e <_sbrk+0x22>
 8004628:	4b11      	ldr	r3, [pc, #68]	@ (8004670 <_sbrk+0x64>)
 800462a:	4a12      	ldr	r2, [pc, #72]	@ (8004674 <_sbrk+0x68>)
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	4b10      	ldr	r3, [pc, #64]	@ (8004670 <_sbrk+0x64>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4413      	add	r3, r2
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	429a      	cmp	r2, r3
 800463a:	d207      	bcs.n	800464c <_sbrk+0x40>
 800463c:	f00d fc1c 	bl	8011e78 <__errno>
 8004640:	4603      	mov	r3, r0
 8004642:	220c      	movs	r2, #12
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	f04f 33ff 	mov.w	r3, #4294967295
 800464a:	e009      	b.n	8004660 <_sbrk+0x54>
 800464c:	4b08      	ldr	r3, [pc, #32]	@ (8004670 <_sbrk+0x64>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	4b07      	ldr	r3, [pc, #28]	@ (8004670 <_sbrk+0x64>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4413      	add	r3, r2
 800465a:	4a05      	ldr	r2, [pc, #20]	@ (8004670 <_sbrk+0x64>)
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20020000 	.word	0x20020000
 800466c:	00000400 	.word	0x00000400
 8004670:	20000bb4 	.word	0x20000bb4
 8004674:	200026d8 	.word	0x200026d8

08004678 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800467c:	4b06      	ldr	r3, [pc, #24]	@ (8004698 <SystemInit+0x20>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004682:	4a05      	ldr	r2, [pc, #20]	@ (8004698 <SystemInit+0x20>)
 8004684:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004688:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800468c:	bf00      	nop
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	e000ed00 	.word	0xe000ed00

0800469c <Reset_Handler>:
 800469c:	480d      	ldr	r0, [pc, #52]	@ (80046d4 <LoopForever+0x2>)
 800469e:	4685      	mov	sp, r0
 80046a0:	f7ff ffea 	bl	8004678 <SystemInit>
 80046a4:	480c      	ldr	r0, [pc, #48]	@ (80046d8 <LoopForever+0x6>)
 80046a6:	490d      	ldr	r1, [pc, #52]	@ (80046dc <LoopForever+0xa>)
 80046a8:	4a0d      	ldr	r2, [pc, #52]	@ (80046e0 <LoopForever+0xe>)
 80046aa:	2300      	movs	r3, #0
 80046ac:	e002      	b.n	80046b4 <LoopCopyDataInit>

080046ae <CopyDataInit>:
 80046ae:	58d4      	ldr	r4, [r2, r3]
 80046b0:	50c4      	str	r4, [r0, r3]
 80046b2:	3304      	adds	r3, #4

080046b4 <LoopCopyDataInit>:
 80046b4:	18c4      	adds	r4, r0, r3
 80046b6:	428c      	cmp	r4, r1
 80046b8:	d3f9      	bcc.n	80046ae <CopyDataInit>
 80046ba:	4a0a      	ldr	r2, [pc, #40]	@ (80046e4 <LoopForever+0x12>)
 80046bc:	4c0a      	ldr	r4, [pc, #40]	@ (80046e8 <LoopForever+0x16>)
 80046be:	2300      	movs	r3, #0
 80046c0:	e001      	b.n	80046c6 <LoopFillZerobss>

080046c2 <FillZerobss>:
 80046c2:	6013      	str	r3, [r2, #0]
 80046c4:	3204      	adds	r2, #4

080046c6 <LoopFillZerobss>:
 80046c6:	42a2      	cmp	r2, r4
 80046c8:	d3fb      	bcc.n	80046c2 <FillZerobss>
 80046ca:	f00d fbdb 	bl	8011e84 <__libc_init_array>
 80046ce:	f7fc fcb3 	bl	8001038 <main>

080046d2 <LoopForever>:
 80046d2:	e7fe      	b.n	80046d2 <LoopForever>
 80046d4:	20020000 	.word	0x20020000
 80046d8:	20000000 	.word	0x20000000
 80046dc:	200003b0 	.word	0x200003b0
 80046e0:	080174b8 	.word	0x080174b8
 80046e4:	200003b0 	.word	0x200003b0
 80046e8:	200026d8 	.word	0x200026d8

080046ec <ADC1_2_IRQHandler>:
 80046ec:	e7fe      	b.n	80046ec <ADC1_2_IRQHandler>

080046ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b082      	sub	sp, #8
 80046f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046f8:	2003      	movs	r0, #3
 80046fa:	f001 ff03 	bl	8006504 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046fe:	2000      	movs	r0, #0
 8004700:	f000 f80e 	bl	8004720 <HAL_InitTick>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	71fb      	strb	r3, [r7, #7]
 800470e:	e001      	b.n	8004714 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004710:	f7ff f9ee 	bl	8003af0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004714:	79fb      	ldrb	r3, [r7, #7]

}
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800472c:	4b16      	ldr	r3, [pc, #88]	@ (8004788 <HAL_InitTick+0x68>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d022      	beq.n	800477a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004734:	4b15      	ldr	r3, [pc, #84]	@ (800478c <HAL_InitTick+0x6c>)
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	4b13      	ldr	r3, [pc, #76]	@ (8004788 <HAL_InitTick+0x68>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004740:	fbb1 f3f3 	udiv	r3, r1, r3
 8004744:	fbb2 f3f3 	udiv	r3, r2, r3
 8004748:	4618      	mov	r0, r3
 800474a:	f001 ff0e 	bl	800656a <HAL_SYSTICK_Config>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10f      	bne.n	8004774 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b0f      	cmp	r3, #15
 8004758:	d809      	bhi.n	800476e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800475a:	2200      	movs	r2, #0
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	f04f 30ff 	mov.w	r0, #4294967295
 8004762:	f001 feda 	bl	800651a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004766:	4a0a      	ldr	r2, [pc, #40]	@ (8004790 <HAL_InitTick+0x70>)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	e007      	b.n	800477e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	73fb      	strb	r3, [r7, #15]
 8004772:	e004      	b.n	800477e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	73fb      	strb	r3, [r7, #15]
 8004778:	e001      	b.n	800477e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800477e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	2000005c 	.word	0x2000005c
 800478c:	20000054 	.word	0x20000054
 8004790:	20000058 	.word	0x20000058

08004794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004798:	4b05      	ldr	r3, [pc, #20]	@ (80047b0 <HAL_IncTick+0x1c>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	4b05      	ldr	r3, [pc, #20]	@ (80047b4 <HAL_IncTick+0x20>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4413      	add	r3, r2
 80047a2:	4a03      	ldr	r2, [pc, #12]	@ (80047b0 <HAL_IncTick+0x1c>)
 80047a4:	6013      	str	r3, [r2, #0]
}
 80047a6:	bf00      	nop
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	20000bb8 	.word	0x20000bb8
 80047b4:	2000005c 	.word	0x2000005c

080047b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  return uwTick;
 80047bc:	4b03      	ldr	r3, [pc, #12]	@ (80047cc <HAL_GetTick+0x14>)
 80047be:	681b      	ldr	r3, [r3, #0]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	20000bb8 	.word	0x20000bb8

080047d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047d8:	f7ff ffee 	bl	80047b8 <HAL_GetTick>
 80047dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e8:	d004      	beq.n	80047f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80047ea:	4b09      	ldr	r3, [pc, #36]	@ (8004810 <HAL_Delay+0x40>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	4413      	add	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047f4:	bf00      	nop
 80047f6:	f7ff ffdf 	bl	80047b8 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	429a      	cmp	r2, r3
 8004804:	d8f7      	bhi.n	80047f6 <HAL_Delay+0x26>
  {
  }
}
 8004806:	bf00      	nop
 8004808:	bf00      	nop
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	2000005c 	.word	0x2000005c

08004814 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	609a      	str	r2, [r3, #8]
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	609a      	str	r2, [r3, #8]
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3360      	adds	r3, #96	@ 0x60
 800488e:	461a      	mov	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	4b08      	ldr	r3, [pc, #32]	@ (80048c0 <LL_ADC_SetOffset+0x44>)
 800489e:	4013      	ands	r3, r2
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80048b4:	bf00      	nop
 80048b6:	371c      	adds	r7, #28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	03fff000 	.word	0x03fff000

080048c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3360      	adds	r3, #96	@ 0x60
 80048d2:	461a      	mov	r2, r3
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	3360      	adds	r3, #96	@ 0x60
 8004900:	461a      	mov	r2, r3
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	431a      	orrs	r2, r3
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004926:	b480      	push	{r7}
 8004928:	b087      	sub	sp, #28
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3360      	adds	r3, #96	@ 0x60
 8004936:	461a      	mov	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	431a      	orrs	r2, r3
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004950:	bf00      	nop
 8004952:	371c      	adds	r7, #28
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3360      	adds	r3, #96	@ 0x60
 800496c:	461a      	mov	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	431a      	orrs	r2, r3
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	615a      	str	r2, [r3, #20]
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80049de:	b480      	push	{r7}
 80049e0:	b087      	sub	sp, #28
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	60f8      	str	r0, [r7, #12]
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3330      	adds	r3, #48	@ 0x30
 80049ee:	461a      	mov	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	0a1b      	lsrs	r3, r3, #8
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	f003 030c 	and.w	r3, r3, #12
 80049fa:	4413      	add	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f003 031f 	and.w	r3, r3, #31
 8004a08:	211f      	movs	r1, #31
 8004a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0e:	43db      	mvns	r3, r3
 8004a10:	401a      	ands	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	0e9b      	lsrs	r3, r3, #26
 8004a16:	f003 011f 	and.w	r1, r3, #31
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	fa01 f303 	lsl.w	r3, r1, r3
 8004a24:	431a      	orrs	r2, r3
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004a2a:	bf00      	nop
 8004a2c:	371c      	adds	r7, #28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b087      	sub	sp, #28
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	60f8      	str	r0, [r7, #12]
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	3314      	adds	r3, #20
 8004a46:	461a      	mov	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	0e5b      	lsrs	r3, r3, #25
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	4413      	add	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	0d1b      	lsrs	r3, r3, #20
 8004a5e:	f003 031f 	and.w	r3, r3, #31
 8004a62:	2107      	movs	r1, #7
 8004a64:	fa01 f303 	lsl.w	r3, r1, r3
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	401a      	ands	r2, r3
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	0d1b      	lsrs	r3, r3, #20
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004a80:	bf00      	nop
 8004a82:	371c      	adds	r7, #28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	401a      	ands	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f003 0318 	and.w	r3, r3, #24
 8004aae:	4908      	ldr	r1, [pc, #32]	@ (8004ad0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004ab0:	40d9      	lsrs	r1, r3
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	400b      	ands	r3, r1
 8004ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aba:	431a      	orrs	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004ac2:	bf00      	nop
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	0007ffff 	.word	0x0007ffff

08004ad4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 031f 	and.w	r3, r3, #31
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004b00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6093      	str	r3, [r2, #8]
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b28:	d101      	bne.n	8004b2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e000      	b.n	8004b30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004b4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b50:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b78:	d101      	bne.n	8004b7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ba0:	f043 0201 	orr.w	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004bc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004bc8:	f043 0202 	orr.w	r2, r3, #2
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <LL_ADC_IsEnabled+0x18>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <LL_ADC_IsEnabled+0x1a>
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d101      	bne.n	8004c1a <LL_ADC_IsDisableOngoing+0x18>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <LL_ADC_IsDisableOngoing+0x1a>
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c3c:	f043 0204 	orr.w	r2, r3, #4
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d101      	bne.n	8004c68 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b08      	cmp	r3, #8
 8004c88:	d101      	bne.n	8004c8e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004c9c:	b590      	push	{r4, r7, lr}
 8004c9e:	b089      	sub	sp, #36	@ 0x24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e1a9      	b.n	800500a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d109      	bne.n	8004cd8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7fe ff37 	bl	8003b38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff ff19 	bl	8004b14 <LL_ADC_IsDeepPowerDownEnabled>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d004      	beq.n	8004cf2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff feff 	bl	8004af0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff ff34 	bl	8004b64 <LL_ADC_IsInternalRegulatorEnabled>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d115      	bne.n	8004d2e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff ff18 	bl	8004b3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d0c:	4b9c      	ldr	r3, [pc, #624]	@ (8004f80 <HAL_ADC_Init+0x2e4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	099b      	lsrs	r3, r3, #6
 8004d12:	4a9c      	ldr	r2, [pc, #624]	@ (8004f84 <HAL_ADC_Init+0x2e8>)
 8004d14:	fba2 2303 	umull	r2, r3, r2, r3
 8004d18:	099b      	lsrs	r3, r3, #6
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004d20:	e002      	b.n	8004d28 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3b01      	subs	r3, #1
 8004d26:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1f9      	bne.n	8004d22 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff ff16 	bl	8004b64 <LL_ADC_IsInternalRegulatorEnabled>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10d      	bne.n	8004d5a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d42:	f043 0210 	orr.w	r2, r3, #16
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d4e:	f043 0201 	orr.w	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff ff76 	bl	8004c50 <LL_ADC_REG_IsConversionOngoing>
 8004d64:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d6a:	f003 0310 	and.w	r3, r3, #16
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f040 8142 	bne.w	8004ff8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f040 813e 	bne.w	8004ff8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d80:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004d84:	f043 0202 	orr.w	r2, r3, #2
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff ff23 	bl	8004bdc <LL_ADC_IsEnabled>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d141      	bne.n	8004e20 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004da4:	d004      	beq.n	8004db0 <HAL_ADC_Init+0x114>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a77      	ldr	r2, [pc, #476]	@ (8004f88 <HAL_ADC_Init+0x2ec>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d10f      	bne.n	8004dd0 <HAL_ADC_Init+0x134>
 8004db0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004db4:	f7ff ff12 	bl	8004bdc <LL_ADC_IsEnabled>
 8004db8:	4604      	mov	r4, r0
 8004dba:	4873      	ldr	r0, [pc, #460]	@ (8004f88 <HAL_ADC_Init+0x2ec>)
 8004dbc:	f7ff ff0e 	bl	8004bdc <LL_ADC_IsEnabled>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4323      	orrs	r3, r4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	bf0c      	ite	eq
 8004dc8:	2301      	moveq	r3, #1
 8004dca:	2300      	movne	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	e012      	b.n	8004df6 <HAL_ADC_Init+0x15a>
 8004dd0:	486e      	ldr	r0, [pc, #440]	@ (8004f8c <HAL_ADC_Init+0x2f0>)
 8004dd2:	f7ff ff03 	bl	8004bdc <LL_ADC_IsEnabled>
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	486d      	ldr	r0, [pc, #436]	@ (8004f90 <HAL_ADC_Init+0x2f4>)
 8004dda:	f7ff feff 	bl	8004bdc <LL_ADC_IsEnabled>
 8004dde:	4603      	mov	r3, r0
 8004de0:	431c      	orrs	r4, r3
 8004de2:	486c      	ldr	r0, [pc, #432]	@ (8004f94 <HAL_ADC_Init+0x2f8>)
 8004de4:	f7ff fefa 	bl	8004bdc <LL_ADC_IsEnabled>
 8004de8:	4603      	mov	r3, r0
 8004dea:	4323      	orrs	r3, r4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	bf0c      	ite	eq
 8004df0:	2301      	moveq	r3, #1
 8004df2:	2300      	movne	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d012      	beq.n	8004e20 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e02:	d004      	beq.n	8004e0e <HAL_ADC_Init+0x172>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a5f      	ldr	r2, [pc, #380]	@ (8004f88 <HAL_ADC_Init+0x2ec>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d101      	bne.n	8004e12 <HAL_ADC_Init+0x176>
 8004e0e:	4a62      	ldr	r2, [pc, #392]	@ (8004f98 <HAL_ADC_Init+0x2fc>)
 8004e10:	e000      	b.n	8004e14 <HAL_ADC_Init+0x178>
 8004e12:	4a62      	ldr	r2, [pc, #392]	@ (8004f9c <HAL_ADC_Init+0x300>)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4610      	mov	r0, r2
 8004e1c:	f7ff fcfa 	bl	8004814 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	7f5b      	ldrb	r3, [r3, #29]
 8004e24:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e2a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004e30:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004e36:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e3e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e40:	4313      	orrs	r3, r2
 8004e42:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d106      	bne.n	8004e5c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e52:	3b01      	subs	r3, #1
 8004e54:	045b      	lsls	r3, r3, #17
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d009      	beq.n	8004e78 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e70:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	4b48      	ldr	r3, [pc, #288]	@ (8004fa0 <HAL_ADC_Init+0x304>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6812      	ldr	r2, [r2, #0]
 8004e86:	69b9      	ldr	r1, [r7, #24]
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff fee5 	bl	8004c76 <LL_ADC_INJ_IsConversionOngoing>
 8004eac:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d17f      	bne.n	8004fb4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d17c      	bne.n	8004fb4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ebe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004ec6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ed6:	f023 0302 	bic.w	r3, r3, #2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	69b9      	ldr	r1, [r7, #24]
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d017      	beq.n	8004f1c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691a      	ldr	r2, [r3, #16]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004efa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004f04:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004f08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6911      	ldr	r1, [r2, #16]
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6812      	ldr	r2, [r2, #0]
 8004f14:	430b      	orrs	r3, r1
 8004f16:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004f1a:	e013      	b.n	8004f44 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691a      	ldr	r2, [r3, #16]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004f2a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6812      	ldr	r2, [r2, #0]
 8004f38:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004f3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f40:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d12a      	bne.n	8004fa4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004f58:	f023 0304 	bic.w	r3, r3, #4
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f64:	4311      	orrs	r1, r2
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004f6a:	4311      	orrs	r1, r2
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f70:	430a      	orrs	r2, r1
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0201 	orr.w	r2, r2, #1
 8004f7c:	611a      	str	r2, [r3, #16]
 8004f7e:	e019      	b.n	8004fb4 <HAL_ADC_Init+0x318>
 8004f80:	20000054 	.word	0x20000054
 8004f84:	053e2d63 	.word	0x053e2d63
 8004f88:	50000100 	.word	0x50000100
 8004f8c:	50000400 	.word	0x50000400
 8004f90:	50000500 	.word	0x50000500
 8004f94:	50000600 	.word	0x50000600
 8004f98:	50000300 	.word	0x50000300
 8004f9c:	50000700 	.word	0x50000700
 8004fa0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0201 	bic.w	r2, r2, #1
 8004fb2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d10c      	bne.n	8004fd6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc2:	f023 010f 	bic.w	r1, r3, #15
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	1e5a      	subs	r2, r3, #1
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fd4:	e007      	b.n	8004fe6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 020f 	bic.w	r2, r2, #15
 8004fe4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fea:	f023 0303 	bic.w	r3, r3, #3
 8004fee:	f043 0201 	orr.w	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ff6:	e007      	b.n	8005008 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ffc:	f043 0210 	orr.w	r2, r3, #16
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005008:	7ffb      	ldrb	r3, [r7, #31]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3724      	adds	r7, #36	@ 0x24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd90      	pop	{r4, r7, pc}
 8005012:	bf00      	nop

08005014 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005028:	d004      	beq.n	8005034 <HAL_ADC_Start_DMA+0x20>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a5a      	ldr	r2, [pc, #360]	@ (8005198 <HAL_ADC_Start_DMA+0x184>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d101      	bne.n	8005038 <HAL_ADC_Start_DMA+0x24>
 8005034:	4b59      	ldr	r3, [pc, #356]	@ (800519c <HAL_ADC_Start_DMA+0x188>)
 8005036:	e000      	b.n	800503a <HAL_ADC_Start_DMA+0x26>
 8005038:	4b59      	ldr	r3, [pc, #356]	@ (80051a0 <HAL_ADC_Start_DMA+0x18c>)
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff fd4a 	bl	8004ad4 <LL_ADC_GetMultimode>
 8005040:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff fe02 	bl	8004c50 <LL_ADC_REG_IsConversionOngoing>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	f040 809b 	bne.w	800518a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_ADC_Start_DMA+0x4e>
 800505e:	2302      	movs	r3, #2
 8005060:	e096      	b.n	8005190 <HAL_ADC_Start_DMA+0x17c>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a4d      	ldr	r2, [pc, #308]	@ (80051a4 <HAL_ADC_Start_DMA+0x190>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d008      	beq.n	8005086 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b05      	cmp	r3, #5
 800507e:	d002      	beq.n	8005086 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	2b09      	cmp	r3, #9
 8005084:	d17a      	bne.n	800517c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 fcec 	bl	8005a64 <ADC_Enable>
 800508c:	4603      	mov	r3, r0
 800508e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005090:	7dfb      	ldrb	r3, [r7, #23]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d16d      	bne.n	8005172 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800509a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800509e:	f023 0301 	bic.w	r3, r3, #1
 80050a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a3a      	ldr	r2, [pc, #232]	@ (8005198 <HAL_ADC_Start_DMA+0x184>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d009      	beq.n	80050c8 <HAL_ADC_Start_DMA+0xb4>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a3b      	ldr	r2, [pc, #236]	@ (80051a8 <HAL_ADC_Start_DMA+0x194>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d002      	beq.n	80050c4 <HAL_ADC_Start_DMA+0xb0>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	e003      	b.n	80050cc <HAL_ADC_Start_DMA+0xb8>
 80050c4:	4b39      	ldr	r3, [pc, #228]	@ (80051ac <HAL_ADC_Start_DMA+0x198>)
 80050c6:	e001      	b.n	80050cc <HAL_ADC_Start_DMA+0xb8>
 80050c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d002      	beq.n	80050da <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d105      	bne.n	80050e6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050de:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d006      	beq.n	8005100 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050f6:	f023 0206 	bic.w	r2, r3, #6
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	661a      	str	r2, [r3, #96]	@ 0x60
 80050fe:	e002      	b.n	8005106 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510a:	4a29      	ldr	r2, [pc, #164]	@ (80051b0 <HAL_ADC_Start_DMA+0x19c>)
 800510c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005112:	4a28      	ldr	r2, [pc, #160]	@ (80051b4 <HAL_ADC_Start_DMA+0x1a0>)
 8005114:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800511a:	4a27      	ldr	r2, [pc, #156]	@ (80051b8 <HAL_ADC_Start_DMA+0x1a4>)
 800511c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	221c      	movs	r2, #28
 8005124:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0210 	orr.w	r2, r2, #16
 800513c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f042 0201 	orr.w	r2, r2, #1
 800514c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3340      	adds	r3, #64	@ 0x40
 8005158:	4619      	mov	r1, r3
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f001 fd97 	bl	8006c90 <HAL_DMA_Start_IT>
 8005162:	4603      	mov	r3, r0
 8005164:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff fd5c 	bl	8004c28 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005170:	e00d      	b.n	800518e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800517a:	e008      	b.n	800518e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005188:	e001      	b.n	800518e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800518a:	2302      	movs	r3, #2
 800518c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800518e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	50000100 	.word	0x50000100
 800519c:	50000300 	.word	0x50000300
 80051a0:	50000700 	.word	0x50000700
 80051a4:	50000600 	.word	0x50000600
 80051a8:	50000500 	.word	0x50000500
 80051ac:	50000400 	.word	0x50000400
 80051b0:	08005c4f 	.word	0x08005c4f
 80051b4:	08005d27 	.word	0x08005d27
 80051b8:	08005d43 	.word	0x08005d43

080051bc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b0b6      	sub	sp, #216	@ 0xd8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80051f4:	2300      	movs	r3, #0
 80051f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d102      	bne.n	8005208 <HAL_ADC_ConfigChannel+0x24>
 8005202:	2302      	movs	r3, #2
 8005204:	f000 bc13 	b.w	8005a2e <HAL_ADC_ConfigChannel+0x84a>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff fd1b 	bl	8004c50 <LL_ADC_REG_IsConversionOngoing>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	f040 83f3 	bne.w	8005a08 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	6859      	ldr	r1, [r3, #4]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	f7ff fbd5 	bl	80049de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff fd09 	bl	8004c50 <LL_ADC_REG_IsConversionOngoing>
 800523e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff fd15 	bl	8004c76 <LL_ADC_INJ_IsConversionOngoing>
 800524c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005250:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005254:	2b00      	cmp	r3, #0
 8005256:	f040 81d9 	bne.w	800560c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800525a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800525e:	2b00      	cmp	r3, #0
 8005260:	f040 81d4 	bne.w	800560c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800526c:	d10f      	bne.n	800528e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2200      	movs	r2, #0
 8005278:	4619      	mov	r1, r3
 800527a:	f7ff fbdc 	bl	8004a36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff fb83 	bl	8004992 <LL_ADC_SetSamplingTimeCommonConfig>
 800528c:	e00e      	b.n	80052ac <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6819      	ldr	r1, [r3, #0]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	461a      	mov	r2, r3
 800529c:	f7ff fbcb 	bl	8004a36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2100      	movs	r1, #0
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7ff fb73 	bl	8004992 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	695a      	ldr	r2, [r3, #20]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	08db      	lsrs	r3, r3, #3
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	fa02 f303 	lsl.w	r3, r2, r3
 80052c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d022      	beq.n	8005314 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	6919      	ldr	r1, [r3, #16]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052de:	f7ff facd 	bl	800487c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	6919      	ldr	r1, [r3, #16]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	461a      	mov	r2, r3
 80052f0:	f7ff fb19 	bl	8004926 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6818      	ldr	r0, [r3, #0]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005300:	2b01      	cmp	r3, #1
 8005302:	d102      	bne.n	800530a <HAL_ADC_ConfigChannel+0x126>
 8005304:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005308:	e000      	b.n	800530c <HAL_ADC_ConfigChannel+0x128>
 800530a:	2300      	movs	r3, #0
 800530c:	461a      	mov	r2, r3
 800530e:	f7ff fb25 	bl	800495c <LL_ADC_SetOffsetSaturation>
 8005312:	e17b      	b.n	800560c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2100      	movs	r1, #0
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff fad2 	bl	80048c4 <LL_ADC_GetOffsetChannel>
 8005320:	4603      	mov	r3, r0
 8005322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <HAL_ADC_ConfigChannel+0x15c>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2100      	movs	r1, #0
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff fac7 	bl	80048c4 <LL_ADC_GetOffsetChannel>
 8005336:	4603      	mov	r3, r0
 8005338:	0e9b      	lsrs	r3, r3, #26
 800533a:	f003 021f 	and.w	r2, r3, #31
 800533e:	e01e      	b.n	800537e <HAL_ADC_ConfigChannel+0x19a>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2100      	movs	r1, #0
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff fabc 	bl	80048c4 <LL_ADC_GetOffsetChannel>
 800534c:	4603      	mov	r3, r0
 800534e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005352:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005356:	fa93 f3a3 	rbit	r3, r3
 800535a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800535e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005362:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005366:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800536e:	2320      	movs	r3, #32
 8005370:	e004      	b.n	800537c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005372:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005376:	fab3 f383 	clz	r3, r3
 800537a:	b2db      	uxtb	r3, r3
 800537c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005386:	2b00      	cmp	r3, #0
 8005388:	d105      	bne.n	8005396 <HAL_ADC_ConfigChannel+0x1b2>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	0e9b      	lsrs	r3, r3, #26
 8005390:	f003 031f 	and.w	r3, r3, #31
 8005394:	e018      	b.n	80053c8 <HAL_ADC_ConfigChannel+0x1e4>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800539e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80053a2:	fa93 f3a3 	rbit	r3, r3
 80053a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80053aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80053b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80053ba:	2320      	movs	r3, #32
 80053bc:	e004      	b.n	80053c8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80053be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80053c2:	fab3 f383 	clz	r3, r3
 80053c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d106      	bne.n	80053da <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2200      	movs	r2, #0
 80053d2:	2100      	movs	r1, #0
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff fa8b 	bl	80048f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2101      	movs	r1, #1
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7ff fa6f 	bl	80048c4 <LL_ADC_GetOffsetChannel>
 80053e6:	4603      	mov	r3, r0
 80053e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10a      	bne.n	8005406 <HAL_ADC_ConfigChannel+0x222>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2101      	movs	r1, #1
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7ff fa64 	bl	80048c4 <LL_ADC_GetOffsetChannel>
 80053fc:	4603      	mov	r3, r0
 80053fe:	0e9b      	lsrs	r3, r3, #26
 8005400:	f003 021f 	and.w	r2, r3, #31
 8005404:	e01e      	b.n	8005444 <HAL_ADC_ConfigChannel+0x260>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2101      	movs	r1, #1
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff fa59 	bl	80048c4 <LL_ADC_GetOffsetChannel>
 8005412:	4603      	mov	r3, r0
 8005414:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005418:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800541c:	fa93 f3a3 	rbit	r3, r3
 8005420:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005424:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005428:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800542c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005434:	2320      	movs	r3, #32
 8005436:	e004      	b.n	8005442 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005438:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800543c:	fab3 f383 	clz	r3, r3
 8005440:	b2db      	uxtb	r3, r3
 8005442:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800544c:	2b00      	cmp	r3, #0
 800544e:	d105      	bne.n	800545c <HAL_ADC_ConfigChannel+0x278>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	0e9b      	lsrs	r3, r3, #26
 8005456:	f003 031f 	and.w	r3, r3, #31
 800545a:	e018      	b.n	800548e <HAL_ADC_ConfigChannel+0x2aa>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005464:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005468:	fa93 f3a3 	rbit	r3, r3
 800546c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005470:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005474:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005478:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005480:	2320      	movs	r3, #32
 8005482:	e004      	b.n	800548e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005484:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005488:	fab3 f383 	clz	r3, r3
 800548c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800548e:	429a      	cmp	r2, r3
 8005490:	d106      	bne.n	80054a0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2200      	movs	r2, #0
 8005498:	2101      	movs	r1, #1
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff fa28 	bl	80048f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2102      	movs	r1, #2
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff fa0c 	bl	80048c4 <LL_ADC_GetOffsetChannel>
 80054ac:	4603      	mov	r3, r0
 80054ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10a      	bne.n	80054cc <HAL_ADC_ConfigChannel+0x2e8>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2102      	movs	r1, #2
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff fa01 	bl	80048c4 <LL_ADC_GetOffsetChannel>
 80054c2:	4603      	mov	r3, r0
 80054c4:	0e9b      	lsrs	r3, r3, #26
 80054c6:	f003 021f 	and.w	r2, r3, #31
 80054ca:	e01e      	b.n	800550a <HAL_ADC_ConfigChannel+0x326>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2102      	movs	r1, #2
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff f9f6 	bl	80048c4 <LL_ADC_GetOffsetChannel>
 80054d8:	4603      	mov	r3, r0
 80054da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054e2:	fa93 f3a3 	rbit	r3, r3
 80054e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80054ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80054f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80054fa:	2320      	movs	r3, #32
 80054fc:	e004      	b.n	8005508 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80054fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005502:	fab3 f383 	clz	r3, r3
 8005506:	b2db      	uxtb	r3, r3
 8005508:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005512:	2b00      	cmp	r3, #0
 8005514:	d105      	bne.n	8005522 <HAL_ADC_ConfigChannel+0x33e>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	0e9b      	lsrs	r3, r3, #26
 800551c:	f003 031f 	and.w	r3, r3, #31
 8005520:	e016      	b.n	8005550 <HAL_ADC_ConfigChannel+0x36c>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800552e:	fa93 f3a3 	rbit	r3, r3
 8005532:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005534:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005536:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800553a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005542:	2320      	movs	r3, #32
 8005544:	e004      	b.n	8005550 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005546:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800554a:	fab3 f383 	clz	r3, r3
 800554e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005550:	429a      	cmp	r2, r3
 8005552:	d106      	bne.n	8005562 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2200      	movs	r2, #0
 800555a:	2102      	movs	r1, #2
 800555c:	4618      	mov	r0, r3
 800555e:	f7ff f9c7 	bl	80048f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2103      	movs	r1, #3
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff f9ab 	bl	80048c4 <LL_ADC_GetOffsetChannel>
 800556e:	4603      	mov	r3, r0
 8005570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <HAL_ADC_ConfigChannel+0x3aa>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2103      	movs	r1, #3
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff f9a0 	bl	80048c4 <LL_ADC_GetOffsetChannel>
 8005584:	4603      	mov	r3, r0
 8005586:	0e9b      	lsrs	r3, r3, #26
 8005588:	f003 021f 	and.w	r2, r3, #31
 800558c:	e017      	b.n	80055be <HAL_ADC_ConfigChannel+0x3da>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2103      	movs	r1, #3
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff f995 	bl	80048c4 <LL_ADC_GetOffsetChannel>
 800559a:	4603      	mov	r3, r0
 800559c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800559e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055a0:	fa93 f3a3 	rbit	r3, r3
 80055a4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80055a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80055aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80055b0:	2320      	movs	r3, #32
 80055b2:	e003      	b.n	80055bc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80055b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055b6:	fab3 f383 	clz	r3, r3
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d105      	bne.n	80055d6 <HAL_ADC_ConfigChannel+0x3f2>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	0e9b      	lsrs	r3, r3, #26
 80055d0:	f003 031f 	and.w	r3, r3, #31
 80055d4:	e011      	b.n	80055fa <HAL_ADC_ConfigChannel+0x416>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055de:	fa93 f3a3 	rbit	r3, r3
 80055e2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80055e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80055e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80055ee:	2320      	movs	r3, #32
 80055f0:	e003      	b.n	80055fa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80055f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055f4:	fab3 f383 	clz	r3, r3
 80055f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d106      	bne.n	800560c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2200      	movs	r2, #0
 8005604:	2103      	movs	r1, #3
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff f972 	bl	80048f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff fae3 	bl	8004bdc <LL_ADC_IsEnabled>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	f040 813d 	bne.w	8005898 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6818      	ldr	r0, [r3, #0]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6819      	ldr	r1, [r3, #0]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	461a      	mov	r2, r3
 800562c:	f7ff fa2e 	bl	8004a8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	4aa2      	ldr	r2, [pc, #648]	@ (80058c0 <HAL_ADC_ConfigChannel+0x6dc>)
 8005636:	4293      	cmp	r3, r2
 8005638:	f040 812e 	bne.w	8005898 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10b      	bne.n	8005664 <HAL_ADC_ConfigChannel+0x480>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	0e9b      	lsrs	r3, r3, #26
 8005652:	3301      	adds	r3, #1
 8005654:	f003 031f 	and.w	r3, r3, #31
 8005658:	2b09      	cmp	r3, #9
 800565a:	bf94      	ite	ls
 800565c:	2301      	movls	r3, #1
 800565e:	2300      	movhi	r3, #0
 8005660:	b2db      	uxtb	r3, r3
 8005662:	e019      	b.n	8005698 <HAL_ADC_ConfigChannel+0x4b4>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800566c:	fa93 f3a3 	rbit	r3, r3
 8005670:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005672:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005674:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005676:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800567c:	2320      	movs	r3, #32
 800567e:	e003      	b.n	8005688 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005680:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005682:	fab3 f383 	clz	r3, r3
 8005686:	b2db      	uxtb	r3, r3
 8005688:	3301      	adds	r3, #1
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	2b09      	cmp	r3, #9
 8005690:	bf94      	ite	ls
 8005692:	2301      	movls	r3, #1
 8005694:	2300      	movhi	r3, #0
 8005696:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005698:	2b00      	cmp	r3, #0
 800569a:	d079      	beq.n	8005790 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d107      	bne.n	80056b8 <HAL_ADC_ConfigChannel+0x4d4>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	0e9b      	lsrs	r3, r3, #26
 80056ae:	3301      	adds	r3, #1
 80056b0:	069b      	lsls	r3, r3, #26
 80056b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056b6:	e015      	b.n	80056e4 <HAL_ADC_ConfigChannel+0x500>
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056c0:	fa93 f3a3 	rbit	r3, r3
 80056c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80056c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80056ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80056d0:	2320      	movs	r3, #32
 80056d2:	e003      	b.n	80056dc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80056d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056d6:	fab3 f383 	clz	r3, r3
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	3301      	adds	r3, #1
 80056de:	069b      	lsls	r3, r3, #26
 80056e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d109      	bne.n	8005704 <HAL_ADC_ConfigChannel+0x520>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	0e9b      	lsrs	r3, r3, #26
 80056f6:	3301      	adds	r3, #1
 80056f8:	f003 031f 	and.w	r3, r3, #31
 80056fc:	2101      	movs	r1, #1
 80056fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005702:	e017      	b.n	8005734 <HAL_ADC_ConfigChannel+0x550>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800570c:	fa93 f3a3 	rbit	r3, r3
 8005710:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005714:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800571c:	2320      	movs	r3, #32
 800571e:	e003      	b.n	8005728 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005720:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005722:	fab3 f383 	clz	r3, r3
 8005726:	b2db      	uxtb	r3, r3
 8005728:	3301      	adds	r3, #1
 800572a:	f003 031f 	and.w	r3, r3, #31
 800572e:	2101      	movs	r1, #1
 8005730:	fa01 f303 	lsl.w	r3, r1, r3
 8005734:	ea42 0103 	orr.w	r1, r2, r3
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10a      	bne.n	800575a <HAL_ADC_ConfigChannel+0x576>
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	0e9b      	lsrs	r3, r3, #26
 800574a:	3301      	adds	r3, #1
 800574c:	f003 021f 	and.w	r2, r3, #31
 8005750:	4613      	mov	r3, r2
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	4413      	add	r3, r2
 8005756:	051b      	lsls	r3, r3, #20
 8005758:	e018      	b.n	800578c <HAL_ADC_ConfigChannel+0x5a8>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005762:	fa93 f3a3 	rbit	r3, r3
 8005766:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800576a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800576c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005772:	2320      	movs	r3, #32
 8005774:	e003      	b.n	800577e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005778:	fab3 f383 	clz	r3, r3
 800577c:	b2db      	uxtb	r3, r3
 800577e:	3301      	adds	r3, #1
 8005780:	f003 021f 	and.w	r2, r3, #31
 8005784:	4613      	mov	r3, r2
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	4413      	add	r3, r2
 800578a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800578c:	430b      	orrs	r3, r1
 800578e:	e07e      	b.n	800588e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005798:	2b00      	cmp	r3, #0
 800579a:	d107      	bne.n	80057ac <HAL_ADC_ConfigChannel+0x5c8>
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	0e9b      	lsrs	r3, r3, #26
 80057a2:	3301      	adds	r3, #1
 80057a4:	069b      	lsls	r3, r3, #26
 80057a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057aa:	e015      	b.n	80057d8 <HAL_ADC_ConfigChannel+0x5f4>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b4:	fa93 f3a3 	rbit	r3, r3
 80057b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80057ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057bc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80057be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80057c4:	2320      	movs	r3, #32
 80057c6:	e003      	b.n	80057d0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80057c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ca:	fab3 f383 	clz	r3, r3
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	3301      	adds	r3, #1
 80057d2:	069b      	lsls	r3, r3, #26
 80057d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d109      	bne.n	80057f8 <HAL_ADC_ConfigChannel+0x614>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	0e9b      	lsrs	r3, r3, #26
 80057ea:	3301      	adds	r3, #1
 80057ec:	f003 031f 	and.w	r3, r3, #31
 80057f0:	2101      	movs	r1, #1
 80057f2:	fa01 f303 	lsl.w	r3, r1, r3
 80057f6:	e017      	b.n	8005828 <HAL_ADC_ConfigChannel+0x644>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	fa93 f3a3 	rbit	r3, r3
 8005804:	61fb      	str	r3, [r7, #28]
  return result;
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800580a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005810:	2320      	movs	r3, #32
 8005812:	e003      	b.n	800581c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005816:	fab3 f383 	clz	r3, r3
 800581a:	b2db      	uxtb	r3, r3
 800581c:	3301      	adds	r3, #1
 800581e:	f003 031f 	and.w	r3, r3, #31
 8005822:	2101      	movs	r1, #1
 8005824:	fa01 f303 	lsl.w	r3, r1, r3
 8005828:	ea42 0103 	orr.w	r1, r2, r3
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10d      	bne.n	8005854 <HAL_ADC_ConfigChannel+0x670>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	0e9b      	lsrs	r3, r3, #26
 800583e:	3301      	adds	r3, #1
 8005840:	f003 021f 	and.w	r2, r3, #31
 8005844:	4613      	mov	r3, r2
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	4413      	add	r3, r2
 800584a:	3b1e      	subs	r3, #30
 800584c:	051b      	lsls	r3, r3, #20
 800584e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005852:	e01b      	b.n	800588c <HAL_ADC_ConfigChannel+0x6a8>
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	fa93 f3a3 	rbit	r3, r3
 8005860:	613b      	str	r3, [r7, #16]
  return result;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800586c:	2320      	movs	r3, #32
 800586e:	e003      	b.n	8005878 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	fab3 f383 	clz	r3, r3
 8005876:	b2db      	uxtb	r3, r3
 8005878:	3301      	adds	r3, #1
 800587a:	f003 021f 	and.w	r2, r3, #31
 800587e:	4613      	mov	r3, r2
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	4413      	add	r3, r2
 8005884:	3b1e      	subs	r3, #30
 8005886:	051b      	lsls	r3, r3, #20
 8005888:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800588c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005892:	4619      	mov	r1, r3
 8005894:	f7ff f8cf 	bl	8004a36 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	4b09      	ldr	r3, [pc, #36]	@ (80058c4 <HAL_ADC_ConfigChannel+0x6e0>)
 800589e:	4013      	ands	r3, r2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 80be 	beq.w	8005a22 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058ae:	d004      	beq.n	80058ba <HAL_ADC_ConfigChannel+0x6d6>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a04      	ldr	r2, [pc, #16]	@ (80058c8 <HAL_ADC_ConfigChannel+0x6e4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d10a      	bne.n	80058d0 <HAL_ADC_ConfigChannel+0x6ec>
 80058ba:	4b04      	ldr	r3, [pc, #16]	@ (80058cc <HAL_ADC_ConfigChannel+0x6e8>)
 80058bc:	e009      	b.n	80058d2 <HAL_ADC_ConfigChannel+0x6ee>
 80058be:	bf00      	nop
 80058c0:	407f0000 	.word	0x407f0000
 80058c4:	80080000 	.word	0x80080000
 80058c8:	50000100 	.word	0x50000100
 80058cc:	50000300 	.word	0x50000300
 80058d0:	4b59      	ldr	r3, [pc, #356]	@ (8005a38 <HAL_ADC_ConfigChannel+0x854>)
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fe ffc4 	bl	8004860 <LL_ADC_GetCommonPathInternalCh>
 80058d8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a56      	ldr	r2, [pc, #344]	@ (8005a3c <HAL_ADC_ConfigChannel+0x858>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d004      	beq.n	80058f0 <HAL_ADC_ConfigChannel+0x70c>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a55      	ldr	r2, [pc, #340]	@ (8005a40 <HAL_ADC_ConfigChannel+0x85c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d13a      	bne.n	8005966 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80058f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d134      	bne.n	8005966 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005904:	d005      	beq.n	8005912 <HAL_ADC_ConfigChannel+0x72e>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a4e      	ldr	r2, [pc, #312]	@ (8005a44 <HAL_ADC_ConfigChannel+0x860>)
 800590c:	4293      	cmp	r3, r2
 800590e:	f040 8085 	bne.w	8005a1c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800591a:	d004      	beq.n	8005926 <HAL_ADC_ConfigChannel+0x742>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a49      	ldr	r2, [pc, #292]	@ (8005a48 <HAL_ADC_ConfigChannel+0x864>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d101      	bne.n	800592a <HAL_ADC_ConfigChannel+0x746>
 8005926:	4a49      	ldr	r2, [pc, #292]	@ (8005a4c <HAL_ADC_ConfigChannel+0x868>)
 8005928:	e000      	b.n	800592c <HAL_ADC_ConfigChannel+0x748>
 800592a:	4a43      	ldr	r2, [pc, #268]	@ (8005a38 <HAL_ADC_ConfigChannel+0x854>)
 800592c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005930:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005934:	4619      	mov	r1, r3
 8005936:	4610      	mov	r0, r2
 8005938:	f7fe ff7f 	bl	800483a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800593c:	4b44      	ldr	r3, [pc, #272]	@ (8005a50 <HAL_ADC_ConfigChannel+0x86c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	099b      	lsrs	r3, r3, #6
 8005942:	4a44      	ldr	r2, [pc, #272]	@ (8005a54 <HAL_ADC_ConfigChannel+0x870>)
 8005944:	fba2 2303 	umull	r2, r3, r2, r3
 8005948:	099b      	lsrs	r3, r3, #6
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	4613      	mov	r3, r2
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	4413      	add	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005956:	e002      	b.n	800595e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3b01      	subs	r3, #1
 800595c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1f9      	bne.n	8005958 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005964:	e05a      	b.n	8005a1c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a3b      	ldr	r2, [pc, #236]	@ (8005a58 <HAL_ADC_ConfigChannel+0x874>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d125      	bne.n	80059bc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005970:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005974:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d11f      	bne.n	80059bc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a31      	ldr	r2, [pc, #196]	@ (8005a48 <HAL_ADC_ConfigChannel+0x864>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d104      	bne.n	8005990 <HAL_ADC_ConfigChannel+0x7ac>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a34      	ldr	r2, [pc, #208]	@ (8005a5c <HAL_ADC_ConfigChannel+0x878>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d047      	beq.n	8005a20 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005998:	d004      	beq.n	80059a4 <HAL_ADC_ConfigChannel+0x7c0>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a2a      	ldr	r2, [pc, #168]	@ (8005a48 <HAL_ADC_ConfigChannel+0x864>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d101      	bne.n	80059a8 <HAL_ADC_ConfigChannel+0x7c4>
 80059a4:	4a29      	ldr	r2, [pc, #164]	@ (8005a4c <HAL_ADC_ConfigChannel+0x868>)
 80059a6:	e000      	b.n	80059aa <HAL_ADC_ConfigChannel+0x7c6>
 80059a8:	4a23      	ldr	r2, [pc, #140]	@ (8005a38 <HAL_ADC_ConfigChannel+0x854>)
 80059aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059b2:	4619      	mov	r1, r3
 80059b4:	4610      	mov	r0, r2
 80059b6:	f7fe ff40 	bl	800483a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80059ba:	e031      	b.n	8005a20 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a27      	ldr	r2, [pc, #156]	@ (8005a60 <HAL_ADC_ConfigChannel+0x87c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d12d      	bne.n	8005a22 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80059c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d127      	bne.n	8005a22 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a1c      	ldr	r2, [pc, #112]	@ (8005a48 <HAL_ADC_ConfigChannel+0x864>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d022      	beq.n	8005a22 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059e4:	d004      	beq.n	80059f0 <HAL_ADC_ConfigChannel+0x80c>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a17      	ldr	r2, [pc, #92]	@ (8005a48 <HAL_ADC_ConfigChannel+0x864>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d101      	bne.n	80059f4 <HAL_ADC_ConfigChannel+0x810>
 80059f0:	4a16      	ldr	r2, [pc, #88]	@ (8005a4c <HAL_ADC_ConfigChannel+0x868>)
 80059f2:	e000      	b.n	80059f6 <HAL_ADC_ConfigChannel+0x812>
 80059f4:	4a10      	ldr	r2, [pc, #64]	@ (8005a38 <HAL_ADC_ConfigChannel+0x854>)
 80059f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80059fe:	4619      	mov	r1, r3
 8005a00:	4610      	mov	r0, r2
 8005a02:	f7fe ff1a 	bl	800483a <LL_ADC_SetCommonPathInternalCh>
 8005a06:	e00c      	b.n	8005a22 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a0c:	f043 0220 	orr.w	r2, r3, #32
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005a1a:	e002      	b.n	8005a22 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a1c:	bf00      	nop
 8005a1e:	e000      	b.n	8005a22 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a20:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005a2a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	37d8      	adds	r7, #216	@ 0xd8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	50000700 	.word	0x50000700
 8005a3c:	c3210000 	.word	0xc3210000
 8005a40:	90c00010 	.word	0x90c00010
 8005a44:	50000600 	.word	0x50000600
 8005a48:	50000100 	.word	0x50000100
 8005a4c:	50000300 	.word	0x50000300
 8005a50:	20000054 	.word	0x20000054
 8005a54:	053e2d63 	.word	0x053e2d63
 8005a58:	c7520000 	.word	0xc7520000
 8005a5c:	50000500 	.word	0x50000500
 8005a60:	cb840000 	.word	0xcb840000

08005a64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff f8b1 	bl	8004bdc <LL_ADC_IsEnabled>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d176      	bne.n	8005b6e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	4b3c      	ldr	r3, [pc, #240]	@ (8005b78 <ADC_Enable+0x114>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00d      	beq.n	8005aaa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a92:	f043 0210 	orr.w	r2, r3, #16
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a9e:	f043 0201 	orr.w	r2, r3, #1
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e062      	b.n	8005b70 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7ff f86c 	bl	8004b8c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005abc:	d004      	beq.n	8005ac8 <ADC_Enable+0x64>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a2e      	ldr	r2, [pc, #184]	@ (8005b7c <ADC_Enable+0x118>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d101      	bne.n	8005acc <ADC_Enable+0x68>
 8005ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8005b80 <ADC_Enable+0x11c>)
 8005aca:	e000      	b.n	8005ace <ADC_Enable+0x6a>
 8005acc:	4b2d      	ldr	r3, [pc, #180]	@ (8005b84 <ADC_Enable+0x120>)
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fe fec6 	bl	8004860 <LL_ADC_GetCommonPathInternalCh>
 8005ad4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005ad6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d013      	beq.n	8005b06 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005ade:	4b2a      	ldr	r3, [pc, #168]	@ (8005b88 <ADC_Enable+0x124>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	099b      	lsrs	r3, r3, #6
 8005ae4:	4a29      	ldr	r2, [pc, #164]	@ (8005b8c <ADC_Enable+0x128>)
 8005ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aea:	099b      	lsrs	r3, r3, #6
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	4613      	mov	r3, r2
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005af8:	e002      	b.n	8005b00 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1f9      	bne.n	8005afa <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005b06:	f7fe fe57 	bl	80047b8 <HAL_GetTick>
 8005b0a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b0c:	e028      	b.n	8005b60 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7ff f862 	bl	8004bdc <LL_ADC_IsEnabled>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d104      	bne.n	8005b28 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7ff f832 	bl	8004b8c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005b28:	f7fe fe46 	bl	80047b8 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d914      	bls.n	8005b60 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d00d      	beq.n	8005b60 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b48:	f043 0210 	orr.w	r2, r3, #16
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b54:	f043 0201 	orr.w	r2, r3, #1
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e007      	b.n	8005b70 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d1cf      	bne.n	8005b0e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	8000003f 	.word	0x8000003f
 8005b7c:	50000100 	.word	0x50000100
 8005b80:	50000300 	.word	0x50000300
 8005b84:	50000700 	.word	0x50000700
 8005b88:	20000054 	.word	0x20000054
 8005b8c:	053e2d63 	.word	0x053e2d63

08005b90 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff f830 	bl	8004c02 <LL_ADC_IsDisableOngoing>
 8005ba2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff f817 	bl	8004bdc <LL_ADC_IsEnabled>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d047      	beq.n	8005c44 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d144      	bne.n	8005c44 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 030d 	and.w	r3, r3, #13
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d10c      	bne.n	8005be2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fe fff1 	bl	8004bb4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2203      	movs	r2, #3
 8005bd8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005bda:	f7fe fded 	bl	80047b8 <HAL_GetTick>
 8005bde:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005be0:	e029      	b.n	8005c36 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be6:	f043 0210 	orr.w	r2, r3, #16
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bf2:	f043 0201 	orr.w	r2, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e023      	b.n	8005c46 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005bfe:	f7fe fddb 	bl	80047b8 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d914      	bls.n	8005c36 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00d      	beq.n	8005c36 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c1e:	f043 0210 	orr.w	r2, r3, #16
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c2a:	f043 0201 	orr.w	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e007      	b.n	8005c46 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1dc      	bne.n	8005bfe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c60:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d14b      	bne.n	8005d00 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c6c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d021      	beq.n	8005cc6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe fe96 	bl	80049b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d032      	beq.n	8005cf8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d12b      	bne.n	8005cf8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ca4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d11f      	bne.n	8005cf8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cbc:	f043 0201 	orr.w	r2, r3, #1
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005cc4:	e018      	b.n	8005cf8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d111      	bne.n	8005cf8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ce4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d105      	bne.n	8005cf8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf0:	f043 0201 	orr.w	r2, r3, #1
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f7fc fe99 	bl	8002a30 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005cfe:	e00e      	b.n	8005d1e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f7ff fa5f 	bl	80051d0 <HAL_ADC_ErrorCallback>
}
 8005d12:	e004      	b.n	8005d1e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	4798      	blx	r3
}
 8005d1e:	bf00      	nop
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b084      	sub	sp, #16
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f7ff fa41 	bl	80051bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d3a:	bf00      	nop
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b084      	sub	sp, #16
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d54:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d60:	f043 0204 	orr.w	r2, r3, #4
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f7ff fa31 	bl	80051d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d6e:	bf00      	nop
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <LL_ADC_IsEnabled>:
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <LL_ADC_IsEnabled+0x18>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <LL_ADC_IsEnabled+0x1a>
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <LL_ADC_StartCalibration>:
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005dae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005db8:	4313      	orrs	r3, r2
 8005dba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	609a      	str	r2, [r3, #8]
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <LL_ADC_IsCalibrationOnGoing>:
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b083      	sub	sp, #12
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005de2:	d101      	bne.n	8005de8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005de4:	2301      	movs	r3, #1
 8005de6:	e000      	b.n	8005dea <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <LL_ADC_REG_IsConversionOngoing>:
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d101      	bne.n	8005e0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e000      	b.n	8005e10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005e26:	2300      	movs	r3, #0
 8005e28:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_ADCEx_Calibration_Start+0x1c>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e04d      	b.n	8005ed4 <HAL_ADCEx_Calibration_Start+0xb8>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7ff fea5 	bl	8005b90 <ADC_Disable>
 8005e46:	4603      	mov	r3, r0
 8005e48:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d136      	bne.n	8005ebe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e54:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005e58:	f023 0302 	bic.w	r3, r3, #2
 8005e5c:	f043 0202 	orr.w	r2, r3, #2
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff ff96 	bl	8005d9c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005e70:	e014      	b.n	8005e9c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	3301      	adds	r3, #1
 8005e76:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4a18      	ldr	r2, [pc, #96]	@ (8005edc <HAL_ADCEx_Calibration_Start+0xc0>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d90d      	bls.n	8005e9c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e84:	f023 0312 	bic.w	r3, r3, #18
 8005e88:	f043 0210 	orr.w	r2, r3, #16
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e01b      	b.n	8005ed4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff ff94 	bl	8005dce <LL_ADC_IsCalibrationOnGoing>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e2      	bne.n	8005e72 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eb0:	f023 0303 	bic.w	r3, r3, #3
 8005eb4:	f043 0201 	orr.w	r2, r3, #1
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ebc:	e005      	b.n	8005eca <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ec2:	f043 0210 	orr.w	r2, r3, #16
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	0004de01 	.word	0x0004de01

08005ee0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005ee0:	b590      	push	{r4, r7, lr}
 8005ee2:	b0a1      	sub	sp, #132	@ 0x84
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d101      	bne.n	8005efe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005efa:	2302      	movs	r3, #2
 8005efc:	e0e7      	b.n	80060ce <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005f06:	2300      	movs	r3, #0
 8005f08:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f16:	d102      	bne.n	8005f1e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005f18:	4b6f      	ldr	r3, [pc, #444]	@ (80060d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f1a:	60bb      	str	r3, [r7, #8]
 8005f1c:	e009      	b.n	8005f32 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a6e      	ldr	r2, [pc, #440]	@ (80060dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d102      	bne.n	8005f2e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005f28:	4b6d      	ldr	r3, [pc, #436]	@ (80060e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005f2a:	60bb      	str	r3, [r7, #8]
 8005f2c:	e001      	b.n	8005f32 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10b      	bne.n	8005f50 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f3c:	f043 0220 	orr.w	r2, r3, #32
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e0be      	b.n	80060ce <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff ff4f 	bl	8005df6 <LL_ADC_REG_IsConversionOngoing>
 8005f58:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff ff49 	bl	8005df6 <LL_ADC_REG_IsConversionOngoing>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f040 80a0 	bne.w	80060ac <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005f6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f040 809c 	bne.w	80060ac <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f7c:	d004      	beq.n	8005f88 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a55      	ldr	r2, [pc, #340]	@ (80060d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d101      	bne.n	8005f8c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005f88:	4b56      	ldr	r3, [pc, #344]	@ (80060e4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005f8a:	e000      	b.n	8005f8e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005f8c:	4b56      	ldr	r3, [pc, #344]	@ (80060e8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005f8e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d04b      	beq.n	8006030 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005f98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	6859      	ldr	r1, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005faa:	035b      	lsls	r3, r3, #13
 8005fac:	430b      	orrs	r3, r1
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fb2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fbc:	d004      	beq.n	8005fc8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a45      	ldr	r2, [pc, #276]	@ (80060d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d10f      	bne.n	8005fe8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005fc8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005fcc:	f7ff fed3 	bl	8005d76 <LL_ADC_IsEnabled>
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	4841      	ldr	r0, [pc, #260]	@ (80060d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005fd4:	f7ff fecf 	bl	8005d76 <LL_ADC_IsEnabled>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	4323      	orrs	r3, r4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	bf0c      	ite	eq
 8005fe0:	2301      	moveq	r3, #1
 8005fe2:	2300      	movne	r3, #0
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	e012      	b.n	800600e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005fe8:	483c      	ldr	r0, [pc, #240]	@ (80060dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005fea:	f7ff fec4 	bl	8005d76 <LL_ADC_IsEnabled>
 8005fee:	4604      	mov	r4, r0
 8005ff0:	483b      	ldr	r0, [pc, #236]	@ (80060e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005ff2:	f7ff fec0 	bl	8005d76 <LL_ADC_IsEnabled>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	431c      	orrs	r4, r3
 8005ffa:	483c      	ldr	r0, [pc, #240]	@ (80060ec <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005ffc:	f7ff febb 	bl	8005d76 <LL_ADC_IsEnabled>
 8006000:	4603      	mov	r3, r0
 8006002:	4323      	orrs	r3, r4
 8006004:	2b00      	cmp	r3, #0
 8006006:	bf0c      	ite	eq
 8006008:	2301      	moveq	r3, #1
 800600a:	2300      	movne	r3, #0
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d056      	beq.n	80060c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006012:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800601a:	f023 030f 	bic.w	r3, r3, #15
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	6811      	ldr	r1, [r2, #0]
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	6892      	ldr	r2, [r2, #8]
 8006026:	430a      	orrs	r2, r1
 8006028:	431a      	orrs	r2, r3
 800602a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800602c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800602e:	e047      	b.n	80060c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006030:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006038:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800603a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006044:	d004      	beq.n	8006050 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a23      	ldr	r2, [pc, #140]	@ (80060d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d10f      	bne.n	8006070 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006050:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006054:	f7ff fe8f 	bl	8005d76 <LL_ADC_IsEnabled>
 8006058:	4604      	mov	r4, r0
 800605a:	481f      	ldr	r0, [pc, #124]	@ (80060d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800605c:	f7ff fe8b 	bl	8005d76 <LL_ADC_IsEnabled>
 8006060:	4603      	mov	r3, r0
 8006062:	4323      	orrs	r3, r4
 8006064:	2b00      	cmp	r3, #0
 8006066:	bf0c      	ite	eq
 8006068:	2301      	moveq	r3, #1
 800606a:	2300      	movne	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	e012      	b.n	8006096 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006070:	481a      	ldr	r0, [pc, #104]	@ (80060dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006072:	f7ff fe80 	bl	8005d76 <LL_ADC_IsEnabled>
 8006076:	4604      	mov	r4, r0
 8006078:	4819      	ldr	r0, [pc, #100]	@ (80060e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800607a:	f7ff fe7c 	bl	8005d76 <LL_ADC_IsEnabled>
 800607e:	4603      	mov	r3, r0
 8006080:	431c      	orrs	r4, r3
 8006082:	481a      	ldr	r0, [pc, #104]	@ (80060ec <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006084:	f7ff fe77 	bl	8005d76 <LL_ADC_IsEnabled>
 8006088:	4603      	mov	r3, r0
 800608a:	4323      	orrs	r3, r4
 800608c:	2b00      	cmp	r3, #0
 800608e:	bf0c      	ite	eq
 8006090:	2301      	moveq	r3, #1
 8006092:	2300      	movne	r3, #0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d012      	beq.n	80060c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800609a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80060a2:	f023 030f 	bic.w	r3, r3, #15
 80060a6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80060a8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80060aa:	e009      	b.n	80060c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b0:	f043 0220 	orr.w	r2, r3, #32
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80060be:	e000      	b.n	80060c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80060c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80060ca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3784      	adds	r7, #132	@ 0x84
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd90      	pop	{r4, r7, pc}
 80060d6:	bf00      	nop
 80060d8:	50000100 	.word	0x50000100
 80060dc:	50000400 	.word	0x50000400
 80060e0:	50000500 	.word	0x50000500
 80060e4:	50000300 	.word	0x50000300
 80060e8:	50000700 	.word	0x50000700
 80060ec:	50000600 	.word	0x50000600

080060f0 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e023      	b.n	800614a <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d106      	bne.n	800611c <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7fd fed8 	bl	8003ecc <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
	...

08006154 <HAL_CORDIC_Configure>:
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, const CORDIC_ConfigTypeDef *sConfig)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b01      	cmp	r3, #1
 800616c:	d11d      	bne.n	80061aa <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	4b14      	ldr	r3, [pc, #80]	@ (80061c8 <HAL_CORDIC_Configure+0x74>)
 8006176:	4013      	ands	r3, r2
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	6811      	ldr	r1, [r2, #0]
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	6992      	ldr	r2, [r2, #24]
 8006180:	4311      	orrs	r1, r2
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	6852      	ldr	r2, [r2, #4]
 8006186:	4311      	orrs	r1, r2
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	6912      	ldr	r2, [r2, #16]
 800618c:	4311      	orrs	r1, r2
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	6952      	ldr	r2, [r2, #20]
 8006192:	4311      	orrs	r1, r2
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	6892      	ldr	r2, [r2, #8]
 8006198:	4311      	orrs	r1, r2
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	68d2      	ldr	r2, [r2, #12]
 800619e:	4311      	orrs	r1, r2
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	6812      	ldr	r2, [r2, #0]
 80061a4:	430b      	orrs	r3, r1
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	e007      	b.n	80061ba <HAL_CORDIC_Configure+0x66>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ae:	f043 0202 	orr.w	r2, r3, #2
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	ff87f800 	.word	0xff87f800

080061cc <HAL_CORDIC_Calculate>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Calculate(CORDIC_HandleTypeDef *hcordic, const int32_t *pInBuff, int32_t *pOutBuff,
                                       uint32_t NbCalc, uint32_t Timeout)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
 80061d8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t index;
  const int32_t *p_tmp_in_buff = pInBuff;
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	617b      	str	r3, [r7, #20]
  int32_t *p_tmp_out_buff = pOutBuff;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	613b      	str	r3, [r7, #16]

  /* Check parameters setting */
  if ((pInBuff == NULL) || (pOutBuff == NULL) || (NbCalc == 0U))
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d005      	beq.n	80061f4 <HAL_CORDIC_Calculate+0x28>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d002      	beq.n	80061f4 <HAL_CORDIC_Calculate+0x28>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d107      	bne.n	8006204 <HAL_CORDIC_Calculate+0x38>
  {
    /* Update the error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f8:	f043 0201 	orr.w	r2, r3, #1
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e058      	b.n	80062b6 <HAL_CORDIC_Calculate+0xea>
  }

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b01      	cmp	r3, #1
 800620e:	d14b      	bne.n	80062a8 <HAL_CORDIC_Calculate+0xdc>
  {
    /* Reset CORDIC error code */
    hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_BUSY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2202      	movs	r2, #2
 800621a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Get tick */
    tickstart = HAL_GetTick();
 800621e:	f7fe facb 	bl	80047b8 <HAL_GetTick>
 8006222:	61b8      	str	r0, [r7, #24]

    /* Write of input data in Write Data register, and increment input buffer pointer */
    CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8006224:	f107 0314 	add.w	r3, r7, #20
 8006228:	4619      	mov	r1, r3
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 f847 	bl	80062be <CORDIC_WriteInDataIncrementPtr>

    /* Calculation is started.
       Provide next set of input data, until number of calculation is achieved */
    for (index = (NbCalc - 1U); index > 0U; index--)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	3b01      	subs	r3, #1
 8006234:	61fb      	str	r3, [r7, #28]
 8006236:	e028      	b.n	800628a <HAL_CORDIC_Calculate+0xbe>
    {
      /* Write of input data in Write Data register, and increment input buffer pointer */
      CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8006238:	f107 0314 	add.w	r3, r7, #20
 800623c:	4619      	mov	r1, r3
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 f83d 	bl	80062be <CORDIC_WriteInDataIncrementPtr>

      /* Wait for RRDY flag to be raised */
      do
      {
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY)
 8006244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624a:	d010      	beq.n	800626e <HAL_CORDIC_Calculate+0xa2>
        {
          if ((HAL_GetTick() - tickstart) > Timeout)
 800624c:	f7fe fab4 	bl	80047b8 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006258:	429a      	cmp	r2, r3
 800625a:	d208      	bcs.n	800626e <HAL_CORDIC_Calculate+0xa2>
          {
            /* Set CORDIC error code */
            hcordic->ErrorCode = HAL_CORDIC_ERROR_TIMEOUT;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2204      	movs	r2, #4
 8006260:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Change the CORDIC state */
            hcordic->State = HAL_CORDIC_STATE_READY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Return function status */
            return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e023      	b.n	80062b6 <HAL_CORDIC_Calculate+0xea>
          }
        }
      } while (HAL_IS_BIT_CLR(hcordic->Instance->CSR, CORDIC_CSR_RRDY));
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	dae5      	bge.n	8006244 <HAL_CORDIC_Calculate+0x78>

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8006278:	f107 0310 	add.w	r3, r7, #16
 800627c:	4619      	mov	r1, r3
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 f846 	bl	8006310 <CORDIC_ReadOutDataIncrementPtr>
    for (index = (NbCalc - 1U); index > 0U; index--)
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	3b01      	subs	r3, #1
 8006288:	61fb      	str	r3, [r7, #28]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1d3      	bne.n	8006238 <HAL_CORDIC_Calculate+0x6c>
    }

    /* Read output data from Read Data register, and increment output buffer pointer */
    CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8006290:	f107 0310 	add.w	r3, r7, #16
 8006294:	4619      	mov	r1, r3
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f000 f83a 	bl	8006310 <CORDIC_ReadOutDataIncrementPtr>

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Return function status */
    return HAL_OK;
 80062a4:	2300      	movs	r3, #0
 80062a6:	e006      	b.n	80062b6 <HAL_CORDIC_Calculate+0xea>
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ac:	f043 0202 	orr.w	r2, r3, #2
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
  }
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, const int32_t **ppInBuff)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	1d1a      	adds	r2, r3, #4
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062ec:	d10a      	bne.n	8006304 <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	1d1a      	adds	r2, r3, #4
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	601a      	str	r2, [r3, #0]
  }
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	1d1a      	adds	r2, r3, #4
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800633a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800633e:	d10a      	bne.n	8006356 <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	1d1a      	adds	r2, r3, #4
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	601a      	str	r2, [r3, #0]
  }
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
	...

08006364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006374:	4b0c      	ldr	r3, [pc, #48]	@ (80063a8 <__NVIC_SetPriorityGrouping+0x44>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006380:	4013      	ands	r3, r2
 8006382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800638c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006396:	4a04      	ldr	r2, [pc, #16]	@ (80063a8 <__NVIC_SetPriorityGrouping+0x44>)
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	60d3      	str	r3, [r2, #12]
}
 800639c:	bf00      	nop
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	e000ed00 	.word	0xe000ed00

080063ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063b0:	4b04      	ldr	r3, [pc, #16]	@ (80063c4 <__NVIC_GetPriorityGrouping+0x18>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	0a1b      	lsrs	r3, r3, #8
 80063b6:	f003 0307 	and.w	r3, r3, #7
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	e000ed00 	.word	0xe000ed00

080063c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	4603      	mov	r3, r0
 80063d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	db0b      	blt.n	80063f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063da:	79fb      	ldrb	r3, [r7, #7]
 80063dc:	f003 021f 	and.w	r2, r3, #31
 80063e0:	4907      	ldr	r1, [pc, #28]	@ (8006400 <__NVIC_EnableIRQ+0x38>)
 80063e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063e6:	095b      	lsrs	r3, r3, #5
 80063e8:	2001      	movs	r0, #1
 80063ea:	fa00 f202 	lsl.w	r2, r0, r2
 80063ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	e000e100 	.word	0xe000e100

08006404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	4603      	mov	r3, r0
 800640c:	6039      	str	r1, [r7, #0]
 800640e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006414:	2b00      	cmp	r3, #0
 8006416:	db0a      	blt.n	800642e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	b2da      	uxtb	r2, r3
 800641c:	490c      	ldr	r1, [pc, #48]	@ (8006450 <__NVIC_SetPriority+0x4c>)
 800641e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006422:	0112      	lsls	r2, r2, #4
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	440b      	add	r3, r1
 8006428:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800642c:	e00a      	b.n	8006444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	b2da      	uxtb	r2, r3
 8006432:	4908      	ldr	r1, [pc, #32]	@ (8006454 <__NVIC_SetPriority+0x50>)
 8006434:	79fb      	ldrb	r3, [r7, #7]
 8006436:	f003 030f 	and.w	r3, r3, #15
 800643a:	3b04      	subs	r3, #4
 800643c:	0112      	lsls	r2, r2, #4
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	440b      	add	r3, r1
 8006442:	761a      	strb	r2, [r3, #24]
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	e000e100 	.word	0xe000e100
 8006454:	e000ed00 	.word	0xe000ed00

08006458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006458:	b480      	push	{r7}
 800645a:	b089      	sub	sp, #36	@ 0x24
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	f1c3 0307 	rsb	r3, r3, #7
 8006472:	2b04      	cmp	r3, #4
 8006474:	bf28      	it	cs
 8006476:	2304      	movcs	r3, #4
 8006478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	3304      	adds	r3, #4
 800647e:	2b06      	cmp	r3, #6
 8006480:	d902      	bls.n	8006488 <NVIC_EncodePriority+0x30>
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	3b03      	subs	r3, #3
 8006486:	e000      	b.n	800648a <NVIC_EncodePriority+0x32>
 8006488:	2300      	movs	r3, #0
 800648a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800648c:	f04f 32ff 	mov.w	r2, #4294967295
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	fa02 f303 	lsl.w	r3, r2, r3
 8006496:	43da      	mvns	r2, r3
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	401a      	ands	r2, r3
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064a0:	f04f 31ff 	mov.w	r1, #4294967295
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	fa01 f303 	lsl.w	r3, r1, r3
 80064aa:	43d9      	mvns	r1, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064b0:	4313      	orrs	r3, r2
         );
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3724      	adds	r7, #36	@ 0x24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
	...

080064c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064d0:	d301      	bcc.n	80064d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80064d2:	2301      	movs	r3, #1
 80064d4:	e00f      	b.n	80064f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80064d6:	4a0a      	ldr	r2, [pc, #40]	@ (8006500 <SysTick_Config+0x40>)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	3b01      	subs	r3, #1
 80064dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80064de:	210f      	movs	r1, #15
 80064e0:	f04f 30ff 	mov.w	r0, #4294967295
 80064e4:	f7ff ff8e 	bl	8006404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80064e8:	4b05      	ldr	r3, [pc, #20]	@ (8006500 <SysTick_Config+0x40>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064ee:	4b04      	ldr	r3, [pc, #16]	@ (8006500 <SysTick_Config+0x40>)
 80064f0:	2207      	movs	r2, #7
 80064f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	e000e010 	.word	0xe000e010

08006504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff ff29 	bl	8006364 <__NVIC_SetPriorityGrouping>
}
 8006512:	bf00      	nop
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b086      	sub	sp, #24
 800651e:	af00      	add	r7, sp, #0
 8006520:	4603      	mov	r3, r0
 8006522:	60b9      	str	r1, [r7, #8]
 8006524:	607a      	str	r2, [r7, #4]
 8006526:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006528:	f7ff ff40 	bl	80063ac <__NVIC_GetPriorityGrouping>
 800652c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	68b9      	ldr	r1, [r7, #8]
 8006532:	6978      	ldr	r0, [r7, #20]
 8006534:	f7ff ff90 	bl	8006458 <NVIC_EncodePriority>
 8006538:	4602      	mov	r2, r0
 800653a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800653e:	4611      	mov	r1, r2
 8006540:	4618      	mov	r0, r3
 8006542:	f7ff ff5f 	bl	8006404 <__NVIC_SetPriority>
}
 8006546:	bf00      	nop
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b082      	sub	sp, #8
 8006552:	af00      	add	r7, sp, #0
 8006554:	4603      	mov	r3, r0
 8006556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff ff33 	bl	80063c8 <__NVIC_EnableIRQ>
}
 8006562:	bf00      	nop
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b082      	sub	sp, #8
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7ff ffa4 	bl	80064c0 <SysTick_Config>
 8006578:	4603      	mov	r3, r0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b082      	sub	sp, #8
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d101      	bne.n	8006594 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e014      	b.n	80065be <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	791b      	ldrb	r3, [r3, #4]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d105      	bne.n	80065aa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7fd fcb1 	bl	8003f0c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2202      	movs	r2, #2
 80065ae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
	...

080065c8 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e056      	b.n	800668a <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	795b      	ldrb	r3, [r3, #5]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d101      	bne.n	80065e8 <HAL_DAC_Start+0x20>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e050      	b.n	800668a <HAL_DAC_Start+0xc2>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2202      	movs	r2, #2
 80065f2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6819      	ldr	r1, [r3, #0]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	f003 0310 	and.w	r3, r3, #16
 8006600:	2201      	movs	r2, #1
 8006602:	409a      	lsls	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800660c:	4b22      	ldr	r3, [pc, #136]	@ (8006698 <HAL_DAC_Start+0xd0>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	099b      	lsrs	r3, r3, #6
 8006612:	4a22      	ldr	r2, [pc, #136]	@ (800669c <HAL_DAC_Start+0xd4>)
 8006614:	fba2 2303 	umull	r2, r3, r2, r3
 8006618:	099b      	lsrs	r3, r3, #6
 800661a:	3301      	adds	r3, #1
 800661c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800661e:	e002      	b.n	8006626 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3b01      	subs	r3, #1
 8006624:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1f9      	bne.n	8006620 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10f      	bne.n	8006652 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800663c:	2b02      	cmp	r3, #2
 800663e:	d11d      	bne.n	800667c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0201 	orr.w	r2, r2, #1
 800664e:	605a      	str	r2, [r3, #4]
 8006650:	e014      	b.n	800667c <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	f003 0310 	and.w	r3, r3, #16
 8006662:	2102      	movs	r1, #2
 8006664:	fa01 f303 	lsl.w	r3, r1, r3
 8006668:	429a      	cmp	r2, r3
 800666a:	d107      	bne.n	800667c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0202 	orr.w	r2, r2, #2
 800667a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	20000054 	.word	0x20000054
 800669c:	053e2d63 	.word	0x053e2d63

080066a0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066b6:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d01d      	beq.n	80066fe <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d018      	beq.n	80066fe <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2204      	movs	r2, #4
 80066d0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	f043 0201 	orr.w	r2, r3, #1
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80066e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066f6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f854 	bl	80067a6 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d01d      	beq.n	8006744 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d018      	beq.n	8006744 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2204      	movs	r2, #4
 8006716:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f043 0202 	orr.w	r2, r3, #2
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800672c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800673c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f9f4 	bl	8006b2c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8006744:	bf00      	nop
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
 8006758:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800675a:	2300      	movs	r3, #0
 800675c:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e018      	b.n	800679a <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d105      	bne.n	8006786 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4413      	add	r3, r2
 8006780:	3308      	adds	r3, #8
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	e004      	b.n	8006790 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4413      	add	r3, r2
 800678c:	3314      	adds	r3, #20
 800678e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	461a      	mov	r2, r3
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80067ae:	bf00      	nop
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
	...

080067bc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08a      	sub	sp, #40	@ 0x28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067c8:	2300      	movs	r3, #0
 80067ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <HAL_DAC_ConfigChannel+0x1c>
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e19e      	b.n	8006b1a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	795b      	ldrb	r3, [r3, #5]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d101      	bne.n	80067e8 <HAL_DAC_ConfigChannel+0x2c>
 80067e4:	2302      	movs	r3, #2
 80067e6:	e198      	b.n	8006b1a <HAL_DAC_ConfigChannel+0x35e>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2201      	movs	r2, #1
 80067ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2202      	movs	r2, #2
 80067f2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	2b04      	cmp	r3, #4
 80067fa:	d17a      	bne.n	80068f2 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80067fc:	f7fd ffdc 	bl	80047b8 <HAL_GetTick>
 8006800:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d13d      	bne.n	8006884 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006808:	e018      	b.n	800683c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800680a:	f7fd ffd5 	bl	80047b8 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	2b01      	cmp	r3, #1
 8006816:	d911      	bls.n	800683c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800681e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00a      	beq.n	800683c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	f043 0208 	orr.w	r2, r3, #8
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2203      	movs	r2, #3
 8006836:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e16e      	b.n	8006b1a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006842:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1df      	bne.n	800680a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006852:	641a      	str	r2, [r3, #64]	@ 0x40
 8006854:	e020      	b.n	8006898 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006856:	f7fd ffaf 	bl	80047b8 <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	2b01      	cmp	r3, #1
 8006862:	d90f      	bls.n	8006884 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800686a:	2b00      	cmp	r3, #0
 800686c:	da0a      	bge.n	8006884 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f043 0208 	orr.w	r2, r3, #8
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2203      	movs	r2, #3
 800687e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e14a      	b.n	8006b1a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800688a:	2b00      	cmp	r3, #0
 800688c:	dbe3      	blt.n	8006856 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006896:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f003 0310 	and.w	r3, r3, #16
 80068a4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80068a8:	fa01 f303 	lsl.w	r3, r1, r3
 80068ac:	43db      	mvns	r3, r3
 80068ae:	ea02 0103 	and.w	r1, r2, r3
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f003 0310 	and.w	r3, r3, #16
 80068bc:	409a      	lsls	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f003 0310 	and.w	r3, r3, #16
 80068d2:	21ff      	movs	r1, #255	@ 0xff
 80068d4:	fa01 f303 	lsl.w	r3, r1, r3
 80068d8:	43db      	mvns	r3, r3
 80068da:	ea02 0103 	and.w	r1, r2, r3
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f003 0310 	and.w	r3, r3, #16
 80068e8:	409a      	lsls	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d11d      	bne.n	8006936 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006900:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f003 0310 	and.w	r3, r3, #16
 8006908:	221f      	movs	r2, #31
 800690a:	fa02 f303 	lsl.w	r3, r2, r3
 800690e:	43db      	mvns	r3, r3
 8006910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006912:	4013      	ands	r3, r2
 8006914:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f003 0310 	and.w	r3, r3, #16
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	fa02 f303 	lsl.w	r3, r2, r3
 8006928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800692a:	4313      	orrs	r3, r2
 800692c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006934:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800693c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f003 0310 	and.w	r3, r3, #16
 8006944:	2207      	movs	r2, #7
 8006946:	fa02 f303 	lsl.w	r3, r2, r3
 800694a:	43db      	mvns	r3, r3
 800694c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800694e:	4013      	ands	r3, r2
 8006950:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d102      	bne.n	8006960 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800695a:	2300      	movs	r3, #0
 800695c:	623b      	str	r3, [r7, #32]
 800695e:	e00f      	b.n	8006980 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	2b02      	cmp	r3, #2
 8006966:	d102      	bne.n	800696e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006968:	2301      	movs	r3, #1
 800696a:	623b      	str	r3, [r7, #32]
 800696c:	e008      	b.n	8006980 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d102      	bne.n	800697c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006976:	2301      	movs	r3, #1
 8006978:	623b      	str	r3, [r7, #32]
 800697a:	e001      	b.n	8006980 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800697c:	2300      	movs	r3, #0
 800697e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	4313      	orrs	r3, r2
 800698a:	6a3a      	ldr	r2, [r7, #32]
 800698c:	4313      	orrs	r3, r2
 800698e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f003 0310 	and.w	r3, r3, #16
 8006996:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800699a:	fa02 f303 	lsl.w	r3, r2, r3
 800699e:	43db      	mvns	r3, r3
 80069a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069a2:	4013      	ands	r3, r2
 80069a4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	791b      	ldrb	r3, [r3, #4]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d102      	bne.n	80069b4 <HAL_DAC_ConfigChannel+0x1f8>
 80069ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80069b2:	e000      	b.n	80069b6 <HAL_DAC_ConfigChannel+0x1fa>
 80069b4:	2300      	movs	r3, #0
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f003 0310 	and.w	r3, r3, #16
 80069c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069c6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ca:	43db      	mvns	r3, r3
 80069cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069ce:	4013      	ands	r3, r2
 80069d0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	795b      	ldrb	r3, [r3, #5]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d102      	bne.n	80069e0 <HAL_DAC_ConfigChannel+0x224>
 80069da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069de:	e000      	b.n	80069e2 <HAL_DAC_ConfigChannel+0x226>
 80069e0:	2300      	movs	r3, #0
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80069e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ea:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80069ee:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d114      	bne.n	8006a22 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80069f8:	f002 ff7a 	bl	80098f0 <HAL_RCC_GetHCLKFreq>
 80069fc:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	4a48      	ldr	r2, [pc, #288]	@ (8006b24 <HAL_DAC_ConfigChannel+0x368>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d904      	bls.n	8006a10 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a0e:	e00f      	b.n	8006a30 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	4a45      	ldr	r2, [pc, #276]	@ (8006b28 <HAL_DAC_ConfigChannel+0x36c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d90a      	bls.n	8006a2e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a20:	e006      	b.n	8006a30 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a2c:	e000      	b.n	8006a30 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8006a2e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f003 0310 	and.w	r3, r3, #16
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6819      	ldr	r1, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f003 0310 	and.w	r3, r3, #16
 8006a56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5e:	43da      	mvns	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	400a      	ands	r2, r1
 8006a66:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f003 0310 	and.w	r3, r3, #16
 8006a76:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8006a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7e:	43db      	mvns	r3, r3
 8006a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a82:	4013      	ands	r3, r2
 8006a84:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f003 0310 	and.w	r3, r3, #16
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	fa02 f303 	lsl.w	r3, r2, r3
 8006a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aa4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6819      	ldr	r1, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f003 0310 	and.w	r3, r3, #16
 8006ab2:	22c0      	movs	r2, #192	@ 0xc0
 8006ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab8:	43da      	mvns	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	400a      	ands	r2, r1
 8006ac0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	089b      	lsrs	r3, r3, #2
 8006ac8:	f003 030f 	and.w	r3, r3, #15
 8006acc:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	089b      	lsrs	r3, r3, #2
 8006ad4:	021b      	lsls	r3, r3, #8
 8006ad6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f003 0310 	and.w	r3, r3, #16
 8006aec:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8006af0:	fa01 f303 	lsl.w	r3, r1, r3
 8006af4:	43db      	mvns	r3, r3
 8006af6:	ea02 0103 	and.w	r1, r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f003 0310 	and.w	r3, r3, #16
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	409a      	lsls	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006b18:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3728      	adds	r7, #40	@ 0x28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	09896800 	.word	0x09896800
 8006b28:	04c4b400 	.word	0x04c4b400

08006b2c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e08d      	b.n	8006c6e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	4b47      	ldr	r3, [pc, #284]	@ (8006c78 <HAL_DMA_Init+0x138>)
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d80f      	bhi.n	8006b7e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	461a      	mov	r2, r3
 8006b64:	4b45      	ldr	r3, [pc, #276]	@ (8006c7c <HAL_DMA_Init+0x13c>)
 8006b66:	4413      	add	r3, r2
 8006b68:	4a45      	ldr	r2, [pc, #276]	@ (8006c80 <HAL_DMA_Init+0x140>)
 8006b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6e:	091b      	lsrs	r3, r3, #4
 8006b70:	009a      	lsls	r2, r3, #2
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a42      	ldr	r2, [pc, #264]	@ (8006c84 <HAL_DMA_Init+0x144>)
 8006b7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8006b7c:	e00e      	b.n	8006b9c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	4b40      	ldr	r3, [pc, #256]	@ (8006c88 <HAL_DMA_Init+0x148>)
 8006b86:	4413      	add	r3, r2
 8006b88:	4a3d      	ldr	r2, [pc, #244]	@ (8006c80 <HAL_DMA_Init+0x140>)
 8006b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8e:	091b      	lsrs	r3, r3, #4
 8006b90:	009a      	lsls	r2, r3, #2
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a3c      	ldr	r2, [pc, #240]	@ (8006c8c <HAL_DMA_Init+0x14c>)
 8006b9a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f9b6 	bl	8006f60 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bfc:	d102      	bne.n	8006c04 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006c18:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d010      	beq.n	8006c44 <HAL_DMA_Init+0x104>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	2b04      	cmp	r3, #4
 8006c28:	d80c      	bhi.n	8006c44 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f9d6 	bl	8006fdc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c34:	2200      	movs	r2, #0
 8006c36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006c40:	605a      	str	r2, [r3, #4]
 8006c42:	e008      	b.n	8006c56 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	40020407 	.word	0x40020407
 8006c7c:	bffdfff8 	.word	0xbffdfff8
 8006c80:	cccccccd 	.word	0xcccccccd
 8006c84:	40020000 	.word	0x40020000
 8006c88:	bffdfbf8 	.word	0xbffdfbf8
 8006c8c:	40020400 	.word	0x40020400

08006c90 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
 8006c9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d101      	bne.n	8006cb0 <HAL_DMA_Start_IT+0x20>
 8006cac:	2302      	movs	r3, #2
 8006cae:	e066      	b.n	8006d7e <HAL_DMA_Start_IT+0xee>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d155      	bne.n	8006d70 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0201 	bic.w	r2, r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	68b9      	ldr	r1, [r7, #8]
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 f8fb 	bl	8006ee4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d008      	beq.n	8006d08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f042 020e 	orr.w	r2, r2, #14
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	e00f      	b.n	8006d28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 0204 	bic.w	r2, r2, #4
 8006d16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f042 020a 	orr.w	r2, r2, #10
 8006d26:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d007      	beq.n	8006d46 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d44:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d007      	beq.n	8006d5e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d5c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f042 0201 	orr.w	r2, r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	e005      	b.n	8006d7c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006d78:	2302      	movs	r3, #2
 8006d7a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da2:	f003 031f 	and.w	r3, r3, #31
 8006da6:	2204      	movs	r2, #4
 8006da8:	409a      	lsls	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4013      	ands	r3, r2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d026      	beq.n	8006e00 <HAL_DMA_IRQHandler+0x7a>
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	f003 0304 	and.w	r3, r3, #4
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d021      	beq.n	8006e00 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0320 	and.w	r3, r3, #32
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d107      	bne.n	8006dda <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0204 	bic.w	r2, r2, #4
 8006dd8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dde:	f003 021f 	and.w	r2, r3, #31
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de6:	2104      	movs	r1, #4
 8006de8:	fa01 f202 	lsl.w	r2, r1, r2
 8006dec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d071      	beq.n	8006eda <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006dfe:	e06c      	b.n	8006eda <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e04:	f003 031f 	and.w	r3, r3, #31
 8006e08:	2202      	movs	r2, #2
 8006e0a:	409a      	lsls	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4013      	ands	r3, r2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d02e      	beq.n	8006e72 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d029      	beq.n	8006e72 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0320 	and.w	r3, r3, #32
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10b      	bne.n	8006e44 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f022 020a 	bic.w	r2, r2, #10
 8006e3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e48:	f003 021f 	and.w	r2, r3, #31
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e50:	2102      	movs	r1, #2
 8006e52:	fa01 f202 	lsl.w	r2, r1, r2
 8006e56:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d038      	beq.n	8006eda <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006e70:	e033      	b.n	8006eda <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e76:	f003 031f 	and.w	r3, r3, #31
 8006e7a:	2208      	movs	r2, #8
 8006e7c:	409a      	lsls	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	4013      	ands	r3, r2
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d02a      	beq.n	8006edc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f003 0308 	and.w	r3, r3, #8
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d025      	beq.n	8006edc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 020e 	bic.w	r2, r2, #14
 8006e9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ea4:	f003 021f 	and.w	r2, r3, #31
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eac:	2101      	movs	r1, #1
 8006eae:	fa01 f202 	lsl.w	r2, r1, r2
 8006eb2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d004      	beq.n	8006edc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006eda:	bf00      	nop
 8006edc:	bf00      	nop
}
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
 8006ef0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006efa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d004      	beq.n	8006f0e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006f0c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f12:	f003 021f 	and.w	r2, r3, #31
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8006f20:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	2b10      	cmp	r3, #16
 8006f30:	d108      	bne.n	8006f44 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006f42:	e007      	b.n	8006f54 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	60da      	str	r2, [r3, #12]
}
 8006f54:	bf00      	nop
 8006f56:	3714      	adds	r7, #20
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	4b16      	ldr	r3, [pc, #88]	@ (8006fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d802      	bhi.n	8006f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006f74:	4b15      	ldr	r3, [pc, #84]	@ (8006fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006f76:	617b      	str	r3, [r7, #20]
 8006f78:	e001      	b.n	8006f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006f7a:	4b15      	ldr	r3, [pc, #84]	@ (8006fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006f7c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	3b08      	subs	r3, #8
 8006f8a:	4a12      	ldr	r2, [pc, #72]	@ (8006fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f90:	091b      	lsrs	r3, r3, #4
 8006f92:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f98:	089b      	lsrs	r3, r3, #2
 8006f9a:	009a      	lsls	r2, r3, #2
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8006fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006faa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f003 031f 	and.w	r3, r3, #31
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	409a      	lsls	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006fba:	bf00      	nop
 8006fbc:	371c      	adds	r7, #28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	40020407 	.word	0x40020407
 8006fcc:	40020800 	.word	0x40020800
 8006fd0:	40020820 	.word	0x40020820
 8006fd4:	cccccccd 	.word	0xcccccccd
 8006fd8:	40020880 	.word	0x40020880

08006fdc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	4b0b      	ldr	r3, [pc, #44]	@ (800701c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a08      	ldr	r2, [pc, #32]	@ (8007020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006ffe:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	3b01      	subs	r3, #1
 8007004:	f003 031f 	and.w	r3, r3, #31
 8007008:	2201      	movs	r2, #1
 800700a:	409a      	lsls	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007010:	bf00      	nop
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr
 800701c:	1000823f 	.word	0x1000823f
 8007020:	40020940 	.word	0x40020940

08007024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800702e:	2300      	movs	r3, #0
 8007030:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007032:	e15a      	b.n	80072ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	2101      	movs	r1, #1
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	fa01 f303 	lsl.w	r3, r1, r3
 8007040:	4013      	ands	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b00      	cmp	r3, #0
 8007048:	f000 814c 	beq.w	80072e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f003 0303 	and.w	r3, r3, #3
 8007054:	2b01      	cmp	r3, #1
 8007056:	d005      	beq.n	8007064 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007060:	2b02      	cmp	r3, #2
 8007062:	d130      	bne.n	80070c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	2203      	movs	r2, #3
 8007070:	fa02 f303 	lsl.w	r3, r2, r3
 8007074:	43db      	mvns	r3, r3
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	4013      	ands	r3, r2
 800707a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	68da      	ldr	r2, [r3, #12]
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	005b      	lsls	r3, r3, #1
 8007084:	fa02 f303 	lsl.w	r3, r2, r3
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	4313      	orrs	r3, r2
 800708c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800709a:	2201      	movs	r2, #1
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	fa02 f303 	lsl.w	r3, r2, r3
 80070a2:	43db      	mvns	r3, r3
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	4013      	ands	r3, r2
 80070a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	091b      	lsrs	r3, r3, #4
 80070b0:	f003 0201 	and.w	r2, r3, #1
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	4313      	orrs	r3, r2
 80070be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f003 0303 	and.w	r3, r3, #3
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d017      	beq.n	8007102 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	2203      	movs	r2, #3
 80070de:	fa02 f303 	lsl.w	r3, r2, r3
 80070e2:	43db      	mvns	r3, r3
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	4013      	ands	r3, r2
 80070e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	689a      	ldr	r2, [r3, #8]
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	005b      	lsls	r3, r3, #1
 80070f2:	fa02 f303 	lsl.w	r3, r2, r3
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f003 0303 	and.w	r3, r3, #3
 800710a:	2b02      	cmp	r3, #2
 800710c:	d123      	bne.n	8007156 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	08da      	lsrs	r2, r3, #3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	3208      	adds	r2, #8
 8007116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	220f      	movs	r2, #15
 8007126:	fa02 f303 	lsl.w	r3, r2, r3
 800712a:	43db      	mvns	r3, r3
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	4013      	ands	r3, r2
 8007130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	691a      	ldr	r2, [r3, #16]
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f003 0307 	and.w	r3, r3, #7
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	fa02 f303 	lsl.w	r3, r2, r3
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	4313      	orrs	r3, r2
 8007146:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	08da      	lsrs	r2, r3, #3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	3208      	adds	r2, #8
 8007150:	6939      	ldr	r1, [r7, #16]
 8007152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	2203      	movs	r2, #3
 8007162:	fa02 f303 	lsl.w	r3, r2, r3
 8007166:	43db      	mvns	r3, r3
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	4013      	ands	r3, r2
 800716c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f003 0203 	and.w	r2, r3, #3
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	fa02 f303 	lsl.w	r3, r2, r3
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	4313      	orrs	r3, r2
 8007182:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 80a6 	beq.w	80072e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007198:	4b5b      	ldr	r3, [pc, #364]	@ (8007308 <HAL_GPIO_Init+0x2e4>)
 800719a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800719c:	4a5a      	ldr	r2, [pc, #360]	@ (8007308 <HAL_GPIO_Init+0x2e4>)
 800719e:	f043 0301 	orr.w	r3, r3, #1
 80071a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80071a4:	4b58      	ldr	r3, [pc, #352]	@ (8007308 <HAL_GPIO_Init+0x2e4>)
 80071a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	60bb      	str	r3, [r7, #8]
 80071ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071b0:	4a56      	ldr	r2, [pc, #344]	@ (800730c <HAL_GPIO_Init+0x2e8>)
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	089b      	lsrs	r3, r3, #2
 80071b6:	3302      	adds	r3, #2
 80071b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f003 0303 	and.w	r3, r3, #3
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	220f      	movs	r2, #15
 80071c8:	fa02 f303 	lsl.w	r3, r2, r3
 80071cc:	43db      	mvns	r3, r3
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	4013      	ands	r3, r2
 80071d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80071da:	d01f      	beq.n	800721c <HAL_GPIO_Init+0x1f8>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a4c      	ldr	r2, [pc, #304]	@ (8007310 <HAL_GPIO_Init+0x2ec>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d019      	beq.n	8007218 <HAL_GPIO_Init+0x1f4>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a4b      	ldr	r2, [pc, #300]	@ (8007314 <HAL_GPIO_Init+0x2f0>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d013      	beq.n	8007214 <HAL_GPIO_Init+0x1f0>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a4a      	ldr	r2, [pc, #296]	@ (8007318 <HAL_GPIO_Init+0x2f4>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d00d      	beq.n	8007210 <HAL_GPIO_Init+0x1ec>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a49      	ldr	r2, [pc, #292]	@ (800731c <HAL_GPIO_Init+0x2f8>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d007      	beq.n	800720c <HAL_GPIO_Init+0x1e8>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a48      	ldr	r2, [pc, #288]	@ (8007320 <HAL_GPIO_Init+0x2fc>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d101      	bne.n	8007208 <HAL_GPIO_Init+0x1e4>
 8007204:	2305      	movs	r3, #5
 8007206:	e00a      	b.n	800721e <HAL_GPIO_Init+0x1fa>
 8007208:	2306      	movs	r3, #6
 800720a:	e008      	b.n	800721e <HAL_GPIO_Init+0x1fa>
 800720c:	2304      	movs	r3, #4
 800720e:	e006      	b.n	800721e <HAL_GPIO_Init+0x1fa>
 8007210:	2303      	movs	r3, #3
 8007212:	e004      	b.n	800721e <HAL_GPIO_Init+0x1fa>
 8007214:	2302      	movs	r3, #2
 8007216:	e002      	b.n	800721e <HAL_GPIO_Init+0x1fa>
 8007218:	2301      	movs	r3, #1
 800721a:	e000      	b.n	800721e <HAL_GPIO_Init+0x1fa>
 800721c:	2300      	movs	r3, #0
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	f002 0203 	and.w	r2, r2, #3
 8007224:	0092      	lsls	r2, r2, #2
 8007226:	4093      	lsls	r3, r2
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	4313      	orrs	r3, r2
 800722c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800722e:	4937      	ldr	r1, [pc, #220]	@ (800730c <HAL_GPIO_Init+0x2e8>)
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	089b      	lsrs	r3, r3, #2
 8007234:	3302      	adds	r3, #2
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800723c:	4b39      	ldr	r3, [pc, #228]	@ (8007324 <HAL_GPIO_Init+0x300>)
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	43db      	mvns	r3, r3
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	4013      	ands	r3, r2
 800724a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	4313      	orrs	r3, r2
 800725e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007260:	4a30      	ldr	r2, [pc, #192]	@ (8007324 <HAL_GPIO_Init+0x300>)
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007266:	4b2f      	ldr	r3, [pc, #188]	@ (8007324 <HAL_GPIO_Init+0x300>)
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	43db      	mvns	r3, r3
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	4013      	ands	r3, r2
 8007274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4313      	orrs	r3, r2
 8007288:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800728a:	4a26      	ldr	r2, [pc, #152]	@ (8007324 <HAL_GPIO_Init+0x300>)
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007290:	4b24      	ldr	r3, [pc, #144]	@ (8007324 <HAL_GPIO_Init+0x300>)
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	43db      	mvns	r3, r3
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	4013      	ands	r3, r2
 800729e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80072b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007324 <HAL_GPIO_Init+0x300>)
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80072ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007324 <HAL_GPIO_Init+0x300>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	43db      	mvns	r3, r3
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	4013      	ands	r3, r2
 80072c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4313      	orrs	r3, r2
 80072dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80072de:	4a11      	ldr	r2, [pc, #68]	@ (8007324 <HAL_GPIO_Init+0x300>)
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	3301      	adds	r3, #1
 80072e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	fa22 f303 	lsr.w	r3, r2, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f47f ae9d 	bne.w	8007034 <HAL_GPIO_Init+0x10>
  }
}
 80072fa:	bf00      	nop
 80072fc:	bf00      	nop
 80072fe:	371c      	adds	r7, #28
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	40021000 	.word	0x40021000
 800730c:	40010000 	.word	0x40010000
 8007310:	48000400 	.word	0x48000400
 8007314:	48000800 	.word	0x48000800
 8007318:	48000c00 	.word	0x48000c00
 800731c:	48001000 	.word	0x48001000
 8007320:	48001400 	.word	0x48001400
 8007324:	40010400 	.word	0x40010400

08007328 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	460b      	mov	r3, r1
 8007332:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	691a      	ldr	r2, [r3, #16]
 8007338:	887b      	ldrh	r3, [r7, #2]
 800733a:	4013      	ands	r3, r2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007340:	2301      	movs	r3, #1
 8007342:	73fb      	strb	r3, [r7, #15]
 8007344:	e001      	b.n	800734a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007346:	2300      	movs	r3, #0
 8007348:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800734a:	7bfb      	ldrb	r3, [r7, #15]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	460b      	mov	r3, r1
 8007362:	807b      	strh	r3, [r7, #2]
 8007364:	4613      	mov	r3, r2
 8007366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007368:	787b      	ldrb	r3, [r7, #1]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d003      	beq.n	8007376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800736e:	887a      	ldrh	r2, [r7, #2]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007374:	e002      	b.n	800737c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007376:	887a      	ldrh	r2, [r7, #2]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	460b      	mov	r3, r1
 8007392:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800739a:	887a      	ldrh	r2, [r7, #2]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4013      	ands	r3, r2
 80073a0:	041a      	lsls	r2, r3, #16
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	43d9      	mvns	r1, r3
 80073a6:	887b      	ldrh	r3, [r7, #2]
 80073a8:	400b      	ands	r3, r1
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	619a      	str	r2, [r3, #24]
}
 80073b0:	bf00      	nop
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e0c0      	b.n	8007550 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d106      	bne.n	80073e8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f009 fa22 	bl	801082c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2203      	movs	r2, #3
 80073ec:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f005 f856 	bl	800c4a6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073fa:	2300      	movs	r3, #0
 80073fc:	73fb      	strb	r3, [r7, #15]
 80073fe:	e03e      	b.n	800747e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007400:	7bfa      	ldrb	r2, [r7, #15]
 8007402:	6879      	ldr	r1, [r7, #4]
 8007404:	4613      	mov	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4413      	add	r3, r2
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	440b      	add	r3, r1
 800740e:	3311      	adds	r3, #17
 8007410:	2201      	movs	r2, #1
 8007412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007414:	7bfa      	ldrb	r2, [r7, #15]
 8007416:	6879      	ldr	r1, [r7, #4]
 8007418:	4613      	mov	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	440b      	add	r3, r1
 8007422:	3310      	adds	r3, #16
 8007424:	7bfa      	ldrb	r2, [r7, #15]
 8007426:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007428:	7bfa      	ldrb	r2, [r7, #15]
 800742a:	6879      	ldr	r1, [r7, #4]
 800742c:	4613      	mov	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	00db      	lsls	r3, r3, #3
 8007434:	440b      	add	r3, r1
 8007436:	3313      	adds	r3, #19
 8007438:	2200      	movs	r2, #0
 800743a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800743c:	7bfa      	ldrb	r2, [r7, #15]
 800743e:	6879      	ldr	r1, [r7, #4]
 8007440:	4613      	mov	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	00db      	lsls	r3, r3, #3
 8007448:	440b      	add	r3, r1
 800744a:	3320      	adds	r3, #32
 800744c:	2200      	movs	r2, #0
 800744e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007450:	7bfa      	ldrb	r2, [r7, #15]
 8007452:	6879      	ldr	r1, [r7, #4]
 8007454:	4613      	mov	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	440b      	add	r3, r1
 800745e:	3324      	adds	r3, #36	@ 0x24
 8007460:	2200      	movs	r2, #0
 8007462:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007464:	7bfb      	ldrb	r3, [r7, #15]
 8007466:	6879      	ldr	r1, [r7, #4]
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	4613      	mov	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	00db      	lsls	r3, r3, #3
 8007472:	440b      	add	r3, r1
 8007474:	2200      	movs	r2, #0
 8007476:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007478:	7bfb      	ldrb	r3, [r7, #15]
 800747a:	3301      	adds	r3, #1
 800747c:	73fb      	strb	r3, [r7, #15]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	791b      	ldrb	r3, [r3, #4]
 8007482:	7bfa      	ldrb	r2, [r7, #15]
 8007484:	429a      	cmp	r2, r3
 8007486:	d3bb      	bcc.n	8007400 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007488:	2300      	movs	r3, #0
 800748a:	73fb      	strb	r3, [r7, #15]
 800748c:	e044      	b.n	8007518 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800748e:	7bfa      	ldrb	r2, [r7, #15]
 8007490:	6879      	ldr	r1, [r7, #4]
 8007492:	4613      	mov	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4413      	add	r3, r2
 8007498:	00db      	lsls	r3, r3, #3
 800749a:	440b      	add	r3, r1
 800749c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80074a0:	2200      	movs	r2, #0
 80074a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80074a4:	7bfa      	ldrb	r2, [r7, #15]
 80074a6:	6879      	ldr	r1, [r7, #4]
 80074a8:	4613      	mov	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	440b      	add	r3, r1
 80074b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074b6:	7bfa      	ldrb	r2, [r7, #15]
 80074b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80074ba:	7bfa      	ldrb	r2, [r7, #15]
 80074bc:	6879      	ldr	r1, [r7, #4]
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	440b      	add	r3, r1
 80074c8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80074cc:	2200      	movs	r2, #0
 80074ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80074d0:	7bfa      	ldrb	r2, [r7, #15]
 80074d2:	6879      	ldr	r1, [r7, #4]
 80074d4:	4613      	mov	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	440b      	add	r3, r1
 80074de:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80074e2:	2200      	movs	r2, #0
 80074e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80074e6:	7bfa      	ldrb	r2, [r7, #15]
 80074e8:	6879      	ldr	r1, [r7, #4]
 80074ea:	4613      	mov	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	00db      	lsls	r3, r3, #3
 80074f2:	440b      	add	r3, r1
 80074f4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80074f8:	2200      	movs	r2, #0
 80074fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80074fc:	7bfa      	ldrb	r2, [r7, #15]
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	4613      	mov	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	00db      	lsls	r3, r3, #3
 8007508:	440b      	add	r3, r1
 800750a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	3301      	adds	r3, #1
 8007516:	73fb      	strb	r3, [r7, #15]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	791b      	ldrb	r3, [r3, #4]
 800751c:	7bfa      	ldrb	r2, [r7, #15]
 800751e:	429a      	cmp	r2, r3
 8007520:	d3b5      	bcc.n	800748e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6818      	ldr	r0, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3304      	adds	r3, #4
 800752a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800752e:	f004 ffd5 	bl	800c4dc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	7a9b      	ldrb	r3, [r3, #10]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d102      	bne.n	800754e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f001 fc42 	bl	8008dd2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007566:	2b01      	cmp	r3, #1
 8007568:	d101      	bne.n	800756e <HAL_PCD_Start+0x16>
 800756a:	2302      	movs	r3, #2
 800756c:	e012      	b.n	8007594 <HAL_PCD_Start+0x3c>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4618      	mov	r0, r3
 800757c:	f004 ff7c 	bl	800c478 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4618      	mov	r0, r3
 8007586:	f007 fa3d 	bl	800ea04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f007 fa42 	bl	800ea32 <USB_ReadInterrupts>
 80075ae:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d003      	beq.n	80075c2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fb06 	bl	8007bcc <PCD_EP_ISR_Handler>

    return;
 80075c0:	e110      	b.n	80077e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d013      	beq.n	80075f4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075de:	b292      	uxth	r2, r2
 80075e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f009 f9b2 	bl	801094e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80075ea:	2100      	movs	r1, #0
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f8fc 	bl	80077ea <HAL_PCD_SetAddress>

    return;
 80075f2:	e0f7      	b.n	80077e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00c      	beq.n	8007618 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007606:	b29a      	uxth	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007610:	b292      	uxth	r2, r2
 8007612:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007616:	e0e5      	b.n	80077e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00c      	beq.n	800763c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800762a:	b29a      	uxth	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007634:	b292      	uxth	r2, r2
 8007636:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800763a:	e0d3      	b.n	80077e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d034      	beq.n	80076b0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800764e:	b29a      	uxth	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f022 0204 	bic.w	r2, r2, #4
 8007658:	b292      	uxth	r2, r2
 800765a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007666:	b29a      	uxth	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0208 	bic.w	r2, r2, #8
 8007670:	b292      	uxth	r2, r2
 8007672:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800767c:	2b01      	cmp	r3, #1
 800767e:	d107      	bne.n	8007690 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007688:	2100      	movs	r1, #0
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f009 fb52 	bl	8010d34 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f009 f995 	bl	80109c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800769e:	b29a      	uxth	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80076a8:	b292      	uxth	r2, r2
 80076aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80076ae:	e099      	b.n	80077e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d027      	beq.n	800770a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f042 0208 	orr.w	r2, r2, #8
 80076cc:	b292      	uxth	r2, r2
 80076ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80076da:	b29a      	uxth	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076e4:	b292      	uxth	r2, r2
 80076e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f042 0204 	orr.w	r2, r2, #4
 80076fc:	b292      	uxth	r2, r2
 80076fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f009 f942 	bl	801098c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007708:	e06c      	b.n	80077e4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007710:	2b00      	cmp	r3, #0
 8007712:	d040      	beq.n	8007796 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800771c:	b29a      	uxth	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007726:	b292      	uxth	r2, r2
 8007728:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8007732:	2b00      	cmp	r3, #0
 8007734:	d12b      	bne.n	800778e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800773e:	b29a      	uxth	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f042 0204 	orr.w	r2, r2, #4
 8007748:	b292      	uxth	r2, r2
 800774a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007756:	b29a      	uxth	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f042 0208 	orr.w	r2, r2, #8
 8007760:	b292      	uxth	r2, r2
 8007762:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007776:	b29b      	uxth	r3, r3
 8007778:	089b      	lsrs	r3, r3, #2
 800777a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007784:	2101      	movs	r1, #1
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f009 fad4 	bl	8010d34 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800778c:	e02a      	b.n	80077e4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f009 f8fc 	bl	801098c <HAL_PCD_SuspendCallback>
    return;
 8007794:	e026      	b.n	80077e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00f      	beq.n	80077c0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80077b2:	b292      	uxth	r2, r2
 80077b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f009 f8ba 	bl	8010932 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80077be:	e011      	b.n	80077e4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00c      	beq.n	80077e4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80077dc:	b292      	uxth	r2, r2
 80077de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80077e2:	bf00      	nop
  }
}
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b082      	sub	sp, #8
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	460b      	mov	r3, r1
 80077f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d101      	bne.n	8007804 <HAL_PCD_SetAddress+0x1a>
 8007800:	2302      	movs	r3, #2
 8007802:	e012      	b.n	800782a <HAL_PCD_SetAddress+0x40>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	78fa      	ldrb	r2, [r7, #3]
 8007810:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	78fa      	ldrb	r2, [r7, #3]
 8007818:	4611      	mov	r1, r2
 800781a:	4618      	mov	r0, r3
 800781c:	f007 f8de 	bl	800e9dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	4608      	mov	r0, r1
 800783c:	4611      	mov	r1, r2
 800783e:	461a      	mov	r2, r3
 8007840:	4603      	mov	r3, r0
 8007842:	70fb      	strb	r3, [r7, #3]
 8007844:	460b      	mov	r3, r1
 8007846:	803b      	strh	r3, [r7, #0]
 8007848:	4613      	mov	r3, r2
 800784a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007854:	2b00      	cmp	r3, #0
 8007856:	da0e      	bge.n	8007876 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007858:	78fb      	ldrb	r3, [r7, #3]
 800785a:	f003 0207 	and.w	r2, r3, #7
 800785e:	4613      	mov	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4413      	add	r3, r2
 8007864:	00db      	lsls	r3, r3, #3
 8007866:	3310      	adds	r3, #16
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	4413      	add	r3, r2
 800786c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	705a      	strb	r2, [r3, #1]
 8007874:	e00e      	b.n	8007894 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007876:	78fb      	ldrb	r3, [r7, #3]
 8007878:	f003 0207 	and.w	r2, r3, #7
 800787c:	4613      	mov	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	00db      	lsls	r3, r3, #3
 8007884:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	4413      	add	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007894:	78fb      	ldrb	r3, [r7, #3]
 8007896:	f003 0307 	and.w	r3, r3, #7
 800789a:	b2da      	uxtb	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80078a0:	883b      	ldrh	r3, [r7, #0]
 80078a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	78ba      	ldrb	r2, [r7, #2]
 80078ae:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80078b0:	78bb      	ldrb	r3, [r7, #2]
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d102      	bne.n	80078bc <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d101      	bne.n	80078ca <HAL_PCD_EP_Open+0x98>
 80078c6:	2302      	movs	r3, #2
 80078c8:	e00e      	b.n	80078e8 <HAL_PCD_EP_Open+0xb6>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68f9      	ldr	r1, [r7, #12]
 80078d8:	4618      	mov	r0, r3
 80078da:	f004 fe1d 	bl	800c518 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80078e6:	7afb      	ldrb	r3, [r7, #11]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	460b      	mov	r3, r1
 80078fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80078fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007900:	2b00      	cmp	r3, #0
 8007902:	da0e      	bge.n	8007922 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007904:	78fb      	ldrb	r3, [r7, #3]
 8007906:	f003 0207 	and.w	r2, r3, #7
 800790a:	4613      	mov	r3, r2
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	4413      	add	r3, r2
 8007910:	00db      	lsls	r3, r3, #3
 8007912:	3310      	adds	r3, #16
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	4413      	add	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2201      	movs	r2, #1
 800791e:	705a      	strb	r2, [r3, #1]
 8007920:	e00e      	b.n	8007940 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007922:	78fb      	ldrb	r3, [r7, #3]
 8007924:	f003 0207 	and.w	r2, r3, #7
 8007928:	4613      	mov	r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4413      	add	r3, r2
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	4413      	add	r3, r2
 8007938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007940:	78fb      	ldrb	r3, [r7, #3]
 8007942:	f003 0307 	and.w	r3, r3, #7
 8007946:	b2da      	uxtb	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007952:	2b01      	cmp	r3, #1
 8007954:	d101      	bne.n	800795a <HAL_PCD_EP_Close+0x6a>
 8007956:	2302      	movs	r3, #2
 8007958:	e00e      	b.n	8007978 <HAL_PCD_EP_Close+0x88>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68f9      	ldr	r1, [r7, #12]
 8007968:	4618      	mov	r0, r3
 800796a:	f005 f999 	bl	800cca0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	607a      	str	r2, [r7, #4]
 800798a:	603b      	str	r3, [r7, #0]
 800798c:	460b      	mov	r3, r1
 800798e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007990:	7afb      	ldrb	r3, [r7, #11]
 8007992:	f003 0207 	and.w	r2, r3, #7
 8007996:	4613      	mov	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	00db      	lsls	r3, r3, #3
 800799e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	4413      	add	r3, r2
 80079a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	2200      	movs	r2, #0
 80079b8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2200      	movs	r2, #0
 80079be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079c0:	7afb      	ldrb	r3, [r7, #11]
 80079c2:	f003 0307 	and.w	r3, r3, #7
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6979      	ldr	r1, [r7, #20]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f005 fb51 	bl	800d07a <USB_EPStartXfer>

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3718      	adds	r7, #24
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	460b      	mov	r3, r1
 80079ec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80079ee:	78fb      	ldrb	r3, [r7, #3]
 80079f0:	f003 0207 	and.w	r2, r3, #7
 80079f4:	6879      	ldr	r1, [r7, #4]
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	00db      	lsls	r3, r3, #3
 80079fe:	440b      	add	r3, r1
 8007a00:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8007a04:	681b      	ldr	r3, [r3, #0]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b086      	sub	sp, #24
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	60f8      	str	r0, [r7, #12]
 8007a1a:	607a      	str	r2, [r7, #4]
 8007a1c:	603b      	str	r3, [r7, #0]
 8007a1e:	460b      	mov	r3, r1
 8007a20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a22:	7afb      	ldrb	r3, [r7, #11]
 8007a24:	f003 0207 	and.w	r2, r3, #7
 8007a28:	4613      	mov	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	00db      	lsls	r3, r3, #3
 8007a30:	3310      	adds	r3, #16
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4413      	add	r3, r2
 8007a36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	2200      	movs	r2, #0
 8007a56:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a5e:	7afb      	ldrb	r3, [r7, #11]
 8007a60:	f003 0307 	and.w	r3, r3, #7
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6979      	ldr	r1, [r7, #20]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f005 fb02 	bl	800d07a <USB_EPStartXfer>

  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3718      	adds	r7, #24
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007a8c:	78fb      	ldrb	r3, [r7, #3]
 8007a8e:	f003 0307 	and.w	r3, r3, #7
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	7912      	ldrb	r2, [r2, #4]
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d901      	bls.n	8007a9e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e03e      	b.n	8007b1c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	da0e      	bge.n	8007ac4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007aa6:	78fb      	ldrb	r3, [r7, #3]
 8007aa8:	f003 0207 	and.w	r2, r3, #7
 8007aac:	4613      	mov	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	3310      	adds	r3, #16
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	4413      	add	r3, r2
 8007aba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	705a      	strb	r2, [r3, #1]
 8007ac2:	e00c      	b.n	8007ade <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007ac4:	78fa      	ldrb	r2, [r7, #3]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4413      	add	r3, r2
 8007acc:	00db      	lsls	r3, r3, #3
 8007ace:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ae4:	78fb      	ldrb	r3, [r7, #3]
 8007ae6:	f003 0307 	and.w	r3, r3, #7
 8007aea:	b2da      	uxtb	r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d101      	bne.n	8007afe <HAL_PCD_EP_SetStall+0x7e>
 8007afa:	2302      	movs	r3, #2
 8007afc:	e00e      	b.n	8007b1c <HAL_PCD_EP_SetStall+0x9c>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68f9      	ldr	r1, [r7, #12]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f006 fe66 	bl	800e7de <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007b30:	78fb      	ldrb	r3, [r7, #3]
 8007b32:	f003 030f 	and.w	r3, r3, #15
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	7912      	ldrb	r2, [r2, #4]
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d901      	bls.n	8007b42 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e040      	b.n	8007bc4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007b42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	da0e      	bge.n	8007b68 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b4a:	78fb      	ldrb	r3, [r7, #3]
 8007b4c:	f003 0207 	and.w	r2, r3, #7
 8007b50:	4613      	mov	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4413      	add	r3, r2
 8007b56:	00db      	lsls	r3, r3, #3
 8007b58:	3310      	adds	r3, #16
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2201      	movs	r2, #1
 8007b64:	705a      	strb	r2, [r3, #1]
 8007b66:	e00e      	b.n	8007b86 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b68:	78fb      	ldrb	r3, [r7, #3]
 8007b6a:	f003 0207 	and.w	r2, r3, #7
 8007b6e:	4613      	mov	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	4413      	add	r3, r2
 8007b74:	00db      	lsls	r3, r3, #3
 8007b76:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b8c:	78fb      	ldrb	r3, [r7, #3]
 8007b8e:	f003 0307 	and.w	r3, r3, #7
 8007b92:	b2da      	uxtb	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d101      	bne.n	8007ba6 <HAL_PCD_EP_ClrStall+0x82>
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	e00e      	b.n	8007bc4 <HAL_PCD_EP_ClrStall+0xa0>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68f9      	ldr	r1, [r7, #12]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f006 fe63 	bl	800e880 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b096      	sub	sp, #88	@ 0x58
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007bd4:	e3ad      	b.n	8008332 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007bde:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007be2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	f003 030f 	and.w	r3, r3, #15
 8007bec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8007bf0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f040 816f 	bne.w	8007ed8 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007bfa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007bfe:	f003 0310 	and.w	r3, r3, #16
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d14c      	bne.n	8007ca0 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c16:	81fb      	strh	r3, [r7, #14]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	89fb      	ldrh	r3, [r7, #14]
 8007c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	3310      	adds	r3, #16
 8007c2e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	00db      	lsls	r3, r3, #3
 8007c42:	4413      	add	r3, r2
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	6812      	ldr	r2, [r2, #0]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c56:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c5a:	695a      	ldr	r2, [r3, #20]
 8007c5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	441a      	add	r2, r3
 8007c62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c64:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007c66:	2100      	movs	r1, #0
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f008 fe48 	bl	80108fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	7b1b      	ldrb	r3, [r3, #12]
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 835c 	beq.w	8008332 <PCD_EP_ISR_Handler+0x766>
 8007c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f040 8357 	bne.w	8008332 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	7b1b      	ldrb	r3, [r3, #12]
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	731a      	strb	r2, [r3, #12]
 8007c9e:	e348      	b.n	8008332 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ca6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	881b      	ldrh	r3, [r3, #0]
 8007cae:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007cb2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007cb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d032      	beq.n	8007d24 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	461a      	mov	r2, r3
 8007cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	00db      	lsls	r3, r3, #3
 8007cd0:	4413      	add	r3, r2
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	6812      	ldr	r2, [r2, #0]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007cdc:	881b      	ldrh	r3, [r3, #0]
 8007cde:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ce4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6818      	ldr	r0, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8007cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cf2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cf6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	f006 feec 	bl	800ead6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	823b      	strh	r3, [r7, #16]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	8a3a      	ldrh	r2, [r7, #16]
 8007d14:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007d18:	b292      	uxth	r2, r2
 8007d1a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f008 fdc1 	bl	80108a4 <HAL_PCD_SetupStageCallback>
 8007d22:	e306      	b.n	8008332 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007d24:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f280 8302 	bge.w	8008332 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	83fb      	strh	r3, [r7, #30]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	8bfa      	ldrh	r2, [r7, #30]
 8007d44:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007d48:	b292      	uxth	r2, r2
 8007d4a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	461a      	mov	r2, r3
 8007d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	00db      	lsls	r3, r3, #3
 8007d5e:	4413      	add	r3, r2
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	6812      	ldr	r2, [r2, #0]
 8007d64:	4413      	add	r3, r2
 8007d66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d72:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d76:	69db      	ldr	r3, [r3, #28]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d019      	beq.n	8007db0 <PCD_EP_ISR_Handler+0x1e4>
 8007d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d7e:	695b      	ldr	r3, [r3, #20]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d015      	beq.n	8007db0 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6818      	ldr	r0, [r3, #0]
 8007d88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d8a:	6959      	ldr	r1, [r3, #20]
 8007d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d8e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d92:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	f006 fe9e 	bl	800ead6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d9c:	695a      	ldr	r2, [r3, #20]
 8007d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007da0:	69db      	ldr	r3, [r3, #28]
 8007da2:	441a      	add	r2, r3
 8007da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007da6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007da8:	2100      	movs	r1, #0
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f008 fd8c 	bl	80108c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007dba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007dbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f040 82b5 	bne.w	8008332 <PCD_EP_ISR_Handler+0x766>
 8007dc8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007dcc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007dd0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007dd4:	f000 82ad 	beq.w	8008332 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	61bb      	str	r3, [r7, #24]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	461a      	mov	r2, r3
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	4413      	add	r3, r2
 8007dee:	61bb      	str	r3, [r7, #24]
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007df6:	617b      	str	r3, [r7, #20]
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	801a      	strh	r2, [r3, #0]
 8007e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10a      	bne.n	8007e26 <PCD_EP_ISR_Handler+0x25a>
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	801a      	strh	r2, [r3, #0]
 8007e24:	e039      	b.n	8007e9a <PCD_EP_ISR_Handler+0x2ce>
 8007e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e2c:	d818      	bhi.n	8007e60 <PCD_EP_ISR_Handler+0x294>
 8007e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	085b      	lsrs	r3, r3, #1
 8007e34:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d002      	beq.n	8007e48 <PCD_EP_ISR_Handler+0x27c>
 8007e42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e44:	3301      	adds	r3, #1
 8007e46:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	029b      	lsls	r3, r3, #10
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	4313      	orrs	r3, r2
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	801a      	strh	r2, [r3, #0]
 8007e5e:	e01c      	b.n	8007e9a <PCD_EP_ISR_Handler+0x2ce>
 8007e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	095b      	lsrs	r3, r3, #5
 8007e66:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	f003 031f 	and.w	r3, r3, #31
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d102      	bne.n	8007e7a <PCD_EP_ISR_Handler+0x2ae>
 8007e74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e76:	3b01      	subs	r3, #1
 8007e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	881b      	ldrh	r3, [r3, #0]
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	029b      	lsls	r3, r3, #10
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	881b      	ldrh	r3, [r3, #0]
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eaa:	827b      	strh	r3, [r7, #18]
 8007eac:	8a7b      	ldrh	r3, [r7, #18]
 8007eae:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007eb2:	827b      	strh	r3, [r7, #18]
 8007eb4:	8a7b      	ldrh	r3, [r7, #18]
 8007eb6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007eba:	827b      	strh	r3, [r7, #18]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	8a7b      	ldrh	r3, [r7, #18]
 8007ec2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ec6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007eca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	8013      	strh	r3, [r2, #0]
 8007ed6:	e22c      	b.n	8008332 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	461a      	mov	r2, r3
 8007ede:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	881b      	ldrh	r3, [r3, #0]
 8007ee8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007eec:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f280 80f6 	bge.w	80080e2 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	461a      	mov	r2, r3
 8007efc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	881b      	ldrh	r3, [r3, #0]
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	461a      	mov	r2, r3
 8007f18:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8007f24:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007f28:	b292      	uxth	r2, r2
 8007f2a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007f2c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007f30:	4613      	mov	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	00db      	lsls	r3, r3, #3
 8007f38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	4413      	add	r3, r2
 8007f40:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f44:	7b1b      	ldrb	r3, [r3, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d123      	bne.n	8007f92 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	461a      	mov	r2, r3
 8007f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	00db      	lsls	r3, r3, #3
 8007f5c:	4413      	add	r3, r2
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	6812      	ldr	r2, [r2, #0]
 8007f62:	4413      	add	r3, r2
 8007f64:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f6e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8007f72:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f000 808e 	beq.w	8008098 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6818      	ldr	r0, [r3, #0]
 8007f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f82:	6959      	ldr	r1, [r3, #20]
 8007f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f86:	88da      	ldrh	r2, [r3, #6]
 8007f88:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007f8c:	f006 fda3 	bl	800ead6 <USB_ReadPMA>
 8007f90:	e082      	b.n	8008098 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f94:	78db      	ldrb	r3, [r3, #3]
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d10a      	bne.n	8007fb0 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007f9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f9d3 	bl	800834e <HAL_PCD_EP_DB_Receive>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8007fae:	e073      	b.n	8008098 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4413      	add	r3, r2
 8007fbe:	881b      	ldrh	r3, [r3, #0]
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fca:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	441a      	add	r2, r3
 8007fdc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8007fe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	b29b      	uxth	r3, r3
 8008006:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d022      	beq.n	8008054 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008016:	b29b      	uxth	r3, r3
 8008018:	461a      	mov	r2, r3
 800801a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	00db      	lsls	r3, r3, #3
 8008020:	4413      	add	r3, r2
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	6812      	ldr	r2, [r2, #0]
 8008026:	4413      	add	r3, r2
 8008028:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008032:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8008036:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800803a:	2b00      	cmp	r3, #0
 800803c:	d02c      	beq.n	8008098 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6818      	ldr	r0, [r3, #0]
 8008042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008044:	6959      	ldr	r1, [r3, #20]
 8008046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008048:	891a      	ldrh	r2, [r3, #8]
 800804a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800804e:	f006 fd42 	bl	800ead6 <USB_ReadPMA>
 8008052:	e021      	b.n	8008098 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800805c:	b29b      	uxth	r3, r3
 800805e:	461a      	mov	r2, r3
 8008060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	00db      	lsls	r3, r3, #3
 8008066:	4413      	add	r3, r2
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	6812      	ldr	r2, [r2, #0]
 800806c:	4413      	add	r3, r2
 800806e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008072:	881b      	ldrh	r3, [r3, #0]
 8008074:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008078:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800807c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008080:	2b00      	cmp	r3, #0
 8008082:	d009      	beq.n	8008098 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6818      	ldr	r0, [r3, #0]
 8008088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800808a:	6959      	ldr	r1, [r3, #20]
 800808c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800808e:	895a      	ldrh	r2, [r3, #10]
 8008090:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008094:	f006 fd1f 	bl	800ead6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8008098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800809a:	69da      	ldr	r2, [r3, #28]
 800809c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80080a0:	441a      	add	r2, r3
 80080a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080a4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80080a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080a8:	695a      	ldr	r2, [r3, #20]
 80080aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80080ae:	441a      	add	r2, r3
 80080b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080b2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80080b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d005      	beq.n	80080c8 <PCD_EP_ISR_Handler+0x4fc>
 80080bc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80080c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d206      	bcs.n	80080d6 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80080c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	4619      	mov	r1, r3
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f008 fbfa 	bl	80108c8 <HAL_PCD_DataOutStageCallback>
 80080d4:	e005      	b.n	80080e2 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80080dc:	4618      	mov	r0, r3
 80080de:	f004 ffcc 	bl	800d07a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80080e2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80080e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f000 8121 	beq.w	8008332 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80080f0:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80080f4:	4613      	mov	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	00db      	lsls	r3, r3, #3
 80080fc:	3310      	adds	r3, #16
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	4413      	add	r3, r2
 8008102:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	461a      	mov	r2, r3
 800810a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	881b      	ldrh	r3, [r3, #0]
 8008114:	b29b      	uxth	r3, r3
 8008116:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800811a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800811e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	441a      	add	r2, r3
 8008130:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800813c:	b29b      	uxth	r3, r3
 800813e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8008140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008142:	78db      	ldrb	r3, [r3, #3]
 8008144:	2b01      	cmp	r3, #1
 8008146:	f040 80a2 	bne.w	800828e <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 800814a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800814c:	2200      	movs	r2, #0
 800814e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8008150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008152:	7b1b      	ldrb	r3, [r3, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	f000 8093 	beq.w	8008280 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800815a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800815e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008162:	2b00      	cmp	r3, #0
 8008164:	d046      	beq.n	80081f4 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008168:	785b      	ldrb	r3, [r3, #1]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d126      	bne.n	80081bc <PCD_EP_ISR_Handler+0x5f0>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	627b      	str	r3, [r7, #36]	@ 0x24
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800817c:	b29b      	uxth	r3, r3
 800817e:	461a      	mov	r2, r3
 8008180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008182:	4413      	add	r3, r2
 8008184:	627b      	str	r3, [r7, #36]	@ 0x24
 8008186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	00da      	lsls	r2, r3, #3
 800818c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818e:	4413      	add	r3, r2
 8008190:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008194:	623b      	str	r3, [r7, #32]
 8008196:	6a3b      	ldr	r3, [r7, #32]
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	b29b      	uxth	r3, r3
 800819c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	6a3b      	ldr	r3, [r7, #32]
 80081a4:	801a      	strh	r2, [r3, #0]
 80081a6:	6a3b      	ldr	r3, [r7, #32]
 80081a8:	881b      	ldrh	r3, [r3, #0]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	801a      	strh	r2, [r3, #0]
 80081ba:	e061      	b.n	8008280 <PCD_EP_ISR_Handler+0x6b4>
 80081bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081be:	785b      	ldrb	r3, [r3, #1]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d15d      	bne.n	8008280 <PCD_EP_ISR_Handler+0x6b4>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	461a      	mov	r2, r3
 80081d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d8:	4413      	add	r3, r2
 80081da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	00da      	lsls	r2, r3, #3
 80081e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e4:	4413      	add	r3, r2
 80081e6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80081ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ee:	2200      	movs	r2, #0
 80081f0:	801a      	strh	r2, [r3, #0]
 80081f2:	e045      	b.n	8008280 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081fc:	785b      	ldrb	r3, [r3, #1]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d126      	bne.n	8008250 <PCD_EP_ISR_Handler+0x684>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	637b      	str	r3, [r7, #52]	@ 0x34
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008210:	b29b      	uxth	r3, r3
 8008212:	461a      	mov	r2, r3
 8008214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008216:	4413      	add	r3, r2
 8008218:	637b      	str	r3, [r7, #52]	@ 0x34
 800821a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	00da      	lsls	r2, r3, #3
 8008220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008222:	4413      	add	r3, r2
 8008224:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008228:	633b      	str	r3, [r7, #48]	@ 0x30
 800822a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	b29b      	uxth	r3, r3
 8008230:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008234:	b29a      	uxth	r2, r3
 8008236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008238:	801a      	strh	r2, [r3, #0]
 800823a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823c:	881b      	ldrh	r3, [r3, #0]
 800823e:	b29b      	uxth	r3, r3
 8008240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008248:	b29a      	uxth	r2, r3
 800824a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824c:	801a      	strh	r2, [r3, #0]
 800824e:	e017      	b.n	8008280 <PCD_EP_ISR_Handler+0x6b4>
 8008250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008252:	785b      	ldrb	r3, [r3, #1]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d113      	bne.n	8008280 <PCD_EP_ISR_Handler+0x6b4>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008260:	b29b      	uxth	r3, r3
 8008262:	461a      	mov	r2, r3
 8008264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008266:	4413      	add	r3, r2
 8008268:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800826a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	00da      	lsls	r2, r3, #3
 8008270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008272:	4413      	add	r3, r2
 8008274:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008278:	63bb      	str	r3, [r7, #56]	@ 0x38
 800827a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827c:	2200      	movs	r2, #0
 800827e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f008 fb39 	bl	80108fe <HAL_PCD_DataInStageCallback>
 800828c:	e051      	b.n	8008332 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800828e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008296:	2b00      	cmp	r3, #0
 8008298:	d144      	bne.n	8008324 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	461a      	mov	r2, r3
 80082a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	00db      	lsls	r3, r3, #3
 80082ac:	4413      	add	r3, r2
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	6812      	ldr	r2, [r2, #0]
 80082b2:	4413      	add	r3, r2
 80082b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082be:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80082c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082c4:	699a      	ldr	r2, [r3, #24]
 80082c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d907      	bls.n	80082de <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80082ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082d0:	699a      	ldr	r2, [r3, #24]
 80082d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80082d6:	1ad2      	subs	r2, r2, r3
 80082d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082da:	619a      	str	r2, [r3, #24]
 80082dc:	e002      	b.n	80082e4 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80082de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082e0:	2200      	movs	r2, #0
 80082e2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80082e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d106      	bne.n	80082fa <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80082ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f008 fb03 	bl	80108fe <HAL_PCD_DataInStageCallback>
 80082f8:	e01b      	b.n	8008332 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80082fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082fc:	695a      	ldr	r2, [r3, #20]
 80082fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008302:	441a      	add	r2, r3
 8008304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008306:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8008308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800830a:	69da      	ldr	r2, [r3, #28]
 800830c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008310:	441a      	add	r2, r3
 8008312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008314:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800831c:	4618      	mov	r0, r3
 800831e:	f004 feac 	bl	800d07a <USB_EPStartXfer>
 8008322:	e006      	b.n	8008332 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008324:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008328:	461a      	mov	r2, r3
 800832a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f917 	bl	8008560 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800833a:	b29b      	uxth	r3, r3
 800833c:	b21b      	sxth	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	f6ff ac49 	blt.w	8007bd6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3758      	adds	r7, #88	@ 0x58
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b088      	sub	sp, #32
 8008352:	af00      	add	r7, sp, #0
 8008354:	60f8      	str	r0, [r7, #12]
 8008356:	60b9      	str	r1, [r7, #8]
 8008358:	4613      	mov	r3, r2
 800835a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800835c:	88fb      	ldrh	r3, [r7, #6]
 800835e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008362:	2b00      	cmp	r3, #0
 8008364:	d07c      	beq.n	8008460 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800836e:	b29b      	uxth	r3, r3
 8008370:	461a      	mov	r2, r3
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	00db      	lsls	r3, r3, #3
 8008378:	4413      	add	r3, r2
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	6812      	ldr	r2, [r2, #0]
 800837e:	4413      	add	r3, r2
 8008380:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800838a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	699a      	ldr	r2, [r3, #24]
 8008390:	8b7b      	ldrh	r3, [r7, #26]
 8008392:	429a      	cmp	r2, r3
 8008394:	d306      	bcc.n	80083a4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	699a      	ldr	r2, [r3, #24]
 800839a:	8b7b      	ldrh	r3, [r7, #26]
 800839c:	1ad2      	subs	r2, r2, r3
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	619a      	str	r2, [r3, #24]
 80083a2:	e002      	b.n	80083aa <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2200      	movs	r2, #0
 80083a8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d123      	bne.n	80083fa <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	461a      	mov	r2, r3
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4413      	add	r3, r2
 80083c0:	881b      	ldrh	r3, [r3, #0]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083cc:	833b      	strh	r3, [r7, #24]
 80083ce:	8b3b      	ldrh	r3, [r7, #24]
 80083d0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80083d4:	833b      	strh	r3, [r7, #24]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	461a      	mov	r2, r3
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	441a      	add	r2, r3
 80083e4:	8b3b      	ldrh	r3, [r7, #24]
 80083e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80083fa:	88fb      	ldrh	r3, [r7, #6]
 80083fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008400:	2b00      	cmp	r3, #0
 8008402:	d01f      	beq.n	8008444 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	461a      	mov	r2, r3
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	881b      	ldrh	r3, [r3, #0]
 8008414:	b29b      	uxth	r3, r3
 8008416:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800841a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800841e:	82fb      	strh	r3, [r7, #22]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	461a      	mov	r2, r3
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	441a      	add	r2, r3
 800842e:	8afb      	ldrh	r3, [r7, #22]
 8008430:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008434:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008438:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800843c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008440:	b29b      	uxth	r3, r3
 8008442:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008444:	8b7b      	ldrh	r3, [r7, #26]
 8008446:	2b00      	cmp	r3, #0
 8008448:	f000 8085 	beq.w	8008556 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6818      	ldr	r0, [r3, #0]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	6959      	ldr	r1, [r3, #20]
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	891a      	ldrh	r2, [r3, #8]
 8008458:	8b7b      	ldrh	r3, [r7, #26]
 800845a:	f006 fb3c 	bl	800ead6 <USB_ReadPMA>
 800845e:	e07a      	b.n	8008556 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008468:	b29b      	uxth	r3, r3
 800846a:	461a      	mov	r2, r3
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	00db      	lsls	r3, r3, #3
 8008472:	4413      	add	r3, r2
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	6812      	ldr	r2, [r2, #0]
 8008478:	4413      	add	r3, r2
 800847a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800847e:	881b      	ldrh	r3, [r3, #0]
 8008480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008484:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	699a      	ldr	r2, [r3, #24]
 800848a:	8b7b      	ldrh	r3, [r7, #26]
 800848c:	429a      	cmp	r2, r3
 800848e:	d306      	bcc.n	800849e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	699a      	ldr	r2, [r3, #24]
 8008494:	8b7b      	ldrh	r3, [r7, #26]
 8008496:	1ad2      	subs	r2, r2, r3
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	619a      	str	r2, [r3, #24]
 800849c:	e002      	b.n	80084a4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2200      	movs	r2, #0
 80084a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	699b      	ldr	r3, [r3, #24]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d123      	bne.n	80084f4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	461a      	mov	r2, r3
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	881b      	ldrh	r3, [r3, #0]
 80084bc:	b29b      	uxth	r3, r3
 80084be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084c6:	83fb      	strh	r3, [r7, #30]
 80084c8:	8bfb      	ldrh	r3, [r7, #30]
 80084ca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80084ce:	83fb      	strh	r3, [r7, #30]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	461a      	mov	r2, r3
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	441a      	add	r2, r3
 80084de:	8bfb      	ldrh	r3, [r7, #30]
 80084e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80084f4:	88fb      	ldrh	r3, [r7, #6]
 80084f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d11f      	bne.n	800853e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4413      	add	r3, r2
 800850c:	881b      	ldrh	r3, [r3, #0]
 800850e:	b29b      	uxth	r3, r3
 8008510:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008514:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008518:	83bb      	strh	r3, [r7, #28]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	441a      	add	r2, r3
 8008528:	8bbb      	ldrh	r3, [r7, #28]
 800852a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800852e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008532:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008536:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800853a:	b29b      	uxth	r3, r3
 800853c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800853e:	8b7b      	ldrh	r3, [r7, #26]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d008      	beq.n	8008556 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6818      	ldr	r0, [r3, #0]
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	6959      	ldr	r1, [r3, #20]
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	895a      	ldrh	r2, [r3, #10]
 8008550:	8b7b      	ldrh	r3, [r7, #26]
 8008552:	f006 fac0 	bl	800ead6 <USB_ReadPMA>
    }
  }

  return count;
 8008556:	8b7b      	ldrh	r3, [r7, #26]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3720      	adds	r7, #32
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b0a4      	sub	sp, #144	@ 0x90
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	4613      	mov	r3, r2
 800856c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800856e:	88fb      	ldrh	r3, [r7, #6]
 8008570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008574:	2b00      	cmp	r3, #0
 8008576:	f000 81db 	beq.w	8008930 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008582:	b29b      	uxth	r3, r3
 8008584:	461a      	mov	r2, r3
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	00db      	lsls	r3, r3, #3
 800858c:	4413      	add	r3, r2
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	6812      	ldr	r2, [r2, #0]
 8008592:	4413      	add	r3, r2
 8008594:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008598:	881b      	ldrh	r3, [r3, #0]
 800859a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800859e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	699a      	ldr	r2, [r3, #24]
 80085a6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d907      	bls.n	80085be <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	699a      	ldr	r2, [r3, #24]
 80085b2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80085b6:	1ad2      	subs	r2, r2, r3
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	619a      	str	r2, [r3, #24]
 80085bc:	e002      	b.n	80085c4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2200      	movs	r2, #0
 80085c2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	699b      	ldr	r3, [r3, #24]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f040 80b9 	bne.w	8008740 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	785b      	ldrb	r3, [r3, #1]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d126      	bne.n	8008624 <HAL_PCD_EP_DB_Transmit+0xc4>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	461a      	mov	r2, r3
 80085e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ea:	4413      	add	r3, r2
 80085ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	00da      	lsls	r2, r3, #3
 80085f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f6:	4413      	add	r3, r2
 80085f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008600:	881b      	ldrh	r3, [r3, #0]
 8008602:	b29b      	uxth	r3, r3
 8008604:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008608:	b29a      	uxth	r2, r3
 800860a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800860c:	801a      	strh	r2, [r3, #0]
 800860e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008610:	881b      	ldrh	r3, [r3, #0]
 8008612:	b29b      	uxth	r3, r3
 8008614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800861c:	b29a      	uxth	r2, r3
 800861e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008620:	801a      	strh	r2, [r3, #0]
 8008622:	e01a      	b.n	800865a <HAL_PCD_EP_DB_Transmit+0xfa>
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	785b      	ldrb	r3, [r3, #1]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d116      	bne.n	800865a <HAL_PCD_EP_DB_Transmit+0xfa>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	637b      	str	r3, [r7, #52]	@ 0x34
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800863a:	b29b      	uxth	r3, r3
 800863c:	461a      	mov	r2, r3
 800863e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008640:	4413      	add	r3, r2
 8008642:	637b      	str	r3, [r7, #52]	@ 0x34
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	00da      	lsls	r2, r3, #3
 800864a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800864c:	4413      	add	r3, r2
 800864e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008652:	633b      	str	r3, [r7, #48]	@ 0x30
 8008654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008656:	2200      	movs	r2, #0
 8008658:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	785b      	ldrb	r3, [r3, #1]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d126      	bne.n	80086b6 <HAL_PCD_EP_DB_Transmit+0x156>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	61fb      	str	r3, [r7, #28]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008676:	b29b      	uxth	r3, r3
 8008678:	461a      	mov	r2, r3
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	4413      	add	r3, r2
 800867e:	61fb      	str	r3, [r7, #28]
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	00da      	lsls	r2, r3, #3
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	4413      	add	r3, r2
 800868a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800868e:	61bb      	str	r3, [r7, #24]
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	881b      	ldrh	r3, [r3, #0]
 8008694:	b29b      	uxth	r3, r3
 8008696:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800869a:	b29a      	uxth	r2, r3
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	801a      	strh	r2, [r3, #0]
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	801a      	strh	r2, [r3, #0]
 80086b4:	e017      	b.n	80086e6 <HAL_PCD_EP_DB_Transmit+0x186>
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	785b      	ldrb	r3, [r3, #1]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d113      	bne.n	80086e6 <HAL_PCD_EP_DB_Transmit+0x186>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	461a      	mov	r2, r3
 80086ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086cc:	4413      	add	r3, r2
 80086ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	00da      	lsls	r2, r3, #3
 80086d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d8:	4413      	add	r3, r2
 80086da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80086de:	623b      	str	r3, [r7, #32]
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	2200      	movs	r2, #0
 80086e4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	4619      	mov	r1, r3
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f008 f906 	bl	80108fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80086f2:	88fb      	ldrh	r3, [r7, #6]
 80086f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 82fa 	beq.w	8008cf2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	461a      	mov	r2, r3
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	881b      	ldrh	r3, [r3, #0]
 800870e:	b29b      	uxth	r3, r3
 8008710:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008718:	82fb      	strh	r3, [r7, #22]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	461a      	mov	r2, r3
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	441a      	add	r2, r3
 8008728:	8afb      	ldrh	r3, [r7, #22]
 800872a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800872e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008732:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800873a:	b29b      	uxth	r3, r3
 800873c:	8013      	strh	r3, [r2, #0]
 800873e:	e2d8      	b.n	8008cf2 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008740:	88fb      	ldrh	r3, [r7, #6]
 8008742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008746:	2b00      	cmp	r3, #0
 8008748:	d021      	beq.n	800878e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	b29b      	uxth	r3, r3
 800875c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008764:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	461a      	mov	r2, r3
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	441a      	add	r2, r3
 8008776:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800877a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800877e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008782:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800878a:	b29b      	uxth	r3, r3
 800878c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008794:	2b01      	cmp	r3, #1
 8008796:	f040 82ac 	bne.w	8008cf2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	695a      	ldr	r2, [r3, #20]
 800879e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80087a2:	441a      	add	r2, r3
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	69da      	ldr	r2, [r3, #28]
 80087ac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80087b0:	441a      	add	r2, r3
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	6a1a      	ldr	r2, [r3, #32]
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d30b      	bcc.n	80087da <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	6a1a      	ldr	r2, [r3, #32]
 80087ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087d2:	1ad2      	subs	r2, r2, r3
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	621a      	str	r2, [r3, #32]
 80087d8:	e017      	b.n	800880a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d108      	bne.n	80087f4 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80087e2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80087e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80087f2:	e00a      	b.n	800880a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	6a1b      	ldr	r3, [r3, #32]
 8008800:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2200      	movs	r2, #0
 8008808:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	785b      	ldrb	r3, [r3, #1]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d165      	bne.n	80088de <HAL_PCD_EP_DB_Transmit+0x37e>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008820:	b29b      	uxth	r3, r3
 8008822:	461a      	mov	r2, r3
 8008824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008826:	4413      	add	r3, r2
 8008828:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	00da      	lsls	r2, r3, #3
 8008830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008832:	4413      	add	r3, r2
 8008834:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008838:	63bb      	str	r3, [r7, #56]	@ 0x38
 800883a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800883c:	881b      	ldrh	r3, [r3, #0]
 800883e:	b29b      	uxth	r3, r3
 8008840:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008844:	b29a      	uxth	r2, r3
 8008846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008848:	801a      	strh	r2, [r3, #0]
 800884a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10a      	bne.n	8008868 <HAL_PCD_EP_DB_Transmit+0x308>
 8008852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	b29b      	uxth	r3, r3
 8008858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800885c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008860:	b29a      	uxth	r2, r3
 8008862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008864:	801a      	strh	r2, [r3, #0]
 8008866:	e057      	b.n	8008918 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008868:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800886c:	2b3e      	cmp	r3, #62	@ 0x3e
 800886e:	d818      	bhi.n	80088a2 <HAL_PCD_EP_DB_Transmit+0x342>
 8008870:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008874:	085b      	lsrs	r3, r3, #1
 8008876:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008878:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800887c:	f003 0301 	and.w	r3, r3, #1
 8008880:	2b00      	cmp	r3, #0
 8008882:	d002      	beq.n	800888a <HAL_PCD_EP_DB_Transmit+0x32a>
 8008884:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008886:	3301      	adds	r3, #1
 8008888:	64bb      	str	r3, [r7, #72]	@ 0x48
 800888a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	b29a      	uxth	r2, r3
 8008890:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008892:	b29b      	uxth	r3, r3
 8008894:	029b      	lsls	r3, r3, #10
 8008896:	b29b      	uxth	r3, r3
 8008898:	4313      	orrs	r3, r2
 800889a:	b29a      	uxth	r2, r3
 800889c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889e:	801a      	strh	r2, [r3, #0]
 80088a0:	e03a      	b.n	8008918 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80088a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088a6:	095b      	lsrs	r3, r3, #5
 80088a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088ae:	f003 031f 	and.w	r3, r3, #31
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d102      	bne.n	80088bc <HAL_PCD_EP_DB_Transmit+0x35c>
 80088b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088b8:	3b01      	subs	r3, #1
 80088ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088be:	881b      	ldrh	r3, [r3, #0]
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	029b      	lsls	r3, r3, #10
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	4313      	orrs	r3, r2
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088da:	801a      	strh	r2, [r3, #0]
 80088dc:	e01c      	b.n	8008918 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	785b      	ldrb	r3, [r3, #1]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d118      	bne.n	8008918 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	461a      	mov	r2, r3
 80088f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088fa:	4413      	add	r3, r2
 80088fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	00da      	lsls	r2, r3, #3
 8008904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008906:	4413      	add	r3, r2
 8008908:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800890c:	643b      	str	r3, [r7, #64]	@ 0x40
 800890e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008912:	b29a      	uxth	r2, r3
 8008914:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008916:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6818      	ldr	r0, [r3, #0]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	6959      	ldr	r1, [r3, #20]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	891a      	ldrh	r2, [r3, #8]
 8008924:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008928:	b29b      	uxth	r3, r3
 800892a:	f006 f892 	bl	800ea52 <USB_WritePMA>
 800892e:	e1e0      	b.n	8008cf2 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008938:	b29b      	uxth	r3, r3
 800893a:	461a      	mov	r2, r3
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	00db      	lsls	r3, r3, #3
 8008942:	4413      	add	r3, r2
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	6812      	ldr	r2, [r2, #0]
 8008948:	4413      	add	r3, r2
 800894a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800894e:	881b      	ldrh	r3, [r3, #0]
 8008950:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008954:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	699a      	ldr	r2, [r3, #24]
 800895c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008960:	429a      	cmp	r2, r3
 8008962:	d307      	bcc.n	8008974 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	699a      	ldr	r2, [r3, #24]
 8008968:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800896c:	1ad2      	subs	r2, r2, r3
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	619a      	str	r2, [r3, #24]
 8008972:	e002      	b.n	800897a <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	2200      	movs	r2, #0
 8008978:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	2b00      	cmp	r3, #0
 8008980:	f040 80c0 	bne.w	8008b04 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	785b      	ldrb	r3, [r3, #1]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d126      	bne.n	80089da <HAL_PCD_EP_DB_Transmit+0x47a>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800899a:	b29b      	uxth	r3, r3
 800899c:	461a      	mov	r2, r3
 800899e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80089a0:	4413      	add	r3, r2
 80089a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	00da      	lsls	r2, r3, #3
 80089aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80089ac:	4413      	add	r3, r2
 80089ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80089b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80089b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089b6:	881b      	ldrh	r3, [r3, #0]
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089be:	b29a      	uxth	r2, r3
 80089c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089c2:	801a      	strh	r2, [r3, #0]
 80089c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089c6:	881b      	ldrh	r3, [r3, #0]
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089d6:	801a      	strh	r2, [r3, #0]
 80089d8:	e01a      	b.n	8008a10 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	785b      	ldrb	r3, [r3, #1]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d116      	bne.n	8008a10 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	461a      	mov	r2, r3
 80089f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089f6:	4413      	add	r3, r2
 80089f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	00da      	lsls	r2, r3, #3
 8008a00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a02:	4413      	add	r3, r2
 8008a04:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a08:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	785b      	ldrb	r3, [r3, #1]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d12b      	bne.n	8008a76 <HAL_PCD_EP_DB_Transmit+0x516>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	461a      	mov	r2, r3
 8008a30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a32:	4413      	add	r3, r2
 8008a34:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	00da      	lsls	r2, r3, #3
 8008a3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a3e:	4413      	add	r3, r2
 8008a40:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008a44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008a48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a5a:	801a      	strh	r2, [r3, #0]
 8008a5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a60:	881b      	ldrh	r3, [r3, #0]
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a72:	801a      	strh	r2, [r3, #0]
 8008a74:	e017      	b.n	8008aa6 <HAL_PCD_EP_DB_Transmit+0x546>
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	785b      	ldrb	r3, [r3, #1]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d113      	bne.n	8008aa6 <HAL_PCD_EP_DB_Transmit+0x546>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	461a      	mov	r2, r3
 8008a8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a8c:	4413      	add	r3, r2
 8008a8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	00da      	lsls	r2, r3, #3
 8008a96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a98:	4413      	add	r3, r2
 8008a9a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008a9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008aa0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	4619      	mov	r1, r3
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f007 ff26 	bl	80108fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008ab2:	88fb      	ldrh	r3, [r7, #6]
 8008ab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f040 811a 	bne.w	8008cf2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	881b      	ldrh	r3, [r3, #0]
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ad4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ad8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	441a      	add	r2, r3
 8008aea:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8008aee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008af2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008af6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	8013      	strh	r3, [r2, #0]
 8008b02:	e0f6      	b.n	8008cf2 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008b04:	88fb      	ldrh	r3, [r7, #6]
 8008b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d121      	bne.n	8008b52 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	461a      	mov	r2, r3
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b28:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	461a      	mov	r2, r3
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	441a      	add	r2, r3
 8008b3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008b3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	f040 80ca 	bne.w	8008cf2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	695a      	ldr	r2, [r3, #20]
 8008b62:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008b66:	441a      	add	r2, r3
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	69da      	ldr	r2, [r3, #28]
 8008b70:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008b74:	441a      	add	r2, r3
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	6a1a      	ldr	r2, [r3, #32]
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d30b      	bcc.n	8008b9e <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	6a1a      	ldr	r2, [r3, #32]
 8008b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b96:	1ad2      	subs	r2, r2, r3
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	621a      	str	r2, [r3, #32]
 8008b9c:	e017      	b.n	8008bce <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d108      	bne.n	8008bb8 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8008ba6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008baa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8008bb6:	e00a      	b.n	8008bce <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	6a1b      	ldr	r3, [r3, #32]
 8008bbc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	785b      	ldrb	r3, [r3, #1]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d165      	bne.n	8008ca8 <HAL_PCD_EP_DB_Transmit+0x748>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	461a      	mov	r2, r3
 8008bee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bf0:	4413      	add	r3, r2
 8008bf2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	00da      	lsls	r2, r3, #3
 8008bfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008c02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c12:	801a      	strh	r2, [r3, #0]
 8008c14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d10a      	bne.n	8008c32 <HAL_PCD_EP_DB_Transmit+0x6d2>
 8008c1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c1e:	881b      	ldrh	r3, [r3, #0]
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c2e:	801a      	strh	r2, [r3, #0]
 8008c30:	e054      	b.n	8008cdc <HAL_PCD_EP_DB_Transmit+0x77c>
 8008c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c36:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c38:	d818      	bhi.n	8008c6c <HAL_PCD_EP_DB_Transmit+0x70c>
 8008c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c3e:	085b      	lsrs	r3, r3, #1
 8008c40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c46:	f003 0301 	and.w	r3, r3, #1
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d002      	beq.n	8008c54 <HAL_PCD_EP_DB_Transmit+0x6f4>
 8008c4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c50:	3301      	adds	r3, #1
 8008c52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	029b      	lsls	r3, r3, #10
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	4313      	orrs	r3, r2
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c68:	801a      	strh	r2, [r3, #0]
 8008c6a:	e037      	b.n	8008cdc <HAL_PCD_EP_DB_Transmit+0x77c>
 8008c6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c70:	095b      	lsrs	r3, r3, #5
 8008c72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c78:	f003 031f 	and.w	r3, r3, #31
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d102      	bne.n	8008c86 <HAL_PCD_EP_DB_Transmit+0x726>
 8008c80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c82:	3b01      	subs	r3, #1
 8008c84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c88:	881b      	ldrh	r3, [r3, #0]
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	029b      	lsls	r3, r3, #10
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	4313      	orrs	r3, r2
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008ca4:	801a      	strh	r2, [r3, #0]
 8008ca6:	e019      	b.n	8008cdc <HAL_PCD_EP_DB_Transmit+0x77c>
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	785b      	ldrb	r3, [r3, #1]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d115      	bne.n	8008cdc <HAL_PCD_EP_DB_Transmit+0x77c>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	461a      	mov	r2, r3
 8008cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cbe:	4413      	add	r3, r2
 8008cc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	00da      	lsls	r2, r3, #3
 8008cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cca:	4413      	add	r3, r2
 8008ccc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008cd0:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cda:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6818      	ldr	r0, [r3, #0]
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	6959      	ldr	r1, [r3, #20]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	895a      	ldrh	r2, [r3, #10]
 8008ce8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	f005 feb0 	bl	800ea52 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	4413      	add	r3, r2
 8008d00:	881b      	ldrh	r3, [r3, #0]
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d0c:	82bb      	strh	r3, [r7, #20]
 8008d0e:	8abb      	ldrh	r3, [r7, #20]
 8008d10:	f083 0310 	eor.w	r3, r3, #16
 8008d14:	82bb      	strh	r3, [r7, #20]
 8008d16:	8abb      	ldrh	r3, [r7, #20]
 8008d18:	f083 0320 	eor.w	r3, r3, #32
 8008d1c:	82bb      	strh	r3, [r7, #20]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	461a      	mov	r2, r3
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	441a      	add	r2, r3
 8008d2c:	8abb      	ldrh	r3, [r7, #20]
 8008d2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3790      	adds	r7, #144	@ 0x90
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b087      	sub	sp, #28
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	607b      	str	r3, [r7, #4]
 8008d56:	460b      	mov	r3, r1
 8008d58:	817b      	strh	r3, [r7, #10]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008d5e:	897b      	ldrh	r3, [r7, #10]
 8008d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00b      	beq.n	8008d82 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d6a:	897b      	ldrh	r3, [r7, #10]
 8008d6c:	f003 0207 	and.w	r2, r3, #7
 8008d70:	4613      	mov	r3, r2
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	4413      	add	r3, r2
 8008d76:	00db      	lsls	r3, r3, #3
 8008d78:	3310      	adds	r3, #16
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	617b      	str	r3, [r7, #20]
 8008d80:	e009      	b.n	8008d96 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008d82:	897a      	ldrh	r2, [r7, #10]
 8008d84:	4613      	mov	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	00db      	lsls	r3, r3, #3
 8008d8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	4413      	add	r3, r2
 8008d94:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008d96:	893b      	ldrh	r3, [r7, #8]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d107      	bne.n	8008dac <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	80da      	strh	r2, [r3, #6]
 8008daa:	e00b      	b.n	8008dc4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	2201      	movs	r2, #1
 8008db0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	0c1b      	lsrs	r3, r3, #16
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	371c      	adds	r7, #28
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b085      	sub	sp, #20
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	f043 0301 	orr.w	r3, r3, #1
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	f043 0302 	orr.w	r3, r3, #2
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3714      	adds	r7, #20
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
	...

08008e28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d141      	bne.n	8008eba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008e36:	4b4b      	ldr	r3, [pc, #300]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e42:	d131      	bne.n	8008ea8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008e44:	4b47      	ldr	r3, [pc, #284]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e4a:	4a46      	ldr	r2, [pc, #280]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008e54:	4b43      	ldr	r3, [pc, #268]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008e5c:	4a41      	ldr	r2, [pc, #260]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008e62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008e64:	4b40      	ldr	r3, [pc, #256]	@ (8008f68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2232      	movs	r2, #50	@ 0x32
 8008e6a:	fb02 f303 	mul.w	r3, r2, r3
 8008e6e:	4a3f      	ldr	r2, [pc, #252]	@ (8008f6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008e70:	fba2 2303 	umull	r2, r3, r2, r3
 8008e74:	0c9b      	lsrs	r3, r3, #18
 8008e76:	3301      	adds	r3, #1
 8008e78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e7a:	e002      	b.n	8008e82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e82:	4b38      	ldr	r3, [pc, #224]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e8e:	d102      	bne.n	8008e96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1f2      	bne.n	8008e7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008e96:	4b33      	ldr	r3, [pc, #204]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ea2:	d158      	bne.n	8008f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e057      	b.n	8008f58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eae:	4a2d      	ldr	r2, [pc, #180]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008eb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008eb8:	e04d      	b.n	8008f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ec0:	d141      	bne.n	8008f46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008ec2:	4b28      	ldr	r3, [pc, #160]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ece:	d131      	bne.n	8008f34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ed0:	4b24      	ldr	r3, [pc, #144]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ed6:	4a23      	ldr	r2, [pc, #140]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008edc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008ee0:	4b20      	ldr	r3, [pc, #128]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008eee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8008f68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2232      	movs	r2, #50	@ 0x32
 8008ef6:	fb02 f303 	mul.w	r3, r2, r3
 8008efa:	4a1c      	ldr	r2, [pc, #112]	@ (8008f6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008efc:	fba2 2303 	umull	r2, r3, r2, r3
 8008f00:	0c9b      	lsrs	r3, r3, #18
 8008f02:	3301      	adds	r3, #1
 8008f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f06:	e002      	b.n	8008f0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f0e:	4b15      	ldr	r3, [pc, #84]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f10:	695b      	ldr	r3, [r3, #20]
 8008f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f1a:	d102      	bne.n	8008f22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1f2      	bne.n	8008f08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008f22:	4b10      	ldr	r3, [pc, #64]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f2e:	d112      	bne.n	8008f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e011      	b.n	8008f58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f34:	4b0b      	ldr	r3, [pc, #44]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008f44:	e007      	b.n	8008f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008f46:	4b07      	ldr	r3, [pc, #28]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008f4e:	4a05      	ldr	r2, [pc, #20]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008f54:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3714      	adds	r7, #20
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	40007000 	.word	0x40007000
 8008f68:	20000054 	.word	0x20000054
 8008f6c:	431bde83 	.word	0x431bde83

08008f70 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008f70:	b480      	push	{r7}
 8008f72:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008f74:	4b05      	ldr	r3, [pc, #20]	@ (8008f8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	4a04      	ldr	r2, [pc, #16]	@ (8008f8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008f7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008f7e:	6093      	str	r3, [r2, #8]
}
 8008f80:	bf00      	nop
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	40007000 	.word	0x40007000

08008f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b088      	sub	sp, #32
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d101      	bne.n	8008fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e2fe      	b.n	80095a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 0301 	and.w	r3, r3, #1
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d075      	beq.n	800909a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fae:	4b97      	ldr	r3, [pc, #604]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	f003 030c 	and.w	r3, r3, #12
 8008fb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008fb8:	4b94      	ldr	r3, [pc, #592]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	f003 0303 	and.w	r3, r3, #3
 8008fc0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	2b0c      	cmp	r3, #12
 8008fc6:	d102      	bne.n	8008fce <HAL_RCC_OscConfig+0x3e>
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	2b03      	cmp	r3, #3
 8008fcc:	d002      	beq.n	8008fd4 <HAL_RCC_OscConfig+0x44>
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	2b08      	cmp	r3, #8
 8008fd2:	d10b      	bne.n	8008fec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fd4:	4b8d      	ldr	r3, [pc, #564]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d05b      	beq.n	8009098 <HAL_RCC_OscConfig+0x108>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d157      	bne.n	8009098 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e2d9      	b.n	80095a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ff4:	d106      	bne.n	8009004 <HAL_RCC_OscConfig+0x74>
 8008ff6:	4b85      	ldr	r3, [pc, #532]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a84      	ldr	r2, [pc, #528]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 8008ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009000:	6013      	str	r3, [r2, #0]
 8009002:	e01d      	b.n	8009040 <HAL_RCC_OscConfig+0xb0>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800900c:	d10c      	bne.n	8009028 <HAL_RCC_OscConfig+0x98>
 800900e:	4b7f      	ldr	r3, [pc, #508]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a7e      	ldr	r2, [pc, #504]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 8009014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009018:	6013      	str	r3, [r2, #0]
 800901a:	4b7c      	ldr	r3, [pc, #496]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a7b      	ldr	r2, [pc, #492]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 8009020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009024:	6013      	str	r3, [r2, #0]
 8009026:	e00b      	b.n	8009040 <HAL_RCC_OscConfig+0xb0>
 8009028:	4b78      	ldr	r3, [pc, #480]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a77      	ldr	r2, [pc, #476]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 800902e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009032:	6013      	str	r3, [r2, #0]
 8009034:	4b75      	ldr	r3, [pc, #468]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a74      	ldr	r2, [pc, #464]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 800903a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800903e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d013      	beq.n	8009070 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009048:	f7fb fbb6 	bl	80047b8 <HAL_GetTick>
 800904c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800904e:	e008      	b.n	8009062 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009050:	f7fb fbb2 	bl	80047b8 <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	2b64      	cmp	r3, #100	@ 0x64
 800905c:	d901      	bls.n	8009062 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800905e:	2303      	movs	r3, #3
 8009060:	e29e      	b.n	80095a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009062:	4b6a      	ldr	r3, [pc, #424]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d0f0      	beq.n	8009050 <HAL_RCC_OscConfig+0xc0>
 800906e:	e014      	b.n	800909a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009070:	f7fb fba2 	bl	80047b8 <HAL_GetTick>
 8009074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009076:	e008      	b.n	800908a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009078:	f7fb fb9e 	bl	80047b8 <HAL_GetTick>
 800907c:	4602      	mov	r2, r0
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	2b64      	cmp	r3, #100	@ 0x64
 8009084:	d901      	bls.n	800908a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009086:	2303      	movs	r3, #3
 8009088:	e28a      	b.n	80095a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800908a:	4b60      	ldr	r3, [pc, #384]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1f0      	bne.n	8009078 <HAL_RCC_OscConfig+0xe8>
 8009096:	e000      	b.n	800909a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0302 	and.w	r3, r3, #2
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d075      	beq.n	8009192 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090a6:	4b59      	ldr	r3, [pc, #356]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	f003 030c 	and.w	r3, r3, #12
 80090ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80090b0:	4b56      	ldr	r3, [pc, #344]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	f003 0303 	and.w	r3, r3, #3
 80090b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	2b0c      	cmp	r3, #12
 80090be:	d102      	bne.n	80090c6 <HAL_RCC_OscConfig+0x136>
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d002      	beq.n	80090cc <HAL_RCC_OscConfig+0x13c>
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	2b04      	cmp	r3, #4
 80090ca:	d11f      	bne.n	800910c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090cc:	4b4f      	ldr	r3, [pc, #316]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d005      	beq.n	80090e4 <HAL_RCC_OscConfig+0x154>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d101      	bne.n	80090e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	e25d      	b.n	80095a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090e4:	4b49      	ldr	r3, [pc, #292]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	061b      	lsls	r3, r3, #24
 80090f2:	4946      	ldr	r1, [pc, #280]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 80090f4:	4313      	orrs	r3, r2
 80090f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80090f8:	4b45      	ldr	r3, [pc, #276]	@ (8009210 <HAL_RCC_OscConfig+0x280>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7fb fb0f 	bl	8004720 <HAL_InitTick>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d043      	beq.n	8009190 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	e249      	b.n	80095a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d023      	beq.n	800915c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009114:	4b3d      	ldr	r3, [pc, #244]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a3c      	ldr	r2, [pc, #240]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 800911a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800911e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009120:	f7fb fb4a 	bl	80047b8 <HAL_GetTick>
 8009124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009126:	e008      	b.n	800913a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009128:	f7fb fb46 	bl	80047b8 <HAL_GetTick>
 800912c:	4602      	mov	r2, r0
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	2b02      	cmp	r3, #2
 8009134:	d901      	bls.n	800913a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e232      	b.n	80095a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800913a:	4b34      	ldr	r3, [pc, #208]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0f0      	beq.n	8009128 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009146:	4b31      	ldr	r3, [pc, #196]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	061b      	lsls	r3, r3, #24
 8009154:	492d      	ldr	r1, [pc, #180]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 8009156:	4313      	orrs	r3, r2
 8009158:	604b      	str	r3, [r1, #4]
 800915a:	e01a      	b.n	8009192 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800915c:	4b2b      	ldr	r3, [pc, #172]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a2a      	ldr	r2, [pc, #168]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 8009162:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009168:	f7fb fb26 	bl	80047b8 <HAL_GetTick>
 800916c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800916e:	e008      	b.n	8009182 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009170:	f7fb fb22 	bl	80047b8 <HAL_GetTick>
 8009174:	4602      	mov	r2, r0
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	2b02      	cmp	r3, #2
 800917c:	d901      	bls.n	8009182 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	e20e      	b.n	80095a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009182:	4b22      	ldr	r3, [pc, #136]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1f0      	bne.n	8009170 <HAL_RCC_OscConfig+0x1e0>
 800918e:	e000      	b.n	8009192 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009190:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0308 	and.w	r3, r3, #8
 800919a:	2b00      	cmp	r3, #0
 800919c:	d041      	beq.n	8009222 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	695b      	ldr	r3, [r3, #20]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d01c      	beq.n	80091e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091a6:	4b19      	ldr	r3, [pc, #100]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 80091a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091ac:	4a17      	ldr	r2, [pc, #92]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 80091ae:	f043 0301 	orr.w	r3, r3, #1
 80091b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091b6:	f7fb faff 	bl	80047b8 <HAL_GetTick>
 80091ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80091bc:	e008      	b.n	80091d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091be:	f7fb fafb 	bl	80047b8 <HAL_GetTick>
 80091c2:	4602      	mov	r2, r0
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d901      	bls.n	80091d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e1e7      	b.n	80095a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80091d0:	4b0e      	ldr	r3, [pc, #56]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 80091d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091d6:	f003 0302 	and.w	r3, r3, #2
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d0ef      	beq.n	80091be <HAL_RCC_OscConfig+0x22e>
 80091de:	e020      	b.n	8009222 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091e0:	4b0a      	ldr	r3, [pc, #40]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 80091e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091e6:	4a09      	ldr	r2, [pc, #36]	@ (800920c <HAL_RCC_OscConfig+0x27c>)
 80091e8:	f023 0301 	bic.w	r3, r3, #1
 80091ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091f0:	f7fb fae2 	bl	80047b8 <HAL_GetTick>
 80091f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80091f6:	e00d      	b.n	8009214 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091f8:	f7fb fade 	bl	80047b8 <HAL_GetTick>
 80091fc:	4602      	mov	r2, r0
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	2b02      	cmp	r3, #2
 8009204:	d906      	bls.n	8009214 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009206:	2303      	movs	r3, #3
 8009208:	e1ca      	b.n	80095a0 <HAL_RCC_OscConfig+0x610>
 800920a:	bf00      	nop
 800920c:	40021000 	.word	0x40021000
 8009210:	20000058 	.word	0x20000058
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009214:	4b8c      	ldr	r3, [pc, #560]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 8009216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800921a:	f003 0302 	and.w	r3, r3, #2
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1ea      	bne.n	80091f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0304 	and.w	r3, r3, #4
 800922a:	2b00      	cmp	r3, #0
 800922c:	f000 80a6 	beq.w	800937c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009230:	2300      	movs	r3, #0
 8009232:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009234:	4b84      	ldr	r3, [pc, #528]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 8009236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d101      	bne.n	8009244 <HAL_RCC_OscConfig+0x2b4>
 8009240:	2301      	movs	r3, #1
 8009242:	e000      	b.n	8009246 <HAL_RCC_OscConfig+0x2b6>
 8009244:	2300      	movs	r3, #0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00d      	beq.n	8009266 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800924a:	4b7f      	ldr	r3, [pc, #508]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 800924c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800924e:	4a7e      	ldr	r2, [pc, #504]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 8009250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009254:	6593      	str	r3, [r2, #88]	@ 0x58
 8009256:	4b7c      	ldr	r3, [pc, #496]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 8009258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800925a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800925e:	60fb      	str	r3, [r7, #12]
 8009260:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009262:	2301      	movs	r3, #1
 8009264:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009266:	4b79      	ldr	r3, [pc, #484]	@ (800944c <HAL_RCC_OscConfig+0x4bc>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800926e:	2b00      	cmp	r3, #0
 8009270:	d118      	bne.n	80092a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009272:	4b76      	ldr	r3, [pc, #472]	@ (800944c <HAL_RCC_OscConfig+0x4bc>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a75      	ldr	r2, [pc, #468]	@ (800944c <HAL_RCC_OscConfig+0x4bc>)
 8009278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800927c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800927e:	f7fb fa9b 	bl	80047b8 <HAL_GetTick>
 8009282:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009284:	e008      	b.n	8009298 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009286:	f7fb fa97 	bl	80047b8 <HAL_GetTick>
 800928a:	4602      	mov	r2, r0
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	2b02      	cmp	r3, #2
 8009292:	d901      	bls.n	8009298 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e183      	b.n	80095a0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009298:	4b6c      	ldr	r3, [pc, #432]	@ (800944c <HAL_RCC_OscConfig+0x4bc>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d0f0      	beq.n	8009286 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d108      	bne.n	80092be <HAL_RCC_OscConfig+0x32e>
 80092ac:	4b66      	ldr	r3, [pc, #408]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 80092ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092b2:	4a65      	ldr	r2, [pc, #404]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 80092b4:	f043 0301 	orr.w	r3, r3, #1
 80092b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80092bc:	e024      	b.n	8009308 <HAL_RCC_OscConfig+0x378>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	2b05      	cmp	r3, #5
 80092c4:	d110      	bne.n	80092e8 <HAL_RCC_OscConfig+0x358>
 80092c6:	4b60      	ldr	r3, [pc, #384]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 80092c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092cc:	4a5e      	ldr	r2, [pc, #376]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 80092ce:	f043 0304 	orr.w	r3, r3, #4
 80092d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80092d6:	4b5c      	ldr	r3, [pc, #368]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 80092d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092dc:	4a5a      	ldr	r2, [pc, #360]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 80092de:	f043 0301 	orr.w	r3, r3, #1
 80092e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80092e6:	e00f      	b.n	8009308 <HAL_RCC_OscConfig+0x378>
 80092e8:	4b57      	ldr	r3, [pc, #348]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 80092ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ee:	4a56      	ldr	r2, [pc, #344]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 80092f0:	f023 0301 	bic.w	r3, r3, #1
 80092f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80092f8:	4b53      	ldr	r3, [pc, #332]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 80092fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092fe:	4a52      	ldr	r2, [pc, #328]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 8009300:	f023 0304 	bic.w	r3, r3, #4
 8009304:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d016      	beq.n	800933e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009310:	f7fb fa52 	bl	80047b8 <HAL_GetTick>
 8009314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009316:	e00a      	b.n	800932e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009318:	f7fb fa4e 	bl	80047b8 <HAL_GetTick>
 800931c:	4602      	mov	r2, r0
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009326:	4293      	cmp	r3, r2
 8009328:	d901      	bls.n	800932e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e138      	b.n	80095a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800932e:	4b46      	ldr	r3, [pc, #280]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 8009330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009334:	f003 0302 	and.w	r3, r3, #2
 8009338:	2b00      	cmp	r3, #0
 800933a:	d0ed      	beq.n	8009318 <HAL_RCC_OscConfig+0x388>
 800933c:	e015      	b.n	800936a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800933e:	f7fb fa3b 	bl	80047b8 <HAL_GetTick>
 8009342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009344:	e00a      	b.n	800935c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009346:	f7fb fa37 	bl	80047b8 <HAL_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009354:	4293      	cmp	r3, r2
 8009356:	d901      	bls.n	800935c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009358:	2303      	movs	r3, #3
 800935a:	e121      	b.n	80095a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800935c:	4b3a      	ldr	r3, [pc, #232]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 800935e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009362:	f003 0302 	and.w	r3, r3, #2
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1ed      	bne.n	8009346 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800936a:	7ffb      	ldrb	r3, [r7, #31]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d105      	bne.n	800937c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009370:	4b35      	ldr	r3, [pc, #212]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 8009372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009374:	4a34      	ldr	r2, [pc, #208]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 8009376:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800937a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 0320 	and.w	r3, r3, #32
 8009384:	2b00      	cmp	r3, #0
 8009386:	d03c      	beq.n	8009402 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d01c      	beq.n	80093ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009390:	4b2d      	ldr	r3, [pc, #180]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 8009392:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009396:	4a2c      	ldr	r2, [pc, #176]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 8009398:	f043 0301 	orr.w	r3, r3, #1
 800939c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093a0:	f7fb fa0a 	bl	80047b8 <HAL_GetTick>
 80093a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80093a6:	e008      	b.n	80093ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80093a8:	f7fb fa06 	bl	80047b8 <HAL_GetTick>
 80093ac:	4602      	mov	r2, r0
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d901      	bls.n	80093ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80093b6:	2303      	movs	r3, #3
 80093b8:	e0f2      	b.n	80095a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80093ba:	4b23      	ldr	r3, [pc, #140]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 80093bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80093c0:	f003 0302 	and.w	r3, r3, #2
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d0ef      	beq.n	80093a8 <HAL_RCC_OscConfig+0x418>
 80093c8:	e01b      	b.n	8009402 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80093ca:	4b1f      	ldr	r3, [pc, #124]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 80093cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80093d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 80093d2:	f023 0301 	bic.w	r3, r3, #1
 80093d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093da:	f7fb f9ed 	bl	80047b8 <HAL_GetTick>
 80093de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80093e0:	e008      	b.n	80093f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80093e2:	f7fb f9e9 	bl	80047b8 <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d901      	bls.n	80093f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e0d5      	b.n	80095a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80093f4:	4b14      	ldr	r3, [pc, #80]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 80093f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80093fa:	f003 0302 	and.w	r3, r3, #2
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1ef      	bne.n	80093e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	69db      	ldr	r3, [r3, #28]
 8009406:	2b00      	cmp	r3, #0
 8009408:	f000 80c9 	beq.w	800959e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800940c:	4b0e      	ldr	r3, [pc, #56]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	f003 030c 	and.w	r3, r3, #12
 8009414:	2b0c      	cmp	r3, #12
 8009416:	f000 8083 	beq.w	8009520 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	2b02      	cmp	r3, #2
 8009420:	d15e      	bne.n	80094e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009422:	4b09      	ldr	r3, [pc, #36]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a08      	ldr	r2, [pc, #32]	@ (8009448 <HAL_RCC_OscConfig+0x4b8>)
 8009428:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800942c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800942e:	f7fb f9c3 	bl	80047b8 <HAL_GetTick>
 8009432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009434:	e00c      	b.n	8009450 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009436:	f7fb f9bf 	bl	80047b8 <HAL_GetTick>
 800943a:	4602      	mov	r2, r0
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	1ad3      	subs	r3, r2, r3
 8009440:	2b02      	cmp	r3, #2
 8009442:	d905      	bls.n	8009450 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009444:	2303      	movs	r3, #3
 8009446:	e0ab      	b.n	80095a0 <HAL_RCC_OscConfig+0x610>
 8009448:	40021000 	.word	0x40021000
 800944c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009450:	4b55      	ldr	r3, [pc, #340]	@ (80095a8 <HAL_RCC_OscConfig+0x618>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1ec      	bne.n	8009436 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800945c:	4b52      	ldr	r3, [pc, #328]	@ (80095a8 <HAL_RCC_OscConfig+0x618>)
 800945e:	68da      	ldr	r2, [r3, #12]
 8009460:	4b52      	ldr	r3, [pc, #328]	@ (80095ac <HAL_RCC_OscConfig+0x61c>)
 8009462:	4013      	ands	r3, r2
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	6a11      	ldr	r1, [r2, #32]
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800946c:	3a01      	subs	r2, #1
 800946e:	0112      	lsls	r2, r2, #4
 8009470:	4311      	orrs	r1, r2
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009476:	0212      	lsls	r2, r2, #8
 8009478:	4311      	orrs	r1, r2
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800947e:	0852      	lsrs	r2, r2, #1
 8009480:	3a01      	subs	r2, #1
 8009482:	0552      	lsls	r2, r2, #21
 8009484:	4311      	orrs	r1, r2
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800948a:	0852      	lsrs	r2, r2, #1
 800948c:	3a01      	subs	r2, #1
 800948e:	0652      	lsls	r2, r2, #25
 8009490:	4311      	orrs	r1, r2
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009496:	06d2      	lsls	r2, r2, #27
 8009498:	430a      	orrs	r2, r1
 800949a:	4943      	ldr	r1, [pc, #268]	@ (80095a8 <HAL_RCC_OscConfig+0x618>)
 800949c:	4313      	orrs	r3, r2
 800949e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80094a0:	4b41      	ldr	r3, [pc, #260]	@ (80095a8 <HAL_RCC_OscConfig+0x618>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a40      	ldr	r2, [pc, #256]	@ (80095a8 <HAL_RCC_OscConfig+0x618>)
 80094a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80094aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80094ac:	4b3e      	ldr	r3, [pc, #248]	@ (80095a8 <HAL_RCC_OscConfig+0x618>)
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	4a3d      	ldr	r2, [pc, #244]	@ (80095a8 <HAL_RCC_OscConfig+0x618>)
 80094b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80094b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094b8:	f7fb f97e 	bl	80047b8 <HAL_GetTick>
 80094bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80094be:	e008      	b.n	80094d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094c0:	f7fb f97a 	bl	80047b8 <HAL_GetTick>
 80094c4:	4602      	mov	r2, r0
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d901      	bls.n	80094d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80094ce:	2303      	movs	r3, #3
 80094d0:	e066      	b.n	80095a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80094d2:	4b35      	ldr	r3, [pc, #212]	@ (80095a8 <HAL_RCC_OscConfig+0x618>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d0f0      	beq.n	80094c0 <HAL_RCC_OscConfig+0x530>
 80094de:	e05e      	b.n	800959e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094e0:	4b31      	ldr	r3, [pc, #196]	@ (80095a8 <HAL_RCC_OscConfig+0x618>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a30      	ldr	r2, [pc, #192]	@ (80095a8 <HAL_RCC_OscConfig+0x618>)
 80094e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094ec:	f7fb f964 	bl	80047b8 <HAL_GetTick>
 80094f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094f2:	e008      	b.n	8009506 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094f4:	f7fb f960 	bl	80047b8 <HAL_GetTick>
 80094f8:	4602      	mov	r2, r0
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	1ad3      	subs	r3, r2, r3
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d901      	bls.n	8009506 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8009502:	2303      	movs	r3, #3
 8009504:	e04c      	b.n	80095a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009506:	4b28      	ldr	r3, [pc, #160]	@ (80095a8 <HAL_RCC_OscConfig+0x618>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1f0      	bne.n	80094f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009512:	4b25      	ldr	r3, [pc, #148]	@ (80095a8 <HAL_RCC_OscConfig+0x618>)
 8009514:	68da      	ldr	r2, [r3, #12]
 8009516:	4924      	ldr	r1, [pc, #144]	@ (80095a8 <HAL_RCC_OscConfig+0x618>)
 8009518:	4b25      	ldr	r3, [pc, #148]	@ (80095b0 <HAL_RCC_OscConfig+0x620>)
 800951a:	4013      	ands	r3, r2
 800951c:	60cb      	str	r3, [r1, #12]
 800951e:	e03e      	b.n	800959e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	69db      	ldr	r3, [r3, #28]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d101      	bne.n	800952c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e039      	b.n	80095a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800952c:	4b1e      	ldr	r3, [pc, #120]	@ (80095a8 <HAL_RCC_OscConfig+0x618>)
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f003 0203 	and.w	r2, r3, #3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6a1b      	ldr	r3, [r3, #32]
 800953c:	429a      	cmp	r2, r3
 800953e:	d12c      	bne.n	800959a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800954a:	3b01      	subs	r3, #1
 800954c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800954e:	429a      	cmp	r2, r3
 8009550:	d123      	bne.n	800959a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800955c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800955e:	429a      	cmp	r2, r3
 8009560:	d11b      	bne.n	800959a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800956c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800956e:	429a      	cmp	r2, r3
 8009570:	d113      	bne.n	800959a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800957c:	085b      	lsrs	r3, r3, #1
 800957e:	3b01      	subs	r3, #1
 8009580:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009582:	429a      	cmp	r2, r3
 8009584:	d109      	bne.n	800959a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009590:	085b      	lsrs	r3, r3, #1
 8009592:	3b01      	subs	r3, #1
 8009594:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009596:	429a      	cmp	r2, r3
 8009598:	d001      	beq.n	800959e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	e000      	b.n	80095a0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3720      	adds	r7, #32
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	40021000 	.word	0x40021000
 80095ac:	019f800c 	.word	0x019f800c
 80095b0:	feeefffc 	.word	0xfeeefffc

080095b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b086      	sub	sp, #24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80095be:	2300      	movs	r3, #0
 80095c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80095c8:	2301      	movs	r3, #1
 80095ca:	e11e      	b.n	800980a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80095cc:	4b91      	ldr	r3, [pc, #580]	@ (8009814 <HAL_RCC_ClockConfig+0x260>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f003 030f 	and.w	r3, r3, #15
 80095d4:	683a      	ldr	r2, [r7, #0]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d910      	bls.n	80095fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095da:	4b8e      	ldr	r3, [pc, #568]	@ (8009814 <HAL_RCC_ClockConfig+0x260>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f023 020f 	bic.w	r2, r3, #15
 80095e2:	498c      	ldr	r1, [pc, #560]	@ (8009814 <HAL_RCC_ClockConfig+0x260>)
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095ea:	4b8a      	ldr	r3, [pc, #552]	@ (8009814 <HAL_RCC_ClockConfig+0x260>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 030f 	and.w	r3, r3, #15
 80095f2:	683a      	ldr	r2, [r7, #0]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d001      	beq.n	80095fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e106      	b.n	800980a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f003 0301 	and.w	r3, r3, #1
 8009604:	2b00      	cmp	r3, #0
 8009606:	d073      	beq.n	80096f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	2b03      	cmp	r3, #3
 800960e:	d129      	bne.n	8009664 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009610:	4b81      	ldr	r3, [pc, #516]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009618:	2b00      	cmp	r3, #0
 800961a:	d101      	bne.n	8009620 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	e0f4      	b.n	800980a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009620:	f000 f99e 	bl	8009960 <RCC_GetSysClockFreqFromPLLSource>
 8009624:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	4a7c      	ldr	r2, [pc, #496]	@ (800981c <HAL_RCC_ClockConfig+0x268>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d93f      	bls.n	80096ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800962e:	4b7a      	ldr	r3, [pc, #488]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d009      	beq.n	800964e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009642:	2b00      	cmp	r3, #0
 8009644:	d033      	beq.n	80096ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800964a:	2b00      	cmp	r3, #0
 800964c:	d12f      	bne.n	80096ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800964e:	4b72      	ldr	r3, [pc, #456]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009656:	4a70      	ldr	r2, [pc, #448]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 8009658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800965c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800965e:	2380      	movs	r3, #128	@ 0x80
 8009660:	617b      	str	r3, [r7, #20]
 8009662:	e024      	b.n	80096ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	2b02      	cmp	r3, #2
 800966a:	d107      	bne.n	800967c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800966c:	4b6a      	ldr	r3, [pc, #424]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d109      	bne.n	800968c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	e0c6      	b.n	800980a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800967c:	4b66      	ldr	r3, [pc, #408]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009684:	2b00      	cmp	r3, #0
 8009686:	d101      	bne.n	800968c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e0be      	b.n	800980a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800968c:	f000 f8ce 	bl	800982c <HAL_RCC_GetSysClockFreq>
 8009690:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	4a61      	ldr	r2, [pc, #388]	@ (800981c <HAL_RCC_ClockConfig+0x268>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d909      	bls.n	80096ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800969a:	4b5f      	ldr	r3, [pc, #380]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096a2:	4a5d      	ldr	r2, [pc, #372]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 80096a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80096aa:	2380      	movs	r3, #128	@ 0x80
 80096ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80096ae:	4b5a      	ldr	r3, [pc, #360]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f023 0203 	bic.w	r2, r3, #3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	4957      	ldr	r1, [pc, #348]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 80096bc:	4313      	orrs	r3, r2
 80096be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096c0:	f7fb f87a 	bl	80047b8 <HAL_GetTick>
 80096c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096c6:	e00a      	b.n	80096de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096c8:	f7fb f876 	bl	80047b8 <HAL_GetTick>
 80096cc:	4602      	mov	r2, r0
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d901      	bls.n	80096de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80096da:	2303      	movs	r3, #3
 80096dc:	e095      	b.n	800980a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096de:	4b4e      	ldr	r3, [pc, #312]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f003 020c 	and.w	r2, r3, #12
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d1eb      	bne.n	80096c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 0302 	and.w	r3, r3, #2
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d023      	beq.n	8009744 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f003 0304 	and.w	r3, r3, #4
 8009704:	2b00      	cmp	r3, #0
 8009706:	d005      	beq.n	8009714 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009708:	4b43      	ldr	r3, [pc, #268]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	4a42      	ldr	r2, [pc, #264]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 800970e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009712:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f003 0308 	and.w	r3, r3, #8
 800971c:	2b00      	cmp	r3, #0
 800971e:	d007      	beq.n	8009730 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009720:	4b3d      	ldr	r3, [pc, #244]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009728:	4a3b      	ldr	r2, [pc, #236]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 800972a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800972e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009730:	4b39      	ldr	r3, [pc, #228]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	4936      	ldr	r1, [pc, #216]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 800973e:	4313      	orrs	r3, r2
 8009740:	608b      	str	r3, [r1, #8]
 8009742:	e008      	b.n	8009756 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	2b80      	cmp	r3, #128	@ 0x80
 8009748:	d105      	bne.n	8009756 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800974a:	4b33      	ldr	r3, [pc, #204]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	4a32      	ldr	r2, [pc, #200]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 8009750:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009754:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009756:	4b2f      	ldr	r3, [pc, #188]	@ (8009814 <HAL_RCC_ClockConfig+0x260>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 030f 	and.w	r3, r3, #15
 800975e:	683a      	ldr	r2, [r7, #0]
 8009760:	429a      	cmp	r2, r3
 8009762:	d21d      	bcs.n	80097a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009764:	4b2b      	ldr	r3, [pc, #172]	@ (8009814 <HAL_RCC_ClockConfig+0x260>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f023 020f 	bic.w	r2, r3, #15
 800976c:	4929      	ldr	r1, [pc, #164]	@ (8009814 <HAL_RCC_ClockConfig+0x260>)
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	4313      	orrs	r3, r2
 8009772:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009774:	f7fb f820 	bl	80047b8 <HAL_GetTick>
 8009778:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800977a:	e00a      	b.n	8009792 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800977c:	f7fb f81c 	bl	80047b8 <HAL_GetTick>
 8009780:	4602      	mov	r2, r0
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	1ad3      	subs	r3, r2, r3
 8009786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800978a:	4293      	cmp	r3, r2
 800978c:	d901      	bls.n	8009792 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800978e:	2303      	movs	r3, #3
 8009790:	e03b      	b.n	800980a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009792:	4b20      	ldr	r3, [pc, #128]	@ (8009814 <HAL_RCC_ClockConfig+0x260>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f003 030f 	and.w	r3, r3, #15
 800979a:	683a      	ldr	r2, [r7, #0]
 800979c:	429a      	cmp	r2, r3
 800979e:	d1ed      	bne.n	800977c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 0304 	and.w	r3, r3, #4
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d008      	beq.n	80097be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80097ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	4917      	ldr	r1, [pc, #92]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 80097ba:	4313      	orrs	r3, r2
 80097bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f003 0308 	and.w	r3, r3, #8
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d009      	beq.n	80097de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80097ca:	4b13      	ldr	r3, [pc, #76]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	00db      	lsls	r3, r3, #3
 80097d8:	490f      	ldr	r1, [pc, #60]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 80097da:	4313      	orrs	r3, r2
 80097dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80097de:	f000 f825 	bl	800982c <HAL_RCC_GetSysClockFreq>
 80097e2:	4602      	mov	r2, r0
 80097e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009818 <HAL_RCC_ClockConfig+0x264>)
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	091b      	lsrs	r3, r3, #4
 80097ea:	f003 030f 	and.w	r3, r3, #15
 80097ee:	490c      	ldr	r1, [pc, #48]	@ (8009820 <HAL_RCC_ClockConfig+0x26c>)
 80097f0:	5ccb      	ldrb	r3, [r1, r3]
 80097f2:	f003 031f 	and.w	r3, r3, #31
 80097f6:	fa22 f303 	lsr.w	r3, r2, r3
 80097fa:	4a0a      	ldr	r2, [pc, #40]	@ (8009824 <HAL_RCC_ClockConfig+0x270>)
 80097fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80097fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009828 <HAL_RCC_ClockConfig+0x274>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4618      	mov	r0, r3
 8009804:	f7fa ff8c 	bl	8004720 <HAL_InitTick>
 8009808:	4603      	mov	r3, r0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3718      	adds	r7, #24
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	40022000 	.word	0x40022000
 8009818:	40021000 	.word	0x40021000
 800981c:	04c4b400 	.word	0x04c4b400
 8009820:	08016fe8 	.word	0x08016fe8
 8009824:	20000054 	.word	0x20000054
 8009828:	20000058 	.word	0x20000058

0800982c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800982c:	b480      	push	{r7}
 800982e:	b087      	sub	sp, #28
 8009830:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009832:	4b2c      	ldr	r3, [pc, #176]	@ (80098e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	f003 030c 	and.w	r3, r3, #12
 800983a:	2b04      	cmp	r3, #4
 800983c:	d102      	bne.n	8009844 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800983e:	4b2a      	ldr	r3, [pc, #168]	@ (80098e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009840:	613b      	str	r3, [r7, #16]
 8009842:	e047      	b.n	80098d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009844:	4b27      	ldr	r3, [pc, #156]	@ (80098e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	f003 030c 	and.w	r3, r3, #12
 800984c:	2b08      	cmp	r3, #8
 800984e:	d102      	bne.n	8009856 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009850:	4b26      	ldr	r3, [pc, #152]	@ (80098ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8009852:	613b      	str	r3, [r7, #16]
 8009854:	e03e      	b.n	80098d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009856:	4b23      	ldr	r3, [pc, #140]	@ (80098e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	f003 030c 	and.w	r3, r3, #12
 800985e:	2b0c      	cmp	r3, #12
 8009860:	d136      	bne.n	80098d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009862:	4b20      	ldr	r3, [pc, #128]	@ (80098e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	f003 0303 	and.w	r3, r3, #3
 800986a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800986c:	4b1d      	ldr	r3, [pc, #116]	@ (80098e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	091b      	lsrs	r3, r3, #4
 8009872:	f003 030f 	and.w	r3, r3, #15
 8009876:	3301      	adds	r3, #1
 8009878:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2b03      	cmp	r3, #3
 800987e:	d10c      	bne.n	800989a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009880:	4a1a      	ldr	r2, [pc, #104]	@ (80098ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	fbb2 f3f3 	udiv	r3, r2, r3
 8009888:	4a16      	ldr	r2, [pc, #88]	@ (80098e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800988a:	68d2      	ldr	r2, [r2, #12]
 800988c:	0a12      	lsrs	r2, r2, #8
 800988e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009892:	fb02 f303 	mul.w	r3, r2, r3
 8009896:	617b      	str	r3, [r7, #20]
      break;
 8009898:	e00c      	b.n	80098b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800989a:	4a13      	ldr	r2, [pc, #76]	@ (80098e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	fbb2 f3f3 	udiv	r3, r2, r3
 80098a2:	4a10      	ldr	r2, [pc, #64]	@ (80098e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80098a4:	68d2      	ldr	r2, [r2, #12]
 80098a6:	0a12      	lsrs	r2, r2, #8
 80098a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80098ac:	fb02 f303 	mul.w	r3, r2, r3
 80098b0:	617b      	str	r3, [r7, #20]
      break;
 80098b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80098b4:	4b0b      	ldr	r3, [pc, #44]	@ (80098e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	0e5b      	lsrs	r3, r3, #25
 80098ba:	f003 0303 	and.w	r3, r3, #3
 80098be:	3301      	adds	r3, #1
 80098c0:	005b      	lsls	r3, r3, #1
 80098c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098cc:	613b      	str	r3, [r7, #16]
 80098ce:	e001      	b.n	80098d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80098d0:	2300      	movs	r3, #0
 80098d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80098d4:	693b      	ldr	r3, [r7, #16]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	371c      	adds	r7, #28
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	40021000 	.word	0x40021000
 80098e8:	00f42400 	.word	0x00f42400
 80098ec:	016e3600 	.word	0x016e3600

080098f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80098f0:	b480      	push	{r7}
 80098f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80098f4:	4b03      	ldr	r3, [pc, #12]	@ (8009904 <HAL_RCC_GetHCLKFreq+0x14>)
 80098f6:	681b      	ldr	r3, [r3, #0]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	20000054 	.word	0x20000054

08009908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800990c:	f7ff fff0 	bl	80098f0 <HAL_RCC_GetHCLKFreq>
 8009910:	4602      	mov	r2, r0
 8009912:	4b06      	ldr	r3, [pc, #24]	@ (800992c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	0a1b      	lsrs	r3, r3, #8
 8009918:	f003 0307 	and.w	r3, r3, #7
 800991c:	4904      	ldr	r1, [pc, #16]	@ (8009930 <HAL_RCC_GetPCLK1Freq+0x28>)
 800991e:	5ccb      	ldrb	r3, [r1, r3]
 8009920:	f003 031f 	and.w	r3, r3, #31
 8009924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009928:	4618      	mov	r0, r3
 800992a:	bd80      	pop	{r7, pc}
 800992c:	40021000 	.word	0x40021000
 8009930:	08016ff8 	.word	0x08016ff8

08009934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009938:	f7ff ffda 	bl	80098f0 <HAL_RCC_GetHCLKFreq>
 800993c:	4602      	mov	r2, r0
 800993e:	4b06      	ldr	r3, [pc, #24]	@ (8009958 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	0adb      	lsrs	r3, r3, #11
 8009944:	f003 0307 	and.w	r3, r3, #7
 8009948:	4904      	ldr	r1, [pc, #16]	@ (800995c <HAL_RCC_GetPCLK2Freq+0x28>)
 800994a:	5ccb      	ldrb	r3, [r1, r3]
 800994c:	f003 031f 	and.w	r3, r3, #31
 8009950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009954:	4618      	mov	r0, r3
 8009956:	bd80      	pop	{r7, pc}
 8009958:	40021000 	.word	0x40021000
 800995c:	08016ff8 	.word	0x08016ff8

08009960 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009960:	b480      	push	{r7}
 8009962:	b087      	sub	sp, #28
 8009964:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009966:	4b1e      	ldr	r3, [pc, #120]	@ (80099e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	f003 0303 	and.w	r3, r3, #3
 800996e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009970:	4b1b      	ldr	r3, [pc, #108]	@ (80099e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	091b      	lsrs	r3, r3, #4
 8009976:	f003 030f 	and.w	r3, r3, #15
 800997a:	3301      	adds	r3, #1
 800997c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	2b03      	cmp	r3, #3
 8009982:	d10c      	bne.n	800999e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009984:	4a17      	ldr	r2, [pc, #92]	@ (80099e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	fbb2 f3f3 	udiv	r3, r2, r3
 800998c:	4a14      	ldr	r2, [pc, #80]	@ (80099e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800998e:	68d2      	ldr	r2, [r2, #12]
 8009990:	0a12      	lsrs	r2, r2, #8
 8009992:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009996:	fb02 f303 	mul.w	r3, r2, r3
 800999a:	617b      	str	r3, [r7, #20]
    break;
 800999c:	e00c      	b.n	80099b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800999e:	4a12      	ldr	r2, [pc, #72]	@ (80099e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099a6:	4a0e      	ldr	r2, [pc, #56]	@ (80099e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80099a8:	68d2      	ldr	r2, [r2, #12]
 80099aa:	0a12      	lsrs	r2, r2, #8
 80099ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80099b0:	fb02 f303 	mul.w	r3, r2, r3
 80099b4:	617b      	str	r3, [r7, #20]
    break;
 80099b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80099b8:	4b09      	ldr	r3, [pc, #36]	@ (80099e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	0e5b      	lsrs	r3, r3, #25
 80099be:	f003 0303 	and.w	r3, r3, #3
 80099c2:	3301      	adds	r3, #1
 80099c4:	005b      	lsls	r3, r3, #1
 80099c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80099c8:	697a      	ldr	r2, [r7, #20]
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80099d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80099d2:	687b      	ldr	r3, [r7, #4]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	371c      	adds	r7, #28
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr
 80099e0:	40021000 	.word	0x40021000
 80099e4:	016e3600 	.word	0x016e3600
 80099e8:	00f42400 	.word	0x00f42400

080099ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b086      	sub	sp, #24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80099f4:	2300      	movs	r3, #0
 80099f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80099f8:	2300      	movs	r3, #0
 80099fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f000 8098 	beq.w	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a0e:	4b43      	ldr	r3, [pc, #268]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d10d      	bne.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a1a:	4b40      	ldr	r3, [pc, #256]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a1e:	4a3f      	ldr	r2, [pc, #252]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a24:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a26:	4b3d      	ldr	r3, [pc, #244]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a2e:	60bb      	str	r3, [r7, #8]
 8009a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a32:	2301      	movs	r3, #1
 8009a34:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a36:	4b3a      	ldr	r3, [pc, #232]	@ (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a39      	ldr	r2, [pc, #228]	@ (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a42:	f7fa feb9 	bl	80047b8 <HAL_GetTick>
 8009a46:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a48:	e009      	b.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a4a:	f7fa feb5 	bl	80047b8 <HAL_GetTick>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	1ad3      	subs	r3, r2, r3
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	d902      	bls.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	74fb      	strb	r3, [r7, #19]
        break;
 8009a5c:	e005      	b.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a5e:	4b30      	ldr	r3, [pc, #192]	@ (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d0ef      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009a6a:	7cfb      	ldrb	r3, [r7, #19]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d159      	bne.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009a70:	4b2a      	ldr	r3, [pc, #168]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a7a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d01e      	beq.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a86:	697a      	ldr	r2, [r7, #20]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d019      	beq.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009a8c:	4b23      	ldr	r3, [pc, #140]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a98:	4b20      	ldr	r3, [pc, #128]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009aa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aae:	4a1b      	ldr	r2, [pc, #108]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ab0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009ab8:	4a18      	ldr	r2, [pc, #96]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f003 0301 	and.w	r3, r3, #1
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d016      	beq.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aca:	f7fa fe75 	bl	80047b8 <HAL_GetTick>
 8009ace:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009ad0:	e00b      	b.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ad2:	f7fa fe71 	bl	80047b8 <HAL_GetTick>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	1ad3      	subs	r3, r2, r3
 8009adc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d902      	bls.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	74fb      	strb	r3, [r7, #19]
            break;
 8009ae8:	e006      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009aea:	4b0c      	ldr	r3, [pc, #48]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009af0:	f003 0302 	and.w	r3, r3, #2
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d0ec      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009af8:	7cfb      	ldrb	r3, [r7, #19]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10b      	bne.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009afe:	4b07      	ldr	r3, [pc, #28]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b0c:	4903      	ldr	r1, [pc, #12]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009b14:	e008      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009b16:	7cfb      	ldrb	r3, [r7, #19]
 8009b18:	74bb      	strb	r3, [r7, #18]
 8009b1a:	e005      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009b1c:	40021000 	.word	0x40021000
 8009b20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b24:	7cfb      	ldrb	r3, [r7, #19]
 8009b26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b28:	7c7b      	ldrb	r3, [r7, #17]
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d105      	bne.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b2e:	4ba7      	ldr	r3, [pc, #668]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b32:	4aa6      	ldr	r2, [pc, #664]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b38:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 0301 	and.w	r3, r3, #1
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00a      	beq.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009b46:	4ba1      	ldr	r3, [pc, #644]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b4c:	f023 0203 	bic.w	r2, r3, #3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	499d      	ldr	r1, [pc, #628]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b56:	4313      	orrs	r3, r2
 8009b58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f003 0302 	and.w	r3, r3, #2
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00a      	beq.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009b68:	4b98      	ldr	r3, [pc, #608]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b6e:	f023 020c 	bic.w	r2, r3, #12
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	4995      	ldr	r1, [pc, #596]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 0304 	and.w	r3, r3, #4
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00a      	beq.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009b8a:	4b90      	ldr	r3, [pc, #576]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b90:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	498c      	ldr	r1, [pc, #560]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f003 0308 	and.w	r3, r3, #8
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00a      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009bac:	4b87      	ldr	r3, [pc, #540]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bb2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	4984      	ldr	r1, [pc, #528]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f003 0310 	and.w	r3, r3, #16
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00a      	beq.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009bce:	4b7f      	ldr	r3, [pc, #508]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	695b      	ldr	r3, [r3, #20]
 8009bdc:	497b      	ldr	r1, [pc, #492]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bde:	4313      	orrs	r3, r2
 8009be0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 0320 	and.w	r3, r3, #32
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00a      	beq.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009bf0:	4b76      	ldr	r3, [pc, #472]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bf6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	699b      	ldr	r3, [r3, #24]
 8009bfe:	4973      	ldr	r1, [pc, #460]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c00:	4313      	orrs	r3, r2
 8009c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00a      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009c12:	4b6e      	ldr	r3, [pc, #440]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c18:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	69db      	ldr	r3, [r3, #28]
 8009c20:	496a      	ldr	r1, [pc, #424]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c22:	4313      	orrs	r3, r2
 8009c24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00a      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009c34:	4b65      	ldr	r3, [pc, #404]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c3a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	4962      	ldr	r1, [pc, #392]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c44:	4313      	orrs	r3, r2
 8009c46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00a      	beq.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009c56:	4b5d      	ldr	r3, [pc, #372]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c5c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c64:	4959      	ldr	r1, [pc, #356]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c66:	4313      	orrs	r3, r2
 8009c68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00a      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009c78:	4b54      	ldr	r3, [pc, #336]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c7e:	f023 0203 	bic.w	r2, r3, #3
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c86:	4951      	ldr	r1, [pc, #324]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00a      	beq.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c9a:	4b4c      	ldr	r3, [pc, #304]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ca0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ca8:	4948      	ldr	r1, [pc, #288]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009caa:	4313      	orrs	r3, r2
 8009cac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d015      	beq.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009cbc:	4b43      	ldr	r3, [pc, #268]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cca:	4940      	ldr	r1, [pc, #256]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cda:	d105      	bne.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	4a3a      	ldr	r2, [pc, #232]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ce2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ce6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d015      	beq.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009cf4:	4b35      	ldr	r3, [pc, #212]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cfa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d02:	4932      	ldr	r1, [pc, #200]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d04:	4313      	orrs	r3, r2
 8009d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d12:	d105      	bne.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d14:	4b2d      	ldr	r3, [pc, #180]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	4a2c      	ldr	r2, [pc, #176]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d1e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d015      	beq.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009d2c:	4b27      	ldr	r3, [pc, #156]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d32:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d3a:	4924      	ldr	r1, [pc, #144]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d4a:	d105      	bne.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	4a1e      	ldr	r2, [pc, #120]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d56:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d015      	beq.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009d64:	4b19      	ldr	r3, [pc, #100]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d72:	4916      	ldr	r1, [pc, #88]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d74:	4313      	orrs	r3, r2
 8009d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d82:	d105      	bne.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d84:	4b11      	ldr	r3, [pc, #68]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	4a10      	ldr	r2, [pc, #64]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d8e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d019      	beq.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009da2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009daa:	4908      	ldr	r1, [pc, #32]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dac:	4313      	orrs	r3, r2
 8009dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009db6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009dba:	d109      	bne.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009dbc:	4b03      	ldr	r3, [pc, #12]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	4a02      	ldr	r2, [pc, #8]	@ (8009dcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009dc6:	60d3      	str	r3, [r2, #12]
 8009dc8:	e002      	b.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009dca:	bf00      	nop
 8009dcc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d015      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009ddc:	4b29      	ldr	r3, [pc, #164]	@ (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009de2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dea:	4926      	ldr	r1, [pc, #152]	@ (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009dec:	4313      	orrs	r3, r2
 8009dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009df6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009dfa:	d105      	bne.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009dfc:	4b21      	ldr	r3, [pc, #132]	@ (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	4a20      	ldr	r2, [pc, #128]	@ (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e06:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d015      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009e14:	4b1b      	ldr	r3, [pc, #108]	@ (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e1a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e22:	4918      	ldr	r1, [pc, #96]	@ (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e24:	4313      	orrs	r3, r2
 8009e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e32:	d105      	bne.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009e34:	4b13      	ldr	r3, [pc, #76]	@ (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	4a12      	ldr	r2, [pc, #72]	@ (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e3e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d015      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e5a:	490a      	ldr	r1, [pc, #40]	@ (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e6a:	d105      	bne.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e6c:	4b05      	ldr	r3, [pc, #20]	@ (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	4a04      	ldr	r2, [pc, #16]	@ (8009e84 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e76:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009e78:	7cbb      	ldrb	r3, [r7, #18]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3718      	adds	r7, #24
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	40021000 	.word	0x40021000

08009e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d101      	bne.n	8009e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e96:	2301      	movs	r3, #1
 8009e98:	e049      	b.n	8009f2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d106      	bne.n	8009eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f7fa f93a 	bl	8004128 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2202      	movs	r2, #2
 8009eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	3304      	adds	r3, #4
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	4610      	mov	r0, r2
 8009ec8:	f000 fe58 	bl	800ab7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
	...

08009f38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d001      	beq.n	8009f50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e04c      	b.n	8009fea <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2202      	movs	r2, #2
 8009f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a26      	ldr	r2, [pc, #152]	@ (8009ff8 <HAL_TIM_Base_Start+0xc0>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d022      	beq.n	8009fa8 <HAL_TIM_Base_Start+0x70>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f6a:	d01d      	beq.n	8009fa8 <HAL_TIM_Base_Start+0x70>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a22      	ldr	r2, [pc, #136]	@ (8009ffc <HAL_TIM_Base_Start+0xc4>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d018      	beq.n	8009fa8 <HAL_TIM_Base_Start+0x70>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a21      	ldr	r2, [pc, #132]	@ (800a000 <HAL_TIM_Base_Start+0xc8>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d013      	beq.n	8009fa8 <HAL_TIM_Base_Start+0x70>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a1f      	ldr	r2, [pc, #124]	@ (800a004 <HAL_TIM_Base_Start+0xcc>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d00e      	beq.n	8009fa8 <HAL_TIM_Base_Start+0x70>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a1e      	ldr	r2, [pc, #120]	@ (800a008 <HAL_TIM_Base_Start+0xd0>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d009      	beq.n	8009fa8 <HAL_TIM_Base_Start+0x70>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a1c      	ldr	r2, [pc, #112]	@ (800a00c <HAL_TIM_Base_Start+0xd4>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d004      	beq.n	8009fa8 <HAL_TIM_Base_Start+0x70>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a1b      	ldr	r2, [pc, #108]	@ (800a010 <HAL_TIM_Base_Start+0xd8>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d115      	bne.n	8009fd4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	689a      	ldr	r2, [r3, #8]
 8009fae:	4b19      	ldr	r3, [pc, #100]	@ (800a014 <HAL_TIM_Base_Start+0xdc>)
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2b06      	cmp	r3, #6
 8009fb8:	d015      	beq.n	8009fe6 <HAL_TIM_Base_Start+0xae>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fc0:	d011      	beq.n	8009fe6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f042 0201 	orr.w	r2, r2, #1
 8009fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fd2:	e008      	b.n	8009fe6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f042 0201 	orr.w	r2, r2, #1
 8009fe2:	601a      	str	r2, [r3, #0]
 8009fe4:	e000      	b.n	8009fe8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fe6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3714      	adds	r7, #20
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	40012c00 	.word	0x40012c00
 8009ffc:	40000400 	.word	0x40000400
 800a000:	40000800 	.word	0x40000800
 800a004:	40000c00 	.word	0x40000c00
 800a008:	40013400 	.word	0x40013400
 800a00c:	40014000 	.word	0x40014000
 800a010:	40015000 	.word	0x40015000
 800a014:	00010007 	.word	0x00010007

0800a018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a026:	b2db      	uxtb	r3, r3
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d001      	beq.n	800a030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e054      	b.n	800a0da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2202      	movs	r2, #2
 800a034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	68da      	ldr	r2, [r3, #12]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f042 0201 	orr.w	r2, r2, #1
 800a046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a26      	ldr	r2, [pc, #152]	@ (800a0e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d022      	beq.n	800a098 <HAL_TIM_Base_Start_IT+0x80>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a05a:	d01d      	beq.n	800a098 <HAL_TIM_Base_Start_IT+0x80>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a22      	ldr	r2, [pc, #136]	@ (800a0ec <HAL_TIM_Base_Start_IT+0xd4>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d018      	beq.n	800a098 <HAL_TIM_Base_Start_IT+0x80>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a21      	ldr	r2, [pc, #132]	@ (800a0f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d013      	beq.n	800a098 <HAL_TIM_Base_Start_IT+0x80>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a1f      	ldr	r2, [pc, #124]	@ (800a0f4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d00e      	beq.n	800a098 <HAL_TIM_Base_Start_IT+0x80>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a1e      	ldr	r2, [pc, #120]	@ (800a0f8 <HAL_TIM_Base_Start_IT+0xe0>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d009      	beq.n	800a098 <HAL_TIM_Base_Start_IT+0x80>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a1c      	ldr	r2, [pc, #112]	@ (800a0fc <HAL_TIM_Base_Start_IT+0xe4>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d004      	beq.n	800a098 <HAL_TIM_Base_Start_IT+0x80>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a1b      	ldr	r2, [pc, #108]	@ (800a100 <HAL_TIM_Base_Start_IT+0xe8>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d115      	bne.n	800a0c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	689a      	ldr	r2, [r3, #8]
 800a09e:	4b19      	ldr	r3, [pc, #100]	@ (800a104 <HAL_TIM_Base_Start_IT+0xec>)
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2b06      	cmp	r3, #6
 800a0a8:	d015      	beq.n	800a0d6 <HAL_TIM_Base_Start_IT+0xbe>
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0b0:	d011      	beq.n	800a0d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f042 0201 	orr.w	r2, r2, #1
 800a0c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0c2:	e008      	b.n	800a0d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f042 0201 	orr.w	r2, r2, #1
 800a0d2:	601a      	str	r2, [r3, #0]
 800a0d4:	e000      	b.n	800a0d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3714      	adds	r7, #20
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop
 800a0e8:	40012c00 	.word	0x40012c00
 800a0ec:	40000400 	.word	0x40000400
 800a0f0:	40000800 	.word	0x40000800
 800a0f4:	40000c00 	.word	0x40000c00
 800a0f8:	40013400 	.word	0x40013400
 800a0fc:	40014000 	.word	0x40014000
 800a100:	40015000 	.word	0x40015000
 800a104:	00010007 	.word	0x00010007

0800a108 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	68da      	ldr	r2, [r3, #12]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f022 0201 	bic.w	r2, r2, #1
 800a11e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6a1a      	ldr	r2, [r3, #32]
 800a126:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a12a:	4013      	ands	r3, r2
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10f      	bne.n	800a150 <HAL_TIM_Base_Stop_IT+0x48>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	6a1a      	ldr	r2, [r3, #32]
 800a136:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a13a:	4013      	ands	r3, r2
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d107      	bne.n	800a150 <HAL_TIM_Base_Stop_IT+0x48>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f022 0201 	bic.w	r2, r2, #1
 800a14e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b082      	sub	sp, #8
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d101      	bne.n	800a178 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	e049      	b.n	800a20c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	2b00      	cmp	r3, #0
 800a182:	d106      	bne.n	800a192 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f7f9 ff91 	bl	80040b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2202      	movs	r2, #2
 800a196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	4610      	mov	r0, r2
 800a1a6:	f000 fce9 	bl	800ab7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2201      	movs	r2, #1
 800a206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3708      	adds	r7, #8
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d109      	bne.n	800a238 <HAL_TIM_PWM_Start+0x24>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	bf14      	ite	ne
 800a230:	2301      	movne	r3, #1
 800a232:	2300      	moveq	r3, #0
 800a234:	b2db      	uxtb	r3, r3
 800a236:	e03c      	b.n	800a2b2 <HAL_TIM_PWM_Start+0x9e>
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	2b04      	cmp	r3, #4
 800a23c:	d109      	bne.n	800a252 <HAL_TIM_PWM_Start+0x3e>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a244:	b2db      	uxtb	r3, r3
 800a246:	2b01      	cmp	r3, #1
 800a248:	bf14      	ite	ne
 800a24a:	2301      	movne	r3, #1
 800a24c:	2300      	moveq	r3, #0
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	e02f      	b.n	800a2b2 <HAL_TIM_PWM_Start+0x9e>
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	2b08      	cmp	r3, #8
 800a256:	d109      	bne.n	800a26c <HAL_TIM_PWM_Start+0x58>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	2b01      	cmp	r3, #1
 800a262:	bf14      	ite	ne
 800a264:	2301      	movne	r3, #1
 800a266:	2300      	moveq	r3, #0
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	e022      	b.n	800a2b2 <HAL_TIM_PWM_Start+0x9e>
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	2b0c      	cmp	r3, #12
 800a270:	d109      	bne.n	800a286 <HAL_TIM_PWM_Start+0x72>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	bf14      	ite	ne
 800a27e:	2301      	movne	r3, #1
 800a280:	2300      	moveq	r3, #0
 800a282:	b2db      	uxtb	r3, r3
 800a284:	e015      	b.n	800a2b2 <HAL_TIM_PWM_Start+0x9e>
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	2b10      	cmp	r3, #16
 800a28a:	d109      	bne.n	800a2a0 <HAL_TIM_PWM_Start+0x8c>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a292:	b2db      	uxtb	r3, r3
 800a294:	2b01      	cmp	r3, #1
 800a296:	bf14      	ite	ne
 800a298:	2301      	movne	r3, #1
 800a29a:	2300      	moveq	r3, #0
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	e008      	b.n	800a2b2 <HAL_TIM_PWM_Start+0x9e>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	bf14      	ite	ne
 800a2ac:	2301      	movne	r3, #1
 800a2ae:	2300      	moveq	r3, #0
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d001      	beq.n	800a2ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e0a6      	b.n	800a408 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d104      	bne.n	800a2ca <HAL_TIM_PWM_Start+0xb6>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2202      	movs	r2, #2
 800a2c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2c8:	e023      	b.n	800a312 <HAL_TIM_PWM_Start+0xfe>
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	2b04      	cmp	r3, #4
 800a2ce:	d104      	bne.n	800a2da <HAL_TIM_PWM_Start+0xc6>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2d8:	e01b      	b.n	800a312 <HAL_TIM_PWM_Start+0xfe>
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	2b08      	cmp	r3, #8
 800a2de:	d104      	bne.n	800a2ea <HAL_TIM_PWM_Start+0xd6>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2202      	movs	r2, #2
 800a2e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2e8:	e013      	b.n	800a312 <HAL_TIM_PWM_Start+0xfe>
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b0c      	cmp	r3, #12
 800a2ee:	d104      	bne.n	800a2fa <HAL_TIM_PWM_Start+0xe6>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a2f8:	e00b      	b.n	800a312 <HAL_TIM_PWM_Start+0xfe>
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	2b10      	cmp	r3, #16
 800a2fe:	d104      	bne.n	800a30a <HAL_TIM_PWM_Start+0xf6>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2202      	movs	r2, #2
 800a304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a308:	e003      	b.n	800a312 <HAL_TIM_PWM_Start+0xfe>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2202      	movs	r2, #2
 800a30e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2201      	movs	r2, #1
 800a318:	6839      	ldr	r1, [r7, #0]
 800a31a:	4618      	mov	r0, r3
 800a31c:	f001 f8a8 	bl	800b470 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a3a      	ldr	r2, [pc, #232]	@ (800a410 <HAL_TIM_PWM_Start+0x1fc>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d018      	beq.n	800a35c <HAL_TIM_PWM_Start+0x148>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a39      	ldr	r2, [pc, #228]	@ (800a414 <HAL_TIM_PWM_Start+0x200>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d013      	beq.n	800a35c <HAL_TIM_PWM_Start+0x148>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a37      	ldr	r2, [pc, #220]	@ (800a418 <HAL_TIM_PWM_Start+0x204>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d00e      	beq.n	800a35c <HAL_TIM_PWM_Start+0x148>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a36      	ldr	r2, [pc, #216]	@ (800a41c <HAL_TIM_PWM_Start+0x208>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d009      	beq.n	800a35c <HAL_TIM_PWM_Start+0x148>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a34      	ldr	r2, [pc, #208]	@ (800a420 <HAL_TIM_PWM_Start+0x20c>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d004      	beq.n	800a35c <HAL_TIM_PWM_Start+0x148>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a33      	ldr	r2, [pc, #204]	@ (800a424 <HAL_TIM_PWM_Start+0x210>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d101      	bne.n	800a360 <HAL_TIM_PWM_Start+0x14c>
 800a35c:	2301      	movs	r3, #1
 800a35e:	e000      	b.n	800a362 <HAL_TIM_PWM_Start+0x14e>
 800a360:	2300      	movs	r3, #0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d007      	beq.n	800a376 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a374:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a25      	ldr	r2, [pc, #148]	@ (800a410 <HAL_TIM_PWM_Start+0x1fc>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d022      	beq.n	800a3c6 <HAL_TIM_PWM_Start+0x1b2>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a388:	d01d      	beq.n	800a3c6 <HAL_TIM_PWM_Start+0x1b2>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a26      	ldr	r2, [pc, #152]	@ (800a428 <HAL_TIM_PWM_Start+0x214>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d018      	beq.n	800a3c6 <HAL_TIM_PWM_Start+0x1b2>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a24      	ldr	r2, [pc, #144]	@ (800a42c <HAL_TIM_PWM_Start+0x218>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d013      	beq.n	800a3c6 <HAL_TIM_PWM_Start+0x1b2>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a23      	ldr	r2, [pc, #140]	@ (800a430 <HAL_TIM_PWM_Start+0x21c>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d00e      	beq.n	800a3c6 <HAL_TIM_PWM_Start+0x1b2>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a19      	ldr	r2, [pc, #100]	@ (800a414 <HAL_TIM_PWM_Start+0x200>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d009      	beq.n	800a3c6 <HAL_TIM_PWM_Start+0x1b2>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a18      	ldr	r2, [pc, #96]	@ (800a418 <HAL_TIM_PWM_Start+0x204>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d004      	beq.n	800a3c6 <HAL_TIM_PWM_Start+0x1b2>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a18      	ldr	r2, [pc, #96]	@ (800a424 <HAL_TIM_PWM_Start+0x210>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d115      	bne.n	800a3f2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	689a      	ldr	r2, [r3, #8]
 800a3cc:	4b19      	ldr	r3, [pc, #100]	@ (800a434 <HAL_TIM_PWM_Start+0x220>)
 800a3ce:	4013      	ands	r3, r2
 800a3d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2b06      	cmp	r3, #6
 800a3d6:	d015      	beq.n	800a404 <HAL_TIM_PWM_Start+0x1f0>
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3de:	d011      	beq.n	800a404 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f042 0201 	orr.w	r2, r2, #1
 800a3ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3f0:	e008      	b.n	800a404 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f042 0201 	orr.w	r2, r2, #1
 800a400:	601a      	str	r2, [r3, #0]
 800a402:	e000      	b.n	800a406 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a404:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3710      	adds	r7, #16
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	40012c00 	.word	0x40012c00
 800a414:	40013400 	.word	0x40013400
 800a418:	40014000 	.word	0x40014000
 800a41c:	40014400 	.word	0x40014400
 800a420:	40014800 	.word	0x40014800
 800a424:	40015000 	.word	0x40015000
 800a428:	40000400 	.word	0x40000400
 800a42c:	40000800 	.word	0x40000800
 800a430:	40000c00 	.word	0x40000c00
 800a434:	00010007 	.word	0x00010007

0800a438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	f003 0302 	and.w	r3, r3, #2
 800a456:	2b00      	cmp	r3, #0
 800a458:	d020      	beq.n	800a49c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f003 0302 	and.w	r3, r3, #2
 800a460:	2b00      	cmp	r3, #0
 800a462:	d01b      	beq.n	800a49c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f06f 0202 	mvn.w	r2, #2
 800a46c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2201      	movs	r2, #1
 800a472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	f003 0303 	and.w	r3, r3, #3
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d003      	beq.n	800a48a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 fb5c 	bl	800ab40 <HAL_TIM_IC_CaptureCallback>
 800a488:	e005      	b.n	800a496 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 fb4e 	bl	800ab2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fb5f 	bl	800ab54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	f003 0304 	and.w	r3, r3, #4
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d020      	beq.n	800a4e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f003 0304 	and.w	r3, r3, #4
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d01b      	beq.n	800a4e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f06f 0204 	mvn.w	r2, #4
 800a4b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2202      	movs	r2, #2
 800a4be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	699b      	ldr	r3, [r3, #24]
 800a4c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d003      	beq.n	800a4d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 fb36 	bl	800ab40 <HAL_TIM_IC_CaptureCallback>
 800a4d4:	e005      	b.n	800a4e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 fb28 	bl	800ab2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 fb39 	bl	800ab54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	f003 0308 	and.w	r3, r3, #8
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d020      	beq.n	800a534 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f003 0308 	and.w	r3, r3, #8
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d01b      	beq.n	800a534 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f06f 0208 	mvn.w	r2, #8
 800a504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2204      	movs	r2, #4
 800a50a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	69db      	ldr	r3, [r3, #28]
 800a512:	f003 0303 	and.w	r3, r3, #3
 800a516:	2b00      	cmp	r3, #0
 800a518:	d003      	beq.n	800a522 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fb10 	bl	800ab40 <HAL_TIM_IC_CaptureCallback>
 800a520:	e005      	b.n	800a52e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 fb02 	bl	800ab2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 fb13 	bl	800ab54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	f003 0310 	and.w	r3, r3, #16
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d020      	beq.n	800a580 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f003 0310 	and.w	r3, r3, #16
 800a544:	2b00      	cmp	r3, #0
 800a546:	d01b      	beq.n	800a580 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f06f 0210 	mvn.w	r2, #16
 800a550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2208      	movs	r2, #8
 800a556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	69db      	ldr	r3, [r3, #28]
 800a55e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a562:	2b00      	cmp	r3, #0
 800a564:	d003      	beq.n	800a56e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 faea 	bl	800ab40 <HAL_TIM_IC_CaptureCallback>
 800a56c:	e005      	b.n	800a57a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 fadc 	bl	800ab2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 faed 	bl	800ab54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	f003 0301 	and.w	r3, r3, #1
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00c      	beq.n	800a5a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f003 0301 	and.w	r3, r3, #1
 800a590:	2b00      	cmp	r3, #0
 800a592:	d007      	beq.n	800a5a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f06f 0201 	mvn.w	r2, #1
 800a59c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7f8 fb6e 	bl	8002c80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d104      	bne.n	800a5b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00c      	beq.n	800a5d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d007      	beq.n	800a5d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a5ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f001 f8a9 	bl	800b724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00c      	beq.n	800a5f6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d007      	beq.n	800a5f6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a5ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f001 f8a1 	bl	800b738 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d00c      	beq.n	800a61a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a606:	2b00      	cmp	r3, #0
 800a608:	d007      	beq.n	800a61a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 faa7 	bl	800ab68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	f003 0320 	and.w	r3, r3, #32
 800a620:	2b00      	cmp	r3, #0
 800a622:	d00c      	beq.n	800a63e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f003 0320 	and.w	r3, r3, #32
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d007      	beq.n	800a63e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f06f 0220 	mvn.w	r2, #32
 800a636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f001 f869 	bl	800b710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00c      	beq.n	800a662 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d007      	beq.n	800a662 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a65a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f001 f875 	bl	800b74c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00c      	beq.n	800a686 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a672:	2b00      	cmp	r3, #0
 800a674:	d007      	beq.n	800a686 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a67e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f001 f86d 	bl	800b760 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00c      	beq.n	800a6aa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a696:	2b00      	cmp	r3, #0
 800a698:	d007      	beq.n	800a6aa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a6a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f001 f865 	bl	800b774 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d00c      	beq.n	800a6ce <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d007      	beq.n	800a6ce <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a6c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f001 f85d 	bl	800b788 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6ce:	bf00      	nop
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
	...

0800a6d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b086      	sub	sp, #24
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d101      	bne.n	800a6f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a6f2:	2302      	movs	r3, #2
 800a6f4:	e0ff      	b.n	800a8f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2b14      	cmp	r3, #20
 800a702:	f200 80f0 	bhi.w	800a8e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a706:	a201      	add	r2, pc, #4	@ (adr r2, 800a70c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a70c:	0800a761 	.word	0x0800a761
 800a710:	0800a8e7 	.word	0x0800a8e7
 800a714:	0800a8e7 	.word	0x0800a8e7
 800a718:	0800a8e7 	.word	0x0800a8e7
 800a71c:	0800a7a1 	.word	0x0800a7a1
 800a720:	0800a8e7 	.word	0x0800a8e7
 800a724:	0800a8e7 	.word	0x0800a8e7
 800a728:	0800a8e7 	.word	0x0800a8e7
 800a72c:	0800a7e3 	.word	0x0800a7e3
 800a730:	0800a8e7 	.word	0x0800a8e7
 800a734:	0800a8e7 	.word	0x0800a8e7
 800a738:	0800a8e7 	.word	0x0800a8e7
 800a73c:	0800a823 	.word	0x0800a823
 800a740:	0800a8e7 	.word	0x0800a8e7
 800a744:	0800a8e7 	.word	0x0800a8e7
 800a748:	0800a8e7 	.word	0x0800a8e7
 800a74c:	0800a865 	.word	0x0800a865
 800a750:	0800a8e7 	.word	0x0800a8e7
 800a754:	0800a8e7 	.word	0x0800a8e7
 800a758:	0800a8e7 	.word	0x0800a8e7
 800a75c:	0800a8a5 	.word	0x0800a8a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68b9      	ldr	r1, [r7, #8]
 800a766:	4618      	mov	r0, r3
 800a768:	f000 fabc 	bl	800ace4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	699a      	ldr	r2, [r3, #24]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f042 0208 	orr.w	r2, r2, #8
 800a77a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	699a      	ldr	r2, [r3, #24]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f022 0204 	bic.w	r2, r2, #4
 800a78a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	6999      	ldr	r1, [r3, #24]
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	691a      	ldr	r2, [r3, #16]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	430a      	orrs	r2, r1
 800a79c:	619a      	str	r2, [r3, #24]
      break;
 800a79e:	e0a5      	b.n	800a8ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	68b9      	ldr	r1, [r7, #8]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 fb36 	bl	800ae18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	699a      	ldr	r2, [r3, #24]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a7ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	699a      	ldr	r2, [r3, #24]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a7ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	6999      	ldr	r1, [r3, #24]
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	021a      	lsls	r2, r3, #8
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	430a      	orrs	r2, r1
 800a7de:	619a      	str	r2, [r3, #24]
      break;
 800a7e0:	e084      	b.n	800a8ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68b9      	ldr	r1, [r7, #8]
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f000 fba9 	bl	800af40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	69da      	ldr	r2, [r3, #28]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f042 0208 	orr.w	r2, r2, #8
 800a7fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	69da      	ldr	r2, [r3, #28]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f022 0204 	bic.w	r2, r2, #4
 800a80c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	69d9      	ldr	r1, [r3, #28]
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	691a      	ldr	r2, [r3, #16]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	430a      	orrs	r2, r1
 800a81e:	61da      	str	r2, [r3, #28]
      break;
 800a820:	e064      	b.n	800a8ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	68b9      	ldr	r1, [r7, #8]
 800a828:	4618      	mov	r0, r3
 800a82a:	f000 fc1b 	bl	800b064 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	69da      	ldr	r2, [r3, #28]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a83c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	69da      	ldr	r2, [r3, #28]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a84c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	69d9      	ldr	r1, [r3, #28]
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	691b      	ldr	r3, [r3, #16]
 800a858:	021a      	lsls	r2, r3, #8
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	430a      	orrs	r2, r1
 800a860:	61da      	str	r2, [r3, #28]
      break;
 800a862:	e043      	b.n	800a8ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68b9      	ldr	r1, [r7, #8]
 800a86a:	4618      	mov	r0, r3
 800a86c:	f000 fc8e 	bl	800b18c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f042 0208 	orr.w	r2, r2, #8
 800a87e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f022 0204 	bic.w	r2, r2, #4
 800a88e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	691a      	ldr	r2, [r3, #16]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	430a      	orrs	r2, r1
 800a8a0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a8a2:	e023      	b.n	800a8ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	68b9      	ldr	r1, [r7, #8]
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f000 fcd8 	bl	800b260 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a8be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a8ce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	021a      	lsls	r2, r3, #8
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	430a      	orrs	r2, r1
 800a8e2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a8e4:	e002      	b.n	800a8ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a8ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a8f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3718      	adds	r7, #24
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop

0800a900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a90a:	2300      	movs	r3, #0
 800a90c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a914:	2b01      	cmp	r3, #1
 800a916:	d101      	bne.n	800a91c <HAL_TIM_ConfigClockSource+0x1c>
 800a918:	2302      	movs	r3, #2
 800a91a:	e0f6      	b.n	800ab0a <HAL_TIM_ConfigClockSource+0x20a>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2201      	movs	r2, #1
 800a920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2202      	movs	r2, #2
 800a928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a93a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a93e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a946:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a6f      	ldr	r2, [pc, #444]	@ (800ab14 <HAL_TIM_ConfigClockSource+0x214>)
 800a956:	4293      	cmp	r3, r2
 800a958:	f000 80c1 	beq.w	800aade <HAL_TIM_ConfigClockSource+0x1de>
 800a95c:	4a6d      	ldr	r2, [pc, #436]	@ (800ab14 <HAL_TIM_ConfigClockSource+0x214>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	f200 80c6 	bhi.w	800aaf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800a964:	4a6c      	ldr	r2, [pc, #432]	@ (800ab18 <HAL_TIM_ConfigClockSource+0x218>)
 800a966:	4293      	cmp	r3, r2
 800a968:	f000 80b9 	beq.w	800aade <HAL_TIM_ConfigClockSource+0x1de>
 800a96c:	4a6a      	ldr	r2, [pc, #424]	@ (800ab18 <HAL_TIM_ConfigClockSource+0x218>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	f200 80be 	bhi.w	800aaf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800a974:	4a69      	ldr	r2, [pc, #420]	@ (800ab1c <HAL_TIM_ConfigClockSource+0x21c>)
 800a976:	4293      	cmp	r3, r2
 800a978:	f000 80b1 	beq.w	800aade <HAL_TIM_ConfigClockSource+0x1de>
 800a97c:	4a67      	ldr	r2, [pc, #412]	@ (800ab1c <HAL_TIM_ConfigClockSource+0x21c>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	f200 80b6 	bhi.w	800aaf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800a984:	4a66      	ldr	r2, [pc, #408]	@ (800ab20 <HAL_TIM_ConfigClockSource+0x220>)
 800a986:	4293      	cmp	r3, r2
 800a988:	f000 80a9 	beq.w	800aade <HAL_TIM_ConfigClockSource+0x1de>
 800a98c:	4a64      	ldr	r2, [pc, #400]	@ (800ab20 <HAL_TIM_ConfigClockSource+0x220>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	f200 80ae 	bhi.w	800aaf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800a994:	4a63      	ldr	r2, [pc, #396]	@ (800ab24 <HAL_TIM_ConfigClockSource+0x224>)
 800a996:	4293      	cmp	r3, r2
 800a998:	f000 80a1 	beq.w	800aade <HAL_TIM_ConfigClockSource+0x1de>
 800a99c:	4a61      	ldr	r2, [pc, #388]	@ (800ab24 <HAL_TIM_ConfigClockSource+0x224>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	f200 80a6 	bhi.w	800aaf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9a4:	4a60      	ldr	r2, [pc, #384]	@ (800ab28 <HAL_TIM_ConfigClockSource+0x228>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	f000 8099 	beq.w	800aade <HAL_TIM_ConfigClockSource+0x1de>
 800a9ac:	4a5e      	ldr	r2, [pc, #376]	@ (800ab28 <HAL_TIM_ConfigClockSource+0x228>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	f200 809e 	bhi.w	800aaf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a9b8:	f000 8091 	beq.w	800aade <HAL_TIM_ConfigClockSource+0x1de>
 800a9bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a9c0:	f200 8096 	bhi.w	800aaf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9c8:	f000 8089 	beq.w	800aade <HAL_TIM_ConfigClockSource+0x1de>
 800a9cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9d0:	f200 808e 	bhi.w	800aaf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9d8:	d03e      	beq.n	800aa58 <HAL_TIM_ConfigClockSource+0x158>
 800a9da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9de:	f200 8087 	bhi.w	800aaf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9e6:	f000 8086 	beq.w	800aaf6 <HAL_TIM_ConfigClockSource+0x1f6>
 800a9ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9ee:	d87f      	bhi.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9f0:	2b70      	cmp	r3, #112	@ 0x70
 800a9f2:	d01a      	beq.n	800aa2a <HAL_TIM_ConfigClockSource+0x12a>
 800a9f4:	2b70      	cmp	r3, #112	@ 0x70
 800a9f6:	d87b      	bhi.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9f8:	2b60      	cmp	r3, #96	@ 0x60
 800a9fa:	d050      	beq.n	800aa9e <HAL_TIM_ConfigClockSource+0x19e>
 800a9fc:	2b60      	cmp	r3, #96	@ 0x60
 800a9fe:	d877      	bhi.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa00:	2b50      	cmp	r3, #80	@ 0x50
 800aa02:	d03c      	beq.n	800aa7e <HAL_TIM_ConfigClockSource+0x17e>
 800aa04:	2b50      	cmp	r3, #80	@ 0x50
 800aa06:	d873      	bhi.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa08:	2b40      	cmp	r3, #64	@ 0x40
 800aa0a:	d058      	beq.n	800aabe <HAL_TIM_ConfigClockSource+0x1be>
 800aa0c:	2b40      	cmp	r3, #64	@ 0x40
 800aa0e:	d86f      	bhi.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa10:	2b30      	cmp	r3, #48	@ 0x30
 800aa12:	d064      	beq.n	800aade <HAL_TIM_ConfigClockSource+0x1de>
 800aa14:	2b30      	cmp	r3, #48	@ 0x30
 800aa16:	d86b      	bhi.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa18:	2b20      	cmp	r3, #32
 800aa1a:	d060      	beq.n	800aade <HAL_TIM_ConfigClockSource+0x1de>
 800aa1c:	2b20      	cmp	r3, #32
 800aa1e:	d867      	bhi.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d05c      	beq.n	800aade <HAL_TIM_ConfigClockSource+0x1de>
 800aa24:	2b10      	cmp	r3, #16
 800aa26:	d05a      	beq.n	800aade <HAL_TIM_ConfigClockSource+0x1de>
 800aa28:	e062      	b.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa3a:	f000 fcf9 	bl	800b430 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aa4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	68ba      	ldr	r2, [r7, #8]
 800aa54:	609a      	str	r2, [r3, #8]
      break;
 800aa56:	e04f      	b.n	800aaf8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa68:	f000 fce2 	bl	800b430 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	689a      	ldr	r2, [r3, #8]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aa7a:	609a      	str	r2, [r3, #8]
      break;
 800aa7c:	e03c      	b.n	800aaf8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	f000 fc54 	bl	800b338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2150      	movs	r1, #80	@ 0x50
 800aa96:	4618      	mov	r0, r3
 800aa98:	f000 fcad 	bl	800b3f6 <TIM_ITRx_SetConfig>
      break;
 800aa9c:	e02c      	b.n	800aaf8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aaaa:	461a      	mov	r2, r3
 800aaac:	f000 fc73 	bl	800b396 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2160      	movs	r1, #96	@ 0x60
 800aab6:	4618      	mov	r0, r3
 800aab8:	f000 fc9d 	bl	800b3f6 <TIM_ITRx_SetConfig>
      break;
 800aabc:	e01c      	b.n	800aaf8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aaca:	461a      	mov	r2, r3
 800aacc:	f000 fc34 	bl	800b338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2140      	movs	r1, #64	@ 0x40
 800aad6:	4618      	mov	r0, r3
 800aad8:	f000 fc8d 	bl	800b3f6 <TIM_ITRx_SetConfig>
      break;
 800aadc:	e00c      	b.n	800aaf8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4619      	mov	r1, r3
 800aae8:	4610      	mov	r0, r2
 800aaea:	f000 fc84 	bl	800b3f6 <TIM_ITRx_SetConfig>
      break;
 800aaee:	e003      	b.n	800aaf8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	73fb      	strb	r3, [r7, #15]
      break;
 800aaf4:	e000      	b.n	800aaf8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800aaf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	00100070 	.word	0x00100070
 800ab18:	00100060 	.word	0x00100060
 800ab1c:	00100050 	.word	0x00100050
 800ab20:	00100040 	.word	0x00100040
 800ab24:	00100030 	.word	0x00100030
 800ab28:	00100020 	.word	0x00100020

0800ab2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab34:	bf00      	nop
 800ab36:	370c      	adds	r7, #12
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab48:	bf00      	nop
 800ab4a:	370c      	adds	r7, #12
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab5c:	bf00      	nop
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab70:	bf00      	nop
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a4c      	ldr	r2, [pc, #304]	@ (800acc0 <TIM_Base_SetConfig+0x144>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d017      	beq.n	800abc4 <TIM_Base_SetConfig+0x48>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab9a:	d013      	beq.n	800abc4 <TIM_Base_SetConfig+0x48>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a49      	ldr	r2, [pc, #292]	@ (800acc4 <TIM_Base_SetConfig+0x148>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d00f      	beq.n	800abc4 <TIM_Base_SetConfig+0x48>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a48      	ldr	r2, [pc, #288]	@ (800acc8 <TIM_Base_SetConfig+0x14c>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d00b      	beq.n	800abc4 <TIM_Base_SetConfig+0x48>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4a47      	ldr	r2, [pc, #284]	@ (800accc <TIM_Base_SetConfig+0x150>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d007      	beq.n	800abc4 <TIM_Base_SetConfig+0x48>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a46      	ldr	r2, [pc, #280]	@ (800acd0 <TIM_Base_SetConfig+0x154>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d003      	beq.n	800abc4 <TIM_Base_SetConfig+0x48>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4a45      	ldr	r2, [pc, #276]	@ (800acd4 <TIM_Base_SetConfig+0x158>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d108      	bne.n	800abd6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	4313      	orrs	r3, r2
 800abd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a39      	ldr	r2, [pc, #228]	@ (800acc0 <TIM_Base_SetConfig+0x144>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d023      	beq.n	800ac26 <TIM_Base_SetConfig+0xaa>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abe4:	d01f      	beq.n	800ac26 <TIM_Base_SetConfig+0xaa>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a36      	ldr	r2, [pc, #216]	@ (800acc4 <TIM_Base_SetConfig+0x148>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d01b      	beq.n	800ac26 <TIM_Base_SetConfig+0xaa>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4a35      	ldr	r2, [pc, #212]	@ (800acc8 <TIM_Base_SetConfig+0x14c>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d017      	beq.n	800ac26 <TIM_Base_SetConfig+0xaa>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a34      	ldr	r2, [pc, #208]	@ (800accc <TIM_Base_SetConfig+0x150>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d013      	beq.n	800ac26 <TIM_Base_SetConfig+0xaa>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a33      	ldr	r2, [pc, #204]	@ (800acd0 <TIM_Base_SetConfig+0x154>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d00f      	beq.n	800ac26 <TIM_Base_SetConfig+0xaa>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a33      	ldr	r2, [pc, #204]	@ (800acd8 <TIM_Base_SetConfig+0x15c>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d00b      	beq.n	800ac26 <TIM_Base_SetConfig+0xaa>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a32      	ldr	r2, [pc, #200]	@ (800acdc <TIM_Base_SetConfig+0x160>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d007      	beq.n	800ac26 <TIM_Base_SetConfig+0xaa>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a31      	ldr	r2, [pc, #196]	@ (800ace0 <TIM_Base_SetConfig+0x164>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d003      	beq.n	800ac26 <TIM_Base_SetConfig+0xaa>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4a2c      	ldr	r2, [pc, #176]	@ (800acd4 <TIM_Base_SetConfig+0x158>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d108      	bne.n	800ac38 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	4313      	orrs	r3, r2
 800ac36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	695b      	ldr	r3, [r3, #20]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	689a      	ldr	r2, [r3, #8]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a18      	ldr	r2, [pc, #96]	@ (800acc0 <TIM_Base_SetConfig+0x144>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d013      	beq.n	800ac8c <TIM_Base_SetConfig+0x110>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4a1a      	ldr	r2, [pc, #104]	@ (800acd0 <TIM_Base_SetConfig+0x154>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d00f      	beq.n	800ac8c <TIM_Base_SetConfig+0x110>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a1a      	ldr	r2, [pc, #104]	@ (800acd8 <TIM_Base_SetConfig+0x15c>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d00b      	beq.n	800ac8c <TIM_Base_SetConfig+0x110>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a19      	ldr	r2, [pc, #100]	@ (800acdc <TIM_Base_SetConfig+0x160>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d007      	beq.n	800ac8c <TIM_Base_SetConfig+0x110>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a18      	ldr	r2, [pc, #96]	@ (800ace0 <TIM_Base_SetConfig+0x164>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d003      	beq.n	800ac8c <TIM_Base_SetConfig+0x110>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	4a13      	ldr	r2, [pc, #76]	@ (800acd4 <TIM_Base_SetConfig+0x158>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d103      	bne.n	800ac94 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	691a      	ldr	r2, [r3, #16]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2201      	movs	r2, #1
 800ac98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	f003 0301 	and.w	r3, r3, #1
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d105      	bne.n	800acb2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	691b      	ldr	r3, [r3, #16]
 800acaa:	f023 0201 	bic.w	r2, r3, #1
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	611a      	str	r2, [r3, #16]
  }
}
 800acb2:	bf00      	nop
 800acb4:	3714      	adds	r7, #20
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	40012c00 	.word	0x40012c00
 800acc4:	40000400 	.word	0x40000400
 800acc8:	40000800 	.word	0x40000800
 800accc:	40000c00 	.word	0x40000c00
 800acd0:	40013400 	.word	0x40013400
 800acd4:	40015000 	.word	0x40015000
 800acd8:	40014000 	.word	0x40014000
 800acdc:	40014400 	.word	0x40014400
 800ace0:	40014800 	.word	0x40014800

0800ace4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6a1b      	ldr	r3, [r3, #32]
 800acf8:	f023 0201 	bic.w	r2, r3, #1
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	699b      	ldr	r3, [r3, #24]
 800ad0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f023 0303 	bic.w	r3, r3, #3
 800ad1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	f023 0302 	bic.w	r3, r3, #2
 800ad30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	697a      	ldr	r2, [r7, #20]
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a30      	ldr	r2, [pc, #192]	@ (800ae00 <TIM_OC1_SetConfig+0x11c>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d013      	beq.n	800ad6c <TIM_OC1_SetConfig+0x88>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a2f      	ldr	r2, [pc, #188]	@ (800ae04 <TIM_OC1_SetConfig+0x120>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d00f      	beq.n	800ad6c <TIM_OC1_SetConfig+0x88>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a2e      	ldr	r2, [pc, #184]	@ (800ae08 <TIM_OC1_SetConfig+0x124>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d00b      	beq.n	800ad6c <TIM_OC1_SetConfig+0x88>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4a2d      	ldr	r2, [pc, #180]	@ (800ae0c <TIM_OC1_SetConfig+0x128>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d007      	beq.n	800ad6c <TIM_OC1_SetConfig+0x88>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4a2c      	ldr	r2, [pc, #176]	@ (800ae10 <TIM_OC1_SetConfig+0x12c>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d003      	beq.n	800ad6c <TIM_OC1_SetConfig+0x88>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4a2b      	ldr	r2, [pc, #172]	@ (800ae14 <TIM_OC1_SetConfig+0x130>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d10c      	bne.n	800ad86 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	f023 0308 	bic.w	r3, r3, #8
 800ad72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	68db      	ldr	r3, [r3, #12]
 800ad78:	697a      	ldr	r2, [r7, #20]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	f023 0304 	bic.w	r3, r3, #4
 800ad84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4a1d      	ldr	r2, [pc, #116]	@ (800ae00 <TIM_OC1_SetConfig+0x11c>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d013      	beq.n	800adb6 <TIM_OC1_SetConfig+0xd2>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	4a1c      	ldr	r2, [pc, #112]	@ (800ae04 <TIM_OC1_SetConfig+0x120>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d00f      	beq.n	800adb6 <TIM_OC1_SetConfig+0xd2>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4a1b      	ldr	r2, [pc, #108]	@ (800ae08 <TIM_OC1_SetConfig+0x124>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d00b      	beq.n	800adb6 <TIM_OC1_SetConfig+0xd2>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4a1a      	ldr	r2, [pc, #104]	@ (800ae0c <TIM_OC1_SetConfig+0x128>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d007      	beq.n	800adb6 <TIM_OC1_SetConfig+0xd2>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4a19      	ldr	r2, [pc, #100]	@ (800ae10 <TIM_OC1_SetConfig+0x12c>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d003      	beq.n	800adb6 <TIM_OC1_SetConfig+0xd2>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	4a18      	ldr	r2, [pc, #96]	@ (800ae14 <TIM_OC1_SetConfig+0x130>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d111      	bne.n	800adda <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800adbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800adc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	695b      	ldr	r3, [r3, #20]
 800adca:	693a      	ldr	r2, [r7, #16]
 800adcc:	4313      	orrs	r3, r2
 800adce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	699b      	ldr	r3, [r3, #24]
 800add4:	693a      	ldr	r2, [r7, #16]
 800add6:	4313      	orrs	r3, r2
 800add8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	693a      	ldr	r2, [r7, #16]
 800adde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	68fa      	ldr	r2, [r7, #12]
 800ade4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	685a      	ldr	r2, [r3, #4]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	697a      	ldr	r2, [r7, #20]
 800adf2:	621a      	str	r2, [r3, #32]
}
 800adf4:	bf00      	nop
 800adf6:	371c      	adds	r7, #28
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr
 800ae00:	40012c00 	.word	0x40012c00
 800ae04:	40013400 	.word	0x40013400
 800ae08:	40014000 	.word	0x40014000
 800ae0c:	40014400 	.word	0x40014400
 800ae10:	40014800 	.word	0x40014800
 800ae14:	40015000 	.word	0x40015000

0800ae18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b087      	sub	sp, #28
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a1b      	ldr	r3, [r3, #32]
 800ae26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6a1b      	ldr	r3, [r3, #32]
 800ae2c:	f023 0210 	bic.w	r2, r3, #16
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	699b      	ldr	r3, [r3, #24]
 800ae3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ae46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	021b      	lsls	r3, r3, #8
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	f023 0320 	bic.w	r3, r3, #32
 800ae66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	011b      	lsls	r3, r3, #4
 800ae6e:	697a      	ldr	r2, [r7, #20]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a2c      	ldr	r2, [pc, #176]	@ (800af28 <TIM_OC2_SetConfig+0x110>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d007      	beq.n	800ae8c <TIM_OC2_SetConfig+0x74>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a2b      	ldr	r2, [pc, #172]	@ (800af2c <TIM_OC2_SetConfig+0x114>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d003      	beq.n	800ae8c <TIM_OC2_SetConfig+0x74>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4a2a      	ldr	r2, [pc, #168]	@ (800af30 <TIM_OC2_SetConfig+0x118>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d10d      	bne.n	800aea8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	011b      	lsls	r3, r3, #4
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aea6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4a1f      	ldr	r2, [pc, #124]	@ (800af28 <TIM_OC2_SetConfig+0x110>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d013      	beq.n	800aed8 <TIM_OC2_SetConfig+0xc0>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a1e      	ldr	r2, [pc, #120]	@ (800af2c <TIM_OC2_SetConfig+0x114>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d00f      	beq.n	800aed8 <TIM_OC2_SetConfig+0xc0>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a1e      	ldr	r2, [pc, #120]	@ (800af34 <TIM_OC2_SetConfig+0x11c>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d00b      	beq.n	800aed8 <TIM_OC2_SetConfig+0xc0>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4a1d      	ldr	r2, [pc, #116]	@ (800af38 <TIM_OC2_SetConfig+0x120>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d007      	beq.n	800aed8 <TIM_OC2_SetConfig+0xc0>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a1c      	ldr	r2, [pc, #112]	@ (800af3c <TIM_OC2_SetConfig+0x124>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d003      	beq.n	800aed8 <TIM_OC2_SetConfig+0xc0>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a17      	ldr	r2, [pc, #92]	@ (800af30 <TIM_OC2_SetConfig+0x118>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d113      	bne.n	800af00 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aede:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aee6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	695b      	ldr	r3, [r3, #20]
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	693a      	ldr	r2, [r7, #16]
 800aef0:	4313      	orrs	r3, r2
 800aef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	699b      	ldr	r3, [r3, #24]
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	693a      	ldr	r2, [r7, #16]
 800aefc:	4313      	orrs	r3, r2
 800aefe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	693a      	ldr	r2, [r7, #16]
 800af04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	685a      	ldr	r2, [r3, #4]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	697a      	ldr	r2, [r7, #20]
 800af18:	621a      	str	r2, [r3, #32]
}
 800af1a:	bf00      	nop
 800af1c:	371c      	adds	r7, #28
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr
 800af26:	bf00      	nop
 800af28:	40012c00 	.word	0x40012c00
 800af2c:	40013400 	.word	0x40013400
 800af30:	40015000 	.word	0x40015000
 800af34:	40014000 	.word	0x40014000
 800af38:	40014400 	.word	0x40014400
 800af3c:	40014800 	.word	0x40014800

0800af40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af40:	b480      	push	{r7}
 800af42:	b087      	sub	sp, #28
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a1b      	ldr	r3, [r3, #32]
 800af4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a1b      	ldr	r3, [r3, #32]
 800af54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	69db      	ldr	r3, [r3, #28]
 800af66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f023 0303 	bic.w	r3, r3, #3
 800af7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	4313      	orrs	r3, r2
 800af84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800af8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	021b      	lsls	r3, r3, #8
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	4313      	orrs	r3, r2
 800af98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4a2b      	ldr	r2, [pc, #172]	@ (800b04c <TIM_OC3_SetConfig+0x10c>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d007      	beq.n	800afb2 <TIM_OC3_SetConfig+0x72>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	4a2a      	ldr	r2, [pc, #168]	@ (800b050 <TIM_OC3_SetConfig+0x110>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d003      	beq.n	800afb2 <TIM_OC3_SetConfig+0x72>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4a29      	ldr	r2, [pc, #164]	@ (800b054 <TIM_OC3_SetConfig+0x114>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d10d      	bne.n	800afce <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800afb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	021b      	lsls	r3, r3, #8
 800afc0:	697a      	ldr	r2, [r7, #20]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800afcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4a1e      	ldr	r2, [pc, #120]	@ (800b04c <TIM_OC3_SetConfig+0x10c>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d013      	beq.n	800affe <TIM_OC3_SetConfig+0xbe>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	4a1d      	ldr	r2, [pc, #116]	@ (800b050 <TIM_OC3_SetConfig+0x110>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d00f      	beq.n	800affe <TIM_OC3_SetConfig+0xbe>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	4a1d      	ldr	r2, [pc, #116]	@ (800b058 <TIM_OC3_SetConfig+0x118>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d00b      	beq.n	800affe <TIM_OC3_SetConfig+0xbe>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	4a1c      	ldr	r2, [pc, #112]	@ (800b05c <TIM_OC3_SetConfig+0x11c>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d007      	beq.n	800affe <TIM_OC3_SetConfig+0xbe>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	4a1b      	ldr	r2, [pc, #108]	@ (800b060 <TIM_OC3_SetConfig+0x120>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d003      	beq.n	800affe <TIM_OC3_SetConfig+0xbe>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	4a16      	ldr	r2, [pc, #88]	@ (800b054 <TIM_OC3_SetConfig+0x114>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d113      	bne.n	800b026 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b00c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	695b      	ldr	r3, [r3, #20]
 800b012:	011b      	lsls	r3, r3, #4
 800b014:	693a      	ldr	r2, [r7, #16]
 800b016:	4313      	orrs	r3, r2
 800b018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	699b      	ldr	r3, [r3, #24]
 800b01e:	011b      	lsls	r3, r3, #4
 800b020:	693a      	ldr	r2, [r7, #16]
 800b022:	4313      	orrs	r3, r2
 800b024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	685a      	ldr	r2, [r3, #4]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	697a      	ldr	r2, [r7, #20]
 800b03e:	621a      	str	r2, [r3, #32]
}
 800b040:	bf00      	nop
 800b042:	371c      	adds	r7, #28
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr
 800b04c:	40012c00 	.word	0x40012c00
 800b050:	40013400 	.word	0x40013400
 800b054:	40015000 	.word	0x40015000
 800b058:	40014000 	.word	0x40014000
 800b05c:	40014400 	.word	0x40014400
 800b060:	40014800 	.word	0x40014800

0800b064 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b064:	b480      	push	{r7}
 800b066:	b087      	sub	sp, #28
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a1b      	ldr	r3, [r3, #32]
 800b072:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a1b      	ldr	r3, [r3, #32]
 800b078:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	69db      	ldr	r3, [r3, #28]
 800b08a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b092:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b09e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	021b      	lsls	r3, r3, #8
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b0b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	031b      	lsls	r3, r3, #12
 800b0ba:	697a      	ldr	r2, [r7, #20]
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4a2c      	ldr	r2, [pc, #176]	@ (800b174 <TIM_OC4_SetConfig+0x110>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d007      	beq.n	800b0d8 <TIM_OC4_SetConfig+0x74>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	4a2b      	ldr	r2, [pc, #172]	@ (800b178 <TIM_OC4_SetConfig+0x114>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d003      	beq.n	800b0d8 <TIM_OC4_SetConfig+0x74>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	4a2a      	ldr	r2, [pc, #168]	@ (800b17c <TIM_OC4_SetConfig+0x118>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d10d      	bne.n	800b0f4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b0de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	031b      	lsls	r3, r3, #12
 800b0e6:	697a      	ldr	r2, [r7, #20]
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b0f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	4a1f      	ldr	r2, [pc, #124]	@ (800b174 <TIM_OC4_SetConfig+0x110>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d013      	beq.n	800b124 <TIM_OC4_SetConfig+0xc0>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4a1e      	ldr	r2, [pc, #120]	@ (800b178 <TIM_OC4_SetConfig+0x114>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d00f      	beq.n	800b124 <TIM_OC4_SetConfig+0xc0>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4a1e      	ldr	r2, [pc, #120]	@ (800b180 <TIM_OC4_SetConfig+0x11c>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d00b      	beq.n	800b124 <TIM_OC4_SetConfig+0xc0>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	4a1d      	ldr	r2, [pc, #116]	@ (800b184 <TIM_OC4_SetConfig+0x120>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d007      	beq.n	800b124 <TIM_OC4_SetConfig+0xc0>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	4a1c      	ldr	r2, [pc, #112]	@ (800b188 <TIM_OC4_SetConfig+0x124>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d003      	beq.n	800b124 <TIM_OC4_SetConfig+0xc0>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	4a17      	ldr	r2, [pc, #92]	@ (800b17c <TIM_OC4_SetConfig+0x118>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d113      	bne.n	800b14c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b12a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b132:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	695b      	ldr	r3, [r3, #20]
 800b138:	019b      	lsls	r3, r3, #6
 800b13a:	693a      	ldr	r2, [r7, #16]
 800b13c:	4313      	orrs	r3, r2
 800b13e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	699b      	ldr	r3, [r3, #24]
 800b144:	019b      	lsls	r3, r3, #6
 800b146:	693a      	ldr	r2, [r7, #16]
 800b148:	4313      	orrs	r3, r2
 800b14a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	693a      	ldr	r2, [r7, #16]
 800b150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	685a      	ldr	r2, [r3, #4]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	697a      	ldr	r2, [r7, #20]
 800b164:	621a      	str	r2, [r3, #32]
}
 800b166:	bf00      	nop
 800b168:	371c      	adds	r7, #28
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr
 800b172:	bf00      	nop
 800b174:	40012c00 	.word	0x40012c00
 800b178:	40013400 	.word	0x40013400
 800b17c:	40015000 	.word	0x40015000
 800b180:	40014000 	.word	0x40014000
 800b184:	40014400 	.word	0x40014400
 800b188:	40014800 	.word	0x40014800

0800b18c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b087      	sub	sp, #28
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a1b      	ldr	r3, [r3, #32]
 800b19a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6a1b      	ldr	r3, [r3, #32]
 800b1a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b1ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	68fa      	ldr	r2, [r7, #12]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b1d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	041b      	lsls	r3, r3, #16
 800b1d8:	693a      	ldr	r2, [r7, #16]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	4a19      	ldr	r2, [pc, #100]	@ (800b248 <TIM_OC5_SetConfig+0xbc>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d013      	beq.n	800b20e <TIM_OC5_SetConfig+0x82>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	4a18      	ldr	r2, [pc, #96]	@ (800b24c <TIM_OC5_SetConfig+0xc0>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d00f      	beq.n	800b20e <TIM_OC5_SetConfig+0x82>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	4a17      	ldr	r2, [pc, #92]	@ (800b250 <TIM_OC5_SetConfig+0xc4>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d00b      	beq.n	800b20e <TIM_OC5_SetConfig+0x82>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4a16      	ldr	r2, [pc, #88]	@ (800b254 <TIM_OC5_SetConfig+0xc8>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d007      	beq.n	800b20e <TIM_OC5_SetConfig+0x82>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a15      	ldr	r2, [pc, #84]	@ (800b258 <TIM_OC5_SetConfig+0xcc>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d003      	beq.n	800b20e <TIM_OC5_SetConfig+0x82>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4a14      	ldr	r2, [pc, #80]	@ (800b25c <TIM_OC5_SetConfig+0xd0>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d109      	bne.n	800b222 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b214:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	695b      	ldr	r3, [r3, #20]
 800b21a:	021b      	lsls	r3, r3, #8
 800b21c:	697a      	ldr	r2, [r7, #20]
 800b21e:	4313      	orrs	r3, r2
 800b220:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	697a      	ldr	r2, [r7, #20]
 800b226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	685a      	ldr	r2, [r3, #4]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	693a      	ldr	r2, [r7, #16]
 800b23a:	621a      	str	r2, [r3, #32]
}
 800b23c:	bf00      	nop
 800b23e:	371c      	adds	r7, #28
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr
 800b248:	40012c00 	.word	0x40012c00
 800b24c:	40013400 	.word	0x40013400
 800b250:	40014000 	.word	0x40014000
 800b254:	40014400 	.word	0x40014400
 800b258:	40014800 	.word	0x40014800
 800b25c:	40015000 	.word	0x40015000

0800b260 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b260:	b480      	push	{r7}
 800b262:	b087      	sub	sp, #28
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6a1b      	ldr	r3, [r3, #32]
 800b274:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b28e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	021b      	lsls	r3, r3, #8
 800b29a:	68fa      	ldr	r2, [r7, #12]
 800b29c:	4313      	orrs	r3, r2
 800b29e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b2a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	051b      	lsls	r3, r3, #20
 800b2ae:	693a      	ldr	r2, [r7, #16]
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	4a1a      	ldr	r2, [pc, #104]	@ (800b320 <TIM_OC6_SetConfig+0xc0>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d013      	beq.n	800b2e4 <TIM_OC6_SetConfig+0x84>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	4a19      	ldr	r2, [pc, #100]	@ (800b324 <TIM_OC6_SetConfig+0xc4>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d00f      	beq.n	800b2e4 <TIM_OC6_SetConfig+0x84>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	4a18      	ldr	r2, [pc, #96]	@ (800b328 <TIM_OC6_SetConfig+0xc8>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d00b      	beq.n	800b2e4 <TIM_OC6_SetConfig+0x84>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4a17      	ldr	r2, [pc, #92]	@ (800b32c <TIM_OC6_SetConfig+0xcc>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d007      	beq.n	800b2e4 <TIM_OC6_SetConfig+0x84>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a16      	ldr	r2, [pc, #88]	@ (800b330 <TIM_OC6_SetConfig+0xd0>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d003      	beq.n	800b2e4 <TIM_OC6_SetConfig+0x84>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	4a15      	ldr	r2, [pc, #84]	@ (800b334 <TIM_OC6_SetConfig+0xd4>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d109      	bne.n	800b2f8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b2ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	695b      	ldr	r3, [r3, #20]
 800b2f0:	029b      	lsls	r3, r3, #10
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	697a      	ldr	r2, [r7, #20]
 800b2fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	68fa      	ldr	r2, [r7, #12]
 800b302:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	685a      	ldr	r2, [r3, #4]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	693a      	ldr	r2, [r7, #16]
 800b310:	621a      	str	r2, [r3, #32]
}
 800b312:	bf00      	nop
 800b314:	371c      	adds	r7, #28
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	40012c00 	.word	0x40012c00
 800b324:	40013400 	.word	0x40013400
 800b328:	40014000 	.word	0x40014000
 800b32c:	40014400 	.word	0x40014400
 800b330:	40014800 	.word	0x40014800
 800b334:	40015000 	.word	0x40015000

0800b338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b338:	b480      	push	{r7}
 800b33a:	b087      	sub	sp, #28
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	6a1b      	ldr	r3, [r3, #32]
 800b348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	6a1b      	ldr	r3, [r3, #32]
 800b34e:	f023 0201 	bic.w	r2, r3, #1
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	699b      	ldr	r3, [r3, #24]
 800b35a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	011b      	lsls	r3, r3, #4
 800b368:	693a      	ldr	r2, [r7, #16]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	f023 030a 	bic.w	r3, r3, #10
 800b374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b376:	697a      	ldr	r2, [r7, #20]
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	693a      	ldr	r2, [r7, #16]
 800b382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	697a      	ldr	r2, [r7, #20]
 800b388:	621a      	str	r2, [r3, #32]
}
 800b38a:	bf00      	nop
 800b38c:	371c      	adds	r7, #28
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr

0800b396 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b396:	b480      	push	{r7}
 800b398:	b087      	sub	sp, #28
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	60f8      	str	r0, [r7, #12]
 800b39e:	60b9      	str	r1, [r7, #8]
 800b3a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	6a1b      	ldr	r3, [r3, #32]
 800b3a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6a1b      	ldr	r3, [r3, #32]
 800b3ac:	f023 0210 	bic.w	r2, r3, #16
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	699b      	ldr	r3, [r3, #24]
 800b3b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b3c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	031b      	lsls	r3, r3, #12
 800b3c6:	693a      	ldr	r2, [r7, #16]
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b3d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	011b      	lsls	r3, r3, #4
 800b3d8:	697a      	ldr	r2, [r7, #20]
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	693a      	ldr	r2, [r7, #16]
 800b3e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	697a      	ldr	r2, [r7, #20]
 800b3e8:	621a      	str	r2, [r3, #32]
}
 800b3ea:	bf00      	nop
 800b3ec:	371c      	adds	r7, #28
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr

0800b3f6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b3f6:	b480      	push	{r7}
 800b3f8:	b085      	sub	sp, #20
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
 800b3fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b40c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	4313      	orrs	r3, r2
 800b418:	f043 0307 	orr.w	r3, r3, #7
 800b41c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	609a      	str	r2, [r3, #8]
}
 800b424:	bf00      	nop
 800b426:	3714      	adds	r7, #20
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b430:	b480      	push	{r7}
 800b432:	b087      	sub	sp, #28
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	607a      	str	r2, [r7, #4]
 800b43c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b44a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	021a      	lsls	r2, r3, #8
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	431a      	orrs	r2, r3
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	4313      	orrs	r3, r2
 800b458:	697a      	ldr	r2, [r7, #20]
 800b45a:	4313      	orrs	r3, r2
 800b45c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	697a      	ldr	r2, [r7, #20]
 800b462:	609a      	str	r2, [r3, #8]
}
 800b464:	bf00      	nop
 800b466:	371c      	adds	r7, #28
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b470:	b480      	push	{r7}
 800b472:	b087      	sub	sp, #28
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	f003 031f 	and.w	r3, r3, #31
 800b482:	2201      	movs	r2, #1
 800b484:	fa02 f303 	lsl.w	r3, r2, r3
 800b488:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	6a1a      	ldr	r2, [r3, #32]
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	43db      	mvns	r3, r3
 800b492:	401a      	ands	r2, r3
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6a1a      	ldr	r2, [r3, #32]
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	f003 031f 	and.w	r3, r3, #31
 800b4a2:	6879      	ldr	r1, [r7, #4]
 800b4a4:	fa01 f303 	lsl.w	r3, r1, r3
 800b4a8:	431a      	orrs	r2, r3
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	621a      	str	r2, [r3, #32]
}
 800b4ae:	bf00      	nop
 800b4b0:	371c      	adds	r7, #28
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b8:	4770      	bx	lr
	...

0800b4bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d101      	bne.n	800b4d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b4d0:	2302      	movs	r3, #2
 800b4d2:	e074      	b.n	800b5be <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2202      	movs	r2, #2
 800b4e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	689b      	ldr	r3, [r3, #8]
 800b4f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a34      	ldr	r2, [pc, #208]	@ (800b5cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d009      	beq.n	800b512 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a33      	ldr	r2, [pc, #204]	@ (800b5d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d004      	beq.n	800b512 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a31      	ldr	r2, [pc, #196]	@ (800b5d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d108      	bne.n	800b524 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b518:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	68fa      	ldr	r2, [r7, #12]
 800b520:	4313      	orrs	r3, r2
 800b522:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b52a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b52e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	68fa      	ldr	r2, [r7, #12]
 800b536:	4313      	orrs	r3, r2
 800b538:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4a21      	ldr	r2, [pc, #132]	@ (800b5cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d022      	beq.n	800b592 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b554:	d01d      	beq.n	800b592 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a1f      	ldr	r2, [pc, #124]	@ (800b5d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d018      	beq.n	800b592 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a1d      	ldr	r2, [pc, #116]	@ (800b5dc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d013      	beq.n	800b592 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a1c      	ldr	r2, [pc, #112]	@ (800b5e0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d00e      	beq.n	800b592 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4a15      	ldr	r2, [pc, #84]	@ (800b5d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d009      	beq.n	800b592 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a18      	ldr	r2, [pc, #96]	@ (800b5e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d004      	beq.n	800b592 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a11      	ldr	r2, [pc, #68]	@ (800b5d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d10c      	bne.n	800b5ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b598:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	68ba      	ldr	r2, [r7, #8]
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	68ba      	ldr	r2, [r7, #8]
 800b5aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3714      	adds	r7, #20
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	40012c00 	.word	0x40012c00
 800b5d0:	40013400 	.word	0x40013400
 800b5d4:	40015000 	.word	0x40015000
 800b5d8:	40000400 	.word	0x40000400
 800b5dc:	40000800 	.word	0x40000800
 800b5e0:	40000c00 	.word	0x40000c00
 800b5e4:	40014000 	.word	0x40014000

0800b5e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d101      	bne.n	800b604 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b600:	2302      	movs	r3, #2
 800b602:	e078      	b.n	800b6f6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2201      	movs	r2, #1
 800b608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	68db      	ldr	r3, [r3, #12]
 800b616:	4313      	orrs	r3, r2
 800b618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	4313      	orrs	r3, r2
 800b626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	4313      	orrs	r3, r2
 800b634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4313      	orrs	r3, r2
 800b642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	691b      	ldr	r3, [r3, #16]
 800b64e:	4313      	orrs	r3, r2
 800b650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	695b      	ldr	r3, [r3, #20]
 800b65c:	4313      	orrs	r3, r2
 800b65e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b66a:	4313      	orrs	r3, r2
 800b66c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	699b      	ldr	r3, [r3, #24]
 800b678:	041b      	lsls	r3, r3, #16
 800b67a:	4313      	orrs	r3, r2
 800b67c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	69db      	ldr	r3, [r3, #28]
 800b688:	4313      	orrs	r3, r2
 800b68a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a1c      	ldr	r2, [pc, #112]	@ (800b704 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d009      	beq.n	800b6aa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a1b      	ldr	r2, [pc, #108]	@ (800b708 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d004      	beq.n	800b6aa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a19      	ldr	r2, [pc, #100]	@ (800b70c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d11c      	bne.n	800b6e4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6b4:	051b      	lsls	r3, r3, #20
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	6a1b      	ldr	r3, [r3, #32]
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3714      	adds	r7, #20
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	40012c00 	.word	0x40012c00
 800b708:	40013400 	.word	0x40013400
 800b70c:	40015000 	.word	0x40015000

0800b710 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b718:	bf00      	nop
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b72c:	bf00      	nop
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b740:	bf00      	nop
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b768:	bf00      	nop
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b77c:	bf00      	nop
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b790:	bf00      	nop
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d101      	bne.n	800b7ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e042      	b.n	800b834 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d106      	bne.n	800b7c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f7f8 fdb1 	bl	8004328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2224      	movs	r2, #36	@ 0x24
 800b7ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f022 0201 	bic.w	r2, r2, #1
 800b7dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d002      	beq.n	800b7ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 fb24 	bl	800be34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 f825 	bl	800b83c <UART_SetConfig>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d101      	bne.n	800b7fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	e01b      	b.n	800b834 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	685a      	ldr	r2, [r3, #4]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b80a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	689a      	ldr	r2, [r3, #8]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b81a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f042 0201 	orr.w	r2, r2, #1
 800b82a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 fba3 	bl	800bf78 <UART_CheckIdleState>
 800b832:	4603      	mov	r3, r0
}
 800b834:	4618      	mov	r0, r3
 800b836:	3708      	adds	r7, #8
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b83c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b840:	b08c      	sub	sp, #48	@ 0x30
 800b842:	af00      	add	r7, sp, #0
 800b844:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b846:	2300      	movs	r3, #0
 800b848:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	689a      	ldr	r2, [r3, #8]
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	691b      	ldr	r3, [r3, #16]
 800b854:	431a      	orrs	r2, r3
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	695b      	ldr	r3, [r3, #20]
 800b85a:	431a      	orrs	r2, r3
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	69db      	ldr	r3, [r3, #28]
 800b860:	4313      	orrs	r3, r2
 800b862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	4baa      	ldr	r3, [pc, #680]	@ (800bb14 <UART_SetConfig+0x2d8>)
 800b86c:	4013      	ands	r3, r2
 800b86e:	697a      	ldr	r2, [r7, #20]
 800b870:	6812      	ldr	r2, [r2, #0]
 800b872:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b874:	430b      	orrs	r3, r1
 800b876:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	68da      	ldr	r2, [r3, #12]
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	430a      	orrs	r2, r1
 800b88c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	699b      	ldr	r3, [r3, #24]
 800b892:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a9f      	ldr	r2, [pc, #636]	@ (800bb18 <UART_SetConfig+0x2dc>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d004      	beq.n	800b8a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	6a1b      	ldr	r3, [r3, #32]
 800b8a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	689b      	ldr	r3, [r3, #8]
 800b8ae:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b8b2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b8b6:	697a      	ldr	r2, [r7, #20]
 800b8b8:	6812      	ldr	r2, [r2, #0]
 800b8ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8bc:	430b      	orrs	r3, r1
 800b8be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8c6:	f023 010f 	bic.w	r1, r3, #15
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	430a      	orrs	r2, r1
 800b8d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a90      	ldr	r2, [pc, #576]	@ (800bb1c <UART_SetConfig+0x2e0>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d125      	bne.n	800b92c <UART_SetConfig+0xf0>
 800b8e0:	4b8f      	ldr	r3, [pc, #572]	@ (800bb20 <UART_SetConfig+0x2e4>)
 800b8e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8e6:	f003 0303 	and.w	r3, r3, #3
 800b8ea:	2b03      	cmp	r3, #3
 800b8ec:	d81a      	bhi.n	800b924 <UART_SetConfig+0xe8>
 800b8ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b8f4 <UART_SetConfig+0xb8>)
 800b8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f4:	0800b905 	.word	0x0800b905
 800b8f8:	0800b915 	.word	0x0800b915
 800b8fc:	0800b90d 	.word	0x0800b90d
 800b900:	0800b91d 	.word	0x0800b91d
 800b904:	2301      	movs	r3, #1
 800b906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b90a:	e116      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800b90c:	2302      	movs	r3, #2
 800b90e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b912:	e112      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800b914:	2304      	movs	r3, #4
 800b916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b91a:	e10e      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800b91c:	2308      	movs	r3, #8
 800b91e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b922:	e10a      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800b924:	2310      	movs	r3, #16
 800b926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b92a:	e106      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a7c      	ldr	r2, [pc, #496]	@ (800bb24 <UART_SetConfig+0x2e8>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d138      	bne.n	800b9a8 <UART_SetConfig+0x16c>
 800b936:	4b7a      	ldr	r3, [pc, #488]	@ (800bb20 <UART_SetConfig+0x2e4>)
 800b938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b93c:	f003 030c 	and.w	r3, r3, #12
 800b940:	2b0c      	cmp	r3, #12
 800b942:	d82d      	bhi.n	800b9a0 <UART_SetConfig+0x164>
 800b944:	a201      	add	r2, pc, #4	@ (adr r2, 800b94c <UART_SetConfig+0x110>)
 800b946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b94a:	bf00      	nop
 800b94c:	0800b981 	.word	0x0800b981
 800b950:	0800b9a1 	.word	0x0800b9a1
 800b954:	0800b9a1 	.word	0x0800b9a1
 800b958:	0800b9a1 	.word	0x0800b9a1
 800b95c:	0800b991 	.word	0x0800b991
 800b960:	0800b9a1 	.word	0x0800b9a1
 800b964:	0800b9a1 	.word	0x0800b9a1
 800b968:	0800b9a1 	.word	0x0800b9a1
 800b96c:	0800b989 	.word	0x0800b989
 800b970:	0800b9a1 	.word	0x0800b9a1
 800b974:	0800b9a1 	.word	0x0800b9a1
 800b978:	0800b9a1 	.word	0x0800b9a1
 800b97c:	0800b999 	.word	0x0800b999
 800b980:	2300      	movs	r3, #0
 800b982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b986:	e0d8      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800b988:	2302      	movs	r3, #2
 800b98a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b98e:	e0d4      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800b990:	2304      	movs	r3, #4
 800b992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b996:	e0d0      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800b998:	2308      	movs	r3, #8
 800b99a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b99e:	e0cc      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800b9a0:	2310      	movs	r3, #16
 800b9a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9a6:	e0c8      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a5e      	ldr	r2, [pc, #376]	@ (800bb28 <UART_SetConfig+0x2ec>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d125      	bne.n	800b9fe <UART_SetConfig+0x1c2>
 800b9b2:	4b5b      	ldr	r3, [pc, #364]	@ (800bb20 <UART_SetConfig+0x2e4>)
 800b9b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b9bc:	2b30      	cmp	r3, #48	@ 0x30
 800b9be:	d016      	beq.n	800b9ee <UART_SetConfig+0x1b2>
 800b9c0:	2b30      	cmp	r3, #48	@ 0x30
 800b9c2:	d818      	bhi.n	800b9f6 <UART_SetConfig+0x1ba>
 800b9c4:	2b20      	cmp	r3, #32
 800b9c6:	d00a      	beq.n	800b9de <UART_SetConfig+0x1a2>
 800b9c8:	2b20      	cmp	r3, #32
 800b9ca:	d814      	bhi.n	800b9f6 <UART_SetConfig+0x1ba>
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d002      	beq.n	800b9d6 <UART_SetConfig+0x19a>
 800b9d0:	2b10      	cmp	r3, #16
 800b9d2:	d008      	beq.n	800b9e6 <UART_SetConfig+0x1aa>
 800b9d4:	e00f      	b.n	800b9f6 <UART_SetConfig+0x1ba>
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9dc:	e0ad      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800b9de:	2302      	movs	r3, #2
 800b9e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9e4:	e0a9      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800b9e6:	2304      	movs	r3, #4
 800b9e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9ec:	e0a5      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800b9ee:	2308      	movs	r3, #8
 800b9f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9f4:	e0a1      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800b9f6:	2310      	movs	r3, #16
 800b9f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9fc:	e09d      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a4a      	ldr	r2, [pc, #296]	@ (800bb2c <UART_SetConfig+0x2f0>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d125      	bne.n	800ba54 <UART_SetConfig+0x218>
 800ba08:	4b45      	ldr	r3, [pc, #276]	@ (800bb20 <UART_SetConfig+0x2e4>)
 800ba0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba0e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ba12:	2bc0      	cmp	r3, #192	@ 0xc0
 800ba14:	d016      	beq.n	800ba44 <UART_SetConfig+0x208>
 800ba16:	2bc0      	cmp	r3, #192	@ 0xc0
 800ba18:	d818      	bhi.n	800ba4c <UART_SetConfig+0x210>
 800ba1a:	2b80      	cmp	r3, #128	@ 0x80
 800ba1c:	d00a      	beq.n	800ba34 <UART_SetConfig+0x1f8>
 800ba1e:	2b80      	cmp	r3, #128	@ 0x80
 800ba20:	d814      	bhi.n	800ba4c <UART_SetConfig+0x210>
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d002      	beq.n	800ba2c <UART_SetConfig+0x1f0>
 800ba26:	2b40      	cmp	r3, #64	@ 0x40
 800ba28:	d008      	beq.n	800ba3c <UART_SetConfig+0x200>
 800ba2a:	e00f      	b.n	800ba4c <UART_SetConfig+0x210>
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba32:	e082      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800ba34:	2302      	movs	r3, #2
 800ba36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba3a:	e07e      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800ba3c:	2304      	movs	r3, #4
 800ba3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba42:	e07a      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800ba44:	2308      	movs	r3, #8
 800ba46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba4a:	e076      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800ba4c:	2310      	movs	r3, #16
 800ba4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba52:	e072      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a35      	ldr	r2, [pc, #212]	@ (800bb30 <UART_SetConfig+0x2f4>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d12a      	bne.n	800bab4 <UART_SetConfig+0x278>
 800ba5e:	4b30      	ldr	r3, [pc, #192]	@ (800bb20 <UART_SetConfig+0x2e4>)
 800ba60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba6c:	d01a      	beq.n	800baa4 <UART_SetConfig+0x268>
 800ba6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba72:	d81b      	bhi.n	800baac <UART_SetConfig+0x270>
 800ba74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba78:	d00c      	beq.n	800ba94 <UART_SetConfig+0x258>
 800ba7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba7e:	d815      	bhi.n	800baac <UART_SetConfig+0x270>
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d003      	beq.n	800ba8c <UART_SetConfig+0x250>
 800ba84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba88:	d008      	beq.n	800ba9c <UART_SetConfig+0x260>
 800ba8a:	e00f      	b.n	800baac <UART_SetConfig+0x270>
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba92:	e052      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800ba94:	2302      	movs	r3, #2
 800ba96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba9a:	e04e      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800ba9c:	2304      	movs	r3, #4
 800ba9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baa2:	e04a      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800baa4:	2308      	movs	r3, #8
 800baa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baaa:	e046      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800baac:	2310      	movs	r3, #16
 800baae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bab2:	e042      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a17      	ldr	r2, [pc, #92]	@ (800bb18 <UART_SetConfig+0x2dc>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d13a      	bne.n	800bb34 <UART_SetConfig+0x2f8>
 800babe:	4b18      	ldr	r3, [pc, #96]	@ (800bb20 <UART_SetConfig+0x2e4>)
 800bac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bac4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bac8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bacc:	d01a      	beq.n	800bb04 <UART_SetConfig+0x2c8>
 800bace:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bad2:	d81b      	bhi.n	800bb0c <UART_SetConfig+0x2d0>
 800bad4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bad8:	d00c      	beq.n	800baf4 <UART_SetConfig+0x2b8>
 800bada:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bade:	d815      	bhi.n	800bb0c <UART_SetConfig+0x2d0>
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d003      	beq.n	800baec <UART_SetConfig+0x2b0>
 800bae4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bae8:	d008      	beq.n	800bafc <UART_SetConfig+0x2c0>
 800baea:	e00f      	b.n	800bb0c <UART_SetConfig+0x2d0>
 800baec:	2300      	movs	r3, #0
 800baee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baf2:	e022      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800baf4:	2302      	movs	r3, #2
 800baf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bafa:	e01e      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800bafc:	2304      	movs	r3, #4
 800bafe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb02:	e01a      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800bb04:	2308      	movs	r3, #8
 800bb06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb0a:	e016      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800bb0c:	2310      	movs	r3, #16
 800bb0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb12:	e012      	b.n	800bb3a <UART_SetConfig+0x2fe>
 800bb14:	cfff69f3 	.word	0xcfff69f3
 800bb18:	40008000 	.word	0x40008000
 800bb1c:	40013800 	.word	0x40013800
 800bb20:	40021000 	.word	0x40021000
 800bb24:	40004400 	.word	0x40004400
 800bb28:	40004800 	.word	0x40004800
 800bb2c:	40004c00 	.word	0x40004c00
 800bb30:	40005000 	.word	0x40005000
 800bb34:	2310      	movs	r3, #16
 800bb36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4aae      	ldr	r2, [pc, #696]	@ (800bdf8 <UART_SetConfig+0x5bc>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	f040 8097 	bne.w	800bc74 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bb46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bb4a:	2b08      	cmp	r3, #8
 800bb4c:	d823      	bhi.n	800bb96 <UART_SetConfig+0x35a>
 800bb4e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb54 <UART_SetConfig+0x318>)
 800bb50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb54:	0800bb79 	.word	0x0800bb79
 800bb58:	0800bb97 	.word	0x0800bb97
 800bb5c:	0800bb81 	.word	0x0800bb81
 800bb60:	0800bb97 	.word	0x0800bb97
 800bb64:	0800bb87 	.word	0x0800bb87
 800bb68:	0800bb97 	.word	0x0800bb97
 800bb6c:	0800bb97 	.word	0x0800bb97
 800bb70:	0800bb97 	.word	0x0800bb97
 800bb74:	0800bb8f 	.word	0x0800bb8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb78:	f7fd fec6 	bl	8009908 <HAL_RCC_GetPCLK1Freq>
 800bb7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb7e:	e010      	b.n	800bba2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb80:	4b9e      	ldr	r3, [pc, #632]	@ (800bdfc <UART_SetConfig+0x5c0>)
 800bb82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb84:	e00d      	b.n	800bba2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb86:	f7fd fe51 	bl	800982c <HAL_RCC_GetSysClockFreq>
 800bb8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb8c:	e009      	b.n	800bba2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb94:	e005      	b.n	800bba2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800bb96:	2300      	movs	r3, #0
 800bb98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bba0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f000 8130 	beq.w	800be0a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbae:	4a94      	ldr	r2, [pc, #592]	@ (800be00 <UART_SetConfig+0x5c4>)
 800bbb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbbc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	685a      	ldr	r2, [r3, #4]
 800bbc2:	4613      	mov	r3, r2
 800bbc4:	005b      	lsls	r3, r3, #1
 800bbc6:	4413      	add	r3, r2
 800bbc8:	69ba      	ldr	r2, [r7, #24]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d305      	bcc.n	800bbda <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbd4:	69ba      	ldr	r2, [r7, #24]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d903      	bls.n	800bbe2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bbe0:	e113      	b.n	800be0a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	60bb      	str	r3, [r7, #8]
 800bbe8:	60fa      	str	r2, [r7, #12]
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbee:	4a84      	ldr	r2, [pc, #528]	@ (800be00 <UART_SetConfig+0x5c4>)
 800bbf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	603b      	str	r3, [r7, #0]
 800bbfa:	607a      	str	r2, [r7, #4]
 800bbfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bc04:	f7f5 f868 	bl	8000cd8 <__aeabi_uldivmod>
 800bc08:	4602      	mov	r2, r0
 800bc0a:	460b      	mov	r3, r1
 800bc0c:	4610      	mov	r0, r2
 800bc0e:	4619      	mov	r1, r3
 800bc10:	f04f 0200 	mov.w	r2, #0
 800bc14:	f04f 0300 	mov.w	r3, #0
 800bc18:	020b      	lsls	r3, r1, #8
 800bc1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bc1e:	0202      	lsls	r2, r0, #8
 800bc20:	6979      	ldr	r1, [r7, #20]
 800bc22:	6849      	ldr	r1, [r1, #4]
 800bc24:	0849      	lsrs	r1, r1, #1
 800bc26:	2000      	movs	r0, #0
 800bc28:	460c      	mov	r4, r1
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	eb12 0804 	adds.w	r8, r2, r4
 800bc30:	eb43 0905 	adc.w	r9, r3, r5
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	469a      	mov	sl, r3
 800bc3c:	4693      	mov	fp, r2
 800bc3e:	4652      	mov	r2, sl
 800bc40:	465b      	mov	r3, fp
 800bc42:	4640      	mov	r0, r8
 800bc44:	4649      	mov	r1, r9
 800bc46:	f7f5 f847 	bl	8000cd8 <__aeabi_uldivmod>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	4613      	mov	r3, r2
 800bc50:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc52:	6a3b      	ldr	r3, [r7, #32]
 800bc54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc58:	d308      	bcc.n	800bc6c <UART_SetConfig+0x430>
 800bc5a:	6a3b      	ldr	r3, [r7, #32]
 800bc5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc60:	d204      	bcs.n	800bc6c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	6a3a      	ldr	r2, [r7, #32]
 800bc68:	60da      	str	r2, [r3, #12]
 800bc6a:	e0ce      	b.n	800be0a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bc72:	e0ca      	b.n	800be0a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	69db      	ldr	r3, [r3, #28]
 800bc78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc7c:	d166      	bne.n	800bd4c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800bc7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bc82:	2b08      	cmp	r3, #8
 800bc84:	d827      	bhi.n	800bcd6 <UART_SetConfig+0x49a>
 800bc86:	a201      	add	r2, pc, #4	@ (adr r2, 800bc8c <UART_SetConfig+0x450>)
 800bc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc8c:	0800bcb1 	.word	0x0800bcb1
 800bc90:	0800bcb9 	.word	0x0800bcb9
 800bc94:	0800bcc1 	.word	0x0800bcc1
 800bc98:	0800bcd7 	.word	0x0800bcd7
 800bc9c:	0800bcc7 	.word	0x0800bcc7
 800bca0:	0800bcd7 	.word	0x0800bcd7
 800bca4:	0800bcd7 	.word	0x0800bcd7
 800bca8:	0800bcd7 	.word	0x0800bcd7
 800bcac:	0800bccf 	.word	0x0800bccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bcb0:	f7fd fe2a 	bl	8009908 <HAL_RCC_GetPCLK1Freq>
 800bcb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bcb6:	e014      	b.n	800bce2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bcb8:	f7fd fe3c 	bl	8009934 <HAL_RCC_GetPCLK2Freq>
 800bcbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bcbe:	e010      	b.n	800bce2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bcc0:	4b4e      	ldr	r3, [pc, #312]	@ (800bdfc <UART_SetConfig+0x5c0>)
 800bcc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bcc4:	e00d      	b.n	800bce2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bcc6:	f7fd fdb1 	bl	800982c <HAL_RCC_GetSysClockFreq>
 800bcca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bccc:	e009      	b.n	800bce2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bcd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bcd4:	e005      	b.n	800bce2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bce0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f000 8090 	beq.w	800be0a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcee:	4a44      	ldr	r2, [pc, #272]	@ (800be00 <UART_SetConfig+0x5c4>)
 800bcf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcfc:	005a      	lsls	r2, r3, #1
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	085b      	lsrs	r3, r3, #1
 800bd04:	441a      	add	r2, r3
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd10:	6a3b      	ldr	r3, [r7, #32]
 800bd12:	2b0f      	cmp	r3, #15
 800bd14:	d916      	bls.n	800bd44 <UART_SetConfig+0x508>
 800bd16:	6a3b      	ldr	r3, [r7, #32]
 800bd18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd1c:	d212      	bcs.n	800bd44 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd1e:	6a3b      	ldr	r3, [r7, #32]
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	f023 030f 	bic.w	r3, r3, #15
 800bd26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd28:	6a3b      	ldr	r3, [r7, #32]
 800bd2a:	085b      	lsrs	r3, r3, #1
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	f003 0307 	and.w	r3, r3, #7
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	8bfb      	ldrh	r3, [r7, #30]
 800bd36:	4313      	orrs	r3, r2
 800bd38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	8bfa      	ldrh	r2, [r7, #30]
 800bd40:	60da      	str	r2, [r3, #12]
 800bd42:	e062      	b.n	800be0a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bd44:	2301      	movs	r3, #1
 800bd46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bd4a:	e05e      	b.n	800be0a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd4c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd50:	2b08      	cmp	r3, #8
 800bd52:	d828      	bhi.n	800bda6 <UART_SetConfig+0x56a>
 800bd54:	a201      	add	r2, pc, #4	@ (adr r2, 800bd5c <UART_SetConfig+0x520>)
 800bd56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd5a:	bf00      	nop
 800bd5c:	0800bd81 	.word	0x0800bd81
 800bd60:	0800bd89 	.word	0x0800bd89
 800bd64:	0800bd91 	.word	0x0800bd91
 800bd68:	0800bda7 	.word	0x0800bda7
 800bd6c:	0800bd97 	.word	0x0800bd97
 800bd70:	0800bda7 	.word	0x0800bda7
 800bd74:	0800bda7 	.word	0x0800bda7
 800bd78:	0800bda7 	.word	0x0800bda7
 800bd7c:	0800bd9f 	.word	0x0800bd9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd80:	f7fd fdc2 	bl	8009908 <HAL_RCC_GetPCLK1Freq>
 800bd84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd86:	e014      	b.n	800bdb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd88:	f7fd fdd4 	bl	8009934 <HAL_RCC_GetPCLK2Freq>
 800bd8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd8e:	e010      	b.n	800bdb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd90:	4b1a      	ldr	r3, [pc, #104]	@ (800bdfc <UART_SetConfig+0x5c0>)
 800bd92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bd94:	e00d      	b.n	800bdb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd96:	f7fd fd49 	bl	800982c <HAL_RCC_GetSysClockFreq>
 800bd9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd9c:	e009      	b.n	800bdb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bda2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bda4:	e005      	b.n	800bdb2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bda6:	2300      	movs	r3, #0
 800bda8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bdb0:	bf00      	nop
    }

    if (pclk != 0U)
 800bdb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d028      	beq.n	800be0a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdbc:	4a10      	ldr	r2, [pc, #64]	@ (800be00 <UART_SetConfig+0x5c4>)
 800bdbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc6:	fbb3 f2f2 	udiv	r2, r3, r2
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	085b      	lsrs	r3, r3, #1
 800bdd0:	441a      	add	r2, r3
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bddc:	6a3b      	ldr	r3, [r7, #32]
 800bdde:	2b0f      	cmp	r3, #15
 800bde0:	d910      	bls.n	800be04 <UART_SetConfig+0x5c8>
 800bde2:	6a3b      	ldr	r3, [r7, #32]
 800bde4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bde8:	d20c      	bcs.n	800be04 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bdea:	6a3b      	ldr	r3, [r7, #32]
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	60da      	str	r2, [r3, #12]
 800bdf4:	e009      	b.n	800be0a <UART_SetConfig+0x5ce>
 800bdf6:	bf00      	nop
 800bdf8:	40008000 	.word	0x40008000
 800bdfc:	00f42400 	.word	0x00f42400
 800be00:	08017000 	.word	0x08017000
      }
      else
      {
        ret = HAL_ERROR;
 800be04:	2301      	movs	r3, #1
 800be06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	2201      	movs	r2, #1
 800be0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	2201      	movs	r2, #1
 800be16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	2200      	movs	r2, #0
 800be1e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	2200      	movs	r2, #0
 800be24:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800be26:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3730      	adds	r7, #48	@ 0x30
 800be2e:	46bd      	mov	sp, r7
 800be30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800be34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be40:	f003 0308 	and.w	r3, r3, #8
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00a      	beq.n	800be5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	430a      	orrs	r2, r1
 800be5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be62:	f003 0301 	and.w	r3, r3, #1
 800be66:	2b00      	cmp	r3, #0
 800be68:	d00a      	beq.n	800be80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	430a      	orrs	r2, r1
 800be7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be84:	f003 0302 	and.w	r3, r3, #2
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00a      	beq.n	800bea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	430a      	orrs	r2, r1
 800bea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bea6:	f003 0304 	and.w	r3, r3, #4
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00a      	beq.n	800bec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	430a      	orrs	r2, r1
 800bec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bec8:	f003 0310 	and.w	r3, r3, #16
 800becc:	2b00      	cmp	r3, #0
 800bece:	d00a      	beq.n	800bee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	689b      	ldr	r3, [r3, #8]
 800bed6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	430a      	orrs	r2, r1
 800bee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beea:	f003 0320 	and.w	r3, r3, #32
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00a      	beq.n	800bf08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	430a      	orrs	r2, r1
 800bf06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d01a      	beq.n	800bf4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	430a      	orrs	r2, r1
 800bf28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf32:	d10a      	bne.n	800bf4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	430a      	orrs	r2, r1
 800bf48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00a      	beq.n	800bf6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	430a      	orrs	r2, r1
 800bf6a:	605a      	str	r2, [r3, #4]
  }
}
 800bf6c:	bf00      	nop
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b098      	sub	sp, #96	@ 0x60
 800bf7c:	af02      	add	r7, sp, #8
 800bf7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2200      	movs	r2, #0
 800bf84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf88:	f7f8 fc16 	bl	80047b8 <HAL_GetTick>
 800bf8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f003 0308 	and.w	r3, r3, #8
 800bf98:	2b08      	cmp	r3, #8
 800bf9a:	d12f      	bne.n	800bffc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bfa0:	9300      	str	r3, [sp, #0]
 800bfa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 f88e 	bl	800c0cc <UART_WaitOnFlagUntilTimeout>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d022      	beq.n	800bffc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfbe:	e853 3f00 	ldrex	r3, [r3]
 800bfc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bfc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bfca:	653b      	str	r3, [r7, #80]	@ 0x50
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfd4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfd6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bfda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfdc:	e841 2300 	strex	r3, r2, [r1]
 800bfe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bfe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d1e6      	bne.n	800bfb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2220      	movs	r2, #32
 800bfec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bff8:	2303      	movs	r3, #3
 800bffa:	e063      	b.n	800c0c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f003 0304 	and.w	r3, r3, #4
 800c006:	2b04      	cmp	r3, #4
 800c008:	d149      	bne.n	800c09e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c00a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c00e:	9300      	str	r3, [sp, #0]
 800c010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c012:	2200      	movs	r2, #0
 800c014:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 f857 	bl	800c0cc <UART_WaitOnFlagUntilTimeout>
 800c01e:	4603      	mov	r3, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	d03c      	beq.n	800c09e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c02c:	e853 3f00 	ldrex	r3, [r3]
 800c030:	623b      	str	r3, [r7, #32]
   return(result);
 800c032:	6a3b      	ldr	r3, [r7, #32]
 800c034:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c038:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	461a      	mov	r2, r3
 800c040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c042:	633b      	str	r3, [r7, #48]	@ 0x30
 800c044:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c046:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c04a:	e841 2300 	strex	r3, r2, [r1]
 800c04e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c052:	2b00      	cmp	r3, #0
 800c054:	d1e6      	bne.n	800c024 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	3308      	adds	r3, #8
 800c05c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	e853 3f00 	ldrex	r3, [r3]
 800c064:	60fb      	str	r3, [r7, #12]
   return(result);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f023 0301 	bic.w	r3, r3, #1
 800c06c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	3308      	adds	r3, #8
 800c074:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c076:	61fa      	str	r2, [r7, #28]
 800c078:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c07a:	69b9      	ldr	r1, [r7, #24]
 800c07c:	69fa      	ldr	r2, [r7, #28]
 800c07e:	e841 2300 	strex	r3, r2, [r1]
 800c082:	617b      	str	r3, [r7, #20]
   return(result);
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d1e5      	bne.n	800c056 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2220      	movs	r2, #32
 800c08e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2200      	movs	r2, #0
 800c096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c09a:	2303      	movs	r3, #3
 800c09c:	e012      	b.n	800c0c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2220      	movs	r2, #32
 800c0a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2220      	movs	r2, #32
 800c0aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c0c2:	2300      	movs	r3, #0
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3758      	adds	r7, #88	@ 0x58
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	603b      	str	r3, [r7, #0]
 800c0d8:	4613      	mov	r3, r2
 800c0da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0dc:	e04f      	b.n	800c17e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0de:	69bb      	ldr	r3, [r7, #24]
 800c0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e4:	d04b      	beq.n	800c17e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0e6:	f7f8 fb67 	bl	80047b8 <HAL_GetTick>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	1ad3      	subs	r3, r2, r3
 800c0f0:	69ba      	ldr	r2, [r7, #24]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d302      	bcc.n	800c0fc <UART_WaitOnFlagUntilTimeout+0x30>
 800c0f6:	69bb      	ldr	r3, [r7, #24]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d101      	bne.n	800c100 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c0fc:	2303      	movs	r3, #3
 800c0fe:	e04e      	b.n	800c19e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f003 0304 	and.w	r3, r3, #4
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d037      	beq.n	800c17e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	2b80      	cmp	r3, #128	@ 0x80
 800c112:	d034      	beq.n	800c17e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	2b40      	cmp	r3, #64	@ 0x40
 800c118:	d031      	beq.n	800c17e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	69db      	ldr	r3, [r3, #28]
 800c120:	f003 0308 	and.w	r3, r3, #8
 800c124:	2b08      	cmp	r3, #8
 800c126:	d110      	bne.n	800c14a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2208      	movs	r2, #8
 800c12e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c130:	68f8      	ldr	r0, [r7, #12]
 800c132:	f000 f838 	bl	800c1a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2208      	movs	r2, #8
 800c13a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2200      	movs	r2, #0
 800c142:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c146:	2301      	movs	r3, #1
 800c148:	e029      	b.n	800c19e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	69db      	ldr	r3, [r3, #28]
 800c150:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c154:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c158:	d111      	bne.n	800c17e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f000 f81e 	bl	800c1a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2220      	movs	r2, #32
 800c16e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2200      	movs	r2, #0
 800c176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c17a:	2303      	movs	r3, #3
 800c17c:	e00f      	b.n	800c19e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	69da      	ldr	r2, [r3, #28]
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	4013      	ands	r3, r2
 800c188:	68ba      	ldr	r2, [r7, #8]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	bf0c      	ite	eq
 800c18e:	2301      	moveq	r3, #1
 800c190:	2300      	movne	r3, #0
 800c192:	b2db      	uxtb	r3, r3
 800c194:	461a      	mov	r2, r3
 800c196:	79fb      	ldrb	r3, [r7, #7]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d0a0      	beq.n	800c0de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c19c:	2300      	movs	r3, #0
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}

0800c1a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c1a6:	b480      	push	{r7}
 800c1a8:	b095      	sub	sp, #84	@ 0x54
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1b6:	e853 3f00 	ldrex	r3, [r3]
 800c1ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c1c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800c1ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c1d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c1d4:	e841 2300 	strex	r3, r2, [r1]
 800c1d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d1e6      	bne.n	800c1ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	3308      	adds	r3, #8
 800c1e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e8:	6a3b      	ldr	r3, [r7, #32]
 800c1ea:	e853 3f00 	ldrex	r3, [r3]
 800c1ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c1f6:	f023 0301 	bic.w	r3, r3, #1
 800c1fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	3308      	adds	r3, #8
 800c202:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c204:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c206:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c208:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c20a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c20c:	e841 2300 	strex	r3, r2, [r1]
 800c210:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c214:	2b00      	cmp	r3, #0
 800c216:	d1e3      	bne.n	800c1e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d118      	bne.n	800c252 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	e853 3f00 	ldrex	r3, [r3]
 800c22c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	f023 0310 	bic.w	r3, r3, #16
 800c234:	647b      	str	r3, [r7, #68]	@ 0x44
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	461a      	mov	r2, r3
 800c23c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c23e:	61bb      	str	r3, [r7, #24]
 800c240:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c242:	6979      	ldr	r1, [r7, #20]
 800c244:	69ba      	ldr	r2, [r7, #24]
 800c246:	e841 2300 	strex	r3, r2, [r1]
 800c24a:	613b      	str	r3, [r7, #16]
   return(result);
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d1e6      	bne.n	800c220 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2220      	movs	r2, #32
 800c256:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c266:	bf00      	nop
 800c268:	3754      	adds	r7, #84	@ 0x54
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr

0800c272 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c272:	b480      	push	{r7}
 800c274:	b085      	sub	sp, #20
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c280:	2b01      	cmp	r3, #1
 800c282:	d101      	bne.n	800c288 <HAL_UARTEx_DisableFifoMode+0x16>
 800c284:	2302      	movs	r3, #2
 800c286:	e027      	b.n	800c2d8 <HAL_UARTEx_DisableFifoMode+0x66>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2201      	movs	r2, #1
 800c28c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2224      	movs	r2, #36	@ 0x24
 800c294:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	681a      	ldr	r2, [r3, #0]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f022 0201 	bic.w	r2, r2, #1
 800c2ae:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c2b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	68fa      	ldr	r2, [r7, #12]
 800c2c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2220      	movs	r2, #32
 800c2ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c2d6:	2300      	movs	r3, #0
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3714      	adds	r7, #20
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b084      	sub	sp, #16
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d101      	bne.n	800c2fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c2f8:	2302      	movs	r3, #2
 800c2fa:	e02d      	b.n	800c358 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2201      	movs	r2, #1
 800c300:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2224      	movs	r2, #36	@ 0x24
 800c308:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f022 0201 	bic.w	r2, r2, #1
 800c322:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	683a      	ldr	r2, [r7, #0]
 800c334:	430a      	orrs	r2, r1
 800c336:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 f84f 	bl	800c3dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	68fa      	ldr	r2, [r7, #12]
 800c344:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2220      	movs	r2, #32
 800c34a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2200      	movs	r2, #0
 800c352:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c370:	2b01      	cmp	r3, #1
 800c372:	d101      	bne.n	800c378 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c374:	2302      	movs	r3, #2
 800c376:	e02d      	b.n	800c3d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2201      	movs	r2, #1
 800c37c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2224      	movs	r2, #36	@ 0x24
 800c384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f022 0201 	bic.w	r2, r2, #1
 800c39e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	689b      	ldr	r3, [r3, #8]
 800c3a6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	683a      	ldr	r2, [r7, #0]
 800c3b0:	430a      	orrs	r2, r1
 800c3b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 f811 	bl	800c3dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	68fa      	ldr	r2, [r7, #12]
 800c3c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2220      	movs	r2, #32
 800c3c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3d2:	2300      	movs	r3, #0
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d108      	bne.n	800c3fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c3fc:	e031      	b.n	800c462 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c3fe:	2308      	movs	r3, #8
 800c400:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c402:	2308      	movs	r3, #8
 800c404:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	0e5b      	lsrs	r3, r3, #25
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	f003 0307 	and.w	r3, r3, #7
 800c414:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	0f5b      	lsrs	r3, r3, #29
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	f003 0307 	and.w	r3, r3, #7
 800c424:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c426:	7bbb      	ldrb	r3, [r7, #14]
 800c428:	7b3a      	ldrb	r2, [r7, #12]
 800c42a:	4911      	ldr	r1, [pc, #68]	@ (800c470 <UARTEx_SetNbDataToProcess+0x94>)
 800c42c:	5c8a      	ldrb	r2, [r1, r2]
 800c42e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c432:	7b3a      	ldrb	r2, [r7, #12]
 800c434:	490f      	ldr	r1, [pc, #60]	@ (800c474 <UARTEx_SetNbDataToProcess+0x98>)
 800c436:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c438:	fb93 f3f2 	sdiv	r3, r3, r2
 800c43c:	b29a      	uxth	r2, r3
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c444:	7bfb      	ldrb	r3, [r7, #15]
 800c446:	7b7a      	ldrb	r2, [r7, #13]
 800c448:	4909      	ldr	r1, [pc, #36]	@ (800c470 <UARTEx_SetNbDataToProcess+0x94>)
 800c44a:	5c8a      	ldrb	r2, [r1, r2]
 800c44c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c450:	7b7a      	ldrb	r2, [r7, #13]
 800c452:	4908      	ldr	r1, [pc, #32]	@ (800c474 <UARTEx_SetNbDataToProcess+0x98>)
 800c454:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c456:	fb93 f3f2 	sdiv	r3, r3, r2
 800c45a:	b29a      	uxth	r2, r3
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c462:	bf00      	nop
 800c464:	3714      	adds	r7, #20
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop
 800c470:	08017018 	.word	0x08017018
 800c474:	08017020 	.word	0x08017020

0800c478 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2200      	movs	r2, #0
 800c484:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c488:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c48c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	b29a      	uxth	r2, r3
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c498:	2300      	movs	r3, #0
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3714      	adds	r7, #20
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr

0800c4a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c4a6:	b480      	push	{r7}
 800c4a8:	b085      	sub	sp, #20
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c4ae:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c4b2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c4ba:	b29a      	uxth	r2, r3
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	43db      	mvns	r3, r3
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	4013      	ands	r3, r2
 800c4c6:	b29a      	uxth	r2, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c4ce:	2300      	movs	r3, #0
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3714      	adds	r7, #20
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	1d3b      	adds	r3, r7, #4
 800c4e6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2200      	movs	r2, #0
 800c506:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800c50a:	2300      	movs	r3, #0
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3714      	adds	r7, #20
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr

0800c518 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c518:	b480      	push	{r7}
 800c51a:	b09d      	sub	sp, #116	@ 0x74
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c522:	2300      	movs	r3, #0
 800c524:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	4413      	add	r3, r2
 800c532:	881b      	ldrh	r3, [r3, #0]
 800c534:	b29b      	uxth	r3, r3
 800c536:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800c53a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c53e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	78db      	ldrb	r3, [r3, #3]
 800c546:	2b03      	cmp	r3, #3
 800c548:	d81f      	bhi.n	800c58a <USB_ActivateEndpoint+0x72>
 800c54a:	a201      	add	r2, pc, #4	@ (adr r2, 800c550 <USB_ActivateEndpoint+0x38>)
 800c54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c550:	0800c561 	.word	0x0800c561
 800c554:	0800c57d 	.word	0x0800c57d
 800c558:	0800c593 	.word	0x0800c593
 800c55c:	0800c56f 	.word	0x0800c56f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c560:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c564:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c568:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c56c:	e012      	b.n	800c594 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c56e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c572:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800c576:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c57a:	e00b      	b.n	800c594 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c57c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c580:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c584:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c588:	e004      	b.n	800c594 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800c58a:	2301      	movs	r3, #1
 800c58c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800c590:	e000      	b.n	800c594 <USB_ActivateEndpoint+0x7c>
      break;
 800c592:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	009b      	lsls	r3, r3, #2
 800c59c:	441a      	add	r2, r3
 800c59e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c5a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	009b      	lsls	r3, r3, #2
 800c5be:	4413      	add	r3, r2
 800c5c0:	881b      	ldrh	r3, [r3, #0]
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	b21b      	sxth	r3, r3
 800c5c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5ce:	b21a      	sxth	r2, r3
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	b21b      	sxth	r3, r3
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	b21b      	sxth	r3, r3
 800c5da:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	009b      	lsls	r3, r3, #2
 800c5e6:	441a      	add	r2, r3
 800c5e8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800c5ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	7b1b      	ldrb	r3, [r3, #12]
 800c604:	2b00      	cmp	r3, #0
 800c606:	f040 8178 	bne.w	800c8fa <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	785b      	ldrb	r3, [r3, #1]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	f000 8084 	beq.w	800c71c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	61bb      	str	r3, [r7, #24]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c61e:	b29b      	uxth	r3, r3
 800c620:	461a      	mov	r2, r3
 800c622:	69bb      	ldr	r3, [r7, #24]
 800c624:	4413      	add	r3, r2
 800c626:	61bb      	str	r3, [r7, #24]
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	00da      	lsls	r2, r3, #3
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	4413      	add	r3, r2
 800c632:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c636:	617b      	str	r3, [r7, #20]
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	88db      	ldrh	r3, [r3, #6]
 800c63c:	085b      	lsrs	r3, r3, #1
 800c63e:	b29b      	uxth	r3, r3
 800c640:	005b      	lsls	r3, r3, #1
 800c642:	b29a      	uxth	r2, r3
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	4413      	add	r3, r2
 800c652:	881b      	ldrh	r3, [r3, #0]
 800c654:	827b      	strh	r3, [r7, #18]
 800c656:	8a7b      	ldrh	r3, [r7, #18]
 800c658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d01b      	beq.n	800c698 <USB_ActivateEndpoint+0x180>
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	009b      	lsls	r3, r3, #2
 800c668:	4413      	add	r3, r2
 800c66a:	881b      	ldrh	r3, [r3, #0]
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c676:	823b      	strh	r3, [r7, #16]
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	441a      	add	r2, r3
 800c682:	8a3b      	ldrh	r3, [r7, #16]
 800c684:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c688:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c68c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c690:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c694:	b29b      	uxth	r3, r3
 800c696:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	78db      	ldrb	r3, [r3, #3]
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d020      	beq.n	800c6e2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	4413      	add	r3, r2
 800c6aa:	881b      	ldrh	r3, [r3, #0]
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c6b6:	81bb      	strh	r3, [r7, #12]
 800c6b8:	89bb      	ldrh	r3, [r7, #12]
 800c6ba:	f083 0320 	eor.w	r3, r3, #32
 800c6be:	81bb      	strh	r3, [r7, #12]
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	009b      	lsls	r3, r3, #2
 800c6c8:	441a      	add	r2, r3
 800c6ca:	89bb      	ldrh	r3, [r7, #12]
 800c6cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	8013      	strh	r3, [r2, #0]
 800c6e0:	e2d5      	b.n	800cc8e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	4413      	add	r3, r2
 800c6ec:	881b      	ldrh	r3, [r3, #0]
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c6f8:	81fb      	strh	r3, [r7, #14]
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	441a      	add	r2, r3
 800c704:	89fb      	ldrh	r3, [r7, #14]
 800c706:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c70a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c70e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c716:	b29b      	uxth	r3, r3
 800c718:	8013      	strh	r3, [r2, #0]
 800c71a:	e2b8      	b.n	800cc8e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c726:	b29b      	uxth	r3, r3
 800c728:	461a      	mov	r2, r3
 800c72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c72c:	4413      	add	r3, r2
 800c72e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	00da      	lsls	r2, r3, #3
 800c736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c738:	4413      	add	r3, r2
 800c73a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c73e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	88db      	ldrh	r3, [r3, #6]
 800c744:	085b      	lsrs	r3, r3, #1
 800c746:	b29b      	uxth	r3, r3
 800c748:	005b      	lsls	r3, r3, #1
 800c74a:	b29a      	uxth	r2, r3
 800c74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c74e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	461a      	mov	r2, r3
 800c75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c760:	4413      	add	r3, r2
 800c762:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	00da      	lsls	r2, r3, #3
 800c76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c76c:	4413      	add	r3, r2
 800c76e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c772:	627b      	str	r3, [r7, #36]	@ 0x24
 800c774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c776:	881b      	ldrh	r3, [r3, #0]
 800c778:	b29b      	uxth	r3, r3
 800c77a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c77e:	b29a      	uxth	r2, r3
 800c780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c782:	801a      	strh	r2, [r3, #0]
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	691b      	ldr	r3, [r3, #16]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d10a      	bne.n	800c7a2 <USB_ActivateEndpoint+0x28a>
 800c78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78e:	881b      	ldrh	r3, [r3, #0]
 800c790:	b29b      	uxth	r3, r3
 800c792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c79a:	b29a      	uxth	r2, r3
 800c79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79e:	801a      	strh	r2, [r3, #0]
 800c7a0:	e039      	b.n	800c816 <USB_ActivateEndpoint+0x2fe>
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	691b      	ldr	r3, [r3, #16]
 800c7a6:	2b3e      	cmp	r3, #62	@ 0x3e
 800c7a8:	d818      	bhi.n	800c7dc <USB_ActivateEndpoint+0x2c4>
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	691b      	ldr	r3, [r3, #16]
 800c7ae:	085b      	lsrs	r3, r3, #1
 800c7b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	691b      	ldr	r3, [r3, #16]
 800c7b6:	f003 0301 	and.w	r3, r3, #1
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d002      	beq.n	800c7c4 <USB_ActivateEndpoint+0x2ac>
 800c7be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c6:	881b      	ldrh	r3, [r3, #0]
 800c7c8:	b29a      	uxth	r2, r3
 800c7ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7cc:	b29b      	uxth	r3, r3
 800c7ce:	029b      	lsls	r3, r3, #10
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d8:	801a      	strh	r2, [r3, #0]
 800c7da:	e01c      	b.n	800c816 <USB_ActivateEndpoint+0x2fe>
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	691b      	ldr	r3, [r3, #16]
 800c7e0:	095b      	lsrs	r3, r3, #5
 800c7e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	691b      	ldr	r3, [r3, #16]
 800c7e8:	f003 031f 	and.w	r3, r3, #31
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d102      	bne.n	800c7f6 <USB_ActivateEndpoint+0x2de>
 800c7f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7f2:	3b01      	subs	r3, #1
 800c7f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f8:	881b      	ldrh	r3, [r3, #0]
 800c7fa:	b29a      	uxth	r2, r3
 800c7fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7fe:	b29b      	uxth	r3, r3
 800c800:	029b      	lsls	r3, r3, #10
 800c802:	b29b      	uxth	r3, r3
 800c804:	4313      	orrs	r3, r2
 800c806:	b29b      	uxth	r3, r3
 800c808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c80c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c810:	b29a      	uxth	r2, r3
 800c812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c814:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	009b      	lsls	r3, r3, #2
 800c81e:	4413      	add	r3, r2
 800c820:	881b      	ldrh	r3, [r3, #0]
 800c822:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c824:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d01b      	beq.n	800c866 <USB_ActivateEndpoint+0x34e>
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	009b      	lsls	r3, r3, #2
 800c836:	4413      	add	r3, r2
 800c838:	881b      	ldrh	r3, [r3, #0]
 800c83a:	b29b      	uxth	r3, r3
 800c83c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c844:	843b      	strh	r3, [r7, #32]
 800c846:	687a      	ldr	r2, [r7, #4]
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	009b      	lsls	r3, r3, #2
 800c84e:	441a      	add	r2, r3
 800c850:	8c3b      	ldrh	r3, [r7, #32]
 800c852:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c856:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c85a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c85e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c862:	b29b      	uxth	r3, r3
 800c864:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d124      	bne.n	800c8b8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	4413      	add	r3, r2
 800c878:	881b      	ldrh	r3, [r3, #0]
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c884:	83bb      	strh	r3, [r7, #28]
 800c886:	8bbb      	ldrh	r3, [r7, #28]
 800c888:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c88c:	83bb      	strh	r3, [r7, #28]
 800c88e:	8bbb      	ldrh	r3, [r7, #28]
 800c890:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c894:	83bb      	strh	r3, [r7, #28]
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	441a      	add	r2, r3
 800c8a0:	8bbb      	ldrh	r3, [r7, #28]
 800c8a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	8013      	strh	r3, [r2, #0]
 800c8b6:	e1ea      	b.n	800cc8e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	009b      	lsls	r3, r3, #2
 800c8c0:	4413      	add	r3, r2
 800c8c2:	881b      	ldrh	r3, [r3, #0]
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c8ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8ce:	83fb      	strh	r3, [r7, #30]
 800c8d0:	8bfb      	ldrh	r3, [r7, #30]
 800c8d2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c8d6:	83fb      	strh	r3, [r7, #30]
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	009b      	lsls	r3, r3, #2
 800c8e0:	441a      	add	r2, r3
 800c8e2:	8bfb      	ldrh	r3, [r7, #30]
 800c8e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	8013      	strh	r3, [r2, #0]
 800c8f8:	e1c9      	b.n	800cc8e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	78db      	ldrb	r3, [r3, #3]
 800c8fe:	2b02      	cmp	r3, #2
 800c900:	d11e      	bne.n	800c940 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	4413      	add	r3, r2
 800c90c:	881b      	ldrh	r3, [r3, #0]
 800c90e:	b29b      	uxth	r3, r3
 800c910:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c914:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c918:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	009b      	lsls	r3, r3, #2
 800c924:	441a      	add	r2, r3
 800c926:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c92a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c92e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c932:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	8013      	strh	r3, [r2, #0]
 800c93e:	e01d      	b.n	800c97c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	4413      	add	r3, r2
 800c94a:	881b      	ldrh	r3, [r3, #0]
 800c94c:	b29b      	uxth	r3, r3
 800c94e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c956:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	009b      	lsls	r3, r3, #2
 800c962:	441a      	add	r2, r3
 800c964:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c968:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c96c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c970:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c978:	b29b      	uxth	r3, r3
 800c97a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c986:	b29b      	uxth	r3, r3
 800c988:	461a      	mov	r2, r3
 800c98a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c98c:	4413      	add	r3, r2
 800c98e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	00da      	lsls	r2, r3, #3
 800c996:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c998:	4413      	add	r3, r2
 800c99a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c99e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	891b      	ldrh	r3, [r3, #8]
 800c9a4:	085b      	lsrs	r3, r3, #1
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	005b      	lsls	r3, r3, #1
 800c9aa:	b29a      	uxth	r2, r3
 800c9ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9ae:	801a      	strh	r2, [r3, #0]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	657b      	str	r3, [r7, #84]	@ 0x54
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	461a      	mov	r2, r3
 800c9be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9c0:	4413      	add	r3, r2
 800c9c2:	657b      	str	r3, [r7, #84]	@ 0x54
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	00da      	lsls	r2, r3, #3
 800c9ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9cc:	4413      	add	r3, r2
 800c9ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c9d2:	653b      	str	r3, [r7, #80]	@ 0x50
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	895b      	ldrh	r3, [r3, #10]
 800c9d8:	085b      	lsrs	r3, r3, #1
 800c9da:	b29b      	uxth	r3, r3
 800c9dc:	005b      	lsls	r3, r3, #1
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9e2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	785b      	ldrb	r3, [r3, #1]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	f040 8093 	bne.w	800cb14 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	4413      	add	r3, r2
 800c9f8:	881b      	ldrh	r3, [r3, #0]
 800c9fa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c9fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ca02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d01b      	beq.n	800ca42 <USB_ActivateEndpoint+0x52a>
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4413      	add	r3, r2
 800ca14:	881b      	ldrh	r3, [r3, #0]
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca20:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	009b      	lsls	r3, r3, #2
 800ca2a:	441a      	add	r2, r3
 800ca2c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ca2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ca3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	4413      	add	r3, r2
 800ca4c:	881b      	ldrh	r3, [r3, #0]
 800ca4e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800ca50:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ca52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d01b      	beq.n	800ca92 <USB_ActivateEndpoint+0x57a>
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	009b      	lsls	r3, r3, #2
 800ca62:	4413      	add	r3, r2
 800ca64:	881b      	ldrh	r3, [r3, #0]
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca70:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	009b      	lsls	r3, r3, #2
 800ca7a:	441a      	add	r2, r3
 800ca7c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ca7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	4413      	add	r3, r2
 800ca9c:	881b      	ldrh	r3, [r3, #0]
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800caa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caa8:	873b      	strh	r3, [r7, #56]	@ 0x38
 800caaa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800caac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cab0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800cab2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800cab4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cab8:	873b      	strh	r3, [r7, #56]	@ 0x38
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	441a      	add	r2, r3
 800cac4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800cac6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800caca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cace:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	4413      	add	r3, r2
 800cae4:	881b      	ldrh	r3, [r3, #0]
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800caec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800caf0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	009b      	lsls	r3, r3, #2
 800cafa:	441a      	add	r2, r3
 800cafc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cafe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	8013      	strh	r3, [r2, #0]
 800cb12:	e0bc      	b.n	800cc8e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cb14:	687a      	ldr	r2, [r7, #4]
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	4413      	add	r3, r2
 800cb1e:	881b      	ldrh	r3, [r3, #0]
 800cb20:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800cb24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800cb28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d01d      	beq.n	800cb6c <USB_ActivateEndpoint+0x654>
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	4413      	add	r3, r2
 800cb3a:	881b      	ldrh	r3, [r3, #0]
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb46:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	441a      	add	r2, r3
 800cb54:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800cb58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cb64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	4413      	add	r3, r2
 800cb76:	881b      	ldrh	r3, [r3, #0]
 800cb78:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800cb7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800cb80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d01d      	beq.n	800cbc4 <USB_ActivateEndpoint+0x6ac>
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	4413      	add	r3, r2
 800cb92:	881b      	ldrh	r3, [r3, #0]
 800cb94:	b29b      	uxth	r3, r3
 800cb96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb9e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	009b      	lsls	r3, r3, #2
 800cbaa:	441a      	add	r2, r3
 800cbac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800cbb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbbc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	78db      	ldrb	r3, [r3, #3]
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	d024      	beq.n	800cc16 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	009b      	lsls	r3, r3, #2
 800cbd4:	4413      	add	r3, r2
 800cbd6:	881b      	ldrh	r3, [r3, #0]
 800cbd8:	b29b      	uxth	r3, r3
 800cbda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbe2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800cbe6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800cbea:	f083 0320 	eor.w	r3, r3, #32
 800cbee:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	441a      	add	r2, r3
 800cbfc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800cc00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	8013      	strh	r3, [r2, #0]
 800cc14:	e01d      	b.n	800cc52 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	4413      	add	r3, r2
 800cc20:	881b      	ldrh	r3, [r3, #0]
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc2c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	441a      	add	r2, r3
 800cc3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cc3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc4e:	b29b      	uxth	r3, r3
 800cc50:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	4413      	add	r3, r2
 800cc5c:	881b      	ldrh	r3, [r3, #0]
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cc64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc68:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	441a      	add	r2, r3
 800cc76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cc7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800cc8e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3774      	adds	r7, #116	@ 0x74
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop

0800cca0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b08d      	sub	sp, #52	@ 0x34
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	7b1b      	ldrb	r3, [r3, #12]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	f040 808e 	bne.w	800cdd0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	785b      	ldrb	r3, [r3, #1]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d044      	beq.n	800cd46 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	4413      	add	r3, r2
 800ccc6:	881b      	ldrh	r3, [r3, #0]
 800ccc8:	81bb      	strh	r3, [r7, #12]
 800ccca:	89bb      	ldrh	r3, [r7, #12]
 800cccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d01b      	beq.n	800cd0c <USB_DeactivateEndpoint+0x6c>
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	4413      	add	r3, r2
 800ccde:	881b      	ldrh	r3, [r3, #0]
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ccea:	817b      	strh	r3, [r7, #10]
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	009b      	lsls	r3, r3, #2
 800ccf4:	441a      	add	r2, r3
 800ccf6:	897b      	ldrh	r3, [r7, #10]
 800ccf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ccfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd04:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cd08:	b29b      	uxth	r3, r3
 800cd0a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cd0c:	687a      	ldr	r2, [r7, #4]
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	009b      	lsls	r3, r3, #2
 800cd14:	4413      	add	r3, r2
 800cd16:	881b      	ldrh	r3, [r3, #0]
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd22:	813b      	strh	r3, [r7, #8]
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	441a      	add	r2, r3
 800cd2e:	893b      	ldrh	r3, [r7, #8]
 800cd30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	8013      	strh	r3, [r2, #0]
 800cd44:	e192      	b.n	800d06c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	009b      	lsls	r3, r3, #2
 800cd4e:	4413      	add	r3, r2
 800cd50:	881b      	ldrh	r3, [r3, #0]
 800cd52:	827b      	strh	r3, [r7, #18]
 800cd54:	8a7b      	ldrh	r3, [r7, #18]
 800cd56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d01b      	beq.n	800cd96 <USB_DeactivateEndpoint+0xf6>
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	009b      	lsls	r3, r3, #2
 800cd66:	4413      	add	r3, r2
 800cd68:	881b      	ldrh	r3, [r3, #0]
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd74:	823b      	strh	r3, [r7, #16]
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	441a      	add	r2, r3
 800cd80:	8a3b      	ldrh	r3, [r7, #16]
 800cd82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cd8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	4413      	add	r3, r2
 800cda0:	881b      	ldrh	r3, [r3, #0]
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cda8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdac:	81fb      	strh	r3, [r7, #14]
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	009b      	lsls	r3, r3, #2
 800cdb6:	441a      	add	r2, r3
 800cdb8:	89fb      	ldrh	r3, [r7, #14]
 800cdba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cdc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	8013      	strh	r3, [r2, #0]
 800cdce:	e14d      	b.n	800d06c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	785b      	ldrb	r3, [r3, #1]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f040 80a5 	bne.w	800cf24 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	009b      	lsls	r3, r3, #2
 800cde2:	4413      	add	r3, r2
 800cde4:	881b      	ldrh	r3, [r3, #0]
 800cde6:	843b      	strh	r3, [r7, #32]
 800cde8:	8c3b      	ldrh	r3, [r7, #32]
 800cdea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d01b      	beq.n	800ce2a <USB_DeactivateEndpoint+0x18a>
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	781b      	ldrb	r3, [r3, #0]
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	4413      	add	r3, r2
 800cdfc:	881b      	ldrh	r3, [r3, #0]
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce08:	83fb      	strh	r3, [r7, #30]
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	441a      	add	r2, r3
 800ce14:	8bfb      	ldrh	r3, [r7, #30]
 800ce16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ce22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce26:	b29b      	uxth	r3, r3
 800ce28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ce2a:	687a      	ldr	r2, [r7, #4]
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	009b      	lsls	r3, r3, #2
 800ce32:	4413      	add	r3, r2
 800ce34:	881b      	ldrh	r3, [r3, #0]
 800ce36:	83bb      	strh	r3, [r7, #28]
 800ce38:	8bbb      	ldrh	r3, [r7, #28]
 800ce3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d01b      	beq.n	800ce7a <USB_DeactivateEndpoint+0x1da>
 800ce42:	687a      	ldr	r2, [r7, #4]
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	009b      	lsls	r3, r3, #2
 800ce4a:	4413      	add	r3, r2
 800ce4c:	881b      	ldrh	r3, [r3, #0]
 800ce4e:	b29b      	uxth	r3, r3
 800ce50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce58:	837b      	strh	r3, [r7, #26]
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	009b      	lsls	r3, r3, #2
 800ce62:	441a      	add	r2, r3
 800ce64:	8b7b      	ldrh	r3, [r7, #26]
 800ce66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ce76:	b29b      	uxth	r3, r3
 800ce78:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	009b      	lsls	r3, r3, #2
 800ce82:	4413      	add	r3, r2
 800ce84:	881b      	ldrh	r3, [r3, #0]
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce90:	833b      	strh	r3, [r7, #24]
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	441a      	add	r2, r3
 800ce9c:	8b3b      	ldrh	r3, [r7, #24]
 800ce9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ceaa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	4413      	add	r3, r2
 800cebc:	881b      	ldrh	r3, [r3, #0]
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cec8:	82fb      	strh	r3, [r7, #22]
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	781b      	ldrb	r3, [r3, #0]
 800ced0:	009b      	lsls	r3, r3, #2
 800ced2:	441a      	add	r2, r3
 800ced4:	8afb      	ldrh	r3, [r7, #22]
 800ced6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ceda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cee6:	b29b      	uxth	r3, r3
 800cee8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	4413      	add	r3, r2
 800cef4:	881b      	ldrh	r3, [r3, #0]
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cefc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf00:	82bb      	strh	r3, [r7, #20]
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	441a      	add	r2, r3
 800cf0c:	8abb      	ldrh	r3, [r7, #20]
 800cf0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	8013      	strh	r3, [r2, #0]
 800cf22:	e0a3      	b.n	800d06c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cf24:	687a      	ldr	r2, [r7, #4]
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	009b      	lsls	r3, r3, #2
 800cf2c:	4413      	add	r3, r2
 800cf2e:	881b      	ldrh	r3, [r3, #0]
 800cf30:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800cf32:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cf34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d01b      	beq.n	800cf74 <USB_DeactivateEndpoint+0x2d4>
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	4413      	add	r3, r2
 800cf46:	881b      	ldrh	r3, [r3, #0]
 800cf48:	b29b      	uxth	r3, r3
 800cf4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf52:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	441a      	add	r2, r3
 800cf5e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cf60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cf6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	009b      	lsls	r3, r3, #2
 800cf7c:	4413      	add	r3, r2
 800cf7e:	881b      	ldrh	r3, [r3, #0]
 800cf80:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800cf82:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cf84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d01b      	beq.n	800cfc4 <USB_DeactivateEndpoint+0x324>
 800cf8c:	687a      	ldr	r2, [r7, #4]
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	009b      	lsls	r3, r3, #2
 800cf94:	4413      	add	r3, r2
 800cf96:	881b      	ldrh	r3, [r3, #0]
 800cf98:	b29b      	uxth	r3, r3
 800cf9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfa2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	441a      	add	r2, r3
 800cfae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cfb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cfb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cfb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfbc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cfc0:	b29b      	uxth	r3, r3
 800cfc2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	781b      	ldrb	r3, [r3, #0]
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	4413      	add	r3, r2
 800cfce:	881b      	ldrh	r3, [r3, #0]
 800cfd0:	b29b      	uxth	r3, r3
 800cfd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cfd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfda:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	009b      	lsls	r3, r3, #2
 800cfe4:	441a      	add	r2, r3
 800cfe6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cfe8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cfec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cff0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cff8:	b29b      	uxth	r3, r3
 800cffa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cffc:	687a      	ldr	r2, [r7, #4]
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	009b      	lsls	r3, r3, #2
 800d004:	4413      	add	r3, r2
 800d006:	881b      	ldrh	r3, [r3, #0]
 800d008:	b29b      	uxth	r3, r3
 800d00a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d00e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d012:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	441a      	add	r2, r3
 800d01e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d020:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d024:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d028:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d02c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d030:	b29b      	uxth	r3, r3
 800d032:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d034:	687a      	ldr	r2, [r7, #4]
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	4413      	add	r3, r2
 800d03e:	881b      	ldrh	r3, [r3, #0]
 800d040:	b29b      	uxth	r3, r3
 800d042:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d04a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d04c:	687a      	ldr	r2, [r7, #4]
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	441a      	add	r2, r3
 800d056:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d058:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d05c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d060:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d064:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d068:	b29b      	uxth	r3, r3
 800d06a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800d06c:	2300      	movs	r3, #0
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3734      	adds	r7, #52	@ 0x34
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr

0800d07a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d07a:	b580      	push	{r7, lr}
 800d07c:	b0c2      	sub	sp, #264	@ 0x108
 800d07e:	af00      	add	r7, sp, #0
 800d080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d084:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d088:	6018      	str	r0, [r3, #0]
 800d08a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d08e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d092:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	785b      	ldrb	r3, [r3, #1]
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	f040 86b7 	bne.w	800de14 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800d0a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	699a      	ldr	r2, [r3, #24]
 800d0b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	691b      	ldr	r3, [r3, #16]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d908      	bls.n	800d0d4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800d0c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	691b      	ldr	r3, [r3, #16]
 800d0ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800d0d2:	e007      	b.n	800d0e4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800d0d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	699b      	ldr	r3, [r3, #24]
 800d0e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d0e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	7b1b      	ldrb	r3, [r3, #12]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d13a      	bne.n	800d16a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d0f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	6959      	ldr	r1, [r3, #20]
 800d100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	88da      	ldrh	r2, [r3, #6]
 800d10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d110:	b29b      	uxth	r3, r3
 800d112:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d116:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d11a:	6800      	ldr	r0, [r0, #0]
 800d11c:	f001 fc99 	bl	800ea52 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d124:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	613b      	str	r3, [r7, #16]
 800d12c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d130:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	461a      	mov	r2, r3
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	4413      	add	r3, r2
 800d142:	613b      	str	r3, [r7, #16]
 800d144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	00da      	lsls	r2, r3, #3
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	4413      	add	r3, r2
 800d156:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d15a:	60fb      	str	r3, [r7, #12]
 800d15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d160:	b29a      	uxth	r2, r3
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	801a      	strh	r2, [r3, #0]
 800d166:	f000 be1f 	b.w	800dda8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d16a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d16e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	78db      	ldrb	r3, [r3, #3]
 800d176:	2b02      	cmp	r3, #2
 800d178:	f040 8462 	bne.w	800da40 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d17c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	6a1a      	ldr	r2, [r3, #32]
 800d188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d18c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	691b      	ldr	r3, [r3, #16]
 800d194:	429a      	cmp	r2, r3
 800d196:	f240 83df 	bls.w	800d958 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d19a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d19e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	4413      	add	r3, r2
 800d1b4:	881b      	ldrh	r3, [r3, #0]
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d1bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d1c0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800d1c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1cc:	681a      	ldr	r2, [r3, #0]
 800d1ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	441a      	add	r2, r3
 800d1de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d1e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d1ea:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d1ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1f2:	b29b      	uxth	r3, r3
 800d1f4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d1f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	6a1a      	ldr	r2, [r3, #32]
 800d202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d206:	1ad2      	subs	r2, r2, r3
 800d208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d20c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d218:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	4413      	add	r3, r2
 800d22e:	881b      	ldrh	r3, [r3, #0]
 800d230:	b29b      	uxth	r3, r3
 800d232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d236:	2b00      	cmp	r3, #0
 800d238:	f000 81c7 	beq.w	800d5ca <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d23c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d240:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	633b      	str	r3, [r7, #48]	@ 0x30
 800d248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d24c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	785b      	ldrb	r3, [r3, #1]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d177      	bne.n	800d348 <USB_EPStartXfer+0x2ce>
 800d258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d25c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d268:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d272:	b29b      	uxth	r3, r3
 800d274:	461a      	mov	r2, r3
 800d276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d278:	4413      	add	r3, r2
 800d27a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d27c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	00da      	lsls	r2, r3, #3
 800d28a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d28c:	4413      	add	r3, r2
 800d28e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d292:	627b      	str	r3, [r7, #36]	@ 0x24
 800d294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d296:	881b      	ldrh	r3, [r3, #0]
 800d298:	b29b      	uxth	r3, r3
 800d29a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d29e:	b29a      	uxth	r2, r3
 800d2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a2:	801a      	strh	r2, [r3, #0]
 800d2a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d10a      	bne.n	800d2c2 <USB_EPStartXfer+0x248>
 800d2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ae:	881b      	ldrh	r3, [r3, #0]
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2ba:	b29a      	uxth	r2, r3
 800d2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2be:	801a      	strh	r2, [r3, #0]
 800d2c0:	e067      	b.n	800d392 <USB_EPStartXfer+0x318>
 800d2c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2c6:	2b3e      	cmp	r3, #62	@ 0x3e
 800d2c8:	d81c      	bhi.n	800d304 <USB_EPStartXfer+0x28a>
 800d2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2ce:	085b      	lsrs	r3, r3, #1
 800d2d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2d8:	f003 0301 	and.w	r3, r3, #1
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d004      	beq.n	800d2ea <USB_EPStartXfer+0x270>
 800d2e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d2e4:	3301      	adds	r3, #1
 800d2e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ec:	881b      	ldrh	r3, [r3, #0]
 800d2ee:	b29a      	uxth	r2, r3
 800d2f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	029b      	lsls	r3, r3, #10
 800d2f8:	b29b      	uxth	r3, r3
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d300:	801a      	strh	r2, [r3, #0]
 800d302:	e046      	b.n	800d392 <USB_EPStartXfer+0x318>
 800d304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d308:	095b      	lsrs	r3, r3, #5
 800d30a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d312:	f003 031f 	and.w	r3, r3, #31
 800d316:	2b00      	cmp	r3, #0
 800d318:	d104      	bne.n	800d324 <USB_EPStartXfer+0x2aa>
 800d31a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d31e:	3b01      	subs	r3, #1
 800d320:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d326:	881b      	ldrh	r3, [r3, #0]
 800d328:	b29a      	uxth	r2, r3
 800d32a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d32e:	b29b      	uxth	r3, r3
 800d330:	029b      	lsls	r3, r3, #10
 800d332:	b29b      	uxth	r3, r3
 800d334:	4313      	orrs	r3, r2
 800d336:	b29b      	uxth	r3, r3
 800d338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d33c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d340:	b29a      	uxth	r2, r3
 800d342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d344:	801a      	strh	r2, [r3, #0]
 800d346:	e024      	b.n	800d392 <USB_EPStartXfer+0x318>
 800d348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d34c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	785b      	ldrb	r3, [r3, #1]
 800d354:	2b01      	cmp	r3, #1
 800d356:	d11c      	bne.n	800d392 <USB_EPStartXfer+0x318>
 800d358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d35c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d366:	b29b      	uxth	r3, r3
 800d368:	461a      	mov	r2, r3
 800d36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d36c:	4413      	add	r3, r2
 800d36e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	00da      	lsls	r2, r3, #3
 800d37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d380:	4413      	add	r3, r2
 800d382:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d386:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d38c:	b29a      	uxth	r2, r3
 800d38e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d390:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	895b      	ldrh	r3, [r3, #10]
 800d39e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d3a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	6959      	ldr	r1, [r3, #20]
 800d3ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d3b8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d3bc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d3c0:	6800      	ldr	r0, [r0, #0]
 800d3c2:	f001 fb46 	bl	800ea52 <USB_WritePMA>
            ep->xfer_buff += len;
 800d3c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	695a      	ldr	r2, [r3, #20]
 800d3d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3d6:	441a      	add	r2, r3
 800d3d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d3e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	6a1a      	ldr	r2, [r3, #32]
 800d3f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	691b      	ldr	r3, [r3, #16]
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d90f      	bls.n	800d420 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800d400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	6a1a      	ldr	r2, [r3, #32]
 800d40c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d410:	1ad2      	subs	r2, r2, r3
 800d412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	621a      	str	r2, [r3, #32]
 800d41e:	e00e      	b.n	800d43e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800d420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	6a1b      	ldr	r3, [r3, #32]
 800d42c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2200      	movs	r2, #0
 800d43c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d43e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	785b      	ldrb	r3, [r3, #1]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d177      	bne.n	800d53e <USB_EPStartXfer+0x4c4>
 800d44e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d452:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	61bb      	str	r3, [r7, #24]
 800d45a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d45e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d468:	b29b      	uxth	r3, r3
 800d46a:	461a      	mov	r2, r3
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	4413      	add	r3, r2
 800d470:	61bb      	str	r3, [r7, #24]
 800d472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	00da      	lsls	r2, r3, #3
 800d480:	69bb      	ldr	r3, [r7, #24]
 800d482:	4413      	add	r3, r2
 800d484:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d488:	617b      	str	r3, [r7, #20]
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	881b      	ldrh	r3, [r3, #0]
 800d48e:	b29b      	uxth	r3, r3
 800d490:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d494:	b29a      	uxth	r2, r3
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	801a      	strh	r2, [r3, #0]
 800d49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d10a      	bne.n	800d4b8 <USB_EPStartXfer+0x43e>
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	881b      	ldrh	r3, [r3, #0]
 800d4a6:	b29b      	uxth	r3, r3
 800d4a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4b0:	b29a      	uxth	r2, r3
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	801a      	strh	r2, [r3, #0]
 800d4b6:	e06d      	b.n	800d594 <USB_EPStartXfer+0x51a>
 800d4b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4bc:	2b3e      	cmp	r3, #62	@ 0x3e
 800d4be:	d81c      	bhi.n	800d4fa <USB_EPStartXfer+0x480>
 800d4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4c4:	085b      	lsrs	r3, r3, #1
 800d4c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4ce:	f003 0301 	and.w	r3, r3, #1
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d004      	beq.n	800d4e0 <USB_EPStartXfer+0x466>
 800d4d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d4da:	3301      	adds	r3, #1
 800d4dc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	881b      	ldrh	r3, [r3, #0]
 800d4e4:	b29a      	uxth	r2, r3
 800d4e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d4ea:	b29b      	uxth	r3, r3
 800d4ec:	029b      	lsls	r3, r3, #10
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	b29a      	uxth	r2, r3
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	801a      	strh	r2, [r3, #0]
 800d4f8:	e04c      	b.n	800d594 <USB_EPStartXfer+0x51a>
 800d4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4fe:	095b      	lsrs	r3, r3, #5
 800d500:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d508:	f003 031f 	and.w	r3, r3, #31
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d104      	bne.n	800d51a <USB_EPStartXfer+0x4a0>
 800d510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d514:	3b01      	subs	r3, #1
 800d516:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	881b      	ldrh	r3, [r3, #0]
 800d51e:	b29a      	uxth	r2, r3
 800d520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d524:	b29b      	uxth	r3, r3
 800d526:	029b      	lsls	r3, r3, #10
 800d528:	b29b      	uxth	r3, r3
 800d52a:	4313      	orrs	r3, r2
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d536:	b29a      	uxth	r2, r3
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	801a      	strh	r2, [r3, #0]
 800d53c:	e02a      	b.n	800d594 <USB_EPStartXfer+0x51a>
 800d53e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d542:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	785b      	ldrb	r3, [r3, #1]
 800d54a:	2b01      	cmp	r3, #1
 800d54c:	d122      	bne.n	800d594 <USB_EPStartXfer+0x51a>
 800d54e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d552:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	623b      	str	r3, [r7, #32]
 800d55a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d55e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d568:	b29b      	uxth	r3, r3
 800d56a:	461a      	mov	r2, r3
 800d56c:	6a3b      	ldr	r3, [r7, #32]
 800d56e:	4413      	add	r3, r2
 800d570:	623b      	str	r3, [r7, #32]
 800d572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d576:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	00da      	lsls	r2, r3, #3
 800d580:	6a3b      	ldr	r3, [r7, #32]
 800d582:	4413      	add	r3, r2
 800d584:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d588:	61fb      	str	r3, [r7, #28]
 800d58a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d58e:	b29a      	uxth	r2, r3
 800d590:	69fb      	ldr	r3, [r7, #28]
 800d592:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	891b      	ldrh	r3, [r3, #8]
 800d5a0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d5a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	6959      	ldr	r1, [r3, #20]
 800d5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5b4:	b29b      	uxth	r3, r3
 800d5b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d5ba:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d5be:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d5c2:	6800      	ldr	r0, [r0, #0]
 800d5c4:	f001 fa45 	bl	800ea52 <USB_WritePMA>
 800d5c8:	e3ee      	b.n	800dda8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d5ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	785b      	ldrb	r3, [r3, #1]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d177      	bne.n	800d6ca <USB_EPStartXfer+0x650>
 800d5da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d5e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5fa:	4413      	add	r3, r2
 800d5fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d5fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	00da      	lsls	r2, r3, #3
 800d60c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d60e:	4413      	add	r3, r2
 800d610:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d614:	647b      	str	r3, [r7, #68]	@ 0x44
 800d616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d618:	881b      	ldrh	r3, [r3, #0]
 800d61a:	b29b      	uxth	r3, r3
 800d61c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d620:	b29a      	uxth	r2, r3
 800d622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d624:	801a      	strh	r2, [r3, #0]
 800d626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d10a      	bne.n	800d644 <USB_EPStartXfer+0x5ca>
 800d62e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d630:	881b      	ldrh	r3, [r3, #0]
 800d632:	b29b      	uxth	r3, r3
 800d634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d63c:	b29a      	uxth	r2, r3
 800d63e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d640:	801a      	strh	r2, [r3, #0]
 800d642:	e06d      	b.n	800d720 <USB_EPStartXfer+0x6a6>
 800d644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d648:	2b3e      	cmp	r3, #62	@ 0x3e
 800d64a:	d81c      	bhi.n	800d686 <USB_EPStartXfer+0x60c>
 800d64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d650:	085b      	lsrs	r3, r3, #1
 800d652:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d65a:	f003 0301 	and.w	r3, r3, #1
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d004      	beq.n	800d66c <USB_EPStartXfer+0x5f2>
 800d662:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d666:	3301      	adds	r3, #1
 800d668:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d66c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d66e:	881b      	ldrh	r3, [r3, #0]
 800d670:	b29a      	uxth	r2, r3
 800d672:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d676:	b29b      	uxth	r3, r3
 800d678:	029b      	lsls	r3, r3, #10
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	4313      	orrs	r3, r2
 800d67e:	b29a      	uxth	r2, r3
 800d680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d682:	801a      	strh	r2, [r3, #0]
 800d684:	e04c      	b.n	800d720 <USB_EPStartXfer+0x6a6>
 800d686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d68a:	095b      	lsrs	r3, r3, #5
 800d68c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d694:	f003 031f 	and.w	r3, r3, #31
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d104      	bne.n	800d6a6 <USB_EPStartXfer+0x62c>
 800d69c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d6a0:	3b01      	subs	r3, #1
 800d6a2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d6a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6a8:	881b      	ldrh	r3, [r3, #0]
 800d6aa:	b29a      	uxth	r2, r3
 800d6ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	029b      	lsls	r3, r3, #10
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6c2:	b29a      	uxth	r2, r3
 800d6c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6c6:	801a      	strh	r2, [r3, #0]
 800d6c8:	e02a      	b.n	800d720 <USB_EPStartXfer+0x6a6>
 800d6ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	785b      	ldrb	r3, [r3, #1]
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d122      	bne.n	800d720 <USB_EPStartXfer+0x6a6>
 800d6da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	653b      	str	r3, [r7, #80]	@ 0x50
 800d6e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6fa:	4413      	add	r3, r2
 800d6fc:	653b      	str	r3, [r7, #80]	@ 0x50
 800d6fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d702:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	00da      	lsls	r2, r3, #3
 800d70c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d70e:	4413      	add	r3, r2
 800d710:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d714:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d71a:	b29a      	uxth	r2, r3
 800d71c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d71e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	891b      	ldrh	r3, [r3, #8]
 800d72c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	6959      	ldr	r1, [r3, #20]
 800d73c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d740:	b29b      	uxth	r3, r3
 800d742:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d746:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d74a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d74e:	6800      	ldr	r0, [r0, #0]
 800d750:	f001 f97f 	bl	800ea52 <USB_WritePMA>
            ep->xfer_buff += len;
 800d754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	695a      	ldr	r2, [r3, #20]
 800d760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d764:	441a      	add	r2, r3
 800d766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d76a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d776:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	6a1a      	ldr	r2, [r3, #32]
 800d77e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	691b      	ldr	r3, [r3, #16]
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d90f      	bls.n	800d7ae <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d78e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	6a1a      	ldr	r2, [r3, #32]
 800d79a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d79e:	1ad2      	subs	r2, r2, r3
 800d7a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	621a      	str	r2, [r3, #32]
 800d7ac:	e00e      	b.n	800d7cc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d7ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	6a1b      	ldr	r3, [r3, #32]
 800d7ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d7be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d7cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	643b      	str	r3, [r7, #64]	@ 0x40
 800d7d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	785b      	ldrb	r3, [r3, #1]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d177      	bne.n	800d8d8 <USB_EPStartXfer+0x85e>
 800d7e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d7f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d802:	b29b      	uxth	r3, r3
 800d804:	461a      	mov	r2, r3
 800d806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d808:	4413      	add	r3, r2
 800d80a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d80c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d810:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	00da      	lsls	r2, r3, #3
 800d81a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d81c:	4413      	add	r3, r2
 800d81e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d822:	637b      	str	r3, [r7, #52]	@ 0x34
 800d824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d826:	881b      	ldrh	r3, [r3, #0]
 800d828:	b29b      	uxth	r3, r3
 800d82a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d82e:	b29a      	uxth	r2, r3
 800d830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d832:	801a      	strh	r2, [r3, #0]
 800d834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d10a      	bne.n	800d852 <USB_EPStartXfer+0x7d8>
 800d83c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d83e:	881b      	ldrh	r3, [r3, #0]
 800d840:	b29b      	uxth	r3, r3
 800d842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d84a:	b29a      	uxth	r2, r3
 800d84c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d84e:	801a      	strh	r2, [r3, #0]
 800d850:	e067      	b.n	800d922 <USB_EPStartXfer+0x8a8>
 800d852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d856:	2b3e      	cmp	r3, #62	@ 0x3e
 800d858:	d81c      	bhi.n	800d894 <USB_EPStartXfer+0x81a>
 800d85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d85e:	085b      	lsrs	r3, r3, #1
 800d860:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d868:	f003 0301 	and.w	r3, r3, #1
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d004      	beq.n	800d87a <USB_EPStartXfer+0x800>
 800d870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d874:	3301      	adds	r3, #1
 800d876:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d87a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d87c:	881b      	ldrh	r3, [r3, #0]
 800d87e:	b29a      	uxth	r2, r3
 800d880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d884:	b29b      	uxth	r3, r3
 800d886:	029b      	lsls	r3, r3, #10
 800d888:	b29b      	uxth	r3, r3
 800d88a:	4313      	orrs	r3, r2
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d890:	801a      	strh	r2, [r3, #0]
 800d892:	e046      	b.n	800d922 <USB_EPStartXfer+0x8a8>
 800d894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d898:	095b      	lsrs	r3, r3, #5
 800d89a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d89e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8a2:	f003 031f 	and.w	r3, r3, #31
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d104      	bne.n	800d8b4 <USB_EPStartXfer+0x83a>
 800d8aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d8ae:	3b01      	subs	r3, #1
 800d8b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d8b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8b6:	881b      	ldrh	r3, [r3, #0]
 800d8b8:	b29a      	uxth	r2, r3
 800d8ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	029b      	lsls	r3, r3, #10
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	b29b      	uxth	r3, r3
 800d8c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8d0:	b29a      	uxth	r2, r3
 800d8d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8d4:	801a      	strh	r2, [r3, #0]
 800d8d6:	e024      	b.n	800d922 <USB_EPStartXfer+0x8a8>
 800d8d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	785b      	ldrb	r3, [r3, #1]
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d11c      	bne.n	800d922 <USB_EPStartXfer+0x8a8>
 800d8e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	461a      	mov	r2, r3
 800d8fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8fc:	4413      	add	r3, r2
 800d8fe:	643b      	str	r3, [r7, #64]	@ 0x40
 800d900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	00da      	lsls	r2, r3, #3
 800d90e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d910:	4413      	add	r3, r2
 800d912:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d916:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d91c:	b29a      	uxth	r2, r3
 800d91e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d920:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	895b      	ldrh	r3, [r3, #10]
 800d92e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d936:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	6959      	ldr	r1, [r3, #20]
 800d93e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d942:	b29b      	uxth	r3, r3
 800d944:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d948:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d94c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d950:	6800      	ldr	r0, [r0, #0]
 800d952:	f001 f87e 	bl	800ea52 <USB_WritePMA>
 800d956:	e227      	b.n	800dda8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d95c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	6a1b      	ldr	r3, [r3, #32]
 800d964:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d96c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	009b      	lsls	r3, r3, #2
 800d980:	4413      	add	r3, r2
 800d982:	881b      	ldrh	r3, [r3, #0]
 800d984:	b29b      	uxth	r3, r3
 800d986:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d98a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d98e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d996:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d99a:	681a      	ldr	r2, [r3, #0]
 800d99c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	009b      	lsls	r3, r3, #2
 800d9aa:	441a      	add	r2, r3
 800d9ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d9b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d9b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d9b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d9bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d9c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d9d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d9de:	b29b      	uxth	r3, r3
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d9e4:	4413      	add	r3, r2
 800d9e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d9e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	00da      	lsls	r2, r3, #3
 800d9f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d9f8:	4413      	add	r3, r2
 800d9fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d9fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800da00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da04:	b29a      	uxth	r2, r3
 800da06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800da08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800da0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	891b      	ldrh	r3, [r3, #8]
 800da16:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800da1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	6959      	ldr	r1, [r3, #20]
 800da26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da2a:	b29b      	uxth	r3, r3
 800da2c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800da30:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800da34:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800da38:	6800      	ldr	r0, [r0, #0]
 800da3a:	f001 f80a 	bl	800ea52 <USB_WritePMA>
 800da3e:	e1b3      	b.n	800dda8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800da40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	6a1a      	ldr	r2, [r3, #32]
 800da4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da50:	1ad2      	subs	r2, r2, r3
 800da52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800da5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da66:	681a      	ldr	r2, [r3, #0]
 800da68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	009b      	lsls	r3, r3, #2
 800da76:	4413      	add	r3, r2
 800da78:	881b      	ldrh	r3, [r3, #0]
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da80:	2b00      	cmp	r3, #0
 800da82:	f000 80c6 	beq.w	800dc12 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800da86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	673b      	str	r3, [r7, #112]	@ 0x70
 800da92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	785b      	ldrb	r3, [r3, #1]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d177      	bne.n	800db92 <USB_EPStartXfer+0xb18>
 800daa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800daae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dab2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	461a      	mov	r2, r3
 800dac0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dac2:	4413      	add	r3, r2
 800dac4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	00da      	lsls	r2, r3, #3
 800dad4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dad6:	4413      	add	r3, r2
 800dad8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dadc:	667b      	str	r3, [r7, #100]	@ 0x64
 800dade:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dae0:	881b      	ldrh	r3, [r3, #0]
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dae8:	b29a      	uxth	r2, r3
 800daea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800daec:	801a      	strh	r2, [r3, #0]
 800daee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d10a      	bne.n	800db0c <USB_EPStartXfer+0xa92>
 800daf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800daf8:	881b      	ldrh	r3, [r3, #0]
 800dafa:	b29b      	uxth	r3, r3
 800dafc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db04:	b29a      	uxth	r2, r3
 800db06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db08:	801a      	strh	r2, [r3, #0]
 800db0a:	e067      	b.n	800dbdc <USB_EPStartXfer+0xb62>
 800db0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db10:	2b3e      	cmp	r3, #62	@ 0x3e
 800db12:	d81c      	bhi.n	800db4e <USB_EPStartXfer+0xad4>
 800db14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db18:	085b      	lsrs	r3, r3, #1
 800db1a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800db1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db22:	f003 0301 	and.w	r3, r3, #1
 800db26:	2b00      	cmp	r3, #0
 800db28:	d004      	beq.n	800db34 <USB_EPStartXfer+0xaba>
 800db2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800db2e:	3301      	adds	r3, #1
 800db30:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800db34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db36:	881b      	ldrh	r3, [r3, #0]
 800db38:	b29a      	uxth	r2, r3
 800db3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800db3e:	b29b      	uxth	r3, r3
 800db40:	029b      	lsls	r3, r3, #10
 800db42:	b29b      	uxth	r3, r3
 800db44:	4313      	orrs	r3, r2
 800db46:	b29a      	uxth	r2, r3
 800db48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db4a:	801a      	strh	r2, [r3, #0]
 800db4c:	e046      	b.n	800dbdc <USB_EPStartXfer+0xb62>
 800db4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db52:	095b      	lsrs	r3, r3, #5
 800db54:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800db58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db5c:	f003 031f 	and.w	r3, r3, #31
 800db60:	2b00      	cmp	r3, #0
 800db62:	d104      	bne.n	800db6e <USB_EPStartXfer+0xaf4>
 800db64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800db68:	3b01      	subs	r3, #1
 800db6a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800db6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db70:	881b      	ldrh	r3, [r3, #0]
 800db72:	b29a      	uxth	r2, r3
 800db74:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800db78:	b29b      	uxth	r3, r3
 800db7a:	029b      	lsls	r3, r3, #10
 800db7c:	b29b      	uxth	r3, r3
 800db7e:	4313      	orrs	r3, r2
 800db80:	b29b      	uxth	r3, r3
 800db82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db8a:	b29a      	uxth	r2, r3
 800db8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db8e:	801a      	strh	r2, [r3, #0]
 800db90:	e024      	b.n	800dbdc <USB_EPStartXfer+0xb62>
 800db92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	785b      	ldrb	r3, [r3, #1]
 800db9e:	2b01      	cmp	r3, #1
 800dba0:	d11c      	bne.n	800dbdc <USB_EPStartXfer+0xb62>
 800dba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dba6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dbb6:	4413      	add	r3, r2
 800dbb8:	673b      	str	r3, [r7, #112]	@ 0x70
 800dbba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	00da      	lsls	r2, r3, #3
 800dbc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dbca:	4413      	add	r3, r2
 800dbcc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dbd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dbd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbd6:	b29a      	uxth	r2, r3
 800dbd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbda:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800dbdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	895b      	ldrh	r3, [r3, #10]
 800dbe8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dbec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	6959      	ldr	r1, [r3, #20]
 800dbf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dc02:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800dc06:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800dc0a:	6800      	ldr	r0, [r0, #0]
 800dc0c:	f000 ff21 	bl	800ea52 <USB_WritePMA>
 800dc10:	e0ca      	b.n	800dda8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dc12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	785b      	ldrb	r3, [r3, #1]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d177      	bne.n	800dd12 <USB_EPStartXfer+0xc98>
 800dc22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dc2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dc3c:	b29b      	uxth	r3, r3
 800dc3e:	461a      	mov	r2, r3
 800dc40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dc42:	4413      	add	r3, r2
 800dc44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dc46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	00da      	lsls	r2, r3, #3
 800dc54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dc56:	4413      	add	r3, r2
 800dc58:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dc5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dc5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc60:	881b      	ldrh	r3, [r3, #0]
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc68:	b29a      	uxth	r2, r3
 800dc6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc6c:	801a      	strh	r2, [r3, #0]
 800dc6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d10a      	bne.n	800dc8c <USB_EPStartXfer+0xc12>
 800dc76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc78:	881b      	ldrh	r3, [r3, #0]
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc84:	b29a      	uxth	r2, r3
 800dc86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc88:	801a      	strh	r2, [r3, #0]
 800dc8a:	e073      	b.n	800dd74 <USB_EPStartXfer+0xcfa>
 800dc8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc90:	2b3e      	cmp	r3, #62	@ 0x3e
 800dc92:	d81c      	bhi.n	800dcce <USB_EPStartXfer+0xc54>
 800dc94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc98:	085b      	lsrs	r3, r3, #1
 800dc9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dc9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dca2:	f003 0301 	and.w	r3, r3, #1
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d004      	beq.n	800dcb4 <USB_EPStartXfer+0xc3a>
 800dcaa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dcae:	3301      	adds	r3, #1
 800dcb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dcb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dcb6:	881b      	ldrh	r3, [r3, #0]
 800dcb8:	b29a      	uxth	r2, r3
 800dcba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	029b      	lsls	r3, r3, #10
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	b29a      	uxth	r2, r3
 800dcc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dcca:	801a      	strh	r2, [r3, #0]
 800dccc:	e052      	b.n	800dd74 <USB_EPStartXfer+0xcfa>
 800dcce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcd2:	095b      	lsrs	r3, r3, #5
 800dcd4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dcd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcdc:	f003 031f 	and.w	r3, r3, #31
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d104      	bne.n	800dcee <USB_EPStartXfer+0xc74>
 800dce4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dce8:	3b01      	subs	r3, #1
 800dcea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dcee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dcf0:	881b      	ldrh	r3, [r3, #0]
 800dcf2:	b29a      	uxth	r2, r3
 800dcf4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dcf8:	b29b      	uxth	r3, r3
 800dcfa:	029b      	lsls	r3, r3, #10
 800dcfc:	b29b      	uxth	r3, r3
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd0a:	b29a      	uxth	r2, r3
 800dd0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dd0e:	801a      	strh	r2, [r3, #0]
 800dd10:	e030      	b.n	800dd74 <USB_EPStartXfer+0xcfa>
 800dd12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	785b      	ldrb	r3, [r3, #1]
 800dd1e:	2b01      	cmp	r3, #1
 800dd20:	d128      	bne.n	800dd74 <USB_EPStartXfer+0xcfa>
 800dd22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dd30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	461a      	mov	r2, r3
 800dd42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dd46:	4413      	add	r3, r2
 800dd48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dd4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	00da      	lsls	r2, r3, #3
 800dd5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dd5e:	4413      	add	r3, r2
 800dd60:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dd64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dd68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd6c:	b29a      	uxth	r2, r3
 800dd6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dd72:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800dd74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	891b      	ldrh	r3, [r3, #8]
 800dd80:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dd84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	6959      	ldr	r1, [r3, #20]
 800dd90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd94:	b29b      	uxth	r3, r3
 800dd96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dd9a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800dd9e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800dda2:	6800      	ldr	r0, [r0, #0]
 800dda4:	f000 fe55 	bl	800ea52 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800dda8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ddb0:	681a      	ldr	r2, [r3, #0]
 800ddb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	009b      	lsls	r3, r3, #2
 800ddc0:	4413      	add	r3, r2
 800ddc2:	881b      	ldrh	r3, [r3, #0]
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ddca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ddce:	817b      	strh	r3, [r7, #10]
 800ddd0:	897b      	ldrh	r3, [r7, #10]
 800ddd2:	f083 0310 	eor.w	r3, r3, #16
 800ddd6:	817b      	strh	r3, [r7, #10]
 800ddd8:	897b      	ldrh	r3, [r7, #10]
 800ddda:	f083 0320 	eor.w	r3, r3, #32
 800ddde:	817b      	strh	r3, [r7, #10]
 800dde0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dde4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dde8:	681a      	ldr	r2, [r3, #0]
 800ddea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	009b      	lsls	r3, r3, #2
 800ddf8:	441a      	add	r2, r3
 800ddfa:	897b      	ldrh	r3, [r7, #10]
 800ddfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800de00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800de04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800de08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de0c:	b29b      	uxth	r3, r3
 800de0e:	8013      	strh	r3, [r2, #0]
 800de10:	f000 bcdf 	b.w	800e7d2 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800de14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	7b1b      	ldrb	r3, [r3, #12]
 800de20:	2b00      	cmp	r3, #0
 800de22:	f040 80bc 	bne.w	800df9e <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800de26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	699a      	ldr	r2, [r3, #24]
 800de32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	691b      	ldr	r3, [r3, #16]
 800de3e:	429a      	cmp	r2, r3
 800de40:	d917      	bls.n	800de72 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800de42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	691b      	ldr	r3, [r3, #16]
 800de4e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800de52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	699a      	ldr	r2, [r3, #24]
 800de5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de62:	1ad2      	subs	r2, r2, r3
 800de64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	619a      	str	r2, [r3, #24]
 800de70:	e00e      	b.n	800de90 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800de72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	699b      	ldr	r3, [r3, #24]
 800de7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800de82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	2200      	movs	r2, #0
 800de8e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800de90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800de9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dea2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800deac:	b29b      	uxth	r3, r3
 800deae:	461a      	mov	r2, r3
 800deb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800deb4:	4413      	add	r3, r2
 800deb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800deba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800debe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	781b      	ldrb	r3, [r3, #0]
 800dec6:	00da      	lsls	r2, r3, #3
 800dec8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800decc:	4413      	add	r3, r2
 800dece:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ded2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ded6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800deda:	881b      	ldrh	r3, [r3, #0]
 800dedc:	b29b      	uxth	r3, r3
 800dede:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dee2:	b29a      	uxth	r2, r3
 800dee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dee8:	801a      	strh	r2, [r3, #0]
 800deea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800deee:	2b00      	cmp	r3, #0
 800def0:	d10d      	bne.n	800df0e <USB_EPStartXfer+0xe94>
 800def2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800def6:	881b      	ldrh	r3, [r3, #0]
 800def8:	b29b      	uxth	r3, r3
 800defa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800defe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df02:	b29a      	uxth	r2, r3
 800df04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df08:	801a      	strh	r2, [r3, #0]
 800df0a:	f000 bc28 	b.w	800e75e <USB_EPStartXfer+0x16e4>
 800df0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df12:	2b3e      	cmp	r3, #62	@ 0x3e
 800df14:	d81f      	bhi.n	800df56 <USB_EPStartXfer+0xedc>
 800df16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df1a:	085b      	lsrs	r3, r3, #1
 800df1c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800df20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df24:	f003 0301 	and.w	r3, r3, #1
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d004      	beq.n	800df36 <USB_EPStartXfer+0xebc>
 800df2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800df30:	3301      	adds	r3, #1
 800df32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800df36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df3a:	881b      	ldrh	r3, [r3, #0]
 800df3c:	b29a      	uxth	r2, r3
 800df3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800df42:	b29b      	uxth	r3, r3
 800df44:	029b      	lsls	r3, r3, #10
 800df46:	b29b      	uxth	r3, r3
 800df48:	4313      	orrs	r3, r2
 800df4a:	b29a      	uxth	r2, r3
 800df4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df50:	801a      	strh	r2, [r3, #0]
 800df52:	f000 bc04 	b.w	800e75e <USB_EPStartXfer+0x16e4>
 800df56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df5a:	095b      	lsrs	r3, r3, #5
 800df5c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800df60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df64:	f003 031f 	and.w	r3, r3, #31
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d104      	bne.n	800df76 <USB_EPStartXfer+0xefc>
 800df6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800df70:	3b01      	subs	r3, #1
 800df72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800df76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df7a:	881b      	ldrh	r3, [r3, #0]
 800df7c:	b29a      	uxth	r2, r3
 800df7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800df82:	b29b      	uxth	r3, r3
 800df84:	029b      	lsls	r3, r3, #10
 800df86:	b29b      	uxth	r3, r3
 800df88:	4313      	orrs	r3, r2
 800df8a:	b29b      	uxth	r3, r3
 800df8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df94:	b29a      	uxth	r2, r3
 800df96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df9a:	801a      	strh	r2, [r3, #0]
 800df9c:	e3df      	b.n	800e75e <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800df9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	78db      	ldrb	r3, [r3, #3]
 800dfaa:	2b02      	cmp	r3, #2
 800dfac:	f040 8218 	bne.w	800e3e0 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800dfb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	785b      	ldrb	r3, [r3, #1]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	f040 809d 	bne.w	800e0fc <USB_EPStartXfer+0x1082>
 800dfc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dfd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dfe6:	4413      	add	r3, r2
 800dfe8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dfec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	00da      	lsls	r2, r3, #3
 800dffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dffe:	4413      	add	r3, r2
 800e000:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e004:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e008:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e00c:	881b      	ldrh	r3, [r3, #0]
 800e00e:	b29b      	uxth	r3, r3
 800e010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e014:	b29a      	uxth	r2, r3
 800e016:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e01a:	801a      	strh	r2, [r3, #0]
 800e01c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	691b      	ldr	r3, [r3, #16]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d10c      	bne.n	800e046 <USB_EPStartXfer+0xfcc>
 800e02c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e030:	881b      	ldrh	r3, [r3, #0]
 800e032:	b29b      	uxth	r3, r3
 800e034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e03c:	b29a      	uxth	r2, r3
 800e03e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e042:	801a      	strh	r2, [r3, #0]
 800e044:	e08f      	b.n	800e166 <USB_EPStartXfer+0x10ec>
 800e046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e04a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	691b      	ldr	r3, [r3, #16]
 800e052:	2b3e      	cmp	r3, #62	@ 0x3e
 800e054:	d826      	bhi.n	800e0a4 <USB_EPStartXfer+0x102a>
 800e056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e05a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	691b      	ldr	r3, [r3, #16]
 800e062:	085b      	lsrs	r3, r3, #1
 800e064:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e06c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	691b      	ldr	r3, [r3, #16]
 800e074:	f003 0301 	and.w	r3, r3, #1
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d004      	beq.n	800e086 <USB_EPStartXfer+0x100c>
 800e07c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e080:	3301      	adds	r3, #1
 800e082:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e086:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e08a:	881b      	ldrh	r3, [r3, #0]
 800e08c:	b29a      	uxth	r2, r3
 800e08e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e092:	b29b      	uxth	r3, r3
 800e094:	029b      	lsls	r3, r3, #10
 800e096:	b29b      	uxth	r3, r3
 800e098:	4313      	orrs	r3, r2
 800e09a:	b29a      	uxth	r2, r3
 800e09c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e0a0:	801a      	strh	r2, [r3, #0]
 800e0a2:	e060      	b.n	800e166 <USB_EPStartXfer+0x10ec>
 800e0a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	691b      	ldr	r3, [r3, #16]
 800e0b0:	095b      	lsrs	r3, r3, #5
 800e0b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e0b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	691b      	ldr	r3, [r3, #16]
 800e0c2:	f003 031f 	and.w	r3, r3, #31
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d104      	bne.n	800e0d4 <USB_EPStartXfer+0x105a>
 800e0ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0ce:	3b01      	subs	r3, #1
 800e0d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e0d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e0d8:	881b      	ldrh	r3, [r3, #0]
 800e0da:	b29a      	uxth	r2, r3
 800e0dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	029b      	lsls	r3, r3, #10
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	4313      	orrs	r3, r2
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0f2:	b29a      	uxth	r2, r3
 800e0f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e0f8:	801a      	strh	r2, [r3, #0]
 800e0fa:	e034      	b.n	800e166 <USB_EPStartXfer+0x10ec>
 800e0fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	785b      	ldrb	r3, [r3, #1]
 800e108:	2b01      	cmp	r3, #1
 800e10a:	d12c      	bne.n	800e166 <USB_EPStartXfer+0x10ec>
 800e10c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e110:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e11a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e11e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e128:	b29b      	uxth	r3, r3
 800e12a:	461a      	mov	r2, r3
 800e12c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e130:	4413      	add	r3, r2
 800e132:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e13a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	00da      	lsls	r2, r3, #3
 800e144:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e148:	4413      	add	r3, r2
 800e14a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e14e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	691b      	ldr	r3, [r3, #16]
 800e15e:	b29a      	uxth	r2, r3
 800e160:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e164:	801a      	strh	r2, [r3, #0]
 800e166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e16a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	785b      	ldrb	r3, [r3, #1]
 800e180:	2b00      	cmp	r3, #0
 800e182:	f040 809d 	bne.w	800e2c0 <USB_EPStartXfer+0x1246>
 800e186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e18a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e198:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	461a      	mov	r2, r3
 800e1a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e1aa:	4413      	add	r3, r2
 800e1ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e1b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	00da      	lsls	r2, r3, #3
 800e1be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e1c2:	4413      	add	r3, r2
 800e1c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e1c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e1cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e1d0:	881b      	ldrh	r3, [r3, #0]
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e1d8:	b29a      	uxth	r2, r3
 800e1da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e1de:	801a      	strh	r2, [r3, #0]
 800e1e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	691b      	ldr	r3, [r3, #16]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d10c      	bne.n	800e20a <USB_EPStartXfer+0x1190>
 800e1f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e1f4:	881b      	ldrh	r3, [r3, #0]
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e200:	b29a      	uxth	r2, r3
 800e202:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e206:	801a      	strh	r2, [r3, #0]
 800e208:	e088      	b.n	800e31c <USB_EPStartXfer+0x12a2>
 800e20a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e20e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	691b      	ldr	r3, [r3, #16]
 800e216:	2b3e      	cmp	r3, #62	@ 0x3e
 800e218:	d826      	bhi.n	800e268 <USB_EPStartXfer+0x11ee>
 800e21a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e21e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	691b      	ldr	r3, [r3, #16]
 800e226:	085b      	lsrs	r3, r3, #1
 800e228:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e22c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	691b      	ldr	r3, [r3, #16]
 800e238:	f003 0301 	and.w	r3, r3, #1
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d004      	beq.n	800e24a <USB_EPStartXfer+0x11d0>
 800e240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e244:	3301      	adds	r3, #1
 800e246:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e24a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e24e:	881b      	ldrh	r3, [r3, #0]
 800e250:	b29a      	uxth	r2, r3
 800e252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e256:	b29b      	uxth	r3, r3
 800e258:	029b      	lsls	r3, r3, #10
 800e25a:	b29b      	uxth	r3, r3
 800e25c:	4313      	orrs	r3, r2
 800e25e:	b29a      	uxth	r2, r3
 800e260:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e264:	801a      	strh	r2, [r3, #0]
 800e266:	e059      	b.n	800e31c <USB_EPStartXfer+0x12a2>
 800e268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e26c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	691b      	ldr	r3, [r3, #16]
 800e274:	095b      	lsrs	r3, r3, #5
 800e276:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e27a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e27e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	691b      	ldr	r3, [r3, #16]
 800e286:	f003 031f 	and.w	r3, r3, #31
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d104      	bne.n	800e298 <USB_EPStartXfer+0x121e>
 800e28e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e292:	3b01      	subs	r3, #1
 800e294:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e298:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e29c:	881b      	ldrh	r3, [r3, #0]
 800e29e:	b29a      	uxth	r2, r3
 800e2a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	029b      	lsls	r3, r3, #10
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	4313      	orrs	r3, r2
 800e2ac:	b29b      	uxth	r3, r3
 800e2ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e2b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e2b6:	b29a      	uxth	r2, r3
 800e2b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e2bc:	801a      	strh	r2, [r3, #0]
 800e2be:	e02d      	b.n	800e31c <USB_EPStartXfer+0x12a2>
 800e2c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	785b      	ldrb	r3, [r3, #1]
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	d125      	bne.n	800e31c <USB_EPStartXfer+0x12a2>
 800e2d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e2e6:	4413      	add	r3, r2
 800e2e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e2ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	00da      	lsls	r2, r3, #3
 800e2fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e2fe:	4413      	add	r3, r2
 800e300:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e304:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e30c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	691b      	ldr	r3, [r3, #16]
 800e314:	b29a      	uxth	r2, r3
 800e316:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e31a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e31c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e320:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	69db      	ldr	r3, [r3, #28]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	f000 8218 	beq.w	800e75e <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e32e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e332:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e336:	681a      	ldr	r2, [r3, #0]
 800e338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e33c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	009b      	lsls	r3, r3, #2
 800e346:	4413      	add	r3, r2
 800e348:	881b      	ldrh	r3, [r3, #0]
 800e34a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e34e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e356:	2b00      	cmp	r3, #0
 800e358:	d005      	beq.n	800e366 <USB_EPStartXfer+0x12ec>
 800e35a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e35e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e362:	2b00      	cmp	r3, #0
 800e364:	d10d      	bne.n	800e382 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e366:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e36a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e36e:	2b00      	cmp	r3, #0
 800e370:	f040 81f5 	bne.w	800e75e <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e374:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f040 81ee 	bne.w	800e75e <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e386:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e38a:	681a      	ldr	r2, [r3, #0]
 800e38c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	009b      	lsls	r3, r3, #2
 800e39a:	4413      	add	r3, r2
 800e39c:	881b      	ldrh	r3, [r3, #0]
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e3a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e3a8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800e3ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	441a      	add	r2, r3
 800e3c6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800e3ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e3ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e3d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	8013      	strh	r3, [r2, #0]
 800e3de:	e1be      	b.n	800e75e <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e3e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	78db      	ldrb	r3, [r3, #3]
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	f040 81b4 	bne.w	800e75a <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800e3f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	699a      	ldr	r2, [r3, #24]
 800e3fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e402:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	691b      	ldr	r3, [r3, #16]
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d917      	bls.n	800e43e <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800e40e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	691b      	ldr	r3, [r3, #16]
 800e41a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800e41e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	699a      	ldr	r2, [r3, #24]
 800e42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e42e:	1ad2      	subs	r2, r2, r3
 800e430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	619a      	str	r2, [r3, #24]
 800e43c:	e00e      	b.n	800e45c <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800e43e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	699b      	ldr	r3, [r3, #24]
 800e44a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800e44e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	2200      	movs	r2, #0
 800e45a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e45c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	785b      	ldrb	r3, [r3, #1]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	f040 8085 	bne.w	800e578 <USB_EPStartXfer+0x14fe>
 800e46e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e472:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e47c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e480:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	461a      	mov	r2, r3
 800e48e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e492:	4413      	add	r3, r2
 800e494:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e49c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	00da      	lsls	r2, r3, #3
 800e4a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e4aa:	4413      	add	r3, r2
 800e4ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e4b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e4b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e4b8:	881b      	ldrh	r3, [r3, #0]
 800e4ba:	b29b      	uxth	r3, r3
 800e4bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e4c0:	b29a      	uxth	r2, r3
 800e4c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e4c6:	801a      	strh	r2, [r3, #0]
 800e4c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d10c      	bne.n	800e4ea <USB_EPStartXfer+0x1470>
 800e4d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e4d4:	881b      	ldrh	r3, [r3, #0]
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e4dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e4e0:	b29a      	uxth	r2, r3
 800e4e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e4e6:	801a      	strh	r2, [r3, #0]
 800e4e8:	e077      	b.n	800e5da <USB_EPStartXfer+0x1560>
 800e4ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4ee:	2b3e      	cmp	r3, #62	@ 0x3e
 800e4f0:	d81e      	bhi.n	800e530 <USB_EPStartXfer+0x14b6>
 800e4f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4f6:	085b      	lsrs	r3, r3, #1
 800e4f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e4fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e500:	f003 0301 	and.w	r3, r3, #1
 800e504:	2b00      	cmp	r3, #0
 800e506:	d004      	beq.n	800e512 <USB_EPStartXfer+0x1498>
 800e508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e50c:	3301      	adds	r3, #1
 800e50e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e512:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e516:	881b      	ldrh	r3, [r3, #0]
 800e518:	b29a      	uxth	r2, r3
 800e51a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e51e:	b29b      	uxth	r3, r3
 800e520:	029b      	lsls	r3, r3, #10
 800e522:	b29b      	uxth	r3, r3
 800e524:	4313      	orrs	r3, r2
 800e526:	b29a      	uxth	r2, r3
 800e528:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e52c:	801a      	strh	r2, [r3, #0]
 800e52e:	e054      	b.n	800e5da <USB_EPStartXfer+0x1560>
 800e530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e534:	095b      	lsrs	r3, r3, #5
 800e536:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e53a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e53e:	f003 031f 	and.w	r3, r3, #31
 800e542:	2b00      	cmp	r3, #0
 800e544:	d104      	bne.n	800e550 <USB_EPStartXfer+0x14d6>
 800e546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e54a:	3b01      	subs	r3, #1
 800e54c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e550:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e554:	881b      	ldrh	r3, [r3, #0]
 800e556:	b29a      	uxth	r2, r3
 800e558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	029b      	lsls	r3, r3, #10
 800e560:	b29b      	uxth	r3, r3
 800e562:	4313      	orrs	r3, r2
 800e564:	b29b      	uxth	r3, r3
 800e566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e56a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e56e:	b29a      	uxth	r2, r3
 800e570:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e574:	801a      	strh	r2, [r3, #0]
 800e576:	e030      	b.n	800e5da <USB_EPStartXfer+0x1560>
 800e578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e57c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	785b      	ldrb	r3, [r3, #1]
 800e584:	2b01      	cmp	r3, #1
 800e586:	d128      	bne.n	800e5da <USB_EPStartXfer+0x1560>
 800e588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e58c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e59a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e5a4:	b29b      	uxth	r3, r3
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e5ac:	4413      	add	r3, r2
 800e5ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e5b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	781b      	ldrb	r3, [r3, #0]
 800e5be:	00da      	lsls	r2, r3, #3
 800e5c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e5c4:	4413      	add	r3, r2
 800e5c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e5ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e5ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5d2:	b29a      	uxth	r2, r3
 800e5d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e5d8:	801a      	strh	r2, [r3, #0]
 800e5da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e5e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	785b      	ldrb	r3, [r3, #1]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	f040 8085 	bne.w	800e704 <USB_EPStartXfer+0x168a>
 800e5fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e60c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e616:	b29b      	uxth	r3, r3
 800e618:	461a      	mov	r2, r3
 800e61a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e61e:	4413      	add	r3, r2
 800e620:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	00da      	lsls	r2, r3, #3
 800e632:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e636:	4413      	add	r3, r2
 800e638:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e63c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e640:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e644:	881b      	ldrh	r3, [r3, #0]
 800e646:	b29b      	uxth	r3, r3
 800e648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e64c:	b29a      	uxth	r2, r3
 800e64e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e652:	801a      	strh	r2, [r3, #0]
 800e654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d10c      	bne.n	800e676 <USB_EPStartXfer+0x15fc>
 800e65c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e660:	881b      	ldrh	r3, [r3, #0]
 800e662:	b29b      	uxth	r3, r3
 800e664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e66c:	b29a      	uxth	r2, r3
 800e66e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e672:	801a      	strh	r2, [r3, #0]
 800e674:	e073      	b.n	800e75e <USB_EPStartXfer+0x16e4>
 800e676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e67a:	2b3e      	cmp	r3, #62	@ 0x3e
 800e67c:	d81e      	bhi.n	800e6bc <USB_EPStartXfer+0x1642>
 800e67e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e682:	085b      	lsrs	r3, r3, #1
 800e684:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e68c:	f003 0301 	and.w	r3, r3, #1
 800e690:	2b00      	cmp	r3, #0
 800e692:	d004      	beq.n	800e69e <USB_EPStartXfer+0x1624>
 800e694:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e698:	3301      	adds	r3, #1
 800e69a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e69e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e6a2:	881b      	ldrh	r3, [r3, #0]
 800e6a4:	b29a      	uxth	r2, r3
 800e6a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	029b      	lsls	r3, r3, #10
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	4313      	orrs	r3, r2
 800e6b2:	b29a      	uxth	r2, r3
 800e6b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e6b8:	801a      	strh	r2, [r3, #0]
 800e6ba:	e050      	b.n	800e75e <USB_EPStartXfer+0x16e4>
 800e6bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6c0:	095b      	lsrs	r3, r3, #5
 800e6c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e6c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6ca:	f003 031f 	and.w	r3, r3, #31
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d104      	bne.n	800e6dc <USB_EPStartXfer+0x1662>
 800e6d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e6d6:	3b01      	subs	r3, #1
 800e6d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e6dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e6e0:	881b      	ldrh	r3, [r3, #0]
 800e6e2:	b29a      	uxth	r2, r3
 800e6e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	029b      	lsls	r3, r3, #10
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	4313      	orrs	r3, r2
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e6f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e6fa:	b29a      	uxth	r2, r3
 800e6fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e700:	801a      	strh	r2, [r3, #0]
 800e702:	e02c      	b.n	800e75e <USB_EPStartXfer+0x16e4>
 800e704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	785b      	ldrb	r3, [r3, #1]
 800e710:	2b01      	cmp	r3, #1
 800e712:	d124      	bne.n	800e75e <USB_EPStartXfer+0x16e4>
 800e714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e718:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e722:	b29b      	uxth	r3, r3
 800e724:	461a      	mov	r2, r3
 800e726:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e72a:	4413      	add	r3, r2
 800e72c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	00da      	lsls	r2, r3, #3
 800e73e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e742:	4413      	add	r3, r2
 800e744:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e748:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e750:	b29a      	uxth	r2, r3
 800e752:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e756:	801a      	strh	r2, [r3, #0]
 800e758:	e001      	b.n	800e75e <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800e75a:	2301      	movs	r3, #1
 800e75c:	e03a      	b.n	800e7d4 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e75e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e762:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e766:	681a      	ldr	r2, [r3, #0]
 800e768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e76c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	009b      	lsls	r3, r3, #2
 800e776:	4413      	add	r3, r2
 800e778:	881b      	ldrh	r3, [r3, #0]
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e780:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e784:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e788:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e78c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e790:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e794:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e798:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e79c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e7a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e7a8:	681a      	ldr	r2, [r3, #0]
 800e7aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	781b      	ldrb	r3, [r3, #0]
 800e7b6:	009b      	lsls	r3, r3, #2
 800e7b8:	441a      	add	r2, r3
 800e7ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e7be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e7c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e7c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e7ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e7d2:	2300      	movs	r3, #0
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}

0800e7de <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e7de:	b480      	push	{r7}
 800e7e0:	b085      	sub	sp, #20
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	6078      	str	r0, [r7, #4]
 800e7e6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	785b      	ldrb	r3, [r3, #1]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d020      	beq.n	800e832 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e7f0:	687a      	ldr	r2, [r7, #4]
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	781b      	ldrb	r3, [r3, #0]
 800e7f6:	009b      	lsls	r3, r3, #2
 800e7f8:	4413      	add	r3, r2
 800e7fa:	881b      	ldrh	r3, [r3, #0]
 800e7fc:	b29b      	uxth	r3, r3
 800e7fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e802:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e806:	81bb      	strh	r3, [r7, #12]
 800e808:	89bb      	ldrh	r3, [r7, #12]
 800e80a:	f083 0310 	eor.w	r3, r3, #16
 800e80e:	81bb      	strh	r3, [r7, #12]
 800e810:	687a      	ldr	r2, [r7, #4]
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	781b      	ldrb	r3, [r3, #0]
 800e816:	009b      	lsls	r3, r3, #2
 800e818:	441a      	add	r2, r3
 800e81a:	89bb      	ldrh	r3, [r7, #12]
 800e81c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e820:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e824:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	8013      	strh	r3, [r2, #0]
 800e830:	e01f      	b.n	800e872 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e832:	687a      	ldr	r2, [r7, #4]
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	009b      	lsls	r3, r3, #2
 800e83a:	4413      	add	r3, r2
 800e83c:	881b      	ldrh	r3, [r3, #0]
 800e83e:	b29b      	uxth	r3, r3
 800e840:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e844:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e848:	81fb      	strh	r3, [r7, #14]
 800e84a:	89fb      	ldrh	r3, [r7, #14]
 800e84c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e850:	81fb      	strh	r3, [r7, #14]
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	009b      	lsls	r3, r3, #2
 800e85a:	441a      	add	r2, r3
 800e85c:	89fb      	ldrh	r3, [r7, #14]
 800e85e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e862:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e86a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e86e:	b29b      	uxth	r3, r3
 800e870:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e872:	2300      	movs	r3, #0
}
 800e874:	4618      	mov	r0, r3
 800e876:	3714      	adds	r7, #20
 800e878:	46bd      	mov	sp, r7
 800e87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87e:	4770      	bx	lr

0800e880 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e880:	b480      	push	{r7}
 800e882:	b087      	sub	sp, #28
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
 800e888:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	7b1b      	ldrb	r3, [r3, #12]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	f040 809d 	bne.w	800e9ce <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	785b      	ldrb	r3, [r3, #1]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d04c      	beq.n	800e936 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e89c:	687a      	ldr	r2, [r7, #4]
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	009b      	lsls	r3, r3, #2
 800e8a4:	4413      	add	r3, r2
 800e8a6:	881b      	ldrh	r3, [r3, #0]
 800e8a8:	823b      	strh	r3, [r7, #16]
 800e8aa:	8a3b      	ldrh	r3, [r7, #16]
 800e8ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d01b      	beq.n	800e8ec <USB_EPClearStall+0x6c>
 800e8b4:	687a      	ldr	r2, [r7, #4]
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	781b      	ldrb	r3, [r3, #0]
 800e8ba:	009b      	lsls	r3, r3, #2
 800e8bc:	4413      	add	r3, r2
 800e8be:	881b      	ldrh	r3, [r3, #0]
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e8c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e8ca:	81fb      	strh	r3, [r7, #14]
 800e8cc:	687a      	ldr	r2, [r7, #4]
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	009b      	lsls	r3, r3, #2
 800e8d4:	441a      	add	r2, r3
 800e8d6:	89fb      	ldrh	r3, [r7, #14]
 800e8d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e8dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e8e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e8e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e8e8:	b29b      	uxth	r3, r3
 800e8ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	78db      	ldrb	r3, [r3, #3]
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	d06c      	beq.n	800e9ce <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	781b      	ldrb	r3, [r3, #0]
 800e8fa:	009b      	lsls	r3, r3, #2
 800e8fc:	4413      	add	r3, r2
 800e8fe:	881b      	ldrh	r3, [r3, #0]
 800e900:	b29b      	uxth	r3, r3
 800e902:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e906:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e90a:	81bb      	strh	r3, [r7, #12]
 800e90c:	89bb      	ldrh	r3, [r7, #12]
 800e90e:	f083 0320 	eor.w	r3, r3, #32
 800e912:	81bb      	strh	r3, [r7, #12]
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	781b      	ldrb	r3, [r3, #0]
 800e91a:	009b      	lsls	r3, r3, #2
 800e91c:	441a      	add	r2, r3
 800e91e:	89bb      	ldrh	r3, [r7, #12]
 800e920:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e924:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e928:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e92c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e930:	b29b      	uxth	r3, r3
 800e932:	8013      	strh	r3, [r2, #0]
 800e934:	e04b      	b.n	800e9ce <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e936:	687a      	ldr	r2, [r7, #4]
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	009b      	lsls	r3, r3, #2
 800e93e:	4413      	add	r3, r2
 800e940:	881b      	ldrh	r3, [r3, #0]
 800e942:	82fb      	strh	r3, [r7, #22]
 800e944:	8afb      	ldrh	r3, [r7, #22]
 800e946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d01b      	beq.n	800e986 <USB_EPClearStall+0x106>
 800e94e:	687a      	ldr	r2, [r7, #4]
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	009b      	lsls	r3, r3, #2
 800e956:	4413      	add	r3, r2
 800e958:	881b      	ldrh	r3, [r3, #0]
 800e95a:	b29b      	uxth	r3, r3
 800e95c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e964:	82bb      	strh	r3, [r7, #20]
 800e966:	687a      	ldr	r2, [r7, #4]
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	009b      	lsls	r3, r3, #2
 800e96e:	441a      	add	r2, r3
 800e970:	8abb      	ldrh	r3, [r7, #20]
 800e972:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e976:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e97a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e97e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e982:	b29b      	uxth	r3, r3
 800e984:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e986:	687a      	ldr	r2, [r7, #4]
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	781b      	ldrb	r3, [r3, #0]
 800e98c:	009b      	lsls	r3, r3, #2
 800e98e:	4413      	add	r3, r2
 800e990:	881b      	ldrh	r3, [r3, #0]
 800e992:	b29b      	uxth	r3, r3
 800e994:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e998:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e99c:	827b      	strh	r3, [r7, #18]
 800e99e:	8a7b      	ldrh	r3, [r7, #18]
 800e9a0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e9a4:	827b      	strh	r3, [r7, #18]
 800e9a6:	8a7b      	ldrh	r3, [r7, #18]
 800e9a8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e9ac:	827b      	strh	r3, [r7, #18]
 800e9ae:	687a      	ldr	r2, [r7, #4]
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	781b      	ldrb	r3, [r3, #0]
 800e9b4:	009b      	lsls	r3, r3, #2
 800e9b6:	441a      	add	r2, r3
 800e9b8:	8a7b      	ldrh	r3, [r7, #18]
 800e9ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e9be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e9c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e9c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e9ce:	2300      	movs	r3, #0
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	371c      	adds	r7, #28
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	4770      	bx	lr

0800e9dc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b083      	sub	sp, #12
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	460b      	mov	r3, r1
 800e9e6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e9e8:	78fb      	ldrb	r3, [r7, #3]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d103      	bne.n	800e9f6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2280      	movs	r2, #128	@ 0x80
 800e9f2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e9f6:	2300      	movs	r3, #0
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	370c      	adds	r7, #12
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr

0800ea04 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ea04:	b480      	push	{r7}
 800ea06:	b083      	sub	sp, #12
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ea12:	b29b      	uxth	r3, r3
 800ea14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea1c:	b29a      	uxth	r2, r3
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ea24:	2300      	movs	r3, #0
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	370c      	adds	r7, #12
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr

0800ea32 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ea32:	b480      	push	{r7}
 800ea34:	b085      	sub	sp, #20
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ea40:	b29b      	uxth	r3, r3
 800ea42:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ea44:	68fb      	ldr	r3, [r7, #12]
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3714      	adds	r7, #20
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr

0800ea52 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ea52:	b480      	push	{r7}
 800ea54:	b08b      	sub	sp, #44	@ 0x2c
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	60f8      	str	r0, [r7, #12]
 800ea5a:	60b9      	str	r1, [r7, #8]
 800ea5c:	4611      	mov	r1, r2
 800ea5e:	461a      	mov	r2, r3
 800ea60:	460b      	mov	r3, r1
 800ea62:	80fb      	strh	r3, [r7, #6]
 800ea64:	4613      	mov	r3, r2
 800ea66:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ea68:	88bb      	ldrh	r3, [r7, #4]
 800ea6a:	3301      	adds	r3, #1
 800ea6c:	085b      	lsrs	r3, r3, #1
 800ea6e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ea78:	88fa      	ldrh	r2, [r7, #6]
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	4413      	add	r3, r2
 800ea7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ea82:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ea84:	69bb      	ldr	r3, [r7, #24]
 800ea86:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea88:	e01b      	b.n	800eac2 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	3301      	adds	r3, #1
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	021b      	lsls	r3, r3, #8
 800ea98:	b21a      	sxth	r2, r3
 800ea9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ea9e:	4313      	orrs	r3, r2
 800eaa0:	b21b      	sxth	r3, r3
 800eaa2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800eaa4:	6a3b      	ldr	r3, [r7, #32]
 800eaa6:	8a7a      	ldrh	r2, [r7, #18]
 800eaa8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800eaaa:	6a3b      	ldr	r3, [r7, #32]
 800eaac:	3302      	adds	r3, #2
 800eaae:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800eab0:	69fb      	ldr	r3, [r7, #28]
 800eab2:	3301      	adds	r3, #1
 800eab4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800eab6:	69fb      	ldr	r3, [r7, #28]
 800eab8:	3301      	adds	r3, #1
 800eaba:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800eabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eabe:	3b01      	subs	r3, #1
 800eac0:	627b      	str	r3, [r7, #36]	@ 0x24
 800eac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d1e0      	bne.n	800ea8a <USB_WritePMA+0x38>
  }
}
 800eac8:	bf00      	nop
 800eaca:	bf00      	nop
 800eacc:	372c      	adds	r7, #44	@ 0x2c
 800eace:	46bd      	mov	sp, r7
 800ead0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead4:	4770      	bx	lr

0800ead6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ead6:	b480      	push	{r7}
 800ead8:	b08b      	sub	sp, #44	@ 0x2c
 800eada:	af00      	add	r7, sp, #0
 800eadc:	60f8      	str	r0, [r7, #12]
 800eade:	60b9      	str	r1, [r7, #8]
 800eae0:	4611      	mov	r1, r2
 800eae2:	461a      	mov	r2, r3
 800eae4:	460b      	mov	r3, r1
 800eae6:	80fb      	strh	r3, [r7, #6]
 800eae8:	4613      	mov	r3, r2
 800eaea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800eaec:	88bb      	ldrh	r3, [r7, #4]
 800eaee:	085b      	lsrs	r3, r3, #1
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800eafc:	88fa      	ldrh	r2, [r7, #6]
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	4413      	add	r3, r2
 800eb02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eb06:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800eb08:	69bb      	ldr	r3, [r7, #24]
 800eb0a:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb0c:	e018      	b.n	800eb40 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800eb0e:	6a3b      	ldr	r3, [r7, #32]
 800eb10:	881b      	ldrh	r3, [r3, #0]
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800eb16:	6a3b      	ldr	r3, [r7, #32]
 800eb18:	3302      	adds	r3, #2
 800eb1a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	b2da      	uxtb	r2, r3
 800eb20:	69fb      	ldr	r3, [r7, #28]
 800eb22:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800eb24:	69fb      	ldr	r3, [r7, #28]
 800eb26:	3301      	adds	r3, #1
 800eb28:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	0a1b      	lsrs	r3, r3, #8
 800eb2e:	b2da      	uxtb	r2, r3
 800eb30:	69fb      	ldr	r3, [r7, #28]
 800eb32:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800eb34:	69fb      	ldr	r3, [r7, #28]
 800eb36:	3301      	adds	r3, #1
 800eb38:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800eb3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb3c:	3b01      	subs	r3, #1
 800eb3e:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d1e3      	bne.n	800eb0e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800eb46:	88bb      	ldrh	r3, [r7, #4]
 800eb48:	f003 0301 	and.w	r3, r3, #1
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d007      	beq.n	800eb62 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800eb52:	6a3b      	ldr	r3, [r7, #32]
 800eb54:	881b      	ldrh	r3, [r3, #0]
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	b2da      	uxtb	r2, r3
 800eb5e:	69fb      	ldr	r3, [r7, #28]
 800eb60:	701a      	strb	r2, [r3, #0]
  }
}
 800eb62:	bf00      	nop
 800eb64:	372c      	adds	r7, #44	@ 0x2c
 800eb66:	46bd      	mov	sp, r7
 800eb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6c:	4770      	bx	lr

0800eb6e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eb6e:	b580      	push	{r7, lr}
 800eb70:	b084      	sub	sp, #16
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
 800eb76:	460b      	mov	r3, r1
 800eb78:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800eb7a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800eb7e:	f002 f90f 	bl	8010da0 <USBD_static_malloc>
 800eb82:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d105      	bne.n	800eb96 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800eb92:	2302      	movs	r3, #2
 800eb94:	e066      	b.n	800ec64 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	68fa      	ldr	r2, [r7, #12]
 800eb9a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	7c1b      	ldrb	r3, [r3, #16]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d119      	bne.n	800ebda <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800eba6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ebaa:	2202      	movs	r2, #2
 800ebac:	2181      	movs	r1, #129	@ 0x81
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f001 ff9d 	bl	8010aee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ebba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ebbe:	2202      	movs	r2, #2
 800ebc0:	2101      	movs	r1, #1
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f001 ff93 	bl	8010aee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2201      	movs	r2, #1
 800ebcc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2210      	movs	r2, #16
 800ebd4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800ebd8:	e016      	b.n	800ec08 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ebda:	2340      	movs	r3, #64	@ 0x40
 800ebdc:	2202      	movs	r2, #2
 800ebde:	2181      	movs	r1, #129	@ 0x81
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f001 ff84 	bl	8010aee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2201      	movs	r2, #1
 800ebea:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ebec:	2340      	movs	r3, #64	@ 0x40
 800ebee:	2202      	movs	r2, #2
 800ebf0:	2101      	movs	r1, #1
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f001 ff7b 	bl	8010aee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2210      	movs	r2, #16
 800ec04:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ec08:	2308      	movs	r3, #8
 800ec0a:	2203      	movs	r2, #3
 800ec0c:	2182      	movs	r1, #130	@ 0x82
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f001 ff6d 	bl	8010aee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2201      	movs	r2, #1
 800ec18:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2200      	movs	r2, #0
 800ec32:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	7c1b      	ldrb	r3, [r3, #16]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d109      	bne.n	800ec52 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ec44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ec48:	2101      	movs	r1, #1
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f002 f83e 	bl	8010ccc <USBD_LL_PrepareReceive>
 800ec50:	e007      	b.n	800ec62 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ec58:	2340      	movs	r3, #64	@ 0x40
 800ec5a:	2101      	movs	r1, #1
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f002 f835 	bl	8010ccc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ec62:	2300      	movs	r3, #0
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3710      	adds	r7, #16
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b082      	sub	sp, #8
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	460b      	mov	r3, r1
 800ec76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ec78:	2181      	movs	r1, #129	@ 0x81
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f001 ff5d 	bl	8010b3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2200      	movs	r2, #0
 800ec84:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ec86:	2101      	movs	r1, #1
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f001 ff56 	bl	8010b3a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2200      	movs	r2, #0
 800ec92:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ec96:	2182      	movs	r1, #130	@ 0x82
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f001 ff4e 	bl	8010b3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2200      	movs	r2, #0
 800eca2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d00e      	beq.n	800ecd6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ecbe:	685b      	ldr	r3, [r3, #4]
 800ecc0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f002 f877 	bl	8010dbc <USBD_static_free>
    pdev->pClassData = NULL;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ecd6:	2300      	movs	r3, #0
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3708      	adds	r7, #8
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}

0800ece0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b086      	sub	sp, #24
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
 800ece8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ecf0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d101      	bne.n	800ed08 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ed04:	2303      	movs	r3, #3
 800ed06:	e0af      	b.n	800ee68 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	781b      	ldrb	r3, [r3, #0]
 800ed0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d03f      	beq.n	800ed94 <USBD_CDC_Setup+0xb4>
 800ed14:	2b20      	cmp	r3, #32
 800ed16:	f040 809f 	bne.w	800ee58 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	88db      	ldrh	r3, [r3, #6]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d02e      	beq.n	800ed80 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	781b      	ldrb	r3, [r3, #0]
 800ed26:	b25b      	sxtb	r3, r3
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	da16      	bge.n	800ed5a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ed32:	689b      	ldr	r3, [r3, #8]
 800ed34:	683a      	ldr	r2, [r7, #0]
 800ed36:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ed38:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ed3a:	683a      	ldr	r2, [r7, #0]
 800ed3c:	88d2      	ldrh	r2, [r2, #6]
 800ed3e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	88db      	ldrh	r3, [r3, #6]
 800ed44:	2b07      	cmp	r3, #7
 800ed46:	bf28      	it	cs
 800ed48:	2307      	movcs	r3, #7
 800ed4a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	89fa      	ldrh	r2, [r7, #14]
 800ed50:	4619      	mov	r1, r3
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f001 facd 	bl	80102f2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ed58:	e085      	b.n	800ee66 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	785a      	ldrb	r2, [r3, #1]
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	88db      	ldrh	r3, [r3, #6]
 800ed68:	b2da      	uxtb	r2, r3
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ed70:	6939      	ldr	r1, [r7, #16]
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	88db      	ldrh	r3, [r3, #6]
 800ed76:	461a      	mov	r2, r3
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f001 fae6 	bl	801034a <USBD_CtlPrepareRx>
      break;
 800ed7e:	e072      	b.n	800ee66 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ed86:	689b      	ldr	r3, [r3, #8]
 800ed88:	683a      	ldr	r2, [r7, #0]
 800ed8a:	7850      	ldrb	r0, [r2, #1]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	6839      	ldr	r1, [r7, #0]
 800ed90:	4798      	blx	r3
      break;
 800ed92:	e068      	b.n	800ee66 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	785b      	ldrb	r3, [r3, #1]
 800ed98:	2b0b      	cmp	r3, #11
 800ed9a:	d852      	bhi.n	800ee42 <USBD_CDC_Setup+0x162>
 800ed9c:	a201      	add	r2, pc, #4	@ (adr r2, 800eda4 <USBD_CDC_Setup+0xc4>)
 800ed9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eda2:	bf00      	nop
 800eda4:	0800edd5 	.word	0x0800edd5
 800eda8:	0800ee51 	.word	0x0800ee51
 800edac:	0800ee43 	.word	0x0800ee43
 800edb0:	0800ee43 	.word	0x0800ee43
 800edb4:	0800ee43 	.word	0x0800ee43
 800edb8:	0800ee43 	.word	0x0800ee43
 800edbc:	0800ee43 	.word	0x0800ee43
 800edc0:	0800ee43 	.word	0x0800ee43
 800edc4:	0800ee43 	.word	0x0800ee43
 800edc8:	0800ee43 	.word	0x0800ee43
 800edcc:	0800edff 	.word	0x0800edff
 800edd0:	0800ee29 	.word	0x0800ee29
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edda:	b2db      	uxtb	r3, r3
 800eddc:	2b03      	cmp	r3, #3
 800edde:	d107      	bne.n	800edf0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ede0:	f107 030a 	add.w	r3, r7, #10
 800ede4:	2202      	movs	r2, #2
 800ede6:	4619      	mov	r1, r3
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f001 fa82 	bl	80102f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800edee:	e032      	b.n	800ee56 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800edf0:	6839      	ldr	r1, [r7, #0]
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f001 fa0c 	bl	8010210 <USBD_CtlError>
            ret = USBD_FAIL;
 800edf8:	2303      	movs	r3, #3
 800edfa:	75fb      	strb	r3, [r7, #23]
          break;
 800edfc:	e02b      	b.n	800ee56 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee04:	b2db      	uxtb	r3, r3
 800ee06:	2b03      	cmp	r3, #3
 800ee08:	d107      	bne.n	800ee1a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ee0a:	f107 030d 	add.w	r3, r7, #13
 800ee0e:	2201      	movs	r2, #1
 800ee10:	4619      	mov	r1, r3
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f001 fa6d 	bl	80102f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ee18:	e01d      	b.n	800ee56 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ee1a:	6839      	ldr	r1, [r7, #0]
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f001 f9f7 	bl	8010210 <USBD_CtlError>
            ret = USBD_FAIL;
 800ee22:	2303      	movs	r3, #3
 800ee24:	75fb      	strb	r3, [r7, #23]
          break;
 800ee26:	e016      	b.n	800ee56 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee2e:	b2db      	uxtb	r3, r3
 800ee30:	2b03      	cmp	r3, #3
 800ee32:	d00f      	beq.n	800ee54 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ee34:	6839      	ldr	r1, [r7, #0]
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f001 f9ea 	bl	8010210 <USBD_CtlError>
            ret = USBD_FAIL;
 800ee3c:	2303      	movs	r3, #3
 800ee3e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ee40:	e008      	b.n	800ee54 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ee42:	6839      	ldr	r1, [r7, #0]
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f001 f9e3 	bl	8010210 <USBD_CtlError>
          ret = USBD_FAIL;
 800ee4a:	2303      	movs	r3, #3
 800ee4c:	75fb      	strb	r3, [r7, #23]
          break;
 800ee4e:	e002      	b.n	800ee56 <USBD_CDC_Setup+0x176>
          break;
 800ee50:	bf00      	nop
 800ee52:	e008      	b.n	800ee66 <USBD_CDC_Setup+0x186>
          break;
 800ee54:	bf00      	nop
      }
      break;
 800ee56:	e006      	b.n	800ee66 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ee58:	6839      	ldr	r1, [r7, #0]
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f001 f9d8 	bl	8010210 <USBD_CtlError>
      ret = USBD_FAIL;
 800ee60:	2303      	movs	r3, #3
 800ee62:	75fb      	strb	r3, [r7, #23]
      break;
 800ee64:	bf00      	nop
  }

  return (uint8_t)ret;
 800ee66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	3718      	adds	r7, #24
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}

0800ee70 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b084      	sub	sp, #16
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
 800ee78:	460b      	mov	r3, r1
 800ee7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ee82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d101      	bne.n	800ee92 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ee8e:	2303      	movs	r3, #3
 800ee90:	e04f      	b.n	800ef32 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ee98:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ee9a:	78fa      	ldrb	r2, [r7, #3]
 800ee9c:	6879      	ldr	r1, [r7, #4]
 800ee9e:	4613      	mov	r3, r2
 800eea0:	009b      	lsls	r3, r3, #2
 800eea2:	4413      	add	r3, r2
 800eea4:	009b      	lsls	r3, r3, #2
 800eea6:	440b      	add	r3, r1
 800eea8:	3318      	adds	r3, #24
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d029      	beq.n	800ef04 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800eeb0:	78fa      	ldrb	r2, [r7, #3]
 800eeb2:	6879      	ldr	r1, [r7, #4]
 800eeb4:	4613      	mov	r3, r2
 800eeb6:	009b      	lsls	r3, r3, #2
 800eeb8:	4413      	add	r3, r2
 800eeba:	009b      	lsls	r3, r3, #2
 800eebc:	440b      	add	r3, r1
 800eebe:	3318      	adds	r3, #24
 800eec0:	681a      	ldr	r2, [r3, #0]
 800eec2:	78f9      	ldrb	r1, [r7, #3]
 800eec4:	68f8      	ldr	r0, [r7, #12]
 800eec6:	460b      	mov	r3, r1
 800eec8:	009b      	lsls	r3, r3, #2
 800eeca:	440b      	add	r3, r1
 800eecc:	00db      	lsls	r3, r3, #3
 800eece:	4403      	add	r3, r0
 800eed0:	3320      	adds	r3, #32
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	fbb2 f1f3 	udiv	r1, r2, r3
 800eed8:	fb01 f303 	mul.w	r3, r1, r3
 800eedc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d110      	bne.n	800ef04 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800eee2:	78fa      	ldrb	r2, [r7, #3]
 800eee4:	6879      	ldr	r1, [r7, #4]
 800eee6:	4613      	mov	r3, r2
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	4413      	add	r3, r2
 800eeec:	009b      	lsls	r3, r3, #2
 800eeee:	440b      	add	r3, r1
 800eef0:	3318      	adds	r3, #24
 800eef2:	2200      	movs	r2, #0
 800eef4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800eef6:	78f9      	ldrb	r1, [r7, #3]
 800eef8:	2300      	movs	r3, #0
 800eefa:	2200      	movs	r2, #0
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f001 fec4 	bl	8010c8a <USBD_LL_Transmit>
 800ef02:	e015      	b.n	800ef30 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	2200      	movs	r2, #0
 800ef08:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ef12:	691b      	ldr	r3, [r3, #16]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d00b      	beq.n	800ef30 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ef1e:	691b      	ldr	r3, [r3, #16]
 800ef20:	68ba      	ldr	r2, [r7, #8]
 800ef22:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ef26:	68ba      	ldr	r2, [r7, #8]
 800ef28:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ef2c:	78fa      	ldrb	r2, [r7, #3]
 800ef2e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ef30:	2300      	movs	r3, #0
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	3710      	adds	r7, #16
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}

0800ef3a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ef3a:	b580      	push	{r7, lr}
 800ef3c:	b084      	sub	sp, #16
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	6078      	str	r0, [r7, #4]
 800ef42:	460b      	mov	r3, r1
 800ef44:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d101      	bne.n	800ef5c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ef58:	2303      	movs	r3, #3
 800ef5a:	e015      	b.n	800ef88 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ef5c:	78fb      	ldrb	r3, [r7, #3]
 800ef5e:	4619      	mov	r1, r3
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f001 fed4 	bl	8010d0e <USBD_LL_GetRxDataSize>
 800ef66:	4602      	mov	r2, r0
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ef74:	68db      	ldr	r3, [r3, #12]
 800ef76:	68fa      	ldr	r2, [r7, #12]
 800ef78:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ef7c:	68fa      	ldr	r2, [r7, #12]
 800ef7e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ef82:	4611      	mov	r1, r2
 800ef84:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ef86:	2300      	movs	r3, #0
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3710      	adds	r7, #16
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}

0800ef90 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b084      	sub	sp, #16
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef9e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d101      	bne.n	800efaa <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800efa6:	2303      	movs	r3, #3
 800efa8:	e01a      	b.n	800efe0 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d014      	beq.n	800efde <USBD_CDC_EP0_RxReady+0x4e>
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800efba:	2bff      	cmp	r3, #255	@ 0xff
 800efbc:	d00f      	beq.n	800efde <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800efc4:	689b      	ldr	r3, [r3, #8]
 800efc6:	68fa      	ldr	r2, [r7, #12]
 800efc8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800efcc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800efce:	68fa      	ldr	r2, [r7, #12]
 800efd0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800efd4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	22ff      	movs	r2, #255	@ 0xff
 800efda:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800efde:	2300      	movs	r3, #0
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	3710      	adds	r7, #16
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}

0800efe8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800efe8:	b480      	push	{r7}
 800efea:	b083      	sub	sp, #12
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2243      	movs	r2, #67	@ 0x43
 800eff4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800eff6:	4b03      	ldr	r3, [pc, #12]	@ (800f004 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800eff8:	4618      	mov	r0, r3
 800effa:	370c      	adds	r7, #12
 800effc:	46bd      	mov	sp, r7
 800effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f002:	4770      	bx	lr
 800f004:	200000e8 	.word	0x200000e8

0800f008 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f008:	b480      	push	{r7}
 800f00a:	b083      	sub	sp, #12
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2243      	movs	r2, #67	@ 0x43
 800f014:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f016:	4b03      	ldr	r3, [pc, #12]	@ (800f024 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f018:	4618      	mov	r0, r3
 800f01a:	370c      	adds	r7, #12
 800f01c:	46bd      	mov	sp, r7
 800f01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f022:	4770      	bx	lr
 800f024:	200000a4 	.word	0x200000a4

0800f028 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f028:	b480      	push	{r7}
 800f02a:	b083      	sub	sp, #12
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2243      	movs	r2, #67	@ 0x43
 800f034:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f036:	4b03      	ldr	r3, [pc, #12]	@ (800f044 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f038:	4618      	mov	r0, r3
 800f03a:	370c      	adds	r7, #12
 800f03c:	46bd      	mov	sp, r7
 800f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f042:	4770      	bx	lr
 800f044:	2000012c 	.word	0x2000012c

0800f048 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f048:	b480      	push	{r7}
 800f04a:	b083      	sub	sp, #12
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	220a      	movs	r2, #10
 800f054:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f056:	4b03      	ldr	r3, [pc, #12]	@ (800f064 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f058:	4618      	mov	r0, r3
 800f05a:	370c      	adds	r7, #12
 800f05c:	46bd      	mov	sp, r7
 800f05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f062:	4770      	bx	lr
 800f064:	20000060 	.word	0x20000060

0800f068 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f068:	b480      	push	{r7}
 800f06a:	b083      	sub	sp, #12
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d101      	bne.n	800f07c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f078:	2303      	movs	r3, #3
 800f07a:	e004      	b.n	800f086 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	683a      	ldr	r2, [r7, #0]
 800f080:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800f084:	2300      	movs	r3, #0
}
 800f086:	4618      	mov	r0, r3
 800f088:	370c      	adds	r7, #12
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr

0800f092 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f092:	b480      	push	{r7}
 800f094:	b087      	sub	sp, #28
 800f096:	af00      	add	r7, sp, #0
 800f098:	60f8      	str	r0, [r7, #12]
 800f09a:	60b9      	str	r1, [r7, #8]
 800f09c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f0a4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d101      	bne.n	800f0b0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f0ac:	2303      	movs	r3, #3
 800f0ae:	e008      	b.n	800f0c2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	68ba      	ldr	r2, [r7, #8]
 800f0b4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	687a      	ldr	r2, [r7, #4]
 800f0bc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f0c0:	2300      	movs	r3, #0
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	371c      	adds	r7, #28
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0cc:	4770      	bx	lr

0800f0ce <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f0ce:	b480      	push	{r7}
 800f0d0:	b085      	sub	sp, #20
 800f0d2:	af00      	add	r7, sp, #0
 800f0d4:	6078      	str	r0, [r7, #4]
 800f0d6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f0de:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d101      	bne.n	800f0ea <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f0e6:	2303      	movs	r3, #3
 800f0e8:	e004      	b.n	800f0f4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	683a      	ldr	r2, [r7, #0]
 800f0ee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f0f2:	2300      	movs	r3, #0
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3714      	adds	r7, #20
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr

0800f100 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b084      	sub	sp, #16
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f10e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f110:	2301      	movs	r3, #1
 800f112:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d101      	bne.n	800f122 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f11e:	2303      	movs	r3, #3
 800f120:	e01a      	b.n	800f158 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d114      	bne.n	800f156 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	2201      	movs	r2, #1
 800f130:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f14a:	2181      	movs	r1, #129	@ 0x81
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f001 fd9c 	bl	8010c8a <USBD_LL_Transmit>

    ret = USBD_OK;
 800f152:	2300      	movs	r3, #0
 800f154:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f156:	7bfb      	ldrb	r3, [r7, #15]
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3710      	adds	r7, #16
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}

0800f160 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b084      	sub	sp, #16
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f16e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f176:	2b00      	cmp	r3, #0
 800f178:	d101      	bne.n	800f17e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f17a:	2303      	movs	r3, #3
 800f17c:	e016      	b.n	800f1ac <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	7c1b      	ldrb	r3, [r3, #16]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d109      	bne.n	800f19a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f18c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f190:	2101      	movs	r1, #1
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f001 fd9a 	bl	8010ccc <USBD_LL_PrepareReceive>
 800f198:	e007      	b.n	800f1aa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f1a0:	2340      	movs	r3, #64	@ 0x40
 800f1a2:	2101      	movs	r1, #1
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f001 fd91 	bl	8010ccc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f1aa:	2300      	movs	r3, #0
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3710      	adds	r7, #16
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}

0800f1b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b086      	sub	sp, #24
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	60f8      	str	r0, [r7, #12]
 800f1bc:	60b9      	str	r1, [r7, #8]
 800f1be:	4613      	mov	r3, r2
 800f1c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d101      	bne.n	800f1cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f1c8:	2303      	movs	r3, #3
 800f1ca:	e01f      	b.n	800f20c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d003      	beq.n	800f1f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	68ba      	ldr	r2, [r7, #8]
 800f1ee:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	2201      	movs	r2, #1
 800f1f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	79fa      	ldrb	r2, [r7, #7]
 800f1fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f200:	68f8      	ldr	r0, [r7, #12]
 800f202:	f001 fbf9 	bl	80109f8 <USBD_LL_Init>
 800f206:	4603      	mov	r3, r0
 800f208:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f20a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3718      	adds	r7, #24
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}

0800f214 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b084      	sub	sp, #16
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f21e:	2300      	movs	r3, #0
 800f220:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d101      	bne.n	800f22c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f228:	2303      	movs	r3, #3
 800f22a:	e016      	b.n	800f25a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	683a      	ldr	r2, [r7, #0]
 800f230:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f23a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d00b      	beq.n	800f258 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f248:	f107 020e 	add.w	r2, r7, #14
 800f24c:	4610      	mov	r0, r2
 800f24e:	4798      	blx	r3
 800f250:	4602      	mov	r2, r0
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f258:	2300      	movs	r3, #0
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3710      	adds	r7, #16
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}

0800f262 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f262:	b580      	push	{r7, lr}
 800f264:	b082      	sub	sp, #8
 800f266:	af00      	add	r7, sp, #0
 800f268:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f001 fc24 	bl	8010ab8 <USBD_LL_Start>
 800f270:	4603      	mov	r3, r0
}
 800f272:	4618      	mov	r0, r3
 800f274:	3708      	adds	r7, #8
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}

0800f27a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f27a:	b480      	push	{r7}
 800f27c:	b083      	sub	sp, #12
 800f27e:	af00      	add	r7, sp, #0
 800f280:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f282:	2300      	movs	r3, #0
}
 800f284:	4618      	mov	r0, r3
 800f286:	370c      	adds	r7, #12
 800f288:	46bd      	mov	sp, r7
 800f28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28e:	4770      	bx	lr

0800f290 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b084      	sub	sp, #16
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	460b      	mov	r3, r1
 800f29a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f29c:	2303      	movs	r3, #3
 800f29e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d009      	beq.n	800f2be <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	78fa      	ldrb	r2, [r7, #3]
 800f2b4:	4611      	mov	r1, r2
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	4798      	blx	r3
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f2be:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3710      	adds	r7, #16
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b082      	sub	sp, #8
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d007      	beq.n	800f2ee <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2e4:	685b      	ldr	r3, [r3, #4]
 800f2e6:	78fa      	ldrb	r2, [r7, #3]
 800f2e8:	4611      	mov	r1, r2
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	4798      	blx	r3
  }

  return USBD_OK;
 800f2ee:	2300      	movs	r3, #0
}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	3708      	adds	r7, #8
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}

0800f2f8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b084      	sub	sp, #16
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f308:	6839      	ldr	r1, [r7, #0]
 800f30a:	4618      	mov	r0, r3
 800f30c:	f000 ff46 	bl	801019c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2201      	movs	r2, #1
 800f314:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f31e:	461a      	mov	r2, r3
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f32c:	f003 031f 	and.w	r3, r3, #31
 800f330:	2b02      	cmp	r3, #2
 800f332:	d01a      	beq.n	800f36a <USBD_LL_SetupStage+0x72>
 800f334:	2b02      	cmp	r3, #2
 800f336:	d822      	bhi.n	800f37e <USBD_LL_SetupStage+0x86>
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d002      	beq.n	800f342 <USBD_LL_SetupStage+0x4a>
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d00a      	beq.n	800f356 <USBD_LL_SetupStage+0x5e>
 800f340:	e01d      	b.n	800f37e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f348:	4619      	mov	r1, r3
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f000 f9ee 	bl	800f72c <USBD_StdDevReq>
 800f350:	4603      	mov	r3, r0
 800f352:	73fb      	strb	r3, [r7, #15]
      break;
 800f354:	e020      	b.n	800f398 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f35c:	4619      	mov	r1, r3
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f000 fa52 	bl	800f808 <USBD_StdItfReq>
 800f364:	4603      	mov	r3, r0
 800f366:	73fb      	strb	r3, [r7, #15]
      break;
 800f368:	e016      	b.n	800f398 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f370:	4619      	mov	r1, r3
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f000 fa91 	bl	800f89a <USBD_StdEPReq>
 800f378:	4603      	mov	r3, r0
 800f37a:	73fb      	strb	r3, [r7, #15]
      break;
 800f37c:	e00c      	b.n	800f398 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f384:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	4619      	mov	r1, r3
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f001 fbf3 	bl	8010b78 <USBD_LL_StallEP>
 800f392:	4603      	mov	r3, r0
 800f394:	73fb      	strb	r3, [r7, #15]
      break;
 800f396:	bf00      	nop
  }

  return ret;
 800f398:	7bfb      	ldrb	r3, [r7, #15]
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	3710      	adds	r7, #16
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}

0800f3a2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f3a2:	b580      	push	{r7, lr}
 800f3a4:	b086      	sub	sp, #24
 800f3a6:	af00      	add	r7, sp, #0
 800f3a8:	60f8      	str	r0, [r7, #12]
 800f3aa:	460b      	mov	r3, r1
 800f3ac:	607a      	str	r2, [r7, #4]
 800f3ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f3b0:	7afb      	ldrb	r3, [r7, #11]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d138      	bne.n	800f428 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f3bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f3c4:	2b03      	cmp	r3, #3
 800f3c6:	d14a      	bne.n	800f45e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f3c8:	693b      	ldr	r3, [r7, #16]
 800f3ca:	689a      	ldr	r2, [r3, #8]
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	68db      	ldr	r3, [r3, #12]
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	d913      	bls.n	800f3fc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f3d4:	693b      	ldr	r3, [r7, #16]
 800f3d6:	689a      	ldr	r2, [r3, #8]
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	68db      	ldr	r3, [r3, #12]
 800f3dc:	1ad2      	subs	r2, r2, r3
 800f3de:	693b      	ldr	r3, [r7, #16]
 800f3e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	68da      	ldr	r2, [r3, #12]
 800f3e6:	693b      	ldr	r3, [r7, #16]
 800f3e8:	689b      	ldr	r3, [r3, #8]
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	bf28      	it	cs
 800f3ee:	4613      	movcs	r3, r2
 800f3f0:	461a      	mov	r2, r3
 800f3f2:	6879      	ldr	r1, [r7, #4]
 800f3f4:	68f8      	ldr	r0, [r7, #12]
 800f3f6:	f000 ffc5 	bl	8010384 <USBD_CtlContinueRx>
 800f3fa:	e030      	b.n	800f45e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f402:	b2db      	uxtb	r3, r3
 800f404:	2b03      	cmp	r3, #3
 800f406:	d10b      	bne.n	800f420 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f40e:	691b      	ldr	r3, [r3, #16]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d005      	beq.n	800f420 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f41a:	691b      	ldr	r3, [r3, #16]
 800f41c:	68f8      	ldr	r0, [r7, #12]
 800f41e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f420:	68f8      	ldr	r0, [r7, #12]
 800f422:	f000 ffc0 	bl	80103a6 <USBD_CtlSendStatus>
 800f426:	e01a      	b.n	800f45e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f42e:	b2db      	uxtb	r3, r3
 800f430:	2b03      	cmp	r3, #3
 800f432:	d114      	bne.n	800f45e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f43a:	699b      	ldr	r3, [r3, #24]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d00e      	beq.n	800f45e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f446:	699b      	ldr	r3, [r3, #24]
 800f448:	7afa      	ldrb	r2, [r7, #11]
 800f44a:	4611      	mov	r1, r2
 800f44c:	68f8      	ldr	r0, [r7, #12]
 800f44e:	4798      	blx	r3
 800f450:	4603      	mov	r3, r0
 800f452:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f454:	7dfb      	ldrb	r3, [r7, #23]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d001      	beq.n	800f45e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f45a:	7dfb      	ldrb	r3, [r7, #23]
 800f45c:	e000      	b.n	800f460 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f45e:	2300      	movs	r3, #0
}
 800f460:	4618      	mov	r0, r3
 800f462:	3718      	adds	r7, #24
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b086      	sub	sp, #24
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	60f8      	str	r0, [r7, #12]
 800f470:	460b      	mov	r3, r1
 800f472:	607a      	str	r2, [r7, #4]
 800f474:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f476:	7afb      	ldrb	r3, [r7, #11]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d16b      	bne.n	800f554 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	3314      	adds	r3, #20
 800f480:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f488:	2b02      	cmp	r3, #2
 800f48a:	d156      	bne.n	800f53a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f48c:	693b      	ldr	r3, [r7, #16]
 800f48e:	689a      	ldr	r2, [r3, #8]
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	68db      	ldr	r3, [r3, #12]
 800f494:	429a      	cmp	r2, r3
 800f496:	d914      	bls.n	800f4c2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f498:	693b      	ldr	r3, [r7, #16]
 800f49a:	689a      	ldr	r2, [r3, #8]
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	1ad2      	subs	r2, r2, r3
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	689b      	ldr	r3, [r3, #8]
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	6879      	ldr	r1, [r7, #4]
 800f4ae:	68f8      	ldr	r0, [r7, #12]
 800f4b0:	f000 ff3a 	bl	8010328 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	2100      	movs	r1, #0
 800f4ba:	68f8      	ldr	r0, [r7, #12]
 800f4bc:	f001 fc06 	bl	8010ccc <USBD_LL_PrepareReceive>
 800f4c0:	e03b      	b.n	800f53a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	68da      	ldr	r2, [r3, #12]
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	689b      	ldr	r3, [r3, #8]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d11c      	bne.n	800f508 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	685a      	ldr	r2, [r3, #4]
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d316      	bcc.n	800f508 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	685a      	ldr	r2, [r3, #4]
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d20f      	bcs.n	800f508 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	68f8      	ldr	r0, [r7, #12]
 800f4ee:	f000 ff1b 	bl	8010328 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	2100      	movs	r1, #0
 800f500:	68f8      	ldr	r0, [r7, #12]
 800f502:	f001 fbe3 	bl	8010ccc <USBD_LL_PrepareReceive>
 800f506:	e018      	b.n	800f53a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f50e:	b2db      	uxtb	r3, r3
 800f510:	2b03      	cmp	r3, #3
 800f512:	d10b      	bne.n	800f52c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f51a:	68db      	ldr	r3, [r3, #12]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d005      	beq.n	800f52c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f526:	68db      	ldr	r3, [r3, #12]
 800f528:	68f8      	ldr	r0, [r7, #12]
 800f52a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f52c:	2180      	movs	r1, #128	@ 0x80
 800f52e:	68f8      	ldr	r0, [r7, #12]
 800f530:	f001 fb22 	bl	8010b78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f534:	68f8      	ldr	r0, [r7, #12]
 800f536:	f000 ff49 	bl	80103cc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f540:	2b01      	cmp	r3, #1
 800f542:	d122      	bne.n	800f58a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f544:	68f8      	ldr	r0, [r7, #12]
 800f546:	f7ff fe98 	bl	800f27a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2200      	movs	r2, #0
 800f54e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f552:	e01a      	b.n	800f58a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f55a:	b2db      	uxtb	r3, r3
 800f55c:	2b03      	cmp	r3, #3
 800f55e:	d114      	bne.n	800f58a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f566:	695b      	ldr	r3, [r3, #20]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d00e      	beq.n	800f58a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f572:	695b      	ldr	r3, [r3, #20]
 800f574:	7afa      	ldrb	r2, [r7, #11]
 800f576:	4611      	mov	r1, r2
 800f578:	68f8      	ldr	r0, [r7, #12]
 800f57a:	4798      	blx	r3
 800f57c:	4603      	mov	r3, r0
 800f57e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f580:	7dfb      	ldrb	r3, [r7, #23]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d001      	beq.n	800f58a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f586:	7dfb      	ldrb	r3, [r7, #23]
 800f588:	e000      	b.n	800f58c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f58a:	2300      	movs	r3, #0
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3718      	adds	r7, #24
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b082      	sub	sp, #8
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2201      	movs	r2, #1
 800f5a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d101      	bne.n	800f5c8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f5c4:	2303      	movs	r3, #3
 800f5c6:	e02f      	b.n	800f628 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d00f      	beq.n	800f5f2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d009      	beq.n	800f5f2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	687a      	ldr	r2, [r7, #4]
 800f5e8:	6852      	ldr	r2, [r2, #4]
 800f5ea:	b2d2      	uxtb	r2, r2
 800f5ec:	4611      	mov	r1, r2
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f5f2:	2340      	movs	r3, #64	@ 0x40
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	2100      	movs	r1, #0
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f001 fa78 	bl	8010aee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2201      	movs	r2, #1
 800f602:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2240      	movs	r2, #64	@ 0x40
 800f60a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f60e:	2340      	movs	r3, #64	@ 0x40
 800f610:	2200      	movs	r2, #0
 800f612:	2180      	movs	r1, #128	@ 0x80
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f001 fa6a 	bl	8010aee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2201      	movs	r2, #1
 800f61e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2240      	movs	r2, #64	@ 0x40
 800f624:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f626:	2300      	movs	r3, #0
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3708      	adds	r7, #8
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}

0800f630 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f630:	b480      	push	{r7}
 800f632:	b083      	sub	sp, #12
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	460b      	mov	r3, r1
 800f63a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	78fa      	ldrb	r2, [r7, #3]
 800f640:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f642:	2300      	movs	r3, #0
}
 800f644:	4618      	mov	r0, r3
 800f646:	370c      	adds	r7, #12
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr

0800f650 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f650:	b480      	push	{r7}
 800f652:	b083      	sub	sp, #12
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f65e:	b2da      	uxtb	r2, r3
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	2204      	movs	r2, #4
 800f66a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f66e:	2300      	movs	r3, #0
}
 800f670:	4618      	mov	r0, r3
 800f672:	370c      	adds	r7, #12
 800f674:	46bd      	mov	sp, r7
 800f676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67a:	4770      	bx	lr

0800f67c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f67c:	b480      	push	{r7}
 800f67e:	b083      	sub	sp, #12
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	2b04      	cmp	r3, #4
 800f68e:	d106      	bne.n	800f69e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f696:	b2da      	uxtb	r2, r3
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f69e:	2300      	movs	r3, #0
}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	370c      	adds	r7, #12
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr

0800f6ac <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b082      	sub	sp, #8
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d101      	bne.n	800f6c2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f6be:	2303      	movs	r3, #3
 800f6c0:	e012      	b.n	800f6e8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6c8:	b2db      	uxtb	r3, r3
 800f6ca:	2b03      	cmp	r3, #3
 800f6cc:	d10b      	bne.n	800f6e6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6d4:	69db      	ldr	r3, [r3, #28]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d005      	beq.n	800f6e6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6e0:	69db      	ldr	r3, [r3, #28]
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f6e6:	2300      	movs	r3, #0
}
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	3708      	adds	r7, #8
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}

0800f6f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b087      	sub	sp, #28
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f6fc:	697b      	ldr	r3, [r7, #20]
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	3301      	adds	r3, #1
 800f706:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	781b      	ldrb	r3, [r3, #0]
 800f70c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f70e:	8a3b      	ldrh	r3, [r7, #16]
 800f710:	021b      	lsls	r3, r3, #8
 800f712:	b21a      	sxth	r2, r3
 800f714:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f718:	4313      	orrs	r3, r2
 800f71a:	b21b      	sxth	r3, r3
 800f71c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f71e:	89fb      	ldrh	r3, [r7, #14]
}
 800f720:	4618      	mov	r0, r3
 800f722:	371c      	adds	r7, #28
 800f724:	46bd      	mov	sp, r7
 800f726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72a:	4770      	bx	lr

0800f72c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
 800f734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f736:	2300      	movs	r3, #0
 800f738:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f742:	2b40      	cmp	r3, #64	@ 0x40
 800f744:	d005      	beq.n	800f752 <USBD_StdDevReq+0x26>
 800f746:	2b40      	cmp	r3, #64	@ 0x40
 800f748:	d853      	bhi.n	800f7f2 <USBD_StdDevReq+0xc6>
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d00b      	beq.n	800f766 <USBD_StdDevReq+0x3a>
 800f74e:	2b20      	cmp	r3, #32
 800f750:	d14f      	bne.n	800f7f2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f758:	689b      	ldr	r3, [r3, #8]
 800f75a:	6839      	ldr	r1, [r7, #0]
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	4798      	blx	r3
 800f760:	4603      	mov	r3, r0
 800f762:	73fb      	strb	r3, [r7, #15]
      break;
 800f764:	e04a      	b.n	800f7fc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	785b      	ldrb	r3, [r3, #1]
 800f76a:	2b09      	cmp	r3, #9
 800f76c:	d83b      	bhi.n	800f7e6 <USBD_StdDevReq+0xba>
 800f76e:	a201      	add	r2, pc, #4	@ (adr r2, 800f774 <USBD_StdDevReq+0x48>)
 800f770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f774:	0800f7c9 	.word	0x0800f7c9
 800f778:	0800f7dd 	.word	0x0800f7dd
 800f77c:	0800f7e7 	.word	0x0800f7e7
 800f780:	0800f7d3 	.word	0x0800f7d3
 800f784:	0800f7e7 	.word	0x0800f7e7
 800f788:	0800f7a7 	.word	0x0800f7a7
 800f78c:	0800f79d 	.word	0x0800f79d
 800f790:	0800f7e7 	.word	0x0800f7e7
 800f794:	0800f7bf 	.word	0x0800f7bf
 800f798:	0800f7b1 	.word	0x0800f7b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f79c:	6839      	ldr	r1, [r7, #0]
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f000 f9de 	bl	800fb60 <USBD_GetDescriptor>
          break;
 800f7a4:	e024      	b.n	800f7f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f7a6:	6839      	ldr	r1, [r7, #0]
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f000 fb6d 	bl	800fe88 <USBD_SetAddress>
          break;
 800f7ae:	e01f      	b.n	800f7f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f7b0:	6839      	ldr	r1, [r7, #0]
 800f7b2:	6878      	ldr	r0, [r7, #4]
 800f7b4:	f000 fbac 	bl	800ff10 <USBD_SetConfig>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	73fb      	strb	r3, [r7, #15]
          break;
 800f7bc:	e018      	b.n	800f7f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f7be:	6839      	ldr	r1, [r7, #0]
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f000 fc4b 	bl	801005c <USBD_GetConfig>
          break;
 800f7c6:	e013      	b.n	800f7f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f7c8:	6839      	ldr	r1, [r7, #0]
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f000 fc7c 	bl	80100c8 <USBD_GetStatus>
          break;
 800f7d0:	e00e      	b.n	800f7f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f7d2:	6839      	ldr	r1, [r7, #0]
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f000 fcab 	bl	8010130 <USBD_SetFeature>
          break;
 800f7da:	e009      	b.n	800f7f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f7dc:	6839      	ldr	r1, [r7, #0]
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f000 fcba 	bl	8010158 <USBD_ClrFeature>
          break;
 800f7e4:	e004      	b.n	800f7f0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f7e6:	6839      	ldr	r1, [r7, #0]
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f000 fd11 	bl	8010210 <USBD_CtlError>
          break;
 800f7ee:	bf00      	nop
      }
      break;
 800f7f0:	e004      	b.n	800f7fc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f7f2:	6839      	ldr	r1, [r7, #0]
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f000 fd0b 	bl	8010210 <USBD_CtlError>
      break;
 800f7fa:	bf00      	nop
  }

  return ret;
 800f7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3710      	adds	r7, #16
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
 800f806:	bf00      	nop

0800f808 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b084      	sub	sp, #16
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
 800f810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f812:	2300      	movs	r3, #0
 800f814:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	781b      	ldrb	r3, [r3, #0]
 800f81a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f81e:	2b40      	cmp	r3, #64	@ 0x40
 800f820:	d005      	beq.n	800f82e <USBD_StdItfReq+0x26>
 800f822:	2b40      	cmp	r3, #64	@ 0x40
 800f824:	d82f      	bhi.n	800f886 <USBD_StdItfReq+0x7e>
 800f826:	2b00      	cmp	r3, #0
 800f828:	d001      	beq.n	800f82e <USBD_StdItfReq+0x26>
 800f82a:	2b20      	cmp	r3, #32
 800f82c:	d12b      	bne.n	800f886 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f834:	b2db      	uxtb	r3, r3
 800f836:	3b01      	subs	r3, #1
 800f838:	2b02      	cmp	r3, #2
 800f83a:	d81d      	bhi.n	800f878 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	889b      	ldrh	r3, [r3, #4]
 800f840:	b2db      	uxtb	r3, r3
 800f842:	2b01      	cmp	r3, #1
 800f844:	d813      	bhi.n	800f86e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f84c:	689b      	ldr	r3, [r3, #8]
 800f84e:	6839      	ldr	r1, [r7, #0]
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	4798      	blx	r3
 800f854:	4603      	mov	r3, r0
 800f856:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	88db      	ldrh	r3, [r3, #6]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d110      	bne.n	800f882 <USBD_StdItfReq+0x7a>
 800f860:	7bfb      	ldrb	r3, [r7, #15]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d10d      	bne.n	800f882 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f000 fd9d 	bl	80103a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f86c:	e009      	b.n	800f882 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f86e:	6839      	ldr	r1, [r7, #0]
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f000 fccd 	bl	8010210 <USBD_CtlError>
          break;
 800f876:	e004      	b.n	800f882 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f878:	6839      	ldr	r1, [r7, #0]
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f000 fcc8 	bl	8010210 <USBD_CtlError>
          break;
 800f880:	e000      	b.n	800f884 <USBD_StdItfReq+0x7c>
          break;
 800f882:	bf00      	nop
      }
      break;
 800f884:	e004      	b.n	800f890 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f886:	6839      	ldr	r1, [r7, #0]
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f000 fcc1 	bl	8010210 <USBD_CtlError>
      break;
 800f88e:	bf00      	nop
  }

  return ret;
 800f890:	7bfb      	ldrb	r3, [r7, #15]
}
 800f892:	4618      	mov	r0, r3
 800f894:	3710      	adds	r7, #16
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}

0800f89a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f89a:	b580      	push	{r7, lr}
 800f89c:	b084      	sub	sp, #16
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	6078      	str	r0, [r7, #4]
 800f8a2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	889b      	ldrh	r3, [r3, #4]
 800f8ac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f8b6:	2b40      	cmp	r3, #64	@ 0x40
 800f8b8:	d007      	beq.n	800f8ca <USBD_StdEPReq+0x30>
 800f8ba:	2b40      	cmp	r3, #64	@ 0x40
 800f8bc:	f200 8145 	bhi.w	800fb4a <USBD_StdEPReq+0x2b0>
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d00c      	beq.n	800f8de <USBD_StdEPReq+0x44>
 800f8c4:	2b20      	cmp	r3, #32
 800f8c6:	f040 8140 	bne.w	800fb4a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f8d0:	689b      	ldr	r3, [r3, #8]
 800f8d2:	6839      	ldr	r1, [r7, #0]
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	4798      	blx	r3
 800f8d8:	4603      	mov	r3, r0
 800f8da:	73fb      	strb	r3, [r7, #15]
      break;
 800f8dc:	e13a      	b.n	800fb54 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	785b      	ldrb	r3, [r3, #1]
 800f8e2:	2b03      	cmp	r3, #3
 800f8e4:	d007      	beq.n	800f8f6 <USBD_StdEPReq+0x5c>
 800f8e6:	2b03      	cmp	r3, #3
 800f8e8:	f300 8129 	bgt.w	800fb3e <USBD_StdEPReq+0x2a4>
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d07f      	beq.n	800f9f0 <USBD_StdEPReq+0x156>
 800f8f0:	2b01      	cmp	r3, #1
 800f8f2:	d03c      	beq.n	800f96e <USBD_StdEPReq+0xd4>
 800f8f4:	e123      	b.n	800fb3e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8fc:	b2db      	uxtb	r3, r3
 800f8fe:	2b02      	cmp	r3, #2
 800f900:	d002      	beq.n	800f908 <USBD_StdEPReq+0x6e>
 800f902:	2b03      	cmp	r3, #3
 800f904:	d016      	beq.n	800f934 <USBD_StdEPReq+0x9a>
 800f906:	e02c      	b.n	800f962 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f908:	7bbb      	ldrb	r3, [r7, #14]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d00d      	beq.n	800f92a <USBD_StdEPReq+0x90>
 800f90e:	7bbb      	ldrb	r3, [r7, #14]
 800f910:	2b80      	cmp	r3, #128	@ 0x80
 800f912:	d00a      	beq.n	800f92a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f914:	7bbb      	ldrb	r3, [r7, #14]
 800f916:	4619      	mov	r1, r3
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f001 f92d 	bl	8010b78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f91e:	2180      	movs	r1, #128	@ 0x80
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f001 f929 	bl	8010b78 <USBD_LL_StallEP>
 800f926:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f928:	e020      	b.n	800f96c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f92a:	6839      	ldr	r1, [r7, #0]
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f000 fc6f 	bl	8010210 <USBD_CtlError>
              break;
 800f932:	e01b      	b.n	800f96c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	885b      	ldrh	r3, [r3, #2]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d10e      	bne.n	800f95a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f93c:	7bbb      	ldrb	r3, [r7, #14]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d00b      	beq.n	800f95a <USBD_StdEPReq+0xc0>
 800f942:	7bbb      	ldrb	r3, [r7, #14]
 800f944:	2b80      	cmp	r3, #128	@ 0x80
 800f946:	d008      	beq.n	800f95a <USBD_StdEPReq+0xc0>
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	88db      	ldrh	r3, [r3, #6]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d104      	bne.n	800f95a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f950:	7bbb      	ldrb	r3, [r7, #14]
 800f952:	4619      	mov	r1, r3
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f001 f90f 	bl	8010b78 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f000 fd23 	bl	80103a6 <USBD_CtlSendStatus>

              break;
 800f960:	e004      	b.n	800f96c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f962:	6839      	ldr	r1, [r7, #0]
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f000 fc53 	bl	8010210 <USBD_CtlError>
              break;
 800f96a:	bf00      	nop
          }
          break;
 800f96c:	e0ec      	b.n	800fb48 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f974:	b2db      	uxtb	r3, r3
 800f976:	2b02      	cmp	r3, #2
 800f978:	d002      	beq.n	800f980 <USBD_StdEPReq+0xe6>
 800f97a:	2b03      	cmp	r3, #3
 800f97c:	d016      	beq.n	800f9ac <USBD_StdEPReq+0x112>
 800f97e:	e030      	b.n	800f9e2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f980:	7bbb      	ldrb	r3, [r7, #14]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d00d      	beq.n	800f9a2 <USBD_StdEPReq+0x108>
 800f986:	7bbb      	ldrb	r3, [r7, #14]
 800f988:	2b80      	cmp	r3, #128	@ 0x80
 800f98a:	d00a      	beq.n	800f9a2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f98c:	7bbb      	ldrb	r3, [r7, #14]
 800f98e:	4619      	mov	r1, r3
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f001 f8f1 	bl	8010b78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f996:	2180      	movs	r1, #128	@ 0x80
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f001 f8ed 	bl	8010b78 <USBD_LL_StallEP>
 800f99e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f9a0:	e025      	b.n	800f9ee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f9a2:	6839      	ldr	r1, [r7, #0]
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f000 fc33 	bl	8010210 <USBD_CtlError>
              break;
 800f9aa:	e020      	b.n	800f9ee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	885b      	ldrh	r3, [r3, #2]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d11b      	bne.n	800f9ec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f9b4:	7bbb      	ldrb	r3, [r7, #14]
 800f9b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d004      	beq.n	800f9c8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f9be:	7bbb      	ldrb	r3, [r7, #14]
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f001 f8f7 	bl	8010bb6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f000 fcec 	bl	80103a6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f9d4:	689b      	ldr	r3, [r3, #8]
 800f9d6:	6839      	ldr	r1, [r7, #0]
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	4798      	blx	r3
 800f9dc:	4603      	mov	r3, r0
 800f9de:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f9e0:	e004      	b.n	800f9ec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f9e2:	6839      	ldr	r1, [r7, #0]
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f000 fc13 	bl	8010210 <USBD_CtlError>
              break;
 800f9ea:	e000      	b.n	800f9ee <USBD_StdEPReq+0x154>
              break;
 800f9ec:	bf00      	nop
          }
          break;
 800f9ee:	e0ab      	b.n	800fb48 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f9f6:	b2db      	uxtb	r3, r3
 800f9f8:	2b02      	cmp	r3, #2
 800f9fa:	d002      	beq.n	800fa02 <USBD_StdEPReq+0x168>
 800f9fc:	2b03      	cmp	r3, #3
 800f9fe:	d032      	beq.n	800fa66 <USBD_StdEPReq+0x1cc>
 800fa00:	e097      	b.n	800fb32 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fa02:	7bbb      	ldrb	r3, [r7, #14]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d007      	beq.n	800fa18 <USBD_StdEPReq+0x17e>
 800fa08:	7bbb      	ldrb	r3, [r7, #14]
 800fa0a:	2b80      	cmp	r3, #128	@ 0x80
 800fa0c:	d004      	beq.n	800fa18 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800fa0e:	6839      	ldr	r1, [r7, #0]
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f000 fbfd 	bl	8010210 <USBD_CtlError>
                break;
 800fa16:	e091      	b.n	800fb3c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	da0b      	bge.n	800fa38 <USBD_StdEPReq+0x19e>
 800fa20:	7bbb      	ldrb	r3, [r7, #14]
 800fa22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fa26:	4613      	mov	r3, r2
 800fa28:	009b      	lsls	r3, r3, #2
 800fa2a:	4413      	add	r3, r2
 800fa2c:	009b      	lsls	r3, r3, #2
 800fa2e:	3310      	adds	r3, #16
 800fa30:	687a      	ldr	r2, [r7, #4]
 800fa32:	4413      	add	r3, r2
 800fa34:	3304      	adds	r3, #4
 800fa36:	e00b      	b.n	800fa50 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fa38:	7bbb      	ldrb	r3, [r7, #14]
 800fa3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa3e:	4613      	mov	r3, r2
 800fa40:	009b      	lsls	r3, r3, #2
 800fa42:	4413      	add	r3, r2
 800fa44:	009b      	lsls	r3, r3, #2
 800fa46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fa4a:	687a      	ldr	r2, [r7, #4]
 800fa4c:	4413      	add	r3, r2
 800fa4e:	3304      	adds	r3, #4
 800fa50:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fa52:	68bb      	ldr	r3, [r7, #8]
 800fa54:	2200      	movs	r2, #0
 800fa56:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	2202      	movs	r2, #2
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f000 fc47 	bl	80102f2 <USBD_CtlSendData>
              break;
 800fa64:	e06a      	b.n	800fb3c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fa66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	da11      	bge.n	800fa92 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fa6e:	7bbb      	ldrb	r3, [r7, #14]
 800fa70:	f003 020f 	and.w	r2, r3, #15
 800fa74:	6879      	ldr	r1, [r7, #4]
 800fa76:	4613      	mov	r3, r2
 800fa78:	009b      	lsls	r3, r3, #2
 800fa7a:	4413      	add	r3, r2
 800fa7c:	009b      	lsls	r3, r3, #2
 800fa7e:	440b      	add	r3, r1
 800fa80:	3324      	adds	r3, #36	@ 0x24
 800fa82:	881b      	ldrh	r3, [r3, #0]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d117      	bne.n	800fab8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fa88:	6839      	ldr	r1, [r7, #0]
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f000 fbc0 	bl	8010210 <USBD_CtlError>
                  break;
 800fa90:	e054      	b.n	800fb3c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fa92:	7bbb      	ldrb	r3, [r7, #14]
 800fa94:	f003 020f 	and.w	r2, r3, #15
 800fa98:	6879      	ldr	r1, [r7, #4]
 800fa9a:	4613      	mov	r3, r2
 800fa9c:	009b      	lsls	r3, r3, #2
 800fa9e:	4413      	add	r3, r2
 800faa0:	009b      	lsls	r3, r3, #2
 800faa2:	440b      	add	r3, r1
 800faa4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800faa8:	881b      	ldrh	r3, [r3, #0]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d104      	bne.n	800fab8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800faae:	6839      	ldr	r1, [r7, #0]
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f000 fbad 	bl	8010210 <USBD_CtlError>
                  break;
 800fab6:	e041      	b.n	800fb3c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	da0b      	bge.n	800fad8 <USBD_StdEPReq+0x23e>
 800fac0:	7bbb      	ldrb	r3, [r7, #14]
 800fac2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fac6:	4613      	mov	r3, r2
 800fac8:	009b      	lsls	r3, r3, #2
 800faca:	4413      	add	r3, r2
 800facc:	009b      	lsls	r3, r3, #2
 800face:	3310      	adds	r3, #16
 800fad0:	687a      	ldr	r2, [r7, #4]
 800fad2:	4413      	add	r3, r2
 800fad4:	3304      	adds	r3, #4
 800fad6:	e00b      	b.n	800faf0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fad8:	7bbb      	ldrb	r3, [r7, #14]
 800fada:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fade:	4613      	mov	r3, r2
 800fae0:	009b      	lsls	r3, r3, #2
 800fae2:	4413      	add	r3, r2
 800fae4:	009b      	lsls	r3, r3, #2
 800fae6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800faea:	687a      	ldr	r2, [r7, #4]
 800faec:	4413      	add	r3, r2
 800faee:	3304      	adds	r3, #4
 800faf0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800faf2:	7bbb      	ldrb	r3, [r7, #14]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d002      	beq.n	800fafe <USBD_StdEPReq+0x264>
 800faf8:	7bbb      	ldrb	r3, [r7, #14]
 800fafa:	2b80      	cmp	r3, #128	@ 0x80
 800fafc:	d103      	bne.n	800fb06 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	2200      	movs	r2, #0
 800fb02:	601a      	str	r2, [r3, #0]
 800fb04:	e00e      	b.n	800fb24 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fb06:	7bbb      	ldrb	r3, [r7, #14]
 800fb08:	4619      	mov	r1, r3
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	f001 f872 	bl	8010bf4 <USBD_LL_IsStallEP>
 800fb10:	4603      	mov	r3, r0
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d003      	beq.n	800fb1e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	2201      	movs	r2, #1
 800fb1a:	601a      	str	r2, [r3, #0]
 800fb1c:	e002      	b.n	800fb24 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	2200      	movs	r2, #0
 800fb22:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	2202      	movs	r2, #2
 800fb28:	4619      	mov	r1, r3
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f000 fbe1 	bl	80102f2 <USBD_CtlSendData>
              break;
 800fb30:	e004      	b.n	800fb3c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800fb32:	6839      	ldr	r1, [r7, #0]
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f000 fb6b 	bl	8010210 <USBD_CtlError>
              break;
 800fb3a:	bf00      	nop
          }
          break;
 800fb3c:	e004      	b.n	800fb48 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800fb3e:	6839      	ldr	r1, [r7, #0]
 800fb40:	6878      	ldr	r0, [r7, #4]
 800fb42:	f000 fb65 	bl	8010210 <USBD_CtlError>
          break;
 800fb46:	bf00      	nop
      }
      break;
 800fb48:	e004      	b.n	800fb54 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800fb4a:	6839      	ldr	r1, [r7, #0]
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f000 fb5f 	bl	8010210 <USBD_CtlError>
      break;
 800fb52:	bf00      	nop
  }

  return ret;
 800fb54:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb56:	4618      	mov	r0, r3
 800fb58:	3710      	adds	r7, #16
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}
	...

0800fb60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b084      	sub	sp, #16
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
 800fb68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fb72:	2300      	movs	r3, #0
 800fb74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	885b      	ldrh	r3, [r3, #2]
 800fb7a:	0a1b      	lsrs	r3, r3, #8
 800fb7c:	b29b      	uxth	r3, r3
 800fb7e:	3b01      	subs	r3, #1
 800fb80:	2b0e      	cmp	r3, #14
 800fb82:	f200 8152 	bhi.w	800fe2a <USBD_GetDescriptor+0x2ca>
 800fb86:	a201      	add	r2, pc, #4	@ (adr r2, 800fb8c <USBD_GetDescriptor+0x2c>)
 800fb88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb8c:	0800fbfd 	.word	0x0800fbfd
 800fb90:	0800fc15 	.word	0x0800fc15
 800fb94:	0800fc55 	.word	0x0800fc55
 800fb98:	0800fe2b 	.word	0x0800fe2b
 800fb9c:	0800fe2b 	.word	0x0800fe2b
 800fba0:	0800fdcb 	.word	0x0800fdcb
 800fba4:	0800fdf7 	.word	0x0800fdf7
 800fba8:	0800fe2b 	.word	0x0800fe2b
 800fbac:	0800fe2b 	.word	0x0800fe2b
 800fbb0:	0800fe2b 	.word	0x0800fe2b
 800fbb4:	0800fe2b 	.word	0x0800fe2b
 800fbb8:	0800fe2b 	.word	0x0800fe2b
 800fbbc:	0800fe2b 	.word	0x0800fe2b
 800fbc0:	0800fe2b 	.word	0x0800fe2b
 800fbc4:	0800fbc9 	.word	0x0800fbc9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbce:	69db      	ldr	r3, [r3, #28]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d00b      	beq.n	800fbec <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbda:	69db      	ldr	r3, [r3, #28]
 800fbdc:	687a      	ldr	r2, [r7, #4]
 800fbde:	7c12      	ldrb	r2, [r2, #16]
 800fbe0:	f107 0108 	add.w	r1, r7, #8
 800fbe4:	4610      	mov	r0, r2
 800fbe6:	4798      	blx	r3
 800fbe8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fbea:	e126      	b.n	800fe3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fbec:	6839      	ldr	r1, [r7, #0]
 800fbee:	6878      	ldr	r0, [r7, #4]
 800fbf0:	f000 fb0e 	bl	8010210 <USBD_CtlError>
        err++;
 800fbf4:	7afb      	ldrb	r3, [r7, #11]
 800fbf6:	3301      	adds	r3, #1
 800fbf8:	72fb      	strb	r3, [r7, #11]
      break;
 800fbfa:	e11e      	b.n	800fe3a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	687a      	ldr	r2, [r7, #4]
 800fc06:	7c12      	ldrb	r2, [r2, #16]
 800fc08:	f107 0108 	add.w	r1, r7, #8
 800fc0c:	4610      	mov	r0, r2
 800fc0e:	4798      	blx	r3
 800fc10:	60f8      	str	r0, [r7, #12]
      break;
 800fc12:	e112      	b.n	800fe3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	7c1b      	ldrb	r3, [r3, #16]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d10d      	bne.n	800fc38 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc24:	f107 0208 	add.w	r2, r7, #8
 800fc28:	4610      	mov	r0, r2
 800fc2a:	4798      	blx	r3
 800fc2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	3301      	adds	r3, #1
 800fc32:	2202      	movs	r2, #2
 800fc34:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fc36:	e100      	b.n	800fe3a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc40:	f107 0208 	add.w	r2, r7, #8
 800fc44:	4610      	mov	r0, r2
 800fc46:	4798      	blx	r3
 800fc48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	2202      	movs	r2, #2
 800fc50:	701a      	strb	r2, [r3, #0]
      break;
 800fc52:	e0f2      	b.n	800fe3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	885b      	ldrh	r3, [r3, #2]
 800fc58:	b2db      	uxtb	r3, r3
 800fc5a:	2b05      	cmp	r3, #5
 800fc5c:	f200 80ac 	bhi.w	800fdb8 <USBD_GetDescriptor+0x258>
 800fc60:	a201      	add	r2, pc, #4	@ (adr r2, 800fc68 <USBD_GetDescriptor+0x108>)
 800fc62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc66:	bf00      	nop
 800fc68:	0800fc81 	.word	0x0800fc81
 800fc6c:	0800fcb5 	.word	0x0800fcb5
 800fc70:	0800fce9 	.word	0x0800fce9
 800fc74:	0800fd1d 	.word	0x0800fd1d
 800fc78:	0800fd51 	.word	0x0800fd51
 800fc7c:	0800fd85 	.word	0x0800fd85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc86:	685b      	ldr	r3, [r3, #4]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d00b      	beq.n	800fca4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc92:	685b      	ldr	r3, [r3, #4]
 800fc94:	687a      	ldr	r2, [r7, #4]
 800fc96:	7c12      	ldrb	r2, [r2, #16]
 800fc98:	f107 0108 	add.w	r1, r7, #8
 800fc9c:	4610      	mov	r0, r2
 800fc9e:	4798      	blx	r3
 800fca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fca2:	e091      	b.n	800fdc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fca4:	6839      	ldr	r1, [r7, #0]
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f000 fab2 	bl	8010210 <USBD_CtlError>
            err++;
 800fcac:	7afb      	ldrb	r3, [r7, #11]
 800fcae:	3301      	adds	r3, #1
 800fcb0:	72fb      	strb	r3, [r7, #11]
          break;
 800fcb2:	e089      	b.n	800fdc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fcba:	689b      	ldr	r3, [r3, #8]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d00b      	beq.n	800fcd8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fcc6:	689b      	ldr	r3, [r3, #8]
 800fcc8:	687a      	ldr	r2, [r7, #4]
 800fcca:	7c12      	ldrb	r2, [r2, #16]
 800fccc:	f107 0108 	add.w	r1, r7, #8
 800fcd0:	4610      	mov	r0, r2
 800fcd2:	4798      	blx	r3
 800fcd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fcd6:	e077      	b.n	800fdc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fcd8:	6839      	ldr	r1, [r7, #0]
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f000 fa98 	bl	8010210 <USBD_CtlError>
            err++;
 800fce0:	7afb      	ldrb	r3, [r7, #11]
 800fce2:	3301      	adds	r3, #1
 800fce4:	72fb      	strb	r3, [r7, #11]
          break;
 800fce6:	e06f      	b.n	800fdc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fcee:	68db      	ldr	r3, [r3, #12]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d00b      	beq.n	800fd0c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fcfa:	68db      	ldr	r3, [r3, #12]
 800fcfc:	687a      	ldr	r2, [r7, #4]
 800fcfe:	7c12      	ldrb	r2, [r2, #16]
 800fd00:	f107 0108 	add.w	r1, r7, #8
 800fd04:	4610      	mov	r0, r2
 800fd06:	4798      	blx	r3
 800fd08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd0a:	e05d      	b.n	800fdc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fd0c:	6839      	ldr	r1, [r7, #0]
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f000 fa7e 	bl	8010210 <USBD_CtlError>
            err++;
 800fd14:	7afb      	ldrb	r3, [r7, #11]
 800fd16:	3301      	adds	r3, #1
 800fd18:	72fb      	strb	r3, [r7, #11]
          break;
 800fd1a:	e055      	b.n	800fdc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd22:	691b      	ldr	r3, [r3, #16]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d00b      	beq.n	800fd40 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd2e:	691b      	ldr	r3, [r3, #16]
 800fd30:	687a      	ldr	r2, [r7, #4]
 800fd32:	7c12      	ldrb	r2, [r2, #16]
 800fd34:	f107 0108 	add.w	r1, r7, #8
 800fd38:	4610      	mov	r0, r2
 800fd3a:	4798      	blx	r3
 800fd3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd3e:	e043      	b.n	800fdc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fd40:	6839      	ldr	r1, [r7, #0]
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f000 fa64 	bl	8010210 <USBD_CtlError>
            err++;
 800fd48:	7afb      	ldrb	r3, [r7, #11]
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	72fb      	strb	r3, [r7, #11]
          break;
 800fd4e:	e03b      	b.n	800fdc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd56:	695b      	ldr	r3, [r3, #20]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d00b      	beq.n	800fd74 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd62:	695b      	ldr	r3, [r3, #20]
 800fd64:	687a      	ldr	r2, [r7, #4]
 800fd66:	7c12      	ldrb	r2, [r2, #16]
 800fd68:	f107 0108 	add.w	r1, r7, #8
 800fd6c:	4610      	mov	r0, r2
 800fd6e:	4798      	blx	r3
 800fd70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd72:	e029      	b.n	800fdc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fd74:	6839      	ldr	r1, [r7, #0]
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f000 fa4a 	bl	8010210 <USBD_CtlError>
            err++;
 800fd7c:	7afb      	ldrb	r3, [r7, #11]
 800fd7e:	3301      	adds	r3, #1
 800fd80:	72fb      	strb	r3, [r7, #11]
          break;
 800fd82:	e021      	b.n	800fdc8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd8a:	699b      	ldr	r3, [r3, #24]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d00b      	beq.n	800fda8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd96:	699b      	ldr	r3, [r3, #24]
 800fd98:	687a      	ldr	r2, [r7, #4]
 800fd9a:	7c12      	ldrb	r2, [r2, #16]
 800fd9c:	f107 0108 	add.w	r1, r7, #8
 800fda0:	4610      	mov	r0, r2
 800fda2:	4798      	blx	r3
 800fda4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fda6:	e00f      	b.n	800fdc8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fda8:	6839      	ldr	r1, [r7, #0]
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f000 fa30 	bl	8010210 <USBD_CtlError>
            err++;
 800fdb0:	7afb      	ldrb	r3, [r7, #11]
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	72fb      	strb	r3, [r7, #11]
          break;
 800fdb6:	e007      	b.n	800fdc8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fdb8:	6839      	ldr	r1, [r7, #0]
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 fa28 	bl	8010210 <USBD_CtlError>
          err++;
 800fdc0:	7afb      	ldrb	r3, [r7, #11]
 800fdc2:	3301      	adds	r3, #1
 800fdc4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800fdc6:	bf00      	nop
      }
      break;
 800fdc8:	e037      	b.n	800fe3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	7c1b      	ldrb	r3, [r3, #16]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d109      	bne.n	800fde6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fdd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fdda:	f107 0208 	add.w	r2, r7, #8
 800fdde:	4610      	mov	r0, r2
 800fde0:	4798      	blx	r3
 800fde2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fde4:	e029      	b.n	800fe3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fde6:	6839      	ldr	r1, [r7, #0]
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f000 fa11 	bl	8010210 <USBD_CtlError>
        err++;
 800fdee:	7afb      	ldrb	r3, [r7, #11]
 800fdf0:	3301      	adds	r3, #1
 800fdf2:	72fb      	strb	r3, [r7, #11]
      break;
 800fdf4:	e021      	b.n	800fe3a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	7c1b      	ldrb	r3, [r3, #16]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d10d      	bne.n	800fe1a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe06:	f107 0208 	add.w	r2, r7, #8
 800fe0a:	4610      	mov	r0, r2
 800fe0c:	4798      	blx	r3
 800fe0e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	3301      	adds	r3, #1
 800fe14:	2207      	movs	r2, #7
 800fe16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fe18:	e00f      	b.n	800fe3a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fe1a:	6839      	ldr	r1, [r7, #0]
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f000 f9f7 	bl	8010210 <USBD_CtlError>
        err++;
 800fe22:	7afb      	ldrb	r3, [r7, #11]
 800fe24:	3301      	adds	r3, #1
 800fe26:	72fb      	strb	r3, [r7, #11]
      break;
 800fe28:	e007      	b.n	800fe3a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800fe2a:	6839      	ldr	r1, [r7, #0]
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f000 f9ef 	bl	8010210 <USBD_CtlError>
      err++;
 800fe32:	7afb      	ldrb	r3, [r7, #11]
 800fe34:	3301      	adds	r3, #1
 800fe36:	72fb      	strb	r3, [r7, #11]
      break;
 800fe38:	bf00      	nop
  }

  if (err != 0U)
 800fe3a:	7afb      	ldrb	r3, [r7, #11]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d11e      	bne.n	800fe7e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	88db      	ldrh	r3, [r3, #6]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d016      	beq.n	800fe76 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800fe48:	893b      	ldrh	r3, [r7, #8]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d00e      	beq.n	800fe6c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	88da      	ldrh	r2, [r3, #6]
 800fe52:	893b      	ldrh	r3, [r7, #8]
 800fe54:	4293      	cmp	r3, r2
 800fe56:	bf28      	it	cs
 800fe58:	4613      	movcs	r3, r2
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fe5e:	893b      	ldrh	r3, [r7, #8]
 800fe60:	461a      	mov	r2, r3
 800fe62:	68f9      	ldr	r1, [r7, #12]
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f000 fa44 	bl	80102f2 <USBD_CtlSendData>
 800fe6a:	e009      	b.n	800fe80 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fe6c:	6839      	ldr	r1, [r7, #0]
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f000 f9ce 	bl	8010210 <USBD_CtlError>
 800fe74:	e004      	b.n	800fe80 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f000 fa95 	bl	80103a6 <USBD_CtlSendStatus>
 800fe7c:	e000      	b.n	800fe80 <USBD_GetDescriptor+0x320>
    return;
 800fe7e:	bf00      	nop
  }
}
 800fe80:	3710      	adds	r7, #16
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop

0800fe88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b084      	sub	sp, #16
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	889b      	ldrh	r3, [r3, #4]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d131      	bne.n	800fefe <USBD_SetAddress+0x76>
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	88db      	ldrh	r3, [r3, #6]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d12d      	bne.n	800fefe <USBD_SetAddress+0x76>
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	885b      	ldrh	r3, [r3, #2]
 800fea6:	2b7f      	cmp	r3, #127	@ 0x7f
 800fea8:	d829      	bhi.n	800fefe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	885b      	ldrh	r3, [r3, #2]
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800feb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800febc:	b2db      	uxtb	r3, r3
 800febe:	2b03      	cmp	r3, #3
 800fec0:	d104      	bne.n	800fecc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fec2:	6839      	ldr	r1, [r7, #0]
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f000 f9a3 	bl	8010210 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800feca:	e01d      	b.n	800ff08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	7bfa      	ldrb	r2, [r7, #15]
 800fed0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fed4:	7bfb      	ldrb	r3, [r7, #15]
 800fed6:	4619      	mov	r1, r3
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f000 feb7 	bl	8010c4c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f000 fa61 	bl	80103a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fee4:	7bfb      	ldrb	r3, [r7, #15]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d004      	beq.n	800fef4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	2202      	movs	r2, #2
 800feee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fef2:	e009      	b.n	800ff08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2201      	movs	r2, #1
 800fef8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fefc:	e004      	b.n	800ff08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fefe:	6839      	ldr	r1, [r7, #0]
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f000 f985 	bl	8010210 <USBD_CtlError>
  }
}
 800ff06:	bf00      	nop
 800ff08:	bf00      	nop
 800ff0a:	3710      	adds	r7, #16
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}

0800ff10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b084      	sub	sp, #16
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	885b      	ldrh	r3, [r3, #2]
 800ff22:	b2da      	uxtb	r2, r3
 800ff24:	4b4c      	ldr	r3, [pc, #304]	@ (8010058 <USBD_SetConfig+0x148>)
 800ff26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ff28:	4b4b      	ldr	r3, [pc, #300]	@ (8010058 <USBD_SetConfig+0x148>)
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	2b01      	cmp	r3, #1
 800ff2e:	d905      	bls.n	800ff3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ff30:	6839      	ldr	r1, [r7, #0]
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f000 f96c 	bl	8010210 <USBD_CtlError>
    return USBD_FAIL;
 800ff38:	2303      	movs	r3, #3
 800ff3a:	e088      	b.n	801004e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff42:	b2db      	uxtb	r3, r3
 800ff44:	2b02      	cmp	r3, #2
 800ff46:	d002      	beq.n	800ff4e <USBD_SetConfig+0x3e>
 800ff48:	2b03      	cmp	r3, #3
 800ff4a:	d025      	beq.n	800ff98 <USBD_SetConfig+0x88>
 800ff4c:	e071      	b.n	8010032 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ff4e:	4b42      	ldr	r3, [pc, #264]	@ (8010058 <USBD_SetConfig+0x148>)
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d01c      	beq.n	800ff90 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ff56:	4b40      	ldr	r3, [pc, #256]	@ (8010058 <USBD_SetConfig+0x148>)
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ff60:	4b3d      	ldr	r3, [pc, #244]	@ (8010058 <USBD_SetConfig+0x148>)
 800ff62:	781b      	ldrb	r3, [r3, #0]
 800ff64:	4619      	mov	r1, r3
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f7ff f992 	bl	800f290 <USBD_SetClassConfig>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ff70:	7bfb      	ldrb	r3, [r7, #15]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d004      	beq.n	800ff80 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ff76:	6839      	ldr	r1, [r7, #0]
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f000 f949 	bl	8010210 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ff7e:	e065      	b.n	801004c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f000 fa10 	bl	80103a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2203      	movs	r2, #3
 800ff8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ff8e:	e05d      	b.n	801004c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f000 fa08 	bl	80103a6 <USBD_CtlSendStatus>
      break;
 800ff96:	e059      	b.n	801004c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ff98:	4b2f      	ldr	r3, [pc, #188]	@ (8010058 <USBD_SetConfig+0x148>)
 800ff9a:	781b      	ldrb	r3, [r3, #0]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d112      	bne.n	800ffc6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2202      	movs	r2, #2
 800ffa4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ffa8:	4b2b      	ldr	r3, [pc, #172]	@ (8010058 <USBD_SetConfig+0x148>)
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	461a      	mov	r2, r3
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ffb2:	4b29      	ldr	r3, [pc, #164]	@ (8010058 <USBD_SetConfig+0x148>)
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f7ff f985 	bl	800f2c8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f000 f9f1 	bl	80103a6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ffc4:	e042      	b.n	801004c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ffc6:	4b24      	ldr	r3, [pc, #144]	@ (8010058 <USBD_SetConfig+0x148>)
 800ffc8:	781b      	ldrb	r3, [r3, #0]
 800ffca:	461a      	mov	r2, r3
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d02a      	beq.n	801002a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	685b      	ldr	r3, [r3, #4]
 800ffd8:	b2db      	uxtb	r3, r3
 800ffda:	4619      	mov	r1, r3
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f7ff f973 	bl	800f2c8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ffe2:	4b1d      	ldr	r3, [pc, #116]	@ (8010058 <USBD_SetConfig+0x148>)
 800ffe4:	781b      	ldrb	r3, [r3, #0]
 800ffe6:	461a      	mov	r2, r3
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ffec:	4b1a      	ldr	r3, [pc, #104]	@ (8010058 <USBD_SetConfig+0x148>)
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	4619      	mov	r1, r3
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f7ff f94c 	bl	800f290 <USBD_SetClassConfig>
 800fff8:	4603      	mov	r3, r0
 800fffa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fffc:	7bfb      	ldrb	r3, [r7, #15]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d00f      	beq.n	8010022 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8010002:	6839      	ldr	r1, [r7, #0]
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f000 f903 	bl	8010210 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	685b      	ldr	r3, [r3, #4]
 801000e:	b2db      	uxtb	r3, r3
 8010010:	4619      	mov	r1, r3
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f7ff f958 	bl	800f2c8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2202      	movs	r2, #2
 801001c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010020:	e014      	b.n	801004c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f000 f9bf 	bl	80103a6 <USBD_CtlSendStatus>
      break;
 8010028:	e010      	b.n	801004c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f000 f9bb 	bl	80103a6 <USBD_CtlSendStatus>
      break;
 8010030:	e00c      	b.n	801004c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8010032:	6839      	ldr	r1, [r7, #0]
 8010034:	6878      	ldr	r0, [r7, #4]
 8010036:	f000 f8eb 	bl	8010210 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801003a:	4b07      	ldr	r3, [pc, #28]	@ (8010058 <USBD_SetConfig+0x148>)
 801003c:	781b      	ldrb	r3, [r3, #0]
 801003e:	4619      	mov	r1, r3
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f7ff f941 	bl	800f2c8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010046:	2303      	movs	r3, #3
 8010048:	73fb      	strb	r3, [r7, #15]
      break;
 801004a:	bf00      	nop
  }

  return ret;
 801004c:	7bfb      	ldrb	r3, [r7, #15]
}
 801004e:	4618      	mov	r0, r3
 8010050:	3710      	adds	r7, #16
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}
 8010056:	bf00      	nop
 8010058:	20000bbc 	.word	0x20000bbc

0801005c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b082      	sub	sp, #8
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
 8010064:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	88db      	ldrh	r3, [r3, #6]
 801006a:	2b01      	cmp	r3, #1
 801006c:	d004      	beq.n	8010078 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801006e:	6839      	ldr	r1, [r7, #0]
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f000 f8cd 	bl	8010210 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010076:	e023      	b.n	80100c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801007e:	b2db      	uxtb	r3, r3
 8010080:	2b02      	cmp	r3, #2
 8010082:	dc02      	bgt.n	801008a <USBD_GetConfig+0x2e>
 8010084:	2b00      	cmp	r3, #0
 8010086:	dc03      	bgt.n	8010090 <USBD_GetConfig+0x34>
 8010088:	e015      	b.n	80100b6 <USBD_GetConfig+0x5a>
 801008a:	2b03      	cmp	r3, #3
 801008c:	d00b      	beq.n	80100a6 <USBD_GetConfig+0x4a>
 801008e:	e012      	b.n	80100b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2200      	movs	r2, #0
 8010094:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	3308      	adds	r3, #8
 801009a:	2201      	movs	r2, #1
 801009c:	4619      	mov	r1, r3
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f000 f927 	bl	80102f2 <USBD_CtlSendData>
        break;
 80100a4:	e00c      	b.n	80100c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	3304      	adds	r3, #4
 80100aa:	2201      	movs	r2, #1
 80100ac:	4619      	mov	r1, r3
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f000 f91f 	bl	80102f2 <USBD_CtlSendData>
        break;
 80100b4:	e004      	b.n	80100c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80100b6:	6839      	ldr	r1, [r7, #0]
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f000 f8a9 	bl	8010210 <USBD_CtlError>
        break;
 80100be:	bf00      	nop
}
 80100c0:	bf00      	nop
 80100c2:	3708      	adds	r7, #8
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}

080100c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b082      	sub	sp, #8
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100d8:	b2db      	uxtb	r3, r3
 80100da:	3b01      	subs	r3, #1
 80100dc:	2b02      	cmp	r3, #2
 80100de:	d81e      	bhi.n	801011e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	88db      	ldrh	r3, [r3, #6]
 80100e4:	2b02      	cmp	r3, #2
 80100e6:	d004      	beq.n	80100f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80100e8:	6839      	ldr	r1, [r7, #0]
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f000 f890 	bl	8010210 <USBD_CtlError>
        break;
 80100f0:	e01a      	b.n	8010128 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2201      	movs	r2, #1
 80100f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d005      	beq.n	801010e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	68db      	ldr	r3, [r3, #12]
 8010106:	f043 0202 	orr.w	r2, r3, #2
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	330c      	adds	r3, #12
 8010112:	2202      	movs	r2, #2
 8010114:	4619      	mov	r1, r3
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f000 f8eb 	bl	80102f2 <USBD_CtlSendData>
      break;
 801011c:	e004      	b.n	8010128 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801011e:	6839      	ldr	r1, [r7, #0]
 8010120:	6878      	ldr	r0, [r7, #4]
 8010122:	f000 f875 	bl	8010210 <USBD_CtlError>
      break;
 8010126:	bf00      	nop
  }
}
 8010128:	bf00      	nop
 801012a:	3708      	adds	r7, #8
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}

08010130 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	885b      	ldrh	r3, [r3, #2]
 801013e:	2b01      	cmp	r3, #1
 8010140:	d106      	bne.n	8010150 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	2201      	movs	r2, #1
 8010146:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f000 f92b 	bl	80103a6 <USBD_CtlSendStatus>
  }
}
 8010150:	bf00      	nop
 8010152:	3708      	adds	r7, #8
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}

08010158 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b082      	sub	sp, #8
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
 8010160:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010168:	b2db      	uxtb	r3, r3
 801016a:	3b01      	subs	r3, #1
 801016c:	2b02      	cmp	r3, #2
 801016e:	d80b      	bhi.n	8010188 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	885b      	ldrh	r3, [r3, #2]
 8010174:	2b01      	cmp	r3, #1
 8010176:	d10c      	bne.n	8010192 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2200      	movs	r2, #0
 801017c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f000 f910 	bl	80103a6 <USBD_CtlSendStatus>
      }
      break;
 8010186:	e004      	b.n	8010192 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010188:	6839      	ldr	r1, [r7, #0]
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	f000 f840 	bl	8010210 <USBD_CtlError>
      break;
 8010190:	e000      	b.n	8010194 <USBD_ClrFeature+0x3c>
      break;
 8010192:	bf00      	nop
  }
}
 8010194:	bf00      	nop
 8010196:	3708      	adds	r7, #8
 8010198:	46bd      	mov	sp, r7
 801019a:	bd80      	pop	{r7, pc}

0801019c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b084      	sub	sp, #16
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	781a      	ldrb	r2, [r3, #0]
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	3301      	adds	r3, #1
 80101b6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	781a      	ldrb	r2, [r3, #0]
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	3301      	adds	r3, #1
 80101c4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80101c6:	68f8      	ldr	r0, [r7, #12]
 80101c8:	f7ff fa92 	bl	800f6f0 <SWAPBYTE>
 80101cc:	4603      	mov	r3, r0
 80101ce:	461a      	mov	r2, r3
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	3301      	adds	r3, #1
 80101d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	3301      	adds	r3, #1
 80101de:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80101e0:	68f8      	ldr	r0, [r7, #12]
 80101e2:	f7ff fa85 	bl	800f6f0 <SWAPBYTE>
 80101e6:	4603      	mov	r3, r0
 80101e8:	461a      	mov	r2, r3
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	3301      	adds	r3, #1
 80101f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	3301      	adds	r3, #1
 80101f8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80101fa:	68f8      	ldr	r0, [r7, #12]
 80101fc:	f7ff fa78 	bl	800f6f0 <SWAPBYTE>
 8010200:	4603      	mov	r3, r0
 8010202:	461a      	mov	r2, r3
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	80da      	strh	r2, [r3, #6]
}
 8010208:	bf00      	nop
 801020a:	3710      	adds	r7, #16
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}

08010210 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b082      	sub	sp, #8
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
 8010218:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801021a:	2180      	movs	r1, #128	@ 0x80
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f000 fcab 	bl	8010b78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010222:	2100      	movs	r1, #0
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f000 fca7 	bl	8010b78 <USBD_LL_StallEP>
}
 801022a:	bf00      	nop
 801022c:	3708      	adds	r7, #8
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}

08010232 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010232:	b580      	push	{r7, lr}
 8010234:	b086      	sub	sp, #24
 8010236:	af00      	add	r7, sp, #0
 8010238:	60f8      	str	r0, [r7, #12]
 801023a:	60b9      	str	r1, [r7, #8]
 801023c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801023e:	2300      	movs	r3, #0
 8010240:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d036      	beq.n	80102b6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801024c:	6938      	ldr	r0, [r7, #16]
 801024e:	f000 f836 	bl	80102be <USBD_GetLen>
 8010252:	4603      	mov	r3, r0
 8010254:	3301      	adds	r3, #1
 8010256:	b29b      	uxth	r3, r3
 8010258:	005b      	lsls	r3, r3, #1
 801025a:	b29a      	uxth	r2, r3
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010260:	7dfb      	ldrb	r3, [r7, #23]
 8010262:	68ba      	ldr	r2, [r7, #8]
 8010264:	4413      	add	r3, r2
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	7812      	ldrb	r2, [r2, #0]
 801026a:	701a      	strb	r2, [r3, #0]
  idx++;
 801026c:	7dfb      	ldrb	r3, [r7, #23]
 801026e:	3301      	adds	r3, #1
 8010270:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010272:	7dfb      	ldrb	r3, [r7, #23]
 8010274:	68ba      	ldr	r2, [r7, #8]
 8010276:	4413      	add	r3, r2
 8010278:	2203      	movs	r2, #3
 801027a:	701a      	strb	r2, [r3, #0]
  idx++;
 801027c:	7dfb      	ldrb	r3, [r7, #23]
 801027e:	3301      	adds	r3, #1
 8010280:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010282:	e013      	b.n	80102ac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010284:	7dfb      	ldrb	r3, [r7, #23]
 8010286:	68ba      	ldr	r2, [r7, #8]
 8010288:	4413      	add	r3, r2
 801028a:	693a      	ldr	r2, [r7, #16]
 801028c:	7812      	ldrb	r2, [r2, #0]
 801028e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010290:	693b      	ldr	r3, [r7, #16]
 8010292:	3301      	adds	r3, #1
 8010294:	613b      	str	r3, [r7, #16]
    idx++;
 8010296:	7dfb      	ldrb	r3, [r7, #23]
 8010298:	3301      	adds	r3, #1
 801029a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801029c:	7dfb      	ldrb	r3, [r7, #23]
 801029e:	68ba      	ldr	r2, [r7, #8]
 80102a0:	4413      	add	r3, r2
 80102a2:	2200      	movs	r2, #0
 80102a4:	701a      	strb	r2, [r3, #0]
    idx++;
 80102a6:	7dfb      	ldrb	r3, [r7, #23]
 80102a8:	3301      	adds	r3, #1
 80102aa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80102ac:	693b      	ldr	r3, [r7, #16]
 80102ae:	781b      	ldrb	r3, [r3, #0]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d1e7      	bne.n	8010284 <USBD_GetString+0x52>
 80102b4:	e000      	b.n	80102b8 <USBD_GetString+0x86>
    return;
 80102b6:	bf00      	nop
  }
}
 80102b8:	3718      	adds	r7, #24
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}

080102be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80102be:	b480      	push	{r7}
 80102c0:	b085      	sub	sp, #20
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80102c6:	2300      	movs	r3, #0
 80102c8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80102ce:	e005      	b.n	80102dc <USBD_GetLen+0x1e>
  {
    len++;
 80102d0:	7bfb      	ldrb	r3, [r7, #15]
 80102d2:	3301      	adds	r3, #1
 80102d4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	3301      	adds	r3, #1
 80102da:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d1f5      	bne.n	80102d0 <USBD_GetLen+0x12>
  }

  return len;
 80102e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3714      	adds	r7, #20
 80102ea:	46bd      	mov	sp, r7
 80102ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f0:	4770      	bx	lr

080102f2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80102f2:	b580      	push	{r7, lr}
 80102f4:	b084      	sub	sp, #16
 80102f6:	af00      	add	r7, sp, #0
 80102f8:	60f8      	str	r0, [r7, #12]
 80102fa:	60b9      	str	r1, [r7, #8]
 80102fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	2202      	movs	r2, #2
 8010302:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	687a      	ldr	r2, [r7, #4]
 801030a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	687a      	ldr	r2, [r7, #4]
 8010310:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	68ba      	ldr	r2, [r7, #8]
 8010316:	2100      	movs	r1, #0
 8010318:	68f8      	ldr	r0, [r7, #12]
 801031a:	f000 fcb6 	bl	8010c8a <USBD_LL_Transmit>

  return USBD_OK;
 801031e:	2300      	movs	r3, #0
}
 8010320:	4618      	mov	r0, r3
 8010322:	3710      	adds	r7, #16
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}

08010328 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b084      	sub	sp, #16
 801032c:	af00      	add	r7, sp, #0
 801032e:	60f8      	str	r0, [r7, #12]
 8010330:	60b9      	str	r1, [r7, #8]
 8010332:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	68ba      	ldr	r2, [r7, #8]
 8010338:	2100      	movs	r1, #0
 801033a:	68f8      	ldr	r0, [r7, #12]
 801033c:	f000 fca5 	bl	8010c8a <USBD_LL_Transmit>

  return USBD_OK;
 8010340:	2300      	movs	r3, #0
}
 8010342:	4618      	mov	r0, r3
 8010344:	3710      	adds	r7, #16
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}

0801034a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801034a:	b580      	push	{r7, lr}
 801034c:	b084      	sub	sp, #16
 801034e:	af00      	add	r7, sp, #0
 8010350:	60f8      	str	r0, [r7, #12]
 8010352:	60b9      	str	r1, [r7, #8]
 8010354:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	2203      	movs	r2, #3
 801035a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	687a      	ldr	r2, [r7, #4]
 8010362:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	687a      	ldr	r2, [r7, #4]
 801036a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	68ba      	ldr	r2, [r7, #8]
 8010372:	2100      	movs	r1, #0
 8010374:	68f8      	ldr	r0, [r7, #12]
 8010376:	f000 fca9 	bl	8010ccc <USBD_LL_PrepareReceive>

  return USBD_OK;
 801037a:	2300      	movs	r3, #0
}
 801037c:	4618      	mov	r0, r3
 801037e:	3710      	adds	r7, #16
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}

08010384 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b084      	sub	sp, #16
 8010388:	af00      	add	r7, sp, #0
 801038a:	60f8      	str	r0, [r7, #12]
 801038c:	60b9      	str	r1, [r7, #8]
 801038e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	68ba      	ldr	r2, [r7, #8]
 8010394:	2100      	movs	r1, #0
 8010396:	68f8      	ldr	r0, [r7, #12]
 8010398:	f000 fc98 	bl	8010ccc <USBD_LL_PrepareReceive>

  return USBD_OK;
 801039c:	2300      	movs	r3, #0
}
 801039e:	4618      	mov	r0, r3
 80103a0:	3710      	adds	r7, #16
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}

080103a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80103a6:	b580      	push	{r7, lr}
 80103a8:	b082      	sub	sp, #8
 80103aa:	af00      	add	r7, sp, #0
 80103ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2204      	movs	r2, #4
 80103b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80103b6:	2300      	movs	r3, #0
 80103b8:	2200      	movs	r2, #0
 80103ba:	2100      	movs	r1, #0
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f000 fc64 	bl	8010c8a <USBD_LL_Transmit>

  return USBD_OK;
 80103c2:	2300      	movs	r3, #0
}
 80103c4:	4618      	mov	r0, r3
 80103c6:	3708      	adds	r7, #8
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}

080103cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2205      	movs	r2, #5
 80103d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80103dc:	2300      	movs	r3, #0
 80103de:	2200      	movs	r2, #0
 80103e0:	2100      	movs	r1, #0
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f000 fc72 	bl	8010ccc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80103e8:	2300      	movs	r3, #0
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3708      	adds	r7, #8
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
	...

080103f4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80103f8:	2200      	movs	r2, #0
 80103fa:	4912      	ldr	r1, [pc, #72]	@ (8010444 <MX_USB_Device_Init+0x50>)
 80103fc:	4812      	ldr	r0, [pc, #72]	@ (8010448 <MX_USB_Device_Init+0x54>)
 80103fe:	f7fe fed9 	bl	800f1b4 <USBD_Init>
 8010402:	4603      	mov	r3, r0
 8010404:	2b00      	cmp	r3, #0
 8010406:	d001      	beq.n	801040c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8010408:	f7f3 fb6c 	bl	8003ae4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 801040c:	490f      	ldr	r1, [pc, #60]	@ (801044c <MX_USB_Device_Init+0x58>)
 801040e:	480e      	ldr	r0, [pc, #56]	@ (8010448 <MX_USB_Device_Init+0x54>)
 8010410:	f7fe ff00 	bl	800f214 <USBD_RegisterClass>
 8010414:	4603      	mov	r3, r0
 8010416:	2b00      	cmp	r3, #0
 8010418:	d001      	beq.n	801041e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801041a:	f7f3 fb63 	bl	8003ae4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801041e:	490c      	ldr	r1, [pc, #48]	@ (8010450 <MX_USB_Device_Init+0x5c>)
 8010420:	4809      	ldr	r0, [pc, #36]	@ (8010448 <MX_USB_Device_Init+0x54>)
 8010422:	f7fe fe21 	bl	800f068 <USBD_CDC_RegisterInterface>
 8010426:	4603      	mov	r3, r0
 8010428:	2b00      	cmp	r3, #0
 801042a:	d001      	beq.n	8010430 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 801042c:	f7f3 fb5a 	bl	8003ae4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8010430:	4805      	ldr	r0, [pc, #20]	@ (8010448 <MX_USB_Device_Init+0x54>)
 8010432:	f7fe ff16 	bl	800f262 <USBD_Start>
 8010436:	4603      	mov	r3, r0
 8010438:	2b00      	cmp	r3, #0
 801043a:	d001      	beq.n	8010440 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 801043c:	f7f3 fb52 	bl	8003ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8010440:	bf00      	nop
 8010442:	bd80      	pop	{r7, pc}
 8010444:	20000184 	.word	0x20000184
 8010448:	20000bc0 	.word	0x20000bc0
 801044c:	2000006c 	.word	0x2000006c
 8010450:	20000170 	.word	0x20000170

08010454 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010458:	2200      	movs	r2, #0
 801045a:	4905      	ldr	r1, [pc, #20]	@ (8010470 <CDC_Init_FS+0x1c>)
 801045c:	4805      	ldr	r0, [pc, #20]	@ (8010474 <CDC_Init_FS+0x20>)
 801045e:	f7fe fe18 	bl	800f092 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010462:	4905      	ldr	r1, [pc, #20]	@ (8010478 <CDC_Init_FS+0x24>)
 8010464:	4803      	ldr	r0, [pc, #12]	@ (8010474 <CDC_Init_FS+0x20>)
 8010466:	f7fe fe32 	bl	800f0ce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801046a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801046c:	4618      	mov	r0, r3
 801046e:	bd80      	pop	{r7, pc}
 8010470:	20001690 	.word	0x20001690
 8010474:	20000bc0 	.word	0x20000bc0
 8010478:	20000e90 	.word	0x20000e90

0801047c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801047c:	b480      	push	{r7}
 801047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010480:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010482:	4618      	mov	r0, r3
 8010484:	46bd      	mov	sp, r7
 8010486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048a:	4770      	bx	lr

0801048c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801048c:	b480      	push	{r7}
 801048e:	b083      	sub	sp, #12
 8010490:	af00      	add	r7, sp, #0
 8010492:	4603      	mov	r3, r0
 8010494:	6039      	str	r1, [r7, #0]
 8010496:	71fb      	strb	r3, [r7, #7]
 8010498:	4613      	mov	r3, r2
 801049a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801049c:	79fb      	ldrb	r3, [r7, #7]
 801049e:	2b23      	cmp	r3, #35	@ 0x23
 80104a0:	d84a      	bhi.n	8010538 <CDC_Control_FS+0xac>
 80104a2:	a201      	add	r2, pc, #4	@ (adr r2, 80104a8 <CDC_Control_FS+0x1c>)
 80104a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104a8:	08010539 	.word	0x08010539
 80104ac:	08010539 	.word	0x08010539
 80104b0:	08010539 	.word	0x08010539
 80104b4:	08010539 	.word	0x08010539
 80104b8:	08010539 	.word	0x08010539
 80104bc:	08010539 	.word	0x08010539
 80104c0:	08010539 	.word	0x08010539
 80104c4:	08010539 	.word	0x08010539
 80104c8:	08010539 	.word	0x08010539
 80104cc:	08010539 	.word	0x08010539
 80104d0:	08010539 	.word	0x08010539
 80104d4:	08010539 	.word	0x08010539
 80104d8:	08010539 	.word	0x08010539
 80104dc:	08010539 	.word	0x08010539
 80104e0:	08010539 	.word	0x08010539
 80104e4:	08010539 	.word	0x08010539
 80104e8:	08010539 	.word	0x08010539
 80104ec:	08010539 	.word	0x08010539
 80104f0:	08010539 	.word	0x08010539
 80104f4:	08010539 	.word	0x08010539
 80104f8:	08010539 	.word	0x08010539
 80104fc:	08010539 	.word	0x08010539
 8010500:	08010539 	.word	0x08010539
 8010504:	08010539 	.word	0x08010539
 8010508:	08010539 	.word	0x08010539
 801050c:	08010539 	.word	0x08010539
 8010510:	08010539 	.word	0x08010539
 8010514:	08010539 	.word	0x08010539
 8010518:	08010539 	.word	0x08010539
 801051c:	08010539 	.word	0x08010539
 8010520:	08010539 	.word	0x08010539
 8010524:	08010539 	.word	0x08010539
 8010528:	08010539 	.word	0x08010539
 801052c:	08010539 	.word	0x08010539
 8010530:	08010539 	.word	0x08010539
 8010534:	08010539 	.word	0x08010539
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010538:	bf00      	nop
  }

  return (USBD_OK);
 801053a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801053c:	4618      	mov	r0, r3
 801053e:	370c      	adds	r7, #12
 8010540:	46bd      	mov	sp, r7
 8010542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010546:	4770      	bx	lr

08010548 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b082      	sub	sp, #8
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len > sizeof(USB_RX_Buffer)) {
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801055a:	d903      	bls.n	8010564 <CDC_Receive_FS+0x1c>
	          *Len = sizeof(USB_RX_Buffer);  // Prevent buffer overflow
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010562:	601a      	str	r2, [r3, #0]
	      }
	      memcpy(USB_RX_Buffer, Buf, *Len);
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	461a      	mov	r2, r3
 801056a:	6879      	ldr	r1, [r7, #4]
 801056c:	4808      	ldr	r0, [pc, #32]	@ (8010590 <CDC_Receive_FS+0x48>)
 801056e:	f001 fcb0 	bl	8011ed2 <memcpy>

	      dataReceivedFlag = 1;
 8010572:	4b08      	ldr	r3, [pc, #32]	@ (8010594 <CDC_Receive_FS+0x4c>)
 8010574:	2201      	movs	r2, #1
 8010576:	601a      	str	r2, [r3, #0]

	      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010578:	6879      	ldr	r1, [r7, #4]
 801057a:	4807      	ldr	r0, [pc, #28]	@ (8010598 <CDC_Receive_FS+0x50>)
 801057c:	f7fe fda7 	bl	800f0ce <USBD_CDC_SetRxBuffer>
	      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010580:	4805      	ldr	r0, [pc, #20]	@ (8010598 <CDC_Receive_FS+0x50>)
 8010582:	f7fe fded 	bl	800f160 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010586:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010588:	4618      	mov	r0, r3
 801058a:	3708      	adds	r7, #8
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}
 8010590:	20000aa8 	.word	0x20000aa8
 8010594:	20000b68 	.word	0x20000b68
 8010598:	20000bc0 	.word	0x20000bc0

0801059c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b084      	sub	sp, #16
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	460b      	mov	r3, r1
 80105a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80105a8:	2300      	movs	r3, #0
 80105aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80105ac:	4b0d      	ldr	r3, [pc, #52]	@ (80105e4 <CDC_Transmit_FS+0x48>)
 80105ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80105b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d001      	beq.n	80105c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80105be:	2301      	movs	r3, #1
 80105c0:	e00b      	b.n	80105da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80105c2:	887b      	ldrh	r3, [r7, #2]
 80105c4:	461a      	mov	r2, r3
 80105c6:	6879      	ldr	r1, [r7, #4]
 80105c8:	4806      	ldr	r0, [pc, #24]	@ (80105e4 <CDC_Transmit_FS+0x48>)
 80105ca:	f7fe fd62 	bl	800f092 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80105ce:	4805      	ldr	r0, [pc, #20]	@ (80105e4 <CDC_Transmit_FS+0x48>)
 80105d0:	f7fe fd96 	bl	800f100 <USBD_CDC_TransmitPacket>
 80105d4:	4603      	mov	r3, r0
 80105d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80105d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80105da:	4618      	mov	r0, r3
 80105dc:	3710      	adds	r7, #16
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
 80105e2:	bf00      	nop
 80105e4:	20000bc0 	.word	0x20000bc0

080105e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80105e8:	b480      	push	{r7}
 80105ea:	b087      	sub	sp, #28
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	60f8      	str	r0, [r7, #12]
 80105f0:	60b9      	str	r1, [r7, #8]
 80105f2:	4613      	mov	r3, r2
 80105f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80105f6:	2300      	movs	r3, #0
 80105f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80105fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80105fe:	4618      	mov	r0, r3
 8010600:	371c      	adds	r7, #28
 8010602:	46bd      	mov	sp, r7
 8010604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010608:	4770      	bx	lr
	...

0801060c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801060c:	b480      	push	{r7}
 801060e:	b083      	sub	sp, #12
 8010610:	af00      	add	r7, sp, #0
 8010612:	4603      	mov	r3, r0
 8010614:	6039      	str	r1, [r7, #0]
 8010616:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	2212      	movs	r2, #18
 801061c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801061e:	4b03      	ldr	r3, [pc, #12]	@ (801062c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8010620:	4618      	mov	r0, r3
 8010622:	370c      	adds	r7, #12
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr
 801062c:	200001a4 	.word	0x200001a4

08010630 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010630:	b480      	push	{r7}
 8010632:	b083      	sub	sp, #12
 8010634:	af00      	add	r7, sp, #0
 8010636:	4603      	mov	r3, r0
 8010638:	6039      	str	r1, [r7, #0]
 801063a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	2204      	movs	r2, #4
 8010640:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010642:	4b03      	ldr	r3, [pc, #12]	@ (8010650 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8010644:	4618      	mov	r0, r3
 8010646:	370c      	adds	r7, #12
 8010648:	46bd      	mov	sp, r7
 801064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064e:	4770      	bx	lr
 8010650:	200001b8 	.word	0x200001b8

08010654 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b082      	sub	sp, #8
 8010658:	af00      	add	r7, sp, #0
 801065a:	4603      	mov	r3, r0
 801065c:	6039      	str	r1, [r7, #0]
 801065e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010660:	79fb      	ldrb	r3, [r7, #7]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d105      	bne.n	8010672 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010666:	683a      	ldr	r2, [r7, #0]
 8010668:	4907      	ldr	r1, [pc, #28]	@ (8010688 <USBD_CDC_ProductStrDescriptor+0x34>)
 801066a:	4808      	ldr	r0, [pc, #32]	@ (801068c <USBD_CDC_ProductStrDescriptor+0x38>)
 801066c:	f7ff fde1 	bl	8010232 <USBD_GetString>
 8010670:	e004      	b.n	801067c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010672:	683a      	ldr	r2, [r7, #0]
 8010674:	4904      	ldr	r1, [pc, #16]	@ (8010688 <USBD_CDC_ProductStrDescriptor+0x34>)
 8010676:	4805      	ldr	r0, [pc, #20]	@ (801068c <USBD_CDC_ProductStrDescriptor+0x38>)
 8010678:	f7ff fddb 	bl	8010232 <USBD_GetString>
  }
  return USBD_StrDesc;
 801067c:	4b02      	ldr	r3, [pc, #8]	@ (8010688 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801067e:	4618      	mov	r0, r3
 8010680:	3708      	adds	r7, #8
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}
 8010686:	bf00      	nop
 8010688:	20001e90 	.word	0x20001e90
 801068c:	08016f94 	.word	0x08016f94

08010690 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b082      	sub	sp, #8
 8010694:	af00      	add	r7, sp, #0
 8010696:	4603      	mov	r3, r0
 8010698:	6039      	str	r1, [r7, #0]
 801069a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801069c:	683a      	ldr	r2, [r7, #0]
 801069e:	4904      	ldr	r1, [pc, #16]	@ (80106b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80106a0:	4804      	ldr	r0, [pc, #16]	@ (80106b4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80106a2:	f7ff fdc6 	bl	8010232 <USBD_GetString>
  return USBD_StrDesc;
 80106a6:	4b02      	ldr	r3, [pc, #8]	@ (80106b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3708      	adds	r7, #8
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}
 80106b0:	20001e90 	.word	0x20001e90
 80106b4:	08016fac 	.word	0x08016fac

080106b8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b082      	sub	sp, #8
 80106bc:	af00      	add	r7, sp, #0
 80106be:	4603      	mov	r3, r0
 80106c0:	6039      	str	r1, [r7, #0]
 80106c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	221a      	movs	r2, #26
 80106c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80106ca:	f000 f843 	bl	8010754 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80106ce:	4b02      	ldr	r3, [pc, #8]	@ (80106d8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80106d0:	4618      	mov	r0, r3
 80106d2:	3708      	adds	r7, #8
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd80      	pop	{r7, pc}
 80106d8:	200001bc 	.word	0x200001bc

080106dc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b082      	sub	sp, #8
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	4603      	mov	r3, r0
 80106e4:	6039      	str	r1, [r7, #0]
 80106e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80106e8:	79fb      	ldrb	r3, [r7, #7]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d105      	bne.n	80106fa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80106ee:	683a      	ldr	r2, [r7, #0]
 80106f0:	4907      	ldr	r1, [pc, #28]	@ (8010710 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80106f2:	4808      	ldr	r0, [pc, #32]	@ (8010714 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80106f4:	f7ff fd9d 	bl	8010232 <USBD_GetString>
 80106f8:	e004      	b.n	8010704 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80106fa:	683a      	ldr	r2, [r7, #0]
 80106fc:	4904      	ldr	r1, [pc, #16]	@ (8010710 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80106fe:	4805      	ldr	r0, [pc, #20]	@ (8010714 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010700:	f7ff fd97 	bl	8010232 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010704:	4b02      	ldr	r3, [pc, #8]	@ (8010710 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8010706:	4618      	mov	r0, r3
 8010708:	3708      	adds	r7, #8
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}
 801070e:	bf00      	nop
 8010710:	20001e90 	.word	0x20001e90
 8010714:	08016fc0 	.word	0x08016fc0

08010718 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b082      	sub	sp, #8
 801071c:	af00      	add	r7, sp, #0
 801071e:	4603      	mov	r3, r0
 8010720:	6039      	str	r1, [r7, #0]
 8010722:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010724:	79fb      	ldrb	r3, [r7, #7]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d105      	bne.n	8010736 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801072a:	683a      	ldr	r2, [r7, #0]
 801072c:	4907      	ldr	r1, [pc, #28]	@ (801074c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801072e:	4808      	ldr	r0, [pc, #32]	@ (8010750 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010730:	f7ff fd7f 	bl	8010232 <USBD_GetString>
 8010734:	e004      	b.n	8010740 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010736:	683a      	ldr	r2, [r7, #0]
 8010738:	4904      	ldr	r1, [pc, #16]	@ (801074c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801073a:	4805      	ldr	r0, [pc, #20]	@ (8010750 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801073c:	f7ff fd79 	bl	8010232 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010740:	4b02      	ldr	r3, [pc, #8]	@ (801074c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8010742:	4618      	mov	r0, r3
 8010744:	3708      	adds	r7, #8
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	20001e90 	.word	0x20001e90
 8010750:	08016fcc 	.word	0x08016fcc

08010754 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b084      	sub	sp, #16
 8010758:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801075a:	4b0f      	ldr	r3, [pc, #60]	@ (8010798 <Get_SerialNum+0x44>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010760:	4b0e      	ldr	r3, [pc, #56]	@ (801079c <Get_SerialNum+0x48>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010766:	4b0e      	ldr	r3, [pc, #56]	@ (80107a0 <Get_SerialNum+0x4c>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801076c:	68fa      	ldr	r2, [r7, #12]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	4413      	add	r3, r2
 8010772:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d009      	beq.n	801078e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801077a:	2208      	movs	r2, #8
 801077c:	4909      	ldr	r1, [pc, #36]	@ (80107a4 <Get_SerialNum+0x50>)
 801077e:	68f8      	ldr	r0, [r7, #12]
 8010780:	f000 f814 	bl	80107ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010784:	2204      	movs	r2, #4
 8010786:	4908      	ldr	r1, [pc, #32]	@ (80107a8 <Get_SerialNum+0x54>)
 8010788:	68b8      	ldr	r0, [r7, #8]
 801078a:	f000 f80f 	bl	80107ac <IntToUnicode>
  }
}
 801078e:	bf00      	nop
 8010790:	3710      	adds	r7, #16
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	1fff7590 	.word	0x1fff7590
 801079c:	1fff7594 	.word	0x1fff7594
 80107a0:	1fff7598 	.word	0x1fff7598
 80107a4:	200001be 	.word	0x200001be
 80107a8:	200001ce 	.word	0x200001ce

080107ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80107ac:	b480      	push	{r7}
 80107ae:	b087      	sub	sp, #28
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	60f8      	str	r0, [r7, #12]
 80107b4:	60b9      	str	r1, [r7, #8]
 80107b6:	4613      	mov	r3, r2
 80107b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80107ba:	2300      	movs	r3, #0
 80107bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80107be:	2300      	movs	r3, #0
 80107c0:	75fb      	strb	r3, [r7, #23]
 80107c2:	e027      	b.n	8010814 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	0f1b      	lsrs	r3, r3, #28
 80107c8:	2b09      	cmp	r3, #9
 80107ca:	d80b      	bhi.n	80107e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	0f1b      	lsrs	r3, r3, #28
 80107d0:	b2da      	uxtb	r2, r3
 80107d2:	7dfb      	ldrb	r3, [r7, #23]
 80107d4:	005b      	lsls	r3, r3, #1
 80107d6:	4619      	mov	r1, r3
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	440b      	add	r3, r1
 80107dc:	3230      	adds	r2, #48	@ 0x30
 80107de:	b2d2      	uxtb	r2, r2
 80107e0:	701a      	strb	r2, [r3, #0]
 80107e2:	e00a      	b.n	80107fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	0f1b      	lsrs	r3, r3, #28
 80107e8:	b2da      	uxtb	r2, r3
 80107ea:	7dfb      	ldrb	r3, [r7, #23]
 80107ec:	005b      	lsls	r3, r3, #1
 80107ee:	4619      	mov	r1, r3
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	440b      	add	r3, r1
 80107f4:	3237      	adds	r2, #55	@ 0x37
 80107f6:	b2d2      	uxtb	r2, r2
 80107f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	011b      	lsls	r3, r3, #4
 80107fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010800:	7dfb      	ldrb	r3, [r7, #23]
 8010802:	005b      	lsls	r3, r3, #1
 8010804:	3301      	adds	r3, #1
 8010806:	68ba      	ldr	r2, [r7, #8]
 8010808:	4413      	add	r3, r2
 801080a:	2200      	movs	r2, #0
 801080c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801080e:	7dfb      	ldrb	r3, [r7, #23]
 8010810:	3301      	adds	r3, #1
 8010812:	75fb      	strb	r3, [r7, #23]
 8010814:	7dfa      	ldrb	r2, [r7, #23]
 8010816:	79fb      	ldrb	r3, [r7, #7]
 8010818:	429a      	cmp	r2, r3
 801081a:	d3d3      	bcc.n	80107c4 <IntToUnicode+0x18>
  }
}
 801081c:	bf00      	nop
 801081e:	bf00      	nop
 8010820:	371c      	adds	r7, #28
 8010822:	46bd      	mov	sp, r7
 8010824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010828:	4770      	bx	lr
	...

0801082c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b098      	sub	sp, #96	@ 0x60
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010834:	f107 030c 	add.w	r3, r7, #12
 8010838:	2254      	movs	r2, #84	@ 0x54
 801083a:	2100      	movs	r1, #0
 801083c:	4618      	mov	r0, r3
 801083e:	f001 fab6 	bl	8011dae <memset>
  if(pcdHandle->Instance==USB)
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	4a15      	ldr	r2, [pc, #84]	@ (801089c <HAL_PCD_MspInit+0x70>)
 8010848:	4293      	cmp	r3, r2
 801084a:	d122      	bne.n	8010892 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801084c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010850:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010852:	2300      	movs	r3, #0
 8010854:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010856:	f107 030c 	add.w	r3, r7, #12
 801085a:	4618      	mov	r0, r3
 801085c:	f7f9 f8c6 	bl	80099ec <HAL_RCCEx_PeriphCLKConfig>
 8010860:	4603      	mov	r3, r0
 8010862:	2b00      	cmp	r3, #0
 8010864:	d001      	beq.n	801086a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8010866:	f7f3 f93d 	bl	8003ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801086a:	4b0d      	ldr	r3, [pc, #52]	@ (80108a0 <HAL_PCD_MspInit+0x74>)
 801086c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801086e:	4a0c      	ldr	r2, [pc, #48]	@ (80108a0 <HAL_PCD_MspInit+0x74>)
 8010870:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010874:	6593      	str	r3, [r2, #88]	@ 0x58
 8010876:	4b0a      	ldr	r3, [pc, #40]	@ (80108a0 <HAL_PCD_MspInit+0x74>)
 8010878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801087a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801087e:	60bb      	str	r3, [r7, #8]
 8010880:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8010882:	2200      	movs	r2, #0
 8010884:	2100      	movs	r1, #0
 8010886:	2014      	movs	r0, #20
 8010888:	f7f5 fe47 	bl	800651a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801088c:	2014      	movs	r0, #20
 801088e:	f7f5 fe5e 	bl	800654e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8010892:	bf00      	nop
 8010894:	3760      	adds	r7, #96	@ 0x60
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}
 801089a:	bf00      	nop
 801089c:	40005c00 	.word	0x40005c00
 80108a0:	40021000 	.word	0x40021000

080108a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b082      	sub	sp, #8
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80108b8:	4619      	mov	r1, r3
 80108ba:	4610      	mov	r0, r2
 80108bc:	f7fe fd1c 	bl	800f2f8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80108c0:	bf00      	nop
 80108c2:	3708      	adds	r7, #8
 80108c4:	46bd      	mov	sp, r7
 80108c6:	bd80      	pop	{r7, pc}

080108c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b082      	sub	sp, #8
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	460b      	mov	r3, r1
 80108d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80108da:	78fa      	ldrb	r2, [r7, #3]
 80108dc:	6879      	ldr	r1, [r7, #4]
 80108de:	4613      	mov	r3, r2
 80108e0:	009b      	lsls	r3, r3, #2
 80108e2:	4413      	add	r3, r2
 80108e4:	00db      	lsls	r3, r3, #3
 80108e6:	440b      	add	r3, r1
 80108e8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80108ec:	681a      	ldr	r2, [r3, #0]
 80108ee:	78fb      	ldrb	r3, [r7, #3]
 80108f0:	4619      	mov	r1, r3
 80108f2:	f7fe fd56 	bl	800f3a2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80108f6:	bf00      	nop
 80108f8:	3708      	adds	r7, #8
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}

080108fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108fe:	b580      	push	{r7, lr}
 8010900:	b082      	sub	sp, #8
 8010902:	af00      	add	r7, sp, #0
 8010904:	6078      	str	r0, [r7, #4]
 8010906:	460b      	mov	r3, r1
 8010908:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010910:	78fa      	ldrb	r2, [r7, #3]
 8010912:	6879      	ldr	r1, [r7, #4]
 8010914:	4613      	mov	r3, r2
 8010916:	009b      	lsls	r3, r3, #2
 8010918:	4413      	add	r3, r2
 801091a:	00db      	lsls	r3, r3, #3
 801091c:	440b      	add	r3, r1
 801091e:	3324      	adds	r3, #36	@ 0x24
 8010920:	681a      	ldr	r2, [r3, #0]
 8010922:	78fb      	ldrb	r3, [r7, #3]
 8010924:	4619      	mov	r1, r3
 8010926:	f7fe fd9f 	bl	800f468 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801092a:	bf00      	nop
 801092c:	3708      	adds	r7, #8
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}

08010932 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010932:	b580      	push	{r7, lr}
 8010934:	b082      	sub	sp, #8
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010940:	4618      	mov	r0, r3
 8010942:	f7fe feb3 	bl	800f6ac <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8010946:	bf00      	nop
 8010948:	3708      	adds	r7, #8
 801094a:	46bd      	mov	sp, r7
 801094c:	bd80      	pop	{r7, pc}

0801094e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801094e:	b580      	push	{r7, lr}
 8010950:	b084      	sub	sp, #16
 8010952:	af00      	add	r7, sp, #0
 8010954:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010956:	2301      	movs	r3, #1
 8010958:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	795b      	ldrb	r3, [r3, #5]
 801095e:	2b02      	cmp	r3, #2
 8010960:	d001      	beq.n	8010966 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010962:	f7f3 f8bf 	bl	8003ae4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801096c:	7bfa      	ldrb	r2, [r7, #15]
 801096e:	4611      	mov	r1, r2
 8010970:	4618      	mov	r0, r3
 8010972:	f7fe fe5d 	bl	800f630 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801097c:	4618      	mov	r0, r3
 801097e:	f7fe fe09 	bl	800f594 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8010982:	bf00      	nop
 8010984:	3710      	adds	r7, #16
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}
	...

0801098c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b082      	sub	sp, #8
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801099a:	4618      	mov	r0, r3
 801099c:	f7fe fe58 	bl	800f650 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	7a5b      	ldrb	r3, [r3, #9]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d005      	beq.n	80109b4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80109a8:	4b04      	ldr	r3, [pc, #16]	@ (80109bc <HAL_PCD_SuspendCallback+0x30>)
 80109aa:	691b      	ldr	r3, [r3, #16]
 80109ac:	4a03      	ldr	r2, [pc, #12]	@ (80109bc <HAL_PCD_SuspendCallback+0x30>)
 80109ae:	f043 0306 	orr.w	r3, r3, #6
 80109b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80109b4:	bf00      	nop
 80109b6:	3708      	adds	r7, #8
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}
 80109bc:	e000ed00 	.word	0xe000ed00

080109c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b082      	sub	sp, #8
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	7a5b      	ldrb	r3, [r3, #9]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d007      	beq.n	80109e0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80109d0:	4b08      	ldr	r3, [pc, #32]	@ (80109f4 <HAL_PCD_ResumeCallback+0x34>)
 80109d2:	691b      	ldr	r3, [r3, #16]
 80109d4:	4a07      	ldr	r2, [pc, #28]	@ (80109f4 <HAL_PCD_ResumeCallback+0x34>)
 80109d6:	f023 0306 	bic.w	r3, r3, #6
 80109da:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80109dc:	f000 f9f8 	bl	8010dd0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7fe fe48 	bl	800f67c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80109ec:	bf00      	nop
 80109ee:	3708      	adds	r7, #8
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}
 80109f4:	e000ed00 	.word	0xe000ed00

080109f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010a00:	4a2b      	ldr	r2, [pc, #172]	@ (8010ab0 <USBD_LL_Init+0xb8>)
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	4a29      	ldr	r2, [pc, #164]	@ (8010ab0 <USBD_LL_Init+0xb8>)
 8010a0c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8010a10:	4b27      	ldr	r3, [pc, #156]	@ (8010ab0 <USBD_LL_Init+0xb8>)
 8010a12:	4a28      	ldr	r2, [pc, #160]	@ (8010ab4 <USBD_LL_Init+0xbc>)
 8010a14:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010a16:	4b26      	ldr	r3, [pc, #152]	@ (8010ab0 <USBD_LL_Init+0xb8>)
 8010a18:	2208      	movs	r2, #8
 8010a1a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010a1c:	4b24      	ldr	r3, [pc, #144]	@ (8010ab0 <USBD_LL_Init+0xb8>)
 8010a1e:	2202      	movs	r2, #2
 8010a20:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010a22:	4b23      	ldr	r3, [pc, #140]	@ (8010ab0 <USBD_LL_Init+0xb8>)
 8010a24:	2202      	movs	r2, #2
 8010a26:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010a28:	4b21      	ldr	r3, [pc, #132]	@ (8010ab0 <USBD_LL_Init+0xb8>)
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010a2e:	4b20      	ldr	r3, [pc, #128]	@ (8010ab0 <USBD_LL_Init+0xb8>)
 8010a30:	2200      	movs	r2, #0
 8010a32:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010a34:	4b1e      	ldr	r3, [pc, #120]	@ (8010ab0 <USBD_LL_Init+0xb8>)
 8010a36:	2200      	movs	r2, #0
 8010a38:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8010ab0 <USBD_LL_Init+0xb8>)
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010a40:	481b      	ldr	r0, [pc, #108]	@ (8010ab0 <USBD_LL_Init+0xb8>)
 8010a42:	f7f6 fcbb 	bl	80073bc <HAL_PCD_Init>
 8010a46:	4603      	mov	r3, r0
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d001      	beq.n	8010a50 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8010a4c:	f7f3 f84a 	bl	8003ae4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a56:	2318      	movs	r3, #24
 8010a58:	2200      	movs	r2, #0
 8010a5a:	2100      	movs	r1, #0
 8010a5c:	f7f8 f976 	bl	8008d4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a66:	2358      	movs	r3, #88	@ 0x58
 8010a68:	2200      	movs	r2, #0
 8010a6a:	2180      	movs	r1, #128	@ 0x80
 8010a6c:	f7f8 f96e 	bl	8008d4c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a76:	23c0      	movs	r3, #192	@ 0xc0
 8010a78:	2200      	movs	r2, #0
 8010a7a:	2181      	movs	r1, #129	@ 0x81
 8010a7c:	f7f8 f966 	bl	8008d4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a86:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	2101      	movs	r1, #1
 8010a8e:	f7f8 f95d 	bl	8008d4c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	2182      	movs	r1, #130	@ 0x82
 8010aa0:	f7f8 f954 	bl	8008d4c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8010aa4:	2300      	movs	r3, #0
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3708      	adds	r7, #8
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
 8010aae:	bf00      	nop
 8010ab0:	20002090 	.word	0x20002090
 8010ab4:	40005c00 	.word	0x40005c00

08010ab8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b084      	sub	sp, #16
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f7f6 fd42 	bl	8007558 <HAL_PCD_Start>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ad8:	7bfb      	ldrb	r3, [r7, #15]
 8010ada:	4618      	mov	r0, r3
 8010adc:	f000 f97e 	bl	8010ddc <USBD_Get_USB_Status>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ae4:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	3710      	adds	r7, #16
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}

08010aee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010aee:	b580      	push	{r7, lr}
 8010af0:	b084      	sub	sp, #16
 8010af2:	af00      	add	r7, sp, #0
 8010af4:	6078      	str	r0, [r7, #4]
 8010af6:	4608      	mov	r0, r1
 8010af8:	4611      	mov	r1, r2
 8010afa:	461a      	mov	r2, r3
 8010afc:	4603      	mov	r3, r0
 8010afe:	70fb      	strb	r3, [r7, #3]
 8010b00:	460b      	mov	r3, r1
 8010b02:	70bb      	strb	r3, [r7, #2]
 8010b04:	4613      	mov	r3, r2
 8010b06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b08:	2300      	movs	r3, #0
 8010b0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010b16:	78bb      	ldrb	r3, [r7, #2]
 8010b18:	883a      	ldrh	r2, [r7, #0]
 8010b1a:	78f9      	ldrb	r1, [r7, #3]
 8010b1c:	f7f6 fe89 	bl	8007832 <HAL_PCD_EP_Open>
 8010b20:	4603      	mov	r3, r0
 8010b22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b24:	7bfb      	ldrb	r3, [r7, #15]
 8010b26:	4618      	mov	r0, r3
 8010b28:	f000 f958 	bl	8010ddc <USBD_Get_USB_Status>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b30:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3710      	adds	r7, #16
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}

08010b3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b3a:	b580      	push	{r7, lr}
 8010b3c:	b084      	sub	sp, #16
 8010b3e:	af00      	add	r7, sp, #0
 8010b40:	6078      	str	r0, [r7, #4]
 8010b42:	460b      	mov	r3, r1
 8010b44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b46:	2300      	movs	r3, #0
 8010b48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010b54:	78fa      	ldrb	r2, [r7, #3]
 8010b56:	4611      	mov	r1, r2
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7f6 fec9 	bl	80078f0 <HAL_PCD_EP_Close>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b62:	7bfb      	ldrb	r3, [r7, #15]
 8010b64:	4618      	mov	r0, r3
 8010b66:	f000 f939 	bl	8010ddc <USBD_Get_USB_Status>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3710      	adds	r7, #16
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}

08010b78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b084      	sub	sp, #16
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	460b      	mov	r3, r1
 8010b82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b84:	2300      	movs	r3, #0
 8010b86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010b92:	78fa      	ldrb	r2, [r7, #3]
 8010b94:	4611      	mov	r1, r2
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7f6 ff72 	bl	8007a80 <HAL_PCD_EP_SetStall>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ba0:	7bfb      	ldrb	r3, [r7, #15]
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f000 f91a 	bl	8010ddc <USBD_Get_USB_Status>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bac:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3710      	adds	r7, #16
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}

08010bb6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010bb6:	b580      	push	{r7, lr}
 8010bb8:	b084      	sub	sp, #16
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	6078      	str	r0, [r7, #4]
 8010bbe:	460b      	mov	r3, r1
 8010bc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010bd0:	78fa      	ldrb	r2, [r7, #3]
 8010bd2:	4611      	mov	r1, r2
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f7f6 ffa5 	bl	8007b24 <HAL_PCD_EP_ClrStall>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bde:	7bfb      	ldrb	r3, [r7, #15]
 8010be0:	4618      	mov	r0, r3
 8010be2:	f000 f8fb 	bl	8010ddc <USBD_Get_USB_Status>
 8010be6:	4603      	mov	r3, r0
 8010be8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bea:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bec:	4618      	mov	r0, r3
 8010bee:	3710      	adds	r7, #16
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd80      	pop	{r7, pc}

08010bf4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b085      	sub	sp, #20
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
 8010bfc:	460b      	mov	r3, r1
 8010bfe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010c06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010c08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	da0b      	bge.n	8010c28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010c10:	78fb      	ldrb	r3, [r7, #3]
 8010c12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010c16:	68f9      	ldr	r1, [r7, #12]
 8010c18:	4613      	mov	r3, r2
 8010c1a:	009b      	lsls	r3, r3, #2
 8010c1c:	4413      	add	r3, r2
 8010c1e:	00db      	lsls	r3, r3, #3
 8010c20:	440b      	add	r3, r1
 8010c22:	3312      	adds	r3, #18
 8010c24:	781b      	ldrb	r3, [r3, #0]
 8010c26:	e00b      	b.n	8010c40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010c28:	78fb      	ldrb	r3, [r7, #3]
 8010c2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010c2e:	68f9      	ldr	r1, [r7, #12]
 8010c30:	4613      	mov	r3, r2
 8010c32:	009b      	lsls	r3, r3, #2
 8010c34:	4413      	add	r3, r2
 8010c36:	00db      	lsls	r3, r3, #3
 8010c38:	440b      	add	r3, r1
 8010c3a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8010c3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010c40:	4618      	mov	r0, r3
 8010c42:	3714      	adds	r7, #20
 8010c44:	46bd      	mov	sp, r7
 8010c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4a:	4770      	bx	lr

08010c4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b084      	sub	sp, #16
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	460b      	mov	r3, r1
 8010c56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010c66:	78fa      	ldrb	r2, [r7, #3]
 8010c68:	4611      	mov	r1, r2
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7f6 fdbd 	bl	80077ea <HAL_PCD_SetAddress>
 8010c70:	4603      	mov	r3, r0
 8010c72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c74:	7bfb      	ldrb	r3, [r7, #15]
 8010c76:	4618      	mov	r0, r3
 8010c78:	f000 f8b0 	bl	8010ddc <USBD_Get_USB_Status>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c80:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c82:	4618      	mov	r0, r3
 8010c84:	3710      	adds	r7, #16
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}

08010c8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010c8a:	b580      	push	{r7, lr}
 8010c8c:	b086      	sub	sp, #24
 8010c8e:	af00      	add	r7, sp, #0
 8010c90:	60f8      	str	r0, [r7, #12]
 8010c92:	607a      	str	r2, [r7, #4]
 8010c94:	603b      	str	r3, [r7, #0]
 8010c96:	460b      	mov	r3, r1
 8010c98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010ca8:	7af9      	ldrb	r1, [r7, #11]
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	687a      	ldr	r2, [r7, #4]
 8010cae:	f7f6 feb0 	bl	8007a12 <HAL_PCD_EP_Transmit>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010cb6:	7dfb      	ldrb	r3, [r7, #23]
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f000 f88f 	bl	8010ddc <USBD_Get_USB_Status>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010cc2:	7dbb      	ldrb	r3, [r7, #22]
}
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	3718      	adds	r7, #24
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bd80      	pop	{r7, pc}

08010ccc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b086      	sub	sp, #24
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	60f8      	str	r0, [r7, #12]
 8010cd4:	607a      	str	r2, [r7, #4]
 8010cd6:	603b      	str	r3, [r7, #0]
 8010cd8:	460b      	mov	r3, r1
 8010cda:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010cea:	7af9      	ldrb	r1, [r7, #11]
 8010cec:	683b      	ldr	r3, [r7, #0]
 8010cee:	687a      	ldr	r2, [r7, #4]
 8010cf0:	f7f6 fe46 	bl	8007980 <HAL_PCD_EP_Receive>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010cf8:	7dfb      	ldrb	r3, [r7, #23]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f000 f86e 	bl	8010ddc <USBD_Get_USB_Status>
 8010d00:	4603      	mov	r3, r0
 8010d02:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010d04:	7dbb      	ldrb	r3, [r7, #22]
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	3718      	adds	r7, #24
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}

08010d0e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010d0e:	b580      	push	{r7, lr}
 8010d10:	b082      	sub	sp, #8
 8010d12:	af00      	add	r7, sp, #0
 8010d14:	6078      	str	r0, [r7, #4]
 8010d16:	460b      	mov	r3, r1
 8010d18:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010d20:	78fa      	ldrb	r2, [r7, #3]
 8010d22:	4611      	mov	r1, r2
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7f6 fe5c 	bl	80079e2 <HAL_PCD_EP_GetRxCount>
 8010d2a:	4603      	mov	r3, r0
}
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	3708      	adds	r7, #8
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}

08010d34 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b082      	sub	sp, #8
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
 8010d3c:	460b      	mov	r3, r1
 8010d3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010d40:	78fb      	ldrb	r3, [r7, #3]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d002      	beq.n	8010d4c <HAL_PCDEx_LPM_Callback+0x18>
 8010d46:	2b01      	cmp	r3, #1
 8010d48:	d013      	beq.n	8010d72 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010d4a:	e023      	b.n	8010d94 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	7a5b      	ldrb	r3, [r3, #9]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d007      	beq.n	8010d64 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010d54:	f000 f83c 	bl	8010dd0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010d58:	4b10      	ldr	r3, [pc, #64]	@ (8010d9c <HAL_PCDEx_LPM_Callback+0x68>)
 8010d5a:	691b      	ldr	r3, [r3, #16]
 8010d5c:	4a0f      	ldr	r2, [pc, #60]	@ (8010d9c <HAL_PCDEx_LPM_Callback+0x68>)
 8010d5e:	f023 0306 	bic.w	r3, r3, #6
 8010d62:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7fe fc86 	bl	800f67c <USBD_LL_Resume>
    break;
 8010d70:	e010      	b.n	8010d94 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7fe fc69 	bl	800f650 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	7a5b      	ldrb	r3, [r3, #9]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d005      	beq.n	8010d92 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010d86:	4b05      	ldr	r3, [pc, #20]	@ (8010d9c <HAL_PCDEx_LPM_Callback+0x68>)
 8010d88:	691b      	ldr	r3, [r3, #16]
 8010d8a:	4a04      	ldr	r2, [pc, #16]	@ (8010d9c <HAL_PCDEx_LPM_Callback+0x68>)
 8010d8c:	f043 0306 	orr.w	r3, r3, #6
 8010d90:	6113      	str	r3, [r2, #16]
    break;
 8010d92:	bf00      	nop
}
 8010d94:	bf00      	nop
 8010d96:	3708      	adds	r7, #8
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}
 8010d9c:	e000ed00 	.word	0xe000ed00

08010da0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010da0:	b480      	push	{r7}
 8010da2:	b083      	sub	sp, #12
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010da8:	4b03      	ldr	r3, [pc, #12]	@ (8010db8 <USBD_static_malloc+0x18>)
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	370c      	adds	r7, #12
 8010dae:	46bd      	mov	sp, r7
 8010db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db4:	4770      	bx	lr
 8010db6:	bf00      	nop
 8010db8:	2000236c 	.word	0x2000236c

08010dbc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010dbc:	b480      	push	{r7}
 8010dbe:	b083      	sub	sp, #12
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]

}
 8010dc4:	bf00      	nop
 8010dc6:	370c      	adds	r7, #12
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dce:	4770      	bx	lr

08010dd0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010dd4:	f7f0 fe2c 	bl	8001a30 <SystemClock_Config>
}
 8010dd8:	bf00      	nop
 8010dda:	bd80      	pop	{r7, pc}

08010ddc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010ddc:	b480      	push	{r7}
 8010dde:	b085      	sub	sp, #20
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	4603      	mov	r3, r0
 8010de4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010de6:	2300      	movs	r3, #0
 8010de8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010dea:	79fb      	ldrb	r3, [r7, #7]
 8010dec:	2b03      	cmp	r3, #3
 8010dee:	d817      	bhi.n	8010e20 <USBD_Get_USB_Status+0x44>
 8010df0:	a201      	add	r2, pc, #4	@ (adr r2, 8010df8 <USBD_Get_USB_Status+0x1c>)
 8010df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010df6:	bf00      	nop
 8010df8:	08010e09 	.word	0x08010e09
 8010dfc:	08010e0f 	.word	0x08010e0f
 8010e00:	08010e15 	.word	0x08010e15
 8010e04:	08010e1b 	.word	0x08010e1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010e08:	2300      	movs	r3, #0
 8010e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8010e0c:	e00b      	b.n	8010e26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010e0e:	2303      	movs	r3, #3
 8010e10:	73fb      	strb	r3, [r7, #15]
    break;
 8010e12:	e008      	b.n	8010e26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010e14:	2301      	movs	r3, #1
 8010e16:	73fb      	strb	r3, [r7, #15]
    break;
 8010e18:	e005      	b.n	8010e26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010e1a:	2303      	movs	r3, #3
 8010e1c:	73fb      	strb	r3, [r7, #15]
    break;
 8010e1e:	e002      	b.n	8010e26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010e20:	2303      	movs	r3, #3
 8010e22:	73fb      	strb	r3, [r7, #15]
    break;
 8010e24:	bf00      	nop
  }
  return usb_status;
 8010e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e28:	4618      	mov	r0, r3
 8010e2a:	3714      	adds	r7, #20
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e32:	4770      	bx	lr

08010e34 <__cvt>:
 8010e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010e38:	ec57 6b10 	vmov	r6, r7, d0
 8010e3c:	2f00      	cmp	r7, #0
 8010e3e:	460c      	mov	r4, r1
 8010e40:	4619      	mov	r1, r3
 8010e42:	463b      	mov	r3, r7
 8010e44:	bfbb      	ittet	lt
 8010e46:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010e4a:	461f      	movlt	r7, r3
 8010e4c:	2300      	movge	r3, #0
 8010e4e:	232d      	movlt	r3, #45	@ 0x2d
 8010e50:	700b      	strb	r3, [r1, #0]
 8010e52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010e54:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010e58:	4691      	mov	r9, r2
 8010e5a:	f023 0820 	bic.w	r8, r3, #32
 8010e5e:	bfbc      	itt	lt
 8010e60:	4632      	movlt	r2, r6
 8010e62:	4616      	movlt	r6, r2
 8010e64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010e68:	d005      	beq.n	8010e76 <__cvt+0x42>
 8010e6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010e6e:	d100      	bne.n	8010e72 <__cvt+0x3e>
 8010e70:	3401      	adds	r4, #1
 8010e72:	2102      	movs	r1, #2
 8010e74:	e000      	b.n	8010e78 <__cvt+0x44>
 8010e76:	2103      	movs	r1, #3
 8010e78:	ab03      	add	r3, sp, #12
 8010e7a:	9301      	str	r3, [sp, #4]
 8010e7c:	ab02      	add	r3, sp, #8
 8010e7e:	9300      	str	r3, [sp, #0]
 8010e80:	ec47 6b10 	vmov	d0, r6, r7
 8010e84:	4653      	mov	r3, sl
 8010e86:	4622      	mov	r2, r4
 8010e88:	f001 f8c2 	bl	8012010 <_dtoa_r>
 8010e8c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010e90:	4605      	mov	r5, r0
 8010e92:	d119      	bne.n	8010ec8 <__cvt+0x94>
 8010e94:	f019 0f01 	tst.w	r9, #1
 8010e98:	d00e      	beq.n	8010eb8 <__cvt+0x84>
 8010e9a:	eb00 0904 	add.w	r9, r0, r4
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	4630      	mov	r0, r6
 8010ea4:	4639      	mov	r1, r7
 8010ea6:	f7ef fe37 	bl	8000b18 <__aeabi_dcmpeq>
 8010eaa:	b108      	cbz	r0, 8010eb0 <__cvt+0x7c>
 8010eac:	f8cd 900c 	str.w	r9, [sp, #12]
 8010eb0:	2230      	movs	r2, #48	@ 0x30
 8010eb2:	9b03      	ldr	r3, [sp, #12]
 8010eb4:	454b      	cmp	r3, r9
 8010eb6:	d31e      	bcc.n	8010ef6 <__cvt+0xc2>
 8010eb8:	9b03      	ldr	r3, [sp, #12]
 8010eba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010ebc:	1b5b      	subs	r3, r3, r5
 8010ebe:	4628      	mov	r0, r5
 8010ec0:	6013      	str	r3, [r2, #0]
 8010ec2:	b004      	add	sp, #16
 8010ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ec8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010ecc:	eb00 0904 	add.w	r9, r0, r4
 8010ed0:	d1e5      	bne.n	8010e9e <__cvt+0x6a>
 8010ed2:	7803      	ldrb	r3, [r0, #0]
 8010ed4:	2b30      	cmp	r3, #48	@ 0x30
 8010ed6:	d10a      	bne.n	8010eee <__cvt+0xba>
 8010ed8:	2200      	movs	r2, #0
 8010eda:	2300      	movs	r3, #0
 8010edc:	4630      	mov	r0, r6
 8010ede:	4639      	mov	r1, r7
 8010ee0:	f7ef fe1a 	bl	8000b18 <__aeabi_dcmpeq>
 8010ee4:	b918      	cbnz	r0, 8010eee <__cvt+0xba>
 8010ee6:	f1c4 0401 	rsb	r4, r4, #1
 8010eea:	f8ca 4000 	str.w	r4, [sl]
 8010eee:	f8da 3000 	ldr.w	r3, [sl]
 8010ef2:	4499      	add	r9, r3
 8010ef4:	e7d3      	b.n	8010e9e <__cvt+0x6a>
 8010ef6:	1c59      	adds	r1, r3, #1
 8010ef8:	9103      	str	r1, [sp, #12]
 8010efa:	701a      	strb	r2, [r3, #0]
 8010efc:	e7d9      	b.n	8010eb2 <__cvt+0x7e>

08010efe <__exponent>:
 8010efe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f00:	2900      	cmp	r1, #0
 8010f02:	bfba      	itte	lt
 8010f04:	4249      	neglt	r1, r1
 8010f06:	232d      	movlt	r3, #45	@ 0x2d
 8010f08:	232b      	movge	r3, #43	@ 0x2b
 8010f0a:	2909      	cmp	r1, #9
 8010f0c:	7002      	strb	r2, [r0, #0]
 8010f0e:	7043      	strb	r3, [r0, #1]
 8010f10:	dd29      	ble.n	8010f66 <__exponent+0x68>
 8010f12:	f10d 0307 	add.w	r3, sp, #7
 8010f16:	461d      	mov	r5, r3
 8010f18:	270a      	movs	r7, #10
 8010f1a:	461a      	mov	r2, r3
 8010f1c:	fbb1 f6f7 	udiv	r6, r1, r7
 8010f20:	fb07 1416 	mls	r4, r7, r6, r1
 8010f24:	3430      	adds	r4, #48	@ 0x30
 8010f26:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010f2a:	460c      	mov	r4, r1
 8010f2c:	2c63      	cmp	r4, #99	@ 0x63
 8010f2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8010f32:	4631      	mov	r1, r6
 8010f34:	dcf1      	bgt.n	8010f1a <__exponent+0x1c>
 8010f36:	3130      	adds	r1, #48	@ 0x30
 8010f38:	1e94      	subs	r4, r2, #2
 8010f3a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010f3e:	1c41      	adds	r1, r0, #1
 8010f40:	4623      	mov	r3, r4
 8010f42:	42ab      	cmp	r3, r5
 8010f44:	d30a      	bcc.n	8010f5c <__exponent+0x5e>
 8010f46:	f10d 0309 	add.w	r3, sp, #9
 8010f4a:	1a9b      	subs	r3, r3, r2
 8010f4c:	42ac      	cmp	r4, r5
 8010f4e:	bf88      	it	hi
 8010f50:	2300      	movhi	r3, #0
 8010f52:	3302      	adds	r3, #2
 8010f54:	4403      	add	r3, r0
 8010f56:	1a18      	subs	r0, r3, r0
 8010f58:	b003      	add	sp, #12
 8010f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f5c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010f60:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010f64:	e7ed      	b.n	8010f42 <__exponent+0x44>
 8010f66:	2330      	movs	r3, #48	@ 0x30
 8010f68:	3130      	adds	r1, #48	@ 0x30
 8010f6a:	7083      	strb	r3, [r0, #2]
 8010f6c:	70c1      	strb	r1, [r0, #3]
 8010f6e:	1d03      	adds	r3, r0, #4
 8010f70:	e7f1      	b.n	8010f56 <__exponent+0x58>
	...

08010f74 <_printf_float>:
 8010f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f78:	b08d      	sub	sp, #52	@ 0x34
 8010f7a:	460c      	mov	r4, r1
 8010f7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010f80:	4616      	mov	r6, r2
 8010f82:	461f      	mov	r7, r3
 8010f84:	4605      	mov	r5, r0
 8010f86:	f000 ff2d 	bl	8011de4 <_localeconv_r>
 8010f8a:	6803      	ldr	r3, [r0, #0]
 8010f8c:	9304      	str	r3, [sp, #16]
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7ef f996 	bl	80002c0 <strlen>
 8010f94:	2300      	movs	r3, #0
 8010f96:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f98:	f8d8 3000 	ldr.w	r3, [r8]
 8010f9c:	9005      	str	r0, [sp, #20]
 8010f9e:	3307      	adds	r3, #7
 8010fa0:	f023 0307 	bic.w	r3, r3, #7
 8010fa4:	f103 0208 	add.w	r2, r3, #8
 8010fa8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010fac:	f8d4 b000 	ldr.w	fp, [r4]
 8010fb0:	f8c8 2000 	str.w	r2, [r8]
 8010fb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010fb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010fbc:	9307      	str	r3, [sp, #28]
 8010fbe:	f8cd 8018 	str.w	r8, [sp, #24]
 8010fc2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010fc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010fca:	4b9c      	ldr	r3, [pc, #624]	@ (801123c <_printf_float+0x2c8>)
 8010fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8010fd0:	f7ef fdd4 	bl	8000b7c <__aeabi_dcmpun>
 8010fd4:	bb70      	cbnz	r0, 8011034 <_printf_float+0xc0>
 8010fd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010fda:	4b98      	ldr	r3, [pc, #608]	@ (801123c <_printf_float+0x2c8>)
 8010fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8010fe0:	f7ef fdae 	bl	8000b40 <__aeabi_dcmple>
 8010fe4:	bb30      	cbnz	r0, 8011034 <_printf_float+0xc0>
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	2300      	movs	r3, #0
 8010fea:	4640      	mov	r0, r8
 8010fec:	4649      	mov	r1, r9
 8010fee:	f7ef fd9d 	bl	8000b2c <__aeabi_dcmplt>
 8010ff2:	b110      	cbz	r0, 8010ffa <_printf_float+0x86>
 8010ff4:	232d      	movs	r3, #45	@ 0x2d
 8010ff6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ffa:	4a91      	ldr	r2, [pc, #580]	@ (8011240 <_printf_float+0x2cc>)
 8010ffc:	4b91      	ldr	r3, [pc, #580]	@ (8011244 <_printf_float+0x2d0>)
 8010ffe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011002:	bf94      	ite	ls
 8011004:	4690      	movls	r8, r2
 8011006:	4698      	movhi	r8, r3
 8011008:	2303      	movs	r3, #3
 801100a:	6123      	str	r3, [r4, #16]
 801100c:	f02b 0304 	bic.w	r3, fp, #4
 8011010:	6023      	str	r3, [r4, #0]
 8011012:	f04f 0900 	mov.w	r9, #0
 8011016:	9700      	str	r7, [sp, #0]
 8011018:	4633      	mov	r3, r6
 801101a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801101c:	4621      	mov	r1, r4
 801101e:	4628      	mov	r0, r5
 8011020:	f000 f9d2 	bl	80113c8 <_printf_common>
 8011024:	3001      	adds	r0, #1
 8011026:	f040 808d 	bne.w	8011144 <_printf_float+0x1d0>
 801102a:	f04f 30ff 	mov.w	r0, #4294967295
 801102e:	b00d      	add	sp, #52	@ 0x34
 8011030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011034:	4642      	mov	r2, r8
 8011036:	464b      	mov	r3, r9
 8011038:	4640      	mov	r0, r8
 801103a:	4649      	mov	r1, r9
 801103c:	f7ef fd9e 	bl	8000b7c <__aeabi_dcmpun>
 8011040:	b140      	cbz	r0, 8011054 <_printf_float+0xe0>
 8011042:	464b      	mov	r3, r9
 8011044:	2b00      	cmp	r3, #0
 8011046:	bfbc      	itt	lt
 8011048:	232d      	movlt	r3, #45	@ 0x2d
 801104a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801104e:	4a7e      	ldr	r2, [pc, #504]	@ (8011248 <_printf_float+0x2d4>)
 8011050:	4b7e      	ldr	r3, [pc, #504]	@ (801124c <_printf_float+0x2d8>)
 8011052:	e7d4      	b.n	8010ffe <_printf_float+0x8a>
 8011054:	6863      	ldr	r3, [r4, #4]
 8011056:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801105a:	9206      	str	r2, [sp, #24]
 801105c:	1c5a      	adds	r2, r3, #1
 801105e:	d13b      	bne.n	80110d8 <_printf_float+0x164>
 8011060:	2306      	movs	r3, #6
 8011062:	6063      	str	r3, [r4, #4]
 8011064:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011068:	2300      	movs	r3, #0
 801106a:	6022      	str	r2, [r4, #0]
 801106c:	9303      	str	r3, [sp, #12]
 801106e:	ab0a      	add	r3, sp, #40	@ 0x28
 8011070:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011074:	ab09      	add	r3, sp, #36	@ 0x24
 8011076:	9300      	str	r3, [sp, #0]
 8011078:	6861      	ldr	r1, [r4, #4]
 801107a:	ec49 8b10 	vmov	d0, r8, r9
 801107e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011082:	4628      	mov	r0, r5
 8011084:	f7ff fed6 	bl	8010e34 <__cvt>
 8011088:	9b06      	ldr	r3, [sp, #24]
 801108a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801108c:	2b47      	cmp	r3, #71	@ 0x47
 801108e:	4680      	mov	r8, r0
 8011090:	d129      	bne.n	80110e6 <_printf_float+0x172>
 8011092:	1cc8      	adds	r0, r1, #3
 8011094:	db02      	blt.n	801109c <_printf_float+0x128>
 8011096:	6863      	ldr	r3, [r4, #4]
 8011098:	4299      	cmp	r1, r3
 801109a:	dd41      	ble.n	8011120 <_printf_float+0x1ac>
 801109c:	f1aa 0a02 	sub.w	sl, sl, #2
 80110a0:	fa5f fa8a 	uxtb.w	sl, sl
 80110a4:	3901      	subs	r1, #1
 80110a6:	4652      	mov	r2, sl
 80110a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80110ac:	9109      	str	r1, [sp, #36]	@ 0x24
 80110ae:	f7ff ff26 	bl	8010efe <__exponent>
 80110b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80110b4:	1813      	adds	r3, r2, r0
 80110b6:	2a01      	cmp	r2, #1
 80110b8:	4681      	mov	r9, r0
 80110ba:	6123      	str	r3, [r4, #16]
 80110bc:	dc02      	bgt.n	80110c4 <_printf_float+0x150>
 80110be:	6822      	ldr	r2, [r4, #0]
 80110c0:	07d2      	lsls	r2, r2, #31
 80110c2:	d501      	bpl.n	80110c8 <_printf_float+0x154>
 80110c4:	3301      	adds	r3, #1
 80110c6:	6123      	str	r3, [r4, #16]
 80110c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d0a2      	beq.n	8011016 <_printf_float+0xa2>
 80110d0:	232d      	movs	r3, #45	@ 0x2d
 80110d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80110d6:	e79e      	b.n	8011016 <_printf_float+0xa2>
 80110d8:	9a06      	ldr	r2, [sp, #24]
 80110da:	2a47      	cmp	r2, #71	@ 0x47
 80110dc:	d1c2      	bne.n	8011064 <_printf_float+0xf0>
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d1c0      	bne.n	8011064 <_printf_float+0xf0>
 80110e2:	2301      	movs	r3, #1
 80110e4:	e7bd      	b.n	8011062 <_printf_float+0xee>
 80110e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80110ea:	d9db      	bls.n	80110a4 <_printf_float+0x130>
 80110ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80110f0:	d118      	bne.n	8011124 <_printf_float+0x1b0>
 80110f2:	2900      	cmp	r1, #0
 80110f4:	6863      	ldr	r3, [r4, #4]
 80110f6:	dd0b      	ble.n	8011110 <_printf_float+0x19c>
 80110f8:	6121      	str	r1, [r4, #16]
 80110fa:	b913      	cbnz	r3, 8011102 <_printf_float+0x18e>
 80110fc:	6822      	ldr	r2, [r4, #0]
 80110fe:	07d0      	lsls	r0, r2, #31
 8011100:	d502      	bpl.n	8011108 <_printf_float+0x194>
 8011102:	3301      	adds	r3, #1
 8011104:	440b      	add	r3, r1
 8011106:	6123      	str	r3, [r4, #16]
 8011108:	65a1      	str	r1, [r4, #88]	@ 0x58
 801110a:	f04f 0900 	mov.w	r9, #0
 801110e:	e7db      	b.n	80110c8 <_printf_float+0x154>
 8011110:	b913      	cbnz	r3, 8011118 <_printf_float+0x1a4>
 8011112:	6822      	ldr	r2, [r4, #0]
 8011114:	07d2      	lsls	r2, r2, #31
 8011116:	d501      	bpl.n	801111c <_printf_float+0x1a8>
 8011118:	3302      	adds	r3, #2
 801111a:	e7f4      	b.n	8011106 <_printf_float+0x192>
 801111c:	2301      	movs	r3, #1
 801111e:	e7f2      	b.n	8011106 <_printf_float+0x192>
 8011120:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011126:	4299      	cmp	r1, r3
 8011128:	db05      	blt.n	8011136 <_printf_float+0x1c2>
 801112a:	6823      	ldr	r3, [r4, #0]
 801112c:	6121      	str	r1, [r4, #16]
 801112e:	07d8      	lsls	r0, r3, #31
 8011130:	d5ea      	bpl.n	8011108 <_printf_float+0x194>
 8011132:	1c4b      	adds	r3, r1, #1
 8011134:	e7e7      	b.n	8011106 <_printf_float+0x192>
 8011136:	2900      	cmp	r1, #0
 8011138:	bfd4      	ite	le
 801113a:	f1c1 0202 	rsble	r2, r1, #2
 801113e:	2201      	movgt	r2, #1
 8011140:	4413      	add	r3, r2
 8011142:	e7e0      	b.n	8011106 <_printf_float+0x192>
 8011144:	6823      	ldr	r3, [r4, #0]
 8011146:	055a      	lsls	r2, r3, #21
 8011148:	d407      	bmi.n	801115a <_printf_float+0x1e6>
 801114a:	6923      	ldr	r3, [r4, #16]
 801114c:	4642      	mov	r2, r8
 801114e:	4631      	mov	r1, r6
 8011150:	4628      	mov	r0, r5
 8011152:	47b8      	blx	r7
 8011154:	3001      	adds	r0, #1
 8011156:	d12b      	bne.n	80111b0 <_printf_float+0x23c>
 8011158:	e767      	b.n	801102a <_printf_float+0xb6>
 801115a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801115e:	f240 80dd 	bls.w	801131c <_printf_float+0x3a8>
 8011162:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011166:	2200      	movs	r2, #0
 8011168:	2300      	movs	r3, #0
 801116a:	f7ef fcd5 	bl	8000b18 <__aeabi_dcmpeq>
 801116e:	2800      	cmp	r0, #0
 8011170:	d033      	beq.n	80111da <_printf_float+0x266>
 8011172:	4a37      	ldr	r2, [pc, #220]	@ (8011250 <_printf_float+0x2dc>)
 8011174:	2301      	movs	r3, #1
 8011176:	4631      	mov	r1, r6
 8011178:	4628      	mov	r0, r5
 801117a:	47b8      	blx	r7
 801117c:	3001      	adds	r0, #1
 801117e:	f43f af54 	beq.w	801102a <_printf_float+0xb6>
 8011182:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011186:	4543      	cmp	r3, r8
 8011188:	db02      	blt.n	8011190 <_printf_float+0x21c>
 801118a:	6823      	ldr	r3, [r4, #0]
 801118c:	07d8      	lsls	r0, r3, #31
 801118e:	d50f      	bpl.n	80111b0 <_printf_float+0x23c>
 8011190:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011194:	4631      	mov	r1, r6
 8011196:	4628      	mov	r0, r5
 8011198:	47b8      	blx	r7
 801119a:	3001      	adds	r0, #1
 801119c:	f43f af45 	beq.w	801102a <_printf_float+0xb6>
 80111a0:	f04f 0900 	mov.w	r9, #0
 80111a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80111a8:	f104 0a1a 	add.w	sl, r4, #26
 80111ac:	45c8      	cmp	r8, r9
 80111ae:	dc09      	bgt.n	80111c4 <_printf_float+0x250>
 80111b0:	6823      	ldr	r3, [r4, #0]
 80111b2:	079b      	lsls	r3, r3, #30
 80111b4:	f100 8103 	bmi.w	80113be <_printf_float+0x44a>
 80111b8:	68e0      	ldr	r0, [r4, #12]
 80111ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80111bc:	4298      	cmp	r0, r3
 80111be:	bfb8      	it	lt
 80111c0:	4618      	movlt	r0, r3
 80111c2:	e734      	b.n	801102e <_printf_float+0xba>
 80111c4:	2301      	movs	r3, #1
 80111c6:	4652      	mov	r2, sl
 80111c8:	4631      	mov	r1, r6
 80111ca:	4628      	mov	r0, r5
 80111cc:	47b8      	blx	r7
 80111ce:	3001      	adds	r0, #1
 80111d0:	f43f af2b 	beq.w	801102a <_printf_float+0xb6>
 80111d4:	f109 0901 	add.w	r9, r9, #1
 80111d8:	e7e8      	b.n	80111ac <_printf_float+0x238>
 80111da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111dc:	2b00      	cmp	r3, #0
 80111de:	dc39      	bgt.n	8011254 <_printf_float+0x2e0>
 80111e0:	4a1b      	ldr	r2, [pc, #108]	@ (8011250 <_printf_float+0x2dc>)
 80111e2:	2301      	movs	r3, #1
 80111e4:	4631      	mov	r1, r6
 80111e6:	4628      	mov	r0, r5
 80111e8:	47b8      	blx	r7
 80111ea:	3001      	adds	r0, #1
 80111ec:	f43f af1d 	beq.w	801102a <_printf_float+0xb6>
 80111f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80111f4:	ea59 0303 	orrs.w	r3, r9, r3
 80111f8:	d102      	bne.n	8011200 <_printf_float+0x28c>
 80111fa:	6823      	ldr	r3, [r4, #0]
 80111fc:	07d9      	lsls	r1, r3, #31
 80111fe:	d5d7      	bpl.n	80111b0 <_printf_float+0x23c>
 8011200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011204:	4631      	mov	r1, r6
 8011206:	4628      	mov	r0, r5
 8011208:	47b8      	blx	r7
 801120a:	3001      	adds	r0, #1
 801120c:	f43f af0d 	beq.w	801102a <_printf_float+0xb6>
 8011210:	f04f 0a00 	mov.w	sl, #0
 8011214:	f104 0b1a 	add.w	fp, r4, #26
 8011218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801121a:	425b      	negs	r3, r3
 801121c:	4553      	cmp	r3, sl
 801121e:	dc01      	bgt.n	8011224 <_printf_float+0x2b0>
 8011220:	464b      	mov	r3, r9
 8011222:	e793      	b.n	801114c <_printf_float+0x1d8>
 8011224:	2301      	movs	r3, #1
 8011226:	465a      	mov	r2, fp
 8011228:	4631      	mov	r1, r6
 801122a:	4628      	mov	r0, r5
 801122c:	47b8      	blx	r7
 801122e:	3001      	adds	r0, #1
 8011230:	f43f aefb 	beq.w	801102a <_printf_float+0xb6>
 8011234:	f10a 0a01 	add.w	sl, sl, #1
 8011238:	e7ee      	b.n	8011218 <_printf_float+0x2a4>
 801123a:	bf00      	nop
 801123c:	7fefffff 	.word	0x7fefffff
 8011240:	08017028 	.word	0x08017028
 8011244:	0801702c 	.word	0x0801702c
 8011248:	08017030 	.word	0x08017030
 801124c:	08017034 	.word	0x08017034
 8011250:	080173c8 	.word	0x080173c8
 8011254:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011256:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801125a:	4553      	cmp	r3, sl
 801125c:	bfa8      	it	ge
 801125e:	4653      	movge	r3, sl
 8011260:	2b00      	cmp	r3, #0
 8011262:	4699      	mov	r9, r3
 8011264:	dc36      	bgt.n	80112d4 <_printf_float+0x360>
 8011266:	f04f 0b00 	mov.w	fp, #0
 801126a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801126e:	f104 021a 	add.w	r2, r4, #26
 8011272:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011274:	9306      	str	r3, [sp, #24]
 8011276:	eba3 0309 	sub.w	r3, r3, r9
 801127a:	455b      	cmp	r3, fp
 801127c:	dc31      	bgt.n	80112e2 <_printf_float+0x36e>
 801127e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011280:	459a      	cmp	sl, r3
 8011282:	dc3a      	bgt.n	80112fa <_printf_float+0x386>
 8011284:	6823      	ldr	r3, [r4, #0]
 8011286:	07da      	lsls	r2, r3, #31
 8011288:	d437      	bmi.n	80112fa <_printf_float+0x386>
 801128a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801128c:	ebaa 0903 	sub.w	r9, sl, r3
 8011290:	9b06      	ldr	r3, [sp, #24]
 8011292:	ebaa 0303 	sub.w	r3, sl, r3
 8011296:	4599      	cmp	r9, r3
 8011298:	bfa8      	it	ge
 801129a:	4699      	movge	r9, r3
 801129c:	f1b9 0f00 	cmp.w	r9, #0
 80112a0:	dc33      	bgt.n	801130a <_printf_float+0x396>
 80112a2:	f04f 0800 	mov.w	r8, #0
 80112a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80112aa:	f104 0b1a 	add.w	fp, r4, #26
 80112ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112b0:	ebaa 0303 	sub.w	r3, sl, r3
 80112b4:	eba3 0309 	sub.w	r3, r3, r9
 80112b8:	4543      	cmp	r3, r8
 80112ba:	f77f af79 	ble.w	80111b0 <_printf_float+0x23c>
 80112be:	2301      	movs	r3, #1
 80112c0:	465a      	mov	r2, fp
 80112c2:	4631      	mov	r1, r6
 80112c4:	4628      	mov	r0, r5
 80112c6:	47b8      	blx	r7
 80112c8:	3001      	adds	r0, #1
 80112ca:	f43f aeae 	beq.w	801102a <_printf_float+0xb6>
 80112ce:	f108 0801 	add.w	r8, r8, #1
 80112d2:	e7ec      	b.n	80112ae <_printf_float+0x33a>
 80112d4:	4642      	mov	r2, r8
 80112d6:	4631      	mov	r1, r6
 80112d8:	4628      	mov	r0, r5
 80112da:	47b8      	blx	r7
 80112dc:	3001      	adds	r0, #1
 80112de:	d1c2      	bne.n	8011266 <_printf_float+0x2f2>
 80112e0:	e6a3      	b.n	801102a <_printf_float+0xb6>
 80112e2:	2301      	movs	r3, #1
 80112e4:	4631      	mov	r1, r6
 80112e6:	4628      	mov	r0, r5
 80112e8:	9206      	str	r2, [sp, #24]
 80112ea:	47b8      	blx	r7
 80112ec:	3001      	adds	r0, #1
 80112ee:	f43f ae9c 	beq.w	801102a <_printf_float+0xb6>
 80112f2:	9a06      	ldr	r2, [sp, #24]
 80112f4:	f10b 0b01 	add.w	fp, fp, #1
 80112f8:	e7bb      	b.n	8011272 <_printf_float+0x2fe>
 80112fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80112fe:	4631      	mov	r1, r6
 8011300:	4628      	mov	r0, r5
 8011302:	47b8      	blx	r7
 8011304:	3001      	adds	r0, #1
 8011306:	d1c0      	bne.n	801128a <_printf_float+0x316>
 8011308:	e68f      	b.n	801102a <_printf_float+0xb6>
 801130a:	9a06      	ldr	r2, [sp, #24]
 801130c:	464b      	mov	r3, r9
 801130e:	4442      	add	r2, r8
 8011310:	4631      	mov	r1, r6
 8011312:	4628      	mov	r0, r5
 8011314:	47b8      	blx	r7
 8011316:	3001      	adds	r0, #1
 8011318:	d1c3      	bne.n	80112a2 <_printf_float+0x32e>
 801131a:	e686      	b.n	801102a <_printf_float+0xb6>
 801131c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011320:	f1ba 0f01 	cmp.w	sl, #1
 8011324:	dc01      	bgt.n	801132a <_printf_float+0x3b6>
 8011326:	07db      	lsls	r3, r3, #31
 8011328:	d536      	bpl.n	8011398 <_printf_float+0x424>
 801132a:	2301      	movs	r3, #1
 801132c:	4642      	mov	r2, r8
 801132e:	4631      	mov	r1, r6
 8011330:	4628      	mov	r0, r5
 8011332:	47b8      	blx	r7
 8011334:	3001      	adds	r0, #1
 8011336:	f43f ae78 	beq.w	801102a <_printf_float+0xb6>
 801133a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801133e:	4631      	mov	r1, r6
 8011340:	4628      	mov	r0, r5
 8011342:	47b8      	blx	r7
 8011344:	3001      	adds	r0, #1
 8011346:	f43f ae70 	beq.w	801102a <_printf_float+0xb6>
 801134a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801134e:	2200      	movs	r2, #0
 8011350:	2300      	movs	r3, #0
 8011352:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011356:	f7ef fbdf 	bl	8000b18 <__aeabi_dcmpeq>
 801135a:	b9c0      	cbnz	r0, 801138e <_printf_float+0x41a>
 801135c:	4653      	mov	r3, sl
 801135e:	f108 0201 	add.w	r2, r8, #1
 8011362:	4631      	mov	r1, r6
 8011364:	4628      	mov	r0, r5
 8011366:	47b8      	blx	r7
 8011368:	3001      	adds	r0, #1
 801136a:	d10c      	bne.n	8011386 <_printf_float+0x412>
 801136c:	e65d      	b.n	801102a <_printf_float+0xb6>
 801136e:	2301      	movs	r3, #1
 8011370:	465a      	mov	r2, fp
 8011372:	4631      	mov	r1, r6
 8011374:	4628      	mov	r0, r5
 8011376:	47b8      	blx	r7
 8011378:	3001      	adds	r0, #1
 801137a:	f43f ae56 	beq.w	801102a <_printf_float+0xb6>
 801137e:	f108 0801 	add.w	r8, r8, #1
 8011382:	45d0      	cmp	r8, sl
 8011384:	dbf3      	blt.n	801136e <_printf_float+0x3fa>
 8011386:	464b      	mov	r3, r9
 8011388:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801138c:	e6df      	b.n	801114e <_printf_float+0x1da>
 801138e:	f04f 0800 	mov.w	r8, #0
 8011392:	f104 0b1a 	add.w	fp, r4, #26
 8011396:	e7f4      	b.n	8011382 <_printf_float+0x40e>
 8011398:	2301      	movs	r3, #1
 801139a:	4642      	mov	r2, r8
 801139c:	e7e1      	b.n	8011362 <_printf_float+0x3ee>
 801139e:	2301      	movs	r3, #1
 80113a0:	464a      	mov	r2, r9
 80113a2:	4631      	mov	r1, r6
 80113a4:	4628      	mov	r0, r5
 80113a6:	47b8      	blx	r7
 80113a8:	3001      	adds	r0, #1
 80113aa:	f43f ae3e 	beq.w	801102a <_printf_float+0xb6>
 80113ae:	f108 0801 	add.w	r8, r8, #1
 80113b2:	68e3      	ldr	r3, [r4, #12]
 80113b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80113b6:	1a5b      	subs	r3, r3, r1
 80113b8:	4543      	cmp	r3, r8
 80113ba:	dcf0      	bgt.n	801139e <_printf_float+0x42a>
 80113bc:	e6fc      	b.n	80111b8 <_printf_float+0x244>
 80113be:	f04f 0800 	mov.w	r8, #0
 80113c2:	f104 0919 	add.w	r9, r4, #25
 80113c6:	e7f4      	b.n	80113b2 <_printf_float+0x43e>

080113c8 <_printf_common>:
 80113c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113cc:	4616      	mov	r6, r2
 80113ce:	4698      	mov	r8, r3
 80113d0:	688a      	ldr	r2, [r1, #8]
 80113d2:	690b      	ldr	r3, [r1, #16]
 80113d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80113d8:	4293      	cmp	r3, r2
 80113da:	bfb8      	it	lt
 80113dc:	4613      	movlt	r3, r2
 80113de:	6033      	str	r3, [r6, #0]
 80113e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80113e4:	4607      	mov	r7, r0
 80113e6:	460c      	mov	r4, r1
 80113e8:	b10a      	cbz	r2, 80113ee <_printf_common+0x26>
 80113ea:	3301      	adds	r3, #1
 80113ec:	6033      	str	r3, [r6, #0]
 80113ee:	6823      	ldr	r3, [r4, #0]
 80113f0:	0699      	lsls	r1, r3, #26
 80113f2:	bf42      	ittt	mi
 80113f4:	6833      	ldrmi	r3, [r6, #0]
 80113f6:	3302      	addmi	r3, #2
 80113f8:	6033      	strmi	r3, [r6, #0]
 80113fa:	6825      	ldr	r5, [r4, #0]
 80113fc:	f015 0506 	ands.w	r5, r5, #6
 8011400:	d106      	bne.n	8011410 <_printf_common+0x48>
 8011402:	f104 0a19 	add.w	sl, r4, #25
 8011406:	68e3      	ldr	r3, [r4, #12]
 8011408:	6832      	ldr	r2, [r6, #0]
 801140a:	1a9b      	subs	r3, r3, r2
 801140c:	42ab      	cmp	r3, r5
 801140e:	dc26      	bgt.n	801145e <_printf_common+0x96>
 8011410:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011414:	6822      	ldr	r2, [r4, #0]
 8011416:	3b00      	subs	r3, #0
 8011418:	bf18      	it	ne
 801141a:	2301      	movne	r3, #1
 801141c:	0692      	lsls	r2, r2, #26
 801141e:	d42b      	bmi.n	8011478 <_printf_common+0xb0>
 8011420:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011424:	4641      	mov	r1, r8
 8011426:	4638      	mov	r0, r7
 8011428:	47c8      	blx	r9
 801142a:	3001      	adds	r0, #1
 801142c:	d01e      	beq.n	801146c <_printf_common+0xa4>
 801142e:	6823      	ldr	r3, [r4, #0]
 8011430:	6922      	ldr	r2, [r4, #16]
 8011432:	f003 0306 	and.w	r3, r3, #6
 8011436:	2b04      	cmp	r3, #4
 8011438:	bf02      	ittt	eq
 801143a:	68e5      	ldreq	r5, [r4, #12]
 801143c:	6833      	ldreq	r3, [r6, #0]
 801143e:	1aed      	subeq	r5, r5, r3
 8011440:	68a3      	ldr	r3, [r4, #8]
 8011442:	bf0c      	ite	eq
 8011444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011448:	2500      	movne	r5, #0
 801144a:	4293      	cmp	r3, r2
 801144c:	bfc4      	itt	gt
 801144e:	1a9b      	subgt	r3, r3, r2
 8011450:	18ed      	addgt	r5, r5, r3
 8011452:	2600      	movs	r6, #0
 8011454:	341a      	adds	r4, #26
 8011456:	42b5      	cmp	r5, r6
 8011458:	d11a      	bne.n	8011490 <_printf_common+0xc8>
 801145a:	2000      	movs	r0, #0
 801145c:	e008      	b.n	8011470 <_printf_common+0xa8>
 801145e:	2301      	movs	r3, #1
 8011460:	4652      	mov	r2, sl
 8011462:	4641      	mov	r1, r8
 8011464:	4638      	mov	r0, r7
 8011466:	47c8      	blx	r9
 8011468:	3001      	adds	r0, #1
 801146a:	d103      	bne.n	8011474 <_printf_common+0xac>
 801146c:	f04f 30ff 	mov.w	r0, #4294967295
 8011470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011474:	3501      	adds	r5, #1
 8011476:	e7c6      	b.n	8011406 <_printf_common+0x3e>
 8011478:	18e1      	adds	r1, r4, r3
 801147a:	1c5a      	adds	r2, r3, #1
 801147c:	2030      	movs	r0, #48	@ 0x30
 801147e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011482:	4422      	add	r2, r4
 8011484:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011488:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801148c:	3302      	adds	r3, #2
 801148e:	e7c7      	b.n	8011420 <_printf_common+0x58>
 8011490:	2301      	movs	r3, #1
 8011492:	4622      	mov	r2, r4
 8011494:	4641      	mov	r1, r8
 8011496:	4638      	mov	r0, r7
 8011498:	47c8      	blx	r9
 801149a:	3001      	adds	r0, #1
 801149c:	d0e6      	beq.n	801146c <_printf_common+0xa4>
 801149e:	3601      	adds	r6, #1
 80114a0:	e7d9      	b.n	8011456 <_printf_common+0x8e>
	...

080114a4 <_printf_i>:
 80114a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80114a8:	7e0f      	ldrb	r7, [r1, #24]
 80114aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80114ac:	2f78      	cmp	r7, #120	@ 0x78
 80114ae:	4691      	mov	r9, r2
 80114b0:	4680      	mov	r8, r0
 80114b2:	460c      	mov	r4, r1
 80114b4:	469a      	mov	sl, r3
 80114b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80114ba:	d807      	bhi.n	80114cc <_printf_i+0x28>
 80114bc:	2f62      	cmp	r7, #98	@ 0x62
 80114be:	d80a      	bhi.n	80114d6 <_printf_i+0x32>
 80114c0:	2f00      	cmp	r7, #0
 80114c2:	f000 80d2 	beq.w	801166a <_printf_i+0x1c6>
 80114c6:	2f58      	cmp	r7, #88	@ 0x58
 80114c8:	f000 80b9 	beq.w	801163e <_printf_i+0x19a>
 80114cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80114d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80114d4:	e03a      	b.n	801154c <_printf_i+0xa8>
 80114d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80114da:	2b15      	cmp	r3, #21
 80114dc:	d8f6      	bhi.n	80114cc <_printf_i+0x28>
 80114de:	a101      	add	r1, pc, #4	@ (adr r1, 80114e4 <_printf_i+0x40>)
 80114e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80114e4:	0801153d 	.word	0x0801153d
 80114e8:	08011551 	.word	0x08011551
 80114ec:	080114cd 	.word	0x080114cd
 80114f0:	080114cd 	.word	0x080114cd
 80114f4:	080114cd 	.word	0x080114cd
 80114f8:	080114cd 	.word	0x080114cd
 80114fc:	08011551 	.word	0x08011551
 8011500:	080114cd 	.word	0x080114cd
 8011504:	080114cd 	.word	0x080114cd
 8011508:	080114cd 	.word	0x080114cd
 801150c:	080114cd 	.word	0x080114cd
 8011510:	08011651 	.word	0x08011651
 8011514:	0801157b 	.word	0x0801157b
 8011518:	0801160b 	.word	0x0801160b
 801151c:	080114cd 	.word	0x080114cd
 8011520:	080114cd 	.word	0x080114cd
 8011524:	08011673 	.word	0x08011673
 8011528:	080114cd 	.word	0x080114cd
 801152c:	0801157b 	.word	0x0801157b
 8011530:	080114cd 	.word	0x080114cd
 8011534:	080114cd 	.word	0x080114cd
 8011538:	08011613 	.word	0x08011613
 801153c:	6833      	ldr	r3, [r6, #0]
 801153e:	1d1a      	adds	r2, r3, #4
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	6032      	str	r2, [r6, #0]
 8011544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011548:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801154c:	2301      	movs	r3, #1
 801154e:	e09d      	b.n	801168c <_printf_i+0x1e8>
 8011550:	6833      	ldr	r3, [r6, #0]
 8011552:	6820      	ldr	r0, [r4, #0]
 8011554:	1d19      	adds	r1, r3, #4
 8011556:	6031      	str	r1, [r6, #0]
 8011558:	0606      	lsls	r6, r0, #24
 801155a:	d501      	bpl.n	8011560 <_printf_i+0xbc>
 801155c:	681d      	ldr	r5, [r3, #0]
 801155e:	e003      	b.n	8011568 <_printf_i+0xc4>
 8011560:	0645      	lsls	r5, r0, #25
 8011562:	d5fb      	bpl.n	801155c <_printf_i+0xb8>
 8011564:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011568:	2d00      	cmp	r5, #0
 801156a:	da03      	bge.n	8011574 <_printf_i+0xd0>
 801156c:	232d      	movs	r3, #45	@ 0x2d
 801156e:	426d      	negs	r5, r5
 8011570:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011574:	4859      	ldr	r0, [pc, #356]	@ (80116dc <_printf_i+0x238>)
 8011576:	230a      	movs	r3, #10
 8011578:	e011      	b.n	801159e <_printf_i+0xfa>
 801157a:	6821      	ldr	r1, [r4, #0]
 801157c:	6833      	ldr	r3, [r6, #0]
 801157e:	0608      	lsls	r0, r1, #24
 8011580:	f853 5b04 	ldr.w	r5, [r3], #4
 8011584:	d402      	bmi.n	801158c <_printf_i+0xe8>
 8011586:	0649      	lsls	r1, r1, #25
 8011588:	bf48      	it	mi
 801158a:	b2ad      	uxthmi	r5, r5
 801158c:	2f6f      	cmp	r7, #111	@ 0x6f
 801158e:	4853      	ldr	r0, [pc, #332]	@ (80116dc <_printf_i+0x238>)
 8011590:	6033      	str	r3, [r6, #0]
 8011592:	bf14      	ite	ne
 8011594:	230a      	movne	r3, #10
 8011596:	2308      	moveq	r3, #8
 8011598:	2100      	movs	r1, #0
 801159a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801159e:	6866      	ldr	r6, [r4, #4]
 80115a0:	60a6      	str	r6, [r4, #8]
 80115a2:	2e00      	cmp	r6, #0
 80115a4:	bfa2      	ittt	ge
 80115a6:	6821      	ldrge	r1, [r4, #0]
 80115a8:	f021 0104 	bicge.w	r1, r1, #4
 80115ac:	6021      	strge	r1, [r4, #0]
 80115ae:	b90d      	cbnz	r5, 80115b4 <_printf_i+0x110>
 80115b0:	2e00      	cmp	r6, #0
 80115b2:	d04b      	beq.n	801164c <_printf_i+0x1a8>
 80115b4:	4616      	mov	r6, r2
 80115b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80115ba:	fb03 5711 	mls	r7, r3, r1, r5
 80115be:	5dc7      	ldrb	r7, [r0, r7]
 80115c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80115c4:	462f      	mov	r7, r5
 80115c6:	42bb      	cmp	r3, r7
 80115c8:	460d      	mov	r5, r1
 80115ca:	d9f4      	bls.n	80115b6 <_printf_i+0x112>
 80115cc:	2b08      	cmp	r3, #8
 80115ce:	d10b      	bne.n	80115e8 <_printf_i+0x144>
 80115d0:	6823      	ldr	r3, [r4, #0]
 80115d2:	07df      	lsls	r7, r3, #31
 80115d4:	d508      	bpl.n	80115e8 <_printf_i+0x144>
 80115d6:	6923      	ldr	r3, [r4, #16]
 80115d8:	6861      	ldr	r1, [r4, #4]
 80115da:	4299      	cmp	r1, r3
 80115dc:	bfde      	ittt	le
 80115de:	2330      	movle	r3, #48	@ 0x30
 80115e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80115e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80115e8:	1b92      	subs	r2, r2, r6
 80115ea:	6122      	str	r2, [r4, #16]
 80115ec:	f8cd a000 	str.w	sl, [sp]
 80115f0:	464b      	mov	r3, r9
 80115f2:	aa03      	add	r2, sp, #12
 80115f4:	4621      	mov	r1, r4
 80115f6:	4640      	mov	r0, r8
 80115f8:	f7ff fee6 	bl	80113c8 <_printf_common>
 80115fc:	3001      	adds	r0, #1
 80115fe:	d14a      	bne.n	8011696 <_printf_i+0x1f2>
 8011600:	f04f 30ff 	mov.w	r0, #4294967295
 8011604:	b004      	add	sp, #16
 8011606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801160a:	6823      	ldr	r3, [r4, #0]
 801160c:	f043 0320 	orr.w	r3, r3, #32
 8011610:	6023      	str	r3, [r4, #0]
 8011612:	4833      	ldr	r0, [pc, #204]	@ (80116e0 <_printf_i+0x23c>)
 8011614:	2778      	movs	r7, #120	@ 0x78
 8011616:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801161a:	6823      	ldr	r3, [r4, #0]
 801161c:	6831      	ldr	r1, [r6, #0]
 801161e:	061f      	lsls	r7, r3, #24
 8011620:	f851 5b04 	ldr.w	r5, [r1], #4
 8011624:	d402      	bmi.n	801162c <_printf_i+0x188>
 8011626:	065f      	lsls	r7, r3, #25
 8011628:	bf48      	it	mi
 801162a:	b2ad      	uxthmi	r5, r5
 801162c:	6031      	str	r1, [r6, #0]
 801162e:	07d9      	lsls	r1, r3, #31
 8011630:	bf44      	itt	mi
 8011632:	f043 0320 	orrmi.w	r3, r3, #32
 8011636:	6023      	strmi	r3, [r4, #0]
 8011638:	b11d      	cbz	r5, 8011642 <_printf_i+0x19e>
 801163a:	2310      	movs	r3, #16
 801163c:	e7ac      	b.n	8011598 <_printf_i+0xf4>
 801163e:	4827      	ldr	r0, [pc, #156]	@ (80116dc <_printf_i+0x238>)
 8011640:	e7e9      	b.n	8011616 <_printf_i+0x172>
 8011642:	6823      	ldr	r3, [r4, #0]
 8011644:	f023 0320 	bic.w	r3, r3, #32
 8011648:	6023      	str	r3, [r4, #0]
 801164a:	e7f6      	b.n	801163a <_printf_i+0x196>
 801164c:	4616      	mov	r6, r2
 801164e:	e7bd      	b.n	80115cc <_printf_i+0x128>
 8011650:	6833      	ldr	r3, [r6, #0]
 8011652:	6825      	ldr	r5, [r4, #0]
 8011654:	6961      	ldr	r1, [r4, #20]
 8011656:	1d18      	adds	r0, r3, #4
 8011658:	6030      	str	r0, [r6, #0]
 801165a:	062e      	lsls	r6, r5, #24
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	d501      	bpl.n	8011664 <_printf_i+0x1c0>
 8011660:	6019      	str	r1, [r3, #0]
 8011662:	e002      	b.n	801166a <_printf_i+0x1c6>
 8011664:	0668      	lsls	r0, r5, #25
 8011666:	d5fb      	bpl.n	8011660 <_printf_i+0x1bc>
 8011668:	8019      	strh	r1, [r3, #0]
 801166a:	2300      	movs	r3, #0
 801166c:	6123      	str	r3, [r4, #16]
 801166e:	4616      	mov	r6, r2
 8011670:	e7bc      	b.n	80115ec <_printf_i+0x148>
 8011672:	6833      	ldr	r3, [r6, #0]
 8011674:	1d1a      	adds	r2, r3, #4
 8011676:	6032      	str	r2, [r6, #0]
 8011678:	681e      	ldr	r6, [r3, #0]
 801167a:	6862      	ldr	r2, [r4, #4]
 801167c:	2100      	movs	r1, #0
 801167e:	4630      	mov	r0, r6
 8011680:	f7ee fdce 	bl	8000220 <memchr>
 8011684:	b108      	cbz	r0, 801168a <_printf_i+0x1e6>
 8011686:	1b80      	subs	r0, r0, r6
 8011688:	6060      	str	r0, [r4, #4]
 801168a:	6863      	ldr	r3, [r4, #4]
 801168c:	6123      	str	r3, [r4, #16]
 801168e:	2300      	movs	r3, #0
 8011690:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011694:	e7aa      	b.n	80115ec <_printf_i+0x148>
 8011696:	6923      	ldr	r3, [r4, #16]
 8011698:	4632      	mov	r2, r6
 801169a:	4649      	mov	r1, r9
 801169c:	4640      	mov	r0, r8
 801169e:	47d0      	blx	sl
 80116a0:	3001      	adds	r0, #1
 80116a2:	d0ad      	beq.n	8011600 <_printf_i+0x15c>
 80116a4:	6823      	ldr	r3, [r4, #0]
 80116a6:	079b      	lsls	r3, r3, #30
 80116a8:	d413      	bmi.n	80116d2 <_printf_i+0x22e>
 80116aa:	68e0      	ldr	r0, [r4, #12]
 80116ac:	9b03      	ldr	r3, [sp, #12]
 80116ae:	4298      	cmp	r0, r3
 80116b0:	bfb8      	it	lt
 80116b2:	4618      	movlt	r0, r3
 80116b4:	e7a6      	b.n	8011604 <_printf_i+0x160>
 80116b6:	2301      	movs	r3, #1
 80116b8:	4632      	mov	r2, r6
 80116ba:	4649      	mov	r1, r9
 80116bc:	4640      	mov	r0, r8
 80116be:	47d0      	blx	sl
 80116c0:	3001      	adds	r0, #1
 80116c2:	d09d      	beq.n	8011600 <_printf_i+0x15c>
 80116c4:	3501      	adds	r5, #1
 80116c6:	68e3      	ldr	r3, [r4, #12]
 80116c8:	9903      	ldr	r1, [sp, #12]
 80116ca:	1a5b      	subs	r3, r3, r1
 80116cc:	42ab      	cmp	r3, r5
 80116ce:	dcf2      	bgt.n	80116b6 <_printf_i+0x212>
 80116d0:	e7eb      	b.n	80116aa <_printf_i+0x206>
 80116d2:	2500      	movs	r5, #0
 80116d4:	f104 0619 	add.w	r6, r4, #25
 80116d8:	e7f5      	b.n	80116c6 <_printf_i+0x222>
 80116da:	bf00      	nop
 80116dc:	08017038 	.word	0x08017038
 80116e0:	08017049 	.word	0x08017049

080116e4 <_scanf_float>:
 80116e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116e8:	b087      	sub	sp, #28
 80116ea:	4617      	mov	r7, r2
 80116ec:	9303      	str	r3, [sp, #12]
 80116ee:	688b      	ldr	r3, [r1, #8]
 80116f0:	1e5a      	subs	r2, r3, #1
 80116f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80116f6:	bf81      	itttt	hi
 80116f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80116fc:	eb03 0b05 	addhi.w	fp, r3, r5
 8011700:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011704:	608b      	strhi	r3, [r1, #8]
 8011706:	680b      	ldr	r3, [r1, #0]
 8011708:	460a      	mov	r2, r1
 801170a:	f04f 0500 	mov.w	r5, #0
 801170e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8011712:	f842 3b1c 	str.w	r3, [r2], #28
 8011716:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801171a:	4680      	mov	r8, r0
 801171c:	460c      	mov	r4, r1
 801171e:	bf98      	it	ls
 8011720:	f04f 0b00 	movls.w	fp, #0
 8011724:	9201      	str	r2, [sp, #4]
 8011726:	4616      	mov	r6, r2
 8011728:	46aa      	mov	sl, r5
 801172a:	46a9      	mov	r9, r5
 801172c:	9502      	str	r5, [sp, #8]
 801172e:	68a2      	ldr	r2, [r4, #8]
 8011730:	b152      	cbz	r2, 8011748 <_scanf_float+0x64>
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	781b      	ldrb	r3, [r3, #0]
 8011736:	2b4e      	cmp	r3, #78	@ 0x4e
 8011738:	d864      	bhi.n	8011804 <_scanf_float+0x120>
 801173a:	2b40      	cmp	r3, #64	@ 0x40
 801173c:	d83c      	bhi.n	80117b8 <_scanf_float+0xd4>
 801173e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8011742:	b2c8      	uxtb	r0, r1
 8011744:	280e      	cmp	r0, #14
 8011746:	d93a      	bls.n	80117be <_scanf_float+0xda>
 8011748:	f1b9 0f00 	cmp.w	r9, #0
 801174c:	d003      	beq.n	8011756 <_scanf_float+0x72>
 801174e:	6823      	ldr	r3, [r4, #0]
 8011750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011754:	6023      	str	r3, [r4, #0]
 8011756:	f10a 3aff 	add.w	sl, sl, #4294967295
 801175a:	f1ba 0f01 	cmp.w	sl, #1
 801175e:	f200 8117 	bhi.w	8011990 <_scanf_float+0x2ac>
 8011762:	9b01      	ldr	r3, [sp, #4]
 8011764:	429e      	cmp	r6, r3
 8011766:	f200 8108 	bhi.w	801197a <_scanf_float+0x296>
 801176a:	2001      	movs	r0, #1
 801176c:	b007      	add	sp, #28
 801176e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011772:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8011776:	2a0d      	cmp	r2, #13
 8011778:	d8e6      	bhi.n	8011748 <_scanf_float+0x64>
 801177a:	a101      	add	r1, pc, #4	@ (adr r1, 8011780 <_scanf_float+0x9c>)
 801177c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011780:	080118c7 	.word	0x080118c7
 8011784:	08011749 	.word	0x08011749
 8011788:	08011749 	.word	0x08011749
 801178c:	08011749 	.word	0x08011749
 8011790:	08011927 	.word	0x08011927
 8011794:	080118ff 	.word	0x080118ff
 8011798:	08011749 	.word	0x08011749
 801179c:	08011749 	.word	0x08011749
 80117a0:	080118d5 	.word	0x080118d5
 80117a4:	08011749 	.word	0x08011749
 80117a8:	08011749 	.word	0x08011749
 80117ac:	08011749 	.word	0x08011749
 80117b0:	08011749 	.word	0x08011749
 80117b4:	0801188d 	.word	0x0801188d
 80117b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80117bc:	e7db      	b.n	8011776 <_scanf_float+0x92>
 80117be:	290e      	cmp	r1, #14
 80117c0:	d8c2      	bhi.n	8011748 <_scanf_float+0x64>
 80117c2:	a001      	add	r0, pc, #4	@ (adr r0, 80117c8 <_scanf_float+0xe4>)
 80117c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80117c8:	0801187d 	.word	0x0801187d
 80117cc:	08011749 	.word	0x08011749
 80117d0:	0801187d 	.word	0x0801187d
 80117d4:	08011913 	.word	0x08011913
 80117d8:	08011749 	.word	0x08011749
 80117dc:	08011825 	.word	0x08011825
 80117e0:	08011863 	.word	0x08011863
 80117e4:	08011863 	.word	0x08011863
 80117e8:	08011863 	.word	0x08011863
 80117ec:	08011863 	.word	0x08011863
 80117f0:	08011863 	.word	0x08011863
 80117f4:	08011863 	.word	0x08011863
 80117f8:	08011863 	.word	0x08011863
 80117fc:	08011863 	.word	0x08011863
 8011800:	08011863 	.word	0x08011863
 8011804:	2b6e      	cmp	r3, #110	@ 0x6e
 8011806:	d809      	bhi.n	801181c <_scanf_float+0x138>
 8011808:	2b60      	cmp	r3, #96	@ 0x60
 801180a:	d8b2      	bhi.n	8011772 <_scanf_float+0x8e>
 801180c:	2b54      	cmp	r3, #84	@ 0x54
 801180e:	d07b      	beq.n	8011908 <_scanf_float+0x224>
 8011810:	2b59      	cmp	r3, #89	@ 0x59
 8011812:	d199      	bne.n	8011748 <_scanf_float+0x64>
 8011814:	2d07      	cmp	r5, #7
 8011816:	d197      	bne.n	8011748 <_scanf_float+0x64>
 8011818:	2508      	movs	r5, #8
 801181a:	e02c      	b.n	8011876 <_scanf_float+0x192>
 801181c:	2b74      	cmp	r3, #116	@ 0x74
 801181e:	d073      	beq.n	8011908 <_scanf_float+0x224>
 8011820:	2b79      	cmp	r3, #121	@ 0x79
 8011822:	e7f6      	b.n	8011812 <_scanf_float+0x12e>
 8011824:	6821      	ldr	r1, [r4, #0]
 8011826:	05c8      	lsls	r0, r1, #23
 8011828:	d51b      	bpl.n	8011862 <_scanf_float+0x17e>
 801182a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801182e:	6021      	str	r1, [r4, #0]
 8011830:	f109 0901 	add.w	r9, r9, #1
 8011834:	f1bb 0f00 	cmp.w	fp, #0
 8011838:	d003      	beq.n	8011842 <_scanf_float+0x15e>
 801183a:	3201      	adds	r2, #1
 801183c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011840:	60a2      	str	r2, [r4, #8]
 8011842:	68a3      	ldr	r3, [r4, #8]
 8011844:	3b01      	subs	r3, #1
 8011846:	60a3      	str	r3, [r4, #8]
 8011848:	6923      	ldr	r3, [r4, #16]
 801184a:	3301      	adds	r3, #1
 801184c:	6123      	str	r3, [r4, #16]
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	3b01      	subs	r3, #1
 8011852:	2b00      	cmp	r3, #0
 8011854:	607b      	str	r3, [r7, #4]
 8011856:	f340 8087 	ble.w	8011968 <_scanf_float+0x284>
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	3301      	adds	r3, #1
 801185e:	603b      	str	r3, [r7, #0]
 8011860:	e765      	b.n	801172e <_scanf_float+0x4a>
 8011862:	eb1a 0105 	adds.w	r1, sl, r5
 8011866:	f47f af6f 	bne.w	8011748 <_scanf_float+0x64>
 801186a:	6822      	ldr	r2, [r4, #0]
 801186c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8011870:	6022      	str	r2, [r4, #0]
 8011872:	460d      	mov	r5, r1
 8011874:	468a      	mov	sl, r1
 8011876:	f806 3b01 	strb.w	r3, [r6], #1
 801187a:	e7e2      	b.n	8011842 <_scanf_float+0x15e>
 801187c:	6822      	ldr	r2, [r4, #0]
 801187e:	0610      	lsls	r0, r2, #24
 8011880:	f57f af62 	bpl.w	8011748 <_scanf_float+0x64>
 8011884:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011888:	6022      	str	r2, [r4, #0]
 801188a:	e7f4      	b.n	8011876 <_scanf_float+0x192>
 801188c:	f1ba 0f00 	cmp.w	sl, #0
 8011890:	d10e      	bne.n	80118b0 <_scanf_float+0x1cc>
 8011892:	f1b9 0f00 	cmp.w	r9, #0
 8011896:	d10e      	bne.n	80118b6 <_scanf_float+0x1d2>
 8011898:	6822      	ldr	r2, [r4, #0]
 801189a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801189e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80118a2:	d108      	bne.n	80118b6 <_scanf_float+0x1d2>
 80118a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80118a8:	6022      	str	r2, [r4, #0]
 80118aa:	f04f 0a01 	mov.w	sl, #1
 80118ae:	e7e2      	b.n	8011876 <_scanf_float+0x192>
 80118b0:	f1ba 0f02 	cmp.w	sl, #2
 80118b4:	d055      	beq.n	8011962 <_scanf_float+0x27e>
 80118b6:	2d01      	cmp	r5, #1
 80118b8:	d002      	beq.n	80118c0 <_scanf_float+0x1dc>
 80118ba:	2d04      	cmp	r5, #4
 80118bc:	f47f af44 	bne.w	8011748 <_scanf_float+0x64>
 80118c0:	3501      	adds	r5, #1
 80118c2:	b2ed      	uxtb	r5, r5
 80118c4:	e7d7      	b.n	8011876 <_scanf_float+0x192>
 80118c6:	f1ba 0f01 	cmp.w	sl, #1
 80118ca:	f47f af3d 	bne.w	8011748 <_scanf_float+0x64>
 80118ce:	f04f 0a02 	mov.w	sl, #2
 80118d2:	e7d0      	b.n	8011876 <_scanf_float+0x192>
 80118d4:	b97d      	cbnz	r5, 80118f6 <_scanf_float+0x212>
 80118d6:	f1b9 0f00 	cmp.w	r9, #0
 80118da:	f47f af38 	bne.w	801174e <_scanf_float+0x6a>
 80118de:	6822      	ldr	r2, [r4, #0]
 80118e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80118e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80118e8:	f040 8108 	bne.w	8011afc <_scanf_float+0x418>
 80118ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80118f0:	6022      	str	r2, [r4, #0]
 80118f2:	2501      	movs	r5, #1
 80118f4:	e7bf      	b.n	8011876 <_scanf_float+0x192>
 80118f6:	2d03      	cmp	r5, #3
 80118f8:	d0e2      	beq.n	80118c0 <_scanf_float+0x1dc>
 80118fa:	2d05      	cmp	r5, #5
 80118fc:	e7de      	b.n	80118bc <_scanf_float+0x1d8>
 80118fe:	2d02      	cmp	r5, #2
 8011900:	f47f af22 	bne.w	8011748 <_scanf_float+0x64>
 8011904:	2503      	movs	r5, #3
 8011906:	e7b6      	b.n	8011876 <_scanf_float+0x192>
 8011908:	2d06      	cmp	r5, #6
 801190a:	f47f af1d 	bne.w	8011748 <_scanf_float+0x64>
 801190e:	2507      	movs	r5, #7
 8011910:	e7b1      	b.n	8011876 <_scanf_float+0x192>
 8011912:	6822      	ldr	r2, [r4, #0]
 8011914:	0591      	lsls	r1, r2, #22
 8011916:	f57f af17 	bpl.w	8011748 <_scanf_float+0x64>
 801191a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801191e:	6022      	str	r2, [r4, #0]
 8011920:	f8cd 9008 	str.w	r9, [sp, #8]
 8011924:	e7a7      	b.n	8011876 <_scanf_float+0x192>
 8011926:	6822      	ldr	r2, [r4, #0]
 8011928:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801192c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011930:	d006      	beq.n	8011940 <_scanf_float+0x25c>
 8011932:	0550      	lsls	r0, r2, #21
 8011934:	f57f af08 	bpl.w	8011748 <_scanf_float+0x64>
 8011938:	f1b9 0f00 	cmp.w	r9, #0
 801193c:	f000 80de 	beq.w	8011afc <_scanf_float+0x418>
 8011940:	0591      	lsls	r1, r2, #22
 8011942:	bf58      	it	pl
 8011944:	9902      	ldrpl	r1, [sp, #8]
 8011946:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801194a:	bf58      	it	pl
 801194c:	eba9 0101 	subpl.w	r1, r9, r1
 8011950:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8011954:	bf58      	it	pl
 8011956:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801195a:	6022      	str	r2, [r4, #0]
 801195c:	f04f 0900 	mov.w	r9, #0
 8011960:	e789      	b.n	8011876 <_scanf_float+0x192>
 8011962:	f04f 0a03 	mov.w	sl, #3
 8011966:	e786      	b.n	8011876 <_scanf_float+0x192>
 8011968:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801196c:	4639      	mov	r1, r7
 801196e:	4640      	mov	r0, r8
 8011970:	4798      	blx	r3
 8011972:	2800      	cmp	r0, #0
 8011974:	f43f aedb 	beq.w	801172e <_scanf_float+0x4a>
 8011978:	e6e6      	b.n	8011748 <_scanf_float+0x64>
 801197a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801197e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011982:	463a      	mov	r2, r7
 8011984:	4640      	mov	r0, r8
 8011986:	4798      	blx	r3
 8011988:	6923      	ldr	r3, [r4, #16]
 801198a:	3b01      	subs	r3, #1
 801198c:	6123      	str	r3, [r4, #16]
 801198e:	e6e8      	b.n	8011762 <_scanf_float+0x7e>
 8011990:	1e6b      	subs	r3, r5, #1
 8011992:	2b06      	cmp	r3, #6
 8011994:	d824      	bhi.n	80119e0 <_scanf_float+0x2fc>
 8011996:	2d02      	cmp	r5, #2
 8011998:	d836      	bhi.n	8011a08 <_scanf_float+0x324>
 801199a:	9b01      	ldr	r3, [sp, #4]
 801199c:	429e      	cmp	r6, r3
 801199e:	f67f aee4 	bls.w	801176a <_scanf_float+0x86>
 80119a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80119a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80119aa:	463a      	mov	r2, r7
 80119ac:	4640      	mov	r0, r8
 80119ae:	4798      	blx	r3
 80119b0:	6923      	ldr	r3, [r4, #16]
 80119b2:	3b01      	subs	r3, #1
 80119b4:	6123      	str	r3, [r4, #16]
 80119b6:	e7f0      	b.n	801199a <_scanf_float+0x2b6>
 80119b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80119bc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80119c0:	463a      	mov	r2, r7
 80119c2:	4640      	mov	r0, r8
 80119c4:	4798      	blx	r3
 80119c6:	6923      	ldr	r3, [r4, #16]
 80119c8:	3b01      	subs	r3, #1
 80119ca:	6123      	str	r3, [r4, #16]
 80119cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80119d0:	fa5f fa8a 	uxtb.w	sl, sl
 80119d4:	f1ba 0f02 	cmp.w	sl, #2
 80119d8:	d1ee      	bne.n	80119b8 <_scanf_float+0x2d4>
 80119da:	3d03      	subs	r5, #3
 80119dc:	b2ed      	uxtb	r5, r5
 80119de:	1b76      	subs	r6, r6, r5
 80119e0:	6823      	ldr	r3, [r4, #0]
 80119e2:	05da      	lsls	r2, r3, #23
 80119e4:	d530      	bpl.n	8011a48 <_scanf_float+0x364>
 80119e6:	055b      	lsls	r3, r3, #21
 80119e8:	d511      	bpl.n	8011a0e <_scanf_float+0x32a>
 80119ea:	9b01      	ldr	r3, [sp, #4]
 80119ec:	429e      	cmp	r6, r3
 80119ee:	f67f aebc 	bls.w	801176a <_scanf_float+0x86>
 80119f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80119f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80119fa:	463a      	mov	r2, r7
 80119fc:	4640      	mov	r0, r8
 80119fe:	4798      	blx	r3
 8011a00:	6923      	ldr	r3, [r4, #16]
 8011a02:	3b01      	subs	r3, #1
 8011a04:	6123      	str	r3, [r4, #16]
 8011a06:	e7f0      	b.n	80119ea <_scanf_float+0x306>
 8011a08:	46aa      	mov	sl, r5
 8011a0a:	46b3      	mov	fp, r6
 8011a0c:	e7de      	b.n	80119cc <_scanf_float+0x2e8>
 8011a0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011a12:	6923      	ldr	r3, [r4, #16]
 8011a14:	2965      	cmp	r1, #101	@ 0x65
 8011a16:	f103 33ff 	add.w	r3, r3, #4294967295
 8011a1a:	f106 35ff 	add.w	r5, r6, #4294967295
 8011a1e:	6123      	str	r3, [r4, #16]
 8011a20:	d00c      	beq.n	8011a3c <_scanf_float+0x358>
 8011a22:	2945      	cmp	r1, #69	@ 0x45
 8011a24:	d00a      	beq.n	8011a3c <_scanf_float+0x358>
 8011a26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011a2a:	463a      	mov	r2, r7
 8011a2c:	4640      	mov	r0, r8
 8011a2e:	4798      	blx	r3
 8011a30:	6923      	ldr	r3, [r4, #16]
 8011a32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011a36:	3b01      	subs	r3, #1
 8011a38:	1eb5      	subs	r5, r6, #2
 8011a3a:	6123      	str	r3, [r4, #16]
 8011a3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011a40:	463a      	mov	r2, r7
 8011a42:	4640      	mov	r0, r8
 8011a44:	4798      	blx	r3
 8011a46:	462e      	mov	r6, r5
 8011a48:	6822      	ldr	r2, [r4, #0]
 8011a4a:	f012 0210 	ands.w	r2, r2, #16
 8011a4e:	d001      	beq.n	8011a54 <_scanf_float+0x370>
 8011a50:	2000      	movs	r0, #0
 8011a52:	e68b      	b.n	801176c <_scanf_float+0x88>
 8011a54:	7032      	strb	r2, [r6, #0]
 8011a56:	6823      	ldr	r3, [r4, #0]
 8011a58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8011a5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011a60:	d11c      	bne.n	8011a9c <_scanf_float+0x3b8>
 8011a62:	9b02      	ldr	r3, [sp, #8]
 8011a64:	454b      	cmp	r3, r9
 8011a66:	eba3 0209 	sub.w	r2, r3, r9
 8011a6a:	d123      	bne.n	8011ab4 <_scanf_float+0x3d0>
 8011a6c:	9901      	ldr	r1, [sp, #4]
 8011a6e:	2200      	movs	r2, #0
 8011a70:	4640      	mov	r0, r8
 8011a72:	f002 fc45 	bl	8014300 <_strtod_r>
 8011a76:	9b03      	ldr	r3, [sp, #12]
 8011a78:	6821      	ldr	r1, [r4, #0]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	f011 0f02 	tst.w	r1, #2
 8011a80:	ec57 6b10 	vmov	r6, r7, d0
 8011a84:	f103 0204 	add.w	r2, r3, #4
 8011a88:	d01f      	beq.n	8011aca <_scanf_float+0x3e6>
 8011a8a:	9903      	ldr	r1, [sp, #12]
 8011a8c:	600a      	str	r2, [r1, #0]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	e9c3 6700 	strd	r6, r7, [r3]
 8011a94:	68e3      	ldr	r3, [r4, #12]
 8011a96:	3301      	adds	r3, #1
 8011a98:	60e3      	str	r3, [r4, #12]
 8011a9a:	e7d9      	b.n	8011a50 <_scanf_float+0x36c>
 8011a9c:	9b04      	ldr	r3, [sp, #16]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d0e4      	beq.n	8011a6c <_scanf_float+0x388>
 8011aa2:	9905      	ldr	r1, [sp, #20]
 8011aa4:	230a      	movs	r3, #10
 8011aa6:	3101      	adds	r1, #1
 8011aa8:	4640      	mov	r0, r8
 8011aaa:	f002 fca9 	bl	8014400 <_strtol_r>
 8011aae:	9b04      	ldr	r3, [sp, #16]
 8011ab0:	9e05      	ldr	r6, [sp, #20]
 8011ab2:	1ac2      	subs	r2, r0, r3
 8011ab4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8011ab8:	429e      	cmp	r6, r3
 8011aba:	bf28      	it	cs
 8011abc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011ac0:	4910      	ldr	r1, [pc, #64]	@ (8011b04 <_scanf_float+0x420>)
 8011ac2:	4630      	mov	r0, r6
 8011ac4:	f000 f8e4 	bl	8011c90 <siprintf>
 8011ac8:	e7d0      	b.n	8011a6c <_scanf_float+0x388>
 8011aca:	f011 0f04 	tst.w	r1, #4
 8011ace:	9903      	ldr	r1, [sp, #12]
 8011ad0:	600a      	str	r2, [r1, #0]
 8011ad2:	d1dc      	bne.n	8011a8e <_scanf_float+0x3aa>
 8011ad4:	681d      	ldr	r5, [r3, #0]
 8011ad6:	4632      	mov	r2, r6
 8011ad8:	463b      	mov	r3, r7
 8011ada:	4630      	mov	r0, r6
 8011adc:	4639      	mov	r1, r7
 8011ade:	f7ef f84d 	bl	8000b7c <__aeabi_dcmpun>
 8011ae2:	b128      	cbz	r0, 8011af0 <_scanf_float+0x40c>
 8011ae4:	4808      	ldr	r0, [pc, #32]	@ (8011b08 <_scanf_float+0x424>)
 8011ae6:	f000 fa03 	bl	8011ef0 <nanf>
 8011aea:	ed85 0a00 	vstr	s0, [r5]
 8011aee:	e7d1      	b.n	8011a94 <_scanf_float+0x3b0>
 8011af0:	4630      	mov	r0, r6
 8011af2:	4639      	mov	r1, r7
 8011af4:	f7ef f8a0 	bl	8000c38 <__aeabi_d2f>
 8011af8:	6028      	str	r0, [r5, #0]
 8011afa:	e7cb      	b.n	8011a94 <_scanf_float+0x3b0>
 8011afc:	f04f 0900 	mov.w	r9, #0
 8011b00:	e629      	b.n	8011756 <_scanf_float+0x72>
 8011b02:	bf00      	nop
 8011b04:	0801705a 	.word	0x0801705a
 8011b08:	08017410 	.word	0x08017410

08011b0c <std>:
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	b510      	push	{r4, lr}
 8011b10:	4604      	mov	r4, r0
 8011b12:	e9c0 3300 	strd	r3, r3, [r0]
 8011b16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b1a:	6083      	str	r3, [r0, #8]
 8011b1c:	8181      	strh	r1, [r0, #12]
 8011b1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011b20:	81c2      	strh	r2, [r0, #14]
 8011b22:	6183      	str	r3, [r0, #24]
 8011b24:	4619      	mov	r1, r3
 8011b26:	2208      	movs	r2, #8
 8011b28:	305c      	adds	r0, #92	@ 0x5c
 8011b2a:	f000 f940 	bl	8011dae <memset>
 8011b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8011b64 <std+0x58>)
 8011b30:	6263      	str	r3, [r4, #36]	@ 0x24
 8011b32:	4b0d      	ldr	r3, [pc, #52]	@ (8011b68 <std+0x5c>)
 8011b34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011b36:	4b0d      	ldr	r3, [pc, #52]	@ (8011b6c <std+0x60>)
 8011b38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8011b70 <std+0x64>)
 8011b3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8011b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8011b74 <std+0x68>)
 8011b40:	6224      	str	r4, [r4, #32]
 8011b42:	429c      	cmp	r4, r3
 8011b44:	d006      	beq.n	8011b54 <std+0x48>
 8011b46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011b4a:	4294      	cmp	r4, r2
 8011b4c:	d002      	beq.n	8011b54 <std+0x48>
 8011b4e:	33d0      	adds	r3, #208	@ 0xd0
 8011b50:	429c      	cmp	r4, r3
 8011b52:	d105      	bne.n	8011b60 <std+0x54>
 8011b54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b5c:	f000 b9b6 	b.w	8011ecc <__retarget_lock_init_recursive>
 8011b60:	bd10      	pop	{r4, pc}
 8011b62:	bf00      	nop
 8011b64:	08011d25 	.word	0x08011d25
 8011b68:	08011d4b 	.word	0x08011d4b
 8011b6c:	08011d83 	.word	0x08011d83
 8011b70:	08011da7 	.word	0x08011da7
 8011b74:	2000258c 	.word	0x2000258c

08011b78 <stdio_exit_handler>:
 8011b78:	4a02      	ldr	r2, [pc, #8]	@ (8011b84 <stdio_exit_handler+0xc>)
 8011b7a:	4903      	ldr	r1, [pc, #12]	@ (8011b88 <stdio_exit_handler+0x10>)
 8011b7c:	4803      	ldr	r0, [pc, #12]	@ (8011b8c <stdio_exit_handler+0x14>)
 8011b7e:	f000 b869 	b.w	8011c54 <_fwalk_sglue>
 8011b82:	bf00      	nop
 8011b84:	200001d8 	.word	0x200001d8
 8011b88:	08014df1 	.word	0x08014df1
 8011b8c:	200001e8 	.word	0x200001e8

08011b90 <cleanup_stdio>:
 8011b90:	6841      	ldr	r1, [r0, #4]
 8011b92:	4b0c      	ldr	r3, [pc, #48]	@ (8011bc4 <cleanup_stdio+0x34>)
 8011b94:	4299      	cmp	r1, r3
 8011b96:	b510      	push	{r4, lr}
 8011b98:	4604      	mov	r4, r0
 8011b9a:	d001      	beq.n	8011ba0 <cleanup_stdio+0x10>
 8011b9c:	f003 f928 	bl	8014df0 <_fflush_r>
 8011ba0:	68a1      	ldr	r1, [r4, #8]
 8011ba2:	4b09      	ldr	r3, [pc, #36]	@ (8011bc8 <cleanup_stdio+0x38>)
 8011ba4:	4299      	cmp	r1, r3
 8011ba6:	d002      	beq.n	8011bae <cleanup_stdio+0x1e>
 8011ba8:	4620      	mov	r0, r4
 8011baa:	f003 f921 	bl	8014df0 <_fflush_r>
 8011bae:	68e1      	ldr	r1, [r4, #12]
 8011bb0:	4b06      	ldr	r3, [pc, #24]	@ (8011bcc <cleanup_stdio+0x3c>)
 8011bb2:	4299      	cmp	r1, r3
 8011bb4:	d004      	beq.n	8011bc0 <cleanup_stdio+0x30>
 8011bb6:	4620      	mov	r0, r4
 8011bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bbc:	f003 b918 	b.w	8014df0 <_fflush_r>
 8011bc0:	bd10      	pop	{r4, pc}
 8011bc2:	bf00      	nop
 8011bc4:	2000258c 	.word	0x2000258c
 8011bc8:	200025f4 	.word	0x200025f4
 8011bcc:	2000265c 	.word	0x2000265c

08011bd0 <global_stdio_init.part.0>:
 8011bd0:	b510      	push	{r4, lr}
 8011bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8011c00 <global_stdio_init.part.0+0x30>)
 8011bd4:	4c0b      	ldr	r4, [pc, #44]	@ (8011c04 <global_stdio_init.part.0+0x34>)
 8011bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8011c08 <global_stdio_init.part.0+0x38>)
 8011bd8:	601a      	str	r2, [r3, #0]
 8011bda:	4620      	mov	r0, r4
 8011bdc:	2200      	movs	r2, #0
 8011bde:	2104      	movs	r1, #4
 8011be0:	f7ff ff94 	bl	8011b0c <std>
 8011be4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011be8:	2201      	movs	r2, #1
 8011bea:	2109      	movs	r1, #9
 8011bec:	f7ff ff8e 	bl	8011b0c <std>
 8011bf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011bf4:	2202      	movs	r2, #2
 8011bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bfa:	2112      	movs	r1, #18
 8011bfc:	f7ff bf86 	b.w	8011b0c <std>
 8011c00:	200026c4 	.word	0x200026c4
 8011c04:	2000258c 	.word	0x2000258c
 8011c08:	08011b79 	.word	0x08011b79

08011c0c <__sfp_lock_acquire>:
 8011c0c:	4801      	ldr	r0, [pc, #4]	@ (8011c14 <__sfp_lock_acquire+0x8>)
 8011c0e:	f000 b95e 	b.w	8011ece <__retarget_lock_acquire_recursive>
 8011c12:	bf00      	nop
 8011c14:	200026cd 	.word	0x200026cd

08011c18 <__sfp_lock_release>:
 8011c18:	4801      	ldr	r0, [pc, #4]	@ (8011c20 <__sfp_lock_release+0x8>)
 8011c1a:	f000 b959 	b.w	8011ed0 <__retarget_lock_release_recursive>
 8011c1e:	bf00      	nop
 8011c20:	200026cd 	.word	0x200026cd

08011c24 <__sinit>:
 8011c24:	b510      	push	{r4, lr}
 8011c26:	4604      	mov	r4, r0
 8011c28:	f7ff fff0 	bl	8011c0c <__sfp_lock_acquire>
 8011c2c:	6a23      	ldr	r3, [r4, #32]
 8011c2e:	b11b      	cbz	r3, 8011c38 <__sinit+0x14>
 8011c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c34:	f7ff bff0 	b.w	8011c18 <__sfp_lock_release>
 8011c38:	4b04      	ldr	r3, [pc, #16]	@ (8011c4c <__sinit+0x28>)
 8011c3a:	6223      	str	r3, [r4, #32]
 8011c3c:	4b04      	ldr	r3, [pc, #16]	@ (8011c50 <__sinit+0x2c>)
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d1f5      	bne.n	8011c30 <__sinit+0xc>
 8011c44:	f7ff ffc4 	bl	8011bd0 <global_stdio_init.part.0>
 8011c48:	e7f2      	b.n	8011c30 <__sinit+0xc>
 8011c4a:	bf00      	nop
 8011c4c:	08011b91 	.word	0x08011b91
 8011c50:	200026c4 	.word	0x200026c4

08011c54 <_fwalk_sglue>:
 8011c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c58:	4607      	mov	r7, r0
 8011c5a:	4688      	mov	r8, r1
 8011c5c:	4614      	mov	r4, r2
 8011c5e:	2600      	movs	r6, #0
 8011c60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011c64:	f1b9 0901 	subs.w	r9, r9, #1
 8011c68:	d505      	bpl.n	8011c76 <_fwalk_sglue+0x22>
 8011c6a:	6824      	ldr	r4, [r4, #0]
 8011c6c:	2c00      	cmp	r4, #0
 8011c6e:	d1f7      	bne.n	8011c60 <_fwalk_sglue+0xc>
 8011c70:	4630      	mov	r0, r6
 8011c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c76:	89ab      	ldrh	r3, [r5, #12]
 8011c78:	2b01      	cmp	r3, #1
 8011c7a:	d907      	bls.n	8011c8c <_fwalk_sglue+0x38>
 8011c7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011c80:	3301      	adds	r3, #1
 8011c82:	d003      	beq.n	8011c8c <_fwalk_sglue+0x38>
 8011c84:	4629      	mov	r1, r5
 8011c86:	4638      	mov	r0, r7
 8011c88:	47c0      	blx	r8
 8011c8a:	4306      	orrs	r6, r0
 8011c8c:	3568      	adds	r5, #104	@ 0x68
 8011c8e:	e7e9      	b.n	8011c64 <_fwalk_sglue+0x10>

08011c90 <siprintf>:
 8011c90:	b40e      	push	{r1, r2, r3}
 8011c92:	b500      	push	{lr}
 8011c94:	b09c      	sub	sp, #112	@ 0x70
 8011c96:	ab1d      	add	r3, sp, #116	@ 0x74
 8011c98:	9002      	str	r0, [sp, #8]
 8011c9a:	9006      	str	r0, [sp, #24]
 8011c9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011ca0:	4809      	ldr	r0, [pc, #36]	@ (8011cc8 <siprintf+0x38>)
 8011ca2:	9107      	str	r1, [sp, #28]
 8011ca4:	9104      	str	r1, [sp, #16]
 8011ca6:	4909      	ldr	r1, [pc, #36]	@ (8011ccc <siprintf+0x3c>)
 8011ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cac:	9105      	str	r1, [sp, #20]
 8011cae:	6800      	ldr	r0, [r0, #0]
 8011cb0:	9301      	str	r3, [sp, #4]
 8011cb2:	a902      	add	r1, sp, #8
 8011cb4:	f002 fc02 	bl	80144bc <_svfiprintf_r>
 8011cb8:	9b02      	ldr	r3, [sp, #8]
 8011cba:	2200      	movs	r2, #0
 8011cbc:	701a      	strb	r2, [r3, #0]
 8011cbe:	b01c      	add	sp, #112	@ 0x70
 8011cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011cc4:	b003      	add	sp, #12
 8011cc6:	4770      	bx	lr
 8011cc8:	200001e4 	.word	0x200001e4
 8011ccc:	ffff0208 	.word	0xffff0208

08011cd0 <siscanf>:
 8011cd0:	b40e      	push	{r1, r2, r3}
 8011cd2:	b530      	push	{r4, r5, lr}
 8011cd4:	b09c      	sub	sp, #112	@ 0x70
 8011cd6:	ac1f      	add	r4, sp, #124	@ 0x7c
 8011cd8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011cdc:	f854 5b04 	ldr.w	r5, [r4], #4
 8011ce0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011ce4:	9002      	str	r0, [sp, #8]
 8011ce6:	9006      	str	r0, [sp, #24]
 8011ce8:	f7ee faea 	bl	80002c0 <strlen>
 8011cec:	4b0b      	ldr	r3, [pc, #44]	@ (8011d1c <siscanf+0x4c>)
 8011cee:	9003      	str	r0, [sp, #12]
 8011cf0:	9007      	str	r0, [sp, #28]
 8011cf2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011cf4:	480a      	ldr	r0, [pc, #40]	@ (8011d20 <siscanf+0x50>)
 8011cf6:	9401      	str	r4, [sp, #4]
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011cfc:	9314      	str	r3, [sp, #80]	@ 0x50
 8011cfe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011d02:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011d06:	462a      	mov	r2, r5
 8011d08:	4623      	mov	r3, r4
 8011d0a:	a902      	add	r1, sp, #8
 8011d0c:	6800      	ldr	r0, [r0, #0]
 8011d0e:	f002 fd29 	bl	8014764 <__ssvfiscanf_r>
 8011d12:	b01c      	add	sp, #112	@ 0x70
 8011d14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d18:	b003      	add	sp, #12
 8011d1a:	4770      	bx	lr
 8011d1c:	08011d47 	.word	0x08011d47
 8011d20:	200001e4 	.word	0x200001e4

08011d24 <__sread>:
 8011d24:	b510      	push	{r4, lr}
 8011d26:	460c      	mov	r4, r1
 8011d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d2c:	f000 f880 	bl	8011e30 <_read_r>
 8011d30:	2800      	cmp	r0, #0
 8011d32:	bfab      	itete	ge
 8011d34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011d36:	89a3      	ldrhlt	r3, [r4, #12]
 8011d38:	181b      	addge	r3, r3, r0
 8011d3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011d3e:	bfac      	ite	ge
 8011d40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011d42:	81a3      	strhlt	r3, [r4, #12]
 8011d44:	bd10      	pop	{r4, pc}

08011d46 <__seofread>:
 8011d46:	2000      	movs	r0, #0
 8011d48:	4770      	bx	lr

08011d4a <__swrite>:
 8011d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d4e:	461f      	mov	r7, r3
 8011d50:	898b      	ldrh	r3, [r1, #12]
 8011d52:	05db      	lsls	r3, r3, #23
 8011d54:	4605      	mov	r5, r0
 8011d56:	460c      	mov	r4, r1
 8011d58:	4616      	mov	r6, r2
 8011d5a:	d505      	bpl.n	8011d68 <__swrite+0x1e>
 8011d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d60:	2302      	movs	r3, #2
 8011d62:	2200      	movs	r2, #0
 8011d64:	f000 f852 	bl	8011e0c <_lseek_r>
 8011d68:	89a3      	ldrh	r3, [r4, #12]
 8011d6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011d72:	81a3      	strh	r3, [r4, #12]
 8011d74:	4632      	mov	r2, r6
 8011d76:	463b      	mov	r3, r7
 8011d78:	4628      	mov	r0, r5
 8011d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d7e:	f000 b869 	b.w	8011e54 <_write_r>

08011d82 <__sseek>:
 8011d82:	b510      	push	{r4, lr}
 8011d84:	460c      	mov	r4, r1
 8011d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d8a:	f000 f83f 	bl	8011e0c <_lseek_r>
 8011d8e:	1c43      	adds	r3, r0, #1
 8011d90:	89a3      	ldrh	r3, [r4, #12]
 8011d92:	bf15      	itete	ne
 8011d94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011d96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011d9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011d9e:	81a3      	strheq	r3, [r4, #12]
 8011da0:	bf18      	it	ne
 8011da2:	81a3      	strhne	r3, [r4, #12]
 8011da4:	bd10      	pop	{r4, pc}

08011da6 <__sclose>:
 8011da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011daa:	f000 b81f 	b.w	8011dec <_close_r>

08011dae <memset>:
 8011dae:	4402      	add	r2, r0
 8011db0:	4603      	mov	r3, r0
 8011db2:	4293      	cmp	r3, r2
 8011db4:	d100      	bne.n	8011db8 <memset+0xa>
 8011db6:	4770      	bx	lr
 8011db8:	f803 1b01 	strb.w	r1, [r3], #1
 8011dbc:	e7f9      	b.n	8011db2 <memset+0x4>

08011dbe <strncmp>:
 8011dbe:	b510      	push	{r4, lr}
 8011dc0:	b16a      	cbz	r2, 8011dde <strncmp+0x20>
 8011dc2:	3901      	subs	r1, #1
 8011dc4:	1884      	adds	r4, r0, r2
 8011dc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011dca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d103      	bne.n	8011dda <strncmp+0x1c>
 8011dd2:	42a0      	cmp	r0, r4
 8011dd4:	d001      	beq.n	8011dda <strncmp+0x1c>
 8011dd6:	2a00      	cmp	r2, #0
 8011dd8:	d1f5      	bne.n	8011dc6 <strncmp+0x8>
 8011dda:	1ad0      	subs	r0, r2, r3
 8011ddc:	bd10      	pop	{r4, pc}
 8011dde:	4610      	mov	r0, r2
 8011de0:	e7fc      	b.n	8011ddc <strncmp+0x1e>
	...

08011de4 <_localeconv_r>:
 8011de4:	4800      	ldr	r0, [pc, #0]	@ (8011de8 <_localeconv_r+0x4>)
 8011de6:	4770      	bx	lr
 8011de8:	20000324 	.word	0x20000324

08011dec <_close_r>:
 8011dec:	b538      	push	{r3, r4, r5, lr}
 8011dee:	4d06      	ldr	r5, [pc, #24]	@ (8011e08 <_close_r+0x1c>)
 8011df0:	2300      	movs	r3, #0
 8011df2:	4604      	mov	r4, r0
 8011df4:	4608      	mov	r0, r1
 8011df6:	602b      	str	r3, [r5, #0]
 8011df8:	f7f2 fbd4 	bl	80045a4 <_close>
 8011dfc:	1c43      	adds	r3, r0, #1
 8011dfe:	d102      	bne.n	8011e06 <_close_r+0x1a>
 8011e00:	682b      	ldr	r3, [r5, #0]
 8011e02:	b103      	cbz	r3, 8011e06 <_close_r+0x1a>
 8011e04:	6023      	str	r3, [r4, #0]
 8011e06:	bd38      	pop	{r3, r4, r5, pc}
 8011e08:	200026c8 	.word	0x200026c8

08011e0c <_lseek_r>:
 8011e0c:	b538      	push	{r3, r4, r5, lr}
 8011e0e:	4d07      	ldr	r5, [pc, #28]	@ (8011e2c <_lseek_r+0x20>)
 8011e10:	4604      	mov	r4, r0
 8011e12:	4608      	mov	r0, r1
 8011e14:	4611      	mov	r1, r2
 8011e16:	2200      	movs	r2, #0
 8011e18:	602a      	str	r2, [r5, #0]
 8011e1a:	461a      	mov	r2, r3
 8011e1c:	f7f2 fbe9 	bl	80045f2 <_lseek>
 8011e20:	1c43      	adds	r3, r0, #1
 8011e22:	d102      	bne.n	8011e2a <_lseek_r+0x1e>
 8011e24:	682b      	ldr	r3, [r5, #0]
 8011e26:	b103      	cbz	r3, 8011e2a <_lseek_r+0x1e>
 8011e28:	6023      	str	r3, [r4, #0]
 8011e2a:	bd38      	pop	{r3, r4, r5, pc}
 8011e2c:	200026c8 	.word	0x200026c8

08011e30 <_read_r>:
 8011e30:	b538      	push	{r3, r4, r5, lr}
 8011e32:	4d07      	ldr	r5, [pc, #28]	@ (8011e50 <_read_r+0x20>)
 8011e34:	4604      	mov	r4, r0
 8011e36:	4608      	mov	r0, r1
 8011e38:	4611      	mov	r1, r2
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	602a      	str	r2, [r5, #0]
 8011e3e:	461a      	mov	r2, r3
 8011e40:	f7f2 fb77 	bl	8004532 <_read>
 8011e44:	1c43      	adds	r3, r0, #1
 8011e46:	d102      	bne.n	8011e4e <_read_r+0x1e>
 8011e48:	682b      	ldr	r3, [r5, #0]
 8011e4a:	b103      	cbz	r3, 8011e4e <_read_r+0x1e>
 8011e4c:	6023      	str	r3, [r4, #0]
 8011e4e:	bd38      	pop	{r3, r4, r5, pc}
 8011e50:	200026c8 	.word	0x200026c8

08011e54 <_write_r>:
 8011e54:	b538      	push	{r3, r4, r5, lr}
 8011e56:	4d07      	ldr	r5, [pc, #28]	@ (8011e74 <_write_r+0x20>)
 8011e58:	4604      	mov	r4, r0
 8011e5a:	4608      	mov	r0, r1
 8011e5c:	4611      	mov	r1, r2
 8011e5e:	2200      	movs	r2, #0
 8011e60:	602a      	str	r2, [r5, #0]
 8011e62:	461a      	mov	r2, r3
 8011e64:	f7f2 fb82 	bl	800456c <_write>
 8011e68:	1c43      	adds	r3, r0, #1
 8011e6a:	d102      	bne.n	8011e72 <_write_r+0x1e>
 8011e6c:	682b      	ldr	r3, [r5, #0]
 8011e6e:	b103      	cbz	r3, 8011e72 <_write_r+0x1e>
 8011e70:	6023      	str	r3, [r4, #0]
 8011e72:	bd38      	pop	{r3, r4, r5, pc}
 8011e74:	200026c8 	.word	0x200026c8

08011e78 <__errno>:
 8011e78:	4b01      	ldr	r3, [pc, #4]	@ (8011e80 <__errno+0x8>)
 8011e7a:	6818      	ldr	r0, [r3, #0]
 8011e7c:	4770      	bx	lr
 8011e7e:	bf00      	nop
 8011e80:	200001e4 	.word	0x200001e4

08011e84 <__libc_init_array>:
 8011e84:	b570      	push	{r4, r5, r6, lr}
 8011e86:	4d0d      	ldr	r5, [pc, #52]	@ (8011ebc <__libc_init_array+0x38>)
 8011e88:	4c0d      	ldr	r4, [pc, #52]	@ (8011ec0 <__libc_init_array+0x3c>)
 8011e8a:	1b64      	subs	r4, r4, r5
 8011e8c:	10a4      	asrs	r4, r4, #2
 8011e8e:	2600      	movs	r6, #0
 8011e90:	42a6      	cmp	r6, r4
 8011e92:	d109      	bne.n	8011ea8 <__libc_init_array+0x24>
 8011e94:	4d0b      	ldr	r5, [pc, #44]	@ (8011ec4 <__libc_init_array+0x40>)
 8011e96:	4c0c      	ldr	r4, [pc, #48]	@ (8011ec8 <__libc_init_array+0x44>)
 8011e98:	f004 fee0 	bl	8016c5c <_init>
 8011e9c:	1b64      	subs	r4, r4, r5
 8011e9e:	10a4      	asrs	r4, r4, #2
 8011ea0:	2600      	movs	r6, #0
 8011ea2:	42a6      	cmp	r6, r4
 8011ea4:	d105      	bne.n	8011eb2 <__libc_init_array+0x2e>
 8011ea6:	bd70      	pop	{r4, r5, r6, pc}
 8011ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8011eac:	4798      	blx	r3
 8011eae:	3601      	adds	r6, #1
 8011eb0:	e7ee      	b.n	8011e90 <__libc_init_array+0xc>
 8011eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8011eb6:	4798      	blx	r3
 8011eb8:	3601      	adds	r6, #1
 8011eba:	e7f2      	b.n	8011ea2 <__libc_init_array+0x1e>
 8011ebc:	080174b0 	.word	0x080174b0
 8011ec0:	080174b0 	.word	0x080174b0
 8011ec4:	080174b0 	.word	0x080174b0
 8011ec8:	080174b4 	.word	0x080174b4

08011ecc <__retarget_lock_init_recursive>:
 8011ecc:	4770      	bx	lr

08011ece <__retarget_lock_acquire_recursive>:
 8011ece:	4770      	bx	lr

08011ed0 <__retarget_lock_release_recursive>:
 8011ed0:	4770      	bx	lr

08011ed2 <memcpy>:
 8011ed2:	440a      	add	r2, r1
 8011ed4:	4291      	cmp	r1, r2
 8011ed6:	f100 33ff 	add.w	r3, r0, #4294967295
 8011eda:	d100      	bne.n	8011ede <memcpy+0xc>
 8011edc:	4770      	bx	lr
 8011ede:	b510      	push	{r4, lr}
 8011ee0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ee4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ee8:	4291      	cmp	r1, r2
 8011eea:	d1f9      	bne.n	8011ee0 <memcpy+0xe>
 8011eec:	bd10      	pop	{r4, pc}
	...

08011ef0 <nanf>:
 8011ef0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011ef8 <nanf+0x8>
 8011ef4:	4770      	bx	lr
 8011ef6:	bf00      	nop
 8011ef8:	7fc00000 	.word	0x7fc00000

08011efc <quorem>:
 8011efc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f00:	6903      	ldr	r3, [r0, #16]
 8011f02:	690c      	ldr	r4, [r1, #16]
 8011f04:	42a3      	cmp	r3, r4
 8011f06:	4607      	mov	r7, r0
 8011f08:	db7e      	blt.n	8012008 <quorem+0x10c>
 8011f0a:	3c01      	subs	r4, #1
 8011f0c:	f101 0814 	add.w	r8, r1, #20
 8011f10:	00a3      	lsls	r3, r4, #2
 8011f12:	f100 0514 	add.w	r5, r0, #20
 8011f16:	9300      	str	r3, [sp, #0]
 8011f18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f1c:	9301      	str	r3, [sp, #4]
 8011f1e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011f22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f26:	3301      	adds	r3, #1
 8011f28:	429a      	cmp	r2, r3
 8011f2a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011f2e:	fbb2 f6f3 	udiv	r6, r2, r3
 8011f32:	d32e      	bcc.n	8011f92 <quorem+0x96>
 8011f34:	f04f 0a00 	mov.w	sl, #0
 8011f38:	46c4      	mov	ip, r8
 8011f3a:	46ae      	mov	lr, r5
 8011f3c:	46d3      	mov	fp, sl
 8011f3e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011f42:	b298      	uxth	r0, r3
 8011f44:	fb06 a000 	mla	r0, r6, r0, sl
 8011f48:	0c02      	lsrs	r2, r0, #16
 8011f4a:	0c1b      	lsrs	r3, r3, #16
 8011f4c:	fb06 2303 	mla	r3, r6, r3, r2
 8011f50:	f8de 2000 	ldr.w	r2, [lr]
 8011f54:	b280      	uxth	r0, r0
 8011f56:	b292      	uxth	r2, r2
 8011f58:	1a12      	subs	r2, r2, r0
 8011f5a:	445a      	add	r2, fp
 8011f5c:	f8de 0000 	ldr.w	r0, [lr]
 8011f60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011f64:	b29b      	uxth	r3, r3
 8011f66:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011f6a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011f6e:	b292      	uxth	r2, r2
 8011f70:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011f74:	45e1      	cmp	r9, ip
 8011f76:	f84e 2b04 	str.w	r2, [lr], #4
 8011f7a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011f7e:	d2de      	bcs.n	8011f3e <quorem+0x42>
 8011f80:	9b00      	ldr	r3, [sp, #0]
 8011f82:	58eb      	ldr	r3, [r5, r3]
 8011f84:	b92b      	cbnz	r3, 8011f92 <quorem+0x96>
 8011f86:	9b01      	ldr	r3, [sp, #4]
 8011f88:	3b04      	subs	r3, #4
 8011f8a:	429d      	cmp	r5, r3
 8011f8c:	461a      	mov	r2, r3
 8011f8e:	d32f      	bcc.n	8011ff0 <quorem+0xf4>
 8011f90:	613c      	str	r4, [r7, #16]
 8011f92:	4638      	mov	r0, r7
 8011f94:	f001 f9c4 	bl	8013320 <__mcmp>
 8011f98:	2800      	cmp	r0, #0
 8011f9a:	db25      	blt.n	8011fe8 <quorem+0xec>
 8011f9c:	4629      	mov	r1, r5
 8011f9e:	2000      	movs	r0, #0
 8011fa0:	f858 2b04 	ldr.w	r2, [r8], #4
 8011fa4:	f8d1 c000 	ldr.w	ip, [r1]
 8011fa8:	fa1f fe82 	uxth.w	lr, r2
 8011fac:	fa1f f38c 	uxth.w	r3, ip
 8011fb0:	eba3 030e 	sub.w	r3, r3, lr
 8011fb4:	4403      	add	r3, r0
 8011fb6:	0c12      	lsrs	r2, r2, #16
 8011fb8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011fbc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011fc0:	b29b      	uxth	r3, r3
 8011fc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011fc6:	45c1      	cmp	r9, r8
 8011fc8:	f841 3b04 	str.w	r3, [r1], #4
 8011fcc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011fd0:	d2e6      	bcs.n	8011fa0 <quorem+0xa4>
 8011fd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011fd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011fda:	b922      	cbnz	r2, 8011fe6 <quorem+0xea>
 8011fdc:	3b04      	subs	r3, #4
 8011fde:	429d      	cmp	r5, r3
 8011fe0:	461a      	mov	r2, r3
 8011fe2:	d30b      	bcc.n	8011ffc <quorem+0x100>
 8011fe4:	613c      	str	r4, [r7, #16]
 8011fe6:	3601      	adds	r6, #1
 8011fe8:	4630      	mov	r0, r6
 8011fea:	b003      	add	sp, #12
 8011fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ff0:	6812      	ldr	r2, [r2, #0]
 8011ff2:	3b04      	subs	r3, #4
 8011ff4:	2a00      	cmp	r2, #0
 8011ff6:	d1cb      	bne.n	8011f90 <quorem+0x94>
 8011ff8:	3c01      	subs	r4, #1
 8011ffa:	e7c6      	b.n	8011f8a <quorem+0x8e>
 8011ffc:	6812      	ldr	r2, [r2, #0]
 8011ffe:	3b04      	subs	r3, #4
 8012000:	2a00      	cmp	r2, #0
 8012002:	d1ef      	bne.n	8011fe4 <quorem+0xe8>
 8012004:	3c01      	subs	r4, #1
 8012006:	e7ea      	b.n	8011fde <quorem+0xe2>
 8012008:	2000      	movs	r0, #0
 801200a:	e7ee      	b.n	8011fea <quorem+0xee>
 801200c:	0000      	movs	r0, r0
	...

08012010 <_dtoa_r>:
 8012010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012014:	69c7      	ldr	r7, [r0, #28]
 8012016:	b099      	sub	sp, #100	@ 0x64
 8012018:	ed8d 0b02 	vstr	d0, [sp, #8]
 801201c:	ec55 4b10 	vmov	r4, r5, d0
 8012020:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012022:	9109      	str	r1, [sp, #36]	@ 0x24
 8012024:	4683      	mov	fp, r0
 8012026:	920e      	str	r2, [sp, #56]	@ 0x38
 8012028:	9313      	str	r3, [sp, #76]	@ 0x4c
 801202a:	b97f      	cbnz	r7, 801204c <_dtoa_r+0x3c>
 801202c:	2010      	movs	r0, #16
 801202e:	f000 fdfd 	bl	8012c2c <malloc>
 8012032:	4602      	mov	r2, r0
 8012034:	f8cb 001c 	str.w	r0, [fp, #28]
 8012038:	b920      	cbnz	r0, 8012044 <_dtoa_r+0x34>
 801203a:	4ba7      	ldr	r3, [pc, #668]	@ (80122d8 <_dtoa_r+0x2c8>)
 801203c:	21ef      	movs	r1, #239	@ 0xef
 801203e:	48a7      	ldr	r0, [pc, #668]	@ (80122dc <_dtoa_r+0x2cc>)
 8012040:	f002 ffa6 	bl	8014f90 <__assert_func>
 8012044:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012048:	6007      	str	r7, [r0, #0]
 801204a:	60c7      	str	r7, [r0, #12]
 801204c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012050:	6819      	ldr	r1, [r3, #0]
 8012052:	b159      	cbz	r1, 801206c <_dtoa_r+0x5c>
 8012054:	685a      	ldr	r2, [r3, #4]
 8012056:	604a      	str	r2, [r1, #4]
 8012058:	2301      	movs	r3, #1
 801205a:	4093      	lsls	r3, r2
 801205c:	608b      	str	r3, [r1, #8]
 801205e:	4658      	mov	r0, fp
 8012060:	f000 feda 	bl	8012e18 <_Bfree>
 8012064:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012068:	2200      	movs	r2, #0
 801206a:	601a      	str	r2, [r3, #0]
 801206c:	1e2b      	subs	r3, r5, #0
 801206e:	bfb9      	ittee	lt
 8012070:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012074:	9303      	strlt	r3, [sp, #12]
 8012076:	2300      	movge	r3, #0
 8012078:	6033      	strge	r3, [r6, #0]
 801207a:	9f03      	ldr	r7, [sp, #12]
 801207c:	4b98      	ldr	r3, [pc, #608]	@ (80122e0 <_dtoa_r+0x2d0>)
 801207e:	bfbc      	itt	lt
 8012080:	2201      	movlt	r2, #1
 8012082:	6032      	strlt	r2, [r6, #0]
 8012084:	43bb      	bics	r3, r7
 8012086:	d112      	bne.n	80120ae <_dtoa_r+0x9e>
 8012088:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801208a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801208e:	6013      	str	r3, [r2, #0]
 8012090:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012094:	4323      	orrs	r3, r4
 8012096:	f000 854d 	beq.w	8012b34 <_dtoa_r+0xb24>
 801209a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801209c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80122f4 <_dtoa_r+0x2e4>
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	f000 854f 	beq.w	8012b44 <_dtoa_r+0xb34>
 80120a6:	f10a 0303 	add.w	r3, sl, #3
 80120aa:	f000 bd49 	b.w	8012b40 <_dtoa_r+0xb30>
 80120ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80120b2:	2200      	movs	r2, #0
 80120b4:	ec51 0b17 	vmov	r0, r1, d7
 80120b8:	2300      	movs	r3, #0
 80120ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80120be:	f7ee fd2b 	bl	8000b18 <__aeabi_dcmpeq>
 80120c2:	4680      	mov	r8, r0
 80120c4:	b158      	cbz	r0, 80120de <_dtoa_r+0xce>
 80120c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80120c8:	2301      	movs	r3, #1
 80120ca:	6013      	str	r3, [r2, #0]
 80120cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80120ce:	b113      	cbz	r3, 80120d6 <_dtoa_r+0xc6>
 80120d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80120d2:	4b84      	ldr	r3, [pc, #528]	@ (80122e4 <_dtoa_r+0x2d4>)
 80120d4:	6013      	str	r3, [r2, #0]
 80120d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80122f8 <_dtoa_r+0x2e8>
 80120da:	f000 bd33 	b.w	8012b44 <_dtoa_r+0xb34>
 80120de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80120e2:	aa16      	add	r2, sp, #88	@ 0x58
 80120e4:	a917      	add	r1, sp, #92	@ 0x5c
 80120e6:	4658      	mov	r0, fp
 80120e8:	f001 fa3a 	bl	8013560 <__d2b>
 80120ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80120f0:	4681      	mov	r9, r0
 80120f2:	2e00      	cmp	r6, #0
 80120f4:	d077      	beq.n	80121e6 <_dtoa_r+0x1d6>
 80120f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80120f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80120fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012104:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012108:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801210c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012110:	4619      	mov	r1, r3
 8012112:	2200      	movs	r2, #0
 8012114:	4b74      	ldr	r3, [pc, #464]	@ (80122e8 <_dtoa_r+0x2d8>)
 8012116:	f7ee f8df 	bl	80002d8 <__aeabi_dsub>
 801211a:	a369      	add	r3, pc, #420	@ (adr r3, 80122c0 <_dtoa_r+0x2b0>)
 801211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012120:	f7ee fa92 	bl	8000648 <__aeabi_dmul>
 8012124:	a368      	add	r3, pc, #416	@ (adr r3, 80122c8 <_dtoa_r+0x2b8>)
 8012126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801212a:	f7ee f8d7 	bl	80002dc <__adddf3>
 801212e:	4604      	mov	r4, r0
 8012130:	4630      	mov	r0, r6
 8012132:	460d      	mov	r5, r1
 8012134:	f7ee fa1e 	bl	8000574 <__aeabi_i2d>
 8012138:	a365      	add	r3, pc, #404	@ (adr r3, 80122d0 <_dtoa_r+0x2c0>)
 801213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801213e:	f7ee fa83 	bl	8000648 <__aeabi_dmul>
 8012142:	4602      	mov	r2, r0
 8012144:	460b      	mov	r3, r1
 8012146:	4620      	mov	r0, r4
 8012148:	4629      	mov	r1, r5
 801214a:	f7ee f8c7 	bl	80002dc <__adddf3>
 801214e:	4604      	mov	r4, r0
 8012150:	460d      	mov	r5, r1
 8012152:	f7ee fd29 	bl	8000ba8 <__aeabi_d2iz>
 8012156:	2200      	movs	r2, #0
 8012158:	4607      	mov	r7, r0
 801215a:	2300      	movs	r3, #0
 801215c:	4620      	mov	r0, r4
 801215e:	4629      	mov	r1, r5
 8012160:	f7ee fce4 	bl	8000b2c <__aeabi_dcmplt>
 8012164:	b140      	cbz	r0, 8012178 <_dtoa_r+0x168>
 8012166:	4638      	mov	r0, r7
 8012168:	f7ee fa04 	bl	8000574 <__aeabi_i2d>
 801216c:	4622      	mov	r2, r4
 801216e:	462b      	mov	r3, r5
 8012170:	f7ee fcd2 	bl	8000b18 <__aeabi_dcmpeq>
 8012174:	b900      	cbnz	r0, 8012178 <_dtoa_r+0x168>
 8012176:	3f01      	subs	r7, #1
 8012178:	2f16      	cmp	r7, #22
 801217a:	d851      	bhi.n	8012220 <_dtoa_r+0x210>
 801217c:	4b5b      	ldr	r3, [pc, #364]	@ (80122ec <_dtoa_r+0x2dc>)
 801217e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012186:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801218a:	f7ee fccf 	bl	8000b2c <__aeabi_dcmplt>
 801218e:	2800      	cmp	r0, #0
 8012190:	d048      	beq.n	8012224 <_dtoa_r+0x214>
 8012192:	3f01      	subs	r7, #1
 8012194:	2300      	movs	r3, #0
 8012196:	9312      	str	r3, [sp, #72]	@ 0x48
 8012198:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801219a:	1b9b      	subs	r3, r3, r6
 801219c:	1e5a      	subs	r2, r3, #1
 801219e:	bf44      	itt	mi
 80121a0:	f1c3 0801 	rsbmi	r8, r3, #1
 80121a4:	2300      	movmi	r3, #0
 80121a6:	9208      	str	r2, [sp, #32]
 80121a8:	bf54      	ite	pl
 80121aa:	f04f 0800 	movpl.w	r8, #0
 80121ae:	9308      	strmi	r3, [sp, #32]
 80121b0:	2f00      	cmp	r7, #0
 80121b2:	db39      	blt.n	8012228 <_dtoa_r+0x218>
 80121b4:	9b08      	ldr	r3, [sp, #32]
 80121b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80121b8:	443b      	add	r3, r7
 80121ba:	9308      	str	r3, [sp, #32]
 80121bc:	2300      	movs	r3, #0
 80121be:	930a      	str	r3, [sp, #40]	@ 0x28
 80121c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121c2:	2b09      	cmp	r3, #9
 80121c4:	d864      	bhi.n	8012290 <_dtoa_r+0x280>
 80121c6:	2b05      	cmp	r3, #5
 80121c8:	bfc4      	itt	gt
 80121ca:	3b04      	subgt	r3, #4
 80121cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80121ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121d0:	f1a3 0302 	sub.w	r3, r3, #2
 80121d4:	bfcc      	ite	gt
 80121d6:	2400      	movgt	r4, #0
 80121d8:	2401      	movle	r4, #1
 80121da:	2b03      	cmp	r3, #3
 80121dc:	d863      	bhi.n	80122a6 <_dtoa_r+0x296>
 80121de:	e8df f003 	tbb	[pc, r3]
 80121e2:	372a      	.short	0x372a
 80121e4:	5535      	.short	0x5535
 80121e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80121ea:	441e      	add	r6, r3
 80121ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80121f0:	2b20      	cmp	r3, #32
 80121f2:	bfc1      	itttt	gt
 80121f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80121f8:	409f      	lslgt	r7, r3
 80121fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80121fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012202:	bfd6      	itet	le
 8012204:	f1c3 0320 	rsble	r3, r3, #32
 8012208:	ea47 0003 	orrgt.w	r0, r7, r3
 801220c:	fa04 f003 	lslle.w	r0, r4, r3
 8012210:	f7ee f9a0 	bl	8000554 <__aeabi_ui2d>
 8012214:	2201      	movs	r2, #1
 8012216:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801221a:	3e01      	subs	r6, #1
 801221c:	9214      	str	r2, [sp, #80]	@ 0x50
 801221e:	e777      	b.n	8012110 <_dtoa_r+0x100>
 8012220:	2301      	movs	r3, #1
 8012222:	e7b8      	b.n	8012196 <_dtoa_r+0x186>
 8012224:	9012      	str	r0, [sp, #72]	@ 0x48
 8012226:	e7b7      	b.n	8012198 <_dtoa_r+0x188>
 8012228:	427b      	negs	r3, r7
 801222a:	930a      	str	r3, [sp, #40]	@ 0x28
 801222c:	2300      	movs	r3, #0
 801222e:	eba8 0807 	sub.w	r8, r8, r7
 8012232:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012234:	e7c4      	b.n	80121c0 <_dtoa_r+0x1b0>
 8012236:	2300      	movs	r3, #0
 8012238:	930b      	str	r3, [sp, #44]	@ 0x2c
 801223a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801223c:	2b00      	cmp	r3, #0
 801223e:	dc35      	bgt.n	80122ac <_dtoa_r+0x29c>
 8012240:	2301      	movs	r3, #1
 8012242:	9300      	str	r3, [sp, #0]
 8012244:	9307      	str	r3, [sp, #28]
 8012246:	461a      	mov	r2, r3
 8012248:	920e      	str	r2, [sp, #56]	@ 0x38
 801224a:	e00b      	b.n	8012264 <_dtoa_r+0x254>
 801224c:	2301      	movs	r3, #1
 801224e:	e7f3      	b.n	8012238 <_dtoa_r+0x228>
 8012250:	2300      	movs	r3, #0
 8012252:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012256:	18fb      	adds	r3, r7, r3
 8012258:	9300      	str	r3, [sp, #0]
 801225a:	3301      	adds	r3, #1
 801225c:	2b01      	cmp	r3, #1
 801225e:	9307      	str	r3, [sp, #28]
 8012260:	bfb8      	it	lt
 8012262:	2301      	movlt	r3, #1
 8012264:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012268:	2100      	movs	r1, #0
 801226a:	2204      	movs	r2, #4
 801226c:	f102 0514 	add.w	r5, r2, #20
 8012270:	429d      	cmp	r5, r3
 8012272:	d91f      	bls.n	80122b4 <_dtoa_r+0x2a4>
 8012274:	6041      	str	r1, [r0, #4]
 8012276:	4658      	mov	r0, fp
 8012278:	f000 fd8e 	bl	8012d98 <_Balloc>
 801227c:	4682      	mov	sl, r0
 801227e:	2800      	cmp	r0, #0
 8012280:	d13c      	bne.n	80122fc <_dtoa_r+0x2ec>
 8012282:	4b1b      	ldr	r3, [pc, #108]	@ (80122f0 <_dtoa_r+0x2e0>)
 8012284:	4602      	mov	r2, r0
 8012286:	f240 11af 	movw	r1, #431	@ 0x1af
 801228a:	e6d8      	b.n	801203e <_dtoa_r+0x2e>
 801228c:	2301      	movs	r3, #1
 801228e:	e7e0      	b.n	8012252 <_dtoa_r+0x242>
 8012290:	2401      	movs	r4, #1
 8012292:	2300      	movs	r3, #0
 8012294:	9309      	str	r3, [sp, #36]	@ 0x24
 8012296:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012298:	f04f 33ff 	mov.w	r3, #4294967295
 801229c:	9300      	str	r3, [sp, #0]
 801229e:	9307      	str	r3, [sp, #28]
 80122a0:	2200      	movs	r2, #0
 80122a2:	2312      	movs	r3, #18
 80122a4:	e7d0      	b.n	8012248 <_dtoa_r+0x238>
 80122a6:	2301      	movs	r3, #1
 80122a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80122aa:	e7f5      	b.n	8012298 <_dtoa_r+0x288>
 80122ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80122ae:	9300      	str	r3, [sp, #0]
 80122b0:	9307      	str	r3, [sp, #28]
 80122b2:	e7d7      	b.n	8012264 <_dtoa_r+0x254>
 80122b4:	3101      	adds	r1, #1
 80122b6:	0052      	lsls	r2, r2, #1
 80122b8:	e7d8      	b.n	801226c <_dtoa_r+0x25c>
 80122ba:	bf00      	nop
 80122bc:	f3af 8000 	nop.w
 80122c0:	636f4361 	.word	0x636f4361
 80122c4:	3fd287a7 	.word	0x3fd287a7
 80122c8:	8b60c8b3 	.word	0x8b60c8b3
 80122cc:	3fc68a28 	.word	0x3fc68a28
 80122d0:	509f79fb 	.word	0x509f79fb
 80122d4:	3fd34413 	.word	0x3fd34413
 80122d8:	0801706c 	.word	0x0801706c
 80122dc:	08017083 	.word	0x08017083
 80122e0:	7ff00000 	.word	0x7ff00000
 80122e4:	080173c9 	.word	0x080173c9
 80122e8:	3ff80000 	.word	0x3ff80000
 80122ec:	08017180 	.word	0x08017180
 80122f0:	080170db 	.word	0x080170db
 80122f4:	08017068 	.word	0x08017068
 80122f8:	080173c8 	.word	0x080173c8
 80122fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012300:	6018      	str	r0, [r3, #0]
 8012302:	9b07      	ldr	r3, [sp, #28]
 8012304:	2b0e      	cmp	r3, #14
 8012306:	f200 80a4 	bhi.w	8012452 <_dtoa_r+0x442>
 801230a:	2c00      	cmp	r4, #0
 801230c:	f000 80a1 	beq.w	8012452 <_dtoa_r+0x442>
 8012310:	2f00      	cmp	r7, #0
 8012312:	dd33      	ble.n	801237c <_dtoa_r+0x36c>
 8012314:	4bad      	ldr	r3, [pc, #692]	@ (80125cc <_dtoa_r+0x5bc>)
 8012316:	f007 020f 	and.w	r2, r7, #15
 801231a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801231e:	ed93 7b00 	vldr	d7, [r3]
 8012322:	05f8      	lsls	r0, r7, #23
 8012324:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012328:	ea4f 1427 	mov.w	r4, r7, asr #4
 801232c:	d516      	bpl.n	801235c <_dtoa_r+0x34c>
 801232e:	4ba8      	ldr	r3, [pc, #672]	@ (80125d0 <_dtoa_r+0x5c0>)
 8012330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012338:	f7ee fab0 	bl	800089c <__aeabi_ddiv>
 801233c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012340:	f004 040f 	and.w	r4, r4, #15
 8012344:	2603      	movs	r6, #3
 8012346:	4da2      	ldr	r5, [pc, #648]	@ (80125d0 <_dtoa_r+0x5c0>)
 8012348:	b954      	cbnz	r4, 8012360 <_dtoa_r+0x350>
 801234a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801234e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012352:	f7ee faa3 	bl	800089c <__aeabi_ddiv>
 8012356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801235a:	e028      	b.n	80123ae <_dtoa_r+0x39e>
 801235c:	2602      	movs	r6, #2
 801235e:	e7f2      	b.n	8012346 <_dtoa_r+0x336>
 8012360:	07e1      	lsls	r1, r4, #31
 8012362:	d508      	bpl.n	8012376 <_dtoa_r+0x366>
 8012364:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012368:	e9d5 2300 	ldrd	r2, r3, [r5]
 801236c:	f7ee f96c 	bl	8000648 <__aeabi_dmul>
 8012370:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012374:	3601      	adds	r6, #1
 8012376:	1064      	asrs	r4, r4, #1
 8012378:	3508      	adds	r5, #8
 801237a:	e7e5      	b.n	8012348 <_dtoa_r+0x338>
 801237c:	f000 80d2 	beq.w	8012524 <_dtoa_r+0x514>
 8012380:	427c      	negs	r4, r7
 8012382:	4b92      	ldr	r3, [pc, #584]	@ (80125cc <_dtoa_r+0x5bc>)
 8012384:	4d92      	ldr	r5, [pc, #584]	@ (80125d0 <_dtoa_r+0x5c0>)
 8012386:	f004 020f 	and.w	r2, r4, #15
 801238a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012392:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012396:	f7ee f957 	bl	8000648 <__aeabi_dmul>
 801239a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801239e:	1124      	asrs	r4, r4, #4
 80123a0:	2300      	movs	r3, #0
 80123a2:	2602      	movs	r6, #2
 80123a4:	2c00      	cmp	r4, #0
 80123a6:	f040 80b2 	bne.w	801250e <_dtoa_r+0x4fe>
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d1d3      	bne.n	8012356 <_dtoa_r+0x346>
 80123ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80123b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	f000 80b7 	beq.w	8012528 <_dtoa_r+0x518>
 80123ba:	4b86      	ldr	r3, [pc, #536]	@ (80125d4 <_dtoa_r+0x5c4>)
 80123bc:	2200      	movs	r2, #0
 80123be:	4620      	mov	r0, r4
 80123c0:	4629      	mov	r1, r5
 80123c2:	f7ee fbb3 	bl	8000b2c <__aeabi_dcmplt>
 80123c6:	2800      	cmp	r0, #0
 80123c8:	f000 80ae 	beq.w	8012528 <_dtoa_r+0x518>
 80123cc:	9b07      	ldr	r3, [sp, #28]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	f000 80aa 	beq.w	8012528 <_dtoa_r+0x518>
 80123d4:	9b00      	ldr	r3, [sp, #0]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	dd37      	ble.n	801244a <_dtoa_r+0x43a>
 80123da:	1e7b      	subs	r3, r7, #1
 80123dc:	9304      	str	r3, [sp, #16]
 80123de:	4620      	mov	r0, r4
 80123e0:	4b7d      	ldr	r3, [pc, #500]	@ (80125d8 <_dtoa_r+0x5c8>)
 80123e2:	2200      	movs	r2, #0
 80123e4:	4629      	mov	r1, r5
 80123e6:	f7ee f92f 	bl	8000648 <__aeabi_dmul>
 80123ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123ee:	9c00      	ldr	r4, [sp, #0]
 80123f0:	3601      	adds	r6, #1
 80123f2:	4630      	mov	r0, r6
 80123f4:	f7ee f8be 	bl	8000574 <__aeabi_i2d>
 80123f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80123fc:	f7ee f924 	bl	8000648 <__aeabi_dmul>
 8012400:	4b76      	ldr	r3, [pc, #472]	@ (80125dc <_dtoa_r+0x5cc>)
 8012402:	2200      	movs	r2, #0
 8012404:	f7ed ff6a 	bl	80002dc <__adddf3>
 8012408:	4605      	mov	r5, r0
 801240a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801240e:	2c00      	cmp	r4, #0
 8012410:	f040 808d 	bne.w	801252e <_dtoa_r+0x51e>
 8012414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012418:	4b71      	ldr	r3, [pc, #452]	@ (80125e0 <_dtoa_r+0x5d0>)
 801241a:	2200      	movs	r2, #0
 801241c:	f7ed ff5c 	bl	80002d8 <__aeabi_dsub>
 8012420:	4602      	mov	r2, r0
 8012422:	460b      	mov	r3, r1
 8012424:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012428:	462a      	mov	r2, r5
 801242a:	4633      	mov	r3, r6
 801242c:	f7ee fb9c 	bl	8000b68 <__aeabi_dcmpgt>
 8012430:	2800      	cmp	r0, #0
 8012432:	f040 828b 	bne.w	801294c <_dtoa_r+0x93c>
 8012436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801243a:	462a      	mov	r2, r5
 801243c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012440:	f7ee fb74 	bl	8000b2c <__aeabi_dcmplt>
 8012444:	2800      	cmp	r0, #0
 8012446:	f040 8128 	bne.w	801269a <_dtoa_r+0x68a>
 801244a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801244e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012452:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012454:	2b00      	cmp	r3, #0
 8012456:	f2c0 815a 	blt.w	801270e <_dtoa_r+0x6fe>
 801245a:	2f0e      	cmp	r7, #14
 801245c:	f300 8157 	bgt.w	801270e <_dtoa_r+0x6fe>
 8012460:	4b5a      	ldr	r3, [pc, #360]	@ (80125cc <_dtoa_r+0x5bc>)
 8012462:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012466:	ed93 7b00 	vldr	d7, [r3]
 801246a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801246c:	2b00      	cmp	r3, #0
 801246e:	ed8d 7b00 	vstr	d7, [sp]
 8012472:	da03      	bge.n	801247c <_dtoa_r+0x46c>
 8012474:	9b07      	ldr	r3, [sp, #28]
 8012476:	2b00      	cmp	r3, #0
 8012478:	f340 8101 	ble.w	801267e <_dtoa_r+0x66e>
 801247c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012480:	4656      	mov	r6, sl
 8012482:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012486:	4620      	mov	r0, r4
 8012488:	4629      	mov	r1, r5
 801248a:	f7ee fa07 	bl	800089c <__aeabi_ddiv>
 801248e:	f7ee fb8b 	bl	8000ba8 <__aeabi_d2iz>
 8012492:	4680      	mov	r8, r0
 8012494:	f7ee f86e 	bl	8000574 <__aeabi_i2d>
 8012498:	e9dd 2300 	ldrd	r2, r3, [sp]
 801249c:	f7ee f8d4 	bl	8000648 <__aeabi_dmul>
 80124a0:	4602      	mov	r2, r0
 80124a2:	460b      	mov	r3, r1
 80124a4:	4620      	mov	r0, r4
 80124a6:	4629      	mov	r1, r5
 80124a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80124ac:	f7ed ff14 	bl	80002d8 <__aeabi_dsub>
 80124b0:	f806 4b01 	strb.w	r4, [r6], #1
 80124b4:	9d07      	ldr	r5, [sp, #28]
 80124b6:	eba6 040a 	sub.w	r4, r6, sl
 80124ba:	42a5      	cmp	r5, r4
 80124bc:	4602      	mov	r2, r0
 80124be:	460b      	mov	r3, r1
 80124c0:	f040 8117 	bne.w	80126f2 <_dtoa_r+0x6e2>
 80124c4:	f7ed ff0a 	bl	80002dc <__adddf3>
 80124c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80124cc:	4604      	mov	r4, r0
 80124ce:	460d      	mov	r5, r1
 80124d0:	f7ee fb4a 	bl	8000b68 <__aeabi_dcmpgt>
 80124d4:	2800      	cmp	r0, #0
 80124d6:	f040 80f9 	bne.w	80126cc <_dtoa_r+0x6bc>
 80124da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80124de:	4620      	mov	r0, r4
 80124e0:	4629      	mov	r1, r5
 80124e2:	f7ee fb19 	bl	8000b18 <__aeabi_dcmpeq>
 80124e6:	b118      	cbz	r0, 80124f0 <_dtoa_r+0x4e0>
 80124e8:	f018 0f01 	tst.w	r8, #1
 80124ec:	f040 80ee 	bne.w	80126cc <_dtoa_r+0x6bc>
 80124f0:	4649      	mov	r1, r9
 80124f2:	4658      	mov	r0, fp
 80124f4:	f000 fc90 	bl	8012e18 <_Bfree>
 80124f8:	2300      	movs	r3, #0
 80124fa:	7033      	strb	r3, [r6, #0]
 80124fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80124fe:	3701      	adds	r7, #1
 8012500:	601f      	str	r7, [r3, #0]
 8012502:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012504:	2b00      	cmp	r3, #0
 8012506:	f000 831d 	beq.w	8012b44 <_dtoa_r+0xb34>
 801250a:	601e      	str	r6, [r3, #0]
 801250c:	e31a      	b.n	8012b44 <_dtoa_r+0xb34>
 801250e:	07e2      	lsls	r2, r4, #31
 8012510:	d505      	bpl.n	801251e <_dtoa_r+0x50e>
 8012512:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012516:	f7ee f897 	bl	8000648 <__aeabi_dmul>
 801251a:	3601      	adds	r6, #1
 801251c:	2301      	movs	r3, #1
 801251e:	1064      	asrs	r4, r4, #1
 8012520:	3508      	adds	r5, #8
 8012522:	e73f      	b.n	80123a4 <_dtoa_r+0x394>
 8012524:	2602      	movs	r6, #2
 8012526:	e742      	b.n	80123ae <_dtoa_r+0x39e>
 8012528:	9c07      	ldr	r4, [sp, #28]
 801252a:	9704      	str	r7, [sp, #16]
 801252c:	e761      	b.n	80123f2 <_dtoa_r+0x3e2>
 801252e:	4b27      	ldr	r3, [pc, #156]	@ (80125cc <_dtoa_r+0x5bc>)
 8012530:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012532:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012536:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801253a:	4454      	add	r4, sl
 801253c:	2900      	cmp	r1, #0
 801253e:	d053      	beq.n	80125e8 <_dtoa_r+0x5d8>
 8012540:	4928      	ldr	r1, [pc, #160]	@ (80125e4 <_dtoa_r+0x5d4>)
 8012542:	2000      	movs	r0, #0
 8012544:	f7ee f9aa 	bl	800089c <__aeabi_ddiv>
 8012548:	4633      	mov	r3, r6
 801254a:	462a      	mov	r2, r5
 801254c:	f7ed fec4 	bl	80002d8 <__aeabi_dsub>
 8012550:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012554:	4656      	mov	r6, sl
 8012556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801255a:	f7ee fb25 	bl	8000ba8 <__aeabi_d2iz>
 801255e:	4605      	mov	r5, r0
 8012560:	f7ee f808 	bl	8000574 <__aeabi_i2d>
 8012564:	4602      	mov	r2, r0
 8012566:	460b      	mov	r3, r1
 8012568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801256c:	f7ed feb4 	bl	80002d8 <__aeabi_dsub>
 8012570:	3530      	adds	r5, #48	@ 0x30
 8012572:	4602      	mov	r2, r0
 8012574:	460b      	mov	r3, r1
 8012576:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801257a:	f806 5b01 	strb.w	r5, [r6], #1
 801257e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012582:	f7ee fad3 	bl	8000b2c <__aeabi_dcmplt>
 8012586:	2800      	cmp	r0, #0
 8012588:	d171      	bne.n	801266e <_dtoa_r+0x65e>
 801258a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801258e:	4911      	ldr	r1, [pc, #68]	@ (80125d4 <_dtoa_r+0x5c4>)
 8012590:	2000      	movs	r0, #0
 8012592:	f7ed fea1 	bl	80002d8 <__aeabi_dsub>
 8012596:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801259a:	f7ee fac7 	bl	8000b2c <__aeabi_dcmplt>
 801259e:	2800      	cmp	r0, #0
 80125a0:	f040 8095 	bne.w	80126ce <_dtoa_r+0x6be>
 80125a4:	42a6      	cmp	r6, r4
 80125a6:	f43f af50 	beq.w	801244a <_dtoa_r+0x43a>
 80125aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80125ae:	4b0a      	ldr	r3, [pc, #40]	@ (80125d8 <_dtoa_r+0x5c8>)
 80125b0:	2200      	movs	r2, #0
 80125b2:	f7ee f849 	bl	8000648 <__aeabi_dmul>
 80125b6:	4b08      	ldr	r3, [pc, #32]	@ (80125d8 <_dtoa_r+0x5c8>)
 80125b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80125bc:	2200      	movs	r2, #0
 80125be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125c2:	f7ee f841 	bl	8000648 <__aeabi_dmul>
 80125c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125ca:	e7c4      	b.n	8012556 <_dtoa_r+0x546>
 80125cc:	08017180 	.word	0x08017180
 80125d0:	08017158 	.word	0x08017158
 80125d4:	3ff00000 	.word	0x3ff00000
 80125d8:	40240000 	.word	0x40240000
 80125dc:	401c0000 	.word	0x401c0000
 80125e0:	40140000 	.word	0x40140000
 80125e4:	3fe00000 	.word	0x3fe00000
 80125e8:	4631      	mov	r1, r6
 80125ea:	4628      	mov	r0, r5
 80125ec:	f7ee f82c 	bl	8000648 <__aeabi_dmul>
 80125f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80125f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80125f6:	4656      	mov	r6, sl
 80125f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125fc:	f7ee fad4 	bl	8000ba8 <__aeabi_d2iz>
 8012600:	4605      	mov	r5, r0
 8012602:	f7ed ffb7 	bl	8000574 <__aeabi_i2d>
 8012606:	4602      	mov	r2, r0
 8012608:	460b      	mov	r3, r1
 801260a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801260e:	f7ed fe63 	bl	80002d8 <__aeabi_dsub>
 8012612:	3530      	adds	r5, #48	@ 0x30
 8012614:	f806 5b01 	strb.w	r5, [r6], #1
 8012618:	4602      	mov	r2, r0
 801261a:	460b      	mov	r3, r1
 801261c:	42a6      	cmp	r6, r4
 801261e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012622:	f04f 0200 	mov.w	r2, #0
 8012626:	d124      	bne.n	8012672 <_dtoa_r+0x662>
 8012628:	4bac      	ldr	r3, [pc, #688]	@ (80128dc <_dtoa_r+0x8cc>)
 801262a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801262e:	f7ed fe55 	bl	80002dc <__adddf3>
 8012632:	4602      	mov	r2, r0
 8012634:	460b      	mov	r3, r1
 8012636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801263a:	f7ee fa95 	bl	8000b68 <__aeabi_dcmpgt>
 801263e:	2800      	cmp	r0, #0
 8012640:	d145      	bne.n	80126ce <_dtoa_r+0x6be>
 8012642:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012646:	49a5      	ldr	r1, [pc, #660]	@ (80128dc <_dtoa_r+0x8cc>)
 8012648:	2000      	movs	r0, #0
 801264a:	f7ed fe45 	bl	80002d8 <__aeabi_dsub>
 801264e:	4602      	mov	r2, r0
 8012650:	460b      	mov	r3, r1
 8012652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012656:	f7ee fa69 	bl	8000b2c <__aeabi_dcmplt>
 801265a:	2800      	cmp	r0, #0
 801265c:	f43f aef5 	beq.w	801244a <_dtoa_r+0x43a>
 8012660:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8012662:	1e73      	subs	r3, r6, #1
 8012664:	9315      	str	r3, [sp, #84]	@ 0x54
 8012666:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801266a:	2b30      	cmp	r3, #48	@ 0x30
 801266c:	d0f8      	beq.n	8012660 <_dtoa_r+0x650>
 801266e:	9f04      	ldr	r7, [sp, #16]
 8012670:	e73e      	b.n	80124f0 <_dtoa_r+0x4e0>
 8012672:	4b9b      	ldr	r3, [pc, #620]	@ (80128e0 <_dtoa_r+0x8d0>)
 8012674:	f7ed ffe8 	bl	8000648 <__aeabi_dmul>
 8012678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801267c:	e7bc      	b.n	80125f8 <_dtoa_r+0x5e8>
 801267e:	d10c      	bne.n	801269a <_dtoa_r+0x68a>
 8012680:	4b98      	ldr	r3, [pc, #608]	@ (80128e4 <_dtoa_r+0x8d4>)
 8012682:	2200      	movs	r2, #0
 8012684:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012688:	f7ed ffde 	bl	8000648 <__aeabi_dmul>
 801268c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012690:	f7ee fa60 	bl	8000b54 <__aeabi_dcmpge>
 8012694:	2800      	cmp	r0, #0
 8012696:	f000 8157 	beq.w	8012948 <_dtoa_r+0x938>
 801269a:	2400      	movs	r4, #0
 801269c:	4625      	mov	r5, r4
 801269e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80126a0:	43db      	mvns	r3, r3
 80126a2:	9304      	str	r3, [sp, #16]
 80126a4:	4656      	mov	r6, sl
 80126a6:	2700      	movs	r7, #0
 80126a8:	4621      	mov	r1, r4
 80126aa:	4658      	mov	r0, fp
 80126ac:	f000 fbb4 	bl	8012e18 <_Bfree>
 80126b0:	2d00      	cmp	r5, #0
 80126b2:	d0dc      	beq.n	801266e <_dtoa_r+0x65e>
 80126b4:	b12f      	cbz	r7, 80126c2 <_dtoa_r+0x6b2>
 80126b6:	42af      	cmp	r7, r5
 80126b8:	d003      	beq.n	80126c2 <_dtoa_r+0x6b2>
 80126ba:	4639      	mov	r1, r7
 80126bc:	4658      	mov	r0, fp
 80126be:	f000 fbab 	bl	8012e18 <_Bfree>
 80126c2:	4629      	mov	r1, r5
 80126c4:	4658      	mov	r0, fp
 80126c6:	f000 fba7 	bl	8012e18 <_Bfree>
 80126ca:	e7d0      	b.n	801266e <_dtoa_r+0x65e>
 80126cc:	9704      	str	r7, [sp, #16]
 80126ce:	4633      	mov	r3, r6
 80126d0:	461e      	mov	r6, r3
 80126d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80126d6:	2a39      	cmp	r2, #57	@ 0x39
 80126d8:	d107      	bne.n	80126ea <_dtoa_r+0x6da>
 80126da:	459a      	cmp	sl, r3
 80126dc:	d1f8      	bne.n	80126d0 <_dtoa_r+0x6c0>
 80126de:	9a04      	ldr	r2, [sp, #16]
 80126e0:	3201      	adds	r2, #1
 80126e2:	9204      	str	r2, [sp, #16]
 80126e4:	2230      	movs	r2, #48	@ 0x30
 80126e6:	f88a 2000 	strb.w	r2, [sl]
 80126ea:	781a      	ldrb	r2, [r3, #0]
 80126ec:	3201      	adds	r2, #1
 80126ee:	701a      	strb	r2, [r3, #0]
 80126f0:	e7bd      	b.n	801266e <_dtoa_r+0x65e>
 80126f2:	4b7b      	ldr	r3, [pc, #492]	@ (80128e0 <_dtoa_r+0x8d0>)
 80126f4:	2200      	movs	r2, #0
 80126f6:	f7ed ffa7 	bl	8000648 <__aeabi_dmul>
 80126fa:	2200      	movs	r2, #0
 80126fc:	2300      	movs	r3, #0
 80126fe:	4604      	mov	r4, r0
 8012700:	460d      	mov	r5, r1
 8012702:	f7ee fa09 	bl	8000b18 <__aeabi_dcmpeq>
 8012706:	2800      	cmp	r0, #0
 8012708:	f43f aebb 	beq.w	8012482 <_dtoa_r+0x472>
 801270c:	e6f0      	b.n	80124f0 <_dtoa_r+0x4e0>
 801270e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012710:	2a00      	cmp	r2, #0
 8012712:	f000 80db 	beq.w	80128cc <_dtoa_r+0x8bc>
 8012716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012718:	2a01      	cmp	r2, #1
 801271a:	f300 80bf 	bgt.w	801289c <_dtoa_r+0x88c>
 801271e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012720:	2a00      	cmp	r2, #0
 8012722:	f000 80b7 	beq.w	8012894 <_dtoa_r+0x884>
 8012726:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801272a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801272c:	4646      	mov	r6, r8
 801272e:	9a08      	ldr	r2, [sp, #32]
 8012730:	2101      	movs	r1, #1
 8012732:	441a      	add	r2, r3
 8012734:	4658      	mov	r0, fp
 8012736:	4498      	add	r8, r3
 8012738:	9208      	str	r2, [sp, #32]
 801273a:	f000 fc6b 	bl	8013014 <__i2b>
 801273e:	4605      	mov	r5, r0
 8012740:	b15e      	cbz	r6, 801275a <_dtoa_r+0x74a>
 8012742:	9b08      	ldr	r3, [sp, #32]
 8012744:	2b00      	cmp	r3, #0
 8012746:	dd08      	ble.n	801275a <_dtoa_r+0x74a>
 8012748:	42b3      	cmp	r3, r6
 801274a:	9a08      	ldr	r2, [sp, #32]
 801274c:	bfa8      	it	ge
 801274e:	4633      	movge	r3, r6
 8012750:	eba8 0803 	sub.w	r8, r8, r3
 8012754:	1af6      	subs	r6, r6, r3
 8012756:	1ad3      	subs	r3, r2, r3
 8012758:	9308      	str	r3, [sp, #32]
 801275a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801275c:	b1f3      	cbz	r3, 801279c <_dtoa_r+0x78c>
 801275e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012760:	2b00      	cmp	r3, #0
 8012762:	f000 80b7 	beq.w	80128d4 <_dtoa_r+0x8c4>
 8012766:	b18c      	cbz	r4, 801278c <_dtoa_r+0x77c>
 8012768:	4629      	mov	r1, r5
 801276a:	4622      	mov	r2, r4
 801276c:	4658      	mov	r0, fp
 801276e:	f000 fd11 	bl	8013194 <__pow5mult>
 8012772:	464a      	mov	r2, r9
 8012774:	4601      	mov	r1, r0
 8012776:	4605      	mov	r5, r0
 8012778:	4658      	mov	r0, fp
 801277a:	f000 fc61 	bl	8013040 <__multiply>
 801277e:	4649      	mov	r1, r9
 8012780:	9004      	str	r0, [sp, #16]
 8012782:	4658      	mov	r0, fp
 8012784:	f000 fb48 	bl	8012e18 <_Bfree>
 8012788:	9b04      	ldr	r3, [sp, #16]
 801278a:	4699      	mov	r9, r3
 801278c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801278e:	1b1a      	subs	r2, r3, r4
 8012790:	d004      	beq.n	801279c <_dtoa_r+0x78c>
 8012792:	4649      	mov	r1, r9
 8012794:	4658      	mov	r0, fp
 8012796:	f000 fcfd 	bl	8013194 <__pow5mult>
 801279a:	4681      	mov	r9, r0
 801279c:	2101      	movs	r1, #1
 801279e:	4658      	mov	r0, fp
 80127a0:	f000 fc38 	bl	8013014 <__i2b>
 80127a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127a6:	4604      	mov	r4, r0
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	f000 81cf 	beq.w	8012b4c <_dtoa_r+0xb3c>
 80127ae:	461a      	mov	r2, r3
 80127b0:	4601      	mov	r1, r0
 80127b2:	4658      	mov	r0, fp
 80127b4:	f000 fcee 	bl	8013194 <__pow5mult>
 80127b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127ba:	2b01      	cmp	r3, #1
 80127bc:	4604      	mov	r4, r0
 80127be:	f300 8095 	bgt.w	80128ec <_dtoa_r+0x8dc>
 80127c2:	9b02      	ldr	r3, [sp, #8]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	f040 8087 	bne.w	80128d8 <_dtoa_r+0x8c8>
 80127ca:	9b03      	ldr	r3, [sp, #12]
 80127cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	f040 8089 	bne.w	80128e8 <_dtoa_r+0x8d8>
 80127d6:	9b03      	ldr	r3, [sp, #12]
 80127d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80127dc:	0d1b      	lsrs	r3, r3, #20
 80127de:	051b      	lsls	r3, r3, #20
 80127e0:	b12b      	cbz	r3, 80127ee <_dtoa_r+0x7de>
 80127e2:	9b08      	ldr	r3, [sp, #32]
 80127e4:	3301      	adds	r3, #1
 80127e6:	9308      	str	r3, [sp, #32]
 80127e8:	f108 0801 	add.w	r8, r8, #1
 80127ec:	2301      	movs	r3, #1
 80127ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80127f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	f000 81b0 	beq.w	8012b58 <_dtoa_r+0xb48>
 80127f8:	6923      	ldr	r3, [r4, #16]
 80127fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80127fe:	6918      	ldr	r0, [r3, #16]
 8012800:	f000 fbbc 	bl	8012f7c <__hi0bits>
 8012804:	f1c0 0020 	rsb	r0, r0, #32
 8012808:	9b08      	ldr	r3, [sp, #32]
 801280a:	4418      	add	r0, r3
 801280c:	f010 001f 	ands.w	r0, r0, #31
 8012810:	d077      	beq.n	8012902 <_dtoa_r+0x8f2>
 8012812:	f1c0 0320 	rsb	r3, r0, #32
 8012816:	2b04      	cmp	r3, #4
 8012818:	dd6b      	ble.n	80128f2 <_dtoa_r+0x8e2>
 801281a:	9b08      	ldr	r3, [sp, #32]
 801281c:	f1c0 001c 	rsb	r0, r0, #28
 8012820:	4403      	add	r3, r0
 8012822:	4480      	add	r8, r0
 8012824:	4406      	add	r6, r0
 8012826:	9308      	str	r3, [sp, #32]
 8012828:	f1b8 0f00 	cmp.w	r8, #0
 801282c:	dd05      	ble.n	801283a <_dtoa_r+0x82a>
 801282e:	4649      	mov	r1, r9
 8012830:	4642      	mov	r2, r8
 8012832:	4658      	mov	r0, fp
 8012834:	f000 fd08 	bl	8013248 <__lshift>
 8012838:	4681      	mov	r9, r0
 801283a:	9b08      	ldr	r3, [sp, #32]
 801283c:	2b00      	cmp	r3, #0
 801283e:	dd05      	ble.n	801284c <_dtoa_r+0x83c>
 8012840:	4621      	mov	r1, r4
 8012842:	461a      	mov	r2, r3
 8012844:	4658      	mov	r0, fp
 8012846:	f000 fcff 	bl	8013248 <__lshift>
 801284a:	4604      	mov	r4, r0
 801284c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801284e:	2b00      	cmp	r3, #0
 8012850:	d059      	beq.n	8012906 <_dtoa_r+0x8f6>
 8012852:	4621      	mov	r1, r4
 8012854:	4648      	mov	r0, r9
 8012856:	f000 fd63 	bl	8013320 <__mcmp>
 801285a:	2800      	cmp	r0, #0
 801285c:	da53      	bge.n	8012906 <_dtoa_r+0x8f6>
 801285e:	1e7b      	subs	r3, r7, #1
 8012860:	9304      	str	r3, [sp, #16]
 8012862:	4649      	mov	r1, r9
 8012864:	2300      	movs	r3, #0
 8012866:	220a      	movs	r2, #10
 8012868:	4658      	mov	r0, fp
 801286a:	f000 faf7 	bl	8012e5c <__multadd>
 801286e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012870:	4681      	mov	r9, r0
 8012872:	2b00      	cmp	r3, #0
 8012874:	f000 8172 	beq.w	8012b5c <_dtoa_r+0xb4c>
 8012878:	2300      	movs	r3, #0
 801287a:	4629      	mov	r1, r5
 801287c:	220a      	movs	r2, #10
 801287e:	4658      	mov	r0, fp
 8012880:	f000 faec 	bl	8012e5c <__multadd>
 8012884:	9b00      	ldr	r3, [sp, #0]
 8012886:	2b00      	cmp	r3, #0
 8012888:	4605      	mov	r5, r0
 801288a:	dc67      	bgt.n	801295c <_dtoa_r+0x94c>
 801288c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801288e:	2b02      	cmp	r3, #2
 8012890:	dc41      	bgt.n	8012916 <_dtoa_r+0x906>
 8012892:	e063      	b.n	801295c <_dtoa_r+0x94c>
 8012894:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012896:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801289a:	e746      	b.n	801272a <_dtoa_r+0x71a>
 801289c:	9b07      	ldr	r3, [sp, #28]
 801289e:	1e5c      	subs	r4, r3, #1
 80128a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128a2:	42a3      	cmp	r3, r4
 80128a4:	bfbf      	itttt	lt
 80128a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80128a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80128aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80128ac:	1ae3      	sublt	r3, r4, r3
 80128ae:	bfb4      	ite	lt
 80128b0:	18d2      	addlt	r2, r2, r3
 80128b2:	1b1c      	subge	r4, r3, r4
 80128b4:	9b07      	ldr	r3, [sp, #28]
 80128b6:	bfbc      	itt	lt
 80128b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80128ba:	2400      	movlt	r4, #0
 80128bc:	2b00      	cmp	r3, #0
 80128be:	bfb5      	itete	lt
 80128c0:	eba8 0603 	sublt.w	r6, r8, r3
 80128c4:	9b07      	ldrge	r3, [sp, #28]
 80128c6:	2300      	movlt	r3, #0
 80128c8:	4646      	movge	r6, r8
 80128ca:	e730      	b.n	801272e <_dtoa_r+0x71e>
 80128cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80128ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80128d0:	4646      	mov	r6, r8
 80128d2:	e735      	b.n	8012740 <_dtoa_r+0x730>
 80128d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80128d6:	e75c      	b.n	8012792 <_dtoa_r+0x782>
 80128d8:	2300      	movs	r3, #0
 80128da:	e788      	b.n	80127ee <_dtoa_r+0x7de>
 80128dc:	3fe00000 	.word	0x3fe00000
 80128e0:	40240000 	.word	0x40240000
 80128e4:	40140000 	.word	0x40140000
 80128e8:	9b02      	ldr	r3, [sp, #8]
 80128ea:	e780      	b.n	80127ee <_dtoa_r+0x7de>
 80128ec:	2300      	movs	r3, #0
 80128ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80128f0:	e782      	b.n	80127f8 <_dtoa_r+0x7e8>
 80128f2:	d099      	beq.n	8012828 <_dtoa_r+0x818>
 80128f4:	9a08      	ldr	r2, [sp, #32]
 80128f6:	331c      	adds	r3, #28
 80128f8:	441a      	add	r2, r3
 80128fa:	4498      	add	r8, r3
 80128fc:	441e      	add	r6, r3
 80128fe:	9208      	str	r2, [sp, #32]
 8012900:	e792      	b.n	8012828 <_dtoa_r+0x818>
 8012902:	4603      	mov	r3, r0
 8012904:	e7f6      	b.n	80128f4 <_dtoa_r+0x8e4>
 8012906:	9b07      	ldr	r3, [sp, #28]
 8012908:	9704      	str	r7, [sp, #16]
 801290a:	2b00      	cmp	r3, #0
 801290c:	dc20      	bgt.n	8012950 <_dtoa_r+0x940>
 801290e:	9300      	str	r3, [sp, #0]
 8012910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012912:	2b02      	cmp	r3, #2
 8012914:	dd1e      	ble.n	8012954 <_dtoa_r+0x944>
 8012916:	9b00      	ldr	r3, [sp, #0]
 8012918:	2b00      	cmp	r3, #0
 801291a:	f47f aec0 	bne.w	801269e <_dtoa_r+0x68e>
 801291e:	4621      	mov	r1, r4
 8012920:	2205      	movs	r2, #5
 8012922:	4658      	mov	r0, fp
 8012924:	f000 fa9a 	bl	8012e5c <__multadd>
 8012928:	4601      	mov	r1, r0
 801292a:	4604      	mov	r4, r0
 801292c:	4648      	mov	r0, r9
 801292e:	f000 fcf7 	bl	8013320 <__mcmp>
 8012932:	2800      	cmp	r0, #0
 8012934:	f77f aeb3 	ble.w	801269e <_dtoa_r+0x68e>
 8012938:	4656      	mov	r6, sl
 801293a:	2331      	movs	r3, #49	@ 0x31
 801293c:	f806 3b01 	strb.w	r3, [r6], #1
 8012940:	9b04      	ldr	r3, [sp, #16]
 8012942:	3301      	adds	r3, #1
 8012944:	9304      	str	r3, [sp, #16]
 8012946:	e6ae      	b.n	80126a6 <_dtoa_r+0x696>
 8012948:	9c07      	ldr	r4, [sp, #28]
 801294a:	9704      	str	r7, [sp, #16]
 801294c:	4625      	mov	r5, r4
 801294e:	e7f3      	b.n	8012938 <_dtoa_r+0x928>
 8012950:	9b07      	ldr	r3, [sp, #28]
 8012952:	9300      	str	r3, [sp, #0]
 8012954:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012956:	2b00      	cmp	r3, #0
 8012958:	f000 8104 	beq.w	8012b64 <_dtoa_r+0xb54>
 801295c:	2e00      	cmp	r6, #0
 801295e:	dd05      	ble.n	801296c <_dtoa_r+0x95c>
 8012960:	4629      	mov	r1, r5
 8012962:	4632      	mov	r2, r6
 8012964:	4658      	mov	r0, fp
 8012966:	f000 fc6f 	bl	8013248 <__lshift>
 801296a:	4605      	mov	r5, r0
 801296c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801296e:	2b00      	cmp	r3, #0
 8012970:	d05a      	beq.n	8012a28 <_dtoa_r+0xa18>
 8012972:	6869      	ldr	r1, [r5, #4]
 8012974:	4658      	mov	r0, fp
 8012976:	f000 fa0f 	bl	8012d98 <_Balloc>
 801297a:	4606      	mov	r6, r0
 801297c:	b928      	cbnz	r0, 801298a <_dtoa_r+0x97a>
 801297e:	4b84      	ldr	r3, [pc, #528]	@ (8012b90 <_dtoa_r+0xb80>)
 8012980:	4602      	mov	r2, r0
 8012982:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012986:	f7ff bb5a 	b.w	801203e <_dtoa_r+0x2e>
 801298a:	692a      	ldr	r2, [r5, #16]
 801298c:	3202      	adds	r2, #2
 801298e:	0092      	lsls	r2, r2, #2
 8012990:	f105 010c 	add.w	r1, r5, #12
 8012994:	300c      	adds	r0, #12
 8012996:	f7ff fa9c 	bl	8011ed2 <memcpy>
 801299a:	2201      	movs	r2, #1
 801299c:	4631      	mov	r1, r6
 801299e:	4658      	mov	r0, fp
 80129a0:	f000 fc52 	bl	8013248 <__lshift>
 80129a4:	f10a 0301 	add.w	r3, sl, #1
 80129a8:	9307      	str	r3, [sp, #28]
 80129aa:	9b00      	ldr	r3, [sp, #0]
 80129ac:	4453      	add	r3, sl
 80129ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80129b0:	9b02      	ldr	r3, [sp, #8]
 80129b2:	f003 0301 	and.w	r3, r3, #1
 80129b6:	462f      	mov	r7, r5
 80129b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80129ba:	4605      	mov	r5, r0
 80129bc:	9b07      	ldr	r3, [sp, #28]
 80129be:	4621      	mov	r1, r4
 80129c0:	3b01      	subs	r3, #1
 80129c2:	4648      	mov	r0, r9
 80129c4:	9300      	str	r3, [sp, #0]
 80129c6:	f7ff fa99 	bl	8011efc <quorem>
 80129ca:	4639      	mov	r1, r7
 80129cc:	9002      	str	r0, [sp, #8]
 80129ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80129d2:	4648      	mov	r0, r9
 80129d4:	f000 fca4 	bl	8013320 <__mcmp>
 80129d8:	462a      	mov	r2, r5
 80129da:	9008      	str	r0, [sp, #32]
 80129dc:	4621      	mov	r1, r4
 80129de:	4658      	mov	r0, fp
 80129e0:	f000 fcba 	bl	8013358 <__mdiff>
 80129e4:	68c2      	ldr	r2, [r0, #12]
 80129e6:	4606      	mov	r6, r0
 80129e8:	bb02      	cbnz	r2, 8012a2c <_dtoa_r+0xa1c>
 80129ea:	4601      	mov	r1, r0
 80129ec:	4648      	mov	r0, r9
 80129ee:	f000 fc97 	bl	8013320 <__mcmp>
 80129f2:	4602      	mov	r2, r0
 80129f4:	4631      	mov	r1, r6
 80129f6:	4658      	mov	r0, fp
 80129f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80129fa:	f000 fa0d 	bl	8012e18 <_Bfree>
 80129fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012a02:	9e07      	ldr	r6, [sp, #28]
 8012a04:	ea43 0102 	orr.w	r1, r3, r2
 8012a08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a0a:	4319      	orrs	r1, r3
 8012a0c:	d110      	bne.n	8012a30 <_dtoa_r+0xa20>
 8012a0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012a12:	d029      	beq.n	8012a68 <_dtoa_r+0xa58>
 8012a14:	9b08      	ldr	r3, [sp, #32]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	dd02      	ble.n	8012a20 <_dtoa_r+0xa10>
 8012a1a:	9b02      	ldr	r3, [sp, #8]
 8012a1c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012a20:	9b00      	ldr	r3, [sp, #0]
 8012a22:	f883 8000 	strb.w	r8, [r3]
 8012a26:	e63f      	b.n	80126a8 <_dtoa_r+0x698>
 8012a28:	4628      	mov	r0, r5
 8012a2a:	e7bb      	b.n	80129a4 <_dtoa_r+0x994>
 8012a2c:	2201      	movs	r2, #1
 8012a2e:	e7e1      	b.n	80129f4 <_dtoa_r+0x9e4>
 8012a30:	9b08      	ldr	r3, [sp, #32]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	db04      	blt.n	8012a40 <_dtoa_r+0xa30>
 8012a36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012a38:	430b      	orrs	r3, r1
 8012a3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012a3c:	430b      	orrs	r3, r1
 8012a3e:	d120      	bne.n	8012a82 <_dtoa_r+0xa72>
 8012a40:	2a00      	cmp	r2, #0
 8012a42:	dded      	ble.n	8012a20 <_dtoa_r+0xa10>
 8012a44:	4649      	mov	r1, r9
 8012a46:	2201      	movs	r2, #1
 8012a48:	4658      	mov	r0, fp
 8012a4a:	f000 fbfd 	bl	8013248 <__lshift>
 8012a4e:	4621      	mov	r1, r4
 8012a50:	4681      	mov	r9, r0
 8012a52:	f000 fc65 	bl	8013320 <__mcmp>
 8012a56:	2800      	cmp	r0, #0
 8012a58:	dc03      	bgt.n	8012a62 <_dtoa_r+0xa52>
 8012a5a:	d1e1      	bne.n	8012a20 <_dtoa_r+0xa10>
 8012a5c:	f018 0f01 	tst.w	r8, #1
 8012a60:	d0de      	beq.n	8012a20 <_dtoa_r+0xa10>
 8012a62:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012a66:	d1d8      	bne.n	8012a1a <_dtoa_r+0xa0a>
 8012a68:	9a00      	ldr	r2, [sp, #0]
 8012a6a:	2339      	movs	r3, #57	@ 0x39
 8012a6c:	7013      	strb	r3, [r2, #0]
 8012a6e:	4633      	mov	r3, r6
 8012a70:	461e      	mov	r6, r3
 8012a72:	3b01      	subs	r3, #1
 8012a74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012a78:	2a39      	cmp	r2, #57	@ 0x39
 8012a7a:	d052      	beq.n	8012b22 <_dtoa_r+0xb12>
 8012a7c:	3201      	adds	r2, #1
 8012a7e:	701a      	strb	r2, [r3, #0]
 8012a80:	e612      	b.n	80126a8 <_dtoa_r+0x698>
 8012a82:	2a00      	cmp	r2, #0
 8012a84:	dd07      	ble.n	8012a96 <_dtoa_r+0xa86>
 8012a86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012a8a:	d0ed      	beq.n	8012a68 <_dtoa_r+0xa58>
 8012a8c:	9a00      	ldr	r2, [sp, #0]
 8012a8e:	f108 0301 	add.w	r3, r8, #1
 8012a92:	7013      	strb	r3, [r2, #0]
 8012a94:	e608      	b.n	80126a8 <_dtoa_r+0x698>
 8012a96:	9b07      	ldr	r3, [sp, #28]
 8012a98:	9a07      	ldr	r2, [sp, #28]
 8012a9a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012a9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012aa0:	4293      	cmp	r3, r2
 8012aa2:	d028      	beq.n	8012af6 <_dtoa_r+0xae6>
 8012aa4:	4649      	mov	r1, r9
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	220a      	movs	r2, #10
 8012aaa:	4658      	mov	r0, fp
 8012aac:	f000 f9d6 	bl	8012e5c <__multadd>
 8012ab0:	42af      	cmp	r7, r5
 8012ab2:	4681      	mov	r9, r0
 8012ab4:	f04f 0300 	mov.w	r3, #0
 8012ab8:	f04f 020a 	mov.w	r2, #10
 8012abc:	4639      	mov	r1, r7
 8012abe:	4658      	mov	r0, fp
 8012ac0:	d107      	bne.n	8012ad2 <_dtoa_r+0xac2>
 8012ac2:	f000 f9cb 	bl	8012e5c <__multadd>
 8012ac6:	4607      	mov	r7, r0
 8012ac8:	4605      	mov	r5, r0
 8012aca:	9b07      	ldr	r3, [sp, #28]
 8012acc:	3301      	adds	r3, #1
 8012ace:	9307      	str	r3, [sp, #28]
 8012ad0:	e774      	b.n	80129bc <_dtoa_r+0x9ac>
 8012ad2:	f000 f9c3 	bl	8012e5c <__multadd>
 8012ad6:	4629      	mov	r1, r5
 8012ad8:	4607      	mov	r7, r0
 8012ada:	2300      	movs	r3, #0
 8012adc:	220a      	movs	r2, #10
 8012ade:	4658      	mov	r0, fp
 8012ae0:	f000 f9bc 	bl	8012e5c <__multadd>
 8012ae4:	4605      	mov	r5, r0
 8012ae6:	e7f0      	b.n	8012aca <_dtoa_r+0xaba>
 8012ae8:	9b00      	ldr	r3, [sp, #0]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	bfcc      	ite	gt
 8012aee:	461e      	movgt	r6, r3
 8012af0:	2601      	movle	r6, #1
 8012af2:	4456      	add	r6, sl
 8012af4:	2700      	movs	r7, #0
 8012af6:	4649      	mov	r1, r9
 8012af8:	2201      	movs	r2, #1
 8012afa:	4658      	mov	r0, fp
 8012afc:	f000 fba4 	bl	8013248 <__lshift>
 8012b00:	4621      	mov	r1, r4
 8012b02:	4681      	mov	r9, r0
 8012b04:	f000 fc0c 	bl	8013320 <__mcmp>
 8012b08:	2800      	cmp	r0, #0
 8012b0a:	dcb0      	bgt.n	8012a6e <_dtoa_r+0xa5e>
 8012b0c:	d102      	bne.n	8012b14 <_dtoa_r+0xb04>
 8012b0e:	f018 0f01 	tst.w	r8, #1
 8012b12:	d1ac      	bne.n	8012a6e <_dtoa_r+0xa5e>
 8012b14:	4633      	mov	r3, r6
 8012b16:	461e      	mov	r6, r3
 8012b18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b1c:	2a30      	cmp	r2, #48	@ 0x30
 8012b1e:	d0fa      	beq.n	8012b16 <_dtoa_r+0xb06>
 8012b20:	e5c2      	b.n	80126a8 <_dtoa_r+0x698>
 8012b22:	459a      	cmp	sl, r3
 8012b24:	d1a4      	bne.n	8012a70 <_dtoa_r+0xa60>
 8012b26:	9b04      	ldr	r3, [sp, #16]
 8012b28:	3301      	adds	r3, #1
 8012b2a:	9304      	str	r3, [sp, #16]
 8012b2c:	2331      	movs	r3, #49	@ 0x31
 8012b2e:	f88a 3000 	strb.w	r3, [sl]
 8012b32:	e5b9      	b.n	80126a8 <_dtoa_r+0x698>
 8012b34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012b36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012b94 <_dtoa_r+0xb84>
 8012b3a:	b11b      	cbz	r3, 8012b44 <_dtoa_r+0xb34>
 8012b3c:	f10a 0308 	add.w	r3, sl, #8
 8012b40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012b42:	6013      	str	r3, [r2, #0]
 8012b44:	4650      	mov	r0, sl
 8012b46:	b019      	add	sp, #100	@ 0x64
 8012b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b4e:	2b01      	cmp	r3, #1
 8012b50:	f77f ae37 	ble.w	80127c2 <_dtoa_r+0x7b2>
 8012b54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b56:	930a      	str	r3, [sp, #40]	@ 0x28
 8012b58:	2001      	movs	r0, #1
 8012b5a:	e655      	b.n	8012808 <_dtoa_r+0x7f8>
 8012b5c:	9b00      	ldr	r3, [sp, #0]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	f77f aed6 	ble.w	8012910 <_dtoa_r+0x900>
 8012b64:	4656      	mov	r6, sl
 8012b66:	4621      	mov	r1, r4
 8012b68:	4648      	mov	r0, r9
 8012b6a:	f7ff f9c7 	bl	8011efc <quorem>
 8012b6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012b72:	f806 8b01 	strb.w	r8, [r6], #1
 8012b76:	9b00      	ldr	r3, [sp, #0]
 8012b78:	eba6 020a 	sub.w	r2, r6, sl
 8012b7c:	4293      	cmp	r3, r2
 8012b7e:	ddb3      	ble.n	8012ae8 <_dtoa_r+0xad8>
 8012b80:	4649      	mov	r1, r9
 8012b82:	2300      	movs	r3, #0
 8012b84:	220a      	movs	r2, #10
 8012b86:	4658      	mov	r0, fp
 8012b88:	f000 f968 	bl	8012e5c <__multadd>
 8012b8c:	4681      	mov	r9, r0
 8012b8e:	e7ea      	b.n	8012b66 <_dtoa_r+0xb56>
 8012b90:	080170db 	.word	0x080170db
 8012b94:	0801705f 	.word	0x0801705f

08012b98 <_free_r>:
 8012b98:	b538      	push	{r3, r4, r5, lr}
 8012b9a:	4605      	mov	r5, r0
 8012b9c:	2900      	cmp	r1, #0
 8012b9e:	d041      	beq.n	8012c24 <_free_r+0x8c>
 8012ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ba4:	1f0c      	subs	r4, r1, #4
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	bfb8      	it	lt
 8012baa:	18e4      	addlt	r4, r4, r3
 8012bac:	f000 f8e8 	bl	8012d80 <__malloc_lock>
 8012bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8012c28 <_free_r+0x90>)
 8012bb2:	6813      	ldr	r3, [r2, #0]
 8012bb4:	b933      	cbnz	r3, 8012bc4 <_free_r+0x2c>
 8012bb6:	6063      	str	r3, [r4, #4]
 8012bb8:	6014      	str	r4, [r2, #0]
 8012bba:	4628      	mov	r0, r5
 8012bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bc0:	f000 b8e4 	b.w	8012d8c <__malloc_unlock>
 8012bc4:	42a3      	cmp	r3, r4
 8012bc6:	d908      	bls.n	8012bda <_free_r+0x42>
 8012bc8:	6820      	ldr	r0, [r4, #0]
 8012bca:	1821      	adds	r1, r4, r0
 8012bcc:	428b      	cmp	r3, r1
 8012bce:	bf01      	itttt	eq
 8012bd0:	6819      	ldreq	r1, [r3, #0]
 8012bd2:	685b      	ldreq	r3, [r3, #4]
 8012bd4:	1809      	addeq	r1, r1, r0
 8012bd6:	6021      	streq	r1, [r4, #0]
 8012bd8:	e7ed      	b.n	8012bb6 <_free_r+0x1e>
 8012bda:	461a      	mov	r2, r3
 8012bdc:	685b      	ldr	r3, [r3, #4]
 8012bde:	b10b      	cbz	r3, 8012be4 <_free_r+0x4c>
 8012be0:	42a3      	cmp	r3, r4
 8012be2:	d9fa      	bls.n	8012bda <_free_r+0x42>
 8012be4:	6811      	ldr	r1, [r2, #0]
 8012be6:	1850      	adds	r0, r2, r1
 8012be8:	42a0      	cmp	r0, r4
 8012bea:	d10b      	bne.n	8012c04 <_free_r+0x6c>
 8012bec:	6820      	ldr	r0, [r4, #0]
 8012bee:	4401      	add	r1, r0
 8012bf0:	1850      	adds	r0, r2, r1
 8012bf2:	4283      	cmp	r3, r0
 8012bf4:	6011      	str	r1, [r2, #0]
 8012bf6:	d1e0      	bne.n	8012bba <_free_r+0x22>
 8012bf8:	6818      	ldr	r0, [r3, #0]
 8012bfa:	685b      	ldr	r3, [r3, #4]
 8012bfc:	6053      	str	r3, [r2, #4]
 8012bfe:	4408      	add	r0, r1
 8012c00:	6010      	str	r0, [r2, #0]
 8012c02:	e7da      	b.n	8012bba <_free_r+0x22>
 8012c04:	d902      	bls.n	8012c0c <_free_r+0x74>
 8012c06:	230c      	movs	r3, #12
 8012c08:	602b      	str	r3, [r5, #0]
 8012c0a:	e7d6      	b.n	8012bba <_free_r+0x22>
 8012c0c:	6820      	ldr	r0, [r4, #0]
 8012c0e:	1821      	adds	r1, r4, r0
 8012c10:	428b      	cmp	r3, r1
 8012c12:	bf04      	itt	eq
 8012c14:	6819      	ldreq	r1, [r3, #0]
 8012c16:	685b      	ldreq	r3, [r3, #4]
 8012c18:	6063      	str	r3, [r4, #4]
 8012c1a:	bf04      	itt	eq
 8012c1c:	1809      	addeq	r1, r1, r0
 8012c1e:	6021      	streq	r1, [r4, #0]
 8012c20:	6054      	str	r4, [r2, #4]
 8012c22:	e7ca      	b.n	8012bba <_free_r+0x22>
 8012c24:	bd38      	pop	{r3, r4, r5, pc}
 8012c26:	bf00      	nop
 8012c28:	200026d4 	.word	0x200026d4

08012c2c <malloc>:
 8012c2c:	4b02      	ldr	r3, [pc, #8]	@ (8012c38 <malloc+0xc>)
 8012c2e:	4601      	mov	r1, r0
 8012c30:	6818      	ldr	r0, [r3, #0]
 8012c32:	f000 b825 	b.w	8012c80 <_malloc_r>
 8012c36:	bf00      	nop
 8012c38:	200001e4 	.word	0x200001e4

08012c3c <sbrk_aligned>:
 8012c3c:	b570      	push	{r4, r5, r6, lr}
 8012c3e:	4e0f      	ldr	r6, [pc, #60]	@ (8012c7c <sbrk_aligned+0x40>)
 8012c40:	460c      	mov	r4, r1
 8012c42:	6831      	ldr	r1, [r6, #0]
 8012c44:	4605      	mov	r5, r0
 8012c46:	b911      	cbnz	r1, 8012c4e <sbrk_aligned+0x12>
 8012c48:	f002 f988 	bl	8014f5c <_sbrk_r>
 8012c4c:	6030      	str	r0, [r6, #0]
 8012c4e:	4621      	mov	r1, r4
 8012c50:	4628      	mov	r0, r5
 8012c52:	f002 f983 	bl	8014f5c <_sbrk_r>
 8012c56:	1c43      	adds	r3, r0, #1
 8012c58:	d103      	bne.n	8012c62 <sbrk_aligned+0x26>
 8012c5a:	f04f 34ff 	mov.w	r4, #4294967295
 8012c5e:	4620      	mov	r0, r4
 8012c60:	bd70      	pop	{r4, r5, r6, pc}
 8012c62:	1cc4      	adds	r4, r0, #3
 8012c64:	f024 0403 	bic.w	r4, r4, #3
 8012c68:	42a0      	cmp	r0, r4
 8012c6a:	d0f8      	beq.n	8012c5e <sbrk_aligned+0x22>
 8012c6c:	1a21      	subs	r1, r4, r0
 8012c6e:	4628      	mov	r0, r5
 8012c70:	f002 f974 	bl	8014f5c <_sbrk_r>
 8012c74:	3001      	adds	r0, #1
 8012c76:	d1f2      	bne.n	8012c5e <sbrk_aligned+0x22>
 8012c78:	e7ef      	b.n	8012c5a <sbrk_aligned+0x1e>
 8012c7a:	bf00      	nop
 8012c7c:	200026d0 	.word	0x200026d0

08012c80 <_malloc_r>:
 8012c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c84:	1ccd      	adds	r5, r1, #3
 8012c86:	f025 0503 	bic.w	r5, r5, #3
 8012c8a:	3508      	adds	r5, #8
 8012c8c:	2d0c      	cmp	r5, #12
 8012c8e:	bf38      	it	cc
 8012c90:	250c      	movcc	r5, #12
 8012c92:	2d00      	cmp	r5, #0
 8012c94:	4606      	mov	r6, r0
 8012c96:	db01      	blt.n	8012c9c <_malloc_r+0x1c>
 8012c98:	42a9      	cmp	r1, r5
 8012c9a:	d904      	bls.n	8012ca6 <_malloc_r+0x26>
 8012c9c:	230c      	movs	r3, #12
 8012c9e:	6033      	str	r3, [r6, #0]
 8012ca0:	2000      	movs	r0, #0
 8012ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ca6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012d7c <_malloc_r+0xfc>
 8012caa:	f000 f869 	bl	8012d80 <__malloc_lock>
 8012cae:	f8d8 3000 	ldr.w	r3, [r8]
 8012cb2:	461c      	mov	r4, r3
 8012cb4:	bb44      	cbnz	r4, 8012d08 <_malloc_r+0x88>
 8012cb6:	4629      	mov	r1, r5
 8012cb8:	4630      	mov	r0, r6
 8012cba:	f7ff ffbf 	bl	8012c3c <sbrk_aligned>
 8012cbe:	1c43      	adds	r3, r0, #1
 8012cc0:	4604      	mov	r4, r0
 8012cc2:	d158      	bne.n	8012d76 <_malloc_r+0xf6>
 8012cc4:	f8d8 4000 	ldr.w	r4, [r8]
 8012cc8:	4627      	mov	r7, r4
 8012cca:	2f00      	cmp	r7, #0
 8012ccc:	d143      	bne.n	8012d56 <_malloc_r+0xd6>
 8012cce:	2c00      	cmp	r4, #0
 8012cd0:	d04b      	beq.n	8012d6a <_malloc_r+0xea>
 8012cd2:	6823      	ldr	r3, [r4, #0]
 8012cd4:	4639      	mov	r1, r7
 8012cd6:	4630      	mov	r0, r6
 8012cd8:	eb04 0903 	add.w	r9, r4, r3
 8012cdc:	f002 f93e 	bl	8014f5c <_sbrk_r>
 8012ce0:	4581      	cmp	r9, r0
 8012ce2:	d142      	bne.n	8012d6a <_malloc_r+0xea>
 8012ce4:	6821      	ldr	r1, [r4, #0]
 8012ce6:	1a6d      	subs	r5, r5, r1
 8012ce8:	4629      	mov	r1, r5
 8012cea:	4630      	mov	r0, r6
 8012cec:	f7ff ffa6 	bl	8012c3c <sbrk_aligned>
 8012cf0:	3001      	adds	r0, #1
 8012cf2:	d03a      	beq.n	8012d6a <_malloc_r+0xea>
 8012cf4:	6823      	ldr	r3, [r4, #0]
 8012cf6:	442b      	add	r3, r5
 8012cf8:	6023      	str	r3, [r4, #0]
 8012cfa:	f8d8 3000 	ldr.w	r3, [r8]
 8012cfe:	685a      	ldr	r2, [r3, #4]
 8012d00:	bb62      	cbnz	r2, 8012d5c <_malloc_r+0xdc>
 8012d02:	f8c8 7000 	str.w	r7, [r8]
 8012d06:	e00f      	b.n	8012d28 <_malloc_r+0xa8>
 8012d08:	6822      	ldr	r2, [r4, #0]
 8012d0a:	1b52      	subs	r2, r2, r5
 8012d0c:	d420      	bmi.n	8012d50 <_malloc_r+0xd0>
 8012d0e:	2a0b      	cmp	r2, #11
 8012d10:	d917      	bls.n	8012d42 <_malloc_r+0xc2>
 8012d12:	1961      	adds	r1, r4, r5
 8012d14:	42a3      	cmp	r3, r4
 8012d16:	6025      	str	r5, [r4, #0]
 8012d18:	bf18      	it	ne
 8012d1a:	6059      	strne	r1, [r3, #4]
 8012d1c:	6863      	ldr	r3, [r4, #4]
 8012d1e:	bf08      	it	eq
 8012d20:	f8c8 1000 	streq.w	r1, [r8]
 8012d24:	5162      	str	r2, [r4, r5]
 8012d26:	604b      	str	r3, [r1, #4]
 8012d28:	4630      	mov	r0, r6
 8012d2a:	f000 f82f 	bl	8012d8c <__malloc_unlock>
 8012d2e:	f104 000b 	add.w	r0, r4, #11
 8012d32:	1d23      	adds	r3, r4, #4
 8012d34:	f020 0007 	bic.w	r0, r0, #7
 8012d38:	1ac2      	subs	r2, r0, r3
 8012d3a:	bf1c      	itt	ne
 8012d3c:	1a1b      	subne	r3, r3, r0
 8012d3e:	50a3      	strne	r3, [r4, r2]
 8012d40:	e7af      	b.n	8012ca2 <_malloc_r+0x22>
 8012d42:	6862      	ldr	r2, [r4, #4]
 8012d44:	42a3      	cmp	r3, r4
 8012d46:	bf0c      	ite	eq
 8012d48:	f8c8 2000 	streq.w	r2, [r8]
 8012d4c:	605a      	strne	r2, [r3, #4]
 8012d4e:	e7eb      	b.n	8012d28 <_malloc_r+0xa8>
 8012d50:	4623      	mov	r3, r4
 8012d52:	6864      	ldr	r4, [r4, #4]
 8012d54:	e7ae      	b.n	8012cb4 <_malloc_r+0x34>
 8012d56:	463c      	mov	r4, r7
 8012d58:	687f      	ldr	r7, [r7, #4]
 8012d5a:	e7b6      	b.n	8012cca <_malloc_r+0x4a>
 8012d5c:	461a      	mov	r2, r3
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	42a3      	cmp	r3, r4
 8012d62:	d1fb      	bne.n	8012d5c <_malloc_r+0xdc>
 8012d64:	2300      	movs	r3, #0
 8012d66:	6053      	str	r3, [r2, #4]
 8012d68:	e7de      	b.n	8012d28 <_malloc_r+0xa8>
 8012d6a:	230c      	movs	r3, #12
 8012d6c:	6033      	str	r3, [r6, #0]
 8012d6e:	4630      	mov	r0, r6
 8012d70:	f000 f80c 	bl	8012d8c <__malloc_unlock>
 8012d74:	e794      	b.n	8012ca0 <_malloc_r+0x20>
 8012d76:	6005      	str	r5, [r0, #0]
 8012d78:	e7d6      	b.n	8012d28 <_malloc_r+0xa8>
 8012d7a:	bf00      	nop
 8012d7c:	200026d4 	.word	0x200026d4

08012d80 <__malloc_lock>:
 8012d80:	4801      	ldr	r0, [pc, #4]	@ (8012d88 <__malloc_lock+0x8>)
 8012d82:	f7ff b8a4 	b.w	8011ece <__retarget_lock_acquire_recursive>
 8012d86:	bf00      	nop
 8012d88:	200026cc 	.word	0x200026cc

08012d8c <__malloc_unlock>:
 8012d8c:	4801      	ldr	r0, [pc, #4]	@ (8012d94 <__malloc_unlock+0x8>)
 8012d8e:	f7ff b89f 	b.w	8011ed0 <__retarget_lock_release_recursive>
 8012d92:	bf00      	nop
 8012d94:	200026cc 	.word	0x200026cc

08012d98 <_Balloc>:
 8012d98:	b570      	push	{r4, r5, r6, lr}
 8012d9a:	69c6      	ldr	r6, [r0, #28]
 8012d9c:	4604      	mov	r4, r0
 8012d9e:	460d      	mov	r5, r1
 8012da0:	b976      	cbnz	r6, 8012dc0 <_Balloc+0x28>
 8012da2:	2010      	movs	r0, #16
 8012da4:	f7ff ff42 	bl	8012c2c <malloc>
 8012da8:	4602      	mov	r2, r0
 8012daa:	61e0      	str	r0, [r4, #28]
 8012dac:	b920      	cbnz	r0, 8012db8 <_Balloc+0x20>
 8012dae:	4b18      	ldr	r3, [pc, #96]	@ (8012e10 <_Balloc+0x78>)
 8012db0:	4818      	ldr	r0, [pc, #96]	@ (8012e14 <_Balloc+0x7c>)
 8012db2:	216b      	movs	r1, #107	@ 0x6b
 8012db4:	f002 f8ec 	bl	8014f90 <__assert_func>
 8012db8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012dbc:	6006      	str	r6, [r0, #0]
 8012dbe:	60c6      	str	r6, [r0, #12]
 8012dc0:	69e6      	ldr	r6, [r4, #28]
 8012dc2:	68f3      	ldr	r3, [r6, #12]
 8012dc4:	b183      	cbz	r3, 8012de8 <_Balloc+0x50>
 8012dc6:	69e3      	ldr	r3, [r4, #28]
 8012dc8:	68db      	ldr	r3, [r3, #12]
 8012dca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012dce:	b9b8      	cbnz	r0, 8012e00 <_Balloc+0x68>
 8012dd0:	2101      	movs	r1, #1
 8012dd2:	fa01 f605 	lsl.w	r6, r1, r5
 8012dd6:	1d72      	adds	r2, r6, #5
 8012dd8:	0092      	lsls	r2, r2, #2
 8012dda:	4620      	mov	r0, r4
 8012ddc:	f002 f8f6 	bl	8014fcc <_calloc_r>
 8012de0:	b160      	cbz	r0, 8012dfc <_Balloc+0x64>
 8012de2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012de6:	e00e      	b.n	8012e06 <_Balloc+0x6e>
 8012de8:	2221      	movs	r2, #33	@ 0x21
 8012dea:	2104      	movs	r1, #4
 8012dec:	4620      	mov	r0, r4
 8012dee:	f002 f8ed 	bl	8014fcc <_calloc_r>
 8012df2:	69e3      	ldr	r3, [r4, #28]
 8012df4:	60f0      	str	r0, [r6, #12]
 8012df6:	68db      	ldr	r3, [r3, #12]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d1e4      	bne.n	8012dc6 <_Balloc+0x2e>
 8012dfc:	2000      	movs	r0, #0
 8012dfe:	bd70      	pop	{r4, r5, r6, pc}
 8012e00:	6802      	ldr	r2, [r0, #0]
 8012e02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012e06:	2300      	movs	r3, #0
 8012e08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012e0c:	e7f7      	b.n	8012dfe <_Balloc+0x66>
 8012e0e:	bf00      	nop
 8012e10:	0801706c 	.word	0x0801706c
 8012e14:	080170ec 	.word	0x080170ec

08012e18 <_Bfree>:
 8012e18:	b570      	push	{r4, r5, r6, lr}
 8012e1a:	69c6      	ldr	r6, [r0, #28]
 8012e1c:	4605      	mov	r5, r0
 8012e1e:	460c      	mov	r4, r1
 8012e20:	b976      	cbnz	r6, 8012e40 <_Bfree+0x28>
 8012e22:	2010      	movs	r0, #16
 8012e24:	f7ff ff02 	bl	8012c2c <malloc>
 8012e28:	4602      	mov	r2, r0
 8012e2a:	61e8      	str	r0, [r5, #28]
 8012e2c:	b920      	cbnz	r0, 8012e38 <_Bfree+0x20>
 8012e2e:	4b09      	ldr	r3, [pc, #36]	@ (8012e54 <_Bfree+0x3c>)
 8012e30:	4809      	ldr	r0, [pc, #36]	@ (8012e58 <_Bfree+0x40>)
 8012e32:	218f      	movs	r1, #143	@ 0x8f
 8012e34:	f002 f8ac 	bl	8014f90 <__assert_func>
 8012e38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e3c:	6006      	str	r6, [r0, #0]
 8012e3e:	60c6      	str	r6, [r0, #12]
 8012e40:	b13c      	cbz	r4, 8012e52 <_Bfree+0x3a>
 8012e42:	69eb      	ldr	r3, [r5, #28]
 8012e44:	6862      	ldr	r2, [r4, #4]
 8012e46:	68db      	ldr	r3, [r3, #12]
 8012e48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012e4c:	6021      	str	r1, [r4, #0]
 8012e4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012e52:	bd70      	pop	{r4, r5, r6, pc}
 8012e54:	0801706c 	.word	0x0801706c
 8012e58:	080170ec 	.word	0x080170ec

08012e5c <__multadd>:
 8012e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e60:	690d      	ldr	r5, [r1, #16]
 8012e62:	4607      	mov	r7, r0
 8012e64:	460c      	mov	r4, r1
 8012e66:	461e      	mov	r6, r3
 8012e68:	f101 0c14 	add.w	ip, r1, #20
 8012e6c:	2000      	movs	r0, #0
 8012e6e:	f8dc 3000 	ldr.w	r3, [ip]
 8012e72:	b299      	uxth	r1, r3
 8012e74:	fb02 6101 	mla	r1, r2, r1, r6
 8012e78:	0c1e      	lsrs	r6, r3, #16
 8012e7a:	0c0b      	lsrs	r3, r1, #16
 8012e7c:	fb02 3306 	mla	r3, r2, r6, r3
 8012e80:	b289      	uxth	r1, r1
 8012e82:	3001      	adds	r0, #1
 8012e84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012e88:	4285      	cmp	r5, r0
 8012e8a:	f84c 1b04 	str.w	r1, [ip], #4
 8012e8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012e92:	dcec      	bgt.n	8012e6e <__multadd+0x12>
 8012e94:	b30e      	cbz	r6, 8012eda <__multadd+0x7e>
 8012e96:	68a3      	ldr	r3, [r4, #8]
 8012e98:	42ab      	cmp	r3, r5
 8012e9a:	dc19      	bgt.n	8012ed0 <__multadd+0x74>
 8012e9c:	6861      	ldr	r1, [r4, #4]
 8012e9e:	4638      	mov	r0, r7
 8012ea0:	3101      	adds	r1, #1
 8012ea2:	f7ff ff79 	bl	8012d98 <_Balloc>
 8012ea6:	4680      	mov	r8, r0
 8012ea8:	b928      	cbnz	r0, 8012eb6 <__multadd+0x5a>
 8012eaa:	4602      	mov	r2, r0
 8012eac:	4b0c      	ldr	r3, [pc, #48]	@ (8012ee0 <__multadd+0x84>)
 8012eae:	480d      	ldr	r0, [pc, #52]	@ (8012ee4 <__multadd+0x88>)
 8012eb0:	21ba      	movs	r1, #186	@ 0xba
 8012eb2:	f002 f86d 	bl	8014f90 <__assert_func>
 8012eb6:	6922      	ldr	r2, [r4, #16]
 8012eb8:	3202      	adds	r2, #2
 8012eba:	f104 010c 	add.w	r1, r4, #12
 8012ebe:	0092      	lsls	r2, r2, #2
 8012ec0:	300c      	adds	r0, #12
 8012ec2:	f7ff f806 	bl	8011ed2 <memcpy>
 8012ec6:	4621      	mov	r1, r4
 8012ec8:	4638      	mov	r0, r7
 8012eca:	f7ff ffa5 	bl	8012e18 <_Bfree>
 8012ece:	4644      	mov	r4, r8
 8012ed0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012ed4:	3501      	adds	r5, #1
 8012ed6:	615e      	str	r6, [r3, #20]
 8012ed8:	6125      	str	r5, [r4, #16]
 8012eda:	4620      	mov	r0, r4
 8012edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ee0:	080170db 	.word	0x080170db
 8012ee4:	080170ec 	.word	0x080170ec

08012ee8 <__s2b>:
 8012ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012eec:	460c      	mov	r4, r1
 8012eee:	4615      	mov	r5, r2
 8012ef0:	461f      	mov	r7, r3
 8012ef2:	2209      	movs	r2, #9
 8012ef4:	3308      	adds	r3, #8
 8012ef6:	4606      	mov	r6, r0
 8012ef8:	fb93 f3f2 	sdiv	r3, r3, r2
 8012efc:	2100      	movs	r1, #0
 8012efe:	2201      	movs	r2, #1
 8012f00:	429a      	cmp	r2, r3
 8012f02:	db09      	blt.n	8012f18 <__s2b+0x30>
 8012f04:	4630      	mov	r0, r6
 8012f06:	f7ff ff47 	bl	8012d98 <_Balloc>
 8012f0a:	b940      	cbnz	r0, 8012f1e <__s2b+0x36>
 8012f0c:	4602      	mov	r2, r0
 8012f0e:	4b19      	ldr	r3, [pc, #100]	@ (8012f74 <__s2b+0x8c>)
 8012f10:	4819      	ldr	r0, [pc, #100]	@ (8012f78 <__s2b+0x90>)
 8012f12:	21d3      	movs	r1, #211	@ 0xd3
 8012f14:	f002 f83c 	bl	8014f90 <__assert_func>
 8012f18:	0052      	lsls	r2, r2, #1
 8012f1a:	3101      	adds	r1, #1
 8012f1c:	e7f0      	b.n	8012f00 <__s2b+0x18>
 8012f1e:	9b08      	ldr	r3, [sp, #32]
 8012f20:	6143      	str	r3, [r0, #20]
 8012f22:	2d09      	cmp	r5, #9
 8012f24:	f04f 0301 	mov.w	r3, #1
 8012f28:	6103      	str	r3, [r0, #16]
 8012f2a:	dd16      	ble.n	8012f5a <__s2b+0x72>
 8012f2c:	f104 0909 	add.w	r9, r4, #9
 8012f30:	46c8      	mov	r8, r9
 8012f32:	442c      	add	r4, r5
 8012f34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012f38:	4601      	mov	r1, r0
 8012f3a:	3b30      	subs	r3, #48	@ 0x30
 8012f3c:	220a      	movs	r2, #10
 8012f3e:	4630      	mov	r0, r6
 8012f40:	f7ff ff8c 	bl	8012e5c <__multadd>
 8012f44:	45a0      	cmp	r8, r4
 8012f46:	d1f5      	bne.n	8012f34 <__s2b+0x4c>
 8012f48:	f1a5 0408 	sub.w	r4, r5, #8
 8012f4c:	444c      	add	r4, r9
 8012f4e:	1b2d      	subs	r5, r5, r4
 8012f50:	1963      	adds	r3, r4, r5
 8012f52:	42bb      	cmp	r3, r7
 8012f54:	db04      	blt.n	8012f60 <__s2b+0x78>
 8012f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f5a:	340a      	adds	r4, #10
 8012f5c:	2509      	movs	r5, #9
 8012f5e:	e7f6      	b.n	8012f4e <__s2b+0x66>
 8012f60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012f64:	4601      	mov	r1, r0
 8012f66:	3b30      	subs	r3, #48	@ 0x30
 8012f68:	220a      	movs	r2, #10
 8012f6a:	4630      	mov	r0, r6
 8012f6c:	f7ff ff76 	bl	8012e5c <__multadd>
 8012f70:	e7ee      	b.n	8012f50 <__s2b+0x68>
 8012f72:	bf00      	nop
 8012f74:	080170db 	.word	0x080170db
 8012f78:	080170ec 	.word	0x080170ec

08012f7c <__hi0bits>:
 8012f7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012f80:	4603      	mov	r3, r0
 8012f82:	bf36      	itet	cc
 8012f84:	0403      	lslcc	r3, r0, #16
 8012f86:	2000      	movcs	r0, #0
 8012f88:	2010      	movcc	r0, #16
 8012f8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012f8e:	bf3c      	itt	cc
 8012f90:	021b      	lslcc	r3, r3, #8
 8012f92:	3008      	addcc	r0, #8
 8012f94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012f98:	bf3c      	itt	cc
 8012f9a:	011b      	lslcc	r3, r3, #4
 8012f9c:	3004      	addcc	r0, #4
 8012f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012fa2:	bf3c      	itt	cc
 8012fa4:	009b      	lslcc	r3, r3, #2
 8012fa6:	3002      	addcc	r0, #2
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	db05      	blt.n	8012fb8 <__hi0bits+0x3c>
 8012fac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012fb0:	f100 0001 	add.w	r0, r0, #1
 8012fb4:	bf08      	it	eq
 8012fb6:	2020      	moveq	r0, #32
 8012fb8:	4770      	bx	lr

08012fba <__lo0bits>:
 8012fba:	6803      	ldr	r3, [r0, #0]
 8012fbc:	4602      	mov	r2, r0
 8012fbe:	f013 0007 	ands.w	r0, r3, #7
 8012fc2:	d00b      	beq.n	8012fdc <__lo0bits+0x22>
 8012fc4:	07d9      	lsls	r1, r3, #31
 8012fc6:	d421      	bmi.n	801300c <__lo0bits+0x52>
 8012fc8:	0798      	lsls	r0, r3, #30
 8012fca:	bf49      	itett	mi
 8012fcc:	085b      	lsrmi	r3, r3, #1
 8012fce:	089b      	lsrpl	r3, r3, #2
 8012fd0:	2001      	movmi	r0, #1
 8012fd2:	6013      	strmi	r3, [r2, #0]
 8012fd4:	bf5c      	itt	pl
 8012fd6:	6013      	strpl	r3, [r2, #0]
 8012fd8:	2002      	movpl	r0, #2
 8012fda:	4770      	bx	lr
 8012fdc:	b299      	uxth	r1, r3
 8012fde:	b909      	cbnz	r1, 8012fe4 <__lo0bits+0x2a>
 8012fe0:	0c1b      	lsrs	r3, r3, #16
 8012fe2:	2010      	movs	r0, #16
 8012fe4:	b2d9      	uxtb	r1, r3
 8012fe6:	b909      	cbnz	r1, 8012fec <__lo0bits+0x32>
 8012fe8:	3008      	adds	r0, #8
 8012fea:	0a1b      	lsrs	r3, r3, #8
 8012fec:	0719      	lsls	r1, r3, #28
 8012fee:	bf04      	itt	eq
 8012ff0:	091b      	lsreq	r3, r3, #4
 8012ff2:	3004      	addeq	r0, #4
 8012ff4:	0799      	lsls	r1, r3, #30
 8012ff6:	bf04      	itt	eq
 8012ff8:	089b      	lsreq	r3, r3, #2
 8012ffa:	3002      	addeq	r0, #2
 8012ffc:	07d9      	lsls	r1, r3, #31
 8012ffe:	d403      	bmi.n	8013008 <__lo0bits+0x4e>
 8013000:	085b      	lsrs	r3, r3, #1
 8013002:	f100 0001 	add.w	r0, r0, #1
 8013006:	d003      	beq.n	8013010 <__lo0bits+0x56>
 8013008:	6013      	str	r3, [r2, #0]
 801300a:	4770      	bx	lr
 801300c:	2000      	movs	r0, #0
 801300e:	4770      	bx	lr
 8013010:	2020      	movs	r0, #32
 8013012:	4770      	bx	lr

08013014 <__i2b>:
 8013014:	b510      	push	{r4, lr}
 8013016:	460c      	mov	r4, r1
 8013018:	2101      	movs	r1, #1
 801301a:	f7ff febd 	bl	8012d98 <_Balloc>
 801301e:	4602      	mov	r2, r0
 8013020:	b928      	cbnz	r0, 801302e <__i2b+0x1a>
 8013022:	4b05      	ldr	r3, [pc, #20]	@ (8013038 <__i2b+0x24>)
 8013024:	4805      	ldr	r0, [pc, #20]	@ (801303c <__i2b+0x28>)
 8013026:	f240 1145 	movw	r1, #325	@ 0x145
 801302a:	f001 ffb1 	bl	8014f90 <__assert_func>
 801302e:	2301      	movs	r3, #1
 8013030:	6144      	str	r4, [r0, #20]
 8013032:	6103      	str	r3, [r0, #16]
 8013034:	bd10      	pop	{r4, pc}
 8013036:	bf00      	nop
 8013038:	080170db 	.word	0x080170db
 801303c:	080170ec 	.word	0x080170ec

08013040 <__multiply>:
 8013040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013044:	4614      	mov	r4, r2
 8013046:	690a      	ldr	r2, [r1, #16]
 8013048:	6923      	ldr	r3, [r4, #16]
 801304a:	429a      	cmp	r2, r3
 801304c:	bfa8      	it	ge
 801304e:	4623      	movge	r3, r4
 8013050:	460f      	mov	r7, r1
 8013052:	bfa4      	itt	ge
 8013054:	460c      	movge	r4, r1
 8013056:	461f      	movge	r7, r3
 8013058:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801305c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013060:	68a3      	ldr	r3, [r4, #8]
 8013062:	6861      	ldr	r1, [r4, #4]
 8013064:	eb0a 0609 	add.w	r6, sl, r9
 8013068:	42b3      	cmp	r3, r6
 801306a:	b085      	sub	sp, #20
 801306c:	bfb8      	it	lt
 801306e:	3101      	addlt	r1, #1
 8013070:	f7ff fe92 	bl	8012d98 <_Balloc>
 8013074:	b930      	cbnz	r0, 8013084 <__multiply+0x44>
 8013076:	4602      	mov	r2, r0
 8013078:	4b44      	ldr	r3, [pc, #272]	@ (801318c <__multiply+0x14c>)
 801307a:	4845      	ldr	r0, [pc, #276]	@ (8013190 <__multiply+0x150>)
 801307c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013080:	f001 ff86 	bl	8014f90 <__assert_func>
 8013084:	f100 0514 	add.w	r5, r0, #20
 8013088:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801308c:	462b      	mov	r3, r5
 801308e:	2200      	movs	r2, #0
 8013090:	4543      	cmp	r3, r8
 8013092:	d321      	bcc.n	80130d8 <__multiply+0x98>
 8013094:	f107 0114 	add.w	r1, r7, #20
 8013098:	f104 0214 	add.w	r2, r4, #20
 801309c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80130a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80130a4:	9302      	str	r3, [sp, #8]
 80130a6:	1b13      	subs	r3, r2, r4
 80130a8:	3b15      	subs	r3, #21
 80130aa:	f023 0303 	bic.w	r3, r3, #3
 80130ae:	3304      	adds	r3, #4
 80130b0:	f104 0715 	add.w	r7, r4, #21
 80130b4:	42ba      	cmp	r2, r7
 80130b6:	bf38      	it	cc
 80130b8:	2304      	movcc	r3, #4
 80130ba:	9301      	str	r3, [sp, #4]
 80130bc:	9b02      	ldr	r3, [sp, #8]
 80130be:	9103      	str	r1, [sp, #12]
 80130c0:	428b      	cmp	r3, r1
 80130c2:	d80c      	bhi.n	80130de <__multiply+0x9e>
 80130c4:	2e00      	cmp	r6, #0
 80130c6:	dd03      	ble.n	80130d0 <__multiply+0x90>
 80130c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d05b      	beq.n	8013188 <__multiply+0x148>
 80130d0:	6106      	str	r6, [r0, #16]
 80130d2:	b005      	add	sp, #20
 80130d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130d8:	f843 2b04 	str.w	r2, [r3], #4
 80130dc:	e7d8      	b.n	8013090 <__multiply+0x50>
 80130de:	f8b1 a000 	ldrh.w	sl, [r1]
 80130e2:	f1ba 0f00 	cmp.w	sl, #0
 80130e6:	d024      	beq.n	8013132 <__multiply+0xf2>
 80130e8:	f104 0e14 	add.w	lr, r4, #20
 80130ec:	46a9      	mov	r9, r5
 80130ee:	f04f 0c00 	mov.w	ip, #0
 80130f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80130f6:	f8d9 3000 	ldr.w	r3, [r9]
 80130fa:	fa1f fb87 	uxth.w	fp, r7
 80130fe:	b29b      	uxth	r3, r3
 8013100:	fb0a 330b 	mla	r3, sl, fp, r3
 8013104:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013108:	f8d9 7000 	ldr.w	r7, [r9]
 801310c:	4463      	add	r3, ip
 801310e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013112:	fb0a c70b 	mla	r7, sl, fp, ip
 8013116:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801311a:	b29b      	uxth	r3, r3
 801311c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013120:	4572      	cmp	r2, lr
 8013122:	f849 3b04 	str.w	r3, [r9], #4
 8013126:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801312a:	d8e2      	bhi.n	80130f2 <__multiply+0xb2>
 801312c:	9b01      	ldr	r3, [sp, #4]
 801312e:	f845 c003 	str.w	ip, [r5, r3]
 8013132:	9b03      	ldr	r3, [sp, #12]
 8013134:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013138:	3104      	adds	r1, #4
 801313a:	f1b9 0f00 	cmp.w	r9, #0
 801313e:	d021      	beq.n	8013184 <__multiply+0x144>
 8013140:	682b      	ldr	r3, [r5, #0]
 8013142:	f104 0c14 	add.w	ip, r4, #20
 8013146:	46ae      	mov	lr, r5
 8013148:	f04f 0a00 	mov.w	sl, #0
 801314c:	f8bc b000 	ldrh.w	fp, [ip]
 8013150:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013154:	fb09 770b 	mla	r7, r9, fp, r7
 8013158:	4457      	add	r7, sl
 801315a:	b29b      	uxth	r3, r3
 801315c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013160:	f84e 3b04 	str.w	r3, [lr], #4
 8013164:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013168:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801316c:	f8be 3000 	ldrh.w	r3, [lr]
 8013170:	fb09 330a 	mla	r3, r9, sl, r3
 8013174:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013178:	4562      	cmp	r2, ip
 801317a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801317e:	d8e5      	bhi.n	801314c <__multiply+0x10c>
 8013180:	9f01      	ldr	r7, [sp, #4]
 8013182:	51eb      	str	r3, [r5, r7]
 8013184:	3504      	adds	r5, #4
 8013186:	e799      	b.n	80130bc <__multiply+0x7c>
 8013188:	3e01      	subs	r6, #1
 801318a:	e79b      	b.n	80130c4 <__multiply+0x84>
 801318c:	080170db 	.word	0x080170db
 8013190:	080170ec 	.word	0x080170ec

08013194 <__pow5mult>:
 8013194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013198:	4615      	mov	r5, r2
 801319a:	f012 0203 	ands.w	r2, r2, #3
 801319e:	4607      	mov	r7, r0
 80131a0:	460e      	mov	r6, r1
 80131a2:	d007      	beq.n	80131b4 <__pow5mult+0x20>
 80131a4:	4c25      	ldr	r4, [pc, #148]	@ (801323c <__pow5mult+0xa8>)
 80131a6:	3a01      	subs	r2, #1
 80131a8:	2300      	movs	r3, #0
 80131aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80131ae:	f7ff fe55 	bl	8012e5c <__multadd>
 80131b2:	4606      	mov	r6, r0
 80131b4:	10ad      	asrs	r5, r5, #2
 80131b6:	d03d      	beq.n	8013234 <__pow5mult+0xa0>
 80131b8:	69fc      	ldr	r4, [r7, #28]
 80131ba:	b97c      	cbnz	r4, 80131dc <__pow5mult+0x48>
 80131bc:	2010      	movs	r0, #16
 80131be:	f7ff fd35 	bl	8012c2c <malloc>
 80131c2:	4602      	mov	r2, r0
 80131c4:	61f8      	str	r0, [r7, #28]
 80131c6:	b928      	cbnz	r0, 80131d4 <__pow5mult+0x40>
 80131c8:	4b1d      	ldr	r3, [pc, #116]	@ (8013240 <__pow5mult+0xac>)
 80131ca:	481e      	ldr	r0, [pc, #120]	@ (8013244 <__pow5mult+0xb0>)
 80131cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80131d0:	f001 fede 	bl	8014f90 <__assert_func>
 80131d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80131d8:	6004      	str	r4, [r0, #0]
 80131da:	60c4      	str	r4, [r0, #12]
 80131dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80131e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80131e4:	b94c      	cbnz	r4, 80131fa <__pow5mult+0x66>
 80131e6:	f240 2171 	movw	r1, #625	@ 0x271
 80131ea:	4638      	mov	r0, r7
 80131ec:	f7ff ff12 	bl	8013014 <__i2b>
 80131f0:	2300      	movs	r3, #0
 80131f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80131f6:	4604      	mov	r4, r0
 80131f8:	6003      	str	r3, [r0, #0]
 80131fa:	f04f 0900 	mov.w	r9, #0
 80131fe:	07eb      	lsls	r3, r5, #31
 8013200:	d50a      	bpl.n	8013218 <__pow5mult+0x84>
 8013202:	4631      	mov	r1, r6
 8013204:	4622      	mov	r2, r4
 8013206:	4638      	mov	r0, r7
 8013208:	f7ff ff1a 	bl	8013040 <__multiply>
 801320c:	4631      	mov	r1, r6
 801320e:	4680      	mov	r8, r0
 8013210:	4638      	mov	r0, r7
 8013212:	f7ff fe01 	bl	8012e18 <_Bfree>
 8013216:	4646      	mov	r6, r8
 8013218:	106d      	asrs	r5, r5, #1
 801321a:	d00b      	beq.n	8013234 <__pow5mult+0xa0>
 801321c:	6820      	ldr	r0, [r4, #0]
 801321e:	b938      	cbnz	r0, 8013230 <__pow5mult+0x9c>
 8013220:	4622      	mov	r2, r4
 8013222:	4621      	mov	r1, r4
 8013224:	4638      	mov	r0, r7
 8013226:	f7ff ff0b 	bl	8013040 <__multiply>
 801322a:	6020      	str	r0, [r4, #0]
 801322c:	f8c0 9000 	str.w	r9, [r0]
 8013230:	4604      	mov	r4, r0
 8013232:	e7e4      	b.n	80131fe <__pow5mult+0x6a>
 8013234:	4630      	mov	r0, r6
 8013236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801323a:	bf00      	nop
 801323c:	08017148 	.word	0x08017148
 8013240:	0801706c 	.word	0x0801706c
 8013244:	080170ec 	.word	0x080170ec

08013248 <__lshift>:
 8013248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801324c:	460c      	mov	r4, r1
 801324e:	6849      	ldr	r1, [r1, #4]
 8013250:	6923      	ldr	r3, [r4, #16]
 8013252:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013256:	68a3      	ldr	r3, [r4, #8]
 8013258:	4607      	mov	r7, r0
 801325a:	4691      	mov	r9, r2
 801325c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013260:	f108 0601 	add.w	r6, r8, #1
 8013264:	42b3      	cmp	r3, r6
 8013266:	db0b      	blt.n	8013280 <__lshift+0x38>
 8013268:	4638      	mov	r0, r7
 801326a:	f7ff fd95 	bl	8012d98 <_Balloc>
 801326e:	4605      	mov	r5, r0
 8013270:	b948      	cbnz	r0, 8013286 <__lshift+0x3e>
 8013272:	4602      	mov	r2, r0
 8013274:	4b28      	ldr	r3, [pc, #160]	@ (8013318 <__lshift+0xd0>)
 8013276:	4829      	ldr	r0, [pc, #164]	@ (801331c <__lshift+0xd4>)
 8013278:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801327c:	f001 fe88 	bl	8014f90 <__assert_func>
 8013280:	3101      	adds	r1, #1
 8013282:	005b      	lsls	r3, r3, #1
 8013284:	e7ee      	b.n	8013264 <__lshift+0x1c>
 8013286:	2300      	movs	r3, #0
 8013288:	f100 0114 	add.w	r1, r0, #20
 801328c:	f100 0210 	add.w	r2, r0, #16
 8013290:	4618      	mov	r0, r3
 8013292:	4553      	cmp	r3, sl
 8013294:	db33      	blt.n	80132fe <__lshift+0xb6>
 8013296:	6920      	ldr	r0, [r4, #16]
 8013298:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801329c:	f104 0314 	add.w	r3, r4, #20
 80132a0:	f019 091f 	ands.w	r9, r9, #31
 80132a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80132a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80132ac:	d02b      	beq.n	8013306 <__lshift+0xbe>
 80132ae:	f1c9 0e20 	rsb	lr, r9, #32
 80132b2:	468a      	mov	sl, r1
 80132b4:	2200      	movs	r2, #0
 80132b6:	6818      	ldr	r0, [r3, #0]
 80132b8:	fa00 f009 	lsl.w	r0, r0, r9
 80132bc:	4310      	orrs	r0, r2
 80132be:	f84a 0b04 	str.w	r0, [sl], #4
 80132c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80132c6:	459c      	cmp	ip, r3
 80132c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80132cc:	d8f3      	bhi.n	80132b6 <__lshift+0x6e>
 80132ce:	ebac 0304 	sub.w	r3, ip, r4
 80132d2:	3b15      	subs	r3, #21
 80132d4:	f023 0303 	bic.w	r3, r3, #3
 80132d8:	3304      	adds	r3, #4
 80132da:	f104 0015 	add.w	r0, r4, #21
 80132de:	4584      	cmp	ip, r0
 80132e0:	bf38      	it	cc
 80132e2:	2304      	movcc	r3, #4
 80132e4:	50ca      	str	r2, [r1, r3]
 80132e6:	b10a      	cbz	r2, 80132ec <__lshift+0xa4>
 80132e8:	f108 0602 	add.w	r6, r8, #2
 80132ec:	3e01      	subs	r6, #1
 80132ee:	4638      	mov	r0, r7
 80132f0:	612e      	str	r6, [r5, #16]
 80132f2:	4621      	mov	r1, r4
 80132f4:	f7ff fd90 	bl	8012e18 <_Bfree>
 80132f8:	4628      	mov	r0, r5
 80132fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8013302:	3301      	adds	r3, #1
 8013304:	e7c5      	b.n	8013292 <__lshift+0x4a>
 8013306:	3904      	subs	r1, #4
 8013308:	f853 2b04 	ldr.w	r2, [r3], #4
 801330c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013310:	459c      	cmp	ip, r3
 8013312:	d8f9      	bhi.n	8013308 <__lshift+0xc0>
 8013314:	e7ea      	b.n	80132ec <__lshift+0xa4>
 8013316:	bf00      	nop
 8013318:	080170db 	.word	0x080170db
 801331c:	080170ec 	.word	0x080170ec

08013320 <__mcmp>:
 8013320:	690a      	ldr	r2, [r1, #16]
 8013322:	4603      	mov	r3, r0
 8013324:	6900      	ldr	r0, [r0, #16]
 8013326:	1a80      	subs	r0, r0, r2
 8013328:	b530      	push	{r4, r5, lr}
 801332a:	d10e      	bne.n	801334a <__mcmp+0x2a>
 801332c:	3314      	adds	r3, #20
 801332e:	3114      	adds	r1, #20
 8013330:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013334:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013338:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801333c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013340:	4295      	cmp	r5, r2
 8013342:	d003      	beq.n	801334c <__mcmp+0x2c>
 8013344:	d205      	bcs.n	8013352 <__mcmp+0x32>
 8013346:	f04f 30ff 	mov.w	r0, #4294967295
 801334a:	bd30      	pop	{r4, r5, pc}
 801334c:	42a3      	cmp	r3, r4
 801334e:	d3f3      	bcc.n	8013338 <__mcmp+0x18>
 8013350:	e7fb      	b.n	801334a <__mcmp+0x2a>
 8013352:	2001      	movs	r0, #1
 8013354:	e7f9      	b.n	801334a <__mcmp+0x2a>
	...

08013358 <__mdiff>:
 8013358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801335c:	4689      	mov	r9, r1
 801335e:	4606      	mov	r6, r0
 8013360:	4611      	mov	r1, r2
 8013362:	4648      	mov	r0, r9
 8013364:	4614      	mov	r4, r2
 8013366:	f7ff ffdb 	bl	8013320 <__mcmp>
 801336a:	1e05      	subs	r5, r0, #0
 801336c:	d112      	bne.n	8013394 <__mdiff+0x3c>
 801336e:	4629      	mov	r1, r5
 8013370:	4630      	mov	r0, r6
 8013372:	f7ff fd11 	bl	8012d98 <_Balloc>
 8013376:	4602      	mov	r2, r0
 8013378:	b928      	cbnz	r0, 8013386 <__mdiff+0x2e>
 801337a:	4b3f      	ldr	r3, [pc, #252]	@ (8013478 <__mdiff+0x120>)
 801337c:	f240 2137 	movw	r1, #567	@ 0x237
 8013380:	483e      	ldr	r0, [pc, #248]	@ (801347c <__mdiff+0x124>)
 8013382:	f001 fe05 	bl	8014f90 <__assert_func>
 8013386:	2301      	movs	r3, #1
 8013388:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801338c:	4610      	mov	r0, r2
 801338e:	b003      	add	sp, #12
 8013390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013394:	bfbc      	itt	lt
 8013396:	464b      	movlt	r3, r9
 8013398:	46a1      	movlt	r9, r4
 801339a:	4630      	mov	r0, r6
 801339c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80133a0:	bfba      	itte	lt
 80133a2:	461c      	movlt	r4, r3
 80133a4:	2501      	movlt	r5, #1
 80133a6:	2500      	movge	r5, #0
 80133a8:	f7ff fcf6 	bl	8012d98 <_Balloc>
 80133ac:	4602      	mov	r2, r0
 80133ae:	b918      	cbnz	r0, 80133b8 <__mdiff+0x60>
 80133b0:	4b31      	ldr	r3, [pc, #196]	@ (8013478 <__mdiff+0x120>)
 80133b2:	f240 2145 	movw	r1, #581	@ 0x245
 80133b6:	e7e3      	b.n	8013380 <__mdiff+0x28>
 80133b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80133bc:	6926      	ldr	r6, [r4, #16]
 80133be:	60c5      	str	r5, [r0, #12]
 80133c0:	f109 0310 	add.w	r3, r9, #16
 80133c4:	f109 0514 	add.w	r5, r9, #20
 80133c8:	f104 0e14 	add.w	lr, r4, #20
 80133cc:	f100 0b14 	add.w	fp, r0, #20
 80133d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80133d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80133d8:	9301      	str	r3, [sp, #4]
 80133da:	46d9      	mov	r9, fp
 80133dc:	f04f 0c00 	mov.w	ip, #0
 80133e0:	9b01      	ldr	r3, [sp, #4]
 80133e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80133e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80133ea:	9301      	str	r3, [sp, #4]
 80133ec:	fa1f f38a 	uxth.w	r3, sl
 80133f0:	4619      	mov	r1, r3
 80133f2:	b283      	uxth	r3, r0
 80133f4:	1acb      	subs	r3, r1, r3
 80133f6:	0c00      	lsrs	r0, r0, #16
 80133f8:	4463      	add	r3, ip
 80133fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80133fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013402:	b29b      	uxth	r3, r3
 8013404:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013408:	4576      	cmp	r6, lr
 801340a:	f849 3b04 	str.w	r3, [r9], #4
 801340e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013412:	d8e5      	bhi.n	80133e0 <__mdiff+0x88>
 8013414:	1b33      	subs	r3, r6, r4
 8013416:	3b15      	subs	r3, #21
 8013418:	f023 0303 	bic.w	r3, r3, #3
 801341c:	3415      	adds	r4, #21
 801341e:	3304      	adds	r3, #4
 8013420:	42a6      	cmp	r6, r4
 8013422:	bf38      	it	cc
 8013424:	2304      	movcc	r3, #4
 8013426:	441d      	add	r5, r3
 8013428:	445b      	add	r3, fp
 801342a:	461e      	mov	r6, r3
 801342c:	462c      	mov	r4, r5
 801342e:	4544      	cmp	r4, r8
 8013430:	d30e      	bcc.n	8013450 <__mdiff+0xf8>
 8013432:	f108 0103 	add.w	r1, r8, #3
 8013436:	1b49      	subs	r1, r1, r5
 8013438:	f021 0103 	bic.w	r1, r1, #3
 801343c:	3d03      	subs	r5, #3
 801343e:	45a8      	cmp	r8, r5
 8013440:	bf38      	it	cc
 8013442:	2100      	movcc	r1, #0
 8013444:	440b      	add	r3, r1
 8013446:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801344a:	b191      	cbz	r1, 8013472 <__mdiff+0x11a>
 801344c:	6117      	str	r7, [r2, #16]
 801344e:	e79d      	b.n	801338c <__mdiff+0x34>
 8013450:	f854 1b04 	ldr.w	r1, [r4], #4
 8013454:	46e6      	mov	lr, ip
 8013456:	0c08      	lsrs	r0, r1, #16
 8013458:	fa1c fc81 	uxtah	ip, ip, r1
 801345c:	4471      	add	r1, lr
 801345e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013462:	b289      	uxth	r1, r1
 8013464:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013468:	f846 1b04 	str.w	r1, [r6], #4
 801346c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013470:	e7dd      	b.n	801342e <__mdiff+0xd6>
 8013472:	3f01      	subs	r7, #1
 8013474:	e7e7      	b.n	8013446 <__mdiff+0xee>
 8013476:	bf00      	nop
 8013478:	080170db 	.word	0x080170db
 801347c:	080170ec 	.word	0x080170ec

08013480 <__ulp>:
 8013480:	b082      	sub	sp, #8
 8013482:	ed8d 0b00 	vstr	d0, [sp]
 8013486:	9a01      	ldr	r2, [sp, #4]
 8013488:	4b0f      	ldr	r3, [pc, #60]	@ (80134c8 <__ulp+0x48>)
 801348a:	4013      	ands	r3, r2
 801348c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8013490:	2b00      	cmp	r3, #0
 8013492:	dc08      	bgt.n	80134a6 <__ulp+0x26>
 8013494:	425b      	negs	r3, r3
 8013496:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801349a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801349e:	da04      	bge.n	80134aa <__ulp+0x2a>
 80134a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80134a4:	4113      	asrs	r3, r2
 80134a6:	2200      	movs	r2, #0
 80134a8:	e008      	b.n	80134bc <__ulp+0x3c>
 80134aa:	f1a2 0314 	sub.w	r3, r2, #20
 80134ae:	2b1e      	cmp	r3, #30
 80134b0:	bfda      	itte	le
 80134b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80134b6:	40da      	lsrle	r2, r3
 80134b8:	2201      	movgt	r2, #1
 80134ba:	2300      	movs	r3, #0
 80134bc:	4619      	mov	r1, r3
 80134be:	4610      	mov	r0, r2
 80134c0:	ec41 0b10 	vmov	d0, r0, r1
 80134c4:	b002      	add	sp, #8
 80134c6:	4770      	bx	lr
 80134c8:	7ff00000 	.word	0x7ff00000

080134cc <__b2d>:
 80134cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134d0:	6906      	ldr	r6, [r0, #16]
 80134d2:	f100 0814 	add.w	r8, r0, #20
 80134d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80134da:	1f37      	subs	r7, r6, #4
 80134dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80134e0:	4610      	mov	r0, r2
 80134e2:	f7ff fd4b 	bl	8012f7c <__hi0bits>
 80134e6:	f1c0 0320 	rsb	r3, r0, #32
 80134ea:	280a      	cmp	r0, #10
 80134ec:	600b      	str	r3, [r1, #0]
 80134ee:	491b      	ldr	r1, [pc, #108]	@ (801355c <__b2d+0x90>)
 80134f0:	dc15      	bgt.n	801351e <__b2d+0x52>
 80134f2:	f1c0 0c0b 	rsb	ip, r0, #11
 80134f6:	fa22 f30c 	lsr.w	r3, r2, ip
 80134fa:	45b8      	cmp	r8, r7
 80134fc:	ea43 0501 	orr.w	r5, r3, r1
 8013500:	bf34      	ite	cc
 8013502:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013506:	2300      	movcs	r3, #0
 8013508:	3015      	adds	r0, #21
 801350a:	fa02 f000 	lsl.w	r0, r2, r0
 801350e:	fa23 f30c 	lsr.w	r3, r3, ip
 8013512:	4303      	orrs	r3, r0
 8013514:	461c      	mov	r4, r3
 8013516:	ec45 4b10 	vmov	d0, r4, r5
 801351a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801351e:	45b8      	cmp	r8, r7
 8013520:	bf3a      	itte	cc
 8013522:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013526:	f1a6 0708 	subcc.w	r7, r6, #8
 801352a:	2300      	movcs	r3, #0
 801352c:	380b      	subs	r0, #11
 801352e:	d012      	beq.n	8013556 <__b2d+0x8a>
 8013530:	f1c0 0120 	rsb	r1, r0, #32
 8013534:	fa23 f401 	lsr.w	r4, r3, r1
 8013538:	4082      	lsls	r2, r0
 801353a:	4322      	orrs	r2, r4
 801353c:	4547      	cmp	r7, r8
 801353e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8013542:	bf8c      	ite	hi
 8013544:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013548:	2200      	movls	r2, #0
 801354a:	4083      	lsls	r3, r0
 801354c:	40ca      	lsrs	r2, r1
 801354e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013552:	4313      	orrs	r3, r2
 8013554:	e7de      	b.n	8013514 <__b2d+0x48>
 8013556:	ea42 0501 	orr.w	r5, r2, r1
 801355a:	e7db      	b.n	8013514 <__b2d+0x48>
 801355c:	3ff00000 	.word	0x3ff00000

08013560 <__d2b>:
 8013560:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013564:	460f      	mov	r7, r1
 8013566:	2101      	movs	r1, #1
 8013568:	ec59 8b10 	vmov	r8, r9, d0
 801356c:	4616      	mov	r6, r2
 801356e:	f7ff fc13 	bl	8012d98 <_Balloc>
 8013572:	4604      	mov	r4, r0
 8013574:	b930      	cbnz	r0, 8013584 <__d2b+0x24>
 8013576:	4602      	mov	r2, r0
 8013578:	4b23      	ldr	r3, [pc, #140]	@ (8013608 <__d2b+0xa8>)
 801357a:	4824      	ldr	r0, [pc, #144]	@ (801360c <__d2b+0xac>)
 801357c:	f240 310f 	movw	r1, #783	@ 0x30f
 8013580:	f001 fd06 	bl	8014f90 <__assert_func>
 8013584:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013588:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801358c:	b10d      	cbz	r5, 8013592 <__d2b+0x32>
 801358e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013592:	9301      	str	r3, [sp, #4]
 8013594:	f1b8 0300 	subs.w	r3, r8, #0
 8013598:	d023      	beq.n	80135e2 <__d2b+0x82>
 801359a:	4668      	mov	r0, sp
 801359c:	9300      	str	r3, [sp, #0]
 801359e:	f7ff fd0c 	bl	8012fba <__lo0bits>
 80135a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80135a6:	b1d0      	cbz	r0, 80135de <__d2b+0x7e>
 80135a8:	f1c0 0320 	rsb	r3, r0, #32
 80135ac:	fa02 f303 	lsl.w	r3, r2, r3
 80135b0:	430b      	orrs	r3, r1
 80135b2:	40c2      	lsrs	r2, r0
 80135b4:	6163      	str	r3, [r4, #20]
 80135b6:	9201      	str	r2, [sp, #4]
 80135b8:	9b01      	ldr	r3, [sp, #4]
 80135ba:	61a3      	str	r3, [r4, #24]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	bf0c      	ite	eq
 80135c0:	2201      	moveq	r2, #1
 80135c2:	2202      	movne	r2, #2
 80135c4:	6122      	str	r2, [r4, #16]
 80135c6:	b1a5      	cbz	r5, 80135f2 <__d2b+0x92>
 80135c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80135cc:	4405      	add	r5, r0
 80135ce:	603d      	str	r5, [r7, #0]
 80135d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80135d4:	6030      	str	r0, [r6, #0]
 80135d6:	4620      	mov	r0, r4
 80135d8:	b003      	add	sp, #12
 80135da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135de:	6161      	str	r1, [r4, #20]
 80135e0:	e7ea      	b.n	80135b8 <__d2b+0x58>
 80135e2:	a801      	add	r0, sp, #4
 80135e4:	f7ff fce9 	bl	8012fba <__lo0bits>
 80135e8:	9b01      	ldr	r3, [sp, #4]
 80135ea:	6163      	str	r3, [r4, #20]
 80135ec:	3020      	adds	r0, #32
 80135ee:	2201      	movs	r2, #1
 80135f0:	e7e8      	b.n	80135c4 <__d2b+0x64>
 80135f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80135f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80135fa:	6038      	str	r0, [r7, #0]
 80135fc:	6918      	ldr	r0, [r3, #16]
 80135fe:	f7ff fcbd 	bl	8012f7c <__hi0bits>
 8013602:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013606:	e7e5      	b.n	80135d4 <__d2b+0x74>
 8013608:	080170db 	.word	0x080170db
 801360c:	080170ec 	.word	0x080170ec

08013610 <__ratio>:
 8013610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013614:	b085      	sub	sp, #20
 8013616:	e9cd 1000 	strd	r1, r0, [sp]
 801361a:	a902      	add	r1, sp, #8
 801361c:	f7ff ff56 	bl	80134cc <__b2d>
 8013620:	9800      	ldr	r0, [sp, #0]
 8013622:	a903      	add	r1, sp, #12
 8013624:	ec55 4b10 	vmov	r4, r5, d0
 8013628:	f7ff ff50 	bl	80134cc <__b2d>
 801362c:	9b01      	ldr	r3, [sp, #4]
 801362e:	6919      	ldr	r1, [r3, #16]
 8013630:	9b00      	ldr	r3, [sp, #0]
 8013632:	691b      	ldr	r3, [r3, #16]
 8013634:	1ac9      	subs	r1, r1, r3
 8013636:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801363a:	1a9b      	subs	r3, r3, r2
 801363c:	ec5b ab10 	vmov	sl, fp, d0
 8013640:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8013644:	2b00      	cmp	r3, #0
 8013646:	bfce      	itee	gt
 8013648:	462a      	movgt	r2, r5
 801364a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801364e:	465a      	movle	r2, fp
 8013650:	462f      	mov	r7, r5
 8013652:	46d9      	mov	r9, fp
 8013654:	bfcc      	ite	gt
 8013656:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801365a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801365e:	464b      	mov	r3, r9
 8013660:	4652      	mov	r2, sl
 8013662:	4620      	mov	r0, r4
 8013664:	4639      	mov	r1, r7
 8013666:	f7ed f919 	bl	800089c <__aeabi_ddiv>
 801366a:	ec41 0b10 	vmov	d0, r0, r1
 801366e:	b005      	add	sp, #20
 8013670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013674 <__copybits>:
 8013674:	3901      	subs	r1, #1
 8013676:	b570      	push	{r4, r5, r6, lr}
 8013678:	1149      	asrs	r1, r1, #5
 801367a:	6914      	ldr	r4, [r2, #16]
 801367c:	3101      	adds	r1, #1
 801367e:	f102 0314 	add.w	r3, r2, #20
 8013682:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013686:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801368a:	1f05      	subs	r5, r0, #4
 801368c:	42a3      	cmp	r3, r4
 801368e:	d30c      	bcc.n	80136aa <__copybits+0x36>
 8013690:	1aa3      	subs	r3, r4, r2
 8013692:	3b11      	subs	r3, #17
 8013694:	f023 0303 	bic.w	r3, r3, #3
 8013698:	3211      	adds	r2, #17
 801369a:	42a2      	cmp	r2, r4
 801369c:	bf88      	it	hi
 801369e:	2300      	movhi	r3, #0
 80136a0:	4418      	add	r0, r3
 80136a2:	2300      	movs	r3, #0
 80136a4:	4288      	cmp	r0, r1
 80136a6:	d305      	bcc.n	80136b4 <__copybits+0x40>
 80136a8:	bd70      	pop	{r4, r5, r6, pc}
 80136aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80136ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80136b2:	e7eb      	b.n	801368c <__copybits+0x18>
 80136b4:	f840 3b04 	str.w	r3, [r0], #4
 80136b8:	e7f4      	b.n	80136a4 <__copybits+0x30>

080136ba <__any_on>:
 80136ba:	f100 0214 	add.w	r2, r0, #20
 80136be:	6900      	ldr	r0, [r0, #16]
 80136c0:	114b      	asrs	r3, r1, #5
 80136c2:	4298      	cmp	r0, r3
 80136c4:	b510      	push	{r4, lr}
 80136c6:	db11      	blt.n	80136ec <__any_on+0x32>
 80136c8:	dd0a      	ble.n	80136e0 <__any_on+0x26>
 80136ca:	f011 011f 	ands.w	r1, r1, #31
 80136ce:	d007      	beq.n	80136e0 <__any_on+0x26>
 80136d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80136d4:	fa24 f001 	lsr.w	r0, r4, r1
 80136d8:	fa00 f101 	lsl.w	r1, r0, r1
 80136dc:	428c      	cmp	r4, r1
 80136de:	d10b      	bne.n	80136f8 <__any_on+0x3e>
 80136e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80136e4:	4293      	cmp	r3, r2
 80136e6:	d803      	bhi.n	80136f0 <__any_on+0x36>
 80136e8:	2000      	movs	r0, #0
 80136ea:	bd10      	pop	{r4, pc}
 80136ec:	4603      	mov	r3, r0
 80136ee:	e7f7      	b.n	80136e0 <__any_on+0x26>
 80136f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80136f4:	2900      	cmp	r1, #0
 80136f6:	d0f5      	beq.n	80136e4 <__any_on+0x2a>
 80136f8:	2001      	movs	r0, #1
 80136fa:	e7f6      	b.n	80136ea <__any_on+0x30>

080136fc <sulp>:
 80136fc:	b570      	push	{r4, r5, r6, lr}
 80136fe:	4604      	mov	r4, r0
 8013700:	460d      	mov	r5, r1
 8013702:	ec45 4b10 	vmov	d0, r4, r5
 8013706:	4616      	mov	r6, r2
 8013708:	f7ff feba 	bl	8013480 <__ulp>
 801370c:	ec51 0b10 	vmov	r0, r1, d0
 8013710:	b17e      	cbz	r6, 8013732 <sulp+0x36>
 8013712:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013716:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801371a:	2b00      	cmp	r3, #0
 801371c:	dd09      	ble.n	8013732 <sulp+0x36>
 801371e:	051b      	lsls	r3, r3, #20
 8013720:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8013724:	2400      	movs	r4, #0
 8013726:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801372a:	4622      	mov	r2, r4
 801372c:	462b      	mov	r3, r5
 801372e:	f7ec ff8b 	bl	8000648 <__aeabi_dmul>
 8013732:	ec41 0b10 	vmov	d0, r0, r1
 8013736:	bd70      	pop	{r4, r5, r6, pc}

08013738 <_strtod_l>:
 8013738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801373c:	b09f      	sub	sp, #124	@ 0x7c
 801373e:	460c      	mov	r4, r1
 8013740:	9217      	str	r2, [sp, #92]	@ 0x5c
 8013742:	2200      	movs	r2, #0
 8013744:	921a      	str	r2, [sp, #104]	@ 0x68
 8013746:	9005      	str	r0, [sp, #20]
 8013748:	f04f 0a00 	mov.w	sl, #0
 801374c:	f04f 0b00 	mov.w	fp, #0
 8013750:	460a      	mov	r2, r1
 8013752:	9219      	str	r2, [sp, #100]	@ 0x64
 8013754:	7811      	ldrb	r1, [r2, #0]
 8013756:	292b      	cmp	r1, #43	@ 0x2b
 8013758:	d04a      	beq.n	80137f0 <_strtod_l+0xb8>
 801375a:	d838      	bhi.n	80137ce <_strtod_l+0x96>
 801375c:	290d      	cmp	r1, #13
 801375e:	d832      	bhi.n	80137c6 <_strtod_l+0x8e>
 8013760:	2908      	cmp	r1, #8
 8013762:	d832      	bhi.n	80137ca <_strtod_l+0x92>
 8013764:	2900      	cmp	r1, #0
 8013766:	d03b      	beq.n	80137e0 <_strtod_l+0xa8>
 8013768:	2200      	movs	r2, #0
 801376a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801376c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801376e:	782a      	ldrb	r2, [r5, #0]
 8013770:	2a30      	cmp	r2, #48	@ 0x30
 8013772:	f040 80b3 	bne.w	80138dc <_strtod_l+0x1a4>
 8013776:	786a      	ldrb	r2, [r5, #1]
 8013778:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801377c:	2a58      	cmp	r2, #88	@ 0x58
 801377e:	d16e      	bne.n	801385e <_strtod_l+0x126>
 8013780:	9302      	str	r3, [sp, #8]
 8013782:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013784:	9301      	str	r3, [sp, #4]
 8013786:	ab1a      	add	r3, sp, #104	@ 0x68
 8013788:	9300      	str	r3, [sp, #0]
 801378a:	4a8e      	ldr	r2, [pc, #568]	@ (80139c4 <_strtod_l+0x28c>)
 801378c:	9805      	ldr	r0, [sp, #20]
 801378e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8013790:	a919      	add	r1, sp, #100	@ 0x64
 8013792:	f001 fc97 	bl	80150c4 <__gethex>
 8013796:	f010 060f 	ands.w	r6, r0, #15
 801379a:	4604      	mov	r4, r0
 801379c:	d005      	beq.n	80137aa <_strtod_l+0x72>
 801379e:	2e06      	cmp	r6, #6
 80137a0:	d128      	bne.n	80137f4 <_strtod_l+0xbc>
 80137a2:	3501      	adds	r5, #1
 80137a4:	2300      	movs	r3, #0
 80137a6:	9519      	str	r5, [sp, #100]	@ 0x64
 80137a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80137aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	f040 858e 	bne.w	80142ce <_strtod_l+0xb96>
 80137b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80137b4:	b1cb      	cbz	r3, 80137ea <_strtod_l+0xb2>
 80137b6:	4652      	mov	r2, sl
 80137b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80137bc:	ec43 2b10 	vmov	d0, r2, r3
 80137c0:	b01f      	add	sp, #124	@ 0x7c
 80137c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137c6:	2920      	cmp	r1, #32
 80137c8:	d1ce      	bne.n	8013768 <_strtod_l+0x30>
 80137ca:	3201      	adds	r2, #1
 80137cc:	e7c1      	b.n	8013752 <_strtod_l+0x1a>
 80137ce:	292d      	cmp	r1, #45	@ 0x2d
 80137d0:	d1ca      	bne.n	8013768 <_strtod_l+0x30>
 80137d2:	2101      	movs	r1, #1
 80137d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80137d6:	1c51      	adds	r1, r2, #1
 80137d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80137da:	7852      	ldrb	r2, [r2, #1]
 80137dc:	2a00      	cmp	r2, #0
 80137de:	d1c5      	bne.n	801376c <_strtod_l+0x34>
 80137e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80137e2:	9419      	str	r4, [sp, #100]	@ 0x64
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	f040 8570 	bne.w	80142ca <_strtod_l+0xb92>
 80137ea:	4652      	mov	r2, sl
 80137ec:	465b      	mov	r3, fp
 80137ee:	e7e5      	b.n	80137bc <_strtod_l+0x84>
 80137f0:	2100      	movs	r1, #0
 80137f2:	e7ef      	b.n	80137d4 <_strtod_l+0x9c>
 80137f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80137f6:	b13a      	cbz	r2, 8013808 <_strtod_l+0xd0>
 80137f8:	2135      	movs	r1, #53	@ 0x35
 80137fa:	a81c      	add	r0, sp, #112	@ 0x70
 80137fc:	f7ff ff3a 	bl	8013674 <__copybits>
 8013800:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013802:	9805      	ldr	r0, [sp, #20]
 8013804:	f7ff fb08 	bl	8012e18 <_Bfree>
 8013808:	3e01      	subs	r6, #1
 801380a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801380c:	2e04      	cmp	r6, #4
 801380e:	d806      	bhi.n	801381e <_strtod_l+0xe6>
 8013810:	e8df f006 	tbb	[pc, r6]
 8013814:	201d0314 	.word	0x201d0314
 8013818:	14          	.byte	0x14
 8013819:	00          	.byte	0x00
 801381a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801381e:	05e1      	lsls	r1, r4, #23
 8013820:	bf48      	it	mi
 8013822:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013826:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801382a:	0d1b      	lsrs	r3, r3, #20
 801382c:	051b      	lsls	r3, r3, #20
 801382e:	2b00      	cmp	r3, #0
 8013830:	d1bb      	bne.n	80137aa <_strtod_l+0x72>
 8013832:	f7fe fb21 	bl	8011e78 <__errno>
 8013836:	2322      	movs	r3, #34	@ 0x22
 8013838:	6003      	str	r3, [r0, #0]
 801383a:	e7b6      	b.n	80137aa <_strtod_l+0x72>
 801383c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013840:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013844:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013848:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801384c:	e7e7      	b.n	801381e <_strtod_l+0xe6>
 801384e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80139cc <_strtod_l+0x294>
 8013852:	e7e4      	b.n	801381e <_strtod_l+0xe6>
 8013854:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013858:	f04f 3aff 	mov.w	sl, #4294967295
 801385c:	e7df      	b.n	801381e <_strtod_l+0xe6>
 801385e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013860:	1c5a      	adds	r2, r3, #1
 8013862:	9219      	str	r2, [sp, #100]	@ 0x64
 8013864:	785b      	ldrb	r3, [r3, #1]
 8013866:	2b30      	cmp	r3, #48	@ 0x30
 8013868:	d0f9      	beq.n	801385e <_strtod_l+0x126>
 801386a:	2b00      	cmp	r3, #0
 801386c:	d09d      	beq.n	80137aa <_strtod_l+0x72>
 801386e:	2301      	movs	r3, #1
 8013870:	9309      	str	r3, [sp, #36]	@ 0x24
 8013872:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013874:	930c      	str	r3, [sp, #48]	@ 0x30
 8013876:	2300      	movs	r3, #0
 8013878:	9308      	str	r3, [sp, #32]
 801387a:	930a      	str	r3, [sp, #40]	@ 0x28
 801387c:	461f      	mov	r7, r3
 801387e:	220a      	movs	r2, #10
 8013880:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8013882:	7805      	ldrb	r5, [r0, #0]
 8013884:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8013888:	b2d9      	uxtb	r1, r3
 801388a:	2909      	cmp	r1, #9
 801388c:	d928      	bls.n	80138e0 <_strtod_l+0x1a8>
 801388e:	494e      	ldr	r1, [pc, #312]	@ (80139c8 <_strtod_l+0x290>)
 8013890:	2201      	movs	r2, #1
 8013892:	f7fe fa94 	bl	8011dbe <strncmp>
 8013896:	2800      	cmp	r0, #0
 8013898:	d032      	beq.n	8013900 <_strtod_l+0x1c8>
 801389a:	2000      	movs	r0, #0
 801389c:	462a      	mov	r2, r5
 801389e:	4681      	mov	r9, r0
 80138a0:	463d      	mov	r5, r7
 80138a2:	4603      	mov	r3, r0
 80138a4:	2a65      	cmp	r2, #101	@ 0x65
 80138a6:	d001      	beq.n	80138ac <_strtod_l+0x174>
 80138a8:	2a45      	cmp	r2, #69	@ 0x45
 80138aa:	d114      	bne.n	80138d6 <_strtod_l+0x19e>
 80138ac:	b91d      	cbnz	r5, 80138b6 <_strtod_l+0x17e>
 80138ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80138b0:	4302      	orrs	r2, r0
 80138b2:	d095      	beq.n	80137e0 <_strtod_l+0xa8>
 80138b4:	2500      	movs	r5, #0
 80138b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80138b8:	1c62      	adds	r2, r4, #1
 80138ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80138bc:	7862      	ldrb	r2, [r4, #1]
 80138be:	2a2b      	cmp	r2, #43	@ 0x2b
 80138c0:	d077      	beq.n	80139b2 <_strtod_l+0x27a>
 80138c2:	2a2d      	cmp	r2, #45	@ 0x2d
 80138c4:	d07b      	beq.n	80139be <_strtod_l+0x286>
 80138c6:	f04f 0c00 	mov.w	ip, #0
 80138ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80138ce:	2909      	cmp	r1, #9
 80138d0:	f240 8082 	bls.w	80139d8 <_strtod_l+0x2a0>
 80138d4:	9419      	str	r4, [sp, #100]	@ 0x64
 80138d6:	f04f 0800 	mov.w	r8, #0
 80138da:	e0a2      	b.n	8013a22 <_strtod_l+0x2ea>
 80138dc:	2300      	movs	r3, #0
 80138de:	e7c7      	b.n	8013870 <_strtod_l+0x138>
 80138e0:	2f08      	cmp	r7, #8
 80138e2:	bfd5      	itete	le
 80138e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80138e6:	9908      	ldrgt	r1, [sp, #32]
 80138e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80138ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 80138f0:	f100 0001 	add.w	r0, r0, #1
 80138f4:	bfd4      	ite	le
 80138f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80138f8:	9308      	strgt	r3, [sp, #32]
 80138fa:	3701      	adds	r7, #1
 80138fc:	9019      	str	r0, [sp, #100]	@ 0x64
 80138fe:	e7bf      	b.n	8013880 <_strtod_l+0x148>
 8013900:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013902:	1c5a      	adds	r2, r3, #1
 8013904:	9219      	str	r2, [sp, #100]	@ 0x64
 8013906:	785a      	ldrb	r2, [r3, #1]
 8013908:	b37f      	cbz	r7, 801396a <_strtod_l+0x232>
 801390a:	4681      	mov	r9, r0
 801390c:	463d      	mov	r5, r7
 801390e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8013912:	2b09      	cmp	r3, #9
 8013914:	d912      	bls.n	801393c <_strtod_l+0x204>
 8013916:	2301      	movs	r3, #1
 8013918:	e7c4      	b.n	80138a4 <_strtod_l+0x16c>
 801391a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801391c:	1c5a      	adds	r2, r3, #1
 801391e:	9219      	str	r2, [sp, #100]	@ 0x64
 8013920:	785a      	ldrb	r2, [r3, #1]
 8013922:	3001      	adds	r0, #1
 8013924:	2a30      	cmp	r2, #48	@ 0x30
 8013926:	d0f8      	beq.n	801391a <_strtod_l+0x1e2>
 8013928:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801392c:	2b08      	cmp	r3, #8
 801392e:	f200 84d3 	bhi.w	80142d8 <_strtod_l+0xba0>
 8013932:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013934:	930c      	str	r3, [sp, #48]	@ 0x30
 8013936:	4681      	mov	r9, r0
 8013938:	2000      	movs	r0, #0
 801393a:	4605      	mov	r5, r0
 801393c:	3a30      	subs	r2, #48	@ 0x30
 801393e:	f100 0301 	add.w	r3, r0, #1
 8013942:	d02a      	beq.n	801399a <_strtod_l+0x262>
 8013944:	4499      	add	r9, r3
 8013946:	eb00 0c05 	add.w	ip, r0, r5
 801394a:	462b      	mov	r3, r5
 801394c:	210a      	movs	r1, #10
 801394e:	4563      	cmp	r3, ip
 8013950:	d10d      	bne.n	801396e <_strtod_l+0x236>
 8013952:	1c69      	adds	r1, r5, #1
 8013954:	4401      	add	r1, r0
 8013956:	4428      	add	r0, r5
 8013958:	2808      	cmp	r0, #8
 801395a:	dc16      	bgt.n	801398a <_strtod_l+0x252>
 801395c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801395e:	230a      	movs	r3, #10
 8013960:	fb03 2300 	mla	r3, r3, r0, r2
 8013964:	930a      	str	r3, [sp, #40]	@ 0x28
 8013966:	2300      	movs	r3, #0
 8013968:	e018      	b.n	801399c <_strtod_l+0x264>
 801396a:	4638      	mov	r0, r7
 801396c:	e7da      	b.n	8013924 <_strtod_l+0x1ec>
 801396e:	2b08      	cmp	r3, #8
 8013970:	f103 0301 	add.w	r3, r3, #1
 8013974:	dc03      	bgt.n	801397e <_strtod_l+0x246>
 8013976:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013978:	434e      	muls	r6, r1
 801397a:	960a      	str	r6, [sp, #40]	@ 0x28
 801397c:	e7e7      	b.n	801394e <_strtod_l+0x216>
 801397e:	2b10      	cmp	r3, #16
 8013980:	bfde      	ittt	le
 8013982:	9e08      	ldrle	r6, [sp, #32]
 8013984:	434e      	mulle	r6, r1
 8013986:	9608      	strle	r6, [sp, #32]
 8013988:	e7e1      	b.n	801394e <_strtod_l+0x216>
 801398a:	280f      	cmp	r0, #15
 801398c:	dceb      	bgt.n	8013966 <_strtod_l+0x22e>
 801398e:	9808      	ldr	r0, [sp, #32]
 8013990:	230a      	movs	r3, #10
 8013992:	fb03 2300 	mla	r3, r3, r0, r2
 8013996:	9308      	str	r3, [sp, #32]
 8013998:	e7e5      	b.n	8013966 <_strtod_l+0x22e>
 801399a:	4629      	mov	r1, r5
 801399c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801399e:	1c50      	adds	r0, r2, #1
 80139a0:	9019      	str	r0, [sp, #100]	@ 0x64
 80139a2:	7852      	ldrb	r2, [r2, #1]
 80139a4:	4618      	mov	r0, r3
 80139a6:	460d      	mov	r5, r1
 80139a8:	e7b1      	b.n	801390e <_strtod_l+0x1d6>
 80139aa:	f04f 0900 	mov.w	r9, #0
 80139ae:	2301      	movs	r3, #1
 80139b0:	e77d      	b.n	80138ae <_strtod_l+0x176>
 80139b2:	f04f 0c00 	mov.w	ip, #0
 80139b6:	1ca2      	adds	r2, r4, #2
 80139b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80139ba:	78a2      	ldrb	r2, [r4, #2]
 80139bc:	e785      	b.n	80138ca <_strtod_l+0x192>
 80139be:	f04f 0c01 	mov.w	ip, #1
 80139c2:	e7f8      	b.n	80139b6 <_strtod_l+0x27e>
 80139c4:	08017260 	.word	0x08017260
 80139c8:	08017248 	.word	0x08017248
 80139cc:	7ff00000 	.word	0x7ff00000
 80139d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80139d2:	1c51      	adds	r1, r2, #1
 80139d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80139d6:	7852      	ldrb	r2, [r2, #1]
 80139d8:	2a30      	cmp	r2, #48	@ 0x30
 80139da:	d0f9      	beq.n	80139d0 <_strtod_l+0x298>
 80139dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80139e0:	2908      	cmp	r1, #8
 80139e2:	f63f af78 	bhi.w	80138d6 <_strtod_l+0x19e>
 80139e6:	3a30      	subs	r2, #48	@ 0x30
 80139e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80139ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80139ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 80139ee:	f04f 080a 	mov.w	r8, #10
 80139f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80139f4:	1c56      	adds	r6, r2, #1
 80139f6:	9619      	str	r6, [sp, #100]	@ 0x64
 80139f8:	7852      	ldrb	r2, [r2, #1]
 80139fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80139fe:	f1be 0f09 	cmp.w	lr, #9
 8013a02:	d939      	bls.n	8013a78 <_strtod_l+0x340>
 8013a04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013a06:	1a76      	subs	r6, r6, r1
 8013a08:	2e08      	cmp	r6, #8
 8013a0a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8013a0e:	dc03      	bgt.n	8013a18 <_strtod_l+0x2e0>
 8013a10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013a12:	4588      	cmp	r8, r1
 8013a14:	bfa8      	it	ge
 8013a16:	4688      	movge	r8, r1
 8013a18:	f1bc 0f00 	cmp.w	ip, #0
 8013a1c:	d001      	beq.n	8013a22 <_strtod_l+0x2ea>
 8013a1e:	f1c8 0800 	rsb	r8, r8, #0
 8013a22:	2d00      	cmp	r5, #0
 8013a24:	d14e      	bne.n	8013ac4 <_strtod_l+0x38c>
 8013a26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013a28:	4308      	orrs	r0, r1
 8013a2a:	f47f aebe 	bne.w	80137aa <_strtod_l+0x72>
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	f47f aed6 	bne.w	80137e0 <_strtod_l+0xa8>
 8013a34:	2a69      	cmp	r2, #105	@ 0x69
 8013a36:	d028      	beq.n	8013a8a <_strtod_l+0x352>
 8013a38:	dc25      	bgt.n	8013a86 <_strtod_l+0x34e>
 8013a3a:	2a49      	cmp	r2, #73	@ 0x49
 8013a3c:	d025      	beq.n	8013a8a <_strtod_l+0x352>
 8013a3e:	2a4e      	cmp	r2, #78	@ 0x4e
 8013a40:	f47f aece 	bne.w	80137e0 <_strtod_l+0xa8>
 8013a44:	499b      	ldr	r1, [pc, #620]	@ (8013cb4 <_strtod_l+0x57c>)
 8013a46:	a819      	add	r0, sp, #100	@ 0x64
 8013a48:	f001 fd5e 	bl	8015508 <__match>
 8013a4c:	2800      	cmp	r0, #0
 8013a4e:	f43f aec7 	beq.w	80137e0 <_strtod_l+0xa8>
 8013a52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013a54:	781b      	ldrb	r3, [r3, #0]
 8013a56:	2b28      	cmp	r3, #40	@ 0x28
 8013a58:	d12e      	bne.n	8013ab8 <_strtod_l+0x380>
 8013a5a:	4997      	ldr	r1, [pc, #604]	@ (8013cb8 <_strtod_l+0x580>)
 8013a5c:	aa1c      	add	r2, sp, #112	@ 0x70
 8013a5e:	a819      	add	r0, sp, #100	@ 0x64
 8013a60:	f001 fd66 	bl	8015530 <__hexnan>
 8013a64:	2805      	cmp	r0, #5
 8013a66:	d127      	bne.n	8013ab8 <_strtod_l+0x380>
 8013a68:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013a6a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8013a6e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013a72:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013a76:	e698      	b.n	80137aa <_strtod_l+0x72>
 8013a78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013a7a:	fb08 2101 	mla	r1, r8, r1, r2
 8013a7e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8013a82:	920e      	str	r2, [sp, #56]	@ 0x38
 8013a84:	e7b5      	b.n	80139f2 <_strtod_l+0x2ba>
 8013a86:	2a6e      	cmp	r2, #110	@ 0x6e
 8013a88:	e7da      	b.n	8013a40 <_strtod_l+0x308>
 8013a8a:	498c      	ldr	r1, [pc, #560]	@ (8013cbc <_strtod_l+0x584>)
 8013a8c:	a819      	add	r0, sp, #100	@ 0x64
 8013a8e:	f001 fd3b 	bl	8015508 <__match>
 8013a92:	2800      	cmp	r0, #0
 8013a94:	f43f aea4 	beq.w	80137e0 <_strtod_l+0xa8>
 8013a98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013a9a:	4989      	ldr	r1, [pc, #548]	@ (8013cc0 <_strtod_l+0x588>)
 8013a9c:	3b01      	subs	r3, #1
 8013a9e:	a819      	add	r0, sp, #100	@ 0x64
 8013aa0:	9319      	str	r3, [sp, #100]	@ 0x64
 8013aa2:	f001 fd31 	bl	8015508 <__match>
 8013aa6:	b910      	cbnz	r0, 8013aae <_strtod_l+0x376>
 8013aa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013aaa:	3301      	adds	r3, #1
 8013aac:	9319      	str	r3, [sp, #100]	@ 0x64
 8013aae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8013cd0 <_strtod_l+0x598>
 8013ab2:	f04f 0a00 	mov.w	sl, #0
 8013ab6:	e678      	b.n	80137aa <_strtod_l+0x72>
 8013ab8:	4882      	ldr	r0, [pc, #520]	@ (8013cc4 <_strtod_l+0x58c>)
 8013aba:	f001 fa61 	bl	8014f80 <nan>
 8013abe:	ec5b ab10 	vmov	sl, fp, d0
 8013ac2:	e672      	b.n	80137aa <_strtod_l+0x72>
 8013ac4:	eba8 0309 	sub.w	r3, r8, r9
 8013ac8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8013acc:	2f00      	cmp	r7, #0
 8013ace:	bf08      	it	eq
 8013ad0:	462f      	moveq	r7, r5
 8013ad2:	2d10      	cmp	r5, #16
 8013ad4:	462c      	mov	r4, r5
 8013ad6:	bfa8      	it	ge
 8013ad8:	2410      	movge	r4, #16
 8013ada:	f7ec fd3b 	bl	8000554 <__aeabi_ui2d>
 8013ade:	2d09      	cmp	r5, #9
 8013ae0:	4682      	mov	sl, r0
 8013ae2:	468b      	mov	fp, r1
 8013ae4:	dc13      	bgt.n	8013b0e <_strtod_l+0x3d6>
 8013ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	f43f ae5e 	beq.w	80137aa <_strtod_l+0x72>
 8013aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013af0:	dd78      	ble.n	8013be4 <_strtod_l+0x4ac>
 8013af2:	2b16      	cmp	r3, #22
 8013af4:	dc5f      	bgt.n	8013bb6 <_strtod_l+0x47e>
 8013af6:	4974      	ldr	r1, [pc, #464]	@ (8013cc8 <_strtod_l+0x590>)
 8013af8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013afc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b00:	4652      	mov	r2, sl
 8013b02:	465b      	mov	r3, fp
 8013b04:	f7ec fda0 	bl	8000648 <__aeabi_dmul>
 8013b08:	4682      	mov	sl, r0
 8013b0a:	468b      	mov	fp, r1
 8013b0c:	e64d      	b.n	80137aa <_strtod_l+0x72>
 8013b0e:	4b6e      	ldr	r3, [pc, #440]	@ (8013cc8 <_strtod_l+0x590>)
 8013b10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013b14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8013b18:	f7ec fd96 	bl	8000648 <__aeabi_dmul>
 8013b1c:	4682      	mov	sl, r0
 8013b1e:	9808      	ldr	r0, [sp, #32]
 8013b20:	468b      	mov	fp, r1
 8013b22:	f7ec fd17 	bl	8000554 <__aeabi_ui2d>
 8013b26:	4602      	mov	r2, r0
 8013b28:	460b      	mov	r3, r1
 8013b2a:	4650      	mov	r0, sl
 8013b2c:	4659      	mov	r1, fp
 8013b2e:	f7ec fbd5 	bl	80002dc <__adddf3>
 8013b32:	2d0f      	cmp	r5, #15
 8013b34:	4682      	mov	sl, r0
 8013b36:	468b      	mov	fp, r1
 8013b38:	ddd5      	ble.n	8013ae6 <_strtod_l+0x3ae>
 8013b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b3c:	1b2c      	subs	r4, r5, r4
 8013b3e:	441c      	add	r4, r3
 8013b40:	2c00      	cmp	r4, #0
 8013b42:	f340 8096 	ble.w	8013c72 <_strtod_l+0x53a>
 8013b46:	f014 030f 	ands.w	r3, r4, #15
 8013b4a:	d00a      	beq.n	8013b62 <_strtod_l+0x42a>
 8013b4c:	495e      	ldr	r1, [pc, #376]	@ (8013cc8 <_strtod_l+0x590>)
 8013b4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013b52:	4652      	mov	r2, sl
 8013b54:	465b      	mov	r3, fp
 8013b56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b5a:	f7ec fd75 	bl	8000648 <__aeabi_dmul>
 8013b5e:	4682      	mov	sl, r0
 8013b60:	468b      	mov	fp, r1
 8013b62:	f034 040f 	bics.w	r4, r4, #15
 8013b66:	d073      	beq.n	8013c50 <_strtod_l+0x518>
 8013b68:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8013b6c:	dd48      	ble.n	8013c00 <_strtod_l+0x4c8>
 8013b6e:	2400      	movs	r4, #0
 8013b70:	46a0      	mov	r8, r4
 8013b72:	940a      	str	r4, [sp, #40]	@ 0x28
 8013b74:	46a1      	mov	r9, r4
 8013b76:	9a05      	ldr	r2, [sp, #20]
 8013b78:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013cd0 <_strtod_l+0x598>
 8013b7c:	2322      	movs	r3, #34	@ 0x22
 8013b7e:	6013      	str	r3, [r2, #0]
 8013b80:	f04f 0a00 	mov.w	sl, #0
 8013b84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	f43f ae0f 	beq.w	80137aa <_strtod_l+0x72>
 8013b8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013b8e:	9805      	ldr	r0, [sp, #20]
 8013b90:	f7ff f942 	bl	8012e18 <_Bfree>
 8013b94:	9805      	ldr	r0, [sp, #20]
 8013b96:	4649      	mov	r1, r9
 8013b98:	f7ff f93e 	bl	8012e18 <_Bfree>
 8013b9c:	9805      	ldr	r0, [sp, #20]
 8013b9e:	4641      	mov	r1, r8
 8013ba0:	f7ff f93a 	bl	8012e18 <_Bfree>
 8013ba4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013ba6:	9805      	ldr	r0, [sp, #20]
 8013ba8:	f7ff f936 	bl	8012e18 <_Bfree>
 8013bac:	9805      	ldr	r0, [sp, #20]
 8013bae:	4621      	mov	r1, r4
 8013bb0:	f7ff f932 	bl	8012e18 <_Bfree>
 8013bb4:	e5f9      	b.n	80137aa <_strtod_l+0x72>
 8013bb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013bb8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8013bbc:	4293      	cmp	r3, r2
 8013bbe:	dbbc      	blt.n	8013b3a <_strtod_l+0x402>
 8013bc0:	4c41      	ldr	r4, [pc, #260]	@ (8013cc8 <_strtod_l+0x590>)
 8013bc2:	f1c5 050f 	rsb	r5, r5, #15
 8013bc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013bca:	4652      	mov	r2, sl
 8013bcc:	465b      	mov	r3, fp
 8013bce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bd2:	f7ec fd39 	bl	8000648 <__aeabi_dmul>
 8013bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bd8:	1b5d      	subs	r5, r3, r5
 8013bda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013bde:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013be2:	e78f      	b.n	8013b04 <_strtod_l+0x3cc>
 8013be4:	3316      	adds	r3, #22
 8013be6:	dba8      	blt.n	8013b3a <_strtod_l+0x402>
 8013be8:	4b37      	ldr	r3, [pc, #220]	@ (8013cc8 <_strtod_l+0x590>)
 8013bea:	eba9 0808 	sub.w	r8, r9, r8
 8013bee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8013bf2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8013bf6:	4650      	mov	r0, sl
 8013bf8:	4659      	mov	r1, fp
 8013bfa:	f7ec fe4f 	bl	800089c <__aeabi_ddiv>
 8013bfe:	e783      	b.n	8013b08 <_strtod_l+0x3d0>
 8013c00:	4b32      	ldr	r3, [pc, #200]	@ (8013ccc <_strtod_l+0x594>)
 8013c02:	9308      	str	r3, [sp, #32]
 8013c04:	2300      	movs	r3, #0
 8013c06:	1124      	asrs	r4, r4, #4
 8013c08:	4650      	mov	r0, sl
 8013c0a:	4659      	mov	r1, fp
 8013c0c:	461e      	mov	r6, r3
 8013c0e:	2c01      	cmp	r4, #1
 8013c10:	dc21      	bgt.n	8013c56 <_strtod_l+0x51e>
 8013c12:	b10b      	cbz	r3, 8013c18 <_strtod_l+0x4e0>
 8013c14:	4682      	mov	sl, r0
 8013c16:	468b      	mov	fp, r1
 8013c18:	492c      	ldr	r1, [pc, #176]	@ (8013ccc <_strtod_l+0x594>)
 8013c1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013c1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8013c22:	4652      	mov	r2, sl
 8013c24:	465b      	mov	r3, fp
 8013c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c2a:	f7ec fd0d 	bl	8000648 <__aeabi_dmul>
 8013c2e:	4b28      	ldr	r3, [pc, #160]	@ (8013cd0 <_strtod_l+0x598>)
 8013c30:	460a      	mov	r2, r1
 8013c32:	400b      	ands	r3, r1
 8013c34:	4927      	ldr	r1, [pc, #156]	@ (8013cd4 <_strtod_l+0x59c>)
 8013c36:	428b      	cmp	r3, r1
 8013c38:	4682      	mov	sl, r0
 8013c3a:	d898      	bhi.n	8013b6e <_strtod_l+0x436>
 8013c3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013c40:	428b      	cmp	r3, r1
 8013c42:	bf86      	itte	hi
 8013c44:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8013cd8 <_strtod_l+0x5a0>
 8013c48:	f04f 3aff 	movhi.w	sl, #4294967295
 8013c4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013c50:	2300      	movs	r3, #0
 8013c52:	9308      	str	r3, [sp, #32]
 8013c54:	e07a      	b.n	8013d4c <_strtod_l+0x614>
 8013c56:	07e2      	lsls	r2, r4, #31
 8013c58:	d505      	bpl.n	8013c66 <_strtod_l+0x52e>
 8013c5a:	9b08      	ldr	r3, [sp, #32]
 8013c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c60:	f7ec fcf2 	bl	8000648 <__aeabi_dmul>
 8013c64:	2301      	movs	r3, #1
 8013c66:	9a08      	ldr	r2, [sp, #32]
 8013c68:	3208      	adds	r2, #8
 8013c6a:	3601      	adds	r6, #1
 8013c6c:	1064      	asrs	r4, r4, #1
 8013c6e:	9208      	str	r2, [sp, #32]
 8013c70:	e7cd      	b.n	8013c0e <_strtod_l+0x4d6>
 8013c72:	d0ed      	beq.n	8013c50 <_strtod_l+0x518>
 8013c74:	4264      	negs	r4, r4
 8013c76:	f014 020f 	ands.w	r2, r4, #15
 8013c7a:	d00a      	beq.n	8013c92 <_strtod_l+0x55a>
 8013c7c:	4b12      	ldr	r3, [pc, #72]	@ (8013cc8 <_strtod_l+0x590>)
 8013c7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c82:	4650      	mov	r0, sl
 8013c84:	4659      	mov	r1, fp
 8013c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c8a:	f7ec fe07 	bl	800089c <__aeabi_ddiv>
 8013c8e:	4682      	mov	sl, r0
 8013c90:	468b      	mov	fp, r1
 8013c92:	1124      	asrs	r4, r4, #4
 8013c94:	d0dc      	beq.n	8013c50 <_strtod_l+0x518>
 8013c96:	2c1f      	cmp	r4, #31
 8013c98:	dd20      	ble.n	8013cdc <_strtod_l+0x5a4>
 8013c9a:	2400      	movs	r4, #0
 8013c9c:	46a0      	mov	r8, r4
 8013c9e:	940a      	str	r4, [sp, #40]	@ 0x28
 8013ca0:	46a1      	mov	r9, r4
 8013ca2:	9a05      	ldr	r2, [sp, #20]
 8013ca4:	2322      	movs	r3, #34	@ 0x22
 8013ca6:	f04f 0a00 	mov.w	sl, #0
 8013caa:	f04f 0b00 	mov.w	fp, #0
 8013cae:	6013      	str	r3, [r2, #0]
 8013cb0:	e768      	b.n	8013b84 <_strtod_l+0x44c>
 8013cb2:	bf00      	nop
 8013cb4:	08017035 	.word	0x08017035
 8013cb8:	0801724c 	.word	0x0801724c
 8013cbc:	0801702d 	.word	0x0801702d
 8013cc0:	08017062 	.word	0x08017062
 8013cc4:	08017410 	.word	0x08017410
 8013cc8:	08017180 	.word	0x08017180
 8013ccc:	08017158 	.word	0x08017158
 8013cd0:	7ff00000 	.word	0x7ff00000
 8013cd4:	7ca00000 	.word	0x7ca00000
 8013cd8:	7fefffff 	.word	0x7fefffff
 8013cdc:	f014 0310 	ands.w	r3, r4, #16
 8013ce0:	bf18      	it	ne
 8013ce2:	236a      	movne	r3, #106	@ 0x6a
 8013ce4:	4ea9      	ldr	r6, [pc, #676]	@ (8013f8c <_strtod_l+0x854>)
 8013ce6:	9308      	str	r3, [sp, #32]
 8013ce8:	4650      	mov	r0, sl
 8013cea:	4659      	mov	r1, fp
 8013cec:	2300      	movs	r3, #0
 8013cee:	07e2      	lsls	r2, r4, #31
 8013cf0:	d504      	bpl.n	8013cfc <_strtod_l+0x5c4>
 8013cf2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013cf6:	f7ec fca7 	bl	8000648 <__aeabi_dmul>
 8013cfa:	2301      	movs	r3, #1
 8013cfc:	1064      	asrs	r4, r4, #1
 8013cfe:	f106 0608 	add.w	r6, r6, #8
 8013d02:	d1f4      	bne.n	8013cee <_strtod_l+0x5b6>
 8013d04:	b10b      	cbz	r3, 8013d0a <_strtod_l+0x5d2>
 8013d06:	4682      	mov	sl, r0
 8013d08:	468b      	mov	fp, r1
 8013d0a:	9b08      	ldr	r3, [sp, #32]
 8013d0c:	b1b3      	cbz	r3, 8013d3c <_strtod_l+0x604>
 8013d0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013d12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	4659      	mov	r1, fp
 8013d1a:	dd0f      	ble.n	8013d3c <_strtod_l+0x604>
 8013d1c:	2b1f      	cmp	r3, #31
 8013d1e:	dd55      	ble.n	8013dcc <_strtod_l+0x694>
 8013d20:	2b34      	cmp	r3, #52	@ 0x34
 8013d22:	bfde      	ittt	le
 8013d24:	f04f 33ff 	movle.w	r3, #4294967295
 8013d28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8013d2c:	4093      	lslle	r3, r2
 8013d2e:	f04f 0a00 	mov.w	sl, #0
 8013d32:	bfcc      	ite	gt
 8013d34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013d38:	ea03 0b01 	andle.w	fp, r3, r1
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	2300      	movs	r3, #0
 8013d40:	4650      	mov	r0, sl
 8013d42:	4659      	mov	r1, fp
 8013d44:	f7ec fee8 	bl	8000b18 <__aeabi_dcmpeq>
 8013d48:	2800      	cmp	r0, #0
 8013d4a:	d1a6      	bne.n	8013c9a <_strtod_l+0x562>
 8013d4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d4e:	9300      	str	r3, [sp, #0]
 8013d50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013d52:	9805      	ldr	r0, [sp, #20]
 8013d54:	462b      	mov	r3, r5
 8013d56:	463a      	mov	r2, r7
 8013d58:	f7ff f8c6 	bl	8012ee8 <__s2b>
 8013d5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8013d5e:	2800      	cmp	r0, #0
 8013d60:	f43f af05 	beq.w	8013b6e <_strtod_l+0x436>
 8013d64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013d66:	2a00      	cmp	r2, #0
 8013d68:	eba9 0308 	sub.w	r3, r9, r8
 8013d6c:	bfa8      	it	ge
 8013d6e:	2300      	movge	r3, #0
 8013d70:	9312      	str	r3, [sp, #72]	@ 0x48
 8013d72:	2400      	movs	r4, #0
 8013d74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013d78:	9316      	str	r3, [sp, #88]	@ 0x58
 8013d7a:	46a0      	mov	r8, r4
 8013d7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d7e:	9805      	ldr	r0, [sp, #20]
 8013d80:	6859      	ldr	r1, [r3, #4]
 8013d82:	f7ff f809 	bl	8012d98 <_Balloc>
 8013d86:	4681      	mov	r9, r0
 8013d88:	2800      	cmp	r0, #0
 8013d8a:	f43f aef4 	beq.w	8013b76 <_strtod_l+0x43e>
 8013d8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d90:	691a      	ldr	r2, [r3, #16]
 8013d92:	3202      	adds	r2, #2
 8013d94:	f103 010c 	add.w	r1, r3, #12
 8013d98:	0092      	lsls	r2, r2, #2
 8013d9a:	300c      	adds	r0, #12
 8013d9c:	f7fe f899 	bl	8011ed2 <memcpy>
 8013da0:	ec4b ab10 	vmov	d0, sl, fp
 8013da4:	9805      	ldr	r0, [sp, #20]
 8013da6:	aa1c      	add	r2, sp, #112	@ 0x70
 8013da8:	a91b      	add	r1, sp, #108	@ 0x6c
 8013daa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8013dae:	f7ff fbd7 	bl	8013560 <__d2b>
 8013db2:	901a      	str	r0, [sp, #104]	@ 0x68
 8013db4:	2800      	cmp	r0, #0
 8013db6:	f43f aede 	beq.w	8013b76 <_strtod_l+0x43e>
 8013dba:	9805      	ldr	r0, [sp, #20]
 8013dbc:	2101      	movs	r1, #1
 8013dbe:	f7ff f929 	bl	8013014 <__i2b>
 8013dc2:	4680      	mov	r8, r0
 8013dc4:	b948      	cbnz	r0, 8013dda <_strtod_l+0x6a2>
 8013dc6:	f04f 0800 	mov.w	r8, #0
 8013dca:	e6d4      	b.n	8013b76 <_strtod_l+0x43e>
 8013dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8013dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8013dd4:	ea03 0a0a 	and.w	sl, r3, sl
 8013dd8:	e7b0      	b.n	8013d3c <_strtod_l+0x604>
 8013dda:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013ddc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013dde:	2d00      	cmp	r5, #0
 8013de0:	bfab      	itete	ge
 8013de2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8013de4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8013de6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8013de8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8013dea:	bfac      	ite	ge
 8013dec:	18ef      	addge	r7, r5, r3
 8013dee:	1b5e      	sublt	r6, r3, r5
 8013df0:	9b08      	ldr	r3, [sp, #32]
 8013df2:	1aed      	subs	r5, r5, r3
 8013df4:	4415      	add	r5, r2
 8013df6:	4b66      	ldr	r3, [pc, #408]	@ (8013f90 <_strtod_l+0x858>)
 8013df8:	3d01      	subs	r5, #1
 8013dfa:	429d      	cmp	r5, r3
 8013dfc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013e00:	da50      	bge.n	8013ea4 <_strtod_l+0x76c>
 8013e02:	1b5b      	subs	r3, r3, r5
 8013e04:	2b1f      	cmp	r3, #31
 8013e06:	eba2 0203 	sub.w	r2, r2, r3
 8013e0a:	f04f 0101 	mov.w	r1, #1
 8013e0e:	dc3d      	bgt.n	8013e8c <_strtod_l+0x754>
 8013e10:	fa01 f303 	lsl.w	r3, r1, r3
 8013e14:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013e16:	2300      	movs	r3, #0
 8013e18:	9310      	str	r3, [sp, #64]	@ 0x40
 8013e1a:	18bd      	adds	r5, r7, r2
 8013e1c:	9b08      	ldr	r3, [sp, #32]
 8013e1e:	42af      	cmp	r7, r5
 8013e20:	4416      	add	r6, r2
 8013e22:	441e      	add	r6, r3
 8013e24:	463b      	mov	r3, r7
 8013e26:	bfa8      	it	ge
 8013e28:	462b      	movge	r3, r5
 8013e2a:	42b3      	cmp	r3, r6
 8013e2c:	bfa8      	it	ge
 8013e2e:	4633      	movge	r3, r6
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	bfc2      	ittt	gt
 8013e34:	1aed      	subgt	r5, r5, r3
 8013e36:	1af6      	subgt	r6, r6, r3
 8013e38:	1aff      	subgt	r7, r7, r3
 8013e3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	dd16      	ble.n	8013e6e <_strtod_l+0x736>
 8013e40:	4641      	mov	r1, r8
 8013e42:	9805      	ldr	r0, [sp, #20]
 8013e44:	461a      	mov	r2, r3
 8013e46:	f7ff f9a5 	bl	8013194 <__pow5mult>
 8013e4a:	4680      	mov	r8, r0
 8013e4c:	2800      	cmp	r0, #0
 8013e4e:	d0ba      	beq.n	8013dc6 <_strtod_l+0x68e>
 8013e50:	4601      	mov	r1, r0
 8013e52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013e54:	9805      	ldr	r0, [sp, #20]
 8013e56:	f7ff f8f3 	bl	8013040 <__multiply>
 8013e5a:	900e      	str	r0, [sp, #56]	@ 0x38
 8013e5c:	2800      	cmp	r0, #0
 8013e5e:	f43f ae8a 	beq.w	8013b76 <_strtod_l+0x43e>
 8013e62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013e64:	9805      	ldr	r0, [sp, #20]
 8013e66:	f7fe ffd7 	bl	8012e18 <_Bfree>
 8013e6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8013e6e:	2d00      	cmp	r5, #0
 8013e70:	dc1d      	bgt.n	8013eae <_strtod_l+0x776>
 8013e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	dd23      	ble.n	8013ec0 <_strtod_l+0x788>
 8013e78:	4649      	mov	r1, r9
 8013e7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013e7c:	9805      	ldr	r0, [sp, #20]
 8013e7e:	f7ff f989 	bl	8013194 <__pow5mult>
 8013e82:	4681      	mov	r9, r0
 8013e84:	b9e0      	cbnz	r0, 8013ec0 <_strtod_l+0x788>
 8013e86:	f04f 0900 	mov.w	r9, #0
 8013e8a:	e674      	b.n	8013b76 <_strtod_l+0x43e>
 8013e8c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8013e90:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8013e94:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8013e98:	35e2      	adds	r5, #226	@ 0xe2
 8013e9a:	fa01 f305 	lsl.w	r3, r1, r5
 8013e9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8013ea0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013ea2:	e7ba      	b.n	8013e1a <_strtod_l+0x6e2>
 8013ea4:	2300      	movs	r3, #0
 8013ea6:	9310      	str	r3, [sp, #64]	@ 0x40
 8013ea8:	2301      	movs	r3, #1
 8013eaa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013eac:	e7b5      	b.n	8013e1a <_strtod_l+0x6e2>
 8013eae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013eb0:	9805      	ldr	r0, [sp, #20]
 8013eb2:	462a      	mov	r2, r5
 8013eb4:	f7ff f9c8 	bl	8013248 <__lshift>
 8013eb8:	901a      	str	r0, [sp, #104]	@ 0x68
 8013eba:	2800      	cmp	r0, #0
 8013ebc:	d1d9      	bne.n	8013e72 <_strtod_l+0x73a>
 8013ebe:	e65a      	b.n	8013b76 <_strtod_l+0x43e>
 8013ec0:	2e00      	cmp	r6, #0
 8013ec2:	dd07      	ble.n	8013ed4 <_strtod_l+0x79c>
 8013ec4:	4649      	mov	r1, r9
 8013ec6:	9805      	ldr	r0, [sp, #20]
 8013ec8:	4632      	mov	r2, r6
 8013eca:	f7ff f9bd 	bl	8013248 <__lshift>
 8013ece:	4681      	mov	r9, r0
 8013ed0:	2800      	cmp	r0, #0
 8013ed2:	d0d8      	beq.n	8013e86 <_strtod_l+0x74e>
 8013ed4:	2f00      	cmp	r7, #0
 8013ed6:	dd08      	ble.n	8013eea <_strtod_l+0x7b2>
 8013ed8:	4641      	mov	r1, r8
 8013eda:	9805      	ldr	r0, [sp, #20]
 8013edc:	463a      	mov	r2, r7
 8013ede:	f7ff f9b3 	bl	8013248 <__lshift>
 8013ee2:	4680      	mov	r8, r0
 8013ee4:	2800      	cmp	r0, #0
 8013ee6:	f43f ae46 	beq.w	8013b76 <_strtod_l+0x43e>
 8013eea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013eec:	9805      	ldr	r0, [sp, #20]
 8013eee:	464a      	mov	r2, r9
 8013ef0:	f7ff fa32 	bl	8013358 <__mdiff>
 8013ef4:	4604      	mov	r4, r0
 8013ef6:	2800      	cmp	r0, #0
 8013ef8:	f43f ae3d 	beq.w	8013b76 <_strtod_l+0x43e>
 8013efc:	68c3      	ldr	r3, [r0, #12]
 8013efe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013f00:	2300      	movs	r3, #0
 8013f02:	60c3      	str	r3, [r0, #12]
 8013f04:	4641      	mov	r1, r8
 8013f06:	f7ff fa0b 	bl	8013320 <__mcmp>
 8013f0a:	2800      	cmp	r0, #0
 8013f0c:	da46      	bge.n	8013f9c <_strtod_l+0x864>
 8013f0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013f10:	ea53 030a 	orrs.w	r3, r3, sl
 8013f14:	d16c      	bne.n	8013ff0 <_strtod_l+0x8b8>
 8013f16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d168      	bne.n	8013ff0 <_strtod_l+0x8b8>
 8013f1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013f22:	0d1b      	lsrs	r3, r3, #20
 8013f24:	051b      	lsls	r3, r3, #20
 8013f26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013f2a:	d961      	bls.n	8013ff0 <_strtod_l+0x8b8>
 8013f2c:	6963      	ldr	r3, [r4, #20]
 8013f2e:	b913      	cbnz	r3, 8013f36 <_strtod_l+0x7fe>
 8013f30:	6923      	ldr	r3, [r4, #16]
 8013f32:	2b01      	cmp	r3, #1
 8013f34:	dd5c      	ble.n	8013ff0 <_strtod_l+0x8b8>
 8013f36:	4621      	mov	r1, r4
 8013f38:	2201      	movs	r2, #1
 8013f3a:	9805      	ldr	r0, [sp, #20]
 8013f3c:	f7ff f984 	bl	8013248 <__lshift>
 8013f40:	4641      	mov	r1, r8
 8013f42:	4604      	mov	r4, r0
 8013f44:	f7ff f9ec 	bl	8013320 <__mcmp>
 8013f48:	2800      	cmp	r0, #0
 8013f4a:	dd51      	ble.n	8013ff0 <_strtod_l+0x8b8>
 8013f4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013f50:	9a08      	ldr	r2, [sp, #32]
 8013f52:	0d1b      	lsrs	r3, r3, #20
 8013f54:	051b      	lsls	r3, r3, #20
 8013f56:	2a00      	cmp	r2, #0
 8013f58:	d06b      	beq.n	8014032 <_strtod_l+0x8fa>
 8013f5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013f5e:	d868      	bhi.n	8014032 <_strtod_l+0x8fa>
 8013f60:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8013f64:	f67f ae9d 	bls.w	8013ca2 <_strtod_l+0x56a>
 8013f68:	4b0a      	ldr	r3, [pc, #40]	@ (8013f94 <_strtod_l+0x85c>)
 8013f6a:	4650      	mov	r0, sl
 8013f6c:	4659      	mov	r1, fp
 8013f6e:	2200      	movs	r2, #0
 8013f70:	f7ec fb6a 	bl	8000648 <__aeabi_dmul>
 8013f74:	4b08      	ldr	r3, [pc, #32]	@ (8013f98 <_strtod_l+0x860>)
 8013f76:	400b      	ands	r3, r1
 8013f78:	4682      	mov	sl, r0
 8013f7a:	468b      	mov	fp, r1
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	f47f ae05 	bne.w	8013b8c <_strtod_l+0x454>
 8013f82:	9a05      	ldr	r2, [sp, #20]
 8013f84:	2322      	movs	r3, #34	@ 0x22
 8013f86:	6013      	str	r3, [r2, #0]
 8013f88:	e600      	b.n	8013b8c <_strtod_l+0x454>
 8013f8a:	bf00      	nop
 8013f8c:	08017278 	.word	0x08017278
 8013f90:	fffffc02 	.word	0xfffffc02
 8013f94:	39500000 	.word	0x39500000
 8013f98:	7ff00000 	.word	0x7ff00000
 8013f9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8013fa0:	d165      	bne.n	801406e <_strtod_l+0x936>
 8013fa2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013fa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013fa8:	b35a      	cbz	r2, 8014002 <_strtod_l+0x8ca>
 8013faa:	4a9f      	ldr	r2, [pc, #636]	@ (8014228 <_strtod_l+0xaf0>)
 8013fac:	4293      	cmp	r3, r2
 8013fae:	d12b      	bne.n	8014008 <_strtod_l+0x8d0>
 8013fb0:	9b08      	ldr	r3, [sp, #32]
 8013fb2:	4651      	mov	r1, sl
 8013fb4:	b303      	cbz	r3, 8013ff8 <_strtod_l+0x8c0>
 8013fb6:	4b9d      	ldr	r3, [pc, #628]	@ (801422c <_strtod_l+0xaf4>)
 8013fb8:	465a      	mov	r2, fp
 8013fba:	4013      	ands	r3, r2
 8013fbc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8013fc4:	d81b      	bhi.n	8013ffe <_strtod_l+0x8c6>
 8013fc6:	0d1b      	lsrs	r3, r3, #20
 8013fc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8013fd0:	4299      	cmp	r1, r3
 8013fd2:	d119      	bne.n	8014008 <_strtod_l+0x8d0>
 8013fd4:	4b96      	ldr	r3, [pc, #600]	@ (8014230 <_strtod_l+0xaf8>)
 8013fd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013fd8:	429a      	cmp	r2, r3
 8013fda:	d102      	bne.n	8013fe2 <_strtod_l+0x8aa>
 8013fdc:	3101      	adds	r1, #1
 8013fde:	f43f adca 	beq.w	8013b76 <_strtod_l+0x43e>
 8013fe2:	4b92      	ldr	r3, [pc, #584]	@ (801422c <_strtod_l+0xaf4>)
 8013fe4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013fe6:	401a      	ands	r2, r3
 8013fe8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8013fec:	f04f 0a00 	mov.w	sl, #0
 8013ff0:	9b08      	ldr	r3, [sp, #32]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d1b8      	bne.n	8013f68 <_strtod_l+0x830>
 8013ff6:	e5c9      	b.n	8013b8c <_strtod_l+0x454>
 8013ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8013ffc:	e7e8      	b.n	8013fd0 <_strtod_l+0x898>
 8013ffe:	4613      	mov	r3, r2
 8014000:	e7e6      	b.n	8013fd0 <_strtod_l+0x898>
 8014002:	ea53 030a 	orrs.w	r3, r3, sl
 8014006:	d0a1      	beq.n	8013f4c <_strtod_l+0x814>
 8014008:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801400a:	b1db      	cbz	r3, 8014044 <_strtod_l+0x90c>
 801400c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801400e:	4213      	tst	r3, r2
 8014010:	d0ee      	beq.n	8013ff0 <_strtod_l+0x8b8>
 8014012:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014014:	9a08      	ldr	r2, [sp, #32]
 8014016:	4650      	mov	r0, sl
 8014018:	4659      	mov	r1, fp
 801401a:	b1bb      	cbz	r3, 801404c <_strtod_l+0x914>
 801401c:	f7ff fb6e 	bl	80136fc <sulp>
 8014020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014024:	ec53 2b10 	vmov	r2, r3, d0
 8014028:	f7ec f958 	bl	80002dc <__adddf3>
 801402c:	4682      	mov	sl, r0
 801402e:	468b      	mov	fp, r1
 8014030:	e7de      	b.n	8013ff0 <_strtod_l+0x8b8>
 8014032:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014036:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801403a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801403e:	f04f 3aff 	mov.w	sl, #4294967295
 8014042:	e7d5      	b.n	8013ff0 <_strtod_l+0x8b8>
 8014044:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014046:	ea13 0f0a 	tst.w	r3, sl
 801404a:	e7e1      	b.n	8014010 <_strtod_l+0x8d8>
 801404c:	f7ff fb56 	bl	80136fc <sulp>
 8014050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014054:	ec53 2b10 	vmov	r2, r3, d0
 8014058:	f7ec f93e 	bl	80002d8 <__aeabi_dsub>
 801405c:	2200      	movs	r2, #0
 801405e:	2300      	movs	r3, #0
 8014060:	4682      	mov	sl, r0
 8014062:	468b      	mov	fp, r1
 8014064:	f7ec fd58 	bl	8000b18 <__aeabi_dcmpeq>
 8014068:	2800      	cmp	r0, #0
 801406a:	d0c1      	beq.n	8013ff0 <_strtod_l+0x8b8>
 801406c:	e619      	b.n	8013ca2 <_strtod_l+0x56a>
 801406e:	4641      	mov	r1, r8
 8014070:	4620      	mov	r0, r4
 8014072:	f7ff facd 	bl	8013610 <__ratio>
 8014076:	ec57 6b10 	vmov	r6, r7, d0
 801407a:	2200      	movs	r2, #0
 801407c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8014080:	4630      	mov	r0, r6
 8014082:	4639      	mov	r1, r7
 8014084:	f7ec fd5c 	bl	8000b40 <__aeabi_dcmple>
 8014088:	2800      	cmp	r0, #0
 801408a:	d06f      	beq.n	801416c <_strtod_l+0xa34>
 801408c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801408e:	2b00      	cmp	r3, #0
 8014090:	d17a      	bne.n	8014188 <_strtod_l+0xa50>
 8014092:	f1ba 0f00 	cmp.w	sl, #0
 8014096:	d158      	bne.n	801414a <_strtod_l+0xa12>
 8014098:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801409a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d15a      	bne.n	8014158 <_strtod_l+0xa20>
 80140a2:	4b64      	ldr	r3, [pc, #400]	@ (8014234 <_strtod_l+0xafc>)
 80140a4:	2200      	movs	r2, #0
 80140a6:	4630      	mov	r0, r6
 80140a8:	4639      	mov	r1, r7
 80140aa:	f7ec fd3f 	bl	8000b2c <__aeabi_dcmplt>
 80140ae:	2800      	cmp	r0, #0
 80140b0:	d159      	bne.n	8014166 <_strtod_l+0xa2e>
 80140b2:	4630      	mov	r0, r6
 80140b4:	4639      	mov	r1, r7
 80140b6:	4b60      	ldr	r3, [pc, #384]	@ (8014238 <_strtod_l+0xb00>)
 80140b8:	2200      	movs	r2, #0
 80140ba:	f7ec fac5 	bl	8000648 <__aeabi_dmul>
 80140be:	4606      	mov	r6, r0
 80140c0:	460f      	mov	r7, r1
 80140c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80140c6:	9606      	str	r6, [sp, #24]
 80140c8:	9307      	str	r3, [sp, #28]
 80140ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80140ce:	4d57      	ldr	r5, [pc, #348]	@ (801422c <_strtod_l+0xaf4>)
 80140d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80140d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80140d6:	401d      	ands	r5, r3
 80140d8:	4b58      	ldr	r3, [pc, #352]	@ (801423c <_strtod_l+0xb04>)
 80140da:	429d      	cmp	r5, r3
 80140dc:	f040 80b2 	bne.w	8014244 <_strtod_l+0xb0c>
 80140e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80140e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80140e6:	ec4b ab10 	vmov	d0, sl, fp
 80140ea:	f7ff f9c9 	bl	8013480 <__ulp>
 80140ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80140f2:	ec51 0b10 	vmov	r0, r1, d0
 80140f6:	f7ec faa7 	bl	8000648 <__aeabi_dmul>
 80140fa:	4652      	mov	r2, sl
 80140fc:	465b      	mov	r3, fp
 80140fe:	f7ec f8ed 	bl	80002dc <__adddf3>
 8014102:	460b      	mov	r3, r1
 8014104:	4949      	ldr	r1, [pc, #292]	@ (801422c <_strtod_l+0xaf4>)
 8014106:	4a4e      	ldr	r2, [pc, #312]	@ (8014240 <_strtod_l+0xb08>)
 8014108:	4019      	ands	r1, r3
 801410a:	4291      	cmp	r1, r2
 801410c:	4682      	mov	sl, r0
 801410e:	d942      	bls.n	8014196 <_strtod_l+0xa5e>
 8014110:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014112:	4b47      	ldr	r3, [pc, #284]	@ (8014230 <_strtod_l+0xaf8>)
 8014114:	429a      	cmp	r2, r3
 8014116:	d103      	bne.n	8014120 <_strtod_l+0x9e8>
 8014118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801411a:	3301      	adds	r3, #1
 801411c:	f43f ad2b 	beq.w	8013b76 <_strtod_l+0x43e>
 8014120:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8014230 <_strtod_l+0xaf8>
 8014124:	f04f 3aff 	mov.w	sl, #4294967295
 8014128:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801412a:	9805      	ldr	r0, [sp, #20]
 801412c:	f7fe fe74 	bl	8012e18 <_Bfree>
 8014130:	9805      	ldr	r0, [sp, #20]
 8014132:	4649      	mov	r1, r9
 8014134:	f7fe fe70 	bl	8012e18 <_Bfree>
 8014138:	9805      	ldr	r0, [sp, #20]
 801413a:	4641      	mov	r1, r8
 801413c:	f7fe fe6c 	bl	8012e18 <_Bfree>
 8014140:	9805      	ldr	r0, [sp, #20]
 8014142:	4621      	mov	r1, r4
 8014144:	f7fe fe68 	bl	8012e18 <_Bfree>
 8014148:	e618      	b.n	8013d7c <_strtod_l+0x644>
 801414a:	f1ba 0f01 	cmp.w	sl, #1
 801414e:	d103      	bne.n	8014158 <_strtod_l+0xa20>
 8014150:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014152:	2b00      	cmp	r3, #0
 8014154:	f43f ada5 	beq.w	8013ca2 <_strtod_l+0x56a>
 8014158:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8014208 <_strtod_l+0xad0>
 801415c:	4f35      	ldr	r7, [pc, #212]	@ (8014234 <_strtod_l+0xafc>)
 801415e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014162:	2600      	movs	r6, #0
 8014164:	e7b1      	b.n	80140ca <_strtod_l+0x992>
 8014166:	4f34      	ldr	r7, [pc, #208]	@ (8014238 <_strtod_l+0xb00>)
 8014168:	2600      	movs	r6, #0
 801416a:	e7aa      	b.n	80140c2 <_strtod_l+0x98a>
 801416c:	4b32      	ldr	r3, [pc, #200]	@ (8014238 <_strtod_l+0xb00>)
 801416e:	4630      	mov	r0, r6
 8014170:	4639      	mov	r1, r7
 8014172:	2200      	movs	r2, #0
 8014174:	f7ec fa68 	bl	8000648 <__aeabi_dmul>
 8014178:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801417a:	4606      	mov	r6, r0
 801417c:	460f      	mov	r7, r1
 801417e:	2b00      	cmp	r3, #0
 8014180:	d09f      	beq.n	80140c2 <_strtod_l+0x98a>
 8014182:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8014186:	e7a0      	b.n	80140ca <_strtod_l+0x992>
 8014188:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8014210 <_strtod_l+0xad8>
 801418c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014190:	ec57 6b17 	vmov	r6, r7, d7
 8014194:	e799      	b.n	80140ca <_strtod_l+0x992>
 8014196:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801419a:	9b08      	ldr	r3, [sp, #32]
 801419c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d1c1      	bne.n	8014128 <_strtod_l+0x9f0>
 80141a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80141a8:	0d1b      	lsrs	r3, r3, #20
 80141aa:	051b      	lsls	r3, r3, #20
 80141ac:	429d      	cmp	r5, r3
 80141ae:	d1bb      	bne.n	8014128 <_strtod_l+0x9f0>
 80141b0:	4630      	mov	r0, r6
 80141b2:	4639      	mov	r1, r7
 80141b4:	f7ec fda8 	bl	8000d08 <__aeabi_d2lz>
 80141b8:	f7ec fa18 	bl	80005ec <__aeabi_l2d>
 80141bc:	4602      	mov	r2, r0
 80141be:	460b      	mov	r3, r1
 80141c0:	4630      	mov	r0, r6
 80141c2:	4639      	mov	r1, r7
 80141c4:	f7ec f888 	bl	80002d8 <__aeabi_dsub>
 80141c8:	460b      	mov	r3, r1
 80141ca:	4602      	mov	r2, r0
 80141cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80141d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80141d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80141d6:	ea46 060a 	orr.w	r6, r6, sl
 80141da:	431e      	orrs	r6, r3
 80141dc:	d06f      	beq.n	80142be <_strtod_l+0xb86>
 80141de:	a30e      	add	r3, pc, #56	@ (adr r3, 8014218 <_strtod_l+0xae0>)
 80141e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141e4:	f7ec fca2 	bl	8000b2c <__aeabi_dcmplt>
 80141e8:	2800      	cmp	r0, #0
 80141ea:	f47f accf 	bne.w	8013b8c <_strtod_l+0x454>
 80141ee:	a30c      	add	r3, pc, #48	@ (adr r3, 8014220 <_strtod_l+0xae8>)
 80141f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80141f8:	f7ec fcb6 	bl	8000b68 <__aeabi_dcmpgt>
 80141fc:	2800      	cmp	r0, #0
 80141fe:	d093      	beq.n	8014128 <_strtod_l+0x9f0>
 8014200:	e4c4      	b.n	8013b8c <_strtod_l+0x454>
 8014202:	bf00      	nop
 8014204:	f3af 8000 	nop.w
 8014208:	00000000 	.word	0x00000000
 801420c:	bff00000 	.word	0xbff00000
 8014210:	00000000 	.word	0x00000000
 8014214:	3ff00000 	.word	0x3ff00000
 8014218:	94a03595 	.word	0x94a03595
 801421c:	3fdfffff 	.word	0x3fdfffff
 8014220:	35afe535 	.word	0x35afe535
 8014224:	3fe00000 	.word	0x3fe00000
 8014228:	000fffff 	.word	0x000fffff
 801422c:	7ff00000 	.word	0x7ff00000
 8014230:	7fefffff 	.word	0x7fefffff
 8014234:	3ff00000 	.word	0x3ff00000
 8014238:	3fe00000 	.word	0x3fe00000
 801423c:	7fe00000 	.word	0x7fe00000
 8014240:	7c9fffff 	.word	0x7c9fffff
 8014244:	9b08      	ldr	r3, [sp, #32]
 8014246:	b323      	cbz	r3, 8014292 <_strtod_l+0xb5a>
 8014248:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801424c:	d821      	bhi.n	8014292 <_strtod_l+0xb5a>
 801424e:	a328      	add	r3, pc, #160	@ (adr r3, 80142f0 <_strtod_l+0xbb8>)
 8014250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014254:	4630      	mov	r0, r6
 8014256:	4639      	mov	r1, r7
 8014258:	f7ec fc72 	bl	8000b40 <__aeabi_dcmple>
 801425c:	b1a0      	cbz	r0, 8014288 <_strtod_l+0xb50>
 801425e:	4639      	mov	r1, r7
 8014260:	4630      	mov	r0, r6
 8014262:	f7ec fcc9 	bl	8000bf8 <__aeabi_d2uiz>
 8014266:	2801      	cmp	r0, #1
 8014268:	bf38      	it	cc
 801426a:	2001      	movcc	r0, #1
 801426c:	f7ec f972 	bl	8000554 <__aeabi_ui2d>
 8014270:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014272:	4606      	mov	r6, r0
 8014274:	460f      	mov	r7, r1
 8014276:	b9fb      	cbnz	r3, 80142b8 <_strtod_l+0xb80>
 8014278:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801427c:	9014      	str	r0, [sp, #80]	@ 0x50
 801427e:	9315      	str	r3, [sp, #84]	@ 0x54
 8014280:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8014284:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8014288:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801428a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801428e:	1b5b      	subs	r3, r3, r5
 8014290:	9311      	str	r3, [sp, #68]	@ 0x44
 8014292:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8014296:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801429a:	f7ff f8f1 	bl	8013480 <__ulp>
 801429e:	4650      	mov	r0, sl
 80142a0:	ec53 2b10 	vmov	r2, r3, d0
 80142a4:	4659      	mov	r1, fp
 80142a6:	f7ec f9cf 	bl	8000648 <__aeabi_dmul>
 80142aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80142ae:	f7ec f815 	bl	80002dc <__adddf3>
 80142b2:	4682      	mov	sl, r0
 80142b4:	468b      	mov	fp, r1
 80142b6:	e770      	b.n	801419a <_strtod_l+0xa62>
 80142b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80142bc:	e7e0      	b.n	8014280 <_strtod_l+0xb48>
 80142be:	a30e      	add	r3, pc, #56	@ (adr r3, 80142f8 <_strtod_l+0xbc0>)
 80142c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142c4:	f7ec fc32 	bl	8000b2c <__aeabi_dcmplt>
 80142c8:	e798      	b.n	80141fc <_strtod_l+0xac4>
 80142ca:	2300      	movs	r3, #0
 80142cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80142ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80142d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80142d2:	6013      	str	r3, [r2, #0]
 80142d4:	f7ff ba6d 	b.w	80137b2 <_strtod_l+0x7a>
 80142d8:	2a65      	cmp	r2, #101	@ 0x65
 80142da:	f43f ab66 	beq.w	80139aa <_strtod_l+0x272>
 80142de:	2a45      	cmp	r2, #69	@ 0x45
 80142e0:	f43f ab63 	beq.w	80139aa <_strtod_l+0x272>
 80142e4:	2301      	movs	r3, #1
 80142e6:	f7ff bb9e 	b.w	8013a26 <_strtod_l+0x2ee>
 80142ea:	bf00      	nop
 80142ec:	f3af 8000 	nop.w
 80142f0:	ffc00000 	.word	0xffc00000
 80142f4:	41dfffff 	.word	0x41dfffff
 80142f8:	94a03595 	.word	0x94a03595
 80142fc:	3fcfffff 	.word	0x3fcfffff

08014300 <_strtod_r>:
 8014300:	4b01      	ldr	r3, [pc, #4]	@ (8014308 <_strtod_r+0x8>)
 8014302:	f7ff ba19 	b.w	8013738 <_strtod_l>
 8014306:	bf00      	nop
 8014308:	20000234 	.word	0x20000234

0801430c <_strtol_l.constprop.0>:
 801430c:	2b24      	cmp	r3, #36	@ 0x24
 801430e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014312:	4686      	mov	lr, r0
 8014314:	4690      	mov	r8, r2
 8014316:	d801      	bhi.n	801431c <_strtol_l.constprop.0+0x10>
 8014318:	2b01      	cmp	r3, #1
 801431a:	d106      	bne.n	801432a <_strtol_l.constprop.0+0x1e>
 801431c:	f7fd fdac 	bl	8011e78 <__errno>
 8014320:	2316      	movs	r3, #22
 8014322:	6003      	str	r3, [r0, #0]
 8014324:	2000      	movs	r0, #0
 8014326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801432a:	4834      	ldr	r0, [pc, #208]	@ (80143fc <_strtol_l.constprop.0+0xf0>)
 801432c:	460d      	mov	r5, r1
 801432e:	462a      	mov	r2, r5
 8014330:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014334:	5d06      	ldrb	r6, [r0, r4]
 8014336:	f016 0608 	ands.w	r6, r6, #8
 801433a:	d1f8      	bne.n	801432e <_strtol_l.constprop.0+0x22>
 801433c:	2c2d      	cmp	r4, #45	@ 0x2d
 801433e:	d12d      	bne.n	801439c <_strtol_l.constprop.0+0x90>
 8014340:	782c      	ldrb	r4, [r5, #0]
 8014342:	2601      	movs	r6, #1
 8014344:	1c95      	adds	r5, r2, #2
 8014346:	f033 0210 	bics.w	r2, r3, #16
 801434a:	d109      	bne.n	8014360 <_strtol_l.constprop.0+0x54>
 801434c:	2c30      	cmp	r4, #48	@ 0x30
 801434e:	d12a      	bne.n	80143a6 <_strtol_l.constprop.0+0x9a>
 8014350:	782a      	ldrb	r2, [r5, #0]
 8014352:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014356:	2a58      	cmp	r2, #88	@ 0x58
 8014358:	d125      	bne.n	80143a6 <_strtol_l.constprop.0+0x9a>
 801435a:	786c      	ldrb	r4, [r5, #1]
 801435c:	2310      	movs	r3, #16
 801435e:	3502      	adds	r5, #2
 8014360:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8014364:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014368:	2200      	movs	r2, #0
 801436a:	fbbc f9f3 	udiv	r9, ip, r3
 801436e:	4610      	mov	r0, r2
 8014370:	fb03 ca19 	mls	sl, r3, r9, ip
 8014374:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8014378:	2f09      	cmp	r7, #9
 801437a:	d81b      	bhi.n	80143b4 <_strtol_l.constprop.0+0xa8>
 801437c:	463c      	mov	r4, r7
 801437e:	42a3      	cmp	r3, r4
 8014380:	dd27      	ble.n	80143d2 <_strtol_l.constprop.0+0xc6>
 8014382:	1c57      	adds	r7, r2, #1
 8014384:	d007      	beq.n	8014396 <_strtol_l.constprop.0+0x8a>
 8014386:	4581      	cmp	r9, r0
 8014388:	d320      	bcc.n	80143cc <_strtol_l.constprop.0+0xc0>
 801438a:	d101      	bne.n	8014390 <_strtol_l.constprop.0+0x84>
 801438c:	45a2      	cmp	sl, r4
 801438e:	db1d      	blt.n	80143cc <_strtol_l.constprop.0+0xc0>
 8014390:	fb00 4003 	mla	r0, r0, r3, r4
 8014394:	2201      	movs	r2, #1
 8014396:	f815 4b01 	ldrb.w	r4, [r5], #1
 801439a:	e7eb      	b.n	8014374 <_strtol_l.constprop.0+0x68>
 801439c:	2c2b      	cmp	r4, #43	@ 0x2b
 801439e:	bf04      	itt	eq
 80143a0:	782c      	ldrbeq	r4, [r5, #0]
 80143a2:	1c95      	addeq	r5, r2, #2
 80143a4:	e7cf      	b.n	8014346 <_strtol_l.constprop.0+0x3a>
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d1da      	bne.n	8014360 <_strtol_l.constprop.0+0x54>
 80143aa:	2c30      	cmp	r4, #48	@ 0x30
 80143ac:	bf0c      	ite	eq
 80143ae:	2308      	moveq	r3, #8
 80143b0:	230a      	movne	r3, #10
 80143b2:	e7d5      	b.n	8014360 <_strtol_l.constprop.0+0x54>
 80143b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80143b8:	2f19      	cmp	r7, #25
 80143ba:	d801      	bhi.n	80143c0 <_strtol_l.constprop.0+0xb4>
 80143bc:	3c37      	subs	r4, #55	@ 0x37
 80143be:	e7de      	b.n	801437e <_strtol_l.constprop.0+0x72>
 80143c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80143c4:	2f19      	cmp	r7, #25
 80143c6:	d804      	bhi.n	80143d2 <_strtol_l.constprop.0+0xc6>
 80143c8:	3c57      	subs	r4, #87	@ 0x57
 80143ca:	e7d8      	b.n	801437e <_strtol_l.constprop.0+0x72>
 80143cc:	f04f 32ff 	mov.w	r2, #4294967295
 80143d0:	e7e1      	b.n	8014396 <_strtol_l.constprop.0+0x8a>
 80143d2:	1c53      	adds	r3, r2, #1
 80143d4:	d108      	bne.n	80143e8 <_strtol_l.constprop.0+0xdc>
 80143d6:	2322      	movs	r3, #34	@ 0x22
 80143d8:	f8ce 3000 	str.w	r3, [lr]
 80143dc:	4660      	mov	r0, ip
 80143de:	f1b8 0f00 	cmp.w	r8, #0
 80143e2:	d0a0      	beq.n	8014326 <_strtol_l.constprop.0+0x1a>
 80143e4:	1e69      	subs	r1, r5, #1
 80143e6:	e006      	b.n	80143f6 <_strtol_l.constprop.0+0xea>
 80143e8:	b106      	cbz	r6, 80143ec <_strtol_l.constprop.0+0xe0>
 80143ea:	4240      	negs	r0, r0
 80143ec:	f1b8 0f00 	cmp.w	r8, #0
 80143f0:	d099      	beq.n	8014326 <_strtol_l.constprop.0+0x1a>
 80143f2:	2a00      	cmp	r2, #0
 80143f4:	d1f6      	bne.n	80143e4 <_strtol_l.constprop.0+0xd8>
 80143f6:	f8c8 1000 	str.w	r1, [r8]
 80143fa:	e794      	b.n	8014326 <_strtol_l.constprop.0+0x1a>
 80143fc:	080172a1 	.word	0x080172a1

08014400 <_strtol_r>:
 8014400:	f7ff bf84 	b.w	801430c <_strtol_l.constprop.0>

08014404 <__ssputs_r>:
 8014404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014408:	688e      	ldr	r6, [r1, #8]
 801440a:	461f      	mov	r7, r3
 801440c:	42be      	cmp	r6, r7
 801440e:	680b      	ldr	r3, [r1, #0]
 8014410:	4682      	mov	sl, r0
 8014412:	460c      	mov	r4, r1
 8014414:	4690      	mov	r8, r2
 8014416:	d82d      	bhi.n	8014474 <__ssputs_r+0x70>
 8014418:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801441c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014420:	d026      	beq.n	8014470 <__ssputs_r+0x6c>
 8014422:	6965      	ldr	r5, [r4, #20]
 8014424:	6909      	ldr	r1, [r1, #16]
 8014426:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801442a:	eba3 0901 	sub.w	r9, r3, r1
 801442e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014432:	1c7b      	adds	r3, r7, #1
 8014434:	444b      	add	r3, r9
 8014436:	106d      	asrs	r5, r5, #1
 8014438:	429d      	cmp	r5, r3
 801443a:	bf38      	it	cc
 801443c:	461d      	movcc	r5, r3
 801443e:	0553      	lsls	r3, r2, #21
 8014440:	d527      	bpl.n	8014492 <__ssputs_r+0x8e>
 8014442:	4629      	mov	r1, r5
 8014444:	f7fe fc1c 	bl	8012c80 <_malloc_r>
 8014448:	4606      	mov	r6, r0
 801444a:	b360      	cbz	r0, 80144a6 <__ssputs_r+0xa2>
 801444c:	6921      	ldr	r1, [r4, #16]
 801444e:	464a      	mov	r2, r9
 8014450:	f7fd fd3f 	bl	8011ed2 <memcpy>
 8014454:	89a3      	ldrh	r3, [r4, #12]
 8014456:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801445a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801445e:	81a3      	strh	r3, [r4, #12]
 8014460:	6126      	str	r6, [r4, #16]
 8014462:	6165      	str	r5, [r4, #20]
 8014464:	444e      	add	r6, r9
 8014466:	eba5 0509 	sub.w	r5, r5, r9
 801446a:	6026      	str	r6, [r4, #0]
 801446c:	60a5      	str	r5, [r4, #8]
 801446e:	463e      	mov	r6, r7
 8014470:	42be      	cmp	r6, r7
 8014472:	d900      	bls.n	8014476 <__ssputs_r+0x72>
 8014474:	463e      	mov	r6, r7
 8014476:	6820      	ldr	r0, [r4, #0]
 8014478:	4632      	mov	r2, r6
 801447a:	4641      	mov	r1, r8
 801447c:	f000 fd53 	bl	8014f26 <memmove>
 8014480:	68a3      	ldr	r3, [r4, #8]
 8014482:	1b9b      	subs	r3, r3, r6
 8014484:	60a3      	str	r3, [r4, #8]
 8014486:	6823      	ldr	r3, [r4, #0]
 8014488:	4433      	add	r3, r6
 801448a:	6023      	str	r3, [r4, #0]
 801448c:	2000      	movs	r0, #0
 801448e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014492:	462a      	mov	r2, r5
 8014494:	f001 f8f9 	bl	801568a <_realloc_r>
 8014498:	4606      	mov	r6, r0
 801449a:	2800      	cmp	r0, #0
 801449c:	d1e0      	bne.n	8014460 <__ssputs_r+0x5c>
 801449e:	6921      	ldr	r1, [r4, #16]
 80144a0:	4650      	mov	r0, sl
 80144a2:	f7fe fb79 	bl	8012b98 <_free_r>
 80144a6:	230c      	movs	r3, #12
 80144a8:	f8ca 3000 	str.w	r3, [sl]
 80144ac:	89a3      	ldrh	r3, [r4, #12]
 80144ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80144b2:	81a3      	strh	r3, [r4, #12]
 80144b4:	f04f 30ff 	mov.w	r0, #4294967295
 80144b8:	e7e9      	b.n	801448e <__ssputs_r+0x8a>
	...

080144bc <_svfiprintf_r>:
 80144bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144c0:	4698      	mov	r8, r3
 80144c2:	898b      	ldrh	r3, [r1, #12]
 80144c4:	061b      	lsls	r3, r3, #24
 80144c6:	b09d      	sub	sp, #116	@ 0x74
 80144c8:	4607      	mov	r7, r0
 80144ca:	460d      	mov	r5, r1
 80144cc:	4614      	mov	r4, r2
 80144ce:	d510      	bpl.n	80144f2 <_svfiprintf_r+0x36>
 80144d0:	690b      	ldr	r3, [r1, #16]
 80144d2:	b973      	cbnz	r3, 80144f2 <_svfiprintf_r+0x36>
 80144d4:	2140      	movs	r1, #64	@ 0x40
 80144d6:	f7fe fbd3 	bl	8012c80 <_malloc_r>
 80144da:	6028      	str	r0, [r5, #0]
 80144dc:	6128      	str	r0, [r5, #16]
 80144de:	b930      	cbnz	r0, 80144ee <_svfiprintf_r+0x32>
 80144e0:	230c      	movs	r3, #12
 80144e2:	603b      	str	r3, [r7, #0]
 80144e4:	f04f 30ff 	mov.w	r0, #4294967295
 80144e8:	b01d      	add	sp, #116	@ 0x74
 80144ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144ee:	2340      	movs	r3, #64	@ 0x40
 80144f0:	616b      	str	r3, [r5, #20]
 80144f2:	2300      	movs	r3, #0
 80144f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80144f6:	2320      	movs	r3, #32
 80144f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80144fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8014500:	2330      	movs	r3, #48	@ 0x30
 8014502:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80146a0 <_svfiprintf_r+0x1e4>
 8014506:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801450a:	f04f 0901 	mov.w	r9, #1
 801450e:	4623      	mov	r3, r4
 8014510:	469a      	mov	sl, r3
 8014512:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014516:	b10a      	cbz	r2, 801451c <_svfiprintf_r+0x60>
 8014518:	2a25      	cmp	r2, #37	@ 0x25
 801451a:	d1f9      	bne.n	8014510 <_svfiprintf_r+0x54>
 801451c:	ebba 0b04 	subs.w	fp, sl, r4
 8014520:	d00b      	beq.n	801453a <_svfiprintf_r+0x7e>
 8014522:	465b      	mov	r3, fp
 8014524:	4622      	mov	r2, r4
 8014526:	4629      	mov	r1, r5
 8014528:	4638      	mov	r0, r7
 801452a:	f7ff ff6b 	bl	8014404 <__ssputs_r>
 801452e:	3001      	adds	r0, #1
 8014530:	f000 80a7 	beq.w	8014682 <_svfiprintf_r+0x1c6>
 8014534:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014536:	445a      	add	r2, fp
 8014538:	9209      	str	r2, [sp, #36]	@ 0x24
 801453a:	f89a 3000 	ldrb.w	r3, [sl]
 801453e:	2b00      	cmp	r3, #0
 8014540:	f000 809f 	beq.w	8014682 <_svfiprintf_r+0x1c6>
 8014544:	2300      	movs	r3, #0
 8014546:	f04f 32ff 	mov.w	r2, #4294967295
 801454a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801454e:	f10a 0a01 	add.w	sl, sl, #1
 8014552:	9304      	str	r3, [sp, #16]
 8014554:	9307      	str	r3, [sp, #28]
 8014556:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801455a:	931a      	str	r3, [sp, #104]	@ 0x68
 801455c:	4654      	mov	r4, sl
 801455e:	2205      	movs	r2, #5
 8014560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014564:	484e      	ldr	r0, [pc, #312]	@ (80146a0 <_svfiprintf_r+0x1e4>)
 8014566:	f7eb fe5b 	bl	8000220 <memchr>
 801456a:	9a04      	ldr	r2, [sp, #16]
 801456c:	b9d8      	cbnz	r0, 80145a6 <_svfiprintf_r+0xea>
 801456e:	06d0      	lsls	r0, r2, #27
 8014570:	bf44      	itt	mi
 8014572:	2320      	movmi	r3, #32
 8014574:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014578:	0711      	lsls	r1, r2, #28
 801457a:	bf44      	itt	mi
 801457c:	232b      	movmi	r3, #43	@ 0x2b
 801457e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014582:	f89a 3000 	ldrb.w	r3, [sl]
 8014586:	2b2a      	cmp	r3, #42	@ 0x2a
 8014588:	d015      	beq.n	80145b6 <_svfiprintf_r+0xfa>
 801458a:	9a07      	ldr	r2, [sp, #28]
 801458c:	4654      	mov	r4, sl
 801458e:	2000      	movs	r0, #0
 8014590:	f04f 0c0a 	mov.w	ip, #10
 8014594:	4621      	mov	r1, r4
 8014596:	f811 3b01 	ldrb.w	r3, [r1], #1
 801459a:	3b30      	subs	r3, #48	@ 0x30
 801459c:	2b09      	cmp	r3, #9
 801459e:	d94b      	bls.n	8014638 <_svfiprintf_r+0x17c>
 80145a0:	b1b0      	cbz	r0, 80145d0 <_svfiprintf_r+0x114>
 80145a2:	9207      	str	r2, [sp, #28]
 80145a4:	e014      	b.n	80145d0 <_svfiprintf_r+0x114>
 80145a6:	eba0 0308 	sub.w	r3, r0, r8
 80145aa:	fa09 f303 	lsl.w	r3, r9, r3
 80145ae:	4313      	orrs	r3, r2
 80145b0:	9304      	str	r3, [sp, #16]
 80145b2:	46a2      	mov	sl, r4
 80145b4:	e7d2      	b.n	801455c <_svfiprintf_r+0xa0>
 80145b6:	9b03      	ldr	r3, [sp, #12]
 80145b8:	1d19      	adds	r1, r3, #4
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	9103      	str	r1, [sp, #12]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	bfbb      	ittet	lt
 80145c2:	425b      	neglt	r3, r3
 80145c4:	f042 0202 	orrlt.w	r2, r2, #2
 80145c8:	9307      	strge	r3, [sp, #28]
 80145ca:	9307      	strlt	r3, [sp, #28]
 80145cc:	bfb8      	it	lt
 80145ce:	9204      	strlt	r2, [sp, #16]
 80145d0:	7823      	ldrb	r3, [r4, #0]
 80145d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80145d4:	d10a      	bne.n	80145ec <_svfiprintf_r+0x130>
 80145d6:	7863      	ldrb	r3, [r4, #1]
 80145d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80145da:	d132      	bne.n	8014642 <_svfiprintf_r+0x186>
 80145dc:	9b03      	ldr	r3, [sp, #12]
 80145de:	1d1a      	adds	r2, r3, #4
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	9203      	str	r2, [sp, #12]
 80145e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80145e8:	3402      	adds	r4, #2
 80145ea:	9305      	str	r3, [sp, #20]
 80145ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80146b0 <_svfiprintf_r+0x1f4>
 80145f0:	7821      	ldrb	r1, [r4, #0]
 80145f2:	2203      	movs	r2, #3
 80145f4:	4650      	mov	r0, sl
 80145f6:	f7eb fe13 	bl	8000220 <memchr>
 80145fa:	b138      	cbz	r0, 801460c <_svfiprintf_r+0x150>
 80145fc:	9b04      	ldr	r3, [sp, #16]
 80145fe:	eba0 000a 	sub.w	r0, r0, sl
 8014602:	2240      	movs	r2, #64	@ 0x40
 8014604:	4082      	lsls	r2, r0
 8014606:	4313      	orrs	r3, r2
 8014608:	3401      	adds	r4, #1
 801460a:	9304      	str	r3, [sp, #16]
 801460c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014610:	4824      	ldr	r0, [pc, #144]	@ (80146a4 <_svfiprintf_r+0x1e8>)
 8014612:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014616:	2206      	movs	r2, #6
 8014618:	f7eb fe02 	bl	8000220 <memchr>
 801461c:	2800      	cmp	r0, #0
 801461e:	d036      	beq.n	801468e <_svfiprintf_r+0x1d2>
 8014620:	4b21      	ldr	r3, [pc, #132]	@ (80146a8 <_svfiprintf_r+0x1ec>)
 8014622:	bb1b      	cbnz	r3, 801466c <_svfiprintf_r+0x1b0>
 8014624:	9b03      	ldr	r3, [sp, #12]
 8014626:	3307      	adds	r3, #7
 8014628:	f023 0307 	bic.w	r3, r3, #7
 801462c:	3308      	adds	r3, #8
 801462e:	9303      	str	r3, [sp, #12]
 8014630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014632:	4433      	add	r3, r6
 8014634:	9309      	str	r3, [sp, #36]	@ 0x24
 8014636:	e76a      	b.n	801450e <_svfiprintf_r+0x52>
 8014638:	fb0c 3202 	mla	r2, ip, r2, r3
 801463c:	460c      	mov	r4, r1
 801463e:	2001      	movs	r0, #1
 8014640:	e7a8      	b.n	8014594 <_svfiprintf_r+0xd8>
 8014642:	2300      	movs	r3, #0
 8014644:	3401      	adds	r4, #1
 8014646:	9305      	str	r3, [sp, #20]
 8014648:	4619      	mov	r1, r3
 801464a:	f04f 0c0a 	mov.w	ip, #10
 801464e:	4620      	mov	r0, r4
 8014650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014654:	3a30      	subs	r2, #48	@ 0x30
 8014656:	2a09      	cmp	r2, #9
 8014658:	d903      	bls.n	8014662 <_svfiprintf_r+0x1a6>
 801465a:	2b00      	cmp	r3, #0
 801465c:	d0c6      	beq.n	80145ec <_svfiprintf_r+0x130>
 801465e:	9105      	str	r1, [sp, #20]
 8014660:	e7c4      	b.n	80145ec <_svfiprintf_r+0x130>
 8014662:	fb0c 2101 	mla	r1, ip, r1, r2
 8014666:	4604      	mov	r4, r0
 8014668:	2301      	movs	r3, #1
 801466a:	e7f0      	b.n	801464e <_svfiprintf_r+0x192>
 801466c:	ab03      	add	r3, sp, #12
 801466e:	9300      	str	r3, [sp, #0]
 8014670:	462a      	mov	r2, r5
 8014672:	4b0e      	ldr	r3, [pc, #56]	@ (80146ac <_svfiprintf_r+0x1f0>)
 8014674:	a904      	add	r1, sp, #16
 8014676:	4638      	mov	r0, r7
 8014678:	f7fc fc7c 	bl	8010f74 <_printf_float>
 801467c:	1c42      	adds	r2, r0, #1
 801467e:	4606      	mov	r6, r0
 8014680:	d1d6      	bne.n	8014630 <_svfiprintf_r+0x174>
 8014682:	89ab      	ldrh	r3, [r5, #12]
 8014684:	065b      	lsls	r3, r3, #25
 8014686:	f53f af2d 	bmi.w	80144e4 <_svfiprintf_r+0x28>
 801468a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801468c:	e72c      	b.n	80144e8 <_svfiprintf_r+0x2c>
 801468e:	ab03      	add	r3, sp, #12
 8014690:	9300      	str	r3, [sp, #0]
 8014692:	462a      	mov	r2, r5
 8014694:	4b05      	ldr	r3, [pc, #20]	@ (80146ac <_svfiprintf_r+0x1f0>)
 8014696:	a904      	add	r1, sp, #16
 8014698:	4638      	mov	r0, r7
 801469a:	f7fc ff03 	bl	80114a4 <_printf_i>
 801469e:	e7ed      	b.n	801467c <_svfiprintf_r+0x1c0>
 80146a0:	080173a1 	.word	0x080173a1
 80146a4:	080173ab 	.word	0x080173ab
 80146a8:	08010f75 	.word	0x08010f75
 80146ac:	08014405 	.word	0x08014405
 80146b0:	080173a7 	.word	0x080173a7

080146b4 <_sungetc_r>:
 80146b4:	b538      	push	{r3, r4, r5, lr}
 80146b6:	1c4b      	adds	r3, r1, #1
 80146b8:	4614      	mov	r4, r2
 80146ba:	d103      	bne.n	80146c4 <_sungetc_r+0x10>
 80146bc:	f04f 35ff 	mov.w	r5, #4294967295
 80146c0:	4628      	mov	r0, r5
 80146c2:	bd38      	pop	{r3, r4, r5, pc}
 80146c4:	8993      	ldrh	r3, [r2, #12]
 80146c6:	f023 0320 	bic.w	r3, r3, #32
 80146ca:	8193      	strh	r3, [r2, #12]
 80146cc:	6853      	ldr	r3, [r2, #4]
 80146ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80146d0:	b2cd      	uxtb	r5, r1
 80146d2:	b18a      	cbz	r2, 80146f8 <_sungetc_r+0x44>
 80146d4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80146d6:	429a      	cmp	r2, r3
 80146d8:	dd08      	ble.n	80146ec <_sungetc_r+0x38>
 80146da:	6823      	ldr	r3, [r4, #0]
 80146dc:	1e5a      	subs	r2, r3, #1
 80146de:	6022      	str	r2, [r4, #0]
 80146e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80146e4:	6863      	ldr	r3, [r4, #4]
 80146e6:	3301      	adds	r3, #1
 80146e8:	6063      	str	r3, [r4, #4]
 80146ea:	e7e9      	b.n	80146c0 <_sungetc_r+0xc>
 80146ec:	4621      	mov	r1, r4
 80146ee:	f000 fbe0 	bl	8014eb2 <__submore>
 80146f2:	2800      	cmp	r0, #0
 80146f4:	d0f1      	beq.n	80146da <_sungetc_r+0x26>
 80146f6:	e7e1      	b.n	80146bc <_sungetc_r+0x8>
 80146f8:	6921      	ldr	r1, [r4, #16]
 80146fa:	6822      	ldr	r2, [r4, #0]
 80146fc:	b141      	cbz	r1, 8014710 <_sungetc_r+0x5c>
 80146fe:	4291      	cmp	r1, r2
 8014700:	d206      	bcs.n	8014710 <_sungetc_r+0x5c>
 8014702:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8014706:	42a9      	cmp	r1, r5
 8014708:	d102      	bne.n	8014710 <_sungetc_r+0x5c>
 801470a:	3a01      	subs	r2, #1
 801470c:	6022      	str	r2, [r4, #0]
 801470e:	e7ea      	b.n	80146e6 <_sungetc_r+0x32>
 8014710:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8014714:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014718:	6363      	str	r3, [r4, #52]	@ 0x34
 801471a:	2303      	movs	r3, #3
 801471c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801471e:	4623      	mov	r3, r4
 8014720:	f803 5f46 	strb.w	r5, [r3, #70]!
 8014724:	6023      	str	r3, [r4, #0]
 8014726:	2301      	movs	r3, #1
 8014728:	e7de      	b.n	80146e8 <_sungetc_r+0x34>

0801472a <__ssrefill_r>:
 801472a:	b510      	push	{r4, lr}
 801472c:	460c      	mov	r4, r1
 801472e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8014730:	b169      	cbz	r1, 801474e <__ssrefill_r+0x24>
 8014732:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014736:	4299      	cmp	r1, r3
 8014738:	d001      	beq.n	801473e <__ssrefill_r+0x14>
 801473a:	f7fe fa2d 	bl	8012b98 <_free_r>
 801473e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014740:	6063      	str	r3, [r4, #4]
 8014742:	2000      	movs	r0, #0
 8014744:	6360      	str	r0, [r4, #52]	@ 0x34
 8014746:	b113      	cbz	r3, 801474e <__ssrefill_r+0x24>
 8014748:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801474a:	6023      	str	r3, [r4, #0]
 801474c:	bd10      	pop	{r4, pc}
 801474e:	6923      	ldr	r3, [r4, #16]
 8014750:	6023      	str	r3, [r4, #0]
 8014752:	2300      	movs	r3, #0
 8014754:	6063      	str	r3, [r4, #4]
 8014756:	89a3      	ldrh	r3, [r4, #12]
 8014758:	f043 0320 	orr.w	r3, r3, #32
 801475c:	81a3      	strh	r3, [r4, #12]
 801475e:	f04f 30ff 	mov.w	r0, #4294967295
 8014762:	e7f3      	b.n	801474c <__ssrefill_r+0x22>

08014764 <__ssvfiscanf_r>:
 8014764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014768:	460c      	mov	r4, r1
 801476a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801476e:	2100      	movs	r1, #0
 8014770:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8014774:	49a5      	ldr	r1, [pc, #660]	@ (8014a0c <__ssvfiscanf_r+0x2a8>)
 8014776:	91a0      	str	r1, [sp, #640]	@ 0x280
 8014778:	f10d 0804 	add.w	r8, sp, #4
 801477c:	49a4      	ldr	r1, [pc, #656]	@ (8014a10 <__ssvfiscanf_r+0x2ac>)
 801477e:	4fa5      	ldr	r7, [pc, #660]	@ (8014a14 <__ssvfiscanf_r+0x2b0>)
 8014780:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8014784:	4606      	mov	r6, r0
 8014786:	91a1      	str	r1, [sp, #644]	@ 0x284
 8014788:	9300      	str	r3, [sp, #0]
 801478a:	7813      	ldrb	r3, [r2, #0]
 801478c:	2b00      	cmp	r3, #0
 801478e:	f000 8158 	beq.w	8014a42 <__ssvfiscanf_r+0x2de>
 8014792:	5cf9      	ldrb	r1, [r7, r3]
 8014794:	f011 0108 	ands.w	r1, r1, #8
 8014798:	f102 0501 	add.w	r5, r2, #1
 801479c:	d019      	beq.n	80147d2 <__ssvfiscanf_r+0x6e>
 801479e:	6863      	ldr	r3, [r4, #4]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	dd0f      	ble.n	80147c4 <__ssvfiscanf_r+0x60>
 80147a4:	6823      	ldr	r3, [r4, #0]
 80147a6:	781a      	ldrb	r2, [r3, #0]
 80147a8:	5cba      	ldrb	r2, [r7, r2]
 80147aa:	0712      	lsls	r2, r2, #28
 80147ac:	d401      	bmi.n	80147b2 <__ssvfiscanf_r+0x4e>
 80147ae:	462a      	mov	r2, r5
 80147b0:	e7eb      	b.n	801478a <__ssvfiscanf_r+0x26>
 80147b2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80147b4:	3201      	adds	r2, #1
 80147b6:	9245      	str	r2, [sp, #276]	@ 0x114
 80147b8:	6862      	ldr	r2, [r4, #4]
 80147ba:	3301      	adds	r3, #1
 80147bc:	3a01      	subs	r2, #1
 80147be:	6062      	str	r2, [r4, #4]
 80147c0:	6023      	str	r3, [r4, #0]
 80147c2:	e7ec      	b.n	801479e <__ssvfiscanf_r+0x3a>
 80147c4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80147c6:	4621      	mov	r1, r4
 80147c8:	4630      	mov	r0, r6
 80147ca:	4798      	blx	r3
 80147cc:	2800      	cmp	r0, #0
 80147ce:	d0e9      	beq.n	80147a4 <__ssvfiscanf_r+0x40>
 80147d0:	e7ed      	b.n	80147ae <__ssvfiscanf_r+0x4a>
 80147d2:	2b25      	cmp	r3, #37	@ 0x25
 80147d4:	d012      	beq.n	80147fc <__ssvfiscanf_r+0x98>
 80147d6:	4699      	mov	r9, r3
 80147d8:	6863      	ldr	r3, [r4, #4]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	f340 8093 	ble.w	8014906 <__ssvfiscanf_r+0x1a2>
 80147e0:	6822      	ldr	r2, [r4, #0]
 80147e2:	7813      	ldrb	r3, [r2, #0]
 80147e4:	454b      	cmp	r3, r9
 80147e6:	f040 812c 	bne.w	8014a42 <__ssvfiscanf_r+0x2de>
 80147ea:	6863      	ldr	r3, [r4, #4]
 80147ec:	3b01      	subs	r3, #1
 80147ee:	6063      	str	r3, [r4, #4]
 80147f0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80147f2:	3201      	adds	r2, #1
 80147f4:	3301      	adds	r3, #1
 80147f6:	6022      	str	r2, [r4, #0]
 80147f8:	9345      	str	r3, [sp, #276]	@ 0x114
 80147fa:	e7d8      	b.n	80147ae <__ssvfiscanf_r+0x4a>
 80147fc:	9141      	str	r1, [sp, #260]	@ 0x104
 80147fe:	9143      	str	r1, [sp, #268]	@ 0x10c
 8014800:	7853      	ldrb	r3, [r2, #1]
 8014802:	2b2a      	cmp	r3, #42	@ 0x2a
 8014804:	bf02      	ittt	eq
 8014806:	2310      	moveq	r3, #16
 8014808:	1c95      	addeq	r5, r2, #2
 801480a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801480c:	220a      	movs	r2, #10
 801480e:	46a9      	mov	r9, r5
 8014810:	f819 1b01 	ldrb.w	r1, [r9], #1
 8014814:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8014818:	2b09      	cmp	r3, #9
 801481a:	d91e      	bls.n	801485a <__ssvfiscanf_r+0xf6>
 801481c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8014a18 <__ssvfiscanf_r+0x2b4>
 8014820:	2203      	movs	r2, #3
 8014822:	4650      	mov	r0, sl
 8014824:	f7eb fcfc 	bl	8000220 <memchr>
 8014828:	b138      	cbz	r0, 801483a <__ssvfiscanf_r+0xd6>
 801482a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801482c:	eba0 000a 	sub.w	r0, r0, sl
 8014830:	2301      	movs	r3, #1
 8014832:	4083      	lsls	r3, r0
 8014834:	4313      	orrs	r3, r2
 8014836:	9341      	str	r3, [sp, #260]	@ 0x104
 8014838:	464d      	mov	r5, r9
 801483a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801483e:	2b78      	cmp	r3, #120	@ 0x78
 8014840:	d806      	bhi.n	8014850 <__ssvfiscanf_r+0xec>
 8014842:	2b57      	cmp	r3, #87	@ 0x57
 8014844:	d810      	bhi.n	8014868 <__ssvfiscanf_r+0x104>
 8014846:	2b25      	cmp	r3, #37	@ 0x25
 8014848:	d0c5      	beq.n	80147d6 <__ssvfiscanf_r+0x72>
 801484a:	d857      	bhi.n	80148fc <__ssvfiscanf_r+0x198>
 801484c:	2b00      	cmp	r3, #0
 801484e:	d065      	beq.n	801491c <__ssvfiscanf_r+0x1b8>
 8014850:	2303      	movs	r3, #3
 8014852:	9347      	str	r3, [sp, #284]	@ 0x11c
 8014854:	230a      	movs	r3, #10
 8014856:	9342      	str	r3, [sp, #264]	@ 0x108
 8014858:	e078      	b.n	801494c <__ssvfiscanf_r+0x1e8>
 801485a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801485c:	fb02 1103 	mla	r1, r2, r3, r1
 8014860:	3930      	subs	r1, #48	@ 0x30
 8014862:	9143      	str	r1, [sp, #268]	@ 0x10c
 8014864:	464d      	mov	r5, r9
 8014866:	e7d2      	b.n	801480e <__ssvfiscanf_r+0xaa>
 8014868:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801486c:	2a20      	cmp	r2, #32
 801486e:	d8ef      	bhi.n	8014850 <__ssvfiscanf_r+0xec>
 8014870:	a101      	add	r1, pc, #4	@ (adr r1, 8014878 <__ssvfiscanf_r+0x114>)
 8014872:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014876:	bf00      	nop
 8014878:	0801492b 	.word	0x0801492b
 801487c:	08014851 	.word	0x08014851
 8014880:	08014851 	.word	0x08014851
 8014884:	08014985 	.word	0x08014985
 8014888:	08014851 	.word	0x08014851
 801488c:	08014851 	.word	0x08014851
 8014890:	08014851 	.word	0x08014851
 8014894:	08014851 	.word	0x08014851
 8014898:	08014851 	.word	0x08014851
 801489c:	08014851 	.word	0x08014851
 80148a0:	08014851 	.word	0x08014851
 80148a4:	0801499b 	.word	0x0801499b
 80148a8:	08014981 	.word	0x08014981
 80148ac:	08014903 	.word	0x08014903
 80148b0:	08014903 	.word	0x08014903
 80148b4:	08014903 	.word	0x08014903
 80148b8:	08014851 	.word	0x08014851
 80148bc:	0801493d 	.word	0x0801493d
 80148c0:	08014851 	.word	0x08014851
 80148c4:	08014851 	.word	0x08014851
 80148c8:	08014851 	.word	0x08014851
 80148cc:	08014851 	.word	0x08014851
 80148d0:	080149ab 	.word	0x080149ab
 80148d4:	08014945 	.word	0x08014945
 80148d8:	08014923 	.word	0x08014923
 80148dc:	08014851 	.word	0x08014851
 80148e0:	08014851 	.word	0x08014851
 80148e4:	080149a7 	.word	0x080149a7
 80148e8:	08014851 	.word	0x08014851
 80148ec:	08014981 	.word	0x08014981
 80148f0:	08014851 	.word	0x08014851
 80148f4:	08014851 	.word	0x08014851
 80148f8:	0801492b 	.word	0x0801492b
 80148fc:	3b45      	subs	r3, #69	@ 0x45
 80148fe:	2b02      	cmp	r3, #2
 8014900:	d8a6      	bhi.n	8014850 <__ssvfiscanf_r+0xec>
 8014902:	2305      	movs	r3, #5
 8014904:	e021      	b.n	801494a <__ssvfiscanf_r+0x1e6>
 8014906:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014908:	4621      	mov	r1, r4
 801490a:	4630      	mov	r0, r6
 801490c:	4798      	blx	r3
 801490e:	2800      	cmp	r0, #0
 8014910:	f43f af66 	beq.w	80147e0 <__ssvfiscanf_r+0x7c>
 8014914:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8014916:	2800      	cmp	r0, #0
 8014918:	f040 808b 	bne.w	8014a32 <__ssvfiscanf_r+0x2ce>
 801491c:	f04f 30ff 	mov.w	r0, #4294967295
 8014920:	e08b      	b.n	8014a3a <__ssvfiscanf_r+0x2d6>
 8014922:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014924:	f042 0220 	orr.w	r2, r2, #32
 8014928:	9241      	str	r2, [sp, #260]	@ 0x104
 801492a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801492c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014930:	9241      	str	r2, [sp, #260]	@ 0x104
 8014932:	2210      	movs	r2, #16
 8014934:	2b6e      	cmp	r3, #110	@ 0x6e
 8014936:	9242      	str	r2, [sp, #264]	@ 0x108
 8014938:	d902      	bls.n	8014940 <__ssvfiscanf_r+0x1dc>
 801493a:	e005      	b.n	8014948 <__ssvfiscanf_r+0x1e4>
 801493c:	2300      	movs	r3, #0
 801493e:	9342      	str	r3, [sp, #264]	@ 0x108
 8014940:	2303      	movs	r3, #3
 8014942:	e002      	b.n	801494a <__ssvfiscanf_r+0x1e6>
 8014944:	2308      	movs	r3, #8
 8014946:	9342      	str	r3, [sp, #264]	@ 0x108
 8014948:	2304      	movs	r3, #4
 801494a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801494c:	6863      	ldr	r3, [r4, #4]
 801494e:	2b00      	cmp	r3, #0
 8014950:	dd39      	ble.n	80149c6 <__ssvfiscanf_r+0x262>
 8014952:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014954:	0659      	lsls	r1, r3, #25
 8014956:	d404      	bmi.n	8014962 <__ssvfiscanf_r+0x1fe>
 8014958:	6823      	ldr	r3, [r4, #0]
 801495a:	781a      	ldrb	r2, [r3, #0]
 801495c:	5cba      	ldrb	r2, [r7, r2]
 801495e:	0712      	lsls	r2, r2, #28
 8014960:	d438      	bmi.n	80149d4 <__ssvfiscanf_r+0x270>
 8014962:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8014964:	2b02      	cmp	r3, #2
 8014966:	dc47      	bgt.n	80149f8 <__ssvfiscanf_r+0x294>
 8014968:	466b      	mov	r3, sp
 801496a:	4622      	mov	r2, r4
 801496c:	a941      	add	r1, sp, #260	@ 0x104
 801496e:	4630      	mov	r0, r6
 8014970:	f000 f86c 	bl	8014a4c <_scanf_chars>
 8014974:	2801      	cmp	r0, #1
 8014976:	d064      	beq.n	8014a42 <__ssvfiscanf_r+0x2de>
 8014978:	2802      	cmp	r0, #2
 801497a:	f47f af18 	bne.w	80147ae <__ssvfiscanf_r+0x4a>
 801497e:	e7c9      	b.n	8014914 <__ssvfiscanf_r+0x1b0>
 8014980:	220a      	movs	r2, #10
 8014982:	e7d7      	b.n	8014934 <__ssvfiscanf_r+0x1d0>
 8014984:	4629      	mov	r1, r5
 8014986:	4640      	mov	r0, r8
 8014988:	f000 fa5a 	bl	8014e40 <__sccl>
 801498c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801498e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014992:	9341      	str	r3, [sp, #260]	@ 0x104
 8014994:	4605      	mov	r5, r0
 8014996:	2301      	movs	r3, #1
 8014998:	e7d7      	b.n	801494a <__ssvfiscanf_r+0x1e6>
 801499a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801499c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80149a0:	9341      	str	r3, [sp, #260]	@ 0x104
 80149a2:	2300      	movs	r3, #0
 80149a4:	e7d1      	b.n	801494a <__ssvfiscanf_r+0x1e6>
 80149a6:	2302      	movs	r3, #2
 80149a8:	e7cf      	b.n	801494a <__ssvfiscanf_r+0x1e6>
 80149aa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80149ac:	06c3      	lsls	r3, r0, #27
 80149ae:	f53f aefe 	bmi.w	80147ae <__ssvfiscanf_r+0x4a>
 80149b2:	9b00      	ldr	r3, [sp, #0]
 80149b4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80149b6:	1d19      	adds	r1, r3, #4
 80149b8:	9100      	str	r1, [sp, #0]
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	07c0      	lsls	r0, r0, #31
 80149be:	bf4c      	ite	mi
 80149c0:	801a      	strhmi	r2, [r3, #0]
 80149c2:	601a      	strpl	r2, [r3, #0]
 80149c4:	e6f3      	b.n	80147ae <__ssvfiscanf_r+0x4a>
 80149c6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80149c8:	4621      	mov	r1, r4
 80149ca:	4630      	mov	r0, r6
 80149cc:	4798      	blx	r3
 80149ce:	2800      	cmp	r0, #0
 80149d0:	d0bf      	beq.n	8014952 <__ssvfiscanf_r+0x1ee>
 80149d2:	e79f      	b.n	8014914 <__ssvfiscanf_r+0x1b0>
 80149d4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80149d6:	3201      	adds	r2, #1
 80149d8:	9245      	str	r2, [sp, #276]	@ 0x114
 80149da:	6862      	ldr	r2, [r4, #4]
 80149dc:	3a01      	subs	r2, #1
 80149de:	2a00      	cmp	r2, #0
 80149e0:	6062      	str	r2, [r4, #4]
 80149e2:	dd02      	ble.n	80149ea <__ssvfiscanf_r+0x286>
 80149e4:	3301      	adds	r3, #1
 80149e6:	6023      	str	r3, [r4, #0]
 80149e8:	e7b6      	b.n	8014958 <__ssvfiscanf_r+0x1f4>
 80149ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80149ec:	4621      	mov	r1, r4
 80149ee:	4630      	mov	r0, r6
 80149f0:	4798      	blx	r3
 80149f2:	2800      	cmp	r0, #0
 80149f4:	d0b0      	beq.n	8014958 <__ssvfiscanf_r+0x1f4>
 80149f6:	e78d      	b.n	8014914 <__ssvfiscanf_r+0x1b0>
 80149f8:	2b04      	cmp	r3, #4
 80149fa:	dc0f      	bgt.n	8014a1c <__ssvfiscanf_r+0x2b8>
 80149fc:	466b      	mov	r3, sp
 80149fe:	4622      	mov	r2, r4
 8014a00:	a941      	add	r1, sp, #260	@ 0x104
 8014a02:	4630      	mov	r0, r6
 8014a04:	f000 f87c 	bl	8014b00 <_scanf_i>
 8014a08:	e7b4      	b.n	8014974 <__ssvfiscanf_r+0x210>
 8014a0a:	bf00      	nop
 8014a0c:	080146b5 	.word	0x080146b5
 8014a10:	0801472b 	.word	0x0801472b
 8014a14:	080172a1 	.word	0x080172a1
 8014a18:	080173a7 	.word	0x080173a7
 8014a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8014a48 <__ssvfiscanf_r+0x2e4>)
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	f43f aec5 	beq.w	80147ae <__ssvfiscanf_r+0x4a>
 8014a24:	466b      	mov	r3, sp
 8014a26:	4622      	mov	r2, r4
 8014a28:	a941      	add	r1, sp, #260	@ 0x104
 8014a2a:	4630      	mov	r0, r6
 8014a2c:	f7fc fe5a 	bl	80116e4 <_scanf_float>
 8014a30:	e7a0      	b.n	8014974 <__ssvfiscanf_r+0x210>
 8014a32:	89a3      	ldrh	r3, [r4, #12]
 8014a34:	065b      	lsls	r3, r3, #25
 8014a36:	f53f af71 	bmi.w	801491c <__ssvfiscanf_r+0x1b8>
 8014a3a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8014a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a42:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8014a44:	e7f9      	b.n	8014a3a <__ssvfiscanf_r+0x2d6>
 8014a46:	bf00      	nop
 8014a48:	080116e5 	.word	0x080116e5

08014a4c <_scanf_chars>:
 8014a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a50:	4615      	mov	r5, r2
 8014a52:	688a      	ldr	r2, [r1, #8]
 8014a54:	4680      	mov	r8, r0
 8014a56:	460c      	mov	r4, r1
 8014a58:	b932      	cbnz	r2, 8014a68 <_scanf_chars+0x1c>
 8014a5a:	698a      	ldr	r2, [r1, #24]
 8014a5c:	2a00      	cmp	r2, #0
 8014a5e:	bf14      	ite	ne
 8014a60:	f04f 32ff 	movne.w	r2, #4294967295
 8014a64:	2201      	moveq	r2, #1
 8014a66:	608a      	str	r2, [r1, #8]
 8014a68:	6822      	ldr	r2, [r4, #0]
 8014a6a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8014afc <_scanf_chars+0xb0>
 8014a6e:	06d1      	lsls	r1, r2, #27
 8014a70:	bf5f      	itttt	pl
 8014a72:	681a      	ldrpl	r2, [r3, #0]
 8014a74:	1d11      	addpl	r1, r2, #4
 8014a76:	6019      	strpl	r1, [r3, #0]
 8014a78:	6816      	ldrpl	r6, [r2, #0]
 8014a7a:	2700      	movs	r7, #0
 8014a7c:	69a0      	ldr	r0, [r4, #24]
 8014a7e:	b188      	cbz	r0, 8014aa4 <_scanf_chars+0x58>
 8014a80:	2801      	cmp	r0, #1
 8014a82:	d107      	bne.n	8014a94 <_scanf_chars+0x48>
 8014a84:	682b      	ldr	r3, [r5, #0]
 8014a86:	781a      	ldrb	r2, [r3, #0]
 8014a88:	6963      	ldr	r3, [r4, #20]
 8014a8a:	5c9b      	ldrb	r3, [r3, r2]
 8014a8c:	b953      	cbnz	r3, 8014aa4 <_scanf_chars+0x58>
 8014a8e:	2f00      	cmp	r7, #0
 8014a90:	d031      	beq.n	8014af6 <_scanf_chars+0xaa>
 8014a92:	e022      	b.n	8014ada <_scanf_chars+0x8e>
 8014a94:	2802      	cmp	r0, #2
 8014a96:	d120      	bne.n	8014ada <_scanf_chars+0x8e>
 8014a98:	682b      	ldr	r3, [r5, #0]
 8014a9a:	781b      	ldrb	r3, [r3, #0]
 8014a9c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8014aa0:	071b      	lsls	r3, r3, #28
 8014aa2:	d41a      	bmi.n	8014ada <_scanf_chars+0x8e>
 8014aa4:	6823      	ldr	r3, [r4, #0]
 8014aa6:	06da      	lsls	r2, r3, #27
 8014aa8:	bf5e      	ittt	pl
 8014aaa:	682b      	ldrpl	r3, [r5, #0]
 8014aac:	781b      	ldrbpl	r3, [r3, #0]
 8014aae:	f806 3b01 	strbpl.w	r3, [r6], #1
 8014ab2:	682a      	ldr	r2, [r5, #0]
 8014ab4:	686b      	ldr	r3, [r5, #4]
 8014ab6:	3201      	adds	r2, #1
 8014ab8:	602a      	str	r2, [r5, #0]
 8014aba:	68a2      	ldr	r2, [r4, #8]
 8014abc:	3b01      	subs	r3, #1
 8014abe:	3a01      	subs	r2, #1
 8014ac0:	606b      	str	r3, [r5, #4]
 8014ac2:	3701      	adds	r7, #1
 8014ac4:	60a2      	str	r2, [r4, #8]
 8014ac6:	b142      	cbz	r2, 8014ada <_scanf_chars+0x8e>
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	dcd7      	bgt.n	8014a7c <_scanf_chars+0x30>
 8014acc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014ad0:	4629      	mov	r1, r5
 8014ad2:	4640      	mov	r0, r8
 8014ad4:	4798      	blx	r3
 8014ad6:	2800      	cmp	r0, #0
 8014ad8:	d0d0      	beq.n	8014a7c <_scanf_chars+0x30>
 8014ada:	6823      	ldr	r3, [r4, #0]
 8014adc:	f013 0310 	ands.w	r3, r3, #16
 8014ae0:	d105      	bne.n	8014aee <_scanf_chars+0xa2>
 8014ae2:	68e2      	ldr	r2, [r4, #12]
 8014ae4:	3201      	adds	r2, #1
 8014ae6:	60e2      	str	r2, [r4, #12]
 8014ae8:	69a2      	ldr	r2, [r4, #24]
 8014aea:	b102      	cbz	r2, 8014aee <_scanf_chars+0xa2>
 8014aec:	7033      	strb	r3, [r6, #0]
 8014aee:	6923      	ldr	r3, [r4, #16]
 8014af0:	443b      	add	r3, r7
 8014af2:	6123      	str	r3, [r4, #16]
 8014af4:	2000      	movs	r0, #0
 8014af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014afa:	bf00      	nop
 8014afc:	080172a1 	.word	0x080172a1

08014b00 <_scanf_i>:
 8014b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b04:	4698      	mov	r8, r3
 8014b06:	4b74      	ldr	r3, [pc, #464]	@ (8014cd8 <_scanf_i+0x1d8>)
 8014b08:	460c      	mov	r4, r1
 8014b0a:	4682      	mov	sl, r0
 8014b0c:	4616      	mov	r6, r2
 8014b0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014b12:	b087      	sub	sp, #28
 8014b14:	ab03      	add	r3, sp, #12
 8014b16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014b1a:	4b70      	ldr	r3, [pc, #448]	@ (8014cdc <_scanf_i+0x1dc>)
 8014b1c:	69a1      	ldr	r1, [r4, #24]
 8014b1e:	4a70      	ldr	r2, [pc, #448]	@ (8014ce0 <_scanf_i+0x1e0>)
 8014b20:	2903      	cmp	r1, #3
 8014b22:	bf08      	it	eq
 8014b24:	461a      	moveq	r2, r3
 8014b26:	68a3      	ldr	r3, [r4, #8]
 8014b28:	9201      	str	r2, [sp, #4]
 8014b2a:	1e5a      	subs	r2, r3, #1
 8014b2c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014b30:	bf88      	it	hi
 8014b32:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014b36:	4627      	mov	r7, r4
 8014b38:	bf82      	ittt	hi
 8014b3a:	eb03 0905 	addhi.w	r9, r3, r5
 8014b3e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014b42:	60a3      	strhi	r3, [r4, #8]
 8014b44:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014b48:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8014b4c:	bf98      	it	ls
 8014b4e:	f04f 0900 	movls.w	r9, #0
 8014b52:	6023      	str	r3, [r4, #0]
 8014b54:	463d      	mov	r5, r7
 8014b56:	f04f 0b00 	mov.w	fp, #0
 8014b5a:	6831      	ldr	r1, [r6, #0]
 8014b5c:	ab03      	add	r3, sp, #12
 8014b5e:	7809      	ldrb	r1, [r1, #0]
 8014b60:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014b64:	2202      	movs	r2, #2
 8014b66:	f7eb fb5b 	bl	8000220 <memchr>
 8014b6a:	b328      	cbz	r0, 8014bb8 <_scanf_i+0xb8>
 8014b6c:	f1bb 0f01 	cmp.w	fp, #1
 8014b70:	d159      	bne.n	8014c26 <_scanf_i+0x126>
 8014b72:	6862      	ldr	r2, [r4, #4]
 8014b74:	b92a      	cbnz	r2, 8014b82 <_scanf_i+0x82>
 8014b76:	6822      	ldr	r2, [r4, #0]
 8014b78:	2108      	movs	r1, #8
 8014b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014b7e:	6061      	str	r1, [r4, #4]
 8014b80:	6022      	str	r2, [r4, #0]
 8014b82:	6822      	ldr	r2, [r4, #0]
 8014b84:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8014b88:	6022      	str	r2, [r4, #0]
 8014b8a:	68a2      	ldr	r2, [r4, #8]
 8014b8c:	1e51      	subs	r1, r2, #1
 8014b8e:	60a1      	str	r1, [r4, #8]
 8014b90:	b192      	cbz	r2, 8014bb8 <_scanf_i+0xb8>
 8014b92:	6832      	ldr	r2, [r6, #0]
 8014b94:	1c51      	adds	r1, r2, #1
 8014b96:	6031      	str	r1, [r6, #0]
 8014b98:	7812      	ldrb	r2, [r2, #0]
 8014b9a:	f805 2b01 	strb.w	r2, [r5], #1
 8014b9e:	6872      	ldr	r2, [r6, #4]
 8014ba0:	3a01      	subs	r2, #1
 8014ba2:	2a00      	cmp	r2, #0
 8014ba4:	6072      	str	r2, [r6, #4]
 8014ba6:	dc07      	bgt.n	8014bb8 <_scanf_i+0xb8>
 8014ba8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8014bac:	4631      	mov	r1, r6
 8014bae:	4650      	mov	r0, sl
 8014bb0:	4790      	blx	r2
 8014bb2:	2800      	cmp	r0, #0
 8014bb4:	f040 8085 	bne.w	8014cc2 <_scanf_i+0x1c2>
 8014bb8:	f10b 0b01 	add.w	fp, fp, #1
 8014bbc:	f1bb 0f03 	cmp.w	fp, #3
 8014bc0:	d1cb      	bne.n	8014b5a <_scanf_i+0x5a>
 8014bc2:	6863      	ldr	r3, [r4, #4]
 8014bc4:	b90b      	cbnz	r3, 8014bca <_scanf_i+0xca>
 8014bc6:	230a      	movs	r3, #10
 8014bc8:	6063      	str	r3, [r4, #4]
 8014bca:	6863      	ldr	r3, [r4, #4]
 8014bcc:	4945      	ldr	r1, [pc, #276]	@ (8014ce4 <_scanf_i+0x1e4>)
 8014bce:	6960      	ldr	r0, [r4, #20]
 8014bd0:	1ac9      	subs	r1, r1, r3
 8014bd2:	f000 f935 	bl	8014e40 <__sccl>
 8014bd6:	f04f 0b00 	mov.w	fp, #0
 8014bda:	68a3      	ldr	r3, [r4, #8]
 8014bdc:	6822      	ldr	r2, [r4, #0]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d03d      	beq.n	8014c5e <_scanf_i+0x15e>
 8014be2:	6831      	ldr	r1, [r6, #0]
 8014be4:	6960      	ldr	r0, [r4, #20]
 8014be6:	f891 c000 	ldrb.w	ip, [r1]
 8014bea:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014bee:	2800      	cmp	r0, #0
 8014bf0:	d035      	beq.n	8014c5e <_scanf_i+0x15e>
 8014bf2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8014bf6:	d124      	bne.n	8014c42 <_scanf_i+0x142>
 8014bf8:	0510      	lsls	r0, r2, #20
 8014bfa:	d522      	bpl.n	8014c42 <_scanf_i+0x142>
 8014bfc:	f10b 0b01 	add.w	fp, fp, #1
 8014c00:	f1b9 0f00 	cmp.w	r9, #0
 8014c04:	d003      	beq.n	8014c0e <_scanf_i+0x10e>
 8014c06:	3301      	adds	r3, #1
 8014c08:	f109 39ff 	add.w	r9, r9, #4294967295
 8014c0c:	60a3      	str	r3, [r4, #8]
 8014c0e:	6873      	ldr	r3, [r6, #4]
 8014c10:	3b01      	subs	r3, #1
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	6073      	str	r3, [r6, #4]
 8014c16:	dd1b      	ble.n	8014c50 <_scanf_i+0x150>
 8014c18:	6833      	ldr	r3, [r6, #0]
 8014c1a:	3301      	adds	r3, #1
 8014c1c:	6033      	str	r3, [r6, #0]
 8014c1e:	68a3      	ldr	r3, [r4, #8]
 8014c20:	3b01      	subs	r3, #1
 8014c22:	60a3      	str	r3, [r4, #8]
 8014c24:	e7d9      	b.n	8014bda <_scanf_i+0xda>
 8014c26:	f1bb 0f02 	cmp.w	fp, #2
 8014c2a:	d1ae      	bne.n	8014b8a <_scanf_i+0x8a>
 8014c2c:	6822      	ldr	r2, [r4, #0]
 8014c2e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8014c32:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8014c36:	d1bf      	bne.n	8014bb8 <_scanf_i+0xb8>
 8014c38:	2110      	movs	r1, #16
 8014c3a:	6061      	str	r1, [r4, #4]
 8014c3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8014c40:	e7a2      	b.n	8014b88 <_scanf_i+0x88>
 8014c42:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8014c46:	6022      	str	r2, [r4, #0]
 8014c48:	780b      	ldrb	r3, [r1, #0]
 8014c4a:	f805 3b01 	strb.w	r3, [r5], #1
 8014c4e:	e7de      	b.n	8014c0e <_scanf_i+0x10e>
 8014c50:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014c54:	4631      	mov	r1, r6
 8014c56:	4650      	mov	r0, sl
 8014c58:	4798      	blx	r3
 8014c5a:	2800      	cmp	r0, #0
 8014c5c:	d0df      	beq.n	8014c1e <_scanf_i+0x11e>
 8014c5e:	6823      	ldr	r3, [r4, #0]
 8014c60:	05d9      	lsls	r1, r3, #23
 8014c62:	d50d      	bpl.n	8014c80 <_scanf_i+0x180>
 8014c64:	42bd      	cmp	r5, r7
 8014c66:	d909      	bls.n	8014c7c <_scanf_i+0x17c>
 8014c68:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014c6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014c70:	4632      	mov	r2, r6
 8014c72:	4650      	mov	r0, sl
 8014c74:	4798      	blx	r3
 8014c76:	f105 39ff 	add.w	r9, r5, #4294967295
 8014c7a:	464d      	mov	r5, r9
 8014c7c:	42bd      	cmp	r5, r7
 8014c7e:	d028      	beq.n	8014cd2 <_scanf_i+0x1d2>
 8014c80:	6822      	ldr	r2, [r4, #0]
 8014c82:	f012 0210 	ands.w	r2, r2, #16
 8014c86:	d113      	bne.n	8014cb0 <_scanf_i+0x1b0>
 8014c88:	702a      	strb	r2, [r5, #0]
 8014c8a:	6863      	ldr	r3, [r4, #4]
 8014c8c:	9e01      	ldr	r6, [sp, #4]
 8014c8e:	4639      	mov	r1, r7
 8014c90:	4650      	mov	r0, sl
 8014c92:	47b0      	blx	r6
 8014c94:	f8d8 3000 	ldr.w	r3, [r8]
 8014c98:	6821      	ldr	r1, [r4, #0]
 8014c9a:	1d1a      	adds	r2, r3, #4
 8014c9c:	f8c8 2000 	str.w	r2, [r8]
 8014ca0:	f011 0f20 	tst.w	r1, #32
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	d00f      	beq.n	8014cc8 <_scanf_i+0x1c8>
 8014ca8:	6018      	str	r0, [r3, #0]
 8014caa:	68e3      	ldr	r3, [r4, #12]
 8014cac:	3301      	adds	r3, #1
 8014cae:	60e3      	str	r3, [r4, #12]
 8014cb0:	6923      	ldr	r3, [r4, #16]
 8014cb2:	1bed      	subs	r5, r5, r7
 8014cb4:	445d      	add	r5, fp
 8014cb6:	442b      	add	r3, r5
 8014cb8:	6123      	str	r3, [r4, #16]
 8014cba:	2000      	movs	r0, #0
 8014cbc:	b007      	add	sp, #28
 8014cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cc2:	f04f 0b00 	mov.w	fp, #0
 8014cc6:	e7ca      	b.n	8014c5e <_scanf_i+0x15e>
 8014cc8:	07ca      	lsls	r2, r1, #31
 8014cca:	bf4c      	ite	mi
 8014ccc:	8018      	strhmi	r0, [r3, #0]
 8014cce:	6018      	strpl	r0, [r3, #0]
 8014cd0:	e7eb      	b.n	8014caa <_scanf_i+0x1aa>
 8014cd2:	2001      	movs	r0, #1
 8014cd4:	e7f2      	b.n	8014cbc <_scanf_i+0x1bc>
 8014cd6:	bf00      	nop
 8014cd8:	08016fdc 	.word	0x08016fdc
 8014cdc:	08014401 	.word	0x08014401
 8014ce0:	080157c5 	.word	0x080157c5
 8014ce4:	080173c2 	.word	0x080173c2

08014ce8 <__sflush_r>:
 8014ce8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cf0:	0716      	lsls	r6, r2, #28
 8014cf2:	4605      	mov	r5, r0
 8014cf4:	460c      	mov	r4, r1
 8014cf6:	d454      	bmi.n	8014da2 <__sflush_r+0xba>
 8014cf8:	684b      	ldr	r3, [r1, #4]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	dc02      	bgt.n	8014d04 <__sflush_r+0x1c>
 8014cfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	dd48      	ble.n	8014d96 <__sflush_r+0xae>
 8014d04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014d06:	2e00      	cmp	r6, #0
 8014d08:	d045      	beq.n	8014d96 <__sflush_r+0xae>
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014d10:	682f      	ldr	r7, [r5, #0]
 8014d12:	6a21      	ldr	r1, [r4, #32]
 8014d14:	602b      	str	r3, [r5, #0]
 8014d16:	d030      	beq.n	8014d7a <__sflush_r+0x92>
 8014d18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014d1a:	89a3      	ldrh	r3, [r4, #12]
 8014d1c:	0759      	lsls	r1, r3, #29
 8014d1e:	d505      	bpl.n	8014d2c <__sflush_r+0x44>
 8014d20:	6863      	ldr	r3, [r4, #4]
 8014d22:	1ad2      	subs	r2, r2, r3
 8014d24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014d26:	b10b      	cbz	r3, 8014d2c <__sflush_r+0x44>
 8014d28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014d2a:	1ad2      	subs	r2, r2, r3
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014d30:	6a21      	ldr	r1, [r4, #32]
 8014d32:	4628      	mov	r0, r5
 8014d34:	47b0      	blx	r6
 8014d36:	1c43      	adds	r3, r0, #1
 8014d38:	89a3      	ldrh	r3, [r4, #12]
 8014d3a:	d106      	bne.n	8014d4a <__sflush_r+0x62>
 8014d3c:	6829      	ldr	r1, [r5, #0]
 8014d3e:	291d      	cmp	r1, #29
 8014d40:	d82b      	bhi.n	8014d9a <__sflush_r+0xb2>
 8014d42:	4a2a      	ldr	r2, [pc, #168]	@ (8014dec <__sflush_r+0x104>)
 8014d44:	410a      	asrs	r2, r1
 8014d46:	07d6      	lsls	r6, r2, #31
 8014d48:	d427      	bmi.n	8014d9a <__sflush_r+0xb2>
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	6062      	str	r2, [r4, #4]
 8014d4e:	04d9      	lsls	r1, r3, #19
 8014d50:	6922      	ldr	r2, [r4, #16]
 8014d52:	6022      	str	r2, [r4, #0]
 8014d54:	d504      	bpl.n	8014d60 <__sflush_r+0x78>
 8014d56:	1c42      	adds	r2, r0, #1
 8014d58:	d101      	bne.n	8014d5e <__sflush_r+0x76>
 8014d5a:	682b      	ldr	r3, [r5, #0]
 8014d5c:	b903      	cbnz	r3, 8014d60 <__sflush_r+0x78>
 8014d5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8014d60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014d62:	602f      	str	r7, [r5, #0]
 8014d64:	b1b9      	cbz	r1, 8014d96 <__sflush_r+0xae>
 8014d66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014d6a:	4299      	cmp	r1, r3
 8014d6c:	d002      	beq.n	8014d74 <__sflush_r+0x8c>
 8014d6e:	4628      	mov	r0, r5
 8014d70:	f7fd ff12 	bl	8012b98 <_free_r>
 8014d74:	2300      	movs	r3, #0
 8014d76:	6363      	str	r3, [r4, #52]	@ 0x34
 8014d78:	e00d      	b.n	8014d96 <__sflush_r+0xae>
 8014d7a:	2301      	movs	r3, #1
 8014d7c:	4628      	mov	r0, r5
 8014d7e:	47b0      	blx	r6
 8014d80:	4602      	mov	r2, r0
 8014d82:	1c50      	adds	r0, r2, #1
 8014d84:	d1c9      	bne.n	8014d1a <__sflush_r+0x32>
 8014d86:	682b      	ldr	r3, [r5, #0]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d0c6      	beq.n	8014d1a <__sflush_r+0x32>
 8014d8c:	2b1d      	cmp	r3, #29
 8014d8e:	d001      	beq.n	8014d94 <__sflush_r+0xac>
 8014d90:	2b16      	cmp	r3, #22
 8014d92:	d11e      	bne.n	8014dd2 <__sflush_r+0xea>
 8014d94:	602f      	str	r7, [r5, #0]
 8014d96:	2000      	movs	r0, #0
 8014d98:	e022      	b.n	8014de0 <__sflush_r+0xf8>
 8014d9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d9e:	b21b      	sxth	r3, r3
 8014da0:	e01b      	b.n	8014dda <__sflush_r+0xf2>
 8014da2:	690f      	ldr	r7, [r1, #16]
 8014da4:	2f00      	cmp	r7, #0
 8014da6:	d0f6      	beq.n	8014d96 <__sflush_r+0xae>
 8014da8:	0793      	lsls	r3, r2, #30
 8014daa:	680e      	ldr	r6, [r1, #0]
 8014dac:	bf08      	it	eq
 8014dae:	694b      	ldreq	r3, [r1, #20]
 8014db0:	600f      	str	r7, [r1, #0]
 8014db2:	bf18      	it	ne
 8014db4:	2300      	movne	r3, #0
 8014db6:	eba6 0807 	sub.w	r8, r6, r7
 8014dba:	608b      	str	r3, [r1, #8]
 8014dbc:	f1b8 0f00 	cmp.w	r8, #0
 8014dc0:	dde9      	ble.n	8014d96 <__sflush_r+0xae>
 8014dc2:	6a21      	ldr	r1, [r4, #32]
 8014dc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014dc6:	4643      	mov	r3, r8
 8014dc8:	463a      	mov	r2, r7
 8014dca:	4628      	mov	r0, r5
 8014dcc:	47b0      	blx	r6
 8014dce:	2800      	cmp	r0, #0
 8014dd0:	dc08      	bgt.n	8014de4 <__sflush_r+0xfc>
 8014dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014dda:	81a3      	strh	r3, [r4, #12]
 8014ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8014de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014de4:	4407      	add	r7, r0
 8014de6:	eba8 0800 	sub.w	r8, r8, r0
 8014dea:	e7e7      	b.n	8014dbc <__sflush_r+0xd4>
 8014dec:	dfbffffe 	.word	0xdfbffffe

08014df0 <_fflush_r>:
 8014df0:	b538      	push	{r3, r4, r5, lr}
 8014df2:	690b      	ldr	r3, [r1, #16]
 8014df4:	4605      	mov	r5, r0
 8014df6:	460c      	mov	r4, r1
 8014df8:	b913      	cbnz	r3, 8014e00 <_fflush_r+0x10>
 8014dfa:	2500      	movs	r5, #0
 8014dfc:	4628      	mov	r0, r5
 8014dfe:	bd38      	pop	{r3, r4, r5, pc}
 8014e00:	b118      	cbz	r0, 8014e0a <_fflush_r+0x1a>
 8014e02:	6a03      	ldr	r3, [r0, #32]
 8014e04:	b90b      	cbnz	r3, 8014e0a <_fflush_r+0x1a>
 8014e06:	f7fc ff0d 	bl	8011c24 <__sinit>
 8014e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d0f3      	beq.n	8014dfa <_fflush_r+0xa>
 8014e12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014e14:	07d0      	lsls	r0, r2, #31
 8014e16:	d404      	bmi.n	8014e22 <_fflush_r+0x32>
 8014e18:	0599      	lsls	r1, r3, #22
 8014e1a:	d402      	bmi.n	8014e22 <_fflush_r+0x32>
 8014e1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014e1e:	f7fd f856 	bl	8011ece <__retarget_lock_acquire_recursive>
 8014e22:	4628      	mov	r0, r5
 8014e24:	4621      	mov	r1, r4
 8014e26:	f7ff ff5f 	bl	8014ce8 <__sflush_r>
 8014e2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014e2c:	07da      	lsls	r2, r3, #31
 8014e2e:	4605      	mov	r5, r0
 8014e30:	d4e4      	bmi.n	8014dfc <_fflush_r+0xc>
 8014e32:	89a3      	ldrh	r3, [r4, #12]
 8014e34:	059b      	lsls	r3, r3, #22
 8014e36:	d4e1      	bmi.n	8014dfc <_fflush_r+0xc>
 8014e38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014e3a:	f7fd f849 	bl	8011ed0 <__retarget_lock_release_recursive>
 8014e3e:	e7dd      	b.n	8014dfc <_fflush_r+0xc>

08014e40 <__sccl>:
 8014e40:	b570      	push	{r4, r5, r6, lr}
 8014e42:	780b      	ldrb	r3, [r1, #0]
 8014e44:	4604      	mov	r4, r0
 8014e46:	2b5e      	cmp	r3, #94	@ 0x5e
 8014e48:	bf0b      	itete	eq
 8014e4a:	784b      	ldrbeq	r3, [r1, #1]
 8014e4c:	1c4a      	addne	r2, r1, #1
 8014e4e:	1c8a      	addeq	r2, r1, #2
 8014e50:	2100      	movne	r1, #0
 8014e52:	bf08      	it	eq
 8014e54:	2101      	moveq	r1, #1
 8014e56:	3801      	subs	r0, #1
 8014e58:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8014e5c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8014e60:	42a8      	cmp	r0, r5
 8014e62:	d1fb      	bne.n	8014e5c <__sccl+0x1c>
 8014e64:	b90b      	cbnz	r3, 8014e6a <__sccl+0x2a>
 8014e66:	1e50      	subs	r0, r2, #1
 8014e68:	bd70      	pop	{r4, r5, r6, pc}
 8014e6a:	f081 0101 	eor.w	r1, r1, #1
 8014e6e:	54e1      	strb	r1, [r4, r3]
 8014e70:	4610      	mov	r0, r2
 8014e72:	4602      	mov	r2, r0
 8014e74:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014e78:	2d2d      	cmp	r5, #45	@ 0x2d
 8014e7a:	d005      	beq.n	8014e88 <__sccl+0x48>
 8014e7c:	2d5d      	cmp	r5, #93	@ 0x5d
 8014e7e:	d016      	beq.n	8014eae <__sccl+0x6e>
 8014e80:	2d00      	cmp	r5, #0
 8014e82:	d0f1      	beq.n	8014e68 <__sccl+0x28>
 8014e84:	462b      	mov	r3, r5
 8014e86:	e7f2      	b.n	8014e6e <__sccl+0x2e>
 8014e88:	7846      	ldrb	r6, [r0, #1]
 8014e8a:	2e5d      	cmp	r6, #93	@ 0x5d
 8014e8c:	d0fa      	beq.n	8014e84 <__sccl+0x44>
 8014e8e:	42b3      	cmp	r3, r6
 8014e90:	dcf8      	bgt.n	8014e84 <__sccl+0x44>
 8014e92:	3002      	adds	r0, #2
 8014e94:	461a      	mov	r2, r3
 8014e96:	3201      	adds	r2, #1
 8014e98:	4296      	cmp	r6, r2
 8014e9a:	54a1      	strb	r1, [r4, r2]
 8014e9c:	dcfb      	bgt.n	8014e96 <__sccl+0x56>
 8014e9e:	1af2      	subs	r2, r6, r3
 8014ea0:	3a01      	subs	r2, #1
 8014ea2:	1c5d      	adds	r5, r3, #1
 8014ea4:	42b3      	cmp	r3, r6
 8014ea6:	bfa8      	it	ge
 8014ea8:	2200      	movge	r2, #0
 8014eaa:	18ab      	adds	r3, r5, r2
 8014eac:	e7e1      	b.n	8014e72 <__sccl+0x32>
 8014eae:	4610      	mov	r0, r2
 8014eb0:	e7da      	b.n	8014e68 <__sccl+0x28>

08014eb2 <__submore>:
 8014eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014eb6:	460c      	mov	r4, r1
 8014eb8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8014eba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014ebe:	4299      	cmp	r1, r3
 8014ec0:	d11d      	bne.n	8014efe <__submore+0x4c>
 8014ec2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8014ec6:	f7fd fedb 	bl	8012c80 <_malloc_r>
 8014eca:	b918      	cbnz	r0, 8014ed4 <__submore+0x22>
 8014ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8014ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ed4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014ed8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8014eda:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8014ede:	6360      	str	r0, [r4, #52]	@ 0x34
 8014ee0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8014ee4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8014ee8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8014eec:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014ef0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8014ef4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8014ef8:	6020      	str	r0, [r4, #0]
 8014efa:	2000      	movs	r0, #0
 8014efc:	e7e8      	b.n	8014ed0 <__submore+0x1e>
 8014efe:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8014f00:	0077      	lsls	r7, r6, #1
 8014f02:	463a      	mov	r2, r7
 8014f04:	f000 fbc1 	bl	801568a <_realloc_r>
 8014f08:	4605      	mov	r5, r0
 8014f0a:	2800      	cmp	r0, #0
 8014f0c:	d0de      	beq.n	8014ecc <__submore+0x1a>
 8014f0e:	eb00 0806 	add.w	r8, r0, r6
 8014f12:	4601      	mov	r1, r0
 8014f14:	4632      	mov	r2, r6
 8014f16:	4640      	mov	r0, r8
 8014f18:	f7fc ffdb 	bl	8011ed2 <memcpy>
 8014f1c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8014f20:	f8c4 8000 	str.w	r8, [r4]
 8014f24:	e7e9      	b.n	8014efa <__submore+0x48>

08014f26 <memmove>:
 8014f26:	4288      	cmp	r0, r1
 8014f28:	b510      	push	{r4, lr}
 8014f2a:	eb01 0402 	add.w	r4, r1, r2
 8014f2e:	d902      	bls.n	8014f36 <memmove+0x10>
 8014f30:	4284      	cmp	r4, r0
 8014f32:	4623      	mov	r3, r4
 8014f34:	d807      	bhi.n	8014f46 <memmove+0x20>
 8014f36:	1e43      	subs	r3, r0, #1
 8014f38:	42a1      	cmp	r1, r4
 8014f3a:	d008      	beq.n	8014f4e <memmove+0x28>
 8014f3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014f40:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014f44:	e7f8      	b.n	8014f38 <memmove+0x12>
 8014f46:	4402      	add	r2, r0
 8014f48:	4601      	mov	r1, r0
 8014f4a:	428a      	cmp	r2, r1
 8014f4c:	d100      	bne.n	8014f50 <memmove+0x2a>
 8014f4e:	bd10      	pop	{r4, pc}
 8014f50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014f54:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014f58:	e7f7      	b.n	8014f4a <memmove+0x24>
	...

08014f5c <_sbrk_r>:
 8014f5c:	b538      	push	{r3, r4, r5, lr}
 8014f5e:	4d06      	ldr	r5, [pc, #24]	@ (8014f78 <_sbrk_r+0x1c>)
 8014f60:	2300      	movs	r3, #0
 8014f62:	4604      	mov	r4, r0
 8014f64:	4608      	mov	r0, r1
 8014f66:	602b      	str	r3, [r5, #0]
 8014f68:	f7ef fb50 	bl	800460c <_sbrk>
 8014f6c:	1c43      	adds	r3, r0, #1
 8014f6e:	d102      	bne.n	8014f76 <_sbrk_r+0x1a>
 8014f70:	682b      	ldr	r3, [r5, #0]
 8014f72:	b103      	cbz	r3, 8014f76 <_sbrk_r+0x1a>
 8014f74:	6023      	str	r3, [r4, #0]
 8014f76:	bd38      	pop	{r3, r4, r5, pc}
 8014f78:	200026c8 	.word	0x200026c8
 8014f7c:	00000000 	.word	0x00000000

08014f80 <nan>:
 8014f80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014f88 <nan+0x8>
 8014f84:	4770      	bx	lr
 8014f86:	bf00      	nop
 8014f88:	00000000 	.word	0x00000000
 8014f8c:	7ff80000 	.word	0x7ff80000

08014f90 <__assert_func>:
 8014f90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014f92:	4614      	mov	r4, r2
 8014f94:	461a      	mov	r2, r3
 8014f96:	4b09      	ldr	r3, [pc, #36]	@ (8014fbc <__assert_func+0x2c>)
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	4605      	mov	r5, r0
 8014f9c:	68d8      	ldr	r0, [r3, #12]
 8014f9e:	b954      	cbnz	r4, 8014fb6 <__assert_func+0x26>
 8014fa0:	4b07      	ldr	r3, [pc, #28]	@ (8014fc0 <__assert_func+0x30>)
 8014fa2:	461c      	mov	r4, r3
 8014fa4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014fa8:	9100      	str	r1, [sp, #0]
 8014faa:	462b      	mov	r3, r5
 8014fac:	4905      	ldr	r1, [pc, #20]	@ (8014fc4 <__assert_func+0x34>)
 8014fae:	f000 fc19 	bl	80157e4 <fiprintf>
 8014fb2:	f000 fc29 	bl	8015808 <abort>
 8014fb6:	4b04      	ldr	r3, [pc, #16]	@ (8014fc8 <__assert_func+0x38>)
 8014fb8:	e7f4      	b.n	8014fa4 <__assert_func+0x14>
 8014fba:	bf00      	nop
 8014fbc:	200001e4 	.word	0x200001e4
 8014fc0:	08017410 	.word	0x08017410
 8014fc4:	080173e2 	.word	0x080173e2
 8014fc8:	080173d5 	.word	0x080173d5

08014fcc <_calloc_r>:
 8014fcc:	b570      	push	{r4, r5, r6, lr}
 8014fce:	fba1 5402 	umull	r5, r4, r1, r2
 8014fd2:	b93c      	cbnz	r4, 8014fe4 <_calloc_r+0x18>
 8014fd4:	4629      	mov	r1, r5
 8014fd6:	f7fd fe53 	bl	8012c80 <_malloc_r>
 8014fda:	4606      	mov	r6, r0
 8014fdc:	b928      	cbnz	r0, 8014fea <_calloc_r+0x1e>
 8014fde:	2600      	movs	r6, #0
 8014fe0:	4630      	mov	r0, r6
 8014fe2:	bd70      	pop	{r4, r5, r6, pc}
 8014fe4:	220c      	movs	r2, #12
 8014fe6:	6002      	str	r2, [r0, #0]
 8014fe8:	e7f9      	b.n	8014fde <_calloc_r+0x12>
 8014fea:	462a      	mov	r2, r5
 8014fec:	4621      	mov	r1, r4
 8014fee:	f7fc fede 	bl	8011dae <memset>
 8014ff2:	e7f5      	b.n	8014fe0 <_calloc_r+0x14>

08014ff4 <rshift>:
 8014ff4:	6903      	ldr	r3, [r0, #16]
 8014ff6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014ffa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ffe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015002:	f100 0414 	add.w	r4, r0, #20
 8015006:	dd45      	ble.n	8015094 <rshift+0xa0>
 8015008:	f011 011f 	ands.w	r1, r1, #31
 801500c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015010:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015014:	d10c      	bne.n	8015030 <rshift+0x3c>
 8015016:	f100 0710 	add.w	r7, r0, #16
 801501a:	4629      	mov	r1, r5
 801501c:	42b1      	cmp	r1, r6
 801501e:	d334      	bcc.n	801508a <rshift+0x96>
 8015020:	1a9b      	subs	r3, r3, r2
 8015022:	009b      	lsls	r3, r3, #2
 8015024:	1eea      	subs	r2, r5, #3
 8015026:	4296      	cmp	r6, r2
 8015028:	bf38      	it	cc
 801502a:	2300      	movcc	r3, #0
 801502c:	4423      	add	r3, r4
 801502e:	e015      	b.n	801505c <rshift+0x68>
 8015030:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015034:	f1c1 0820 	rsb	r8, r1, #32
 8015038:	40cf      	lsrs	r7, r1
 801503a:	f105 0e04 	add.w	lr, r5, #4
 801503e:	46a1      	mov	r9, r4
 8015040:	4576      	cmp	r6, lr
 8015042:	46f4      	mov	ip, lr
 8015044:	d815      	bhi.n	8015072 <rshift+0x7e>
 8015046:	1a9a      	subs	r2, r3, r2
 8015048:	0092      	lsls	r2, r2, #2
 801504a:	3a04      	subs	r2, #4
 801504c:	3501      	adds	r5, #1
 801504e:	42ae      	cmp	r6, r5
 8015050:	bf38      	it	cc
 8015052:	2200      	movcc	r2, #0
 8015054:	18a3      	adds	r3, r4, r2
 8015056:	50a7      	str	r7, [r4, r2]
 8015058:	b107      	cbz	r7, 801505c <rshift+0x68>
 801505a:	3304      	adds	r3, #4
 801505c:	1b1a      	subs	r2, r3, r4
 801505e:	42a3      	cmp	r3, r4
 8015060:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015064:	bf08      	it	eq
 8015066:	2300      	moveq	r3, #0
 8015068:	6102      	str	r2, [r0, #16]
 801506a:	bf08      	it	eq
 801506c:	6143      	streq	r3, [r0, #20]
 801506e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015072:	f8dc c000 	ldr.w	ip, [ip]
 8015076:	fa0c fc08 	lsl.w	ip, ip, r8
 801507a:	ea4c 0707 	orr.w	r7, ip, r7
 801507e:	f849 7b04 	str.w	r7, [r9], #4
 8015082:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015086:	40cf      	lsrs	r7, r1
 8015088:	e7da      	b.n	8015040 <rshift+0x4c>
 801508a:	f851 cb04 	ldr.w	ip, [r1], #4
 801508e:	f847 cf04 	str.w	ip, [r7, #4]!
 8015092:	e7c3      	b.n	801501c <rshift+0x28>
 8015094:	4623      	mov	r3, r4
 8015096:	e7e1      	b.n	801505c <rshift+0x68>

08015098 <__hexdig_fun>:
 8015098:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801509c:	2b09      	cmp	r3, #9
 801509e:	d802      	bhi.n	80150a6 <__hexdig_fun+0xe>
 80150a0:	3820      	subs	r0, #32
 80150a2:	b2c0      	uxtb	r0, r0
 80150a4:	4770      	bx	lr
 80150a6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80150aa:	2b05      	cmp	r3, #5
 80150ac:	d801      	bhi.n	80150b2 <__hexdig_fun+0x1a>
 80150ae:	3847      	subs	r0, #71	@ 0x47
 80150b0:	e7f7      	b.n	80150a2 <__hexdig_fun+0xa>
 80150b2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80150b6:	2b05      	cmp	r3, #5
 80150b8:	d801      	bhi.n	80150be <__hexdig_fun+0x26>
 80150ba:	3827      	subs	r0, #39	@ 0x27
 80150bc:	e7f1      	b.n	80150a2 <__hexdig_fun+0xa>
 80150be:	2000      	movs	r0, #0
 80150c0:	4770      	bx	lr
	...

080150c4 <__gethex>:
 80150c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150c8:	b085      	sub	sp, #20
 80150ca:	468a      	mov	sl, r1
 80150cc:	9302      	str	r3, [sp, #8]
 80150ce:	680b      	ldr	r3, [r1, #0]
 80150d0:	9001      	str	r0, [sp, #4]
 80150d2:	4690      	mov	r8, r2
 80150d4:	1c9c      	adds	r4, r3, #2
 80150d6:	46a1      	mov	r9, r4
 80150d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80150dc:	2830      	cmp	r0, #48	@ 0x30
 80150de:	d0fa      	beq.n	80150d6 <__gethex+0x12>
 80150e0:	eba9 0303 	sub.w	r3, r9, r3
 80150e4:	f1a3 0b02 	sub.w	fp, r3, #2
 80150e8:	f7ff ffd6 	bl	8015098 <__hexdig_fun>
 80150ec:	4605      	mov	r5, r0
 80150ee:	2800      	cmp	r0, #0
 80150f0:	d168      	bne.n	80151c4 <__gethex+0x100>
 80150f2:	49a0      	ldr	r1, [pc, #640]	@ (8015374 <__gethex+0x2b0>)
 80150f4:	2201      	movs	r2, #1
 80150f6:	4648      	mov	r0, r9
 80150f8:	f7fc fe61 	bl	8011dbe <strncmp>
 80150fc:	4607      	mov	r7, r0
 80150fe:	2800      	cmp	r0, #0
 8015100:	d167      	bne.n	80151d2 <__gethex+0x10e>
 8015102:	f899 0001 	ldrb.w	r0, [r9, #1]
 8015106:	4626      	mov	r6, r4
 8015108:	f7ff ffc6 	bl	8015098 <__hexdig_fun>
 801510c:	2800      	cmp	r0, #0
 801510e:	d062      	beq.n	80151d6 <__gethex+0x112>
 8015110:	4623      	mov	r3, r4
 8015112:	7818      	ldrb	r0, [r3, #0]
 8015114:	2830      	cmp	r0, #48	@ 0x30
 8015116:	4699      	mov	r9, r3
 8015118:	f103 0301 	add.w	r3, r3, #1
 801511c:	d0f9      	beq.n	8015112 <__gethex+0x4e>
 801511e:	f7ff ffbb 	bl	8015098 <__hexdig_fun>
 8015122:	fab0 f580 	clz	r5, r0
 8015126:	096d      	lsrs	r5, r5, #5
 8015128:	f04f 0b01 	mov.w	fp, #1
 801512c:	464a      	mov	r2, r9
 801512e:	4616      	mov	r6, r2
 8015130:	3201      	adds	r2, #1
 8015132:	7830      	ldrb	r0, [r6, #0]
 8015134:	f7ff ffb0 	bl	8015098 <__hexdig_fun>
 8015138:	2800      	cmp	r0, #0
 801513a:	d1f8      	bne.n	801512e <__gethex+0x6a>
 801513c:	498d      	ldr	r1, [pc, #564]	@ (8015374 <__gethex+0x2b0>)
 801513e:	2201      	movs	r2, #1
 8015140:	4630      	mov	r0, r6
 8015142:	f7fc fe3c 	bl	8011dbe <strncmp>
 8015146:	2800      	cmp	r0, #0
 8015148:	d13f      	bne.n	80151ca <__gethex+0x106>
 801514a:	b944      	cbnz	r4, 801515e <__gethex+0x9a>
 801514c:	1c74      	adds	r4, r6, #1
 801514e:	4622      	mov	r2, r4
 8015150:	4616      	mov	r6, r2
 8015152:	3201      	adds	r2, #1
 8015154:	7830      	ldrb	r0, [r6, #0]
 8015156:	f7ff ff9f 	bl	8015098 <__hexdig_fun>
 801515a:	2800      	cmp	r0, #0
 801515c:	d1f8      	bne.n	8015150 <__gethex+0x8c>
 801515e:	1ba4      	subs	r4, r4, r6
 8015160:	00a7      	lsls	r7, r4, #2
 8015162:	7833      	ldrb	r3, [r6, #0]
 8015164:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015168:	2b50      	cmp	r3, #80	@ 0x50
 801516a:	d13e      	bne.n	80151ea <__gethex+0x126>
 801516c:	7873      	ldrb	r3, [r6, #1]
 801516e:	2b2b      	cmp	r3, #43	@ 0x2b
 8015170:	d033      	beq.n	80151da <__gethex+0x116>
 8015172:	2b2d      	cmp	r3, #45	@ 0x2d
 8015174:	d034      	beq.n	80151e0 <__gethex+0x11c>
 8015176:	1c71      	adds	r1, r6, #1
 8015178:	2400      	movs	r4, #0
 801517a:	7808      	ldrb	r0, [r1, #0]
 801517c:	f7ff ff8c 	bl	8015098 <__hexdig_fun>
 8015180:	1e43      	subs	r3, r0, #1
 8015182:	b2db      	uxtb	r3, r3
 8015184:	2b18      	cmp	r3, #24
 8015186:	d830      	bhi.n	80151ea <__gethex+0x126>
 8015188:	f1a0 0210 	sub.w	r2, r0, #16
 801518c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015190:	f7ff ff82 	bl	8015098 <__hexdig_fun>
 8015194:	f100 3cff 	add.w	ip, r0, #4294967295
 8015198:	fa5f fc8c 	uxtb.w	ip, ip
 801519c:	f1bc 0f18 	cmp.w	ip, #24
 80151a0:	f04f 030a 	mov.w	r3, #10
 80151a4:	d91e      	bls.n	80151e4 <__gethex+0x120>
 80151a6:	b104      	cbz	r4, 80151aa <__gethex+0xe6>
 80151a8:	4252      	negs	r2, r2
 80151aa:	4417      	add	r7, r2
 80151ac:	f8ca 1000 	str.w	r1, [sl]
 80151b0:	b1ed      	cbz	r5, 80151ee <__gethex+0x12a>
 80151b2:	f1bb 0f00 	cmp.w	fp, #0
 80151b6:	bf0c      	ite	eq
 80151b8:	2506      	moveq	r5, #6
 80151ba:	2500      	movne	r5, #0
 80151bc:	4628      	mov	r0, r5
 80151be:	b005      	add	sp, #20
 80151c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151c4:	2500      	movs	r5, #0
 80151c6:	462c      	mov	r4, r5
 80151c8:	e7b0      	b.n	801512c <__gethex+0x68>
 80151ca:	2c00      	cmp	r4, #0
 80151cc:	d1c7      	bne.n	801515e <__gethex+0x9a>
 80151ce:	4627      	mov	r7, r4
 80151d0:	e7c7      	b.n	8015162 <__gethex+0x9e>
 80151d2:	464e      	mov	r6, r9
 80151d4:	462f      	mov	r7, r5
 80151d6:	2501      	movs	r5, #1
 80151d8:	e7c3      	b.n	8015162 <__gethex+0x9e>
 80151da:	2400      	movs	r4, #0
 80151dc:	1cb1      	adds	r1, r6, #2
 80151de:	e7cc      	b.n	801517a <__gethex+0xb6>
 80151e0:	2401      	movs	r4, #1
 80151e2:	e7fb      	b.n	80151dc <__gethex+0x118>
 80151e4:	fb03 0002 	mla	r0, r3, r2, r0
 80151e8:	e7ce      	b.n	8015188 <__gethex+0xc4>
 80151ea:	4631      	mov	r1, r6
 80151ec:	e7de      	b.n	80151ac <__gethex+0xe8>
 80151ee:	eba6 0309 	sub.w	r3, r6, r9
 80151f2:	3b01      	subs	r3, #1
 80151f4:	4629      	mov	r1, r5
 80151f6:	2b07      	cmp	r3, #7
 80151f8:	dc0a      	bgt.n	8015210 <__gethex+0x14c>
 80151fa:	9801      	ldr	r0, [sp, #4]
 80151fc:	f7fd fdcc 	bl	8012d98 <_Balloc>
 8015200:	4604      	mov	r4, r0
 8015202:	b940      	cbnz	r0, 8015216 <__gethex+0x152>
 8015204:	4b5c      	ldr	r3, [pc, #368]	@ (8015378 <__gethex+0x2b4>)
 8015206:	4602      	mov	r2, r0
 8015208:	21e4      	movs	r1, #228	@ 0xe4
 801520a:	485c      	ldr	r0, [pc, #368]	@ (801537c <__gethex+0x2b8>)
 801520c:	f7ff fec0 	bl	8014f90 <__assert_func>
 8015210:	3101      	adds	r1, #1
 8015212:	105b      	asrs	r3, r3, #1
 8015214:	e7ef      	b.n	80151f6 <__gethex+0x132>
 8015216:	f100 0a14 	add.w	sl, r0, #20
 801521a:	2300      	movs	r3, #0
 801521c:	4655      	mov	r5, sl
 801521e:	469b      	mov	fp, r3
 8015220:	45b1      	cmp	r9, r6
 8015222:	d337      	bcc.n	8015294 <__gethex+0x1d0>
 8015224:	f845 bb04 	str.w	fp, [r5], #4
 8015228:	eba5 050a 	sub.w	r5, r5, sl
 801522c:	10ad      	asrs	r5, r5, #2
 801522e:	6125      	str	r5, [r4, #16]
 8015230:	4658      	mov	r0, fp
 8015232:	f7fd fea3 	bl	8012f7c <__hi0bits>
 8015236:	016d      	lsls	r5, r5, #5
 8015238:	f8d8 6000 	ldr.w	r6, [r8]
 801523c:	1a2d      	subs	r5, r5, r0
 801523e:	42b5      	cmp	r5, r6
 8015240:	dd54      	ble.n	80152ec <__gethex+0x228>
 8015242:	1bad      	subs	r5, r5, r6
 8015244:	4629      	mov	r1, r5
 8015246:	4620      	mov	r0, r4
 8015248:	f7fe fa37 	bl	80136ba <__any_on>
 801524c:	4681      	mov	r9, r0
 801524e:	b178      	cbz	r0, 8015270 <__gethex+0x1ac>
 8015250:	1e6b      	subs	r3, r5, #1
 8015252:	1159      	asrs	r1, r3, #5
 8015254:	f003 021f 	and.w	r2, r3, #31
 8015258:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801525c:	f04f 0901 	mov.w	r9, #1
 8015260:	fa09 f202 	lsl.w	r2, r9, r2
 8015264:	420a      	tst	r2, r1
 8015266:	d003      	beq.n	8015270 <__gethex+0x1ac>
 8015268:	454b      	cmp	r3, r9
 801526a:	dc36      	bgt.n	80152da <__gethex+0x216>
 801526c:	f04f 0902 	mov.w	r9, #2
 8015270:	4629      	mov	r1, r5
 8015272:	4620      	mov	r0, r4
 8015274:	f7ff febe 	bl	8014ff4 <rshift>
 8015278:	442f      	add	r7, r5
 801527a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801527e:	42bb      	cmp	r3, r7
 8015280:	da42      	bge.n	8015308 <__gethex+0x244>
 8015282:	9801      	ldr	r0, [sp, #4]
 8015284:	4621      	mov	r1, r4
 8015286:	f7fd fdc7 	bl	8012e18 <_Bfree>
 801528a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801528c:	2300      	movs	r3, #0
 801528e:	6013      	str	r3, [r2, #0]
 8015290:	25a3      	movs	r5, #163	@ 0xa3
 8015292:	e793      	b.n	80151bc <__gethex+0xf8>
 8015294:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015298:	2a2e      	cmp	r2, #46	@ 0x2e
 801529a:	d012      	beq.n	80152c2 <__gethex+0x1fe>
 801529c:	2b20      	cmp	r3, #32
 801529e:	d104      	bne.n	80152aa <__gethex+0x1e6>
 80152a0:	f845 bb04 	str.w	fp, [r5], #4
 80152a4:	f04f 0b00 	mov.w	fp, #0
 80152a8:	465b      	mov	r3, fp
 80152aa:	7830      	ldrb	r0, [r6, #0]
 80152ac:	9303      	str	r3, [sp, #12]
 80152ae:	f7ff fef3 	bl	8015098 <__hexdig_fun>
 80152b2:	9b03      	ldr	r3, [sp, #12]
 80152b4:	f000 000f 	and.w	r0, r0, #15
 80152b8:	4098      	lsls	r0, r3
 80152ba:	ea4b 0b00 	orr.w	fp, fp, r0
 80152be:	3304      	adds	r3, #4
 80152c0:	e7ae      	b.n	8015220 <__gethex+0x15c>
 80152c2:	45b1      	cmp	r9, r6
 80152c4:	d8ea      	bhi.n	801529c <__gethex+0x1d8>
 80152c6:	492b      	ldr	r1, [pc, #172]	@ (8015374 <__gethex+0x2b0>)
 80152c8:	9303      	str	r3, [sp, #12]
 80152ca:	2201      	movs	r2, #1
 80152cc:	4630      	mov	r0, r6
 80152ce:	f7fc fd76 	bl	8011dbe <strncmp>
 80152d2:	9b03      	ldr	r3, [sp, #12]
 80152d4:	2800      	cmp	r0, #0
 80152d6:	d1e1      	bne.n	801529c <__gethex+0x1d8>
 80152d8:	e7a2      	b.n	8015220 <__gethex+0x15c>
 80152da:	1ea9      	subs	r1, r5, #2
 80152dc:	4620      	mov	r0, r4
 80152de:	f7fe f9ec 	bl	80136ba <__any_on>
 80152e2:	2800      	cmp	r0, #0
 80152e4:	d0c2      	beq.n	801526c <__gethex+0x1a8>
 80152e6:	f04f 0903 	mov.w	r9, #3
 80152ea:	e7c1      	b.n	8015270 <__gethex+0x1ac>
 80152ec:	da09      	bge.n	8015302 <__gethex+0x23e>
 80152ee:	1b75      	subs	r5, r6, r5
 80152f0:	4621      	mov	r1, r4
 80152f2:	9801      	ldr	r0, [sp, #4]
 80152f4:	462a      	mov	r2, r5
 80152f6:	f7fd ffa7 	bl	8013248 <__lshift>
 80152fa:	1b7f      	subs	r7, r7, r5
 80152fc:	4604      	mov	r4, r0
 80152fe:	f100 0a14 	add.w	sl, r0, #20
 8015302:	f04f 0900 	mov.w	r9, #0
 8015306:	e7b8      	b.n	801527a <__gethex+0x1b6>
 8015308:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801530c:	42bd      	cmp	r5, r7
 801530e:	dd6f      	ble.n	80153f0 <__gethex+0x32c>
 8015310:	1bed      	subs	r5, r5, r7
 8015312:	42ae      	cmp	r6, r5
 8015314:	dc34      	bgt.n	8015380 <__gethex+0x2bc>
 8015316:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801531a:	2b02      	cmp	r3, #2
 801531c:	d022      	beq.n	8015364 <__gethex+0x2a0>
 801531e:	2b03      	cmp	r3, #3
 8015320:	d024      	beq.n	801536c <__gethex+0x2a8>
 8015322:	2b01      	cmp	r3, #1
 8015324:	d115      	bne.n	8015352 <__gethex+0x28e>
 8015326:	42ae      	cmp	r6, r5
 8015328:	d113      	bne.n	8015352 <__gethex+0x28e>
 801532a:	2e01      	cmp	r6, #1
 801532c:	d10b      	bne.n	8015346 <__gethex+0x282>
 801532e:	9a02      	ldr	r2, [sp, #8]
 8015330:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015334:	6013      	str	r3, [r2, #0]
 8015336:	2301      	movs	r3, #1
 8015338:	6123      	str	r3, [r4, #16]
 801533a:	f8ca 3000 	str.w	r3, [sl]
 801533e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015340:	2562      	movs	r5, #98	@ 0x62
 8015342:	601c      	str	r4, [r3, #0]
 8015344:	e73a      	b.n	80151bc <__gethex+0xf8>
 8015346:	1e71      	subs	r1, r6, #1
 8015348:	4620      	mov	r0, r4
 801534a:	f7fe f9b6 	bl	80136ba <__any_on>
 801534e:	2800      	cmp	r0, #0
 8015350:	d1ed      	bne.n	801532e <__gethex+0x26a>
 8015352:	9801      	ldr	r0, [sp, #4]
 8015354:	4621      	mov	r1, r4
 8015356:	f7fd fd5f 	bl	8012e18 <_Bfree>
 801535a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801535c:	2300      	movs	r3, #0
 801535e:	6013      	str	r3, [r2, #0]
 8015360:	2550      	movs	r5, #80	@ 0x50
 8015362:	e72b      	b.n	80151bc <__gethex+0xf8>
 8015364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015366:	2b00      	cmp	r3, #0
 8015368:	d1f3      	bne.n	8015352 <__gethex+0x28e>
 801536a:	e7e0      	b.n	801532e <__gethex+0x26a>
 801536c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801536e:	2b00      	cmp	r3, #0
 8015370:	d1dd      	bne.n	801532e <__gethex+0x26a>
 8015372:	e7ee      	b.n	8015352 <__gethex+0x28e>
 8015374:	08017248 	.word	0x08017248
 8015378:	080170db 	.word	0x080170db
 801537c:	08017411 	.word	0x08017411
 8015380:	1e6f      	subs	r7, r5, #1
 8015382:	f1b9 0f00 	cmp.w	r9, #0
 8015386:	d130      	bne.n	80153ea <__gethex+0x326>
 8015388:	b127      	cbz	r7, 8015394 <__gethex+0x2d0>
 801538a:	4639      	mov	r1, r7
 801538c:	4620      	mov	r0, r4
 801538e:	f7fe f994 	bl	80136ba <__any_on>
 8015392:	4681      	mov	r9, r0
 8015394:	117a      	asrs	r2, r7, #5
 8015396:	2301      	movs	r3, #1
 8015398:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801539c:	f007 071f 	and.w	r7, r7, #31
 80153a0:	40bb      	lsls	r3, r7
 80153a2:	4213      	tst	r3, r2
 80153a4:	4629      	mov	r1, r5
 80153a6:	4620      	mov	r0, r4
 80153a8:	bf18      	it	ne
 80153aa:	f049 0902 	orrne.w	r9, r9, #2
 80153ae:	f7ff fe21 	bl	8014ff4 <rshift>
 80153b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80153b6:	1b76      	subs	r6, r6, r5
 80153b8:	2502      	movs	r5, #2
 80153ba:	f1b9 0f00 	cmp.w	r9, #0
 80153be:	d047      	beq.n	8015450 <__gethex+0x38c>
 80153c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80153c4:	2b02      	cmp	r3, #2
 80153c6:	d015      	beq.n	80153f4 <__gethex+0x330>
 80153c8:	2b03      	cmp	r3, #3
 80153ca:	d017      	beq.n	80153fc <__gethex+0x338>
 80153cc:	2b01      	cmp	r3, #1
 80153ce:	d109      	bne.n	80153e4 <__gethex+0x320>
 80153d0:	f019 0f02 	tst.w	r9, #2
 80153d4:	d006      	beq.n	80153e4 <__gethex+0x320>
 80153d6:	f8da 3000 	ldr.w	r3, [sl]
 80153da:	ea49 0903 	orr.w	r9, r9, r3
 80153de:	f019 0f01 	tst.w	r9, #1
 80153e2:	d10e      	bne.n	8015402 <__gethex+0x33e>
 80153e4:	f045 0510 	orr.w	r5, r5, #16
 80153e8:	e032      	b.n	8015450 <__gethex+0x38c>
 80153ea:	f04f 0901 	mov.w	r9, #1
 80153ee:	e7d1      	b.n	8015394 <__gethex+0x2d0>
 80153f0:	2501      	movs	r5, #1
 80153f2:	e7e2      	b.n	80153ba <__gethex+0x2f6>
 80153f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153f6:	f1c3 0301 	rsb	r3, r3, #1
 80153fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80153fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d0f0      	beq.n	80153e4 <__gethex+0x320>
 8015402:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015406:	f104 0314 	add.w	r3, r4, #20
 801540a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801540e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015412:	f04f 0c00 	mov.w	ip, #0
 8015416:	4618      	mov	r0, r3
 8015418:	f853 2b04 	ldr.w	r2, [r3], #4
 801541c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015420:	d01b      	beq.n	801545a <__gethex+0x396>
 8015422:	3201      	adds	r2, #1
 8015424:	6002      	str	r2, [r0, #0]
 8015426:	2d02      	cmp	r5, #2
 8015428:	f104 0314 	add.w	r3, r4, #20
 801542c:	d13c      	bne.n	80154a8 <__gethex+0x3e4>
 801542e:	f8d8 2000 	ldr.w	r2, [r8]
 8015432:	3a01      	subs	r2, #1
 8015434:	42b2      	cmp	r2, r6
 8015436:	d109      	bne.n	801544c <__gethex+0x388>
 8015438:	1171      	asrs	r1, r6, #5
 801543a:	2201      	movs	r2, #1
 801543c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015440:	f006 061f 	and.w	r6, r6, #31
 8015444:	fa02 f606 	lsl.w	r6, r2, r6
 8015448:	421e      	tst	r6, r3
 801544a:	d13a      	bne.n	80154c2 <__gethex+0x3fe>
 801544c:	f045 0520 	orr.w	r5, r5, #32
 8015450:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015452:	601c      	str	r4, [r3, #0]
 8015454:	9b02      	ldr	r3, [sp, #8]
 8015456:	601f      	str	r7, [r3, #0]
 8015458:	e6b0      	b.n	80151bc <__gethex+0xf8>
 801545a:	4299      	cmp	r1, r3
 801545c:	f843 cc04 	str.w	ip, [r3, #-4]
 8015460:	d8d9      	bhi.n	8015416 <__gethex+0x352>
 8015462:	68a3      	ldr	r3, [r4, #8]
 8015464:	459b      	cmp	fp, r3
 8015466:	db17      	blt.n	8015498 <__gethex+0x3d4>
 8015468:	6861      	ldr	r1, [r4, #4]
 801546a:	9801      	ldr	r0, [sp, #4]
 801546c:	3101      	adds	r1, #1
 801546e:	f7fd fc93 	bl	8012d98 <_Balloc>
 8015472:	4681      	mov	r9, r0
 8015474:	b918      	cbnz	r0, 801547e <__gethex+0x3ba>
 8015476:	4b1a      	ldr	r3, [pc, #104]	@ (80154e0 <__gethex+0x41c>)
 8015478:	4602      	mov	r2, r0
 801547a:	2184      	movs	r1, #132	@ 0x84
 801547c:	e6c5      	b.n	801520a <__gethex+0x146>
 801547e:	6922      	ldr	r2, [r4, #16]
 8015480:	3202      	adds	r2, #2
 8015482:	f104 010c 	add.w	r1, r4, #12
 8015486:	0092      	lsls	r2, r2, #2
 8015488:	300c      	adds	r0, #12
 801548a:	f7fc fd22 	bl	8011ed2 <memcpy>
 801548e:	4621      	mov	r1, r4
 8015490:	9801      	ldr	r0, [sp, #4]
 8015492:	f7fd fcc1 	bl	8012e18 <_Bfree>
 8015496:	464c      	mov	r4, r9
 8015498:	6923      	ldr	r3, [r4, #16]
 801549a:	1c5a      	adds	r2, r3, #1
 801549c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80154a0:	6122      	str	r2, [r4, #16]
 80154a2:	2201      	movs	r2, #1
 80154a4:	615a      	str	r2, [r3, #20]
 80154a6:	e7be      	b.n	8015426 <__gethex+0x362>
 80154a8:	6922      	ldr	r2, [r4, #16]
 80154aa:	455a      	cmp	r2, fp
 80154ac:	dd0b      	ble.n	80154c6 <__gethex+0x402>
 80154ae:	2101      	movs	r1, #1
 80154b0:	4620      	mov	r0, r4
 80154b2:	f7ff fd9f 	bl	8014ff4 <rshift>
 80154b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80154ba:	3701      	adds	r7, #1
 80154bc:	42bb      	cmp	r3, r7
 80154be:	f6ff aee0 	blt.w	8015282 <__gethex+0x1be>
 80154c2:	2501      	movs	r5, #1
 80154c4:	e7c2      	b.n	801544c <__gethex+0x388>
 80154c6:	f016 061f 	ands.w	r6, r6, #31
 80154ca:	d0fa      	beq.n	80154c2 <__gethex+0x3fe>
 80154cc:	4453      	add	r3, sl
 80154ce:	f1c6 0620 	rsb	r6, r6, #32
 80154d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80154d6:	f7fd fd51 	bl	8012f7c <__hi0bits>
 80154da:	42b0      	cmp	r0, r6
 80154dc:	dbe7      	blt.n	80154ae <__gethex+0x3ea>
 80154de:	e7f0      	b.n	80154c2 <__gethex+0x3fe>
 80154e0:	080170db 	.word	0x080170db

080154e4 <L_shift>:
 80154e4:	f1c2 0208 	rsb	r2, r2, #8
 80154e8:	0092      	lsls	r2, r2, #2
 80154ea:	b570      	push	{r4, r5, r6, lr}
 80154ec:	f1c2 0620 	rsb	r6, r2, #32
 80154f0:	6843      	ldr	r3, [r0, #4]
 80154f2:	6804      	ldr	r4, [r0, #0]
 80154f4:	fa03 f506 	lsl.w	r5, r3, r6
 80154f8:	432c      	orrs	r4, r5
 80154fa:	40d3      	lsrs	r3, r2
 80154fc:	6004      	str	r4, [r0, #0]
 80154fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8015502:	4288      	cmp	r0, r1
 8015504:	d3f4      	bcc.n	80154f0 <L_shift+0xc>
 8015506:	bd70      	pop	{r4, r5, r6, pc}

08015508 <__match>:
 8015508:	b530      	push	{r4, r5, lr}
 801550a:	6803      	ldr	r3, [r0, #0]
 801550c:	3301      	adds	r3, #1
 801550e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015512:	b914      	cbnz	r4, 801551a <__match+0x12>
 8015514:	6003      	str	r3, [r0, #0]
 8015516:	2001      	movs	r0, #1
 8015518:	bd30      	pop	{r4, r5, pc}
 801551a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801551e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8015522:	2d19      	cmp	r5, #25
 8015524:	bf98      	it	ls
 8015526:	3220      	addls	r2, #32
 8015528:	42a2      	cmp	r2, r4
 801552a:	d0f0      	beq.n	801550e <__match+0x6>
 801552c:	2000      	movs	r0, #0
 801552e:	e7f3      	b.n	8015518 <__match+0x10>

08015530 <__hexnan>:
 8015530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015534:	680b      	ldr	r3, [r1, #0]
 8015536:	6801      	ldr	r1, [r0, #0]
 8015538:	115e      	asrs	r6, r3, #5
 801553a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801553e:	f013 031f 	ands.w	r3, r3, #31
 8015542:	b087      	sub	sp, #28
 8015544:	bf18      	it	ne
 8015546:	3604      	addne	r6, #4
 8015548:	2500      	movs	r5, #0
 801554a:	1f37      	subs	r7, r6, #4
 801554c:	4682      	mov	sl, r0
 801554e:	4690      	mov	r8, r2
 8015550:	9301      	str	r3, [sp, #4]
 8015552:	f846 5c04 	str.w	r5, [r6, #-4]
 8015556:	46b9      	mov	r9, r7
 8015558:	463c      	mov	r4, r7
 801555a:	9502      	str	r5, [sp, #8]
 801555c:	46ab      	mov	fp, r5
 801555e:	784a      	ldrb	r2, [r1, #1]
 8015560:	1c4b      	adds	r3, r1, #1
 8015562:	9303      	str	r3, [sp, #12]
 8015564:	b342      	cbz	r2, 80155b8 <__hexnan+0x88>
 8015566:	4610      	mov	r0, r2
 8015568:	9105      	str	r1, [sp, #20]
 801556a:	9204      	str	r2, [sp, #16]
 801556c:	f7ff fd94 	bl	8015098 <__hexdig_fun>
 8015570:	2800      	cmp	r0, #0
 8015572:	d151      	bne.n	8015618 <__hexnan+0xe8>
 8015574:	9a04      	ldr	r2, [sp, #16]
 8015576:	9905      	ldr	r1, [sp, #20]
 8015578:	2a20      	cmp	r2, #32
 801557a:	d818      	bhi.n	80155ae <__hexnan+0x7e>
 801557c:	9b02      	ldr	r3, [sp, #8]
 801557e:	459b      	cmp	fp, r3
 8015580:	dd13      	ble.n	80155aa <__hexnan+0x7a>
 8015582:	454c      	cmp	r4, r9
 8015584:	d206      	bcs.n	8015594 <__hexnan+0x64>
 8015586:	2d07      	cmp	r5, #7
 8015588:	dc04      	bgt.n	8015594 <__hexnan+0x64>
 801558a:	462a      	mov	r2, r5
 801558c:	4649      	mov	r1, r9
 801558e:	4620      	mov	r0, r4
 8015590:	f7ff ffa8 	bl	80154e4 <L_shift>
 8015594:	4544      	cmp	r4, r8
 8015596:	d952      	bls.n	801563e <__hexnan+0x10e>
 8015598:	2300      	movs	r3, #0
 801559a:	f1a4 0904 	sub.w	r9, r4, #4
 801559e:	f844 3c04 	str.w	r3, [r4, #-4]
 80155a2:	f8cd b008 	str.w	fp, [sp, #8]
 80155a6:	464c      	mov	r4, r9
 80155a8:	461d      	mov	r5, r3
 80155aa:	9903      	ldr	r1, [sp, #12]
 80155ac:	e7d7      	b.n	801555e <__hexnan+0x2e>
 80155ae:	2a29      	cmp	r2, #41	@ 0x29
 80155b0:	d157      	bne.n	8015662 <__hexnan+0x132>
 80155b2:	3102      	adds	r1, #2
 80155b4:	f8ca 1000 	str.w	r1, [sl]
 80155b8:	f1bb 0f00 	cmp.w	fp, #0
 80155bc:	d051      	beq.n	8015662 <__hexnan+0x132>
 80155be:	454c      	cmp	r4, r9
 80155c0:	d206      	bcs.n	80155d0 <__hexnan+0xa0>
 80155c2:	2d07      	cmp	r5, #7
 80155c4:	dc04      	bgt.n	80155d0 <__hexnan+0xa0>
 80155c6:	462a      	mov	r2, r5
 80155c8:	4649      	mov	r1, r9
 80155ca:	4620      	mov	r0, r4
 80155cc:	f7ff ff8a 	bl	80154e4 <L_shift>
 80155d0:	4544      	cmp	r4, r8
 80155d2:	d936      	bls.n	8015642 <__hexnan+0x112>
 80155d4:	f1a8 0204 	sub.w	r2, r8, #4
 80155d8:	4623      	mov	r3, r4
 80155da:	f853 1b04 	ldr.w	r1, [r3], #4
 80155de:	f842 1f04 	str.w	r1, [r2, #4]!
 80155e2:	429f      	cmp	r7, r3
 80155e4:	d2f9      	bcs.n	80155da <__hexnan+0xaa>
 80155e6:	1b3b      	subs	r3, r7, r4
 80155e8:	f023 0303 	bic.w	r3, r3, #3
 80155ec:	3304      	adds	r3, #4
 80155ee:	3401      	adds	r4, #1
 80155f0:	3e03      	subs	r6, #3
 80155f2:	42b4      	cmp	r4, r6
 80155f4:	bf88      	it	hi
 80155f6:	2304      	movhi	r3, #4
 80155f8:	4443      	add	r3, r8
 80155fa:	2200      	movs	r2, #0
 80155fc:	f843 2b04 	str.w	r2, [r3], #4
 8015600:	429f      	cmp	r7, r3
 8015602:	d2fb      	bcs.n	80155fc <__hexnan+0xcc>
 8015604:	683b      	ldr	r3, [r7, #0]
 8015606:	b91b      	cbnz	r3, 8015610 <__hexnan+0xe0>
 8015608:	4547      	cmp	r7, r8
 801560a:	d128      	bne.n	801565e <__hexnan+0x12e>
 801560c:	2301      	movs	r3, #1
 801560e:	603b      	str	r3, [r7, #0]
 8015610:	2005      	movs	r0, #5
 8015612:	b007      	add	sp, #28
 8015614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015618:	3501      	adds	r5, #1
 801561a:	2d08      	cmp	r5, #8
 801561c:	f10b 0b01 	add.w	fp, fp, #1
 8015620:	dd06      	ble.n	8015630 <__hexnan+0x100>
 8015622:	4544      	cmp	r4, r8
 8015624:	d9c1      	bls.n	80155aa <__hexnan+0x7a>
 8015626:	2300      	movs	r3, #0
 8015628:	f844 3c04 	str.w	r3, [r4, #-4]
 801562c:	2501      	movs	r5, #1
 801562e:	3c04      	subs	r4, #4
 8015630:	6822      	ldr	r2, [r4, #0]
 8015632:	f000 000f 	and.w	r0, r0, #15
 8015636:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801563a:	6020      	str	r0, [r4, #0]
 801563c:	e7b5      	b.n	80155aa <__hexnan+0x7a>
 801563e:	2508      	movs	r5, #8
 8015640:	e7b3      	b.n	80155aa <__hexnan+0x7a>
 8015642:	9b01      	ldr	r3, [sp, #4]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d0dd      	beq.n	8015604 <__hexnan+0xd4>
 8015648:	f1c3 0320 	rsb	r3, r3, #32
 801564c:	f04f 32ff 	mov.w	r2, #4294967295
 8015650:	40da      	lsrs	r2, r3
 8015652:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015656:	4013      	ands	r3, r2
 8015658:	f846 3c04 	str.w	r3, [r6, #-4]
 801565c:	e7d2      	b.n	8015604 <__hexnan+0xd4>
 801565e:	3f04      	subs	r7, #4
 8015660:	e7d0      	b.n	8015604 <__hexnan+0xd4>
 8015662:	2004      	movs	r0, #4
 8015664:	e7d5      	b.n	8015612 <__hexnan+0xe2>

08015666 <__ascii_mbtowc>:
 8015666:	b082      	sub	sp, #8
 8015668:	b901      	cbnz	r1, 801566c <__ascii_mbtowc+0x6>
 801566a:	a901      	add	r1, sp, #4
 801566c:	b142      	cbz	r2, 8015680 <__ascii_mbtowc+0x1a>
 801566e:	b14b      	cbz	r3, 8015684 <__ascii_mbtowc+0x1e>
 8015670:	7813      	ldrb	r3, [r2, #0]
 8015672:	600b      	str	r3, [r1, #0]
 8015674:	7812      	ldrb	r2, [r2, #0]
 8015676:	1e10      	subs	r0, r2, #0
 8015678:	bf18      	it	ne
 801567a:	2001      	movne	r0, #1
 801567c:	b002      	add	sp, #8
 801567e:	4770      	bx	lr
 8015680:	4610      	mov	r0, r2
 8015682:	e7fb      	b.n	801567c <__ascii_mbtowc+0x16>
 8015684:	f06f 0001 	mvn.w	r0, #1
 8015688:	e7f8      	b.n	801567c <__ascii_mbtowc+0x16>

0801568a <_realloc_r>:
 801568a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801568e:	4680      	mov	r8, r0
 8015690:	4615      	mov	r5, r2
 8015692:	460c      	mov	r4, r1
 8015694:	b921      	cbnz	r1, 80156a0 <_realloc_r+0x16>
 8015696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801569a:	4611      	mov	r1, r2
 801569c:	f7fd baf0 	b.w	8012c80 <_malloc_r>
 80156a0:	b92a      	cbnz	r2, 80156ae <_realloc_r+0x24>
 80156a2:	f7fd fa79 	bl	8012b98 <_free_r>
 80156a6:	2400      	movs	r4, #0
 80156a8:	4620      	mov	r0, r4
 80156aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156ae:	f000 f8b2 	bl	8015816 <_malloc_usable_size_r>
 80156b2:	4285      	cmp	r5, r0
 80156b4:	4606      	mov	r6, r0
 80156b6:	d802      	bhi.n	80156be <_realloc_r+0x34>
 80156b8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80156bc:	d8f4      	bhi.n	80156a8 <_realloc_r+0x1e>
 80156be:	4629      	mov	r1, r5
 80156c0:	4640      	mov	r0, r8
 80156c2:	f7fd fadd 	bl	8012c80 <_malloc_r>
 80156c6:	4607      	mov	r7, r0
 80156c8:	2800      	cmp	r0, #0
 80156ca:	d0ec      	beq.n	80156a6 <_realloc_r+0x1c>
 80156cc:	42b5      	cmp	r5, r6
 80156ce:	462a      	mov	r2, r5
 80156d0:	4621      	mov	r1, r4
 80156d2:	bf28      	it	cs
 80156d4:	4632      	movcs	r2, r6
 80156d6:	f7fc fbfc 	bl	8011ed2 <memcpy>
 80156da:	4621      	mov	r1, r4
 80156dc:	4640      	mov	r0, r8
 80156de:	f7fd fa5b 	bl	8012b98 <_free_r>
 80156e2:	463c      	mov	r4, r7
 80156e4:	e7e0      	b.n	80156a8 <_realloc_r+0x1e>
	...

080156e8 <_strtoul_l.constprop.0>:
 80156e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156ec:	4e34      	ldr	r6, [pc, #208]	@ (80157c0 <_strtoul_l.constprop.0+0xd8>)
 80156ee:	4686      	mov	lr, r0
 80156f0:	460d      	mov	r5, r1
 80156f2:	4628      	mov	r0, r5
 80156f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80156f8:	5d37      	ldrb	r7, [r6, r4]
 80156fa:	f017 0708 	ands.w	r7, r7, #8
 80156fe:	d1f8      	bne.n	80156f2 <_strtoul_l.constprop.0+0xa>
 8015700:	2c2d      	cmp	r4, #45	@ 0x2d
 8015702:	d12f      	bne.n	8015764 <_strtoul_l.constprop.0+0x7c>
 8015704:	782c      	ldrb	r4, [r5, #0]
 8015706:	2701      	movs	r7, #1
 8015708:	1c85      	adds	r5, r0, #2
 801570a:	f033 0010 	bics.w	r0, r3, #16
 801570e:	d109      	bne.n	8015724 <_strtoul_l.constprop.0+0x3c>
 8015710:	2c30      	cmp	r4, #48	@ 0x30
 8015712:	d12c      	bne.n	801576e <_strtoul_l.constprop.0+0x86>
 8015714:	7828      	ldrb	r0, [r5, #0]
 8015716:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801571a:	2858      	cmp	r0, #88	@ 0x58
 801571c:	d127      	bne.n	801576e <_strtoul_l.constprop.0+0x86>
 801571e:	786c      	ldrb	r4, [r5, #1]
 8015720:	2310      	movs	r3, #16
 8015722:	3502      	adds	r5, #2
 8015724:	f04f 38ff 	mov.w	r8, #4294967295
 8015728:	2600      	movs	r6, #0
 801572a:	fbb8 f8f3 	udiv	r8, r8, r3
 801572e:	fb03 f908 	mul.w	r9, r3, r8
 8015732:	ea6f 0909 	mvn.w	r9, r9
 8015736:	4630      	mov	r0, r6
 8015738:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801573c:	f1bc 0f09 	cmp.w	ip, #9
 8015740:	d81c      	bhi.n	801577c <_strtoul_l.constprop.0+0x94>
 8015742:	4664      	mov	r4, ip
 8015744:	42a3      	cmp	r3, r4
 8015746:	dd2a      	ble.n	801579e <_strtoul_l.constprop.0+0xb6>
 8015748:	f1b6 3fff 	cmp.w	r6, #4294967295
 801574c:	d007      	beq.n	801575e <_strtoul_l.constprop.0+0x76>
 801574e:	4580      	cmp	r8, r0
 8015750:	d322      	bcc.n	8015798 <_strtoul_l.constprop.0+0xb0>
 8015752:	d101      	bne.n	8015758 <_strtoul_l.constprop.0+0x70>
 8015754:	45a1      	cmp	r9, r4
 8015756:	db1f      	blt.n	8015798 <_strtoul_l.constprop.0+0xb0>
 8015758:	fb00 4003 	mla	r0, r0, r3, r4
 801575c:	2601      	movs	r6, #1
 801575e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015762:	e7e9      	b.n	8015738 <_strtoul_l.constprop.0+0x50>
 8015764:	2c2b      	cmp	r4, #43	@ 0x2b
 8015766:	bf04      	itt	eq
 8015768:	782c      	ldrbeq	r4, [r5, #0]
 801576a:	1c85      	addeq	r5, r0, #2
 801576c:	e7cd      	b.n	801570a <_strtoul_l.constprop.0+0x22>
 801576e:	2b00      	cmp	r3, #0
 8015770:	d1d8      	bne.n	8015724 <_strtoul_l.constprop.0+0x3c>
 8015772:	2c30      	cmp	r4, #48	@ 0x30
 8015774:	bf0c      	ite	eq
 8015776:	2308      	moveq	r3, #8
 8015778:	230a      	movne	r3, #10
 801577a:	e7d3      	b.n	8015724 <_strtoul_l.constprop.0+0x3c>
 801577c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8015780:	f1bc 0f19 	cmp.w	ip, #25
 8015784:	d801      	bhi.n	801578a <_strtoul_l.constprop.0+0xa2>
 8015786:	3c37      	subs	r4, #55	@ 0x37
 8015788:	e7dc      	b.n	8015744 <_strtoul_l.constprop.0+0x5c>
 801578a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801578e:	f1bc 0f19 	cmp.w	ip, #25
 8015792:	d804      	bhi.n	801579e <_strtoul_l.constprop.0+0xb6>
 8015794:	3c57      	subs	r4, #87	@ 0x57
 8015796:	e7d5      	b.n	8015744 <_strtoul_l.constprop.0+0x5c>
 8015798:	f04f 36ff 	mov.w	r6, #4294967295
 801579c:	e7df      	b.n	801575e <_strtoul_l.constprop.0+0x76>
 801579e:	1c73      	adds	r3, r6, #1
 80157a0:	d106      	bne.n	80157b0 <_strtoul_l.constprop.0+0xc8>
 80157a2:	2322      	movs	r3, #34	@ 0x22
 80157a4:	f8ce 3000 	str.w	r3, [lr]
 80157a8:	4630      	mov	r0, r6
 80157aa:	b932      	cbnz	r2, 80157ba <_strtoul_l.constprop.0+0xd2>
 80157ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157b0:	b107      	cbz	r7, 80157b4 <_strtoul_l.constprop.0+0xcc>
 80157b2:	4240      	negs	r0, r0
 80157b4:	2a00      	cmp	r2, #0
 80157b6:	d0f9      	beq.n	80157ac <_strtoul_l.constprop.0+0xc4>
 80157b8:	b106      	cbz	r6, 80157bc <_strtoul_l.constprop.0+0xd4>
 80157ba:	1e69      	subs	r1, r5, #1
 80157bc:	6011      	str	r1, [r2, #0]
 80157be:	e7f5      	b.n	80157ac <_strtoul_l.constprop.0+0xc4>
 80157c0:	080172a1 	.word	0x080172a1

080157c4 <_strtoul_r>:
 80157c4:	f7ff bf90 	b.w	80156e8 <_strtoul_l.constprop.0>

080157c8 <__ascii_wctomb>:
 80157c8:	4603      	mov	r3, r0
 80157ca:	4608      	mov	r0, r1
 80157cc:	b141      	cbz	r1, 80157e0 <__ascii_wctomb+0x18>
 80157ce:	2aff      	cmp	r2, #255	@ 0xff
 80157d0:	d904      	bls.n	80157dc <__ascii_wctomb+0x14>
 80157d2:	228a      	movs	r2, #138	@ 0x8a
 80157d4:	601a      	str	r2, [r3, #0]
 80157d6:	f04f 30ff 	mov.w	r0, #4294967295
 80157da:	4770      	bx	lr
 80157dc:	700a      	strb	r2, [r1, #0]
 80157de:	2001      	movs	r0, #1
 80157e0:	4770      	bx	lr
	...

080157e4 <fiprintf>:
 80157e4:	b40e      	push	{r1, r2, r3}
 80157e6:	b503      	push	{r0, r1, lr}
 80157e8:	4601      	mov	r1, r0
 80157ea:	ab03      	add	r3, sp, #12
 80157ec:	4805      	ldr	r0, [pc, #20]	@ (8015804 <fiprintf+0x20>)
 80157ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80157f2:	6800      	ldr	r0, [r0, #0]
 80157f4:	9301      	str	r3, [sp, #4]
 80157f6:	f000 f83f 	bl	8015878 <_vfiprintf_r>
 80157fa:	b002      	add	sp, #8
 80157fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8015800:	b003      	add	sp, #12
 8015802:	4770      	bx	lr
 8015804:	200001e4 	.word	0x200001e4

08015808 <abort>:
 8015808:	b508      	push	{r3, lr}
 801580a:	2006      	movs	r0, #6
 801580c:	f000 fa08 	bl	8015c20 <raise>
 8015810:	2001      	movs	r0, #1
 8015812:	f7ee fe83 	bl	800451c <_exit>

08015816 <_malloc_usable_size_r>:
 8015816:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801581a:	1f18      	subs	r0, r3, #4
 801581c:	2b00      	cmp	r3, #0
 801581e:	bfbc      	itt	lt
 8015820:	580b      	ldrlt	r3, [r1, r0]
 8015822:	18c0      	addlt	r0, r0, r3
 8015824:	4770      	bx	lr

08015826 <__sfputc_r>:
 8015826:	6893      	ldr	r3, [r2, #8]
 8015828:	3b01      	subs	r3, #1
 801582a:	2b00      	cmp	r3, #0
 801582c:	b410      	push	{r4}
 801582e:	6093      	str	r3, [r2, #8]
 8015830:	da08      	bge.n	8015844 <__sfputc_r+0x1e>
 8015832:	6994      	ldr	r4, [r2, #24]
 8015834:	42a3      	cmp	r3, r4
 8015836:	db01      	blt.n	801583c <__sfputc_r+0x16>
 8015838:	290a      	cmp	r1, #10
 801583a:	d103      	bne.n	8015844 <__sfputc_r+0x1e>
 801583c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015840:	f000 b932 	b.w	8015aa8 <__swbuf_r>
 8015844:	6813      	ldr	r3, [r2, #0]
 8015846:	1c58      	adds	r0, r3, #1
 8015848:	6010      	str	r0, [r2, #0]
 801584a:	7019      	strb	r1, [r3, #0]
 801584c:	4608      	mov	r0, r1
 801584e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015852:	4770      	bx	lr

08015854 <__sfputs_r>:
 8015854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015856:	4606      	mov	r6, r0
 8015858:	460f      	mov	r7, r1
 801585a:	4614      	mov	r4, r2
 801585c:	18d5      	adds	r5, r2, r3
 801585e:	42ac      	cmp	r4, r5
 8015860:	d101      	bne.n	8015866 <__sfputs_r+0x12>
 8015862:	2000      	movs	r0, #0
 8015864:	e007      	b.n	8015876 <__sfputs_r+0x22>
 8015866:	f814 1b01 	ldrb.w	r1, [r4], #1
 801586a:	463a      	mov	r2, r7
 801586c:	4630      	mov	r0, r6
 801586e:	f7ff ffda 	bl	8015826 <__sfputc_r>
 8015872:	1c43      	adds	r3, r0, #1
 8015874:	d1f3      	bne.n	801585e <__sfputs_r+0xa>
 8015876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015878 <_vfiprintf_r>:
 8015878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801587c:	460d      	mov	r5, r1
 801587e:	b09d      	sub	sp, #116	@ 0x74
 8015880:	4614      	mov	r4, r2
 8015882:	4698      	mov	r8, r3
 8015884:	4606      	mov	r6, r0
 8015886:	b118      	cbz	r0, 8015890 <_vfiprintf_r+0x18>
 8015888:	6a03      	ldr	r3, [r0, #32]
 801588a:	b90b      	cbnz	r3, 8015890 <_vfiprintf_r+0x18>
 801588c:	f7fc f9ca 	bl	8011c24 <__sinit>
 8015890:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015892:	07d9      	lsls	r1, r3, #31
 8015894:	d405      	bmi.n	80158a2 <_vfiprintf_r+0x2a>
 8015896:	89ab      	ldrh	r3, [r5, #12]
 8015898:	059a      	lsls	r2, r3, #22
 801589a:	d402      	bmi.n	80158a2 <_vfiprintf_r+0x2a>
 801589c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801589e:	f7fc fb16 	bl	8011ece <__retarget_lock_acquire_recursive>
 80158a2:	89ab      	ldrh	r3, [r5, #12]
 80158a4:	071b      	lsls	r3, r3, #28
 80158a6:	d501      	bpl.n	80158ac <_vfiprintf_r+0x34>
 80158a8:	692b      	ldr	r3, [r5, #16]
 80158aa:	b99b      	cbnz	r3, 80158d4 <_vfiprintf_r+0x5c>
 80158ac:	4629      	mov	r1, r5
 80158ae:	4630      	mov	r0, r6
 80158b0:	f000 f938 	bl	8015b24 <__swsetup_r>
 80158b4:	b170      	cbz	r0, 80158d4 <_vfiprintf_r+0x5c>
 80158b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80158b8:	07dc      	lsls	r4, r3, #31
 80158ba:	d504      	bpl.n	80158c6 <_vfiprintf_r+0x4e>
 80158bc:	f04f 30ff 	mov.w	r0, #4294967295
 80158c0:	b01d      	add	sp, #116	@ 0x74
 80158c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158c6:	89ab      	ldrh	r3, [r5, #12]
 80158c8:	0598      	lsls	r0, r3, #22
 80158ca:	d4f7      	bmi.n	80158bc <_vfiprintf_r+0x44>
 80158cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80158ce:	f7fc faff 	bl	8011ed0 <__retarget_lock_release_recursive>
 80158d2:	e7f3      	b.n	80158bc <_vfiprintf_r+0x44>
 80158d4:	2300      	movs	r3, #0
 80158d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80158d8:	2320      	movs	r3, #32
 80158da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80158de:	f8cd 800c 	str.w	r8, [sp, #12]
 80158e2:	2330      	movs	r3, #48	@ 0x30
 80158e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015a94 <_vfiprintf_r+0x21c>
 80158e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80158ec:	f04f 0901 	mov.w	r9, #1
 80158f0:	4623      	mov	r3, r4
 80158f2:	469a      	mov	sl, r3
 80158f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80158f8:	b10a      	cbz	r2, 80158fe <_vfiprintf_r+0x86>
 80158fa:	2a25      	cmp	r2, #37	@ 0x25
 80158fc:	d1f9      	bne.n	80158f2 <_vfiprintf_r+0x7a>
 80158fe:	ebba 0b04 	subs.w	fp, sl, r4
 8015902:	d00b      	beq.n	801591c <_vfiprintf_r+0xa4>
 8015904:	465b      	mov	r3, fp
 8015906:	4622      	mov	r2, r4
 8015908:	4629      	mov	r1, r5
 801590a:	4630      	mov	r0, r6
 801590c:	f7ff ffa2 	bl	8015854 <__sfputs_r>
 8015910:	3001      	adds	r0, #1
 8015912:	f000 80a7 	beq.w	8015a64 <_vfiprintf_r+0x1ec>
 8015916:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015918:	445a      	add	r2, fp
 801591a:	9209      	str	r2, [sp, #36]	@ 0x24
 801591c:	f89a 3000 	ldrb.w	r3, [sl]
 8015920:	2b00      	cmp	r3, #0
 8015922:	f000 809f 	beq.w	8015a64 <_vfiprintf_r+0x1ec>
 8015926:	2300      	movs	r3, #0
 8015928:	f04f 32ff 	mov.w	r2, #4294967295
 801592c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015930:	f10a 0a01 	add.w	sl, sl, #1
 8015934:	9304      	str	r3, [sp, #16]
 8015936:	9307      	str	r3, [sp, #28]
 8015938:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801593c:	931a      	str	r3, [sp, #104]	@ 0x68
 801593e:	4654      	mov	r4, sl
 8015940:	2205      	movs	r2, #5
 8015942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015946:	4853      	ldr	r0, [pc, #332]	@ (8015a94 <_vfiprintf_r+0x21c>)
 8015948:	f7ea fc6a 	bl	8000220 <memchr>
 801594c:	9a04      	ldr	r2, [sp, #16]
 801594e:	b9d8      	cbnz	r0, 8015988 <_vfiprintf_r+0x110>
 8015950:	06d1      	lsls	r1, r2, #27
 8015952:	bf44      	itt	mi
 8015954:	2320      	movmi	r3, #32
 8015956:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801595a:	0713      	lsls	r3, r2, #28
 801595c:	bf44      	itt	mi
 801595e:	232b      	movmi	r3, #43	@ 0x2b
 8015960:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015964:	f89a 3000 	ldrb.w	r3, [sl]
 8015968:	2b2a      	cmp	r3, #42	@ 0x2a
 801596a:	d015      	beq.n	8015998 <_vfiprintf_r+0x120>
 801596c:	9a07      	ldr	r2, [sp, #28]
 801596e:	4654      	mov	r4, sl
 8015970:	2000      	movs	r0, #0
 8015972:	f04f 0c0a 	mov.w	ip, #10
 8015976:	4621      	mov	r1, r4
 8015978:	f811 3b01 	ldrb.w	r3, [r1], #1
 801597c:	3b30      	subs	r3, #48	@ 0x30
 801597e:	2b09      	cmp	r3, #9
 8015980:	d94b      	bls.n	8015a1a <_vfiprintf_r+0x1a2>
 8015982:	b1b0      	cbz	r0, 80159b2 <_vfiprintf_r+0x13a>
 8015984:	9207      	str	r2, [sp, #28]
 8015986:	e014      	b.n	80159b2 <_vfiprintf_r+0x13a>
 8015988:	eba0 0308 	sub.w	r3, r0, r8
 801598c:	fa09 f303 	lsl.w	r3, r9, r3
 8015990:	4313      	orrs	r3, r2
 8015992:	9304      	str	r3, [sp, #16]
 8015994:	46a2      	mov	sl, r4
 8015996:	e7d2      	b.n	801593e <_vfiprintf_r+0xc6>
 8015998:	9b03      	ldr	r3, [sp, #12]
 801599a:	1d19      	adds	r1, r3, #4
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	9103      	str	r1, [sp, #12]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	bfbb      	ittet	lt
 80159a4:	425b      	neglt	r3, r3
 80159a6:	f042 0202 	orrlt.w	r2, r2, #2
 80159aa:	9307      	strge	r3, [sp, #28]
 80159ac:	9307      	strlt	r3, [sp, #28]
 80159ae:	bfb8      	it	lt
 80159b0:	9204      	strlt	r2, [sp, #16]
 80159b2:	7823      	ldrb	r3, [r4, #0]
 80159b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80159b6:	d10a      	bne.n	80159ce <_vfiprintf_r+0x156>
 80159b8:	7863      	ldrb	r3, [r4, #1]
 80159ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80159bc:	d132      	bne.n	8015a24 <_vfiprintf_r+0x1ac>
 80159be:	9b03      	ldr	r3, [sp, #12]
 80159c0:	1d1a      	adds	r2, r3, #4
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	9203      	str	r2, [sp, #12]
 80159c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80159ca:	3402      	adds	r4, #2
 80159cc:	9305      	str	r3, [sp, #20]
 80159ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015aa4 <_vfiprintf_r+0x22c>
 80159d2:	7821      	ldrb	r1, [r4, #0]
 80159d4:	2203      	movs	r2, #3
 80159d6:	4650      	mov	r0, sl
 80159d8:	f7ea fc22 	bl	8000220 <memchr>
 80159dc:	b138      	cbz	r0, 80159ee <_vfiprintf_r+0x176>
 80159de:	9b04      	ldr	r3, [sp, #16]
 80159e0:	eba0 000a 	sub.w	r0, r0, sl
 80159e4:	2240      	movs	r2, #64	@ 0x40
 80159e6:	4082      	lsls	r2, r0
 80159e8:	4313      	orrs	r3, r2
 80159ea:	3401      	adds	r4, #1
 80159ec:	9304      	str	r3, [sp, #16]
 80159ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159f2:	4829      	ldr	r0, [pc, #164]	@ (8015a98 <_vfiprintf_r+0x220>)
 80159f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80159f8:	2206      	movs	r2, #6
 80159fa:	f7ea fc11 	bl	8000220 <memchr>
 80159fe:	2800      	cmp	r0, #0
 8015a00:	d03f      	beq.n	8015a82 <_vfiprintf_r+0x20a>
 8015a02:	4b26      	ldr	r3, [pc, #152]	@ (8015a9c <_vfiprintf_r+0x224>)
 8015a04:	bb1b      	cbnz	r3, 8015a4e <_vfiprintf_r+0x1d6>
 8015a06:	9b03      	ldr	r3, [sp, #12]
 8015a08:	3307      	adds	r3, #7
 8015a0a:	f023 0307 	bic.w	r3, r3, #7
 8015a0e:	3308      	adds	r3, #8
 8015a10:	9303      	str	r3, [sp, #12]
 8015a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a14:	443b      	add	r3, r7
 8015a16:	9309      	str	r3, [sp, #36]	@ 0x24
 8015a18:	e76a      	b.n	80158f0 <_vfiprintf_r+0x78>
 8015a1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8015a1e:	460c      	mov	r4, r1
 8015a20:	2001      	movs	r0, #1
 8015a22:	e7a8      	b.n	8015976 <_vfiprintf_r+0xfe>
 8015a24:	2300      	movs	r3, #0
 8015a26:	3401      	adds	r4, #1
 8015a28:	9305      	str	r3, [sp, #20]
 8015a2a:	4619      	mov	r1, r3
 8015a2c:	f04f 0c0a 	mov.w	ip, #10
 8015a30:	4620      	mov	r0, r4
 8015a32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015a36:	3a30      	subs	r2, #48	@ 0x30
 8015a38:	2a09      	cmp	r2, #9
 8015a3a:	d903      	bls.n	8015a44 <_vfiprintf_r+0x1cc>
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d0c6      	beq.n	80159ce <_vfiprintf_r+0x156>
 8015a40:	9105      	str	r1, [sp, #20]
 8015a42:	e7c4      	b.n	80159ce <_vfiprintf_r+0x156>
 8015a44:	fb0c 2101 	mla	r1, ip, r1, r2
 8015a48:	4604      	mov	r4, r0
 8015a4a:	2301      	movs	r3, #1
 8015a4c:	e7f0      	b.n	8015a30 <_vfiprintf_r+0x1b8>
 8015a4e:	ab03      	add	r3, sp, #12
 8015a50:	9300      	str	r3, [sp, #0]
 8015a52:	462a      	mov	r2, r5
 8015a54:	4b12      	ldr	r3, [pc, #72]	@ (8015aa0 <_vfiprintf_r+0x228>)
 8015a56:	a904      	add	r1, sp, #16
 8015a58:	4630      	mov	r0, r6
 8015a5a:	f7fb fa8b 	bl	8010f74 <_printf_float>
 8015a5e:	4607      	mov	r7, r0
 8015a60:	1c78      	adds	r0, r7, #1
 8015a62:	d1d6      	bne.n	8015a12 <_vfiprintf_r+0x19a>
 8015a64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015a66:	07d9      	lsls	r1, r3, #31
 8015a68:	d405      	bmi.n	8015a76 <_vfiprintf_r+0x1fe>
 8015a6a:	89ab      	ldrh	r3, [r5, #12]
 8015a6c:	059a      	lsls	r2, r3, #22
 8015a6e:	d402      	bmi.n	8015a76 <_vfiprintf_r+0x1fe>
 8015a70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015a72:	f7fc fa2d 	bl	8011ed0 <__retarget_lock_release_recursive>
 8015a76:	89ab      	ldrh	r3, [r5, #12]
 8015a78:	065b      	lsls	r3, r3, #25
 8015a7a:	f53f af1f 	bmi.w	80158bc <_vfiprintf_r+0x44>
 8015a7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015a80:	e71e      	b.n	80158c0 <_vfiprintf_r+0x48>
 8015a82:	ab03      	add	r3, sp, #12
 8015a84:	9300      	str	r3, [sp, #0]
 8015a86:	462a      	mov	r2, r5
 8015a88:	4b05      	ldr	r3, [pc, #20]	@ (8015aa0 <_vfiprintf_r+0x228>)
 8015a8a:	a904      	add	r1, sp, #16
 8015a8c:	4630      	mov	r0, r6
 8015a8e:	f7fb fd09 	bl	80114a4 <_printf_i>
 8015a92:	e7e4      	b.n	8015a5e <_vfiprintf_r+0x1e6>
 8015a94:	080173a1 	.word	0x080173a1
 8015a98:	080173ab 	.word	0x080173ab
 8015a9c:	08010f75 	.word	0x08010f75
 8015aa0:	08015855 	.word	0x08015855
 8015aa4:	080173a7 	.word	0x080173a7

08015aa8 <__swbuf_r>:
 8015aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aaa:	460e      	mov	r6, r1
 8015aac:	4614      	mov	r4, r2
 8015aae:	4605      	mov	r5, r0
 8015ab0:	b118      	cbz	r0, 8015aba <__swbuf_r+0x12>
 8015ab2:	6a03      	ldr	r3, [r0, #32]
 8015ab4:	b90b      	cbnz	r3, 8015aba <__swbuf_r+0x12>
 8015ab6:	f7fc f8b5 	bl	8011c24 <__sinit>
 8015aba:	69a3      	ldr	r3, [r4, #24]
 8015abc:	60a3      	str	r3, [r4, #8]
 8015abe:	89a3      	ldrh	r3, [r4, #12]
 8015ac0:	071a      	lsls	r2, r3, #28
 8015ac2:	d501      	bpl.n	8015ac8 <__swbuf_r+0x20>
 8015ac4:	6923      	ldr	r3, [r4, #16]
 8015ac6:	b943      	cbnz	r3, 8015ada <__swbuf_r+0x32>
 8015ac8:	4621      	mov	r1, r4
 8015aca:	4628      	mov	r0, r5
 8015acc:	f000 f82a 	bl	8015b24 <__swsetup_r>
 8015ad0:	b118      	cbz	r0, 8015ada <__swbuf_r+0x32>
 8015ad2:	f04f 37ff 	mov.w	r7, #4294967295
 8015ad6:	4638      	mov	r0, r7
 8015ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ada:	6823      	ldr	r3, [r4, #0]
 8015adc:	6922      	ldr	r2, [r4, #16]
 8015ade:	1a98      	subs	r0, r3, r2
 8015ae0:	6963      	ldr	r3, [r4, #20]
 8015ae2:	b2f6      	uxtb	r6, r6
 8015ae4:	4283      	cmp	r3, r0
 8015ae6:	4637      	mov	r7, r6
 8015ae8:	dc05      	bgt.n	8015af6 <__swbuf_r+0x4e>
 8015aea:	4621      	mov	r1, r4
 8015aec:	4628      	mov	r0, r5
 8015aee:	f7ff f97f 	bl	8014df0 <_fflush_r>
 8015af2:	2800      	cmp	r0, #0
 8015af4:	d1ed      	bne.n	8015ad2 <__swbuf_r+0x2a>
 8015af6:	68a3      	ldr	r3, [r4, #8]
 8015af8:	3b01      	subs	r3, #1
 8015afa:	60a3      	str	r3, [r4, #8]
 8015afc:	6823      	ldr	r3, [r4, #0]
 8015afe:	1c5a      	adds	r2, r3, #1
 8015b00:	6022      	str	r2, [r4, #0]
 8015b02:	701e      	strb	r6, [r3, #0]
 8015b04:	6962      	ldr	r2, [r4, #20]
 8015b06:	1c43      	adds	r3, r0, #1
 8015b08:	429a      	cmp	r2, r3
 8015b0a:	d004      	beq.n	8015b16 <__swbuf_r+0x6e>
 8015b0c:	89a3      	ldrh	r3, [r4, #12]
 8015b0e:	07db      	lsls	r3, r3, #31
 8015b10:	d5e1      	bpl.n	8015ad6 <__swbuf_r+0x2e>
 8015b12:	2e0a      	cmp	r6, #10
 8015b14:	d1df      	bne.n	8015ad6 <__swbuf_r+0x2e>
 8015b16:	4621      	mov	r1, r4
 8015b18:	4628      	mov	r0, r5
 8015b1a:	f7ff f969 	bl	8014df0 <_fflush_r>
 8015b1e:	2800      	cmp	r0, #0
 8015b20:	d0d9      	beq.n	8015ad6 <__swbuf_r+0x2e>
 8015b22:	e7d6      	b.n	8015ad2 <__swbuf_r+0x2a>

08015b24 <__swsetup_r>:
 8015b24:	b538      	push	{r3, r4, r5, lr}
 8015b26:	4b29      	ldr	r3, [pc, #164]	@ (8015bcc <__swsetup_r+0xa8>)
 8015b28:	4605      	mov	r5, r0
 8015b2a:	6818      	ldr	r0, [r3, #0]
 8015b2c:	460c      	mov	r4, r1
 8015b2e:	b118      	cbz	r0, 8015b38 <__swsetup_r+0x14>
 8015b30:	6a03      	ldr	r3, [r0, #32]
 8015b32:	b90b      	cbnz	r3, 8015b38 <__swsetup_r+0x14>
 8015b34:	f7fc f876 	bl	8011c24 <__sinit>
 8015b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b3c:	0719      	lsls	r1, r3, #28
 8015b3e:	d422      	bmi.n	8015b86 <__swsetup_r+0x62>
 8015b40:	06da      	lsls	r2, r3, #27
 8015b42:	d407      	bmi.n	8015b54 <__swsetup_r+0x30>
 8015b44:	2209      	movs	r2, #9
 8015b46:	602a      	str	r2, [r5, #0]
 8015b48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015b4c:	81a3      	strh	r3, [r4, #12]
 8015b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8015b52:	e033      	b.n	8015bbc <__swsetup_r+0x98>
 8015b54:	0758      	lsls	r0, r3, #29
 8015b56:	d512      	bpl.n	8015b7e <__swsetup_r+0x5a>
 8015b58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015b5a:	b141      	cbz	r1, 8015b6e <__swsetup_r+0x4a>
 8015b5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015b60:	4299      	cmp	r1, r3
 8015b62:	d002      	beq.n	8015b6a <__swsetup_r+0x46>
 8015b64:	4628      	mov	r0, r5
 8015b66:	f7fd f817 	bl	8012b98 <_free_r>
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8015b6e:	89a3      	ldrh	r3, [r4, #12]
 8015b70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015b74:	81a3      	strh	r3, [r4, #12]
 8015b76:	2300      	movs	r3, #0
 8015b78:	6063      	str	r3, [r4, #4]
 8015b7a:	6923      	ldr	r3, [r4, #16]
 8015b7c:	6023      	str	r3, [r4, #0]
 8015b7e:	89a3      	ldrh	r3, [r4, #12]
 8015b80:	f043 0308 	orr.w	r3, r3, #8
 8015b84:	81a3      	strh	r3, [r4, #12]
 8015b86:	6923      	ldr	r3, [r4, #16]
 8015b88:	b94b      	cbnz	r3, 8015b9e <__swsetup_r+0x7a>
 8015b8a:	89a3      	ldrh	r3, [r4, #12]
 8015b8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015b94:	d003      	beq.n	8015b9e <__swsetup_r+0x7a>
 8015b96:	4621      	mov	r1, r4
 8015b98:	4628      	mov	r0, r5
 8015b9a:	f000 f883 	bl	8015ca4 <__smakebuf_r>
 8015b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ba2:	f013 0201 	ands.w	r2, r3, #1
 8015ba6:	d00a      	beq.n	8015bbe <__swsetup_r+0x9a>
 8015ba8:	2200      	movs	r2, #0
 8015baa:	60a2      	str	r2, [r4, #8]
 8015bac:	6962      	ldr	r2, [r4, #20]
 8015bae:	4252      	negs	r2, r2
 8015bb0:	61a2      	str	r2, [r4, #24]
 8015bb2:	6922      	ldr	r2, [r4, #16]
 8015bb4:	b942      	cbnz	r2, 8015bc8 <__swsetup_r+0xa4>
 8015bb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015bba:	d1c5      	bne.n	8015b48 <__swsetup_r+0x24>
 8015bbc:	bd38      	pop	{r3, r4, r5, pc}
 8015bbe:	0799      	lsls	r1, r3, #30
 8015bc0:	bf58      	it	pl
 8015bc2:	6962      	ldrpl	r2, [r4, #20]
 8015bc4:	60a2      	str	r2, [r4, #8]
 8015bc6:	e7f4      	b.n	8015bb2 <__swsetup_r+0x8e>
 8015bc8:	2000      	movs	r0, #0
 8015bca:	e7f7      	b.n	8015bbc <__swsetup_r+0x98>
 8015bcc:	200001e4 	.word	0x200001e4

08015bd0 <_raise_r>:
 8015bd0:	291f      	cmp	r1, #31
 8015bd2:	b538      	push	{r3, r4, r5, lr}
 8015bd4:	4605      	mov	r5, r0
 8015bd6:	460c      	mov	r4, r1
 8015bd8:	d904      	bls.n	8015be4 <_raise_r+0x14>
 8015bda:	2316      	movs	r3, #22
 8015bdc:	6003      	str	r3, [r0, #0]
 8015bde:	f04f 30ff 	mov.w	r0, #4294967295
 8015be2:	bd38      	pop	{r3, r4, r5, pc}
 8015be4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015be6:	b112      	cbz	r2, 8015bee <_raise_r+0x1e>
 8015be8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015bec:	b94b      	cbnz	r3, 8015c02 <_raise_r+0x32>
 8015bee:	4628      	mov	r0, r5
 8015bf0:	f000 f830 	bl	8015c54 <_getpid_r>
 8015bf4:	4622      	mov	r2, r4
 8015bf6:	4601      	mov	r1, r0
 8015bf8:	4628      	mov	r0, r5
 8015bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015bfe:	f000 b817 	b.w	8015c30 <_kill_r>
 8015c02:	2b01      	cmp	r3, #1
 8015c04:	d00a      	beq.n	8015c1c <_raise_r+0x4c>
 8015c06:	1c59      	adds	r1, r3, #1
 8015c08:	d103      	bne.n	8015c12 <_raise_r+0x42>
 8015c0a:	2316      	movs	r3, #22
 8015c0c:	6003      	str	r3, [r0, #0]
 8015c0e:	2001      	movs	r0, #1
 8015c10:	e7e7      	b.n	8015be2 <_raise_r+0x12>
 8015c12:	2100      	movs	r1, #0
 8015c14:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015c18:	4620      	mov	r0, r4
 8015c1a:	4798      	blx	r3
 8015c1c:	2000      	movs	r0, #0
 8015c1e:	e7e0      	b.n	8015be2 <_raise_r+0x12>

08015c20 <raise>:
 8015c20:	4b02      	ldr	r3, [pc, #8]	@ (8015c2c <raise+0xc>)
 8015c22:	4601      	mov	r1, r0
 8015c24:	6818      	ldr	r0, [r3, #0]
 8015c26:	f7ff bfd3 	b.w	8015bd0 <_raise_r>
 8015c2a:	bf00      	nop
 8015c2c:	200001e4 	.word	0x200001e4

08015c30 <_kill_r>:
 8015c30:	b538      	push	{r3, r4, r5, lr}
 8015c32:	4d07      	ldr	r5, [pc, #28]	@ (8015c50 <_kill_r+0x20>)
 8015c34:	2300      	movs	r3, #0
 8015c36:	4604      	mov	r4, r0
 8015c38:	4608      	mov	r0, r1
 8015c3a:	4611      	mov	r1, r2
 8015c3c:	602b      	str	r3, [r5, #0]
 8015c3e:	f7ee fc5d 	bl	80044fc <_kill>
 8015c42:	1c43      	adds	r3, r0, #1
 8015c44:	d102      	bne.n	8015c4c <_kill_r+0x1c>
 8015c46:	682b      	ldr	r3, [r5, #0]
 8015c48:	b103      	cbz	r3, 8015c4c <_kill_r+0x1c>
 8015c4a:	6023      	str	r3, [r4, #0]
 8015c4c:	bd38      	pop	{r3, r4, r5, pc}
 8015c4e:	bf00      	nop
 8015c50:	200026c8 	.word	0x200026c8

08015c54 <_getpid_r>:
 8015c54:	f7ee bc4a 	b.w	80044ec <_getpid>

08015c58 <__swhatbuf_r>:
 8015c58:	b570      	push	{r4, r5, r6, lr}
 8015c5a:	460c      	mov	r4, r1
 8015c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c60:	2900      	cmp	r1, #0
 8015c62:	b096      	sub	sp, #88	@ 0x58
 8015c64:	4615      	mov	r5, r2
 8015c66:	461e      	mov	r6, r3
 8015c68:	da0d      	bge.n	8015c86 <__swhatbuf_r+0x2e>
 8015c6a:	89a3      	ldrh	r3, [r4, #12]
 8015c6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015c70:	f04f 0100 	mov.w	r1, #0
 8015c74:	bf14      	ite	ne
 8015c76:	2340      	movne	r3, #64	@ 0x40
 8015c78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015c7c:	2000      	movs	r0, #0
 8015c7e:	6031      	str	r1, [r6, #0]
 8015c80:	602b      	str	r3, [r5, #0]
 8015c82:	b016      	add	sp, #88	@ 0x58
 8015c84:	bd70      	pop	{r4, r5, r6, pc}
 8015c86:	466a      	mov	r2, sp
 8015c88:	f000 f848 	bl	8015d1c <_fstat_r>
 8015c8c:	2800      	cmp	r0, #0
 8015c8e:	dbec      	blt.n	8015c6a <__swhatbuf_r+0x12>
 8015c90:	9901      	ldr	r1, [sp, #4]
 8015c92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015c96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015c9a:	4259      	negs	r1, r3
 8015c9c:	4159      	adcs	r1, r3
 8015c9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015ca2:	e7eb      	b.n	8015c7c <__swhatbuf_r+0x24>

08015ca4 <__smakebuf_r>:
 8015ca4:	898b      	ldrh	r3, [r1, #12]
 8015ca6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ca8:	079d      	lsls	r5, r3, #30
 8015caa:	4606      	mov	r6, r0
 8015cac:	460c      	mov	r4, r1
 8015cae:	d507      	bpl.n	8015cc0 <__smakebuf_r+0x1c>
 8015cb0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015cb4:	6023      	str	r3, [r4, #0]
 8015cb6:	6123      	str	r3, [r4, #16]
 8015cb8:	2301      	movs	r3, #1
 8015cba:	6163      	str	r3, [r4, #20]
 8015cbc:	b003      	add	sp, #12
 8015cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cc0:	ab01      	add	r3, sp, #4
 8015cc2:	466a      	mov	r2, sp
 8015cc4:	f7ff ffc8 	bl	8015c58 <__swhatbuf_r>
 8015cc8:	9f00      	ldr	r7, [sp, #0]
 8015cca:	4605      	mov	r5, r0
 8015ccc:	4639      	mov	r1, r7
 8015cce:	4630      	mov	r0, r6
 8015cd0:	f7fc ffd6 	bl	8012c80 <_malloc_r>
 8015cd4:	b948      	cbnz	r0, 8015cea <__smakebuf_r+0x46>
 8015cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015cda:	059a      	lsls	r2, r3, #22
 8015cdc:	d4ee      	bmi.n	8015cbc <__smakebuf_r+0x18>
 8015cde:	f023 0303 	bic.w	r3, r3, #3
 8015ce2:	f043 0302 	orr.w	r3, r3, #2
 8015ce6:	81a3      	strh	r3, [r4, #12]
 8015ce8:	e7e2      	b.n	8015cb0 <__smakebuf_r+0xc>
 8015cea:	89a3      	ldrh	r3, [r4, #12]
 8015cec:	6020      	str	r0, [r4, #0]
 8015cee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015cf2:	81a3      	strh	r3, [r4, #12]
 8015cf4:	9b01      	ldr	r3, [sp, #4]
 8015cf6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015cfa:	b15b      	cbz	r3, 8015d14 <__smakebuf_r+0x70>
 8015cfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d00:	4630      	mov	r0, r6
 8015d02:	f000 f81d 	bl	8015d40 <_isatty_r>
 8015d06:	b128      	cbz	r0, 8015d14 <__smakebuf_r+0x70>
 8015d08:	89a3      	ldrh	r3, [r4, #12]
 8015d0a:	f023 0303 	bic.w	r3, r3, #3
 8015d0e:	f043 0301 	orr.w	r3, r3, #1
 8015d12:	81a3      	strh	r3, [r4, #12]
 8015d14:	89a3      	ldrh	r3, [r4, #12]
 8015d16:	431d      	orrs	r5, r3
 8015d18:	81a5      	strh	r5, [r4, #12]
 8015d1a:	e7cf      	b.n	8015cbc <__smakebuf_r+0x18>

08015d1c <_fstat_r>:
 8015d1c:	b538      	push	{r3, r4, r5, lr}
 8015d1e:	4d07      	ldr	r5, [pc, #28]	@ (8015d3c <_fstat_r+0x20>)
 8015d20:	2300      	movs	r3, #0
 8015d22:	4604      	mov	r4, r0
 8015d24:	4608      	mov	r0, r1
 8015d26:	4611      	mov	r1, r2
 8015d28:	602b      	str	r3, [r5, #0]
 8015d2a:	f7ee fc47 	bl	80045bc <_fstat>
 8015d2e:	1c43      	adds	r3, r0, #1
 8015d30:	d102      	bne.n	8015d38 <_fstat_r+0x1c>
 8015d32:	682b      	ldr	r3, [r5, #0]
 8015d34:	b103      	cbz	r3, 8015d38 <_fstat_r+0x1c>
 8015d36:	6023      	str	r3, [r4, #0]
 8015d38:	bd38      	pop	{r3, r4, r5, pc}
 8015d3a:	bf00      	nop
 8015d3c:	200026c8 	.word	0x200026c8

08015d40 <_isatty_r>:
 8015d40:	b538      	push	{r3, r4, r5, lr}
 8015d42:	4d06      	ldr	r5, [pc, #24]	@ (8015d5c <_isatty_r+0x1c>)
 8015d44:	2300      	movs	r3, #0
 8015d46:	4604      	mov	r4, r0
 8015d48:	4608      	mov	r0, r1
 8015d4a:	602b      	str	r3, [r5, #0]
 8015d4c:	f7ee fc46 	bl	80045dc <_isatty>
 8015d50:	1c43      	adds	r3, r0, #1
 8015d52:	d102      	bne.n	8015d5a <_isatty_r+0x1a>
 8015d54:	682b      	ldr	r3, [r5, #0]
 8015d56:	b103      	cbz	r3, 8015d5a <_isatty_r+0x1a>
 8015d58:	6023      	str	r3, [r4, #0]
 8015d5a:	bd38      	pop	{r3, r4, r5, pc}
 8015d5c:	200026c8 	.word	0x200026c8

08015d60 <pow>:
 8015d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d62:	ed2d 8b02 	vpush	{d8}
 8015d66:	eeb0 8a40 	vmov.f32	s16, s0
 8015d6a:	eef0 8a60 	vmov.f32	s17, s1
 8015d6e:	ec55 4b11 	vmov	r4, r5, d1
 8015d72:	f000 f891 	bl	8015e98 <__ieee754_pow>
 8015d76:	4622      	mov	r2, r4
 8015d78:	462b      	mov	r3, r5
 8015d7a:	4620      	mov	r0, r4
 8015d7c:	4629      	mov	r1, r5
 8015d7e:	ec57 6b10 	vmov	r6, r7, d0
 8015d82:	f7ea fefb 	bl	8000b7c <__aeabi_dcmpun>
 8015d86:	2800      	cmp	r0, #0
 8015d88:	d13b      	bne.n	8015e02 <pow+0xa2>
 8015d8a:	ec51 0b18 	vmov	r0, r1, d8
 8015d8e:	2200      	movs	r2, #0
 8015d90:	2300      	movs	r3, #0
 8015d92:	f7ea fec1 	bl	8000b18 <__aeabi_dcmpeq>
 8015d96:	b1b8      	cbz	r0, 8015dc8 <pow+0x68>
 8015d98:	2200      	movs	r2, #0
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	4620      	mov	r0, r4
 8015d9e:	4629      	mov	r1, r5
 8015da0:	f7ea feba 	bl	8000b18 <__aeabi_dcmpeq>
 8015da4:	2800      	cmp	r0, #0
 8015da6:	d146      	bne.n	8015e36 <pow+0xd6>
 8015da8:	ec45 4b10 	vmov	d0, r4, r5
 8015dac:	f000 f866 	bl	8015e7c <finite>
 8015db0:	b338      	cbz	r0, 8015e02 <pow+0xa2>
 8015db2:	2200      	movs	r2, #0
 8015db4:	2300      	movs	r3, #0
 8015db6:	4620      	mov	r0, r4
 8015db8:	4629      	mov	r1, r5
 8015dba:	f7ea feb7 	bl	8000b2c <__aeabi_dcmplt>
 8015dbe:	b300      	cbz	r0, 8015e02 <pow+0xa2>
 8015dc0:	f7fc f85a 	bl	8011e78 <__errno>
 8015dc4:	2322      	movs	r3, #34	@ 0x22
 8015dc6:	e01b      	b.n	8015e00 <pow+0xa0>
 8015dc8:	ec47 6b10 	vmov	d0, r6, r7
 8015dcc:	f000 f856 	bl	8015e7c <finite>
 8015dd0:	b9e0      	cbnz	r0, 8015e0c <pow+0xac>
 8015dd2:	eeb0 0a48 	vmov.f32	s0, s16
 8015dd6:	eef0 0a68 	vmov.f32	s1, s17
 8015dda:	f000 f84f 	bl	8015e7c <finite>
 8015dde:	b1a8      	cbz	r0, 8015e0c <pow+0xac>
 8015de0:	ec45 4b10 	vmov	d0, r4, r5
 8015de4:	f000 f84a 	bl	8015e7c <finite>
 8015de8:	b180      	cbz	r0, 8015e0c <pow+0xac>
 8015dea:	4632      	mov	r2, r6
 8015dec:	463b      	mov	r3, r7
 8015dee:	4630      	mov	r0, r6
 8015df0:	4639      	mov	r1, r7
 8015df2:	f7ea fec3 	bl	8000b7c <__aeabi_dcmpun>
 8015df6:	2800      	cmp	r0, #0
 8015df8:	d0e2      	beq.n	8015dc0 <pow+0x60>
 8015dfa:	f7fc f83d 	bl	8011e78 <__errno>
 8015dfe:	2321      	movs	r3, #33	@ 0x21
 8015e00:	6003      	str	r3, [r0, #0]
 8015e02:	ecbd 8b02 	vpop	{d8}
 8015e06:	ec47 6b10 	vmov	d0, r6, r7
 8015e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e0c:	2200      	movs	r2, #0
 8015e0e:	2300      	movs	r3, #0
 8015e10:	4630      	mov	r0, r6
 8015e12:	4639      	mov	r1, r7
 8015e14:	f7ea fe80 	bl	8000b18 <__aeabi_dcmpeq>
 8015e18:	2800      	cmp	r0, #0
 8015e1a:	d0f2      	beq.n	8015e02 <pow+0xa2>
 8015e1c:	eeb0 0a48 	vmov.f32	s0, s16
 8015e20:	eef0 0a68 	vmov.f32	s1, s17
 8015e24:	f000 f82a 	bl	8015e7c <finite>
 8015e28:	2800      	cmp	r0, #0
 8015e2a:	d0ea      	beq.n	8015e02 <pow+0xa2>
 8015e2c:	ec45 4b10 	vmov	d0, r4, r5
 8015e30:	f000 f824 	bl	8015e7c <finite>
 8015e34:	e7c3      	b.n	8015dbe <pow+0x5e>
 8015e36:	4f01      	ldr	r7, [pc, #4]	@ (8015e3c <pow+0xdc>)
 8015e38:	2600      	movs	r6, #0
 8015e3a:	e7e2      	b.n	8015e02 <pow+0xa2>
 8015e3c:	3ff00000 	.word	0x3ff00000

08015e40 <sqrtf>:
 8015e40:	b508      	push	{r3, lr}
 8015e42:	ed2d 8b02 	vpush	{d8}
 8015e46:	eeb0 8a40 	vmov.f32	s16, s0
 8015e4a:	f000 f822 	bl	8015e92 <__ieee754_sqrtf>
 8015e4e:	eeb4 8a48 	vcmp.f32	s16, s16
 8015e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e56:	d60c      	bvs.n	8015e72 <sqrtf+0x32>
 8015e58:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8015e78 <sqrtf+0x38>
 8015e5c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8015e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e64:	d505      	bpl.n	8015e72 <sqrtf+0x32>
 8015e66:	f7fc f807 	bl	8011e78 <__errno>
 8015e6a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8015e6e:	2321      	movs	r3, #33	@ 0x21
 8015e70:	6003      	str	r3, [r0, #0]
 8015e72:	ecbd 8b02 	vpop	{d8}
 8015e76:	bd08      	pop	{r3, pc}
 8015e78:	00000000 	.word	0x00000000

08015e7c <finite>:
 8015e7c:	b082      	sub	sp, #8
 8015e7e:	ed8d 0b00 	vstr	d0, [sp]
 8015e82:	9801      	ldr	r0, [sp, #4]
 8015e84:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8015e88:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8015e8c:	0fc0      	lsrs	r0, r0, #31
 8015e8e:	b002      	add	sp, #8
 8015e90:	4770      	bx	lr

08015e92 <__ieee754_sqrtf>:
 8015e92:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015e96:	4770      	bx	lr

08015e98 <__ieee754_pow>:
 8015e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e9c:	b091      	sub	sp, #68	@ 0x44
 8015e9e:	ed8d 1b00 	vstr	d1, [sp]
 8015ea2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8015ea6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8015eaa:	ea5a 0001 	orrs.w	r0, sl, r1
 8015eae:	ec57 6b10 	vmov	r6, r7, d0
 8015eb2:	d113      	bne.n	8015edc <__ieee754_pow+0x44>
 8015eb4:	19b3      	adds	r3, r6, r6
 8015eb6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8015eba:	4152      	adcs	r2, r2
 8015ebc:	4298      	cmp	r0, r3
 8015ebe:	4b98      	ldr	r3, [pc, #608]	@ (8016120 <__ieee754_pow+0x288>)
 8015ec0:	4193      	sbcs	r3, r2
 8015ec2:	f080 84ea 	bcs.w	801689a <__ieee754_pow+0xa02>
 8015ec6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015eca:	4630      	mov	r0, r6
 8015ecc:	4639      	mov	r1, r7
 8015ece:	f7ea fa05 	bl	80002dc <__adddf3>
 8015ed2:	ec41 0b10 	vmov	d0, r0, r1
 8015ed6:	b011      	add	sp, #68	@ 0x44
 8015ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015edc:	4a91      	ldr	r2, [pc, #580]	@ (8016124 <__ieee754_pow+0x28c>)
 8015ede:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8015ee2:	4590      	cmp	r8, r2
 8015ee4:	463d      	mov	r5, r7
 8015ee6:	4633      	mov	r3, r6
 8015ee8:	d806      	bhi.n	8015ef8 <__ieee754_pow+0x60>
 8015eea:	d101      	bne.n	8015ef0 <__ieee754_pow+0x58>
 8015eec:	2e00      	cmp	r6, #0
 8015eee:	d1ea      	bne.n	8015ec6 <__ieee754_pow+0x2e>
 8015ef0:	4592      	cmp	sl, r2
 8015ef2:	d801      	bhi.n	8015ef8 <__ieee754_pow+0x60>
 8015ef4:	d10e      	bne.n	8015f14 <__ieee754_pow+0x7c>
 8015ef6:	b169      	cbz	r1, 8015f14 <__ieee754_pow+0x7c>
 8015ef8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8015efc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8015f00:	431d      	orrs	r5, r3
 8015f02:	d1e0      	bne.n	8015ec6 <__ieee754_pow+0x2e>
 8015f04:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015f08:	18db      	adds	r3, r3, r3
 8015f0a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8015f0e:	4152      	adcs	r2, r2
 8015f10:	429d      	cmp	r5, r3
 8015f12:	e7d4      	b.n	8015ebe <__ieee754_pow+0x26>
 8015f14:	2d00      	cmp	r5, #0
 8015f16:	46c3      	mov	fp, r8
 8015f18:	da3a      	bge.n	8015f90 <__ieee754_pow+0xf8>
 8015f1a:	4a83      	ldr	r2, [pc, #524]	@ (8016128 <__ieee754_pow+0x290>)
 8015f1c:	4592      	cmp	sl, r2
 8015f1e:	d84d      	bhi.n	8015fbc <__ieee754_pow+0x124>
 8015f20:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8015f24:	4592      	cmp	sl, r2
 8015f26:	f240 84c7 	bls.w	80168b8 <__ieee754_pow+0xa20>
 8015f2a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8015f2e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8015f32:	2a14      	cmp	r2, #20
 8015f34:	dd0f      	ble.n	8015f56 <__ieee754_pow+0xbe>
 8015f36:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8015f3a:	fa21 f402 	lsr.w	r4, r1, r2
 8015f3e:	fa04 f202 	lsl.w	r2, r4, r2
 8015f42:	428a      	cmp	r2, r1
 8015f44:	f040 84b8 	bne.w	80168b8 <__ieee754_pow+0xa20>
 8015f48:	f004 0401 	and.w	r4, r4, #1
 8015f4c:	f1c4 0402 	rsb	r4, r4, #2
 8015f50:	2900      	cmp	r1, #0
 8015f52:	d158      	bne.n	8016006 <__ieee754_pow+0x16e>
 8015f54:	e00e      	b.n	8015f74 <__ieee754_pow+0xdc>
 8015f56:	2900      	cmp	r1, #0
 8015f58:	d154      	bne.n	8016004 <__ieee754_pow+0x16c>
 8015f5a:	f1c2 0214 	rsb	r2, r2, #20
 8015f5e:	fa4a f402 	asr.w	r4, sl, r2
 8015f62:	fa04 f202 	lsl.w	r2, r4, r2
 8015f66:	4552      	cmp	r2, sl
 8015f68:	f040 84a3 	bne.w	80168b2 <__ieee754_pow+0xa1a>
 8015f6c:	f004 0401 	and.w	r4, r4, #1
 8015f70:	f1c4 0402 	rsb	r4, r4, #2
 8015f74:	4a6d      	ldr	r2, [pc, #436]	@ (801612c <__ieee754_pow+0x294>)
 8015f76:	4592      	cmp	sl, r2
 8015f78:	d12e      	bne.n	8015fd8 <__ieee754_pow+0x140>
 8015f7a:	f1b9 0f00 	cmp.w	r9, #0
 8015f7e:	f280 8494 	bge.w	80168aa <__ieee754_pow+0xa12>
 8015f82:	496a      	ldr	r1, [pc, #424]	@ (801612c <__ieee754_pow+0x294>)
 8015f84:	4632      	mov	r2, r6
 8015f86:	463b      	mov	r3, r7
 8015f88:	2000      	movs	r0, #0
 8015f8a:	f7ea fc87 	bl	800089c <__aeabi_ddiv>
 8015f8e:	e7a0      	b.n	8015ed2 <__ieee754_pow+0x3a>
 8015f90:	2400      	movs	r4, #0
 8015f92:	bbc1      	cbnz	r1, 8016006 <__ieee754_pow+0x16e>
 8015f94:	4a63      	ldr	r2, [pc, #396]	@ (8016124 <__ieee754_pow+0x28c>)
 8015f96:	4592      	cmp	sl, r2
 8015f98:	d1ec      	bne.n	8015f74 <__ieee754_pow+0xdc>
 8015f9a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8015f9e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8015fa2:	431a      	orrs	r2, r3
 8015fa4:	f000 8479 	beq.w	801689a <__ieee754_pow+0xa02>
 8015fa8:	4b61      	ldr	r3, [pc, #388]	@ (8016130 <__ieee754_pow+0x298>)
 8015faa:	4598      	cmp	r8, r3
 8015fac:	d908      	bls.n	8015fc0 <__ieee754_pow+0x128>
 8015fae:	f1b9 0f00 	cmp.w	r9, #0
 8015fb2:	f2c0 8476 	blt.w	80168a2 <__ieee754_pow+0xa0a>
 8015fb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015fba:	e78a      	b.n	8015ed2 <__ieee754_pow+0x3a>
 8015fbc:	2402      	movs	r4, #2
 8015fbe:	e7e8      	b.n	8015f92 <__ieee754_pow+0xfa>
 8015fc0:	f1b9 0f00 	cmp.w	r9, #0
 8015fc4:	f04f 0000 	mov.w	r0, #0
 8015fc8:	f04f 0100 	mov.w	r1, #0
 8015fcc:	da81      	bge.n	8015ed2 <__ieee754_pow+0x3a>
 8015fce:	e9dd 0300 	ldrd	r0, r3, [sp]
 8015fd2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8015fd6:	e77c      	b.n	8015ed2 <__ieee754_pow+0x3a>
 8015fd8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8015fdc:	d106      	bne.n	8015fec <__ieee754_pow+0x154>
 8015fde:	4632      	mov	r2, r6
 8015fe0:	463b      	mov	r3, r7
 8015fe2:	4630      	mov	r0, r6
 8015fe4:	4639      	mov	r1, r7
 8015fe6:	f7ea fb2f 	bl	8000648 <__aeabi_dmul>
 8015fea:	e772      	b.n	8015ed2 <__ieee754_pow+0x3a>
 8015fec:	4a51      	ldr	r2, [pc, #324]	@ (8016134 <__ieee754_pow+0x29c>)
 8015fee:	4591      	cmp	r9, r2
 8015ff0:	d109      	bne.n	8016006 <__ieee754_pow+0x16e>
 8015ff2:	2d00      	cmp	r5, #0
 8015ff4:	db07      	blt.n	8016006 <__ieee754_pow+0x16e>
 8015ff6:	ec47 6b10 	vmov	d0, r6, r7
 8015ffa:	b011      	add	sp, #68	@ 0x44
 8015ffc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016000:	f000 bd52 	b.w	8016aa8 <__ieee754_sqrt>
 8016004:	2400      	movs	r4, #0
 8016006:	ec47 6b10 	vmov	d0, r6, r7
 801600a:	9302      	str	r3, [sp, #8]
 801600c:	f000 fc88 	bl	8016920 <fabs>
 8016010:	9b02      	ldr	r3, [sp, #8]
 8016012:	ec51 0b10 	vmov	r0, r1, d0
 8016016:	bb53      	cbnz	r3, 801606e <__ieee754_pow+0x1d6>
 8016018:	4b44      	ldr	r3, [pc, #272]	@ (801612c <__ieee754_pow+0x294>)
 801601a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801601e:	429a      	cmp	r2, r3
 8016020:	d002      	beq.n	8016028 <__ieee754_pow+0x190>
 8016022:	f1b8 0f00 	cmp.w	r8, #0
 8016026:	d122      	bne.n	801606e <__ieee754_pow+0x1d6>
 8016028:	f1b9 0f00 	cmp.w	r9, #0
 801602c:	da05      	bge.n	801603a <__ieee754_pow+0x1a2>
 801602e:	4602      	mov	r2, r0
 8016030:	460b      	mov	r3, r1
 8016032:	2000      	movs	r0, #0
 8016034:	493d      	ldr	r1, [pc, #244]	@ (801612c <__ieee754_pow+0x294>)
 8016036:	f7ea fc31 	bl	800089c <__aeabi_ddiv>
 801603a:	2d00      	cmp	r5, #0
 801603c:	f6bf af49 	bge.w	8015ed2 <__ieee754_pow+0x3a>
 8016040:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8016044:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8016048:	ea58 0804 	orrs.w	r8, r8, r4
 801604c:	d108      	bne.n	8016060 <__ieee754_pow+0x1c8>
 801604e:	4602      	mov	r2, r0
 8016050:	460b      	mov	r3, r1
 8016052:	4610      	mov	r0, r2
 8016054:	4619      	mov	r1, r3
 8016056:	f7ea f93f 	bl	80002d8 <__aeabi_dsub>
 801605a:	4602      	mov	r2, r0
 801605c:	460b      	mov	r3, r1
 801605e:	e794      	b.n	8015f8a <__ieee754_pow+0xf2>
 8016060:	2c01      	cmp	r4, #1
 8016062:	f47f af36 	bne.w	8015ed2 <__ieee754_pow+0x3a>
 8016066:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801606a:	4619      	mov	r1, r3
 801606c:	e731      	b.n	8015ed2 <__ieee754_pow+0x3a>
 801606e:	0feb      	lsrs	r3, r5, #31
 8016070:	3b01      	subs	r3, #1
 8016072:	ea53 0204 	orrs.w	r2, r3, r4
 8016076:	d102      	bne.n	801607e <__ieee754_pow+0x1e6>
 8016078:	4632      	mov	r2, r6
 801607a:	463b      	mov	r3, r7
 801607c:	e7e9      	b.n	8016052 <__ieee754_pow+0x1ba>
 801607e:	3c01      	subs	r4, #1
 8016080:	431c      	orrs	r4, r3
 8016082:	d016      	beq.n	80160b2 <__ieee754_pow+0x21a>
 8016084:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8016110 <__ieee754_pow+0x278>
 8016088:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801608c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016090:	f240 8112 	bls.w	80162b8 <__ieee754_pow+0x420>
 8016094:	4b28      	ldr	r3, [pc, #160]	@ (8016138 <__ieee754_pow+0x2a0>)
 8016096:	459a      	cmp	sl, r3
 8016098:	4b25      	ldr	r3, [pc, #148]	@ (8016130 <__ieee754_pow+0x298>)
 801609a:	d916      	bls.n	80160ca <__ieee754_pow+0x232>
 801609c:	4598      	cmp	r8, r3
 801609e:	d80b      	bhi.n	80160b8 <__ieee754_pow+0x220>
 80160a0:	f1b9 0f00 	cmp.w	r9, #0
 80160a4:	da0b      	bge.n	80160be <__ieee754_pow+0x226>
 80160a6:	2000      	movs	r0, #0
 80160a8:	b011      	add	sp, #68	@ 0x44
 80160aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160ae:	f000 bcf3 	b.w	8016a98 <__math_oflow>
 80160b2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8016118 <__ieee754_pow+0x280>
 80160b6:	e7e7      	b.n	8016088 <__ieee754_pow+0x1f0>
 80160b8:	f1b9 0f00 	cmp.w	r9, #0
 80160bc:	dcf3      	bgt.n	80160a6 <__ieee754_pow+0x20e>
 80160be:	2000      	movs	r0, #0
 80160c0:	b011      	add	sp, #68	@ 0x44
 80160c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160c6:	f000 bcdf 	b.w	8016a88 <__math_uflow>
 80160ca:	4598      	cmp	r8, r3
 80160cc:	d20c      	bcs.n	80160e8 <__ieee754_pow+0x250>
 80160ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80160d2:	2200      	movs	r2, #0
 80160d4:	2300      	movs	r3, #0
 80160d6:	f7ea fd29 	bl	8000b2c <__aeabi_dcmplt>
 80160da:	3800      	subs	r0, #0
 80160dc:	bf18      	it	ne
 80160de:	2001      	movne	r0, #1
 80160e0:	f1b9 0f00 	cmp.w	r9, #0
 80160e4:	daec      	bge.n	80160c0 <__ieee754_pow+0x228>
 80160e6:	e7df      	b.n	80160a8 <__ieee754_pow+0x210>
 80160e8:	4b10      	ldr	r3, [pc, #64]	@ (801612c <__ieee754_pow+0x294>)
 80160ea:	4598      	cmp	r8, r3
 80160ec:	f04f 0200 	mov.w	r2, #0
 80160f0:	d924      	bls.n	801613c <__ieee754_pow+0x2a4>
 80160f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80160f6:	2300      	movs	r3, #0
 80160f8:	f7ea fd18 	bl	8000b2c <__aeabi_dcmplt>
 80160fc:	3800      	subs	r0, #0
 80160fe:	bf18      	it	ne
 8016100:	2001      	movne	r0, #1
 8016102:	f1b9 0f00 	cmp.w	r9, #0
 8016106:	dccf      	bgt.n	80160a8 <__ieee754_pow+0x210>
 8016108:	e7da      	b.n	80160c0 <__ieee754_pow+0x228>
 801610a:	bf00      	nop
 801610c:	f3af 8000 	nop.w
 8016110:	00000000 	.word	0x00000000
 8016114:	3ff00000 	.word	0x3ff00000
 8016118:	00000000 	.word	0x00000000
 801611c:	bff00000 	.word	0xbff00000
 8016120:	fff00000 	.word	0xfff00000
 8016124:	7ff00000 	.word	0x7ff00000
 8016128:	433fffff 	.word	0x433fffff
 801612c:	3ff00000 	.word	0x3ff00000
 8016130:	3fefffff 	.word	0x3fefffff
 8016134:	3fe00000 	.word	0x3fe00000
 8016138:	43f00000 	.word	0x43f00000
 801613c:	4b5a      	ldr	r3, [pc, #360]	@ (80162a8 <__ieee754_pow+0x410>)
 801613e:	f7ea f8cb 	bl	80002d8 <__aeabi_dsub>
 8016142:	a351      	add	r3, pc, #324	@ (adr r3, 8016288 <__ieee754_pow+0x3f0>)
 8016144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016148:	4604      	mov	r4, r0
 801614a:	460d      	mov	r5, r1
 801614c:	f7ea fa7c 	bl	8000648 <__aeabi_dmul>
 8016150:	a34f      	add	r3, pc, #316	@ (adr r3, 8016290 <__ieee754_pow+0x3f8>)
 8016152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016156:	4606      	mov	r6, r0
 8016158:	460f      	mov	r7, r1
 801615a:	4620      	mov	r0, r4
 801615c:	4629      	mov	r1, r5
 801615e:	f7ea fa73 	bl	8000648 <__aeabi_dmul>
 8016162:	4b52      	ldr	r3, [pc, #328]	@ (80162ac <__ieee754_pow+0x414>)
 8016164:	4682      	mov	sl, r0
 8016166:	468b      	mov	fp, r1
 8016168:	2200      	movs	r2, #0
 801616a:	4620      	mov	r0, r4
 801616c:	4629      	mov	r1, r5
 801616e:	f7ea fa6b 	bl	8000648 <__aeabi_dmul>
 8016172:	4602      	mov	r2, r0
 8016174:	460b      	mov	r3, r1
 8016176:	a148      	add	r1, pc, #288	@ (adr r1, 8016298 <__ieee754_pow+0x400>)
 8016178:	e9d1 0100 	ldrd	r0, r1, [r1]
 801617c:	f7ea f8ac 	bl	80002d8 <__aeabi_dsub>
 8016180:	4622      	mov	r2, r4
 8016182:	462b      	mov	r3, r5
 8016184:	f7ea fa60 	bl	8000648 <__aeabi_dmul>
 8016188:	4602      	mov	r2, r0
 801618a:	460b      	mov	r3, r1
 801618c:	2000      	movs	r0, #0
 801618e:	4948      	ldr	r1, [pc, #288]	@ (80162b0 <__ieee754_pow+0x418>)
 8016190:	f7ea f8a2 	bl	80002d8 <__aeabi_dsub>
 8016194:	4622      	mov	r2, r4
 8016196:	4680      	mov	r8, r0
 8016198:	4689      	mov	r9, r1
 801619a:	462b      	mov	r3, r5
 801619c:	4620      	mov	r0, r4
 801619e:	4629      	mov	r1, r5
 80161a0:	f7ea fa52 	bl	8000648 <__aeabi_dmul>
 80161a4:	4602      	mov	r2, r0
 80161a6:	460b      	mov	r3, r1
 80161a8:	4640      	mov	r0, r8
 80161aa:	4649      	mov	r1, r9
 80161ac:	f7ea fa4c 	bl	8000648 <__aeabi_dmul>
 80161b0:	a33b      	add	r3, pc, #236	@ (adr r3, 80162a0 <__ieee754_pow+0x408>)
 80161b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161b6:	f7ea fa47 	bl	8000648 <__aeabi_dmul>
 80161ba:	4602      	mov	r2, r0
 80161bc:	460b      	mov	r3, r1
 80161be:	4650      	mov	r0, sl
 80161c0:	4659      	mov	r1, fp
 80161c2:	f7ea f889 	bl	80002d8 <__aeabi_dsub>
 80161c6:	4602      	mov	r2, r0
 80161c8:	460b      	mov	r3, r1
 80161ca:	4680      	mov	r8, r0
 80161cc:	4689      	mov	r9, r1
 80161ce:	4630      	mov	r0, r6
 80161d0:	4639      	mov	r1, r7
 80161d2:	f7ea f883 	bl	80002dc <__adddf3>
 80161d6:	2400      	movs	r4, #0
 80161d8:	4632      	mov	r2, r6
 80161da:	463b      	mov	r3, r7
 80161dc:	4620      	mov	r0, r4
 80161de:	460d      	mov	r5, r1
 80161e0:	f7ea f87a 	bl	80002d8 <__aeabi_dsub>
 80161e4:	4602      	mov	r2, r0
 80161e6:	460b      	mov	r3, r1
 80161e8:	4640      	mov	r0, r8
 80161ea:	4649      	mov	r1, r9
 80161ec:	f7ea f874 	bl	80002d8 <__aeabi_dsub>
 80161f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80161f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80161f8:	2300      	movs	r3, #0
 80161fa:	9304      	str	r3, [sp, #16]
 80161fc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016200:	4606      	mov	r6, r0
 8016202:	460f      	mov	r7, r1
 8016204:	4652      	mov	r2, sl
 8016206:	465b      	mov	r3, fp
 8016208:	e9dd 0100 	ldrd	r0, r1, [sp]
 801620c:	f7ea f864 	bl	80002d8 <__aeabi_dsub>
 8016210:	4622      	mov	r2, r4
 8016212:	462b      	mov	r3, r5
 8016214:	f7ea fa18 	bl	8000648 <__aeabi_dmul>
 8016218:	e9dd 2300 	ldrd	r2, r3, [sp]
 801621c:	4680      	mov	r8, r0
 801621e:	4689      	mov	r9, r1
 8016220:	4630      	mov	r0, r6
 8016222:	4639      	mov	r1, r7
 8016224:	f7ea fa10 	bl	8000648 <__aeabi_dmul>
 8016228:	4602      	mov	r2, r0
 801622a:	460b      	mov	r3, r1
 801622c:	4640      	mov	r0, r8
 801622e:	4649      	mov	r1, r9
 8016230:	f7ea f854 	bl	80002dc <__adddf3>
 8016234:	4652      	mov	r2, sl
 8016236:	465b      	mov	r3, fp
 8016238:	4606      	mov	r6, r0
 801623a:	460f      	mov	r7, r1
 801623c:	4620      	mov	r0, r4
 801623e:	4629      	mov	r1, r5
 8016240:	f7ea fa02 	bl	8000648 <__aeabi_dmul>
 8016244:	460b      	mov	r3, r1
 8016246:	4602      	mov	r2, r0
 8016248:	4680      	mov	r8, r0
 801624a:	4689      	mov	r9, r1
 801624c:	4630      	mov	r0, r6
 801624e:	4639      	mov	r1, r7
 8016250:	f7ea f844 	bl	80002dc <__adddf3>
 8016254:	4b17      	ldr	r3, [pc, #92]	@ (80162b4 <__ieee754_pow+0x41c>)
 8016256:	4299      	cmp	r1, r3
 8016258:	4604      	mov	r4, r0
 801625a:	460d      	mov	r5, r1
 801625c:	468a      	mov	sl, r1
 801625e:	468b      	mov	fp, r1
 8016260:	f340 82ef 	ble.w	8016842 <__ieee754_pow+0x9aa>
 8016264:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8016268:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801626c:	4303      	orrs	r3, r0
 801626e:	f000 81e8 	beq.w	8016642 <__ieee754_pow+0x7aa>
 8016272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016276:	2200      	movs	r2, #0
 8016278:	2300      	movs	r3, #0
 801627a:	f7ea fc57 	bl	8000b2c <__aeabi_dcmplt>
 801627e:	3800      	subs	r0, #0
 8016280:	bf18      	it	ne
 8016282:	2001      	movne	r0, #1
 8016284:	e710      	b.n	80160a8 <__ieee754_pow+0x210>
 8016286:	bf00      	nop
 8016288:	60000000 	.word	0x60000000
 801628c:	3ff71547 	.word	0x3ff71547
 8016290:	f85ddf44 	.word	0xf85ddf44
 8016294:	3e54ae0b 	.word	0x3e54ae0b
 8016298:	55555555 	.word	0x55555555
 801629c:	3fd55555 	.word	0x3fd55555
 80162a0:	652b82fe 	.word	0x652b82fe
 80162a4:	3ff71547 	.word	0x3ff71547
 80162a8:	3ff00000 	.word	0x3ff00000
 80162ac:	3fd00000 	.word	0x3fd00000
 80162b0:	3fe00000 	.word	0x3fe00000
 80162b4:	408fffff 	.word	0x408fffff
 80162b8:	4bd5      	ldr	r3, [pc, #852]	@ (8016610 <__ieee754_pow+0x778>)
 80162ba:	402b      	ands	r3, r5
 80162bc:	2200      	movs	r2, #0
 80162be:	b92b      	cbnz	r3, 80162cc <__ieee754_pow+0x434>
 80162c0:	4bd4      	ldr	r3, [pc, #848]	@ (8016614 <__ieee754_pow+0x77c>)
 80162c2:	f7ea f9c1 	bl	8000648 <__aeabi_dmul>
 80162c6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80162ca:	468b      	mov	fp, r1
 80162cc:	ea4f 532b 	mov.w	r3, fp, asr #20
 80162d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80162d4:	4413      	add	r3, r2
 80162d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80162d8:	4bcf      	ldr	r3, [pc, #828]	@ (8016618 <__ieee754_pow+0x780>)
 80162da:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80162de:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80162e2:	459b      	cmp	fp, r3
 80162e4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80162e8:	dd08      	ble.n	80162fc <__ieee754_pow+0x464>
 80162ea:	4bcc      	ldr	r3, [pc, #816]	@ (801661c <__ieee754_pow+0x784>)
 80162ec:	459b      	cmp	fp, r3
 80162ee:	f340 81a5 	ble.w	801663c <__ieee754_pow+0x7a4>
 80162f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80162f4:	3301      	adds	r3, #1
 80162f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80162f8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80162fc:	f04f 0a00 	mov.w	sl, #0
 8016300:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016304:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016306:	4bc6      	ldr	r3, [pc, #792]	@ (8016620 <__ieee754_pow+0x788>)
 8016308:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801630c:	ed93 7b00 	vldr	d7, [r3]
 8016310:	4629      	mov	r1, r5
 8016312:	ec53 2b17 	vmov	r2, r3, d7
 8016316:	ed8d 7b06 	vstr	d7, [sp, #24]
 801631a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801631e:	f7e9 ffdb 	bl	80002d8 <__aeabi_dsub>
 8016322:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016326:	4606      	mov	r6, r0
 8016328:	460f      	mov	r7, r1
 801632a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801632e:	f7e9 ffd5 	bl	80002dc <__adddf3>
 8016332:	4602      	mov	r2, r0
 8016334:	460b      	mov	r3, r1
 8016336:	2000      	movs	r0, #0
 8016338:	49ba      	ldr	r1, [pc, #744]	@ (8016624 <__ieee754_pow+0x78c>)
 801633a:	f7ea faaf 	bl	800089c <__aeabi_ddiv>
 801633e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8016342:	4602      	mov	r2, r0
 8016344:	460b      	mov	r3, r1
 8016346:	4630      	mov	r0, r6
 8016348:	4639      	mov	r1, r7
 801634a:	f7ea f97d 	bl	8000648 <__aeabi_dmul>
 801634e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016352:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8016356:	106d      	asrs	r5, r5, #1
 8016358:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801635c:	f04f 0b00 	mov.w	fp, #0
 8016360:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8016364:	4661      	mov	r1, ip
 8016366:	2200      	movs	r2, #0
 8016368:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801636c:	4658      	mov	r0, fp
 801636e:	46e1      	mov	r9, ip
 8016370:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8016374:	4614      	mov	r4, r2
 8016376:	461d      	mov	r5, r3
 8016378:	f7ea f966 	bl	8000648 <__aeabi_dmul>
 801637c:	4602      	mov	r2, r0
 801637e:	460b      	mov	r3, r1
 8016380:	4630      	mov	r0, r6
 8016382:	4639      	mov	r1, r7
 8016384:	f7e9 ffa8 	bl	80002d8 <__aeabi_dsub>
 8016388:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801638c:	4606      	mov	r6, r0
 801638e:	460f      	mov	r7, r1
 8016390:	4620      	mov	r0, r4
 8016392:	4629      	mov	r1, r5
 8016394:	f7e9 ffa0 	bl	80002d8 <__aeabi_dsub>
 8016398:	4602      	mov	r2, r0
 801639a:	460b      	mov	r3, r1
 801639c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80163a0:	f7e9 ff9a 	bl	80002d8 <__aeabi_dsub>
 80163a4:	465a      	mov	r2, fp
 80163a6:	464b      	mov	r3, r9
 80163a8:	f7ea f94e 	bl	8000648 <__aeabi_dmul>
 80163ac:	4602      	mov	r2, r0
 80163ae:	460b      	mov	r3, r1
 80163b0:	4630      	mov	r0, r6
 80163b2:	4639      	mov	r1, r7
 80163b4:	f7e9 ff90 	bl	80002d8 <__aeabi_dsub>
 80163b8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80163bc:	f7ea f944 	bl	8000648 <__aeabi_dmul>
 80163c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80163c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80163c8:	4610      	mov	r0, r2
 80163ca:	4619      	mov	r1, r3
 80163cc:	f7ea f93c 	bl	8000648 <__aeabi_dmul>
 80163d0:	a37d      	add	r3, pc, #500	@ (adr r3, 80165c8 <__ieee754_pow+0x730>)
 80163d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163d6:	4604      	mov	r4, r0
 80163d8:	460d      	mov	r5, r1
 80163da:	f7ea f935 	bl	8000648 <__aeabi_dmul>
 80163de:	a37c      	add	r3, pc, #496	@ (adr r3, 80165d0 <__ieee754_pow+0x738>)
 80163e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163e4:	f7e9 ff7a 	bl	80002dc <__adddf3>
 80163e8:	4622      	mov	r2, r4
 80163ea:	462b      	mov	r3, r5
 80163ec:	f7ea f92c 	bl	8000648 <__aeabi_dmul>
 80163f0:	a379      	add	r3, pc, #484	@ (adr r3, 80165d8 <__ieee754_pow+0x740>)
 80163f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163f6:	f7e9 ff71 	bl	80002dc <__adddf3>
 80163fa:	4622      	mov	r2, r4
 80163fc:	462b      	mov	r3, r5
 80163fe:	f7ea f923 	bl	8000648 <__aeabi_dmul>
 8016402:	a377      	add	r3, pc, #476	@ (adr r3, 80165e0 <__ieee754_pow+0x748>)
 8016404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016408:	f7e9 ff68 	bl	80002dc <__adddf3>
 801640c:	4622      	mov	r2, r4
 801640e:	462b      	mov	r3, r5
 8016410:	f7ea f91a 	bl	8000648 <__aeabi_dmul>
 8016414:	a374      	add	r3, pc, #464	@ (adr r3, 80165e8 <__ieee754_pow+0x750>)
 8016416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801641a:	f7e9 ff5f 	bl	80002dc <__adddf3>
 801641e:	4622      	mov	r2, r4
 8016420:	462b      	mov	r3, r5
 8016422:	f7ea f911 	bl	8000648 <__aeabi_dmul>
 8016426:	a372      	add	r3, pc, #456	@ (adr r3, 80165f0 <__ieee754_pow+0x758>)
 8016428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801642c:	f7e9 ff56 	bl	80002dc <__adddf3>
 8016430:	4622      	mov	r2, r4
 8016432:	4606      	mov	r6, r0
 8016434:	460f      	mov	r7, r1
 8016436:	462b      	mov	r3, r5
 8016438:	4620      	mov	r0, r4
 801643a:	4629      	mov	r1, r5
 801643c:	f7ea f904 	bl	8000648 <__aeabi_dmul>
 8016440:	4602      	mov	r2, r0
 8016442:	460b      	mov	r3, r1
 8016444:	4630      	mov	r0, r6
 8016446:	4639      	mov	r1, r7
 8016448:	f7ea f8fe 	bl	8000648 <__aeabi_dmul>
 801644c:	465a      	mov	r2, fp
 801644e:	4604      	mov	r4, r0
 8016450:	460d      	mov	r5, r1
 8016452:	464b      	mov	r3, r9
 8016454:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016458:	f7e9 ff40 	bl	80002dc <__adddf3>
 801645c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016460:	f7ea f8f2 	bl	8000648 <__aeabi_dmul>
 8016464:	4622      	mov	r2, r4
 8016466:	462b      	mov	r3, r5
 8016468:	f7e9 ff38 	bl	80002dc <__adddf3>
 801646c:	465a      	mov	r2, fp
 801646e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016472:	464b      	mov	r3, r9
 8016474:	4658      	mov	r0, fp
 8016476:	4649      	mov	r1, r9
 8016478:	f7ea f8e6 	bl	8000648 <__aeabi_dmul>
 801647c:	4b6a      	ldr	r3, [pc, #424]	@ (8016628 <__ieee754_pow+0x790>)
 801647e:	2200      	movs	r2, #0
 8016480:	4606      	mov	r6, r0
 8016482:	460f      	mov	r7, r1
 8016484:	f7e9 ff2a 	bl	80002dc <__adddf3>
 8016488:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801648c:	f7e9 ff26 	bl	80002dc <__adddf3>
 8016490:	46d8      	mov	r8, fp
 8016492:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8016496:	460d      	mov	r5, r1
 8016498:	465a      	mov	r2, fp
 801649a:	460b      	mov	r3, r1
 801649c:	4640      	mov	r0, r8
 801649e:	4649      	mov	r1, r9
 80164a0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80164a4:	f7ea f8d0 	bl	8000648 <__aeabi_dmul>
 80164a8:	465c      	mov	r4, fp
 80164aa:	4680      	mov	r8, r0
 80164ac:	4689      	mov	r9, r1
 80164ae:	4b5e      	ldr	r3, [pc, #376]	@ (8016628 <__ieee754_pow+0x790>)
 80164b0:	2200      	movs	r2, #0
 80164b2:	4620      	mov	r0, r4
 80164b4:	4629      	mov	r1, r5
 80164b6:	f7e9 ff0f 	bl	80002d8 <__aeabi_dsub>
 80164ba:	4632      	mov	r2, r6
 80164bc:	463b      	mov	r3, r7
 80164be:	f7e9 ff0b 	bl	80002d8 <__aeabi_dsub>
 80164c2:	4602      	mov	r2, r0
 80164c4:	460b      	mov	r3, r1
 80164c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80164ca:	f7e9 ff05 	bl	80002d8 <__aeabi_dsub>
 80164ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80164d2:	f7ea f8b9 	bl	8000648 <__aeabi_dmul>
 80164d6:	4622      	mov	r2, r4
 80164d8:	4606      	mov	r6, r0
 80164da:	460f      	mov	r7, r1
 80164dc:	462b      	mov	r3, r5
 80164de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80164e2:	f7ea f8b1 	bl	8000648 <__aeabi_dmul>
 80164e6:	4602      	mov	r2, r0
 80164e8:	460b      	mov	r3, r1
 80164ea:	4630      	mov	r0, r6
 80164ec:	4639      	mov	r1, r7
 80164ee:	f7e9 fef5 	bl	80002dc <__adddf3>
 80164f2:	4606      	mov	r6, r0
 80164f4:	460f      	mov	r7, r1
 80164f6:	4602      	mov	r2, r0
 80164f8:	460b      	mov	r3, r1
 80164fa:	4640      	mov	r0, r8
 80164fc:	4649      	mov	r1, r9
 80164fe:	f7e9 feed 	bl	80002dc <__adddf3>
 8016502:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8016506:	a33c      	add	r3, pc, #240	@ (adr r3, 80165f8 <__ieee754_pow+0x760>)
 8016508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801650c:	4658      	mov	r0, fp
 801650e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8016512:	460d      	mov	r5, r1
 8016514:	f7ea f898 	bl	8000648 <__aeabi_dmul>
 8016518:	465c      	mov	r4, fp
 801651a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801651e:	4642      	mov	r2, r8
 8016520:	464b      	mov	r3, r9
 8016522:	4620      	mov	r0, r4
 8016524:	4629      	mov	r1, r5
 8016526:	f7e9 fed7 	bl	80002d8 <__aeabi_dsub>
 801652a:	4602      	mov	r2, r0
 801652c:	460b      	mov	r3, r1
 801652e:	4630      	mov	r0, r6
 8016530:	4639      	mov	r1, r7
 8016532:	f7e9 fed1 	bl	80002d8 <__aeabi_dsub>
 8016536:	a332      	add	r3, pc, #200	@ (adr r3, 8016600 <__ieee754_pow+0x768>)
 8016538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801653c:	f7ea f884 	bl	8000648 <__aeabi_dmul>
 8016540:	a331      	add	r3, pc, #196	@ (adr r3, 8016608 <__ieee754_pow+0x770>)
 8016542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016546:	4606      	mov	r6, r0
 8016548:	460f      	mov	r7, r1
 801654a:	4620      	mov	r0, r4
 801654c:	4629      	mov	r1, r5
 801654e:	f7ea f87b 	bl	8000648 <__aeabi_dmul>
 8016552:	4602      	mov	r2, r0
 8016554:	460b      	mov	r3, r1
 8016556:	4630      	mov	r0, r6
 8016558:	4639      	mov	r1, r7
 801655a:	f7e9 febf 	bl	80002dc <__adddf3>
 801655e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016560:	4b32      	ldr	r3, [pc, #200]	@ (801662c <__ieee754_pow+0x794>)
 8016562:	4413      	add	r3, r2
 8016564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016568:	f7e9 feb8 	bl	80002dc <__adddf3>
 801656c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016570:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016572:	f7e9 ffff 	bl	8000574 <__aeabi_i2d>
 8016576:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016578:	4b2d      	ldr	r3, [pc, #180]	@ (8016630 <__ieee754_pow+0x798>)
 801657a:	4413      	add	r3, r2
 801657c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016580:	4606      	mov	r6, r0
 8016582:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016586:	460f      	mov	r7, r1
 8016588:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801658c:	f7e9 fea6 	bl	80002dc <__adddf3>
 8016590:	4642      	mov	r2, r8
 8016592:	464b      	mov	r3, r9
 8016594:	f7e9 fea2 	bl	80002dc <__adddf3>
 8016598:	4632      	mov	r2, r6
 801659a:	463b      	mov	r3, r7
 801659c:	f7e9 fe9e 	bl	80002dc <__adddf3>
 80165a0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80165a4:	4632      	mov	r2, r6
 80165a6:	463b      	mov	r3, r7
 80165a8:	4658      	mov	r0, fp
 80165aa:	460d      	mov	r5, r1
 80165ac:	f7e9 fe94 	bl	80002d8 <__aeabi_dsub>
 80165b0:	4642      	mov	r2, r8
 80165b2:	464b      	mov	r3, r9
 80165b4:	f7e9 fe90 	bl	80002d8 <__aeabi_dsub>
 80165b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80165bc:	f7e9 fe8c 	bl	80002d8 <__aeabi_dsub>
 80165c0:	465c      	mov	r4, fp
 80165c2:	4602      	mov	r2, r0
 80165c4:	e036      	b.n	8016634 <__ieee754_pow+0x79c>
 80165c6:	bf00      	nop
 80165c8:	4a454eef 	.word	0x4a454eef
 80165cc:	3fca7e28 	.word	0x3fca7e28
 80165d0:	93c9db65 	.word	0x93c9db65
 80165d4:	3fcd864a 	.word	0x3fcd864a
 80165d8:	a91d4101 	.word	0xa91d4101
 80165dc:	3fd17460 	.word	0x3fd17460
 80165e0:	518f264d 	.word	0x518f264d
 80165e4:	3fd55555 	.word	0x3fd55555
 80165e8:	db6fabff 	.word	0xdb6fabff
 80165ec:	3fdb6db6 	.word	0x3fdb6db6
 80165f0:	33333303 	.word	0x33333303
 80165f4:	3fe33333 	.word	0x3fe33333
 80165f8:	e0000000 	.word	0xe0000000
 80165fc:	3feec709 	.word	0x3feec709
 8016600:	dc3a03fd 	.word	0xdc3a03fd
 8016604:	3feec709 	.word	0x3feec709
 8016608:	145b01f5 	.word	0x145b01f5
 801660c:	be3e2fe0 	.word	0xbe3e2fe0
 8016610:	7ff00000 	.word	0x7ff00000
 8016614:	43400000 	.word	0x43400000
 8016618:	0003988e 	.word	0x0003988e
 801661c:	000bb679 	.word	0x000bb679
 8016620:	08017498 	.word	0x08017498
 8016624:	3ff00000 	.word	0x3ff00000
 8016628:	40080000 	.word	0x40080000
 801662c:	08017478 	.word	0x08017478
 8016630:	08017488 	.word	0x08017488
 8016634:	460b      	mov	r3, r1
 8016636:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801663a:	e5d7      	b.n	80161ec <__ieee754_pow+0x354>
 801663c:	f04f 0a01 	mov.w	sl, #1
 8016640:	e65e      	b.n	8016300 <__ieee754_pow+0x468>
 8016642:	a3b4      	add	r3, pc, #720	@ (adr r3, 8016914 <__ieee754_pow+0xa7c>)
 8016644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016648:	4630      	mov	r0, r6
 801664a:	4639      	mov	r1, r7
 801664c:	f7e9 fe46 	bl	80002dc <__adddf3>
 8016650:	4642      	mov	r2, r8
 8016652:	e9cd 0100 	strd	r0, r1, [sp]
 8016656:	464b      	mov	r3, r9
 8016658:	4620      	mov	r0, r4
 801665a:	4629      	mov	r1, r5
 801665c:	f7e9 fe3c 	bl	80002d8 <__aeabi_dsub>
 8016660:	4602      	mov	r2, r0
 8016662:	460b      	mov	r3, r1
 8016664:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016668:	f7ea fa7e 	bl	8000b68 <__aeabi_dcmpgt>
 801666c:	2800      	cmp	r0, #0
 801666e:	f47f ae00 	bne.w	8016272 <__ieee754_pow+0x3da>
 8016672:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8016676:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801667a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801667e:	fa43 fa0a 	asr.w	sl, r3, sl
 8016682:	44da      	add	sl, fp
 8016684:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8016688:	489d      	ldr	r0, [pc, #628]	@ (8016900 <__ieee754_pow+0xa68>)
 801668a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801668e:	4108      	asrs	r0, r1
 8016690:	ea00 030a 	and.w	r3, r0, sl
 8016694:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8016698:	f1c1 0114 	rsb	r1, r1, #20
 801669c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80166a0:	fa4a fa01 	asr.w	sl, sl, r1
 80166a4:	f1bb 0f00 	cmp.w	fp, #0
 80166a8:	4640      	mov	r0, r8
 80166aa:	4649      	mov	r1, r9
 80166ac:	f04f 0200 	mov.w	r2, #0
 80166b0:	bfb8      	it	lt
 80166b2:	f1ca 0a00 	rsblt	sl, sl, #0
 80166b6:	f7e9 fe0f 	bl	80002d8 <__aeabi_dsub>
 80166ba:	4680      	mov	r8, r0
 80166bc:	4689      	mov	r9, r1
 80166be:	4632      	mov	r2, r6
 80166c0:	463b      	mov	r3, r7
 80166c2:	4640      	mov	r0, r8
 80166c4:	4649      	mov	r1, r9
 80166c6:	f7e9 fe09 	bl	80002dc <__adddf3>
 80166ca:	2400      	movs	r4, #0
 80166cc:	a37c      	add	r3, pc, #496	@ (adr r3, 80168c0 <__ieee754_pow+0xa28>)
 80166ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166d2:	4620      	mov	r0, r4
 80166d4:	460d      	mov	r5, r1
 80166d6:	f7e9 ffb7 	bl	8000648 <__aeabi_dmul>
 80166da:	4642      	mov	r2, r8
 80166dc:	e9cd 0100 	strd	r0, r1, [sp]
 80166e0:	464b      	mov	r3, r9
 80166e2:	4620      	mov	r0, r4
 80166e4:	4629      	mov	r1, r5
 80166e6:	f7e9 fdf7 	bl	80002d8 <__aeabi_dsub>
 80166ea:	4602      	mov	r2, r0
 80166ec:	460b      	mov	r3, r1
 80166ee:	4630      	mov	r0, r6
 80166f0:	4639      	mov	r1, r7
 80166f2:	f7e9 fdf1 	bl	80002d8 <__aeabi_dsub>
 80166f6:	a374      	add	r3, pc, #464	@ (adr r3, 80168c8 <__ieee754_pow+0xa30>)
 80166f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166fc:	f7e9 ffa4 	bl	8000648 <__aeabi_dmul>
 8016700:	a373      	add	r3, pc, #460	@ (adr r3, 80168d0 <__ieee754_pow+0xa38>)
 8016702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016706:	4680      	mov	r8, r0
 8016708:	4689      	mov	r9, r1
 801670a:	4620      	mov	r0, r4
 801670c:	4629      	mov	r1, r5
 801670e:	f7e9 ff9b 	bl	8000648 <__aeabi_dmul>
 8016712:	4602      	mov	r2, r0
 8016714:	460b      	mov	r3, r1
 8016716:	4640      	mov	r0, r8
 8016718:	4649      	mov	r1, r9
 801671a:	f7e9 fddf 	bl	80002dc <__adddf3>
 801671e:	4604      	mov	r4, r0
 8016720:	460d      	mov	r5, r1
 8016722:	4602      	mov	r2, r0
 8016724:	460b      	mov	r3, r1
 8016726:	e9dd 0100 	ldrd	r0, r1, [sp]
 801672a:	f7e9 fdd7 	bl	80002dc <__adddf3>
 801672e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016732:	4680      	mov	r8, r0
 8016734:	4689      	mov	r9, r1
 8016736:	f7e9 fdcf 	bl	80002d8 <__aeabi_dsub>
 801673a:	4602      	mov	r2, r0
 801673c:	460b      	mov	r3, r1
 801673e:	4620      	mov	r0, r4
 8016740:	4629      	mov	r1, r5
 8016742:	f7e9 fdc9 	bl	80002d8 <__aeabi_dsub>
 8016746:	4642      	mov	r2, r8
 8016748:	4606      	mov	r6, r0
 801674a:	460f      	mov	r7, r1
 801674c:	464b      	mov	r3, r9
 801674e:	4640      	mov	r0, r8
 8016750:	4649      	mov	r1, r9
 8016752:	f7e9 ff79 	bl	8000648 <__aeabi_dmul>
 8016756:	a360      	add	r3, pc, #384	@ (adr r3, 80168d8 <__ieee754_pow+0xa40>)
 8016758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801675c:	4604      	mov	r4, r0
 801675e:	460d      	mov	r5, r1
 8016760:	f7e9 ff72 	bl	8000648 <__aeabi_dmul>
 8016764:	a35e      	add	r3, pc, #376	@ (adr r3, 80168e0 <__ieee754_pow+0xa48>)
 8016766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801676a:	f7e9 fdb5 	bl	80002d8 <__aeabi_dsub>
 801676e:	4622      	mov	r2, r4
 8016770:	462b      	mov	r3, r5
 8016772:	f7e9 ff69 	bl	8000648 <__aeabi_dmul>
 8016776:	a35c      	add	r3, pc, #368	@ (adr r3, 80168e8 <__ieee754_pow+0xa50>)
 8016778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801677c:	f7e9 fdae 	bl	80002dc <__adddf3>
 8016780:	4622      	mov	r2, r4
 8016782:	462b      	mov	r3, r5
 8016784:	f7e9 ff60 	bl	8000648 <__aeabi_dmul>
 8016788:	a359      	add	r3, pc, #356	@ (adr r3, 80168f0 <__ieee754_pow+0xa58>)
 801678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801678e:	f7e9 fda3 	bl	80002d8 <__aeabi_dsub>
 8016792:	4622      	mov	r2, r4
 8016794:	462b      	mov	r3, r5
 8016796:	f7e9 ff57 	bl	8000648 <__aeabi_dmul>
 801679a:	a357      	add	r3, pc, #348	@ (adr r3, 80168f8 <__ieee754_pow+0xa60>)
 801679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167a0:	f7e9 fd9c 	bl	80002dc <__adddf3>
 80167a4:	4622      	mov	r2, r4
 80167a6:	462b      	mov	r3, r5
 80167a8:	f7e9 ff4e 	bl	8000648 <__aeabi_dmul>
 80167ac:	4602      	mov	r2, r0
 80167ae:	460b      	mov	r3, r1
 80167b0:	4640      	mov	r0, r8
 80167b2:	4649      	mov	r1, r9
 80167b4:	f7e9 fd90 	bl	80002d8 <__aeabi_dsub>
 80167b8:	4604      	mov	r4, r0
 80167ba:	460d      	mov	r5, r1
 80167bc:	4602      	mov	r2, r0
 80167be:	460b      	mov	r3, r1
 80167c0:	4640      	mov	r0, r8
 80167c2:	4649      	mov	r1, r9
 80167c4:	f7e9 ff40 	bl	8000648 <__aeabi_dmul>
 80167c8:	2200      	movs	r2, #0
 80167ca:	e9cd 0100 	strd	r0, r1, [sp]
 80167ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80167d2:	4620      	mov	r0, r4
 80167d4:	4629      	mov	r1, r5
 80167d6:	f7e9 fd7f 	bl	80002d8 <__aeabi_dsub>
 80167da:	4602      	mov	r2, r0
 80167dc:	460b      	mov	r3, r1
 80167de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80167e2:	f7ea f85b 	bl	800089c <__aeabi_ddiv>
 80167e6:	4632      	mov	r2, r6
 80167e8:	4604      	mov	r4, r0
 80167ea:	460d      	mov	r5, r1
 80167ec:	463b      	mov	r3, r7
 80167ee:	4640      	mov	r0, r8
 80167f0:	4649      	mov	r1, r9
 80167f2:	f7e9 ff29 	bl	8000648 <__aeabi_dmul>
 80167f6:	4632      	mov	r2, r6
 80167f8:	463b      	mov	r3, r7
 80167fa:	f7e9 fd6f 	bl	80002dc <__adddf3>
 80167fe:	4602      	mov	r2, r0
 8016800:	460b      	mov	r3, r1
 8016802:	4620      	mov	r0, r4
 8016804:	4629      	mov	r1, r5
 8016806:	f7e9 fd67 	bl	80002d8 <__aeabi_dsub>
 801680a:	4642      	mov	r2, r8
 801680c:	464b      	mov	r3, r9
 801680e:	f7e9 fd63 	bl	80002d8 <__aeabi_dsub>
 8016812:	460b      	mov	r3, r1
 8016814:	4602      	mov	r2, r0
 8016816:	493b      	ldr	r1, [pc, #236]	@ (8016904 <__ieee754_pow+0xa6c>)
 8016818:	2000      	movs	r0, #0
 801681a:	f7e9 fd5d 	bl	80002d8 <__aeabi_dsub>
 801681e:	ec41 0b10 	vmov	d0, r0, r1
 8016822:	ee10 3a90 	vmov	r3, s1
 8016826:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801682a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801682e:	da30      	bge.n	8016892 <__ieee754_pow+0x9fa>
 8016830:	4650      	mov	r0, sl
 8016832:	f000 f87d 	bl	8016930 <scalbn>
 8016836:	ec51 0b10 	vmov	r0, r1, d0
 801683a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801683e:	f7ff bbd2 	b.w	8015fe6 <__ieee754_pow+0x14e>
 8016842:	4c31      	ldr	r4, [pc, #196]	@ (8016908 <__ieee754_pow+0xa70>)
 8016844:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8016848:	42a3      	cmp	r3, r4
 801684a:	d91a      	bls.n	8016882 <__ieee754_pow+0x9ea>
 801684c:	4b2f      	ldr	r3, [pc, #188]	@ (801690c <__ieee754_pow+0xa74>)
 801684e:	440b      	add	r3, r1
 8016850:	4303      	orrs	r3, r0
 8016852:	d009      	beq.n	8016868 <__ieee754_pow+0x9d0>
 8016854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016858:	2200      	movs	r2, #0
 801685a:	2300      	movs	r3, #0
 801685c:	f7ea f966 	bl	8000b2c <__aeabi_dcmplt>
 8016860:	3800      	subs	r0, #0
 8016862:	bf18      	it	ne
 8016864:	2001      	movne	r0, #1
 8016866:	e42b      	b.n	80160c0 <__ieee754_pow+0x228>
 8016868:	4642      	mov	r2, r8
 801686a:	464b      	mov	r3, r9
 801686c:	f7e9 fd34 	bl	80002d8 <__aeabi_dsub>
 8016870:	4632      	mov	r2, r6
 8016872:	463b      	mov	r3, r7
 8016874:	f7ea f96e 	bl	8000b54 <__aeabi_dcmpge>
 8016878:	2800      	cmp	r0, #0
 801687a:	d1eb      	bne.n	8016854 <__ieee754_pow+0x9bc>
 801687c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801691c <__ieee754_pow+0xa84>
 8016880:	e6f7      	b.n	8016672 <__ieee754_pow+0x7da>
 8016882:	469a      	mov	sl, r3
 8016884:	4b22      	ldr	r3, [pc, #136]	@ (8016910 <__ieee754_pow+0xa78>)
 8016886:	459a      	cmp	sl, r3
 8016888:	f63f aef3 	bhi.w	8016672 <__ieee754_pow+0x7da>
 801688c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8016890:	e715      	b.n	80166be <__ieee754_pow+0x826>
 8016892:	ec51 0b10 	vmov	r0, r1, d0
 8016896:	4619      	mov	r1, r3
 8016898:	e7cf      	b.n	801683a <__ieee754_pow+0x9a2>
 801689a:	491a      	ldr	r1, [pc, #104]	@ (8016904 <__ieee754_pow+0xa6c>)
 801689c:	2000      	movs	r0, #0
 801689e:	f7ff bb18 	b.w	8015ed2 <__ieee754_pow+0x3a>
 80168a2:	2000      	movs	r0, #0
 80168a4:	2100      	movs	r1, #0
 80168a6:	f7ff bb14 	b.w	8015ed2 <__ieee754_pow+0x3a>
 80168aa:	4630      	mov	r0, r6
 80168ac:	4639      	mov	r1, r7
 80168ae:	f7ff bb10 	b.w	8015ed2 <__ieee754_pow+0x3a>
 80168b2:	460c      	mov	r4, r1
 80168b4:	f7ff bb5e 	b.w	8015f74 <__ieee754_pow+0xdc>
 80168b8:	2400      	movs	r4, #0
 80168ba:	f7ff bb49 	b.w	8015f50 <__ieee754_pow+0xb8>
 80168be:	bf00      	nop
 80168c0:	00000000 	.word	0x00000000
 80168c4:	3fe62e43 	.word	0x3fe62e43
 80168c8:	fefa39ef 	.word	0xfefa39ef
 80168cc:	3fe62e42 	.word	0x3fe62e42
 80168d0:	0ca86c39 	.word	0x0ca86c39
 80168d4:	be205c61 	.word	0xbe205c61
 80168d8:	72bea4d0 	.word	0x72bea4d0
 80168dc:	3e663769 	.word	0x3e663769
 80168e0:	c5d26bf1 	.word	0xc5d26bf1
 80168e4:	3ebbbd41 	.word	0x3ebbbd41
 80168e8:	af25de2c 	.word	0xaf25de2c
 80168ec:	3f11566a 	.word	0x3f11566a
 80168f0:	16bebd93 	.word	0x16bebd93
 80168f4:	3f66c16c 	.word	0x3f66c16c
 80168f8:	5555553e 	.word	0x5555553e
 80168fc:	3fc55555 	.word	0x3fc55555
 8016900:	fff00000 	.word	0xfff00000
 8016904:	3ff00000 	.word	0x3ff00000
 8016908:	4090cbff 	.word	0x4090cbff
 801690c:	3f6f3400 	.word	0x3f6f3400
 8016910:	3fe00000 	.word	0x3fe00000
 8016914:	652b82fe 	.word	0x652b82fe
 8016918:	3c971547 	.word	0x3c971547
 801691c:	4090cc00 	.word	0x4090cc00

08016920 <fabs>:
 8016920:	ec51 0b10 	vmov	r0, r1, d0
 8016924:	4602      	mov	r2, r0
 8016926:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801692a:	ec43 2b10 	vmov	d0, r2, r3
 801692e:	4770      	bx	lr

08016930 <scalbn>:
 8016930:	b570      	push	{r4, r5, r6, lr}
 8016932:	ec55 4b10 	vmov	r4, r5, d0
 8016936:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801693a:	4606      	mov	r6, r0
 801693c:	462b      	mov	r3, r5
 801693e:	b991      	cbnz	r1, 8016966 <scalbn+0x36>
 8016940:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8016944:	4323      	orrs	r3, r4
 8016946:	d03d      	beq.n	80169c4 <scalbn+0x94>
 8016948:	4b35      	ldr	r3, [pc, #212]	@ (8016a20 <scalbn+0xf0>)
 801694a:	4620      	mov	r0, r4
 801694c:	4629      	mov	r1, r5
 801694e:	2200      	movs	r2, #0
 8016950:	f7e9 fe7a 	bl	8000648 <__aeabi_dmul>
 8016954:	4b33      	ldr	r3, [pc, #204]	@ (8016a24 <scalbn+0xf4>)
 8016956:	429e      	cmp	r6, r3
 8016958:	4604      	mov	r4, r0
 801695a:	460d      	mov	r5, r1
 801695c:	da0f      	bge.n	801697e <scalbn+0x4e>
 801695e:	a328      	add	r3, pc, #160	@ (adr r3, 8016a00 <scalbn+0xd0>)
 8016960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016964:	e01e      	b.n	80169a4 <scalbn+0x74>
 8016966:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801696a:	4291      	cmp	r1, r2
 801696c:	d10b      	bne.n	8016986 <scalbn+0x56>
 801696e:	4622      	mov	r2, r4
 8016970:	4620      	mov	r0, r4
 8016972:	4629      	mov	r1, r5
 8016974:	f7e9 fcb2 	bl	80002dc <__adddf3>
 8016978:	4604      	mov	r4, r0
 801697a:	460d      	mov	r5, r1
 801697c:	e022      	b.n	80169c4 <scalbn+0x94>
 801697e:	460b      	mov	r3, r1
 8016980:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8016984:	3936      	subs	r1, #54	@ 0x36
 8016986:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801698a:	4296      	cmp	r6, r2
 801698c:	dd0d      	ble.n	80169aa <scalbn+0x7a>
 801698e:	2d00      	cmp	r5, #0
 8016990:	a11d      	add	r1, pc, #116	@ (adr r1, 8016a08 <scalbn+0xd8>)
 8016992:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016996:	da02      	bge.n	801699e <scalbn+0x6e>
 8016998:	a11d      	add	r1, pc, #116	@ (adr r1, 8016a10 <scalbn+0xe0>)
 801699a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801699e:	a31a      	add	r3, pc, #104	@ (adr r3, 8016a08 <scalbn+0xd8>)
 80169a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169a4:	f7e9 fe50 	bl	8000648 <__aeabi_dmul>
 80169a8:	e7e6      	b.n	8016978 <scalbn+0x48>
 80169aa:	1872      	adds	r2, r6, r1
 80169ac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80169b0:	428a      	cmp	r2, r1
 80169b2:	dcec      	bgt.n	801698e <scalbn+0x5e>
 80169b4:	2a00      	cmp	r2, #0
 80169b6:	dd08      	ble.n	80169ca <scalbn+0x9a>
 80169b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80169bc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80169c0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80169c4:	ec45 4b10 	vmov	d0, r4, r5
 80169c8:	bd70      	pop	{r4, r5, r6, pc}
 80169ca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80169ce:	da08      	bge.n	80169e2 <scalbn+0xb2>
 80169d0:	2d00      	cmp	r5, #0
 80169d2:	a10b      	add	r1, pc, #44	@ (adr r1, 8016a00 <scalbn+0xd0>)
 80169d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80169d8:	dac1      	bge.n	801695e <scalbn+0x2e>
 80169da:	a10f      	add	r1, pc, #60	@ (adr r1, 8016a18 <scalbn+0xe8>)
 80169dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80169e0:	e7bd      	b.n	801695e <scalbn+0x2e>
 80169e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80169e6:	3236      	adds	r2, #54	@ 0x36
 80169e8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80169ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80169f0:	4620      	mov	r0, r4
 80169f2:	4b0d      	ldr	r3, [pc, #52]	@ (8016a28 <scalbn+0xf8>)
 80169f4:	4629      	mov	r1, r5
 80169f6:	2200      	movs	r2, #0
 80169f8:	e7d4      	b.n	80169a4 <scalbn+0x74>
 80169fa:	bf00      	nop
 80169fc:	f3af 8000 	nop.w
 8016a00:	c2f8f359 	.word	0xc2f8f359
 8016a04:	01a56e1f 	.word	0x01a56e1f
 8016a08:	8800759c 	.word	0x8800759c
 8016a0c:	7e37e43c 	.word	0x7e37e43c
 8016a10:	8800759c 	.word	0x8800759c
 8016a14:	fe37e43c 	.word	0xfe37e43c
 8016a18:	c2f8f359 	.word	0xc2f8f359
 8016a1c:	81a56e1f 	.word	0x81a56e1f
 8016a20:	43500000 	.word	0x43500000
 8016a24:	ffff3cb0 	.word	0xffff3cb0
 8016a28:	3c900000 	.word	0x3c900000

08016a2c <with_errno>:
 8016a2c:	b510      	push	{r4, lr}
 8016a2e:	ed2d 8b02 	vpush	{d8}
 8016a32:	eeb0 8a40 	vmov.f32	s16, s0
 8016a36:	eef0 8a60 	vmov.f32	s17, s1
 8016a3a:	4604      	mov	r4, r0
 8016a3c:	f7fb fa1c 	bl	8011e78 <__errno>
 8016a40:	eeb0 0a48 	vmov.f32	s0, s16
 8016a44:	eef0 0a68 	vmov.f32	s1, s17
 8016a48:	ecbd 8b02 	vpop	{d8}
 8016a4c:	6004      	str	r4, [r0, #0]
 8016a4e:	bd10      	pop	{r4, pc}

08016a50 <xflow>:
 8016a50:	4603      	mov	r3, r0
 8016a52:	b507      	push	{r0, r1, r2, lr}
 8016a54:	ec51 0b10 	vmov	r0, r1, d0
 8016a58:	b183      	cbz	r3, 8016a7c <xflow+0x2c>
 8016a5a:	4602      	mov	r2, r0
 8016a5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016a60:	e9cd 2300 	strd	r2, r3, [sp]
 8016a64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016a68:	f7e9 fdee 	bl	8000648 <__aeabi_dmul>
 8016a6c:	ec41 0b10 	vmov	d0, r0, r1
 8016a70:	2022      	movs	r0, #34	@ 0x22
 8016a72:	b003      	add	sp, #12
 8016a74:	f85d eb04 	ldr.w	lr, [sp], #4
 8016a78:	f7ff bfd8 	b.w	8016a2c <with_errno>
 8016a7c:	4602      	mov	r2, r0
 8016a7e:	460b      	mov	r3, r1
 8016a80:	e7ee      	b.n	8016a60 <xflow+0x10>
 8016a82:	0000      	movs	r0, r0
 8016a84:	0000      	movs	r0, r0
	...

08016a88 <__math_uflow>:
 8016a88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016a90 <__math_uflow+0x8>
 8016a8c:	f7ff bfe0 	b.w	8016a50 <xflow>
 8016a90:	00000000 	.word	0x00000000
 8016a94:	10000000 	.word	0x10000000

08016a98 <__math_oflow>:
 8016a98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016aa0 <__math_oflow+0x8>
 8016a9c:	f7ff bfd8 	b.w	8016a50 <xflow>
 8016aa0:	00000000 	.word	0x00000000
 8016aa4:	70000000 	.word	0x70000000

08016aa8 <__ieee754_sqrt>:
 8016aa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aac:	4a68      	ldr	r2, [pc, #416]	@ (8016c50 <__ieee754_sqrt+0x1a8>)
 8016aae:	ec55 4b10 	vmov	r4, r5, d0
 8016ab2:	43aa      	bics	r2, r5
 8016ab4:	462b      	mov	r3, r5
 8016ab6:	4621      	mov	r1, r4
 8016ab8:	d110      	bne.n	8016adc <__ieee754_sqrt+0x34>
 8016aba:	4622      	mov	r2, r4
 8016abc:	4620      	mov	r0, r4
 8016abe:	4629      	mov	r1, r5
 8016ac0:	f7e9 fdc2 	bl	8000648 <__aeabi_dmul>
 8016ac4:	4602      	mov	r2, r0
 8016ac6:	460b      	mov	r3, r1
 8016ac8:	4620      	mov	r0, r4
 8016aca:	4629      	mov	r1, r5
 8016acc:	f7e9 fc06 	bl	80002dc <__adddf3>
 8016ad0:	4604      	mov	r4, r0
 8016ad2:	460d      	mov	r5, r1
 8016ad4:	ec45 4b10 	vmov	d0, r4, r5
 8016ad8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016adc:	2d00      	cmp	r5, #0
 8016ade:	dc0e      	bgt.n	8016afe <__ieee754_sqrt+0x56>
 8016ae0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8016ae4:	4322      	orrs	r2, r4
 8016ae6:	d0f5      	beq.n	8016ad4 <__ieee754_sqrt+0x2c>
 8016ae8:	b19d      	cbz	r5, 8016b12 <__ieee754_sqrt+0x6a>
 8016aea:	4622      	mov	r2, r4
 8016aec:	4620      	mov	r0, r4
 8016aee:	4629      	mov	r1, r5
 8016af0:	f7e9 fbf2 	bl	80002d8 <__aeabi_dsub>
 8016af4:	4602      	mov	r2, r0
 8016af6:	460b      	mov	r3, r1
 8016af8:	f7e9 fed0 	bl	800089c <__aeabi_ddiv>
 8016afc:	e7e8      	b.n	8016ad0 <__ieee754_sqrt+0x28>
 8016afe:	152a      	asrs	r2, r5, #20
 8016b00:	d115      	bne.n	8016b2e <__ieee754_sqrt+0x86>
 8016b02:	2000      	movs	r0, #0
 8016b04:	e009      	b.n	8016b1a <__ieee754_sqrt+0x72>
 8016b06:	0acb      	lsrs	r3, r1, #11
 8016b08:	3a15      	subs	r2, #21
 8016b0a:	0549      	lsls	r1, r1, #21
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d0fa      	beq.n	8016b06 <__ieee754_sqrt+0x5e>
 8016b10:	e7f7      	b.n	8016b02 <__ieee754_sqrt+0x5a>
 8016b12:	462a      	mov	r2, r5
 8016b14:	e7fa      	b.n	8016b0c <__ieee754_sqrt+0x64>
 8016b16:	005b      	lsls	r3, r3, #1
 8016b18:	3001      	adds	r0, #1
 8016b1a:	02dc      	lsls	r4, r3, #11
 8016b1c:	d5fb      	bpl.n	8016b16 <__ieee754_sqrt+0x6e>
 8016b1e:	1e44      	subs	r4, r0, #1
 8016b20:	1b12      	subs	r2, r2, r4
 8016b22:	f1c0 0420 	rsb	r4, r0, #32
 8016b26:	fa21 f404 	lsr.w	r4, r1, r4
 8016b2a:	4323      	orrs	r3, r4
 8016b2c:	4081      	lsls	r1, r0
 8016b2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016b32:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8016b36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016b3a:	07d2      	lsls	r2, r2, #31
 8016b3c:	bf5c      	itt	pl
 8016b3e:	005b      	lslpl	r3, r3, #1
 8016b40:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8016b44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016b48:	bf58      	it	pl
 8016b4a:	0049      	lslpl	r1, r1, #1
 8016b4c:	2600      	movs	r6, #0
 8016b4e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8016b52:	106d      	asrs	r5, r5, #1
 8016b54:	0049      	lsls	r1, r1, #1
 8016b56:	2016      	movs	r0, #22
 8016b58:	4632      	mov	r2, r6
 8016b5a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8016b5e:	1917      	adds	r7, r2, r4
 8016b60:	429f      	cmp	r7, r3
 8016b62:	bfde      	ittt	le
 8016b64:	193a      	addle	r2, r7, r4
 8016b66:	1bdb      	suble	r3, r3, r7
 8016b68:	1936      	addle	r6, r6, r4
 8016b6a:	0fcf      	lsrs	r7, r1, #31
 8016b6c:	3801      	subs	r0, #1
 8016b6e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8016b72:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016b76:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8016b7a:	d1f0      	bne.n	8016b5e <__ieee754_sqrt+0xb6>
 8016b7c:	4604      	mov	r4, r0
 8016b7e:	2720      	movs	r7, #32
 8016b80:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8016b84:	429a      	cmp	r2, r3
 8016b86:	eb00 0e0c 	add.w	lr, r0, ip
 8016b8a:	db02      	blt.n	8016b92 <__ieee754_sqrt+0xea>
 8016b8c:	d113      	bne.n	8016bb6 <__ieee754_sqrt+0x10e>
 8016b8e:	458e      	cmp	lr, r1
 8016b90:	d811      	bhi.n	8016bb6 <__ieee754_sqrt+0x10e>
 8016b92:	f1be 0f00 	cmp.w	lr, #0
 8016b96:	eb0e 000c 	add.w	r0, lr, ip
 8016b9a:	da42      	bge.n	8016c22 <__ieee754_sqrt+0x17a>
 8016b9c:	2800      	cmp	r0, #0
 8016b9e:	db40      	blt.n	8016c22 <__ieee754_sqrt+0x17a>
 8016ba0:	f102 0801 	add.w	r8, r2, #1
 8016ba4:	1a9b      	subs	r3, r3, r2
 8016ba6:	458e      	cmp	lr, r1
 8016ba8:	bf88      	it	hi
 8016baa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8016bae:	eba1 010e 	sub.w	r1, r1, lr
 8016bb2:	4464      	add	r4, ip
 8016bb4:	4642      	mov	r2, r8
 8016bb6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8016bba:	3f01      	subs	r7, #1
 8016bbc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8016bc0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016bc4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8016bc8:	d1dc      	bne.n	8016b84 <__ieee754_sqrt+0xdc>
 8016bca:	4319      	orrs	r1, r3
 8016bcc:	d01b      	beq.n	8016c06 <__ieee754_sqrt+0x15e>
 8016bce:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8016c54 <__ieee754_sqrt+0x1ac>
 8016bd2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8016c58 <__ieee754_sqrt+0x1b0>
 8016bd6:	e9da 0100 	ldrd	r0, r1, [sl]
 8016bda:	e9db 2300 	ldrd	r2, r3, [fp]
 8016bde:	f7e9 fb7b 	bl	80002d8 <__aeabi_dsub>
 8016be2:	e9da 8900 	ldrd	r8, r9, [sl]
 8016be6:	4602      	mov	r2, r0
 8016be8:	460b      	mov	r3, r1
 8016bea:	4640      	mov	r0, r8
 8016bec:	4649      	mov	r1, r9
 8016bee:	f7e9 ffa7 	bl	8000b40 <__aeabi_dcmple>
 8016bf2:	b140      	cbz	r0, 8016c06 <__ieee754_sqrt+0x15e>
 8016bf4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8016bf8:	e9da 0100 	ldrd	r0, r1, [sl]
 8016bfc:	e9db 2300 	ldrd	r2, r3, [fp]
 8016c00:	d111      	bne.n	8016c26 <__ieee754_sqrt+0x17e>
 8016c02:	3601      	adds	r6, #1
 8016c04:	463c      	mov	r4, r7
 8016c06:	1072      	asrs	r2, r6, #1
 8016c08:	0863      	lsrs	r3, r4, #1
 8016c0a:	07f1      	lsls	r1, r6, #31
 8016c0c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8016c10:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8016c14:	bf48      	it	mi
 8016c16:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8016c1a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8016c1e:	4618      	mov	r0, r3
 8016c20:	e756      	b.n	8016ad0 <__ieee754_sqrt+0x28>
 8016c22:	4690      	mov	r8, r2
 8016c24:	e7be      	b.n	8016ba4 <__ieee754_sqrt+0xfc>
 8016c26:	f7e9 fb59 	bl	80002dc <__adddf3>
 8016c2a:	e9da 8900 	ldrd	r8, r9, [sl]
 8016c2e:	4602      	mov	r2, r0
 8016c30:	460b      	mov	r3, r1
 8016c32:	4640      	mov	r0, r8
 8016c34:	4649      	mov	r1, r9
 8016c36:	f7e9 ff79 	bl	8000b2c <__aeabi_dcmplt>
 8016c3a:	b120      	cbz	r0, 8016c46 <__ieee754_sqrt+0x19e>
 8016c3c:	1ca0      	adds	r0, r4, #2
 8016c3e:	bf08      	it	eq
 8016c40:	3601      	addeq	r6, #1
 8016c42:	3402      	adds	r4, #2
 8016c44:	e7df      	b.n	8016c06 <__ieee754_sqrt+0x15e>
 8016c46:	1c63      	adds	r3, r4, #1
 8016c48:	f023 0401 	bic.w	r4, r3, #1
 8016c4c:	e7db      	b.n	8016c06 <__ieee754_sqrt+0x15e>
 8016c4e:	bf00      	nop
 8016c50:	7ff00000 	.word	0x7ff00000
 8016c54:	200003a8 	.word	0x200003a8
 8016c58:	200003a0 	.word	0x200003a0

08016c5c <_init>:
 8016c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c5e:	bf00      	nop
 8016c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c62:	bc08      	pop	{r3}
 8016c64:	469e      	mov	lr, r3
 8016c66:	4770      	bx	lr

08016c68 <_fini>:
 8016c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c6a:	bf00      	nop
 8016c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c6e:	bc08      	pop	{r3}
 8016c70:	469e      	mov	lr, r3
 8016c72:	4770      	bx	lr
