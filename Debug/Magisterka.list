
Magisterka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016810  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  080169f0  080169f0  000179f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017220  08017220  00019378  2**0
                  CONTENTS
  4 .ARM          00000008  08017220  08017220  00018220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017228  08017228  00019378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017228  08017228  00018228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801722c  0801722c  0001822c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  08017230  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002300  20000378  080175a8  00019378  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002678  080175a8  00019678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019378  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025640  00000000  00000000  000193a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ec4  00000000  00000000  0003e9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f20  00000000  00000000  000438b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017f9  00000000  00000000  000457d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d55c  00000000  00000000  00046fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000265c4  00000000  00000000  00074525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f005  00000000  00000000  0009aae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b9aee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fa8  00000000  00000000  001b9b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001c3adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000378 	.word	0x20000378
 80001fc:	00000000 	.word	0x00000000
 8000200:	080169d8 	.word	0x080169d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000037c 	.word	0x2000037c
 800021c:	080169d8 	.word	0x080169d8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103a:	f002 ffdc 	bl	8003ff6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103e:	f000 f97b 	bl	8001338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001042:	f000 ff9d 	bl	8001f80 <MX_GPIO_Init>
  MX_DMA_Init();
 8001046:	f000 ff51 	bl	8001eec <MX_DMA_Init>
  MX_ADC3_Init();
 800104a:	f000 fa3b 	bl	80014c4 <MX_ADC3_Init>
  MX_ADC4_Init();
 800104e:	f000 fb05 	bl	800165c <MX_ADC4_Init>
  MX_ADC5_Init();
 8001052:	f000 fb69 	bl	8001728 <MX_ADC5_Init>
  MX_DAC1_Init();
 8001056:	f000 fbed 	bl	8001834 <MX_DAC1_Init>
  MX_DAC2_Init();
 800105a:	f000 fc37 	bl	80018cc <MX_DAC2_Init>
  MX_TIM1_Init();
 800105e:	f000 fc6f 	bl	8001940 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001062:	f000 fded 	bl	8001c40 <MX_TIM8_Init>
  MX_UART4_Init();
 8001066:	f000 fef5 	bl	8001e54 <MX_UART4_Init>
  MX_ADC1_Init();
 800106a:	f000 f9b3 	bl	80013d4 <MX_ADC1_Init>
  MX_TIM4_Init();
 800106e:	f000 fcf9 	bl	8001a64 <MX_TIM4_Init>
  MX_USB_Device_Init();
 8001072:	f00e fddf 	bl	800fc34 <MX_USB_Device_Init>
  MX_TIM15_Init();
 8001076:	f000 fe75 	bl	8001d64 <MX_TIM15_Init>
  MX_TIM16_Init();
 800107a:	f000 fec5 	bl	8001e08 <MX_TIM16_Init>
  MX_TIM7_Init();
 800107e:	f000 fda9 	bl	8001bd4 <MX_TIM7_Init>
  MX_TIM6_Init();
 8001082:	f000 fd67 	bl	8001b54 <MX_TIM6_Init>
  MX_CORDIC_Init();
 8001086:	f000 fbc1 	bl	800180c <MX_CORDIC_Init>


  while (1)
  {

	  checkfaults = Check_Faults();
 800108a:	f001 f9e5 	bl	8002458 <Check_Faults>
 800108e:	4603      	mov	r3, r0
 8001090:	461a      	mov	r2, r3
 8001092:	4b8d      	ldr	r3, [pc, #564]	@ (80012c8 <main+0x294>)
 8001094:	701a      	strb	r2, [r3, #0]
	  checkreads = Check_Ready();
 8001096:	f001 fa17 	bl	80024c8 <Check_Ready>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	4b8b      	ldr	r3, [pc, #556]	@ (80012cc <main+0x298>)
 80010a0:	701a      	strb	r2, [r3, #0]
	  	  	  	  if (dataReceivedFlag) {
 80010a2:	4b8b      	ldr	r3, [pc, #556]	@ (80012d0 <main+0x29c>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d004      	beq.n	80010b6 <main+0x82>
	  	  	  	      // Process the data
	  	  	  	      ParseUSBCommand();  // Function to handle the received command
 80010ac:	f001 feda 	bl	8002e64 <ParseUSBCommand>

	  	  	  	      // Clear the flag after processing
	  	  	  	      dataReceivedFlag = 0;
 80010b0:	4b87      	ldr	r3, [pc, #540]	@ (80012d0 <main+0x29c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
	  	  	  	  }

	  	  	  	  uint8_t interlock = HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin);
 80010b6:	2104      	movs	r1, #4
 80010b8:	4886      	ldr	r0, [pc, #536]	@ (80012d4 <main+0x2a0>)
 80010ba:	f005 fd55 	bl	8006b68 <HAL_GPIO_ReadPin>
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	  	          if (/*interlock && */ start_program && !(Check_Faults())   && Check_Ready()/* start_program condition */) {
 80010c2:	4b85      	ldr	r3, [pc, #532]	@ (80012d8 <main+0x2a4>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00d      	beq.n	80010e6 <main+0xb2>
 80010ca:	f001 f9c5 	bl	8002458 <Check_Faults>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d108      	bne.n	80010e6 <main+0xb2>
 80010d4:	f001 f9f8 	bl	80024c8 <Check_Ready>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <main+0xb2>
	  	        	//USB_SendString("State: EVENT start_program \r\n");
	  	              event = EVENT_START;
 80010de:	4b7f      	ldr	r3, [pc, #508]	@ (80012dc <main+0x2a8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e00f      	b.n	8001106 <main+0xd2>
	  	          } else if (/*HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin)*/Check_Faults() /* fault condition */) {
 80010e6:	f001 f9b7 	bl	8002458 <Check_Faults>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <main+0xc4>
	  	              event = EVENT_FAULT;
 80010f0:	4b7a      	ldr	r3, [pc, #488]	@ (80012dc <main+0x2a8>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	e006      	b.n	8001106 <main+0xd2>
	  	          } else if (clear_fault) {
 80010f8:	4b79      	ldr	r3, [pc, #484]	@ (80012e0 <main+0x2ac>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <main+0xd2>
	  	        	  /* clear fault condition */
	  	              event = EVENT_CLEAR_FAULT;
 8001100:	4b76      	ldr	r3, [pc, #472]	@ (80012dc <main+0x2a8>)
 8001102:	2202      	movs	r2, #2
 8001104:	701a      	strb	r2, [r3, #0]
	  	          } else if (0/* shutdown condition */) {
	  	              event = EVENT_SHUTDOWN;
	  	          }

	  	          // Handle the event and update the state
	  	          currentState = handle_event(currentState, event);
 8001106:	4b77      	ldr	r3, [pc, #476]	@ (80012e4 <main+0x2b0>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	4a74      	ldr	r2, [pc, #464]	@ (80012dc <main+0x2a8>)
 800110c:	7812      	ldrb	r2, [r2, #0]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f001 f881 	bl	8002218 <handle_event>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	4b72      	ldr	r3, [pc, #456]	@ (80012e4 <main+0x2b0>)
 800111c:	701a      	strb	r2, [r3, #0]

	  	          // Perform actions based on the current state
	  	          switch (currentState) {
 800111e:	4b71      	ldr	r3, [pc, #452]	@ (80012e4 <main+0x2b0>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b05      	cmp	r3, #5
 8001124:	f200 80cb 	bhi.w	80012be <main+0x28a>
 8001128:	a201      	add	r2, pc, #4	@ (adr r2, 8001130 <main+0xfc>)
 800112a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112e:	bf00      	nop
 8001130:	08001149 	.word	0x08001149
 8001134:	080011f3 	.word	0x080011f3
 8001138:	08001217 	.word	0x08001217
 800113c:	080012bf 	.word	0x080012bf
 8001140:	08001247 	.word	0x08001247
 8001144:	080012bf 	.word	0x080012bf
	  	              {
	  	            	//GPIOs
	  	            	//CUrrent Sensors OCD pin needed to go low in reset condition after fault event
	  	            	//HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_SET);
	  	            	//HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 8001148:	2201      	movs	r2, #1
 800114a:	2104      	movs	r1, #4
 800114c:	4866      	ldr	r0, [pc, #408]	@ (80012e8 <main+0x2b4>)
 800114e:	f005 fd23 	bl	8006b98 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP
 8001152:	2200      	movs	r2, #0
 8001154:	2120      	movs	r1, #32
 8001156:	485f      	ldr	r0, [pc, #380]	@ (80012d4 <main+0x2a0>)
 8001158:	f005 fd1e 	bl	8006b98 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2120      	movs	r1, #32
 8001160:	4862      	ldr	r0, [pc, #392]	@ (80012ec <main+0x2b8>)
 8001162:	f005 fd19 	bl	8006b98 <HAL_GPIO_WritePin>
	  	            	HAL_Delay(1000);
 8001166:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800116a:	f002 ffb5 	bl	80040d8 <HAL_Delay>
	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	2120      	movs	r1, #32
 8001172:	485e      	ldr	r0, [pc, #376]	@ (80012ec <main+0x2b8>)
 8001174:	f005 fd10 	bl	8006b98 <HAL_GPIO_WritePin>
	  	            	  // Start PWM for delay time transfer to FPGA
	  	            	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001178:	2100      	movs	r1, #0
 800117a:	485d      	ldr	r0, [pc, #372]	@ (80012f0 <main+0x2bc>)
 800117c:	f008 fc6a 	bl	8009a54 <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001180:	2104      	movs	r1, #4
 8001182:	485c      	ldr	r0, [pc, #368]	@ (80012f4 <main+0x2c0>)
 8001184:	f008 fc66 	bl	8009a54 <HAL_TIM_PWM_Start>

	  	            	  //DAC for  current reference
	  	            	  ///DAC1_OUT1 	- MAX1
	  	            	  //DAC1_OUT2 	- MAX2
	  	            	  //DAC2_OUT1	- MIN
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_1);
 8001188:	2100      	movs	r1, #0
 800118a:	485b      	ldr	r0, [pc, #364]	@ (80012f8 <main+0x2c4>)
 800118c:	f004 fe3c 	bl	8005e08 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_2);
 8001190:	2110      	movs	r1, #16
 8001192:	4859      	ldr	r0, [pc, #356]	@ (80012f8 <main+0x2c4>)
 8001194:	f004 fe38 	bl	8005e08 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac2,DAC2_CHANNEL_1);
 8001198:	2100      	movs	r1, #0
 800119a:	4858      	ldr	r0, [pc, #352]	@ (80012fc <main+0x2c8>)
 800119c:	f004 fe34 	bl	8005e08 <HAL_DAC_Start>

	  	            	//if( HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, BUFFER_SIZE, DAC_ALIGN_12B_R)!= HAL_OK) printf("error");
	  	            	//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);

	  	            	  // FAN PWM and 5s timer6 for check temperature and change duty cycle
	  	            	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80011a0:	2100      	movs	r1, #0
 80011a2:	4857      	ldr	r0, [pc, #348]	@ (8001300 <main+0x2cc>)
 80011a4:	f008 fc56 	bl	8009a54 <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_Base_Start_IT(&htim6);
 80011a8:	4856      	ldr	r0, [pc, #344]	@ (8001304 <main+0x2d0>)
 80011aa:	f008 fb55 	bl	8009858 <HAL_TIM_Base_Start_IT>

	  	            	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 80011ae:	217f      	movs	r1, #127	@ 0x7f
 80011b0:	4855      	ldr	r0, [pc, #340]	@ (8001308 <main+0x2d4>)
 80011b2:	f004 fab7 	bl	8005724 <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 80011b6:	217f      	movs	r1, #127	@ 0x7f
 80011b8:	4854      	ldr	r0, [pc, #336]	@ (800130c <main+0x2d8>)
 80011ba:	f004 fab3 	bl	8005724 <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 80011be:	217f      	movs	r1, #127	@ 0x7f
 80011c0:	4853      	ldr	r0, [pc, #332]	@ (8001310 <main+0x2dc>)
 80011c2:	f004 faaf 	bl	8005724 <HAL_ADCEx_Calibration_Start>

	  	            	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_dma_buffer, 5);
 80011c6:	2205      	movs	r2, #5
 80011c8:	4952      	ldr	r1, [pc, #328]	@ (8001314 <main+0x2e0>)
 80011ca:	484f      	ldr	r0, [pc, #316]	@ (8001308 <main+0x2d4>)
 80011cc:	f003 fba6 	bl	800491c <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4_dma_buffer, 2);
 80011d0:	2202      	movs	r2, #2
 80011d2:	4951      	ldr	r1, [pc, #324]	@ (8001318 <main+0x2e4>)
 80011d4:	484d      	ldr	r0, [pc, #308]	@ (800130c <main+0x2d8>)
 80011d6:	f003 fba1 	bl	800491c <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adc5_dma_buffer, 10);
 80011da:	220a      	movs	r2, #10
 80011dc:	494f      	ldr	r1, [pc, #316]	@ (800131c <main+0x2e8>)
 80011de:	484c      	ldr	r0, [pc, #304]	@ (8001310 <main+0x2dc>)
 80011e0:	f003 fb9c 	bl	800491c <HAL_ADC_Start_DMA>

	  	            	Set_PWM_DutyCycle(20);
 80011e4:	2014      	movs	r0, #20
 80011e6:	f001 f86b 	bl	80022c0 <Set_PWM_DutyCycle>
	  	            	currentState = STATE_STANDBY;
 80011ea:	4b3e      	ldr	r3, [pc, #248]	@ (80012e4 <main+0x2b0>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 80011f0:	e068      	b.n	80012c4 <main+0x290>
	  	              case STATE_STANDBY:
	  	                  // Wait for start_program signal
	  	              {
	  	            	  if(start_program && /*HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin)*/   !(Check_Faults())   && Check_Ready()){
 80011f2:	4b39      	ldr	r3, [pc, #228]	@ (80012d8 <main+0x2a4>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d063      	beq.n	80012c2 <main+0x28e>
 80011fa:	f001 f92d 	bl	8002458 <Check_Faults>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d15e      	bne.n	80012c2 <main+0x28e>
 8001204:	f001 f960 	bl	80024c8 <Check_Ready>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d059      	beq.n	80012c2 <main+0x28e>
	  	            		  currentState = STATE_SOFT_START;
 800120e:	4b35      	ldr	r3, [pc, #212]	@ (80012e4 <main+0x2b0>)
 8001210:	2202      	movs	r2, #2
 8001212:	701a      	strb	r2, [r3, #0]
	  	            	  }

	  	              }
	  	                  break;
 8001214:	e055      	b.n	80012c2 <main+0x28e>
	  	              case STATE_SOFT_START:
	  	                  // Gradually ramp up the output
	  	              {
	  	            	current_sensor1_vref = adc3_dma_buffer[0];// reference for imax imin
 8001216:	4b3f      	ldr	r3, [pc, #252]	@ (8001314 <main+0x2e0>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	b29a      	uxth	r2, r3
 800121c:	4b40      	ldr	r3, [pc, #256]	@ (8001320 <main+0x2ec>)
 800121e:	801a      	strh	r2, [r3, #0]
	  	            	current_sensor2_vref = adc3_dma_buffer[1];// reference for imax imin
 8001220:	4b3c      	ldr	r3, [pc, #240]	@ (8001314 <main+0x2e0>)
 8001222:	885b      	ldrh	r3, [r3, #2]
 8001224:	b29a      	uxth	r2, r3
 8001226:	4b3f      	ldr	r3, [pc, #252]	@ (8001324 <main+0x2f0>)
 8001228:	801a      	strh	r2, [r3, #0]

	  	            	  //Start timer that start_program ramp and pi regulation
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
 800122a:	2200      	movs	r2, #0
 800122c:	2104      	movs	r1, #4
 800122e:	482e      	ldr	r0, [pc, #184]	@ (80012e8 <main+0x2b4>)
 8001230:	f005 fcb2 	bl	8006b98 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
 8001234:	2201      	movs	r2, #1
 8001236:	2120      	movs	r1, #32
 8001238:	4826      	ldr	r0, [pc, #152]	@ (80012d4 <main+0x2a0>)
 800123a:	f005 fcad 	bl	8006b98 <HAL_GPIO_WritePin>
	  	            	HAL_TIM_Base_Start_IT(&htim15); // START TIM15 THATS IS MAIN CONTROL LOOP
 800123e:	483a      	ldr	r0, [pc, #232]	@ (8001328 <main+0x2f4>)
 8001240:	f008 fb0a 	bl	8009858 <HAL_TIM_Base_Start_IT>
	  	              }
	  	                  break;
 8001244:	e03e      	b.n	80012c4 <main+0x290>
	  	                  break;
	  	              case STATE_FAULT:
	  	                  // Handle fault condition
	  	            	  // Turn off all gate drivers and stop FPGA
	  	              {
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 8001246:	2201      	movs	r2, #1
 8001248:	2104      	movs	r1, #4
 800124a:	4827      	ldr	r0, [pc, #156]	@ (80012e8 <main+0x2b4>)
 800124c:	f005 fca4 	bl	8006b98 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	2120      	movs	r1, #32
 8001254:	481f      	ldr	r0, [pc, #124]	@ (80012d4 <main+0x2a0>)
 8001256:	f005 fc9f 	bl	8006b98 <HAL_GPIO_WritePin>
	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 800125a:	4833      	ldr	r0, [pc, #204]	@ (8001328 <main+0x2f4>)
 800125c:	f008 fb74 	bl	8009948 <HAL_TIM_Base_Stop_IT>

	  	            	HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port,NOT_RST_1_Pin, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	2180      	movs	r1, #128	@ 0x80
 8001264:	4831      	ldr	r0, [pc, #196]	@ (800132c <main+0x2f8>)
 8001266:	f005 fc97 	bl	8006b98 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_2_GPIO_Port,NOT_RST_2_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001270:	481e      	ldr	r0, [pc, #120]	@ (80012ec <main+0x2b8>)
 8001272:	f005 fc91 	bl	8006b98 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port,NOT_RST_3_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	2101      	movs	r1, #1
 800127a:	482d      	ldr	r0, [pc, #180]	@ (8001330 <main+0x2fc>)
 800127c:	f005 fc8c 	bl	8006b98 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port,NOT_RST_4_Pin, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	2140      	movs	r1, #64	@ 0x40
 8001284:	4813      	ldr	r0, [pc, #76]	@ (80012d4 <main+0x2a0>)
 8001286:	f005 fc87 	bl	8006b98 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	2102      	movs	r1, #2
 800128e:	4817      	ldr	r0, [pc, #92]	@ (80012ec <main+0x2b8>)
 8001290:	f005 fc82 	bl	8006b98 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800129a:	4813      	ldr	r0, [pc, #76]	@ (80012e8 <main+0x2b4>)
 800129c:	f005 fc7c 	bl	8006b98 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	2120      	movs	r1, #32
 80012a4:	4811      	ldr	r0, [pc, #68]	@ (80012ec <main+0x2b8>)
 80012a6:	f005 fc77 	bl	8006b98 <HAL_GPIO_WritePin>

	  	            	HAL_TIM_Base_Start(&htim7); // timer for reset OCD and INTERLOCK reset turn off
 80012aa:	4822      	ldr	r0, [pc, #136]	@ (8001334 <main+0x300>)
 80012ac:	f008 fa64 	bl	8009778 <HAL_TIM_Base_Start>



	  	            	start_program = 0;
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <main+0x2a4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
	  	            	currentState = STATE_STANDBY;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <main+0x2b0>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 80012bc:	e002      	b.n	80012c4 <main+0x290>
	  	            	//HAL_TIM_Base_Stop_IT(&htim15);
	  	              }

	  	                  break;
	  	              default:
	  	                  break;
 80012be:	bf00      	nop
 80012c0:	e6e3      	b.n	800108a <main+0x56>
	  	                  break;
 80012c2:	bf00      	nop
  {
 80012c4:	e6e1      	b.n	800108a <main+0x56>
 80012c6:	bf00      	nop
 80012c8:	20000b4b 	.word	0x20000b4b
 80012cc:	20000b4c 	.word	0x20000b4c
 80012d0:	20000b38 	.word	0x20000b38
 80012d4:	48000800 	.word	0x48000800
 80012d8:	20000b48 	.word	0x20000b48
 80012dc:	20000014 	.word	0x20000014
 80012e0:	20000b49 	.word	0x20000b49
 80012e4:	20000b4a 	.word	0x20000b4a
 80012e8:	48001400 	.word	0x48001400
 80012ec:	48001000 	.word	0x48001000
 80012f0:	20000774 	.word	0x20000774
 80012f4:	200008a4 	.word	0x200008a4
 80012f8:	2000068c 	.word	0x2000068c
 80012fc:	200006a0 	.word	0x200006a0
 8001300:	200007c0 	.word	0x200007c0
 8001304:	2000080c 	.word	0x2000080c
 8001308:	20000400 	.word	0x20000400
 800130c:	2000046c 	.word	0x2000046c
 8001310:	200004d8 	.word	0x200004d8
 8001314:	20000a38 	.word	0x20000a38
 8001318:	20000a4c 	.word	0x20000a4c
 800131c:	20000a60 	.word	0x20000a60
 8001320:	20000a1c 	.word	0x20000a1c
 8001324:	20000a1e 	.word	0x20000a1e
 8001328:	200008f0 	.word	0x200008f0
 800132c:	48000400 	.word	0x48000400
 8001330:	48000c00 	.word	0x48000c00
 8001334:	20000858 	.word	0x20000858

08001338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b094      	sub	sp, #80	@ 0x50
 800133c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133e:	f107 0318 	add.w	r3, r7, #24
 8001342:	2238      	movs	r2, #56	@ 0x38
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f010 f951 	bl	80115ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800135a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800135e:	f007 f983 	bl	8008668 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001362:	2322      	movs	r3, #34	@ 0x22
 8001364:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001366:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800136c:	2340      	movs	r3, #64	@ 0x40
 800136e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001370:	2301      	movs	r3, #1
 8001372:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001374:	2302      	movs	r3, #2
 8001376:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001378:	2302      	movs	r3, #2
 800137a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800137c:	2304      	movs	r3, #4
 800137e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001380:	234b      	movs	r3, #75	@ 0x4b
 8001382:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001384:	2302      	movs	r3, #2
 8001386:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001388:	2302      	movs	r3, #2
 800138a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800138c:	2302      	movs	r3, #2
 800138e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001390:	f107 0318 	add.w	r3, r7, #24
 8001394:	4618      	mov	r0, r3
 8001396:	f007 fa1b 	bl	80087d0 <HAL_RCC_OscConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80013a0:	f002 f816 	bl	80033d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a4:	230f      	movs	r3, #15
 80013a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a8:	2303      	movs	r3, #3
 80013aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2104      	movs	r1, #4
 80013bc:	4618      	mov	r0, r3
 80013be:	f007 fd19 	bl	8008df4 <HAL_RCC_ClockConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013c8:	f002 f802 	bl	80033d0 <Error_Handler>
  }
}
 80013cc:	bf00      	nop
 80013ce:	3750      	adds	r7, #80	@ 0x50
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	@ 0x30
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2220      	movs	r2, #32
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f010 f8fe 	bl	80115ee <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013f2:	4b32      	ldr	r3, [pc, #200]	@ (80014bc <MX_ADC1_Init+0xe8>)
 80013f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80013f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013fa:	4b30      	ldr	r3, [pc, #192]	@ (80014bc <MX_ADC1_Init+0xe8>)
 80013fc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001400:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001402:	4b2e      	ldr	r3, [pc, #184]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001408:	4b2c      	ldr	r3, [pc, #176]	@ (80014bc <MX_ADC1_Init+0xe8>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800140e:	4b2b      	ldr	r3, [pc, #172]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001414:	4b29      	ldr	r3, [pc, #164]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800141a:	4b28      	ldr	r3, [pc, #160]	@ (80014bc <MX_ADC1_Init+0xe8>)
 800141c:	2204      	movs	r2, #4
 800141e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001420:	4b26      	ldr	r3, [pc, #152]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001422:	2200      	movs	r2, #0
 8001424:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001426:	4b25      	ldr	r3, [pc, #148]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001428:	2200      	movs	r2, #0
 800142a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800142c:	4b23      	ldr	r3, [pc, #140]	@ (80014bc <MX_ADC1_Init+0xe8>)
 800142e:	2201      	movs	r2, #1
 8001430:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001432:	4b22      	ldr	r3, [pc, #136]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800143a:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <MX_ADC1_Init+0xe8>)
 800143c:	2200      	movs	r2, #0
 800143e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001440:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001442:	2200      	movs	r2, #0
 8001444:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001446:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800144e:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001450:	2200      	movs	r2, #0
 8001452:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001454:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800145c:	4817      	ldr	r0, [pc, #92]	@ (80014bc <MX_ADC1_Init+0xe8>)
 800145e:	f003 f8a1 	bl	80045a4 <HAL_ADC_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001468:	f001 ffb2 	bl	80033d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001470:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001474:	4619      	mov	r1, r3
 8001476:	4811      	ldr	r0, [pc, #68]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001478:	f004 f9b6 	bl	80057e8 <HAL_ADCEx_MultiModeConfigChannel>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001482:	f001 ffa5 	bl	80033d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001486:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <MX_ADC1_Init+0xec>)
 8001488:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800148a:	2306      	movs	r3, #6
 800148c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800148e:	2307      	movs	r3, #7
 8001490:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001492:	237f      	movs	r3, #127	@ 0x7f
 8001494:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001496:	2304      	movs	r3, #4
 8001498:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	@ (80014bc <MX_ADC1_Init+0xe8>)
 80014a4:	f003 fb22 	bl	8004aec <HAL_ADC_ConfigChannel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80014ae:	f001 ff8f 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	3730      	adds	r7, #48	@ 0x30
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000394 	.word	0x20000394
 80014c0:	cb840000 	.word	0xcb840000

080014c4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	@ 0x30
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2220      	movs	r2, #32
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f010 f886 	bl	80115ee <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014e2:	4b57      	ldr	r3, [pc, #348]	@ (8001640 <MX_ADC3_Init+0x17c>)
 80014e4:	4a57      	ldr	r2, [pc, #348]	@ (8001644 <MX_ADC3_Init+0x180>)
 80014e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 80014e8:	4b55      	ldr	r3, [pc, #340]	@ (8001640 <MX_ADC3_Init+0x17c>)
 80014ea:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 80014ee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014f0:	4b53      	ldr	r3, [pc, #332]	@ (8001640 <MX_ADC3_Init+0x17c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f6:	4b52      	ldr	r3, [pc, #328]	@ (8001640 <MX_ADC3_Init+0x17c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80014fc:	4b50      	ldr	r3, [pc, #320]	@ (8001640 <MX_ADC3_Init+0x17c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001502:	4b4f      	ldr	r3, [pc, #316]	@ (8001640 <MX_ADC3_Init+0x17c>)
 8001504:	2201      	movs	r2, #1
 8001506:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001508:	4b4d      	ldr	r3, [pc, #308]	@ (8001640 <MX_ADC3_Init+0x17c>)
 800150a:	2204      	movs	r2, #4
 800150c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800150e:	4b4c      	ldr	r3, [pc, #304]	@ (8001640 <MX_ADC3_Init+0x17c>)
 8001510:	2200      	movs	r2, #0
 8001512:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001514:	4b4a      	ldr	r3, [pc, #296]	@ (8001640 <MX_ADC3_Init+0x17c>)
 8001516:	2201      	movs	r2, #1
 8001518:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 5;
 800151a:	4b49      	ldr	r3, [pc, #292]	@ (8001640 <MX_ADC3_Init+0x17c>)
 800151c:	2205      	movs	r2, #5
 800151e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001520:	4b47      	ldr	r3, [pc, #284]	@ (8001640 <MX_ADC3_Init+0x17c>)
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001528:	4b45      	ldr	r3, [pc, #276]	@ (8001640 <MX_ADC3_Init+0x17c>)
 800152a:	2200      	movs	r2, #0
 800152c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800152e:	4b44      	ldr	r3, [pc, #272]	@ (8001640 <MX_ADC3_Init+0x17c>)
 8001530:	2200      	movs	r2, #0
 8001532:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001534:	4b42      	ldr	r3, [pc, #264]	@ (8001640 <MX_ADC3_Init+0x17c>)
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800153c:	4b40      	ldr	r3, [pc, #256]	@ (8001640 <MX_ADC3_Init+0x17c>)
 800153e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001542:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001544:	4b3e      	ldr	r3, [pc, #248]	@ (8001640 <MX_ADC3_Init+0x17c>)
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800154c:	483c      	ldr	r0, [pc, #240]	@ (8001640 <MX_ADC3_Init+0x17c>)
 800154e:	f003 f829 	bl	80045a4 <HAL_ADC_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 8001558:	f001 ff3a 	bl	80033d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001564:	4619      	mov	r1, r3
 8001566:	4836      	ldr	r0, [pc, #216]	@ (8001640 <MX_ADC3_Init+0x17c>)
 8001568:	f004 f93e 	bl	80057e8 <HAL_ADCEx_MultiModeConfigChannel>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001572:	f001 ff2d 	bl	80033d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001576:	4b34      	ldr	r3, [pc, #208]	@ (8001648 <MX_ADC3_Init+0x184>)
 8001578:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800157a:	2306      	movs	r3, #6
 800157c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001582:	237f      	movs	r3, #127	@ 0x7f
 8001584:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 38;
 800158a:	2326      	movs	r3, #38	@ 0x26
 800158c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 800158e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001592:	61fb      	str	r3, [r7, #28]
  sConfig.OffsetSaturation = DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	4619      	mov	r1, r3
 800159e:	4828      	ldr	r0, [pc, #160]	@ (8001640 <MX_ADC3_Init+0x17c>)
 80015a0:	f003 faa4 	bl	8004aec <HAL_ADC_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80015aa:	f001 ff11 	bl	80033d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015ae:	4b27      	ldr	r3, [pc, #156]	@ (800164c <MX_ADC3_Init+0x188>)
 80015b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015b2:	230c      	movs	r3, #12
 80015b4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_2;
 80015b6:	2301      	movs	r3, #1
 80015b8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 37;
 80015ba:	2325      	movs	r3, #37	@ 0x25
 80015bc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	481f      	ldr	r0, [pc, #124]	@ (8001640 <MX_ADC3_Init+0x17c>)
 80015c4:	f003 fa92 	bl	8004aec <HAL_ADC_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_ADC3_Init+0x10e>
  {
    Error_Handler();
 80015ce:	f001 feff 	bl	80033d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80015d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <MX_ADC3_Init+0x18c>)
 80015d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015d6:	2312      	movs	r3, #18
 80015d8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_3;
 80015da:	2302      	movs	r3, #2
 80015dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 8;
 80015de:	2308      	movs	r3, #8
 80015e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	4619      	mov	r1, r3
 80015e6:	4816      	ldr	r0, [pc, #88]	@ (8001640 <MX_ADC3_Init+0x17c>)
 80015e8:	f003 fa80 	bl	8004aec <HAL_ADC_ConfigChannel>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_ADC3_Init+0x132>
  {
    Error_Handler();
 80015f2:	f001 feed 	bl	80033d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015f6:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <MX_ADC3_Init+0x190>)
 80015f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015fa:	2318      	movs	r3, #24
 80015fc:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015fe:	2304      	movs	r3, #4
 8001600:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	4619      	mov	r1, r3
 800160a:	480d      	ldr	r0, [pc, #52]	@ (8001640 <MX_ADC3_Init+0x17c>)
 800160c:	f003 fa6e 	bl	8004aec <HAL_ADC_ConfigChannel>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 8001616:	f001 fedb 	bl	80033d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800161a:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <MX_ADC3_Init+0x194>)
 800161c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800161e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001622:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	4619      	mov	r1, r3
 8001628:	4805      	ldr	r0, [pc, #20]	@ (8001640 <MX_ADC3_Init+0x17c>)
 800162a:	f003 fa5f 	bl	8004aec <HAL_ADC_ConfigChannel>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 8001634:	f001 fecc 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	3730      	adds	r7, #48	@ 0x30
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000400 	.word	0x20000400
 8001644:	50000400 	.word	0x50000400
 8001648:	04300002 	.word	0x04300002
 800164c:	08600004 	.word	0x08600004
 8001650:	0c900008 	.word	0x0c900008
 8001654:	10c00010 	.word	0x10c00010
 8001658:	14f00020 	.word	0x14f00020

0800165c <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001662:	463b      	mov	r3, r7
 8001664:	2220      	movs	r2, #32
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f00f ffc0 	bl	80115ee <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800166e:	4b2b      	ldr	r3, [pc, #172]	@ (800171c <MX_ADC4_Init+0xc0>)
 8001670:	4a2b      	ldr	r2, [pc, #172]	@ (8001720 <MX_ADC4_Init+0xc4>)
 8001672:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001674:	4b29      	ldr	r3, [pc, #164]	@ (800171c <MX_ADC4_Init+0xc0>)
 8001676:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 800167a:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800167c:	4b27      	ldr	r3, [pc, #156]	@ (800171c <MX_ADC4_Init+0xc0>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001682:	4b26      	ldr	r3, [pc, #152]	@ (800171c <MX_ADC4_Init+0xc0>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001688:	4b24      	ldr	r3, [pc, #144]	@ (800171c <MX_ADC4_Init+0xc0>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800168e:	4b23      	ldr	r3, [pc, #140]	@ (800171c <MX_ADC4_Init+0xc0>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001694:	4b21      	ldr	r3, [pc, #132]	@ (800171c <MX_ADC4_Init+0xc0>)
 8001696:	2204      	movs	r2, #4
 8001698:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800169a:	4b20      	ldr	r3, [pc, #128]	@ (800171c <MX_ADC4_Init+0xc0>)
 800169c:	2200      	movs	r2, #0
 800169e:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80016a0:	4b1e      	ldr	r3, [pc, #120]	@ (800171c <MX_ADC4_Init+0xc0>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80016a6:	4b1d      	ldr	r3, [pc, #116]	@ (800171c <MX_ADC4_Init+0xc0>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	@ (800171c <MX_ADC4_Init+0xc0>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016b4:	4b19      	ldr	r3, [pc, #100]	@ (800171c <MX_ADC4_Init+0xc0>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016ba:	4b18      	ldr	r3, [pc, #96]	@ (800171c <MX_ADC4_Init+0xc0>)
 80016bc:	2200      	movs	r2, #0
 80016be:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80016c0:	4b16      	ldr	r3, [pc, #88]	@ (800171c <MX_ADC4_Init+0xc0>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80016c8:	4b14      	ldr	r3, [pc, #80]	@ (800171c <MX_ADC4_Init+0xc0>)
 80016ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80016d0:	4b12      	ldr	r3, [pc, #72]	@ (800171c <MX_ADC4_Init+0xc0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80016d8:	4810      	ldr	r0, [pc, #64]	@ (800171c <MX_ADC4_Init+0xc0>)
 80016da:	f002 ff63 	bl	80045a4 <HAL_ADC_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 80016e4:	f001 fe74 	bl	80033d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <MX_ADC4_Init+0xc8>)
 80016ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016ec:	2306      	movs	r3, #6
 80016ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80016f0:	2307      	movs	r3, #7
 80016f2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016f4:	237f      	movs	r3, #127	@ 0x7f
 80016f6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016f8:	2304      	movs	r3, #4
 80016fa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001700:	463b      	mov	r3, r7
 8001702:	4619      	mov	r1, r3
 8001704:	4805      	ldr	r0, [pc, #20]	@ (800171c <MX_ADC4_Init+0xc0>)
 8001706:	f003 f9f1 	bl	8004aec <HAL_ADC_ConfigChannel>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 8001710:	f001 fe5e 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	3720      	adds	r7, #32
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	2000046c 	.word	0x2000046c
 8001720:	50000500 	.word	0x50000500
 8001724:	04300002 	.word	0x04300002

08001728 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800172e:	463b      	mov	r3, r7
 8001730:	2220      	movs	r2, #32
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f00f ff5a 	bl	80115ee <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 800173a:	4b31      	ldr	r3, [pc, #196]	@ (8001800 <MX_ADC5_Init+0xd8>)
 800173c:	4a31      	ldr	r2, [pc, #196]	@ (8001804 <MX_ADC5_Init+0xdc>)
 800173e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001740:	4b2f      	ldr	r3, [pc, #188]	@ (8001800 <MX_ADC5_Init+0xd8>)
 8001742:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001746:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001748:	4b2d      	ldr	r3, [pc, #180]	@ (8001800 <MX_ADC5_Init+0xd8>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800174e:	4b2c      	ldr	r3, [pc, #176]	@ (8001800 <MX_ADC5_Init+0xd8>)
 8001750:	2200      	movs	r2, #0
 8001752:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001754:	4b2a      	ldr	r3, [pc, #168]	@ (8001800 <MX_ADC5_Init+0xd8>)
 8001756:	2200      	movs	r2, #0
 8001758:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800175a:	4b29      	ldr	r3, [pc, #164]	@ (8001800 <MX_ADC5_Init+0xd8>)
 800175c:	2200      	movs	r2, #0
 800175e:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001760:	4b27      	ldr	r3, [pc, #156]	@ (8001800 <MX_ADC5_Init+0xd8>)
 8001762:	2204      	movs	r2, #4
 8001764:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001766:	4b26      	ldr	r3, [pc, #152]	@ (8001800 <MX_ADC5_Init+0xd8>)
 8001768:	2200      	movs	r2, #0
 800176a:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 800176c:	4b24      	ldr	r3, [pc, #144]	@ (8001800 <MX_ADC5_Init+0xd8>)
 800176e:	2201      	movs	r2, #1
 8001770:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8001772:	4b23      	ldr	r3, [pc, #140]	@ (8001800 <MX_ADC5_Init+0xd8>)
 8001774:	2201      	movs	r2, #1
 8001776:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001778:	4b21      	ldr	r3, [pc, #132]	@ (8001800 <MX_ADC5_Init+0xd8>)
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001780:	4b1f      	ldr	r3, [pc, #124]	@ (8001800 <MX_ADC5_Init+0xd8>)
 8001782:	2200      	movs	r2, #0
 8001784:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001786:	4b1e      	ldr	r3, [pc, #120]	@ (8001800 <MX_ADC5_Init+0xd8>)
 8001788:	2200      	movs	r2, #0
 800178a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 800178c:	4b1c      	ldr	r3, [pc, #112]	@ (8001800 <MX_ADC5_Init+0xd8>)
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001794:	4b1a      	ldr	r3, [pc, #104]	@ (8001800 <MX_ADC5_Init+0xd8>)
 8001796:	2200      	movs	r2, #0
 8001798:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 800179a:	4b19      	ldr	r3, [pc, #100]	@ (8001800 <MX_ADC5_Init+0xd8>)
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 80017a2:	4b17      	ldr	r3, [pc, #92]	@ (8001800 <MX_ADC5_Init+0xd8>)
 80017a4:	221c      	movs	r2, #28
 80017a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 80017a8:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <MX_ADC5_Init+0xd8>)
 80017aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017ae:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80017b0:	4b13      	ldr	r3, [pc, #76]	@ (8001800 <MX_ADC5_Init+0xd8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80017b6:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <MX_ADC5_Init+0xd8>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80017bc:	4810      	ldr	r0, [pc, #64]	@ (8001800 <MX_ADC5_Init+0xd8>)
 80017be:	f002 fef1 	bl	80045a4 <HAL_ADC_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_ADC5_Init+0xa4>
  {
    Error_Handler();
 80017c8:	f001 fe02 	bl	80033d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <MX_ADC5_Init+0xe0>)
 80017ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017d0:	2306      	movs	r3, #6
 80017d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017d8:	237f      	movs	r3, #127	@ 0x7f
 80017da:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017dc:	2304      	movs	r3, #4
 80017de:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80017e4:	463b      	mov	r3, r7
 80017e6:	4619      	mov	r1, r3
 80017e8:	4805      	ldr	r0, [pc, #20]	@ (8001800 <MX_ADC5_Init+0xd8>)
 80017ea:	f003 f97f 	bl	8004aec <HAL_ADC_ConfigChannel>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_ADC5_Init+0xd0>
  {
    Error_Handler();
 80017f4:	f001 fdec 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	3720      	adds	r7, #32
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200004d8 	.word	0x200004d8
 8001804:	50000600 	.word	0x50000600
 8001808:	04300002 	.word	0x04300002

0800180c <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <MX_CORDIC_Init+0x20>)
 8001812:	4a07      	ldr	r2, [pc, #28]	@ (8001830 <MX_CORDIC_Init+0x24>)
 8001814:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001816:	4805      	ldr	r0, [pc, #20]	@ (800182c <MX_CORDIC_Init+0x20>)
 8001818:	f004 f8ee 	bl	80059f8 <HAL_CORDIC_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001822:	f001 fdd5 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000664 	.word	0x20000664
 8001830:	40020c00 	.word	0x40020c00

08001834 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08c      	sub	sp, #48	@ 0x30
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800183a:	463b      	mov	r3, r7
 800183c:	2230      	movs	r2, #48	@ 0x30
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f00f fed4 	bl	80115ee <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001846:	4b1e      	ldr	r3, [pc, #120]	@ (80018c0 <MX_DAC1_Init+0x8c>)
 8001848:	4a1e      	ldr	r2, [pc, #120]	@ (80018c4 <MX_DAC1_Init+0x90>)
 800184a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800184c:	481c      	ldr	r0, [pc, #112]	@ (80018c0 <MX_DAC1_Init+0x8c>)
 800184e:	f004 fab8 	bl	8005dc2 <HAL_DAC_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001858:	f001 fdba 	bl	80033d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800185c:	2302      	movs	r3, #2
 800185e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001870:	2300      	movs	r3, #0
 8001872:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001878:	2301      	movs	r3, #1
 800187a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001880:	463b      	mov	r3, r7
 8001882:	2200      	movs	r2, #0
 8001884:	4619      	mov	r1, r3
 8001886:	480e      	ldr	r0, [pc, #56]	@ (80018c0 <MX_DAC1_Init+0x8c>)
 8001888:	f004 fbb8 	bl	8005ffc <HAL_DAC_ConfigChannel>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001892:	f001 fd9d 	bl	80033d0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001896:	463b      	mov	r3, r7
 8001898:	2210      	movs	r2, #16
 800189a:	4619      	mov	r1, r3
 800189c:	4808      	ldr	r0, [pc, #32]	@ (80018c0 <MX_DAC1_Init+0x8c>)
 800189e:	f004 fbad 	bl	8005ffc <HAL_DAC_ConfigChannel>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 80018a8:	f001 fd92 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  __HAL_LINKDMA(&hdac1, DMA_Handle1, hdma_dac1_ch1);
 80018ac:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <MX_DAC1_Init+0x8c>)
 80018ae:	4a06      	ldr	r2, [pc, #24]	@ (80018c8 <MX_DAC1_Init+0x94>)
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <MX_DAC1_Init+0x94>)
 80018b4:	4a02      	ldr	r2, [pc, #8]	@ (80018c0 <MX_DAC1_Init+0x8c>)
 80018b6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END DAC1_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	3730      	adds	r7, #48	@ 0x30
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	2000068c 	.word	0x2000068c
 80018c4:	50000800 	.word	0x50000800
 80018c8:	200006b4 	.word	0x200006b4

080018cc <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08c      	sub	sp, #48	@ 0x30
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80018d2:	463b      	mov	r3, r7
 80018d4:	2230      	movs	r2, #48	@ 0x30
 80018d6:	2100      	movs	r1, #0
 80018d8:	4618      	mov	r0, r3
 80018da:	f00f fe88 	bl	80115ee <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 80018de:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <MX_DAC2_Init+0x6c>)
 80018e0:	4a16      	ldr	r2, [pc, #88]	@ (800193c <MX_DAC2_Init+0x70>)
 80018e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80018e4:	4814      	ldr	r0, [pc, #80]	@ (8001938 <MX_DAC2_Init+0x6c>)
 80018e6:	f004 fa6c 	bl	8005dc2 <HAL_DAC_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80018f0:	f001 fd6e 	bl	80033d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80018f4:	2302      	movs	r3, #2
 80018f6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001908:	2300      	movs	r3, #0
 800190a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001910:	2301      	movs	r3, #1
 8001912:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001918:	463b      	mov	r3, r7
 800191a:	2200      	movs	r2, #0
 800191c:	4619      	mov	r1, r3
 800191e:	4806      	ldr	r0, [pc, #24]	@ (8001938 <MX_DAC2_Init+0x6c>)
 8001920:	f004 fb6c 	bl	8005ffc <HAL_DAC_ConfigChannel>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 800192a:	f001 fd51 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	3730      	adds	r7, #48	@ 0x30
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200006a0 	.word	0x200006a0
 800193c:	50000c00 	.word	0x50000c00

08001940 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b098      	sub	sp, #96	@ 0x60
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001946:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001952:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]
 8001962:	615a      	str	r2, [r3, #20]
 8001964:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2234      	movs	r2, #52	@ 0x34
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f00f fe3e 	bl	80115ee <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001972:	4b3a      	ldr	r3, [pc, #232]	@ (8001a5c <MX_TIM1_Init+0x11c>)
 8001974:	4a3a      	ldr	r2, [pc, #232]	@ (8001a60 <MX_TIM1_Init+0x120>)
 8001976:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001978:	4b38      	ldr	r3, [pc, #224]	@ (8001a5c <MX_TIM1_Init+0x11c>)
 800197a:	2200      	movs	r2, #0
 800197c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197e:	4b37      	ldr	r3, [pc, #220]	@ (8001a5c <MX_TIM1_Init+0x11c>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210;
 8001984:	4b35      	ldr	r3, [pc, #212]	@ (8001a5c <MX_TIM1_Init+0x11c>)
 8001986:	22d2      	movs	r2, #210	@ 0xd2
 8001988:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198a:	4b34      	ldr	r3, [pc, #208]	@ (8001a5c <MX_TIM1_Init+0x11c>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001990:	4b32      	ldr	r3, [pc, #200]	@ (8001a5c <MX_TIM1_Init+0x11c>)
 8001992:	2200      	movs	r2, #0
 8001994:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001996:	4b31      	ldr	r3, [pc, #196]	@ (8001a5c <MX_TIM1_Init+0x11c>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800199c:	482f      	ldr	r0, [pc, #188]	@ (8001a5c <MX_TIM1_Init+0x11c>)
 800199e:	f008 f802 	bl	80099a6 <HAL_TIM_PWM_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80019a8:	f001 fd12 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019b0:	2300      	movs	r3, #0
 80019b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019bc:	4619      	mov	r1, r3
 80019be:	4827      	ldr	r0, [pc, #156]	@ (8001a5c <MX_TIM1_Init+0x11c>)
 80019c0:	f009 f99c 	bl	800acfc <HAL_TIMEx_MasterConfigSynchronization>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80019ca:	f001 fd01 	bl	80033d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ce:	2360      	movs	r3, #96	@ 0x60
 80019d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d6:	2300      	movs	r3, #0
 80019d8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019da:	2300      	movs	r3, #0
 80019dc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019e2:	2300      	movs	r3, #0
 80019e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019e6:	2300      	movs	r3, #0
 80019e8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019ee:	2200      	movs	r2, #0
 80019f0:	4619      	mov	r1, r3
 80019f2:	481a      	ldr	r0, [pc, #104]	@ (8001a5c <MX_TIM1_Init+0x11c>)
 80019f4:	f008 fa90 	bl	8009f18 <HAL_TIM_PWM_ConfigChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80019fe:	f001 fce7 	bl	80033d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a32:	2300      	movs	r3, #0
 8001a34:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4807      	ldr	r0, [pc, #28]	@ (8001a5c <MX_TIM1_Init+0x11c>)
 8001a40:	f009 f9f2 	bl	800ae28 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001a4a:	f001 fcc1 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a4e:	4803      	ldr	r0, [pc, #12]	@ (8001a5c <MX_TIM1_Init+0x11c>)
 8001a50:	f002 f862 	bl	8003b18 <HAL_TIM_MspPostInit>

}
 8001a54:	bf00      	nop
 8001a56:	3760      	adds	r7, #96	@ 0x60
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000774 	.word	0x20000774
 8001a60:	40012c00 	.word	0x40012c00

08001a64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08e      	sub	sp, #56	@ 0x38
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a84:	463b      	mov	r3, r7
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	611a      	str	r2, [r3, #16]
 8001a92:	615a      	str	r2, [r3, #20]
 8001a94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a96:	4b2d      	ldr	r3, [pc, #180]	@ (8001b4c <MX_TIM4_Init+0xe8>)
 8001a98:	4a2d      	ldr	r2, [pc, #180]	@ (8001b50 <MX_TIM4_Init+0xec>)
 8001a9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b4c <MX_TIM4_Init+0xe8>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b4c <MX_TIM4_Init+0xe8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 679;
 8001aa8:	4b28      	ldr	r3, [pc, #160]	@ (8001b4c <MX_TIM4_Init+0xe8>)
 8001aaa:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8001aae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab0:	4b26      	ldr	r3, [pc, #152]	@ (8001b4c <MX_TIM4_Init+0xe8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab6:	4b25      	ldr	r3, [pc, #148]	@ (8001b4c <MX_TIM4_Init+0xe8>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001abc:	4823      	ldr	r0, [pc, #140]	@ (8001b4c <MX_TIM4_Init+0xe8>)
 8001abe:	f007 fe03 	bl	80096c8 <HAL_TIM_Base_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001ac8:	f001 fc82 	bl	80033d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ad2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	481c      	ldr	r0, [pc, #112]	@ (8001b4c <MX_TIM4_Init+0xe8>)
 8001ada:	f008 fb31 	bl	800a140 <HAL_TIM_ConfigClockSource>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001ae4:	f001 fc74 	bl	80033d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ae8:	4818      	ldr	r0, [pc, #96]	@ (8001b4c <MX_TIM4_Init+0xe8>)
 8001aea:	f007 ff5c 	bl	80099a6 <HAL_TIM_PWM_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001af4:	f001 fc6c 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	4619      	mov	r1, r3
 8001b06:	4811      	ldr	r0, [pc, #68]	@ (8001b4c <MX_TIM4_Init+0xe8>)
 8001b08:	f009 f8f8 	bl	800acfc <HAL_TIMEx_MasterConfigSynchronization>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001b12:	f001 fc5d 	bl	80033d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b16:	2360      	movs	r3, #96	@ 0x60
 8001b18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b26:	463b      	mov	r3, r7
 8001b28:	2200      	movs	r2, #0
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4807      	ldr	r0, [pc, #28]	@ (8001b4c <MX_TIM4_Init+0xe8>)
 8001b2e:	f008 f9f3 	bl	8009f18 <HAL_TIM_PWM_ConfigChannel>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001b38:	f001 fc4a 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b3c:	4803      	ldr	r0, [pc, #12]	@ (8001b4c <MX_TIM4_Init+0xe8>)
 8001b3e:	f001 ffeb 	bl	8003b18 <HAL_TIM_MspPostInit>

}
 8001b42:	bf00      	nop
 8001b44:	3738      	adds	r7, #56	@ 0x38
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200007c0 	.word	0x200007c0
 8001b50:	40000800 	.word	0x40000800

08001b54 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b64:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <MX_TIM6_Init+0x78>)
 8001b66:	4a1a      	ldr	r2, [pc, #104]	@ (8001bd0 <MX_TIM6_Init+0x7c>)
 8001b68:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11549;
 8001b6a:	4b18      	ldr	r3, [pc, #96]	@ (8001bcc <MX_TIM6_Init+0x78>)
 8001b6c:	f642 521d 	movw	r2, #11549	@ 0x2d1d
 8001b70:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b72:	4b16      	ldr	r3, [pc, #88]	@ (8001bcc <MX_TIM6_Init+0x78>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64934;
 8001b78:	4b14      	ldr	r3, [pc, #80]	@ (8001bcc <MX_TIM6_Init+0x78>)
 8001b7a:	f64f 52a6 	movw	r2, #64934	@ 0xfda6
 8001b7e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <MX_TIM6_Init+0x78>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b86:	4811      	ldr	r0, [pc, #68]	@ (8001bcc <MX_TIM6_Init+0x78>)
 8001b88:	f007 fd9e 	bl	80096c8 <HAL_TIM_Base_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001b92:	f001 fc1d 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480a      	ldr	r0, [pc, #40]	@ (8001bcc <MX_TIM6_Init+0x78>)
 8001ba4:	f009 f8aa 	bl	800acfc <HAL_TIMEx_MasterConfigSynchronization>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001bae:	f001 fc0f 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	2036      	movs	r0, #54	@ 0x36
 8001bb8:	f004 f8cf 	bl	8005d5a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bbc:	2036      	movs	r0, #54	@ 0x36
 8001bbe:	f004 f8e6 	bl	8005d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM6_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000080c 	.word	0x2000080c
 8001bd0:	40001000 	.word	0x40001000

08001bd4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001be4:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <MX_TIM7_Init+0x64>)
 8001be6:	4a15      	ldr	r2, [pc, #84]	@ (8001c3c <MX_TIM7_Init+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 14999;
 8001bea:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <MX_TIM7_Init+0x64>)
 8001bec:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8001bf0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf2:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <MX_TIM7_Init+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <MX_TIM7_Init+0x64>)
 8001bfa:	2209      	movs	r2, #9
 8001bfc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <MX_TIM7_Init+0x64>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c04:	480c      	ldr	r0, [pc, #48]	@ (8001c38 <MX_TIM7_Init+0x64>)
 8001c06:	f007 fd5f 	bl	80096c8 <HAL_TIM_Base_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001c10:	f001 fbde 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c14:	2300      	movs	r3, #0
 8001c16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4805      	ldr	r0, [pc, #20]	@ (8001c38 <MX_TIM7_Init+0x64>)
 8001c22:	f009 f86b 	bl	800acfc <HAL_TIMEx_MasterConfigSynchronization>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001c2c:	f001 fbd0 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c30:	bf00      	nop
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000858 	.word	0x20000858
 8001c3c:	40001400 	.word	0x40001400

08001c40 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b098      	sub	sp, #96	@ 0x60
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c46:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c52:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	611a      	str	r2, [r3, #16]
 8001c62:	615a      	str	r2, [r3, #20]
 8001c64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	2234      	movs	r2, #52	@ 0x34
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f00f fcbe 	bl	80115ee <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c72:	4b3a      	ldr	r3, [pc, #232]	@ (8001d5c <MX_TIM8_Init+0x11c>)
 8001c74:	4a3a      	ldr	r2, [pc, #232]	@ (8001d60 <MX_TIM8_Init+0x120>)
 8001c76:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001c78:	4b38      	ldr	r3, [pc, #224]	@ (8001d5c <MX_TIM8_Init+0x11c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7e:	4b37      	ldr	r3, [pc, #220]	@ (8001d5c <MX_TIM8_Init+0x11c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 210;
 8001c84:	4b35      	ldr	r3, [pc, #212]	@ (8001d5c <MX_TIM8_Init+0x11c>)
 8001c86:	22d2      	movs	r2, #210	@ 0xd2
 8001c88:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8a:	4b34      	ldr	r3, [pc, #208]	@ (8001d5c <MX_TIM8_Init+0x11c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c90:	4b32      	ldr	r3, [pc, #200]	@ (8001d5c <MX_TIM8_Init+0x11c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c96:	4b31      	ldr	r3, [pc, #196]	@ (8001d5c <MX_TIM8_Init+0x11c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001c9c:	482f      	ldr	r0, [pc, #188]	@ (8001d5c <MX_TIM8_Init+0x11c>)
 8001c9e:	f007 fe82 	bl	80099a6 <HAL_TIM_PWM_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001ca8:	f001 fb92 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cac:	2300      	movs	r3, #0
 8001cae:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001cb8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4827      	ldr	r0, [pc, #156]	@ (8001d5c <MX_TIM8_Init+0x11c>)
 8001cc0:	f009 f81c 	bl	800acfc <HAL_TIMEx_MasterConfigSynchronization>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8001cca:	f001 fb81 	bl	80033d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cce:	2360      	movs	r3, #96	@ 0x60
 8001cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cee:	2204      	movs	r2, #4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	481a      	ldr	r0, [pc, #104]	@ (8001d5c <MX_TIM8_Init+0x11c>)
 8001cf4:	f008 f910 	bl	8009f18 <HAL_TIM_PWM_ConfigChannel>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001cfe:	f001 fb67 	bl	80033d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d20:	2300      	movs	r3, #0
 8001d22:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d32:	2300      	movs	r3, #0
 8001d34:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4807      	ldr	r0, [pc, #28]	@ (8001d5c <MX_TIM8_Init+0x11c>)
 8001d40:	f009 f872 	bl	800ae28 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001d4a:	f001 fb41 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001d4e:	4803      	ldr	r0, [pc, #12]	@ (8001d5c <MX_TIM8_Init+0x11c>)
 8001d50:	f001 fee2 	bl	8003b18 <HAL_TIM_MspPostInit>

}
 8001d54:	bf00      	nop
 8001d56:	3760      	adds	r7, #96	@ 0x60
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	200008a4 	.word	0x200008a4
 8001d60:	40013400 	.word	0x40013400

08001d64 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6a:	f107 0310 	add.w	r3, r7, #16
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001d82:	4b1f      	ldr	r3, [pc, #124]	@ (8001e00 <MX_TIM15_Init+0x9c>)
 8001d84:	4a1f      	ldr	r2, [pc, #124]	@ (8001e04 <MX_TIM15_Init+0xa0>)
 8001d86:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1499;
 8001d88:	4b1d      	ldr	r3, [pc, #116]	@ (8001e00 <MX_TIM15_Init+0x9c>)
 8001d8a:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001d8e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d90:	4b1b      	ldr	r3, [pc, #108]	@ (8001e00 <MX_TIM15_Init+0x9c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 4;
 8001d96:	4b1a      	ldr	r3, [pc, #104]	@ (8001e00 <MX_TIM15_Init+0x9c>)
 8001d98:	2204      	movs	r2, #4
 8001d9a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9c:	4b18      	ldr	r3, [pc, #96]	@ (8001e00 <MX_TIM15_Init+0x9c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001da2:	4b17      	ldr	r3, [pc, #92]	@ (8001e00 <MX_TIM15_Init+0x9c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da8:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <MX_TIM15_Init+0x9c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001dae:	4814      	ldr	r0, [pc, #80]	@ (8001e00 <MX_TIM15_Init+0x9c>)
 8001db0:	f007 fc8a 	bl	80096c8 <HAL_TIM_Base_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001dba:	f001 fb09 	bl	80033d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	4619      	mov	r1, r3
 8001dca:	480d      	ldr	r0, [pc, #52]	@ (8001e00 <MX_TIM15_Init+0x9c>)
 8001dcc:	f008 f9b8 	bl	800a140 <HAL_TIM_ConfigClockSource>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001dd6:	f001 fafb 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	4619      	mov	r1, r3
 8001de6:	4806      	ldr	r0, [pc, #24]	@ (8001e00 <MX_TIM15_Init+0x9c>)
 8001de8:	f008 ff88 	bl	800acfc <HAL_TIMEx_MasterConfigSynchronization>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001df2:	f001 faed 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001df6:	bf00      	nop
 8001df8:	3720      	adds	r7, #32
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200008f0 	.word	0x200008f0
 8001e04:	40014000 	.word	0x40014000

08001e08 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e4c <MX_TIM16_Init+0x44>)
 8001e0e:	4a10      	ldr	r2, [pc, #64]	@ (8001e50 <MX_TIM16_Init+0x48>)
 8001e10:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 14999;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <MX_TIM16_Init+0x44>)
 8001e14:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8001e18:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <MX_TIM16_Init+0x44>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <MX_TIM16_Init+0x44>)
 8001e22:	2209      	movs	r2, #9
 8001e24:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e26:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <MX_TIM16_Init+0x44>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	@ (8001e4c <MX_TIM16_Init+0x44>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e32:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <MX_TIM16_Init+0x44>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e38:	4804      	ldr	r0, [pc, #16]	@ (8001e4c <MX_TIM16_Init+0x44>)
 8001e3a:	f007 fc45 	bl	80096c8 <HAL_TIM_Base_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001e44:	f001 fac4 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	2000093c 	.word	0x2000093c
 8001e50:	40014400 	.word	0x40014400

08001e54 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e58:	4b22      	ldr	r3, [pc, #136]	@ (8001ee4 <MX_UART4_Init+0x90>)
 8001e5a:	4a23      	ldr	r2, [pc, #140]	@ (8001ee8 <MX_UART4_Init+0x94>)
 8001e5c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e5e:	4b21      	ldr	r3, [pc, #132]	@ (8001ee4 <MX_UART4_Init+0x90>)
 8001e60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e64:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e66:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee4 <MX_UART4_Init+0x90>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <MX_UART4_Init+0x90>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee4 <MX_UART4_Init+0x90>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <MX_UART4_Init+0x90>)
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7e:	4b19      	ldr	r3, [pc, #100]	@ (8001ee4 <MX_UART4_Init+0x90>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e84:	4b17      	ldr	r3, [pc, #92]	@ (8001ee4 <MX_UART4_Init+0x90>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ee4 <MX_UART4_Init+0x90>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e90:	4b14      	ldr	r3, [pc, #80]	@ (8001ee4 <MX_UART4_Init+0x90>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e96:	4b13      	ldr	r3, [pc, #76]	@ (8001ee4 <MX_UART4_Init+0x90>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e9c:	4811      	ldr	r0, [pc, #68]	@ (8001ee4 <MX_UART4_Init+0x90>)
 8001e9e:	f009 f89d 	bl	800afdc <HAL_UART_Init>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001ea8:	f001 fa92 	bl	80033d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eac:	2100      	movs	r1, #0
 8001eae:	480d      	ldr	r0, [pc, #52]	@ (8001ee4 <MX_UART4_Init+0x90>)
 8001eb0:	f009 fe38 	bl	800bb24 <HAL_UARTEx_SetTxFifoThreshold>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001eba:	f001 fa89 	bl	80033d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4808      	ldr	r0, [pc, #32]	@ (8001ee4 <MX_UART4_Init+0x90>)
 8001ec2:	f009 fe6d 	bl	800bba0 <HAL_UARTEx_SetRxFifoThreshold>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001ecc:	f001 fa80 	bl	80033d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001ed0:	4804      	ldr	r0, [pc, #16]	@ (8001ee4 <MX_UART4_Init+0x90>)
 8001ed2:	f009 fdee 	bl	800bab2 <HAL_UARTEx_DisableFifoMode>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001edc:	f001 fa78 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000988 	.word	0x20000988
 8001ee8:	40004c00 	.word	0x40004c00

08001eec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ef2:	4b22      	ldr	r3, [pc, #136]	@ (8001f7c <MX_DMA_Init+0x90>)
 8001ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef6:	4a21      	ldr	r2, [pc, #132]	@ (8001f7c <MX_DMA_Init+0x90>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	6493      	str	r3, [r2, #72]	@ 0x48
 8001efe:	4b1f      	ldr	r3, [pc, #124]	@ (8001f7c <MX_DMA_Init+0x90>)
 8001f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f7c <MX_DMA_Init+0x90>)
 8001f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8001f7c <MX_DMA_Init+0x90>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f16:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <MX_DMA_Init+0x90>)
 8001f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2100      	movs	r1, #0
 8001f26:	200b      	movs	r0, #11
 8001f28:	f003 ff17 	bl	8005d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f2c:	200b      	movs	r0, #11
 8001f2e:	f003 ff2e 	bl	8005d8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	200c      	movs	r0, #12
 8001f38:	f003 ff0f 	bl	8005d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001f3c:	200c      	movs	r0, #12
 8001f3e:	f003 ff26 	bl	8005d8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	200d      	movs	r0, #13
 8001f48:	f003 ff07 	bl	8005d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001f4c:	200d      	movs	r0, #13
 8001f4e:	f003 ff1e 	bl	8005d8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2100      	movs	r1, #0
 8001f56:	200e      	movs	r0, #14
 8001f58:	f003 feff 	bl	8005d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001f5c:	200e      	movs	r0, #14
 8001f5e:	f003 ff16 	bl	8005d8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2100      	movs	r1, #0
 8001f66:	200f      	movs	r0, #15
 8001f68:	f003 fef7 	bl	8005d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001f6c:	200f      	movs	r0, #15
 8001f6e:	f003 ff0e 	bl	8005d8e <HAL_NVIC_EnableIRQ>

}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000

08001f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08c      	sub	sp, #48	@ 0x30
 8001f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f86:	f107 031c 	add.w	r3, r7, #28
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	60da      	str	r2, [r3, #12]
 8001f94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f96:	4b9a      	ldr	r3, [pc, #616]	@ (8002200 <MX_GPIO_Init+0x280>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9a:	4a99      	ldr	r2, [pc, #612]	@ (8002200 <MX_GPIO_Init+0x280>)
 8001f9c:	f043 0310 	orr.w	r3, r3, #16
 8001fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa2:	4b97      	ldr	r3, [pc, #604]	@ (8002200 <MX_GPIO_Init+0x280>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fae:	4b94      	ldr	r3, [pc, #592]	@ (8002200 <MX_GPIO_Init+0x280>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb2:	4a93      	ldr	r2, [pc, #588]	@ (8002200 <MX_GPIO_Init+0x280>)
 8001fb4:	f043 0304 	orr.w	r3, r3, #4
 8001fb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fba:	4b91      	ldr	r3, [pc, #580]	@ (8002200 <MX_GPIO_Init+0x280>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fc6:	4b8e      	ldr	r3, [pc, #568]	@ (8002200 <MX_GPIO_Init+0x280>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fca:	4a8d      	ldr	r2, [pc, #564]	@ (8002200 <MX_GPIO_Init+0x280>)
 8001fcc:	f043 0320 	orr.w	r3, r3, #32
 8001fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fd2:	4b8b      	ldr	r3, [pc, #556]	@ (8002200 <MX_GPIO_Init+0x280>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	4b88      	ldr	r3, [pc, #544]	@ (8002200 <MX_GPIO_Init+0x280>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe2:	4a87      	ldr	r2, [pc, #540]	@ (8002200 <MX_GPIO_Init+0x280>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fea:	4b85      	ldr	r3, [pc, #532]	@ (8002200 <MX_GPIO_Init+0x280>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff6:	4b82      	ldr	r3, [pc, #520]	@ (8002200 <MX_GPIO_Init+0x280>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffa:	4a81      	ldr	r2, [pc, #516]	@ (8002200 <MX_GPIO_Init+0x280>)
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002002:	4b7f      	ldr	r3, [pc, #508]	@ (8002200 <MX_GPIO_Init+0x280>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800200e:	4b7c      	ldr	r3, [pc, #496]	@ (8002200 <MX_GPIO_Init+0x280>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002012:	4a7b      	ldr	r2, [pc, #492]	@ (8002200 <MX_GPIO_Init+0x280>)
 8002014:	f043 0308 	orr.w	r3, r3, #8
 8002018:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800201a:	4b79      	ldr	r3, [pc, #484]	@ (8002200 <MX_GPIO_Init+0x280>)
 800201c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 8002026:	2200      	movs	r2, #0
 8002028:	2120      	movs	r1, #32
 800202a:	4876      	ldr	r0, [pc, #472]	@ (8002204 <MX_GPIO_Init+0x284>)
 800202c:	f004 fdb4 	bl	8006b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
 8002030:	2201      	movs	r2, #1
 8002032:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002036:	4874      	ldr	r0, [pc, #464]	@ (8002208 <MX_GPIO_Init+0x288>)
 8002038:	f004 fdae 	bl	8006b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, GPIO_PIN_RESET);
 800203c:	2200      	movs	r2, #0
 800203e:	2104      	movs	r1, #4
 8002040:	4871      	ldr	r0, [pc, #452]	@ (8002208 <MX_GPIO_Init+0x288>)
 8002042:	f004 fda9 	bl	8006b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 8002046:	2200      	movs	r2, #0
 8002048:	2120      	movs	r1, #32
 800204a:	4870      	ldr	r0, [pc, #448]	@ (800220c <MX_GPIO_Init+0x28c>)
 800204c:	f004 fda4 	bl	8006b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, NOT_RST_2_Pin|CS_OCD_1_Pin, GPIO_PIN_SET);
 8002050:	2201      	movs	r2, #1
 8002052:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002056:	486b      	ldr	r0, [pc, #428]	@ (8002204 <MX_GPIO_Init+0x284>)
 8002058:	f004 fd9e 	bl	8006b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port, NOT_RST_4_Pin, GPIO_PIN_SET);
 800205c:	2201      	movs	r2, #1
 800205e:	2140      	movs	r1, #64	@ 0x40
 8002060:	486a      	ldr	r0, [pc, #424]	@ (800220c <MX_GPIO_Init+0x28c>)
 8002062:	f004 fd99 	bl	8006b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port, NOT_RST_3_Pin, GPIO_PIN_SET);
 8002066:	2201      	movs	r2, #1
 8002068:	2101      	movs	r1, #1
 800206a:	4869      	ldr	r0, [pc, #420]	@ (8002210 <MX_GPIO_Init+0x290>)
 800206c:	f004 fd94 	bl	8006b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port, NOT_RST_1_Pin, GPIO_PIN_SET);
 8002070:	2201      	movs	r2, #1
 8002072:	2180      	movs	r1, #128	@ 0x80
 8002074:	4867      	ldr	r0, [pc, #412]	@ (8002214 <MX_GPIO_Init+0x294>)
 8002076:	f004 fd8f 	bl	8006b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NOT_FAULT_1_Pin CS_FAULT_2_Pin NOT_FAULT_2_Pin CS_FAULT_1_Pin */
  GPIO_InitStruct.Pin = NOT_FAULT_1_Pin|CS_FAULT_2_Pin|NOT_FAULT_2_Pin|CS_FAULT_1_Pin;
 800207a:	f640 0315 	movw	r3, #2069	@ 0x815
 800207e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002080:	2300      	movs	r3, #0
 8002082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002088:	f107 031c 	add.w	r3, r7, #28
 800208c:	4619      	mov	r1, r3
 800208e:	485d      	ldr	r0, [pc, #372]	@ (8002204 <MX_GPIO_Init+0x284>)
 8002090:	f004 fbe8 	bl	8006864 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_INTERLOCK_Pin */
  GPIO_InitStruct.Pin = RESET_INTERLOCK_Pin;
 8002094:	2320      	movs	r3, #32
 8002096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002098:	2301      	movs	r3, #1
 800209a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_INTERLOCK_GPIO_Port, &GPIO_InitStruct);
 80020a4:	f107 031c 	add.w	r3, r7, #28
 80020a8:	4619      	mov	r1, r3
 80020aa:	4856      	ldr	r0, [pc, #344]	@ (8002204 <MX_GPIO_Init+0x284>)
 80020ac:	f004 fbda 	bl	8006864 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_OCD_2_Pin */
  GPIO_InitStruct.Pin = CS_OCD_2_Pin;
 80020b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80020b6:	2311      	movs	r3, #17
 80020b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	2300      	movs	r3, #0
 80020c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_OCD_2_GPIO_Port, &GPIO_InitStruct);
 80020c2:	f107 031c 	add.w	r3, r7, #28
 80020c6:	4619      	mov	r1, r3
 80020c8:	484f      	ldr	r0, [pc, #316]	@ (8002208 <MX_GPIO_Init+0x288>)
 80020ca:	f004 fbcb 	bl	8006864 <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_3_Pin */
  GPIO_InitStruct.Pin = READY_3_Pin;
 80020ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_3_GPIO_Port, &GPIO_InitStruct);
 80020dc:	f107 031c 	add.w	r3, r7, #28
 80020e0:	4619      	mov	r1, r3
 80020e2:	4849      	ldr	r0, [pc, #292]	@ (8002208 <MX_GPIO_Init+0x288>)
 80020e4:	f004 fbbe 	bl	8006864 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERLOCK_Pin NOT_FAULT_4_Pin */
  GPIO_InitStruct.Pin = INTERLOCK_Pin|NOT_FAULT_4_Pin;
 80020e8:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80020ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f6:	f107 031c 	add.w	r3, r7, #28
 80020fa:	4619      	mov	r1, r3
 80020fc:	4843      	ldr	r0, [pc, #268]	@ (800220c <MX_GPIO_Init+0x28c>)
 80020fe:	f004 fbb1 	bl	8006864 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_FPGA_Pin */
  GPIO_InitStruct.Pin = RESET_FPGA_Pin;
 8002102:	2304      	movs	r3, #4
 8002104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002106:	2301      	movs	r3, #1
 8002108:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_FPGA_GPIO_Port, &GPIO_InitStruct);
 8002112:	f107 031c 	add.w	r3, r7, #28
 8002116:	4619      	mov	r1, r3
 8002118:	483b      	ldr	r0, [pc, #236]	@ (8002208 <MX_GPIO_Init+0x288>)
 800211a:	f004 fba3 	bl	8006864 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_STOP_FPGA_Pin */
  GPIO_InitStruct.Pin = START_STOP_FPGA_Pin;
 800211e:	2320      	movs	r3, #32
 8002120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002122:	2301      	movs	r3, #1
 8002124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(START_STOP_FPGA_GPIO_Port, &GPIO_InitStruct);
 800212e:	f107 031c 	add.w	r3, r7, #28
 8002132:	4619      	mov	r1, r3
 8002134:	4835      	ldr	r0, [pc, #212]	@ (800220c <MX_GPIO_Init+0x28c>)
 8002136:	f004 fb95 	bl	8006864 <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_2_Pin */
  GPIO_InitStruct.Pin = READY_2_Pin;
 800213a:	2301      	movs	r3, #1
 800213c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800213e:	2300      	movs	r3, #0
 8002140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_2_GPIO_Port, &GPIO_InitStruct);
 8002146:	f107 031c 	add.w	r3, r7, #28
 800214a:	4619      	mov	r1, r3
 800214c:	4831      	ldr	r0, [pc, #196]	@ (8002214 <MX_GPIO_Init+0x294>)
 800214e:	f004 fb89 	bl	8006864 <HAL_GPIO_Init>

  /*Configure GPIO pins : NOT_RST_2_Pin CS_OCD_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_2_Pin|CS_OCD_1_Pin;
 8002152:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002158:	2311      	movs	r3, #17
 800215a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002164:	f107 031c 	add.w	r3, r7, #28
 8002168:	4619      	mov	r1, r3
 800216a:	4826      	ldr	r0, [pc, #152]	@ (8002204 <MX_GPIO_Init+0x284>)
 800216c:	f004 fb7a 	bl	8006864 <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_4_Pin */
  GPIO_InitStruct.Pin = NOT_RST_4_Pin;
 8002170:	2340      	movs	r3, #64	@ 0x40
 8002172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002174:	2311      	movs	r3, #17
 8002176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2300      	movs	r3, #0
 800217e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_4_GPIO_Port, &GPIO_InitStruct);
 8002180:	f107 031c 	add.w	r3, r7, #28
 8002184:	4619      	mov	r1, r3
 8002186:	4821      	ldr	r0, [pc, #132]	@ (800220c <MX_GPIO_Init+0x28c>)
 8002188:	f004 fb6c 	bl	8006864 <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_4_Pin */
  GPIO_InitStruct.Pin = READY_4_Pin;
 800218c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_4_GPIO_Port, &GPIO_InitStruct);
 800219a:	f107 031c 	add.w	r3, r7, #28
 800219e:	4619      	mov	r1, r3
 80021a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021a4:	f004 fb5e 	bl	8006864 <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_3_Pin */
  GPIO_InitStruct.Pin = NOT_RST_3_Pin;
 80021a8:	2301      	movs	r3, #1
 80021aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80021ac:	2311      	movs	r3, #17
 80021ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_3_GPIO_Port, &GPIO_InitStruct);
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	4619      	mov	r1, r3
 80021be:	4814      	ldr	r0, [pc, #80]	@ (8002210 <MX_GPIO_Init+0x290>)
 80021c0:	f004 fb50 	bl	8006864 <HAL_GPIO_Init>

  /*Configure GPIO pins : READY_1_Pin PD5 NOT_FAULT_3_Pin */
  GPIO_InitStruct.Pin = READY_1_Pin|GPIO_PIN_5|NOT_FAULT_3_Pin;
 80021c4:	2370      	movs	r3, #112	@ 0x70
 80021c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021c8:	2300      	movs	r3, #0
 80021ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021d0:	f107 031c 	add.w	r3, r7, #28
 80021d4:	4619      	mov	r1, r3
 80021d6:	480e      	ldr	r0, [pc, #56]	@ (8002210 <MX_GPIO_Init+0x290>)
 80021d8:	f004 fb44 	bl	8006864 <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_1_Pin;
 80021dc:	2380      	movs	r3, #128	@ 0x80
 80021de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80021e0:	2311      	movs	r3, #17
 80021e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e8:	2300      	movs	r3, #0
 80021ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_1_GPIO_Port, &GPIO_InitStruct);
 80021ec:	f107 031c 	add.w	r3, r7, #28
 80021f0:	4619      	mov	r1, r3
 80021f2:	4808      	ldr	r0, [pc, #32]	@ (8002214 <MX_GPIO_Init+0x294>)
 80021f4:	f004 fb36 	bl	8006864 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021f8:	bf00      	nop
 80021fa:	3730      	adds	r7, #48	@ 0x30
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	48001000 	.word	0x48001000
 8002208:	48001400 	.word	0x48001400
 800220c:	48000800 	.word	0x48000800
 8002210:	48000c00 	.word	0x48000c00
 8002214:	48000400 	.word	0x48000400

08002218 <handle_event>:

/* USER CODE BEGIN 4 */

ConverterState handle_event(ConverterState currentState, ConverterEvent event) {
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	460a      	mov	r2, r1
 8002222:	71fb      	strb	r3, [r7, #7]
 8002224:	4613      	mov	r3, r2
 8002226:	71bb      	strb	r3, [r7, #6]
    switch (currentState) {
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	2b05      	cmp	r3, #5
 800222c:	d834      	bhi.n	8002298 <handle_event+0x80>
 800222e:	a201      	add	r2, pc, #4	@ (adr r2, 8002234 <handle_event+0x1c>)
 8002230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002234:	0800224d 	.word	0x0800224d
 8002238:	08002257 	.word	0x08002257
 800223c:	08002261 	.word	0x08002261
 8002240:	08002277 	.word	0x08002277
 8002244:	0800228b 	.word	0x0800228b
 8002248:	08002295 	.word	0x08002295
        case STATE_INIT:
            if (event == EVENT_START)
 800224c:	79bb      	ldrb	r3, [r7, #6]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d124      	bne.n	800229c <handle_event+0x84>
            {
                return STATE_SOFT_START;
 8002252:	2302      	movs	r3, #2
 8002254:	e02c      	b.n	80022b0 <handle_event+0x98>
            }
            break;
        case STATE_STANDBY:
            if (event == EVENT_START)
 8002256:	79bb      	ldrb	r3, [r7, #6]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d121      	bne.n	80022a0 <handle_event+0x88>
            {
                return STATE_SOFT_START;
 800225c:	2302      	movs	r3, #2
 800225e:	e027      	b.n	80022b0 <handle_event+0x98>
            }
            break;
        case STATE_SOFT_START:
            if (event == EVENT_FAULT)
 8002260:	79bb      	ldrb	r3, [r7, #6]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <handle_event+0x52>
            {
                return STATE_FAULT;
 8002266:	2304      	movs	r3, #4
 8002268:	e022      	b.n	80022b0 <handle_event+0x98>
            } else if (RAMP_FINISHED) {
 800226a:	4b14      	ldr	r3, [pc, #80]	@ (80022bc <handle_event+0xa4>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d018      	beq.n	80022a4 <handle_event+0x8c>
                return STATE_REGULATION;
 8002272:	2303      	movs	r3, #3
 8002274:	e01c      	b.n	80022b0 <handle_event+0x98>
            }
            break;
        case STATE_REGULATION:
        	//USB_SendString("State: INIT -> RUNNING\r\n");
            if (event == EVENT_FAULT)
 8002276:	79bb      	ldrb	r3, [r7, #6]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <handle_event+0x68>
            {
                return STATE_FAULT;
 800227c:	2304      	movs	r3, #4
 800227e:	e017      	b.n	80022b0 <handle_event+0x98>
            } else if (event == EVENT_SHUTDOWN)
 8002280:	79bb      	ldrb	r3, [r7, #6]
 8002282:	2b03      	cmp	r3, #3
 8002284:	d110      	bne.n	80022a8 <handle_event+0x90>
            {
                return STATE_SHUTDOWN;
 8002286:	2305      	movs	r3, #5
 8002288:	e012      	b.n	80022b0 <handle_event+0x98>
            }

            break;
        case STATE_FAULT:
            if (event == EVENT_CLEAR_FAULT)
 800228a:	79bb      	ldrb	r3, [r7, #6]
 800228c:	2b02      	cmp	r3, #2
 800228e:	d10d      	bne.n	80022ac <handle_event+0x94>
            {
                return STATE_STANDBY;
 8002290:	2301      	movs	r3, #1
 8002292:	e00d      	b.n	80022b0 <handle_event+0x98>
            }
            break;
        case STATE_SHUTDOWN:
            if (1)
            {
                return STATE_STANDBY;
 8002294:	2301      	movs	r3, #1
 8002296:	e00b      	b.n	80022b0 <handle_event+0x98>
            }
            break;
        default:
            break;
 8002298:	bf00      	nop
 800229a:	e008      	b.n	80022ae <handle_event+0x96>
            break;
 800229c:	bf00      	nop
 800229e:	e006      	b.n	80022ae <handle_event+0x96>
            break;
 80022a0:	bf00      	nop
 80022a2:	e004      	b.n	80022ae <handle_event+0x96>
            break;
 80022a4:	bf00      	nop
 80022a6:	e002      	b.n	80022ae <handle_event+0x96>
            break;
 80022a8:	bf00      	nop
 80022aa:	e000      	b.n	80022ae <handle_event+0x96>
            break;
 80022ac:	bf00      	nop
    }
    return currentState; // No state change
 80022ae:	79fb      	ldrb	r3, [r7, #7]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	20000a50 	.word	0x20000a50

080022c0 <Set_PWM_DutyCycle>:
       // float TEMPERATURE_AFTER_CONVERSION_FROM_ADC = (((adc_value/4096.0f)*3.3f) - 0.4f)/0.0195f;
       // return TEMPERATURE_AFTER_CONVERSION_FROM_ADC;

}

void Set_PWM_DutyCycle(uint32_t dutyCycle) { // dutycyle for FAN SPEED CONTROl
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    if (dutyCycle > 100) dutyCycle = 100;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b64      	cmp	r3, #100	@ 0x64
 80022cc:	d901      	bls.n	80022d2 <Set_PWM_DutyCycle+0x12>
 80022ce:	2364      	movs	r3, #100	@ 0x64
 80022d0:	607b      	str	r3, [r7, #4]
    uint32_t pulse = (htim4.Init.Period + 1) * dutyCycle / 100 - 1;
 80022d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002300 <Set_PWM_DutyCycle+0x40>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	3301      	adds	r3, #1
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	fb02 f303 	mul.w	r3, r2, r3
 80022de:	4a09      	ldr	r2, [pc, #36]	@ (8002304 <Set_PWM_DutyCycle+0x44>)
 80022e0:	fba2 2303 	umull	r2, r3, r2, r3
 80022e4:	095b      	lsrs	r3, r3, #5
 80022e6:	3b01      	subs	r3, #1
 80022e8:	60fb      	str	r3, [r7, #12]
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 80022ea:	4b05      	ldr	r3, [pc, #20]	@ (8002300 <Set_PWM_DutyCycle+0x40>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80022f2:	bf00      	nop
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	200007c0 	.word	0x200007c0
 8002304:	51eb851f 	.word	0x51eb851f

08002308 <HAL_ADC_ConvCpltCallback>:
//ADC save to array and moving average
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC5)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a14      	ldr	r2, [pc, #80]	@ (8002368 <HAL_ADC_ConvCpltCallback+0x60>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d120      	bne.n	800235c <HAL_ADC_ConvCpltCallback+0x54>
		    {
		        uint32_t sum = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	e00b      	b.n	800233c <HAL_ADC_ConvCpltCallback+0x34>
		        {
		            sum += adc5_dma_buffer[i];
 8002324:	4a11      	ldr	r2, [pc, #68]	@ (800236c <HAL_ADC_ConvCpltCallback+0x64>)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800232c:	b29b      	uxth	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	3301      	adds	r3, #1
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b09      	cmp	r3, #9
 8002340:	ddf0      	ble.n	8002324 <HAL_ADC_ConvCpltCallback+0x1c>
		        }
		        adc_moving_average = ((sum / MA_WINDOW_SIZE)*3300)/4096;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4a0a      	ldr	r2, [pc, #40]	@ (8002370 <HAL_ADC_ConvCpltCallback+0x68>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	08db      	lsrs	r3, r3, #3
 800234c:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8002350:	fb02 f303 	mul.w	r3, r2, r3
 8002354:	0b1b      	lsrs	r3, r3, #12
 8002356:	b29a      	uxth	r2, r3
 8002358:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <HAL_ADC_ConvCpltCallback+0x6c>)
 800235a:	801a      	strh	r2, [r3, #0]
		        // Restart the DMA transfer
		       // HAL_ADC_Start_DMA(hadc, (uint32_t*)adc5_dma_buffer, MA_WINDOW_SIZE);
		    }


}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	50000600 	.word	0x50000600
 800236c:	20000a60 	.word	0x20000a60
 8002370:	cccccccd 	.word	0xcccccccd
 8002374:	20000a74 	.word	0x20000a74

08002378 <Update_PWM_Frequency>:
        }
    }
}

void Update_PWM_Frequency(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t frequency)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	@ 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
	 uint32_t timer_clock = 150000000;  // Assuming a 150 MHz timer clock
 8002384:	4b33      	ldr	r3, [pc, #204]	@ (8002454 <Update_PWM_Frequency+0xdc>)
 8002386:	61bb      	str	r3, [r7, #24]
	    uint32_t prescaler = htim->Init.Prescaler + 1;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	3301      	adds	r3, #1
 800238e:	617b      	str	r3, [r7, #20]
	    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	fb02 f303 	mul.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	fbb2 f3f3 	udiv	r3, r2, r3
 800239e:	3b01      	subs	r3, #1
 80023a0:	61fb      	str	r3, [r7, #28]

	    // Ensure period is within valid range
	    if (period > 65535) {
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023a8:	d314      	bcc.n	80023d4 <Update_PWM_Frequency+0x5c>
	        // Adjust prescaler to bring period within range
	        prescaler = (prescaler * (period / 65536)) + 1;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	0c1b      	lsrs	r3, r3, #16
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	fb02 f303 	mul.w	r3, r2, r3
 80023b4:	3301      	adds	r3, #1
 80023b6:	617b      	str	r3, [r7, #20]
	        period = (timer_clock / (prescaler * frequency)) - 1;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	fb02 f303 	mul.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	61fb      	str	r3, [r7, #28]
	        __HAL_TIM_SET_PRESCALER(htim, prescaler - 1);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	3a01      	subs	r2, #1
 80023d2:	629a      	str	r2, [r3, #40]	@ 0x28
	    }

	    // Update the period register (ARR) with double buffering
	    __HAL_TIM_SET_AUTORELOAD(htim, period);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	69fa      	ldr	r2, [r7, #28]
 80023da:	62da      	str	r2, [r3, #44]	@ 0x2c
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	69fa      	ldr	r2, [r7, #28]
 80023e0:	60da      	str	r2, [r3, #12]

	    // Set the duty cycle to approximately 50%
	    uint32_t pulse = period / 2;
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	085b      	lsrs	r3, r3, #1
 80023e6:	613b      	str	r3, [r7, #16]
	    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d104      	bne.n	80023f8 <Update_PWM_Frequency+0x80>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80023f6:	e023      	b.n	8002440 <Update_PWM_Frequency+0xc8>
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d104      	bne.n	8002408 <Update_PWM_Frequency+0x90>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	6393      	str	r3, [r2, #56]	@ 0x38
 8002406:	e01b      	b.n	8002440 <Update_PWM_Frequency+0xc8>
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b08      	cmp	r3, #8
 800240c:	d104      	bne.n	8002418 <Update_PWM_Frequency+0xa0>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002416:	e013      	b.n	8002440 <Update_PWM_Frequency+0xc8>
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b0c      	cmp	r3, #12
 800241c:	d104      	bne.n	8002428 <Update_PWM_Frequency+0xb0>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	6413      	str	r3, [r2, #64]	@ 0x40
 8002426:	e00b      	b.n	8002440 <Update_PWM_Frequency+0xc8>
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b10      	cmp	r3, #16
 800242c:	d104      	bne.n	8002438 <Update_PWM_Frequency+0xc0>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	6493      	str	r3, [r2, #72]	@ 0x48
 8002436:	e003      	b.n	8002440 <Update_PWM_Frequency+0xc8>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	64d3      	str	r3, [r2, #76]	@ 0x4c

	    // Manually generate an update event by setting the UG bit in the EGR register
	    htim->Instance->EGR = TIM_EGR_UG;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2201      	movs	r2, #1
 8002446:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_AUTORELOAD(htim, period);

    // Restart the timer PWM generation
    HAL_TIM_PWM_Stop(htim, channel);
    HAL_TIM_PWM_Start(htim, channel);*/
}
 8002448:	bf00      	nop
 800244a:	3724      	adds	r7, #36	@ 0x24
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	08f0d180 	.word	0x08f0d180

08002458 <Check_Faults>:
	        dac_buffer[i] = (((1/3.3)*res12_b) + ((0.5/3.3)*res12_b) * sin(2 * M_PI * i/BUFFER_SIZE));
	    }
}

uint8_t Check_Faults()
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	// Faults pins are from gate driver and they are active pull down
	// 4 fault pins from 4 gate driver + 2 fault pins from  2 currents sensors  = 6 pins
	if(HAL_GPIO_ReadPin(CS_FAULT_1_GPIO_Port, CS_FAULT_1_Pin) && HAL_GPIO_ReadPin(CS_FAULT_2_GPIO_Port, CS_FAULT_2_Pin)
 800245c:	2101      	movs	r1, #1
 800245e:	4817      	ldr	r0, [pc, #92]	@ (80024bc <Check_Faults+0x64>)
 8002460:	f004 fb82 	bl	8006b68 <HAL_GPIO_ReadPin>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d025      	beq.n	80024b6 <Check_Faults+0x5e>
 800246a:	2110      	movs	r1, #16
 800246c:	4813      	ldr	r0, [pc, #76]	@ (80024bc <Check_Faults+0x64>)
 800246e:	f004 fb7b 	bl	8006b68 <HAL_GPIO_ReadPin>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01e      	beq.n	80024b6 <Check_Faults+0x5e>
			&& HAL_GPIO_ReadPin(NOT_FAULT_1_GPIO_Port, NOT_FAULT_1_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_2_GPIO_Port, NOT_FAULT_2_Pin)
 8002478:	2104      	movs	r1, #4
 800247a:	4810      	ldr	r0, [pc, #64]	@ (80024bc <Check_Faults+0x64>)
 800247c:	f004 fb74 	bl	8006b68 <HAL_GPIO_ReadPin>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d017      	beq.n	80024b6 <Check_Faults+0x5e>
 8002486:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800248a:	480c      	ldr	r0, [pc, #48]	@ (80024bc <Check_Faults+0x64>)
 800248c:	f004 fb6c 	bl	8006b68 <HAL_GPIO_ReadPin>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00f      	beq.n	80024b6 <Check_Faults+0x5e>
			&& HAL_GPIO_ReadPin(NOT_FAULT_3_GPIO_Port, NOT_FAULT_3_Pin) && HAL_GPIO_ReadPin(NOT_RST_4_GPIO_Port, NOT_RST_4_Pin) )
 8002496:	2140      	movs	r1, #64	@ 0x40
 8002498:	4809      	ldr	r0, [pc, #36]	@ (80024c0 <Check_Faults+0x68>)
 800249a:	f004 fb65 	bl	8006b68 <HAL_GPIO_ReadPin>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <Check_Faults+0x5e>
 80024a4:	2140      	movs	r1, #64	@ 0x40
 80024a6:	4807      	ldr	r0, [pc, #28]	@ (80024c4 <Check_Faults+0x6c>)
 80024a8:	f004 fb5e 	bl	8006b68 <HAL_GPIO_ReadPin>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <Check_Faults+0x5e>
		return 0; // if all pins is 1 then all is ready, there is not faults then return 0
 80024b2:	2300      	movs	r3, #0
 80024b4:	e000      	b.n	80024b8 <Check_Faults+0x60>

	return 1;
 80024b6:	2301      	movs	r3, #1
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	48001000 	.word	0x48001000
 80024c0:	48000c00 	.word	0x48000c00
 80024c4:	48000800 	.word	0x48000800

080024c8 <Check_Ready>:

uint8_t Check_Ready()
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
	// Ready pins are from gate driver and they are active pull up
	// 4 ready pins from 4 gate drivers
	if(HAL_GPIO_ReadPin(READY_1_GPIO_Port, READY_1_Pin) && HAL_GPIO_ReadPin(READY_2_GPIO_Port, READY_2_Pin)
 80024cc:	2110      	movs	r1, #16
 80024ce:	4811      	ldr	r0, [pc, #68]	@ (8002514 <Check_Ready+0x4c>)
 80024d0:	f004 fb4a 	bl	8006b68 <HAL_GPIO_ReadPin>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d019      	beq.n	800250e <Check_Ready+0x46>
 80024da:	2101      	movs	r1, #1
 80024dc:	480e      	ldr	r0, [pc, #56]	@ (8002518 <Check_Ready+0x50>)
 80024de:	f004 fb43 	bl	8006b68 <HAL_GPIO_ReadPin>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d012      	beq.n	800250e <Check_Ready+0x46>
			&& HAL_GPIO_ReadPin(READY_3_GPIO_Port, READY_3_Pin) && HAL_GPIO_ReadPin(READY_4_GPIO_Port, READY_4_Pin) )
 80024e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024ec:	480b      	ldr	r0, [pc, #44]	@ (800251c <Check_Ready+0x54>)
 80024ee:	f004 fb3b 	bl	8006b68 <HAL_GPIO_ReadPin>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <Check_Ready+0x46>
 80024f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002500:	f004 fb32 	bl	8006b68 <HAL_GPIO_ReadPin>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <Check_Ready+0x46>
			return 1; // return 1 when is gate drivers ready
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <Check_Ready+0x48>

		return 0;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	bd80      	pop	{r7, pc}
 8002514:	48000c00 	.word	0x48000c00
 8002518:	48000400 	.word	0x48000400
 800251c:	48001400 	.word	0x48001400

08002520 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002520:	b5b0      	push	{r4, r5, r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	// SOFT start_program RAMP REALISATION
	//  Ts 20khz
	if(htim->Instance == TIM15)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a72      	ldr	r2, [pc, #456]	@ (80026f8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	f040 823e 	bne.w	80029b0 <HAL_TIM_PeriodElapsedCallback+0x490>
	{
		if(currentState == STATE_SOFT_START || currentState == STATE_REGULATION )
 8002534:	4b71      	ldr	r3, [pc, #452]	@ (80026fc <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d004      	beq.n	8002546 <HAL_TIM_PeriodElapsedCallback+0x26>
 800253c:	4b6f      	ldr	r3, [pc, #444]	@ (80026fc <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b03      	cmp	r3, #3
 8002542:	f040 8235 	bne.w	80029b0 <HAL_TIM_PeriodElapsedCallback+0x490>
		{
		//current_sensor1_vref = adc3_dma_buffer[0]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[0], pcb_temp)/4096)*3.3;
		//current_sensor2_vref = adc3_dma_buffer[1]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[1], pcb_temp)/4096)*3.3;

		input_voltage = (int)((((adc3_dma_buffer[2])*3300)/4096-200)*18.81);//[mV]		((Low_pass_filter(adc3_dma_buffer[2], input_voltage)/4096)*3.3-0.2)*27.1;
 8002546:	4b6e      	ldr	r3, [pc, #440]	@ (8002700 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002548:	889b      	ldrh	r3, [r3, #4]
 800254a:	b29b      	uxth	r3, r3
 800254c:	461a      	mov	r2, r3
 800254e:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	da01      	bge.n	800255e <HAL_TIM_PeriodElapsedCallback+0x3e>
 800255a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800255e:	131b      	asrs	r3, r3, #12
 8002560:	3bc8      	subs	r3, #200	@ 0xc8
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe f806 	bl	8000574 <__aeabi_i2d>
 8002568:	a35b      	add	r3, pc, #364	@ (adr r3, 80026d8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800256a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256e:	f7fe f86b 	bl	8000648 <__aeabi_dmul>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4610      	mov	r0, r2
 8002578:	4619      	mov	r1, r3
 800257a:	f7fe fb15 	bl	8000ba8 <__aeabi_d2iz>
 800257e:	4603      	mov	r3, r0
 8002580:	461a      	mov	r2, r3
 8002582:	4b60      	ldr	r3, [pc, #384]	@ (8002704 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002584:	601a      	str	r2, [r3, #0]
		output_voltage = (int)((((adc4_dma_buffer[1])*3300)/4096-200)*18.81);//[mV] 		((Low_pass_filter(adc4_dma_buffer, output_voltage)/4096)*3.3-0.2)*27.1;
 8002586:	4b60      	ldr	r3, [pc, #384]	@ (8002708 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002588:	885b      	ldrh	r3, [r3, #2]
 800258a:	b29b      	uxth	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	da01      	bge.n	800259e <HAL_TIM_PeriodElapsedCallback+0x7e>
 800259a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800259e:	131b      	asrs	r3, r3, #12
 80025a0:	3bc8      	subs	r3, #200	@ 0xc8
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fd ffe6 	bl	8000574 <__aeabi_i2d>
 80025a8:	a34b      	add	r3, pc, #300	@ (adr r3, 80026d8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	f7fe f84b 	bl	8000648 <__aeabi_dmul>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	f7fe faf5 	bl	8000ba8 <__aeabi_d2iz>
 80025be:	4603      	mov	r3, r0
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b52      	ldr	r3, [pc, #328]	@ (800270c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80025c4:	601a      	str	r2, [r3, #0]

		imax2_sum = (adc_moving_average-1450)*0.384; //[mA] 0.20V - -0.5A || 1.45v - 0A || 2.77V - 0.5A		0.384 A/V
 80025c6:	4b52      	ldr	r3, [pc, #328]	@ (8002710 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	f2a3 53aa 	subw	r3, r3, #1450	@ 0x5aa
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd ffd0 	bl	8000574 <__aeabi_i2d>
 80025d4:	a342      	add	r3, pc, #264	@ (adr r3, 80026e0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80025d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025da:	f7fe f835 	bl	8000648 <__aeabi_dmul>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	f7fe fb07 	bl	8000bf8 <__aeabi_d2uiz>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4a49      	ldr	r2, [pc, #292]	@ (8002714 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80025ee:	6013      	str	r3, [r2, #0]
		Gv = (float)output_voltage/(float)input_voltage;//output_voltage/input_voltage;
 80025f0:	4b46      	ldr	r3, [pc, #280]	@ (800270c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	ee07 3a90 	vmov	s15, r3
 80025f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025fc:	4b41      	ldr	r3, [pc, #260]	@ (8002704 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	ee07 3a90 	vmov	s15, r3
 8002604:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260c:	4b42      	ldr	r3, [pc, #264]	@ (8002718 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800260e:	edc3 7a00 	vstr	s15, [r3]

		if(Gv<2) //CZARY
 8002612:	4b41      	ldr	r3, [pc, #260]	@ (8002718 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002614:	edd3 7a00 	vldr	s15, [r3]
 8002618:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800261c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002624:	d57e      	bpl.n	8002724 <HAL_TIM_PeriodElapsedCallback+0x204>
		{
			delay_tr = acos(1-Gv)/wr;
 8002626:	4b3c      	ldr	r3, [pc, #240]	@ (8002718 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002628:	edd3 7a00 	vldr	s15, [r3]
 800262c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002634:	ee17 0a90 	vmov	r0, s15
 8002638:	f7fd ffae 	bl	8000598 <__aeabi_f2d>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	ec43 2b10 	vmov	d0, r2, r3
 8002644:	f012 ffac 	bl	80155a0 <acos>
 8002648:	ec51 0b10 	vmov	r0, r1, d0
 800264c:	a326      	add	r3, pc, #152	@ (adr r3, 80026e8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	f7fe f923 	bl	800089c <__aeabi_ddiv>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	f7fe faeb 	bl	8000c38 <__aeabi_d2f>
 8002662:	4603      	mov	r3, r0
 8002664:	4a2d      	ldr	r2, [pc, #180]	@ (800271c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002666:	6013      	str	r3, [r2, #0]
			imin = output_voltage*sqrt((2-Gv)/Gv)/Z; //[mA] Negative current needed to Zero voltage switching in resonance
 8002668:	4b28      	ldr	r3, [pc, #160]	@ (800270c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7fd ff71 	bl	8000554 <__aeabi_ui2d>
 8002672:	4604      	mov	r4, r0
 8002674:	460d      	mov	r5, r1
 8002676:	4b28      	ldr	r3, [pc, #160]	@ (8002718 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002678:	edd3 7a00 	vldr	s15, [r3]
 800267c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002680:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002684:	4b24      	ldr	r3, [pc, #144]	@ (8002718 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002686:	edd3 7a00 	vldr	s15, [r3]
 800268a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800268e:	ee16 0a90 	vmov	r0, s13
 8002692:	f7fd ff81 	bl	8000598 <__aeabi_f2d>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	ec43 2b10 	vmov	d0, r2, r3
 800269e:	f013 f823 	bl	80156e8 <sqrt>
 80026a2:	ec53 2b10 	vmov	r2, r3, d0
 80026a6:	4620      	mov	r0, r4
 80026a8:	4629      	mov	r1, r5
 80026aa:	f7fd ffcd 	bl	8000648 <__aeabi_dmul>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4610      	mov	r0, r2
 80026b4:	4619      	mov	r1, r3
 80026b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80026f0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80026b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026bc:	f7fe f8ee 	bl	800089c <__aeabi_ddiv>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4610      	mov	r0, r2
 80026c6:	4619      	mov	r1, r3
 80026c8:	f7fe fa96 	bl	8000bf8 <__aeabi_d2uiz>
 80026cc:	4603      	mov	r3, r0
 80026ce:	4a14      	ldr	r2, [pc, #80]	@ (8002720 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e062      	b.n	800279a <HAL_TIM_PeriodElapsedCallback+0x27a>
 80026d4:	f3af 8000 	nop.w
 80026d8:	28f5c28f 	.word	0x28f5c28f
 80026dc:	4032cf5c 	.word	0x4032cf5c
 80026e0:	bc6a7efa 	.word	0xbc6a7efa
 80026e4:	3fd89374 	.word	0x3fd89374
 80026e8:	78000000 	.word	0x78000000
 80026ec:	4190942a 	.word	0x4190942a
 80026f0:	9374bc6a 	.word	0x9374bc6a
 80026f4:	40624418 	.word	0x40624418
 80026f8:	40014000 	.word	0x40014000
 80026fc:	20000b4a 	.word	0x20000b4a
 8002700:	20000a38 	.word	0x20000a38
 8002704:	20000a2c 	.word	0x20000a2c
 8002708:	20000a4c 	.word	0x20000a4c
 800270c:	20000a44 	.word	0x20000a44
 8002710:	20000a74 	.word	0x20000a74
 8002714:	20000a5c 	.word	0x20000a5c
 8002718:	20000004 	.word	0x20000004
 800271c:	20000a54 	.word	0x20000a54
 8002720:	20000a28 	.word	0x20000a28

		} else if(Gv>=2)
 8002724:	4bbe      	ldr	r3, [pc, #760]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800272e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002736:	db30      	blt.n	800279a <HAL_TIM_PeriodElapsedCallback+0x27a>
		{
			delay_tr = (M_PI-acos(1/(Gv-1)))/wr;
 8002738:	4bb9      	ldr	r3, [pc, #740]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x500>)
 800273a:	edd3 7a00 	vldr	s15, [r3]
 800273e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002742:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002746:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800274a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800274e:	ee16 0a90 	vmov	r0, s13
 8002752:	f7fd ff21 	bl	8000598 <__aeabi_f2d>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	ec43 2b10 	vmov	d0, r2, r3
 800275e:	f012 ff1f 	bl	80155a0 <acos>
 8002762:	ec53 2b10 	vmov	r2, r3, d0
 8002766:	a1a4      	add	r1, pc, #656	@ (adr r1, 80029f8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8002768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800276c:	f7fd fdb4 	bl	80002d8 <__aeabi_dsub>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4610      	mov	r0, r2
 8002776:	4619      	mov	r1, r3
 8002778:	a3a1      	add	r3, pc, #644	@ (adr r3, 8002a00 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 800277a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277e:	f7fe f88d 	bl	800089c <__aeabi_ddiv>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4610      	mov	r0, r2
 8002788:	4619      	mov	r1, r3
 800278a:	f7fe fa55 	bl	8000c38 <__aeabi_d2f>
 800278e:	4603      	mov	r3, r0
 8002790:	4aa4      	ldr	r2, [pc, #656]	@ (8002a24 <HAL_TIM_PeriodElapsedCallback+0x504>)
 8002792:	6013      	str	r3, [r2, #0]
			imin = 0;
 8002794:	4ba4      	ldr	r3, [pc, #656]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
		}
		if(delay_tr<0.01){
 800279a:	4ba2      	ldr	r3, [pc, #648]	@ (8002a24 <HAL_TIM_PeriodElapsedCallback+0x504>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd fefa 	bl	8000598 <__aeabi_f2d>
 80027a4:	a398      	add	r3, pc, #608	@ (adr r3, 8002a08 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 80027a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027aa:	f7fe f9bf 	bl	8000b2c <__aeabi_dcmplt>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d017      	beq.n	80027e4 <HAL_TIM_PeriodElapsedCallback+0x2c4>
		int delay_tr_freq = (int)(1/delay_tr);
 80027b4:	4b9b      	ldr	r3, [pc, #620]	@ (8002a24 <HAL_TIM_PeriodElapsedCallback+0x504>)
 80027b6:	ed93 7a00 	vldr	s14, [r3]
 80027ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027c6:	ee17 3a90 	vmov	r3, s15
 80027ca:	60fb      	str	r3, [r7, #12]
		if(delay_tr_freq>20000000) delay_tr_freq = 15000000;//10Mhz
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4a97      	ldr	r2, [pc, #604]	@ (8002a2c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	dd01      	ble.n	80027d8 <HAL_TIM_PeriodElapsedCallback+0x2b8>
 80027d4:	4b96      	ldr	r3, [pc, #600]	@ (8002a30 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80027d6:	60fb      	str	r3, [r7, #12]
		Update_PWM_Frequency(&htim1, TIM_CHANNEL_1, delay_tr_freq); // Set TIM1 CH1 to freq that is delay tr and send to fpga
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	461a      	mov	r2, r3
 80027dc:	2100      	movs	r1, #0
 80027de:	4895      	ldr	r0, [pc, #596]	@ (8002a34 <HAL_TIM_PeriodElapsedCallback+0x514>)
 80027e0:	f7ff fdca 	bl	8002378 <Update_PWM_Frequency>
		}

		if(currentState == STATE_SOFT_START) RAMP(); // Adding to Vramp stepping voltage to create starting ramp
 80027e4:	4b94      	ldr	r3, [pc, #592]	@ (8002a38 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d101      	bne.n	80027f0 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 80027ec:	f000 f954 	bl	8002a98 <RAMP>

		regulatorPI(&imax1, &Integral_I, output_voltage, Vramp, LIM_PEAK_POS, LIM_PEAK_NEG, Kp, Ti, Ts);
 80027f0:	4b92      	ldr	r3, [pc, #584]	@ (8002a3c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	ee07 3a90 	vmov	s15, r3
 80027f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027fc:	4b90      	ldr	r3, [pc, #576]	@ (8002a40 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	ee07 3a10 	vmov	s14, r3
 8002804:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002808:	4b8e      	ldr	r3, [pc, #568]	@ (8002a44 <HAL_TIM_PeriodElapsedCallback+0x524>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	ee06 3a90 	vmov	s13, r3
 8002810:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002814:	4b8c      	ldr	r3, [pc, #560]	@ (8002a48 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	ee06 3a10 	vmov	s12, r3
 800281c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8002820:	4b8a      	ldr	r3, [pc, #552]	@ (8002a4c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8002822:	edd3 5a00 	vldr	s11, [r3]
 8002826:	4b8a      	ldr	r3, [pc, #552]	@ (8002a50 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8002828:	ed93 5a00 	vldr	s10, [r3]
 800282c:	ed9f 3a89 	vldr	s6, [pc, #548]	@ 8002a54 <HAL_TIM_PeriodElapsedCallback+0x534>
 8002830:	eef0 2a45 	vmov.f32	s5, s10
 8002834:	eeb0 2a65 	vmov.f32	s4, s11
 8002838:	eef0 1a46 	vmov.f32	s3, s12
 800283c:	eeb0 1a66 	vmov.f32	s2, s13
 8002840:	eef0 0a47 	vmov.f32	s1, s14
 8002844:	eeb0 0a67 	vmov.f32	s0, s15
 8002848:	4983      	ldr	r1, [pc, #524]	@ (8002a58 <HAL_TIM_PeriodElapsedCallback+0x538>)
 800284a:	4884      	ldr	r0, [pc, #528]	@ (8002a5c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 800284c:	f000 f97e 	bl	8002b4c <regulatorPI>

		if(output_voltage>19000)
 8002850:	4b7a      	ldr	r3, [pc, #488]	@ (8002a3c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f644 2238 	movw	r2, #19000	@ 0x4a38
 8002858:	4293      	cmp	r3, r2
 800285a:	d939      	bls.n	80028d0 <HAL_TIM_PeriodElapsedCallback+0x3b0>
		{
		delay_hc = (2*C_CAP*output_voltage)/imax1;
 800285c:	4b77      	ldr	r3, [pc, #476]	@ (8002a3c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7fd fe77 	bl	8000554 <__aeabi_ui2d>
 8002866:	a36a      	add	r3, pc, #424	@ (adr r3, 8002a10 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286c:	f7fd feec 	bl	8000648 <__aeabi_dmul>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4614      	mov	r4, r2
 8002876:	461d      	mov	r5, r3
 8002878:	4b78      	ldr	r3, [pc, #480]	@ (8002a5c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7fd fe69 	bl	8000554 <__aeabi_ui2d>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4620      	mov	r0, r4
 8002888:	4629      	mov	r1, r5
 800288a:	f7fe f807 	bl	800089c <__aeabi_ddiv>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4610      	mov	r0, r2
 8002894:	4619      	mov	r1, r3
 8002896:	f7fe f9cf 	bl	8000c38 <__aeabi_d2f>
 800289a:	4603      	mov	r3, r0
 800289c:	4a70      	ldr	r2, [pc, #448]	@ (8002a60 <HAL_TIM_PeriodElapsedCallback+0x540>)
 800289e:	6013      	str	r3, [r2, #0]
		int delay_hc_freq = (int)(1/delay_hc);
 80028a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002a60 <HAL_TIM_PeriodElapsedCallback+0x540>)
 80028a2:	ed93 7a00 	vldr	s14, [r3]
 80028a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028b2:	ee17 3a90 	vmov	r3, s15
 80028b6:	60bb      	str	r3, [r7, #8]
		if(delay_hc_freq>20000000) delay_hc_freq = 15000000;//10Mhz jakis problem
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4a5c      	ldr	r2, [pc, #368]	@ (8002a2c <HAL_TIM_PeriodElapsedCallback+0x50c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	dd01      	ble.n	80028c4 <HAL_TIM_PeriodElapsedCallback+0x3a4>
 80028c0:	4b5b      	ldr	r3, [pc, #364]	@ (8002a30 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80028c2:	60bb      	str	r3, [r7, #8]
		Update_PWM_Frequency(&htim8, TIM_CHANNEL_2, delay_hc_freq); // Set TIM8 CH1 o freq that is delay hc and send to fpga
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	461a      	mov	r2, r3
 80028c8:	2104      	movs	r1, #4
 80028ca:	4866      	ldr	r0, [pc, #408]	@ (8002a64 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80028cc:	f7ff fd54 	bl	8002378 <Update_PWM_Frequency>
		}

		imax2 = imax1 + imax2_sum; // imax2_sum signal from FPGA
 80028d0:	4b62      	ldr	r3, [pc, #392]	@ (8002a5c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b64      	ldr	r3, [pc, #400]	@ (8002a68 <HAL_TIM_PeriodElapsedCallback+0x548>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4413      	add	r3, r2
 80028da:	4a64      	ldr	r2, [pc, #400]	@ (8002a6c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80028dc:	6013      	str	r3, [r2, #0]
		// imax1,2 each for branches to make 180 degree shift
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref+((int)imax1*0.025)); // imax1  1.5V is 0A;  1A is 20mV; 1 bit is 0.8mV; imax[mA]*0.02 [V/A]/0.8[mV] = Value for DAC
 80028de:	4b64      	ldr	r3, [pc, #400]	@ (8002a70 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fd fe46 	bl	8000574 <__aeabi_i2d>
 80028e8:	4604      	mov	r4, r0
 80028ea:	460d      	mov	r5, r1
 80028ec:	4b5b      	ldr	r3, [pc, #364]	@ (8002a5c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fd fe3f 	bl	8000574 <__aeabi_i2d>
 80028f6:	a348      	add	r3, pc, #288	@ (adr r3, 8002a18 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80028f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fc:	f7fd fea4 	bl	8000648 <__aeabi_dmul>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4620      	mov	r0, r4
 8002906:	4629      	mov	r1, r5
 8002908:	f7fd fce8 	bl	80002dc <__adddf3>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4610      	mov	r0, r2
 8002912:	4619      	mov	r1, r3
 8002914:	f7fe f970 	bl	8000bf8 <__aeabi_d2uiz>
 8002918:	4603      	mov	r3, r0
 800291a:	2200      	movs	r2, #0
 800291c:	2100      	movs	r1, #0
 800291e:	4855      	ldr	r0, [pc, #340]	@ (8002a74 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8002920:	f003 fb34 	bl	8005f8c <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, current_sensor2_vref+((int)imax2*0.025)); // imax2
 8002924:	4b54      	ldr	r3, [pc, #336]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fe23 	bl	8000574 <__aeabi_i2d>
 800292e:	4604      	mov	r4, r0
 8002930:	460d      	mov	r5, r1
 8002932:	4b4e      	ldr	r3, [pc, #312]	@ (8002a6c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7fd fe1c 	bl	8000574 <__aeabi_i2d>
 800293c:	a336      	add	r3, pc, #216	@ (adr r3, 8002a18 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 800293e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002942:	f7fd fe81 	bl	8000648 <__aeabi_dmul>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4620      	mov	r0, r4
 800294c:	4629      	mov	r1, r5
 800294e:	f7fd fcc5 	bl	80002dc <__adddf3>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	f7fe f94d 	bl	8000bf8 <__aeabi_d2uiz>
 800295e:	4603      	mov	r3, r0
 8002960:	2200      	movs	r2, #0
 8002962:	2110      	movs	r1, #16
 8002964:	4843      	ldr	r0, [pc, #268]	@ (8002a74 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8002966:	f003 fb11 	bl	8005f8c <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref+((int)imin*0.25)); // imin uzyto tutaj wzmacniacza 10x dla sygnalu z sensora pradu wiec ma wzmocnienie 200mv/A a nie 20mv/a
 800296a:	4b41      	ldr	r3, [pc, #260]	@ (8002a70 <HAL_TIM_PeriodElapsedCallback+0x550>)
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fd fe00 	bl	8000574 <__aeabi_i2d>
 8002974:	4604      	mov	r4, r0
 8002976:	460d      	mov	r5, r1
 8002978:	4b2b      	ldr	r3, [pc, #172]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x508>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fdf9 	bl	8000574 <__aeabi_i2d>
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	4b3d      	ldr	r3, [pc, #244]	@ (8002a7c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002988:	f7fd fe5e 	bl	8000648 <__aeabi_dmul>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4620      	mov	r0, r4
 8002992:	4629      	mov	r1, r5
 8002994:	f7fd fca2 	bl	80002dc <__adddf3>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4610      	mov	r0, r2
 800299e:	4619      	mov	r1, r3
 80029a0:	f7fe f92a 	bl	8000bf8 <__aeabi_d2uiz>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2200      	movs	r2, #0
 80029a8:	2100      	movs	r1, #0
 80029aa:	4835      	ldr	r0, [pc, #212]	@ (8002a80 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80029ac:	f003 faee 	bl	8005f8c <HAL_DAC_SetValue>

		}
		//HAL_TIM_Base_Stop_IT(&htim15);
	}

	if (htim->Instance == TIM6) // 5 sec period
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a33      	ldr	r2, [pc, #204]	@ (8002a84 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d101      	bne.n	80029be <HAL_TIM_PeriodElapsedCallback+0x49e>
		    {
		//if(currentState == STATE_SOFT_START || currentState == STATE_REGULATION )
				//{
				FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
 80029ba:	f000 f991 	bl	8002ce0 <FAN_Drive>
				//}
		    }


	if (htim->Instance == TIM7)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a31      	ldr	r2, [pc, #196]	@ (8002a88 <HAL_TIM_PeriodElapsedCallback+0x568>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d110      	bne.n	80029ea <HAL_TIM_PeriodElapsedCallback+0x4ca>
	    {
	        // Turn off OCD pins of currents sensors to reset current sensor 1us

	        HAL_GPIO_TogglePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin);
 80029c8:	2102      	movs	r1, #2
 80029ca:	4830      	ldr	r0, [pc, #192]	@ (8002a8c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80029cc:	f004 f8fc 	bl	8006bc8 <HAL_GPIO_TogglePin>
	        HAL_GPIO_TogglePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin);
 80029d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029d4:	482e      	ldr	r0, [pc, #184]	@ (8002a90 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80029d6:	f004 f8f7 	bl	8006bc8 <HAL_GPIO_TogglePin>
	        HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 80029da:	2200      	movs	r2, #0
 80029dc:	2120      	movs	r1, #32
 80029de:	482b      	ldr	r0, [pc, #172]	@ (8002a8c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80029e0:	f004 f8da 	bl	8006b98 <HAL_GPIO_WritePin>
	        // Stop the timer
	        HAL_TIM_Base_Stop_IT(&htim7);
 80029e4:	482b      	ldr	r0, [pc, #172]	@ (8002a94 <HAL_TIM_PeriodElapsedCallback+0x574>)
 80029e6:	f006 ffaf 	bl	8009948 <HAL_TIM_Base_Stop_IT>
	    }


}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bdb0      	pop	{r4, r5, r7, pc}
 80029f2:	bf00      	nop
 80029f4:	f3af 8000 	nop.w
 80029f8:	54442d18 	.word	0x54442d18
 80029fc:	400921fb 	.word	0x400921fb
 8002a00:	78000000 	.word	0x78000000
 8002a04:	4190942a 	.word	0x4190942a
 8002a08:	47ae147b 	.word	0x47ae147b
 8002a0c:	3f847ae1 	.word	0x3f847ae1
 8002a10:	e5c45270 	.word	0xe5c45270
 8002a14:	3e32e5d9 	.word	0x3e32e5d9
 8002a18:	9999999a 	.word	0x9999999a
 8002a1c:	3f999999 	.word	0x3f999999
 8002a20:	20000004 	.word	0x20000004
 8002a24:	20000a54 	.word	0x20000a54
 8002a28:	20000a28 	.word	0x20000a28
 8002a2c:	01312d00 	.word	0x01312d00
 8002a30:	00e4e1c0 	.word	0x00e4e1c0
 8002a34:	20000774 	.word	0x20000774
 8002a38:	20000b4a 	.word	0x20000b4a
 8002a3c:	20000a44 	.word	0x20000a44
 8002a40:	20000a48 	.word	0x20000a48
 8002a44:	20000010 	.word	0x20000010
 8002a48:	20000b3c 	.word	0x20000b3c
 8002a4c:	20000008 	.word	0x20000008
 8002a50:	2000000c 	.word	0x2000000c
 8002a54:	3851b717 	.word	0x3851b717
 8002a58:	20000b40 	.word	0x20000b40
 8002a5c:	20000a20 	.word	0x20000a20
 8002a60:	20000a58 	.word	0x20000a58
 8002a64:	200008a4 	.word	0x200008a4
 8002a68:	20000a5c 	.word	0x20000a5c
 8002a6c:	20000a24 	.word	0x20000a24
 8002a70:	20000a1c 	.word	0x20000a1c
 8002a74:	2000068c 	.word	0x2000068c
 8002a78:	20000a1e 	.word	0x20000a1e
 8002a7c:	3fd00000 	.word	0x3fd00000
 8002a80:	200006a0 	.word	0x200006a0
 8002a84:	40001000 	.word	0x40001000
 8002a88:	40001400 	.word	0x40001400
 8002a8c:	48001000 	.word	0x48001000
 8002a90:	48001400 	.word	0x48001400
 8002a94:	20000858 	.word	0x20000858

08002a98 <RAMP>:

void RAMP()
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
	// RAMP Voltage to soft-start
				if((vref-output_voltage)>100)
 8002a9c:	4b26      	ldr	r3, [pc, #152]	@ (8002b38 <RAMP+0xa0>)
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4b26      	ldr	r3, [pc, #152]	@ (8002b3c <RAMP+0xa4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b64      	cmp	r3, #100	@ 0x64
 8002aaa:	d917      	bls.n	8002adc <RAMP+0x44>
				{
					Vramp = output_voltage+4000000*Ts; // 200mV step per loop period
 8002aac:	4b23      	ldr	r3, [pc, #140]	@ (8002b3c <RAMP+0xa4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fd fd4f 	bl	8000554 <__aeabi_ui2d>
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	4b21      	ldr	r3, [pc, #132]	@ (8002b40 <RAMP+0xa8>)
 8002abc:	f7fd fc0e 	bl	80002dc <__adddf3>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f7fe f896 	bl	8000bf8 <__aeabi_d2uiz>
 8002acc:	4603      	mov	r3, r0
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b44 <RAMP+0xac>)
 8002ad2:	801a      	strh	r2, [r3, #0]
					RAMP_FINISHED = 0;
 8002ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b48 <RAMP+0xb0>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
					Vramp = 48000; // 48V
					RAMP_FINISHED = 1;
				}


}
 8002ada:	e02a      	b.n	8002b32 <RAMP+0x9a>
				else if((vref-output_voltage)<-100)
 8002adc:	4b16      	ldr	r3, [pc, #88]	@ (8002b38 <RAMP+0xa0>)
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4b16      	ldr	r3, [pc, #88]	@ (8002b3c <RAMP+0xa4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	f113 0f65 	cmn.w	r3, #101	@ 0x65
 8002aec:	d814      	bhi.n	8002b18 <RAMP+0x80>
					Vramp = output_voltage-4000000*Ts;
 8002aee:	4b13      	ldr	r3, [pc, #76]	@ (8002b3c <RAMP+0xa4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fd fd2e 	bl	8000554 <__aeabi_ui2d>
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	4b10      	ldr	r3, [pc, #64]	@ (8002b40 <RAMP+0xa8>)
 8002afe:	f7fd fbeb 	bl	80002d8 <__aeabi_dsub>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4610      	mov	r0, r2
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f7fe f875 	bl	8000bf8 <__aeabi_d2uiz>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	4b0c      	ldr	r3, [pc, #48]	@ (8002b44 <RAMP+0xac>)
 8002b14:	801a      	strh	r2, [r3, #0]
}
 8002b16:	e00c      	b.n	8002b32 <RAMP+0x9a>
				else if(Vramp==48000)
 8002b18:	4b0a      	ldr	r3, [pc, #40]	@ (8002b44 <RAMP+0xac>)
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d106      	bne.n	8002b32 <RAMP+0x9a>
					Vramp = 48000; // 48V
 8002b24:	4b07      	ldr	r3, [pc, #28]	@ (8002b44 <RAMP+0xac>)
 8002b26:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002b2a:	801a      	strh	r2, [r3, #0]
					RAMP_FINISHED = 1;
 8002b2c:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <RAMP+0xb0>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	701a      	strb	r2, [r3, #0]
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	20000a44 	.word	0x20000a44
 8002b40:	40690000 	.word	0x40690000
 8002b44:	20000a48 	.word	0x20000a48
 8002b48:	20000a50 	.word	0x20000a50

08002b4c <regulatorPI>:

void regulatorPI(uint32_t *out, uint32_t *integral, float in, float in_zad, float limp, float limn, float kp, float ti, float Ts1)
{
 8002b4c:	b5b0      	push	{r4, r5, r7, lr}
 8002b4e:	b08c      	sub	sp, #48	@ 0x30
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6278      	str	r0, [r7, #36]	@ 0x24
 8002b54:	6239      	str	r1, [r7, #32]
 8002b56:	ed87 0a07 	vstr	s0, [r7, #28]
 8002b5a:	edc7 0a06 	vstr	s1, [r7, #24]
 8002b5e:	ed87 1a05 	vstr	s2, [r7, #20]
 8002b62:	edc7 1a04 	vstr	s3, [r7, #16]
 8002b66:	ed87 2a03 	vstr	s4, [r7, #12]
 8002b6a:	edc7 2a02 	vstr	s5, [r7, #8]
 8002b6e:	ed87 3a01 	vstr	s6, [r7, #4]
	// Tustin transfrom of PI regulator s -> 2/T * (Z-1)/(Z+1)
    float delta;

    delta = in_zad - in; // error
 8002b72:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b76:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b7e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    *integral = *integral + (delta + prev_delta) * (kp / ti) * Ts1 * 0.5 ; // I part
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fd fce4 	bl	8000554 <__aeabi_ui2d>
 8002b8c:	4604      	mov	r4, r0
 8002b8e:	460d      	mov	r5, r1
 8002b90:	4b51      	ldr	r3, [pc, #324]	@ (8002cd8 <regulatorPI+0x18c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	ee07 3a90 	vmov	s15, r3
 8002b98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b9c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002ba0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ba4:	ed97 6a03 	vldr	s12, [r7, #12]
 8002ba8:	edd7 6a02 	vldr	s13, [r7, #8]
 8002bac:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bbc:	ee17 0a90 	vmov	r0, s15
 8002bc0:	f7fd fcea 	bl	8000598 <__aeabi_f2d>
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	4b44      	ldr	r3, [pc, #272]	@ (8002cdc <regulatorPI+0x190>)
 8002bca:	f7fd fd3d 	bl	8000648 <__aeabi_dmul>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	4629      	mov	r1, r5
 8002bd6:	f7fd fb81 	bl	80002dc <__adddf3>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	f7fe f809 	bl	8000bf8 <__aeabi_d2uiz>
 8002be6:	4602      	mov	r2, r0
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	601a      	str	r2, [r3, #0]
    prev_delta = delta;
 8002bec:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bf4:	ee17 2a90 	vmov	r2, s15
 8002bf8:	4b37      	ldr	r3, [pc, #220]	@ (8002cd8 <regulatorPI+0x18c>)
 8002bfa:	601a      	str	r2, [r3, #0]
    if (*integral >= limp) // limit peak positive
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c08:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c14:	d807      	bhi.n	8002c26 <regulatorPI+0xda>
    {
        *integral = limp;
 8002c16:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c1e:	ee17 2a90 	vmov	r2, s15
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	601a      	str	r2, [r3, #0]
    }
    if (*integral <= limn)// limit peak negative
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	ee07 3a90 	vmov	s15, r3
 8002c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c32:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3e:	db07      	blt.n	8002c50 <regulatorPI+0x104>
    {
        *integral = limn;
 8002c40:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c48:	ee17 2a90 	vmov	r2, s15
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	601a      	str	r2, [r3, #0]
    }
    *out = (delta * kp + *integral); // Sum of P and I
 8002c50:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002c54:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	ee07 3a90 	vmov	s15, r3
 8002c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c70:	ee17 2a90 	vmov	r2, s15
 8002c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c76:	601a      	str	r2, [r3, #0]
    if (*out >= limp) // limit peak positive
 8002c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	ee07 3a90 	vmov	s15, r3
 8002c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c84:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c90:	d807      	bhi.n	8002ca2 <regulatorPI+0x156>
    {
        *out = limp;
 8002c92:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c9a:	ee17 2a90 	vmov	r2, s15
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca0:	601a      	str	r2, [r3, #0]
    }
    if (*out <= limn)// limit peak negative
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	ee07 3a90 	vmov	s15, r3
 8002caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cae:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cba:	da00      	bge.n	8002cbe <regulatorPI+0x172>
    {
        *out = limn;
    }
}
 8002cbc:	e007      	b.n	8002cce <regulatorPI+0x182>
        *out = limn;
 8002cbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cc6:	ee17 2a90 	vmov	r2, s15
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	601a      	str	r2, [r3, #0]
}
 8002cce:	bf00      	nop
 8002cd0:	3730      	adds	r7, #48	@ 0x30
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000b44 	.word	0x20000b44
 8002cdc:	3fe00000 	.word	0x3fe00000

08002ce0 <FAN_Drive>:

	return Low_passed_sample;

}
void FAN_Drive()
{ //@ToDo poprawic ogarnac zeby a intach bylo
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
		pcb_temp = (adc3_dma_buffer[3]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[3], pcb_temp)/4096)*3.3;
 8002ce6:	4b44      	ldr	r3, [pc, #272]	@ (8002df8 <FAN_Drive+0x118>)
 8002ce8:	88db      	ldrh	r3, [r3, #6]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	461a      	mov	r2, r3
 8002cee:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002cf2:	fb02 f303 	mul.w	r3, r2, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	da01      	bge.n	8002cfe <FAN_Drive+0x1e>
 8002cfa:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002cfe:	131b      	asrs	r3, r3, #12
 8002d00:	461a      	mov	r2, r3
 8002d02:	4b3e      	ldr	r3, [pc, #248]	@ (8002dfc <FAN_Drive+0x11c>)
 8002d04:	601a      	str	r2, [r3, #0]
		heat_sink_temp = (adc3_dma_buffer[4]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[4], heat_sink_temp)/4096)*3.3;
 8002d06:	4b3c      	ldr	r3, [pc, #240]	@ (8002df8 <FAN_Drive+0x118>)
 8002d08:	891b      	ldrh	r3, [r3, #8]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	da01      	bge.n	8002d1e <FAN_Drive+0x3e>
 8002d1a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002d1e:	131b      	asrs	r3, r3, #12
 8002d20:	461a      	mov	r2, r3
 8002d22:	4b37      	ldr	r3, [pc, #220]	@ (8002e00 <FAN_Drive+0x120>)
 8002d24:	601a      	str	r2, [r3, #0]

		uint32_t temperature = 20;
 8002d26:	2314      	movs	r3, #20
 8002d28:	603b      	str	r3, [r7, #0]

		pcb_temp = (pcb_temp-400)/20;
 8002d2a:	4b34      	ldr	r3, [pc, #208]	@ (8002dfc <FAN_Drive+0x11c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002d32:	4a34      	ldr	r2, [pc, #208]	@ (8002e04 <FAN_Drive+0x124>)
 8002d34:	fba2 2303 	umull	r2, r3, r2, r3
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	4a30      	ldr	r2, [pc, #192]	@ (8002dfc <FAN_Drive+0x11c>)
 8002d3c:	6013      	str	r3, [r2, #0]
		heat_sink_temp = (heat_sink_temp-500)/10;
 8002d3e:	4b30      	ldr	r3, [pc, #192]	@ (8002e00 <FAN_Drive+0x120>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002d46:	4a2f      	ldr	r2, [pc, #188]	@ (8002e04 <FAN_Drive+0x124>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	08db      	lsrs	r3, r3, #3
 8002d4e:	4a2c      	ldr	r2, [pc, #176]	@ (8002e00 <FAN_Drive+0x120>)
 8002d50:	6013      	str	r3, [r2, #0]
		// Choose the higher of the two temperatures
		temperature = (pcb_temp > heat_sink_temp) ? pcb_temp : heat_sink_temp;
 8002d52:	4b2b      	ldr	r3, [pc, #172]	@ (8002e00 <FAN_Drive+0x120>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	4b29      	ldr	r3, [pc, #164]	@ (8002dfc <FAN_Drive+0x11c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	bf38      	it	cc
 8002d5e:	4613      	movcc	r3, r2
 8002d60:	603b      	str	r3, [r7, #0]
		// Apply a non-linear (exponential) scaling for the fan speed
		// This scales the temperature to a value between 0 and 1, then applies an exponential curve
		uint32_t normalized_temp = ((temperature - 20) *100)/ 80;  // Normalizing between 0 (20°C) and 1000 (100°C)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2264      	movs	r2, #100	@ 0x64
 8002d66:	fb02 f303 	mul.w	r3, r2, r3
 8002d6a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8002d6e:	4a25      	ldr	r2, [pc, #148]	@ (8002e04 <FAN_Drive+0x124>)
 8002d70:	fba2 2303 	umull	r2, r3, r2, r3
 8002d74:	099b      	lsrs	r3, r3, #6
 8002d76:	607b      	str	r3, [r7, #4]
		if (normalized_temp > 100) normalized_temp = 100;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b64      	cmp	r3, #100	@ 0x64
 8002d7c:	d901      	bls.n	8002d82 <FAN_Drive+0xa2>
 8002d7e:	2364      	movs	r3, #100	@ 0x64
 8002d80:	607b      	str	r3, [r7, #4]
		if (normalized_temp < 0) normalized_temp = 0;

		duty_cycle = 20 + ((int)(pow(normalized_temp, 3) * 79))/1000000;  // Cubic curve for fan speed control
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fd fbe6 	bl	8000554 <__aeabi_ui2d>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8002de8 <FAN_Drive+0x108>
 8002d90:	ec43 2b10 	vmov	d0, r2, r3
 8002d94:	f012 fc38 	bl	8015608 <pow>
 8002d98:	ec51 0b10 	vmov	r0, r1, d0
 8002d9c:	a314      	add	r3, pc, #80	@ (adr r3, 8002df0 <FAN_Drive+0x110>)
 8002d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da2:	f7fd fc51 	bl	8000648 <__aeabi_dmul>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	f7fd fefb 	bl	8000ba8 <__aeabi_d2iz>
 8002db2:	4603      	mov	r3, r0
 8002db4:	4a14      	ldr	r2, [pc, #80]	@ (8002e08 <FAN_Drive+0x128>)
 8002db6:	fb82 1203 	smull	r1, r2, r2, r3
 8002dba:	1492      	asrs	r2, r2, #18
 8002dbc:	17db      	asrs	r3, r3, #31
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	3314      	adds	r3, #20
 8002dc2:	4a12      	ldr	r2, [pc, #72]	@ (8002e0c <FAN_Drive+0x12c>)
 8002dc4:	6013      	str	r3, [r2, #0]

		// Enforce minimum and maximum duty cycles
		if (temperature < 20) {
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b13      	cmp	r3, #19
 8002dca:	d803      	bhi.n	8002dd4 <FAN_Drive+0xf4>
		        duty_cycle = 20;
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8002e0c <FAN_Drive+0x12c>)
 8002dce:	2214      	movs	r2, #20
 8002dd0:	601a      	str	r2, [r3, #0]
		    	duty_cycle = 99;
		}

		//Set_PWM_DutyCycle(duty_cycle);

}
 8002dd2:	e005      	b.n	8002de0 <FAN_Drive+0x100>
		} else if (temperature > 100) {
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2b64      	cmp	r3, #100	@ 0x64
 8002dd8:	d902      	bls.n	8002de0 <FAN_Drive+0x100>
		    	duty_cycle = 99;
 8002dda:	4b0c      	ldr	r3, [pc, #48]	@ (8002e0c <FAN_Drive+0x12c>)
 8002ddc:	2263      	movs	r2, #99	@ 0x63
 8002dde:	601a      	str	r2, [r3, #0]
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	00000000 	.word	0x00000000
 8002dec:	40080000 	.word	0x40080000
 8002df0:	00000000 	.word	0x00000000
 8002df4:	4053c000 	.word	0x4053c000
 8002df8:	20000a38 	.word	0x20000a38
 8002dfc:	20000a30 	.word	0x20000a30
 8002e00:	20000a34 	.word	0x20000a34
 8002e04:	cccccccd 	.word	0xcccccccd
 8002e08:	431bde83 	.word	0x431bde83
 8002e0c:	20000018 	.word	0x20000018

08002e10 <SendUSBMessage>:



void SendUSBMessage(const char* message) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(message);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7fd fa51 	bl	80002c0 <strlen>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	81fb      	strh	r3, [r7, #14]
    if (len > 127) len = 127;  // Limit to buffer size
 8002e22:	89fb      	ldrh	r3, [r7, #14]
 8002e24:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e26:	d901      	bls.n	8002e2c <SendUSBMessage+0x1c>
 8002e28:	237f      	movs	r3, #127	@ 0x7f
 8002e2a:	81fb      	strh	r3, [r7, #14]
    memcpy(USB_TX_Buffer, message, len);
 8002e2c:	89fb      	ldrh	r3, [r7, #14]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	480b      	ldr	r0, [pc, #44]	@ (8002e60 <SendUSBMessage+0x50>)
 8002e34:	f00e fc6d 	bl	8011712 <memcpy>
    USB_TX_Buffer[len] = '\0';  // Ensure null-terminated string
 8002e38:	89fb      	ldrh	r3, [r7, #14]
 8002e3a:	4a09      	ldr	r2, [pc, #36]	@ (8002e60 <SendUSBMessage+0x50>)
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	54d1      	strb	r1, [r2, r3]
            break;
        }
      // HAL_Delay(10);  // Small delay before retrying
    } while (retry_count-- > 0);*/
    do {
            result = CDC_Transmit_FS((uint8_t*)message, len);
 8002e40:	89fb      	ldrh	r3, [r7, #14]
 8002e42:	4619      	mov	r1, r3
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f00c ffc9 	bl	800fddc <CDC_Transmit_FS>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	737b      	strb	r3, [r7, #13]
        } while (result == USBD_BUSY); // Retry while USB is busy
 8002e4e:	7b7b      	ldrb	r3, [r7, #13]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d0f5      	beq.n	8002e40 <SendUSBMessage+0x30>


}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000ab8 	.word	0x20000ab8

08002e64 <ParseUSBCommand>:

void ParseUSBCommand(void) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
	 if (dataReceivedFlag) {
 8002e68:	4ba6      	ldr	r3, [pc, #664]	@ (8003104 <ParseUSBCommand+0x2a0>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 8146 	beq.w	8003100 <ParseUSBCommand+0x29c>
	        if (strncmp((char*)USB_RX_Buffer, "SET_KP", 6) == 0) {
 8002e74:	2206      	movs	r2, #6
 8002e76:	49a4      	ldr	r1, [pc, #656]	@ (8003108 <ParseUSBCommand+0x2a4>)
 8002e78:	48a4      	ldr	r0, [pc, #656]	@ (800310c <ParseUSBCommand+0x2a8>)
 8002e7a:	f00e fbc0 	bl	80115fe <strncmp>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d108      	bne.n	8002e96 <ParseUSBCommand+0x32>
	            sscanf((char*)USB_RX_Buffer, "SET_KP %f", &Kp);
 8002e84:	4aa2      	ldr	r2, [pc, #648]	@ (8003110 <ParseUSBCommand+0x2ac>)
 8002e86:	49a3      	ldr	r1, [pc, #652]	@ (8003114 <ParseUSBCommand+0x2b0>)
 8002e88:	48a0      	ldr	r0, [pc, #640]	@ (800310c <ParseUSBCommand+0x2a8>)
 8002e8a:	f00e fb41 	bl	8011510 <siscanf>
	            SendUSBMessage("KP Updated\n");
 8002e8e:	48a2      	ldr	r0, [pc, #648]	@ (8003118 <ParseUSBCommand+0x2b4>)
 8002e90:	f7ff ffbe 	bl	8002e10 <SendUSBMessage>
 8002e94:	e12c      	b.n	80030f0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_Ti", 6) == 0) {
 8002e96:	2206      	movs	r2, #6
 8002e98:	49a0      	ldr	r1, [pc, #640]	@ (800311c <ParseUSBCommand+0x2b8>)
 8002e9a:	489c      	ldr	r0, [pc, #624]	@ (800310c <ParseUSBCommand+0x2a8>)
 8002e9c:	f00e fbaf 	bl	80115fe <strncmp>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d108      	bne.n	8002eb8 <ParseUSBCommand+0x54>
	            sscanf((char*)USB_RX_Buffer, "SET_Ti %f", &Ti);
 8002ea6:	4a9e      	ldr	r2, [pc, #632]	@ (8003120 <ParseUSBCommand+0x2bc>)
 8002ea8:	499e      	ldr	r1, [pc, #632]	@ (8003124 <ParseUSBCommand+0x2c0>)
 8002eaa:	4898      	ldr	r0, [pc, #608]	@ (800310c <ParseUSBCommand+0x2a8>)
 8002eac:	f00e fb30 	bl	8011510 <siscanf>
	            SendUSBMessage("Ti Updated\n");
 8002eb0:	489d      	ldr	r0, [pc, #628]	@ (8003128 <ParseUSBCommand+0x2c4>)
 8002eb2:	f7ff ffad 	bl	8002e10 <SendUSBMessage>
 8002eb6:	e11b      	b.n	80030f0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_VREF", 8) == 0) {
 8002eb8:	2208      	movs	r2, #8
 8002eba:	499c      	ldr	r1, [pc, #624]	@ (800312c <ParseUSBCommand+0x2c8>)
 8002ebc:	4893      	ldr	r0, [pc, #588]	@ (800310c <ParseUSBCommand+0x2a8>)
 8002ebe:	f00e fb9e 	bl	80115fe <strncmp>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d108      	bne.n	8002eda <ParseUSBCommand+0x76>
	            sscanf((char*)USB_RX_Buffer, "SET_VREF %hu", &vref);
 8002ec8:	4a99      	ldr	r2, [pc, #612]	@ (8003130 <ParseUSBCommand+0x2cc>)
 8002eca:	499a      	ldr	r1, [pc, #616]	@ (8003134 <ParseUSBCommand+0x2d0>)
 8002ecc:	488f      	ldr	r0, [pc, #572]	@ (800310c <ParseUSBCommand+0x2a8>)
 8002ece:	f00e fb1f 	bl	8011510 <siscanf>
	            SendUSBMessage("vref Updated\n");
 8002ed2:	4899      	ldr	r0, [pc, #612]	@ (8003138 <ParseUSBCommand+0x2d4>)
 8002ed4:	f7ff ff9c 	bl	8002e10 <SendUSBMessage>
 8002ed8:	e10a      	b.n	80030f0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS1_VREF", 12) == 0) {
 8002eda:	220c      	movs	r2, #12
 8002edc:	4997      	ldr	r1, [pc, #604]	@ (800313c <ParseUSBCommand+0x2d8>)
 8002ede:	488b      	ldr	r0, [pc, #556]	@ (800310c <ParseUSBCommand+0x2a8>)
 8002ee0:	f00e fb8d 	bl	80115fe <strncmp>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d108      	bne.n	8002efc <ParseUSBCommand+0x98>
	            sscanf((char*)USB_RX_Buffer, "SET_CS1_VREF %d", &current_sensor1_vref);
 8002eea:	4a95      	ldr	r2, [pc, #596]	@ (8003140 <ParseUSBCommand+0x2dc>)
 8002eec:	4995      	ldr	r1, [pc, #596]	@ (8003144 <ParseUSBCommand+0x2e0>)
 8002eee:	4887      	ldr	r0, [pc, #540]	@ (800310c <ParseUSBCommand+0x2a8>)
 8002ef0:	f00e fb0e 	bl	8011510 <siscanf>
	            SendUSBMessage("current_sensor1_vref Updated\n");
 8002ef4:	4894      	ldr	r0, [pc, #592]	@ (8003148 <ParseUSBCommand+0x2e4>)
 8002ef6:	f7ff ff8b 	bl	8002e10 <SendUSBMessage>
 8002efa:	e0f9      	b.n	80030f0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS2_VREF", 12) == 0) {
 8002efc:	220c      	movs	r2, #12
 8002efe:	4993      	ldr	r1, [pc, #588]	@ (800314c <ParseUSBCommand+0x2e8>)
 8002f00:	4882      	ldr	r0, [pc, #520]	@ (800310c <ParseUSBCommand+0x2a8>)
 8002f02:	f00e fb7c 	bl	80115fe <strncmp>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d108      	bne.n	8002f1e <ParseUSBCommand+0xba>
	            sscanf((char*)USB_RX_Buffer, "SET_CS2_VREF %d", &current_sensor2_vref);
 8002f0c:	4a90      	ldr	r2, [pc, #576]	@ (8003150 <ParseUSBCommand+0x2ec>)
 8002f0e:	4991      	ldr	r1, [pc, #580]	@ (8003154 <ParseUSBCommand+0x2f0>)
 8002f10:	487e      	ldr	r0, [pc, #504]	@ (800310c <ParseUSBCommand+0x2a8>)
 8002f12:	f00e fafd 	bl	8011510 <siscanf>
	            SendUSBMessage("current_sensor2_vref Updated\n");
 8002f16:	4890      	ldr	r0, [pc, #576]	@ (8003158 <ParseUSBCommand+0x2f4>)
 8002f18:	f7ff ff7a 	bl	8002e10 <SendUSBMessage>
 8002f1c:	e0e8      	b.n	80030f0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_IMAX2_SUM", 13) == 0) {
 8002f1e:	220d      	movs	r2, #13
 8002f20:	498e      	ldr	r1, [pc, #568]	@ (800315c <ParseUSBCommand+0x2f8>)
 8002f22:	487a      	ldr	r0, [pc, #488]	@ (800310c <ParseUSBCommand+0x2a8>)
 8002f24:	f00e fb6b 	bl	80115fe <strncmp>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d108      	bne.n	8002f40 <ParseUSBCommand+0xdc>
	            sscanf((char*)USB_RX_Buffer, "SET_IMAX2_SUM %d", &imax2_sum);
 8002f2e:	4a8c      	ldr	r2, [pc, #560]	@ (8003160 <ParseUSBCommand+0x2fc>)
 8002f30:	498c      	ldr	r1, [pc, #560]	@ (8003164 <ParseUSBCommand+0x300>)
 8002f32:	4876      	ldr	r0, [pc, #472]	@ (800310c <ParseUSBCommand+0x2a8>)
 8002f34:	f00e faec 	bl	8011510 <siscanf>
	            SendUSBMessage("imax2_sum Updated\n");
 8002f38:	488b      	ldr	r0, [pc, #556]	@ (8003168 <ParseUSBCommand+0x304>)
 8002f3a:	f7ff ff69 	bl	8002e10 <SendUSBMessage>
 8002f3e:	e0d7      	b.n	80030f0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_TR", 12) == 0) {
 8002f40:	220c      	movs	r2, #12
 8002f42:	498a      	ldr	r1, [pc, #552]	@ (800316c <ParseUSBCommand+0x308>)
 8002f44:	4871      	ldr	r0, [pc, #452]	@ (800310c <ParseUSBCommand+0x2a8>)
 8002f46:	f00e fb5a 	bl	80115fe <strncmp>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d108      	bne.n	8002f62 <ParseUSBCommand+0xfe>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_TR %f", &delay_tr);
 8002f50:	4a87      	ldr	r2, [pc, #540]	@ (8003170 <ParseUSBCommand+0x30c>)
 8002f52:	4988      	ldr	r1, [pc, #544]	@ (8003174 <ParseUSBCommand+0x310>)
 8002f54:	486d      	ldr	r0, [pc, #436]	@ (800310c <ParseUSBCommand+0x2a8>)
 8002f56:	f00e fadb 	bl	8011510 <siscanf>
	            SendUSBMessage("delay_tr Updated\n");
 8002f5a:	4887      	ldr	r0, [pc, #540]	@ (8003178 <ParseUSBCommand+0x314>)
 8002f5c:	f7ff ff58 	bl	8002e10 <SendUSBMessage>
 8002f60:	e0c6      	b.n	80030f0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_HC", 12) == 0) {
 8002f62:	220c      	movs	r2, #12
 8002f64:	4985      	ldr	r1, [pc, #532]	@ (800317c <ParseUSBCommand+0x318>)
 8002f66:	4869      	ldr	r0, [pc, #420]	@ (800310c <ParseUSBCommand+0x2a8>)
 8002f68:	f00e fb49 	bl	80115fe <strncmp>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d108      	bne.n	8002f84 <ParseUSBCommand+0x120>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_HC %f", &delay_hc);
 8002f72:	4a83      	ldr	r2, [pc, #524]	@ (8003180 <ParseUSBCommand+0x31c>)
 8002f74:	4983      	ldr	r1, [pc, #524]	@ (8003184 <ParseUSBCommand+0x320>)
 8002f76:	4865      	ldr	r0, [pc, #404]	@ (800310c <ParseUSBCommand+0x2a8>)
 8002f78:	f00e faca 	bl	8011510 <siscanf>
	            SendUSBMessage("delay_hc Updated\n");
 8002f7c:	4882      	ldr	r0, [pc, #520]	@ (8003188 <ParseUSBCommand+0x324>)
 8002f7e:	f7ff ff47 	bl	8002e10 <SendUSBMessage>
 8002f82:	e0b5      	b.n	80030f0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_KP", 6) == 0) {
 8002f84:	2206      	movs	r2, #6
 8002f86:	4981      	ldr	r1, [pc, #516]	@ (800318c <ParseUSBCommand+0x328>)
 8002f88:	4860      	ldr	r0, [pc, #384]	@ (800310c <ParseUSBCommand+0x2a8>)
 8002f8a:	f00e fb38 	bl	80115fe <strncmp>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10e      	bne.n	8002fb2 <ParseUSBCommand+0x14e>
	            sprintf((char*)USB_TX_Buffer, "KP = %f\n", Kp);
 8002f94:	4b5e      	ldr	r3, [pc, #376]	@ (8003110 <ParseUSBCommand+0x2ac>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fd fafd 	bl	8000598 <__aeabi_f2d>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	497b      	ldr	r1, [pc, #492]	@ (8003190 <ParseUSBCommand+0x32c>)
 8002fa4:	487b      	ldr	r0, [pc, #492]	@ (8003194 <ParseUSBCommand+0x330>)
 8002fa6:	f00e fa93 	bl	80114d0 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8002faa:	487a      	ldr	r0, [pc, #488]	@ (8003194 <ParseUSBCommand+0x330>)
 8002fac:	f7ff ff30 	bl	8002e10 <SendUSBMessage>
 8002fb0:	e09e      	b.n	80030f0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_Ti", 6) == 0) {
 8002fb2:	2206      	movs	r2, #6
 8002fb4:	4978      	ldr	r1, [pc, #480]	@ (8003198 <ParseUSBCommand+0x334>)
 8002fb6:	4855      	ldr	r0, [pc, #340]	@ (800310c <ParseUSBCommand+0x2a8>)
 8002fb8:	f00e fb21 	bl	80115fe <strncmp>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10e      	bne.n	8002fe0 <ParseUSBCommand+0x17c>
	            sprintf((char*)USB_TX_Buffer, "Ti = %f\n", Ti);
 8002fc2:	4b57      	ldr	r3, [pc, #348]	@ (8003120 <ParseUSBCommand+0x2bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd fae6 	bl	8000598 <__aeabi_f2d>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4972      	ldr	r1, [pc, #456]	@ (800319c <ParseUSBCommand+0x338>)
 8002fd2:	4870      	ldr	r0, [pc, #448]	@ (8003194 <ParseUSBCommand+0x330>)
 8002fd4:	f00e fa7c 	bl	80114d0 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8002fd8:	486e      	ldr	r0, [pc, #440]	@ (8003194 <ParseUSBCommand+0x330>)
 8002fda:	f7ff ff19 	bl	8002e10 <SendUSBMessage>
 8002fde:	e087      	b.n	80030f0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_VREF", 8) == 0) {
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	496f      	ldr	r1, [pc, #444]	@ (80031a0 <ParseUSBCommand+0x33c>)
 8002fe4:	4849      	ldr	r0, [pc, #292]	@ (800310c <ParseUSBCommand+0x2a8>)
 8002fe6:	f00e fb0a 	bl	80115fe <strncmp>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10a      	bne.n	8003006 <ParseUSBCommand+0x1a2>
	            sprintf((char*)USB_TX_Buffer, "vref = %hu\n", vref);
 8002ff0:	4b4f      	ldr	r3, [pc, #316]	@ (8003130 <ParseUSBCommand+0x2cc>)
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	496b      	ldr	r1, [pc, #428]	@ (80031a4 <ParseUSBCommand+0x340>)
 8002ff8:	4866      	ldr	r0, [pc, #408]	@ (8003194 <ParseUSBCommand+0x330>)
 8002ffa:	f00e fa69 	bl	80114d0 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8002ffe:	4865      	ldr	r0, [pc, #404]	@ (8003194 <ParseUSBCommand+0x330>)
 8003000:	f7ff ff06 	bl	8002e10 <SendUSBMessage>
 8003004:	e074      	b.n	80030f0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS1_VREF", 12) == 0) {
 8003006:	220c      	movs	r2, #12
 8003008:	4967      	ldr	r1, [pc, #412]	@ (80031a8 <ParseUSBCommand+0x344>)
 800300a:	4840      	ldr	r0, [pc, #256]	@ (800310c <ParseUSBCommand+0x2a8>)
 800300c:	f00e faf7 	bl	80115fe <strncmp>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10a      	bne.n	800302c <ParseUSBCommand+0x1c8>
	            sprintf((char*)USB_TX_Buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 8003016:	4b4a      	ldr	r3, [pc, #296]	@ (8003140 <ParseUSBCommand+0x2dc>)
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	4963      	ldr	r1, [pc, #396]	@ (80031ac <ParseUSBCommand+0x348>)
 800301e:	485d      	ldr	r0, [pc, #372]	@ (8003194 <ParseUSBCommand+0x330>)
 8003020:	f00e fa56 	bl	80114d0 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003024:	485b      	ldr	r0, [pc, #364]	@ (8003194 <ParseUSBCommand+0x330>)
 8003026:	f7ff fef3 	bl	8002e10 <SendUSBMessage>
 800302a:	e061      	b.n	80030f0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS2_VREF", 12) == 0) {
 800302c:	220c      	movs	r2, #12
 800302e:	4960      	ldr	r1, [pc, #384]	@ (80031b0 <ParseUSBCommand+0x34c>)
 8003030:	4836      	ldr	r0, [pc, #216]	@ (800310c <ParseUSBCommand+0x2a8>)
 8003032:	f00e fae4 	bl	80115fe <strncmp>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10a      	bne.n	8003052 <ParseUSBCommand+0x1ee>
	            sprintf((char*)USB_TX_Buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 800303c:	4b44      	ldr	r3, [pc, #272]	@ (8003150 <ParseUSBCommand+0x2ec>)
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	495c      	ldr	r1, [pc, #368]	@ (80031b4 <ParseUSBCommand+0x350>)
 8003044:	4853      	ldr	r0, [pc, #332]	@ (8003194 <ParseUSBCommand+0x330>)
 8003046:	f00e fa43 	bl	80114d0 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800304a:	4852      	ldr	r0, [pc, #328]	@ (8003194 <ParseUSBCommand+0x330>)
 800304c:	f7ff fee0 	bl	8002e10 <SendUSBMessage>
 8003050:	e04e      	b.n	80030f0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_IMAX2_SUM", 13) == 0) {
 8003052:	220d      	movs	r2, #13
 8003054:	4958      	ldr	r1, [pc, #352]	@ (80031b8 <ParseUSBCommand+0x354>)
 8003056:	482d      	ldr	r0, [pc, #180]	@ (800310c <ParseUSBCommand+0x2a8>)
 8003058:	f00e fad1 	bl	80115fe <strncmp>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10a      	bne.n	8003078 <ParseUSBCommand+0x214>
	            sprintf((char*)USB_TX_Buffer, "imax2_sum = %f\n", imax2_sum);
 8003062:	4b3f      	ldr	r3, [pc, #252]	@ (8003160 <ParseUSBCommand+0x2fc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	4954      	ldr	r1, [pc, #336]	@ (80031bc <ParseUSBCommand+0x358>)
 800306a:	484a      	ldr	r0, [pc, #296]	@ (8003194 <ParseUSBCommand+0x330>)
 800306c:	f00e fa30 	bl	80114d0 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003070:	4848      	ldr	r0, [pc, #288]	@ (8003194 <ParseUSBCommand+0x330>)
 8003072:	f7ff fecd 	bl	8002e10 <SendUSBMessage>
 8003076:	e03b      	b.n	80030f0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_TR", 12) == 0) {
 8003078:	220c      	movs	r2, #12
 800307a:	4951      	ldr	r1, [pc, #324]	@ (80031c0 <ParseUSBCommand+0x35c>)
 800307c:	4823      	ldr	r0, [pc, #140]	@ (800310c <ParseUSBCommand+0x2a8>)
 800307e:	f00e fabe 	bl	80115fe <strncmp>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10e      	bne.n	80030a6 <ParseUSBCommand+0x242>
	            sprintf((char*)USB_TX_Buffer, "delay_tr = %f\n", delay_tr);
 8003088:	4b39      	ldr	r3, [pc, #228]	@ (8003170 <ParseUSBCommand+0x30c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7fd fa83 	bl	8000598 <__aeabi_f2d>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	494b      	ldr	r1, [pc, #300]	@ (80031c4 <ParseUSBCommand+0x360>)
 8003098:	483e      	ldr	r0, [pc, #248]	@ (8003194 <ParseUSBCommand+0x330>)
 800309a:	f00e fa19 	bl	80114d0 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800309e:	483d      	ldr	r0, [pc, #244]	@ (8003194 <ParseUSBCommand+0x330>)
 80030a0:	f7ff feb6 	bl	8002e10 <SendUSBMessage>
 80030a4:	e024      	b.n	80030f0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_HC", 12) == 0) {
 80030a6:	220c      	movs	r2, #12
 80030a8:	4947      	ldr	r1, [pc, #284]	@ (80031c8 <ParseUSBCommand+0x364>)
 80030aa:	4818      	ldr	r0, [pc, #96]	@ (800310c <ParseUSBCommand+0x2a8>)
 80030ac:	f00e faa7 	bl	80115fe <strncmp>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10e      	bne.n	80030d4 <ParseUSBCommand+0x270>
	            sprintf((char*)USB_TX_Buffer, "delay_hc = %f\n", delay_hc);
 80030b6:	4b32      	ldr	r3, [pc, #200]	@ (8003180 <ParseUSBCommand+0x31c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fa6c 	bl	8000598 <__aeabi_f2d>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4941      	ldr	r1, [pc, #260]	@ (80031cc <ParseUSBCommand+0x368>)
 80030c6:	4833      	ldr	r0, [pc, #204]	@ (8003194 <ParseUSBCommand+0x330>)
 80030c8:	f00e fa02 	bl	80114d0 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80030cc:	4831      	ldr	r0, [pc, #196]	@ (8003194 <ParseUSBCommand+0x330>)
 80030ce:	f7ff fe9f 	bl	8002e10 <SendUSBMessage>
 80030d2:	e00d      	b.n	80030f0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "DISPLAY_ALL", 11) == 0) {
 80030d4:	220b      	movs	r2, #11
 80030d6:	493e      	ldr	r1, [pc, #248]	@ (80031d0 <ParseUSBCommand+0x36c>)
 80030d8:	480c      	ldr	r0, [pc, #48]	@ (800310c <ParseUSBCommand+0x2a8>)
 80030da:	f00e fa90 	bl	80115fe <strncmp>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <ParseUSBCommand+0x286>
	            DisplayAllVariables();
 80030e4:	f000 f878 	bl	80031d8 <DisplayAllVariables>
 80030e8:	e002      	b.n	80030f0 <ParseUSBCommand+0x28c>

	        } else {
	            SendUSBMessage("Unknown Command\n");
 80030ea:	483a      	ldr	r0, [pc, #232]	@ (80031d4 <ParseUSBCommand+0x370>)
 80030ec:	f7ff fe90 	bl	8002e10 <SendUSBMessage>
	        }
	        memset(USB_RX_Buffer, 0, sizeof(USB_RX_Buffer));  // Clear buffer
 80030f0:	2240      	movs	r2, #64	@ 0x40
 80030f2:	2100      	movs	r1, #0
 80030f4:	4805      	ldr	r0, [pc, #20]	@ (800310c <ParseUSBCommand+0x2a8>)
 80030f6:	f00e fa7a 	bl	80115ee <memset>
	        dataReceivedFlag = 0;
 80030fa:	4b02      	ldr	r3, [pc, #8]	@ (8003104 <ParseUSBCommand+0x2a0>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
	    }
}
 8003100:	bf00      	nop
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20000b38 	.word	0x20000b38
 8003108:	080169f0 	.word	0x080169f0
 800310c:	20000a78 	.word	0x20000a78
 8003110:	20000008 	.word	0x20000008
 8003114:	080169f8 	.word	0x080169f8
 8003118:	08016a04 	.word	0x08016a04
 800311c:	08016a10 	.word	0x08016a10
 8003120:	2000000c 	.word	0x2000000c
 8003124:	08016a18 	.word	0x08016a18
 8003128:	08016a24 	.word	0x08016a24
 800312c:	08016a30 	.word	0x08016a30
 8003130:	20000000 	.word	0x20000000
 8003134:	08016a3c 	.word	0x08016a3c
 8003138:	08016a4c 	.word	0x08016a4c
 800313c:	08016a5c 	.word	0x08016a5c
 8003140:	20000a1c 	.word	0x20000a1c
 8003144:	08016a6c 	.word	0x08016a6c
 8003148:	08016a7c 	.word	0x08016a7c
 800314c:	08016a9c 	.word	0x08016a9c
 8003150:	20000a1e 	.word	0x20000a1e
 8003154:	08016aac 	.word	0x08016aac
 8003158:	08016abc 	.word	0x08016abc
 800315c:	08016adc 	.word	0x08016adc
 8003160:	20000a5c 	.word	0x20000a5c
 8003164:	08016aec 	.word	0x08016aec
 8003168:	08016b00 	.word	0x08016b00
 800316c:	08016b14 	.word	0x08016b14
 8003170:	20000a54 	.word	0x20000a54
 8003174:	08016b24 	.word	0x08016b24
 8003178:	08016b34 	.word	0x08016b34
 800317c:	08016b48 	.word	0x08016b48
 8003180:	20000a58 	.word	0x20000a58
 8003184:	08016b58 	.word	0x08016b58
 8003188:	08016b68 	.word	0x08016b68
 800318c:	08016b7c 	.word	0x08016b7c
 8003190:	08016b84 	.word	0x08016b84
 8003194:	20000ab8 	.word	0x20000ab8
 8003198:	08016b90 	.word	0x08016b90
 800319c:	08016b98 	.word	0x08016b98
 80031a0:	08016ba4 	.word	0x08016ba4
 80031a4:	08016bb0 	.word	0x08016bb0
 80031a8:	08016bbc 	.word	0x08016bbc
 80031ac:	08016bcc 	.word	0x08016bcc
 80031b0:	08016be8 	.word	0x08016be8
 80031b4:	08016bf8 	.word	0x08016bf8
 80031b8:	08016c14 	.word	0x08016c14
 80031bc:	08016c24 	.word	0x08016c24
 80031c0:	08016c34 	.word	0x08016c34
 80031c4:	08016c44 	.word	0x08016c44
 80031c8:	08016c54 	.word	0x08016c54
 80031cc:	08016c64 	.word	0x08016c64
 80031d0:	08016c74 	.word	0x08016c74
 80031d4:	08016c80 	.word	0x08016c80

080031d8 <DisplayAllVariables>:

void DisplayAllVariables(void) {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b0a0      	sub	sp, #128	@ 0x80
 80031dc:	af00      	add	r7, sp, #0
    char buffer[128];

    sprintf(buffer, "KP = %f\n", Kp);
 80031de:	4b5e      	ldr	r3, [pc, #376]	@ (8003358 <DisplayAllVariables+0x180>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd f9d8 	bl	8000598 <__aeabi_f2d>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4638      	mov	r0, r7
 80031ee:	495b      	ldr	r1, [pc, #364]	@ (800335c <DisplayAllVariables+0x184>)
 80031f0:	f00e f96e 	bl	80114d0 <siprintf>
        SendUSBMessage(buffer);
 80031f4:	463b      	mov	r3, r7
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fe0a 	bl	8002e10 <SendUSBMessage>

        sprintf(buffer, "Ti = %f\n", Ti);
 80031fc:	4b58      	ldr	r3, [pc, #352]	@ (8003360 <DisplayAllVariables+0x188>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7fd f9c9 	bl	8000598 <__aeabi_f2d>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4638      	mov	r0, r7
 800320c:	4955      	ldr	r1, [pc, #340]	@ (8003364 <DisplayAllVariables+0x18c>)
 800320e:	f00e f95f 	bl	80114d0 <siprintf>
        SendUSBMessage(buffer);
 8003212:	463b      	mov	r3, r7
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fdfb 	bl	8002e10 <SendUSBMessage>

        sprintf(buffer, "vref = %hu\n", vref);
 800321a:	4b53      	ldr	r3, [pc, #332]	@ (8003368 <DisplayAllVariables+0x190>)
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	463b      	mov	r3, r7
 8003222:	4952      	ldr	r1, [pc, #328]	@ (800336c <DisplayAllVariables+0x194>)
 8003224:	4618      	mov	r0, r3
 8003226:	f00e f953 	bl	80114d0 <siprintf>
        SendUSBMessage(buffer);
 800322a:	463b      	mov	r3, r7
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff fdef 	bl	8002e10 <SendUSBMessage>

        sprintf(buffer, "imax1 = %f\n", imax1);
 8003232:	4b4f      	ldr	r3, [pc, #316]	@ (8003370 <DisplayAllVariables+0x198>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	463b      	mov	r3, r7
 8003238:	494e      	ldr	r1, [pc, #312]	@ (8003374 <DisplayAllVariables+0x19c>)
 800323a:	4618      	mov	r0, r3
 800323c:	f00e f948 	bl	80114d0 <siprintf>
        SendUSBMessage(buffer);
 8003240:	463b      	mov	r3, r7
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fde4 	bl	8002e10 <SendUSBMessage>

        sprintf(buffer, "imax2 = %f\n", imax2);
 8003248:	4b4b      	ldr	r3, [pc, #300]	@ (8003378 <DisplayAllVariables+0x1a0>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	463b      	mov	r3, r7
 800324e:	494b      	ldr	r1, [pc, #300]	@ (800337c <DisplayAllVariables+0x1a4>)
 8003250:	4618      	mov	r0, r3
 8003252:	f00e f93d 	bl	80114d0 <siprintf>
        SendUSBMessage(buffer);
 8003256:	463b      	mov	r3, r7
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fdd9 	bl	8002e10 <SendUSBMessage>

        sprintf(buffer, "imin = %f\n", imin);
 800325e:	4b48      	ldr	r3, [pc, #288]	@ (8003380 <DisplayAllVariables+0x1a8>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	463b      	mov	r3, r7
 8003264:	4947      	ldr	r1, [pc, #284]	@ (8003384 <DisplayAllVariables+0x1ac>)
 8003266:	4618      	mov	r0, r3
 8003268:	f00e f932 	bl	80114d0 <siprintf>
        SendUSBMessage(buffer);
 800326c:	463b      	mov	r3, r7
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fdce 	bl	8002e10 <SendUSBMessage>

        sprintf(buffer, "input_voltage = %f\n", input_voltage);
 8003274:	4b44      	ldr	r3, [pc, #272]	@ (8003388 <DisplayAllVariables+0x1b0>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	463b      	mov	r3, r7
 800327a:	4944      	ldr	r1, [pc, #272]	@ (800338c <DisplayAllVariables+0x1b4>)
 800327c:	4618      	mov	r0, r3
 800327e:	f00e f927 	bl	80114d0 <siprintf>
        SendUSBMessage(buffer);
 8003282:	463b      	mov	r3, r7
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff fdc3 	bl	8002e10 <SendUSBMessage>

        sprintf(buffer, "output_voltage = %f\n", output_voltage);
 800328a:	4b41      	ldr	r3, [pc, #260]	@ (8003390 <DisplayAllVariables+0x1b8>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	463b      	mov	r3, r7
 8003290:	4940      	ldr	r1, [pc, #256]	@ (8003394 <DisplayAllVariables+0x1bc>)
 8003292:	4618      	mov	r0, r3
 8003294:	f00e f91c 	bl	80114d0 <siprintf>
        SendUSBMessage(buffer);
 8003298:	463b      	mov	r3, r7
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fdb8 	bl	8002e10 <SendUSBMessage>

        sprintf(buffer, "pcb_temp = %f\n", pcb_temp);
 80032a0:	4b3d      	ldr	r3, [pc, #244]	@ (8003398 <DisplayAllVariables+0x1c0>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	463b      	mov	r3, r7
 80032a6:	493d      	ldr	r1, [pc, #244]	@ (800339c <DisplayAllVariables+0x1c4>)
 80032a8:	4618      	mov	r0, r3
 80032aa:	f00e f911 	bl	80114d0 <siprintf>
        SendUSBMessage(buffer);
 80032ae:	463b      	mov	r3, r7
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fdad 	bl	8002e10 <SendUSBMessage>

        sprintf(buffer, "heat_sink_temp = %f\n", heat_sink_temp);
 80032b6:	4b3a      	ldr	r3, [pc, #232]	@ (80033a0 <DisplayAllVariables+0x1c8>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	463b      	mov	r3, r7
 80032bc:	4939      	ldr	r1, [pc, #228]	@ (80033a4 <DisplayAllVariables+0x1cc>)
 80032be:	4618      	mov	r0, r3
 80032c0:	f00e f906 	bl	80114d0 <siprintf>
        SendUSBMessage(buffer);
 80032c4:	463b      	mov	r3, r7
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fda2 	bl	8002e10 <SendUSBMessage>

        sprintf(buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 80032cc:	4b36      	ldr	r3, [pc, #216]	@ (80033a8 <DisplayAllVariables+0x1d0>)
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	463b      	mov	r3, r7
 80032d4:	4935      	ldr	r1, [pc, #212]	@ (80033ac <DisplayAllVariables+0x1d4>)
 80032d6:	4618      	mov	r0, r3
 80032d8:	f00e f8fa 	bl	80114d0 <siprintf>
        SendUSBMessage(buffer);
 80032dc:	463b      	mov	r3, r7
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff fd96 	bl	8002e10 <SendUSBMessage>

        sprintf(buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 80032e4:	4b32      	ldr	r3, [pc, #200]	@ (80033b0 <DisplayAllVariables+0x1d8>)
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	461a      	mov	r2, r3
 80032ea:	463b      	mov	r3, r7
 80032ec:	4931      	ldr	r1, [pc, #196]	@ (80033b4 <DisplayAllVariables+0x1dc>)
 80032ee:	4618      	mov	r0, r3
 80032f0:	f00e f8ee 	bl	80114d0 <siprintf>
        SendUSBMessage(buffer);
 80032f4:	463b      	mov	r3, r7
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff fd8a 	bl	8002e10 <SendUSBMessage>

        sprintf(buffer, "imax2_sum = %f\n", imax2_sum);
 80032fc:	4b2e      	ldr	r3, [pc, #184]	@ (80033b8 <DisplayAllVariables+0x1e0>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	463b      	mov	r3, r7
 8003302:	492e      	ldr	r1, [pc, #184]	@ (80033bc <DisplayAllVariables+0x1e4>)
 8003304:	4618      	mov	r0, r3
 8003306:	f00e f8e3 	bl	80114d0 <siprintf>
        SendUSBMessage(buffer);
 800330a:	463b      	mov	r3, r7
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fd7f 	bl	8002e10 <SendUSBMessage>

        sprintf(buffer, "delay_tr = %f\n", delay_tr);
 8003312:	4b2b      	ldr	r3, [pc, #172]	@ (80033c0 <DisplayAllVariables+0x1e8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd f93e 	bl	8000598 <__aeabi_f2d>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4638      	mov	r0, r7
 8003322:	4928      	ldr	r1, [pc, #160]	@ (80033c4 <DisplayAllVariables+0x1ec>)
 8003324:	f00e f8d4 	bl	80114d0 <siprintf>
        SendUSBMessage(buffer);
 8003328:	463b      	mov	r3, r7
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff fd70 	bl	8002e10 <SendUSBMessage>

        sprintf(buffer, "delay_hc = %f\n", delay_hc);
 8003330:	4b25      	ldr	r3, [pc, #148]	@ (80033c8 <DisplayAllVariables+0x1f0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd f92f 	bl	8000598 <__aeabi_f2d>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4638      	mov	r0, r7
 8003340:	4922      	ldr	r1, [pc, #136]	@ (80033cc <DisplayAllVariables+0x1f4>)
 8003342:	f00e f8c5 	bl	80114d0 <siprintf>
        SendUSBMessage(buffer);
 8003346:	463b      	mov	r3, r7
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fd61 	bl	8002e10 <SendUSBMessage>
}
 800334e:	bf00      	nop
 8003350:	3780      	adds	r7, #128	@ 0x80
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000008 	.word	0x20000008
 800335c:	08016b84 	.word	0x08016b84
 8003360:	2000000c 	.word	0x2000000c
 8003364:	08016b98 	.word	0x08016b98
 8003368:	20000000 	.word	0x20000000
 800336c:	08016bb0 	.word	0x08016bb0
 8003370:	20000a20 	.word	0x20000a20
 8003374:	08016c94 	.word	0x08016c94
 8003378:	20000a24 	.word	0x20000a24
 800337c:	08016ca0 	.word	0x08016ca0
 8003380:	20000a28 	.word	0x20000a28
 8003384:	08016cac 	.word	0x08016cac
 8003388:	20000a2c 	.word	0x20000a2c
 800338c:	08016cb8 	.word	0x08016cb8
 8003390:	20000a44 	.word	0x20000a44
 8003394:	08016ccc 	.word	0x08016ccc
 8003398:	20000a30 	.word	0x20000a30
 800339c:	08016ce4 	.word	0x08016ce4
 80033a0:	20000a34 	.word	0x20000a34
 80033a4:	08016cf4 	.word	0x08016cf4
 80033a8:	20000a1c 	.word	0x20000a1c
 80033ac:	08016bcc 	.word	0x08016bcc
 80033b0:	20000a1e 	.word	0x20000a1e
 80033b4:	08016bf8 	.word	0x08016bf8
 80033b8:	20000a5c 	.word	0x20000a5c
 80033bc:	08016c24 	.word	0x08016c24
 80033c0:	20000a54 	.word	0x20000a54
 80033c4:	08016c44 	.word	0x08016c44
 80033c8:	20000a58 	.word	0x20000a58
 80033cc:	08016c64 	.word	0x08016c64

080033d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033d4:	b672      	cpsid	i
}
 80033d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033d8:	bf00      	nop
 80033da:	e7fd      	b.n	80033d8 <Error_Handler+0x8>

080033dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003420 <HAL_MspInit+0x44>)
 80033e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003420 <HAL_MspInit+0x44>)
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80033ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003420 <HAL_MspInit+0x44>)
 80033f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	607b      	str	r3, [r7, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033fa:	4b09      	ldr	r3, [pc, #36]	@ (8003420 <HAL_MspInit+0x44>)
 80033fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fe:	4a08      	ldr	r2, [pc, #32]	@ (8003420 <HAL_MspInit+0x44>)
 8003400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003404:	6593      	str	r3, [r2, #88]	@ 0x58
 8003406:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <HAL_MspInit+0x44>)
 8003408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003412:	f005 f9cd 	bl	80087b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40021000 	.word	0x40021000

08003424 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b0a4      	sub	sp, #144	@ 0x90
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800343c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003440:	2254      	movs	r2, #84	@ 0x54
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f00e f8d2 	bl	80115ee <memset>
  if(hadc->Instance==ADC1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003452:	d11c      	bne.n	800348e <HAL_ADC_MspInit+0x6a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003454:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003458:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800345a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800345e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003460:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003464:	4618      	mov	r0, r3
 8003466:	f005 fee1 	bl	800922c <HAL_RCCEx_PeriphCLKConfig>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003470:	f7ff ffae 	bl	80033d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003474:	4b85      	ldr	r3, [pc, #532]	@ (800368c <HAL_ADC_MspInit+0x268>)
 8003476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003478:	4a84      	ldr	r2, [pc, #528]	@ (800368c <HAL_ADC_MspInit+0x268>)
 800347a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800347e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003480:	4b82      	ldr	r3, [pc, #520]	@ (800368c <HAL_ADC_MspInit+0x268>)
 8003482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003484:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003488:	627b      	str	r3, [r7, #36]	@ 0x24
 800348a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 800348c:	e183      	b.n	8003796 <HAL_ADC_MspInit+0x372>
  else if(hadc->Instance==ADC3)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a7f      	ldr	r2, [pc, #508]	@ (8003690 <HAL_ADC_MspInit+0x26c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	f040 8087 	bne.w	80035a8 <HAL_ADC_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800349a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800349e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80034a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80034a4:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80034aa:	4618      	mov	r0, r3
 80034ac:	f005 febe 	bl	800922c <HAL_RCCEx_PeriphCLKConfig>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_ADC_MspInit+0x96>
      Error_Handler();
 80034b6:	f7ff ff8b 	bl	80033d0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80034ba:	4b76      	ldr	r3, [pc, #472]	@ (8003694 <HAL_ADC_MspInit+0x270>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3301      	adds	r3, #1
 80034c0:	4a74      	ldr	r2, [pc, #464]	@ (8003694 <HAL_ADC_MspInit+0x270>)
 80034c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80034c4:	4b73      	ldr	r3, [pc, #460]	@ (8003694 <HAL_ADC_MspInit+0x270>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d10b      	bne.n	80034e4 <HAL_ADC_MspInit+0xc0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80034cc:	4b6f      	ldr	r3, [pc, #444]	@ (800368c <HAL_ADC_MspInit+0x268>)
 80034ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d0:	4a6e      	ldr	r2, [pc, #440]	@ (800368c <HAL_ADC_MspInit+0x268>)
 80034d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034d8:	4b6c      	ldr	r3, [pc, #432]	@ (800368c <HAL_ADC_MspInit+0x268>)
 80034da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034e0:	623b      	str	r3, [r7, #32]
 80034e2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e4:	4b69      	ldr	r3, [pc, #420]	@ (800368c <HAL_ADC_MspInit+0x268>)
 80034e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034e8:	4a68      	ldr	r2, [pc, #416]	@ (800368c <HAL_ADC_MspInit+0x268>)
 80034ea:	f043 0302 	orr.w	r3, r3, #2
 80034ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034f0:	4b66      	ldr	r3, [pc, #408]	@ (800368c <HAL_ADC_MspInit+0x268>)
 80034f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	61fb      	str	r3, [r7, #28]
 80034fa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034fc:	4b63      	ldr	r3, [pc, #396]	@ (800368c <HAL_ADC_MspInit+0x268>)
 80034fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003500:	4a62      	ldr	r2, [pc, #392]	@ (800368c <HAL_ADC_MspInit+0x268>)
 8003502:	f043 0310 	orr.w	r3, r3, #16
 8003506:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003508:	4b60      	ldr	r3, [pc, #384]	@ (800368c <HAL_ADC_MspInit+0x268>)
 800350a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	61bb      	str	r3, [r7, #24]
 8003512:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = CS_VREF_1_Pin|HEATSINK_TEMP_Pin;
 8003514:	f242 0302 	movw	r3, #8194	@ 0x2002
 8003518:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800351a:	2303      	movs	r3, #3
 800351c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003520:	2300      	movs	r3, #0
 8003522:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003526:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800352a:	4619      	mov	r1, r3
 800352c:	485a      	ldr	r0, [pc, #360]	@ (8003698 <HAL_ADC_MspInit+0x274>)
 800352e:	f003 f999 	bl	8006864 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PCB_TEMP_Pin|CS_VREF_2_Pin|INPUT_V_ADC_Pin;
 8003532:	f44f 530a 	mov.w	r3, #8832	@ 0x2280
 8003536:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003538:	2303      	movs	r3, #3
 800353a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353e:	2300      	movs	r3, #0
 8003540:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003544:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003548:	4619      	mov	r1, r3
 800354a:	4854      	ldr	r0, [pc, #336]	@ (800369c <HAL_ADC_MspInit+0x278>)
 800354c:	f003 f98a 	bl	8006864 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel1;
 8003550:	4b53      	ldr	r3, [pc, #332]	@ (80036a0 <HAL_ADC_MspInit+0x27c>)
 8003552:	4a54      	ldr	r2, [pc, #336]	@ (80036a4 <HAL_ADC_MspInit+0x280>)
 8003554:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003556:	4b52      	ldr	r3, [pc, #328]	@ (80036a0 <HAL_ADC_MspInit+0x27c>)
 8003558:	2225      	movs	r2, #37	@ 0x25
 800355a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800355c:	4b50      	ldr	r3, [pc, #320]	@ (80036a0 <HAL_ADC_MspInit+0x27c>)
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003562:	4b4f      	ldr	r3, [pc, #316]	@ (80036a0 <HAL_ADC_MspInit+0x27c>)
 8003564:	2200      	movs	r2, #0
 8003566:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003568:	4b4d      	ldr	r3, [pc, #308]	@ (80036a0 <HAL_ADC_MspInit+0x27c>)
 800356a:	2280      	movs	r2, #128	@ 0x80
 800356c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800356e:	4b4c      	ldr	r3, [pc, #304]	@ (80036a0 <HAL_ADC_MspInit+0x27c>)
 8003570:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003574:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003576:	4b4a      	ldr	r3, [pc, #296]	@ (80036a0 <HAL_ADC_MspInit+0x27c>)
 8003578:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800357c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800357e:	4b48      	ldr	r3, [pc, #288]	@ (80036a0 <HAL_ADC_MspInit+0x27c>)
 8003580:	2220      	movs	r2, #32
 8003582:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003584:	4b46      	ldr	r3, [pc, #280]	@ (80036a0 <HAL_ADC_MspInit+0x27c>)
 8003586:	2200      	movs	r2, #0
 8003588:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800358a:	4845      	ldr	r0, [pc, #276]	@ (80036a0 <HAL_ADC_MspInit+0x27c>)
 800358c:	f002 fef8 	bl	8006380 <HAL_DMA_Init>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_ADC_MspInit+0x176>
      Error_Handler();
 8003596:	f7ff ff1b 	bl	80033d0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a40      	ldr	r2, [pc, #256]	@ (80036a0 <HAL_ADC_MspInit+0x27c>)
 800359e:	655a      	str	r2, [r3, #84]	@ 0x54
 80035a0:	4a3f      	ldr	r2, [pc, #252]	@ (80036a0 <HAL_ADC_MspInit+0x27c>)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80035a6:	e0f6      	b.n	8003796 <HAL_ADC_MspInit+0x372>
  else if(hadc->Instance==ADC4)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a3e      	ldr	r2, [pc, #248]	@ (80036a8 <HAL_ADC_MspInit+0x284>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	f040 8080 	bne.w	80036b4 <HAL_ADC_MspInit+0x290>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80035b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80035ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80035be:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80035c4:	4618      	mov	r0, r3
 80035c6:	f005 fe31 	bl	800922c <HAL_RCCEx_PeriphCLKConfig>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_ADC_MspInit+0x1b0>
      Error_Handler();
 80035d0:	f7ff fefe 	bl	80033d0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80035d4:	4b2f      	ldr	r3, [pc, #188]	@ (8003694 <HAL_ADC_MspInit+0x270>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3301      	adds	r3, #1
 80035da:	4a2e      	ldr	r2, [pc, #184]	@ (8003694 <HAL_ADC_MspInit+0x270>)
 80035dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80035de:	4b2d      	ldr	r3, [pc, #180]	@ (8003694 <HAL_ADC_MspInit+0x270>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d10b      	bne.n	80035fe <HAL_ADC_MspInit+0x1da>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80035e6:	4b29      	ldr	r3, [pc, #164]	@ (800368c <HAL_ADC_MspInit+0x268>)
 80035e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ea:	4a28      	ldr	r2, [pc, #160]	@ (800368c <HAL_ADC_MspInit+0x268>)
 80035ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035f2:	4b26      	ldr	r3, [pc, #152]	@ (800368c <HAL_ADC_MspInit+0x268>)
 80035f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035fe:	4b23      	ldr	r3, [pc, #140]	@ (800368c <HAL_ADC_MspInit+0x268>)
 8003600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003602:	4a22      	ldr	r2, [pc, #136]	@ (800368c <HAL_ADC_MspInit+0x268>)
 8003604:	f043 0310 	orr.w	r3, r3, #16
 8003608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800360a:	4b20      	ldr	r3, [pc, #128]	@ (800368c <HAL_ADC_MspInit+0x268>)
 800360c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800360e:	f003 0310 	and.w	r3, r3, #16
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT_V_ADC_Pin;
 8003616:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800361a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800361c:	2303      	movs	r3, #3
 800361e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003622:	2300      	movs	r3, #0
 8003624:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(OUTPUT_V_ADC_GPIO_Port, &GPIO_InitStruct);
 8003628:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800362c:	4619      	mov	r1, r3
 800362e:	481b      	ldr	r0, [pc, #108]	@ (800369c <HAL_ADC_MspInit+0x278>)
 8003630:	f003 f918 	bl	8006864 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel2;
 8003634:	4b1d      	ldr	r3, [pc, #116]	@ (80036ac <HAL_ADC_MspInit+0x288>)
 8003636:	4a1e      	ldr	r2, [pc, #120]	@ (80036b0 <HAL_ADC_MspInit+0x28c>)
 8003638:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 800363a:	4b1c      	ldr	r3, [pc, #112]	@ (80036ac <HAL_ADC_MspInit+0x288>)
 800363c:	2226      	movs	r2, #38	@ 0x26
 800363e:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003640:	4b1a      	ldr	r3, [pc, #104]	@ (80036ac <HAL_ADC_MspInit+0x288>)
 8003642:	2200      	movs	r2, #0
 8003644:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003646:	4b19      	ldr	r3, [pc, #100]	@ (80036ac <HAL_ADC_MspInit+0x288>)
 8003648:	2200      	movs	r2, #0
 800364a:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800364c:	4b17      	ldr	r3, [pc, #92]	@ (80036ac <HAL_ADC_MspInit+0x288>)
 800364e:	2280      	movs	r2, #128	@ 0x80
 8003650:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003652:	4b16      	ldr	r3, [pc, #88]	@ (80036ac <HAL_ADC_MspInit+0x288>)
 8003654:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003658:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800365a:	4b14      	ldr	r3, [pc, #80]	@ (80036ac <HAL_ADC_MspInit+0x288>)
 800365c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003660:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8003662:	4b12      	ldr	r3, [pc, #72]	@ (80036ac <HAL_ADC_MspInit+0x288>)
 8003664:	2220      	movs	r2, #32
 8003666:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8003668:	4b10      	ldr	r3, [pc, #64]	@ (80036ac <HAL_ADC_MspInit+0x288>)
 800366a:	2200      	movs	r2, #0
 800366c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800366e:	480f      	ldr	r0, [pc, #60]	@ (80036ac <HAL_ADC_MspInit+0x288>)
 8003670:	f002 fe86 	bl	8006380 <HAL_DMA_Init>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_ADC_MspInit+0x25a>
      Error_Handler();
 800367a:	f7ff fea9 	bl	80033d0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a0a      	ldr	r2, [pc, #40]	@ (80036ac <HAL_ADC_MspInit+0x288>)
 8003682:	655a      	str	r2, [r3, #84]	@ 0x54
 8003684:	4a09      	ldr	r2, [pc, #36]	@ (80036ac <HAL_ADC_MspInit+0x288>)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800368a:	e084      	b.n	8003796 <HAL_ADC_MspInit+0x372>
 800368c:	40021000 	.word	0x40021000
 8003690:	50000400 	.word	0x50000400
 8003694:	20000b50 	.word	0x20000b50
 8003698:	48000400 	.word	0x48000400
 800369c:	48001000 	.word	0x48001000
 80036a0:	20000544 	.word	0x20000544
 80036a4:	40020008 	.word	0x40020008
 80036a8:	50000500 	.word	0x50000500
 80036ac:	200005a4 	.word	0x200005a4
 80036b0:	4002001c 	.word	0x4002001c
  else if(hadc->Instance==ADC5)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a39      	ldr	r2, [pc, #228]	@ (80037a0 <HAL_ADC_MspInit+0x37c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d16b      	bne.n	8003796 <HAL_ADC_MspInit+0x372>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80036be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80036c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80036c8:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036ce:	4618      	mov	r0, r3
 80036d0:	f005 fdac 	bl	800922c <HAL_RCCEx_PeriphCLKConfig>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_ADC_MspInit+0x2ba>
      Error_Handler();
 80036da:	f7ff fe79 	bl	80033d0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80036de:	4b31      	ldr	r3, [pc, #196]	@ (80037a4 <HAL_ADC_MspInit+0x380>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3301      	adds	r3, #1
 80036e4:	4a2f      	ldr	r2, [pc, #188]	@ (80037a4 <HAL_ADC_MspInit+0x380>)
 80036e6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80036e8:	4b2e      	ldr	r3, [pc, #184]	@ (80037a4 <HAL_ADC_MspInit+0x380>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d10b      	bne.n	8003708 <HAL_ADC_MspInit+0x2e4>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80036f0:	4b2d      	ldr	r3, [pc, #180]	@ (80037a8 <HAL_ADC_MspInit+0x384>)
 80036f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f4:	4a2c      	ldr	r2, [pc, #176]	@ (80037a8 <HAL_ADC_MspInit+0x384>)
 80036f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036fc:	4b2a      	ldr	r3, [pc, #168]	@ (80037a8 <HAL_ADC_MspInit+0x384>)
 80036fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003700:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003708:	4b27      	ldr	r3, [pc, #156]	@ (80037a8 <HAL_ADC_MspInit+0x384>)
 800370a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800370c:	4a26      	ldr	r2, [pc, #152]	@ (80037a8 <HAL_ADC_MspInit+0x384>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003714:	4b24      	ldr	r3, [pc, #144]	@ (80037a8 <HAL_ADC_MspInit+0x384>)
 8003716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMAX2_SUM_Pin;
 8003720:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003724:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003726:	2303      	movs	r3, #3
 8003728:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372c:	2300      	movs	r3, #0
 800372e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(IMAX2_SUM_GPIO_Port, &GPIO_InitStruct);
 8003732:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003736:	4619      	mov	r1, r3
 8003738:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800373c:	f003 f892 	bl	8006864 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel3;
 8003740:	4b1a      	ldr	r3, [pc, #104]	@ (80037ac <HAL_ADC_MspInit+0x388>)
 8003742:	4a1b      	ldr	r2, [pc, #108]	@ (80037b0 <HAL_ADC_MspInit+0x38c>)
 8003744:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8003746:	4b19      	ldr	r3, [pc, #100]	@ (80037ac <HAL_ADC_MspInit+0x388>)
 8003748:	2227      	movs	r2, #39	@ 0x27
 800374a:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800374c:	4b17      	ldr	r3, [pc, #92]	@ (80037ac <HAL_ADC_MspInit+0x388>)
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8003752:	4b16      	ldr	r3, [pc, #88]	@ (80037ac <HAL_ADC_MspInit+0x388>)
 8003754:	2200      	movs	r2, #0
 8003756:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8003758:	4b14      	ldr	r3, [pc, #80]	@ (80037ac <HAL_ADC_MspInit+0x388>)
 800375a:	2280      	movs	r2, #128	@ 0x80
 800375c:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800375e:	4b13      	ldr	r3, [pc, #76]	@ (80037ac <HAL_ADC_MspInit+0x388>)
 8003760:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003764:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003766:	4b11      	ldr	r3, [pc, #68]	@ (80037ac <HAL_ADC_MspInit+0x388>)
 8003768:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800376c:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 800376e:	4b0f      	ldr	r3, [pc, #60]	@ (80037ac <HAL_ADC_MspInit+0x388>)
 8003770:	2220      	movs	r2, #32
 8003772:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8003774:	4b0d      	ldr	r3, [pc, #52]	@ (80037ac <HAL_ADC_MspInit+0x388>)
 8003776:	2200      	movs	r2, #0
 8003778:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800377a:	480c      	ldr	r0, [pc, #48]	@ (80037ac <HAL_ADC_MspInit+0x388>)
 800377c:	f002 fe00 	bl	8006380 <HAL_DMA_Init>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <HAL_ADC_MspInit+0x366>
      Error_Handler();
 8003786:	f7ff fe23 	bl	80033d0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a07      	ldr	r2, [pc, #28]	@ (80037ac <HAL_ADC_MspInit+0x388>)
 800378e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003790:	4a06      	ldr	r2, [pc, #24]	@ (80037ac <HAL_ADC_MspInit+0x388>)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003796:	bf00      	nop
 8003798:	3790      	adds	r7, #144	@ 0x90
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	50000600 	.word	0x50000600
 80037a4:	20000b50 	.word	0x20000b50
 80037a8:	40021000 	.word	0x40021000
 80037ac:	20000604 	.word	0x20000604
 80037b0:	40020030 	.word	0x40020030

080037b4 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a0d      	ldr	r2, [pc, #52]	@ (80037f8 <HAL_CORDIC_MspInit+0x44>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d113      	bne.n	80037ee <HAL_CORDIC_MspInit+0x3a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80037c6:	4b0d      	ldr	r3, [pc, #52]	@ (80037fc <HAL_CORDIC_MspInit+0x48>)
 80037c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ca:	4a0c      	ldr	r2, [pc, #48]	@ (80037fc <HAL_CORDIC_MspInit+0x48>)
 80037cc:	f043 0308 	orr.w	r3, r3, #8
 80037d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80037d2:	4b0a      	ldr	r3, [pc, #40]	@ (80037fc <HAL_CORDIC_MspInit+0x48>)
 80037d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
    /* CORDIC interrupt Init */
    HAL_NVIC_SetPriority(CORDIC_IRQn, 0, 0);
 80037de:	2200      	movs	r2, #0
 80037e0:	2100      	movs	r1, #0
 80037e2:	2064      	movs	r0, #100	@ 0x64
 80037e4:	f002 fab9 	bl	8005d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CORDIC_IRQn);
 80037e8:	2064      	movs	r0, #100	@ 0x64
 80037ea:	f002 fad0 	bl	8005d8e <HAL_NVIC_EnableIRQ>

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 80037ee:	bf00      	nop
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40020c00 	.word	0x40020c00
 80037fc:	40021000 	.word	0x40021000

08003800 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08c      	sub	sp, #48	@ 0x30
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	f107 031c 	add.w	r3, r7, #28
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a5b      	ldr	r2, [pc, #364]	@ (800398c <HAL_DAC_MspInit+0x18c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d159      	bne.n	80038d6 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003822:	4b5b      	ldr	r3, [pc, #364]	@ (8003990 <HAL_DAC_MspInit+0x190>)
 8003824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003826:	4a5a      	ldr	r2, [pc, #360]	@ (8003990 <HAL_DAC_MspInit+0x190>)
 8003828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800382c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800382e:	4b58      	ldr	r3, [pc, #352]	@ (8003990 <HAL_DAC_MspInit+0x190>)
 8003830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003832:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003836:	61bb      	str	r3, [r7, #24]
 8003838:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800383a:	4b55      	ldr	r3, [pc, #340]	@ (8003990 <HAL_DAC_MspInit+0x190>)
 800383c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800383e:	4a54      	ldr	r2, [pc, #336]	@ (8003990 <HAL_DAC_MspInit+0x190>)
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003846:	4b52      	ldr	r3, [pc, #328]	@ (8003990 <HAL_DAC_MspInit+0x190>)
 8003848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = IMAX_Pin|IMAX2_Pin;
 8003852:	2330      	movs	r3, #48	@ 0x30
 8003854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003856:	2303      	movs	r3, #3
 8003858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385a:	2300      	movs	r3, #0
 800385c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800385e:	f107 031c 	add.w	r3, r7, #28
 8003862:	4619      	mov	r1, r3
 8003864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003868:	f002 fffc 	bl	8006864 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel4;
 800386c:	4b49      	ldr	r3, [pc, #292]	@ (8003994 <HAL_DAC_MspInit+0x194>)
 800386e:	4a4a      	ldr	r2, [pc, #296]	@ (8003998 <HAL_DAC_MspInit+0x198>)
 8003870:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8003872:	4b48      	ldr	r3, [pc, #288]	@ (8003994 <HAL_DAC_MspInit+0x194>)
 8003874:	2206      	movs	r2, #6
 8003876:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003878:	4b46      	ldr	r3, [pc, #280]	@ (8003994 <HAL_DAC_MspInit+0x194>)
 800387a:	2210      	movs	r2, #16
 800387c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800387e:	4b45      	ldr	r3, [pc, #276]	@ (8003994 <HAL_DAC_MspInit+0x194>)
 8003880:	2200      	movs	r2, #0
 8003882:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003884:	4b43      	ldr	r3, [pc, #268]	@ (8003994 <HAL_DAC_MspInit+0x194>)
 8003886:	2280      	movs	r2, #128	@ 0x80
 8003888:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800388a:	4b42      	ldr	r3, [pc, #264]	@ (8003994 <HAL_DAC_MspInit+0x194>)
 800388c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003890:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003892:	4b40      	ldr	r3, [pc, #256]	@ (8003994 <HAL_DAC_MspInit+0x194>)
 8003894:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003898:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800389a:	4b3e      	ldr	r3, [pc, #248]	@ (8003994 <HAL_DAC_MspInit+0x194>)
 800389c:	2220      	movs	r2, #32
 800389e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80038a0:	4b3c      	ldr	r3, [pc, #240]	@ (8003994 <HAL_DAC_MspInit+0x194>)
 80038a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80038a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80038a8:	483a      	ldr	r0, [pc, #232]	@ (8003994 <HAL_DAC_MspInit+0x194>)
 80038aa:	f002 fd69 	bl	8006380 <HAL_DMA_Init>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80038b4:	f7ff fd8c 	bl	80033d0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a36      	ldr	r2, [pc, #216]	@ (8003994 <HAL_DAC_MspInit+0x194>)
 80038bc:	609a      	str	r2, [r3, #8]
 80038be:	4a35      	ldr	r2, [pc, #212]	@ (8003994 <HAL_DAC_MspInit+0x194>)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80038c4:	2200      	movs	r2, #0
 80038c6:	2100      	movs	r1, #0
 80038c8:	2036      	movs	r0, #54	@ 0x36
 80038ca:	f002 fa46 	bl	8005d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80038ce:	2036      	movs	r0, #54	@ 0x36
 80038d0:	f002 fa5d 	bl	8005d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 80038d4:	e055      	b.n	8003982 <HAL_DAC_MspInit+0x182>
  else if(hdac->Instance==DAC2)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a30      	ldr	r2, [pc, #192]	@ (800399c <HAL_DAC_MspInit+0x19c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d150      	bne.n	8003982 <HAL_DAC_MspInit+0x182>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80038e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003990 <HAL_DAC_MspInit+0x190>)
 80038e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e4:	4a2a      	ldr	r2, [pc, #168]	@ (8003990 <HAL_DAC_MspInit+0x190>)
 80038e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038ec:	4b28      	ldr	r3, [pc, #160]	@ (8003990 <HAL_DAC_MspInit+0x190>)
 80038ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038f8:	4b25      	ldr	r3, [pc, #148]	@ (8003990 <HAL_DAC_MspInit+0x190>)
 80038fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038fc:	4a24      	ldr	r2, [pc, #144]	@ (8003990 <HAL_DAC_MspInit+0x190>)
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003904:	4b22      	ldr	r3, [pc, #136]	@ (8003990 <HAL_DAC_MspInit+0x190>)
 8003906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMIN_Pin;
 8003910:	2340      	movs	r3, #64	@ 0x40
 8003912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003914:	2303      	movs	r3, #3
 8003916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003918:	2300      	movs	r3, #0
 800391a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMIN_GPIO_Port, &GPIO_InitStruct);
 800391c:	f107 031c 	add.w	r3, r7, #28
 8003920:	4619      	mov	r1, r3
 8003922:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003926:	f002 ff9d 	bl	8006864 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel5;
 800392a:	4b1d      	ldr	r3, [pc, #116]	@ (80039a0 <HAL_DAC_MspInit+0x1a0>)
 800392c:	4a1d      	ldr	r2, [pc, #116]	@ (80039a4 <HAL_DAC_MspInit+0x1a4>)
 800392e:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8003930:	4b1b      	ldr	r3, [pc, #108]	@ (80039a0 <HAL_DAC_MspInit+0x1a0>)
 8003932:	2229      	movs	r2, #41	@ 0x29
 8003934:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003936:	4b1a      	ldr	r3, [pc, #104]	@ (80039a0 <HAL_DAC_MspInit+0x1a0>)
 8003938:	2210      	movs	r2, #16
 800393a:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800393c:	4b18      	ldr	r3, [pc, #96]	@ (80039a0 <HAL_DAC_MspInit+0x1a0>)
 800393e:	2200      	movs	r2, #0
 8003940:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003942:	4b17      	ldr	r3, [pc, #92]	@ (80039a0 <HAL_DAC_MspInit+0x1a0>)
 8003944:	2280      	movs	r2, #128	@ 0x80
 8003946:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003948:	4b15      	ldr	r3, [pc, #84]	@ (80039a0 <HAL_DAC_MspInit+0x1a0>)
 800394a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800394e:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003950:	4b13      	ldr	r3, [pc, #76]	@ (80039a0 <HAL_DAC_MspInit+0x1a0>)
 8003952:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003956:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8003958:	4b11      	ldr	r3, [pc, #68]	@ (80039a0 <HAL_DAC_MspInit+0x1a0>)
 800395a:	2220      	movs	r2, #32
 800395c:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800395e:	4b10      	ldr	r3, [pc, #64]	@ (80039a0 <HAL_DAC_MspInit+0x1a0>)
 8003960:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003964:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8003966:	480e      	ldr	r0, [pc, #56]	@ (80039a0 <HAL_DAC_MspInit+0x1a0>)
 8003968:	f002 fd0a 	bl	8006380 <HAL_DMA_Init>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_DAC_MspInit+0x176>
      Error_Handler();
 8003972:	f7ff fd2d 	bl	80033d0 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a09      	ldr	r2, [pc, #36]	@ (80039a0 <HAL_DAC_MspInit+0x1a0>)
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	4a08      	ldr	r2, [pc, #32]	@ (80039a0 <HAL_DAC_MspInit+0x1a0>)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003982:	bf00      	nop
 8003984:	3730      	adds	r7, #48	@ 0x30
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	50000800 	.word	0x50000800
 8003990:	40021000 	.word	0x40021000
 8003994:	200006b4 	.word	0x200006b4
 8003998:	40020044 	.word	0x40020044
 800399c:	50000c00 	.word	0x50000c00
 80039a0:	20000714 	.word	0x20000714
 80039a4:	40020058 	.word	0x40020058

080039a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a16      	ldr	r2, [pc, #88]	@ (8003a10 <HAL_TIM_PWM_MspInit+0x68>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d114      	bne.n	80039e4 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039ba:	4b16      	ldr	r3, [pc, #88]	@ (8003a14 <HAL_TIM_PWM_MspInit+0x6c>)
 80039bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039be:	4a15      	ldr	r2, [pc, #84]	@ (8003a14 <HAL_TIM_PWM_MspInit+0x6c>)
 80039c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80039c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80039c6:	4b13      	ldr	r3, [pc, #76]	@ (8003a14 <HAL_TIM_PWM_MspInit+0x6c>)
 80039c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80039d2:	2200      	movs	r2, #0
 80039d4:	2100      	movs	r1, #0
 80039d6:	2018      	movs	r0, #24
 80039d8:	f002 f9bf 	bl	8005d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80039dc:	2018      	movs	r0, #24
 80039de:	f002 f9d6 	bl	8005d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80039e2:	e010      	b.n	8003a06 <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM8)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003a18 <HAL_TIM_PWM_MspInit+0x70>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d10b      	bne.n	8003a06 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80039ee:	4b09      	ldr	r3, [pc, #36]	@ (8003a14 <HAL_TIM_PWM_MspInit+0x6c>)
 80039f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f2:	4a08      	ldr	r2, [pc, #32]	@ (8003a14 <HAL_TIM_PWM_MspInit+0x6c>)
 80039f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80039f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80039fa:	4b06      	ldr	r3, [pc, #24]	@ (8003a14 <HAL_TIM_PWM_MspInit+0x6c>)
 80039fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	68bb      	ldr	r3, [r7, #8]
}
 8003a06:	bf00      	nop
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40012c00 	.word	0x40012c00
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40013400 	.word	0x40013400

08003a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a35      	ldr	r2, [pc, #212]	@ (8003b00 <HAL_TIM_Base_MspInit+0xe4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d10c      	bne.n	8003a48 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a2e:	4b35      	ldr	r3, [pc, #212]	@ (8003b04 <HAL_TIM_Base_MspInit+0xe8>)
 8003a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a32:	4a34      	ldr	r2, [pc, #208]	@ (8003b04 <HAL_TIM_Base_MspInit+0xe8>)
 8003a34:	f043 0304 	orr.w	r3, r3, #4
 8003a38:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a3a:	4b32      	ldr	r3, [pc, #200]	@ (8003b04 <HAL_TIM_Base_MspInit+0xe8>)
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	61fb      	str	r3, [r7, #28]
 8003a44:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003a46:	e056      	b.n	8003af6 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a2e      	ldr	r2, [pc, #184]	@ (8003b08 <HAL_TIM_Base_MspInit+0xec>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d114      	bne.n	8003a7c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a52:	4b2c      	ldr	r3, [pc, #176]	@ (8003b04 <HAL_TIM_Base_MspInit+0xe8>)
 8003a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a56:	4a2b      	ldr	r2, [pc, #172]	@ (8003b04 <HAL_TIM_Base_MspInit+0xe8>)
 8003a58:	f043 0310 	orr.w	r3, r3, #16
 8003a5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a5e:	4b29      	ldr	r3, [pc, #164]	@ (8003b04 <HAL_TIM_Base_MspInit+0xe8>)
 8003a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	61bb      	str	r3, [r7, #24]
 8003a68:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	2036      	movs	r0, #54	@ 0x36
 8003a70:	f002 f973 	bl	8005d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a74:	2036      	movs	r0, #54	@ 0x36
 8003a76:	f002 f98a 	bl	8005d8e <HAL_NVIC_EnableIRQ>
}
 8003a7a:	e03c      	b.n	8003af6 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM7)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a22      	ldr	r2, [pc, #136]	@ (8003b0c <HAL_TIM_Base_MspInit+0xf0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d10c      	bne.n	8003aa0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003a86:	4b1f      	ldr	r3, [pc, #124]	@ (8003b04 <HAL_TIM_Base_MspInit+0xe8>)
 8003a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003b04 <HAL_TIM_Base_MspInit+0xe8>)
 8003a8c:	f043 0320 	orr.w	r3, r3, #32
 8003a90:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a92:	4b1c      	ldr	r3, [pc, #112]	@ (8003b04 <HAL_TIM_Base_MspInit+0xe8>)
 8003a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	697b      	ldr	r3, [r7, #20]
}
 8003a9e:	e02a      	b.n	8003af6 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM15)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1a      	ldr	r2, [pc, #104]	@ (8003b10 <HAL_TIM_Base_MspInit+0xf4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d114      	bne.n	8003ad4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003aaa:	4b16      	ldr	r3, [pc, #88]	@ (8003b04 <HAL_TIM_Base_MspInit+0xe8>)
 8003aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aae:	4a15      	ldr	r2, [pc, #84]	@ (8003b04 <HAL_TIM_Base_MspInit+0xe8>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ab6:	4b13      	ldr	r3, [pc, #76]	@ (8003b04 <HAL_TIM_Base_MspInit+0xe8>)
 8003ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	2018      	movs	r0, #24
 8003ac8:	f002 f947 	bl	8005d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003acc:	2018      	movs	r0, #24
 8003ace:	f002 f95e 	bl	8005d8e <HAL_NVIC_EnableIRQ>
}
 8003ad2:	e010      	b.n	8003af6 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM16)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8003b14 <HAL_TIM_Base_MspInit+0xf8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d10b      	bne.n	8003af6 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003ade:	4b09      	ldr	r3, [pc, #36]	@ (8003b04 <HAL_TIM_Base_MspInit+0xe8>)
 8003ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae2:	4a08      	ldr	r2, [pc, #32]	@ (8003b04 <HAL_TIM_Base_MspInit+0xe8>)
 8003ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ae8:	6613      	str	r3, [r2, #96]	@ 0x60
 8003aea:	4b06      	ldr	r3, [pc, #24]	@ (8003b04 <HAL_TIM_Base_MspInit+0xe8>)
 8003aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
}
 8003af6:	bf00      	nop
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40000800 	.word	0x40000800
 8003b04:	40021000 	.word	0x40021000
 8003b08:	40001000 	.word	0x40001000
 8003b0c:	40001400 	.word	0x40001400
 8003b10:	40014000 	.word	0x40014000
 8003b14:	40014400 	.word	0x40014400

08003b18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	@ 0x28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b20:	f107 0314 	add.w	r3, r7, #20
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a33      	ldr	r2, [pc, #204]	@ (8003c04 <HAL_TIM_MspPostInit+0xec>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d11c      	bne.n	8003b74 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b3a:	4b33      	ldr	r3, [pc, #204]	@ (8003c08 <HAL_TIM_MspPostInit+0xf0>)
 8003b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3e:	4a32      	ldr	r2, [pc, #200]	@ (8003c08 <HAL_TIM_MspPostInit+0xf0>)
 8003b40:	f043 0304 	orr.w	r3, r3, #4
 8003b44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b46:	4b30      	ldr	r3, [pc, #192]	@ (8003c08 <HAL_TIM_MspPostInit+0xf0>)
 8003b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DEADTIME_TR_Pin;
 8003b52:	2301      	movs	r3, #1
 8003b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b56:	2302      	movs	r3, #2
 8003b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003b62:	2302      	movs	r3, #2
 8003b64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_TR_GPIO_Port, &GPIO_InitStruct);
 8003b66:	f107 0314 	add.w	r3, r7, #20
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4827      	ldr	r0, [pc, #156]	@ (8003c0c <HAL_TIM_MspPostInit+0xf4>)
 8003b6e:	f002 fe79 	bl	8006864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003b72:	e043      	b.n	8003bfc <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a25      	ldr	r2, [pc, #148]	@ (8003c10 <HAL_TIM_MspPostInit+0xf8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d11d      	bne.n	8003bba <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b7e:	4b22      	ldr	r3, [pc, #136]	@ (8003c08 <HAL_TIM_MspPostInit+0xf0>)
 8003b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b82:	4a21      	ldr	r2, [pc, #132]	@ (8003c08 <HAL_TIM_MspPostInit+0xf0>)
 8003b84:	f043 0308 	orr.w	r3, r3, #8
 8003b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8003c08 <HAL_TIM_MspPostInit+0xf0>)
 8003b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8003b96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4818      	ldr	r0, [pc, #96]	@ (8003c14 <HAL_TIM_MspPostInit+0xfc>)
 8003bb4:	f002 fe56 	bl	8006864 <HAL_GPIO_Init>
}
 8003bb8:	e020      	b.n	8003bfc <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a16      	ldr	r2, [pc, #88]	@ (8003c18 <HAL_TIM_MspPostInit+0x100>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d11b      	bne.n	8003bfc <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bc4:	4b10      	ldr	r3, [pc, #64]	@ (8003c08 <HAL_TIM_MspPostInit+0xf0>)
 8003bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc8:	4a0f      	ldr	r2, [pc, #60]	@ (8003c08 <HAL_TIM_MspPostInit+0xf0>)
 8003bca:	f043 0304 	orr.w	r3, r3, #4
 8003bce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8003c08 <HAL_TIM_MspPostInit+0xf0>)
 8003bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEADTIME_HC_Pin;
 8003bdc:	2380      	movs	r3, #128	@ 0x80
 8003bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be0:	2302      	movs	r3, #2
 8003be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be8:	2300      	movs	r3, #0
 8003bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003bec:	2304      	movs	r3, #4
 8003bee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_HC_GPIO_Port, &GPIO_InitStruct);
 8003bf0:	f107 0314 	add.w	r3, r7, #20
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4805      	ldr	r0, [pc, #20]	@ (8003c0c <HAL_TIM_MspPostInit+0xf4>)
 8003bf8:	f002 fe34 	bl	8006864 <HAL_GPIO_Init>
}
 8003bfc:	bf00      	nop
 8003bfe:	3728      	adds	r7, #40	@ 0x28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40012c00 	.word	0x40012c00
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	48000800 	.word	0x48000800
 8003c10:	40000800 	.word	0x40000800
 8003c14:	48000c00 	.word	0x48000c00
 8003c18:	40013400 	.word	0x40013400

08003c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b09e      	sub	sp, #120	@ 0x78
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c24:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	609a      	str	r2, [r3, #8]
 8003c30:	60da      	str	r2, [r3, #12]
 8003c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c34:	f107 0310 	add.w	r3, r7, #16
 8003c38:	2254      	movs	r2, #84	@ 0x54
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f00d fcd6 	bl	80115ee <memset>
  if(huart->Instance==UART4)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc4 <HAL_UART_MspInit+0xa8>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d136      	bne.n	8003cba <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003c4c:	2308      	movs	r3, #8
 8003c4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_HSI;
 8003c50:	2380      	movs	r3, #128	@ 0x80
 8003c52:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c54:	f107 0310 	add.w	r3, r7, #16
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f005 fae7 	bl	800922c <HAL_RCCEx_PeriphCLKConfig>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003c64:	f7ff fbb4 	bl	80033d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003c68:	4b17      	ldr	r3, [pc, #92]	@ (8003cc8 <HAL_UART_MspInit+0xac>)
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6c:	4a16      	ldr	r2, [pc, #88]	@ (8003cc8 <HAL_UART_MspInit+0xac>)
 8003c6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003c72:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c74:	4b14      	ldr	r3, [pc, #80]	@ (8003cc8 <HAL_UART_MspInit+0xac>)
 8003c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c80:	4b11      	ldr	r3, [pc, #68]	@ (8003cc8 <HAL_UART_MspInit+0xac>)
 8003c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c84:	4a10      	ldr	r2, [pc, #64]	@ (8003cc8 <HAL_UART_MspInit+0xac>)
 8003c86:	f043 0304 	orr.w	r3, r3, #4
 8003c8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc8 <HAL_UART_MspInit+0xac>)
 8003c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003c98:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003c9c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003caa:	2305      	movs	r3, #5
 8003cac:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4805      	ldr	r0, [pc, #20]	@ (8003ccc <HAL_UART_MspInit+0xb0>)
 8003cb6:	f002 fdd5 	bl	8006864 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8003cba:	bf00      	nop
 8003cbc:	3778      	adds	r7, #120	@ 0x78
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40004c00 	.word	0x40004c00
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	48000800 	.word	0x48000800

08003cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003cd4:	bf00      	nop
 8003cd6:	e7fd      	b.n	8003cd4 <NMI_Handler+0x4>

08003cd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cdc:	bf00      	nop
 8003cde:	e7fd      	b.n	8003cdc <HardFault_Handler+0x4>

08003ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ce4:	bf00      	nop
 8003ce6:	e7fd      	b.n	8003ce4 <MemManage_Handler+0x4>

08003ce8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cec:	bf00      	nop
 8003cee:	e7fd      	b.n	8003cec <BusFault_Handler+0x4>

08003cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cf4:	bf00      	nop
 8003cf6:	e7fd      	b.n	8003cf4 <UsageFault_Handler+0x4>

08003cf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d06:	b480      	push	{r7}
 8003d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d0a:	bf00      	nop
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d18:	bf00      	nop
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d26:	f000 f9b9 	bl	800409c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003d34:	4802      	ldr	r0, [pc, #8]	@ (8003d40 <DMA1_Channel1_IRQHandler+0x10>)
 8003d36:	f002 fc46 	bl	80065c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003d3a:	bf00      	nop
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000544 	.word	0x20000544

08003d44 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8003d48:	4802      	ldr	r0, [pc, #8]	@ (8003d54 <DMA1_Channel2_IRQHandler+0x10>)
 8003d4a:	f002 fc3c 	bl	80065c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	200005a4 	.word	0x200005a4

08003d58 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8003d5c:	4802      	ldr	r0, [pc, #8]	@ (8003d68 <DMA1_Channel3_IRQHandler+0x10>)
 8003d5e:	f002 fc32 	bl	80065c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003d62:	bf00      	nop
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20000604 	.word	0x20000604

08003d6c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003d70:	4802      	ldr	r0, [pc, #8]	@ (8003d7c <DMA1_Channel4_IRQHandler+0x10>)
 8003d72:	f002 fc28 	bl	80065c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	200006b4 	.word	0x200006b4

08003d80 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8003d84:	4802      	ldr	r0, [pc, #8]	@ (8003d90 <DMA1_Channel5_IRQHandler+0x10>)
 8003d86:	f002 fc1e 	bl	80065c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003d8a:	bf00      	nop
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	20000714 	.word	0x20000714

08003d94 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003d98:	4802      	ldr	r0, [pc, #8]	@ (8003da4 <USB_LP_IRQHandler+0x10>)
 8003d9a:	f003 f81f 	bl	8006ddc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003d9e:	bf00      	nop
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20002030 	.word	0x20002030

08003da8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003dac:	4803      	ldr	r0, [pc, #12]	@ (8003dbc <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8003dae:	f005 ff63 	bl	8009c78 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8003db2:	4803      	ldr	r0, [pc, #12]	@ (8003dc0 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8003db4:	f005 ff60 	bl	8009c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003db8:	bf00      	nop
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	20000774 	.word	0x20000774
 8003dc0:	200008f0 	.word	0x200008f0

08003dc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
					HEAT_SINK_TEMP = (ADC3_DMA_BUFFER[4]/4096)*3.3;//(Low_pass_filter(ADC3_DMA_BUFFER[4], HEAT_SINK_TEMP)/4096)*3.3;
					FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
					}*/

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003dc8:	4803      	ldr	r0, [pc, #12]	@ (8003dd8 <TIM6_DAC_IRQHandler+0x14>)
 8003dca:	f005 ff55 	bl	8009c78 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8003dce:	4803      	ldr	r0, [pc, #12]	@ (8003ddc <TIM6_DAC_IRQHandler+0x18>)
 8003dd0:	f002 f886 	bl	8005ee0 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003dd4:	bf00      	nop
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	2000080c 	.word	0x2000080c
 8003ddc:	2000068c 	.word	0x2000068c

08003de0 <CORDIC_IRQHandler>:

/**
  * @brief This function handles CORDIC interrupt.
  */
void CORDIC_IRQHandler(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CORDIC_IRQn 0 */

  /* USER CODE END CORDIC_IRQn 0 */
  HAL_CORDIC_IRQHandler(&hcordic);
 8003de4:	4802      	ldr	r0, [pc, #8]	@ (8003df0 <CORDIC_IRQHandler+0x10>)
 8003de6:	f001 fe42 	bl	8005a6e <HAL_CORDIC_IRQHandler>
  /* USER CODE BEGIN CORDIC_IRQn 1 */

  /* USER CODE END CORDIC_IRQn 1 */
}
 8003dea:	bf00      	nop
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	20000664 	.word	0x20000664

08003df4 <_getpid>:
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	2301      	movs	r3, #1
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <_kill>:
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
 8003e0e:	f00d fc53 	bl	80116b8 <__errno>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2216      	movs	r2, #22
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <_exit>:
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff ffe7 	bl	8003e04 <_kill>
 8003e36:	bf00      	nop
 8003e38:	e7fd      	b.n	8003e36 <_exit+0x12>

08003e3a <_read>:
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b086      	sub	sp, #24
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	607a      	str	r2, [r7, #4]
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	e00a      	b.n	8003e62 <_read+0x28>
 8003e4c:	f3af 8000 	nop.w
 8003e50:	4601      	mov	r1, r0
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	60ba      	str	r2, [r7, #8]
 8003e58:	b2ca      	uxtb	r2, r1
 8003e5a:	701a      	strb	r2, [r3, #0]
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	dbf0      	blt.n	8003e4c <_read+0x12>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <_write>:
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	e009      	b.n	8003e9a <_write+0x26>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	60ba      	str	r2, [r7, #8]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f3af 8000 	nop.w
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	3301      	adds	r3, #1
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	dbf1      	blt.n	8003e86 <_write+0x12>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <_close>:
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <_fstat>:
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <_isatty>:
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	2301      	movs	r3, #1
 8003eee:	4618      	mov	r0, r3
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <_lseek>:
 8003efa:	b480      	push	{r7}
 8003efc:	b085      	sub	sp, #20
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	2300      	movs	r3, #0
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <_sbrk>:
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	4a14      	ldr	r2, [pc, #80]	@ (8003f70 <_sbrk+0x5c>)
 8003f1e:	4b15      	ldr	r3, [pc, #84]	@ (8003f74 <_sbrk+0x60>)
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	4b13      	ldr	r3, [pc, #76]	@ (8003f78 <_sbrk+0x64>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d102      	bne.n	8003f36 <_sbrk+0x22>
 8003f30:	4b11      	ldr	r3, [pc, #68]	@ (8003f78 <_sbrk+0x64>)
 8003f32:	4a12      	ldr	r2, [pc, #72]	@ (8003f7c <_sbrk+0x68>)
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	4b10      	ldr	r3, [pc, #64]	@ (8003f78 <_sbrk+0x64>)
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d207      	bcs.n	8003f54 <_sbrk+0x40>
 8003f44:	f00d fbb8 	bl	80116b8 <__errno>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	220c      	movs	r2, #12
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f52:	e009      	b.n	8003f68 <_sbrk+0x54>
 8003f54:	4b08      	ldr	r3, [pc, #32]	@ (8003f78 <_sbrk+0x64>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	4b07      	ldr	r3, [pc, #28]	@ (8003f78 <_sbrk+0x64>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4413      	add	r3, r2
 8003f62:	4a05      	ldr	r2, [pc, #20]	@ (8003f78 <_sbrk+0x64>)
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20020000 	.word	0x20020000
 8003f74:	00000400 	.word	0x00000400
 8003f78:	20000b54 	.word	0x20000b54
 8003f7c:	20002678 	.word	0x20002678

08003f80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f84:	4b06      	ldr	r3, [pc, #24]	@ (8003fa0 <SystemInit+0x20>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8a:	4a05      	ldr	r2, [pc, #20]	@ (8003fa0 <SystemInit+0x20>)
 8003f8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f94:	bf00      	nop
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	e000ed00 	.word	0xe000ed00

08003fa4 <Reset_Handler>:
 8003fa4:	480d      	ldr	r0, [pc, #52]	@ (8003fdc <LoopForever+0x2>)
 8003fa6:	4685      	mov	sp, r0
 8003fa8:	f7ff ffea 	bl	8003f80 <SystemInit>
 8003fac:	480c      	ldr	r0, [pc, #48]	@ (8003fe0 <LoopForever+0x6>)
 8003fae:	490d      	ldr	r1, [pc, #52]	@ (8003fe4 <LoopForever+0xa>)
 8003fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8003fe8 <LoopForever+0xe>)
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e002      	b.n	8003fbc <LoopCopyDataInit>

08003fb6 <CopyDataInit>:
 8003fb6:	58d4      	ldr	r4, [r2, r3]
 8003fb8:	50c4      	str	r4, [r0, r3]
 8003fba:	3304      	adds	r3, #4

08003fbc <LoopCopyDataInit>:
 8003fbc:	18c4      	adds	r4, r0, r3
 8003fbe:	428c      	cmp	r4, r1
 8003fc0:	d3f9      	bcc.n	8003fb6 <CopyDataInit>
 8003fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003fec <LoopForever+0x12>)
 8003fc4:	4c0a      	ldr	r4, [pc, #40]	@ (8003ff0 <LoopForever+0x16>)
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e001      	b.n	8003fce <LoopFillZerobss>

08003fca <FillZerobss>:
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	3204      	adds	r2, #4

08003fce <LoopFillZerobss>:
 8003fce:	42a2      	cmp	r2, r4
 8003fd0:	d3fb      	bcc.n	8003fca <FillZerobss>
 8003fd2:	f00d fb77 	bl	80116c4 <__libc_init_array>
 8003fd6:	f7fd f82d 	bl	8001034 <main>

08003fda <LoopForever>:
 8003fda:	e7fe      	b.n	8003fda <LoopForever>
 8003fdc:	20020000 	.word	0x20020000
 8003fe0:	20000000 	.word	0x20000000
 8003fe4:	20000378 	.word	0x20000378
 8003fe8:	08017230 	.word	0x08017230
 8003fec:	20000378 	.word	0x20000378
 8003ff0:	20002678 	.word	0x20002678

08003ff4 <ADC1_2_IRQHandler>:
 8003ff4:	e7fe      	b.n	8003ff4 <ADC1_2_IRQHandler>

08003ff6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b082      	sub	sp, #8
 8003ffa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004000:	2003      	movs	r0, #3
 8004002:	f001 fe9f 	bl	8005d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004006:	200f      	movs	r0, #15
 8004008:	f000 f80e 	bl	8004028 <HAL_InitTick>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	71fb      	strb	r3, [r7, #7]
 8004016:	e001      	b.n	800401c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004018:	f7ff f9e0 	bl	80033dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800401c:	79fb      	ldrb	r3, [r7, #7]

}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004034:	4b16      	ldr	r3, [pc, #88]	@ (8004090 <HAL_InitTick+0x68>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d022      	beq.n	8004082 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800403c:	4b15      	ldr	r3, [pc, #84]	@ (8004094 <HAL_InitTick+0x6c>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b13      	ldr	r3, [pc, #76]	@ (8004090 <HAL_InitTick+0x68>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004048:	fbb1 f3f3 	udiv	r3, r1, r3
 800404c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004050:	4618      	mov	r0, r3
 8004052:	f001 feaa 	bl	8005daa <HAL_SYSTICK_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10f      	bne.n	800407c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b0f      	cmp	r3, #15
 8004060:	d809      	bhi.n	8004076 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004062:	2200      	movs	r2, #0
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	f04f 30ff 	mov.w	r0, #4294967295
 800406a:	f001 fe76 	bl	8005d5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800406e:	4a0a      	ldr	r2, [pc, #40]	@ (8004098 <HAL_InitTick+0x70>)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	e007      	b.n	8004086 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	73fb      	strb	r3, [r7, #15]
 800407a:	e004      	b.n	8004086 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]
 8004080:	e001      	b.n	8004086 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004086:	7bfb      	ldrb	r3, [r7, #15]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20000024 	.word	0x20000024
 8004094:	2000001c 	.word	0x2000001c
 8004098:	20000020 	.word	0x20000020

0800409c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040a0:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <HAL_IncTick+0x1c>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4b05      	ldr	r3, [pc, #20]	@ (80040bc <HAL_IncTick+0x20>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4413      	add	r3, r2
 80040aa:	4a03      	ldr	r2, [pc, #12]	@ (80040b8 <HAL_IncTick+0x1c>)
 80040ac:	6013      	str	r3, [r2, #0]
}
 80040ae:	bf00      	nop
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	20000b58 	.word	0x20000b58
 80040bc:	20000024 	.word	0x20000024

080040c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  return uwTick;
 80040c4:	4b03      	ldr	r3, [pc, #12]	@ (80040d4 <HAL_GetTick+0x14>)
 80040c6:	681b      	ldr	r3, [r3, #0]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	20000b58 	.word	0x20000b58

080040d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040e0:	f7ff ffee 	bl	80040c0 <HAL_GetTick>
 80040e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f0:	d004      	beq.n	80040fc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80040f2:	4b09      	ldr	r3, [pc, #36]	@ (8004118 <HAL_Delay+0x40>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4413      	add	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040fc:	bf00      	nop
 80040fe:	f7ff ffdf 	bl	80040c0 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	429a      	cmp	r2, r3
 800410c:	d8f7      	bhi.n	80040fe <HAL_Delay+0x26>
  {
  }
}
 800410e:	bf00      	nop
 8004110:	bf00      	nop
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	20000024 	.word	0x20000024

0800411c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	609a      	str	r2, [r3, #8]
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	609a      	str	r2, [r3, #8]
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3360      	adds	r3, #96	@ 0x60
 8004196:	461a      	mov	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	4b08      	ldr	r3, [pc, #32]	@ (80041c8 <LL_ADC_SetOffset+0x44>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80041bc:	bf00      	nop
 80041be:	371c      	adds	r7, #28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	03fff000 	.word	0x03fff000

080041cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3360      	adds	r3, #96	@ 0x60
 80041da:	461a      	mov	r2, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3360      	adds	r3, #96	@ 0x60
 8004208:	461a      	mov	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	431a      	orrs	r2, r3
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004222:	bf00      	nop
 8004224:	371c      	adds	r7, #28
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800422e:	b480      	push	{r7}
 8004230:	b087      	sub	sp, #28
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3360      	adds	r3, #96	@ 0x60
 800423e:	461a      	mov	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	431a      	orrs	r2, r3
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004258:	bf00      	nop
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3360      	adds	r3, #96	@ 0x60
 8004274:	461a      	mov	r2, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	431a      	orrs	r2, r3
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800428e:	bf00      	nop
 8004290:	371c      	adds	r7, #28
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	615a      	str	r2, [r3, #20]
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80042d4:	2301      	movs	r3, #1
 80042d6:	e000      	b.n	80042da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b087      	sub	sp, #28
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3330      	adds	r3, #48	@ 0x30
 80042f6:	461a      	mov	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	0a1b      	lsrs	r3, r3, #8
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	f003 030c 	and.w	r3, r3, #12
 8004302:	4413      	add	r3, r2
 8004304:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f003 031f 	and.w	r3, r3, #31
 8004310:	211f      	movs	r1, #31
 8004312:	fa01 f303 	lsl.w	r3, r1, r3
 8004316:	43db      	mvns	r3, r3
 8004318:	401a      	ands	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	0e9b      	lsrs	r3, r3, #26
 800431e:	f003 011f 	and.w	r1, r3, #31
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f003 031f 	and.w	r3, r3, #31
 8004328:	fa01 f303 	lsl.w	r3, r1, r3
 800432c:	431a      	orrs	r2, r3
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004332:	bf00      	nop
 8004334:	371c      	adds	r7, #28
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800433e:	b480      	push	{r7}
 8004340:	b087      	sub	sp, #28
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3314      	adds	r3, #20
 800434e:	461a      	mov	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	0e5b      	lsrs	r3, r3, #25
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	4413      	add	r3, r2
 800435c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	0d1b      	lsrs	r3, r3, #20
 8004366:	f003 031f 	and.w	r3, r3, #31
 800436a:	2107      	movs	r1, #7
 800436c:	fa01 f303 	lsl.w	r3, r1, r3
 8004370:	43db      	mvns	r3, r3
 8004372:	401a      	ands	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	0d1b      	lsrs	r3, r3, #20
 8004378:	f003 031f 	and.w	r3, r3, #31
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	fa01 f303 	lsl.w	r3, r1, r3
 8004382:	431a      	orrs	r2, r3
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004388:	bf00      	nop
 800438a:	371c      	adds	r7, #28
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ac:	43db      	mvns	r3, r3
 80043ae:	401a      	ands	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f003 0318 	and.w	r3, r3, #24
 80043b6:	4908      	ldr	r1, [pc, #32]	@ (80043d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80043b8:	40d9      	lsrs	r1, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	400b      	ands	r3, r1
 80043be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c2:	431a      	orrs	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	0007ffff 	.word	0x0007ffff

080043dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 031f 	and.w	r3, r3, #31
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004408:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6093      	str	r3, [r2, #8]
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800442c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004430:	d101      	bne.n	8004436 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004454:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004458:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800447c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004480:	d101      	bne.n	8004486 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80044a8:	f043 0201 	orr.w	r2, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80044d0:	f043 0202 	orr.w	r2, r3, #2
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <LL_ADC_IsEnabled+0x18>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <LL_ADC_IsEnabled+0x1a>
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b02      	cmp	r3, #2
 800451c:	d101      	bne.n	8004522 <LL_ADC_IsDisableOngoing+0x18>
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <LL_ADC_IsDisableOngoing+0x1a>
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004540:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004544:	f043 0204 	orr.w	r2, r3, #4
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b04      	cmp	r3, #4
 800456a:	d101      	bne.n	8004570 <LL_ADC_REG_IsConversionOngoing+0x18>
 800456c:	2301      	movs	r3, #1
 800456e:	e000      	b.n	8004572 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b08      	cmp	r3, #8
 8004590:	d101      	bne.n	8004596 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045a4:	b590      	push	{r4, r7, lr}
 80045a6:	b089      	sub	sp, #36	@ 0x24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e1a9      	b.n	8004912 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d109      	bne.n	80045e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7fe ff29 	bl	8003424 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff ff19 	bl	800441c <LL_ADC_IsDeepPowerDownEnabled>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d004      	beq.n	80045fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff feff 	bl	80043f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff ff34 	bl	800446c <LL_ADC_IsInternalRegulatorEnabled>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d115      	bne.n	8004636 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff ff18 	bl	8004444 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004614:	4b9c      	ldr	r3, [pc, #624]	@ (8004888 <HAL_ADC_Init+0x2e4>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	099b      	lsrs	r3, r3, #6
 800461a:	4a9c      	ldr	r2, [pc, #624]	@ (800488c <HAL_ADC_Init+0x2e8>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	099b      	lsrs	r3, r3, #6
 8004622:	3301      	adds	r3, #1
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004628:	e002      	b.n	8004630 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3b01      	subs	r3, #1
 800462e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f9      	bne.n	800462a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff ff16 	bl	800446c <LL_ADC_IsInternalRegulatorEnabled>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10d      	bne.n	8004662 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800464a:	f043 0210 	orr.w	r2, r3, #16
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004656:	f043 0201 	orr.w	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff ff76 	bl	8004558 <LL_ADC_REG_IsConversionOngoing>
 800466c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b00      	cmp	r3, #0
 8004678:	f040 8142 	bne.w	8004900 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2b00      	cmp	r3, #0
 8004680:	f040 813e 	bne.w	8004900 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004688:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800468c:	f043 0202 	orr.w	r2, r3, #2
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff ff23 	bl	80044e4 <LL_ADC_IsEnabled>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d141      	bne.n	8004728 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046ac:	d004      	beq.n	80046b8 <HAL_ADC_Init+0x114>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a77      	ldr	r2, [pc, #476]	@ (8004890 <HAL_ADC_Init+0x2ec>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d10f      	bne.n	80046d8 <HAL_ADC_Init+0x134>
 80046b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80046bc:	f7ff ff12 	bl	80044e4 <LL_ADC_IsEnabled>
 80046c0:	4604      	mov	r4, r0
 80046c2:	4873      	ldr	r0, [pc, #460]	@ (8004890 <HAL_ADC_Init+0x2ec>)
 80046c4:	f7ff ff0e 	bl	80044e4 <LL_ADC_IsEnabled>
 80046c8:	4603      	mov	r3, r0
 80046ca:	4323      	orrs	r3, r4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	bf0c      	ite	eq
 80046d0:	2301      	moveq	r3, #1
 80046d2:	2300      	movne	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	e012      	b.n	80046fe <HAL_ADC_Init+0x15a>
 80046d8:	486e      	ldr	r0, [pc, #440]	@ (8004894 <HAL_ADC_Init+0x2f0>)
 80046da:	f7ff ff03 	bl	80044e4 <LL_ADC_IsEnabled>
 80046de:	4604      	mov	r4, r0
 80046e0:	486d      	ldr	r0, [pc, #436]	@ (8004898 <HAL_ADC_Init+0x2f4>)
 80046e2:	f7ff feff 	bl	80044e4 <LL_ADC_IsEnabled>
 80046e6:	4603      	mov	r3, r0
 80046e8:	431c      	orrs	r4, r3
 80046ea:	486c      	ldr	r0, [pc, #432]	@ (800489c <HAL_ADC_Init+0x2f8>)
 80046ec:	f7ff fefa 	bl	80044e4 <LL_ADC_IsEnabled>
 80046f0:	4603      	mov	r3, r0
 80046f2:	4323      	orrs	r3, r4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	bf0c      	ite	eq
 80046f8:	2301      	moveq	r3, #1
 80046fa:	2300      	movne	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d012      	beq.n	8004728 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800470a:	d004      	beq.n	8004716 <HAL_ADC_Init+0x172>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a5f      	ldr	r2, [pc, #380]	@ (8004890 <HAL_ADC_Init+0x2ec>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d101      	bne.n	800471a <HAL_ADC_Init+0x176>
 8004716:	4a62      	ldr	r2, [pc, #392]	@ (80048a0 <HAL_ADC_Init+0x2fc>)
 8004718:	e000      	b.n	800471c <HAL_ADC_Init+0x178>
 800471a:	4a62      	ldr	r2, [pc, #392]	@ (80048a4 <HAL_ADC_Init+0x300>)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4619      	mov	r1, r3
 8004722:	4610      	mov	r0, r2
 8004724:	f7ff fcfa 	bl	800411c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	7f5b      	ldrb	r3, [r3, #29]
 800472c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004732:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004738:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800473e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004746:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004748:	4313      	orrs	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004752:	2b01      	cmp	r3, #1
 8004754:	d106      	bne.n	8004764 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475a:	3b01      	subs	r3, #1
 800475c:	045b      	lsls	r3, r3, #17
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4313      	orrs	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004768:	2b00      	cmp	r3, #0
 800476a:	d009      	beq.n	8004780 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004770:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004778:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4313      	orrs	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	4b48      	ldr	r3, [pc, #288]	@ (80048a8 <HAL_ADC_Init+0x304>)
 8004788:	4013      	ands	r3, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6812      	ldr	r2, [r2, #0]
 800478e:	69b9      	ldr	r1, [r7, #24]
 8004790:	430b      	orrs	r3, r1
 8004792:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff fee5 	bl	800457e <LL_ADC_INJ_IsConversionOngoing>
 80047b4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d17f      	bne.n	80048bc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d17c      	bne.n	80048bc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80047c6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80047ce:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80047d0:	4313      	orrs	r3, r2
 80047d2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047de:	f023 0302 	bic.w	r3, r3, #2
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6812      	ldr	r2, [r2, #0]
 80047e6:	69b9      	ldr	r1, [r7, #24]
 80047e8:	430b      	orrs	r3, r1
 80047ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d017      	beq.n	8004824 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004802:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800480c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004810:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6911      	ldr	r1, [r2, #16]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	430b      	orrs	r3, r1
 800481e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004822:	e013      	b.n	800484c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691a      	ldr	r2, [r3, #16]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004832:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004844:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004848:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004852:	2b01      	cmp	r3, #1
 8004854:	d12a      	bne.n	80048ac <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004860:	f023 0304 	bic.w	r3, r3, #4
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800486c:	4311      	orrs	r1, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004872:	4311      	orrs	r1, r2
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004878:	430a      	orrs	r2, r1
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0201 	orr.w	r2, r2, #1
 8004884:	611a      	str	r2, [r3, #16]
 8004886:	e019      	b.n	80048bc <HAL_ADC_Init+0x318>
 8004888:	2000001c 	.word	0x2000001c
 800488c:	053e2d63 	.word	0x053e2d63
 8004890:	50000100 	.word	0x50000100
 8004894:	50000400 	.word	0x50000400
 8004898:	50000500 	.word	0x50000500
 800489c:	50000600 	.word	0x50000600
 80048a0:	50000300 	.word	0x50000300
 80048a4:	50000700 	.word	0x50000700
 80048a8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0201 	bic.w	r2, r2, #1
 80048ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d10c      	bne.n	80048de <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ca:	f023 010f 	bic.w	r1, r3, #15
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	1e5a      	subs	r2, r3, #1
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	631a      	str	r2, [r3, #48]	@ 0x30
 80048dc:	e007      	b.n	80048ee <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 020f 	bic.w	r2, r2, #15
 80048ec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	f043 0201 	orr.w	r2, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048fe:	e007      	b.n	8004910 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004904:	f043 0210 	orr.w	r2, r3, #16
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004910:	7ffb      	ldrb	r3, [r7, #31]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3724      	adds	r7, #36	@ 0x24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd90      	pop	{r4, r7, pc}
 800491a:	bf00      	nop

0800491c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004930:	d004      	beq.n	800493c <HAL_ADC_Start_DMA+0x20>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a5a      	ldr	r2, [pc, #360]	@ (8004aa0 <HAL_ADC_Start_DMA+0x184>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d101      	bne.n	8004940 <HAL_ADC_Start_DMA+0x24>
 800493c:	4b59      	ldr	r3, [pc, #356]	@ (8004aa4 <HAL_ADC_Start_DMA+0x188>)
 800493e:	e000      	b.n	8004942 <HAL_ADC_Start_DMA+0x26>
 8004940:	4b59      	ldr	r3, [pc, #356]	@ (8004aa8 <HAL_ADC_Start_DMA+0x18c>)
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff fd4a 	bl	80043dc <LL_ADC_GetMultimode>
 8004948:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff fe02 	bl	8004558 <LL_ADC_REG_IsConversionOngoing>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	f040 809b 	bne.w	8004a92 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_ADC_Start_DMA+0x4e>
 8004966:	2302      	movs	r3, #2
 8004968:	e096      	b.n	8004a98 <HAL_ADC_Start_DMA+0x17c>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a4d      	ldr	r2, [pc, #308]	@ (8004aac <HAL_ADC_Start_DMA+0x190>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d008      	beq.n	800498e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d005      	beq.n	800498e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	2b05      	cmp	r3, #5
 8004986:	d002      	beq.n	800498e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	2b09      	cmp	r3, #9
 800498c:	d17a      	bne.n	8004a84 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 fcec 	bl	800536c <ADC_Enable>
 8004994:	4603      	mov	r3, r0
 8004996:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004998:	7dfb      	ldrb	r3, [r7, #23]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d16d      	bne.n	8004a7a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a3a      	ldr	r2, [pc, #232]	@ (8004aa0 <HAL_ADC_Start_DMA+0x184>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d009      	beq.n	80049d0 <HAL_ADC_Start_DMA+0xb4>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a3b      	ldr	r2, [pc, #236]	@ (8004ab0 <HAL_ADC_Start_DMA+0x194>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d002      	beq.n	80049cc <HAL_ADC_Start_DMA+0xb0>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	e003      	b.n	80049d4 <HAL_ADC_Start_DMA+0xb8>
 80049cc:	4b39      	ldr	r3, [pc, #228]	@ (8004ab4 <HAL_ADC_Start_DMA+0x198>)
 80049ce:	e001      	b.n	80049d4 <HAL_ADC_Start_DMA+0xb8>
 80049d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	6812      	ldr	r2, [r2, #0]
 80049d8:	4293      	cmp	r3, r2
 80049da:	d002      	beq.n	80049e2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d105      	bne.n	80049ee <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d006      	beq.n	8004a08 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049fe:	f023 0206 	bic.w	r2, r3, #6
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	661a      	str	r2, [r3, #96]	@ 0x60
 8004a06:	e002      	b.n	8004a0e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a12:	4a29      	ldr	r2, [pc, #164]	@ (8004ab8 <HAL_ADC_Start_DMA+0x19c>)
 8004a14:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1a:	4a28      	ldr	r2, [pc, #160]	@ (8004abc <HAL_ADC_Start_DMA+0x1a0>)
 8004a1c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a22:	4a27      	ldr	r2, [pc, #156]	@ (8004ac0 <HAL_ADC_Start_DMA+0x1a4>)
 8004a24:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	221c      	movs	r2, #28
 8004a2c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0210 	orr.w	r2, r2, #16
 8004a44:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0201 	orr.w	r2, r2, #1
 8004a54:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3340      	adds	r3, #64	@ 0x40
 8004a60:	4619      	mov	r1, r3
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f001 fd33 	bl	80064d0 <HAL_DMA_Start_IT>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff fd5c 	bl	8004530 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004a78:	e00d      	b.n	8004a96 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004a82:	e008      	b.n	8004a96 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004a90:	e001      	b.n	8004a96 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a92:	2302      	movs	r3, #2
 8004a94:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	50000100 	.word	0x50000100
 8004aa4:	50000300 	.word	0x50000300
 8004aa8:	50000700 	.word	0x50000700
 8004aac:	50000600 	.word	0x50000600
 8004ab0:	50000500 	.word	0x50000500
 8004ab4:	50000400 	.word	0x50000400
 8004ab8:	08005557 	.word	0x08005557
 8004abc:	0800562f 	.word	0x0800562f
 8004ac0:	0800564b 	.word	0x0800564b

08004ac4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b0b6      	sub	sp, #216	@ 0xd8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d102      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x24>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	f000 bc13 	b.w	8005336 <HAL_ADC_ConfigChannel+0x84a>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff fd1b 	bl	8004558 <LL_ADC_REG_IsConversionOngoing>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f040 83f3 	bne.w	8005310 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6818      	ldr	r0, [r3, #0]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	6859      	ldr	r1, [r3, #4]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	f7ff fbd5 	bl	80042e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff fd09 	bl	8004558 <LL_ADC_REG_IsConversionOngoing>
 8004b46:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff fd15 	bl	800457e <LL_ADC_INJ_IsConversionOngoing>
 8004b54:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f040 81d9 	bne.w	8004f14 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f040 81d4 	bne.w	8004f14 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b74:	d10f      	bne.n	8004b96 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	4619      	mov	r1, r3
 8004b82:	f7ff fbdc 	bl	800433e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff fb83 	bl	800429a <LL_ADC_SetSamplingTimeCommonConfig>
 8004b94:	e00e      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6819      	ldr	r1, [r3, #0]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f7ff fbcb 	bl	800433e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2100      	movs	r1, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff fb73 	bl	800429a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	695a      	ldr	r2, [r3, #20]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	08db      	lsrs	r3, r3, #3
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d022      	beq.n	8004c1c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	6919      	ldr	r1, [r3, #16]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004be6:	f7ff facd 	bl	8004184 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6919      	ldr	r1, [r3, #16]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f7ff fb19 	bl	800422e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6818      	ldr	r0, [r3, #0]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d102      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x126>
 8004c0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c10:	e000      	b.n	8004c14 <HAL_ADC_ConfigChannel+0x128>
 8004c12:	2300      	movs	r3, #0
 8004c14:	461a      	mov	r2, r3
 8004c16:	f7ff fb25 	bl	8004264 <LL_ADC_SetOffsetSaturation>
 8004c1a:	e17b      	b.n	8004f14 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2100      	movs	r1, #0
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff fad2 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10a      	bne.n	8004c48 <HAL_ADC_ConfigChannel+0x15c>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2100      	movs	r1, #0
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff fac7 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	0e9b      	lsrs	r3, r3, #26
 8004c42:	f003 021f 	and.w	r2, r3, #31
 8004c46:	e01e      	b.n	8004c86 <HAL_ADC_ConfigChannel+0x19a>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff fabc 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004c54:	4603      	mov	r3, r0
 8004c56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c5e:	fa93 f3a3 	rbit	r3, r3
 8004c62:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004c76:	2320      	movs	r3, #32
 8004c78:	e004      	b.n	8004c84 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004c7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c7e:	fab3 f383 	clz	r3, r3
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d105      	bne.n	8004c9e <HAL_ADC_ConfigChannel+0x1b2>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	0e9b      	lsrs	r3, r3, #26
 8004c98:	f003 031f 	and.w	r3, r3, #31
 8004c9c:	e018      	b.n	8004cd0 <HAL_ADC_ConfigChannel+0x1e4>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004caa:	fa93 f3a3 	rbit	r3, r3
 8004cae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004cba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004cc2:	2320      	movs	r3, #32
 8004cc4:	e004      	b.n	8004cd0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004cc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004cca:	fab3 f383 	clz	r3, r3
 8004cce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d106      	bne.n	8004ce2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff fa8b 	bl	80041f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff fa6f 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <HAL_ADC_ConfigChannel+0x222>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff fa64 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004d04:	4603      	mov	r3, r0
 8004d06:	0e9b      	lsrs	r3, r3, #26
 8004d08:	f003 021f 	and.w	r2, r3, #31
 8004d0c:	e01e      	b.n	8004d4c <HAL_ADC_ConfigChannel+0x260>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2101      	movs	r1, #1
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff fa59 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d24:	fa93 f3a3 	rbit	r3, r3
 8004d28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004d2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004d34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004d3c:	2320      	movs	r3, #32
 8004d3e:	e004      	b.n	8004d4a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004d40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d44:	fab3 f383 	clz	r3, r3
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d105      	bne.n	8004d64 <HAL_ADC_ConfigChannel+0x278>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	0e9b      	lsrs	r3, r3, #26
 8004d5e:	f003 031f 	and.w	r3, r3, #31
 8004d62:	e018      	b.n	8004d96 <HAL_ADC_ConfigChannel+0x2aa>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d70:	fa93 f3a3 	rbit	r3, r3
 8004d74:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004d78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004d80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004d88:	2320      	movs	r3, #32
 8004d8a:	e004      	b.n	8004d96 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004d8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d90:	fab3 f383 	clz	r3, r3
 8004d94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d106      	bne.n	8004da8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2101      	movs	r1, #1
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff fa28 	bl	80041f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2102      	movs	r1, #2
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff fa0c 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10a      	bne.n	8004dd4 <HAL_ADC_ConfigChannel+0x2e8>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2102      	movs	r1, #2
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7ff fa01 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	0e9b      	lsrs	r3, r3, #26
 8004dce:	f003 021f 	and.w	r2, r3, #31
 8004dd2:	e01e      	b.n	8004e12 <HAL_ADC_ConfigChannel+0x326>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2102      	movs	r1, #2
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff f9f6 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dea:	fa93 f3a3 	rbit	r3, r3
 8004dee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004df2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004df6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004dfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004e02:	2320      	movs	r3, #32
 8004e04:	e004      	b.n	8004e10 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004e06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004e0a:	fab3 f383 	clz	r3, r3
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d105      	bne.n	8004e2a <HAL_ADC_ConfigChannel+0x33e>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	0e9b      	lsrs	r3, r3, #26
 8004e24:	f003 031f 	and.w	r3, r3, #31
 8004e28:	e016      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x36c>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e32:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e36:	fa93 f3a3 	rbit	r3, r3
 8004e3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004e3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004e42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004e4a:	2320      	movs	r3, #32
 8004e4c:	e004      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004e4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e52:	fab3 f383 	clz	r3, r3
 8004e56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d106      	bne.n	8004e6a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2200      	movs	r2, #0
 8004e62:	2102      	movs	r1, #2
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff f9c7 	bl	80041f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2103      	movs	r1, #3
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff f9ab 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004e76:	4603      	mov	r3, r0
 8004e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <HAL_ADC_ConfigChannel+0x3aa>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2103      	movs	r1, #3
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff f9a0 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	0e9b      	lsrs	r3, r3, #26
 8004e90:	f003 021f 	and.w	r2, r3, #31
 8004e94:	e017      	b.n	8004ec6 <HAL_ADC_ConfigChannel+0x3da>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2103      	movs	r1, #3
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff f995 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ea8:	fa93 f3a3 	rbit	r3, r3
 8004eac:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004eae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004eb0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004eb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004eb8:	2320      	movs	r3, #32
 8004eba:	e003      	b.n	8004ec4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004ebc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ebe:	fab3 f383 	clz	r3, r3
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d105      	bne.n	8004ede <HAL_ADC_ConfigChannel+0x3f2>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	0e9b      	lsrs	r3, r3, #26
 8004ed8:	f003 031f 	and.w	r3, r3, #31
 8004edc:	e011      	b.n	8004f02 <HAL_ADC_ConfigChannel+0x416>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ee6:	fa93 f3a3 	rbit	r3, r3
 8004eea:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004eec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004ef6:	2320      	movs	r3, #32
 8004ef8:	e003      	b.n	8004f02 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004efa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004efc:	fab3 f383 	clz	r3, r3
 8004f00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d106      	bne.n	8004f14 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2103      	movs	r1, #3
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff f972 	bl	80041f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff fae3 	bl	80044e4 <LL_ADC_IsEnabled>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f040 813d 	bne.w	80051a0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6818      	ldr	r0, [r3, #0]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	6819      	ldr	r1, [r3, #0]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	461a      	mov	r2, r3
 8004f34:	f7ff fa2e 	bl	8004394 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	4aa2      	ldr	r2, [pc, #648]	@ (80051c8 <HAL_ADC_ConfigChannel+0x6dc>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	f040 812e 	bne.w	80051a0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10b      	bne.n	8004f6c <HAL_ADC_ConfigChannel+0x480>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	0e9b      	lsrs	r3, r3, #26
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	f003 031f 	and.w	r3, r3, #31
 8004f60:	2b09      	cmp	r3, #9
 8004f62:	bf94      	ite	ls
 8004f64:	2301      	movls	r3, #1
 8004f66:	2300      	movhi	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	e019      	b.n	8004fa0 <HAL_ADC_ConfigChannel+0x4b4>
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f74:	fa93 f3a3 	rbit	r3, r3
 8004f78:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004f7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f7c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004f7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004f84:	2320      	movs	r3, #32
 8004f86:	e003      	b.n	8004f90 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004f88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f8a:	fab3 f383 	clz	r3, r3
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	3301      	adds	r3, #1
 8004f92:	f003 031f 	and.w	r3, r3, #31
 8004f96:	2b09      	cmp	r3, #9
 8004f98:	bf94      	ite	ls
 8004f9a:	2301      	movls	r3, #1
 8004f9c:	2300      	movhi	r3, #0
 8004f9e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d079      	beq.n	8005098 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d107      	bne.n	8004fc0 <HAL_ADC_ConfigChannel+0x4d4>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	0e9b      	lsrs	r3, r3, #26
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	069b      	lsls	r3, r3, #26
 8004fba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004fbe:	e015      	b.n	8004fec <HAL_ADC_ConfigChannel+0x500>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fc8:	fa93 f3a3 	rbit	r3, r3
 8004fcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004fce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fd0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004fd8:	2320      	movs	r3, #32
 8004fda:	e003      	b.n	8004fe4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fde:	fab3 f383 	clz	r3, r3
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	069b      	lsls	r3, r3, #26
 8004fe8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d109      	bne.n	800500c <HAL_ADC_ConfigChannel+0x520>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	0e9b      	lsrs	r3, r3, #26
 8004ffe:	3301      	adds	r3, #1
 8005000:	f003 031f 	and.w	r3, r3, #31
 8005004:	2101      	movs	r1, #1
 8005006:	fa01 f303 	lsl.w	r3, r1, r3
 800500a:	e017      	b.n	800503c <HAL_ADC_ConfigChannel+0x550>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005014:	fa93 f3a3 	rbit	r3, r3
 8005018:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800501a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800501c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800501e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005024:	2320      	movs	r3, #32
 8005026:	e003      	b.n	8005030 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005028:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800502a:	fab3 f383 	clz	r3, r3
 800502e:	b2db      	uxtb	r3, r3
 8005030:	3301      	adds	r3, #1
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	2101      	movs	r1, #1
 8005038:	fa01 f303 	lsl.w	r3, r1, r3
 800503c:	ea42 0103 	orr.w	r1, r2, r3
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10a      	bne.n	8005062 <HAL_ADC_ConfigChannel+0x576>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	0e9b      	lsrs	r3, r3, #26
 8005052:	3301      	adds	r3, #1
 8005054:	f003 021f 	and.w	r2, r3, #31
 8005058:	4613      	mov	r3, r2
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	4413      	add	r3, r2
 800505e:	051b      	lsls	r3, r3, #20
 8005060:	e018      	b.n	8005094 <HAL_ADC_ConfigChannel+0x5a8>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506a:	fa93 f3a3 	rbit	r3, r3
 800506e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005072:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800507a:	2320      	movs	r3, #32
 800507c:	e003      	b.n	8005086 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800507e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005080:	fab3 f383 	clz	r3, r3
 8005084:	b2db      	uxtb	r3, r3
 8005086:	3301      	adds	r3, #1
 8005088:	f003 021f 	and.w	r2, r3, #31
 800508c:	4613      	mov	r3, r2
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	4413      	add	r3, r2
 8005092:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005094:	430b      	orrs	r3, r1
 8005096:	e07e      	b.n	8005196 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d107      	bne.n	80050b4 <HAL_ADC_ConfigChannel+0x5c8>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	0e9b      	lsrs	r3, r3, #26
 80050aa:	3301      	adds	r3, #1
 80050ac:	069b      	lsls	r3, r3, #26
 80050ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050b2:	e015      	b.n	80050e0 <HAL_ADC_ConfigChannel+0x5f4>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050bc:	fa93 f3a3 	rbit	r3, r3
 80050c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80050c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80050c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80050cc:	2320      	movs	r3, #32
 80050ce:	e003      	b.n	80050d8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80050d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d2:	fab3 f383 	clz	r3, r3
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	3301      	adds	r3, #1
 80050da:	069b      	lsls	r3, r3, #26
 80050dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d109      	bne.n	8005100 <HAL_ADC_ConfigChannel+0x614>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	0e9b      	lsrs	r3, r3, #26
 80050f2:	3301      	adds	r3, #1
 80050f4:	f003 031f 	and.w	r3, r3, #31
 80050f8:	2101      	movs	r1, #1
 80050fa:	fa01 f303 	lsl.w	r3, r1, r3
 80050fe:	e017      	b.n	8005130 <HAL_ADC_ConfigChannel+0x644>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	fa93 f3a3 	rbit	r3, r3
 800510c:	61fb      	str	r3, [r7, #28]
  return result;
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005118:	2320      	movs	r3, #32
 800511a:	e003      	b.n	8005124 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800511c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511e:	fab3 f383 	clz	r3, r3
 8005122:	b2db      	uxtb	r3, r3
 8005124:	3301      	adds	r3, #1
 8005126:	f003 031f 	and.w	r3, r3, #31
 800512a:	2101      	movs	r1, #1
 800512c:	fa01 f303 	lsl.w	r3, r1, r3
 8005130:	ea42 0103 	orr.w	r1, r2, r3
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10d      	bne.n	800515c <HAL_ADC_ConfigChannel+0x670>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	0e9b      	lsrs	r3, r3, #26
 8005146:	3301      	adds	r3, #1
 8005148:	f003 021f 	and.w	r2, r3, #31
 800514c:	4613      	mov	r3, r2
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	4413      	add	r3, r2
 8005152:	3b1e      	subs	r3, #30
 8005154:	051b      	lsls	r3, r3, #20
 8005156:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800515a:	e01b      	b.n	8005194 <HAL_ADC_ConfigChannel+0x6a8>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	fa93 f3a3 	rbit	r3, r3
 8005168:	613b      	str	r3, [r7, #16]
  return result;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005174:	2320      	movs	r3, #32
 8005176:	e003      	b.n	8005180 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	fab3 f383 	clz	r3, r3
 800517e:	b2db      	uxtb	r3, r3
 8005180:	3301      	adds	r3, #1
 8005182:	f003 021f 	and.w	r2, r3, #31
 8005186:	4613      	mov	r3, r2
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	4413      	add	r3, r2
 800518c:	3b1e      	subs	r3, #30
 800518e:	051b      	lsls	r3, r3, #20
 8005190:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005194:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800519a:	4619      	mov	r1, r3
 800519c:	f7ff f8cf 	bl	800433e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	4b09      	ldr	r3, [pc, #36]	@ (80051cc <HAL_ADC_ConfigChannel+0x6e0>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 80be 	beq.w	800532a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051b6:	d004      	beq.n	80051c2 <HAL_ADC_ConfigChannel+0x6d6>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a04      	ldr	r2, [pc, #16]	@ (80051d0 <HAL_ADC_ConfigChannel+0x6e4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d10a      	bne.n	80051d8 <HAL_ADC_ConfigChannel+0x6ec>
 80051c2:	4b04      	ldr	r3, [pc, #16]	@ (80051d4 <HAL_ADC_ConfigChannel+0x6e8>)
 80051c4:	e009      	b.n	80051da <HAL_ADC_ConfigChannel+0x6ee>
 80051c6:	bf00      	nop
 80051c8:	407f0000 	.word	0x407f0000
 80051cc:	80080000 	.word	0x80080000
 80051d0:	50000100 	.word	0x50000100
 80051d4:	50000300 	.word	0x50000300
 80051d8:	4b59      	ldr	r3, [pc, #356]	@ (8005340 <HAL_ADC_ConfigChannel+0x854>)
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fe ffc4 	bl	8004168 <LL_ADC_GetCommonPathInternalCh>
 80051e0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a56      	ldr	r2, [pc, #344]	@ (8005344 <HAL_ADC_ConfigChannel+0x858>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d004      	beq.n	80051f8 <HAL_ADC_ConfigChannel+0x70c>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a55      	ldr	r2, [pc, #340]	@ (8005348 <HAL_ADC_ConfigChannel+0x85c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d13a      	bne.n	800526e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80051f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80051fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d134      	bne.n	800526e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800520c:	d005      	beq.n	800521a <HAL_ADC_ConfigChannel+0x72e>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a4e      	ldr	r2, [pc, #312]	@ (800534c <HAL_ADC_ConfigChannel+0x860>)
 8005214:	4293      	cmp	r3, r2
 8005216:	f040 8085 	bne.w	8005324 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005222:	d004      	beq.n	800522e <HAL_ADC_ConfigChannel+0x742>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a49      	ldr	r2, [pc, #292]	@ (8005350 <HAL_ADC_ConfigChannel+0x864>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d101      	bne.n	8005232 <HAL_ADC_ConfigChannel+0x746>
 800522e:	4a49      	ldr	r2, [pc, #292]	@ (8005354 <HAL_ADC_ConfigChannel+0x868>)
 8005230:	e000      	b.n	8005234 <HAL_ADC_ConfigChannel+0x748>
 8005232:	4a43      	ldr	r2, [pc, #268]	@ (8005340 <HAL_ADC_ConfigChannel+0x854>)
 8005234:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005238:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800523c:	4619      	mov	r1, r3
 800523e:	4610      	mov	r0, r2
 8005240:	f7fe ff7f 	bl	8004142 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005244:	4b44      	ldr	r3, [pc, #272]	@ (8005358 <HAL_ADC_ConfigChannel+0x86c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	099b      	lsrs	r3, r3, #6
 800524a:	4a44      	ldr	r2, [pc, #272]	@ (800535c <HAL_ADC_ConfigChannel+0x870>)
 800524c:	fba2 2303 	umull	r2, r3, r2, r3
 8005250:	099b      	lsrs	r3, r3, #6
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	4613      	mov	r3, r2
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800525e:	e002      	b.n	8005266 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3b01      	subs	r3, #1
 8005264:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1f9      	bne.n	8005260 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800526c:	e05a      	b.n	8005324 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a3b      	ldr	r2, [pc, #236]	@ (8005360 <HAL_ADC_ConfigChannel+0x874>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d125      	bne.n	80052c4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005278:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800527c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d11f      	bne.n	80052c4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a31      	ldr	r2, [pc, #196]	@ (8005350 <HAL_ADC_ConfigChannel+0x864>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d104      	bne.n	8005298 <HAL_ADC_ConfigChannel+0x7ac>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a34      	ldr	r2, [pc, #208]	@ (8005364 <HAL_ADC_ConfigChannel+0x878>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d047      	beq.n	8005328 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052a0:	d004      	beq.n	80052ac <HAL_ADC_ConfigChannel+0x7c0>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a2a      	ldr	r2, [pc, #168]	@ (8005350 <HAL_ADC_ConfigChannel+0x864>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d101      	bne.n	80052b0 <HAL_ADC_ConfigChannel+0x7c4>
 80052ac:	4a29      	ldr	r2, [pc, #164]	@ (8005354 <HAL_ADC_ConfigChannel+0x868>)
 80052ae:	e000      	b.n	80052b2 <HAL_ADC_ConfigChannel+0x7c6>
 80052b0:	4a23      	ldr	r2, [pc, #140]	@ (8005340 <HAL_ADC_ConfigChannel+0x854>)
 80052b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052ba:	4619      	mov	r1, r3
 80052bc:	4610      	mov	r0, r2
 80052be:	f7fe ff40 	bl	8004142 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052c2:	e031      	b.n	8005328 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a27      	ldr	r2, [pc, #156]	@ (8005368 <HAL_ADC_ConfigChannel+0x87c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d12d      	bne.n	800532a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80052ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d127      	bne.n	800532a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a1c      	ldr	r2, [pc, #112]	@ (8005350 <HAL_ADC_ConfigChannel+0x864>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d022      	beq.n	800532a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052ec:	d004      	beq.n	80052f8 <HAL_ADC_ConfigChannel+0x80c>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a17      	ldr	r2, [pc, #92]	@ (8005350 <HAL_ADC_ConfigChannel+0x864>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d101      	bne.n	80052fc <HAL_ADC_ConfigChannel+0x810>
 80052f8:	4a16      	ldr	r2, [pc, #88]	@ (8005354 <HAL_ADC_ConfigChannel+0x868>)
 80052fa:	e000      	b.n	80052fe <HAL_ADC_ConfigChannel+0x812>
 80052fc:	4a10      	ldr	r2, [pc, #64]	@ (8005340 <HAL_ADC_ConfigChannel+0x854>)
 80052fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005302:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005306:	4619      	mov	r1, r3
 8005308:	4610      	mov	r0, r2
 800530a:	f7fe ff1a 	bl	8004142 <LL_ADC_SetCommonPathInternalCh>
 800530e:	e00c      	b.n	800532a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005314:	f043 0220 	orr.w	r2, r3, #32
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005322:	e002      	b.n	800532a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005324:	bf00      	nop
 8005326:	e000      	b.n	800532a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005328:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005332:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005336:	4618      	mov	r0, r3
 8005338:	37d8      	adds	r7, #216	@ 0xd8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	50000700 	.word	0x50000700
 8005344:	c3210000 	.word	0xc3210000
 8005348:	90c00010 	.word	0x90c00010
 800534c:	50000600 	.word	0x50000600
 8005350:	50000100 	.word	0x50000100
 8005354:	50000300 	.word	0x50000300
 8005358:	2000001c 	.word	0x2000001c
 800535c:	053e2d63 	.word	0x053e2d63
 8005360:	c7520000 	.word	0xc7520000
 8005364:	50000500 	.word	0x50000500
 8005368:	cb840000 	.word	0xcb840000

0800536c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005374:	2300      	movs	r3, #0
 8005376:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4618      	mov	r0, r3
 800537e:	f7ff f8b1 	bl	80044e4 <LL_ADC_IsEnabled>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d176      	bne.n	8005476 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	4b3c      	ldr	r3, [pc, #240]	@ (8005480 <ADC_Enable+0x114>)
 8005390:	4013      	ands	r3, r2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00d      	beq.n	80053b2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800539a:	f043 0210 	orr.w	r2, r3, #16
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053a6:	f043 0201 	orr.w	r2, r3, #1
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e062      	b.n	8005478 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff f86c 	bl	8004494 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053c4:	d004      	beq.n	80053d0 <ADC_Enable+0x64>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a2e      	ldr	r2, [pc, #184]	@ (8005484 <ADC_Enable+0x118>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d101      	bne.n	80053d4 <ADC_Enable+0x68>
 80053d0:	4b2d      	ldr	r3, [pc, #180]	@ (8005488 <ADC_Enable+0x11c>)
 80053d2:	e000      	b.n	80053d6 <ADC_Enable+0x6a>
 80053d4:	4b2d      	ldr	r3, [pc, #180]	@ (800548c <ADC_Enable+0x120>)
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fe fec6 	bl	8004168 <LL_ADC_GetCommonPathInternalCh>
 80053dc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80053de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d013      	beq.n	800540e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005490 <ADC_Enable+0x124>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	099b      	lsrs	r3, r3, #6
 80053ec:	4a29      	ldr	r2, [pc, #164]	@ (8005494 <ADC_Enable+0x128>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	099b      	lsrs	r3, r3, #6
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	4613      	mov	r3, r2
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	4413      	add	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005400:	e002      	b.n	8005408 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	3b01      	subs	r3, #1
 8005406:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f9      	bne.n	8005402 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800540e:	f7fe fe57 	bl	80040c0 <HAL_GetTick>
 8005412:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005414:	e028      	b.n	8005468 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff f862 	bl	80044e4 <LL_ADC_IsEnabled>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d104      	bne.n	8005430 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4618      	mov	r0, r3
 800542c:	f7ff f832 	bl	8004494 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005430:	f7fe fe46 	bl	80040c0 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d914      	bls.n	8005468 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b01      	cmp	r3, #1
 800544a:	d00d      	beq.n	8005468 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005450:	f043 0210 	orr.w	r2, r3, #16
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800545c:	f043 0201 	orr.w	r2, r3, #1
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e007      	b.n	8005478 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b01      	cmp	r3, #1
 8005474:	d1cf      	bne.n	8005416 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	8000003f 	.word	0x8000003f
 8005484:	50000100 	.word	0x50000100
 8005488:	50000300 	.word	0x50000300
 800548c:	50000700 	.word	0x50000700
 8005490:	2000001c 	.word	0x2000001c
 8005494:	053e2d63 	.word	0x053e2d63

08005498 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff f830 	bl	800450a <LL_ADC_IsDisableOngoing>
 80054aa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff f817 	bl	80044e4 <LL_ADC_IsEnabled>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d047      	beq.n	800554c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d144      	bne.n	800554c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f003 030d 	and.w	r3, r3, #13
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d10c      	bne.n	80054ea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7fe fff1 	bl	80044bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2203      	movs	r2, #3
 80054e0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80054e2:	f7fe fded 	bl	80040c0 <HAL_GetTick>
 80054e6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054e8:	e029      	b.n	800553e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ee:	f043 0210 	orr.w	r2, r3, #16
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054fa:	f043 0201 	orr.w	r2, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e023      	b.n	800554e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005506:	f7fe fddb 	bl	80040c0 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d914      	bls.n	800553e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00d      	beq.n	800553e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005526:	f043 0210 	orr.w	r2, r3, #16
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005532:	f043 0201 	orr.w	r2, r3, #1
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e007      	b.n	800554e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1dc      	bne.n	8005506 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b084      	sub	sp, #16
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005562:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005568:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800556c:	2b00      	cmp	r3, #0
 800556e:	d14b      	bne.n	8005608 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005574:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d021      	beq.n	80055ce <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4618      	mov	r0, r3
 8005590:	f7fe fe96 	bl	80042c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d032      	beq.n	8005600 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d12b      	bne.n	8005600 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d11f      	bne.n	8005600 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c4:	f043 0201 	orr.w	r2, r3, #1
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80055cc:	e018      	b.n	8005600 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d111      	bne.n	8005600 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d105      	bne.n	8005600 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055f8:	f043 0201 	orr.w	r2, r3, #1
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f7fc fe81 	bl	8002308 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005606:	e00e      	b.n	8005626 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f7ff fa5f 	bl	8004ad8 <HAL_ADC_ErrorCallback>
}
 800561a:	e004      	b.n	8005626 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	4798      	blx	r3
}
 8005626:	bf00      	nop
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b084      	sub	sp, #16
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800563a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f7ff fa41 	bl	8004ac4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005642:	bf00      	nop
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005656:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800565c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005668:	f043 0204 	orr.w	r2, r3, #4
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7ff fa31 	bl	8004ad8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005676:	bf00      	nop
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <LL_ADC_IsEnabled>:
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b01      	cmp	r3, #1
 8005690:	d101      	bne.n	8005696 <LL_ADC_IsEnabled+0x18>
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <LL_ADC_IsEnabled+0x1a>
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <LL_ADC_StartCalibration>:
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80056b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80056c0:	4313      	orrs	r3, r2
 80056c2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	609a      	str	r2, [r3, #8]
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <LL_ADC_IsCalibrationOnGoing>:
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056ea:	d101      	bne.n	80056f0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80056ec:	2301      	movs	r3, #1
 80056ee:	e000      	b.n	80056f2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <LL_ADC_REG_IsConversionOngoing>:
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 0304 	and.w	r3, r3, #4
 800570e:	2b04      	cmp	r3, #4
 8005710:	d101      	bne.n	8005716 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800572e:	2300      	movs	r3, #0
 8005730:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_ADCEx_Calibration_Start+0x1c>
 800573c:	2302      	movs	r3, #2
 800573e:	e04d      	b.n	80057dc <HAL_ADCEx_Calibration_Start+0xb8>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff fea5 	bl	8005498 <ADC_Disable>
 800574e:	4603      	mov	r3, r0
 8005750:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d136      	bne.n	80057c6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800575c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005760:	f023 0302 	bic.w	r3, r3, #2
 8005764:	f043 0202 	orr.w	r2, r3, #2
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6839      	ldr	r1, [r7, #0]
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff ff96 	bl	80056a4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005778:	e014      	b.n	80057a4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	3301      	adds	r3, #1
 800577e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4a18      	ldr	r2, [pc, #96]	@ (80057e4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d90d      	bls.n	80057a4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800578c:	f023 0312 	bic.w	r3, r3, #18
 8005790:	f043 0210 	orr.w	r2, r3, #16
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e01b      	b.n	80057dc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff ff94 	bl	80056d6 <LL_ADC_IsCalibrationOnGoing>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1e2      	bne.n	800577a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057b8:	f023 0303 	bic.w	r3, r3, #3
 80057bc:	f043 0201 	orr.w	r2, r3, #1
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80057c4:	e005      	b.n	80057d2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ca:	f043 0210 	orr.w	r2, r3, #16
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80057da:	7bfb      	ldrb	r3, [r7, #15]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	0004de01 	.word	0x0004de01

080057e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80057e8:	b590      	push	{r4, r7, lr}
 80057ea:	b0a1      	sub	sp, #132	@ 0x84
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d101      	bne.n	8005806 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005802:	2302      	movs	r3, #2
 8005804:	e0e7      	b.n	80059d6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800580e:	2300      	movs	r3, #0
 8005810:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005812:	2300      	movs	r3, #0
 8005814:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800581e:	d102      	bne.n	8005826 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005820:	4b6f      	ldr	r3, [pc, #444]	@ (80059e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005822:	60bb      	str	r3, [r7, #8]
 8005824:	e009      	b.n	800583a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a6e      	ldr	r2, [pc, #440]	@ (80059e4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d102      	bne.n	8005836 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005830:	4b6d      	ldr	r3, [pc, #436]	@ (80059e8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005832:	60bb      	str	r3, [r7, #8]
 8005834:	e001      	b.n	800583a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005836:	2300      	movs	r3, #0
 8005838:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10b      	bne.n	8005858 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005844:	f043 0220 	orr.w	r2, r3, #32
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e0be      	b.n	80059d6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff ff4f 	bl	80056fe <LL_ADC_REG_IsConversionOngoing>
 8005860:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	f7ff ff49 	bl	80056fe <LL_ADC_REG_IsConversionOngoing>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	f040 80a0 	bne.w	80059b4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005874:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005876:	2b00      	cmp	r3, #0
 8005878:	f040 809c 	bne.w	80059b4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005884:	d004      	beq.n	8005890 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a55      	ldr	r2, [pc, #340]	@ (80059e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d101      	bne.n	8005894 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005890:	4b56      	ldr	r3, [pc, #344]	@ (80059ec <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005892:	e000      	b.n	8005896 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005894:	4b56      	ldr	r3, [pc, #344]	@ (80059f0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005896:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d04b      	beq.n	8005938 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80058a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	6859      	ldr	r1, [r3, #4]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80058b2:	035b      	lsls	r3, r3, #13
 80058b4:	430b      	orrs	r3, r1
 80058b6:	431a      	orrs	r2, r3
 80058b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058c4:	d004      	beq.n	80058d0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a45      	ldr	r2, [pc, #276]	@ (80059e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d10f      	bne.n	80058f0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80058d0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80058d4:	f7ff fed3 	bl	800567e <LL_ADC_IsEnabled>
 80058d8:	4604      	mov	r4, r0
 80058da:	4841      	ldr	r0, [pc, #260]	@ (80059e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80058dc:	f7ff fecf 	bl	800567e <LL_ADC_IsEnabled>
 80058e0:	4603      	mov	r3, r0
 80058e2:	4323      	orrs	r3, r4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	bf0c      	ite	eq
 80058e8:	2301      	moveq	r3, #1
 80058ea:	2300      	movne	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	e012      	b.n	8005916 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80058f0:	483c      	ldr	r0, [pc, #240]	@ (80059e4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80058f2:	f7ff fec4 	bl	800567e <LL_ADC_IsEnabled>
 80058f6:	4604      	mov	r4, r0
 80058f8:	483b      	ldr	r0, [pc, #236]	@ (80059e8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80058fa:	f7ff fec0 	bl	800567e <LL_ADC_IsEnabled>
 80058fe:	4603      	mov	r3, r0
 8005900:	431c      	orrs	r4, r3
 8005902:	483c      	ldr	r0, [pc, #240]	@ (80059f4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005904:	f7ff febb 	bl	800567e <LL_ADC_IsEnabled>
 8005908:	4603      	mov	r3, r0
 800590a:	4323      	orrs	r3, r4
 800590c:	2b00      	cmp	r3, #0
 800590e:	bf0c      	ite	eq
 8005910:	2301      	moveq	r3, #1
 8005912:	2300      	movne	r3, #0
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d056      	beq.n	80059c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800591a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005922:	f023 030f 	bic.w	r3, r3, #15
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	6811      	ldr	r1, [r2, #0]
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	6892      	ldr	r2, [r2, #8]
 800592e:	430a      	orrs	r2, r1
 8005930:	431a      	orrs	r2, r3
 8005932:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005934:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005936:	e047      	b.n	80059c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005938:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005940:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005942:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800594c:	d004      	beq.n	8005958 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a23      	ldr	r2, [pc, #140]	@ (80059e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d10f      	bne.n	8005978 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005958:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800595c:	f7ff fe8f 	bl	800567e <LL_ADC_IsEnabled>
 8005960:	4604      	mov	r4, r0
 8005962:	481f      	ldr	r0, [pc, #124]	@ (80059e0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005964:	f7ff fe8b 	bl	800567e <LL_ADC_IsEnabled>
 8005968:	4603      	mov	r3, r0
 800596a:	4323      	orrs	r3, r4
 800596c:	2b00      	cmp	r3, #0
 800596e:	bf0c      	ite	eq
 8005970:	2301      	moveq	r3, #1
 8005972:	2300      	movne	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	e012      	b.n	800599e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005978:	481a      	ldr	r0, [pc, #104]	@ (80059e4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800597a:	f7ff fe80 	bl	800567e <LL_ADC_IsEnabled>
 800597e:	4604      	mov	r4, r0
 8005980:	4819      	ldr	r0, [pc, #100]	@ (80059e8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005982:	f7ff fe7c 	bl	800567e <LL_ADC_IsEnabled>
 8005986:	4603      	mov	r3, r0
 8005988:	431c      	orrs	r4, r3
 800598a:	481a      	ldr	r0, [pc, #104]	@ (80059f4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800598c:	f7ff fe77 	bl	800567e <LL_ADC_IsEnabled>
 8005990:	4603      	mov	r3, r0
 8005992:	4323      	orrs	r3, r4
 8005994:	2b00      	cmp	r3, #0
 8005996:	bf0c      	ite	eq
 8005998:	2301      	moveq	r3, #1
 800599a:	2300      	movne	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d012      	beq.n	80059c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80059a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80059aa:	f023 030f 	bic.w	r3, r3, #15
 80059ae:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80059b0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80059b2:	e009      	b.n	80059c8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b8:	f043 0220 	orr.w	r2, r3, #32
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80059c6:	e000      	b.n	80059ca <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80059c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80059d2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3784      	adds	r7, #132	@ 0x84
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd90      	pop	{r4, r7, pc}
 80059de:	bf00      	nop
 80059e0:	50000100 	.word	0x50000100
 80059e4:	50000400 	.word	0x50000400
 80059e8:	50000500 	.word	0x50000500
 80059ec:	50000300 	.word	0x50000300
 80059f0:	50000700 	.word	0x50000700
 80059f4:	50000600 	.word	0x50000600

080059f8 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e023      	b.n	8005a52 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d106      	bne.n	8005a24 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7fd fec8 	bl	80037b4 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3708      	adds	r7, #8
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <HAL_CORDIC_CalculateCpltCallback>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
__weak void HAL_CORDIC_CalculateCpltCallback(CORDIC_HandleTypeDef *hcordic)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  UNUSED(hcordic);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CORDIC_CalculateCpltCallback can be implemented in the user file
   */
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <HAL_CORDIC_IRQHandler>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
void HAL_CORDIC_IRQHandler(CORDIC_HandleTypeDef *hcordic)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  /* Check if calculation complete interrupt is enabled and if result ready
     flag is raised */
  if (__HAL_CORDIC_GET_IT_SOURCE(hcordic, CORDIC_IT_IEN) != 0U)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d039      	beq.n	8005af8 <HAL_CORDIC_IRQHandler+0x8a>
  {
    if (__HAL_CORDIC_GET_FLAG(hcordic, CORDIC_FLAG_RRDY) != 0U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a92:	d101      	bne.n	8005a98 <HAL_CORDIC_IRQHandler+0x2a>
 8005a94:	2301      	movs	r3, #1
 8005a96:	e000      	b.n	8005a9a <HAL_CORDIC_IRQHandler+0x2c>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d02c      	beq.n	8005af8 <HAL_CORDIC_IRQHandler+0x8a>
    {
      /* Decrement number of calculations to get */
      hcordic->NbCalcToGet--;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	1e5a      	subs	r2, r3, #1
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	611a      	str	r2, [r3, #16]

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &(hcordic->pOutBuff));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3308      	adds	r3, #8
 8005aac:	4619      	mov	r1, r3
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f84f 	bl	8005b52 <CORDIC_ReadOutDataIncrementPtr>

      /* Check if calculations are still to be ordered */
      if (hcordic->NbCalcToOrder > 0U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00a      	beq.n	8005ad2 <HAL_CORDIC_IRQHandler+0x64>
      {
        /* Decrement number of calculations to order */
        hcordic->NbCalcToOrder--;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	1e5a      	subs	r2, r3, #1
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	60da      	str	r2, [r3, #12]

        /* Continue the processing by providing another write of input data
           in the Write Data register, and increment input buffer pointer */
        CORDIC_WriteInDataIncrementPtr(hcordic, &(hcordic->pInBuff));
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	4619      	mov	r1, r3
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f817 	bl	8005b00 <CORDIC_WriteInDataIncrementPtr>
      }

      /* Check if all calculations results are got */
      if (hcordic->NbCalcToGet == 0U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10e      	bne.n	8005af8 <HAL_CORDIC_IRQHandler+0x8a>
      {
        /* Disable Result Ready Interrupt */
        __HAL_CORDIC_DISABLE_IT(hcordic, CORDIC_IT_IEN);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005ae8:	601a      	str	r2, [r3, #0]

        /* Change the CORDIC state */
        hcordic->State = HAL_CORDIC_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
#if USE_HAL_CORDIC_REGISTER_CALLBACKS == 1
        /*Call registered callback*/
        hcordic->CalculateCpltCallback(hcordic);
#else
        /*Call legacy weak callback*/
        HAL_CORDIC_CalculateCpltCallback(hcordic);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7ff ffb1 	bl	8005a5a <HAL_CORDIC_CalculateCpltCallback>
#endif /* USE_HAL_CORDIC_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005af8:	bf00      	nop
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, const int32_t **ppInBuff)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	1d1a      	adds	r2, r3, #4
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b2e:	d10a      	bne.n	8005b46 <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	1d1a      	adds	r2, r3, #4
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	601a      	str	r2, [r3, #0]
  }
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	1d1a      	adds	r2, r3, #4
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b7c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005b80:	d10a      	bne.n	8005b98 <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	1d1a      	adds	r2, r3, #4
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	601a      	str	r2, [r3, #0]
  }
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8005be8 <__NVIC_SetPriorityGrouping+0x44>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005bcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bd6:	4a04      	ldr	r2, [pc, #16]	@ (8005be8 <__NVIC_SetPriorityGrouping+0x44>)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	60d3      	str	r3, [r2, #12]
}
 8005bdc:	bf00      	nop
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	e000ed00 	.word	0xe000ed00

08005bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bf0:	4b04      	ldr	r3, [pc, #16]	@ (8005c04 <__NVIC_GetPriorityGrouping+0x18>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	0a1b      	lsrs	r3, r3, #8
 8005bf6:	f003 0307 	and.w	r3, r3, #7
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	e000ed00 	.word	0xe000ed00

08005c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	db0b      	blt.n	8005c32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c1a:	79fb      	ldrb	r3, [r7, #7]
 8005c1c:	f003 021f 	and.w	r2, r3, #31
 8005c20:	4907      	ldr	r1, [pc, #28]	@ (8005c40 <__NVIC_EnableIRQ+0x38>)
 8005c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c26:	095b      	lsrs	r3, r3, #5
 8005c28:	2001      	movs	r0, #1
 8005c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8005c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	e000e100 	.word	0xe000e100

08005c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	6039      	str	r1, [r7, #0]
 8005c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	db0a      	blt.n	8005c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	490c      	ldr	r1, [pc, #48]	@ (8005c90 <__NVIC_SetPriority+0x4c>)
 8005c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c62:	0112      	lsls	r2, r2, #4
 8005c64:	b2d2      	uxtb	r2, r2
 8005c66:	440b      	add	r3, r1
 8005c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c6c:	e00a      	b.n	8005c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	4908      	ldr	r1, [pc, #32]	@ (8005c94 <__NVIC_SetPriority+0x50>)
 8005c74:	79fb      	ldrb	r3, [r7, #7]
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	3b04      	subs	r3, #4
 8005c7c:	0112      	lsls	r2, r2, #4
 8005c7e:	b2d2      	uxtb	r2, r2
 8005c80:	440b      	add	r3, r1
 8005c82:	761a      	strb	r2, [r3, #24]
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	e000e100 	.word	0xe000e100
 8005c94:	e000ed00 	.word	0xe000ed00

08005c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b089      	sub	sp, #36	@ 0x24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	f1c3 0307 	rsb	r3, r3, #7
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	bf28      	it	cs
 8005cb6:	2304      	movcs	r3, #4
 8005cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	2b06      	cmp	r3, #6
 8005cc0:	d902      	bls.n	8005cc8 <NVIC_EncodePriority+0x30>
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	3b03      	subs	r3, #3
 8005cc6:	e000      	b.n	8005cca <NVIC_EncodePriority+0x32>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd6:	43da      	mvns	r2, r3
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	401a      	ands	r2, r3
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cea:	43d9      	mvns	r1, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cf0:	4313      	orrs	r3, r2
         );
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3724      	adds	r7, #36	@ 0x24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
	...

08005d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d10:	d301      	bcc.n	8005d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d12:	2301      	movs	r3, #1
 8005d14:	e00f      	b.n	8005d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d16:	4a0a      	ldr	r2, [pc, #40]	@ (8005d40 <SysTick_Config+0x40>)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d1e:	210f      	movs	r1, #15
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295
 8005d24:	f7ff ff8e 	bl	8005c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d28:	4b05      	ldr	r3, [pc, #20]	@ (8005d40 <SysTick_Config+0x40>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d2e:	4b04      	ldr	r3, [pc, #16]	@ (8005d40 <SysTick_Config+0x40>)
 8005d30:	2207      	movs	r2, #7
 8005d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	e000e010 	.word	0xe000e010

08005d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff ff29 	bl	8005ba4 <__NVIC_SetPriorityGrouping>
}
 8005d52:	bf00      	nop
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b086      	sub	sp, #24
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	4603      	mov	r3, r0
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]
 8005d66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d68:	f7ff ff40 	bl	8005bec <__NVIC_GetPriorityGrouping>
 8005d6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	6978      	ldr	r0, [r7, #20]
 8005d74:	f7ff ff90 	bl	8005c98 <NVIC_EncodePriority>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d7e:	4611      	mov	r1, r2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff ff5f 	bl	8005c44 <__NVIC_SetPriority>
}
 8005d86:	bf00      	nop
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b082      	sub	sp, #8
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	4603      	mov	r3, r0
 8005d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff ff33 	bl	8005c08 <__NVIC_EnableIRQ>
}
 8005da2:	bf00      	nop
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b082      	sub	sp, #8
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7ff ffa4 	bl	8005d00 <SysTick_Config>
 8005db8:	4603      	mov	r3, r0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b082      	sub	sp, #8
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e014      	b.n	8005dfe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	791b      	ldrb	r3, [r3, #4]
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d105      	bne.n	8005dea <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7fd fd0b 	bl	8003800 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2202      	movs	r2, #2
 8005dee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e056      	b.n	8005eca <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	795b      	ldrb	r3, [r3, #5]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d101      	bne.n	8005e28 <HAL_DAC_Start+0x20>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e050      	b.n	8005eca <HAL_DAC_Start+0xc2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2202      	movs	r2, #2
 8005e32:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6819      	ldr	r1, [r3, #0]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	f003 0310 	and.w	r3, r3, #16
 8005e40:	2201      	movs	r2, #1
 8005e42:	409a      	lsls	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e4c:	4b22      	ldr	r3, [pc, #136]	@ (8005ed8 <HAL_DAC_Start+0xd0>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	099b      	lsrs	r3, r3, #6
 8005e52:	4a22      	ldr	r2, [pc, #136]	@ (8005edc <HAL_DAC_Start+0xd4>)
 8005e54:	fba2 2303 	umull	r2, r3, r2, r3
 8005e58:	099b      	lsrs	r3, r3, #6
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005e5e:	e002      	b.n	8005e66 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	3b01      	subs	r3, #1
 8005e64:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1f9      	bne.n	8005e60 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10f      	bne.n	8005e92 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d11d      	bne.n	8005ebc <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	605a      	str	r2, [r3, #4]
 8005e90:	e014      	b.n	8005ebc <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	f003 0310 	and.w	r3, r3, #16
 8005ea2:	2102      	movs	r1, #2
 8005ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d107      	bne.n	8005ebc <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0202 	orr.w	r2, r2, #2
 8005eba:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	2000001c 	.word	0x2000001c
 8005edc:	053e2d63 	.word	0x053e2d63

08005ee0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ef6:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d01d      	beq.n	8005f3e <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d018      	beq.n	8005f3e <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2204      	movs	r2, #4
 8005f10:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f043 0201 	orr.w	r2, r3, #1
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005f26:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005f36:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f854 	bl	8005fe6 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01d      	beq.n	8005f84 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d018      	beq.n	8005f84 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2204      	movs	r2, #4
 8005f56:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	f043 0202 	orr.w	r2, r3, #2
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005f6c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005f7c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f9f4 	bl	800636c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005f84:	bf00      	nop
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e018      	b.n	8005fda <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d105      	bne.n	8005fc6 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	3308      	adds	r3, #8
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	e004      	b.n	8005fd0 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4413      	add	r3, r2
 8005fcc:	3314      	adds	r3, #20
 8005fce:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	371c      	adds	r7, #28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
	...

08005ffc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08a      	sub	sp, #40	@ 0x28
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <HAL_DAC_ConfigChannel+0x1c>
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e19e      	b.n	800635a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	795b      	ldrb	r3, [r3, #5]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_DAC_ConfigChannel+0x2c>
 8006024:	2302      	movs	r3, #2
 8006026:	e198      	b.n	800635a <HAL_DAC_ConfigChannel+0x35e>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2201      	movs	r2, #1
 800602c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2202      	movs	r2, #2
 8006032:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	2b04      	cmp	r3, #4
 800603a:	d17a      	bne.n	8006132 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800603c:	f7fe f840 	bl	80040c0 <HAL_GetTick>
 8006040:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d13d      	bne.n	80060c4 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006048:	e018      	b.n	800607c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800604a:	f7fe f839 	bl	80040c0 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	d911      	bls.n	800607c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800605e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00a      	beq.n	800607c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f043 0208 	orr.w	r2, r3, #8
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2203      	movs	r2, #3
 8006076:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e16e      	b.n	800635a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006082:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1df      	bne.n	800604a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006092:	641a      	str	r2, [r3, #64]	@ 0x40
 8006094:	e020      	b.n	80060d8 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006096:	f7fe f813 	bl	80040c0 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d90f      	bls.n	80060c4 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	da0a      	bge.n	80060c4 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	f043 0208 	orr.w	r2, r3, #8
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2203      	movs	r2, #3
 80060be:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e14a      	b.n	800635a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	dbe3      	blt.n	8006096 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80060d6:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f003 0310 	and.w	r3, r3, #16
 80060e4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80060e8:	fa01 f303 	lsl.w	r3, r1, r3
 80060ec:	43db      	mvns	r3, r3
 80060ee:	ea02 0103 	and.w	r1, r2, r3
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f003 0310 	and.w	r3, r3, #16
 80060fc:	409a      	lsls	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	21ff      	movs	r1, #255	@ 0xff
 8006114:	fa01 f303 	lsl.w	r3, r1, r3
 8006118:	43db      	mvns	r3, r3
 800611a:	ea02 0103 	and.w	r1, r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f003 0310 	and.w	r3, r3, #16
 8006128:	409a      	lsls	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d11d      	bne.n	8006176 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006140:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f003 0310 	and.w	r3, r3, #16
 8006148:	221f      	movs	r2, #31
 800614a:	fa02 f303 	lsl.w	r3, r2, r3
 800614e:	43db      	mvns	r3, r3
 8006150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006152:	4013      	ands	r3, r2
 8006154:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f003 0310 	and.w	r3, r3, #16
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800616a:	4313      	orrs	r3, r2
 800616c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006174:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800617c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f003 0310 	and.w	r3, r3, #16
 8006184:	2207      	movs	r2, #7
 8006186:	fa02 f303 	lsl.w	r3, r2, r3
 800618a:	43db      	mvns	r3, r3
 800618c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800618e:	4013      	ands	r3, r2
 8006190:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d102      	bne.n	80061a0 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800619a:	2300      	movs	r3, #0
 800619c:	623b      	str	r3, [r7, #32]
 800619e:	e00f      	b.n	80061c0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d102      	bne.n	80061ae <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80061a8:	2301      	movs	r3, #1
 80061aa:	623b      	str	r3, [r7, #32]
 80061ac:	e008      	b.n	80061c0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d102      	bne.n	80061bc <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80061b6:	2301      	movs	r3, #1
 80061b8:	623b      	str	r3, [r7, #32]
 80061ba:	e001      	b.n	80061c0 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80061bc:	2300      	movs	r3, #0
 80061be:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	6a3a      	ldr	r2, [r7, #32]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f003 0310 	and.w	r3, r3, #16
 80061d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061da:	fa02 f303 	lsl.w	r3, r2, r3
 80061de:	43db      	mvns	r3, r3
 80061e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061e2:	4013      	ands	r3, r2
 80061e4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	791b      	ldrb	r3, [r3, #4]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d102      	bne.n	80061f4 <HAL_DAC_ConfigChannel+0x1f8>
 80061ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80061f2:	e000      	b.n	80061f6 <HAL_DAC_ConfigChannel+0x1fa>
 80061f4:	2300      	movs	r3, #0
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f003 0310 	and.w	r3, r3, #16
 8006202:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006206:	fa02 f303 	lsl.w	r3, r2, r3
 800620a:	43db      	mvns	r3, r3
 800620c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800620e:	4013      	ands	r3, r2
 8006210:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	795b      	ldrb	r3, [r3, #5]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d102      	bne.n	8006220 <HAL_DAC_ConfigChannel+0x224>
 800621a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800621e:	e000      	b.n	8006222 <HAL_DAC_ConfigChannel+0x226>
 8006220:	2300      	movs	r3, #0
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800622e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b02      	cmp	r3, #2
 8006236:	d114      	bne.n	8006262 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006238:	f002 ff7a 	bl	8009130 <HAL_RCC_GetHCLKFreq>
 800623c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	4a48      	ldr	r2, [pc, #288]	@ (8006364 <HAL_DAC_ConfigChannel+0x368>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d904      	bls.n	8006250 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006248:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800624c:	627b      	str	r3, [r7, #36]	@ 0x24
 800624e:	e00f      	b.n	8006270 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	4a45      	ldr	r2, [pc, #276]	@ (8006368 <HAL_DAC_ConfigChannel+0x36c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d90a      	bls.n	800626e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800625e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006260:	e006      	b.n	8006270 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006268:	4313      	orrs	r3, r2
 800626a:	627b      	str	r3, [r7, #36]	@ 0x24
 800626c:	e000      	b.n	8006270 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800626e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f003 0310 	and.w	r3, r3, #16
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	fa02 f303 	lsl.w	r3, r2, r3
 800627c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800627e:	4313      	orrs	r3, r2
 8006280:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006288:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6819      	ldr	r1, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f003 0310 	and.w	r3, r3, #16
 8006296:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800629a:	fa02 f303 	lsl.w	r3, r2, r3
 800629e:	43da      	mvns	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	400a      	ands	r2, r1
 80062a6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f003 0310 	and.w	r3, r3, #16
 80062b6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80062ba:	fa02 f303 	lsl.w	r3, r2, r3
 80062be:	43db      	mvns	r3, r3
 80062c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062c2:	4013      	ands	r3, r2
 80062c4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f003 0310 	and.w	r3, r3, #16
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	fa02 f303 	lsl.w	r3, r2, r3
 80062d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062da:	4313      	orrs	r3, r2
 80062dc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6819      	ldr	r1, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f003 0310 	and.w	r3, r3, #16
 80062f2:	22c0      	movs	r2, #192	@ 0xc0
 80062f4:	fa02 f303 	lsl.w	r3, r2, r3
 80062f8:	43da      	mvns	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	400a      	ands	r2, r1
 8006300:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	089b      	lsrs	r3, r3, #2
 8006308:	f003 030f 	and.w	r3, r3, #15
 800630c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	089b      	lsrs	r3, r3, #2
 8006314:	021b      	lsls	r3, r3, #8
 8006316:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f003 0310 	and.w	r3, r3, #16
 800632c:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8006330:	fa01 f303 	lsl.w	r3, r1, r3
 8006334:	43db      	mvns	r3, r3
 8006336:	ea02 0103 	and.w	r1, r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f003 0310 	and.w	r3, r3, #16
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	409a      	lsls	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2201      	movs	r2, #1
 8006350:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006358:	7ffb      	ldrb	r3, [r7, #31]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3728      	adds	r7, #40	@ 0x28
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	09896800 	.word	0x09896800
 8006368:	04c4b400 	.word	0x04c4b400

0800636c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e08d      	b.n	80064ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	461a      	mov	r2, r3
 8006398:	4b47      	ldr	r3, [pc, #284]	@ (80064b8 <HAL_DMA_Init+0x138>)
 800639a:	429a      	cmp	r2, r3
 800639c:	d80f      	bhi.n	80063be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	461a      	mov	r2, r3
 80063a4:	4b45      	ldr	r3, [pc, #276]	@ (80064bc <HAL_DMA_Init+0x13c>)
 80063a6:	4413      	add	r3, r2
 80063a8:	4a45      	ldr	r2, [pc, #276]	@ (80064c0 <HAL_DMA_Init+0x140>)
 80063aa:	fba2 2303 	umull	r2, r3, r2, r3
 80063ae:	091b      	lsrs	r3, r3, #4
 80063b0:	009a      	lsls	r2, r3, #2
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a42      	ldr	r2, [pc, #264]	@ (80064c4 <HAL_DMA_Init+0x144>)
 80063ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80063bc:	e00e      	b.n	80063dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	4b40      	ldr	r3, [pc, #256]	@ (80064c8 <HAL_DMA_Init+0x148>)
 80063c6:	4413      	add	r3, r2
 80063c8:	4a3d      	ldr	r2, [pc, #244]	@ (80064c0 <HAL_DMA_Init+0x140>)
 80063ca:	fba2 2303 	umull	r2, r3, r2, r3
 80063ce:	091b      	lsrs	r3, r3, #4
 80063d0:	009a      	lsls	r2, r3, #2
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a3c      	ldr	r2, [pc, #240]	@ (80064cc <HAL_DMA_Init+0x14c>)
 80063da:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80063f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006400:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800640c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006418:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f9b6 	bl	80067a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800643c:	d102      	bne.n	8006444 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006458:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d010      	beq.n	8006484 <HAL_DMA_Init+0x104>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2b04      	cmp	r3, #4
 8006468:	d80c      	bhi.n	8006484 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f9d6 	bl	800681c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006474:	2200      	movs	r2, #0
 8006476:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006480:	605a      	str	r2, [r3, #4]
 8006482:	e008      	b.n	8006496 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	40020407 	.word	0x40020407
 80064bc:	bffdfff8 	.word	0xbffdfff8
 80064c0:	cccccccd 	.word	0xcccccccd
 80064c4:	40020000 	.word	0x40020000
 80064c8:	bffdfbf8 	.word	0xbffdfbf8
 80064cc:	40020400 	.word	0x40020400

080064d0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d101      	bne.n	80064f0 <HAL_DMA_Start_IT+0x20>
 80064ec:	2302      	movs	r3, #2
 80064ee:	e066      	b.n	80065be <HAL_DMA_Start_IT+0xee>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	d155      	bne.n	80065b0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2202      	movs	r2, #2
 8006508:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f022 0201 	bic.w	r2, r2, #1
 8006520:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	68b9      	ldr	r1, [r7, #8]
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 f8fb 	bl	8006724 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006532:	2b00      	cmp	r3, #0
 8006534:	d008      	beq.n	8006548 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f042 020e 	orr.w	r2, r2, #14
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	e00f      	b.n	8006568 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0204 	bic.w	r2, r2, #4
 8006556:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f042 020a 	orr.w	r2, r2, #10
 8006566:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d007      	beq.n	8006586 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006580:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006584:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800658a:	2b00      	cmp	r3, #0
 800658c:	d007      	beq.n	800659e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006598:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800659c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f042 0201 	orr.w	r2, r2, #1
 80065ac:	601a      	str	r2, [r3, #0]
 80065ae:	e005      	b.n	80065bc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80065b8:	2302      	movs	r3, #2
 80065ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80065bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b084      	sub	sp, #16
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e2:	f003 031f 	and.w	r3, r3, #31
 80065e6:	2204      	movs	r2, #4
 80065e8:	409a      	lsls	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4013      	ands	r3, r2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d026      	beq.n	8006640 <HAL_DMA_IRQHandler+0x7a>
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d021      	beq.n	8006640 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b00      	cmp	r3, #0
 8006608:	d107      	bne.n	800661a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0204 	bic.w	r2, r2, #4
 8006618:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800661e:	f003 021f 	and.w	r2, r3, #31
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006626:	2104      	movs	r1, #4
 8006628:	fa01 f202 	lsl.w	r2, r1, r2
 800662c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006632:	2b00      	cmp	r3, #0
 8006634:	d071      	beq.n	800671a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800663e:	e06c      	b.n	800671a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006644:	f003 031f 	and.w	r3, r3, #31
 8006648:	2202      	movs	r2, #2
 800664a:	409a      	lsls	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4013      	ands	r3, r2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d02e      	beq.n	80066b2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d029      	beq.n	80066b2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10b      	bne.n	8006684 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 020a 	bic.w	r2, r2, #10
 800667a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006688:	f003 021f 	and.w	r2, r3, #31
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006690:	2102      	movs	r1, #2
 8006692:	fa01 f202 	lsl.w	r2, r1, r2
 8006696:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d038      	beq.n	800671a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80066b0:	e033      	b.n	800671a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066b6:	f003 031f 	and.w	r3, r3, #31
 80066ba:	2208      	movs	r2, #8
 80066bc:	409a      	lsls	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4013      	ands	r3, r2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d02a      	beq.n	800671c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f003 0308 	and.w	r3, r3, #8
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d025      	beq.n	800671c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 020e 	bic.w	r2, r2, #14
 80066de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e4:	f003 021f 	and.w	r2, r3, #31
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ec:	2101      	movs	r1, #1
 80066ee:	fa01 f202 	lsl.w	r2, r1, r2
 80066f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800670e:	2b00      	cmp	r3, #0
 8006710:	d004      	beq.n	800671c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800671a:	bf00      	nop
 800671c:	bf00      	nop
}
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800673a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006740:	2b00      	cmp	r3, #0
 8006742:	d004      	beq.n	800674e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800674c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006752:	f003 021f 	and.w	r2, r3, #31
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800675a:	2101      	movs	r1, #1
 800675c:	fa01 f202 	lsl.w	r2, r1, r2
 8006760:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b10      	cmp	r3, #16
 8006770:	d108      	bne.n	8006784 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006782:	e007      	b.n	8006794 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	60da      	str	r2, [r3, #12]
}
 8006794:	bf00      	nop
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	461a      	mov	r2, r3
 80067ae:	4b16      	ldr	r3, [pc, #88]	@ (8006808 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d802      	bhi.n	80067ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80067b4:	4b15      	ldr	r3, [pc, #84]	@ (800680c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80067b6:	617b      	str	r3, [r7, #20]
 80067b8:	e001      	b.n	80067be <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80067ba:	4b15      	ldr	r3, [pc, #84]	@ (8006810 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80067bc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	3b08      	subs	r3, #8
 80067ca:	4a12      	ldr	r2, [pc, #72]	@ (8006814 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80067cc:	fba2 2303 	umull	r2, r3, r2, r3
 80067d0:	091b      	lsrs	r3, r3, #4
 80067d2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d8:	089b      	lsrs	r3, r3, #2
 80067da:	009a      	lsls	r2, r3, #2
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	4413      	add	r3, r2
 80067e0:	461a      	mov	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a0b      	ldr	r2, [pc, #44]	@ (8006818 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80067ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f003 031f 	and.w	r3, r3, #31
 80067f2:	2201      	movs	r2, #1
 80067f4:	409a      	lsls	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80067fa:	bf00      	nop
 80067fc:	371c      	adds	r7, #28
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40020407 	.word	0x40020407
 800680c:	40020800 	.word	0x40020800
 8006810:	40020820 	.word	0x40020820
 8006814:	cccccccd 	.word	0xcccccccd
 8006818:	40020880 	.word	0x40020880

0800681c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	b2db      	uxtb	r3, r3
 800682a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4b0b      	ldr	r3, [pc, #44]	@ (800685c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	461a      	mov	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a08      	ldr	r2, [pc, #32]	@ (8006860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800683e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3b01      	subs	r3, #1
 8006844:	f003 031f 	and.w	r3, r3, #31
 8006848:	2201      	movs	r2, #1
 800684a:	409a      	lsls	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006850:	bf00      	nop
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	1000823f 	.word	0x1000823f
 8006860:	40020940 	.word	0x40020940

08006864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800686e:	2300      	movs	r3, #0
 8006870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006872:	e15a      	b.n	8006b2a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	2101      	movs	r1, #1
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	fa01 f303 	lsl.w	r3, r1, r3
 8006880:	4013      	ands	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b00      	cmp	r3, #0
 8006888:	f000 814c 	beq.w	8006b24 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f003 0303 	and.w	r3, r3, #3
 8006894:	2b01      	cmp	r3, #1
 8006896:	d005      	beq.n	80068a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d130      	bne.n	8006906 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	005b      	lsls	r3, r3, #1
 80068ae:	2203      	movs	r2, #3
 80068b0:	fa02 f303 	lsl.w	r3, r2, r3
 80068b4:	43db      	mvns	r3, r3
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4013      	ands	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	fa02 f303 	lsl.w	r3, r2, r3
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80068da:	2201      	movs	r2, #1
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	fa02 f303 	lsl.w	r3, r2, r3
 80068e2:	43db      	mvns	r3, r3
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	4013      	ands	r3, r2
 80068e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	091b      	lsrs	r3, r3, #4
 80068f0:	f003 0201 	and.w	r2, r3, #1
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	fa02 f303 	lsl.w	r3, r2, r3
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	2b03      	cmp	r3, #3
 8006910:	d017      	beq.n	8006942 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	005b      	lsls	r3, r3, #1
 800691c:	2203      	movs	r2, #3
 800691e:	fa02 f303 	lsl.w	r3, r2, r3
 8006922:	43db      	mvns	r3, r3
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	4013      	ands	r3, r2
 8006928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	689a      	ldr	r2, [r3, #8]
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	005b      	lsls	r3, r3, #1
 8006932:	fa02 f303 	lsl.w	r3, r2, r3
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d123      	bne.n	8006996 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	08da      	lsrs	r2, r3, #3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	3208      	adds	r2, #8
 8006956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800695a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f003 0307 	and.w	r3, r3, #7
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	220f      	movs	r2, #15
 8006966:	fa02 f303 	lsl.w	r3, r2, r3
 800696a:	43db      	mvns	r3, r3
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	4013      	ands	r3, r2
 8006970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	691a      	ldr	r2, [r3, #16]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	fa02 f303 	lsl.w	r3, r2, r3
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4313      	orrs	r3, r2
 8006986:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	08da      	lsrs	r2, r3, #3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3208      	adds	r2, #8
 8006990:	6939      	ldr	r1, [r7, #16]
 8006992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	005b      	lsls	r3, r3, #1
 80069a0:	2203      	movs	r2, #3
 80069a2:	fa02 f303 	lsl.w	r3, r2, r3
 80069a6:	43db      	mvns	r3, r3
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	4013      	ands	r3, r2
 80069ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f003 0203 	and.w	r2, r3, #3
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	fa02 f303 	lsl.w	r3, r2, r3
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 80a6 	beq.w	8006b24 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069d8:	4b5b      	ldr	r3, [pc, #364]	@ (8006b48 <HAL_GPIO_Init+0x2e4>)
 80069da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069dc:	4a5a      	ldr	r2, [pc, #360]	@ (8006b48 <HAL_GPIO_Init+0x2e4>)
 80069de:	f043 0301 	orr.w	r3, r3, #1
 80069e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80069e4:	4b58      	ldr	r3, [pc, #352]	@ (8006b48 <HAL_GPIO_Init+0x2e4>)
 80069e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	60bb      	str	r3, [r7, #8]
 80069ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069f0:	4a56      	ldr	r2, [pc, #344]	@ (8006b4c <HAL_GPIO_Init+0x2e8>)
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	089b      	lsrs	r3, r3, #2
 80069f6:	3302      	adds	r3, #2
 80069f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f003 0303 	and.w	r3, r3, #3
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	220f      	movs	r2, #15
 8006a08:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0c:	43db      	mvns	r3, r3
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	4013      	ands	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006a1a:	d01f      	beq.n	8006a5c <HAL_GPIO_Init+0x1f8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a4c      	ldr	r2, [pc, #304]	@ (8006b50 <HAL_GPIO_Init+0x2ec>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d019      	beq.n	8006a58 <HAL_GPIO_Init+0x1f4>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a4b      	ldr	r2, [pc, #300]	@ (8006b54 <HAL_GPIO_Init+0x2f0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d013      	beq.n	8006a54 <HAL_GPIO_Init+0x1f0>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a4a      	ldr	r2, [pc, #296]	@ (8006b58 <HAL_GPIO_Init+0x2f4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00d      	beq.n	8006a50 <HAL_GPIO_Init+0x1ec>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a49      	ldr	r2, [pc, #292]	@ (8006b5c <HAL_GPIO_Init+0x2f8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d007      	beq.n	8006a4c <HAL_GPIO_Init+0x1e8>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a48      	ldr	r2, [pc, #288]	@ (8006b60 <HAL_GPIO_Init+0x2fc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d101      	bne.n	8006a48 <HAL_GPIO_Init+0x1e4>
 8006a44:	2305      	movs	r3, #5
 8006a46:	e00a      	b.n	8006a5e <HAL_GPIO_Init+0x1fa>
 8006a48:	2306      	movs	r3, #6
 8006a4a:	e008      	b.n	8006a5e <HAL_GPIO_Init+0x1fa>
 8006a4c:	2304      	movs	r3, #4
 8006a4e:	e006      	b.n	8006a5e <HAL_GPIO_Init+0x1fa>
 8006a50:	2303      	movs	r3, #3
 8006a52:	e004      	b.n	8006a5e <HAL_GPIO_Init+0x1fa>
 8006a54:	2302      	movs	r3, #2
 8006a56:	e002      	b.n	8006a5e <HAL_GPIO_Init+0x1fa>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e000      	b.n	8006a5e <HAL_GPIO_Init+0x1fa>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	f002 0203 	and.w	r2, r2, #3
 8006a64:	0092      	lsls	r2, r2, #2
 8006a66:	4093      	lsls	r3, r2
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a6e:	4937      	ldr	r1, [pc, #220]	@ (8006b4c <HAL_GPIO_Init+0x2e8>)
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	089b      	lsrs	r3, r3, #2
 8006a74:	3302      	adds	r3, #2
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a7c:	4b39      	ldr	r3, [pc, #228]	@ (8006b64 <HAL_GPIO_Init+0x300>)
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	43db      	mvns	r3, r3
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006aa0:	4a30      	ldr	r2, [pc, #192]	@ (8006b64 <HAL_GPIO_Init+0x300>)
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8006b64 <HAL_GPIO_Init+0x300>)
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	43db      	mvns	r3, r3
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006aca:	4a26      	ldr	r2, [pc, #152]	@ (8006b64 <HAL_GPIO_Init+0x300>)
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006ad0:	4b24      	ldr	r3, [pc, #144]	@ (8006b64 <HAL_GPIO_Init+0x300>)
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	43db      	mvns	r3, r3
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	4013      	ands	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006af4:	4a1b      	ldr	r2, [pc, #108]	@ (8006b64 <HAL_GPIO_Init+0x300>)
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006afa:	4b1a      	ldr	r3, [pc, #104]	@ (8006b64 <HAL_GPIO_Init+0x300>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	43db      	mvns	r3, r3
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	4013      	ands	r3, r2
 8006b08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006b1e:	4a11      	ldr	r2, [pc, #68]	@ (8006b64 <HAL_GPIO_Init+0x300>)
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	3301      	adds	r3, #1
 8006b28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	fa22 f303 	lsr.w	r3, r2, r3
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f47f ae9d 	bne.w	8006874 <HAL_GPIO_Init+0x10>
  }
}
 8006b3a:	bf00      	nop
 8006b3c:	bf00      	nop
 8006b3e:	371c      	adds	r7, #28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	40021000 	.word	0x40021000
 8006b4c:	40010000 	.word	0x40010000
 8006b50:	48000400 	.word	0x48000400
 8006b54:	48000800 	.word	0x48000800
 8006b58:	48000c00 	.word	0x48000c00
 8006b5c:	48001000 	.word	0x48001000
 8006b60:	48001400 	.word	0x48001400
 8006b64:	40010400 	.word	0x40010400

08006b68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691a      	ldr	r2, [r3, #16]
 8006b78:	887b      	ldrh	r3, [r7, #2]
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b80:	2301      	movs	r3, #1
 8006b82:	73fb      	strb	r3, [r7, #15]
 8006b84:	e001      	b.n	8006b8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b86:	2300      	movs	r3, #0
 8006b88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	807b      	strh	r3, [r7, #2]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ba8:	787b      	ldrb	r3, [r7, #1]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006bae:	887a      	ldrh	r2, [r7, #2]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006bb4:	e002      	b.n	8006bbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006bb6:	887a      	ldrh	r2, [r7, #2]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006bda:	887a      	ldrh	r2, [r7, #2]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4013      	ands	r3, r2
 8006be0:	041a      	lsls	r2, r3, #16
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	43d9      	mvns	r1, r3
 8006be6:	887b      	ldrh	r3, [r7, #2]
 8006be8:	400b      	ands	r3, r1
 8006bea:	431a      	orrs	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	619a      	str	r2, [r3, #24]
}
 8006bf0:	bf00      	nop
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e0c0      	b.n	8006d90 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d106      	bne.n	8006c28 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f009 fa22 	bl	801006c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2203      	movs	r2, #3
 8006c2c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f005 f856 	bl	800bce6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	73fb      	strb	r3, [r7, #15]
 8006c3e:	e03e      	b.n	8006cbe <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006c40:	7bfa      	ldrb	r2, [r7, #15]
 8006c42:	6879      	ldr	r1, [r7, #4]
 8006c44:	4613      	mov	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	440b      	add	r3, r1
 8006c4e:	3311      	adds	r3, #17
 8006c50:	2201      	movs	r2, #1
 8006c52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c54:	7bfa      	ldrb	r2, [r7, #15]
 8006c56:	6879      	ldr	r1, [r7, #4]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	440b      	add	r3, r1
 8006c62:	3310      	adds	r3, #16
 8006c64:	7bfa      	ldrb	r2, [r7, #15]
 8006c66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c68:	7bfa      	ldrb	r2, [r7, #15]
 8006c6a:	6879      	ldr	r1, [r7, #4]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	440b      	add	r3, r1
 8006c76:	3313      	adds	r3, #19
 8006c78:	2200      	movs	r2, #0
 8006c7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006c7c:	7bfa      	ldrb	r2, [r7, #15]
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	4613      	mov	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4413      	add	r3, r2
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	440b      	add	r3, r1
 8006c8a:	3320      	adds	r3, #32
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c90:	7bfa      	ldrb	r2, [r7, #15]
 8006c92:	6879      	ldr	r1, [r7, #4]
 8006c94:	4613      	mov	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	440b      	add	r3, r1
 8006c9e:	3324      	adds	r3, #36	@ 0x24
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	4613      	mov	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4413      	add	r3, r2
 8006cb0:	00db      	lsls	r3, r3, #3
 8006cb2:	440b      	add	r3, r1
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	73fb      	strb	r3, [r7, #15]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	791b      	ldrb	r3, [r3, #4]
 8006cc2:	7bfa      	ldrb	r2, [r7, #15]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d3bb      	bcc.n	8006c40 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cc8:	2300      	movs	r3, #0
 8006cca:	73fb      	strb	r3, [r7, #15]
 8006ccc:	e044      	b.n	8006d58 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006cce:	7bfa      	ldrb	r2, [r7, #15]
 8006cd0:	6879      	ldr	r1, [r7, #4]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	00db      	lsls	r3, r3, #3
 8006cda:	440b      	add	r3, r1
 8006cdc:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006ce4:	7bfa      	ldrb	r2, [r7, #15]
 8006ce6:	6879      	ldr	r1, [r7, #4]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	440b      	add	r3, r1
 8006cf2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006cf6:	7bfa      	ldrb	r2, [r7, #15]
 8006cf8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006cfa:	7bfa      	ldrb	r2, [r7, #15]
 8006cfc:	6879      	ldr	r1, [r7, #4]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	440b      	add	r3, r1
 8006d08:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006d10:	7bfa      	ldrb	r2, [r7, #15]
 8006d12:	6879      	ldr	r1, [r7, #4]
 8006d14:	4613      	mov	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	440b      	add	r3, r1
 8006d1e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006d26:	7bfa      	ldrb	r2, [r7, #15]
 8006d28:	6879      	ldr	r1, [r7, #4]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	00db      	lsls	r3, r3, #3
 8006d32:	440b      	add	r3, r1
 8006d34:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d3c:	7bfa      	ldrb	r2, [r7, #15]
 8006d3e:	6879      	ldr	r1, [r7, #4]
 8006d40:	4613      	mov	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	00db      	lsls	r3, r3, #3
 8006d48:	440b      	add	r3, r1
 8006d4a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006d4e:	2200      	movs	r2, #0
 8006d50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
 8006d54:	3301      	adds	r3, #1
 8006d56:	73fb      	strb	r3, [r7, #15]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	791b      	ldrb	r3, [r3, #4]
 8006d5c:	7bfa      	ldrb	r2, [r7, #15]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d3b5      	bcc.n	8006cce <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6818      	ldr	r0, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	3304      	adds	r3, #4
 8006d6a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006d6e:	f004 ffd5 	bl	800bd1c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	7a9b      	ldrb	r3, [r3, #10]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d102      	bne.n	8006d8e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 fc42 	bl	8008612 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d101      	bne.n	8006dae <HAL_PCD_Start+0x16>
 8006daa:	2302      	movs	r3, #2
 8006dac:	e012      	b.n	8006dd4 <HAL_PCD_Start+0x3c>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f004 ff7c 	bl	800bcb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f007 fa3d 	bl	800e244 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f007 fa42 	bl	800e272 <USB_ReadInterrupts>
 8006dee:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fb06 	bl	800740c <PCD_EP_ISR_Handler>

    return;
 8006e00:	e110      	b.n	8007024 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d013      	beq.n	8006e34 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e1e:	b292      	uxth	r2, r2
 8006e20:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f009 f9b2 	bl	801018e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f8fc 	bl	800702a <HAL_PCD_SetAddress>

    return;
 8006e32:	e0f7      	b.n	8007024 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00c      	beq.n	8006e58 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006e50:	b292      	uxth	r2, r2
 8006e52:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006e56:	e0e5      	b.n	8007024 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00c      	beq.n	8006e7c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e74:	b292      	uxth	r2, r2
 8006e76:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006e7a:	e0d3      	b.n	8007024 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d034      	beq.n	8006ef0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0204 	bic.w	r2, r2, #4
 8006e98:	b292      	uxth	r2, r2
 8006e9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0208 	bic.w	r2, r2, #8
 8006eb0:	b292      	uxth	r2, r2
 8006eb2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d107      	bne.n	8006ed0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006ec8:	2100      	movs	r1, #0
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f009 fb52 	bl	8010574 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f009 f995 	bl	8010200 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006ee8:	b292      	uxth	r2, r2
 8006eea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006eee:	e099      	b.n	8007024 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d027      	beq.n	8006f4a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f042 0208 	orr.w	r2, r2, #8
 8006f0c:	b292      	uxth	r2, r2
 8006f0e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f24:	b292      	uxth	r2, r2
 8006f26:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f042 0204 	orr.w	r2, r2, #4
 8006f3c:	b292      	uxth	r2, r2
 8006f3e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f009 f942 	bl	80101cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006f48:	e06c      	b.n	8007024 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d040      	beq.n	8006fd6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f66:	b292      	uxth	r2, r2
 8006f68:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d12b      	bne.n	8006fce <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f042 0204 	orr.w	r2, r2, #4
 8006f88:	b292      	uxth	r2, r2
 8006f8a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f042 0208 	orr.w	r2, r2, #8
 8006fa0:	b292      	uxth	r2, r2
 8006fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	089b      	lsrs	r3, r3, #2
 8006fba:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f009 fad4 	bl	8010574 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006fcc:	e02a      	b.n	8007024 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f009 f8fc 	bl	80101cc <HAL_PCD_SuspendCallback>
    return;
 8006fd4:	e026      	b.n	8007024 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00f      	beq.n	8007000 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006ff2:	b292      	uxth	r2, r2
 8006ff4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f009 f8ba 	bl	8010172 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006ffe:	e011      	b.n	8007024 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00c      	beq.n	8007024 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007012:	b29a      	uxth	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800701c:	b292      	uxth	r2, r2
 800701e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007022:	bf00      	nop
  }
}
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b082      	sub	sp, #8
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	460b      	mov	r3, r1
 8007034:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800703c:	2b01      	cmp	r3, #1
 800703e:	d101      	bne.n	8007044 <HAL_PCD_SetAddress+0x1a>
 8007040:	2302      	movs	r3, #2
 8007042:	e012      	b.n	800706a <HAL_PCD_SetAddress+0x40>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	78fa      	ldrb	r2, [r7, #3]
 8007050:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	78fa      	ldrb	r2, [r7, #3]
 8007058:	4611      	mov	r1, r2
 800705a:	4618      	mov	r0, r3
 800705c:	f007 f8de 	bl	800e21c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	4608      	mov	r0, r1
 800707c:	4611      	mov	r1, r2
 800707e:	461a      	mov	r2, r3
 8007080:	4603      	mov	r3, r0
 8007082:	70fb      	strb	r3, [r7, #3]
 8007084:	460b      	mov	r3, r1
 8007086:	803b      	strh	r3, [r7, #0]
 8007088:	4613      	mov	r3, r2
 800708a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007094:	2b00      	cmp	r3, #0
 8007096:	da0e      	bge.n	80070b6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007098:	78fb      	ldrb	r3, [r7, #3]
 800709a:	f003 0207 	and.w	r2, r3, #7
 800709e:	4613      	mov	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	00db      	lsls	r3, r3, #3
 80070a6:	3310      	adds	r3, #16
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	4413      	add	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2201      	movs	r2, #1
 80070b2:	705a      	strb	r2, [r3, #1]
 80070b4:	e00e      	b.n	80070d4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070b6:	78fb      	ldrb	r3, [r7, #3]
 80070b8:	f003 0207 	and.w	r2, r3, #7
 80070bc:	4613      	mov	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	4413      	add	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80070e0:	883b      	ldrh	r3, [r7, #0]
 80070e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	78ba      	ldrb	r2, [r7, #2]
 80070ee:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80070f0:	78bb      	ldrb	r3, [r7, #2]
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d102      	bne.n	80070fc <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007102:	2b01      	cmp	r3, #1
 8007104:	d101      	bne.n	800710a <HAL_PCD_EP_Open+0x98>
 8007106:	2302      	movs	r3, #2
 8007108:	e00e      	b.n	8007128 <HAL_PCD_EP_Open+0xb6>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68f9      	ldr	r1, [r7, #12]
 8007118:	4618      	mov	r0, r3
 800711a:	f004 fe1d 	bl	800bd58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8007126:	7afb      	ldrb	r3, [r7, #11]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	460b      	mov	r3, r1
 800713a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800713c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007140:	2b00      	cmp	r3, #0
 8007142:	da0e      	bge.n	8007162 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007144:	78fb      	ldrb	r3, [r7, #3]
 8007146:	f003 0207 	and.w	r2, r3, #7
 800714a:	4613      	mov	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	00db      	lsls	r3, r3, #3
 8007152:	3310      	adds	r3, #16
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	4413      	add	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2201      	movs	r2, #1
 800715e:	705a      	strb	r2, [r3, #1]
 8007160:	e00e      	b.n	8007180 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007162:	78fb      	ldrb	r3, [r7, #3]
 8007164:	f003 0207 	and.w	r2, r3, #7
 8007168:	4613      	mov	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	4413      	add	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007180:	78fb      	ldrb	r3, [r7, #3]
 8007182:	f003 0307 	and.w	r3, r3, #7
 8007186:	b2da      	uxtb	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007192:	2b01      	cmp	r3, #1
 8007194:	d101      	bne.n	800719a <HAL_PCD_EP_Close+0x6a>
 8007196:	2302      	movs	r3, #2
 8007198:	e00e      	b.n	80071b8 <HAL_PCD_EP_Close+0x88>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68f9      	ldr	r1, [r7, #12]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f005 f999 	bl	800c4e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	607a      	str	r2, [r7, #4]
 80071ca:	603b      	str	r3, [r7, #0]
 80071cc:	460b      	mov	r3, r1
 80071ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071d0:	7afb      	ldrb	r3, [r7, #11]
 80071d2:	f003 0207 	and.w	r2, r3, #7
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	00db      	lsls	r3, r3, #3
 80071de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4413      	add	r3, r2
 80071e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	2200      	movs	r2, #0
 80071f8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2200      	movs	r2, #0
 80071fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007200:	7afb      	ldrb	r3, [r7, #11]
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	b2da      	uxtb	r2, r3
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6979      	ldr	r1, [r7, #20]
 8007212:	4618      	mov	r0, r3
 8007214:	f005 fb51 	bl	800c8ba <USB_EPStartXfer>

  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007222:	b480      	push	{r7}
 8007224:	b083      	sub	sp, #12
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	460b      	mov	r3, r1
 800722c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800722e:	78fb      	ldrb	r3, [r7, #3]
 8007230:	f003 0207 	and.w	r2, r3, #7
 8007234:	6879      	ldr	r1, [r7, #4]
 8007236:	4613      	mov	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4413      	add	r3, r2
 800723c:	00db      	lsls	r3, r3, #3
 800723e:	440b      	add	r3, r1
 8007240:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8007244:	681b      	ldr	r3, [r3, #0]
}
 8007246:	4618      	mov	r0, r3
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b086      	sub	sp, #24
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	607a      	str	r2, [r7, #4]
 800725c:	603b      	str	r3, [r7, #0]
 800725e:	460b      	mov	r3, r1
 8007260:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007262:	7afb      	ldrb	r3, [r7, #11]
 8007264:	f003 0207 	and.w	r2, r3, #7
 8007268:	4613      	mov	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	00db      	lsls	r3, r3, #3
 8007270:	3310      	adds	r3, #16
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	4413      	add	r3, r2
 8007276:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2200      	movs	r2, #0
 8007296:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2201      	movs	r2, #1
 800729c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800729e:	7afb      	ldrb	r3, [r7, #11]
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	b2da      	uxtb	r2, r3
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6979      	ldr	r1, [r7, #20]
 80072b0:	4618      	mov	r0, r3
 80072b2:	f005 fb02 	bl	800c8ba <USB_EPStartXfer>

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3718      	adds	r7, #24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	460b      	mov	r3, r1
 80072ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80072cc:	78fb      	ldrb	r3, [r7, #3]
 80072ce:	f003 0307 	and.w	r3, r3, #7
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	7912      	ldrb	r2, [r2, #4]
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d901      	bls.n	80072de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e03e      	b.n	800735c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80072de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	da0e      	bge.n	8007304 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072e6:	78fb      	ldrb	r3, [r7, #3]
 80072e8:	f003 0207 	and.w	r2, r3, #7
 80072ec:	4613      	mov	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	3310      	adds	r3, #16
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	4413      	add	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2201      	movs	r2, #1
 8007300:	705a      	strb	r2, [r3, #1]
 8007302:	e00c      	b.n	800731e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007304:	78fa      	ldrb	r2, [r7, #3]
 8007306:	4613      	mov	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	00db      	lsls	r3, r3, #3
 800730e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	4413      	add	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2201      	movs	r2, #1
 8007322:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007324:	78fb      	ldrb	r3, [r7, #3]
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	b2da      	uxtb	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007336:	2b01      	cmp	r3, #1
 8007338:	d101      	bne.n	800733e <HAL_PCD_EP_SetStall+0x7e>
 800733a:	2302      	movs	r3, #2
 800733c:	e00e      	b.n	800735c <HAL_PCD_EP_SetStall+0x9c>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68f9      	ldr	r1, [r7, #12]
 800734c:	4618      	mov	r0, r3
 800734e:	f006 fe66 	bl	800e01e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	460b      	mov	r3, r1
 800736e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007370:	78fb      	ldrb	r3, [r7, #3]
 8007372:	f003 030f 	and.w	r3, r3, #15
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	7912      	ldrb	r2, [r2, #4]
 800737a:	4293      	cmp	r3, r2
 800737c:	d901      	bls.n	8007382 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e040      	b.n	8007404 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007382:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007386:	2b00      	cmp	r3, #0
 8007388:	da0e      	bge.n	80073a8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800738a:	78fb      	ldrb	r3, [r7, #3]
 800738c:	f003 0207 	and.w	r2, r3, #7
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	3310      	adds	r3, #16
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	4413      	add	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2201      	movs	r2, #1
 80073a4:	705a      	strb	r2, [r3, #1]
 80073a6:	e00e      	b.n	80073c6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80073a8:	78fb      	ldrb	r3, [r7, #3]
 80073aa:	f003 0207 	and.w	r2, r3, #7
 80073ae:	4613      	mov	r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4413      	add	r3, r2
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	4413      	add	r3, r2
 80073be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073cc:	78fb      	ldrb	r3, [r7, #3]
 80073ce:	f003 0307 	and.w	r3, r3, #7
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d101      	bne.n	80073e6 <HAL_PCD_EP_ClrStall+0x82>
 80073e2:	2302      	movs	r3, #2
 80073e4:	e00e      	b.n	8007404 <HAL_PCD_EP_ClrStall+0xa0>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68f9      	ldr	r1, [r7, #12]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f006 fe63 	bl	800e0c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b096      	sub	sp, #88	@ 0x58
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007414:	e3ad      	b.n	8007b72 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800741e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007422:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007426:	b2db      	uxtb	r3, r3
 8007428:	f003 030f 	and.w	r3, r3, #15
 800742c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8007430:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007434:	2b00      	cmp	r3, #0
 8007436:	f040 816f 	bne.w	8007718 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800743a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800743e:	f003 0310 	and.w	r3, r3, #16
 8007442:	2b00      	cmp	r3, #0
 8007444:	d14c      	bne.n	80074e0 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	881b      	ldrh	r3, [r3, #0]
 800744c:	b29b      	uxth	r3, r3
 800744e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007456:	81fb      	strh	r3, [r7, #14]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	89fb      	ldrh	r3, [r7, #14]
 800745e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007466:	b29b      	uxth	r3, r3
 8007468:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	3310      	adds	r3, #16
 800746e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007478:	b29b      	uxth	r3, r3
 800747a:	461a      	mov	r2, r3
 800747c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	00db      	lsls	r3, r3, #3
 8007482:	4413      	add	r3, r2
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	6812      	ldr	r2, [r2, #0]
 8007488:	4413      	add	r3, r2
 800748a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007496:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800749a:	695a      	ldr	r2, [r3, #20]
 800749c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800749e:	69db      	ldr	r3, [r3, #28]
 80074a0:	441a      	add	r2, r3
 80074a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074a4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80074a6:	2100      	movs	r1, #0
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f008 fe48 	bl	801013e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	7b1b      	ldrb	r3, [r3, #12]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 835c 	beq.w	8007b72 <PCD_EP_ISR_Handler+0x766>
 80074ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f040 8357 	bne.w	8007b72 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	7b1b      	ldrb	r3, [r3, #12]
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	731a      	strb	r2, [r3, #12]
 80074de:	e348      	b.n	8007b72 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074e6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80074f2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80074f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d032      	beq.n	8007564 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007506:	b29b      	uxth	r3, r3
 8007508:	461a      	mov	r2, r3
 800750a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	00db      	lsls	r3, r3, #3
 8007510:	4413      	add	r3, r2
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	6812      	ldr	r2, [r2, #0]
 8007516:	4413      	add	r3, r2
 8007518:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007524:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6818      	ldr	r0, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8007530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007532:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007536:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007538:	b29b      	uxth	r3, r3
 800753a:	f006 feec 	bl	800e316 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	b29a      	uxth	r2, r3
 8007546:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800754a:	4013      	ands	r3, r2
 800754c:	823b      	strh	r3, [r7, #16]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	8a3a      	ldrh	r2, [r7, #16]
 8007554:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007558:	b292      	uxth	r2, r2
 800755a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f008 fdc1 	bl	80100e4 <HAL_PCD_SetupStageCallback>
 8007562:	e306      	b.n	8007b72 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007564:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007568:	2b00      	cmp	r3, #0
 800756a:	f280 8302 	bge.w	8007b72 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	b29a      	uxth	r2, r3
 8007576:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800757a:	4013      	ands	r3, r2
 800757c:	83fb      	strh	r3, [r7, #30]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	8bfa      	ldrh	r2, [r7, #30]
 8007584:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007588:	b292      	uxth	r2, r2
 800758a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007594:	b29b      	uxth	r3, r3
 8007596:	461a      	mov	r2, r3
 8007598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	00db      	lsls	r3, r3, #3
 800759e:	4413      	add	r3, r2
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	6812      	ldr	r2, [r2, #0]
 80075a4:	4413      	add	r3, r2
 80075a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80075b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075b2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80075b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d019      	beq.n	80075f0 <PCD_EP_ISR_Handler+0x1e4>
 80075bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075be:	695b      	ldr	r3, [r3, #20]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d015      	beq.n	80075f0 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6818      	ldr	r0, [r3, #0]
 80075c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075ca:	6959      	ldr	r1, [r3, #20]
 80075cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075ce:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80075d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075d2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	f006 fe9e 	bl	800e316 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80075da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075dc:	695a      	ldr	r2, [r3, #20]
 80075de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	441a      	add	r2, r3
 80075e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075e6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80075e8:	2100      	movs	r1, #0
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f008 fd8c 	bl	8010108 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	881b      	ldrh	r3, [r3, #0]
 80075f6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80075fa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80075fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007602:	2b00      	cmp	r3, #0
 8007604:	f040 82b5 	bne.w	8007b72 <PCD_EP_ISR_Handler+0x766>
 8007608:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800760c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007610:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007614:	f000 82ad 	beq.w	8007b72 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	61bb      	str	r3, [r7, #24]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007626:	b29b      	uxth	r3, r3
 8007628:	461a      	mov	r2, r3
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	4413      	add	r3, r2
 800762e:	61bb      	str	r3, [r7, #24]
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007636:	617b      	str	r3, [r7, #20]
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	b29b      	uxth	r3, r3
 800763e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007642:	b29a      	uxth	r2, r3
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	801a      	strh	r2, [r3, #0]
 8007648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10a      	bne.n	8007666 <PCD_EP_ISR_Handler+0x25a>
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b29b      	uxth	r3, r3
 8007656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800765a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800765e:	b29a      	uxth	r2, r3
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	801a      	strh	r2, [r3, #0]
 8007664:	e039      	b.n	80076da <PCD_EP_ISR_Handler+0x2ce>
 8007666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	2b3e      	cmp	r3, #62	@ 0x3e
 800766c:	d818      	bhi.n	80076a0 <PCD_EP_ISR_Handler+0x294>
 800766e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	085b      	lsrs	r3, r3, #1
 8007674:	647b      	str	r3, [r7, #68]	@ 0x44
 8007676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	d002      	beq.n	8007688 <PCD_EP_ISR_Handler+0x27c>
 8007682:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007684:	3301      	adds	r3, #1
 8007686:	647b      	str	r3, [r7, #68]	@ 0x44
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	b29a      	uxth	r2, r3
 800768e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007690:	b29b      	uxth	r3, r3
 8007692:	029b      	lsls	r3, r3, #10
 8007694:	b29b      	uxth	r3, r3
 8007696:	4313      	orrs	r3, r2
 8007698:	b29a      	uxth	r2, r3
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	e01c      	b.n	80076da <PCD_EP_ISR_Handler+0x2ce>
 80076a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	095b      	lsrs	r3, r3, #5
 80076a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80076a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	f003 031f 	and.w	r3, r3, #31
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d102      	bne.n	80076ba <PCD_EP_ISR_Handler+0x2ae>
 80076b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076b6:	3b01      	subs	r3, #1
 80076b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	881b      	ldrh	r3, [r3, #0]
 80076be:	b29a      	uxth	r2, r3
 80076c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	029b      	lsls	r3, r3, #10
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	4313      	orrs	r3, r2
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ea:	827b      	strh	r3, [r7, #18]
 80076ec:	8a7b      	ldrh	r3, [r7, #18]
 80076ee:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80076f2:	827b      	strh	r3, [r7, #18]
 80076f4:	8a7b      	ldrh	r3, [r7, #18]
 80076f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80076fa:	827b      	strh	r3, [r7, #18]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	8a7b      	ldrh	r3, [r7, #18]
 8007702:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007706:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800770a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800770e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007712:	b29b      	uxth	r3, r3
 8007714:	8013      	strh	r3, [r2, #0]
 8007716:	e22c      	b.n	8007b72 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	461a      	mov	r2, r3
 800771e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800772c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007730:	2b00      	cmp	r3, #0
 8007732:	f280 80f6 	bge.w	8007922 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	461a      	mov	r2, r3
 800773c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	b29a      	uxth	r2, r3
 8007748:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800774c:	4013      	ands	r3, r2
 800774e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	461a      	mov	r2, r3
 8007758:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8007764:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007768:	b292      	uxth	r2, r2
 800776a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800776c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007770:	4613      	mov	r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	4413      	add	r3, r2
 8007780:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007784:	7b1b      	ldrb	r3, [r3, #12]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d123      	bne.n	80077d2 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007792:	b29b      	uxth	r3, r3
 8007794:	461a      	mov	r2, r3
 8007796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	00db      	lsls	r3, r3, #3
 800779c:	4413      	add	r3, r2
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	6812      	ldr	r2, [r2, #0]
 80077a2:	4413      	add	r3, r2
 80077a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077ae:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80077b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f000 808e 	beq.w	80078d8 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6818      	ldr	r0, [r3, #0]
 80077c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077c2:	6959      	ldr	r1, [r3, #20]
 80077c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077c6:	88da      	ldrh	r2, [r3, #6]
 80077c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80077cc:	f006 fda3 	bl	800e316 <USB_ReadPMA>
 80077d0:	e082      	b.n	80078d8 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80077d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077d4:	78db      	ldrb	r3, [r3, #3]
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d10a      	bne.n	80077f0 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80077da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80077de:	461a      	mov	r2, r3
 80077e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f9d3 	bl	8007b8e <HAL_PCD_EP_DB_Receive>
 80077e8:	4603      	mov	r3, r0
 80077ea:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80077ee:	e073      	b.n	80078d8 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	461a      	mov	r2, r3
 80077f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	b29b      	uxth	r3, r3
 8007802:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800780a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	441a      	add	r2, r3
 800781c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8007820:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007824:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007828:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800782c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007830:	b29b      	uxth	r3, r3
 8007832:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	b29b      	uxth	r3, r3
 8007846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d022      	beq.n	8007894 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007856:	b29b      	uxth	r3, r3
 8007858:	461a      	mov	r2, r3
 800785a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	00db      	lsls	r3, r3, #3
 8007860:	4413      	add	r3, r2
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	6812      	ldr	r2, [r2, #0]
 8007866:	4413      	add	r3, r2
 8007868:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007872:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8007876:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800787a:	2b00      	cmp	r3, #0
 800787c:	d02c      	beq.n	80078d8 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6818      	ldr	r0, [r3, #0]
 8007882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007884:	6959      	ldr	r1, [r3, #20]
 8007886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007888:	891a      	ldrh	r2, [r3, #8]
 800788a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800788e:	f006 fd42 	bl	800e316 <USB_ReadPMA>
 8007892:	e021      	b.n	80078d8 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800789c:	b29b      	uxth	r3, r3
 800789e:	461a      	mov	r2, r3
 80078a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	00db      	lsls	r3, r3, #3
 80078a6:	4413      	add	r3, r2
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	6812      	ldr	r2, [r2, #0]
 80078ac:	4413      	add	r3, r2
 80078ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078b8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80078bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d009      	beq.n	80078d8 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6818      	ldr	r0, [r3, #0]
 80078c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078ca:	6959      	ldr	r1, [r3, #20]
 80078cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078ce:	895a      	ldrh	r2, [r3, #10]
 80078d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80078d4:	f006 fd1f 	bl	800e316 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80078d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078da:	69da      	ldr	r2, [r3, #28]
 80078dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80078e0:	441a      	add	r2, r3
 80078e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80078e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078e8:	695a      	ldr	r2, [r3, #20]
 80078ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80078ee:	441a      	add	r2, r3
 80078f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078f2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80078f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d005      	beq.n	8007908 <PCD_EP_ISR_Handler+0x4fc>
 80078fc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8007900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	429a      	cmp	r2, r3
 8007906:	d206      	bcs.n	8007916 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f008 fbfa 	bl	8010108 <HAL_PCD_DataOutStageCallback>
 8007914:	e005      	b.n	8007922 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800791c:	4618      	mov	r0, r3
 800791e:	f004 ffcc 	bl	800c8ba <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007922:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 8121 	beq.w	8007b72 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8007930:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007934:	4613      	mov	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	00db      	lsls	r3, r3, #3
 800793c:	3310      	adds	r3, #16
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	4413      	add	r3, r2
 8007942:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	461a      	mov	r2, r3
 800794a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	b29b      	uxth	r3, r3
 8007956:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800795a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800795e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	441a      	add	r2, r3
 8007970:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800797c:	b29b      	uxth	r3, r3
 800797e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007982:	78db      	ldrb	r3, [r3, #3]
 8007984:	2b01      	cmp	r3, #1
 8007986:	f040 80a2 	bne.w	8007ace <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 800798a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800798c:	2200      	movs	r2, #0
 800798e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007992:	7b1b      	ldrb	r3, [r3, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 8093 	beq.w	8007ac0 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800799a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800799e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d046      	beq.n	8007a34 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80079a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079a8:	785b      	ldrb	r3, [r3, #1]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d126      	bne.n	80079fc <PCD_EP_ISR_Handler+0x5f0>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079bc:	b29b      	uxth	r3, r3
 80079be:	461a      	mov	r2, r3
 80079c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c2:	4413      	add	r3, r2
 80079c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80079c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	00da      	lsls	r2, r3, #3
 80079cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ce:	4413      	add	r3, r2
 80079d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079d4:	623b      	str	r3, [r7, #32]
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	801a      	strh	r2, [r3, #0]
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	801a      	strh	r2, [r3, #0]
 80079fa:	e061      	b.n	8007ac0 <PCD_EP_ISR_Handler+0x6b4>
 80079fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d15d      	bne.n	8007ac0 <PCD_EP_ISR_Handler+0x6b4>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	461a      	mov	r2, r3
 8007a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a18:	4413      	add	r3, r2
 8007a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	00da      	lsls	r2, r3, #3
 8007a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a24:	4413      	add	r3, r2
 8007a26:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2e:	2200      	movs	r2, #0
 8007a30:	801a      	strh	r2, [r3, #0]
 8007a32:	e045      	b.n	8007ac0 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a3c:	785b      	ldrb	r3, [r3, #1]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d126      	bne.n	8007a90 <PCD_EP_ISR_Handler+0x684>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	461a      	mov	r2, r3
 8007a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a56:	4413      	add	r3, r2
 8007a58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	00da      	lsls	r2, r3, #3
 8007a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a62:	4413      	add	r3, r2
 8007a64:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a68:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a78:	801a      	strh	r2, [r3, #0]
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7c:	881b      	ldrh	r3, [r3, #0]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8c:	801a      	strh	r2, [r3, #0]
 8007a8e:	e017      	b.n	8007ac0 <PCD_EP_ISR_Handler+0x6b4>
 8007a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a92:	785b      	ldrb	r3, [r3, #1]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d113      	bne.n	8007ac0 <PCD_EP_ISR_Handler+0x6b4>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aa6:	4413      	add	r3, r2
 8007aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	00da      	lsls	r2, r3, #3
 8007ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007abc:	2200      	movs	r2, #0
 8007abe:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f008 fb39 	bl	801013e <HAL_PCD_DataInStageCallback>
 8007acc:	e051      	b.n	8007b72 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007ace:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d144      	bne.n	8007b64 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	00db      	lsls	r3, r3, #3
 8007aec:	4413      	add	r3, r2
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	6812      	ldr	r2, [r2, #0]
 8007af2:	4413      	add	r3, r2
 8007af4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007af8:	881b      	ldrh	r3, [r3, #0]
 8007afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007afe:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8007b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b04:	699a      	ldr	r2, [r3, #24]
 8007b06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d907      	bls.n	8007b1e <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8007b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b10:	699a      	ldr	r2, [r3, #24]
 8007b12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007b16:	1ad2      	subs	r2, r2, r3
 8007b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b1a:	619a      	str	r2, [r3, #24]
 8007b1c:	e002      	b.n	8007b24 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8007b1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b20:	2200      	movs	r2, #0
 8007b22:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d106      	bne.n	8007b3a <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	4619      	mov	r1, r3
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f008 fb03 	bl	801013e <HAL_PCD_DataInStageCallback>
 8007b38:	e01b      	b.n	8007b72 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b3c:	695a      	ldr	r2, [r3, #20]
 8007b3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007b42:	441a      	add	r2, r3
 8007b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b46:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b4a:	69da      	ldr	r2, [r3, #28]
 8007b4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007b50:	441a      	add	r2, r3
 8007b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b54:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f004 feac 	bl	800c8ba <USB_EPStartXfer>
 8007b62:	e006      	b.n	8007b72 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007b64:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007b68:	461a      	mov	r2, r3
 8007b6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f917 	bl	8007da0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	b21b      	sxth	r3, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f6ff ac49 	blt.w	8007416 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3758      	adds	r7, #88	@ 0x58
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b088      	sub	sp, #32
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	60f8      	str	r0, [r7, #12]
 8007b96:	60b9      	str	r1, [r7, #8]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007b9c:	88fb      	ldrh	r3, [r7, #6]
 8007b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d07c      	beq.n	8007ca0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	00db      	lsls	r3, r3, #3
 8007bb8:	4413      	add	r3, r2
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	6812      	ldr	r2, [r2, #0]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	699a      	ldr	r2, [r3, #24]
 8007bd0:	8b7b      	ldrh	r3, [r7, #26]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d306      	bcc.n	8007be4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	699a      	ldr	r2, [r3, #24]
 8007bda:	8b7b      	ldrh	r3, [r7, #26]
 8007bdc:	1ad2      	subs	r2, r2, r3
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	619a      	str	r2, [r3, #24]
 8007be2:	e002      	b.n	8007bea <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2200      	movs	r2, #0
 8007be8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d123      	bne.n	8007c3a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c0c:	833b      	strh	r3, [r7, #24]
 8007c0e:	8b3b      	ldrh	r3, [r7, #24]
 8007c10:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c14:	833b      	strh	r3, [r7, #24]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	441a      	add	r2, r3
 8007c24:	8b3b      	ldrh	r3, [r7, #24]
 8007c26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007c3a:	88fb      	ldrh	r3, [r7, #6]
 8007c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d01f      	beq.n	8007c84 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c5e:	82fb      	strh	r3, [r7, #22]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	461a      	mov	r2, r3
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	441a      	add	r2, r3
 8007c6e:	8afb      	ldrh	r3, [r7, #22]
 8007c70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c7c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007c84:	8b7b      	ldrh	r3, [r7, #26]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 8085 	beq.w	8007d96 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6818      	ldr	r0, [r3, #0]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	6959      	ldr	r1, [r3, #20]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	891a      	ldrh	r2, [r3, #8]
 8007c98:	8b7b      	ldrh	r3, [r7, #26]
 8007c9a:	f006 fb3c 	bl	800e316 <USB_ReadPMA>
 8007c9e:	e07a      	b.n	8007d96 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	461a      	mov	r2, r3
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	00db      	lsls	r3, r3, #3
 8007cb2:	4413      	add	r3, r2
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	6812      	ldr	r2, [r2, #0]
 8007cb8:	4413      	add	r3, r2
 8007cba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cc4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	699a      	ldr	r2, [r3, #24]
 8007cca:	8b7b      	ldrh	r3, [r7, #26]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d306      	bcc.n	8007cde <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	699a      	ldr	r2, [r3, #24]
 8007cd4:	8b7b      	ldrh	r3, [r7, #26]
 8007cd6:	1ad2      	subs	r2, r2, r3
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	619a      	str	r2, [r3, #24]
 8007cdc:	e002      	b.n	8007ce4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d123      	bne.n	8007d34 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d06:	83fb      	strh	r3, [r7, #30]
 8007d08:	8bfb      	ldrh	r3, [r7, #30]
 8007d0a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007d0e:	83fb      	strh	r3, [r7, #30]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	461a      	mov	r2, r3
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	441a      	add	r2, r3
 8007d1e:	8bfb      	ldrh	r3, [r7, #30]
 8007d20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007d34:	88fb      	ldrh	r3, [r7, #6]
 8007d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d11f      	bne.n	8007d7e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	461a      	mov	r2, r3
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	4413      	add	r3, r2
 8007d4c:	881b      	ldrh	r3, [r3, #0]
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d58:	83bb      	strh	r3, [r7, #28]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	441a      	add	r2, r3
 8007d68:	8bbb      	ldrh	r3, [r7, #28]
 8007d6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007d7e:	8b7b      	ldrh	r3, [r7, #26]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d008      	beq.n	8007d96 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6818      	ldr	r0, [r3, #0]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	6959      	ldr	r1, [r3, #20]
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	895a      	ldrh	r2, [r3, #10]
 8007d90:	8b7b      	ldrh	r3, [r7, #26]
 8007d92:	f006 fac0 	bl	800e316 <USB_ReadPMA>
    }
  }

  return count;
 8007d96:	8b7b      	ldrh	r3, [r7, #26]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3720      	adds	r7, #32
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b0a4      	sub	sp, #144	@ 0x90
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	4613      	mov	r3, r2
 8007dac:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007dae:	88fb      	ldrh	r3, [r7, #6]
 8007db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 81db 	beq.w	8008170 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	00db      	lsls	r3, r3, #3
 8007dcc:	4413      	add	r3, r2
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	6812      	ldr	r2, [r2, #0]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dde:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	699a      	ldr	r2, [r3, #24]
 8007de6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d907      	bls.n	8007dfe <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	699a      	ldr	r2, [r3, #24]
 8007df2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007df6:	1ad2      	subs	r2, r2, r3
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	619a      	str	r2, [r3, #24]
 8007dfc:	e002      	b.n	8007e04 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2200      	movs	r2, #0
 8007e02:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f040 80b9 	bne.w	8007f80 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	785b      	ldrb	r3, [r3, #1]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d126      	bne.n	8007e64 <HAL_PCD_EP_DB_Transmit+0xc4>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	461a      	mov	r2, r3
 8007e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e2a:	4413      	add	r3, r2
 8007e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	00da      	lsls	r2, r3, #3
 8007e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e36:	4413      	add	r3, r2
 8007e38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4c:	801a      	strh	r2, [r3, #0]
 8007e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e60:	801a      	strh	r2, [r3, #0]
 8007e62:	e01a      	b.n	8007e9a <HAL_PCD_EP_DB_Transmit+0xfa>
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	785b      	ldrb	r3, [r3, #1]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d116      	bne.n	8007e9a <HAL_PCD_EP_DB_Transmit+0xfa>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e80:	4413      	add	r3, r2
 8007e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	00da      	lsls	r2, r3, #3
 8007e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e92:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e96:	2200      	movs	r2, #0
 8007e98:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	785b      	ldrb	r3, [r3, #1]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d126      	bne.n	8007ef6 <HAL_PCD_EP_DB_Transmit+0x156>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	61fb      	str	r3, [r7, #28]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	461a      	mov	r2, r3
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	61fb      	str	r3, [r7, #28]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	00da      	lsls	r2, r3, #3
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ece:	61bb      	str	r3, [r7, #24]
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	801a      	strh	r2, [r3, #0]
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	881b      	ldrh	r3, [r3, #0]
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	801a      	strh	r2, [r3, #0]
 8007ef4:	e017      	b.n	8007f26 <HAL_PCD_EP_DB_Transmit+0x186>
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	785b      	ldrb	r3, [r3, #1]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d113      	bne.n	8007f26 <HAL_PCD_EP_DB_Transmit+0x186>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	461a      	mov	r2, r3
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0c:	4413      	add	r3, r2
 8007f0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	00da      	lsls	r2, r3, #3
 8007f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f18:	4413      	add	r3, r2
 8007f1a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f1e:	623b      	str	r3, [r7, #32]
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	2200      	movs	r2, #0
 8007f24:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f008 f906 	bl	801013e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007f32:	88fb      	ldrh	r3, [r7, #6]
 8007f34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 82fa 	beq.w	8008532 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	461a      	mov	r2, r3
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f58:	82fb      	strh	r3, [r7, #22]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	441a      	add	r2, r3
 8007f68:	8afb      	ldrh	r3, [r7, #22]
 8007f6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	8013      	strh	r3, [r2, #0]
 8007f7e:	e2d8      	b.n	8008532 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007f80:	88fb      	ldrh	r3, [r7, #6]
 8007f82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d021      	beq.n	8007fce <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fa4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	461a      	mov	r2, r3
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	441a      	add	r2, r3
 8007fb6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007fba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	f040 82ac 	bne.w	8008532 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	695a      	ldr	r2, [r3, #20]
 8007fde:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007fe2:	441a      	add	r2, r3
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	69da      	ldr	r2, [r3, #28]
 8007fec:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007ff0:	441a      	add	r2, r3
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	6a1a      	ldr	r2, [r3, #32]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d30b      	bcc.n	800801a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	6a1a      	ldr	r2, [r3, #32]
 800800e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008012:	1ad2      	subs	r2, r2, r3
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	621a      	str	r2, [r3, #32]
 8008018:	e017      	b.n	800804a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d108      	bne.n	8008034 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8008022:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008026:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8008032:	e00a      	b.n	800804a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	6a1b      	ldr	r3, [r3, #32]
 8008040:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	2200      	movs	r2, #0
 8008048:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	785b      	ldrb	r3, [r3, #1]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d165      	bne.n	800811e <HAL_PCD_EP_DB_Transmit+0x37e>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008060:	b29b      	uxth	r3, r3
 8008062:	461a      	mov	r2, r3
 8008064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008066:	4413      	add	r3, r2
 8008068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	00da      	lsls	r2, r3, #3
 8008070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008072:	4413      	add	r3, r2
 8008074:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008078:	63bb      	str	r3, [r7, #56]	@ 0x38
 800807a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	b29b      	uxth	r3, r3
 8008080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008084:	b29a      	uxth	r2, r3
 8008086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008088:	801a      	strh	r2, [r3, #0]
 800808a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10a      	bne.n	80080a8 <HAL_PCD_EP_DB_Transmit+0x308>
 8008092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008094:	881b      	ldrh	r3, [r3, #0]
 8008096:	b29b      	uxth	r3, r3
 8008098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800809c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a4:	801a      	strh	r2, [r3, #0]
 80080a6:	e057      	b.n	8008158 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80080a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80080ae:	d818      	bhi.n	80080e2 <HAL_PCD_EP_DB_Transmit+0x342>
 80080b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080b4:	085b      	lsrs	r3, r3, #1
 80080b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d002      	beq.n	80080ca <HAL_PCD_EP_DB_Transmit+0x32a>
 80080c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080c6:	3301      	adds	r3, #1
 80080c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080cc:	881b      	ldrh	r3, [r3, #0]
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	029b      	lsls	r3, r3, #10
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	4313      	orrs	r3, r2
 80080da:	b29a      	uxth	r2, r3
 80080dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080de:	801a      	strh	r2, [r3, #0]
 80080e0:	e03a      	b.n	8008158 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80080e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080e6:	095b      	lsrs	r3, r3, #5
 80080e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080ee:	f003 031f 	and.w	r3, r3, #31
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d102      	bne.n	80080fc <HAL_PCD_EP_DB_Transmit+0x35c>
 80080f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080f8:	3b01      	subs	r3, #1
 80080fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	b29a      	uxth	r2, r3
 8008102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008104:	b29b      	uxth	r3, r3
 8008106:	029b      	lsls	r3, r3, #10
 8008108:	b29b      	uxth	r3, r3
 800810a:	4313      	orrs	r3, r2
 800810c:	b29b      	uxth	r3, r3
 800810e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008116:	b29a      	uxth	r2, r3
 8008118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811a:	801a      	strh	r2, [r3, #0]
 800811c:	e01c      	b.n	8008158 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	785b      	ldrb	r3, [r3, #1]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d118      	bne.n	8008158 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	647b      	str	r3, [r7, #68]	@ 0x44
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008134:	b29b      	uxth	r3, r3
 8008136:	461a      	mov	r2, r3
 8008138:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800813a:	4413      	add	r3, r2
 800813c:	647b      	str	r3, [r7, #68]	@ 0x44
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	00da      	lsls	r2, r3, #3
 8008144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008146:	4413      	add	r3, r2
 8008148:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800814c:	643b      	str	r3, [r7, #64]	@ 0x40
 800814e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008152:	b29a      	uxth	r2, r3
 8008154:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008156:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6818      	ldr	r0, [r3, #0]
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	6959      	ldr	r1, [r3, #20]
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	891a      	ldrh	r2, [r3, #8]
 8008164:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008168:	b29b      	uxth	r3, r3
 800816a:	f006 f892 	bl	800e292 <USB_WritePMA>
 800816e:	e1e0      	b.n	8008532 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008178:	b29b      	uxth	r3, r3
 800817a:	461a      	mov	r2, r3
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	00db      	lsls	r3, r3, #3
 8008182:	4413      	add	r3, r2
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	6812      	ldr	r2, [r2, #0]
 8008188:	4413      	add	r3, r2
 800818a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008194:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	699a      	ldr	r2, [r3, #24]
 800819c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d307      	bcc.n	80081b4 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	699a      	ldr	r2, [r3, #24]
 80081a8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80081ac:	1ad2      	subs	r2, r2, r3
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	619a      	str	r2, [r3, #24]
 80081b2:	e002      	b.n	80081ba <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2200      	movs	r2, #0
 80081b8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f040 80c0 	bne.w	8008344 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	785b      	ldrb	r3, [r3, #1]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d126      	bne.n	800821a <HAL_PCD_EP_DB_Transmit+0x47a>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081da:	b29b      	uxth	r3, r3
 80081dc:	461a      	mov	r2, r3
 80081de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081e0:	4413      	add	r3, r2
 80081e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	00da      	lsls	r2, r3, #3
 80081ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081ec:	4413      	add	r3, r2
 80081ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80081f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80081f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081fe:	b29a      	uxth	r2, r3
 8008200:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008202:	801a      	strh	r2, [r3, #0]
 8008204:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008206:	881b      	ldrh	r3, [r3, #0]
 8008208:	b29b      	uxth	r3, r3
 800820a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800820e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008212:	b29a      	uxth	r2, r3
 8008214:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008216:	801a      	strh	r2, [r3, #0]
 8008218:	e01a      	b.n	8008250 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	785b      	ldrb	r3, [r3, #1]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d116      	bne.n	8008250 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	667b      	str	r3, [r7, #100]	@ 0x64
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008230:	b29b      	uxth	r3, r3
 8008232:	461a      	mov	r2, r3
 8008234:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008236:	4413      	add	r3, r2
 8008238:	667b      	str	r3, [r7, #100]	@ 0x64
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	00da      	lsls	r2, r3, #3
 8008240:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008242:	4413      	add	r3, r2
 8008244:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008248:	663b      	str	r3, [r7, #96]	@ 0x60
 800824a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800824c:	2200      	movs	r2, #0
 800824e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	677b      	str	r3, [r7, #116]	@ 0x74
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	785b      	ldrb	r3, [r3, #1]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d12b      	bne.n	80082b6 <HAL_PCD_EP_DB_Transmit+0x516>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800826c:	b29b      	uxth	r3, r3
 800826e:	461a      	mov	r2, r3
 8008270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008272:	4413      	add	r3, r2
 8008274:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	00da      	lsls	r2, r3, #3
 800827c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800827e:	4413      	add	r3, r2
 8008280:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008284:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008288:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008294:	b29a      	uxth	r2, r3
 8008296:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800829a:	801a      	strh	r2, [r3, #0]
 800829c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082b2:	801a      	strh	r2, [r3, #0]
 80082b4:	e017      	b.n	80082e6 <HAL_PCD_EP_DB_Transmit+0x546>
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	785b      	ldrb	r3, [r3, #1]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d113      	bne.n	80082e6 <HAL_PCD_EP_DB_Transmit+0x546>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	461a      	mov	r2, r3
 80082ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082cc:	4413      	add	r3, r2
 80082ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	00da      	lsls	r2, r3, #3
 80082d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082d8:	4413      	add	r3, r2
 80082da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80082de:	673b      	str	r3, [r7, #112]	@ 0x70
 80082e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082e2:	2200      	movs	r2, #0
 80082e4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	4619      	mov	r1, r3
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f007 ff26 	bl	801013e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80082f2:	88fb      	ldrh	r3, [r7, #6]
 80082f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f040 811a 	bne.w	8008532 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	461a      	mov	r2, r3
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	b29b      	uxth	r3, r3
 8008310:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008314:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008318:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	461a      	mov	r2, r3
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	441a      	add	r2, r3
 800832a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800832e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008332:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008336:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800833a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800833e:	b29b      	uxth	r3, r3
 8008340:	8013      	strh	r3, [r2, #0]
 8008342:	e0f6      	b.n	8008532 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008344:	88fb      	ldrh	r3, [r7, #6]
 8008346:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800834a:	2b00      	cmp	r3, #0
 800834c:	d121      	bne.n	8008392 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4413      	add	r3, r2
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	b29b      	uxth	r3, r3
 8008360:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008364:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008368:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	461a      	mov	r2, r3
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	441a      	add	r2, r3
 800837a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800837e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008382:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008386:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800838a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800838e:	b29b      	uxth	r3, r3
 8008390:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008398:	2b01      	cmp	r3, #1
 800839a:	f040 80ca 	bne.w	8008532 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	695a      	ldr	r2, [r3, #20]
 80083a2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80083a6:	441a      	add	r2, r3
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	69da      	ldr	r2, [r3, #28]
 80083b0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80083b4:	441a      	add	r2, r3
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	6a1a      	ldr	r2, [r3, #32]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d30b      	bcc.n	80083de <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	6a1a      	ldr	r2, [r3, #32]
 80083d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083d6:	1ad2      	subs	r2, r2, r3
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	621a      	str	r2, [r3, #32]
 80083dc:	e017      	b.n	800840e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d108      	bne.n	80083f8 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80083e6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80083ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80083f6:	e00a      	b.n	800840e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	6a1b      	ldr	r3, [r3, #32]
 80083fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	2200      	movs	r2, #0
 8008404:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	657b      	str	r3, [r7, #84]	@ 0x54
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	785b      	ldrb	r3, [r3, #1]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d165      	bne.n	80084e8 <HAL_PCD_EP_DB_Transmit+0x748>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800842a:	b29b      	uxth	r3, r3
 800842c:	461a      	mov	r2, r3
 800842e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008430:	4413      	add	r3, r2
 8008432:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	00da      	lsls	r2, r3, #3
 800843a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800843c:	4413      	add	r3, r2
 800843e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008442:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008444:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008446:	881b      	ldrh	r3, [r3, #0]
 8008448:	b29b      	uxth	r3, r3
 800844a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800844e:	b29a      	uxth	r2, r3
 8008450:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008452:	801a      	strh	r2, [r3, #0]
 8008454:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10a      	bne.n	8008472 <HAL_PCD_EP_DB_Transmit+0x6d2>
 800845c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	b29b      	uxth	r3, r3
 8008462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800846a:	b29a      	uxth	r2, r3
 800846c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800846e:	801a      	strh	r2, [r3, #0]
 8008470:	e054      	b.n	800851c <HAL_PCD_EP_DB_Transmit+0x77c>
 8008472:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008476:	2b3e      	cmp	r3, #62	@ 0x3e
 8008478:	d818      	bhi.n	80084ac <HAL_PCD_EP_DB_Transmit+0x70c>
 800847a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800847e:	085b      	lsrs	r3, r3, #1
 8008480:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <HAL_PCD_EP_DB_Transmit+0x6f4>
 800848e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008490:	3301      	adds	r3, #1
 8008492:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008494:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	b29a      	uxth	r2, r3
 800849a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800849c:	b29b      	uxth	r3, r3
 800849e:	029b      	lsls	r3, r3, #10
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	4313      	orrs	r3, r2
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084a8:	801a      	strh	r2, [r3, #0]
 80084aa:	e037      	b.n	800851c <HAL_PCD_EP_DB_Transmit+0x77c>
 80084ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084b0:	095b      	lsrs	r3, r3, #5
 80084b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084b8:	f003 031f 	and.w	r3, r3, #31
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d102      	bne.n	80084c6 <HAL_PCD_EP_DB_Transmit+0x726>
 80084c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80084c2:	3b01      	subs	r3, #1
 80084c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084c8:	881b      	ldrh	r3, [r3, #0]
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	029b      	lsls	r3, r3, #10
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	4313      	orrs	r3, r2
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084e4:	801a      	strh	r2, [r3, #0]
 80084e6:	e019      	b.n	800851c <HAL_PCD_EP_DB_Transmit+0x77c>
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	785b      	ldrb	r3, [r3, #1]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d115      	bne.n	800851c <HAL_PCD_EP_DB_Transmit+0x77c>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	461a      	mov	r2, r3
 80084fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084fe:	4413      	add	r3, r2
 8008500:	657b      	str	r3, [r7, #84]	@ 0x54
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	00da      	lsls	r2, r3, #3
 8008508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800850a:	4413      	add	r3, r2
 800850c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008510:	653b      	str	r3, [r7, #80]	@ 0x50
 8008512:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008516:	b29a      	uxth	r2, r3
 8008518:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800851a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6818      	ldr	r0, [r3, #0]
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	6959      	ldr	r1, [r3, #20]
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	895a      	ldrh	r2, [r3, #10]
 8008528:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800852c:	b29b      	uxth	r3, r3
 800852e:	f005 feb0 	bl	800e292 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	4413      	add	r3, r2
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	b29b      	uxth	r3, r3
 8008544:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008548:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800854c:	82bb      	strh	r3, [r7, #20]
 800854e:	8abb      	ldrh	r3, [r7, #20]
 8008550:	f083 0310 	eor.w	r3, r3, #16
 8008554:	82bb      	strh	r3, [r7, #20]
 8008556:	8abb      	ldrh	r3, [r7, #20]
 8008558:	f083 0320 	eor.w	r3, r3, #32
 800855c:	82bb      	strh	r3, [r7, #20]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	461a      	mov	r2, r3
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	441a      	add	r2, r3
 800856c:	8abb      	ldrh	r3, [r7, #20]
 800856e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008572:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800857a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800857e:	b29b      	uxth	r3, r3
 8008580:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3790      	adds	r7, #144	@ 0x90
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800858c:	b480      	push	{r7}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	607b      	str	r3, [r7, #4]
 8008596:	460b      	mov	r3, r1
 8008598:	817b      	strh	r3, [r7, #10]
 800859a:	4613      	mov	r3, r2
 800859c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800859e:	897b      	ldrh	r3, [r7, #10]
 80085a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00b      	beq.n	80085c2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80085aa:	897b      	ldrh	r3, [r7, #10]
 80085ac:	f003 0207 	and.w	r2, r3, #7
 80085b0:	4613      	mov	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	00db      	lsls	r3, r3, #3
 80085b8:	3310      	adds	r3, #16
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	4413      	add	r3, r2
 80085be:	617b      	str	r3, [r7, #20]
 80085c0:	e009      	b.n	80085d6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80085c2:	897a      	ldrh	r2, [r7, #10]
 80085c4:	4613      	mov	r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	00db      	lsls	r3, r3, #3
 80085cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	4413      	add	r3, r2
 80085d4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80085d6:	893b      	ldrh	r3, [r7, #8]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d107      	bne.n	80085ec <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	2200      	movs	r2, #0
 80085e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	80da      	strh	r2, [r3, #6]
 80085ea:	e00b      	b.n	8008604 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	2201      	movs	r2, #1
 80085f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	0c1b      	lsrs	r3, r3, #16
 80085fe:	b29a      	uxth	r2, r3
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	371c      	adds	r7, #28
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008612:	b480      	push	{r7}
 8008614:	b085      	sub	sp, #20
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008636:	b29b      	uxth	r3, r3
 8008638:	f043 0301 	orr.w	r3, r3, #1
 800863c:	b29a      	uxth	r2, r3
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800864a:	b29b      	uxth	r3, r3
 800864c:	f043 0302 	orr.w	r3, r3, #2
 8008650:	b29a      	uxth	r2, r3
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
	...

08008668 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d141      	bne.n	80086fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008676:	4b4b      	ldr	r3, [pc, #300]	@ (80087a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800867e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008682:	d131      	bne.n	80086e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008684:	4b47      	ldr	r3, [pc, #284]	@ (80087a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800868a:	4a46      	ldr	r2, [pc, #280]	@ (80087a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800868c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008690:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008694:	4b43      	ldr	r3, [pc, #268]	@ (80087a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800869c:	4a41      	ldr	r2, [pc, #260]	@ (80087a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800869e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80086a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80086a4:	4b40      	ldr	r3, [pc, #256]	@ (80087a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2232      	movs	r2, #50	@ 0x32
 80086aa:	fb02 f303 	mul.w	r3, r2, r3
 80086ae:	4a3f      	ldr	r2, [pc, #252]	@ (80087ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80086b0:	fba2 2303 	umull	r2, r3, r2, r3
 80086b4:	0c9b      	lsrs	r3, r3, #18
 80086b6:	3301      	adds	r3, #1
 80086b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80086ba:	e002      	b.n	80086c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3b01      	subs	r3, #1
 80086c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80086c2:	4b38      	ldr	r3, [pc, #224]	@ (80087a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086ce:	d102      	bne.n	80086d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1f2      	bne.n	80086bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80086d6:	4b33      	ldr	r3, [pc, #204]	@ (80087a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086d8:	695b      	ldr	r3, [r3, #20]
 80086da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086e2:	d158      	bne.n	8008796 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e057      	b.n	8008798 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80086e8:	4b2e      	ldr	r3, [pc, #184]	@ (80087a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ee:	4a2d      	ldr	r2, [pc, #180]	@ (80087a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80086f8:	e04d      	b.n	8008796 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008700:	d141      	bne.n	8008786 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008702:	4b28      	ldr	r3, [pc, #160]	@ (80087a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800870a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800870e:	d131      	bne.n	8008774 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008710:	4b24      	ldr	r3, [pc, #144]	@ (80087a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008716:	4a23      	ldr	r2, [pc, #140]	@ (80087a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800871c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008720:	4b20      	ldr	r3, [pc, #128]	@ (80087a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008728:	4a1e      	ldr	r2, [pc, #120]	@ (80087a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800872a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800872e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008730:	4b1d      	ldr	r3, [pc, #116]	@ (80087a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2232      	movs	r2, #50	@ 0x32
 8008736:	fb02 f303 	mul.w	r3, r2, r3
 800873a:	4a1c      	ldr	r2, [pc, #112]	@ (80087ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800873c:	fba2 2303 	umull	r2, r3, r2, r3
 8008740:	0c9b      	lsrs	r3, r3, #18
 8008742:	3301      	adds	r3, #1
 8008744:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008746:	e002      	b.n	800874e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	3b01      	subs	r3, #1
 800874c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800874e:	4b15      	ldr	r3, [pc, #84]	@ (80087a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800875a:	d102      	bne.n	8008762 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1f2      	bne.n	8008748 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008762:	4b10      	ldr	r3, [pc, #64]	@ (80087a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800876a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800876e:	d112      	bne.n	8008796 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e011      	b.n	8008798 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008774:	4b0b      	ldr	r3, [pc, #44]	@ (80087a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800877a:	4a0a      	ldr	r2, [pc, #40]	@ (80087a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800877c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008780:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008784:	e007      	b.n	8008796 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008786:	4b07      	ldr	r3, [pc, #28]	@ (80087a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800878e:	4a05      	ldr	r2, [pc, #20]	@ (80087a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008790:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008794:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3714      	adds	r7, #20
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr
 80087a4:	40007000 	.word	0x40007000
 80087a8:	2000001c 	.word	0x2000001c
 80087ac:	431bde83 	.word	0x431bde83

080087b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80087b0:	b480      	push	{r7}
 80087b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80087b4:	4b05      	ldr	r3, [pc, #20]	@ (80087cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	4a04      	ldr	r2, [pc, #16]	@ (80087cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80087ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80087be:	6093      	str	r3, [r2, #8]
}
 80087c0:	bf00      	nop
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	40007000 	.word	0x40007000

080087d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b088      	sub	sp, #32
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e2fe      	b.n	8008de0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d075      	beq.n	80088da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087ee:	4b97      	ldr	r3, [pc, #604]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f003 030c 	and.w	r3, r3, #12
 80087f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80087f8:	4b94      	ldr	r3, [pc, #592]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f003 0303 	and.w	r3, r3, #3
 8008800:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	2b0c      	cmp	r3, #12
 8008806:	d102      	bne.n	800880e <HAL_RCC_OscConfig+0x3e>
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	2b03      	cmp	r3, #3
 800880c:	d002      	beq.n	8008814 <HAL_RCC_OscConfig+0x44>
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	2b08      	cmp	r3, #8
 8008812:	d10b      	bne.n	800882c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008814:	4b8d      	ldr	r3, [pc, #564]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800881c:	2b00      	cmp	r3, #0
 800881e:	d05b      	beq.n	80088d8 <HAL_RCC_OscConfig+0x108>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d157      	bne.n	80088d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e2d9      	b.n	8008de0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008834:	d106      	bne.n	8008844 <HAL_RCC_OscConfig+0x74>
 8008836:	4b85      	ldr	r3, [pc, #532]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a84      	ldr	r2, [pc, #528]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 800883c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008840:	6013      	str	r3, [r2, #0]
 8008842:	e01d      	b.n	8008880 <HAL_RCC_OscConfig+0xb0>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800884c:	d10c      	bne.n	8008868 <HAL_RCC_OscConfig+0x98>
 800884e:	4b7f      	ldr	r3, [pc, #508]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a7e      	ldr	r2, [pc, #504]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 8008854:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008858:	6013      	str	r3, [r2, #0]
 800885a:	4b7c      	ldr	r3, [pc, #496]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a7b      	ldr	r2, [pc, #492]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 8008860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008864:	6013      	str	r3, [r2, #0]
 8008866:	e00b      	b.n	8008880 <HAL_RCC_OscConfig+0xb0>
 8008868:	4b78      	ldr	r3, [pc, #480]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a77      	ldr	r2, [pc, #476]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 800886e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008872:	6013      	str	r3, [r2, #0]
 8008874:	4b75      	ldr	r3, [pc, #468]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a74      	ldr	r2, [pc, #464]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 800887a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800887e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d013      	beq.n	80088b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008888:	f7fb fc1a 	bl	80040c0 <HAL_GetTick>
 800888c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800888e:	e008      	b.n	80088a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008890:	f7fb fc16 	bl	80040c0 <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	2b64      	cmp	r3, #100	@ 0x64
 800889c:	d901      	bls.n	80088a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e29e      	b.n	8008de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80088a2:	4b6a      	ldr	r3, [pc, #424]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d0f0      	beq.n	8008890 <HAL_RCC_OscConfig+0xc0>
 80088ae:	e014      	b.n	80088da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b0:	f7fb fc06 	bl	80040c0 <HAL_GetTick>
 80088b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80088b6:	e008      	b.n	80088ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088b8:	f7fb fc02 	bl	80040c0 <HAL_GetTick>
 80088bc:	4602      	mov	r2, r0
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	2b64      	cmp	r3, #100	@ 0x64
 80088c4:	d901      	bls.n	80088ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e28a      	b.n	8008de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80088ca:	4b60      	ldr	r3, [pc, #384]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1f0      	bne.n	80088b8 <HAL_RCC_OscConfig+0xe8>
 80088d6:	e000      	b.n	80088da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d075      	beq.n	80089d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088e6:	4b59      	ldr	r3, [pc, #356]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	f003 030c 	and.w	r3, r3, #12
 80088ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80088f0:	4b56      	ldr	r3, [pc, #344]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	f003 0303 	and.w	r3, r3, #3
 80088f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	2b0c      	cmp	r3, #12
 80088fe:	d102      	bne.n	8008906 <HAL_RCC_OscConfig+0x136>
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	2b02      	cmp	r3, #2
 8008904:	d002      	beq.n	800890c <HAL_RCC_OscConfig+0x13c>
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	2b04      	cmp	r3, #4
 800890a:	d11f      	bne.n	800894c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800890c:	4b4f      	ldr	r3, [pc, #316]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008914:	2b00      	cmp	r3, #0
 8008916:	d005      	beq.n	8008924 <HAL_RCC_OscConfig+0x154>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d101      	bne.n	8008924 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e25d      	b.n	8008de0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008924:	4b49      	ldr	r3, [pc, #292]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	061b      	lsls	r3, r3, #24
 8008932:	4946      	ldr	r1, [pc, #280]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 8008934:	4313      	orrs	r3, r2
 8008936:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008938:	4b45      	ldr	r3, [pc, #276]	@ (8008a50 <HAL_RCC_OscConfig+0x280>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4618      	mov	r0, r3
 800893e:	f7fb fb73 	bl	8004028 <HAL_InitTick>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d043      	beq.n	80089d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e249      	b.n	8008de0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d023      	beq.n	800899c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008954:	4b3d      	ldr	r3, [pc, #244]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a3c      	ldr	r2, [pc, #240]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 800895a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800895e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008960:	f7fb fbae 	bl	80040c0 <HAL_GetTick>
 8008964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008966:	e008      	b.n	800897a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008968:	f7fb fbaa 	bl	80040c0 <HAL_GetTick>
 800896c:	4602      	mov	r2, r0
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	2b02      	cmp	r3, #2
 8008974:	d901      	bls.n	800897a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	e232      	b.n	8008de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800897a:	4b34      	ldr	r3, [pc, #208]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008982:	2b00      	cmp	r3, #0
 8008984:	d0f0      	beq.n	8008968 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008986:	4b31      	ldr	r3, [pc, #196]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	061b      	lsls	r3, r3, #24
 8008994:	492d      	ldr	r1, [pc, #180]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 8008996:	4313      	orrs	r3, r2
 8008998:	604b      	str	r3, [r1, #4]
 800899a:	e01a      	b.n	80089d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800899c:	4b2b      	ldr	r3, [pc, #172]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a2a      	ldr	r2, [pc, #168]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 80089a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089a8:	f7fb fb8a 	bl	80040c0 <HAL_GetTick>
 80089ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80089ae:	e008      	b.n	80089c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089b0:	f7fb fb86 	bl	80040c0 <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d901      	bls.n	80089c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80089be:	2303      	movs	r3, #3
 80089c0:	e20e      	b.n	8008de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80089c2:	4b22      	ldr	r3, [pc, #136]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1f0      	bne.n	80089b0 <HAL_RCC_OscConfig+0x1e0>
 80089ce:	e000      	b.n	80089d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 0308 	and.w	r3, r3, #8
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d041      	beq.n	8008a62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d01c      	beq.n	8008a20 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089e6:	4b19      	ldr	r3, [pc, #100]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 80089e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089ec:	4a17      	ldr	r2, [pc, #92]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 80089ee:	f043 0301 	orr.w	r3, r3, #1
 80089f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089f6:	f7fb fb63 	bl	80040c0 <HAL_GetTick>
 80089fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80089fc:	e008      	b.n	8008a10 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089fe:	f7fb fb5f 	bl	80040c0 <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d901      	bls.n	8008a10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e1e7      	b.n	8008de0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a10:	4b0e      	ldr	r3, [pc, #56]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 8008a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a16:	f003 0302 	and.w	r3, r3, #2
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d0ef      	beq.n	80089fe <HAL_RCC_OscConfig+0x22e>
 8008a1e:	e020      	b.n	8008a62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a20:	4b0a      	ldr	r3, [pc, #40]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 8008a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a26:	4a09      	ldr	r2, [pc, #36]	@ (8008a4c <HAL_RCC_OscConfig+0x27c>)
 8008a28:	f023 0301 	bic.w	r3, r3, #1
 8008a2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a30:	f7fb fb46 	bl	80040c0 <HAL_GetTick>
 8008a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008a36:	e00d      	b.n	8008a54 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a38:	f7fb fb42 	bl	80040c0 <HAL_GetTick>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d906      	bls.n	8008a54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e1ca      	b.n	8008de0 <HAL_RCC_OscConfig+0x610>
 8008a4a:	bf00      	nop
 8008a4c:	40021000 	.word	0x40021000
 8008a50:	20000020 	.word	0x20000020
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008a54:	4b8c      	ldr	r3, [pc, #560]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1ea      	bne.n	8008a38 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 0304 	and.w	r3, r3, #4
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f000 80a6 	beq.w	8008bbc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a70:	2300      	movs	r3, #0
 8008a72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008a74:	4b84      	ldr	r3, [pc, #528]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d101      	bne.n	8008a84 <HAL_RCC_OscConfig+0x2b4>
 8008a80:	2301      	movs	r3, #1
 8008a82:	e000      	b.n	8008a86 <HAL_RCC_OscConfig+0x2b6>
 8008a84:	2300      	movs	r3, #0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00d      	beq.n	8008aa6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a8a:	4b7f      	ldr	r3, [pc, #508]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a8e:	4a7e      	ldr	r2, [pc, #504]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a94:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a96:	4b7c      	ldr	r3, [pc, #496]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008aa6:	4b79      	ldr	r3, [pc, #484]	@ (8008c8c <HAL_RCC_OscConfig+0x4bc>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d118      	bne.n	8008ae4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ab2:	4b76      	ldr	r3, [pc, #472]	@ (8008c8c <HAL_RCC_OscConfig+0x4bc>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a75      	ldr	r2, [pc, #468]	@ (8008c8c <HAL_RCC_OscConfig+0x4bc>)
 8008ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008abe:	f7fb faff 	bl	80040c0 <HAL_GetTick>
 8008ac2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ac4:	e008      	b.n	8008ad8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ac6:	f7fb fafb 	bl	80040c0 <HAL_GetTick>
 8008aca:	4602      	mov	r2, r0
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	1ad3      	subs	r3, r2, r3
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	d901      	bls.n	8008ad8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e183      	b.n	8008de0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ad8:	4b6c      	ldr	r3, [pc, #432]	@ (8008c8c <HAL_RCC_OscConfig+0x4bc>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d0f0      	beq.n	8008ac6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d108      	bne.n	8008afe <HAL_RCC_OscConfig+0x32e>
 8008aec:	4b66      	ldr	r3, [pc, #408]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008af2:	4a65      	ldr	r2, [pc, #404]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008af4:	f043 0301 	orr.w	r3, r3, #1
 8008af8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008afc:	e024      	b.n	8008b48 <HAL_RCC_OscConfig+0x378>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	2b05      	cmp	r3, #5
 8008b04:	d110      	bne.n	8008b28 <HAL_RCC_OscConfig+0x358>
 8008b06:	4b60      	ldr	r3, [pc, #384]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b0c:	4a5e      	ldr	r2, [pc, #376]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008b0e:	f043 0304 	orr.w	r3, r3, #4
 8008b12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008b16:	4b5c      	ldr	r3, [pc, #368]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b1c:	4a5a      	ldr	r2, [pc, #360]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008b1e:	f043 0301 	orr.w	r3, r3, #1
 8008b22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008b26:	e00f      	b.n	8008b48 <HAL_RCC_OscConfig+0x378>
 8008b28:	4b57      	ldr	r3, [pc, #348]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b2e:	4a56      	ldr	r2, [pc, #344]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008b30:	f023 0301 	bic.w	r3, r3, #1
 8008b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008b38:	4b53      	ldr	r3, [pc, #332]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b3e:	4a52      	ldr	r2, [pc, #328]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008b40:	f023 0304 	bic.w	r3, r3, #4
 8008b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d016      	beq.n	8008b7e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b50:	f7fb fab6 	bl	80040c0 <HAL_GetTick>
 8008b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b56:	e00a      	b.n	8008b6e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b58:	f7fb fab2 	bl	80040c0 <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d901      	bls.n	8008b6e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e138      	b.n	8008de0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b6e:	4b46      	ldr	r3, [pc, #280]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b74:	f003 0302 	and.w	r3, r3, #2
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d0ed      	beq.n	8008b58 <HAL_RCC_OscConfig+0x388>
 8008b7c:	e015      	b.n	8008baa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b7e:	f7fb fa9f 	bl	80040c0 <HAL_GetTick>
 8008b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008b84:	e00a      	b.n	8008b9c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b86:	f7fb fa9b 	bl	80040c0 <HAL_GetTick>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d901      	bls.n	8008b9c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	e121      	b.n	8008de0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008b9c:	4b3a      	ldr	r3, [pc, #232]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ba2:	f003 0302 	and.w	r3, r3, #2
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1ed      	bne.n	8008b86 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008baa:	7ffb      	ldrb	r3, [r7, #31]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d105      	bne.n	8008bbc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bb0:	4b35      	ldr	r3, [pc, #212]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bb4:	4a34      	ldr	r2, [pc, #208]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008bba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 0320 	and.w	r3, r3, #32
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d03c      	beq.n	8008c42 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	699b      	ldr	r3, [r3, #24]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d01c      	beq.n	8008c0a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008bd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008bd6:	4a2c      	ldr	r2, [pc, #176]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008bd8:	f043 0301 	orr.w	r3, r3, #1
 8008bdc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008be0:	f7fb fa6e 	bl	80040c0 <HAL_GetTick>
 8008be4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008be6:	e008      	b.n	8008bfa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008be8:	f7fb fa6a 	bl	80040c0 <HAL_GetTick>
 8008bec:	4602      	mov	r2, r0
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d901      	bls.n	8008bfa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e0f2      	b.n	8008de0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008bfa:	4b23      	ldr	r3, [pc, #140]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008bfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c00:	f003 0302 	and.w	r3, r3, #2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d0ef      	beq.n	8008be8 <HAL_RCC_OscConfig+0x418>
 8008c08:	e01b      	b.n	8008c42 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008c0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c10:	4a1d      	ldr	r2, [pc, #116]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008c12:	f023 0301 	bic.w	r3, r3, #1
 8008c16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c1a:	f7fb fa51 	bl	80040c0 <HAL_GetTick>
 8008c1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008c20:	e008      	b.n	8008c34 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c22:	f7fb fa4d 	bl	80040c0 <HAL_GetTick>
 8008c26:	4602      	mov	r2, r0
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d901      	bls.n	8008c34 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008c30:	2303      	movs	r3, #3
 8008c32:	e0d5      	b.n	8008de0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008c34:	4b14      	ldr	r3, [pc, #80]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1ef      	bne.n	8008c22 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	69db      	ldr	r3, [r3, #28]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 80c9 	beq.w	8008dde <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	f003 030c 	and.w	r3, r3, #12
 8008c54:	2b0c      	cmp	r3, #12
 8008c56:	f000 8083 	beq.w	8008d60 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	69db      	ldr	r3, [r3, #28]
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d15e      	bne.n	8008d20 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c62:	4b09      	ldr	r3, [pc, #36]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a08      	ldr	r2, [pc, #32]	@ (8008c88 <HAL_RCC_OscConfig+0x4b8>)
 8008c68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c6e:	f7fb fa27 	bl	80040c0 <HAL_GetTick>
 8008c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c74:	e00c      	b.n	8008c90 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c76:	f7fb fa23 	bl	80040c0 <HAL_GetTick>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d905      	bls.n	8008c90 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008c84:	2303      	movs	r3, #3
 8008c86:	e0ab      	b.n	8008de0 <HAL_RCC_OscConfig+0x610>
 8008c88:	40021000 	.word	0x40021000
 8008c8c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c90:	4b55      	ldr	r3, [pc, #340]	@ (8008de8 <HAL_RCC_OscConfig+0x618>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1ec      	bne.n	8008c76 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c9c:	4b52      	ldr	r3, [pc, #328]	@ (8008de8 <HAL_RCC_OscConfig+0x618>)
 8008c9e:	68da      	ldr	r2, [r3, #12]
 8008ca0:	4b52      	ldr	r3, [pc, #328]	@ (8008dec <HAL_RCC_OscConfig+0x61c>)
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	6a11      	ldr	r1, [r2, #32]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008cac:	3a01      	subs	r2, #1
 8008cae:	0112      	lsls	r2, r2, #4
 8008cb0:	4311      	orrs	r1, r2
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008cb6:	0212      	lsls	r2, r2, #8
 8008cb8:	4311      	orrs	r1, r2
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008cbe:	0852      	lsrs	r2, r2, #1
 8008cc0:	3a01      	subs	r2, #1
 8008cc2:	0552      	lsls	r2, r2, #21
 8008cc4:	4311      	orrs	r1, r2
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008cca:	0852      	lsrs	r2, r2, #1
 8008ccc:	3a01      	subs	r2, #1
 8008cce:	0652      	lsls	r2, r2, #25
 8008cd0:	4311      	orrs	r1, r2
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008cd6:	06d2      	lsls	r2, r2, #27
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	4943      	ldr	r1, [pc, #268]	@ (8008de8 <HAL_RCC_OscConfig+0x618>)
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ce0:	4b41      	ldr	r3, [pc, #260]	@ (8008de8 <HAL_RCC_OscConfig+0x618>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a40      	ldr	r2, [pc, #256]	@ (8008de8 <HAL_RCC_OscConfig+0x618>)
 8008ce6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008cea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008cec:	4b3e      	ldr	r3, [pc, #248]	@ (8008de8 <HAL_RCC_OscConfig+0x618>)
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	4a3d      	ldr	r2, [pc, #244]	@ (8008de8 <HAL_RCC_OscConfig+0x618>)
 8008cf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008cf6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cf8:	f7fb f9e2 	bl	80040c0 <HAL_GetTick>
 8008cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cfe:	e008      	b.n	8008d12 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d00:	f7fb f9de 	bl	80040c0 <HAL_GetTick>
 8008d04:	4602      	mov	r2, r0
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d901      	bls.n	8008d12 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e066      	b.n	8008de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d12:	4b35      	ldr	r3, [pc, #212]	@ (8008de8 <HAL_RCC_OscConfig+0x618>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d0f0      	beq.n	8008d00 <HAL_RCC_OscConfig+0x530>
 8008d1e:	e05e      	b.n	8008dde <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d20:	4b31      	ldr	r3, [pc, #196]	@ (8008de8 <HAL_RCC_OscConfig+0x618>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a30      	ldr	r2, [pc, #192]	@ (8008de8 <HAL_RCC_OscConfig+0x618>)
 8008d26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d2c:	f7fb f9c8 	bl	80040c0 <HAL_GetTick>
 8008d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d32:	e008      	b.n	8008d46 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d34:	f7fb f9c4 	bl	80040c0 <HAL_GetTick>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d901      	bls.n	8008d46 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e04c      	b.n	8008de0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d46:	4b28      	ldr	r3, [pc, #160]	@ (8008de8 <HAL_RCC_OscConfig+0x618>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1f0      	bne.n	8008d34 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008d52:	4b25      	ldr	r3, [pc, #148]	@ (8008de8 <HAL_RCC_OscConfig+0x618>)
 8008d54:	68da      	ldr	r2, [r3, #12]
 8008d56:	4924      	ldr	r1, [pc, #144]	@ (8008de8 <HAL_RCC_OscConfig+0x618>)
 8008d58:	4b25      	ldr	r3, [pc, #148]	@ (8008df0 <HAL_RCC_OscConfig+0x620>)
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	60cb      	str	r3, [r1, #12]
 8008d5e:	e03e      	b.n	8008dde <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	69db      	ldr	r3, [r3, #28]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d101      	bne.n	8008d6c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e039      	b.n	8008de0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8008de8 <HAL_RCC_OscConfig+0x618>)
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f003 0203 	and.w	r2, r3, #3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a1b      	ldr	r3, [r3, #32]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d12c      	bne.n	8008dda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d123      	bne.n	8008dda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d11b      	bne.n	8008dda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d113      	bne.n	8008dda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dbc:	085b      	lsrs	r3, r3, #1
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d109      	bne.n	8008dda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dd0:	085b      	lsrs	r3, r3, #1
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d001      	beq.n	8008dde <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e000      	b.n	8008de0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3720      	adds	r7, #32
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	40021000 	.word	0x40021000
 8008dec:	019f800c 	.word	0x019f800c
 8008df0:	feeefffc 	.word	0xfeeefffc

08008df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d101      	bne.n	8008e0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e11e      	b.n	800904a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e0c:	4b91      	ldr	r3, [pc, #580]	@ (8009054 <HAL_RCC_ClockConfig+0x260>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 030f 	and.w	r3, r3, #15
 8008e14:	683a      	ldr	r2, [r7, #0]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d910      	bls.n	8008e3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e1a:	4b8e      	ldr	r3, [pc, #568]	@ (8009054 <HAL_RCC_ClockConfig+0x260>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f023 020f 	bic.w	r2, r3, #15
 8008e22:	498c      	ldr	r1, [pc, #560]	@ (8009054 <HAL_RCC_ClockConfig+0x260>)
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e2a:	4b8a      	ldr	r3, [pc, #552]	@ (8009054 <HAL_RCC_ClockConfig+0x260>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 030f 	and.w	r3, r3, #15
 8008e32:	683a      	ldr	r2, [r7, #0]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d001      	beq.n	8008e3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e106      	b.n	800904a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d073      	beq.n	8008f30 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	2b03      	cmp	r3, #3
 8008e4e:	d129      	bne.n	8008ea4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e50:	4b81      	ldr	r3, [pc, #516]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d101      	bne.n	8008e60 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e0f4      	b.n	800904a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008e60:	f000 f99e 	bl	80091a0 <RCC_GetSysClockFreqFromPLLSource>
 8008e64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	4a7c      	ldr	r2, [pc, #496]	@ (800905c <HAL_RCC_ClockConfig+0x268>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d93f      	bls.n	8008eee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008e6e:	4b7a      	ldr	r3, [pc, #488]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d009      	beq.n	8008e8e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d033      	beq.n	8008eee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d12f      	bne.n	8008eee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008e8e:	4b72      	ldr	r3, [pc, #456]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e96:	4a70      	ldr	r2, [pc, #448]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8008e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008e9e:	2380      	movs	r3, #128	@ 0x80
 8008ea0:	617b      	str	r3, [r7, #20]
 8008ea2:	e024      	b.n	8008eee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d107      	bne.n	8008ebc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008eac:	4b6a      	ldr	r3, [pc, #424]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d109      	bne.n	8008ecc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e0c6      	b.n	800904a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ebc:	4b66      	ldr	r3, [pc, #408]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d101      	bne.n	8008ecc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e0be      	b.n	800904a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008ecc:	f000 f8ce 	bl	800906c <HAL_RCC_GetSysClockFreq>
 8008ed0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	4a61      	ldr	r2, [pc, #388]	@ (800905c <HAL_RCC_ClockConfig+0x268>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d909      	bls.n	8008eee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008eda:	4b5f      	ldr	r3, [pc, #380]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ee2:	4a5d      	ldr	r2, [pc, #372]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8008ee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ee8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008eea:	2380      	movs	r3, #128	@ 0x80
 8008eec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008eee:	4b5a      	ldr	r3, [pc, #360]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	f023 0203 	bic.w	r2, r3, #3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	4957      	ldr	r1, [pc, #348]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8008efc:	4313      	orrs	r3, r2
 8008efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f00:	f7fb f8de 	bl	80040c0 <HAL_GetTick>
 8008f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f06:	e00a      	b.n	8008f1e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f08:	f7fb f8da 	bl	80040c0 <HAL_GetTick>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d901      	bls.n	8008f1e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	e095      	b.n	800904a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f1e:	4b4e      	ldr	r3, [pc, #312]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	f003 020c 	and.w	r2, r3, #12
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d1eb      	bne.n	8008f08 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0302 	and.w	r3, r3, #2
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d023      	beq.n	8008f84 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f003 0304 	and.w	r3, r3, #4
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d005      	beq.n	8008f54 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f48:	4b43      	ldr	r3, [pc, #268]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	4a42      	ldr	r2, [pc, #264]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8008f4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008f52:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0308 	and.w	r3, r3, #8
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d007      	beq.n	8008f70 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008f60:	4b3d      	ldr	r3, [pc, #244]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008f68:	4a3b      	ldr	r2, [pc, #236]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8008f6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008f6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f70:	4b39      	ldr	r3, [pc, #228]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	4936      	ldr	r1, [pc, #216]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	608b      	str	r3, [r1, #8]
 8008f82:	e008      	b.n	8008f96 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	2b80      	cmp	r3, #128	@ 0x80
 8008f88:	d105      	bne.n	8008f96 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008f8a:	4b33      	ldr	r3, [pc, #204]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	4a32      	ldr	r2, [pc, #200]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8008f90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f94:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f96:	4b2f      	ldr	r3, [pc, #188]	@ (8009054 <HAL_RCC_ClockConfig+0x260>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 030f 	and.w	r3, r3, #15
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d21d      	bcs.n	8008fe0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8009054 <HAL_RCC_ClockConfig+0x260>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f023 020f 	bic.w	r2, r3, #15
 8008fac:	4929      	ldr	r1, [pc, #164]	@ (8009054 <HAL_RCC_ClockConfig+0x260>)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008fb4:	f7fb f884 	bl	80040c0 <HAL_GetTick>
 8008fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fba:	e00a      	b.n	8008fd2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fbc:	f7fb f880 	bl	80040c0 <HAL_GetTick>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d901      	bls.n	8008fd2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e03b      	b.n	800904a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fd2:	4b20      	ldr	r3, [pc, #128]	@ (8009054 <HAL_RCC_ClockConfig+0x260>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 030f 	and.w	r3, r3, #15
 8008fda:	683a      	ldr	r2, [r7, #0]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d1ed      	bne.n	8008fbc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 0304 	and.w	r3, r3, #4
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d008      	beq.n	8008ffe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008fec:	4b1a      	ldr	r3, [pc, #104]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	4917      	ldr	r1, [pc, #92]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 0308 	and.w	r3, r3, #8
 8009006:	2b00      	cmp	r3, #0
 8009008:	d009      	beq.n	800901e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800900a:	4b13      	ldr	r3, [pc, #76]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	490f      	ldr	r1, [pc, #60]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 800901a:	4313      	orrs	r3, r2
 800901c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800901e:	f000 f825 	bl	800906c <HAL_RCC_GetSysClockFreq>
 8009022:	4602      	mov	r2, r0
 8009024:	4b0c      	ldr	r3, [pc, #48]	@ (8009058 <HAL_RCC_ClockConfig+0x264>)
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	091b      	lsrs	r3, r3, #4
 800902a:	f003 030f 	and.w	r3, r3, #15
 800902e:	490c      	ldr	r1, [pc, #48]	@ (8009060 <HAL_RCC_ClockConfig+0x26c>)
 8009030:	5ccb      	ldrb	r3, [r1, r3]
 8009032:	f003 031f 	and.w	r3, r3, #31
 8009036:	fa22 f303 	lsr.w	r3, r2, r3
 800903a:	4a0a      	ldr	r2, [pc, #40]	@ (8009064 <HAL_RCC_ClockConfig+0x270>)
 800903c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800903e:	4b0a      	ldr	r3, [pc, #40]	@ (8009068 <HAL_RCC_ClockConfig+0x274>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4618      	mov	r0, r3
 8009044:	f7fa fff0 	bl	8004028 <HAL_InitTick>
 8009048:	4603      	mov	r3, r0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3718      	adds	r7, #24
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	40022000 	.word	0x40022000
 8009058:	40021000 	.word	0x40021000
 800905c:	04c4b400 	.word	0x04c4b400
 8009060:	08016d60 	.word	0x08016d60
 8009064:	2000001c 	.word	0x2000001c
 8009068:	20000020 	.word	0x20000020

0800906c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800906c:	b480      	push	{r7}
 800906e:	b087      	sub	sp, #28
 8009070:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009072:	4b2c      	ldr	r3, [pc, #176]	@ (8009124 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f003 030c 	and.w	r3, r3, #12
 800907a:	2b04      	cmp	r3, #4
 800907c:	d102      	bne.n	8009084 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800907e:	4b2a      	ldr	r3, [pc, #168]	@ (8009128 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009080:	613b      	str	r3, [r7, #16]
 8009082:	e047      	b.n	8009114 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009084:	4b27      	ldr	r3, [pc, #156]	@ (8009124 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	f003 030c 	and.w	r3, r3, #12
 800908c:	2b08      	cmp	r3, #8
 800908e:	d102      	bne.n	8009096 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009090:	4b26      	ldr	r3, [pc, #152]	@ (800912c <HAL_RCC_GetSysClockFreq+0xc0>)
 8009092:	613b      	str	r3, [r7, #16]
 8009094:	e03e      	b.n	8009114 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009096:	4b23      	ldr	r3, [pc, #140]	@ (8009124 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	f003 030c 	and.w	r3, r3, #12
 800909e:	2b0c      	cmp	r3, #12
 80090a0:	d136      	bne.n	8009110 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80090a2:	4b20      	ldr	r3, [pc, #128]	@ (8009124 <HAL_RCC_GetSysClockFreq+0xb8>)
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	f003 0303 	and.w	r3, r3, #3
 80090aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80090ac:	4b1d      	ldr	r3, [pc, #116]	@ (8009124 <HAL_RCC_GetSysClockFreq+0xb8>)
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	091b      	lsrs	r3, r3, #4
 80090b2:	f003 030f 	and.w	r3, r3, #15
 80090b6:	3301      	adds	r3, #1
 80090b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2b03      	cmp	r3, #3
 80090be:	d10c      	bne.n	80090da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80090c0:	4a1a      	ldr	r2, [pc, #104]	@ (800912c <HAL_RCC_GetSysClockFreq+0xc0>)
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80090c8:	4a16      	ldr	r2, [pc, #88]	@ (8009124 <HAL_RCC_GetSysClockFreq+0xb8>)
 80090ca:	68d2      	ldr	r2, [r2, #12]
 80090cc:	0a12      	lsrs	r2, r2, #8
 80090ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80090d2:	fb02 f303 	mul.w	r3, r2, r3
 80090d6:	617b      	str	r3, [r7, #20]
      break;
 80090d8:	e00c      	b.n	80090f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80090da:	4a13      	ldr	r2, [pc, #76]	@ (8009128 <HAL_RCC_GetSysClockFreq+0xbc>)
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	fbb2 f3f3 	udiv	r3, r2, r3
 80090e2:	4a10      	ldr	r2, [pc, #64]	@ (8009124 <HAL_RCC_GetSysClockFreq+0xb8>)
 80090e4:	68d2      	ldr	r2, [r2, #12]
 80090e6:	0a12      	lsrs	r2, r2, #8
 80090e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80090ec:	fb02 f303 	mul.w	r3, r2, r3
 80090f0:	617b      	str	r3, [r7, #20]
      break;
 80090f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80090f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009124 <HAL_RCC_GetSysClockFreq+0xb8>)
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	0e5b      	lsrs	r3, r3, #25
 80090fa:	f003 0303 	and.w	r3, r3, #3
 80090fe:	3301      	adds	r3, #1
 8009100:	005b      	lsls	r3, r3, #1
 8009102:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	fbb2 f3f3 	udiv	r3, r2, r3
 800910c:	613b      	str	r3, [r7, #16]
 800910e:	e001      	b.n	8009114 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009110:	2300      	movs	r3, #0
 8009112:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009114:	693b      	ldr	r3, [r7, #16]
}
 8009116:	4618      	mov	r0, r3
 8009118:	371c      	adds	r7, #28
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	40021000 	.word	0x40021000
 8009128:	00f42400 	.word	0x00f42400
 800912c:	016e3600 	.word	0x016e3600

08009130 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009130:	b480      	push	{r7}
 8009132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009134:	4b03      	ldr	r3, [pc, #12]	@ (8009144 <HAL_RCC_GetHCLKFreq+0x14>)
 8009136:	681b      	ldr	r3, [r3, #0]
}
 8009138:	4618      	mov	r0, r3
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	2000001c 	.word	0x2000001c

08009148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800914c:	f7ff fff0 	bl	8009130 <HAL_RCC_GetHCLKFreq>
 8009150:	4602      	mov	r2, r0
 8009152:	4b06      	ldr	r3, [pc, #24]	@ (800916c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	0a1b      	lsrs	r3, r3, #8
 8009158:	f003 0307 	and.w	r3, r3, #7
 800915c:	4904      	ldr	r1, [pc, #16]	@ (8009170 <HAL_RCC_GetPCLK1Freq+0x28>)
 800915e:	5ccb      	ldrb	r3, [r1, r3]
 8009160:	f003 031f 	and.w	r3, r3, #31
 8009164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009168:	4618      	mov	r0, r3
 800916a:	bd80      	pop	{r7, pc}
 800916c:	40021000 	.word	0x40021000
 8009170:	08016d70 	.word	0x08016d70

08009174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009178:	f7ff ffda 	bl	8009130 <HAL_RCC_GetHCLKFreq>
 800917c:	4602      	mov	r2, r0
 800917e:	4b06      	ldr	r3, [pc, #24]	@ (8009198 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	0adb      	lsrs	r3, r3, #11
 8009184:	f003 0307 	and.w	r3, r3, #7
 8009188:	4904      	ldr	r1, [pc, #16]	@ (800919c <HAL_RCC_GetPCLK2Freq+0x28>)
 800918a:	5ccb      	ldrb	r3, [r1, r3]
 800918c:	f003 031f 	and.w	r3, r3, #31
 8009190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009194:	4618      	mov	r0, r3
 8009196:	bd80      	pop	{r7, pc}
 8009198:	40021000 	.word	0x40021000
 800919c:	08016d70 	.word	0x08016d70

080091a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b087      	sub	sp, #28
 80091a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80091a6:	4b1e      	ldr	r3, [pc, #120]	@ (8009220 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	f003 0303 	and.w	r3, r3, #3
 80091ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80091b0:	4b1b      	ldr	r3, [pc, #108]	@ (8009220 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	091b      	lsrs	r3, r3, #4
 80091b6:	f003 030f 	and.w	r3, r3, #15
 80091ba:	3301      	adds	r3, #1
 80091bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	2b03      	cmp	r3, #3
 80091c2:	d10c      	bne.n	80091de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80091c4:	4a17      	ldr	r2, [pc, #92]	@ (8009224 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80091cc:	4a14      	ldr	r2, [pc, #80]	@ (8009220 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80091ce:	68d2      	ldr	r2, [r2, #12]
 80091d0:	0a12      	lsrs	r2, r2, #8
 80091d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80091d6:	fb02 f303 	mul.w	r3, r2, r3
 80091da:	617b      	str	r3, [r7, #20]
    break;
 80091dc:	e00c      	b.n	80091f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80091de:	4a12      	ldr	r2, [pc, #72]	@ (8009228 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e6:	4a0e      	ldr	r2, [pc, #56]	@ (8009220 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80091e8:	68d2      	ldr	r2, [r2, #12]
 80091ea:	0a12      	lsrs	r2, r2, #8
 80091ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80091f0:	fb02 f303 	mul.w	r3, r2, r3
 80091f4:	617b      	str	r3, [r7, #20]
    break;
 80091f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80091f8:	4b09      	ldr	r3, [pc, #36]	@ (8009220 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	0e5b      	lsrs	r3, r3, #25
 80091fe:	f003 0303 	and.w	r3, r3, #3
 8009202:	3301      	adds	r3, #1
 8009204:	005b      	lsls	r3, r3, #1
 8009206:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009208:	697a      	ldr	r2, [r7, #20]
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009210:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009212:	687b      	ldr	r3, [r7, #4]
}
 8009214:	4618      	mov	r0, r3
 8009216:	371c      	adds	r7, #28
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	40021000 	.word	0x40021000
 8009224:	016e3600 	.word	0x016e3600
 8009228:	00f42400 	.word	0x00f42400

0800922c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b086      	sub	sp, #24
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009234:	2300      	movs	r3, #0
 8009236:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009238:	2300      	movs	r3, #0
 800923a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009244:	2b00      	cmp	r3, #0
 8009246:	f000 8098 	beq.w	800937a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800924a:	2300      	movs	r3, #0
 800924c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800924e:	4b43      	ldr	r3, [pc, #268]	@ (800935c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10d      	bne.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800925a:	4b40      	ldr	r3, [pc, #256]	@ (800935c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800925c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800925e:	4a3f      	ldr	r2, [pc, #252]	@ (800935c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009264:	6593      	str	r3, [r2, #88]	@ 0x58
 8009266:	4b3d      	ldr	r3, [pc, #244]	@ (800935c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800926a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800926e:	60bb      	str	r3, [r7, #8]
 8009270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009272:	2301      	movs	r3, #1
 8009274:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009276:	4b3a      	ldr	r3, [pc, #232]	@ (8009360 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a39      	ldr	r2, [pc, #228]	@ (8009360 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800927c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009280:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009282:	f7fa ff1d 	bl	80040c0 <HAL_GetTick>
 8009286:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009288:	e009      	b.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800928a:	f7fa ff19 	bl	80040c0 <HAL_GetTick>
 800928e:	4602      	mov	r2, r0
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	2b02      	cmp	r3, #2
 8009296:	d902      	bls.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009298:	2303      	movs	r3, #3
 800929a:	74fb      	strb	r3, [r7, #19]
        break;
 800929c:	e005      	b.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800929e:	4b30      	ldr	r3, [pc, #192]	@ (8009360 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d0ef      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80092aa:	7cfb      	ldrb	r3, [r7, #19]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d159      	bne.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80092b0:	4b2a      	ldr	r3, [pc, #168]	@ (800935c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d01e      	beq.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092c6:	697a      	ldr	r2, [r7, #20]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d019      	beq.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80092cc:	4b23      	ldr	r3, [pc, #140]	@ (800935c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80092d8:	4b20      	ldr	r3, [pc, #128]	@ (800935c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092de:	4a1f      	ldr	r2, [pc, #124]	@ (800935c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80092e8:	4b1c      	ldr	r3, [pc, #112]	@ (800935c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ee:	4a1b      	ldr	r2, [pc, #108]	@ (800935c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80092f8:	4a18      	ldr	r2, [pc, #96]	@ (800935c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b00      	cmp	r3, #0
 8009308:	d016      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800930a:	f7fa fed9 	bl	80040c0 <HAL_GetTick>
 800930e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009310:	e00b      	b.n	800932a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009312:	f7fa fed5 	bl	80040c0 <HAL_GetTick>
 8009316:	4602      	mov	r2, r0
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009320:	4293      	cmp	r3, r2
 8009322:	d902      	bls.n	800932a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	74fb      	strb	r3, [r7, #19]
            break;
 8009328:	e006      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800932a:	4b0c      	ldr	r3, [pc, #48]	@ (800935c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800932c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009330:	f003 0302 	and.w	r3, r3, #2
 8009334:	2b00      	cmp	r3, #0
 8009336:	d0ec      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009338:	7cfb      	ldrb	r3, [r7, #19]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d10b      	bne.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800933e:	4b07      	ldr	r3, [pc, #28]	@ (800935c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009344:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800934c:	4903      	ldr	r1, [pc, #12]	@ (800935c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800934e:	4313      	orrs	r3, r2
 8009350:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009354:	e008      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009356:	7cfb      	ldrb	r3, [r7, #19]
 8009358:	74bb      	strb	r3, [r7, #18]
 800935a:	e005      	b.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800935c:	40021000 	.word	0x40021000
 8009360:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009364:	7cfb      	ldrb	r3, [r7, #19]
 8009366:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009368:	7c7b      	ldrb	r3, [r7, #17]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d105      	bne.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800936e:	4ba7      	ldr	r3, [pc, #668]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009372:	4aa6      	ldr	r2, [pc, #664]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009374:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009378:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00a      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009386:	4ba1      	ldr	r3, [pc, #644]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800938c:	f023 0203 	bic.w	r2, r3, #3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	499d      	ldr	r1, [pc, #628]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009396:	4313      	orrs	r3, r2
 8009398:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f003 0302 	and.w	r3, r3, #2
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d00a      	beq.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80093a8:	4b98      	ldr	r3, [pc, #608]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093ae:	f023 020c 	bic.w	r2, r3, #12
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	4995      	ldr	r1, [pc, #596]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093b8:	4313      	orrs	r3, r2
 80093ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 0304 	and.w	r3, r3, #4
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00a      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80093ca:	4b90      	ldr	r3, [pc, #576]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	498c      	ldr	r1, [pc, #560]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093da:	4313      	orrs	r3, r2
 80093dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0308 	and.w	r3, r3, #8
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00a      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80093ec:	4b87      	ldr	r3, [pc, #540]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	4984      	ldr	r1, [pc, #528]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093fc:	4313      	orrs	r3, r2
 80093fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 0310 	and.w	r3, r3, #16
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00a      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800940e:	4b7f      	ldr	r3, [pc, #508]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009414:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	695b      	ldr	r3, [r3, #20]
 800941c:	497b      	ldr	r1, [pc, #492]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800941e:	4313      	orrs	r3, r2
 8009420:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 0320 	and.w	r3, r3, #32
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00a      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009430:	4b76      	ldr	r3, [pc, #472]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009436:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	699b      	ldr	r3, [r3, #24]
 800943e:	4973      	ldr	r1, [pc, #460]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009440:	4313      	orrs	r3, r2
 8009442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00a      	beq.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009452:	4b6e      	ldr	r3, [pc, #440]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009458:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	69db      	ldr	r3, [r3, #28]
 8009460:	496a      	ldr	r1, [pc, #424]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009462:	4313      	orrs	r3, r2
 8009464:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00a      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009474:	4b65      	ldr	r3, [pc, #404]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800947a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a1b      	ldr	r3, [r3, #32]
 8009482:	4962      	ldr	r1, [pc, #392]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009484:	4313      	orrs	r3, r2
 8009486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00a      	beq.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009496:	4b5d      	ldr	r3, [pc, #372]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800949c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a4:	4959      	ldr	r1, [pc, #356]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094a6:	4313      	orrs	r3, r2
 80094a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00a      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80094b8:	4b54      	ldr	r3, [pc, #336]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80094be:	f023 0203 	bic.w	r2, r3, #3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c6:	4951      	ldr	r1, [pc, #324]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094c8:	4313      	orrs	r3, r2
 80094ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00a      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80094da:	4b4c      	ldr	r3, [pc, #304]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e8:	4948      	ldr	r1, [pc, #288]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094ea:	4313      	orrs	r3, r2
 80094ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d015      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80094fc:	4b43      	ldr	r3, [pc, #268]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009502:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800950a:	4940      	ldr	r1, [pc, #256]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800950c:	4313      	orrs	r3, r2
 800950e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009516:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800951a:	d105      	bne.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800951c:	4b3b      	ldr	r3, [pc, #236]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	4a3a      	ldr	r2, [pc, #232]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009522:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009526:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009530:	2b00      	cmp	r3, #0
 8009532:	d015      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009534:	4b35      	ldr	r3, [pc, #212]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800953a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009542:	4932      	ldr	r1, [pc, #200]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009544:	4313      	orrs	r3, r2
 8009546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800954e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009552:	d105      	bne.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009554:	4b2d      	ldr	r3, [pc, #180]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	4a2c      	ldr	r2, [pc, #176]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800955a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800955e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009568:	2b00      	cmp	r3, #0
 800956a:	d015      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800956c:	4b27      	ldr	r3, [pc, #156]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800956e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009572:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800957a:	4924      	ldr	r1, [pc, #144]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800957c:	4313      	orrs	r3, r2
 800957e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009586:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800958a:	d105      	bne.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800958c:	4b1f      	ldr	r3, [pc, #124]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	4a1e      	ldr	r2, [pc, #120]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009596:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d015      	beq.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80095a4:	4b19      	ldr	r3, [pc, #100]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095b2:	4916      	ldr	r1, [pc, #88]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095b4:	4313      	orrs	r3, r2
 80095b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095c2:	d105      	bne.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095c4:	4b11      	ldr	r3, [pc, #68]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	4a10      	ldr	r2, [pc, #64]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d019      	beq.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80095dc:	4b0b      	ldr	r3, [pc, #44]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ea:	4908      	ldr	r1, [pc, #32]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ec:	4313      	orrs	r3, r2
 80095ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095fa:	d109      	bne.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095fc:	4b03      	ldr	r3, [pc, #12]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	4a02      	ldr	r2, [pc, #8]	@ (800960c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009602:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009606:	60d3      	str	r3, [r2, #12]
 8009608:	e002      	b.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800960a:	bf00      	nop
 800960c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009618:	2b00      	cmp	r3, #0
 800961a:	d015      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800961c:	4b29      	ldr	r3, [pc, #164]	@ (80096c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800961e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009622:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800962a:	4926      	ldr	r1, [pc, #152]	@ (80096c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800962c:	4313      	orrs	r3, r2
 800962e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009636:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800963a:	d105      	bne.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800963c:	4b21      	ldr	r3, [pc, #132]	@ (80096c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	4a20      	ldr	r2, [pc, #128]	@ (80096c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009646:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d015      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009654:	4b1b      	ldr	r3, [pc, #108]	@ (80096c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800965a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009662:	4918      	ldr	r1, [pc, #96]	@ (80096c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009664:	4313      	orrs	r3, r2
 8009666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800966e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009672:	d105      	bne.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009674:	4b13      	ldr	r3, [pc, #76]	@ (80096c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	4a12      	ldr	r2, [pc, #72]	@ (80096c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800967a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800967e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d015      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800968c:	4b0d      	ldr	r3, [pc, #52]	@ (80096c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800968e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009692:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800969a:	490a      	ldr	r1, [pc, #40]	@ (80096c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800969c:	4313      	orrs	r3, r2
 800969e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80096aa:	d105      	bne.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096ac:	4b05      	ldr	r3, [pc, #20]	@ (80096c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	4a04      	ldr	r2, [pc, #16]	@ (80096c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80096b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3718      	adds	r7, #24
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	40021000 	.word	0x40021000

080096c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d101      	bne.n	80096da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e049      	b.n	800976e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d106      	bne.n	80096f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7fa f994 	bl	8003a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2202      	movs	r2, #2
 80096f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	3304      	adds	r3, #4
 8009704:	4619      	mov	r1, r3
 8009706:	4610      	mov	r0, r2
 8009708:	f000 fe58 	bl	800a3bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
	...

08009778 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009786:	b2db      	uxtb	r3, r3
 8009788:	2b01      	cmp	r3, #1
 800978a:	d001      	beq.n	8009790 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	e04c      	b.n	800982a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2202      	movs	r2, #2
 8009794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a26      	ldr	r2, [pc, #152]	@ (8009838 <HAL_TIM_Base_Start+0xc0>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d022      	beq.n	80097e8 <HAL_TIM_Base_Start+0x70>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097aa:	d01d      	beq.n	80097e8 <HAL_TIM_Base_Start+0x70>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a22      	ldr	r2, [pc, #136]	@ (800983c <HAL_TIM_Base_Start+0xc4>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d018      	beq.n	80097e8 <HAL_TIM_Base_Start+0x70>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a21      	ldr	r2, [pc, #132]	@ (8009840 <HAL_TIM_Base_Start+0xc8>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d013      	beq.n	80097e8 <HAL_TIM_Base_Start+0x70>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a1f      	ldr	r2, [pc, #124]	@ (8009844 <HAL_TIM_Base_Start+0xcc>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d00e      	beq.n	80097e8 <HAL_TIM_Base_Start+0x70>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a1e      	ldr	r2, [pc, #120]	@ (8009848 <HAL_TIM_Base_Start+0xd0>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d009      	beq.n	80097e8 <HAL_TIM_Base_Start+0x70>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a1c      	ldr	r2, [pc, #112]	@ (800984c <HAL_TIM_Base_Start+0xd4>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d004      	beq.n	80097e8 <HAL_TIM_Base_Start+0x70>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a1b      	ldr	r2, [pc, #108]	@ (8009850 <HAL_TIM_Base_Start+0xd8>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d115      	bne.n	8009814 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	689a      	ldr	r2, [r3, #8]
 80097ee:	4b19      	ldr	r3, [pc, #100]	@ (8009854 <HAL_TIM_Base_Start+0xdc>)
 80097f0:	4013      	ands	r3, r2
 80097f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2b06      	cmp	r3, #6
 80097f8:	d015      	beq.n	8009826 <HAL_TIM_Base_Start+0xae>
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009800:	d011      	beq.n	8009826 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f042 0201 	orr.w	r2, r2, #1
 8009810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009812:	e008      	b.n	8009826 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f042 0201 	orr.w	r2, r2, #1
 8009822:	601a      	str	r2, [r3, #0]
 8009824:	e000      	b.n	8009828 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009826:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3714      	adds	r7, #20
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	40012c00 	.word	0x40012c00
 800983c:	40000400 	.word	0x40000400
 8009840:	40000800 	.word	0x40000800
 8009844:	40000c00 	.word	0x40000c00
 8009848:	40013400 	.word	0x40013400
 800984c:	40014000 	.word	0x40014000
 8009850:	40015000 	.word	0x40015000
 8009854:	00010007 	.word	0x00010007

08009858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009866:	b2db      	uxtb	r3, r3
 8009868:	2b01      	cmp	r3, #1
 800986a:	d001      	beq.n	8009870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e054      	b.n	800991a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2202      	movs	r2, #2
 8009874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68da      	ldr	r2, [r3, #12]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f042 0201 	orr.w	r2, r2, #1
 8009886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a26      	ldr	r2, [pc, #152]	@ (8009928 <HAL_TIM_Base_Start_IT+0xd0>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d022      	beq.n	80098d8 <HAL_TIM_Base_Start_IT+0x80>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800989a:	d01d      	beq.n	80098d8 <HAL_TIM_Base_Start_IT+0x80>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a22      	ldr	r2, [pc, #136]	@ (800992c <HAL_TIM_Base_Start_IT+0xd4>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d018      	beq.n	80098d8 <HAL_TIM_Base_Start_IT+0x80>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a21      	ldr	r2, [pc, #132]	@ (8009930 <HAL_TIM_Base_Start_IT+0xd8>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d013      	beq.n	80098d8 <HAL_TIM_Base_Start_IT+0x80>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a1f      	ldr	r2, [pc, #124]	@ (8009934 <HAL_TIM_Base_Start_IT+0xdc>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d00e      	beq.n	80098d8 <HAL_TIM_Base_Start_IT+0x80>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a1e      	ldr	r2, [pc, #120]	@ (8009938 <HAL_TIM_Base_Start_IT+0xe0>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d009      	beq.n	80098d8 <HAL_TIM_Base_Start_IT+0x80>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a1c      	ldr	r2, [pc, #112]	@ (800993c <HAL_TIM_Base_Start_IT+0xe4>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d004      	beq.n	80098d8 <HAL_TIM_Base_Start_IT+0x80>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a1b      	ldr	r2, [pc, #108]	@ (8009940 <HAL_TIM_Base_Start_IT+0xe8>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d115      	bne.n	8009904 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	689a      	ldr	r2, [r3, #8]
 80098de:	4b19      	ldr	r3, [pc, #100]	@ (8009944 <HAL_TIM_Base_Start_IT+0xec>)
 80098e0:	4013      	ands	r3, r2
 80098e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2b06      	cmp	r3, #6
 80098e8:	d015      	beq.n	8009916 <HAL_TIM_Base_Start_IT+0xbe>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098f0:	d011      	beq.n	8009916 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f042 0201 	orr.w	r2, r2, #1
 8009900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009902:	e008      	b.n	8009916 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f042 0201 	orr.w	r2, r2, #1
 8009912:	601a      	str	r2, [r3, #0]
 8009914:	e000      	b.n	8009918 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009916:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3714      	adds	r7, #20
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr
 8009926:	bf00      	nop
 8009928:	40012c00 	.word	0x40012c00
 800992c:	40000400 	.word	0x40000400
 8009930:	40000800 	.word	0x40000800
 8009934:	40000c00 	.word	0x40000c00
 8009938:	40013400 	.word	0x40013400
 800993c:	40014000 	.word	0x40014000
 8009940:	40015000 	.word	0x40015000
 8009944:	00010007 	.word	0x00010007

08009948 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	68da      	ldr	r2, [r3, #12]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f022 0201 	bic.w	r2, r2, #1
 800995e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6a1a      	ldr	r2, [r3, #32]
 8009966:	f241 1311 	movw	r3, #4369	@ 0x1111
 800996a:	4013      	ands	r3, r2
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10f      	bne.n	8009990 <HAL_TIM_Base_Stop_IT+0x48>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	6a1a      	ldr	r2, [r3, #32]
 8009976:	f244 4344 	movw	r3, #17476	@ 0x4444
 800997a:	4013      	ands	r3, r2
 800997c:	2b00      	cmp	r3, #0
 800997e:	d107      	bne.n	8009990 <HAL_TIM_Base_Stop_IT+0x48>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f022 0201 	bic.w	r2, r2, #1
 800998e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	370c      	adds	r7, #12
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr

080099a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b082      	sub	sp, #8
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d101      	bne.n	80099b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	e049      	b.n	8009a4c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d106      	bne.n	80099d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f7f9 ffeb 	bl	80039a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2202      	movs	r2, #2
 80099d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	3304      	adds	r3, #4
 80099e2:	4619      	mov	r1, r3
 80099e4:	4610      	mov	r0, r2
 80099e6:	f000 fce9 	bl	800a3bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2201      	movs	r2, #1
 8009a26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2201      	movs	r2, #1
 8009a36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2201      	movs	r2, #1
 8009a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3708      	adds	r7, #8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d109      	bne.n	8009a78 <HAL_TIM_PWM_Start+0x24>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	bf14      	ite	ne
 8009a70:	2301      	movne	r3, #1
 8009a72:	2300      	moveq	r3, #0
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	e03c      	b.n	8009af2 <HAL_TIM_PWM_Start+0x9e>
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	2b04      	cmp	r3, #4
 8009a7c:	d109      	bne.n	8009a92 <HAL_TIM_PWM_Start+0x3e>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	bf14      	ite	ne
 8009a8a:	2301      	movne	r3, #1
 8009a8c:	2300      	moveq	r3, #0
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	e02f      	b.n	8009af2 <HAL_TIM_PWM_Start+0x9e>
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	2b08      	cmp	r3, #8
 8009a96:	d109      	bne.n	8009aac <HAL_TIM_PWM_Start+0x58>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	bf14      	ite	ne
 8009aa4:	2301      	movne	r3, #1
 8009aa6:	2300      	moveq	r3, #0
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	e022      	b.n	8009af2 <HAL_TIM_PWM_Start+0x9e>
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	2b0c      	cmp	r3, #12
 8009ab0:	d109      	bne.n	8009ac6 <HAL_TIM_PWM_Start+0x72>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	bf14      	ite	ne
 8009abe:	2301      	movne	r3, #1
 8009ac0:	2300      	moveq	r3, #0
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	e015      	b.n	8009af2 <HAL_TIM_PWM_Start+0x9e>
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	2b10      	cmp	r3, #16
 8009aca:	d109      	bne.n	8009ae0 <HAL_TIM_PWM_Start+0x8c>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	bf14      	ite	ne
 8009ad8:	2301      	movne	r3, #1
 8009ada:	2300      	moveq	r3, #0
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	e008      	b.n	8009af2 <HAL_TIM_PWM_Start+0x9e>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	bf14      	ite	ne
 8009aec:	2301      	movne	r3, #1
 8009aee:	2300      	moveq	r3, #0
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e0a6      	b.n	8009c48 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d104      	bne.n	8009b0a <HAL_TIM_PWM_Start+0xb6>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2202      	movs	r2, #2
 8009b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b08:	e023      	b.n	8009b52 <HAL_TIM_PWM_Start+0xfe>
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	2b04      	cmp	r3, #4
 8009b0e:	d104      	bne.n	8009b1a <HAL_TIM_PWM_Start+0xc6>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2202      	movs	r2, #2
 8009b14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b18:	e01b      	b.n	8009b52 <HAL_TIM_PWM_Start+0xfe>
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	2b08      	cmp	r3, #8
 8009b1e:	d104      	bne.n	8009b2a <HAL_TIM_PWM_Start+0xd6>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2202      	movs	r2, #2
 8009b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b28:	e013      	b.n	8009b52 <HAL_TIM_PWM_Start+0xfe>
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	2b0c      	cmp	r3, #12
 8009b2e:	d104      	bne.n	8009b3a <HAL_TIM_PWM_Start+0xe6>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2202      	movs	r2, #2
 8009b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009b38:	e00b      	b.n	8009b52 <HAL_TIM_PWM_Start+0xfe>
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	2b10      	cmp	r3, #16
 8009b3e:	d104      	bne.n	8009b4a <HAL_TIM_PWM_Start+0xf6>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2202      	movs	r2, #2
 8009b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b48:	e003      	b.n	8009b52 <HAL_TIM_PWM_Start+0xfe>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2202      	movs	r2, #2
 8009b4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2201      	movs	r2, #1
 8009b58:	6839      	ldr	r1, [r7, #0]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f001 f8a8 	bl	800acb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a3a      	ldr	r2, [pc, #232]	@ (8009c50 <HAL_TIM_PWM_Start+0x1fc>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d018      	beq.n	8009b9c <HAL_TIM_PWM_Start+0x148>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a39      	ldr	r2, [pc, #228]	@ (8009c54 <HAL_TIM_PWM_Start+0x200>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d013      	beq.n	8009b9c <HAL_TIM_PWM_Start+0x148>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a37      	ldr	r2, [pc, #220]	@ (8009c58 <HAL_TIM_PWM_Start+0x204>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d00e      	beq.n	8009b9c <HAL_TIM_PWM_Start+0x148>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a36      	ldr	r2, [pc, #216]	@ (8009c5c <HAL_TIM_PWM_Start+0x208>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d009      	beq.n	8009b9c <HAL_TIM_PWM_Start+0x148>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a34      	ldr	r2, [pc, #208]	@ (8009c60 <HAL_TIM_PWM_Start+0x20c>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d004      	beq.n	8009b9c <HAL_TIM_PWM_Start+0x148>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a33      	ldr	r2, [pc, #204]	@ (8009c64 <HAL_TIM_PWM_Start+0x210>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d101      	bne.n	8009ba0 <HAL_TIM_PWM_Start+0x14c>
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e000      	b.n	8009ba2 <HAL_TIM_PWM_Start+0x14e>
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d007      	beq.n	8009bb6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009bb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a25      	ldr	r2, [pc, #148]	@ (8009c50 <HAL_TIM_PWM_Start+0x1fc>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d022      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x1b2>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bc8:	d01d      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x1b2>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a26      	ldr	r2, [pc, #152]	@ (8009c68 <HAL_TIM_PWM_Start+0x214>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d018      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x1b2>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a24      	ldr	r2, [pc, #144]	@ (8009c6c <HAL_TIM_PWM_Start+0x218>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d013      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x1b2>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a23      	ldr	r2, [pc, #140]	@ (8009c70 <HAL_TIM_PWM_Start+0x21c>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d00e      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x1b2>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a19      	ldr	r2, [pc, #100]	@ (8009c54 <HAL_TIM_PWM_Start+0x200>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d009      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x1b2>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a18      	ldr	r2, [pc, #96]	@ (8009c58 <HAL_TIM_PWM_Start+0x204>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d004      	beq.n	8009c06 <HAL_TIM_PWM_Start+0x1b2>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a18      	ldr	r2, [pc, #96]	@ (8009c64 <HAL_TIM_PWM_Start+0x210>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d115      	bne.n	8009c32 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	689a      	ldr	r2, [r3, #8]
 8009c0c:	4b19      	ldr	r3, [pc, #100]	@ (8009c74 <HAL_TIM_PWM_Start+0x220>)
 8009c0e:	4013      	ands	r3, r2
 8009c10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2b06      	cmp	r3, #6
 8009c16:	d015      	beq.n	8009c44 <HAL_TIM_PWM_Start+0x1f0>
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c1e:	d011      	beq.n	8009c44 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f042 0201 	orr.w	r2, r2, #1
 8009c2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c30:	e008      	b.n	8009c44 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f042 0201 	orr.w	r2, r2, #1
 8009c40:	601a      	str	r2, [r3, #0]
 8009c42:	e000      	b.n	8009c46 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	40012c00 	.word	0x40012c00
 8009c54:	40013400 	.word	0x40013400
 8009c58:	40014000 	.word	0x40014000
 8009c5c:	40014400 	.word	0x40014400
 8009c60:	40014800 	.word	0x40014800
 8009c64:	40015000 	.word	0x40015000
 8009c68:	40000400 	.word	0x40000400
 8009c6c:	40000800 	.word	0x40000800
 8009c70:	40000c00 	.word	0x40000c00
 8009c74:	00010007 	.word	0x00010007

08009c78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	f003 0302 	and.w	r3, r3, #2
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d020      	beq.n	8009cdc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f003 0302 	and.w	r3, r3, #2
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d01b      	beq.n	8009cdc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f06f 0202 	mvn.w	r2, #2
 8009cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	699b      	ldr	r3, [r3, #24]
 8009cba:	f003 0303 	and.w	r3, r3, #3
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d003      	beq.n	8009cca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fb5c 	bl	800a380 <HAL_TIM_IC_CaptureCallback>
 8009cc8:	e005      	b.n	8009cd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fb4e 	bl	800a36c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 fb5f 	bl	800a394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	f003 0304 	and.w	r3, r3, #4
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d020      	beq.n	8009d28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f003 0304 	and.w	r3, r3, #4
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d01b      	beq.n	8009d28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f06f 0204 	mvn.w	r2, #4
 8009cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2202      	movs	r2, #2
 8009cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d003      	beq.n	8009d16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fb36 	bl	800a380 <HAL_TIM_IC_CaptureCallback>
 8009d14:	e005      	b.n	8009d22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fb28 	bl	800a36c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fb39 	bl	800a394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	f003 0308 	and.w	r3, r3, #8
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d020      	beq.n	8009d74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f003 0308 	and.w	r3, r3, #8
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d01b      	beq.n	8009d74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f06f 0208 	mvn.w	r2, #8
 8009d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2204      	movs	r2, #4
 8009d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	69db      	ldr	r3, [r3, #28]
 8009d52:	f003 0303 	and.w	r3, r3, #3
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d003      	beq.n	8009d62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fb10 	bl	800a380 <HAL_TIM_IC_CaptureCallback>
 8009d60:	e005      	b.n	8009d6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fb02 	bl	800a36c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fb13 	bl	800a394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	f003 0310 	and.w	r3, r3, #16
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d020      	beq.n	8009dc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f003 0310 	and.w	r3, r3, #16
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d01b      	beq.n	8009dc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f06f 0210 	mvn.w	r2, #16
 8009d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2208      	movs	r2, #8
 8009d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	69db      	ldr	r3, [r3, #28]
 8009d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d003      	beq.n	8009dae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 faea 	bl	800a380 <HAL_TIM_IC_CaptureCallback>
 8009dac:	e005      	b.n	8009dba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 fadc 	bl	800a36c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 faed 	bl	800a394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	f003 0301 	and.w	r3, r3, #1
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00c      	beq.n	8009de4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f003 0301 	and.w	r3, r3, #1
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d007      	beq.n	8009de4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f06f 0201 	mvn.w	r2, #1
 8009ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7f8 fb9e 	bl	8002520 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d104      	bne.n	8009df8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00c      	beq.n	8009e12 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d007      	beq.n	8009e12 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f001 f8a9 	bl	800af64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00c      	beq.n	8009e36 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d007      	beq.n	8009e36 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f001 f8a1 	bl	800af78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00c      	beq.n	8009e5a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d007      	beq.n	8009e5a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 faa7 	bl	800a3a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	f003 0320 	and.w	r3, r3, #32
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00c      	beq.n	8009e7e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f003 0320 	and.w	r3, r3, #32
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d007      	beq.n	8009e7e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f06f 0220 	mvn.w	r2, #32
 8009e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f001 f869 	bl	800af50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00c      	beq.n	8009ea2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d007      	beq.n	8009ea2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f001 f875 	bl	800af8c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00c      	beq.n	8009ec6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d007      	beq.n	8009ec6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f001 f86d 	bl	800afa0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00c      	beq.n	8009eea <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d007      	beq.n	8009eea <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f001 f865 	bl	800afb4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00c      	beq.n	8009f0e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d007      	beq.n	8009f0e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f001 f85d 	bl	800afc8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f0e:	bf00      	nop
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
	...

08009f18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d101      	bne.n	8009f36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009f32:	2302      	movs	r3, #2
 8009f34:	e0ff      	b.n	800a136 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2b14      	cmp	r3, #20
 8009f42:	f200 80f0 	bhi.w	800a126 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009f46:	a201      	add	r2, pc, #4	@ (adr r2, 8009f4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4c:	08009fa1 	.word	0x08009fa1
 8009f50:	0800a127 	.word	0x0800a127
 8009f54:	0800a127 	.word	0x0800a127
 8009f58:	0800a127 	.word	0x0800a127
 8009f5c:	08009fe1 	.word	0x08009fe1
 8009f60:	0800a127 	.word	0x0800a127
 8009f64:	0800a127 	.word	0x0800a127
 8009f68:	0800a127 	.word	0x0800a127
 8009f6c:	0800a023 	.word	0x0800a023
 8009f70:	0800a127 	.word	0x0800a127
 8009f74:	0800a127 	.word	0x0800a127
 8009f78:	0800a127 	.word	0x0800a127
 8009f7c:	0800a063 	.word	0x0800a063
 8009f80:	0800a127 	.word	0x0800a127
 8009f84:	0800a127 	.word	0x0800a127
 8009f88:	0800a127 	.word	0x0800a127
 8009f8c:	0800a0a5 	.word	0x0800a0a5
 8009f90:	0800a127 	.word	0x0800a127
 8009f94:	0800a127 	.word	0x0800a127
 8009f98:	0800a127 	.word	0x0800a127
 8009f9c:	0800a0e5 	.word	0x0800a0e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68b9      	ldr	r1, [r7, #8]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 fabc 	bl	800a524 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	699a      	ldr	r2, [r3, #24]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f042 0208 	orr.w	r2, r2, #8
 8009fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	699a      	ldr	r2, [r3, #24]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f022 0204 	bic.w	r2, r2, #4
 8009fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	6999      	ldr	r1, [r3, #24]
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	691a      	ldr	r2, [r3, #16]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	430a      	orrs	r2, r1
 8009fdc:	619a      	str	r2, [r3, #24]
      break;
 8009fde:	e0a5      	b.n	800a12c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68b9      	ldr	r1, [r7, #8]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f000 fb36 	bl	800a658 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	699a      	ldr	r2, [r3, #24]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	699a      	ldr	r2, [r3, #24]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a00a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6999      	ldr	r1, [r3, #24]
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	021a      	lsls	r2, r3, #8
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	430a      	orrs	r2, r1
 800a01e:	619a      	str	r2, [r3, #24]
      break;
 800a020:	e084      	b.n	800a12c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68b9      	ldr	r1, [r7, #8]
 800a028:	4618      	mov	r0, r3
 800a02a:	f000 fba9 	bl	800a780 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	69da      	ldr	r2, [r3, #28]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f042 0208 	orr.w	r2, r2, #8
 800a03c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	69da      	ldr	r2, [r3, #28]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f022 0204 	bic.w	r2, r2, #4
 800a04c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	69d9      	ldr	r1, [r3, #28]
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	691a      	ldr	r2, [r3, #16]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	430a      	orrs	r2, r1
 800a05e:	61da      	str	r2, [r3, #28]
      break;
 800a060:	e064      	b.n	800a12c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68b9      	ldr	r1, [r7, #8]
 800a068:	4618      	mov	r0, r3
 800a06a:	f000 fc1b 	bl	800a8a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	69da      	ldr	r2, [r3, #28]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a07c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	69da      	ldr	r2, [r3, #28]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a08c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	69d9      	ldr	r1, [r3, #28]
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	021a      	lsls	r2, r3, #8
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	430a      	orrs	r2, r1
 800a0a0:	61da      	str	r2, [r3, #28]
      break;
 800a0a2:	e043      	b.n	800a12c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	68b9      	ldr	r1, [r7, #8]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f000 fc8e 	bl	800a9cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f042 0208 	orr.w	r2, r2, #8
 800a0be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f022 0204 	bic.w	r2, r2, #4
 800a0ce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	691a      	ldr	r2, [r3, #16]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	430a      	orrs	r2, r1
 800a0e0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a0e2:	e023      	b.n	800a12c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	68b9      	ldr	r1, [r7, #8]
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f000 fcd8 	bl	800aaa0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a0fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a10e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	021a      	lsls	r2, r3, #8
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	430a      	orrs	r2, r1
 800a122:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a124:	e002      	b.n	800a12c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	75fb      	strb	r3, [r7, #23]
      break;
 800a12a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a134:	7dfb      	ldrb	r3, [r7, #23]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3718      	adds	r7, #24
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop

0800a140 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a14a:	2300      	movs	r3, #0
 800a14c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a154:	2b01      	cmp	r3, #1
 800a156:	d101      	bne.n	800a15c <HAL_TIM_ConfigClockSource+0x1c>
 800a158:	2302      	movs	r3, #2
 800a15a:	e0f6      	b.n	800a34a <HAL_TIM_ConfigClockSource+0x20a>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2202      	movs	r2, #2
 800a168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a17a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a17e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a186:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68ba      	ldr	r2, [r7, #8]
 800a18e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a6f      	ldr	r2, [pc, #444]	@ (800a354 <HAL_TIM_ConfigClockSource+0x214>)
 800a196:	4293      	cmp	r3, r2
 800a198:	f000 80c1 	beq.w	800a31e <HAL_TIM_ConfigClockSource+0x1de>
 800a19c:	4a6d      	ldr	r2, [pc, #436]	@ (800a354 <HAL_TIM_ConfigClockSource+0x214>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	f200 80c6 	bhi.w	800a330 <HAL_TIM_ConfigClockSource+0x1f0>
 800a1a4:	4a6c      	ldr	r2, [pc, #432]	@ (800a358 <HAL_TIM_ConfigClockSource+0x218>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	f000 80b9 	beq.w	800a31e <HAL_TIM_ConfigClockSource+0x1de>
 800a1ac:	4a6a      	ldr	r2, [pc, #424]	@ (800a358 <HAL_TIM_ConfigClockSource+0x218>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	f200 80be 	bhi.w	800a330 <HAL_TIM_ConfigClockSource+0x1f0>
 800a1b4:	4a69      	ldr	r2, [pc, #420]	@ (800a35c <HAL_TIM_ConfigClockSource+0x21c>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	f000 80b1 	beq.w	800a31e <HAL_TIM_ConfigClockSource+0x1de>
 800a1bc:	4a67      	ldr	r2, [pc, #412]	@ (800a35c <HAL_TIM_ConfigClockSource+0x21c>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	f200 80b6 	bhi.w	800a330 <HAL_TIM_ConfigClockSource+0x1f0>
 800a1c4:	4a66      	ldr	r2, [pc, #408]	@ (800a360 <HAL_TIM_ConfigClockSource+0x220>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	f000 80a9 	beq.w	800a31e <HAL_TIM_ConfigClockSource+0x1de>
 800a1cc:	4a64      	ldr	r2, [pc, #400]	@ (800a360 <HAL_TIM_ConfigClockSource+0x220>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	f200 80ae 	bhi.w	800a330 <HAL_TIM_ConfigClockSource+0x1f0>
 800a1d4:	4a63      	ldr	r2, [pc, #396]	@ (800a364 <HAL_TIM_ConfigClockSource+0x224>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	f000 80a1 	beq.w	800a31e <HAL_TIM_ConfigClockSource+0x1de>
 800a1dc:	4a61      	ldr	r2, [pc, #388]	@ (800a364 <HAL_TIM_ConfigClockSource+0x224>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	f200 80a6 	bhi.w	800a330 <HAL_TIM_ConfigClockSource+0x1f0>
 800a1e4:	4a60      	ldr	r2, [pc, #384]	@ (800a368 <HAL_TIM_ConfigClockSource+0x228>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	f000 8099 	beq.w	800a31e <HAL_TIM_ConfigClockSource+0x1de>
 800a1ec:	4a5e      	ldr	r2, [pc, #376]	@ (800a368 <HAL_TIM_ConfigClockSource+0x228>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	f200 809e 	bhi.w	800a330 <HAL_TIM_ConfigClockSource+0x1f0>
 800a1f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a1f8:	f000 8091 	beq.w	800a31e <HAL_TIM_ConfigClockSource+0x1de>
 800a1fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a200:	f200 8096 	bhi.w	800a330 <HAL_TIM_ConfigClockSource+0x1f0>
 800a204:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a208:	f000 8089 	beq.w	800a31e <HAL_TIM_ConfigClockSource+0x1de>
 800a20c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a210:	f200 808e 	bhi.w	800a330 <HAL_TIM_ConfigClockSource+0x1f0>
 800a214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a218:	d03e      	beq.n	800a298 <HAL_TIM_ConfigClockSource+0x158>
 800a21a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a21e:	f200 8087 	bhi.w	800a330 <HAL_TIM_ConfigClockSource+0x1f0>
 800a222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a226:	f000 8086 	beq.w	800a336 <HAL_TIM_ConfigClockSource+0x1f6>
 800a22a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a22e:	d87f      	bhi.n	800a330 <HAL_TIM_ConfigClockSource+0x1f0>
 800a230:	2b70      	cmp	r3, #112	@ 0x70
 800a232:	d01a      	beq.n	800a26a <HAL_TIM_ConfigClockSource+0x12a>
 800a234:	2b70      	cmp	r3, #112	@ 0x70
 800a236:	d87b      	bhi.n	800a330 <HAL_TIM_ConfigClockSource+0x1f0>
 800a238:	2b60      	cmp	r3, #96	@ 0x60
 800a23a:	d050      	beq.n	800a2de <HAL_TIM_ConfigClockSource+0x19e>
 800a23c:	2b60      	cmp	r3, #96	@ 0x60
 800a23e:	d877      	bhi.n	800a330 <HAL_TIM_ConfigClockSource+0x1f0>
 800a240:	2b50      	cmp	r3, #80	@ 0x50
 800a242:	d03c      	beq.n	800a2be <HAL_TIM_ConfigClockSource+0x17e>
 800a244:	2b50      	cmp	r3, #80	@ 0x50
 800a246:	d873      	bhi.n	800a330 <HAL_TIM_ConfigClockSource+0x1f0>
 800a248:	2b40      	cmp	r3, #64	@ 0x40
 800a24a:	d058      	beq.n	800a2fe <HAL_TIM_ConfigClockSource+0x1be>
 800a24c:	2b40      	cmp	r3, #64	@ 0x40
 800a24e:	d86f      	bhi.n	800a330 <HAL_TIM_ConfigClockSource+0x1f0>
 800a250:	2b30      	cmp	r3, #48	@ 0x30
 800a252:	d064      	beq.n	800a31e <HAL_TIM_ConfigClockSource+0x1de>
 800a254:	2b30      	cmp	r3, #48	@ 0x30
 800a256:	d86b      	bhi.n	800a330 <HAL_TIM_ConfigClockSource+0x1f0>
 800a258:	2b20      	cmp	r3, #32
 800a25a:	d060      	beq.n	800a31e <HAL_TIM_ConfigClockSource+0x1de>
 800a25c:	2b20      	cmp	r3, #32
 800a25e:	d867      	bhi.n	800a330 <HAL_TIM_ConfigClockSource+0x1f0>
 800a260:	2b00      	cmp	r3, #0
 800a262:	d05c      	beq.n	800a31e <HAL_TIM_ConfigClockSource+0x1de>
 800a264:	2b10      	cmp	r3, #16
 800a266:	d05a      	beq.n	800a31e <HAL_TIM_ConfigClockSource+0x1de>
 800a268:	e062      	b.n	800a330 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a27a:	f000 fcf9 	bl	800ac70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a28c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	609a      	str	r2, [r3, #8]
      break;
 800a296:	e04f      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a2a8:	f000 fce2 	bl	800ac70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	689a      	ldr	r2, [r3, #8]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a2ba:	609a      	str	r2, [r3, #8]
      break;
 800a2bc:	e03c      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	f000 fc54 	bl	800ab78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2150      	movs	r1, #80	@ 0x50
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f000 fcad 	bl	800ac36 <TIM_ITRx_SetConfig>
      break;
 800a2dc:	e02c      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	f000 fc73 	bl	800abd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2160      	movs	r1, #96	@ 0x60
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f000 fc9d 	bl	800ac36 <TIM_ITRx_SetConfig>
      break;
 800a2fc:	e01c      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a30a:	461a      	mov	r2, r3
 800a30c:	f000 fc34 	bl	800ab78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2140      	movs	r1, #64	@ 0x40
 800a316:	4618      	mov	r0, r3
 800a318:	f000 fc8d 	bl	800ac36 <TIM_ITRx_SetConfig>
      break;
 800a31c:	e00c      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4619      	mov	r1, r3
 800a328:	4610      	mov	r0, r2
 800a32a:	f000 fc84 	bl	800ac36 <TIM_ITRx_SetConfig>
      break;
 800a32e:	e003      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	73fb      	strb	r3, [r7, #15]
      break;
 800a334:	e000      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800a336:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a348:	7bfb      	ldrb	r3, [r7, #15]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	00100070 	.word	0x00100070
 800a358:	00100060 	.word	0x00100060
 800a35c:	00100050 	.word	0x00100050
 800a360:	00100040 	.word	0x00100040
 800a364:	00100030 	.word	0x00100030
 800a368:	00100020 	.word	0x00100020

0800a36c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a374:	bf00      	nop
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a4c      	ldr	r2, [pc, #304]	@ (800a500 <TIM_Base_SetConfig+0x144>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d017      	beq.n	800a404 <TIM_Base_SetConfig+0x48>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3da:	d013      	beq.n	800a404 <TIM_Base_SetConfig+0x48>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	4a49      	ldr	r2, [pc, #292]	@ (800a504 <TIM_Base_SetConfig+0x148>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d00f      	beq.n	800a404 <TIM_Base_SetConfig+0x48>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a48      	ldr	r2, [pc, #288]	@ (800a508 <TIM_Base_SetConfig+0x14c>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d00b      	beq.n	800a404 <TIM_Base_SetConfig+0x48>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a47      	ldr	r2, [pc, #284]	@ (800a50c <TIM_Base_SetConfig+0x150>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d007      	beq.n	800a404 <TIM_Base_SetConfig+0x48>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a46      	ldr	r2, [pc, #280]	@ (800a510 <TIM_Base_SetConfig+0x154>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d003      	beq.n	800a404 <TIM_Base_SetConfig+0x48>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4a45      	ldr	r2, [pc, #276]	@ (800a514 <TIM_Base_SetConfig+0x158>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d108      	bne.n	800a416 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a40a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	4313      	orrs	r3, r2
 800a414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a39      	ldr	r2, [pc, #228]	@ (800a500 <TIM_Base_SetConfig+0x144>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d023      	beq.n	800a466 <TIM_Base_SetConfig+0xaa>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a424:	d01f      	beq.n	800a466 <TIM_Base_SetConfig+0xaa>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a36      	ldr	r2, [pc, #216]	@ (800a504 <TIM_Base_SetConfig+0x148>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d01b      	beq.n	800a466 <TIM_Base_SetConfig+0xaa>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a35      	ldr	r2, [pc, #212]	@ (800a508 <TIM_Base_SetConfig+0x14c>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d017      	beq.n	800a466 <TIM_Base_SetConfig+0xaa>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a34      	ldr	r2, [pc, #208]	@ (800a50c <TIM_Base_SetConfig+0x150>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d013      	beq.n	800a466 <TIM_Base_SetConfig+0xaa>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a33      	ldr	r2, [pc, #204]	@ (800a510 <TIM_Base_SetConfig+0x154>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d00f      	beq.n	800a466 <TIM_Base_SetConfig+0xaa>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4a33      	ldr	r2, [pc, #204]	@ (800a518 <TIM_Base_SetConfig+0x15c>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d00b      	beq.n	800a466 <TIM_Base_SetConfig+0xaa>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4a32      	ldr	r2, [pc, #200]	@ (800a51c <TIM_Base_SetConfig+0x160>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d007      	beq.n	800a466 <TIM_Base_SetConfig+0xaa>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4a31      	ldr	r2, [pc, #196]	@ (800a520 <TIM_Base_SetConfig+0x164>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d003      	beq.n	800a466 <TIM_Base_SetConfig+0xaa>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4a2c      	ldr	r2, [pc, #176]	@ (800a514 <TIM_Base_SetConfig+0x158>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d108      	bne.n	800a478 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a46c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	68fa      	ldr	r2, [r7, #12]
 800a474:	4313      	orrs	r3, r2
 800a476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	695b      	ldr	r3, [r3, #20]
 800a482:	4313      	orrs	r3, r2
 800a484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	689a      	ldr	r2, [r3, #8]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a18      	ldr	r2, [pc, #96]	@ (800a500 <TIM_Base_SetConfig+0x144>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d013      	beq.n	800a4cc <TIM_Base_SetConfig+0x110>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a1a      	ldr	r2, [pc, #104]	@ (800a510 <TIM_Base_SetConfig+0x154>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d00f      	beq.n	800a4cc <TIM_Base_SetConfig+0x110>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a1a      	ldr	r2, [pc, #104]	@ (800a518 <TIM_Base_SetConfig+0x15c>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d00b      	beq.n	800a4cc <TIM_Base_SetConfig+0x110>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4a19      	ldr	r2, [pc, #100]	@ (800a51c <TIM_Base_SetConfig+0x160>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d007      	beq.n	800a4cc <TIM_Base_SetConfig+0x110>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4a18      	ldr	r2, [pc, #96]	@ (800a520 <TIM_Base_SetConfig+0x164>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d003      	beq.n	800a4cc <TIM_Base_SetConfig+0x110>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a13      	ldr	r2, [pc, #76]	@ (800a514 <TIM_Base_SetConfig+0x158>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d103      	bne.n	800a4d4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	691a      	ldr	r2, [r3, #16]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	f003 0301 	and.w	r3, r3, #1
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d105      	bne.n	800a4f2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	f023 0201 	bic.w	r2, r3, #1
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	611a      	str	r2, [r3, #16]
  }
}
 800a4f2:	bf00      	nop
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	40012c00 	.word	0x40012c00
 800a504:	40000400 	.word	0x40000400
 800a508:	40000800 	.word	0x40000800
 800a50c:	40000c00 	.word	0x40000c00
 800a510:	40013400 	.word	0x40013400
 800a514:	40015000 	.word	0x40015000
 800a518:	40014000 	.word	0x40014000
 800a51c:	40014400 	.word	0x40014400
 800a520:	40014800 	.word	0x40014800

0800a524 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a524:	b480      	push	{r7}
 800a526:	b087      	sub	sp, #28
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a1b      	ldr	r3, [r3, #32]
 800a532:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6a1b      	ldr	r3, [r3, #32]
 800a538:	f023 0201 	bic.w	r2, r3, #1
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	699b      	ldr	r3, [r3, #24]
 800a54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f023 0303 	bic.w	r3, r3, #3
 800a55e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	4313      	orrs	r3, r2
 800a568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	f023 0302 	bic.w	r3, r3, #2
 800a570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	697a      	ldr	r2, [r7, #20]
 800a578:	4313      	orrs	r3, r2
 800a57a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	4a30      	ldr	r2, [pc, #192]	@ (800a640 <TIM_OC1_SetConfig+0x11c>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d013      	beq.n	800a5ac <TIM_OC1_SetConfig+0x88>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	4a2f      	ldr	r2, [pc, #188]	@ (800a644 <TIM_OC1_SetConfig+0x120>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d00f      	beq.n	800a5ac <TIM_OC1_SetConfig+0x88>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4a2e      	ldr	r2, [pc, #184]	@ (800a648 <TIM_OC1_SetConfig+0x124>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d00b      	beq.n	800a5ac <TIM_OC1_SetConfig+0x88>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4a2d      	ldr	r2, [pc, #180]	@ (800a64c <TIM_OC1_SetConfig+0x128>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d007      	beq.n	800a5ac <TIM_OC1_SetConfig+0x88>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4a2c      	ldr	r2, [pc, #176]	@ (800a650 <TIM_OC1_SetConfig+0x12c>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d003      	beq.n	800a5ac <TIM_OC1_SetConfig+0x88>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4a2b      	ldr	r2, [pc, #172]	@ (800a654 <TIM_OC1_SetConfig+0x130>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d10c      	bne.n	800a5c6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	f023 0308 	bic.w	r3, r3, #8
 800a5b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	697a      	ldr	r2, [r7, #20]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	f023 0304 	bic.w	r3, r3, #4
 800a5c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	4a1d      	ldr	r2, [pc, #116]	@ (800a640 <TIM_OC1_SetConfig+0x11c>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d013      	beq.n	800a5f6 <TIM_OC1_SetConfig+0xd2>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4a1c      	ldr	r2, [pc, #112]	@ (800a644 <TIM_OC1_SetConfig+0x120>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d00f      	beq.n	800a5f6 <TIM_OC1_SetConfig+0xd2>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	4a1b      	ldr	r2, [pc, #108]	@ (800a648 <TIM_OC1_SetConfig+0x124>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d00b      	beq.n	800a5f6 <TIM_OC1_SetConfig+0xd2>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	4a1a      	ldr	r2, [pc, #104]	@ (800a64c <TIM_OC1_SetConfig+0x128>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d007      	beq.n	800a5f6 <TIM_OC1_SetConfig+0xd2>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	4a19      	ldr	r2, [pc, #100]	@ (800a650 <TIM_OC1_SetConfig+0x12c>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d003      	beq.n	800a5f6 <TIM_OC1_SetConfig+0xd2>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	4a18      	ldr	r2, [pc, #96]	@ (800a654 <TIM_OC1_SetConfig+0x130>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d111      	bne.n	800a61a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	695b      	ldr	r3, [r3, #20]
 800a60a:	693a      	ldr	r2, [r7, #16]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	699b      	ldr	r3, [r3, #24]
 800a614:	693a      	ldr	r2, [r7, #16]
 800a616:	4313      	orrs	r3, r2
 800a618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	693a      	ldr	r2, [r7, #16]
 800a61e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	68fa      	ldr	r2, [r7, #12]
 800a624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	685a      	ldr	r2, [r3, #4]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	697a      	ldr	r2, [r7, #20]
 800a632:	621a      	str	r2, [r3, #32]
}
 800a634:	bf00      	nop
 800a636:	371c      	adds	r7, #28
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr
 800a640:	40012c00 	.word	0x40012c00
 800a644:	40013400 	.word	0x40013400
 800a648:	40014000 	.word	0x40014000
 800a64c:	40014400 	.word	0x40014400
 800a650:	40014800 	.word	0x40014800
 800a654:	40015000 	.word	0x40015000

0800a658 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a658:	b480      	push	{r7}
 800a65a:	b087      	sub	sp, #28
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a1b      	ldr	r3, [r3, #32]
 800a666:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a1b      	ldr	r3, [r3, #32]
 800a66c:	f023 0210 	bic.w	r2, r3, #16
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	699b      	ldr	r3, [r3, #24]
 800a67e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a686:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a68a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	021b      	lsls	r3, r3, #8
 800a69a:	68fa      	ldr	r2, [r7, #12]
 800a69c:	4313      	orrs	r3, r2
 800a69e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	f023 0320 	bic.w	r3, r3, #32
 800a6a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	011b      	lsls	r3, r3, #4
 800a6ae:	697a      	ldr	r2, [r7, #20]
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a2c      	ldr	r2, [pc, #176]	@ (800a768 <TIM_OC2_SetConfig+0x110>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d007      	beq.n	800a6cc <TIM_OC2_SetConfig+0x74>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a2b      	ldr	r2, [pc, #172]	@ (800a76c <TIM_OC2_SetConfig+0x114>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d003      	beq.n	800a6cc <TIM_OC2_SetConfig+0x74>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4a2a      	ldr	r2, [pc, #168]	@ (800a770 <TIM_OC2_SetConfig+0x118>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d10d      	bne.n	800a6e8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a6d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	011b      	lsls	r3, r3, #4
 800a6da:	697a      	ldr	r2, [r7, #20]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	4a1f      	ldr	r2, [pc, #124]	@ (800a768 <TIM_OC2_SetConfig+0x110>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d013      	beq.n	800a718 <TIM_OC2_SetConfig+0xc0>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	4a1e      	ldr	r2, [pc, #120]	@ (800a76c <TIM_OC2_SetConfig+0x114>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d00f      	beq.n	800a718 <TIM_OC2_SetConfig+0xc0>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	4a1e      	ldr	r2, [pc, #120]	@ (800a774 <TIM_OC2_SetConfig+0x11c>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d00b      	beq.n	800a718 <TIM_OC2_SetConfig+0xc0>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4a1d      	ldr	r2, [pc, #116]	@ (800a778 <TIM_OC2_SetConfig+0x120>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d007      	beq.n	800a718 <TIM_OC2_SetConfig+0xc0>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4a1c      	ldr	r2, [pc, #112]	@ (800a77c <TIM_OC2_SetConfig+0x124>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d003      	beq.n	800a718 <TIM_OC2_SetConfig+0xc0>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4a17      	ldr	r2, [pc, #92]	@ (800a770 <TIM_OC2_SetConfig+0x118>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d113      	bne.n	800a740 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a71e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a726:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	695b      	ldr	r3, [r3, #20]
 800a72c:	009b      	lsls	r3, r3, #2
 800a72e:	693a      	ldr	r2, [r7, #16]
 800a730:	4313      	orrs	r3, r2
 800a732:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	699b      	ldr	r3, [r3, #24]
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	693a      	ldr	r2, [r7, #16]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	693a      	ldr	r2, [r7, #16]
 800a744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	685a      	ldr	r2, [r3, #4]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	697a      	ldr	r2, [r7, #20]
 800a758:	621a      	str	r2, [r3, #32]
}
 800a75a:	bf00      	nop
 800a75c:	371c      	adds	r7, #28
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	40012c00 	.word	0x40012c00
 800a76c:	40013400 	.word	0x40013400
 800a770:	40015000 	.word	0x40015000
 800a774:	40014000 	.word	0x40014000
 800a778:	40014400 	.word	0x40014400
 800a77c:	40014800 	.word	0x40014800

0800a780 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a780:	b480      	push	{r7}
 800a782:	b087      	sub	sp, #28
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a1b      	ldr	r3, [r3, #32]
 800a78e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a1b      	ldr	r3, [r3, #32]
 800a794:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	69db      	ldr	r3, [r3, #28]
 800a7a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a7ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f023 0303 	bic.w	r3, r3, #3
 800a7ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68fa      	ldr	r2, [r7, #12]
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a7cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	021b      	lsls	r3, r3, #8
 800a7d4:	697a      	ldr	r2, [r7, #20]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a2b      	ldr	r2, [pc, #172]	@ (800a88c <TIM_OC3_SetConfig+0x10c>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d007      	beq.n	800a7f2 <TIM_OC3_SetConfig+0x72>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a2a      	ldr	r2, [pc, #168]	@ (800a890 <TIM_OC3_SetConfig+0x110>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d003      	beq.n	800a7f2 <TIM_OC3_SetConfig+0x72>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a29      	ldr	r2, [pc, #164]	@ (800a894 <TIM_OC3_SetConfig+0x114>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d10d      	bne.n	800a80e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a7f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	021b      	lsls	r3, r3, #8
 800a800:	697a      	ldr	r2, [r7, #20]
 800a802:	4313      	orrs	r3, r2
 800a804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a80c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4a1e      	ldr	r2, [pc, #120]	@ (800a88c <TIM_OC3_SetConfig+0x10c>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d013      	beq.n	800a83e <TIM_OC3_SetConfig+0xbe>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4a1d      	ldr	r2, [pc, #116]	@ (800a890 <TIM_OC3_SetConfig+0x110>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d00f      	beq.n	800a83e <TIM_OC3_SetConfig+0xbe>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4a1d      	ldr	r2, [pc, #116]	@ (800a898 <TIM_OC3_SetConfig+0x118>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d00b      	beq.n	800a83e <TIM_OC3_SetConfig+0xbe>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a1c      	ldr	r2, [pc, #112]	@ (800a89c <TIM_OC3_SetConfig+0x11c>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d007      	beq.n	800a83e <TIM_OC3_SetConfig+0xbe>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a1b      	ldr	r2, [pc, #108]	@ (800a8a0 <TIM_OC3_SetConfig+0x120>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d003      	beq.n	800a83e <TIM_OC3_SetConfig+0xbe>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4a16      	ldr	r2, [pc, #88]	@ (800a894 <TIM_OC3_SetConfig+0x114>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d113      	bne.n	800a866 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a84c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	695b      	ldr	r3, [r3, #20]
 800a852:	011b      	lsls	r3, r3, #4
 800a854:	693a      	ldr	r2, [r7, #16]
 800a856:	4313      	orrs	r3, r2
 800a858:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	011b      	lsls	r3, r3, #4
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	4313      	orrs	r3, r2
 800a864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	693a      	ldr	r2, [r7, #16]
 800a86a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	685a      	ldr	r2, [r3, #4]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	697a      	ldr	r2, [r7, #20]
 800a87e:	621a      	str	r2, [r3, #32]
}
 800a880:	bf00      	nop
 800a882:	371c      	adds	r7, #28
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr
 800a88c:	40012c00 	.word	0x40012c00
 800a890:	40013400 	.word	0x40013400
 800a894:	40015000 	.word	0x40015000
 800a898:	40014000 	.word	0x40014000
 800a89c:	40014400 	.word	0x40014400
 800a8a0:	40014800 	.word	0x40014800

0800a8a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b087      	sub	sp, #28
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a1b      	ldr	r3, [r3, #32]
 800a8b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a1b      	ldr	r3, [r3, #32]
 800a8b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	69db      	ldr	r3, [r3, #28]
 800a8ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a8d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	021b      	lsls	r3, r3, #8
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a8f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	031b      	lsls	r3, r3, #12
 800a8fa:	697a      	ldr	r2, [r7, #20]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a2c      	ldr	r2, [pc, #176]	@ (800a9b4 <TIM_OC4_SetConfig+0x110>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d007      	beq.n	800a918 <TIM_OC4_SetConfig+0x74>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a2b      	ldr	r2, [pc, #172]	@ (800a9b8 <TIM_OC4_SetConfig+0x114>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d003      	beq.n	800a918 <TIM_OC4_SetConfig+0x74>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a2a      	ldr	r2, [pc, #168]	@ (800a9bc <TIM_OC4_SetConfig+0x118>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d10d      	bne.n	800a934 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a91e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	031b      	lsls	r3, r3, #12
 800a926:	697a      	ldr	r2, [r7, #20]
 800a928:	4313      	orrs	r3, r2
 800a92a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a932:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a1f      	ldr	r2, [pc, #124]	@ (800a9b4 <TIM_OC4_SetConfig+0x110>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d013      	beq.n	800a964 <TIM_OC4_SetConfig+0xc0>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a1e      	ldr	r2, [pc, #120]	@ (800a9b8 <TIM_OC4_SetConfig+0x114>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d00f      	beq.n	800a964 <TIM_OC4_SetConfig+0xc0>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4a1e      	ldr	r2, [pc, #120]	@ (800a9c0 <TIM_OC4_SetConfig+0x11c>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d00b      	beq.n	800a964 <TIM_OC4_SetConfig+0xc0>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4a1d      	ldr	r2, [pc, #116]	@ (800a9c4 <TIM_OC4_SetConfig+0x120>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d007      	beq.n	800a964 <TIM_OC4_SetConfig+0xc0>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	4a1c      	ldr	r2, [pc, #112]	@ (800a9c8 <TIM_OC4_SetConfig+0x124>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d003      	beq.n	800a964 <TIM_OC4_SetConfig+0xc0>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4a17      	ldr	r2, [pc, #92]	@ (800a9bc <TIM_OC4_SetConfig+0x118>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d113      	bne.n	800a98c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a96a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a972:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	695b      	ldr	r3, [r3, #20]
 800a978:	019b      	lsls	r3, r3, #6
 800a97a:	693a      	ldr	r2, [r7, #16]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	699b      	ldr	r3, [r3, #24]
 800a984:	019b      	lsls	r3, r3, #6
 800a986:	693a      	ldr	r2, [r7, #16]
 800a988:	4313      	orrs	r3, r2
 800a98a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	693a      	ldr	r2, [r7, #16]
 800a990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	685a      	ldr	r2, [r3, #4]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	621a      	str	r2, [r3, #32]
}
 800a9a6:	bf00      	nop
 800a9a8:	371c      	adds	r7, #28
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	40012c00 	.word	0x40012c00
 800a9b8:	40013400 	.word	0x40013400
 800a9bc:	40015000 	.word	0x40015000
 800a9c0:	40014000 	.word	0x40014000
 800a9c4:	40014400 	.word	0x40014400
 800a9c8:	40014800 	.word	0x40014800

0800a9cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b087      	sub	sp, #28
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a1b      	ldr	r3, [r3, #32]
 800a9da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6a1b      	ldr	r3, [r3, #32]
 800a9e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	68fa      	ldr	r2, [r7, #12]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800aa10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	041b      	lsls	r3, r3, #16
 800aa18:	693a      	ldr	r2, [r7, #16]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a19      	ldr	r2, [pc, #100]	@ (800aa88 <TIM_OC5_SetConfig+0xbc>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d013      	beq.n	800aa4e <TIM_OC5_SetConfig+0x82>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a18      	ldr	r2, [pc, #96]	@ (800aa8c <TIM_OC5_SetConfig+0xc0>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d00f      	beq.n	800aa4e <TIM_OC5_SetConfig+0x82>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a17      	ldr	r2, [pc, #92]	@ (800aa90 <TIM_OC5_SetConfig+0xc4>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d00b      	beq.n	800aa4e <TIM_OC5_SetConfig+0x82>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a16      	ldr	r2, [pc, #88]	@ (800aa94 <TIM_OC5_SetConfig+0xc8>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d007      	beq.n	800aa4e <TIM_OC5_SetConfig+0x82>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a15      	ldr	r2, [pc, #84]	@ (800aa98 <TIM_OC5_SetConfig+0xcc>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d003      	beq.n	800aa4e <TIM_OC5_SetConfig+0x82>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a14      	ldr	r2, [pc, #80]	@ (800aa9c <TIM_OC5_SetConfig+0xd0>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d109      	bne.n	800aa62 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	695b      	ldr	r3, [r3, #20]
 800aa5a:	021b      	lsls	r3, r3, #8
 800aa5c:	697a      	ldr	r2, [r7, #20]
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	697a      	ldr	r2, [r7, #20]
 800aa66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	685a      	ldr	r2, [r3, #4]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	693a      	ldr	r2, [r7, #16]
 800aa7a:	621a      	str	r2, [r3, #32]
}
 800aa7c:	bf00      	nop
 800aa7e:	371c      	adds	r7, #28
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr
 800aa88:	40012c00 	.word	0x40012c00
 800aa8c:	40013400 	.word	0x40013400
 800aa90:	40014000 	.word	0x40014000
 800aa94:	40014400 	.word	0x40014400
 800aa98:	40014800 	.word	0x40014800
 800aa9c:	40015000 	.word	0x40015000

0800aaa0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b087      	sub	sp, #28
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a1b      	ldr	r3, [r3, #32]
 800aaae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6a1b      	ldr	r3, [r3, #32]
 800aab4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aace:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	021b      	lsls	r3, r3, #8
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	4313      	orrs	r3, r2
 800aade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aae6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	051b      	lsls	r3, r3, #20
 800aaee:	693a      	ldr	r2, [r7, #16]
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a1a      	ldr	r2, [pc, #104]	@ (800ab60 <TIM_OC6_SetConfig+0xc0>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d013      	beq.n	800ab24 <TIM_OC6_SetConfig+0x84>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a19      	ldr	r2, [pc, #100]	@ (800ab64 <TIM_OC6_SetConfig+0xc4>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d00f      	beq.n	800ab24 <TIM_OC6_SetConfig+0x84>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4a18      	ldr	r2, [pc, #96]	@ (800ab68 <TIM_OC6_SetConfig+0xc8>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d00b      	beq.n	800ab24 <TIM_OC6_SetConfig+0x84>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4a17      	ldr	r2, [pc, #92]	@ (800ab6c <TIM_OC6_SetConfig+0xcc>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d007      	beq.n	800ab24 <TIM_OC6_SetConfig+0x84>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4a16      	ldr	r2, [pc, #88]	@ (800ab70 <TIM_OC6_SetConfig+0xd0>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d003      	beq.n	800ab24 <TIM_OC6_SetConfig+0x84>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a15      	ldr	r2, [pc, #84]	@ (800ab74 <TIM_OC6_SetConfig+0xd4>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d109      	bne.n	800ab38 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	695b      	ldr	r3, [r3, #20]
 800ab30:	029b      	lsls	r3, r3, #10
 800ab32:	697a      	ldr	r2, [r7, #20]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	697a      	ldr	r2, [r7, #20]
 800ab3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	685a      	ldr	r2, [r3, #4]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	693a      	ldr	r2, [r7, #16]
 800ab50:	621a      	str	r2, [r3, #32]
}
 800ab52:	bf00      	nop
 800ab54:	371c      	adds	r7, #28
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	40012c00 	.word	0x40012c00
 800ab64:	40013400 	.word	0x40013400
 800ab68:	40014000 	.word	0x40014000
 800ab6c:	40014400 	.word	0x40014400
 800ab70:	40014800 	.word	0x40014800
 800ab74:	40015000 	.word	0x40015000

0800ab78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b087      	sub	sp, #28
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6a1b      	ldr	r3, [r3, #32]
 800ab88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	f023 0201 	bic.w	r2, r3, #1
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	699b      	ldr	r3, [r3, #24]
 800ab9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	011b      	lsls	r3, r3, #4
 800aba8:	693a      	ldr	r2, [r7, #16]
 800abaa:	4313      	orrs	r3, r2
 800abac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	f023 030a 	bic.w	r3, r3, #10
 800abb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800abb6:	697a      	ldr	r2, [r7, #20]
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	4313      	orrs	r3, r2
 800abbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	693a      	ldr	r2, [r7, #16]
 800abc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	697a      	ldr	r2, [r7, #20]
 800abc8:	621a      	str	r2, [r3, #32]
}
 800abca:	bf00      	nop
 800abcc:	371c      	adds	r7, #28
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr

0800abd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abd6:	b480      	push	{r7}
 800abd8:	b087      	sub	sp, #28
 800abda:	af00      	add	r7, sp, #0
 800abdc:	60f8      	str	r0, [r7, #12]
 800abde:	60b9      	str	r1, [r7, #8]
 800abe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6a1b      	ldr	r3, [r3, #32]
 800abe6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6a1b      	ldr	r3, [r3, #32]
 800abec:	f023 0210 	bic.w	r2, r3, #16
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	699b      	ldr	r3, [r3, #24]
 800abf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ac00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	031b      	lsls	r3, r3, #12
 800ac06:	693a      	ldr	r2, [r7, #16]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ac12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	011b      	lsls	r3, r3, #4
 800ac18:	697a      	ldr	r2, [r7, #20]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	693a      	ldr	r2, [r7, #16]
 800ac22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	697a      	ldr	r2, [r7, #20]
 800ac28:	621a      	str	r2, [r3, #32]
}
 800ac2a:	bf00      	nop
 800ac2c:	371c      	adds	r7, #28
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac36:	b480      	push	{r7}
 800ac38:	b085      	sub	sp, #20
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
 800ac3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ac4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac52:	683a      	ldr	r2, [r7, #0]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	f043 0307 	orr.w	r3, r3, #7
 800ac5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	609a      	str	r2, [r3, #8]
}
 800ac64:	bf00      	nop
 800ac66:	3714      	adds	r7, #20
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b087      	sub	sp, #28
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	607a      	str	r2, [r7, #4]
 800ac7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ac8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	021a      	lsls	r2, r3, #8
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	431a      	orrs	r2, r3
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	697a      	ldr	r2, [r7, #20]
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	697a      	ldr	r2, [r7, #20]
 800aca2:	609a      	str	r2, [r3, #8]
}
 800aca4:	bf00      	nop
 800aca6:	371c      	adds	r7, #28
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b087      	sub	sp, #28
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	f003 031f 	and.w	r3, r3, #31
 800acc2:	2201      	movs	r2, #1
 800acc4:	fa02 f303 	lsl.w	r3, r2, r3
 800acc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6a1a      	ldr	r2, [r3, #32]
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	43db      	mvns	r3, r3
 800acd2:	401a      	ands	r2, r3
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	6a1a      	ldr	r2, [r3, #32]
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	f003 031f 	and.w	r3, r3, #31
 800ace2:	6879      	ldr	r1, [r7, #4]
 800ace4:	fa01 f303 	lsl.w	r3, r1, r3
 800ace8:	431a      	orrs	r2, r3
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	621a      	str	r2, [r3, #32]
}
 800acee:	bf00      	nop
 800acf0:	371c      	adds	r7, #28
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr
	...

0800acfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b085      	sub	sp, #20
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d101      	bne.n	800ad14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad10:	2302      	movs	r3, #2
 800ad12:	e074      	b.n	800adfe <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2202      	movs	r2, #2
 800ad20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a34      	ldr	r2, [pc, #208]	@ (800ae0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d009      	beq.n	800ad52 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a33      	ldr	r2, [pc, #204]	@ (800ae10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d004      	beq.n	800ad52 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a31      	ldr	r2, [pc, #196]	@ (800ae14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d108      	bne.n	800ad64 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ad58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	4313      	orrs	r3, r2
 800ad62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ad6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	4313      	orrs	r3, r2
 800ad78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	68fa      	ldr	r2, [r7, #12]
 800ad80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a21      	ldr	r2, [pc, #132]	@ (800ae0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d022      	beq.n	800add2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad94:	d01d      	beq.n	800add2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a1f      	ldr	r2, [pc, #124]	@ (800ae18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d018      	beq.n	800add2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a1d      	ldr	r2, [pc, #116]	@ (800ae1c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d013      	beq.n	800add2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4a1c      	ldr	r2, [pc, #112]	@ (800ae20 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d00e      	beq.n	800add2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a15      	ldr	r2, [pc, #84]	@ (800ae10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d009      	beq.n	800add2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a18      	ldr	r2, [pc, #96]	@ (800ae24 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d004      	beq.n	800add2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a11      	ldr	r2, [pc, #68]	@ (800ae14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d10c      	bne.n	800adec <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800add8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	689b      	ldr	r3, [r3, #8]
 800adde:	68ba      	ldr	r2, [r7, #8]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	68ba      	ldr	r2, [r7, #8]
 800adea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3714      	adds	r7, #20
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr
 800ae0a:	bf00      	nop
 800ae0c:	40012c00 	.word	0x40012c00
 800ae10:	40013400 	.word	0x40013400
 800ae14:	40015000 	.word	0x40015000
 800ae18:	40000400 	.word	0x40000400
 800ae1c:	40000800 	.word	0x40000800
 800ae20:	40000c00 	.word	0x40000c00
 800ae24:	40014000 	.word	0x40014000

0800ae28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b085      	sub	sp, #20
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ae32:	2300      	movs	r3, #0
 800ae34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d101      	bne.n	800ae44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ae40:	2302      	movs	r3, #2
 800ae42:	e078      	b.n	800af36 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2201      	movs	r2, #1
 800ae48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4313      	orrs	r3, r2
 800ae82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	695b      	ldr	r3, [r3, #20]
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	699b      	ldr	r3, [r3, #24]
 800aeb8:	041b      	lsls	r3, r3, #16
 800aeba:	4313      	orrs	r3, r2
 800aebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	69db      	ldr	r3, [r3, #28]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a1c      	ldr	r2, [pc, #112]	@ (800af44 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d009      	beq.n	800aeea <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a1b      	ldr	r2, [pc, #108]	@ (800af48 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d004      	beq.n	800aeea <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a19      	ldr	r2, [pc, #100]	@ (800af4c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d11c      	bne.n	800af24 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aef4:	051b      	lsls	r3, r3, #20
 800aef6:	4313      	orrs	r3, r2
 800aef8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	6a1b      	ldr	r3, [r3, #32]
 800af04:	4313      	orrs	r3, r2
 800af06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af12:	4313      	orrs	r3, r2
 800af14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af20:	4313      	orrs	r3, r2
 800af22:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3714      	adds	r7, #20
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	40012c00 	.word	0x40012c00
 800af48:	40013400 	.word	0x40013400
 800af4c:	40015000 	.word	0x40015000

0800af50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af58:	bf00      	nop
 800af5a:	370c      	adds	r7, #12
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af6c:	bf00      	nop
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800af80:	bf00      	nop
 800af82:	370c      	adds	r7, #12
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b083      	sub	sp, #12
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800afa8:	bf00      	nop
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800afbc:	bf00      	nop
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800afd0:	bf00      	nop
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d101      	bne.n	800afee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afea:	2301      	movs	r3, #1
 800afec:	e042      	b.n	800b074 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d106      	bne.n	800b006 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f7f8 fe0b 	bl	8003c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2224      	movs	r2, #36	@ 0x24
 800b00a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f022 0201 	bic.w	r2, r2, #1
 800b01c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b022:	2b00      	cmp	r3, #0
 800b024:	d002      	beq.n	800b02c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fb24 	bl	800b674 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 f825 	bl	800b07c <UART_SetConfig>
 800b032:	4603      	mov	r3, r0
 800b034:	2b01      	cmp	r3, #1
 800b036:	d101      	bne.n	800b03c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	e01b      	b.n	800b074 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	685a      	ldr	r2, [r3, #4]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b04a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	689a      	ldr	r2, [r3, #8]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b05a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f042 0201 	orr.w	r2, r2, #1
 800b06a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 fba3 	bl	800b7b8 <UART_CheckIdleState>
 800b072:	4603      	mov	r3, r0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b07c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b080:	b08c      	sub	sp, #48	@ 0x30
 800b082:	af00      	add	r7, sp, #0
 800b084:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b086:	2300      	movs	r3, #0
 800b088:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	689a      	ldr	r2, [r3, #8]
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	691b      	ldr	r3, [r3, #16]
 800b094:	431a      	orrs	r2, r3
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	695b      	ldr	r3, [r3, #20]
 800b09a:	431a      	orrs	r2, r3
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	69db      	ldr	r3, [r3, #28]
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	4baa      	ldr	r3, [pc, #680]	@ (800b354 <UART_SetConfig+0x2d8>)
 800b0ac:	4013      	ands	r3, r2
 800b0ae:	697a      	ldr	r2, [r7, #20]
 800b0b0:	6812      	ldr	r2, [r2, #0]
 800b0b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0b4:	430b      	orrs	r3, r1
 800b0b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	68da      	ldr	r2, [r3, #12]
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	430a      	orrs	r2, r1
 800b0cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	699b      	ldr	r3, [r3, #24]
 800b0d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a9f      	ldr	r2, [pc, #636]	@ (800b358 <UART_SetConfig+0x2dc>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d004      	beq.n	800b0e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	6a1b      	ldr	r3, [r3, #32]
 800b0e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b0f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b0f6:	697a      	ldr	r2, [r7, #20]
 800b0f8:	6812      	ldr	r2, [r2, #0]
 800b0fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0fc:	430b      	orrs	r3, r1
 800b0fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b106:	f023 010f 	bic.w	r1, r3, #15
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	430a      	orrs	r2, r1
 800b114:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a90      	ldr	r2, [pc, #576]	@ (800b35c <UART_SetConfig+0x2e0>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d125      	bne.n	800b16c <UART_SetConfig+0xf0>
 800b120:	4b8f      	ldr	r3, [pc, #572]	@ (800b360 <UART_SetConfig+0x2e4>)
 800b122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b126:	f003 0303 	and.w	r3, r3, #3
 800b12a:	2b03      	cmp	r3, #3
 800b12c:	d81a      	bhi.n	800b164 <UART_SetConfig+0xe8>
 800b12e:	a201      	add	r2, pc, #4	@ (adr r2, 800b134 <UART_SetConfig+0xb8>)
 800b130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b134:	0800b145 	.word	0x0800b145
 800b138:	0800b155 	.word	0x0800b155
 800b13c:	0800b14d 	.word	0x0800b14d
 800b140:	0800b15d 	.word	0x0800b15d
 800b144:	2301      	movs	r3, #1
 800b146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b14a:	e116      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b14c:	2302      	movs	r3, #2
 800b14e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b152:	e112      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b154:	2304      	movs	r3, #4
 800b156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b15a:	e10e      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b15c:	2308      	movs	r3, #8
 800b15e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b162:	e10a      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b164:	2310      	movs	r3, #16
 800b166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b16a:	e106      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a7c      	ldr	r2, [pc, #496]	@ (800b364 <UART_SetConfig+0x2e8>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d138      	bne.n	800b1e8 <UART_SetConfig+0x16c>
 800b176:	4b7a      	ldr	r3, [pc, #488]	@ (800b360 <UART_SetConfig+0x2e4>)
 800b178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b17c:	f003 030c 	and.w	r3, r3, #12
 800b180:	2b0c      	cmp	r3, #12
 800b182:	d82d      	bhi.n	800b1e0 <UART_SetConfig+0x164>
 800b184:	a201      	add	r2, pc, #4	@ (adr r2, 800b18c <UART_SetConfig+0x110>)
 800b186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18a:	bf00      	nop
 800b18c:	0800b1c1 	.word	0x0800b1c1
 800b190:	0800b1e1 	.word	0x0800b1e1
 800b194:	0800b1e1 	.word	0x0800b1e1
 800b198:	0800b1e1 	.word	0x0800b1e1
 800b19c:	0800b1d1 	.word	0x0800b1d1
 800b1a0:	0800b1e1 	.word	0x0800b1e1
 800b1a4:	0800b1e1 	.word	0x0800b1e1
 800b1a8:	0800b1e1 	.word	0x0800b1e1
 800b1ac:	0800b1c9 	.word	0x0800b1c9
 800b1b0:	0800b1e1 	.word	0x0800b1e1
 800b1b4:	0800b1e1 	.word	0x0800b1e1
 800b1b8:	0800b1e1 	.word	0x0800b1e1
 800b1bc:	0800b1d9 	.word	0x0800b1d9
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1c6:	e0d8      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b1c8:	2302      	movs	r3, #2
 800b1ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1ce:	e0d4      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b1d0:	2304      	movs	r3, #4
 800b1d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1d6:	e0d0      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b1d8:	2308      	movs	r3, #8
 800b1da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1de:	e0cc      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b1e0:	2310      	movs	r3, #16
 800b1e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1e6:	e0c8      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a5e      	ldr	r2, [pc, #376]	@ (800b368 <UART_SetConfig+0x2ec>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d125      	bne.n	800b23e <UART_SetConfig+0x1c2>
 800b1f2:	4b5b      	ldr	r3, [pc, #364]	@ (800b360 <UART_SetConfig+0x2e4>)
 800b1f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b1fc:	2b30      	cmp	r3, #48	@ 0x30
 800b1fe:	d016      	beq.n	800b22e <UART_SetConfig+0x1b2>
 800b200:	2b30      	cmp	r3, #48	@ 0x30
 800b202:	d818      	bhi.n	800b236 <UART_SetConfig+0x1ba>
 800b204:	2b20      	cmp	r3, #32
 800b206:	d00a      	beq.n	800b21e <UART_SetConfig+0x1a2>
 800b208:	2b20      	cmp	r3, #32
 800b20a:	d814      	bhi.n	800b236 <UART_SetConfig+0x1ba>
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d002      	beq.n	800b216 <UART_SetConfig+0x19a>
 800b210:	2b10      	cmp	r3, #16
 800b212:	d008      	beq.n	800b226 <UART_SetConfig+0x1aa>
 800b214:	e00f      	b.n	800b236 <UART_SetConfig+0x1ba>
 800b216:	2300      	movs	r3, #0
 800b218:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b21c:	e0ad      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b21e:	2302      	movs	r3, #2
 800b220:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b224:	e0a9      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b226:	2304      	movs	r3, #4
 800b228:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b22c:	e0a5      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b22e:	2308      	movs	r3, #8
 800b230:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b234:	e0a1      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b236:	2310      	movs	r3, #16
 800b238:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b23c:	e09d      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a4a      	ldr	r2, [pc, #296]	@ (800b36c <UART_SetConfig+0x2f0>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d125      	bne.n	800b294 <UART_SetConfig+0x218>
 800b248:	4b45      	ldr	r3, [pc, #276]	@ (800b360 <UART_SetConfig+0x2e4>)
 800b24a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b24e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b252:	2bc0      	cmp	r3, #192	@ 0xc0
 800b254:	d016      	beq.n	800b284 <UART_SetConfig+0x208>
 800b256:	2bc0      	cmp	r3, #192	@ 0xc0
 800b258:	d818      	bhi.n	800b28c <UART_SetConfig+0x210>
 800b25a:	2b80      	cmp	r3, #128	@ 0x80
 800b25c:	d00a      	beq.n	800b274 <UART_SetConfig+0x1f8>
 800b25e:	2b80      	cmp	r3, #128	@ 0x80
 800b260:	d814      	bhi.n	800b28c <UART_SetConfig+0x210>
 800b262:	2b00      	cmp	r3, #0
 800b264:	d002      	beq.n	800b26c <UART_SetConfig+0x1f0>
 800b266:	2b40      	cmp	r3, #64	@ 0x40
 800b268:	d008      	beq.n	800b27c <UART_SetConfig+0x200>
 800b26a:	e00f      	b.n	800b28c <UART_SetConfig+0x210>
 800b26c:	2300      	movs	r3, #0
 800b26e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b272:	e082      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b274:	2302      	movs	r3, #2
 800b276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b27a:	e07e      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b27c:	2304      	movs	r3, #4
 800b27e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b282:	e07a      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b284:	2308      	movs	r3, #8
 800b286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b28a:	e076      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b28c:	2310      	movs	r3, #16
 800b28e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b292:	e072      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4a35      	ldr	r2, [pc, #212]	@ (800b370 <UART_SetConfig+0x2f4>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d12a      	bne.n	800b2f4 <UART_SetConfig+0x278>
 800b29e:	4b30      	ldr	r3, [pc, #192]	@ (800b360 <UART_SetConfig+0x2e4>)
 800b2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b2a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2ac:	d01a      	beq.n	800b2e4 <UART_SetConfig+0x268>
 800b2ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2b2:	d81b      	bhi.n	800b2ec <UART_SetConfig+0x270>
 800b2b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2b8:	d00c      	beq.n	800b2d4 <UART_SetConfig+0x258>
 800b2ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2be:	d815      	bhi.n	800b2ec <UART_SetConfig+0x270>
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d003      	beq.n	800b2cc <UART_SetConfig+0x250>
 800b2c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2c8:	d008      	beq.n	800b2dc <UART_SetConfig+0x260>
 800b2ca:	e00f      	b.n	800b2ec <UART_SetConfig+0x270>
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2d2:	e052      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b2d4:	2302      	movs	r3, #2
 800b2d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2da:	e04e      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b2dc:	2304      	movs	r3, #4
 800b2de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2e2:	e04a      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b2e4:	2308      	movs	r3, #8
 800b2e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2ea:	e046      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b2ec:	2310      	movs	r3, #16
 800b2ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2f2:	e042      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a17      	ldr	r2, [pc, #92]	@ (800b358 <UART_SetConfig+0x2dc>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d13a      	bne.n	800b374 <UART_SetConfig+0x2f8>
 800b2fe:	4b18      	ldr	r3, [pc, #96]	@ (800b360 <UART_SetConfig+0x2e4>)
 800b300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b304:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b308:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b30c:	d01a      	beq.n	800b344 <UART_SetConfig+0x2c8>
 800b30e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b312:	d81b      	bhi.n	800b34c <UART_SetConfig+0x2d0>
 800b314:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b318:	d00c      	beq.n	800b334 <UART_SetConfig+0x2b8>
 800b31a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b31e:	d815      	bhi.n	800b34c <UART_SetConfig+0x2d0>
 800b320:	2b00      	cmp	r3, #0
 800b322:	d003      	beq.n	800b32c <UART_SetConfig+0x2b0>
 800b324:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b328:	d008      	beq.n	800b33c <UART_SetConfig+0x2c0>
 800b32a:	e00f      	b.n	800b34c <UART_SetConfig+0x2d0>
 800b32c:	2300      	movs	r3, #0
 800b32e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b332:	e022      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b334:	2302      	movs	r3, #2
 800b336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b33a:	e01e      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b33c:	2304      	movs	r3, #4
 800b33e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b342:	e01a      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b344:	2308      	movs	r3, #8
 800b346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b34a:	e016      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b34c:	2310      	movs	r3, #16
 800b34e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b352:	e012      	b.n	800b37a <UART_SetConfig+0x2fe>
 800b354:	cfff69f3 	.word	0xcfff69f3
 800b358:	40008000 	.word	0x40008000
 800b35c:	40013800 	.word	0x40013800
 800b360:	40021000 	.word	0x40021000
 800b364:	40004400 	.word	0x40004400
 800b368:	40004800 	.word	0x40004800
 800b36c:	40004c00 	.word	0x40004c00
 800b370:	40005000 	.word	0x40005000
 800b374:	2310      	movs	r3, #16
 800b376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4aae      	ldr	r2, [pc, #696]	@ (800b638 <UART_SetConfig+0x5bc>)
 800b380:	4293      	cmp	r3, r2
 800b382:	f040 8097 	bne.w	800b4b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b386:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b38a:	2b08      	cmp	r3, #8
 800b38c:	d823      	bhi.n	800b3d6 <UART_SetConfig+0x35a>
 800b38e:	a201      	add	r2, pc, #4	@ (adr r2, 800b394 <UART_SetConfig+0x318>)
 800b390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b394:	0800b3b9 	.word	0x0800b3b9
 800b398:	0800b3d7 	.word	0x0800b3d7
 800b39c:	0800b3c1 	.word	0x0800b3c1
 800b3a0:	0800b3d7 	.word	0x0800b3d7
 800b3a4:	0800b3c7 	.word	0x0800b3c7
 800b3a8:	0800b3d7 	.word	0x0800b3d7
 800b3ac:	0800b3d7 	.word	0x0800b3d7
 800b3b0:	0800b3d7 	.word	0x0800b3d7
 800b3b4:	0800b3cf 	.word	0x0800b3cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3b8:	f7fd fec6 	bl	8009148 <HAL_RCC_GetPCLK1Freq>
 800b3bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b3be:	e010      	b.n	800b3e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b3c0:	4b9e      	ldr	r3, [pc, #632]	@ (800b63c <UART_SetConfig+0x5c0>)
 800b3c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b3c4:	e00d      	b.n	800b3e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3c6:	f7fd fe51 	bl	800906c <HAL_RCC_GetSysClockFreq>
 800b3ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b3cc:	e009      	b.n	800b3e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b3d4:	e005      	b.n	800b3e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b3e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	f000 8130 	beq.w	800b64a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3ee:	4a94      	ldr	r2, [pc, #592]	@ (800b640 <UART_SetConfig+0x5c4>)
 800b3f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	685a      	ldr	r2, [r3, #4]
 800b402:	4613      	mov	r3, r2
 800b404:	005b      	lsls	r3, r3, #1
 800b406:	4413      	add	r3, r2
 800b408:	69ba      	ldr	r2, [r7, #24]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d305      	bcc.n	800b41a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b414:	69ba      	ldr	r2, [r7, #24]
 800b416:	429a      	cmp	r2, r3
 800b418:	d903      	bls.n	800b422 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b41a:	2301      	movs	r3, #1
 800b41c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b420:	e113      	b.n	800b64a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b424:	2200      	movs	r2, #0
 800b426:	60bb      	str	r3, [r7, #8]
 800b428:	60fa      	str	r2, [r7, #12]
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b42e:	4a84      	ldr	r2, [pc, #528]	@ (800b640 <UART_SetConfig+0x5c4>)
 800b430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b434:	b29b      	uxth	r3, r3
 800b436:	2200      	movs	r2, #0
 800b438:	603b      	str	r3, [r7, #0]
 800b43a:	607a      	str	r2, [r7, #4]
 800b43c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b440:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b444:	f7f5 fc48 	bl	8000cd8 <__aeabi_uldivmod>
 800b448:	4602      	mov	r2, r0
 800b44a:	460b      	mov	r3, r1
 800b44c:	4610      	mov	r0, r2
 800b44e:	4619      	mov	r1, r3
 800b450:	f04f 0200 	mov.w	r2, #0
 800b454:	f04f 0300 	mov.w	r3, #0
 800b458:	020b      	lsls	r3, r1, #8
 800b45a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b45e:	0202      	lsls	r2, r0, #8
 800b460:	6979      	ldr	r1, [r7, #20]
 800b462:	6849      	ldr	r1, [r1, #4]
 800b464:	0849      	lsrs	r1, r1, #1
 800b466:	2000      	movs	r0, #0
 800b468:	460c      	mov	r4, r1
 800b46a:	4605      	mov	r5, r0
 800b46c:	eb12 0804 	adds.w	r8, r2, r4
 800b470:	eb43 0905 	adc.w	r9, r3, r5
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	469a      	mov	sl, r3
 800b47c:	4693      	mov	fp, r2
 800b47e:	4652      	mov	r2, sl
 800b480:	465b      	mov	r3, fp
 800b482:	4640      	mov	r0, r8
 800b484:	4649      	mov	r1, r9
 800b486:	f7f5 fc27 	bl	8000cd8 <__aeabi_uldivmod>
 800b48a:	4602      	mov	r2, r0
 800b48c:	460b      	mov	r3, r1
 800b48e:	4613      	mov	r3, r2
 800b490:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b492:	6a3b      	ldr	r3, [r7, #32]
 800b494:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b498:	d308      	bcc.n	800b4ac <UART_SetConfig+0x430>
 800b49a:	6a3b      	ldr	r3, [r7, #32]
 800b49c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4a0:	d204      	bcs.n	800b4ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	6a3a      	ldr	r2, [r7, #32]
 800b4a8:	60da      	str	r2, [r3, #12]
 800b4aa:	e0ce      	b.n	800b64a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b4b2:	e0ca      	b.n	800b64a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	69db      	ldr	r3, [r3, #28]
 800b4b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b4bc:	d166      	bne.n	800b58c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b4be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b4c2:	2b08      	cmp	r3, #8
 800b4c4:	d827      	bhi.n	800b516 <UART_SetConfig+0x49a>
 800b4c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b4cc <UART_SetConfig+0x450>)
 800b4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4cc:	0800b4f1 	.word	0x0800b4f1
 800b4d0:	0800b4f9 	.word	0x0800b4f9
 800b4d4:	0800b501 	.word	0x0800b501
 800b4d8:	0800b517 	.word	0x0800b517
 800b4dc:	0800b507 	.word	0x0800b507
 800b4e0:	0800b517 	.word	0x0800b517
 800b4e4:	0800b517 	.word	0x0800b517
 800b4e8:	0800b517 	.word	0x0800b517
 800b4ec:	0800b50f 	.word	0x0800b50f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4f0:	f7fd fe2a 	bl	8009148 <HAL_RCC_GetPCLK1Freq>
 800b4f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b4f6:	e014      	b.n	800b522 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4f8:	f7fd fe3c 	bl	8009174 <HAL_RCC_GetPCLK2Freq>
 800b4fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b4fe:	e010      	b.n	800b522 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b500:	4b4e      	ldr	r3, [pc, #312]	@ (800b63c <UART_SetConfig+0x5c0>)
 800b502:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b504:	e00d      	b.n	800b522 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b506:	f7fd fdb1 	bl	800906c <HAL_RCC_GetSysClockFreq>
 800b50a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b50c:	e009      	b.n	800b522 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b50e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b512:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b514:	e005      	b.n	800b522 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b516:	2300      	movs	r3, #0
 800b518:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b51a:	2301      	movs	r3, #1
 800b51c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b520:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b524:	2b00      	cmp	r3, #0
 800b526:	f000 8090 	beq.w	800b64a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b52e:	4a44      	ldr	r2, [pc, #272]	@ (800b640 <UART_SetConfig+0x5c4>)
 800b530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b534:	461a      	mov	r2, r3
 800b536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b538:	fbb3 f3f2 	udiv	r3, r3, r2
 800b53c:	005a      	lsls	r2, r3, #1
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	085b      	lsrs	r3, r3, #1
 800b544:	441a      	add	r2, r3
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b54e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b550:	6a3b      	ldr	r3, [r7, #32]
 800b552:	2b0f      	cmp	r3, #15
 800b554:	d916      	bls.n	800b584 <UART_SetConfig+0x508>
 800b556:	6a3b      	ldr	r3, [r7, #32]
 800b558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b55c:	d212      	bcs.n	800b584 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b55e:	6a3b      	ldr	r3, [r7, #32]
 800b560:	b29b      	uxth	r3, r3
 800b562:	f023 030f 	bic.w	r3, r3, #15
 800b566:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b568:	6a3b      	ldr	r3, [r7, #32]
 800b56a:	085b      	lsrs	r3, r3, #1
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	f003 0307 	and.w	r3, r3, #7
 800b572:	b29a      	uxth	r2, r3
 800b574:	8bfb      	ldrh	r3, [r7, #30]
 800b576:	4313      	orrs	r3, r2
 800b578:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	8bfa      	ldrh	r2, [r7, #30]
 800b580:	60da      	str	r2, [r3, #12]
 800b582:	e062      	b.n	800b64a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b584:	2301      	movs	r3, #1
 800b586:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b58a:	e05e      	b.n	800b64a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b58c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b590:	2b08      	cmp	r3, #8
 800b592:	d828      	bhi.n	800b5e6 <UART_SetConfig+0x56a>
 800b594:	a201      	add	r2, pc, #4	@ (adr r2, 800b59c <UART_SetConfig+0x520>)
 800b596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b59a:	bf00      	nop
 800b59c:	0800b5c1 	.word	0x0800b5c1
 800b5a0:	0800b5c9 	.word	0x0800b5c9
 800b5a4:	0800b5d1 	.word	0x0800b5d1
 800b5a8:	0800b5e7 	.word	0x0800b5e7
 800b5ac:	0800b5d7 	.word	0x0800b5d7
 800b5b0:	0800b5e7 	.word	0x0800b5e7
 800b5b4:	0800b5e7 	.word	0x0800b5e7
 800b5b8:	0800b5e7 	.word	0x0800b5e7
 800b5bc:	0800b5df 	.word	0x0800b5df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5c0:	f7fd fdc2 	bl	8009148 <HAL_RCC_GetPCLK1Freq>
 800b5c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b5c6:	e014      	b.n	800b5f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5c8:	f7fd fdd4 	bl	8009174 <HAL_RCC_GetPCLK2Freq>
 800b5cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b5ce:	e010      	b.n	800b5f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b5d0:	4b1a      	ldr	r3, [pc, #104]	@ (800b63c <UART_SetConfig+0x5c0>)
 800b5d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b5d4:	e00d      	b.n	800b5f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b5d6:	f7fd fd49 	bl	800906c <HAL_RCC_GetSysClockFreq>
 800b5da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b5dc:	e009      	b.n	800b5f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b5e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b5e4:	e005      	b.n	800b5f2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b5f0:	bf00      	nop
    }

    if (pclk != 0U)
 800b5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d028      	beq.n	800b64a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5fc:	4a10      	ldr	r2, [pc, #64]	@ (800b640 <UART_SetConfig+0x5c4>)
 800b5fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b602:	461a      	mov	r2, r3
 800b604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b606:	fbb3 f2f2 	udiv	r2, r3, r2
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	085b      	lsrs	r3, r3, #1
 800b610:	441a      	add	r2, r3
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	fbb2 f3f3 	udiv	r3, r2, r3
 800b61a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b61c:	6a3b      	ldr	r3, [r7, #32]
 800b61e:	2b0f      	cmp	r3, #15
 800b620:	d910      	bls.n	800b644 <UART_SetConfig+0x5c8>
 800b622:	6a3b      	ldr	r3, [r7, #32]
 800b624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b628:	d20c      	bcs.n	800b644 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b62a:	6a3b      	ldr	r3, [r7, #32]
 800b62c:	b29a      	uxth	r2, r3
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	60da      	str	r2, [r3, #12]
 800b634:	e009      	b.n	800b64a <UART_SetConfig+0x5ce>
 800b636:	bf00      	nop
 800b638:	40008000 	.word	0x40008000
 800b63c:	00f42400 	.word	0x00f42400
 800b640:	08016d78 	.word	0x08016d78
      }
      else
      {
        ret = HAL_ERROR;
 800b644:	2301      	movs	r3, #1
 800b646:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	2201      	movs	r2, #1
 800b64e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	2201      	movs	r2, #1
 800b656:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	2200      	movs	r2, #0
 800b65e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	2200      	movs	r2, #0
 800b664:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b666:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3730      	adds	r7, #48	@ 0x30
 800b66e:	46bd      	mov	sp, r7
 800b670:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b674 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b680:	f003 0308 	and.w	r3, r3, #8
 800b684:	2b00      	cmp	r3, #0
 800b686:	d00a      	beq.n	800b69e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	430a      	orrs	r2, r1
 800b69c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6a2:	f003 0301 	and.w	r3, r3, #1
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00a      	beq.n	800b6c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	430a      	orrs	r2, r1
 800b6be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6c4:	f003 0302 	and.w	r3, r3, #2
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00a      	beq.n	800b6e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	430a      	orrs	r2, r1
 800b6e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6e6:	f003 0304 	and.w	r3, r3, #4
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00a      	beq.n	800b704 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	430a      	orrs	r2, r1
 800b702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b708:	f003 0310 	and.w	r3, r3, #16
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d00a      	beq.n	800b726 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	430a      	orrs	r2, r1
 800b724:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b72a:	f003 0320 	and.w	r3, r3, #32
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d00a      	beq.n	800b748 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	689b      	ldr	r3, [r3, #8]
 800b738:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	430a      	orrs	r2, r1
 800b746:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b74c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b750:	2b00      	cmp	r3, #0
 800b752:	d01a      	beq.n	800b78a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	430a      	orrs	r2, r1
 800b768:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b76e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b772:	d10a      	bne.n	800b78a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	430a      	orrs	r2, r1
 800b788:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b78e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00a      	beq.n	800b7ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	430a      	orrs	r2, r1
 800b7aa:	605a      	str	r2, [r3, #4]
  }
}
 800b7ac:	bf00      	nop
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b098      	sub	sp, #96	@ 0x60
 800b7bc:	af02      	add	r7, sp, #8
 800b7be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b7c8:	f7f8 fc7a 	bl	80040c0 <HAL_GetTick>
 800b7cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f003 0308 	and.w	r3, r3, #8
 800b7d8:	2b08      	cmp	r3, #8
 800b7da:	d12f      	bne.n	800b83c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b7e0:	9300      	str	r3, [sp, #0]
 800b7e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 f88e 	bl	800b90c <UART_WaitOnFlagUntilTimeout>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d022      	beq.n	800b83c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7fe:	e853 3f00 	ldrex	r3, [r3]
 800b802:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b806:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b80a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	461a      	mov	r2, r3
 800b812:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b814:	647b      	str	r3, [r7, #68]	@ 0x44
 800b816:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b818:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b81a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b81c:	e841 2300 	strex	r3, r2, [r1]
 800b820:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b824:	2b00      	cmp	r3, #0
 800b826:	d1e6      	bne.n	800b7f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2220      	movs	r2, #32
 800b82c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b838:	2303      	movs	r3, #3
 800b83a:	e063      	b.n	800b904 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f003 0304 	and.w	r3, r3, #4
 800b846:	2b04      	cmp	r3, #4
 800b848:	d149      	bne.n	800b8de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b84a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b84e:	9300      	str	r3, [sp, #0]
 800b850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b852:	2200      	movs	r2, #0
 800b854:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 f857 	bl	800b90c <UART_WaitOnFlagUntilTimeout>
 800b85e:	4603      	mov	r3, r0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d03c      	beq.n	800b8de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b86c:	e853 3f00 	ldrex	r3, [r3]
 800b870:	623b      	str	r3, [r7, #32]
   return(result);
 800b872:	6a3b      	ldr	r3, [r7, #32]
 800b874:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b878:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	461a      	mov	r2, r3
 800b880:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b882:	633b      	str	r3, [r7, #48]	@ 0x30
 800b884:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b886:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b88a:	e841 2300 	strex	r3, r2, [r1]
 800b88e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1e6      	bne.n	800b864 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	3308      	adds	r3, #8
 800b89c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	e853 3f00 	ldrex	r3, [r3]
 800b8a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f023 0301 	bic.w	r3, r3, #1
 800b8ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	3308      	adds	r3, #8
 800b8b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8b6:	61fa      	str	r2, [r7, #28]
 800b8b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ba:	69b9      	ldr	r1, [r7, #24]
 800b8bc:	69fa      	ldr	r2, [r7, #28]
 800b8be:	e841 2300 	strex	r3, r2, [r1]
 800b8c2:	617b      	str	r3, [r7, #20]
   return(result);
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d1e5      	bne.n	800b896 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2220      	movs	r2, #32
 800b8ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8da:	2303      	movs	r3, #3
 800b8dc:	e012      	b.n	800b904 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2220      	movs	r2, #32
 800b8e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2220      	movs	r2, #32
 800b8ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b902:	2300      	movs	r3, #0
}
 800b904:	4618      	mov	r0, r3
 800b906:	3758      	adds	r7, #88	@ 0x58
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	603b      	str	r3, [r7, #0]
 800b918:	4613      	mov	r3, r2
 800b91a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b91c:	e04f      	b.n	800b9be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b91e:	69bb      	ldr	r3, [r7, #24]
 800b920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b924:	d04b      	beq.n	800b9be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b926:	f7f8 fbcb 	bl	80040c0 <HAL_GetTick>
 800b92a:	4602      	mov	r2, r0
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	1ad3      	subs	r3, r2, r3
 800b930:	69ba      	ldr	r2, [r7, #24]
 800b932:	429a      	cmp	r2, r3
 800b934:	d302      	bcc.n	800b93c <UART_WaitOnFlagUntilTimeout+0x30>
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d101      	bne.n	800b940 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b93c:	2303      	movs	r3, #3
 800b93e:	e04e      	b.n	800b9de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f003 0304 	and.w	r3, r3, #4
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d037      	beq.n	800b9be <UART_WaitOnFlagUntilTimeout+0xb2>
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	2b80      	cmp	r3, #128	@ 0x80
 800b952:	d034      	beq.n	800b9be <UART_WaitOnFlagUntilTimeout+0xb2>
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	2b40      	cmp	r3, #64	@ 0x40
 800b958:	d031      	beq.n	800b9be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	69db      	ldr	r3, [r3, #28]
 800b960:	f003 0308 	and.w	r3, r3, #8
 800b964:	2b08      	cmp	r3, #8
 800b966:	d110      	bne.n	800b98a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	2208      	movs	r2, #8
 800b96e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b970:	68f8      	ldr	r0, [r7, #12]
 800b972:	f000 f838 	bl	800b9e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2208      	movs	r2, #8
 800b97a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2200      	movs	r2, #0
 800b982:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b986:	2301      	movs	r3, #1
 800b988:	e029      	b.n	800b9de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	69db      	ldr	r3, [r3, #28]
 800b990:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b994:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b998:	d111      	bne.n	800b9be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b9a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f000 f81e 	bl	800b9e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2220      	movs	r2, #32
 800b9ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b9ba:	2303      	movs	r3, #3
 800b9bc:	e00f      	b.n	800b9de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	69da      	ldr	r2, [r3, #28]
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	4013      	ands	r3, r2
 800b9c8:	68ba      	ldr	r2, [r7, #8]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	bf0c      	ite	eq
 800b9ce:	2301      	moveq	r3, #1
 800b9d0:	2300      	movne	r3, #0
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	79fb      	ldrb	r3, [r7, #7]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d0a0      	beq.n	800b91e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b9dc:	2300      	movs	r3, #0
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3710      	adds	r7, #16
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}

0800b9e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b9e6:	b480      	push	{r7}
 800b9e8:	b095      	sub	sp, #84	@ 0x54
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9f6:	e853 3f00 	ldrex	r3, [r3]
 800b9fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	461a      	mov	r2, r3
 800ba0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba0c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba14:	e841 2300 	strex	r3, r2, [r1]
 800ba18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d1e6      	bne.n	800b9ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	3308      	adds	r3, #8
 800ba26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba28:	6a3b      	ldr	r3, [r7, #32]
 800ba2a:	e853 3f00 	ldrex	r3, [r3]
 800ba2e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba36:	f023 0301 	bic.w	r3, r3, #1
 800ba3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	3308      	adds	r3, #8
 800ba42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba4c:	e841 2300 	strex	r3, r2, [r1]
 800ba50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d1e3      	bne.n	800ba20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d118      	bne.n	800ba92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	e853 3f00 	ldrex	r3, [r3]
 800ba6c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	f023 0310 	bic.w	r3, r3, #16
 800ba74:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba7e:	61bb      	str	r3, [r7, #24]
 800ba80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba82:	6979      	ldr	r1, [r7, #20]
 800ba84:	69ba      	ldr	r2, [r7, #24]
 800ba86:	e841 2300 	strex	r3, r2, [r1]
 800ba8a:	613b      	str	r3, [r7, #16]
   return(result);
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d1e6      	bne.n	800ba60 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2220      	movs	r2, #32
 800ba96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800baa6:	bf00      	nop
 800baa8:	3754      	adds	r7, #84	@ 0x54
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr

0800bab2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bab2:	b480      	push	{r7}
 800bab4:	b085      	sub	sp, #20
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d101      	bne.n	800bac8 <HAL_UARTEx_DisableFifoMode+0x16>
 800bac4:	2302      	movs	r3, #2
 800bac6:	e027      	b.n	800bb18 <HAL_UARTEx_DisableFifoMode+0x66>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2201      	movs	r2, #1
 800bacc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2224      	movs	r2, #36	@ 0x24
 800bad4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f022 0201 	bic.w	r2, r2, #1
 800baee:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800baf6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	68fa      	ldr	r2, [r7, #12]
 800bb04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2220      	movs	r2, #32
 800bb0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb16:	2300      	movs	r3, #0
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3714      	adds	r7, #20
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr

0800bb24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b084      	sub	sp, #16
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d101      	bne.n	800bb3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb38:	2302      	movs	r3, #2
 800bb3a:	e02d      	b.n	800bb98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2224      	movs	r2, #36	@ 0x24
 800bb48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f022 0201 	bic.w	r2, r2, #1
 800bb62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	683a      	ldr	r2, [r7, #0]
 800bb74:	430a      	orrs	r2, r1
 800bb76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 f84f 	bl	800bc1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2220      	movs	r2, #32
 800bb8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb96:	2300      	movs	r3, #0
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d101      	bne.n	800bbb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bbb4:	2302      	movs	r3, #2
 800bbb6:	e02d      	b.n	800bc14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2224      	movs	r2, #36	@ 0x24
 800bbc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	681a      	ldr	r2, [r3, #0]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f022 0201 	bic.w	r2, r2, #1
 800bbde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	683a      	ldr	r2, [r7, #0]
 800bbf0:	430a      	orrs	r2, r1
 800bbf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 f811 	bl	800bc1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	68fa      	ldr	r2, [r7, #12]
 800bc00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2220      	movs	r2, #32
 800bc06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc12:	2300      	movs	r3, #0
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d108      	bne.n	800bc3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2201      	movs	r2, #1
 800bc30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2201      	movs	r2, #1
 800bc38:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc3c:	e031      	b.n	800bca2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc3e:	2308      	movs	r3, #8
 800bc40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc42:	2308      	movs	r3, #8
 800bc44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	689b      	ldr	r3, [r3, #8]
 800bc4c:	0e5b      	lsrs	r3, r3, #25
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	f003 0307 	and.w	r3, r3, #7
 800bc54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	0f5b      	lsrs	r3, r3, #29
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	f003 0307 	and.w	r3, r3, #7
 800bc64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc66:	7bbb      	ldrb	r3, [r7, #14]
 800bc68:	7b3a      	ldrb	r2, [r7, #12]
 800bc6a:	4911      	ldr	r1, [pc, #68]	@ (800bcb0 <UARTEx_SetNbDataToProcess+0x94>)
 800bc6c:	5c8a      	ldrb	r2, [r1, r2]
 800bc6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc72:	7b3a      	ldrb	r2, [r7, #12]
 800bc74:	490f      	ldr	r1, [pc, #60]	@ (800bcb4 <UARTEx_SetNbDataToProcess+0x98>)
 800bc76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc78:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc84:	7bfb      	ldrb	r3, [r7, #15]
 800bc86:	7b7a      	ldrb	r2, [r7, #13]
 800bc88:	4909      	ldr	r1, [pc, #36]	@ (800bcb0 <UARTEx_SetNbDataToProcess+0x94>)
 800bc8a:	5c8a      	ldrb	r2, [r1, r2]
 800bc8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc90:	7b7a      	ldrb	r2, [r7, #13]
 800bc92:	4908      	ldr	r1, [pc, #32]	@ (800bcb4 <UARTEx_SetNbDataToProcess+0x98>)
 800bc94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc96:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc9a:	b29a      	uxth	r2, r3
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bca2:	bf00      	nop
 800bca4:	3714      	adds	r7, #20
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop
 800bcb0:	08016d90 	.word	0x08016d90
 800bcb4:	08016d98 	.word	0x08016d98

0800bcb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b085      	sub	sp, #20
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bcc8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bccc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bcd8:	2300      	movs	r3, #0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3714      	adds	r7, #20
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr

0800bce6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800bce6:	b480      	push	{r7}
 800bce8:	b085      	sub	sp, #20
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bcee:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bcf2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	43db      	mvns	r3, r3
 800bd02:	b29b      	uxth	r3, r3
 800bd04:	4013      	ands	r3, r2
 800bd06:	b29a      	uxth	r2, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bd0e:	2300      	movs	r3, #0
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3714      	adds	r7, #20
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b085      	sub	sp, #20
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	1d3b      	adds	r3, r7, #4
 800bd26:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2200      	movs	r2, #0
 800bd46:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800bd4a:	2300      	movs	r3, #0
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3714      	adds	r7, #20
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr

0800bd58 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b09d      	sub	sp, #116	@ 0x74
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bd62:	2300      	movs	r3, #0
 800bd64:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	881b      	ldrh	r3, [r3, #0]
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800bd7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd7e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	78db      	ldrb	r3, [r3, #3]
 800bd86:	2b03      	cmp	r3, #3
 800bd88:	d81f      	bhi.n	800bdca <USB_ActivateEndpoint+0x72>
 800bd8a:	a201      	add	r2, pc, #4	@ (adr r2, 800bd90 <USB_ActivateEndpoint+0x38>)
 800bd8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd90:	0800bda1 	.word	0x0800bda1
 800bd94:	0800bdbd 	.word	0x0800bdbd
 800bd98:	0800bdd3 	.word	0x0800bdd3
 800bd9c:	0800bdaf 	.word	0x0800bdaf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bda0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bda4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bda8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bdac:	e012      	b.n	800bdd4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bdae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bdb2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800bdb6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bdba:	e00b      	b.n	800bdd4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bdbc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bdc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bdc4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bdc8:	e004      	b.n	800bdd4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800bdd0:	e000      	b.n	800bdd4 <USB_ActivateEndpoint+0x7c>
      break;
 800bdd2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	441a      	add	r2, r3
 800bdde:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bde2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bde6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bdea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	4413      	add	r3, r2
 800be00:	881b      	ldrh	r3, [r3, #0]
 800be02:	b29b      	uxth	r3, r3
 800be04:	b21b      	sxth	r3, r3
 800be06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be0e:	b21a      	sxth	r2, r3
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	b21b      	sxth	r3, r3
 800be16:	4313      	orrs	r3, r2
 800be18:	b21b      	sxth	r3, r3
 800be1a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	441a      	add	r2, r3
 800be28:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800be2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	7b1b      	ldrb	r3, [r3, #12]
 800be44:	2b00      	cmp	r3, #0
 800be46:	f040 8178 	bne.w	800c13a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	785b      	ldrb	r3, [r3, #1]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f000 8084 	beq.w	800bf5c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	61bb      	str	r3, [r7, #24]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be5e:	b29b      	uxth	r3, r3
 800be60:	461a      	mov	r2, r3
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	4413      	add	r3, r2
 800be66:	61bb      	str	r3, [r7, #24]
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	00da      	lsls	r2, r3, #3
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	4413      	add	r3, r2
 800be72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800be76:	617b      	str	r3, [r7, #20]
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	88db      	ldrh	r3, [r3, #6]
 800be7c:	085b      	lsrs	r3, r3, #1
 800be7e:	b29b      	uxth	r3, r3
 800be80:	005b      	lsls	r3, r3, #1
 800be82:	b29a      	uxth	r2, r3
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	4413      	add	r3, r2
 800be92:	881b      	ldrh	r3, [r3, #0]
 800be94:	827b      	strh	r3, [r7, #18]
 800be96:	8a7b      	ldrh	r3, [r7, #18]
 800be98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d01b      	beq.n	800bed8 <USB_ActivateEndpoint+0x180>
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	4413      	add	r3, r2
 800beaa:	881b      	ldrh	r3, [r3, #0]
 800beac:	b29b      	uxth	r3, r3
 800beae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800beb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800beb6:	823b      	strh	r3, [r7, #16]
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	441a      	add	r2, r3
 800bec2:	8a3b      	ldrh	r3, [r7, #16]
 800bec4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bec8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800becc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bed0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	78db      	ldrb	r3, [r3, #3]
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d020      	beq.n	800bf22 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	4413      	add	r3, r2
 800beea:	881b      	ldrh	r3, [r3, #0]
 800beec:	b29b      	uxth	r3, r3
 800beee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bef2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bef6:	81bb      	strh	r3, [r7, #12]
 800bef8:	89bb      	ldrh	r3, [r7, #12]
 800befa:	f083 0320 	eor.w	r3, r3, #32
 800befe:	81bb      	strh	r3, [r7, #12]
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	441a      	add	r2, r3
 800bf0a:	89bb      	ldrh	r3, [r7, #12]
 800bf0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	8013      	strh	r3, [r2, #0]
 800bf20:	e2d5      	b.n	800c4ce <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	4413      	add	r3, r2
 800bf2c:	881b      	ldrh	r3, [r3, #0]
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf38:	81fb      	strh	r3, [r7, #14]
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	441a      	add	r2, r3
 800bf44:	89fb      	ldrh	r3, [r7, #14]
 800bf46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	8013      	strh	r3, [r2, #0]
 800bf5a:	e2b8      	b.n	800c4ce <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	461a      	mov	r2, r3
 800bf6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf6c:	4413      	add	r3, r2
 800bf6e:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	00da      	lsls	r2, r3, #3
 800bf76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf78:	4413      	add	r3, r2
 800bf7a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bf7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	88db      	ldrh	r3, [r3, #6]
 800bf84:	085b      	lsrs	r3, r3, #1
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	005b      	lsls	r3, r3, #1
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf8e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa0:	4413      	add	r3, r2
 800bfa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	00da      	lsls	r2, r3, #3
 800bfaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfac:	4413      	add	r3, r2
 800bfae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bfb2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb6:	881b      	ldrh	r3, [r3, #0]
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bfbe:	b29a      	uxth	r2, r3
 800bfc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc2:	801a      	strh	r2, [r3, #0]
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	691b      	ldr	r3, [r3, #16]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d10a      	bne.n	800bfe2 <USB_ActivateEndpoint+0x28a>
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfce:	881b      	ldrh	r3, [r3, #0]
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfda:	b29a      	uxth	r2, r3
 800bfdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfde:	801a      	strh	r2, [r3, #0]
 800bfe0:	e039      	b.n	800c056 <USB_ActivateEndpoint+0x2fe>
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	691b      	ldr	r3, [r3, #16]
 800bfe6:	2b3e      	cmp	r3, #62	@ 0x3e
 800bfe8:	d818      	bhi.n	800c01c <USB_ActivateEndpoint+0x2c4>
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	691b      	ldr	r3, [r3, #16]
 800bfee:	085b      	lsrs	r3, r3, #1
 800bff0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	691b      	ldr	r3, [r3, #16]
 800bff6:	f003 0301 	and.w	r3, r3, #1
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d002      	beq.n	800c004 <USB_ActivateEndpoint+0x2ac>
 800bffe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c000:	3301      	adds	r3, #1
 800c002:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c006:	881b      	ldrh	r3, [r3, #0]
 800c008:	b29a      	uxth	r2, r3
 800c00a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	029b      	lsls	r3, r3, #10
 800c010:	b29b      	uxth	r3, r3
 800c012:	4313      	orrs	r3, r2
 800c014:	b29a      	uxth	r2, r3
 800c016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c018:	801a      	strh	r2, [r3, #0]
 800c01a:	e01c      	b.n	800c056 <USB_ActivateEndpoint+0x2fe>
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	691b      	ldr	r3, [r3, #16]
 800c020:	095b      	lsrs	r3, r3, #5
 800c022:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	691b      	ldr	r3, [r3, #16]
 800c028:	f003 031f 	and.w	r3, r3, #31
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d102      	bne.n	800c036 <USB_ActivateEndpoint+0x2de>
 800c030:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c032:	3b01      	subs	r3, #1
 800c034:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c038:	881b      	ldrh	r3, [r3, #0]
 800c03a:	b29a      	uxth	r2, r3
 800c03c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c03e:	b29b      	uxth	r3, r3
 800c040:	029b      	lsls	r3, r3, #10
 800c042:	b29b      	uxth	r3, r3
 800c044:	4313      	orrs	r3, r2
 800c046:	b29b      	uxth	r3, r3
 800c048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c04c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c050:	b29a      	uxth	r2, r3
 800c052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c054:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	4413      	add	r3, r2
 800c060:	881b      	ldrh	r3, [r3, #0]
 800c062:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c064:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d01b      	beq.n	800c0a6 <USB_ActivateEndpoint+0x34e>
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	4413      	add	r3, r2
 800c078:	881b      	ldrh	r3, [r3, #0]
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c080:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c084:	843b      	strh	r3, [r7, #32]
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	781b      	ldrb	r3, [r3, #0]
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	441a      	add	r2, r3
 800c090:	8c3b      	ldrh	r3, [r7, #32]
 800c092:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c096:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c09a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c09e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0a2:	b29b      	uxth	r3, r3
 800c0a4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d124      	bne.n	800c0f8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	4413      	add	r3, r2
 800c0b8:	881b      	ldrh	r3, [r3, #0]
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c0c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0c4:	83bb      	strh	r3, [r7, #28]
 800c0c6:	8bbb      	ldrh	r3, [r7, #28]
 800c0c8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c0cc:	83bb      	strh	r3, [r7, #28]
 800c0ce:	8bbb      	ldrh	r3, [r7, #28]
 800c0d0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c0d4:	83bb      	strh	r3, [r7, #28]
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	441a      	add	r2, r3
 800c0e0:	8bbb      	ldrh	r3, [r7, #28]
 800c0e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	8013      	strh	r3, [r2, #0]
 800c0f6:	e1ea      	b.n	800c4ce <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	4413      	add	r3, r2
 800c102:	881b      	ldrh	r3, [r3, #0]
 800c104:	b29b      	uxth	r3, r3
 800c106:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c10a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c10e:	83fb      	strh	r3, [r7, #30]
 800c110:	8bfb      	ldrh	r3, [r7, #30]
 800c112:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c116:	83fb      	strh	r3, [r7, #30]
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	441a      	add	r2, r3
 800c122:	8bfb      	ldrh	r3, [r7, #30]
 800c124:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c128:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c12c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c134:	b29b      	uxth	r3, r3
 800c136:	8013      	strh	r3, [r2, #0]
 800c138:	e1c9      	b.n	800c4ce <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	78db      	ldrb	r3, [r3, #3]
 800c13e:	2b02      	cmp	r3, #2
 800c140:	d11e      	bne.n	800c180 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	4413      	add	r3, r2
 800c14c:	881b      	ldrh	r3, [r3, #0]
 800c14e:	b29b      	uxth	r3, r3
 800c150:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c154:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c158:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	441a      	add	r2, r3
 800c166:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c16a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c16e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c172:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	8013      	strh	r3, [r2, #0]
 800c17e:	e01d      	b.n	800c1bc <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	4413      	add	r3, r2
 800c18a:	881b      	ldrh	r3, [r3, #0]
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c196:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	441a      	add	r2, r3
 800c1a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c1a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1cc:	4413      	add	r3, r2
 800c1ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	00da      	lsls	r2, r3, #3
 800c1d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1d8:	4413      	add	r3, r2
 800c1da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c1de:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	891b      	ldrh	r3, [r3, #8]
 800c1e4:	085b      	lsrs	r3, r3, #1
 800c1e6:	b29b      	uxth	r3, r3
 800c1e8:	005b      	lsls	r3, r3, #1
 800c1ea:	b29a      	uxth	r2, r3
 800c1ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c1ee:	801a      	strh	r2, [r3, #0]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	657b      	str	r3, [r7, #84]	@ 0x54
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c200:	4413      	add	r3, r2
 800c202:	657b      	str	r3, [r7, #84]	@ 0x54
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	00da      	lsls	r2, r3, #3
 800c20a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c20c:	4413      	add	r3, r2
 800c20e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c212:	653b      	str	r3, [r7, #80]	@ 0x50
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	895b      	ldrh	r3, [r3, #10]
 800c218:	085b      	lsrs	r3, r3, #1
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	005b      	lsls	r3, r3, #1
 800c21e:	b29a      	uxth	r2, r3
 800c220:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c222:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	785b      	ldrb	r3, [r3, #1]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f040 8093 	bne.w	800c354 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	4413      	add	r3, r2
 800c238:	881b      	ldrh	r3, [r3, #0]
 800c23a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c23e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c242:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c246:	2b00      	cmp	r3, #0
 800c248:	d01b      	beq.n	800c282 <USB_ActivateEndpoint+0x52a>
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	4413      	add	r3, r2
 800c254:	881b      	ldrh	r3, [r3, #0]
 800c256:	b29b      	uxth	r3, r3
 800c258:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c25c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c260:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	441a      	add	r2, r3
 800c26c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c26e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c272:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c276:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c27a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c27e:	b29b      	uxth	r3, r3
 800c280:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	4413      	add	r3, r2
 800c28c:	881b      	ldrh	r3, [r3, #0]
 800c28e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c290:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c296:	2b00      	cmp	r3, #0
 800c298:	d01b      	beq.n	800c2d2 <USB_ActivateEndpoint+0x57a>
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	009b      	lsls	r3, r3, #2
 800c2a2:	4413      	add	r3, r2
 800c2a4:	881b      	ldrh	r3, [r3, #0]
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2b0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	441a      	add	r2, r3
 800c2bc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c2be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	4413      	add	r3, r2
 800c2dc:	881b      	ldrh	r3, [r3, #0]
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c2e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2e8:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c2ea:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c2ec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c2f0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c2f2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c2f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c2f8:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	441a      	add	r2, r3
 800c304:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c306:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c30a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c30e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c316:	b29b      	uxth	r3, r3
 800c318:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	4413      	add	r3, r2
 800c324:	881b      	ldrh	r3, [r3, #0]
 800c326:	b29b      	uxth	r3, r3
 800c328:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c32c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c330:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	009b      	lsls	r3, r3, #2
 800c33a:	441a      	add	r2, r3
 800c33c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c33e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c342:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c34a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c34e:	b29b      	uxth	r3, r3
 800c350:	8013      	strh	r3, [r2, #0]
 800c352:	e0bc      	b.n	800c4ce <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	4413      	add	r3, r2
 800c35e:	881b      	ldrh	r3, [r3, #0]
 800c360:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800c364:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c368:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d01d      	beq.n	800c3ac <USB_ActivateEndpoint+0x654>
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	4413      	add	r3, r2
 800c37a:	881b      	ldrh	r3, [r3, #0]
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c386:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	441a      	add	r2, r3
 800c394:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800c398:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c39c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c3a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	009b      	lsls	r3, r3, #2
 800c3b4:	4413      	add	r3, r2
 800c3b6:	881b      	ldrh	r3, [r3, #0]
 800c3b8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800c3bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c3c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d01d      	beq.n	800c404 <USB_ActivateEndpoint+0x6ac>
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	009b      	lsls	r3, r3, #2
 800c3d0:	4413      	add	r3, r2
 800c3d2:	881b      	ldrh	r3, [r3, #0]
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c3da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3de:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	009b      	lsls	r3, r3, #2
 800c3ea:	441a      	add	r2, r3
 800c3ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800c3f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c400:	b29b      	uxth	r3, r3
 800c402:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	78db      	ldrb	r3, [r3, #3]
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d024      	beq.n	800c456 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	4413      	add	r3, r2
 800c416:	881b      	ldrh	r3, [r3, #0]
 800c418:	b29b      	uxth	r3, r3
 800c41a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c41e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c422:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c426:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c42a:	f083 0320 	eor.w	r3, r3, #32
 800c42e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	441a      	add	r2, r3
 800c43c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c440:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c444:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c448:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c44c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c450:	b29b      	uxth	r3, r3
 800c452:	8013      	strh	r3, [r2, #0]
 800c454:	e01d      	b.n	800c492 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	009b      	lsls	r3, r3, #2
 800c45e:	4413      	add	r3, r2
 800c460:	881b      	ldrh	r3, [r3, #0]
 800c462:	b29b      	uxth	r3, r3
 800c464:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c468:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c46c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	441a      	add	r2, r3
 800c47a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c47e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c482:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c486:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c48a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c48e:	b29b      	uxth	r3, r3
 800c490:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	009b      	lsls	r3, r3, #2
 800c49a:	4413      	add	r3, r2
 800c49c:	881b      	ldrh	r3, [r3, #0]
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c4a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4a8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	441a      	add	r2, r3
 800c4b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c4ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c4ce:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3774      	adds	r7, #116	@ 0x74
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop

0800c4e0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b08d      	sub	sp, #52	@ 0x34
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	7b1b      	ldrb	r3, [r3, #12]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	f040 808e 	bne.w	800c610 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	785b      	ldrb	r3, [r3, #1]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d044      	beq.n	800c586 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	4413      	add	r3, r2
 800c506:	881b      	ldrh	r3, [r3, #0]
 800c508:	81bb      	strh	r3, [r7, #12]
 800c50a:	89bb      	ldrh	r3, [r7, #12]
 800c50c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c510:	2b00      	cmp	r3, #0
 800c512:	d01b      	beq.n	800c54c <USB_DeactivateEndpoint+0x6c>
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	4413      	add	r3, r2
 800c51e:	881b      	ldrh	r3, [r3, #0]
 800c520:	b29b      	uxth	r3, r3
 800c522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c52a:	817b      	strh	r3, [r7, #10]
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	441a      	add	r2, r3
 800c536:	897b      	ldrh	r3, [r7, #10]
 800c538:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c53c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c540:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c544:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c548:	b29b      	uxth	r3, r3
 800c54a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	009b      	lsls	r3, r3, #2
 800c554:	4413      	add	r3, r2
 800c556:	881b      	ldrh	r3, [r3, #0]
 800c558:	b29b      	uxth	r3, r3
 800c55a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c55e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c562:	813b      	strh	r3, [r7, #8]
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	009b      	lsls	r3, r3, #2
 800c56c:	441a      	add	r2, r3
 800c56e:	893b      	ldrh	r3, [r7, #8]
 800c570:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c574:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c578:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c57c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c580:	b29b      	uxth	r3, r3
 800c582:	8013      	strh	r3, [r2, #0]
 800c584:	e192      	b.n	800c8ac <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	4413      	add	r3, r2
 800c590:	881b      	ldrh	r3, [r3, #0]
 800c592:	827b      	strh	r3, [r7, #18]
 800c594:	8a7b      	ldrh	r3, [r7, #18]
 800c596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d01b      	beq.n	800c5d6 <USB_DeactivateEndpoint+0xf6>
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	4413      	add	r3, r2
 800c5a8:	881b      	ldrh	r3, [r3, #0]
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5b4:	823b      	strh	r3, [r7, #16]
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	009b      	lsls	r3, r3, #2
 800c5be:	441a      	add	r2, r3
 800c5c0:	8a3b      	ldrh	r3, [r7, #16]
 800c5c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c5ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	4413      	add	r3, r2
 800c5e0:	881b      	ldrh	r3, [r3, #0]
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c5e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5ec:	81fb      	strh	r3, [r7, #14]
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	441a      	add	r2, r3
 800c5f8:	89fb      	ldrh	r3, [r7, #14]
 800c5fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c602:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	8013      	strh	r3, [r2, #0]
 800c60e:	e14d      	b.n	800c8ac <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	785b      	ldrb	r3, [r3, #1]
 800c614:	2b00      	cmp	r3, #0
 800c616:	f040 80a5 	bne.w	800c764 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4413      	add	r3, r2
 800c624:	881b      	ldrh	r3, [r3, #0]
 800c626:	843b      	strh	r3, [r7, #32]
 800c628:	8c3b      	ldrh	r3, [r7, #32]
 800c62a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d01b      	beq.n	800c66a <USB_DeactivateEndpoint+0x18a>
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	4413      	add	r3, r2
 800c63c:	881b      	ldrh	r3, [r3, #0]
 800c63e:	b29b      	uxth	r3, r3
 800c640:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c648:	83fb      	strh	r3, [r7, #30]
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	441a      	add	r2, r3
 800c654:	8bfb      	ldrh	r3, [r7, #30]
 800c656:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c65a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c65e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c666:	b29b      	uxth	r3, r3
 800c668:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	4413      	add	r3, r2
 800c674:	881b      	ldrh	r3, [r3, #0]
 800c676:	83bb      	strh	r3, [r7, #28]
 800c678:	8bbb      	ldrh	r3, [r7, #28]
 800c67a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d01b      	beq.n	800c6ba <USB_DeactivateEndpoint+0x1da>
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	009b      	lsls	r3, r3, #2
 800c68a:	4413      	add	r3, r2
 800c68c:	881b      	ldrh	r3, [r3, #0]
 800c68e:	b29b      	uxth	r3, r3
 800c690:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c698:	837b      	strh	r3, [r7, #26]
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	441a      	add	r2, r3
 800c6a4:	8b7b      	ldrh	r3, [r7, #26]
 800c6a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	009b      	lsls	r3, r3, #2
 800c6c2:	4413      	add	r3, r2
 800c6c4:	881b      	ldrh	r3, [r3, #0]
 800c6c6:	b29b      	uxth	r3, r3
 800c6c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6d0:	833b      	strh	r3, [r7, #24]
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	441a      	add	r2, r3
 800c6dc:	8b3b      	ldrh	r3, [r7, #24]
 800c6de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	4413      	add	r3, r2
 800c6fc:	881b      	ldrh	r3, [r3, #0]
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c704:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c708:	82fb      	strh	r3, [r7, #22]
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	441a      	add	r2, r3
 800c714:	8afb      	ldrh	r3, [r7, #22]
 800c716:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c71a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c71e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c726:	b29b      	uxth	r3, r3
 800c728:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	4413      	add	r3, r2
 800c734:	881b      	ldrh	r3, [r3, #0]
 800c736:	b29b      	uxth	r3, r3
 800c738:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c73c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c740:	82bb      	strh	r3, [r7, #20]
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	441a      	add	r2, r3
 800c74c:	8abb      	ldrh	r3, [r7, #20]
 800c74e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c752:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c756:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c75a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c75e:	b29b      	uxth	r3, r3
 800c760:	8013      	strh	r3, [r2, #0]
 800c762:	e0a3      	b.n	800c8ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	4413      	add	r3, r2
 800c76e:	881b      	ldrh	r3, [r3, #0]
 800c770:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c772:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c774:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d01b      	beq.n	800c7b4 <USB_DeactivateEndpoint+0x2d4>
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	4413      	add	r3, r2
 800c786:	881b      	ldrh	r3, [r3, #0]
 800c788:	b29b      	uxth	r3, r3
 800c78a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c78e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c792:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	009b      	lsls	r3, r3, #2
 800c79c:	441a      	add	r2, r3
 800c79e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c7a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c7ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	009b      	lsls	r3, r3, #2
 800c7bc:	4413      	add	r3, r2
 800c7be:	881b      	ldrh	r3, [r3, #0]
 800c7c0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800c7c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c7c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d01b      	beq.n	800c804 <USB_DeactivateEndpoint+0x324>
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	009b      	lsls	r3, r3, #2
 800c7d4:	4413      	add	r3, r2
 800c7d6:	881b      	ldrh	r3, [r3, #0]
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7e2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	441a      	add	r2, r3
 800c7ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c7f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c800:	b29b      	uxth	r3, r3
 800c802:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	4413      	add	r3, r2
 800c80e:	881b      	ldrh	r3, [r3, #0]
 800c810:	b29b      	uxth	r3, r3
 800c812:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c81a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	009b      	lsls	r3, r3, #2
 800c824:	441a      	add	r2, r3
 800c826:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c828:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c82c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c830:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c838:	b29b      	uxth	r3, r3
 800c83a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	009b      	lsls	r3, r3, #2
 800c844:	4413      	add	r3, r2
 800c846:	881b      	ldrh	r3, [r3, #0]
 800c848:	b29b      	uxth	r3, r3
 800c84a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c84e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c852:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	441a      	add	r2, r3
 800c85e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c860:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c864:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c868:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c86c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c870:	b29b      	uxth	r3, r3
 800c872:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	009b      	lsls	r3, r3, #2
 800c87c:	4413      	add	r3, r2
 800c87e:	881b      	ldrh	r3, [r3, #0]
 800c880:	b29b      	uxth	r3, r3
 800c882:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c88a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	009b      	lsls	r3, r3, #2
 800c894:	441a      	add	r2, r3
 800c896:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c898:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c89c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c8ac:	2300      	movs	r3, #0
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3734      	adds	r7, #52	@ 0x34
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr

0800c8ba <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b0c2      	sub	sp, #264	@ 0x108
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c8c8:	6018      	str	r0, [r3, #0]
 800c8ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8d2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c8d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	785b      	ldrb	r3, [r3, #1]
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	f040 86b7 	bne.w	800d654 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c8e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	699a      	ldr	r2, [r3, #24]
 800c8f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	691b      	ldr	r3, [r3, #16]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d908      	bls.n	800c914 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800c902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	691b      	ldr	r3, [r3, #16]
 800c90e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800c912:	e007      	b.n	800c924 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800c914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	699b      	ldr	r3, [r3, #24]
 800c920:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	7b1b      	ldrb	r3, [r3, #12]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d13a      	bne.n	800c9aa <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	6959      	ldr	r1, [r3, #20]
 800c940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	88da      	ldrh	r2, [r3, #6]
 800c94c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c950:	b29b      	uxth	r3, r3
 800c952:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c956:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c95a:	6800      	ldr	r0, [r0, #0]
 800c95c:	f001 fc99 	bl	800e292 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c964:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	613b      	str	r3, [r7, #16]
 800c96c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c970:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	461a      	mov	r2, r3
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	4413      	add	r3, r2
 800c982:	613b      	str	r3, [r7, #16]
 800c984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	00da      	lsls	r2, r3, #3
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	4413      	add	r3, r2
 800c996:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c99a:	60fb      	str	r3, [r7, #12]
 800c99c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9a0:	b29a      	uxth	r2, r3
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	801a      	strh	r2, [r3, #0]
 800c9a6:	f000 be1f 	b.w	800d5e8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c9aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	78db      	ldrb	r3, [r3, #3]
 800c9b6:	2b02      	cmp	r3, #2
 800c9b8:	f040 8462 	bne.w	800d280 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c9bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	6a1a      	ldr	r2, [r3, #32]
 800c9c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	691b      	ldr	r3, [r3, #16]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	f240 83df 	bls.w	800d198 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c9da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	4413      	add	r3, r2
 800c9f4:	881b      	ldrh	r3, [r3, #0]
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca00:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ca04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	441a      	add	r2, r3
 800ca1e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ca22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca2a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ca2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ca36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	6a1a      	ldr	r2, [r3, #32]
 800ca42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca46:	1ad2      	subs	r2, r2, r3
 800ca48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ca54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	009b      	lsls	r3, r3, #2
 800ca6c:	4413      	add	r3, r2
 800ca6e:	881b      	ldrh	r3, [r3, #0]
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	f000 81c7 	beq.w	800ce0a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ca7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	785b      	ldrb	r3, [r3, #1]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d177      	bne.n	800cb88 <USB_EPStartXfer+0x2ce>
 800ca98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800caa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cab2:	b29b      	uxth	r3, r3
 800cab4:	461a      	mov	r2, r3
 800cab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cab8:	4413      	add	r3, r2
 800caba:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cabc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	00da      	lsls	r2, r3, #3
 800caca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cacc:	4413      	add	r3, r2
 800cace:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cad2:	627b      	str	r3, [r7, #36]	@ 0x24
 800cad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad6:	881b      	ldrh	r3, [r3, #0]
 800cad8:	b29b      	uxth	r3, r3
 800cada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cade:	b29a      	uxth	r2, r3
 800cae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae2:	801a      	strh	r2, [r3, #0]
 800cae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d10a      	bne.n	800cb02 <USB_EPStartXfer+0x248>
 800caec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caee:	881b      	ldrh	r3, [r3, #0]
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800caf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cafa:	b29a      	uxth	r2, r3
 800cafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cafe:	801a      	strh	r2, [r3, #0]
 800cb00:	e067      	b.n	800cbd2 <USB_EPStartXfer+0x318>
 800cb02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb06:	2b3e      	cmp	r3, #62	@ 0x3e
 800cb08:	d81c      	bhi.n	800cb44 <USB_EPStartXfer+0x28a>
 800cb0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb0e:	085b      	lsrs	r3, r3, #1
 800cb10:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cb14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb18:	f003 0301 	and.w	r3, r3, #1
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d004      	beq.n	800cb2a <USB_EPStartXfer+0x270>
 800cb20:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cb24:	3301      	adds	r3, #1
 800cb26:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2c:	881b      	ldrh	r3, [r3, #0]
 800cb2e:	b29a      	uxth	r2, r3
 800cb30:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	029b      	lsls	r3, r3, #10
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	b29a      	uxth	r2, r3
 800cb3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb40:	801a      	strh	r2, [r3, #0]
 800cb42:	e046      	b.n	800cbd2 <USB_EPStartXfer+0x318>
 800cb44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb48:	095b      	lsrs	r3, r3, #5
 800cb4a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cb4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb52:	f003 031f 	and.w	r3, r3, #31
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d104      	bne.n	800cb64 <USB_EPStartXfer+0x2aa>
 800cb5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cb5e:	3b01      	subs	r3, #1
 800cb60:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb66:	881b      	ldrh	r3, [r3, #0]
 800cb68:	b29a      	uxth	r2, r3
 800cb6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	029b      	lsls	r3, r3, #10
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	4313      	orrs	r3, r2
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb80:	b29a      	uxth	r2, r3
 800cb82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb84:	801a      	strh	r2, [r3, #0]
 800cb86:	e024      	b.n	800cbd2 <USB_EPStartXfer+0x318>
 800cb88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	785b      	ldrb	r3, [r3, #1]
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d11c      	bne.n	800cbd2 <USB_EPStartXfer+0x318>
 800cb98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	461a      	mov	r2, r3
 800cbaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbac:	4413      	add	r3, r2
 800cbae:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	00da      	lsls	r2, r3, #3
 800cbbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbc0:	4413      	add	r3, r2
 800cbc2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cbc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cbc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbcc:	b29a      	uxth	r2, r3
 800cbce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cbd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	895b      	ldrh	r3, [r3, #10]
 800cbde:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cbe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	6959      	ldr	r1, [r3, #20]
 800cbee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cbf8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cbfc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cc00:	6800      	ldr	r0, [r0, #0]
 800cc02:	f001 fb46 	bl	800e292 <USB_WritePMA>
            ep->xfer_buff += len;
 800cc06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	695a      	ldr	r2, [r3, #20]
 800cc12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc16:	441a      	add	r2, r3
 800cc18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cc24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	6a1a      	ldr	r2, [r3, #32]
 800cc30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	691b      	ldr	r3, [r3, #16]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d90f      	bls.n	800cc60 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800cc40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	6a1a      	ldr	r2, [r3, #32]
 800cc4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc50:	1ad2      	subs	r2, r2, r3
 800cc52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	621a      	str	r2, [r3, #32]
 800cc5e:	e00e      	b.n	800cc7e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800cc60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	6a1b      	ldr	r3, [r3, #32]
 800cc6c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800cc70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cc7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	785b      	ldrb	r3, [r3, #1]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d177      	bne.n	800cd7e <USB_EPStartXfer+0x4c4>
 800cc8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	61bb      	str	r3, [r7, #24]
 800cc9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cca8:	b29b      	uxth	r3, r3
 800ccaa:	461a      	mov	r2, r3
 800ccac:	69bb      	ldr	r3, [r7, #24]
 800ccae:	4413      	add	r3, r2
 800ccb0:	61bb      	str	r3, [r7, #24]
 800ccb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	00da      	lsls	r2, r3, #3
 800ccc0:	69bb      	ldr	r3, [r7, #24]
 800ccc2:	4413      	add	r3, r2
 800ccc4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ccc8:	617b      	str	r3, [r7, #20]
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	881b      	ldrh	r3, [r3, #0]
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ccd4:	b29a      	uxth	r2, r3
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	801a      	strh	r2, [r3, #0]
 800ccda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d10a      	bne.n	800ccf8 <USB_EPStartXfer+0x43e>
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	881b      	ldrh	r3, [r3, #0]
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccf0:	b29a      	uxth	r2, r3
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	801a      	strh	r2, [r3, #0]
 800ccf6:	e06d      	b.n	800cdd4 <USB_EPStartXfer+0x51a>
 800ccf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccfc:	2b3e      	cmp	r3, #62	@ 0x3e
 800ccfe:	d81c      	bhi.n	800cd3a <USB_EPStartXfer+0x480>
 800cd00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd04:	085b      	lsrs	r3, r3, #1
 800cd06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cd0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd0e:	f003 0301 	and.w	r3, r3, #1
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d004      	beq.n	800cd20 <USB_EPStartXfer+0x466>
 800cd16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	881b      	ldrh	r3, [r3, #0]
 800cd24:	b29a      	uxth	r2, r3
 800cd26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	029b      	lsls	r3, r3, #10
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	4313      	orrs	r3, r2
 800cd32:	b29a      	uxth	r2, r3
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	801a      	strh	r2, [r3, #0]
 800cd38:	e04c      	b.n	800cdd4 <USB_EPStartXfer+0x51a>
 800cd3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd3e:	095b      	lsrs	r3, r3, #5
 800cd40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cd44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd48:	f003 031f 	and.w	r3, r3, #31
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d104      	bne.n	800cd5a <USB_EPStartXfer+0x4a0>
 800cd50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cd54:	3b01      	subs	r3, #1
 800cd56:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	881b      	ldrh	r3, [r3, #0]
 800cd5e:	b29a      	uxth	r2, r3
 800cd60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	029b      	lsls	r3, r3, #10
 800cd68:	b29b      	uxth	r3, r3
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd76:	b29a      	uxth	r2, r3
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	801a      	strh	r2, [r3, #0]
 800cd7c:	e02a      	b.n	800cdd4 <USB_EPStartXfer+0x51a>
 800cd7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	785b      	ldrb	r3, [r3, #1]
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d122      	bne.n	800cdd4 <USB_EPStartXfer+0x51a>
 800cd8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	623b      	str	r3, [r7, #32]
 800cd9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	461a      	mov	r2, r3
 800cdac:	6a3b      	ldr	r3, [r7, #32]
 800cdae:	4413      	add	r3, r2
 800cdb0:	623b      	str	r3, [r7, #32]
 800cdb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	00da      	lsls	r2, r3, #3
 800cdc0:	6a3b      	ldr	r3, [r7, #32]
 800cdc2:	4413      	add	r3, r2
 800cdc4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cdc8:	61fb      	str	r3, [r7, #28]
 800cdca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdce:	b29a      	uxth	r2, r3
 800cdd0:	69fb      	ldr	r3, [r7, #28]
 800cdd2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cdd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	891b      	ldrh	r3, [r3, #8]
 800cde0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cde4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cde8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	6959      	ldr	r1, [r3, #20]
 800cdf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdf4:	b29b      	uxth	r3, r3
 800cdf6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cdfa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cdfe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ce02:	6800      	ldr	r0, [r0, #0]
 800ce04:	f001 fa45 	bl	800e292 <USB_WritePMA>
 800ce08:	e3ee      	b.n	800d5e8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ce0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	785b      	ldrb	r3, [r3, #1]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d177      	bne.n	800cf0a <USB_EPStartXfer+0x650>
 800ce1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	461a      	mov	r2, r3
 800ce38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce3a:	4413      	add	r3, r2
 800ce3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	00da      	lsls	r2, r3, #3
 800ce4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce4e:	4413      	add	r3, r2
 800ce50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ce54:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce58:	881b      	ldrh	r3, [r3, #0]
 800ce5a:	b29b      	uxth	r3, r3
 800ce5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce60:	b29a      	uxth	r2, r3
 800ce62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce64:	801a      	strh	r2, [r3, #0]
 800ce66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d10a      	bne.n	800ce84 <USB_EPStartXfer+0x5ca>
 800ce6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce70:	881b      	ldrh	r3, [r3, #0]
 800ce72:	b29b      	uxth	r3, r3
 800ce74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce7c:	b29a      	uxth	r2, r3
 800ce7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce80:	801a      	strh	r2, [r3, #0]
 800ce82:	e06d      	b.n	800cf60 <USB_EPStartXfer+0x6a6>
 800ce84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce88:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce8a:	d81c      	bhi.n	800cec6 <USB_EPStartXfer+0x60c>
 800ce8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce90:	085b      	lsrs	r3, r3, #1
 800ce92:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ce96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce9a:	f003 0301 	and.w	r3, r3, #1
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d004      	beq.n	800ceac <USB_EPStartXfer+0x5f2>
 800cea2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cea6:	3301      	adds	r3, #1
 800cea8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ceac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ceae:	881b      	ldrh	r3, [r3, #0]
 800ceb0:	b29a      	uxth	r2, r3
 800ceb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	029b      	lsls	r3, r3, #10
 800ceba:	b29b      	uxth	r3, r3
 800cebc:	4313      	orrs	r3, r2
 800cebe:	b29a      	uxth	r2, r3
 800cec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cec2:	801a      	strh	r2, [r3, #0]
 800cec4:	e04c      	b.n	800cf60 <USB_EPStartXfer+0x6a6>
 800cec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceca:	095b      	lsrs	r3, r3, #5
 800cecc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ced0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ced4:	f003 031f 	and.w	r3, r3, #31
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d104      	bne.n	800cee6 <USB_EPStartXfer+0x62c>
 800cedc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cee0:	3b01      	subs	r3, #1
 800cee2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cee6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cee8:	881b      	ldrh	r3, [r3, #0]
 800ceea:	b29a      	uxth	r2, r3
 800ceec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cef0:	b29b      	uxth	r3, r3
 800cef2:	029b      	lsls	r3, r3, #10
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	4313      	orrs	r3, r2
 800cef8:	b29b      	uxth	r3, r3
 800cefa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cefe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf02:	b29a      	uxth	r2, r3
 800cf04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf06:	801a      	strh	r2, [r3, #0]
 800cf08:	e02a      	b.n	800cf60 <USB_EPStartXfer+0x6a6>
 800cf0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	785b      	ldrb	r3, [r3, #1]
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d122      	bne.n	800cf60 <USB_EPStartXfer+0x6a6>
 800cf1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf34:	b29b      	uxth	r3, r3
 800cf36:	461a      	mov	r2, r3
 800cf38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf3a:	4413      	add	r3, r2
 800cf3c:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	00da      	lsls	r2, r3, #3
 800cf4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf4e:	4413      	add	r3, r2
 800cf50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cf54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf5a:	b29a      	uxth	r2, r3
 800cf5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cf60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	891b      	ldrh	r3, [r3, #8]
 800cf6c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	6959      	ldr	r1, [r3, #20]
 800cf7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cf86:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cf8a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cf8e:	6800      	ldr	r0, [r0, #0]
 800cf90:	f001 f97f 	bl	800e292 <USB_WritePMA>
            ep->xfer_buff += len;
 800cf94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	695a      	ldr	r2, [r3, #20]
 800cfa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfa4:	441a      	add	r2, r3
 800cfa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cfb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	6a1a      	ldr	r2, [r3, #32]
 800cfbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	691b      	ldr	r3, [r3, #16]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d90f      	bls.n	800cfee <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800cfce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	6a1a      	ldr	r2, [r3, #32]
 800cfda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfde:	1ad2      	subs	r2, r2, r3
 800cfe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	621a      	str	r2, [r3, #32]
 800cfec:	e00e      	b.n	800d00c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800cfee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	6a1b      	ldr	r3, [r3, #32]
 800cffa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800cffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2200      	movs	r2, #0
 800d00a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d00c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d010:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	643b      	str	r3, [r7, #64]	@ 0x40
 800d018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d01c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	785b      	ldrb	r3, [r3, #1]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d177      	bne.n	800d118 <USB_EPStartXfer+0x85e>
 800d028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d02c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d038:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d042:	b29b      	uxth	r3, r3
 800d044:	461a      	mov	r2, r3
 800d046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d048:	4413      	add	r3, r2
 800d04a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d04c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	00da      	lsls	r2, r3, #3
 800d05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d05c:	4413      	add	r3, r2
 800d05e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d062:	637b      	str	r3, [r7, #52]	@ 0x34
 800d064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d066:	881b      	ldrh	r3, [r3, #0]
 800d068:	b29b      	uxth	r3, r3
 800d06a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d06e:	b29a      	uxth	r2, r3
 800d070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d072:	801a      	strh	r2, [r3, #0]
 800d074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d10a      	bne.n	800d092 <USB_EPStartXfer+0x7d8>
 800d07c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d07e:	881b      	ldrh	r3, [r3, #0]
 800d080:	b29b      	uxth	r3, r3
 800d082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d08a:	b29a      	uxth	r2, r3
 800d08c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d08e:	801a      	strh	r2, [r3, #0]
 800d090:	e067      	b.n	800d162 <USB_EPStartXfer+0x8a8>
 800d092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d096:	2b3e      	cmp	r3, #62	@ 0x3e
 800d098:	d81c      	bhi.n	800d0d4 <USB_EPStartXfer+0x81a>
 800d09a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d09e:	085b      	lsrs	r3, r3, #1
 800d0a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0a8:	f003 0301 	and.w	r3, r3, #1
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d004      	beq.n	800d0ba <USB_EPStartXfer+0x800>
 800d0b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d0ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0bc:	881b      	ldrh	r3, [r3, #0]
 800d0be:	b29a      	uxth	r2, r3
 800d0c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	029b      	lsls	r3, r3, #10
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	b29a      	uxth	r2, r3
 800d0ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0d0:	801a      	strh	r2, [r3, #0]
 800d0d2:	e046      	b.n	800d162 <USB_EPStartXfer+0x8a8>
 800d0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0d8:	095b      	lsrs	r3, r3, #5
 800d0da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d0de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0e2:	f003 031f 	and.w	r3, r3, #31
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d104      	bne.n	800d0f4 <USB_EPStartXfer+0x83a>
 800d0ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0ee:	3b01      	subs	r3, #1
 800d0f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d0f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0f6:	881b      	ldrh	r3, [r3, #0]
 800d0f8:	b29a      	uxth	r2, r3
 800d0fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	029b      	lsls	r3, r3, #10
 800d102:	b29b      	uxth	r3, r3
 800d104:	4313      	orrs	r3, r2
 800d106:	b29b      	uxth	r3, r3
 800d108:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d10c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d110:	b29a      	uxth	r2, r3
 800d112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d114:	801a      	strh	r2, [r3, #0]
 800d116:	e024      	b.n	800d162 <USB_EPStartXfer+0x8a8>
 800d118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d11c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	785b      	ldrb	r3, [r3, #1]
 800d124:	2b01      	cmp	r3, #1
 800d126:	d11c      	bne.n	800d162 <USB_EPStartXfer+0x8a8>
 800d128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d12c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d136:	b29b      	uxth	r3, r3
 800d138:	461a      	mov	r2, r3
 800d13a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d13c:	4413      	add	r3, r2
 800d13e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	00da      	lsls	r2, r3, #3
 800d14e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d150:	4413      	add	r3, r2
 800d152:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d15c:	b29a      	uxth	r2, r3
 800d15e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d160:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	895b      	ldrh	r3, [r3, #10]
 800d16e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	6959      	ldr	r1, [r3, #20]
 800d17e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d182:	b29b      	uxth	r3, r3
 800d184:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d188:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d18c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d190:	6800      	ldr	r0, [r0, #0]
 800d192:	f001 f87e 	bl	800e292 <USB_WritePMA>
 800d196:	e227      	b.n	800d5e8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d19c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	6a1b      	ldr	r3, [r3, #32]
 800d1a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d1a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	4413      	add	r3, r2
 800d1c2:	881b      	ldrh	r3, [r3, #0]
 800d1c4:	b29b      	uxth	r3, r3
 800d1c6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d1ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d1ce:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d1d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1da:	681a      	ldr	r2, [r3, #0]
 800d1dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	441a      	add	r2, r3
 800d1ec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d1f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d1f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d200:	b29b      	uxth	r3, r3
 800d202:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d208:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d214:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d21e:	b29b      	uxth	r3, r3
 800d220:	461a      	mov	r2, r3
 800d222:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d224:	4413      	add	r3, r2
 800d226:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d22c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	00da      	lsls	r2, r3, #3
 800d236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d238:	4413      	add	r3, r2
 800d23a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d23e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d244:	b29a      	uxth	r2, r3
 800d246:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d248:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d24a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d24e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	891b      	ldrh	r3, [r3, #8]
 800d256:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d25a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d25e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	6959      	ldr	r1, [r3, #20]
 800d266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d270:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d274:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d278:	6800      	ldr	r0, [r0, #0]
 800d27a:	f001 f80a 	bl	800e292 <USB_WritePMA>
 800d27e:	e1b3      	b.n	800d5e8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	6a1a      	ldr	r2, [r3, #32]
 800d28c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d290:	1ad2      	subs	r2, r2, r3
 800d292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d29e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2a6:	681a      	ldr	r2, [r3, #0]
 800d2a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	4413      	add	r3, r2
 800d2b8:	881b      	ldrh	r3, [r3, #0]
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	f000 80c6 	beq.w	800d452 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d2c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	673b      	str	r3, [r7, #112]	@ 0x70
 800d2d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	785b      	ldrb	r3, [r3, #1]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d177      	bne.n	800d3d2 <USB_EPStartXfer+0xb18>
 800d2e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d2ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2fc:	b29b      	uxth	r3, r3
 800d2fe:	461a      	mov	r2, r3
 800d300:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d302:	4413      	add	r3, r2
 800d304:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d30a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	00da      	lsls	r2, r3, #3
 800d314:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d316:	4413      	add	r3, r2
 800d318:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d31c:	667b      	str	r3, [r7, #100]	@ 0x64
 800d31e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d320:	881b      	ldrh	r3, [r3, #0]
 800d322:	b29b      	uxth	r3, r3
 800d324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d328:	b29a      	uxth	r2, r3
 800d32a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d32c:	801a      	strh	r2, [r3, #0]
 800d32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d332:	2b00      	cmp	r3, #0
 800d334:	d10a      	bne.n	800d34c <USB_EPStartXfer+0xa92>
 800d336:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d338:	881b      	ldrh	r3, [r3, #0]
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d344:	b29a      	uxth	r2, r3
 800d346:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d348:	801a      	strh	r2, [r3, #0]
 800d34a:	e067      	b.n	800d41c <USB_EPStartXfer+0xb62>
 800d34c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d350:	2b3e      	cmp	r3, #62	@ 0x3e
 800d352:	d81c      	bhi.n	800d38e <USB_EPStartXfer+0xad4>
 800d354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d358:	085b      	lsrs	r3, r3, #1
 800d35a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d362:	f003 0301 	and.w	r3, r3, #1
 800d366:	2b00      	cmp	r3, #0
 800d368:	d004      	beq.n	800d374 <USB_EPStartXfer+0xaba>
 800d36a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d36e:	3301      	adds	r3, #1
 800d370:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d376:	881b      	ldrh	r3, [r3, #0]
 800d378:	b29a      	uxth	r2, r3
 800d37a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d37e:	b29b      	uxth	r3, r3
 800d380:	029b      	lsls	r3, r3, #10
 800d382:	b29b      	uxth	r3, r3
 800d384:	4313      	orrs	r3, r2
 800d386:	b29a      	uxth	r2, r3
 800d388:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d38a:	801a      	strh	r2, [r3, #0]
 800d38c:	e046      	b.n	800d41c <USB_EPStartXfer+0xb62>
 800d38e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d392:	095b      	lsrs	r3, r3, #5
 800d394:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d39c:	f003 031f 	and.w	r3, r3, #31
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d104      	bne.n	800d3ae <USB_EPStartXfer+0xaf4>
 800d3a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d3a8:	3b01      	subs	r3, #1
 800d3aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d3ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3b0:	881b      	ldrh	r3, [r3, #0]
 800d3b2:	b29a      	uxth	r2, r3
 800d3b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	029b      	lsls	r3, r3, #10
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3ca:	b29a      	uxth	r2, r3
 800d3cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3ce:	801a      	strh	r2, [r3, #0]
 800d3d0:	e024      	b.n	800d41c <USB_EPStartXfer+0xb62>
 800d3d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	785b      	ldrb	r3, [r3, #1]
 800d3de:	2b01      	cmp	r3, #1
 800d3e0:	d11c      	bne.n	800d41c <USB_EPStartXfer+0xb62>
 800d3e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3f0:	b29b      	uxth	r3, r3
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d3f6:	4413      	add	r3, r2
 800d3f8:	673b      	str	r3, [r7, #112]	@ 0x70
 800d3fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	00da      	lsls	r2, r3, #3
 800d408:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d40a:	4413      	add	r3, r2
 800d40c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d410:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d416:	b29a      	uxth	r2, r3
 800d418:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d41a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d41c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	895b      	ldrh	r3, [r3, #10]
 800d428:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d42c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	6959      	ldr	r1, [r3, #20]
 800d438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d43c:	b29b      	uxth	r3, r3
 800d43e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d442:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d446:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d44a:	6800      	ldr	r0, [r0, #0]
 800d44c:	f000 ff21 	bl	800e292 <USB_WritePMA>
 800d450:	e0ca      	b.n	800d5e8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	785b      	ldrb	r3, [r3, #1]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d177      	bne.n	800d552 <USB_EPStartXfer+0xc98>
 800d462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d466:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d46e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d472:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	461a      	mov	r2, r3
 800d480:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d482:	4413      	add	r3, r2
 800d484:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d48a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	00da      	lsls	r2, r3, #3
 800d494:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d496:	4413      	add	r3, r2
 800d498:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d49c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d49e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d4a0:	881b      	ldrh	r3, [r3, #0]
 800d4a2:	b29b      	uxth	r3, r3
 800d4a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d4a8:	b29a      	uxth	r2, r3
 800d4aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d4ac:	801a      	strh	r2, [r3, #0]
 800d4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d10a      	bne.n	800d4cc <USB_EPStartXfer+0xc12>
 800d4b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d4b8:	881b      	ldrh	r3, [r3, #0]
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4c4:	b29a      	uxth	r2, r3
 800d4c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d4c8:	801a      	strh	r2, [r3, #0]
 800d4ca:	e073      	b.n	800d5b4 <USB_EPStartXfer+0xcfa>
 800d4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4d0:	2b3e      	cmp	r3, #62	@ 0x3e
 800d4d2:	d81c      	bhi.n	800d50e <USB_EPStartXfer+0xc54>
 800d4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4d8:	085b      	lsrs	r3, r3, #1
 800d4da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d4de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4e2:	f003 0301 	and.w	r3, r3, #1
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d004      	beq.n	800d4f4 <USB_EPStartXfer+0xc3a>
 800d4ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d4f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d4f6:	881b      	ldrh	r3, [r3, #0]
 800d4f8:	b29a      	uxth	r2, r3
 800d4fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	029b      	lsls	r3, r3, #10
 800d502:	b29b      	uxth	r3, r3
 800d504:	4313      	orrs	r3, r2
 800d506:	b29a      	uxth	r2, r3
 800d508:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d50a:	801a      	strh	r2, [r3, #0]
 800d50c:	e052      	b.n	800d5b4 <USB_EPStartXfer+0xcfa>
 800d50e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d512:	095b      	lsrs	r3, r3, #5
 800d514:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d51c:	f003 031f 	and.w	r3, r3, #31
 800d520:	2b00      	cmp	r3, #0
 800d522:	d104      	bne.n	800d52e <USB_EPStartXfer+0xc74>
 800d524:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d528:	3b01      	subs	r3, #1
 800d52a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d52e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d530:	881b      	ldrh	r3, [r3, #0]
 800d532:	b29a      	uxth	r2, r3
 800d534:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d538:	b29b      	uxth	r3, r3
 800d53a:	029b      	lsls	r3, r3, #10
 800d53c:	b29b      	uxth	r3, r3
 800d53e:	4313      	orrs	r3, r2
 800d540:	b29b      	uxth	r3, r3
 800d542:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d546:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d54a:	b29a      	uxth	r2, r3
 800d54c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d54e:	801a      	strh	r2, [r3, #0]
 800d550:	e030      	b.n	800d5b4 <USB_EPStartXfer+0xcfa>
 800d552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	785b      	ldrb	r3, [r3, #1]
 800d55e:	2b01      	cmp	r3, #1
 800d560:	d128      	bne.n	800d5b4 <USB_EPStartXfer+0xcfa>
 800d562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d566:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d574:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d57e:	b29b      	uxth	r3, r3
 800d580:	461a      	mov	r2, r3
 800d582:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d586:	4413      	add	r3, r2
 800d588:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d58c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	00da      	lsls	r2, r3, #3
 800d59a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d59e:	4413      	add	r3, r2
 800d5a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d5a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d5a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5ac:	b29a      	uxth	r2, r3
 800d5ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d5b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d5b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	891b      	ldrh	r3, [r3, #8]
 800d5c0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d5c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	6959      	ldr	r1, [r3, #20]
 800d5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5d4:	b29b      	uxth	r3, r3
 800d5d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d5da:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d5de:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d5e2:	6800      	ldr	r0, [r0, #0]
 800d5e4:	f000 fe55 	bl	800e292 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d5e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	009b      	lsls	r3, r3, #2
 800d600:	4413      	add	r3, r2
 800d602:	881b      	ldrh	r3, [r3, #0]
 800d604:	b29b      	uxth	r3, r3
 800d606:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d60a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d60e:	817b      	strh	r3, [r7, #10]
 800d610:	897b      	ldrh	r3, [r7, #10]
 800d612:	f083 0310 	eor.w	r3, r3, #16
 800d616:	817b      	strh	r3, [r7, #10]
 800d618:	897b      	ldrh	r3, [r7, #10]
 800d61a:	f083 0320 	eor.w	r3, r3, #32
 800d61e:	817b      	strh	r3, [r7, #10]
 800d620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d624:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d62e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	009b      	lsls	r3, r3, #2
 800d638:	441a      	add	r2, r3
 800d63a:	897b      	ldrh	r3, [r7, #10]
 800d63c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d640:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d644:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	8013      	strh	r3, [r2, #0]
 800d650:	f000 bcdf 	b.w	800e012 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	7b1b      	ldrb	r3, [r3, #12]
 800d660:	2b00      	cmp	r3, #0
 800d662:	f040 80bc 	bne.w	800d7de <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d66a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	699a      	ldr	r2, [r3, #24]
 800d672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d676:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	691b      	ldr	r3, [r3, #16]
 800d67e:	429a      	cmp	r2, r3
 800d680:	d917      	bls.n	800d6b2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800d682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	691b      	ldr	r3, [r3, #16]
 800d68e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800d692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d696:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	699a      	ldr	r2, [r3, #24]
 800d69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6a2:	1ad2      	subs	r2, r2, r3
 800d6a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	619a      	str	r2, [r3, #24]
 800d6b0:	e00e      	b.n	800d6d0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800d6b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	699b      	ldr	r3, [r3, #24]
 800d6be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800d6c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d6d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d6de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d6f4:	4413      	add	r3, r2
 800d6f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d6fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	00da      	lsls	r2, r3, #3
 800d708:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d70c:	4413      	add	r3, r2
 800d70e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d712:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d716:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d71a:	881b      	ldrh	r3, [r3, #0]
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d722:	b29a      	uxth	r2, r3
 800d724:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d728:	801a      	strh	r2, [r3, #0]
 800d72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d10d      	bne.n	800d74e <USB_EPStartXfer+0xe94>
 800d732:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d736:	881b      	ldrh	r3, [r3, #0]
 800d738:	b29b      	uxth	r3, r3
 800d73a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d73e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d742:	b29a      	uxth	r2, r3
 800d744:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d748:	801a      	strh	r2, [r3, #0]
 800d74a:	f000 bc28 	b.w	800df9e <USB_EPStartXfer+0x16e4>
 800d74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d752:	2b3e      	cmp	r3, #62	@ 0x3e
 800d754:	d81f      	bhi.n	800d796 <USB_EPStartXfer+0xedc>
 800d756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d75a:	085b      	lsrs	r3, r3, #1
 800d75c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d764:	f003 0301 	and.w	r3, r3, #1
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d004      	beq.n	800d776 <USB_EPStartXfer+0xebc>
 800d76c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d770:	3301      	adds	r3, #1
 800d772:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d776:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d77a:	881b      	ldrh	r3, [r3, #0]
 800d77c:	b29a      	uxth	r2, r3
 800d77e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d782:	b29b      	uxth	r3, r3
 800d784:	029b      	lsls	r3, r3, #10
 800d786:	b29b      	uxth	r3, r3
 800d788:	4313      	orrs	r3, r2
 800d78a:	b29a      	uxth	r2, r3
 800d78c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d790:	801a      	strh	r2, [r3, #0]
 800d792:	f000 bc04 	b.w	800df9e <USB_EPStartXfer+0x16e4>
 800d796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d79a:	095b      	lsrs	r3, r3, #5
 800d79c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7a4:	f003 031f 	and.w	r3, r3, #31
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d104      	bne.n	800d7b6 <USB_EPStartXfer+0xefc>
 800d7ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d7b0:	3b01      	subs	r3, #1
 800d7b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d7b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7ba:	881b      	ldrh	r3, [r3, #0]
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d7c2:	b29b      	uxth	r3, r3
 800d7c4:	029b      	lsls	r3, r3, #10
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	4313      	orrs	r3, r2
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7d4:	b29a      	uxth	r2, r3
 800d7d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7da:	801a      	strh	r2, [r3, #0]
 800d7dc:	e3df      	b.n	800df9e <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d7de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	78db      	ldrb	r3, [r3, #3]
 800d7ea:	2b02      	cmp	r3, #2
 800d7ec:	f040 8218 	bne.w	800dc20 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d7f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	785b      	ldrb	r3, [r3, #1]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	f040 809d 	bne.w	800d93c <USB_EPStartXfer+0x1082>
 800d802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d806:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d814:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d81e:	b29b      	uxth	r3, r3
 800d820:	461a      	mov	r2, r3
 800d822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d826:	4413      	add	r3, r2
 800d828:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d82c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	00da      	lsls	r2, r3, #3
 800d83a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d83e:	4413      	add	r3, r2
 800d840:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d844:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d848:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d84c:	881b      	ldrh	r3, [r3, #0]
 800d84e:	b29b      	uxth	r3, r3
 800d850:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d854:	b29a      	uxth	r2, r3
 800d856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d85a:	801a      	strh	r2, [r3, #0]
 800d85c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	691b      	ldr	r3, [r3, #16]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d10c      	bne.n	800d886 <USB_EPStartXfer+0xfcc>
 800d86c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d870:	881b      	ldrh	r3, [r3, #0]
 800d872:	b29b      	uxth	r3, r3
 800d874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d87c:	b29a      	uxth	r2, r3
 800d87e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d882:	801a      	strh	r2, [r3, #0]
 800d884:	e08f      	b.n	800d9a6 <USB_EPStartXfer+0x10ec>
 800d886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d88a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	691b      	ldr	r3, [r3, #16]
 800d892:	2b3e      	cmp	r3, #62	@ 0x3e
 800d894:	d826      	bhi.n	800d8e4 <USB_EPStartXfer+0x102a>
 800d896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d89a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	691b      	ldr	r3, [r3, #16]
 800d8a2:	085b      	lsrs	r3, r3, #1
 800d8a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d8a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	691b      	ldr	r3, [r3, #16]
 800d8b4:	f003 0301 	and.w	r3, r3, #1
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d004      	beq.n	800d8c6 <USB_EPStartXfer+0x100c>
 800d8bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d8c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d8ca:	881b      	ldrh	r3, [r3, #0]
 800d8cc:	b29a      	uxth	r2, r3
 800d8ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	029b      	lsls	r3, r3, #10
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	b29a      	uxth	r2, r3
 800d8dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d8e0:	801a      	strh	r2, [r3, #0]
 800d8e2:	e060      	b.n	800d9a6 <USB_EPStartXfer+0x10ec>
 800d8e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	691b      	ldr	r3, [r3, #16]
 800d8f0:	095b      	lsrs	r3, r3, #5
 800d8f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d8f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	691b      	ldr	r3, [r3, #16]
 800d902:	f003 031f 	and.w	r3, r3, #31
 800d906:	2b00      	cmp	r3, #0
 800d908:	d104      	bne.n	800d914 <USB_EPStartXfer+0x105a>
 800d90a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d90e:	3b01      	subs	r3, #1
 800d910:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d914:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d918:	881b      	ldrh	r3, [r3, #0]
 800d91a:	b29a      	uxth	r2, r3
 800d91c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d920:	b29b      	uxth	r3, r3
 800d922:	029b      	lsls	r3, r3, #10
 800d924:	b29b      	uxth	r3, r3
 800d926:	4313      	orrs	r3, r2
 800d928:	b29b      	uxth	r3, r3
 800d92a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d92e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d932:	b29a      	uxth	r2, r3
 800d934:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d938:	801a      	strh	r2, [r3, #0]
 800d93a:	e034      	b.n	800d9a6 <USB_EPStartXfer+0x10ec>
 800d93c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d940:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	785b      	ldrb	r3, [r3, #1]
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d12c      	bne.n	800d9a6 <USB_EPStartXfer+0x10ec>
 800d94c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d950:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d95a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d95e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d968:	b29b      	uxth	r3, r3
 800d96a:	461a      	mov	r2, r3
 800d96c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d970:	4413      	add	r3, r2
 800d972:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d97a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	781b      	ldrb	r3, [r3, #0]
 800d982:	00da      	lsls	r2, r3, #3
 800d984:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d988:	4413      	add	r3, r2
 800d98a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d98e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d996:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	b29a      	uxth	r2, r3
 800d9a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d9a4:	801a      	strh	r2, [r3, #0]
 800d9a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d9b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	785b      	ldrb	r3, [r3, #1]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	f040 809d 	bne.w	800db00 <USB_EPStartXfer+0x1246>
 800d9c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d9d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d9e2:	b29b      	uxth	r3, r3
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d9ea:	4413      	add	r3, r2
 800d9ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d9f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	00da      	lsls	r2, r3, #3
 800d9fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800da02:	4413      	add	r3, r2
 800da04:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800da08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800da0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da10:	881b      	ldrh	r3, [r3, #0]
 800da12:	b29b      	uxth	r3, r3
 800da14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da18:	b29a      	uxth	r2, r3
 800da1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da1e:	801a      	strh	r2, [r3, #0]
 800da20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	691b      	ldr	r3, [r3, #16]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d10c      	bne.n	800da4a <USB_EPStartXfer+0x1190>
 800da30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da34:	881b      	ldrh	r3, [r3, #0]
 800da36:	b29b      	uxth	r3, r3
 800da38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da40:	b29a      	uxth	r2, r3
 800da42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da46:	801a      	strh	r2, [r3, #0]
 800da48:	e088      	b.n	800db5c <USB_EPStartXfer+0x12a2>
 800da4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	691b      	ldr	r3, [r3, #16]
 800da56:	2b3e      	cmp	r3, #62	@ 0x3e
 800da58:	d826      	bhi.n	800daa8 <USB_EPStartXfer+0x11ee>
 800da5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	691b      	ldr	r3, [r3, #16]
 800da66:	085b      	lsrs	r3, r3, #1
 800da68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800da6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	691b      	ldr	r3, [r3, #16]
 800da78:	f003 0301 	and.w	r3, r3, #1
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d004      	beq.n	800da8a <USB_EPStartXfer+0x11d0>
 800da80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da84:	3301      	adds	r3, #1
 800da86:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800da8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da8e:	881b      	ldrh	r3, [r3, #0]
 800da90:	b29a      	uxth	r2, r3
 800da92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da96:	b29b      	uxth	r3, r3
 800da98:	029b      	lsls	r3, r3, #10
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	4313      	orrs	r3, r2
 800da9e:	b29a      	uxth	r2, r3
 800daa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800daa4:	801a      	strh	r2, [r3, #0]
 800daa6:	e059      	b.n	800db5c <USB_EPStartXfer+0x12a2>
 800daa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	691b      	ldr	r3, [r3, #16]
 800dab4:	095b      	lsrs	r3, r3, #5
 800dab6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800daba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dabe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	691b      	ldr	r3, [r3, #16]
 800dac6:	f003 031f 	and.w	r3, r3, #31
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d104      	bne.n	800dad8 <USB_EPStartXfer+0x121e>
 800dace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dad2:	3b01      	subs	r3, #1
 800dad4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dadc:	881b      	ldrh	r3, [r3, #0]
 800dade:	b29a      	uxth	r2, r3
 800dae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dae4:	b29b      	uxth	r3, r3
 800dae6:	029b      	lsls	r3, r3, #10
 800dae8:	b29b      	uxth	r3, r3
 800daea:	4313      	orrs	r3, r2
 800daec:	b29b      	uxth	r3, r3
 800daee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800daf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800daf6:	b29a      	uxth	r2, r3
 800daf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dafc:	801a      	strh	r2, [r3, #0]
 800dafe:	e02d      	b.n	800db5c <USB_EPStartXfer+0x12a2>
 800db00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	785b      	ldrb	r3, [r3, #1]
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d125      	bne.n	800db5c <USB_EPStartXfer+0x12a2>
 800db10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db1e:	b29b      	uxth	r3, r3
 800db20:	461a      	mov	r2, r3
 800db22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800db26:	4413      	add	r3, r2
 800db28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800db2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	00da      	lsls	r2, r3, #3
 800db3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800db3e:	4413      	add	r3, r2
 800db40:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800db44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800db48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	691b      	ldr	r3, [r3, #16]
 800db54:	b29a      	uxth	r2, r3
 800db56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800db5a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800db5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	69db      	ldr	r3, [r3, #28]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	f000 8218 	beq.w	800df9e <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800db6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db76:	681a      	ldr	r2, [r3, #0]
 800db78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	009b      	lsls	r3, r3, #2
 800db86:	4413      	add	r3, r2
 800db88:	881b      	ldrh	r3, [r3, #0]
 800db8a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800db8e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800db92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800db96:	2b00      	cmp	r3, #0
 800db98:	d005      	beq.n	800dba6 <USB_EPStartXfer+0x12ec>
 800db9a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800db9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d10d      	bne.n	800dbc2 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dba6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dbaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	f040 81f5 	bne.w	800df9e <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dbb4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dbb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	f040 81ee 	bne.w	800df9e <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800dbc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	009b      	lsls	r3, r3, #2
 800dbda:	4413      	add	r3, r2
 800dbdc:	881b      	ldrh	r3, [r3, #0]
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dbe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dbe8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800dbec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbf4:	681a      	ldr	r2, [r3, #0]
 800dbf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	009b      	lsls	r3, r3, #2
 800dc04:	441a      	add	r2, r3
 800dc06:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800dc0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dc0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dc12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dc16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	8013      	strh	r3, [r2, #0]
 800dc1e:	e1be      	b.n	800df9e <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800dc20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	78db      	ldrb	r3, [r3, #3]
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	f040 81b4 	bne.w	800df9a <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800dc32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	699a      	ldr	r2, [r3, #24]
 800dc3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	691b      	ldr	r3, [r3, #16]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d917      	bls.n	800dc7e <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800dc4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	691b      	ldr	r3, [r3, #16]
 800dc5a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800dc5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	699a      	ldr	r2, [r3, #24]
 800dc6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc6e:	1ad2      	subs	r2, r2, r3
 800dc70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	619a      	str	r2, [r3, #24]
 800dc7c:	e00e      	b.n	800dc9c <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800dc7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	699b      	ldr	r3, [r3, #24]
 800dc8a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800dc8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800dc9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	785b      	ldrb	r3, [r3, #1]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	f040 8085 	bne.w	800ddb8 <USB_EPStartXfer+0x14fe>
 800dcae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dcbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dcca:	b29b      	uxth	r3, r3
 800dccc:	461a      	mov	r2, r3
 800dcce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800dcd2:	4413      	add	r3, r2
 800dcd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dcd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	00da      	lsls	r2, r3, #3
 800dce6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800dcea:	4413      	add	r3, r2
 800dcec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dcf0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dcf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dcf8:	881b      	ldrh	r3, [r3, #0]
 800dcfa:	b29b      	uxth	r3, r3
 800dcfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd00:	b29a      	uxth	r2, r3
 800dd02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd06:	801a      	strh	r2, [r3, #0]
 800dd08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d10c      	bne.n	800dd2a <USB_EPStartXfer+0x1470>
 800dd10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd14:	881b      	ldrh	r3, [r3, #0]
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd20:	b29a      	uxth	r2, r3
 800dd22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd26:	801a      	strh	r2, [r3, #0]
 800dd28:	e077      	b.n	800de1a <USB_EPStartXfer+0x1560>
 800dd2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd2e:	2b3e      	cmp	r3, #62	@ 0x3e
 800dd30:	d81e      	bhi.n	800dd70 <USB_EPStartXfer+0x14b6>
 800dd32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd36:	085b      	lsrs	r3, r3, #1
 800dd38:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dd3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd40:	f003 0301 	and.w	r3, r3, #1
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d004      	beq.n	800dd52 <USB_EPStartXfer+0x1498>
 800dd48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dd52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd56:	881b      	ldrh	r3, [r3, #0]
 800dd58:	b29a      	uxth	r2, r3
 800dd5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	029b      	lsls	r3, r3, #10
 800dd62:	b29b      	uxth	r3, r3
 800dd64:	4313      	orrs	r3, r2
 800dd66:	b29a      	uxth	r2, r3
 800dd68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd6c:	801a      	strh	r2, [r3, #0]
 800dd6e:	e054      	b.n	800de1a <USB_EPStartXfer+0x1560>
 800dd70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd74:	095b      	lsrs	r3, r3, #5
 800dd76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dd7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd7e:	f003 031f 	and.w	r3, r3, #31
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d104      	bne.n	800dd90 <USB_EPStartXfer+0x14d6>
 800dd86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd8a:	3b01      	subs	r3, #1
 800dd8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dd90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd94:	881b      	ldrh	r3, [r3, #0]
 800dd96:	b29a      	uxth	r2, r3
 800dd98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	029b      	lsls	r3, r3, #10
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	4313      	orrs	r3, r2
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ddae:	b29a      	uxth	r2, r3
 800ddb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ddb4:	801a      	strh	r2, [r3, #0]
 800ddb6:	e030      	b.n	800de1a <USB_EPStartXfer+0x1560>
 800ddb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	785b      	ldrb	r3, [r3, #1]
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d128      	bne.n	800de1a <USB_EPStartXfer+0x1560>
 800ddc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ddd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dde4:	b29b      	uxth	r3, r3
 800dde6:	461a      	mov	r2, r3
 800dde8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ddec:	4413      	add	r3, r2
 800ddee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ddf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	00da      	lsls	r2, r3, #3
 800de00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de04:	4413      	add	r3, r2
 800de06:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800de0a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800de0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de12:	b29a      	uxth	r2, r3
 800de14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800de18:	801a      	strh	r2, [r3, #0]
 800de1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800de28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	785b      	ldrb	r3, [r3, #1]
 800de34:	2b00      	cmp	r3, #0
 800de36:	f040 8085 	bne.w	800df44 <USB_EPStartXfer+0x168a>
 800de3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800de48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de56:	b29b      	uxth	r3, r3
 800de58:	461a      	mov	r2, r3
 800de5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800de5e:	4413      	add	r3, r2
 800de60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800de64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	00da      	lsls	r2, r3, #3
 800de72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800de76:	4413      	add	r3, r2
 800de78:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800de7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800de80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800de84:	881b      	ldrh	r3, [r3, #0]
 800de86:	b29b      	uxth	r3, r3
 800de88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800de8c:	b29a      	uxth	r2, r3
 800de8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800de92:	801a      	strh	r2, [r3, #0]
 800de94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d10c      	bne.n	800deb6 <USB_EPStartXfer+0x15fc>
 800de9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dea0:	881b      	ldrh	r3, [r3, #0]
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800deac:	b29a      	uxth	r2, r3
 800deae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800deb2:	801a      	strh	r2, [r3, #0]
 800deb4:	e073      	b.n	800df9e <USB_EPStartXfer+0x16e4>
 800deb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800deba:	2b3e      	cmp	r3, #62	@ 0x3e
 800debc:	d81e      	bhi.n	800defc <USB_EPStartXfer+0x1642>
 800debe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dec2:	085b      	lsrs	r3, r3, #1
 800dec4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800dec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800decc:	f003 0301 	and.w	r3, r3, #1
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d004      	beq.n	800dede <USB_EPStartXfer+0x1624>
 800ded4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ded8:	3301      	adds	r3, #1
 800deda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800dede:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dee2:	881b      	ldrh	r3, [r3, #0]
 800dee4:	b29a      	uxth	r2, r3
 800dee6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800deea:	b29b      	uxth	r3, r3
 800deec:	029b      	lsls	r3, r3, #10
 800deee:	b29b      	uxth	r3, r3
 800def0:	4313      	orrs	r3, r2
 800def2:	b29a      	uxth	r2, r3
 800def4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800def8:	801a      	strh	r2, [r3, #0]
 800defa:	e050      	b.n	800df9e <USB_EPStartXfer+0x16e4>
 800defc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df00:	095b      	lsrs	r3, r3, #5
 800df02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800df06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df0a:	f003 031f 	and.w	r3, r3, #31
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d104      	bne.n	800df1c <USB_EPStartXfer+0x1662>
 800df12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800df16:	3b01      	subs	r3, #1
 800df18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800df1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df20:	881b      	ldrh	r3, [r3, #0]
 800df22:	b29a      	uxth	r2, r3
 800df24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800df28:	b29b      	uxth	r3, r3
 800df2a:	029b      	lsls	r3, r3, #10
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	4313      	orrs	r3, r2
 800df30:	b29b      	uxth	r3, r3
 800df32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df3a:	b29a      	uxth	r2, r3
 800df3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df40:	801a      	strh	r2, [r3, #0]
 800df42:	e02c      	b.n	800df9e <USB_EPStartXfer+0x16e4>
 800df44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	785b      	ldrb	r3, [r3, #1]
 800df50:	2b01      	cmp	r3, #1
 800df52:	d124      	bne.n	800df9e <USB_EPStartXfer+0x16e4>
 800df54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df62:	b29b      	uxth	r3, r3
 800df64:	461a      	mov	r2, r3
 800df66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800df6a:	4413      	add	r3, r2
 800df6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800df70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	00da      	lsls	r2, r3, #3
 800df7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800df82:	4413      	add	r3, r2
 800df84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800df88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800df8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df90:	b29a      	uxth	r2, r3
 800df92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800df96:	801a      	strh	r2, [r3, #0]
 800df98:	e001      	b.n	800df9e <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800df9a:	2301      	movs	r3, #1
 800df9c:	e03a      	b.n	800e014 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800df9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfa6:	681a      	ldr	r2, [r3, #0]
 800dfa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	4413      	add	r3, r2
 800dfb8:	881b      	ldrh	r3, [r3, #0]
 800dfba:	b29b      	uxth	r3, r3
 800dfbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dfc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dfc4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800dfc8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dfcc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800dfd0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800dfd4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dfd8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800dfdc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800dfe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfe4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfe8:	681a      	ldr	r2, [r3, #0]
 800dfea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	009b      	lsls	r3, r3, #2
 800dff8:	441a      	add	r2, r3
 800dffa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dffe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e002:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e00a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e00e:	b29b      	uxth	r3, r3
 800e010:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e012:	2300      	movs	r3, #0
}
 800e014:	4618      	mov	r0, r3
 800e016:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}

0800e01e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e01e:	b480      	push	{r7}
 800e020:	b085      	sub	sp, #20
 800e022:	af00      	add	r7, sp, #0
 800e024:	6078      	str	r0, [r7, #4]
 800e026:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	785b      	ldrb	r3, [r3, #1]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d020      	beq.n	800e072 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e030:	687a      	ldr	r2, [r7, #4]
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	4413      	add	r3, r2
 800e03a:	881b      	ldrh	r3, [r3, #0]
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e042:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e046:	81bb      	strh	r3, [r7, #12]
 800e048:	89bb      	ldrh	r3, [r7, #12]
 800e04a:	f083 0310 	eor.w	r3, r3, #16
 800e04e:	81bb      	strh	r3, [r7, #12]
 800e050:	687a      	ldr	r2, [r7, #4]
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	781b      	ldrb	r3, [r3, #0]
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	441a      	add	r2, r3
 800e05a:	89bb      	ldrh	r3, [r7, #12]
 800e05c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e060:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e06c:	b29b      	uxth	r3, r3
 800e06e:	8013      	strh	r3, [r2, #0]
 800e070:	e01f      	b.n	800e0b2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	4413      	add	r3, r2
 800e07c:	881b      	ldrh	r3, [r3, #0]
 800e07e:	b29b      	uxth	r3, r3
 800e080:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e088:	81fb      	strh	r3, [r7, #14]
 800e08a:	89fb      	ldrh	r3, [r7, #14]
 800e08c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e090:	81fb      	strh	r3, [r7, #14]
 800e092:	687a      	ldr	r2, [r7, #4]
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	441a      	add	r2, r3
 800e09c:	89fb      	ldrh	r3, [r7, #14]
 800e09e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e0a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e0a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e0aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e0b2:	2300      	movs	r3, #0
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	3714      	adds	r7, #20
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0be:	4770      	bx	lr

0800e0c0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b087      	sub	sp, #28
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	7b1b      	ldrb	r3, [r3, #12]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	f040 809d 	bne.w	800e20e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	785b      	ldrb	r3, [r3, #1]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d04c      	beq.n	800e176 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	4413      	add	r3, r2
 800e0e6:	881b      	ldrh	r3, [r3, #0]
 800e0e8:	823b      	strh	r3, [r7, #16]
 800e0ea:	8a3b      	ldrh	r3, [r7, #16]
 800e0ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d01b      	beq.n	800e12c <USB_EPClearStall+0x6c>
 800e0f4:	687a      	ldr	r2, [r7, #4]
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	009b      	lsls	r3, r3, #2
 800e0fc:	4413      	add	r3, r2
 800e0fe:	881b      	ldrh	r3, [r3, #0]
 800e100:	b29b      	uxth	r3, r3
 800e102:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e10a:	81fb      	strh	r3, [r7, #14]
 800e10c:	687a      	ldr	r2, [r7, #4]
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	009b      	lsls	r3, r3, #2
 800e114:	441a      	add	r2, r3
 800e116:	89fb      	ldrh	r3, [r7, #14]
 800e118:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e11c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e124:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e128:	b29b      	uxth	r3, r3
 800e12a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	78db      	ldrb	r3, [r3, #3]
 800e130:	2b01      	cmp	r3, #1
 800e132:	d06c      	beq.n	800e20e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	4413      	add	r3, r2
 800e13e:	881b      	ldrh	r3, [r3, #0]
 800e140:	b29b      	uxth	r3, r3
 800e142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e146:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e14a:	81bb      	strh	r3, [r7, #12]
 800e14c:	89bb      	ldrh	r3, [r7, #12]
 800e14e:	f083 0320 	eor.w	r3, r3, #32
 800e152:	81bb      	strh	r3, [r7, #12]
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	009b      	lsls	r3, r3, #2
 800e15c:	441a      	add	r2, r3
 800e15e:	89bb      	ldrh	r3, [r7, #12]
 800e160:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e164:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e168:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e16c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e170:	b29b      	uxth	r3, r3
 800e172:	8013      	strh	r3, [r2, #0]
 800e174:	e04b      	b.n	800e20e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e176:	687a      	ldr	r2, [r7, #4]
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	009b      	lsls	r3, r3, #2
 800e17e:	4413      	add	r3, r2
 800e180:	881b      	ldrh	r3, [r3, #0]
 800e182:	82fb      	strh	r3, [r7, #22]
 800e184:	8afb      	ldrh	r3, [r7, #22]
 800e186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d01b      	beq.n	800e1c6 <USB_EPClearStall+0x106>
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	4413      	add	r3, r2
 800e198:	881b      	ldrh	r3, [r3, #0]
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e1a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e1a4:	82bb      	strh	r3, [r7, #20]
 800e1a6:	687a      	ldr	r2, [r7, #4]
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	009b      	lsls	r3, r3, #2
 800e1ae:	441a      	add	r2, r3
 800e1b0:	8abb      	ldrh	r3, [r7, #20]
 800e1b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e1b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e1ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e1be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1c2:	b29b      	uxth	r3, r3
 800e1c4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	009b      	lsls	r3, r3, #2
 800e1ce:	4413      	add	r3, r2
 800e1d0:	881b      	ldrh	r3, [r3, #0]
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e1d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e1dc:	827b      	strh	r3, [r7, #18]
 800e1de:	8a7b      	ldrh	r3, [r7, #18]
 800e1e0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e1e4:	827b      	strh	r3, [r7, #18]
 800e1e6:	8a7b      	ldrh	r3, [r7, #18]
 800e1e8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e1ec:	827b      	strh	r3, [r7, #18]
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	009b      	lsls	r3, r3, #2
 800e1f6:	441a      	add	r2, r3
 800e1f8:	8a7b      	ldrh	r3, [r7, #18]
 800e1fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e1fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e20e:	2300      	movs	r3, #0
}
 800e210:	4618      	mov	r0, r3
 800e212:	371c      	adds	r7, #28
 800e214:	46bd      	mov	sp, r7
 800e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21a:	4770      	bx	lr

0800e21c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e21c:	b480      	push	{r7}
 800e21e:	b083      	sub	sp, #12
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	460b      	mov	r3, r1
 800e226:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e228:	78fb      	ldrb	r3, [r7, #3]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d103      	bne.n	800e236 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2280      	movs	r2, #128	@ 0x80
 800e232:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e236:	2300      	movs	r3, #0
}
 800e238:	4618      	mov	r0, r3
 800e23a:	370c      	adds	r7, #12
 800e23c:	46bd      	mov	sp, r7
 800e23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e242:	4770      	bx	lr

0800e244 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e244:	b480      	push	{r7}
 800e246:	b083      	sub	sp, #12
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e252:	b29b      	uxth	r3, r3
 800e254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e25c:	b29a      	uxth	r2, r3
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e264:	2300      	movs	r3, #0
}
 800e266:	4618      	mov	r0, r3
 800e268:	370c      	adds	r7, #12
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr

0800e272 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e272:	b480      	push	{r7}
 800e274:	b085      	sub	sp, #20
 800e276:	af00      	add	r7, sp, #0
 800e278:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800e280:	b29b      	uxth	r3, r3
 800e282:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e284:	68fb      	ldr	r3, [r7, #12]
}
 800e286:	4618      	mov	r0, r3
 800e288:	3714      	adds	r7, #20
 800e28a:	46bd      	mov	sp, r7
 800e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e290:	4770      	bx	lr

0800e292 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e292:	b480      	push	{r7}
 800e294:	b08b      	sub	sp, #44	@ 0x2c
 800e296:	af00      	add	r7, sp, #0
 800e298:	60f8      	str	r0, [r7, #12]
 800e29a:	60b9      	str	r1, [r7, #8]
 800e29c:	4611      	mov	r1, r2
 800e29e:	461a      	mov	r2, r3
 800e2a0:	460b      	mov	r3, r1
 800e2a2:	80fb      	strh	r3, [r7, #6]
 800e2a4:	4613      	mov	r3, r2
 800e2a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e2a8:	88bb      	ldrh	r3, [r7, #4]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	085b      	lsrs	r3, r3, #1
 800e2ae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e2b8:	88fa      	ldrh	r2, [r7, #6]
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	4413      	add	r3, r2
 800e2be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2c2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e2c4:	69bb      	ldr	r3, [r7, #24]
 800e2c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2c8:	e01b      	b.n	800e302 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e2d0:	69fb      	ldr	r3, [r7, #28]
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	021b      	lsls	r3, r3, #8
 800e2d8:	b21a      	sxth	r2, r3
 800e2da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	b21b      	sxth	r3, r3
 800e2e2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e2e4:	6a3b      	ldr	r3, [r7, #32]
 800e2e6:	8a7a      	ldrh	r2, [r7, #18]
 800e2e8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e2ea:	6a3b      	ldr	r3, [r7, #32]
 800e2ec:	3302      	adds	r3, #2
 800e2ee:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e2f0:	69fb      	ldr	r3, [r7, #28]
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e2f6:	69fb      	ldr	r3, [r7, #28]
 800e2f8:	3301      	adds	r3, #1
 800e2fa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2fe:	3b01      	subs	r3, #1
 800e300:	627b      	str	r3, [r7, #36]	@ 0x24
 800e302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e304:	2b00      	cmp	r3, #0
 800e306:	d1e0      	bne.n	800e2ca <USB_WritePMA+0x38>
  }
}
 800e308:	bf00      	nop
 800e30a:	bf00      	nop
 800e30c:	372c      	adds	r7, #44	@ 0x2c
 800e30e:	46bd      	mov	sp, r7
 800e310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e314:	4770      	bx	lr

0800e316 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e316:	b480      	push	{r7}
 800e318:	b08b      	sub	sp, #44	@ 0x2c
 800e31a:	af00      	add	r7, sp, #0
 800e31c:	60f8      	str	r0, [r7, #12]
 800e31e:	60b9      	str	r1, [r7, #8]
 800e320:	4611      	mov	r1, r2
 800e322:	461a      	mov	r2, r3
 800e324:	460b      	mov	r3, r1
 800e326:	80fb      	strh	r3, [r7, #6]
 800e328:	4613      	mov	r3, r2
 800e32a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e32c:	88bb      	ldrh	r3, [r7, #4]
 800e32e:	085b      	lsrs	r3, r3, #1
 800e330:	b29b      	uxth	r3, r3
 800e332:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e33c:	88fa      	ldrh	r2, [r7, #6]
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	4413      	add	r3, r2
 800e342:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e346:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e348:	69bb      	ldr	r3, [r7, #24]
 800e34a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e34c:	e018      	b.n	800e380 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e34e:	6a3b      	ldr	r3, [r7, #32]
 800e350:	881b      	ldrh	r3, [r3, #0]
 800e352:	b29b      	uxth	r3, r3
 800e354:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e356:	6a3b      	ldr	r3, [r7, #32]
 800e358:	3302      	adds	r3, #2
 800e35a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	b2da      	uxtb	r2, r3
 800e360:	69fb      	ldr	r3, [r7, #28]
 800e362:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	3301      	adds	r3, #1
 800e368:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	0a1b      	lsrs	r3, r3, #8
 800e36e:	b2da      	uxtb	r2, r3
 800e370:	69fb      	ldr	r3, [r7, #28]
 800e372:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	3301      	adds	r3, #1
 800e378:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e37c:	3b01      	subs	r3, #1
 800e37e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e382:	2b00      	cmp	r3, #0
 800e384:	d1e3      	bne.n	800e34e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e386:	88bb      	ldrh	r3, [r7, #4]
 800e388:	f003 0301 	and.w	r3, r3, #1
 800e38c:	b29b      	uxth	r3, r3
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d007      	beq.n	800e3a2 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e392:	6a3b      	ldr	r3, [r7, #32]
 800e394:	881b      	ldrh	r3, [r3, #0]
 800e396:	b29b      	uxth	r3, r3
 800e398:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e39a:	693b      	ldr	r3, [r7, #16]
 800e39c:	b2da      	uxtb	r2, r3
 800e39e:	69fb      	ldr	r3, [r7, #28]
 800e3a0:	701a      	strb	r2, [r3, #0]
  }
}
 800e3a2:	bf00      	nop
 800e3a4:	372c      	adds	r7, #44	@ 0x2c
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ac:	4770      	bx	lr

0800e3ae <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e3ae:	b580      	push	{r7, lr}
 800e3b0:	b084      	sub	sp, #16
 800e3b2:	af00      	add	r7, sp, #0
 800e3b4:	6078      	str	r0, [r7, #4]
 800e3b6:	460b      	mov	r3, r1
 800e3b8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e3ba:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e3be:	f002 f90f 	bl	80105e0 <USBD_static_malloc>
 800e3c2:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d105      	bne.n	800e3d6 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800e3d2:	2302      	movs	r3, #2
 800e3d4:	e066      	b.n	800e4a4 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	68fa      	ldr	r2, [r7, #12]
 800e3da:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	7c1b      	ldrb	r3, [r3, #16]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d119      	bne.n	800e41a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e3e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e3ea:	2202      	movs	r2, #2
 800e3ec:	2181      	movs	r1, #129	@ 0x81
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f001 ff9d 	bl	801032e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e3fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e3fe:	2202      	movs	r2, #2
 800e400:	2101      	movs	r1, #1
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f001 ff93 	bl	801032e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2201      	movs	r2, #1
 800e40c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2210      	movs	r2, #16
 800e414:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800e418:	e016      	b.n	800e448 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e41a:	2340      	movs	r3, #64	@ 0x40
 800e41c:	2202      	movs	r2, #2
 800e41e:	2181      	movs	r1, #129	@ 0x81
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f001 ff84 	bl	801032e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2201      	movs	r2, #1
 800e42a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e42c:	2340      	movs	r3, #64	@ 0x40
 800e42e:	2202      	movs	r2, #2
 800e430:	2101      	movs	r1, #1
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f001 ff7b 	bl	801032e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2201      	movs	r2, #1
 800e43c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2210      	movs	r2, #16
 800e444:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e448:	2308      	movs	r3, #8
 800e44a:	2203      	movs	r2, #3
 800e44c:	2182      	movs	r1, #130	@ 0x82
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f001 ff6d 	bl	801032e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2201      	movs	r2, #1
 800e458:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2200      	movs	r2, #0
 800e46a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	2200      	movs	r2, #0
 800e472:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	7c1b      	ldrb	r3, [r3, #16]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d109      	bne.n	800e492 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e484:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e488:	2101      	movs	r1, #1
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f002 f83e 	bl	801050c <USBD_LL_PrepareReceive>
 800e490:	e007      	b.n	800e4a2 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e498:	2340      	movs	r3, #64	@ 0x40
 800e49a:	2101      	movs	r1, #1
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f002 f835 	bl	801050c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e4a2:	2300      	movs	r3, #0
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3710      	adds	r7, #16
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}

0800e4ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b082      	sub	sp, #8
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	460b      	mov	r3, r1
 800e4b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e4b8:	2181      	movs	r1, #129	@ 0x81
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f001 ff5d 	bl	801037a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e4c6:	2101      	movs	r1, #1
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f001 ff56 	bl	801037a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e4d6:	2182      	movs	r1, #130	@ 0x82
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f001 ff4e 	bl	801037a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d00e      	beq.n	800e516 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e508:	4618      	mov	r0, r3
 800e50a:	f002 f877 	bl	80105fc <USBD_static_free>
    pdev->pClassData = NULL;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2200      	movs	r2, #0
 800e512:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e516:	2300      	movs	r3, #0
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3708      	adds	r7, #8
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}

0800e520 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b086      	sub	sp, #24
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e530:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e532:	2300      	movs	r3, #0
 800e534:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e536:	2300      	movs	r3, #0
 800e538:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e53a:	2300      	movs	r3, #0
 800e53c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d101      	bne.n	800e548 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e544:	2303      	movs	r3, #3
 800e546:	e0af      	b.n	800e6a8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	781b      	ldrb	r3, [r3, #0]
 800e54c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e550:	2b00      	cmp	r3, #0
 800e552:	d03f      	beq.n	800e5d4 <USBD_CDC_Setup+0xb4>
 800e554:	2b20      	cmp	r3, #32
 800e556:	f040 809f 	bne.w	800e698 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	88db      	ldrh	r3, [r3, #6]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d02e      	beq.n	800e5c0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	b25b      	sxtb	r3, r3
 800e568:	2b00      	cmp	r3, #0
 800e56a:	da16      	bge.n	800e59a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e572:	689b      	ldr	r3, [r3, #8]
 800e574:	683a      	ldr	r2, [r7, #0]
 800e576:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e578:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e57a:	683a      	ldr	r2, [r7, #0]
 800e57c:	88d2      	ldrh	r2, [r2, #6]
 800e57e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	88db      	ldrh	r3, [r3, #6]
 800e584:	2b07      	cmp	r3, #7
 800e586:	bf28      	it	cs
 800e588:	2307      	movcs	r3, #7
 800e58a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	89fa      	ldrh	r2, [r7, #14]
 800e590:	4619      	mov	r1, r3
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f001 facd 	bl	800fb32 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e598:	e085      	b.n	800e6a6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	785a      	ldrb	r2, [r3, #1]
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	88db      	ldrh	r3, [r3, #6]
 800e5a8:	b2da      	uxtb	r2, r3
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e5b0:	6939      	ldr	r1, [r7, #16]
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	88db      	ldrh	r3, [r3, #6]
 800e5b6:	461a      	mov	r2, r3
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f001 fae6 	bl	800fb8a <USBD_CtlPrepareRx>
      break;
 800e5be:	e072      	b.n	800e6a6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e5c6:	689b      	ldr	r3, [r3, #8]
 800e5c8:	683a      	ldr	r2, [r7, #0]
 800e5ca:	7850      	ldrb	r0, [r2, #1]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	6839      	ldr	r1, [r7, #0]
 800e5d0:	4798      	blx	r3
      break;
 800e5d2:	e068      	b.n	800e6a6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	785b      	ldrb	r3, [r3, #1]
 800e5d8:	2b0b      	cmp	r3, #11
 800e5da:	d852      	bhi.n	800e682 <USBD_CDC_Setup+0x162>
 800e5dc:	a201      	add	r2, pc, #4	@ (adr r2, 800e5e4 <USBD_CDC_Setup+0xc4>)
 800e5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5e2:	bf00      	nop
 800e5e4:	0800e615 	.word	0x0800e615
 800e5e8:	0800e691 	.word	0x0800e691
 800e5ec:	0800e683 	.word	0x0800e683
 800e5f0:	0800e683 	.word	0x0800e683
 800e5f4:	0800e683 	.word	0x0800e683
 800e5f8:	0800e683 	.word	0x0800e683
 800e5fc:	0800e683 	.word	0x0800e683
 800e600:	0800e683 	.word	0x0800e683
 800e604:	0800e683 	.word	0x0800e683
 800e608:	0800e683 	.word	0x0800e683
 800e60c:	0800e63f 	.word	0x0800e63f
 800e610:	0800e669 	.word	0x0800e669
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e61a:	b2db      	uxtb	r3, r3
 800e61c:	2b03      	cmp	r3, #3
 800e61e:	d107      	bne.n	800e630 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e620:	f107 030a 	add.w	r3, r7, #10
 800e624:	2202      	movs	r2, #2
 800e626:	4619      	mov	r1, r3
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f001 fa82 	bl	800fb32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e62e:	e032      	b.n	800e696 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e630:	6839      	ldr	r1, [r7, #0]
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f001 fa0c 	bl	800fa50 <USBD_CtlError>
            ret = USBD_FAIL;
 800e638:	2303      	movs	r3, #3
 800e63a:	75fb      	strb	r3, [r7, #23]
          break;
 800e63c:	e02b      	b.n	800e696 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e644:	b2db      	uxtb	r3, r3
 800e646:	2b03      	cmp	r3, #3
 800e648:	d107      	bne.n	800e65a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e64a:	f107 030d 	add.w	r3, r7, #13
 800e64e:	2201      	movs	r2, #1
 800e650:	4619      	mov	r1, r3
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f001 fa6d 	bl	800fb32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e658:	e01d      	b.n	800e696 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e65a:	6839      	ldr	r1, [r7, #0]
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f001 f9f7 	bl	800fa50 <USBD_CtlError>
            ret = USBD_FAIL;
 800e662:	2303      	movs	r3, #3
 800e664:	75fb      	strb	r3, [r7, #23]
          break;
 800e666:	e016      	b.n	800e696 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	2b03      	cmp	r3, #3
 800e672:	d00f      	beq.n	800e694 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e674:	6839      	ldr	r1, [r7, #0]
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f001 f9ea 	bl	800fa50 <USBD_CtlError>
            ret = USBD_FAIL;
 800e67c:	2303      	movs	r3, #3
 800e67e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e680:	e008      	b.n	800e694 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e682:	6839      	ldr	r1, [r7, #0]
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f001 f9e3 	bl	800fa50 <USBD_CtlError>
          ret = USBD_FAIL;
 800e68a:	2303      	movs	r3, #3
 800e68c:	75fb      	strb	r3, [r7, #23]
          break;
 800e68e:	e002      	b.n	800e696 <USBD_CDC_Setup+0x176>
          break;
 800e690:	bf00      	nop
 800e692:	e008      	b.n	800e6a6 <USBD_CDC_Setup+0x186>
          break;
 800e694:	bf00      	nop
      }
      break;
 800e696:	e006      	b.n	800e6a6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e698:	6839      	ldr	r1, [r7, #0]
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f001 f9d8 	bl	800fa50 <USBD_CtlError>
      ret = USBD_FAIL;
 800e6a0:	2303      	movs	r3, #3
 800e6a2:	75fb      	strb	r3, [r7, #23]
      break;
 800e6a4:	bf00      	nop
  }

  return (uint8_t)ret;
 800e6a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3718      	adds	r7, #24
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b084      	sub	sp, #16
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	460b      	mov	r3, r1
 800e6ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e6c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d101      	bne.n	800e6d2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e6ce:	2303      	movs	r3, #3
 800e6d0:	e04f      	b.n	800e772 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e6d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e6da:	78fa      	ldrb	r2, [r7, #3]
 800e6dc:	6879      	ldr	r1, [r7, #4]
 800e6de:	4613      	mov	r3, r2
 800e6e0:	009b      	lsls	r3, r3, #2
 800e6e2:	4413      	add	r3, r2
 800e6e4:	009b      	lsls	r3, r3, #2
 800e6e6:	440b      	add	r3, r1
 800e6e8:	3318      	adds	r3, #24
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d029      	beq.n	800e744 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e6f0:	78fa      	ldrb	r2, [r7, #3]
 800e6f2:	6879      	ldr	r1, [r7, #4]
 800e6f4:	4613      	mov	r3, r2
 800e6f6:	009b      	lsls	r3, r3, #2
 800e6f8:	4413      	add	r3, r2
 800e6fa:	009b      	lsls	r3, r3, #2
 800e6fc:	440b      	add	r3, r1
 800e6fe:	3318      	adds	r3, #24
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	78f9      	ldrb	r1, [r7, #3]
 800e704:	68f8      	ldr	r0, [r7, #12]
 800e706:	460b      	mov	r3, r1
 800e708:	009b      	lsls	r3, r3, #2
 800e70a:	440b      	add	r3, r1
 800e70c:	00db      	lsls	r3, r3, #3
 800e70e:	4403      	add	r3, r0
 800e710:	3320      	adds	r3, #32
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	fbb2 f1f3 	udiv	r1, r2, r3
 800e718:	fb01 f303 	mul.w	r3, r1, r3
 800e71c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d110      	bne.n	800e744 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e722:	78fa      	ldrb	r2, [r7, #3]
 800e724:	6879      	ldr	r1, [r7, #4]
 800e726:	4613      	mov	r3, r2
 800e728:	009b      	lsls	r3, r3, #2
 800e72a:	4413      	add	r3, r2
 800e72c:	009b      	lsls	r3, r3, #2
 800e72e:	440b      	add	r3, r1
 800e730:	3318      	adds	r3, #24
 800e732:	2200      	movs	r2, #0
 800e734:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e736:	78f9      	ldrb	r1, [r7, #3]
 800e738:	2300      	movs	r3, #0
 800e73a:	2200      	movs	r2, #0
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f001 fec4 	bl	80104ca <USBD_LL_Transmit>
 800e742:	e015      	b.n	800e770 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	2200      	movs	r2, #0
 800e748:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e752:	691b      	ldr	r3, [r3, #16]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d00b      	beq.n	800e770 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e75e:	691b      	ldr	r3, [r3, #16]
 800e760:	68ba      	ldr	r2, [r7, #8]
 800e762:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e766:	68ba      	ldr	r2, [r7, #8]
 800e768:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e76c:	78fa      	ldrb	r2, [r7, #3]
 800e76e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e770:	2300      	movs	r3, #0
}
 800e772:	4618      	mov	r0, r3
 800e774:	3710      	adds	r7, #16
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}

0800e77a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e77a:	b580      	push	{r7, lr}
 800e77c:	b084      	sub	sp, #16
 800e77e:	af00      	add	r7, sp, #0
 800e780:	6078      	str	r0, [r7, #4]
 800e782:	460b      	mov	r3, r1
 800e784:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e78c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e794:	2b00      	cmp	r3, #0
 800e796:	d101      	bne.n	800e79c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e798:	2303      	movs	r3, #3
 800e79a:	e015      	b.n	800e7c8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e79c:	78fb      	ldrb	r3, [r7, #3]
 800e79e:	4619      	mov	r1, r3
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f001 fed4 	bl	801054e <USBD_LL_GetRxDataSize>
 800e7a6:	4602      	mov	r2, r0
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e7b4:	68db      	ldr	r3, [r3, #12]
 800e7b6:	68fa      	ldr	r2, [r7, #12]
 800e7b8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e7bc:	68fa      	ldr	r2, [r7, #12]
 800e7be:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e7c2:	4611      	mov	r1, r2
 800e7c4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e7c6:	2300      	movs	r3, #0
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	3710      	adds	r7, #16
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}

0800e7d0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b084      	sub	sp, #16
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e7de:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d101      	bne.n	800e7ea <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e7e6:	2303      	movs	r3, #3
 800e7e8:	e01a      	b.n	800e820 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d014      	beq.n	800e81e <USBD_CDC_EP0_RxReady+0x4e>
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e7fa:	2bff      	cmp	r3, #255	@ 0xff
 800e7fc:	d00f      	beq.n	800e81e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e804:	689b      	ldr	r3, [r3, #8]
 800e806:	68fa      	ldr	r2, [r7, #12]
 800e808:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800e80c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e80e:	68fa      	ldr	r2, [r7, #12]
 800e810:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e814:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	22ff      	movs	r2, #255	@ 0xff
 800e81a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e81e:	2300      	movs	r3, #0
}
 800e820:	4618      	mov	r0, r3
 800e822:	3710      	adds	r7, #16
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e828:	b480      	push	{r7}
 800e82a:	b083      	sub	sp, #12
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2243      	movs	r2, #67	@ 0x43
 800e834:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e836:	4b03      	ldr	r3, [pc, #12]	@ (800e844 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e838:	4618      	mov	r0, r3
 800e83a:	370c      	adds	r7, #12
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr
 800e844:	200000b0 	.word	0x200000b0

0800e848 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e848:	b480      	push	{r7}
 800e84a:	b083      	sub	sp, #12
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2243      	movs	r2, #67	@ 0x43
 800e854:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e856:	4b03      	ldr	r3, [pc, #12]	@ (800e864 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e858:	4618      	mov	r0, r3
 800e85a:	370c      	adds	r7, #12
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr
 800e864:	2000006c 	.word	0x2000006c

0800e868 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e868:	b480      	push	{r7}
 800e86a:	b083      	sub	sp, #12
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2243      	movs	r2, #67	@ 0x43
 800e874:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e876:	4b03      	ldr	r3, [pc, #12]	@ (800e884 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e878:	4618      	mov	r0, r3
 800e87a:	370c      	adds	r7, #12
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr
 800e884:	200000f4 	.word	0x200000f4

0800e888 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	220a      	movs	r2, #10
 800e894:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e896:	4b03      	ldr	r3, [pc, #12]	@ (800e8a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e898:	4618      	mov	r0, r3
 800e89a:	370c      	adds	r7, #12
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr
 800e8a4:	20000028 	.word	0x20000028

0800e8a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b083      	sub	sp, #12
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d101      	bne.n	800e8bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e8b8:	2303      	movs	r3, #3
 800e8ba:	e004      	b.n	800e8c6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	683a      	ldr	r2, [r7, #0]
 800e8c0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800e8c4:	2300      	movs	r3, #0
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	370c      	adds	r7, #12
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d0:	4770      	bx	lr

0800e8d2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e8d2:	b480      	push	{r7}
 800e8d4:	b087      	sub	sp, #28
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	60f8      	str	r0, [r7, #12]
 800e8da:	60b9      	str	r1, [r7, #8]
 800e8dc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e8e4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d101      	bne.n	800e8f0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e8ec:	2303      	movs	r3, #3
 800e8ee:	e008      	b.n	800e902 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	68ba      	ldr	r2, [r7, #8]
 800e8f4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	687a      	ldr	r2, [r7, #4]
 800e8fc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e900:	2300      	movs	r3, #0
}
 800e902:	4618      	mov	r0, r3
 800e904:	371c      	adds	r7, #28
 800e906:	46bd      	mov	sp, r7
 800e908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90c:	4770      	bx	lr

0800e90e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e90e:	b480      	push	{r7}
 800e910:	b085      	sub	sp, #20
 800e912:	af00      	add	r7, sp, #0
 800e914:	6078      	str	r0, [r7, #4]
 800e916:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e91e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d101      	bne.n	800e92a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e926:	2303      	movs	r3, #3
 800e928:	e004      	b.n	800e934 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	683a      	ldr	r2, [r7, #0]
 800e92e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e932:	2300      	movs	r3, #0
}
 800e934:	4618      	mov	r0, r3
 800e936:	3714      	adds	r7, #20
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr

0800e940 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e94e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e950:	2301      	movs	r3, #1
 800e952:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d101      	bne.n	800e962 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e95e:	2303      	movs	r3, #3
 800e960:	e01a      	b.n	800e998 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d114      	bne.n	800e996 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	2201      	movs	r2, #1
 800e970:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e98a:	2181      	movs	r1, #129	@ 0x81
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f001 fd9c 	bl	80104ca <USBD_LL_Transmit>

    ret = USBD_OK;
 800e992:	2300      	movs	r3, #0
 800e994:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e996:	7bfb      	ldrb	r3, [r7, #15]
}
 800e998:	4618      	mov	r0, r3
 800e99a:	3710      	adds	r7, #16
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b084      	sub	sp, #16
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e9ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d101      	bne.n	800e9be <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e9ba:	2303      	movs	r3, #3
 800e9bc:	e016      	b.n	800e9ec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	7c1b      	ldrb	r3, [r3, #16]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d109      	bne.n	800e9da <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e9cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e9d0:	2101      	movs	r1, #1
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f001 fd9a 	bl	801050c <USBD_LL_PrepareReceive>
 800e9d8:	e007      	b.n	800e9ea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e9e0:	2340      	movs	r3, #64	@ 0x40
 800e9e2:	2101      	movs	r1, #1
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f001 fd91 	bl	801050c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e9ea:	2300      	movs	r3, #0
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3710      	adds	r7, #16
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}

0800e9f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b086      	sub	sp, #24
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	60f8      	str	r0, [r7, #12]
 800e9fc:	60b9      	str	r1, [r7, #8]
 800e9fe:	4613      	mov	r3, r2
 800ea00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d101      	bne.n	800ea0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ea08:	2303      	movs	r3, #3
 800ea0a:	e01f      	b.n	800ea4c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2200      	movs	r2, #0
 800ea18:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d003      	beq.n	800ea32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	68ba      	ldr	r2, [r7, #8]
 800ea2e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2201      	movs	r2, #1
 800ea36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	79fa      	ldrb	r2, [r7, #7]
 800ea3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ea40:	68f8      	ldr	r0, [r7, #12]
 800ea42:	f001 fbf9 	bl	8010238 <USBD_LL_Init>
 800ea46:	4603      	mov	r3, r0
 800ea48:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ea4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3718      	adds	r7, #24
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b084      	sub	sp, #16
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d101      	bne.n	800ea6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ea68:	2303      	movs	r3, #3
 800ea6a:	e016      	b.n	800ea9a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	683a      	ldr	r2, [r7, #0]
 800ea70:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d00b      	beq.n	800ea98 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea88:	f107 020e 	add.w	r2, r7, #14
 800ea8c:	4610      	mov	r0, r2
 800ea8e:	4798      	blx	r3
 800ea90:	4602      	mov	r2, r0
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ea98:	2300      	movs	r3, #0
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3710      	adds	r7, #16
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}

0800eaa2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800eaa2:	b580      	push	{r7, lr}
 800eaa4:	b082      	sub	sp, #8
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f001 fc24 	bl	80102f8 <USBD_LL_Start>
 800eab0:	4603      	mov	r3, r0
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3708      	adds	r7, #8
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}

0800eaba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800eaba:	b480      	push	{r7}
 800eabc:	b083      	sub	sp, #12
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eac2:	2300      	movs	r3, #0
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	370c      	adds	r7, #12
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b084      	sub	sp, #16
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	460b      	mov	r3, r1
 800eada:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800eadc:	2303      	movs	r3, #3
 800eade:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d009      	beq.n	800eafe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	78fa      	ldrb	r2, [r7, #3]
 800eaf4:	4611      	mov	r1, r2
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	4798      	blx	r3
 800eafa:	4603      	mov	r3, r0
 800eafc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800eafe:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3710      	adds	r7, #16
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}

0800eb08 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	460b      	mov	r3, r1
 800eb12:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d007      	beq.n	800eb2e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb24:	685b      	ldr	r3, [r3, #4]
 800eb26:	78fa      	ldrb	r2, [r7, #3]
 800eb28:	4611      	mov	r1, r2
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	4798      	blx	r3
  }

  return USBD_OK;
 800eb2e:	2300      	movs	r3, #0
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3708      	adds	r7, #8
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eb48:	6839      	ldr	r1, [r7, #0]
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f000 ff46 	bl	800f9dc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2201      	movs	r2, #1
 800eb54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800eb5e:	461a      	mov	r2, r3
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800eb6c:	f003 031f 	and.w	r3, r3, #31
 800eb70:	2b02      	cmp	r3, #2
 800eb72:	d01a      	beq.n	800ebaa <USBD_LL_SetupStage+0x72>
 800eb74:	2b02      	cmp	r3, #2
 800eb76:	d822      	bhi.n	800ebbe <USBD_LL_SetupStage+0x86>
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d002      	beq.n	800eb82 <USBD_LL_SetupStage+0x4a>
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d00a      	beq.n	800eb96 <USBD_LL_SetupStage+0x5e>
 800eb80:	e01d      	b.n	800ebbe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eb88:	4619      	mov	r1, r3
 800eb8a:	6878      	ldr	r0, [r7, #4]
 800eb8c:	f000 f9ee 	bl	800ef6c <USBD_StdDevReq>
 800eb90:	4603      	mov	r3, r0
 800eb92:	73fb      	strb	r3, [r7, #15]
      break;
 800eb94:	e020      	b.n	800ebd8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eb9c:	4619      	mov	r1, r3
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f000 fa52 	bl	800f048 <USBD_StdItfReq>
 800eba4:	4603      	mov	r3, r0
 800eba6:	73fb      	strb	r3, [r7, #15]
      break;
 800eba8:	e016      	b.n	800ebd8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ebb0:	4619      	mov	r1, r3
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f000 fa91 	bl	800f0da <USBD_StdEPReq>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	73fb      	strb	r3, [r7, #15]
      break;
 800ebbc:	e00c      	b.n	800ebd8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ebc4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ebc8:	b2db      	uxtb	r3, r3
 800ebca:	4619      	mov	r1, r3
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f001 fbf3 	bl	80103b8 <USBD_LL_StallEP>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	73fb      	strb	r3, [r7, #15]
      break;
 800ebd6:	bf00      	nop
  }

  return ret;
 800ebd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3710      	adds	r7, #16
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}

0800ebe2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ebe2:	b580      	push	{r7, lr}
 800ebe4:	b086      	sub	sp, #24
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	60f8      	str	r0, [r7, #12]
 800ebea:	460b      	mov	r3, r1
 800ebec:	607a      	str	r2, [r7, #4]
 800ebee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ebf0:	7afb      	ldrb	r3, [r7, #11]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d138      	bne.n	800ec68 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ebfc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ec04:	2b03      	cmp	r3, #3
 800ec06:	d14a      	bne.n	800ec9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	689a      	ldr	r2, [r3, #8]
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	68db      	ldr	r3, [r3, #12]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d913      	bls.n	800ec3c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	689a      	ldr	r2, [r3, #8]
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	68db      	ldr	r3, [r3, #12]
 800ec1c:	1ad2      	subs	r2, r2, r3
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	68da      	ldr	r2, [r3, #12]
 800ec26:	693b      	ldr	r3, [r7, #16]
 800ec28:	689b      	ldr	r3, [r3, #8]
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	bf28      	it	cs
 800ec2e:	4613      	movcs	r3, r2
 800ec30:	461a      	mov	r2, r3
 800ec32:	6879      	ldr	r1, [r7, #4]
 800ec34:	68f8      	ldr	r0, [r7, #12]
 800ec36:	f000 ffc5 	bl	800fbc4 <USBD_CtlContinueRx>
 800ec3a:	e030      	b.n	800ec9e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	2b03      	cmp	r3, #3
 800ec46:	d10b      	bne.n	800ec60 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec4e:	691b      	ldr	r3, [r3, #16]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d005      	beq.n	800ec60 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec5a:	691b      	ldr	r3, [r3, #16]
 800ec5c:	68f8      	ldr	r0, [r7, #12]
 800ec5e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ec60:	68f8      	ldr	r0, [r7, #12]
 800ec62:	f000 ffc0 	bl	800fbe6 <USBD_CtlSendStatus>
 800ec66:	e01a      	b.n	800ec9e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec6e:	b2db      	uxtb	r3, r3
 800ec70:	2b03      	cmp	r3, #3
 800ec72:	d114      	bne.n	800ec9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec7a:	699b      	ldr	r3, [r3, #24]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d00e      	beq.n	800ec9e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec86:	699b      	ldr	r3, [r3, #24]
 800ec88:	7afa      	ldrb	r2, [r7, #11]
 800ec8a:	4611      	mov	r1, r2
 800ec8c:	68f8      	ldr	r0, [r7, #12]
 800ec8e:	4798      	blx	r3
 800ec90:	4603      	mov	r3, r0
 800ec92:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ec94:	7dfb      	ldrb	r3, [r7, #23]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d001      	beq.n	800ec9e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ec9a:	7dfb      	ldrb	r3, [r7, #23]
 800ec9c:	e000      	b.n	800eca0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ec9e:	2300      	movs	r3, #0
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3718      	adds	r7, #24
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}

0800eca8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b086      	sub	sp, #24
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	460b      	mov	r3, r1
 800ecb2:	607a      	str	r2, [r7, #4]
 800ecb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ecb6:	7afb      	ldrb	r3, [r7, #11]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d16b      	bne.n	800ed94 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	3314      	adds	r3, #20
 800ecc0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ecc8:	2b02      	cmp	r3, #2
 800ecca:	d156      	bne.n	800ed7a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	689a      	ldr	r2, [r3, #8]
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	68db      	ldr	r3, [r3, #12]
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d914      	bls.n	800ed02 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	689a      	ldr	r2, [r3, #8]
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	68db      	ldr	r3, [r3, #12]
 800ece0:	1ad2      	subs	r2, r2, r3
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	689b      	ldr	r3, [r3, #8]
 800ecea:	461a      	mov	r2, r3
 800ecec:	6879      	ldr	r1, [r7, #4]
 800ecee:	68f8      	ldr	r0, [r7, #12]
 800ecf0:	f000 ff3a 	bl	800fb68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	2100      	movs	r1, #0
 800ecfa:	68f8      	ldr	r0, [r7, #12]
 800ecfc:	f001 fc06 	bl	801050c <USBD_LL_PrepareReceive>
 800ed00:	e03b      	b.n	800ed7a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	68da      	ldr	r2, [r3, #12]
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	689b      	ldr	r3, [r3, #8]
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d11c      	bne.n	800ed48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ed0e:	693b      	ldr	r3, [r7, #16]
 800ed10:	685a      	ldr	r2, [r3, #4]
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ed16:	429a      	cmp	r2, r3
 800ed18:	d316      	bcc.n	800ed48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	685a      	ldr	r2, [r3, #4]
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d20f      	bcs.n	800ed48 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ed28:	2200      	movs	r2, #0
 800ed2a:	2100      	movs	r1, #0
 800ed2c:	68f8      	ldr	r0, [r7, #12]
 800ed2e:	f000 ff1b 	bl	800fb68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	2200      	movs	r2, #0
 800ed36:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	2100      	movs	r1, #0
 800ed40:	68f8      	ldr	r0, [r7, #12]
 800ed42:	f001 fbe3 	bl	801050c <USBD_LL_PrepareReceive>
 800ed46:	e018      	b.n	800ed7a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed4e:	b2db      	uxtb	r3, r3
 800ed50:	2b03      	cmp	r3, #3
 800ed52:	d10b      	bne.n	800ed6c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed5a:	68db      	ldr	r3, [r3, #12]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d005      	beq.n	800ed6c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	68f8      	ldr	r0, [r7, #12]
 800ed6a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed6c:	2180      	movs	r1, #128	@ 0x80
 800ed6e:	68f8      	ldr	r0, [r7, #12]
 800ed70:	f001 fb22 	bl	80103b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ed74:	68f8      	ldr	r0, [r7, #12]
 800ed76:	f000 ff49 	bl	800fc0c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	d122      	bne.n	800edca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ed84:	68f8      	ldr	r0, [r7, #12]
 800ed86:	f7ff fe98 	bl	800eaba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ed92:	e01a      	b.n	800edca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed9a:	b2db      	uxtb	r3, r3
 800ed9c:	2b03      	cmp	r3, #3
 800ed9e:	d114      	bne.n	800edca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eda6:	695b      	ldr	r3, [r3, #20]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d00e      	beq.n	800edca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edb2:	695b      	ldr	r3, [r3, #20]
 800edb4:	7afa      	ldrb	r2, [r7, #11]
 800edb6:	4611      	mov	r1, r2
 800edb8:	68f8      	ldr	r0, [r7, #12]
 800edba:	4798      	blx	r3
 800edbc:	4603      	mov	r3, r0
 800edbe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800edc0:	7dfb      	ldrb	r3, [r7, #23]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d001      	beq.n	800edca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800edc6:	7dfb      	ldrb	r3, [r7, #23]
 800edc8:	e000      	b.n	800edcc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800edca:	2300      	movs	r3, #0
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3718      	adds	r7, #24
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b082      	sub	sp, #8
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2201      	movs	r2, #1
 800ede0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2200      	movs	r2, #0
 800ede8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2200      	movs	r2, #0
 800edf0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2200      	movs	r2, #0
 800edf6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d101      	bne.n	800ee08 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ee04:	2303      	movs	r3, #3
 800ee06:	e02f      	b.n	800ee68 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d00f      	beq.n	800ee32 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d009      	beq.n	800ee32 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee24:	685b      	ldr	r3, [r3, #4]
 800ee26:	687a      	ldr	r2, [r7, #4]
 800ee28:	6852      	ldr	r2, [r2, #4]
 800ee2a:	b2d2      	uxtb	r2, r2
 800ee2c:	4611      	mov	r1, r2
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ee32:	2340      	movs	r3, #64	@ 0x40
 800ee34:	2200      	movs	r2, #0
 800ee36:	2100      	movs	r1, #0
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f001 fa78 	bl	801032e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2201      	movs	r2, #1
 800ee42:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2240      	movs	r2, #64	@ 0x40
 800ee4a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ee4e:	2340      	movs	r3, #64	@ 0x40
 800ee50:	2200      	movs	r2, #0
 800ee52:	2180      	movs	r1, #128	@ 0x80
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f001 fa6a 	bl	801032e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2201      	movs	r2, #1
 800ee5e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2240      	movs	r2, #64	@ 0x40
 800ee64:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ee66:	2300      	movs	r3, #0
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	3708      	adds	r7, #8
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}

0800ee70 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ee70:	b480      	push	{r7}
 800ee72:	b083      	sub	sp, #12
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
 800ee78:	460b      	mov	r3, r1
 800ee7a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	78fa      	ldrb	r2, [r7, #3]
 800ee80:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ee82:	2300      	movs	r3, #0
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	370c      	adds	r7, #12
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8e:	4770      	bx	lr

0800ee90 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b083      	sub	sp, #12
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee9e:	b2da      	uxtb	r2, r3
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2204      	movs	r2, #4
 800eeaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800eeae:	2300      	movs	r3, #0
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	370c      	adds	r7, #12
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr

0800eebc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b083      	sub	sp, #12
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eeca:	b2db      	uxtb	r3, r3
 800eecc:	2b04      	cmp	r3, #4
 800eece:	d106      	bne.n	800eede <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800eed6:	b2da      	uxtb	r2, r3
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800eede:	2300      	movs	r3, #0
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	370c      	adds	r7, #12
 800eee4:	46bd      	mov	sp, r7
 800eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeea:	4770      	bx	lr

0800eeec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d101      	bne.n	800ef02 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800eefe:	2303      	movs	r3, #3
 800ef00:	e012      	b.n	800ef28 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	2b03      	cmp	r3, #3
 800ef0c:	d10b      	bne.n	800ef26 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef14:	69db      	ldr	r3, [r3, #28]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d005      	beq.n	800ef26 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef20:	69db      	ldr	r3, [r3, #28]
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ef26:	2300      	movs	r3, #0
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3708      	adds	r7, #8
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}

0800ef30 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ef30:	b480      	push	{r7}
 800ef32:	b087      	sub	sp, #28
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	781b      	ldrb	r3, [r3, #0]
 800ef40:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ef42:	697b      	ldr	r3, [r7, #20]
 800ef44:	3301      	adds	r3, #1
 800ef46:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ef4e:	8a3b      	ldrh	r3, [r7, #16]
 800ef50:	021b      	lsls	r3, r3, #8
 800ef52:	b21a      	sxth	r2, r3
 800ef54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ef58:	4313      	orrs	r3, r2
 800ef5a:	b21b      	sxth	r3, r3
 800ef5c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ef5e:	89fb      	ldrh	r3, [r7, #14]
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	371c      	adds	r7, #28
 800ef64:	46bd      	mov	sp, r7
 800ef66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6a:	4770      	bx	lr

0800ef6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b084      	sub	sp, #16
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
 800ef74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef76:	2300      	movs	r3, #0
 800ef78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	781b      	ldrb	r3, [r3, #0]
 800ef7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ef82:	2b40      	cmp	r3, #64	@ 0x40
 800ef84:	d005      	beq.n	800ef92 <USBD_StdDevReq+0x26>
 800ef86:	2b40      	cmp	r3, #64	@ 0x40
 800ef88:	d853      	bhi.n	800f032 <USBD_StdDevReq+0xc6>
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d00b      	beq.n	800efa6 <USBD_StdDevReq+0x3a>
 800ef8e:	2b20      	cmp	r3, #32
 800ef90:	d14f      	bne.n	800f032 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef98:	689b      	ldr	r3, [r3, #8]
 800ef9a:	6839      	ldr	r1, [r7, #0]
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	4798      	blx	r3
 800efa0:	4603      	mov	r3, r0
 800efa2:	73fb      	strb	r3, [r7, #15]
      break;
 800efa4:	e04a      	b.n	800f03c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	785b      	ldrb	r3, [r3, #1]
 800efaa:	2b09      	cmp	r3, #9
 800efac:	d83b      	bhi.n	800f026 <USBD_StdDevReq+0xba>
 800efae:	a201      	add	r2, pc, #4	@ (adr r2, 800efb4 <USBD_StdDevReq+0x48>)
 800efb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb4:	0800f009 	.word	0x0800f009
 800efb8:	0800f01d 	.word	0x0800f01d
 800efbc:	0800f027 	.word	0x0800f027
 800efc0:	0800f013 	.word	0x0800f013
 800efc4:	0800f027 	.word	0x0800f027
 800efc8:	0800efe7 	.word	0x0800efe7
 800efcc:	0800efdd 	.word	0x0800efdd
 800efd0:	0800f027 	.word	0x0800f027
 800efd4:	0800efff 	.word	0x0800efff
 800efd8:	0800eff1 	.word	0x0800eff1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800efdc:	6839      	ldr	r1, [r7, #0]
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f000 f9de 	bl	800f3a0 <USBD_GetDescriptor>
          break;
 800efe4:	e024      	b.n	800f030 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800efe6:	6839      	ldr	r1, [r7, #0]
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f000 fb6d 	bl	800f6c8 <USBD_SetAddress>
          break;
 800efee:	e01f      	b.n	800f030 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800eff0:	6839      	ldr	r1, [r7, #0]
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f000 fbac 	bl	800f750 <USBD_SetConfig>
 800eff8:	4603      	mov	r3, r0
 800effa:	73fb      	strb	r3, [r7, #15]
          break;
 800effc:	e018      	b.n	800f030 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800effe:	6839      	ldr	r1, [r7, #0]
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f000 fc4b 	bl	800f89c <USBD_GetConfig>
          break;
 800f006:	e013      	b.n	800f030 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f008:	6839      	ldr	r1, [r7, #0]
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f000 fc7c 	bl	800f908 <USBD_GetStatus>
          break;
 800f010:	e00e      	b.n	800f030 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f012:	6839      	ldr	r1, [r7, #0]
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f000 fcab 	bl	800f970 <USBD_SetFeature>
          break;
 800f01a:	e009      	b.n	800f030 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f01c:	6839      	ldr	r1, [r7, #0]
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f000 fcba 	bl	800f998 <USBD_ClrFeature>
          break;
 800f024:	e004      	b.n	800f030 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f026:	6839      	ldr	r1, [r7, #0]
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f000 fd11 	bl	800fa50 <USBD_CtlError>
          break;
 800f02e:	bf00      	nop
      }
      break;
 800f030:	e004      	b.n	800f03c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f032:	6839      	ldr	r1, [r7, #0]
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f000 fd0b 	bl	800fa50 <USBD_CtlError>
      break;
 800f03a:	bf00      	nop
  }

  return ret;
 800f03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f03e:	4618      	mov	r0, r3
 800f040:	3710      	adds	r7, #16
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop

0800f048 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b084      	sub	sp, #16
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f052:	2300      	movs	r3, #0
 800f054:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f05e:	2b40      	cmp	r3, #64	@ 0x40
 800f060:	d005      	beq.n	800f06e <USBD_StdItfReq+0x26>
 800f062:	2b40      	cmp	r3, #64	@ 0x40
 800f064:	d82f      	bhi.n	800f0c6 <USBD_StdItfReq+0x7e>
 800f066:	2b00      	cmp	r3, #0
 800f068:	d001      	beq.n	800f06e <USBD_StdItfReq+0x26>
 800f06a:	2b20      	cmp	r3, #32
 800f06c:	d12b      	bne.n	800f0c6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f074:	b2db      	uxtb	r3, r3
 800f076:	3b01      	subs	r3, #1
 800f078:	2b02      	cmp	r3, #2
 800f07a:	d81d      	bhi.n	800f0b8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	889b      	ldrh	r3, [r3, #4]
 800f080:	b2db      	uxtb	r3, r3
 800f082:	2b01      	cmp	r3, #1
 800f084:	d813      	bhi.n	800f0ae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f08c:	689b      	ldr	r3, [r3, #8]
 800f08e:	6839      	ldr	r1, [r7, #0]
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	4798      	blx	r3
 800f094:	4603      	mov	r3, r0
 800f096:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	88db      	ldrh	r3, [r3, #6]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d110      	bne.n	800f0c2 <USBD_StdItfReq+0x7a>
 800f0a0:	7bfb      	ldrb	r3, [r7, #15]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d10d      	bne.n	800f0c2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f000 fd9d 	bl	800fbe6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f0ac:	e009      	b.n	800f0c2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f0ae:	6839      	ldr	r1, [r7, #0]
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f000 fccd 	bl	800fa50 <USBD_CtlError>
          break;
 800f0b6:	e004      	b.n	800f0c2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f0b8:	6839      	ldr	r1, [r7, #0]
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f000 fcc8 	bl	800fa50 <USBD_CtlError>
          break;
 800f0c0:	e000      	b.n	800f0c4 <USBD_StdItfReq+0x7c>
          break;
 800f0c2:	bf00      	nop
      }
      break;
 800f0c4:	e004      	b.n	800f0d0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f0c6:	6839      	ldr	r1, [r7, #0]
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f000 fcc1 	bl	800fa50 <USBD_CtlError>
      break;
 800f0ce:	bf00      	nop
  }

  return ret;
 800f0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3710      	adds	r7, #16
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}

0800f0da <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0da:	b580      	push	{r7, lr}
 800f0dc:	b084      	sub	sp, #16
 800f0de:	af00      	add	r7, sp, #0
 800f0e0:	6078      	str	r0, [r7, #4]
 800f0e2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	889b      	ldrh	r3, [r3, #4]
 800f0ec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f0f6:	2b40      	cmp	r3, #64	@ 0x40
 800f0f8:	d007      	beq.n	800f10a <USBD_StdEPReq+0x30>
 800f0fa:	2b40      	cmp	r3, #64	@ 0x40
 800f0fc:	f200 8145 	bhi.w	800f38a <USBD_StdEPReq+0x2b0>
 800f100:	2b00      	cmp	r3, #0
 800f102:	d00c      	beq.n	800f11e <USBD_StdEPReq+0x44>
 800f104:	2b20      	cmp	r3, #32
 800f106:	f040 8140 	bne.w	800f38a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f110:	689b      	ldr	r3, [r3, #8]
 800f112:	6839      	ldr	r1, [r7, #0]
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	4798      	blx	r3
 800f118:	4603      	mov	r3, r0
 800f11a:	73fb      	strb	r3, [r7, #15]
      break;
 800f11c:	e13a      	b.n	800f394 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	785b      	ldrb	r3, [r3, #1]
 800f122:	2b03      	cmp	r3, #3
 800f124:	d007      	beq.n	800f136 <USBD_StdEPReq+0x5c>
 800f126:	2b03      	cmp	r3, #3
 800f128:	f300 8129 	bgt.w	800f37e <USBD_StdEPReq+0x2a4>
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d07f      	beq.n	800f230 <USBD_StdEPReq+0x156>
 800f130:	2b01      	cmp	r3, #1
 800f132:	d03c      	beq.n	800f1ae <USBD_StdEPReq+0xd4>
 800f134:	e123      	b.n	800f37e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f13c:	b2db      	uxtb	r3, r3
 800f13e:	2b02      	cmp	r3, #2
 800f140:	d002      	beq.n	800f148 <USBD_StdEPReq+0x6e>
 800f142:	2b03      	cmp	r3, #3
 800f144:	d016      	beq.n	800f174 <USBD_StdEPReq+0x9a>
 800f146:	e02c      	b.n	800f1a2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f148:	7bbb      	ldrb	r3, [r7, #14]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d00d      	beq.n	800f16a <USBD_StdEPReq+0x90>
 800f14e:	7bbb      	ldrb	r3, [r7, #14]
 800f150:	2b80      	cmp	r3, #128	@ 0x80
 800f152:	d00a      	beq.n	800f16a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f154:	7bbb      	ldrb	r3, [r7, #14]
 800f156:	4619      	mov	r1, r3
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f001 f92d 	bl	80103b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f15e:	2180      	movs	r1, #128	@ 0x80
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f001 f929 	bl	80103b8 <USBD_LL_StallEP>
 800f166:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f168:	e020      	b.n	800f1ac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f16a:	6839      	ldr	r1, [r7, #0]
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f000 fc6f 	bl	800fa50 <USBD_CtlError>
              break;
 800f172:	e01b      	b.n	800f1ac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	885b      	ldrh	r3, [r3, #2]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d10e      	bne.n	800f19a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f17c:	7bbb      	ldrb	r3, [r7, #14]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d00b      	beq.n	800f19a <USBD_StdEPReq+0xc0>
 800f182:	7bbb      	ldrb	r3, [r7, #14]
 800f184:	2b80      	cmp	r3, #128	@ 0x80
 800f186:	d008      	beq.n	800f19a <USBD_StdEPReq+0xc0>
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	88db      	ldrh	r3, [r3, #6]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d104      	bne.n	800f19a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f190:	7bbb      	ldrb	r3, [r7, #14]
 800f192:	4619      	mov	r1, r3
 800f194:	6878      	ldr	r0, [r7, #4]
 800f196:	f001 f90f 	bl	80103b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f000 fd23 	bl	800fbe6 <USBD_CtlSendStatus>

              break;
 800f1a0:	e004      	b.n	800f1ac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f1a2:	6839      	ldr	r1, [r7, #0]
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f000 fc53 	bl	800fa50 <USBD_CtlError>
              break;
 800f1aa:	bf00      	nop
          }
          break;
 800f1ac:	e0ec      	b.n	800f388 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1b4:	b2db      	uxtb	r3, r3
 800f1b6:	2b02      	cmp	r3, #2
 800f1b8:	d002      	beq.n	800f1c0 <USBD_StdEPReq+0xe6>
 800f1ba:	2b03      	cmp	r3, #3
 800f1bc:	d016      	beq.n	800f1ec <USBD_StdEPReq+0x112>
 800f1be:	e030      	b.n	800f222 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f1c0:	7bbb      	ldrb	r3, [r7, #14]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d00d      	beq.n	800f1e2 <USBD_StdEPReq+0x108>
 800f1c6:	7bbb      	ldrb	r3, [r7, #14]
 800f1c8:	2b80      	cmp	r3, #128	@ 0x80
 800f1ca:	d00a      	beq.n	800f1e2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f1cc:	7bbb      	ldrb	r3, [r7, #14]
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f001 f8f1 	bl	80103b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f1d6:	2180      	movs	r1, #128	@ 0x80
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f001 f8ed 	bl	80103b8 <USBD_LL_StallEP>
 800f1de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f1e0:	e025      	b.n	800f22e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f1e2:	6839      	ldr	r1, [r7, #0]
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f000 fc33 	bl	800fa50 <USBD_CtlError>
              break;
 800f1ea:	e020      	b.n	800f22e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	885b      	ldrh	r3, [r3, #2]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d11b      	bne.n	800f22c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f1f4:	7bbb      	ldrb	r3, [r7, #14]
 800f1f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d004      	beq.n	800f208 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f1fe:	7bbb      	ldrb	r3, [r7, #14]
 800f200:	4619      	mov	r1, r3
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	f001 f8f7 	bl	80103f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f000 fcec 	bl	800fbe6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f214:	689b      	ldr	r3, [r3, #8]
 800f216:	6839      	ldr	r1, [r7, #0]
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	4798      	blx	r3
 800f21c:	4603      	mov	r3, r0
 800f21e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f220:	e004      	b.n	800f22c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f222:	6839      	ldr	r1, [r7, #0]
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f000 fc13 	bl	800fa50 <USBD_CtlError>
              break;
 800f22a:	e000      	b.n	800f22e <USBD_StdEPReq+0x154>
              break;
 800f22c:	bf00      	nop
          }
          break;
 800f22e:	e0ab      	b.n	800f388 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f236:	b2db      	uxtb	r3, r3
 800f238:	2b02      	cmp	r3, #2
 800f23a:	d002      	beq.n	800f242 <USBD_StdEPReq+0x168>
 800f23c:	2b03      	cmp	r3, #3
 800f23e:	d032      	beq.n	800f2a6 <USBD_StdEPReq+0x1cc>
 800f240:	e097      	b.n	800f372 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f242:	7bbb      	ldrb	r3, [r7, #14]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d007      	beq.n	800f258 <USBD_StdEPReq+0x17e>
 800f248:	7bbb      	ldrb	r3, [r7, #14]
 800f24a:	2b80      	cmp	r3, #128	@ 0x80
 800f24c:	d004      	beq.n	800f258 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f24e:	6839      	ldr	r1, [r7, #0]
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f000 fbfd 	bl	800fa50 <USBD_CtlError>
                break;
 800f256:	e091      	b.n	800f37c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f258:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	da0b      	bge.n	800f278 <USBD_StdEPReq+0x19e>
 800f260:	7bbb      	ldrb	r3, [r7, #14]
 800f262:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f266:	4613      	mov	r3, r2
 800f268:	009b      	lsls	r3, r3, #2
 800f26a:	4413      	add	r3, r2
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	3310      	adds	r3, #16
 800f270:	687a      	ldr	r2, [r7, #4]
 800f272:	4413      	add	r3, r2
 800f274:	3304      	adds	r3, #4
 800f276:	e00b      	b.n	800f290 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f278:	7bbb      	ldrb	r3, [r7, #14]
 800f27a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f27e:	4613      	mov	r3, r2
 800f280:	009b      	lsls	r3, r3, #2
 800f282:	4413      	add	r3, r2
 800f284:	009b      	lsls	r3, r3, #2
 800f286:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	4413      	add	r3, r2
 800f28e:	3304      	adds	r3, #4
 800f290:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	2200      	movs	r2, #0
 800f296:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	2202      	movs	r2, #2
 800f29c:	4619      	mov	r1, r3
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f000 fc47 	bl	800fb32 <USBD_CtlSendData>
              break;
 800f2a4:	e06a      	b.n	800f37c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f2a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	da11      	bge.n	800f2d2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f2ae:	7bbb      	ldrb	r3, [r7, #14]
 800f2b0:	f003 020f 	and.w	r2, r3, #15
 800f2b4:	6879      	ldr	r1, [r7, #4]
 800f2b6:	4613      	mov	r3, r2
 800f2b8:	009b      	lsls	r3, r3, #2
 800f2ba:	4413      	add	r3, r2
 800f2bc:	009b      	lsls	r3, r3, #2
 800f2be:	440b      	add	r3, r1
 800f2c0:	3324      	adds	r3, #36	@ 0x24
 800f2c2:	881b      	ldrh	r3, [r3, #0]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d117      	bne.n	800f2f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f2c8:	6839      	ldr	r1, [r7, #0]
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f000 fbc0 	bl	800fa50 <USBD_CtlError>
                  break;
 800f2d0:	e054      	b.n	800f37c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f2d2:	7bbb      	ldrb	r3, [r7, #14]
 800f2d4:	f003 020f 	and.w	r2, r3, #15
 800f2d8:	6879      	ldr	r1, [r7, #4]
 800f2da:	4613      	mov	r3, r2
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	4413      	add	r3, r2
 800f2e0:	009b      	lsls	r3, r3, #2
 800f2e2:	440b      	add	r3, r1
 800f2e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f2e8:	881b      	ldrh	r3, [r3, #0]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d104      	bne.n	800f2f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f2ee:	6839      	ldr	r1, [r7, #0]
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	f000 fbad 	bl	800fa50 <USBD_CtlError>
                  break;
 800f2f6:	e041      	b.n	800f37c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	da0b      	bge.n	800f318 <USBD_StdEPReq+0x23e>
 800f300:	7bbb      	ldrb	r3, [r7, #14]
 800f302:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f306:	4613      	mov	r3, r2
 800f308:	009b      	lsls	r3, r3, #2
 800f30a:	4413      	add	r3, r2
 800f30c:	009b      	lsls	r3, r3, #2
 800f30e:	3310      	adds	r3, #16
 800f310:	687a      	ldr	r2, [r7, #4]
 800f312:	4413      	add	r3, r2
 800f314:	3304      	adds	r3, #4
 800f316:	e00b      	b.n	800f330 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f318:	7bbb      	ldrb	r3, [r7, #14]
 800f31a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f31e:	4613      	mov	r3, r2
 800f320:	009b      	lsls	r3, r3, #2
 800f322:	4413      	add	r3, r2
 800f324:	009b      	lsls	r3, r3, #2
 800f326:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f32a:	687a      	ldr	r2, [r7, #4]
 800f32c:	4413      	add	r3, r2
 800f32e:	3304      	adds	r3, #4
 800f330:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f332:	7bbb      	ldrb	r3, [r7, #14]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d002      	beq.n	800f33e <USBD_StdEPReq+0x264>
 800f338:	7bbb      	ldrb	r3, [r7, #14]
 800f33a:	2b80      	cmp	r3, #128	@ 0x80
 800f33c:	d103      	bne.n	800f346 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	2200      	movs	r2, #0
 800f342:	601a      	str	r2, [r3, #0]
 800f344:	e00e      	b.n	800f364 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f346:	7bbb      	ldrb	r3, [r7, #14]
 800f348:	4619      	mov	r1, r3
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f001 f872 	bl	8010434 <USBD_LL_IsStallEP>
 800f350:	4603      	mov	r3, r0
 800f352:	2b00      	cmp	r3, #0
 800f354:	d003      	beq.n	800f35e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	2201      	movs	r2, #1
 800f35a:	601a      	str	r2, [r3, #0]
 800f35c:	e002      	b.n	800f364 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	2200      	movs	r2, #0
 800f362:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	2202      	movs	r2, #2
 800f368:	4619      	mov	r1, r3
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f000 fbe1 	bl	800fb32 <USBD_CtlSendData>
              break;
 800f370:	e004      	b.n	800f37c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f372:	6839      	ldr	r1, [r7, #0]
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f000 fb6b 	bl	800fa50 <USBD_CtlError>
              break;
 800f37a:	bf00      	nop
          }
          break;
 800f37c:	e004      	b.n	800f388 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f37e:	6839      	ldr	r1, [r7, #0]
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f000 fb65 	bl	800fa50 <USBD_CtlError>
          break;
 800f386:	bf00      	nop
      }
      break;
 800f388:	e004      	b.n	800f394 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f38a:	6839      	ldr	r1, [r7, #0]
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f000 fb5f 	bl	800fa50 <USBD_CtlError>
      break;
 800f392:	bf00      	nop
  }

  return ret;
 800f394:	7bfb      	ldrb	r3, [r7, #15]
}
 800f396:	4618      	mov	r0, r3
 800f398:	3710      	adds	r7, #16
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}
	...

0800f3a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b084      	sub	sp, #16
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
 800f3a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	885b      	ldrh	r3, [r3, #2]
 800f3ba:	0a1b      	lsrs	r3, r3, #8
 800f3bc:	b29b      	uxth	r3, r3
 800f3be:	3b01      	subs	r3, #1
 800f3c0:	2b0e      	cmp	r3, #14
 800f3c2:	f200 8152 	bhi.w	800f66a <USBD_GetDescriptor+0x2ca>
 800f3c6:	a201      	add	r2, pc, #4	@ (adr r2, 800f3cc <USBD_GetDescriptor+0x2c>)
 800f3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3cc:	0800f43d 	.word	0x0800f43d
 800f3d0:	0800f455 	.word	0x0800f455
 800f3d4:	0800f495 	.word	0x0800f495
 800f3d8:	0800f66b 	.word	0x0800f66b
 800f3dc:	0800f66b 	.word	0x0800f66b
 800f3e0:	0800f60b 	.word	0x0800f60b
 800f3e4:	0800f637 	.word	0x0800f637
 800f3e8:	0800f66b 	.word	0x0800f66b
 800f3ec:	0800f66b 	.word	0x0800f66b
 800f3f0:	0800f66b 	.word	0x0800f66b
 800f3f4:	0800f66b 	.word	0x0800f66b
 800f3f8:	0800f66b 	.word	0x0800f66b
 800f3fc:	0800f66b 	.word	0x0800f66b
 800f400:	0800f66b 	.word	0x0800f66b
 800f404:	0800f409 	.word	0x0800f409
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f40e:	69db      	ldr	r3, [r3, #28]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d00b      	beq.n	800f42c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f41a:	69db      	ldr	r3, [r3, #28]
 800f41c:	687a      	ldr	r2, [r7, #4]
 800f41e:	7c12      	ldrb	r2, [r2, #16]
 800f420:	f107 0108 	add.w	r1, r7, #8
 800f424:	4610      	mov	r0, r2
 800f426:	4798      	blx	r3
 800f428:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f42a:	e126      	b.n	800f67a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f42c:	6839      	ldr	r1, [r7, #0]
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 fb0e 	bl	800fa50 <USBD_CtlError>
        err++;
 800f434:	7afb      	ldrb	r3, [r7, #11]
 800f436:	3301      	adds	r3, #1
 800f438:	72fb      	strb	r3, [r7, #11]
      break;
 800f43a:	e11e      	b.n	800f67a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	7c12      	ldrb	r2, [r2, #16]
 800f448:	f107 0108 	add.w	r1, r7, #8
 800f44c:	4610      	mov	r0, r2
 800f44e:	4798      	blx	r3
 800f450:	60f8      	str	r0, [r7, #12]
      break;
 800f452:	e112      	b.n	800f67a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	7c1b      	ldrb	r3, [r3, #16]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d10d      	bne.n	800f478 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f464:	f107 0208 	add.w	r2, r7, #8
 800f468:	4610      	mov	r0, r2
 800f46a:	4798      	blx	r3
 800f46c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	3301      	adds	r3, #1
 800f472:	2202      	movs	r2, #2
 800f474:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f476:	e100      	b.n	800f67a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f47e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f480:	f107 0208 	add.w	r2, r7, #8
 800f484:	4610      	mov	r0, r2
 800f486:	4798      	blx	r3
 800f488:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	3301      	adds	r3, #1
 800f48e:	2202      	movs	r2, #2
 800f490:	701a      	strb	r2, [r3, #0]
      break;
 800f492:	e0f2      	b.n	800f67a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	885b      	ldrh	r3, [r3, #2]
 800f498:	b2db      	uxtb	r3, r3
 800f49a:	2b05      	cmp	r3, #5
 800f49c:	f200 80ac 	bhi.w	800f5f8 <USBD_GetDescriptor+0x258>
 800f4a0:	a201      	add	r2, pc, #4	@ (adr r2, 800f4a8 <USBD_GetDescriptor+0x108>)
 800f4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4a6:	bf00      	nop
 800f4a8:	0800f4c1 	.word	0x0800f4c1
 800f4ac:	0800f4f5 	.word	0x0800f4f5
 800f4b0:	0800f529 	.word	0x0800f529
 800f4b4:	0800f55d 	.word	0x0800f55d
 800f4b8:	0800f591 	.word	0x0800f591
 800f4bc:	0800f5c5 	.word	0x0800f5c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4c6:	685b      	ldr	r3, [r3, #4]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d00b      	beq.n	800f4e4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4d2:	685b      	ldr	r3, [r3, #4]
 800f4d4:	687a      	ldr	r2, [r7, #4]
 800f4d6:	7c12      	ldrb	r2, [r2, #16]
 800f4d8:	f107 0108 	add.w	r1, r7, #8
 800f4dc:	4610      	mov	r0, r2
 800f4de:	4798      	blx	r3
 800f4e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4e2:	e091      	b.n	800f608 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f4e4:	6839      	ldr	r1, [r7, #0]
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f000 fab2 	bl	800fa50 <USBD_CtlError>
            err++;
 800f4ec:	7afb      	ldrb	r3, [r7, #11]
 800f4ee:	3301      	adds	r3, #1
 800f4f0:	72fb      	strb	r3, [r7, #11]
          break;
 800f4f2:	e089      	b.n	800f608 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4fa:	689b      	ldr	r3, [r3, #8]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d00b      	beq.n	800f518 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f506:	689b      	ldr	r3, [r3, #8]
 800f508:	687a      	ldr	r2, [r7, #4]
 800f50a:	7c12      	ldrb	r2, [r2, #16]
 800f50c:	f107 0108 	add.w	r1, r7, #8
 800f510:	4610      	mov	r0, r2
 800f512:	4798      	blx	r3
 800f514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f516:	e077      	b.n	800f608 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f518:	6839      	ldr	r1, [r7, #0]
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f000 fa98 	bl	800fa50 <USBD_CtlError>
            err++;
 800f520:	7afb      	ldrb	r3, [r7, #11]
 800f522:	3301      	adds	r3, #1
 800f524:	72fb      	strb	r3, [r7, #11]
          break;
 800f526:	e06f      	b.n	800f608 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f52e:	68db      	ldr	r3, [r3, #12]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d00b      	beq.n	800f54c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f53a:	68db      	ldr	r3, [r3, #12]
 800f53c:	687a      	ldr	r2, [r7, #4]
 800f53e:	7c12      	ldrb	r2, [r2, #16]
 800f540:	f107 0108 	add.w	r1, r7, #8
 800f544:	4610      	mov	r0, r2
 800f546:	4798      	blx	r3
 800f548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f54a:	e05d      	b.n	800f608 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f54c:	6839      	ldr	r1, [r7, #0]
 800f54e:	6878      	ldr	r0, [r7, #4]
 800f550:	f000 fa7e 	bl	800fa50 <USBD_CtlError>
            err++;
 800f554:	7afb      	ldrb	r3, [r7, #11]
 800f556:	3301      	adds	r3, #1
 800f558:	72fb      	strb	r3, [r7, #11]
          break;
 800f55a:	e055      	b.n	800f608 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f562:	691b      	ldr	r3, [r3, #16]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d00b      	beq.n	800f580 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f56e:	691b      	ldr	r3, [r3, #16]
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	7c12      	ldrb	r2, [r2, #16]
 800f574:	f107 0108 	add.w	r1, r7, #8
 800f578:	4610      	mov	r0, r2
 800f57a:	4798      	blx	r3
 800f57c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f57e:	e043      	b.n	800f608 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f580:	6839      	ldr	r1, [r7, #0]
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f000 fa64 	bl	800fa50 <USBD_CtlError>
            err++;
 800f588:	7afb      	ldrb	r3, [r7, #11]
 800f58a:	3301      	adds	r3, #1
 800f58c:	72fb      	strb	r3, [r7, #11]
          break;
 800f58e:	e03b      	b.n	800f608 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f596:	695b      	ldr	r3, [r3, #20]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d00b      	beq.n	800f5b4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5a2:	695b      	ldr	r3, [r3, #20]
 800f5a4:	687a      	ldr	r2, [r7, #4]
 800f5a6:	7c12      	ldrb	r2, [r2, #16]
 800f5a8:	f107 0108 	add.w	r1, r7, #8
 800f5ac:	4610      	mov	r0, r2
 800f5ae:	4798      	blx	r3
 800f5b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5b2:	e029      	b.n	800f608 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f5b4:	6839      	ldr	r1, [r7, #0]
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f000 fa4a 	bl	800fa50 <USBD_CtlError>
            err++;
 800f5bc:	7afb      	ldrb	r3, [r7, #11]
 800f5be:	3301      	adds	r3, #1
 800f5c0:	72fb      	strb	r3, [r7, #11]
          break;
 800f5c2:	e021      	b.n	800f608 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5ca:	699b      	ldr	r3, [r3, #24]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d00b      	beq.n	800f5e8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5d6:	699b      	ldr	r3, [r3, #24]
 800f5d8:	687a      	ldr	r2, [r7, #4]
 800f5da:	7c12      	ldrb	r2, [r2, #16]
 800f5dc:	f107 0108 	add.w	r1, r7, #8
 800f5e0:	4610      	mov	r0, r2
 800f5e2:	4798      	blx	r3
 800f5e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5e6:	e00f      	b.n	800f608 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f5e8:	6839      	ldr	r1, [r7, #0]
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f000 fa30 	bl	800fa50 <USBD_CtlError>
            err++;
 800f5f0:	7afb      	ldrb	r3, [r7, #11]
 800f5f2:	3301      	adds	r3, #1
 800f5f4:	72fb      	strb	r3, [r7, #11]
          break;
 800f5f6:	e007      	b.n	800f608 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f5f8:	6839      	ldr	r1, [r7, #0]
 800f5fa:	6878      	ldr	r0, [r7, #4]
 800f5fc:	f000 fa28 	bl	800fa50 <USBD_CtlError>
          err++;
 800f600:	7afb      	ldrb	r3, [r7, #11]
 800f602:	3301      	adds	r3, #1
 800f604:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f606:	bf00      	nop
      }
      break;
 800f608:	e037      	b.n	800f67a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	7c1b      	ldrb	r3, [r3, #16]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d109      	bne.n	800f626 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f61a:	f107 0208 	add.w	r2, r7, #8
 800f61e:	4610      	mov	r0, r2
 800f620:	4798      	blx	r3
 800f622:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f624:	e029      	b.n	800f67a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f626:	6839      	ldr	r1, [r7, #0]
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f000 fa11 	bl	800fa50 <USBD_CtlError>
        err++;
 800f62e:	7afb      	ldrb	r3, [r7, #11]
 800f630:	3301      	adds	r3, #1
 800f632:	72fb      	strb	r3, [r7, #11]
      break;
 800f634:	e021      	b.n	800f67a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	7c1b      	ldrb	r3, [r3, #16]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d10d      	bne.n	800f65a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f646:	f107 0208 	add.w	r2, r7, #8
 800f64a:	4610      	mov	r0, r2
 800f64c:	4798      	blx	r3
 800f64e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	3301      	adds	r3, #1
 800f654:	2207      	movs	r2, #7
 800f656:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f658:	e00f      	b.n	800f67a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f65a:	6839      	ldr	r1, [r7, #0]
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f000 f9f7 	bl	800fa50 <USBD_CtlError>
        err++;
 800f662:	7afb      	ldrb	r3, [r7, #11]
 800f664:	3301      	adds	r3, #1
 800f666:	72fb      	strb	r3, [r7, #11]
      break;
 800f668:	e007      	b.n	800f67a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f66a:	6839      	ldr	r1, [r7, #0]
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f000 f9ef 	bl	800fa50 <USBD_CtlError>
      err++;
 800f672:	7afb      	ldrb	r3, [r7, #11]
 800f674:	3301      	adds	r3, #1
 800f676:	72fb      	strb	r3, [r7, #11]
      break;
 800f678:	bf00      	nop
  }

  if (err != 0U)
 800f67a:	7afb      	ldrb	r3, [r7, #11]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d11e      	bne.n	800f6be <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	88db      	ldrh	r3, [r3, #6]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d016      	beq.n	800f6b6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f688:	893b      	ldrh	r3, [r7, #8]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d00e      	beq.n	800f6ac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	88da      	ldrh	r2, [r3, #6]
 800f692:	893b      	ldrh	r3, [r7, #8]
 800f694:	4293      	cmp	r3, r2
 800f696:	bf28      	it	cs
 800f698:	4613      	movcs	r3, r2
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f69e:	893b      	ldrh	r3, [r7, #8]
 800f6a0:	461a      	mov	r2, r3
 800f6a2:	68f9      	ldr	r1, [r7, #12]
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f000 fa44 	bl	800fb32 <USBD_CtlSendData>
 800f6aa:	e009      	b.n	800f6c0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f6ac:	6839      	ldr	r1, [r7, #0]
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f000 f9ce 	bl	800fa50 <USBD_CtlError>
 800f6b4:	e004      	b.n	800f6c0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f000 fa95 	bl	800fbe6 <USBD_CtlSendStatus>
 800f6bc:	e000      	b.n	800f6c0 <USBD_GetDescriptor+0x320>
    return;
 800f6be:	bf00      	nop
  }
}
 800f6c0:	3710      	adds	r7, #16
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}
 800f6c6:	bf00      	nop

0800f6c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b084      	sub	sp, #16
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	889b      	ldrh	r3, [r3, #4]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d131      	bne.n	800f73e <USBD_SetAddress+0x76>
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	88db      	ldrh	r3, [r3, #6]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d12d      	bne.n	800f73e <USBD_SetAddress+0x76>
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	885b      	ldrh	r3, [r3, #2]
 800f6e6:	2b7f      	cmp	r3, #127	@ 0x7f
 800f6e8:	d829      	bhi.n	800f73e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	885b      	ldrh	r3, [r3, #2]
 800f6ee:	b2db      	uxtb	r3, r3
 800f6f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f6f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6fc:	b2db      	uxtb	r3, r3
 800f6fe:	2b03      	cmp	r3, #3
 800f700:	d104      	bne.n	800f70c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f702:	6839      	ldr	r1, [r7, #0]
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f000 f9a3 	bl	800fa50 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f70a:	e01d      	b.n	800f748 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	7bfa      	ldrb	r2, [r7, #15]
 800f710:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f714:	7bfb      	ldrb	r3, [r7, #15]
 800f716:	4619      	mov	r1, r3
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f000 feb7 	bl	801048c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f000 fa61 	bl	800fbe6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f724:	7bfb      	ldrb	r3, [r7, #15]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d004      	beq.n	800f734 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2202      	movs	r2, #2
 800f72e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f732:	e009      	b.n	800f748 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2201      	movs	r2, #1
 800f738:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f73c:	e004      	b.n	800f748 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f73e:	6839      	ldr	r1, [r7, #0]
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f000 f985 	bl	800fa50 <USBD_CtlError>
  }
}
 800f746:	bf00      	nop
 800f748:	bf00      	nop
 800f74a:	3710      	adds	r7, #16
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}

0800f750 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b084      	sub	sp, #16
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f75a:	2300      	movs	r3, #0
 800f75c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	885b      	ldrh	r3, [r3, #2]
 800f762:	b2da      	uxtb	r2, r3
 800f764:	4b4c      	ldr	r3, [pc, #304]	@ (800f898 <USBD_SetConfig+0x148>)
 800f766:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f768:	4b4b      	ldr	r3, [pc, #300]	@ (800f898 <USBD_SetConfig+0x148>)
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	2b01      	cmp	r3, #1
 800f76e:	d905      	bls.n	800f77c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f770:	6839      	ldr	r1, [r7, #0]
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f000 f96c 	bl	800fa50 <USBD_CtlError>
    return USBD_FAIL;
 800f778:	2303      	movs	r3, #3
 800f77a:	e088      	b.n	800f88e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f782:	b2db      	uxtb	r3, r3
 800f784:	2b02      	cmp	r3, #2
 800f786:	d002      	beq.n	800f78e <USBD_SetConfig+0x3e>
 800f788:	2b03      	cmp	r3, #3
 800f78a:	d025      	beq.n	800f7d8 <USBD_SetConfig+0x88>
 800f78c:	e071      	b.n	800f872 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f78e:	4b42      	ldr	r3, [pc, #264]	@ (800f898 <USBD_SetConfig+0x148>)
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d01c      	beq.n	800f7d0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f796:	4b40      	ldr	r3, [pc, #256]	@ (800f898 <USBD_SetConfig+0x148>)
 800f798:	781b      	ldrb	r3, [r3, #0]
 800f79a:	461a      	mov	r2, r3
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f7a0:	4b3d      	ldr	r3, [pc, #244]	@ (800f898 <USBD_SetConfig+0x148>)
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	4619      	mov	r1, r3
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f7ff f992 	bl	800ead0 <USBD_SetClassConfig>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f7b0:	7bfb      	ldrb	r3, [r7, #15]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d004      	beq.n	800f7c0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f7b6:	6839      	ldr	r1, [r7, #0]
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f000 f949 	bl	800fa50 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f7be:	e065      	b.n	800f88c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f000 fa10 	bl	800fbe6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2203      	movs	r2, #3
 800f7ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f7ce:	e05d      	b.n	800f88c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f000 fa08 	bl	800fbe6 <USBD_CtlSendStatus>
      break;
 800f7d6:	e059      	b.n	800f88c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f7d8:	4b2f      	ldr	r3, [pc, #188]	@ (800f898 <USBD_SetConfig+0x148>)
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d112      	bne.n	800f806 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2202      	movs	r2, #2
 800f7e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f7e8:	4b2b      	ldr	r3, [pc, #172]	@ (800f898 <USBD_SetConfig+0x148>)
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f7f2:	4b29      	ldr	r3, [pc, #164]	@ (800f898 <USBD_SetConfig+0x148>)
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f7ff f985 	bl	800eb08 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f000 f9f1 	bl	800fbe6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f804:	e042      	b.n	800f88c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f806:	4b24      	ldr	r3, [pc, #144]	@ (800f898 <USBD_SetConfig+0x148>)
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	461a      	mov	r2, r3
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	685b      	ldr	r3, [r3, #4]
 800f810:	429a      	cmp	r2, r3
 800f812:	d02a      	beq.n	800f86a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	b2db      	uxtb	r3, r3
 800f81a:	4619      	mov	r1, r3
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f7ff f973 	bl	800eb08 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f822:	4b1d      	ldr	r3, [pc, #116]	@ (800f898 <USBD_SetConfig+0x148>)
 800f824:	781b      	ldrb	r3, [r3, #0]
 800f826:	461a      	mov	r2, r3
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f82c:	4b1a      	ldr	r3, [pc, #104]	@ (800f898 <USBD_SetConfig+0x148>)
 800f82e:	781b      	ldrb	r3, [r3, #0]
 800f830:	4619      	mov	r1, r3
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f7ff f94c 	bl	800ead0 <USBD_SetClassConfig>
 800f838:	4603      	mov	r3, r0
 800f83a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f83c:	7bfb      	ldrb	r3, [r7, #15]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d00f      	beq.n	800f862 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f842:	6839      	ldr	r1, [r7, #0]
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f000 f903 	bl	800fa50 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	685b      	ldr	r3, [r3, #4]
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	4619      	mov	r1, r3
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f7ff f958 	bl	800eb08 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2202      	movs	r2, #2
 800f85c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f860:	e014      	b.n	800f88c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f000 f9bf 	bl	800fbe6 <USBD_CtlSendStatus>
      break;
 800f868:	e010      	b.n	800f88c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f000 f9bb 	bl	800fbe6 <USBD_CtlSendStatus>
      break;
 800f870:	e00c      	b.n	800f88c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f872:	6839      	ldr	r1, [r7, #0]
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f000 f8eb 	bl	800fa50 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f87a:	4b07      	ldr	r3, [pc, #28]	@ (800f898 <USBD_SetConfig+0x148>)
 800f87c:	781b      	ldrb	r3, [r3, #0]
 800f87e:	4619      	mov	r1, r3
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f7ff f941 	bl	800eb08 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f886:	2303      	movs	r3, #3
 800f888:	73fb      	strb	r3, [r7, #15]
      break;
 800f88a:	bf00      	nop
  }

  return ret;
 800f88c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f88e:	4618      	mov	r0, r3
 800f890:	3710      	adds	r7, #16
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
 800f896:	bf00      	nop
 800f898:	20000b5c 	.word	0x20000b5c

0800f89c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	88db      	ldrh	r3, [r3, #6]
 800f8aa:	2b01      	cmp	r3, #1
 800f8ac:	d004      	beq.n	800f8b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f8ae:	6839      	ldr	r1, [r7, #0]
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f000 f8cd 	bl	800fa50 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f8b6:	e023      	b.n	800f900 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8be:	b2db      	uxtb	r3, r3
 800f8c0:	2b02      	cmp	r3, #2
 800f8c2:	dc02      	bgt.n	800f8ca <USBD_GetConfig+0x2e>
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	dc03      	bgt.n	800f8d0 <USBD_GetConfig+0x34>
 800f8c8:	e015      	b.n	800f8f6 <USBD_GetConfig+0x5a>
 800f8ca:	2b03      	cmp	r3, #3
 800f8cc:	d00b      	beq.n	800f8e6 <USBD_GetConfig+0x4a>
 800f8ce:	e012      	b.n	800f8f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	3308      	adds	r3, #8
 800f8da:	2201      	movs	r2, #1
 800f8dc:	4619      	mov	r1, r3
 800f8de:	6878      	ldr	r0, [r7, #4]
 800f8e0:	f000 f927 	bl	800fb32 <USBD_CtlSendData>
        break;
 800f8e4:	e00c      	b.n	800f900 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	3304      	adds	r3, #4
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	4619      	mov	r1, r3
 800f8ee:	6878      	ldr	r0, [r7, #4]
 800f8f0:	f000 f91f 	bl	800fb32 <USBD_CtlSendData>
        break;
 800f8f4:	e004      	b.n	800f900 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f8f6:	6839      	ldr	r1, [r7, #0]
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f000 f8a9 	bl	800fa50 <USBD_CtlError>
        break;
 800f8fe:	bf00      	nop
}
 800f900:	bf00      	nop
 800f902:	3708      	adds	r7, #8
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	3b01      	subs	r3, #1
 800f91c:	2b02      	cmp	r3, #2
 800f91e:	d81e      	bhi.n	800f95e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	88db      	ldrh	r3, [r3, #6]
 800f924:	2b02      	cmp	r3, #2
 800f926:	d004      	beq.n	800f932 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f928:	6839      	ldr	r1, [r7, #0]
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f000 f890 	bl	800fa50 <USBD_CtlError>
        break;
 800f930:	e01a      	b.n	800f968 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2201      	movs	r2, #1
 800f936:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d005      	beq.n	800f94e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	68db      	ldr	r3, [r3, #12]
 800f946:	f043 0202 	orr.w	r2, r3, #2
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	330c      	adds	r3, #12
 800f952:	2202      	movs	r2, #2
 800f954:	4619      	mov	r1, r3
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f000 f8eb 	bl	800fb32 <USBD_CtlSendData>
      break;
 800f95c:	e004      	b.n	800f968 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f95e:	6839      	ldr	r1, [r7, #0]
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f000 f875 	bl	800fa50 <USBD_CtlError>
      break;
 800f966:	bf00      	nop
  }
}
 800f968:	bf00      	nop
 800f96a:	3708      	adds	r7, #8
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}

0800f970 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	885b      	ldrh	r3, [r3, #2]
 800f97e:	2b01      	cmp	r3, #1
 800f980:	d106      	bne.n	800f990 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2201      	movs	r2, #1
 800f986:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f000 f92b 	bl	800fbe6 <USBD_CtlSendStatus>
  }
}
 800f990:	bf00      	nop
 800f992:	3708      	adds	r7, #8
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}

0800f998 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f9a8:	b2db      	uxtb	r3, r3
 800f9aa:	3b01      	subs	r3, #1
 800f9ac:	2b02      	cmp	r3, #2
 800f9ae:	d80b      	bhi.n	800f9c8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	885b      	ldrh	r3, [r3, #2]
 800f9b4:	2b01      	cmp	r3, #1
 800f9b6:	d10c      	bne.n	800f9d2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f000 f910 	bl	800fbe6 <USBD_CtlSendStatus>
      }
      break;
 800f9c6:	e004      	b.n	800f9d2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f9c8:	6839      	ldr	r1, [r7, #0]
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f000 f840 	bl	800fa50 <USBD_CtlError>
      break;
 800f9d0:	e000      	b.n	800f9d4 <USBD_ClrFeature+0x3c>
      break;
 800f9d2:	bf00      	nop
  }
}
 800f9d4:	bf00      	nop
 800f9d6:	3708      	adds	r7, #8
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}

0800f9dc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b084      	sub	sp, #16
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	781a      	ldrb	r2, [r3, #0]
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	3301      	adds	r3, #1
 800f9f6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	781a      	ldrb	r2, [r3, #0]
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	3301      	adds	r3, #1
 800fa04:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fa06:	68f8      	ldr	r0, [r7, #12]
 800fa08:	f7ff fa92 	bl	800ef30 <SWAPBYTE>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	461a      	mov	r2, r3
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	3301      	adds	r3, #1
 800fa18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	3301      	adds	r3, #1
 800fa1e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fa20:	68f8      	ldr	r0, [r7, #12]
 800fa22:	f7ff fa85 	bl	800ef30 <SWAPBYTE>
 800fa26:	4603      	mov	r3, r0
 800fa28:	461a      	mov	r2, r3
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	3301      	adds	r3, #1
 800fa32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	3301      	adds	r3, #1
 800fa38:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fa3a:	68f8      	ldr	r0, [r7, #12]
 800fa3c:	f7ff fa78 	bl	800ef30 <SWAPBYTE>
 800fa40:	4603      	mov	r3, r0
 800fa42:	461a      	mov	r2, r3
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	80da      	strh	r2, [r3, #6]
}
 800fa48:	bf00      	nop
 800fa4a:	3710      	adds	r7, #16
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}

0800fa50 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa5a:	2180      	movs	r1, #128	@ 0x80
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f000 fcab 	bl	80103b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fa62:	2100      	movs	r1, #0
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f000 fca7 	bl	80103b8 <USBD_LL_StallEP>
}
 800fa6a:	bf00      	nop
 800fa6c:	3708      	adds	r7, #8
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}

0800fa72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fa72:	b580      	push	{r7, lr}
 800fa74:	b086      	sub	sp, #24
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	60f8      	str	r0, [r7, #12]
 800fa7a:	60b9      	str	r1, [r7, #8]
 800fa7c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d036      	beq.n	800faf6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fa8c:	6938      	ldr	r0, [r7, #16]
 800fa8e:	f000 f836 	bl	800fafe <USBD_GetLen>
 800fa92:	4603      	mov	r3, r0
 800fa94:	3301      	adds	r3, #1
 800fa96:	b29b      	uxth	r3, r3
 800fa98:	005b      	lsls	r3, r3, #1
 800fa9a:	b29a      	uxth	r2, r3
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800faa0:	7dfb      	ldrb	r3, [r7, #23]
 800faa2:	68ba      	ldr	r2, [r7, #8]
 800faa4:	4413      	add	r3, r2
 800faa6:	687a      	ldr	r2, [r7, #4]
 800faa8:	7812      	ldrb	r2, [r2, #0]
 800faaa:	701a      	strb	r2, [r3, #0]
  idx++;
 800faac:	7dfb      	ldrb	r3, [r7, #23]
 800faae:	3301      	adds	r3, #1
 800fab0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fab2:	7dfb      	ldrb	r3, [r7, #23]
 800fab4:	68ba      	ldr	r2, [r7, #8]
 800fab6:	4413      	add	r3, r2
 800fab8:	2203      	movs	r2, #3
 800faba:	701a      	strb	r2, [r3, #0]
  idx++;
 800fabc:	7dfb      	ldrb	r3, [r7, #23]
 800fabe:	3301      	adds	r3, #1
 800fac0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fac2:	e013      	b.n	800faec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fac4:	7dfb      	ldrb	r3, [r7, #23]
 800fac6:	68ba      	ldr	r2, [r7, #8]
 800fac8:	4413      	add	r3, r2
 800faca:	693a      	ldr	r2, [r7, #16]
 800facc:	7812      	ldrb	r2, [r2, #0]
 800face:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	3301      	adds	r3, #1
 800fad4:	613b      	str	r3, [r7, #16]
    idx++;
 800fad6:	7dfb      	ldrb	r3, [r7, #23]
 800fad8:	3301      	adds	r3, #1
 800fada:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fadc:	7dfb      	ldrb	r3, [r7, #23]
 800fade:	68ba      	ldr	r2, [r7, #8]
 800fae0:	4413      	add	r3, r2
 800fae2:	2200      	movs	r2, #0
 800fae4:	701a      	strb	r2, [r3, #0]
    idx++;
 800fae6:	7dfb      	ldrb	r3, [r7, #23]
 800fae8:	3301      	adds	r3, #1
 800faea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800faec:	693b      	ldr	r3, [r7, #16]
 800faee:	781b      	ldrb	r3, [r3, #0]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d1e7      	bne.n	800fac4 <USBD_GetString+0x52>
 800faf4:	e000      	b.n	800faf8 <USBD_GetString+0x86>
    return;
 800faf6:	bf00      	nop
  }
}
 800faf8:	3718      	adds	r7, #24
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}

0800fafe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fafe:	b480      	push	{r7}
 800fb00:	b085      	sub	sp, #20
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fb06:	2300      	movs	r3, #0
 800fb08:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fb0e:	e005      	b.n	800fb1c <USBD_GetLen+0x1e>
  {
    len++;
 800fb10:	7bfb      	ldrb	r3, [r7, #15]
 800fb12:	3301      	adds	r3, #1
 800fb14:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	3301      	adds	r3, #1
 800fb1a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	781b      	ldrb	r3, [r3, #0]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d1f5      	bne.n	800fb10 <USBD_GetLen+0x12>
  }

  return len;
 800fb24:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3714      	adds	r7, #20
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb30:	4770      	bx	lr

0800fb32 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fb32:	b580      	push	{r7, lr}
 800fb34:	b084      	sub	sp, #16
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	60f8      	str	r0, [r7, #12]
 800fb3a:	60b9      	str	r1, [r7, #8]
 800fb3c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	2202      	movs	r2, #2
 800fb42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	687a      	ldr	r2, [r7, #4]
 800fb4a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	687a      	ldr	r2, [r7, #4]
 800fb50:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	68ba      	ldr	r2, [r7, #8]
 800fb56:	2100      	movs	r1, #0
 800fb58:	68f8      	ldr	r0, [r7, #12]
 800fb5a:	f000 fcb6 	bl	80104ca <USBD_LL_Transmit>

  return USBD_OK;
 800fb5e:	2300      	movs	r3, #0
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	3710      	adds	r7, #16
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}

0800fb68 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	60f8      	str	r0, [r7, #12]
 800fb70:	60b9      	str	r1, [r7, #8]
 800fb72:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	68ba      	ldr	r2, [r7, #8]
 800fb78:	2100      	movs	r1, #0
 800fb7a:	68f8      	ldr	r0, [r7, #12]
 800fb7c:	f000 fca5 	bl	80104ca <USBD_LL_Transmit>

  return USBD_OK;
 800fb80:	2300      	movs	r3, #0
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	3710      	adds	r7, #16
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}

0800fb8a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fb8a:	b580      	push	{r7, lr}
 800fb8c:	b084      	sub	sp, #16
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	60f8      	str	r0, [r7, #12]
 800fb92:	60b9      	str	r1, [r7, #8]
 800fb94:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	2203      	movs	r2, #3
 800fb9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	687a      	ldr	r2, [r7, #4]
 800fba2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	687a      	ldr	r2, [r7, #4]
 800fbaa:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	68ba      	ldr	r2, [r7, #8]
 800fbb2:	2100      	movs	r1, #0
 800fbb4:	68f8      	ldr	r0, [r7, #12]
 800fbb6:	f000 fca9 	bl	801050c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fbba:	2300      	movs	r3, #0
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3710      	adds	r7, #16
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}

0800fbc4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b084      	sub	sp, #16
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	60f8      	str	r0, [r7, #12]
 800fbcc:	60b9      	str	r1, [r7, #8]
 800fbce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	68ba      	ldr	r2, [r7, #8]
 800fbd4:	2100      	movs	r1, #0
 800fbd6:	68f8      	ldr	r0, [r7, #12]
 800fbd8:	f000 fc98 	bl	801050c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fbdc:	2300      	movs	r3, #0
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3710      	adds	r7, #16
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}

0800fbe6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fbe6:	b580      	push	{r7, lr}
 800fbe8:	b082      	sub	sp, #8
 800fbea:	af00      	add	r7, sp, #0
 800fbec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2204      	movs	r2, #4
 800fbf2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	2100      	movs	r1, #0
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f000 fc64 	bl	80104ca <USBD_LL_Transmit>

  return USBD_OK;
 800fc02:	2300      	movs	r3, #0
}
 800fc04:	4618      	mov	r0, r3
 800fc06:	3708      	adds	r7, #8
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}

0800fc0c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b082      	sub	sp, #8
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2205      	movs	r2, #5
 800fc18:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	2200      	movs	r2, #0
 800fc20:	2100      	movs	r1, #0
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f000 fc72 	bl	801050c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fc28:	2300      	movs	r3, #0
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3708      	adds	r7, #8
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
	...

0800fc34 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800fc38:	2200      	movs	r2, #0
 800fc3a:	4912      	ldr	r1, [pc, #72]	@ (800fc84 <MX_USB_Device_Init+0x50>)
 800fc3c:	4812      	ldr	r0, [pc, #72]	@ (800fc88 <MX_USB_Device_Init+0x54>)
 800fc3e:	f7fe fed9 	bl	800e9f4 <USBD_Init>
 800fc42:	4603      	mov	r3, r0
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d001      	beq.n	800fc4c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800fc48:	f7f3 fbc2 	bl	80033d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800fc4c:	490f      	ldr	r1, [pc, #60]	@ (800fc8c <MX_USB_Device_Init+0x58>)
 800fc4e:	480e      	ldr	r0, [pc, #56]	@ (800fc88 <MX_USB_Device_Init+0x54>)
 800fc50:	f7fe ff00 	bl	800ea54 <USBD_RegisterClass>
 800fc54:	4603      	mov	r3, r0
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d001      	beq.n	800fc5e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800fc5a:	f7f3 fbb9 	bl	80033d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800fc5e:	490c      	ldr	r1, [pc, #48]	@ (800fc90 <MX_USB_Device_Init+0x5c>)
 800fc60:	4809      	ldr	r0, [pc, #36]	@ (800fc88 <MX_USB_Device_Init+0x54>)
 800fc62:	f7fe fe21 	bl	800e8a8 <USBD_CDC_RegisterInterface>
 800fc66:	4603      	mov	r3, r0
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d001      	beq.n	800fc70 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800fc6c:	f7f3 fbb0 	bl	80033d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800fc70:	4805      	ldr	r0, [pc, #20]	@ (800fc88 <MX_USB_Device_Init+0x54>)
 800fc72:	f7fe ff16 	bl	800eaa2 <USBD_Start>
 800fc76:	4603      	mov	r3, r0
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d001      	beq.n	800fc80 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800fc7c:	f7f3 fba8 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800fc80:	bf00      	nop
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	2000014c 	.word	0x2000014c
 800fc88:	20000b60 	.word	0x20000b60
 800fc8c:	20000034 	.word	0x20000034
 800fc90:	20000138 	.word	0x20000138

0800fc94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fc98:	2200      	movs	r2, #0
 800fc9a:	4905      	ldr	r1, [pc, #20]	@ (800fcb0 <CDC_Init_FS+0x1c>)
 800fc9c:	4805      	ldr	r0, [pc, #20]	@ (800fcb4 <CDC_Init_FS+0x20>)
 800fc9e:	f7fe fe18 	bl	800e8d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fca2:	4905      	ldr	r1, [pc, #20]	@ (800fcb8 <CDC_Init_FS+0x24>)
 800fca4:	4803      	ldr	r0, [pc, #12]	@ (800fcb4 <CDC_Init_FS+0x20>)
 800fca6:	f7fe fe32 	bl	800e90e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fcaa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	bd80      	pop	{r7, pc}
 800fcb0:	20001630 	.word	0x20001630
 800fcb4:	20000b60 	.word	0x20000b60
 800fcb8:	20000e30 	.word	0x20000e30

0800fcbc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fcc0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcca:	4770      	bx	lr

0800fccc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fccc:	b480      	push	{r7}
 800fcce:	b083      	sub	sp, #12
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	6039      	str	r1, [r7, #0]
 800fcd6:	71fb      	strb	r3, [r7, #7]
 800fcd8:	4613      	mov	r3, r2
 800fcda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fcdc:	79fb      	ldrb	r3, [r7, #7]
 800fcde:	2b23      	cmp	r3, #35	@ 0x23
 800fce0:	d84a      	bhi.n	800fd78 <CDC_Control_FS+0xac>
 800fce2:	a201      	add	r2, pc, #4	@ (adr r2, 800fce8 <CDC_Control_FS+0x1c>)
 800fce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fce8:	0800fd79 	.word	0x0800fd79
 800fcec:	0800fd79 	.word	0x0800fd79
 800fcf0:	0800fd79 	.word	0x0800fd79
 800fcf4:	0800fd79 	.word	0x0800fd79
 800fcf8:	0800fd79 	.word	0x0800fd79
 800fcfc:	0800fd79 	.word	0x0800fd79
 800fd00:	0800fd79 	.word	0x0800fd79
 800fd04:	0800fd79 	.word	0x0800fd79
 800fd08:	0800fd79 	.word	0x0800fd79
 800fd0c:	0800fd79 	.word	0x0800fd79
 800fd10:	0800fd79 	.word	0x0800fd79
 800fd14:	0800fd79 	.word	0x0800fd79
 800fd18:	0800fd79 	.word	0x0800fd79
 800fd1c:	0800fd79 	.word	0x0800fd79
 800fd20:	0800fd79 	.word	0x0800fd79
 800fd24:	0800fd79 	.word	0x0800fd79
 800fd28:	0800fd79 	.word	0x0800fd79
 800fd2c:	0800fd79 	.word	0x0800fd79
 800fd30:	0800fd79 	.word	0x0800fd79
 800fd34:	0800fd79 	.word	0x0800fd79
 800fd38:	0800fd79 	.word	0x0800fd79
 800fd3c:	0800fd79 	.word	0x0800fd79
 800fd40:	0800fd79 	.word	0x0800fd79
 800fd44:	0800fd79 	.word	0x0800fd79
 800fd48:	0800fd79 	.word	0x0800fd79
 800fd4c:	0800fd79 	.word	0x0800fd79
 800fd50:	0800fd79 	.word	0x0800fd79
 800fd54:	0800fd79 	.word	0x0800fd79
 800fd58:	0800fd79 	.word	0x0800fd79
 800fd5c:	0800fd79 	.word	0x0800fd79
 800fd60:	0800fd79 	.word	0x0800fd79
 800fd64:	0800fd79 	.word	0x0800fd79
 800fd68:	0800fd79 	.word	0x0800fd79
 800fd6c:	0800fd79 	.word	0x0800fd79
 800fd70:	0800fd79 	.word	0x0800fd79
 800fd74:	0800fd79 	.word	0x0800fd79
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fd78:	bf00      	nop
  }

  return (USBD_OK);
 800fd7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	370c      	adds	r7, #12
 800fd80:	46bd      	mov	sp, r7
 800fd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd86:	4770      	bx	lr

0800fd88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b082      	sub	sp, #8
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len > sizeof(USB_RX_Buffer)) {
 800fd92:	683b      	ldr	r3, [r7, #0]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fd9a:	d903      	bls.n	800fda4 <CDC_Receive_FS+0x1c>
	          *Len = sizeof(USB_RX_Buffer);  // Prevent buffer overflow
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fda2:	601a      	str	r2, [r3, #0]
	      }
	      memcpy(USB_RX_Buffer, Buf, *Len);
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	461a      	mov	r2, r3
 800fdaa:	6879      	ldr	r1, [r7, #4]
 800fdac:	4808      	ldr	r0, [pc, #32]	@ (800fdd0 <CDC_Receive_FS+0x48>)
 800fdae:	f001 fcb0 	bl	8011712 <memcpy>

	      dataReceivedFlag = 1;
 800fdb2:	4b08      	ldr	r3, [pc, #32]	@ (800fdd4 <CDC_Receive_FS+0x4c>)
 800fdb4:	2201      	movs	r2, #1
 800fdb6:	601a      	str	r2, [r3, #0]

	      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fdb8:	6879      	ldr	r1, [r7, #4]
 800fdba:	4807      	ldr	r0, [pc, #28]	@ (800fdd8 <CDC_Receive_FS+0x50>)
 800fdbc:	f7fe fda7 	bl	800e90e <USBD_CDC_SetRxBuffer>
	      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fdc0:	4805      	ldr	r0, [pc, #20]	@ (800fdd8 <CDC_Receive_FS+0x50>)
 800fdc2:	f7fe fded 	bl	800e9a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fdc6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3708      	adds	r7, #8
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}
 800fdd0:	20000a78 	.word	0x20000a78
 800fdd4:	20000b38 	.word	0x20000b38
 800fdd8:	20000b60 	.word	0x20000b60

0800fddc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b084      	sub	sp, #16
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
 800fde4:	460b      	mov	r3, r1
 800fde6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fde8:	2300      	movs	r3, #0
 800fdea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fdec:	4b0d      	ldr	r3, [pc, #52]	@ (800fe24 <CDC_Transmit_FS+0x48>)
 800fdee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fdf2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d001      	beq.n	800fe02 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fdfe:	2301      	movs	r3, #1
 800fe00:	e00b      	b.n	800fe1a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fe02:	887b      	ldrh	r3, [r7, #2]
 800fe04:	461a      	mov	r2, r3
 800fe06:	6879      	ldr	r1, [r7, #4]
 800fe08:	4806      	ldr	r0, [pc, #24]	@ (800fe24 <CDC_Transmit_FS+0x48>)
 800fe0a:	f7fe fd62 	bl	800e8d2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fe0e:	4805      	ldr	r0, [pc, #20]	@ (800fe24 <CDC_Transmit_FS+0x48>)
 800fe10:	f7fe fd96 	bl	800e940 <USBD_CDC_TransmitPacket>
 800fe14:	4603      	mov	r3, r0
 800fe16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fe18:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3710      	adds	r7, #16
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
 800fe22:	bf00      	nop
 800fe24:	20000b60 	.word	0x20000b60

0800fe28 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fe28:	b480      	push	{r7}
 800fe2a:	b087      	sub	sp, #28
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	60f8      	str	r0, [r7, #12]
 800fe30:	60b9      	str	r1, [r7, #8]
 800fe32:	4613      	mov	r3, r2
 800fe34:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fe36:	2300      	movs	r3, #0
 800fe38:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fe3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	371c      	adds	r7, #28
 800fe42:	46bd      	mov	sp, r7
 800fe44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe48:	4770      	bx	lr
	...

0800fe4c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe4c:	b480      	push	{r7}
 800fe4e:	b083      	sub	sp, #12
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	4603      	mov	r3, r0
 800fe54:	6039      	str	r1, [r7, #0]
 800fe56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	2212      	movs	r2, #18
 800fe5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800fe5e:	4b03      	ldr	r3, [pc, #12]	@ (800fe6c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	370c      	adds	r7, #12
 800fe64:	46bd      	mov	sp, r7
 800fe66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6a:	4770      	bx	lr
 800fe6c:	2000016c 	.word	0x2000016c

0800fe70 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe70:	b480      	push	{r7}
 800fe72:	b083      	sub	sp, #12
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	4603      	mov	r3, r0
 800fe78:	6039      	str	r1, [r7, #0]
 800fe7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	2204      	movs	r2, #4
 800fe80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fe82:	4b03      	ldr	r3, [pc, #12]	@ (800fe90 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	370c      	adds	r7, #12
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8e:	4770      	bx	lr
 800fe90:	20000180 	.word	0x20000180

0800fe94 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b082      	sub	sp, #8
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	6039      	str	r1, [r7, #0]
 800fe9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fea0:	79fb      	ldrb	r3, [r7, #7]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d105      	bne.n	800feb2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800fea6:	683a      	ldr	r2, [r7, #0]
 800fea8:	4907      	ldr	r1, [pc, #28]	@ (800fec8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800feaa:	4808      	ldr	r0, [pc, #32]	@ (800fecc <USBD_CDC_ProductStrDescriptor+0x38>)
 800feac:	f7ff fde1 	bl	800fa72 <USBD_GetString>
 800feb0:	e004      	b.n	800febc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800feb2:	683a      	ldr	r2, [r7, #0]
 800feb4:	4904      	ldr	r1, [pc, #16]	@ (800fec8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800feb6:	4805      	ldr	r0, [pc, #20]	@ (800fecc <USBD_CDC_ProductStrDescriptor+0x38>)
 800feb8:	f7ff fddb 	bl	800fa72 <USBD_GetString>
  }
  return USBD_StrDesc;
 800febc:	4b02      	ldr	r3, [pc, #8]	@ (800fec8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800febe:	4618      	mov	r0, r3
 800fec0:	3708      	adds	r7, #8
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd80      	pop	{r7, pc}
 800fec6:	bf00      	nop
 800fec8:	20001e30 	.word	0x20001e30
 800fecc:	08016d0c 	.word	0x08016d0c

0800fed0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b082      	sub	sp, #8
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	4603      	mov	r3, r0
 800fed8:	6039      	str	r1, [r7, #0]
 800feda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fedc:	683a      	ldr	r2, [r7, #0]
 800fede:	4904      	ldr	r1, [pc, #16]	@ (800fef0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800fee0:	4804      	ldr	r0, [pc, #16]	@ (800fef4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800fee2:	f7ff fdc6 	bl	800fa72 <USBD_GetString>
  return USBD_StrDesc;
 800fee6:	4b02      	ldr	r3, [pc, #8]	@ (800fef0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800fee8:	4618      	mov	r0, r3
 800feea:	3708      	adds	r7, #8
 800feec:	46bd      	mov	sp, r7
 800feee:	bd80      	pop	{r7, pc}
 800fef0:	20001e30 	.word	0x20001e30
 800fef4:	08016d24 	.word	0x08016d24

0800fef8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b082      	sub	sp, #8
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	4603      	mov	r3, r0
 800ff00:	6039      	str	r1, [r7, #0]
 800ff02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	221a      	movs	r2, #26
 800ff08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ff0a:	f000 f843 	bl	800ff94 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ff0e:	4b02      	ldr	r3, [pc, #8]	@ (800ff18 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ff10:	4618      	mov	r0, r3
 800ff12:	3708      	adds	r7, #8
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	20000184 	.word	0x20000184

0800ff1c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b082      	sub	sp, #8
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	4603      	mov	r3, r0
 800ff24:	6039      	str	r1, [r7, #0]
 800ff26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ff28:	79fb      	ldrb	r3, [r7, #7]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d105      	bne.n	800ff3a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ff2e:	683a      	ldr	r2, [r7, #0]
 800ff30:	4907      	ldr	r1, [pc, #28]	@ (800ff50 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ff32:	4808      	ldr	r0, [pc, #32]	@ (800ff54 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ff34:	f7ff fd9d 	bl	800fa72 <USBD_GetString>
 800ff38:	e004      	b.n	800ff44 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ff3a:	683a      	ldr	r2, [r7, #0]
 800ff3c:	4904      	ldr	r1, [pc, #16]	@ (800ff50 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ff3e:	4805      	ldr	r0, [pc, #20]	@ (800ff54 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ff40:	f7ff fd97 	bl	800fa72 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff44:	4b02      	ldr	r3, [pc, #8]	@ (800ff50 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	3708      	adds	r7, #8
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
 800ff4e:	bf00      	nop
 800ff50:	20001e30 	.word	0x20001e30
 800ff54:	08016d38 	.word	0x08016d38

0800ff58 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b082      	sub	sp, #8
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	4603      	mov	r3, r0
 800ff60:	6039      	str	r1, [r7, #0]
 800ff62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ff64:	79fb      	ldrb	r3, [r7, #7]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d105      	bne.n	800ff76 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ff6a:	683a      	ldr	r2, [r7, #0]
 800ff6c:	4907      	ldr	r1, [pc, #28]	@ (800ff8c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ff6e:	4808      	ldr	r0, [pc, #32]	@ (800ff90 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ff70:	f7ff fd7f 	bl	800fa72 <USBD_GetString>
 800ff74:	e004      	b.n	800ff80 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ff76:	683a      	ldr	r2, [r7, #0]
 800ff78:	4904      	ldr	r1, [pc, #16]	@ (800ff8c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ff7a:	4805      	ldr	r0, [pc, #20]	@ (800ff90 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ff7c:	f7ff fd79 	bl	800fa72 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff80:	4b02      	ldr	r3, [pc, #8]	@ (800ff8c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	3708      	adds	r7, #8
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	bf00      	nop
 800ff8c:	20001e30 	.word	0x20001e30
 800ff90:	08016d44 	.word	0x08016d44

0800ff94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ff9a:	4b0f      	ldr	r3, [pc, #60]	@ (800ffd8 <Get_SerialNum+0x44>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ffa0:	4b0e      	ldr	r3, [pc, #56]	@ (800ffdc <Get_SerialNum+0x48>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ffa6:	4b0e      	ldr	r3, [pc, #56]	@ (800ffe0 <Get_SerialNum+0x4c>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ffac:	68fa      	ldr	r2, [r7, #12]
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	4413      	add	r3, r2
 800ffb2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d009      	beq.n	800ffce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ffba:	2208      	movs	r2, #8
 800ffbc:	4909      	ldr	r1, [pc, #36]	@ (800ffe4 <Get_SerialNum+0x50>)
 800ffbe:	68f8      	ldr	r0, [r7, #12]
 800ffc0:	f000 f814 	bl	800ffec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ffc4:	2204      	movs	r2, #4
 800ffc6:	4908      	ldr	r1, [pc, #32]	@ (800ffe8 <Get_SerialNum+0x54>)
 800ffc8:	68b8      	ldr	r0, [r7, #8]
 800ffca:	f000 f80f 	bl	800ffec <IntToUnicode>
  }
}
 800ffce:	bf00      	nop
 800ffd0:	3710      	adds	r7, #16
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}
 800ffd6:	bf00      	nop
 800ffd8:	1fff7590 	.word	0x1fff7590
 800ffdc:	1fff7594 	.word	0x1fff7594
 800ffe0:	1fff7598 	.word	0x1fff7598
 800ffe4:	20000186 	.word	0x20000186
 800ffe8:	20000196 	.word	0x20000196

0800ffec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ffec:	b480      	push	{r7}
 800ffee:	b087      	sub	sp, #28
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	60f8      	str	r0, [r7, #12]
 800fff4:	60b9      	str	r1, [r7, #8]
 800fff6:	4613      	mov	r3, r2
 800fff8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fffa:	2300      	movs	r3, #0
 800fffc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fffe:	2300      	movs	r3, #0
 8010000:	75fb      	strb	r3, [r7, #23]
 8010002:	e027      	b.n	8010054 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	0f1b      	lsrs	r3, r3, #28
 8010008:	2b09      	cmp	r3, #9
 801000a:	d80b      	bhi.n	8010024 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	0f1b      	lsrs	r3, r3, #28
 8010010:	b2da      	uxtb	r2, r3
 8010012:	7dfb      	ldrb	r3, [r7, #23]
 8010014:	005b      	lsls	r3, r3, #1
 8010016:	4619      	mov	r1, r3
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	440b      	add	r3, r1
 801001c:	3230      	adds	r2, #48	@ 0x30
 801001e:	b2d2      	uxtb	r2, r2
 8010020:	701a      	strb	r2, [r3, #0]
 8010022:	e00a      	b.n	801003a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	0f1b      	lsrs	r3, r3, #28
 8010028:	b2da      	uxtb	r2, r3
 801002a:	7dfb      	ldrb	r3, [r7, #23]
 801002c:	005b      	lsls	r3, r3, #1
 801002e:	4619      	mov	r1, r3
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	440b      	add	r3, r1
 8010034:	3237      	adds	r2, #55	@ 0x37
 8010036:	b2d2      	uxtb	r2, r2
 8010038:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	011b      	lsls	r3, r3, #4
 801003e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010040:	7dfb      	ldrb	r3, [r7, #23]
 8010042:	005b      	lsls	r3, r3, #1
 8010044:	3301      	adds	r3, #1
 8010046:	68ba      	ldr	r2, [r7, #8]
 8010048:	4413      	add	r3, r2
 801004a:	2200      	movs	r2, #0
 801004c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801004e:	7dfb      	ldrb	r3, [r7, #23]
 8010050:	3301      	adds	r3, #1
 8010052:	75fb      	strb	r3, [r7, #23]
 8010054:	7dfa      	ldrb	r2, [r7, #23]
 8010056:	79fb      	ldrb	r3, [r7, #7]
 8010058:	429a      	cmp	r2, r3
 801005a:	d3d3      	bcc.n	8010004 <IntToUnicode+0x18>
  }
}
 801005c:	bf00      	nop
 801005e:	bf00      	nop
 8010060:	371c      	adds	r7, #28
 8010062:	46bd      	mov	sp, r7
 8010064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010068:	4770      	bx	lr
	...

0801006c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b098      	sub	sp, #96	@ 0x60
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010074:	f107 030c 	add.w	r3, r7, #12
 8010078:	2254      	movs	r2, #84	@ 0x54
 801007a:	2100      	movs	r1, #0
 801007c:	4618      	mov	r0, r3
 801007e:	f001 fab6 	bl	80115ee <memset>
  if(pcdHandle->Instance==USB)
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	4a15      	ldr	r2, [pc, #84]	@ (80100dc <HAL_PCD_MspInit+0x70>)
 8010088:	4293      	cmp	r3, r2
 801008a:	d122      	bne.n	80100d2 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801008c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010090:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010092:	2300      	movs	r3, #0
 8010094:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010096:	f107 030c 	add.w	r3, r7, #12
 801009a:	4618      	mov	r0, r3
 801009c:	f7f9 f8c6 	bl	800922c <HAL_RCCEx_PeriphCLKConfig>
 80100a0:	4603      	mov	r3, r0
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d001      	beq.n	80100aa <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80100a6:	f7f3 f993 	bl	80033d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80100aa:	4b0d      	ldr	r3, [pc, #52]	@ (80100e0 <HAL_PCD_MspInit+0x74>)
 80100ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80100ae:	4a0c      	ldr	r2, [pc, #48]	@ (80100e0 <HAL_PCD_MspInit+0x74>)
 80100b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80100b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80100b6:	4b0a      	ldr	r3, [pc, #40]	@ (80100e0 <HAL_PCD_MspInit+0x74>)
 80100b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80100ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80100be:	60bb      	str	r3, [r7, #8]
 80100c0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80100c2:	2200      	movs	r2, #0
 80100c4:	2100      	movs	r1, #0
 80100c6:	2014      	movs	r0, #20
 80100c8:	f7f5 fe47 	bl	8005d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80100cc:	2014      	movs	r0, #20
 80100ce:	f7f5 fe5e 	bl	8005d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80100d2:	bf00      	nop
 80100d4:	3760      	adds	r7, #96	@ 0x60
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}
 80100da:	bf00      	nop
 80100dc:	40005c00 	.word	0x40005c00
 80100e0:	40021000 	.word	0x40021000

080100e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b082      	sub	sp, #8
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80100f8:	4619      	mov	r1, r3
 80100fa:	4610      	mov	r0, r2
 80100fc:	f7fe fd1c 	bl	800eb38 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8010100:	bf00      	nop
 8010102:	3708      	adds	r7, #8
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}

08010108 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b082      	sub	sp, #8
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	460b      	mov	r3, r1
 8010112:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 801011a:	78fa      	ldrb	r2, [r7, #3]
 801011c:	6879      	ldr	r1, [r7, #4]
 801011e:	4613      	mov	r3, r2
 8010120:	009b      	lsls	r3, r3, #2
 8010122:	4413      	add	r3, r2
 8010124:	00db      	lsls	r3, r3, #3
 8010126:	440b      	add	r3, r1
 8010128:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801012c:	681a      	ldr	r2, [r3, #0]
 801012e:	78fb      	ldrb	r3, [r7, #3]
 8010130:	4619      	mov	r1, r3
 8010132:	f7fe fd56 	bl	800ebe2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8010136:	bf00      	nop
 8010138:	3708      	adds	r7, #8
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}

0801013e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801013e:	b580      	push	{r7, lr}
 8010140:	b082      	sub	sp, #8
 8010142:	af00      	add	r7, sp, #0
 8010144:	6078      	str	r0, [r7, #4]
 8010146:	460b      	mov	r3, r1
 8010148:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010150:	78fa      	ldrb	r2, [r7, #3]
 8010152:	6879      	ldr	r1, [r7, #4]
 8010154:	4613      	mov	r3, r2
 8010156:	009b      	lsls	r3, r3, #2
 8010158:	4413      	add	r3, r2
 801015a:	00db      	lsls	r3, r3, #3
 801015c:	440b      	add	r3, r1
 801015e:	3324      	adds	r3, #36	@ 0x24
 8010160:	681a      	ldr	r2, [r3, #0]
 8010162:	78fb      	ldrb	r3, [r7, #3]
 8010164:	4619      	mov	r1, r3
 8010166:	f7fe fd9f 	bl	800eca8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801016a:	bf00      	nop
 801016c:	3708      	adds	r7, #8
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}

08010172 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010172:	b580      	push	{r7, lr}
 8010174:	b082      	sub	sp, #8
 8010176:	af00      	add	r7, sp, #0
 8010178:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010180:	4618      	mov	r0, r3
 8010182:	f7fe feb3 	bl	800eeec <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8010186:	bf00      	nop
 8010188:	3708      	adds	r7, #8
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}

0801018e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801018e:	b580      	push	{r7, lr}
 8010190:	b084      	sub	sp, #16
 8010192:	af00      	add	r7, sp, #0
 8010194:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010196:	2301      	movs	r3, #1
 8010198:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	795b      	ldrb	r3, [r3, #5]
 801019e:	2b02      	cmp	r3, #2
 80101a0:	d001      	beq.n	80101a6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80101a2:	f7f3 f915 	bl	80033d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80101ac:	7bfa      	ldrb	r2, [r7, #15]
 80101ae:	4611      	mov	r1, r2
 80101b0:	4618      	mov	r0, r3
 80101b2:	f7fe fe5d 	bl	800ee70 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80101bc:	4618      	mov	r0, r3
 80101be:	f7fe fe09 	bl	800edd4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80101c2:	bf00      	nop
 80101c4:	3710      	adds	r7, #16
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
	...

080101cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b082      	sub	sp, #8
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fe fe58 	bl	800ee90 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	7a5b      	ldrb	r3, [r3, #9]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d005      	beq.n	80101f4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80101e8:	4b04      	ldr	r3, [pc, #16]	@ (80101fc <HAL_PCD_SuspendCallback+0x30>)
 80101ea:	691b      	ldr	r3, [r3, #16]
 80101ec:	4a03      	ldr	r2, [pc, #12]	@ (80101fc <HAL_PCD_SuspendCallback+0x30>)
 80101ee:	f043 0306 	orr.w	r3, r3, #6
 80101f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80101f4:	bf00      	nop
 80101f6:	3708      	adds	r7, #8
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}
 80101fc:	e000ed00 	.word	0xe000ed00

08010200 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	7a5b      	ldrb	r3, [r3, #9]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d007      	beq.n	8010220 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010210:	4b08      	ldr	r3, [pc, #32]	@ (8010234 <HAL_PCD_ResumeCallback+0x34>)
 8010212:	691b      	ldr	r3, [r3, #16]
 8010214:	4a07      	ldr	r2, [pc, #28]	@ (8010234 <HAL_PCD_ResumeCallback+0x34>)
 8010216:	f023 0306 	bic.w	r3, r3, #6
 801021a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801021c:	f000 f9f8 	bl	8010610 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010226:	4618      	mov	r0, r3
 8010228:	f7fe fe48 	bl	800eebc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801022c:	bf00      	nop
 801022e:	3708      	adds	r7, #8
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}
 8010234:	e000ed00 	.word	0xe000ed00

08010238 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010240:	4a2b      	ldr	r2, [pc, #172]	@ (80102f0 <USBD_LL_Init+0xb8>)
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	4a29      	ldr	r2, [pc, #164]	@ (80102f0 <USBD_LL_Init+0xb8>)
 801024c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8010250:	4b27      	ldr	r3, [pc, #156]	@ (80102f0 <USBD_LL_Init+0xb8>)
 8010252:	4a28      	ldr	r2, [pc, #160]	@ (80102f4 <USBD_LL_Init+0xbc>)
 8010254:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010256:	4b26      	ldr	r3, [pc, #152]	@ (80102f0 <USBD_LL_Init+0xb8>)
 8010258:	2208      	movs	r2, #8
 801025a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801025c:	4b24      	ldr	r3, [pc, #144]	@ (80102f0 <USBD_LL_Init+0xb8>)
 801025e:	2202      	movs	r2, #2
 8010260:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010262:	4b23      	ldr	r3, [pc, #140]	@ (80102f0 <USBD_LL_Init+0xb8>)
 8010264:	2202      	movs	r2, #2
 8010266:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010268:	4b21      	ldr	r3, [pc, #132]	@ (80102f0 <USBD_LL_Init+0xb8>)
 801026a:	2200      	movs	r2, #0
 801026c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801026e:	4b20      	ldr	r3, [pc, #128]	@ (80102f0 <USBD_LL_Init+0xb8>)
 8010270:	2200      	movs	r2, #0
 8010272:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010274:	4b1e      	ldr	r3, [pc, #120]	@ (80102f0 <USBD_LL_Init+0xb8>)
 8010276:	2200      	movs	r2, #0
 8010278:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801027a:	4b1d      	ldr	r3, [pc, #116]	@ (80102f0 <USBD_LL_Init+0xb8>)
 801027c:	2200      	movs	r2, #0
 801027e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010280:	481b      	ldr	r0, [pc, #108]	@ (80102f0 <USBD_LL_Init+0xb8>)
 8010282:	f7f6 fcbb 	bl	8006bfc <HAL_PCD_Init>
 8010286:	4603      	mov	r3, r0
 8010288:	2b00      	cmp	r3, #0
 801028a:	d001      	beq.n	8010290 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 801028c:	f7f3 f8a0 	bl	80033d0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010296:	2318      	movs	r3, #24
 8010298:	2200      	movs	r2, #0
 801029a:	2100      	movs	r1, #0
 801029c:	f7f8 f976 	bl	800858c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80102a6:	2358      	movs	r3, #88	@ 0x58
 80102a8:	2200      	movs	r2, #0
 80102aa:	2180      	movs	r1, #128	@ 0x80
 80102ac:	f7f8 f96e 	bl	800858c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80102b6:	23c0      	movs	r3, #192	@ 0xc0
 80102b8:	2200      	movs	r2, #0
 80102ba:	2181      	movs	r1, #129	@ 0x81
 80102bc:	f7f8 f966 	bl	800858c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80102c6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80102ca:	2200      	movs	r2, #0
 80102cc:	2101      	movs	r1, #1
 80102ce:	f7f8 f95d 	bl	800858c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80102d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80102dc:	2200      	movs	r2, #0
 80102de:	2182      	movs	r1, #130	@ 0x82
 80102e0:	f7f8 f954 	bl	800858c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80102e4:	2300      	movs	r3, #0
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3708      	adds	r7, #8
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}
 80102ee:	bf00      	nop
 80102f0:	20002030 	.word	0x20002030
 80102f4:	40005c00 	.word	0x40005c00

080102f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b084      	sub	sp, #16
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010300:	2300      	movs	r3, #0
 8010302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010304:	2300      	movs	r3, #0
 8010306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801030e:	4618      	mov	r0, r3
 8010310:	f7f6 fd42 	bl	8006d98 <HAL_PCD_Start>
 8010314:	4603      	mov	r3, r0
 8010316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010318:	7bfb      	ldrb	r3, [r7, #15]
 801031a:	4618      	mov	r0, r3
 801031c:	f000 f97e 	bl	801061c <USBD_Get_USB_Status>
 8010320:	4603      	mov	r3, r0
 8010322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010324:	7bbb      	ldrb	r3, [r7, #14]
}
 8010326:	4618      	mov	r0, r3
 8010328:	3710      	adds	r7, #16
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}

0801032e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801032e:	b580      	push	{r7, lr}
 8010330:	b084      	sub	sp, #16
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
 8010336:	4608      	mov	r0, r1
 8010338:	4611      	mov	r1, r2
 801033a:	461a      	mov	r2, r3
 801033c:	4603      	mov	r3, r0
 801033e:	70fb      	strb	r3, [r7, #3]
 8010340:	460b      	mov	r3, r1
 8010342:	70bb      	strb	r3, [r7, #2]
 8010344:	4613      	mov	r3, r2
 8010346:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010348:	2300      	movs	r3, #0
 801034a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801034c:	2300      	movs	r3, #0
 801034e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010356:	78bb      	ldrb	r3, [r7, #2]
 8010358:	883a      	ldrh	r2, [r7, #0]
 801035a:	78f9      	ldrb	r1, [r7, #3]
 801035c:	f7f6 fe89 	bl	8007072 <HAL_PCD_EP_Open>
 8010360:	4603      	mov	r3, r0
 8010362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010364:	7bfb      	ldrb	r3, [r7, #15]
 8010366:	4618      	mov	r0, r3
 8010368:	f000 f958 	bl	801061c <USBD_Get_USB_Status>
 801036c:	4603      	mov	r3, r0
 801036e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010370:	7bbb      	ldrb	r3, [r7, #14]
}
 8010372:	4618      	mov	r0, r3
 8010374:	3710      	adds	r7, #16
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}

0801037a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801037a:	b580      	push	{r7, lr}
 801037c:	b084      	sub	sp, #16
 801037e:	af00      	add	r7, sp, #0
 8010380:	6078      	str	r0, [r7, #4]
 8010382:	460b      	mov	r3, r1
 8010384:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010386:	2300      	movs	r3, #0
 8010388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801038a:	2300      	movs	r3, #0
 801038c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010394:	78fa      	ldrb	r2, [r7, #3]
 8010396:	4611      	mov	r1, r2
 8010398:	4618      	mov	r0, r3
 801039a:	f7f6 fec9 	bl	8007130 <HAL_PCD_EP_Close>
 801039e:	4603      	mov	r3, r0
 80103a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103a2:	7bfb      	ldrb	r3, [r7, #15]
 80103a4:	4618      	mov	r0, r3
 80103a6:	f000 f939 	bl	801061c <USBD_Get_USB_Status>
 80103aa:	4603      	mov	r3, r0
 80103ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3710      	adds	r7, #16
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b084      	sub	sp, #16
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	460b      	mov	r3, r1
 80103c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103c4:	2300      	movs	r3, #0
 80103c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103c8:	2300      	movs	r3, #0
 80103ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80103d2:	78fa      	ldrb	r2, [r7, #3]
 80103d4:	4611      	mov	r1, r2
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7f6 ff72 	bl	80072c0 <HAL_PCD_EP_SetStall>
 80103dc:	4603      	mov	r3, r0
 80103de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103e0:	7bfb      	ldrb	r3, [r7, #15]
 80103e2:	4618      	mov	r0, r3
 80103e4:	f000 f91a 	bl	801061c <USBD_Get_USB_Status>
 80103e8:	4603      	mov	r3, r0
 80103ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3710      	adds	r7, #16
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}

080103f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103f6:	b580      	push	{r7, lr}
 80103f8:	b084      	sub	sp, #16
 80103fa:	af00      	add	r7, sp, #0
 80103fc:	6078      	str	r0, [r7, #4]
 80103fe:	460b      	mov	r3, r1
 8010400:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010402:	2300      	movs	r3, #0
 8010404:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010406:	2300      	movs	r3, #0
 8010408:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010410:	78fa      	ldrb	r2, [r7, #3]
 8010412:	4611      	mov	r1, r2
 8010414:	4618      	mov	r0, r3
 8010416:	f7f6 ffa5 	bl	8007364 <HAL_PCD_EP_ClrStall>
 801041a:	4603      	mov	r3, r0
 801041c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801041e:	7bfb      	ldrb	r3, [r7, #15]
 8010420:	4618      	mov	r0, r3
 8010422:	f000 f8fb 	bl	801061c <USBD_Get_USB_Status>
 8010426:	4603      	mov	r3, r0
 8010428:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801042a:	7bbb      	ldrb	r3, [r7, #14]
}
 801042c:	4618      	mov	r0, r3
 801042e:	3710      	adds	r7, #16
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}

08010434 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010434:	b480      	push	{r7}
 8010436:	b085      	sub	sp, #20
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	460b      	mov	r3, r1
 801043e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010446:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801044c:	2b00      	cmp	r3, #0
 801044e:	da0b      	bge.n	8010468 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010450:	78fb      	ldrb	r3, [r7, #3]
 8010452:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010456:	68f9      	ldr	r1, [r7, #12]
 8010458:	4613      	mov	r3, r2
 801045a:	009b      	lsls	r3, r3, #2
 801045c:	4413      	add	r3, r2
 801045e:	00db      	lsls	r3, r3, #3
 8010460:	440b      	add	r3, r1
 8010462:	3312      	adds	r3, #18
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	e00b      	b.n	8010480 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010468:	78fb      	ldrb	r3, [r7, #3]
 801046a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801046e:	68f9      	ldr	r1, [r7, #12]
 8010470:	4613      	mov	r3, r2
 8010472:	009b      	lsls	r3, r3, #2
 8010474:	4413      	add	r3, r2
 8010476:	00db      	lsls	r3, r3, #3
 8010478:	440b      	add	r3, r1
 801047a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 801047e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010480:	4618      	mov	r0, r3
 8010482:	3714      	adds	r7, #20
 8010484:	46bd      	mov	sp, r7
 8010486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048a:	4770      	bx	lr

0801048c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b084      	sub	sp, #16
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	460b      	mov	r3, r1
 8010496:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010498:	2300      	movs	r3, #0
 801049a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801049c:	2300      	movs	r3, #0
 801049e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80104a6:	78fa      	ldrb	r2, [r7, #3]
 80104a8:	4611      	mov	r1, r2
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7f6 fdbd 	bl	800702a <HAL_PCD_SetAddress>
 80104b0:	4603      	mov	r3, r0
 80104b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104b4:	7bfb      	ldrb	r3, [r7, #15]
 80104b6:	4618      	mov	r0, r3
 80104b8:	f000 f8b0 	bl	801061c <USBD_Get_USB_Status>
 80104bc:	4603      	mov	r3, r0
 80104be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80104c2:	4618      	mov	r0, r3
 80104c4:	3710      	adds	r7, #16
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}

080104ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80104ca:	b580      	push	{r7, lr}
 80104cc:	b086      	sub	sp, #24
 80104ce:	af00      	add	r7, sp, #0
 80104d0:	60f8      	str	r0, [r7, #12]
 80104d2:	607a      	str	r2, [r7, #4]
 80104d4:	603b      	str	r3, [r7, #0]
 80104d6:	460b      	mov	r3, r1
 80104d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104da:	2300      	movs	r3, #0
 80104dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104de:	2300      	movs	r3, #0
 80104e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80104e8:	7af9      	ldrb	r1, [r7, #11]
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	687a      	ldr	r2, [r7, #4]
 80104ee:	f7f6 feb0 	bl	8007252 <HAL_PCD_EP_Transmit>
 80104f2:	4603      	mov	r3, r0
 80104f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104f6:	7dfb      	ldrb	r3, [r7, #23]
 80104f8:	4618      	mov	r0, r3
 80104fa:	f000 f88f 	bl	801061c <USBD_Get_USB_Status>
 80104fe:	4603      	mov	r3, r0
 8010500:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010502:	7dbb      	ldrb	r3, [r7, #22]
}
 8010504:	4618      	mov	r0, r3
 8010506:	3718      	adds	r7, #24
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}

0801050c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b086      	sub	sp, #24
 8010510:	af00      	add	r7, sp, #0
 8010512:	60f8      	str	r0, [r7, #12]
 8010514:	607a      	str	r2, [r7, #4]
 8010516:	603b      	str	r3, [r7, #0]
 8010518:	460b      	mov	r3, r1
 801051a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801051c:	2300      	movs	r3, #0
 801051e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010520:	2300      	movs	r3, #0
 8010522:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801052a:	7af9      	ldrb	r1, [r7, #11]
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	687a      	ldr	r2, [r7, #4]
 8010530:	f7f6 fe46 	bl	80071c0 <HAL_PCD_EP_Receive>
 8010534:	4603      	mov	r3, r0
 8010536:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010538:	7dfb      	ldrb	r3, [r7, #23]
 801053a:	4618      	mov	r0, r3
 801053c:	f000 f86e 	bl	801061c <USBD_Get_USB_Status>
 8010540:	4603      	mov	r3, r0
 8010542:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010544:	7dbb      	ldrb	r3, [r7, #22]
}
 8010546:	4618      	mov	r0, r3
 8010548:	3718      	adds	r7, #24
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}

0801054e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801054e:	b580      	push	{r7, lr}
 8010550:	b082      	sub	sp, #8
 8010552:	af00      	add	r7, sp, #0
 8010554:	6078      	str	r0, [r7, #4]
 8010556:	460b      	mov	r3, r1
 8010558:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010560:	78fa      	ldrb	r2, [r7, #3]
 8010562:	4611      	mov	r1, r2
 8010564:	4618      	mov	r0, r3
 8010566:	f7f6 fe5c 	bl	8007222 <HAL_PCD_EP_GetRxCount>
 801056a:	4603      	mov	r3, r0
}
 801056c:	4618      	mov	r0, r3
 801056e:	3708      	adds	r7, #8
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}

08010574 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b082      	sub	sp, #8
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
 801057c:	460b      	mov	r3, r1
 801057e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010580:	78fb      	ldrb	r3, [r7, #3]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d002      	beq.n	801058c <HAL_PCDEx_LPM_Callback+0x18>
 8010586:	2b01      	cmp	r3, #1
 8010588:	d013      	beq.n	80105b2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801058a:	e023      	b.n	80105d4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	7a5b      	ldrb	r3, [r3, #9]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d007      	beq.n	80105a4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010594:	f000 f83c 	bl	8010610 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010598:	4b10      	ldr	r3, [pc, #64]	@ (80105dc <HAL_PCDEx_LPM_Callback+0x68>)
 801059a:	691b      	ldr	r3, [r3, #16]
 801059c:	4a0f      	ldr	r2, [pc, #60]	@ (80105dc <HAL_PCDEx_LPM_Callback+0x68>)
 801059e:	f023 0306 	bic.w	r3, r3, #6
 80105a2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7fe fc86 	bl	800eebc <USBD_LL_Resume>
    break;
 80105b0:	e010      	b.n	80105d4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80105b8:	4618      	mov	r0, r3
 80105ba:	f7fe fc69 	bl	800ee90 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	7a5b      	ldrb	r3, [r3, #9]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d005      	beq.n	80105d2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80105c6:	4b05      	ldr	r3, [pc, #20]	@ (80105dc <HAL_PCDEx_LPM_Callback+0x68>)
 80105c8:	691b      	ldr	r3, [r3, #16]
 80105ca:	4a04      	ldr	r2, [pc, #16]	@ (80105dc <HAL_PCDEx_LPM_Callback+0x68>)
 80105cc:	f043 0306 	orr.w	r3, r3, #6
 80105d0:	6113      	str	r3, [r2, #16]
    break;
 80105d2:	bf00      	nop
}
 80105d4:	bf00      	nop
 80105d6:	3708      	adds	r7, #8
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}
 80105dc:	e000ed00 	.word	0xe000ed00

080105e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80105e0:	b480      	push	{r7}
 80105e2:	b083      	sub	sp, #12
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80105e8:	4b03      	ldr	r3, [pc, #12]	@ (80105f8 <USBD_static_malloc+0x18>)
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	370c      	adds	r7, #12
 80105ee:	46bd      	mov	sp, r7
 80105f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f4:	4770      	bx	lr
 80105f6:	bf00      	nop
 80105f8:	2000230c 	.word	0x2000230c

080105fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80105fc:	b480      	push	{r7}
 80105fe:	b083      	sub	sp, #12
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]

}
 8010604:	bf00      	nop
 8010606:	370c      	adds	r7, #12
 8010608:	46bd      	mov	sp, r7
 801060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060e:	4770      	bx	lr

08010610 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010614:	f7f0 fe90 	bl	8001338 <SystemClock_Config>
}
 8010618:	bf00      	nop
 801061a:	bd80      	pop	{r7, pc}

0801061c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801061c:	b480      	push	{r7}
 801061e:	b085      	sub	sp, #20
 8010620:	af00      	add	r7, sp, #0
 8010622:	4603      	mov	r3, r0
 8010624:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010626:	2300      	movs	r3, #0
 8010628:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801062a:	79fb      	ldrb	r3, [r7, #7]
 801062c:	2b03      	cmp	r3, #3
 801062e:	d817      	bhi.n	8010660 <USBD_Get_USB_Status+0x44>
 8010630:	a201      	add	r2, pc, #4	@ (adr r2, 8010638 <USBD_Get_USB_Status+0x1c>)
 8010632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010636:	bf00      	nop
 8010638:	08010649 	.word	0x08010649
 801063c:	0801064f 	.word	0x0801064f
 8010640:	08010655 	.word	0x08010655
 8010644:	0801065b 	.word	0x0801065b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010648:	2300      	movs	r3, #0
 801064a:	73fb      	strb	r3, [r7, #15]
    break;
 801064c:	e00b      	b.n	8010666 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801064e:	2303      	movs	r3, #3
 8010650:	73fb      	strb	r3, [r7, #15]
    break;
 8010652:	e008      	b.n	8010666 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010654:	2301      	movs	r3, #1
 8010656:	73fb      	strb	r3, [r7, #15]
    break;
 8010658:	e005      	b.n	8010666 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801065a:	2303      	movs	r3, #3
 801065c:	73fb      	strb	r3, [r7, #15]
    break;
 801065e:	e002      	b.n	8010666 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010660:	2303      	movs	r3, #3
 8010662:	73fb      	strb	r3, [r7, #15]
    break;
 8010664:	bf00      	nop
  }
  return usb_status;
 8010666:	7bfb      	ldrb	r3, [r7, #15]
}
 8010668:	4618      	mov	r0, r3
 801066a:	3714      	adds	r7, #20
 801066c:	46bd      	mov	sp, r7
 801066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010672:	4770      	bx	lr

08010674 <__cvt>:
 8010674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010678:	ec57 6b10 	vmov	r6, r7, d0
 801067c:	2f00      	cmp	r7, #0
 801067e:	460c      	mov	r4, r1
 8010680:	4619      	mov	r1, r3
 8010682:	463b      	mov	r3, r7
 8010684:	bfbb      	ittet	lt
 8010686:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801068a:	461f      	movlt	r7, r3
 801068c:	2300      	movge	r3, #0
 801068e:	232d      	movlt	r3, #45	@ 0x2d
 8010690:	700b      	strb	r3, [r1, #0]
 8010692:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010694:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010698:	4691      	mov	r9, r2
 801069a:	f023 0820 	bic.w	r8, r3, #32
 801069e:	bfbc      	itt	lt
 80106a0:	4632      	movlt	r2, r6
 80106a2:	4616      	movlt	r6, r2
 80106a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80106a8:	d005      	beq.n	80106b6 <__cvt+0x42>
 80106aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80106ae:	d100      	bne.n	80106b2 <__cvt+0x3e>
 80106b0:	3401      	adds	r4, #1
 80106b2:	2102      	movs	r1, #2
 80106b4:	e000      	b.n	80106b8 <__cvt+0x44>
 80106b6:	2103      	movs	r1, #3
 80106b8:	ab03      	add	r3, sp, #12
 80106ba:	9301      	str	r3, [sp, #4]
 80106bc:	ab02      	add	r3, sp, #8
 80106be:	9300      	str	r3, [sp, #0]
 80106c0:	ec47 6b10 	vmov	d0, r6, r7
 80106c4:	4653      	mov	r3, sl
 80106c6:	4622      	mov	r2, r4
 80106c8:	f001 f8c2 	bl	8011850 <_dtoa_r>
 80106cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80106d0:	4605      	mov	r5, r0
 80106d2:	d119      	bne.n	8010708 <__cvt+0x94>
 80106d4:	f019 0f01 	tst.w	r9, #1
 80106d8:	d00e      	beq.n	80106f8 <__cvt+0x84>
 80106da:	eb00 0904 	add.w	r9, r0, r4
 80106de:	2200      	movs	r2, #0
 80106e0:	2300      	movs	r3, #0
 80106e2:	4630      	mov	r0, r6
 80106e4:	4639      	mov	r1, r7
 80106e6:	f7f0 fa17 	bl	8000b18 <__aeabi_dcmpeq>
 80106ea:	b108      	cbz	r0, 80106f0 <__cvt+0x7c>
 80106ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80106f0:	2230      	movs	r2, #48	@ 0x30
 80106f2:	9b03      	ldr	r3, [sp, #12]
 80106f4:	454b      	cmp	r3, r9
 80106f6:	d31e      	bcc.n	8010736 <__cvt+0xc2>
 80106f8:	9b03      	ldr	r3, [sp, #12]
 80106fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80106fc:	1b5b      	subs	r3, r3, r5
 80106fe:	4628      	mov	r0, r5
 8010700:	6013      	str	r3, [r2, #0]
 8010702:	b004      	add	sp, #16
 8010704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010708:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801070c:	eb00 0904 	add.w	r9, r0, r4
 8010710:	d1e5      	bne.n	80106de <__cvt+0x6a>
 8010712:	7803      	ldrb	r3, [r0, #0]
 8010714:	2b30      	cmp	r3, #48	@ 0x30
 8010716:	d10a      	bne.n	801072e <__cvt+0xba>
 8010718:	2200      	movs	r2, #0
 801071a:	2300      	movs	r3, #0
 801071c:	4630      	mov	r0, r6
 801071e:	4639      	mov	r1, r7
 8010720:	f7f0 f9fa 	bl	8000b18 <__aeabi_dcmpeq>
 8010724:	b918      	cbnz	r0, 801072e <__cvt+0xba>
 8010726:	f1c4 0401 	rsb	r4, r4, #1
 801072a:	f8ca 4000 	str.w	r4, [sl]
 801072e:	f8da 3000 	ldr.w	r3, [sl]
 8010732:	4499      	add	r9, r3
 8010734:	e7d3      	b.n	80106de <__cvt+0x6a>
 8010736:	1c59      	adds	r1, r3, #1
 8010738:	9103      	str	r1, [sp, #12]
 801073a:	701a      	strb	r2, [r3, #0]
 801073c:	e7d9      	b.n	80106f2 <__cvt+0x7e>

0801073e <__exponent>:
 801073e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010740:	2900      	cmp	r1, #0
 8010742:	bfba      	itte	lt
 8010744:	4249      	neglt	r1, r1
 8010746:	232d      	movlt	r3, #45	@ 0x2d
 8010748:	232b      	movge	r3, #43	@ 0x2b
 801074a:	2909      	cmp	r1, #9
 801074c:	7002      	strb	r2, [r0, #0]
 801074e:	7043      	strb	r3, [r0, #1]
 8010750:	dd29      	ble.n	80107a6 <__exponent+0x68>
 8010752:	f10d 0307 	add.w	r3, sp, #7
 8010756:	461d      	mov	r5, r3
 8010758:	270a      	movs	r7, #10
 801075a:	461a      	mov	r2, r3
 801075c:	fbb1 f6f7 	udiv	r6, r1, r7
 8010760:	fb07 1416 	mls	r4, r7, r6, r1
 8010764:	3430      	adds	r4, #48	@ 0x30
 8010766:	f802 4c01 	strb.w	r4, [r2, #-1]
 801076a:	460c      	mov	r4, r1
 801076c:	2c63      	cmp	r4, #99	@ 0x63
 801076e:	f103 33ff 	add.w	r3, r3, #4294967295
 8010772:	4631      	mov	r1, r6
 8010774:	dcf1      	bgt.n	801075a <__exponent+0x1c>
 8010776:	3130      	adds	r1, #48	@ 0x30
 8010778:	1e94      	subs	r4, r2, #2
 801077a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801077e:	1c41      	adds	r1, r0, #1
 8010780:	4623      	mov	r3, r4
 8010782:	42ab      	cmp	r3, r5
 8010784:	d30a      	bcc.n	801079c <__exponent+0x5e>
 8010786:	f10d 0309 	add.w	r3, sp, #9
 801078a:	1a9b      	subs	r3, r3, r2
 801078c:	42ac      	cmp	r4, r5
 801078e:	bf88      	it	hi
 8010790:	2300      	movhi	r3, #0
 8010792:	3302      	adds	r3, #2
 8010794:	4403      	add	r3, r0
 8010796:	1a18      	subs	r0, r3, r0
 8010798:	b003      	add	sp, #12
 801079a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801079c:	f813 6b01 	ldrb.w	r6, [r3], #1
 80107a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80107a4:	e7ed      	b.n	8010782 <__exponent+0x44>
 80107a6:	2330      	movs	r3, #48	@ 0x30
 80107a8:	3130      	adds	r1, #48	@ 0x30
 80107aa:	7083      	strb	r3, [r0, #2]
 80107ac:	70c1      	strb	r1, [r0, #3]
 80107ae:	1d03      	adds	r3, r0, #4
 80107b0:	e7f1      	b.n	8010796 <__exponent+0x58>
	...

080107b4 <_printf_float>:
 80107b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107b8:	b08d      	sub	sp, #52	@ 0x34
 80107ba:	460c      	mov	r4, r1
 80107bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80107c0:	4616      	mov	r6, r2
 80107c2:	461f      	mov	r7, r3
 80107c4:	4605      	mov	r5, r0
 80107c6:	f000 ff2d 	bl	8011624 <_localeconv_r>
 80107ca:	6803      	ldr	r3, [r0, #0]
 80107cc:	9304      	str	r3, [sp, #16]
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7ef fd76 	bl	80002c0 <strlen>
 80107d4:	2300      	movs	r3, #0
 80107d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80107d8:	f8d8 3000 	ldr.w	r3, [r8]
 80107dc:	9005      	str	r0, [sp, #20]
 80107de:	3307      	adds	r3, #7
 80107e0:	f023 0307 	bic.w	r3, r3, #7
 80107e4:	f103 0208 	add.w	r2, r3, #8
 80107e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80107ec:	f8d4 b000 	ldr.w	fp, [r4]
 80107f0:	f8c8 2000 	str.w	r2, [r8]
 80107f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80107f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80107fc:	9307      	str	r3, [sp, #28]
 80107fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8010802:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801080a:	4b9c      	ldr	r3, [pc, #624]	@ (8010a7c <_printf_float+0x2c8>)
 801080c:	f04f 32ff 	mov.w	r2, #4294967295
 8010810:	f7f0 f9b4 	bl	8000b7c <__aeabi_dcmpun>
 8010814:	bb70      	cbnz	r0, 8010874 <_printf_float+0xc0>
 8010816:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801081a:	4b98      	ldr	r3, [pc, #608]	@ (8010a7c <_printf_float+0x2c8>)
 801081c:	f04f 32ff 	mov.w	r2, #4294967295
 8010820:	f7f0 f98e 	bl	8000b40 <__aeabi_dcmple>
 8010824:	bb30      	cbnz	r0, 8010874 <_printf_float+0xc0>
 8010826:	2200      	movs	r2, #0
 8010828:	2300      	movs	r3, #0
 801082a:	4640      	mov	r0, r8
 801082c:	4649      	mov	r1, r9
 801082e:	f7f0 f97d 	bl	8000b2c <__aeabi_dcmplt>
 8010832:	b110      	cbz	r0, 801083a <_printf_float+0x86>
 8010834:	232d      	movs	r3, #45	@ 0x2d
 8010836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801083a:	4a91      	ldr	r2, [pc, #580]	@ (8010a80 <_printf_float+0x2cc>)
 801083c:	4b91      	ldr	r3, [pc, #580]	@ (8010a84 <_printf_float+0x2d0>)
 801083e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010842:	bf94      	ite	ls
 8010844:	4690      	movls	r8, r2
 8010846:	4698      	movhi	r8, r3
 8010848:	2303      	movs	r3, #3
 801084a:	6123      	str	r3, [r4, #16]
 801084c:	f02b 0304 	bic.w	r3, fp, #4
 8010850:	6023      	str	r3, [r4, #0]
 8010852:	f04f 0900 	mov.w	r9, #0
 8010856:	9700      	str	r7, [sp, #0]
 8010858:	4633      	mov	r3, r6
 801085a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801085c:	4621      	mov	r1, r4
 801085e:	4628      	mov	r0, r5
 8010860:	f000 f9d2 	bl	8010c08 <_printf_common>
 8010864:	3001      	adds	r0, #1
 8010866:	f040 808d 	bne.w	8010984 <_printf_float+0x1d0>
 801086a:	f04f 30ff 	mov.w	r0, #4294967295
 801086e:	b00d      	add	sp, #52	@ 0x34
 8010870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010874:	4642      	mov	r2, r8
 8010876:	464b      	mov	r3, r9
 8010878:	4640      	mov	r0, r8
 801087a:	4649      	mov	r1, r9
 801087c:	f7f0 f97e 	bl	8000b7c <__aeabi_dcmpun>
 8010880:	b140      	cbz	r0, 8010894 <_printf_float+0xe0>
 8010882:	464b      	mov	r3, r9
 8010884:	2b00      	cmp	r3, #0
 8010886:	bfbc      	itt	lt
 8010888:	232d      	movlt	r3, #45	@ 0x2d
 801088a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801088e:	4a7e      	ldr	r2, [pc, #504]	@ (8010a88 <_printf_float+0x2d4>)
 8010890:	4b7e      	ldr	r3, [pc, #504]	@ (8010a8c <_printf_float+0x2d8>)
 8010892:	e7d4      	b.n	801083e <_printf_float+0x8a>
 8010894:	6863      	ldr	r3, [r4, #4]
 8010896:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801089a:	9206      	str	r2, [sp, #24]
 801089c:	1c5a      	adds	r2, r3, #1
 801089e:	d13b      	bne.n	8010918 <_printf_float+0x164>
 80108a0:	2306      	movs	r3, #6
 80108a2:	6063      	str	r3, [r4, #4]
 80108a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80108a8:	2300      	movs	r3, #0
 80108aa:	6022      	str	r2, [r4, #0]
 80108ac:	9303      	str	r3, [sp, #12]
 80108ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80108b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80108b4:	ab09      	add	r3, sp, #36	@ 0x24
 80108b6:	9300      	str	r3, [sp, #0]
 80108b8:	6861      	ldr	r1, [r4, #4]
 80108ba:	ec49 8b10 	vmov	d0, r8, r9
 80108be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80108c2:	4628      	mov	r0, r5
 80108c4:	f7ff fed6 	bl	8010674 <__cvt>
 80108c8:	9b06      	ldr	r3, [sp, #24]
 80108ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80108cc:	2b47      	cmp	r3, #71	@ 0x47
 80108ce:	4680      	mov	r8, r0
 80108d0:	d129      	bne.n	8010926 <_printf_float+0x172>
 80108d2:	1cc8      	adds	r0, r1, #3
 80108d4:	db02      	blt.n	80108dc <_printf_float+0x128>
 80108d6:	6863      	ldr	r3, [r4, #4]
 80108d8:	4299      	cmp	r1, r3
 80108da:	dd41      	ble.n	8010960 <_printf_float+0x1ac>
 80108dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80108e0:	fa5f fa8a 	uxtb.w	sl, sl
 80108e4:	3901      	subs	r1, #1
 80108e6:	4652      	mov	r2, sl
 80108e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80108ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80108ee:	f7ff ff26 	bl	801073e <__exponent>
 80108f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80108f4:	1813      	adds	r3, r2, r0
 80108f6:	2a01      	cmp	r2, #1
 80108f8:	4681      	mov	r9, r0
 80108fa:	6123      	str	r3, [r4, #16]
 80108fc:	dc02      	bgt.n	8010904 <_printf_float+0x150>
 80108fe:	6822      	ldr	r2, [r4, #0]
 8010900:	07d2      	lsls	r2, r2, #31
 8010902:	d501      	bpl.n	8010908 <_printf_float+0x154>
 8010904:	3301      	adds	r3, #1
 8010906:	6123      	str	r3, [r4, #16]
 8010908:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801090c:	2b00      	cmp	r3, #0
 801090e:	d0a2      	beq.n	8010856 <_printf_float+0xa2>
 8010910:	232d      	movs	r3, #45	@ 0x2d
 8010912:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010916:	e79e      	b.n	8010856 <_printf_float+0xa2>
 8010918:	9a06      	ldr	r2, [sp, #24]
 801091a:	2a47      	cmp	r2, #71	@ 0x47
 801091c:	d1c2      	bne.n	80108a4 <_printf_float+0xf0>
 801091e:	2b00      	cmp	r3, #0
 8010920:	d1c0      	bne.n	80108a4 <_printf_float+0xf0>
 8010922:	2301      	movs	r3, #1
 8010924:	e7bd      	b.n	80108a2 <_printf_float+0xee>
 8010926:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801092a:	d9db      	bls.n	80108e4 <_printf_float+0x130>
 801092c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010930:	d118      	bne.n	8010964 <_printf_float+0x1b0>
 8010932:	2900      	cmp	r1, #0
 8010934:	6863      	ldr	r3, [r4, #4]
 8010936:	dd0b      	ble.n	8010950 <_printf_float+0x19c>
 8010938:	6121      	str	r1, [r4, #16]
 801093a:	b913      	cbnz	r3, 8010942 <_printf_float+0x18e>
 801093c:	6822      	ldr	r2, [r4, #0]
 801093e:	07d0      	lsls	r0, r2, #31
 8010940:	d502      	bpl.n	8010948 <_printf_float+0x194>
 8010942:	3301      	adds	r3, #1
 8010944:	440b      	add	r3, r1
 8010946:	6123      	str	r3, [r4, #16]
 8010948:	65a1      	str	r1, [r4, #88]	@ 0x58
 801094a:	f04f 0900 	mov.w	r9, #0
 801094e:	e7db      	b.n	8010908 <_printf_float+0x154>
 8010950:	b913      	cbnz	r3, 8010958 <_printf_float+0x1a4>
 8010952:	6822      	ldr	r2, [r4, #0]
 8010954:	07d2      	lsls	r2, r2, #31
 8010956:	d501      	bpl.n	801095c <_printf_float+0x1a8>
 8010958:	3302      	adds	r3, #2
 801095a:	e7f4      	b.n	8010946 <_printf_float+0x192>
 801095c:	2301      	movs	r3, #1
 801095e:	e7f2      	b.n	8010946 <_printf_float+0x192>
 8010960:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010966:	4299      	cmp	r1, r3
 8010968:	db05      	blt.n	8010976 <_printf_float+0x1c2>
 801096a:	6823      	ldr	r3, [r4, #0]
 801096c:	6121      	str	r1, [r4, #16]
 801096e:	07d8      	lsls	r0, r3, #31
 8010970:	d5ea      	bpl.n	8010948 <_printf_float+0x194>
 8010972:	1c4b      	adds	r3, r1, #1
 8010974:	e7e7      	b.n	8010946 <_printf_float+0x192>
 8010976:	2900      	cmp	r1, #0
 8010978:	bfd4      	ite	le
 801097a:	f1c1 0202 	rsble	r2, r1, #2
 801097e:	2201      	movgt	r2, #1
 8010980:	4413      	add	r3, r2
 8010982:	e7e0      	b.n	8010946 <_printf_float+0x192>
 8010984:	6823      	ldr	r3, [r4, #0]
 8010986:	055a      	lsls	r2, r3, #21
 8010988:	d407      	bmi.n	801099a <_printf_float+0x1e6>
 801098a:	6923      	ldr	r3, [r4, #16]
 801098c:	4642      	mov	r2, r8
 801098e:	4631      	mov	r1, r6
 8010990:	4628      	mov	r0, r5
 8010992:	47b8      	blx	r7
 8010994:	3001      	adds	r0, #1
 8010996:	d12b      	bne.n	80109f0 <_printf_float+0x23c>
 8010998:	e767      	b.n	801086a <_printf_float+0xb6>
 801099a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801099e:	f240 80dd 	bls.w	8010b5c <_printf_float+0x3a8>
 80109a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80109a6:	2200      	movs	r2, #0
 80109a8:	2300      	movs	r3, #0
 80109aa:	f7f0 f8b5 	bl	8000b18 <__aeabi_dcmpeq>
 80109ae:	2800      	cmp	r0, #0
 80109b0:	d033      	beq.n	8010a1a <_printf_float+0x266>
 80109b2:	4a37      	ldr	r2, [pc, #220]	@ (8010a90 <_printf_float+0x2dc>)
 80109b4:	2301      	movs	r3, #1
 80109b6:	4631      	mov	r1, r6
 80109b8:	4628      	mov	r0, r5
 80109ba:	47b8      	blx	r7
 80109bc:	3001      	adds	r0, #1
 80109be:	f43f af54 	beq.w	801086a <_printf_float+0xb6>
 80109c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80109c6:	4543      	cmp	r3, r8
 80109c8:	db02      	blt.n	80109d0 <_printf_float+0x21c>
 80109ca:	6823      	ldr	r3, [r4, #0]
 80109cc:	07d8      	lsls	r0, r3, #31
 80109ce:	d50f      	bpl.n	80109f0 <_printf_float+0x23c>
 80109d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80109d4:	4631      	mov	r1, r6
 80109d6:	4628      	mov	r0, r5
 80109d8:	47b8      	blx	r7
 80109da:	3001      	adds	r0, #1
 80109dc:	f43f af45 	beq.w	801086a <_printf_float+0xb6>
 80109e0:	f04f 0900 	mov.w	r9, #0
 80109e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80109e8:	f104 0a1a 	add.w	sl, r4, #26
 80109ec:	45c8      	cmp	r8, r9
 80109ee:	dc09      	bgt.n	8010a04 <_printf_float+0x250>
 80109f0:	6823      	ldr	r3, [r4, #0]
 80109f2:	079b      	lsls	r3, r3, #30
 80109f4:	f100 8103 	bmi.w	8010bfe <_printf_float+0x44a>
 80109f8:	68e0      	ldr	r0, [r4, #12]
 80109fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80109fc:	4298      	cmp	r0, r3
 80109fe:	bfb8      	it	lt
 8010a00:	4618      	movlt	r0, r3
 8010a02:	e734      	b.n	801086e <_printf_float+0xba>
 8010a04:	2301      	movs	r3, #1
 8010a06:	4652      	mov	r2, sl
 8010a08:	4631      	mov	r1, r6
 8010a0a:	4628      	mov	r0, r5
 8010a0c:	47b8      	blx	r7
 8010a0e:	3001      	adds	r0, #1
 8010a10:	f43f af2b 	beq.w	801086a <_printf_float+0xb6>
 8010a14:	f109 0901 	add.w	r9, r9, #1
 8010a18:	e7e8      	b.n	80109ec <_printf_float+0x238>
 8010a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	dc39      	bgt.n	8010a94 <_printf_float+0x2e0>
 8010a20:	4a1b      	ldr	r2, [pc, #108]	@ (8010a90 <_printf_float+0x2dc>)
 8010a22:	2301      	movs	r3, #1
 8010a24:	4631      	mov	r1, r6
 8010a26:	4628      	mov	r0, r5
 8010a28:	47b8      	blx	r7
 8010a2a:	3001      	adds	r0, #1
 8010a2c:	f43f af1d 	beq.w	801086a <_printf_float+0xb6>
 8010a30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010a34:	ea59 0303 	orrs.w	r3, r9, r3
 8010a38:	d102      	bne.n	8010a40 <_printf_float+0x28c>
 8010a3a:	6823      	ldr	r3, [r4, #0]
 8010a3c:	07d9      	lsls	r1, r3, #31
 8010a3e:	d5d7      	bpl.n	80109f0 <_printf_float+0x23c>
 8010a40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a44:	4631      	mov	r1, r6
 8010a46:	4628      	mov	r0, r5
 8010a48:	47b8      	blx	r7
 8010a4a:	3001      	adds	r0, #1
 8010a4c:	f43f af0d 	beq.w	801086a <_printf_float+0xb6>
 8010a50:	f04f 0a00 	mov.w	sl, #0
 8010a54:	f104 0b1a 	add.w	fp, r4, #26
 8010a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a5a:	425b      	negs	r3, r3
 8010a5c:	4553      	cmp	r3, sl
 8010a5e:	dc01      	bgt.n	8010a64 <_printf_float+0x2b0>
 8010a60:	464b      	mov	r3, r9
 8010a62:	e793      	b.n	801098c <_printf_float+0x1d8>
 8010a64:	2301      	movs	r3, #1
 8010a66:	465a      	mov	r2, fp
 8010a68:	4631      	mov	r1, r6
 8010a6a:	4628      	mov	r0, r5
 8010a6c:	47b8      	blx	r7
 8010a6e:	3001      	adds	r0, #1
 8010a70:	f43f aefb 	beq.w	801086a <_printf_float+0xb6>
 8010a74:	f10a 0a01 	add.w	sl, sl, #1
 8010a78:	e7ee      	b.n	8010a58 <_printf_float+0x2a4>
 8010a7a:	bf00      	nop
 8010a7c:	7fefffff 	.word	0x7fefffff
 8010a80:	08016da0 	.word	0x08016da0
 8010a84:	08016da4 	.word	0x08016da4
 8010a88:	08016da8 	.word	0x08016da8
 8010a8c:	08016dac 	.word	0x08016dac
 8010a90:	08017140 	.word	0x08017140
 8010a94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010a96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010a9a:	4553      	cmp	r3, sl
 8010a9c:	bfa8      	it	ge
 8010a9e:	4653      	movge	r3, sl
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	4699      	mov	r9, r3
 8010aa4:	dc36      	bgt.n	8010b14 <_printf_float+0x360>
 8010aa6:	f04f 0b00 	mov.w	fp, #0
 8010aaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010aae:	f104 021a 	add.w	r2, r4, #26
 8010ab2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010ab4:	9306      	str	r3, [sp, #24]
 8010ab6:	eba3 0309 	sub.w	r3, r3, r9
 8010aba:	455b      	cmp	r3, fp
 8010abc:	dc31      	bgt.n	8010b22 <_printf_float+0x36e>
 8010abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ac0:	459a      	cmp	sl, r3
 8010ac2:	dc3a      	bgt.n	8010b3a <_printf_float+0x386>
 8010ac4:	6823      	ldr	r3, [r4, #0]
 8010ac6:	07da      	lsls	r2, r3, #31
 8010ac8:	d437      	bmi.n	8010b3a <_printf_float+0x386>
 8010aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010acc:	ebaa 0903 	sub.w	r9, sl, r3
 8010ad0:	9b06      	ldr	r3, [sp, #24]
 8010ad2:	ebaa 0303 	sub.w	r3, sl, r3
 8010ad6:	4599      	cmp	r9, r3
 8010ad8:	bfa8      	it	ge
 8010ada:	4699      	movge	r9, r3
 8010adc:	f1b9 0f00 	cmp.w	r9, #0
 8010ae0:	dc33      	bgt.n	8010b4a <_printf_float+0x396>
 8010ae2:	f04f 0800 	mov.w	r8, #0
 8010ae6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010aea:	f104 0b1a 	add.w	fp, r4, #26
 8010aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010af0:	ebaa 0303 	sub.w	r3, sl, r3
 8010af4:	eba3 0309 	sub.w	r3, r3, r9
 8010af8:	4543      	cmp	r3, r8
 8010afa:	f77f af79 	ble.w	80109f0 <_printf_float+0x23c>
 8010afe:	2301      	movs	r3, #1
 8010b00:	465a      	mov	r2, fp
 8010b02:	4631      	mov	r1, r6
 8010b04:	4628      	mov	r0, r5
 8010b06:	47b8      	blx	r7
 8010b08:	3001      	adds	r0, #1
 8010b0a:	f43f aeae 	beq.w	801086a <_printf_float+0xb6>
 8010b0e:	f108 0801 	add.w	r8, r8, #1
 8010b12:	e7ec      	b.n	8010aee <_printf_float+0x33a>
 8010b14:	4642      	mov	r2, r8
 8010b16:	4631      	mov	r1, r6
 8010b18:	4628      	mov	r0, r5
 8010b1a:	47b8      	blx	r7
 8010b1c:	3001      	adds	r0, #1
 8010b1e:	d1c2      	bne.n	8010aa6 <_printf_float+0x2f2>
 8010b20:	e6a3      	b.n	801086a <_printf_float+0xb6>
 8010b22:	2301      	movs	r3, #1
 8010b24:	4631      	mov	r1, r6
 8010b26:	4628      	mov	r0, r5
 8010b28:	9206      	str	r2, [sp, #24]
 8010b2a:	47b8      	blx	r7
 8010b2c:	3001      	adds	r0, #1
 8010b2e:	f43f ae9c 	beq.w	801086a <_printf_float+0xb6>
 8010b32:	9a06      	ldr	r2, [sp, #24]
 8010b34:	f10b 0b01 	add.w	fp, fp, #1
 8010b38:	e7bb      	b.n	8010ab2 <_printf_float+0x2fe>
 8010b3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b3e:	4631      	mov	r1, r6
 8010b40:	4628      	mov	r0, r5
 8010b42:	47b8      	blx	r7
 8010b44:	3001      	adds	r0, #1
 8010b46:	d1c0      	bne.n	8010aca <_printf_float+0x316>
 8010b48:	e68f      	b.n	801086a <_printf_float+0xb6>
 8010b4a:	9a06      	ldr	r2, [sp, #24]
 8010b4c:	464b      	mov	r3, r9
 8010b4e:	4442      	add	r2, r8
 8010b50:	4631      	mov	r1, r6
 8010b52:	4628      	mov	r0, r5
 8010b54:	47b8      	blx	r7
 8010b56:	3001      	adds	r0, #1
 8010b58:	d1c3      	bne.n	8010ae2 <_printf_float+0x32e>
 8010b5a:	e686      	b.n	801086a <_printf_float+0xb6>
 8010b5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010b60:	f1ba 0f01 	cmp.w	sl, #1
 8010b64:	dc01      	bgt.n	8010b6a <_printf_float+0x3b6>
 8010b66:	07db      	lsls	r3, r3, #31
 8010b68:	d536      	bpl.n	8010bd8 <_printf_float+0x424>
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	4642      	mov	r2, r8
 8010b6e:	4631      	mov	r1, r6
 8010b70:	4628      	mov	r0, r5
 8010b72:	47b8      	blx	r7
 8010b74:	3001      	adds	r0, #1
 8010b76:	f43f ae78 	beq.w	801086a <_printf_float+0xb6>
 8010b7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b7e:	4631      	mov	r1, r6
 8010b80:	4628      	mov	r0, r5
 8010b82:	47b8      	blx	r7
 8010b84:	3001      	adds	r0, #1
 8010b86:	f43f ae70 	beq.w	801086a <_printf_float+0xb6>
 8010b8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010b8e:	2200      	movs	r2, #0
 8010b90:	2300      	movs	r3, #0
 8010b92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010b96:	f7ef ffbf 	bl	8000b18 <__aeabi_dcmpeq>
 8010b9a:	b9c0      	cbnz	r0, 8010bce <_printf_float+0x41a>
 8010b9c:	4653      	mov	r3, sl
 8010b9e:	f108 0201 	add.w	r2, r8, #1
 8010ba2:	4631      	mov	r1, r6
 8010ba4:	4628      	mov	r0, r5
 8010ba6:	47b8      	blx	r7
 8010ba8:	3001      	adds	r0, #1
 8010baa:	d10c      	bne.n	8010bc6 <_printf_float+0x412>
 8010bac:	e65d      	b.n	801086a <_printf_float+0xb6>
 8010bae:	2301      	movs	r3, #1
 8010bb0:	465a      	mov	r2, fp
 8010bb2:	4631      	mov	r1, r6
 8010bb4:	4628      	mov	r0, r5
 8010bb6:	47b8      	blx	r7
 8010bb8:	3001      	adds	r0, #1
 8010bba:	f43f ae56 	beq.w	801086a <_printf_float+0xb6>
 8010bbe:	f108 0801 	add.w	r8, r8, #1
 8010bc2:	45d0      	cmp	r8, sl
 8010bc4:	dbf3      	blt.n	8010bae <_printf_float+0x3fa>
 8010bc6:	464b      	mov	r3, r9
 8010bc8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010bcc:	e6df      	b.n	801098e <_printf_float+0x1da>
 8010bce:	f04f 0800 	mov.w	r8, #0
 8010bd2:	f104 0b1a 	add.w	fp, r4, #26
 8010bd6:	e7f4      	b.n	8010bc2 <_printf_float+0x40e>
 8010bd8:	2301      	movs	r3, #1
 8010bda:	4642      	mov	r2, r8
 8010bdc:	e7e1      	b.n	8010ba2 <_printf_float+0x3ee>
 8010bde:	2301      	movs	r3, #1
 8010be0:	464a      	mov	r2, r9
 8010be2:	4631      	mov	r1, r6
 8010be4:	4628      	mov	r0, r5
 8010be6:	47b8      	blx	r7
 8010be8:	3001      	adds	r0, #1
 8010bea:	f43f ae3e 	beq.w	801086a <_printf_float+0xb6>
 8010bee:	f108 0801 	add.w	r8, r8, #1
 8010bf2:	68e3      	ldr	r3, [r4, #12]
 8010bf4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010bf6:	1a5b      	subs	r3, r3, r1
 8010bf8:	4543      	cmp	r3, r8
 8010bfa:	dcf0      	bgt.n	8010bde <_printf_float+0x42a>
 8010bfc:	e6fc      	b.n	80109f8 <_printf_float+0x244>
 8010bfe:	f04f 0800 	mov.w	r8, #0
 8010c02:	f104 0919 	add.w	r9, r4, #25
 8010c06:	e7f4      	b.n	8010bf2 <_printf_float+0x43e>

08010c08 <_printf_common>:
 8010c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c0c:	4616      	mov	r6, r2
 8010c0e:	4698      	mov	r8, r3
 8010c10:	688a      	ldr	r2, [r1, #8]
 8010c12:	690b      	ldr	r3, [r1, #16]
 8010c14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	bfb8      	it	lt
 8010c1c:	4613      	movlt	r3, r2
 8010c1e:	6033      	str	r3, [r6, #0]
 8010c20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010c24:	4607      	mov	r7, r0
 8010c26:	460c      	mov	r4, r1
 8010c28:	b10a      	cbz	r2, 8010c2e <_printf_common+0x26>
 8010c2a:	3301      	adds	r3, #1
 8010c2c:	6033      	str	r3, [r6, #0]
 8010c2e:	6823      	ldr	r3, [r4, #0]
 8010c30:	0699      	lsls	r1, r3, #26
 8010c32:	bf42      	ittt	mi
 8010c34:	6833      	ldrmi	r3, [r6, #0]
 8010c36:	3302      	addmi	r3, #2
 8010c38:	6033      	strmi	r3, [r6, #0]
 8010c3a:	6825      	ldr	r5, [r4, #0]
 8010c3c:	f015 0506 	ands.w	r5, r5, #6
 8010c40:	d106      	bne.n	8010c50 <_printf_common+0x48>
 8010c42:	f104 0a19 	add.w	sl, r4, #25
 8010c46:	68e3      	ldr	r3, [r4, #12]
 8010c48:	6832      	ldr	r2, [r6, #0]
 8010c4a:	1a9b      	subs	r3, r3, r2
 8010c4c:	42ab      	cmp	r3, r5
 8010c4e:	dc26      	bgt.n	8010c9e <_printf_common+0x96>
 8010c50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010c54:	6822      	ldr	r2, [r4, #0]
 8010c56:	3b00      	subs	r3, #0
 8010c58:	bf18      	it	ne
 8010c5a:	2301      	movne	r3, #1
 8010c5c:	0692      	lsls	r2, r2, #26
 8010c5e:	d42b      	bmi.n	8010cb8 <_printf_common+0xb0>
 8010c60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010c64:	4641      	mov	r1, r8
 8010c66:	4638      	mov	r0, r7
 8010c68:	47c8      	blx	r9
 8010c6a:	3001      	adds	r0, #1
 8010c6c:	d01e      	beq.n	8010cac <_printf_common+0xa4>
 8010c6e:	6823      	ldr	r3, [r4, #0]
 8010c70:	6922      	ldr	r2, [r4, #16]
 8010c72:	f003 0306 	and.w	r3, r3, #6
 8010c76:	2b04      	cmp	r3, #4
 8010c78:	bf02      	ittt	eq
 8010c7a:	68e5      	ldreq	r5, [r4, #12]
 8010c7c:	6833      	ldreq	r3, [r6, #0]
 8010c7e:	1aed      	subeq	r5, r5, r3
 8010c80:	68a3      	ldr	r3, [r4, #8]
 8010c82:	bf0c      	ite	eq
 8010c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010c88:	2500      	movne	r5, #0
 8010c8a:	4293      	cmp	r3, r2
 8010c8c:	bfc4      	itt	gt
 8010c8e:	1a9b      	subgt	r3, r3, r2
 8010c90:	18ed      	addgt	r5, r5, r3
 8010c92:	2600      	movs	r6, #0
 8010c94:	341a      	adds	r4, #26
 8010c96:	42b5      	cmp	r5, r6
 8010c98:	d11a      	bne.n	8010cd0 <_printf_common+0xc8>
 8010c9a:	2000      	movs	r0, #0
 8010c9c:	e008      	b.n	8010cb0 <_printf_common+0xa8>
 8010c9e:	2301      	movs	r3, #1
 8010ca0:	4652      	mov	r2, sl
 8010ca2:	4641      	mov	r1, r8
 8010ca4:	4638      	mov	r0, r7
 8010ca6:	47c8      	blx	r9
 8010ca8:	3001      	adds	r0, #1
 8010caa:	d103      	bne.n	8010cb4 <_printf_common+0xac>
 8010cac:	f04f 30ff 	mov.w	r0, #4294967295
 8010cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cb4:	3501      	adds	r5, #1
 8010cb6:	e7c6      	b.n	8010c46 <_printf_common+0x3e>
 8010cb8:	18e1      	adds	r1, r4, r3
 8010cba:	1c5a      	adds	r2, r3, #1
 8010cbc:	2030      	movs	r0, #48	@ 0x30
 8010cbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010cc2:	4422      	add	r2, r4
 8010cc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010cc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010ccc:	3302      	adds	r3, #2
 8010cce:	e7c7      	b.n	8010c60 <_printf_common+0x58>
 8010cd0:	2301      	movs	r3, #1
 8010cd2:	4622      	mov	r2, r4
 8010cd4:	4641      	mov	r1, r8
 8010cd6:	4638      	mov	r0, r7
 8010cd8:	47c8      	blx	r9
 8010cda:	3001      	adds	r0, #1
 8010cdc:	d0e6      	beq.n	8010cac <_printf_common+0xa4>
 8010cde:	3601      	adds	r6, #1
 8010ce0:	e7d9      	b.n	8010c96 <_printf_common+0x8e>
	...

08010ce4 <_printf_i>:
 8010ce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ce8:	7e0f      	ldrb	r7, [r1, #24]
 8010cea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010cec:	2f78      	cmp	r7, #120	@ 0x78
 8010cee:	4691      	mov	r9, r2
 8010cf0:	4680      	mov	r8, r0
 8010cf2:	460c      	mov	r4, r1
 8010cf4:	469a      	mov	sl, r3
 8010cf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010cfa:	d807      	bhi.n	8010d0c <_printf_i+0x28>
 8010cfc:	2f62      	cmp	r7, #98	@ 0x62
 8010cfe:	d80a      	bhi.n	8010d16 <_printf_i+0x32>
 8010d00:	2f00      	cmp	r7, #0
 8010d02:	f000 80d2 	beq.w	8010eaa <_printf_i+0x1c6>
 8010d06:	2f58      	cmp	r7, #88	@ 0x58
 8010d08:	f000 80b9 	beq.w	8010e7e <_printf_i+0x19a>
 8010d0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010d10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010d14:	e03a      	b.n	8010d8c <_printf_i+0xa8>
 8010d16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010d1a:	2b15      	cmp	r3, #21
 8010d1c:	d8f6      	bhi.n	8010d0c <_printf_i+0x28>
 8010d1e:	a101      	add	r1, pc, #4	@ (adr r1, 8010d24 <_printf_i+0x40>)
 8010d20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010d24:	08010d7d 	.word	0x08010d7d
 8010d28:	08010d91 	.word	0x08010d91
 8010d2c:	08010d0d 	.word	0x08010d0d
 8010d30:	08010d0d 	.word	0x08010d0d
 8010d34:	08010d0d 	.word	0x08010d0d
 8010d38:	08010d0d 	.word	0x08010d0d
 8010d3c:	08010d91 	.word	0x08010d91
 8010d40:	08010d0d 	.word	0x08010d0d
 8010d44:	08010d0d 	.word	0x08010d0d
 8010d48:	08010d0d 	.word	0x08010d0d
 8010d4c:	08010d0d 	.word	0x08010d0d
 8010d50:	08010e91 	.word	0x08010e91
 8010d54:	08010dbb 	.word	0x08010dbb
 8010d58:	08010e4b 	.word	0x08010e4b
 8010d5c:	08010d0d 	.word	0x08010d0d
 8010d60:	08010d0d 	.word	0x08010d0d
 8010d64:	08010eb3 	.word	0x08010eb3
 8010d68:	08010d0d 	.word	0x08010d0d
 8010d6c:	08010dbb 	.word	0x08010dbb
 8010d70:	08010d0d 	.word	0x08010d0d
 8010d74:	08010d0d 	.word	0x08010d0d
 8010d78:	08010e53 	.word	0x08010e53
 8010d7c:	6833      	ldr	r3, [r6, #0]
 8010d7e:	1d1a      	adds	r2, r3, #4
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	6032      	str	r2, [r6, #0]
 8010d84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010d88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010d8c:	2301      	movs	r3, #1
 8010d8e:	e09d      	b.n	8010ecc <_printf_i+0x1e8>
 8010d90:	6833      	ldr	r3, [r6, #0]
 8010d92:	6820      	ldr	r0, [r4, #0]
 8010d94:	1d19      	adds	r1, r3, #4
 8010d96:	6031      	str	r1, [r6, #0]
 8010d98:	0606      	lsls	r6, r0, #24
 8010d9a:	d501      	bpl.n	8010da0 <_printf_i+0xbc>
 8010d9c:	681d      	ldr	r5, [r3, #0]
 8010d9e:	e003      	b.n	8010da8 <_printf_i+0xc4>
 8010da0:	0645      	lsls	r5, r0, #25
 8010da2:	d5fb      	bpl.n	8010d9c <_printf_i+0xb8>
 8010da4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010da8:	2d00      	cmp	r5, #0
 8010daa:	da03      	bge.n	8010db4 <_printf_i+0xd0>
 8010dac:	232d      	movs	r3, #45	@ 0x2d
 8010dae:	426d      	negs	r5, r5
 8010db0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010db4:	4859      	ldr	r0, [pc, #356]	@ (8010f1c <_printf_i+0x238>)
 8010db6:	230a      	movs	r3, #10
 8010db8:	e011      	b.n	8010dde <_printf_i+0xfa>
 8010dba:	6821      	ldr	r1, [r4, #0]
 8010dbc:	6833      	ldr	r3, [r6, #0]
 8010dbe:	0608      	lsls	r0, r1, #24
 8010dc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8010dc4:	d402      	bmi.n	8010dcc <_printf_i+0xe8>
 8010dc6:	0649      	lsls	r1, r1, #25
 8010dc8:	bf48      	it	mi
 8010dca:	b2ad      	uxthmi	r5, r5
 8010dcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8010dce:	4853      	ldr	r0, [pc, #332]	@ (8010f1c <_printf_i+0x238>)
 8010dd0:	6033      	str	r3, [r6, #0]
 8010dd2:	bf14      	ite	ne
 8010dd4:	230a      	movne	r3, #10
 8010dd6:	2308      	moveq	r3, #8
 8010dd8:	2100      	movs	r1, #0
 8010dda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010dde:	6866      	ldr	r6, [r4, #4]
 8010de0:	60a6      	str	r6, [r4, #8]
 8010de2:	2e00      	cmp	r6, #0
 8010de4:	bfa2      	ittt	ge
 8010de6:	6821      	ldrge	r1, [r4, #0]
 8010de8:	f021 0104 	bicge.w	r1, r1, #4
 8010dec:	6021      	strge	r1, [r4, #0]
 8010dee:	b90d      	cbnz	r5, 8010df4 <_printf_i+0x110>
 8010df0:	2e00      	cmp	r6, #0
 8010df2:	d04b      	beq.n	8010e8c <_printf_i+0x1a8>
 8010df4:	4616      	mov	r6, r2
 8010df6:	fbb5 f1f3 	udiv	r1, r5, r3
 8010dfa:	fb03 5711 	mls	r7, r3, r1, r5
 8010dfe:	5dc7      	ldrb	r7, [r0, r7]
 8010e00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010e04:	462f      	mov	r7, r5
 8010e06:	42bb      	cmp	r3, r7
 8010e08:	460d      	mov	r5, r1
 8010e0a:	d9f4      	bls.n	8010df6 <_printf_i+0x112>
 8010e0c:	2b08      	cmp	r3, #8
 8010e0e:	d10b      	bne.n	8010e28 <_printf_i+0x144>
 8010e10:	6823      	ldr	r3, [r4, #0]
 8010e12:	07df      	lsls	r7, r3, #31
 8010e14:	d508      	bpl.n	8010e28 <_printf_i+0x144>
 8010e16:	6923      	ldr	r3, [r4, #16]
 8010e18:	6861      	ldr	r1, [r4, #4]
 8010e1a:	4299      	cmp	r1, r3
 8010e1c:	bfde      	ittt	le
 8010e1e:	2330      	movle	r3, #48	@ 0x30
 8010e20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010e24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010e28:	1b92      	subs	r2, r2, r6
 8010e2a:	6122      	str	r2, [r4, #16]
 8010e2c:	f8cd a000 	str.w	sl, [sp]
 8010e30:	464b      	mov	r3, r9
 8010e32:	aa03      	add	r2, sp, #12
 8010e34:	4621      	mov	r1, r4
 8010e36:	4640      	mov	r0, r8
 8010e38:	f7ff fee6 	bl	8010c08 <_printf_common>
 8010e3c:	3001      	adds	r0, #1
 8010e3e:	d14a      	bne.n	8010ed6 <_printf_i+0x1f2>
 8010e40:	f04f 30ff 	mov.w	r0, #4294967295
 8010e44:	b004      	add	sp, #16
 8010e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e4a:	6823      	ldr	r3, [r4, #0]
 8010e4c:	f043 0320 	orr.w	r3, r3, #32
 8010e50:	6023      	str	r3, [r4, #0]
 8010e52:	4833      	ldr	r0, [pc, #204]	@ (8010f20 <_printf_i+0x23c>)
 8010e54:	2778      	movs	r7, #120	@ 0x78
 8010e56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010e5a:	6823      	ldr	r3, [r4, #0]
 8010e5c:	6831      	ldr	r1, [r6, #0]
 8010e5e:	061f      	lsls	r7, r3, #24
 8010e60:	f851 5b04 	ldr.w	r5, [r1], #4
 8010e64:	d402      	bmi.n	8010e6c <_printf_i+0x188>
 8010e66:	065f      	lsls	r7, r3, #25
 8010e68:	bf48      	it	mi
 8010e6a:	b2ad      	uxthmi	r5, r5
 8010e6c:	6031      	str	r1, [r6, #0]
 8010e6e:	07d9      	lsls	r1, r3, #31
 8010e70:	bf44      	itt	mi
 8010e72:	f043 0320 	orrmi.w	r3, r3, #32
 8010e76:	6023      	strmi	r3, [r4, #0]
 8010e78:	b11d      	cbz	r5, 8010e82 <_printf_i+0x19e>
 8010e7a:	2310      	movs	r3, #16
 8010e7c:	e7ac      	b.n	8010dd8 <_printf_i+0xf4>
 8010e7e:	4827      	ldr	r0, [pc, #156]	@ (8010f1c <_printf_i+0x238>)
 8010e80:	e7e9      	b.n	8010e56 <_printf_i+0x172>
 8010e82:	6823      	ldr	r3, [r4, #0]
 8010e84:	f023 0320 	bic.w	r3, r3, #32
 8010e88:	6023      	str	r3, [r4, #0]
 8010e8a:	e7f6      	b.n	8010e7a <_printf_i+0x196>
 8010e8c:	4616      	mov	r6, r2
 8010e8e:	e7bd      	b.n	8010e0c <_printf_i+0x128>
 8010e90:	6833      	ldr	r3, [r6, #0]
 8010e92:	6825      	ldr	r5, [r4, #0]
 8010e94:	6961      	ldr	r1, [r4, #20]
 8010e96:	1d18      	adds	r0, r3, #4
 8010e98:	6030      	str	r0, [r6, #0]
 8010e9a:	062e      	lsls	r6, r5, #24
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	d501      	bpl.n	8010ea4 <_printf_i+0x1c0>
 8010ea0:	6019      	str	r1, [r3, #0]
 8010ea2:	e002      	b.n	8010eaa <_printf_i+0x1c6>
 8010ea4:	0668      	lsls	r0, r5, #25
 8010ea6:	d5fb      	bpl.n	8010ea0 <_printf_i+0x1bc>
 8010ea8:	8019      	strh	r1, [r3, #0]
 8010eaa:	2300      	movs	r3, #0
 8010eac:	6123      	str	r3, [r4, #16]
 8010eae:	4616      	mov	r6, r2
 8010eb0:	e7bc      	b.n	8010e2c <_printf_i+0x148>
 8010eb2:	6833      	ldr	r3, [r6, #0]
 8010eb4:	1d1a      	adds	r2, r3, #4
 8010eb6:	6032      	str	r2, [r6, #0]
 8010eb8:	681e      	ldr	r6, [r3, #0]
 8010eba:	6862      	ldr	r2, [r4, #4]
 8010ebc:	2100      	movs	r1, #0
 8010ebe:	4630      	mov	r0, r6
 8010ec0:	f7ef f9ae 	bl	8000220 <memchr>
 8010ec4:	b108      	cbz	r0, 8010eca <_printf_i+0x1e6>
 8010ec6:	1b80      	subs	r0, r0, r6
 8010ec8:	6060      	str	r0, [r4, #4]
 8010eca:	6863      	ldr	r3, [r4, #4]
 8010ecc:	6123      	str	r3, [r4, #16]
 8010ece:	2300      	movs	r3, #0
 8010ed0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ed4:	e7aa      	b.n	8010e2c <_printf_i+0x148>
 8010ed6:	6923      	ldr	r3, [r4, #16]
 8010ed8:	4632      	mov	r2, r6
 8010eda:	4649      	mov	r1, r9
 8010edc:	4640      	mov	r0, r8
 8010ede:	47d0      	blx	sl
 8010ee0:	3001      	adds	r0, #1
 8010ee2:	d0ad      	beq.n	8010e40 <_printf_i+0x15c>
 8010ee4:	6823      	ldr	r3, [r4, #0]
 8010ee6:	079b      	lsls	r3, r3, #30
 8010ee8:	d413      	bmi.n	8010f12 <_printf_i+0x22e>
 8010eea:	68e0      	ldr	r0, [r4, #12]
 8010eec:	9b03      	ldr	r3, [sp, #12]
 8010eee:	4298      	cmp	r0, r3
 8010ef0:	bfb8      	it	lt
 8010ef2:	4618      	movlt	r0, r3
 8010ef4:	e7a6      	b.n	8010e44 <_printf_i+0x160>
 8010ef6:	2301      	movs	r3, #1
 8010ef8:	4632      	mov	r2, r6
 8010efa:	4649      	mov	r1, r9
 8010efc:	4640      	mov	r0, r8
 8010efe:	47d0      	blx	sl
 8010f00:	3001      	adds	r0, #1
 8010f02:	d09d      	beq.n	8010e40 <_printf_i+0x15c>
 8010f04:	3501      	adds	r5, #1
 8010f06:	68e3      	ldr	r3, [r4, #12]
 8010f08:	9903      	ldr	r1, [sp, #12]
 8010f0a:	1a5b      	subs	r3, r3, r1
 8010f0c:	42ab      	cmp	r3, r5
 8010f0e:	dcf2      	bgt.n	8010ef6 <_printf_i+0x212>
 8010f10:	e7eb      	b.n	8010eea <_printf_i+0x206>
 8010f12:	2500      	movs	r5, #0
 8010f14:	f104 0619 	add.w	r6, r4, #25
 8010f18:	e7f5      	b.n	8010f06 <_printf_i+0x222>
 8010f1a:	bf00      	nop
 8010f1c:	08016db0 	.word	0x08016db0
 8010f20:	08016dc1 	.word	0x08016dc1

08010f24 <_scanf_float>:
 8010f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f28:	b087      	sub	sp, #28
 8010f2a:	4617      	mov	r7, r2
 8010f2c:	9303      	str	r3, [sp, #12]
 8010f2e:	688b      	ldr	r3, [r1, #8]
 8010f30:	1e5a      	subs	r2, r3, #1
 8010f32:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010f36:	bf81      	itttt	hi
 8010f38:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010f3c:	eb03 0b05 	addhi.w	fp, r3, r5
 8010f40:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010f44:	608b      	strhi	r3, [r1, #8]
 8010f46:	680b      	ldr	r3, [r1, #0]
 8010f48:	460a      	mov	r2, r1
 8010f4a:	f04f 0500 	mov.w	r5, #0
 8010f4e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8010f52:	f842 3b1c 	str.w	r3, [r2], #28
 8010f56:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010f5a:	4680      	mov	r8, r0
 8010f5c:	460c      	mov	r4, r1
 8010f5e:	bf98      	it	ls
 8010f60:	f04f 0b00 	movls.w	fp, #0
 8010f64:	9201      	str	r2, [sp, #4]
 8010f66:	4616      	mov	r6, r2
 8010f68:	46aa      	mov	sl, r5
 8010f6a:	46a9      	mov	r9, r5
 8010f6c:	9502      	str	r5, [sp, #8]
 8010f6e:	68a2      	ldr	r2, [r4, #8]
 8010f70:	b152      	cbz	r2, 8010f88 <_scanf_float+0x64>
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	781b      	ldrb	r3, [r3, #0]
 8010f76:	2b4e      	cmp	r3, #78	@ 0x4e
 8010f78:	d864      	bhi.n	8011044 <_scanf_float+0x120>
 8010f7a:	2b40      	cmp	r3, #64	@ 0x40
 8010f7c:	d83c      	bhi.n	8010ff8 <_scanf_float+0xd4>
 8010f7e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8010f82:	b2c8      	uxtb	r0, r1
 8010f84:	280e      	cmp	r0, #14
 8010f86:	d93a      	bls.n	8010ffe <_scanf_float+0xda>
 8010f88:	f1b9 0f00 	cmp.w	r9, #0
 8010f8c:	d003      	beq.n	8010f96 <_scanf_float+0x72>
 8010f8e:	6823      	ldr	r3, [r4, #0]
 8010f90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010f94:	6023      	str	r3, [r4, #0]
 8010f96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010f9a:	f1ba 0f01 	cmp.w	sl, #1
 8010f9e:	f200 8117 	bhi.w	80111d0 <_scanf_float+0x2ac>
 8010fa2:	9b01      	ldr	r3, [sp, #4]
 8010fa4:	429e      	cmp	r6, r3
 8010fa6:	f200 8108 	bhi.w	80111ba <_scanf_float+0x296>
 8010faa:	2001      	movs	r0, #1
 8010fac:	b007      	add	sp, #28
 8010fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fb2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8010fb6:	2a0d      	cmp	r2, #13
 8010fb8:	d8e6      	bhi.n	8010f88 <_scanf_float+0x64>
 8010fba:	a101      	add	r1, pc, #4	@ (adr r1, 8010fc0 <_scanf_float+0x9c>)
 8010fbc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010fc0:	08011107 	.word	0x08011107
 8010fc4:	08010f89 	.word	0x08010f89
 8010fc8:	08010f89 	.word	0x08010f89
 8010fcc:	08010f89 	.word	0x08010f89
 8010fd0:	08011167 	.word	0x08011167
 8010fd4:	0801113f 	.word	0x0801113f
 8010fd8:	08010f89 	.word	0x08010f89
 8010fdc:	08010f89 	.word	0x08010f89
 8010fe0:	08011115 	.word	0x08011115
 8010fe4:	08010f89 	.word	0x08010f89
 8010fe8:	08010f89 	.word	0x08010f89
 8010fec:	08010f89 	.word	0x08010f89
 8010ff0:	08010f89 	.word	0x08010f89
 8010ff4:	080110cd 	.word	0x080110cd
 8010ff8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010ffc:	e7db      	b.n	8010fb6 <_scanf_float+0x92>
 8010ffe:	290e      	cmp	r1, #14
 8011000:	d8c2      	bhi.n	8010f88 <_scanf_float+0x64>
 8011002:	a001      	add	r0, pc, #4	@ (adr r0, 8011008 <_scanf_float+0xe4>)
 8011004:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011008:	080110bd 	.word	0x080110bd
 801100c:	08010f89 	.word	0x08010f89
 8011010:	080110bd 	.word	0x080110bd
 8011014:	08011153 	.word	0x08011153
 8011018:	08010f89 	.word	0x08010f89
 801101c:	08011065 	.word	0x08011065
 8011020:	080110a3 	.word	0x080110a3
 8011024:	080110a3 	.word	0x080110a3
 8011028:	080110a3 	.word	0x080110a3
 801102c:	080110a3 	.word	0x080110a3
 8011030:	080110a3 	.word	0x080110a3
 8011034:	080110a3 	.word	0x080110a3
 8011038:	080110a3 	.word	0x080110a3
 801103c:	080110a3 	.word	0x080110a3
 8011040:	080110a3 	.word	0x080110a3
 8011044:	2b6e      	cmp	r3, #110	@ 0x6e
 8011046:	d809      	bhi.n	801105c <_scanf_float+0x138>
 8011048:	2b60      	cmp	r3, #96	@ 0x60
 801104a:	d8b2      	bhi.n	8010fb2 <_scanf_float+0x8e>
 801104c:	2b54      	cmp	r3, #84	@ 0x54
 801104e:	d07b      	beq.n	8011148 <_scanf_float+0x224>
 8011050:	2b59      	cmp	r3, #89	@ 0x59
 8011052:	d199      	bne.n	8010f88 <_scanf_float+0x64>
 8011054:	2d07      	cmp	r5, #7
 8011056:	d197      	bne.n	8010f88 <_scanf_float+0x64>
 8011058:	2508      	movs	r5, #8
 801105a:	e02c      	b.n	80110b6 <_scanf_float+0x192>
 801105c:	2b74      	cmp	r3, #116	@ 0x74
 801105e:	d073      	beq.n	8011148 <_scanf_float+0x224>
 8011060:	2b79      	cmp	r3, #121	@ 0x79
 8011062:	e7f6      	b.n	8011052 <_scanf_float+0x12e>
 8011064:	6821      	ldr	r1, [r4, #0]
 8011066:	05c8      	lsls	r0, r1, #23
 8011068:	d51b      	bpl.n	80110a2 <_scanf_float+0x17e>
 801106a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801106e:	6021      	str	r1, [r4, #0]
 8011070:	f109 0901 	add.w	r9, r9, #1
 8011074:	f1bb 0f00 	cmp.w	fp, #0
 8011078:	d003      	beq.n	8011082 <_scanf_float+0x15e>
 801107a:	3201      	adds	r2, #1
 801107c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011080:	60a2      	str	r2, [r4, #8]
 8011082:	68a3      	ldr	r3, [r4, #8]
 8011084:	3b01      	subs	r3, #1
 8011086:	60a3      	str	r3, [r4, #8]
 8011088:	6923      	ldr	r3, [r4, #16]
 801108a:	3301      	adds	r3, #1
 801108c:	6123      	str	r3, [r4, #16]
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	3b01      	subs	r3, #1
 8011092:	2b00      	cmp	r3, #0
 8011094:	607b      	str	r3, [r7, #4]
 8011096:	f340 8087 	ble.w	80111a8 <_scanf_float+0x284>
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	3301      	adds	r3, #1
 801109e:	603b      	str	r3, [r7, #0]
 80110a0:	e765      	b.n	8010f6e <_scanf_float+0x4a>
 80110a2:	eb1a 0105 	adds.w	r1, sl, r5
 80110a6:	f47f af6f 	bne.w	8010f88 <_scanf_float+0x64>
 80110aa:	6822      	ldr	r2, [r4, #0]
 80110ac:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80110b0:	6022      	str	r2, [r4, #0]
 80110b2:	460d      	mov	r5, r1
 80110b4:	468a      	mov	sl, r1
 80110b6:	f806 3b01 	strb.w	r3, [r6], #1
 80110ba:	e7e2      	b.n	8011082 <_scanf_float+0x15e>
 80110bc:	6822      	ldr	r2, [r4, #0]
 80110be:	0610      	lsls	r0, r2, #24
 80110c0:	f57f af62 	bpl.w	8010f88 <_scanf_float+0x64>
 80110c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80110c8:	6022      	str	r2, [r4, #0]
 80110ca:	e7f4      	b.n	80110b6 <_scanf_float+0x192>
 80110cc:	f1ba 0f00 	cmp.w	sl, #0
 80110d0:	d10e      	bne.n	80110f0 <_scanf_float+0x1cc>
 80110d2:	f1b9 0f00 	cmp.w	r9, #0
 80110d6:	d10e      	bne.n	80110f6 <_scanf_float+0x1d2>
 80110d8:	6822      	ldr	r2, [r4, #0]
 80110da:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80110de:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80110e2:	d108      	bne.n	80110f6 <_scanf_float+0x1d2>
 80110e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80110e8:	6022      	str	r2, [r4, #0]
 80110ea:	f04f 0a01 	mov.w	sl, #1
 80110ee:	e7e2      	b.n	80110b6 <_scanf_float+0x192>
 80110f0:	f1ba 0f02 	cmp.w	sl, #2
 80110f4:	d055      	beq.n	80111a2 <_scanf_float+0x27e>
 80110f6:	2d01      	cmp	r5, #1
 80110f8:	d002      	beq.n	8011100 <_scanf_float+0x1dc>
 80110fa:	2d04      	cmp	r5, #4
 80110fc:	f47f af44 	bne.w	8010f88 <_scanf_float+0x64>
 8011100:	3501      	adds	r5, #1
 8011102:	b2ed      	uxtb	r5, r5
 8011104:	e7d7      	b.n	80110b6 <_scanf_float+0x192>
 8011106:	f1ba 0f01 	cmp.w	sl, #1
 801110a:	f47f af3d 	bne.w	8010f88 <_scanf_float+0x64>
 801110e:	f04f 0a02 	mov.w	sl, #2
 8011112:	e7d0      	b.n	80110b6 <_scanf_float+0x192>
 8011114:	b97d      	cbnz	r5, 8011136 <_scanf_float+0x212>
 8011116:	f1b9 0f00 	cmp.w	r9, #0
 801111a:	f47f af38 	bne.w	8010f8e <_scanf_float+0x6a>
 801111e:	6822      	ldr	r2, [r4, #0]
 8011120:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011124:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011128:	f040 8108 	bne.w	801133c <_scanf_float+0x418>
 801112c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011130:	6022      	str	r2, [r4, #0]
 8011132:	2501      	movs	r5, #1
 8011134:	e7bf      	b.n	80110b6 <_scanf_float+0x192>
 8011136:	2d03      	cmp	r5, #3
 8011138:	d0e2      	beq.n	8011100 <_scanf_float+0x1dc>
 801113a:	2d05      	cmp	r5, #5
 801113c:	e7de      	b.n	80110fc <_scanf_float+0x1d8>
 801113e:	2d02      	cmp	r5, #2
 8011140:	f47f af22 	bne.w	8010f88 <_scanf_float+0x64>
 8011144:	2503      	movs	r5, #3
 8011146:	e7b6      	b.n	80110b6 <_scanf_float+0x192>
 8011148:	2d06      	cmp	r5, #6
 801114a:	f47f af1d 	bne.w	8010f88 <_scanf_float+0x64>
 801114e:	2507      	movs	r5, #7
 8011150:	e7b1      	b.n	80110b6 <_scanf_float+0x192>
 8011152:	6822      	ldr	r2, [r4, #0]
 8011154:	0591      	lsls	r1, r2, #22
 8011156:	f57f af17 	bpl.w	8010f88 <_scanf_float+0x64>
 801115a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801115e:	6022      	str	r2, [r4, #0]
 8011160:	f8cd 9008 	str.w	r9, [sp, #8]
 8011164:	e7a7      	b.n	80110b6 <_scanf_float+0x192>
 8011166:	6822      	ldr	r2, [r4, #0]
 8011168:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801116c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011170:	d006      	beq.n	8011180 <_scanf_float+0x25c>
 8011172:	0550      	lsls	r0, r2, #21
 8011174:	f57f af08 	bpl.w	8010f88 <_scanf_float+0x64>
 8011178:	f1b9 0f00 	cmp.w	r9, #0
 801117c:	f000 80de 	beq.w	801133c <_scanf_float+0x418>
 8011180:	0591      	lsls	r1, r2, #22
 8011182:	bf58      	it	pl
 8011184:	9902      	ldrpl	r1, [sp, #8]
 8011186:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801118a:	bf58      	it	pl
 801118c:	eba9 0101 	subpl.w	r1, r9, r1
 8011190:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8011194:	bf58      	it	pl
 8011196:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801119a:	6022      	str	r2, [r4, #0]
 801119c:	f04f 0900 	mov.w	r9, #0
 80111a0:	e789      	b.n	80110b6 <_scanf_float+0x192>
 80111a2:	f04f 0a03 	mov.w	sl, #3
 80111a6:	e786      	b.n	80110b6 <_scanf_float+0x192>
 80111a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80111ac:	4639      	mov	r1, r7
 80111ae:	4640      	mov	r0, r8
 80111b0:	4798      	blx	r3
 80111b2:	2800      	cmp	r0, #0
 80111b4:	f43f aedb 	beq.w	8010f6e <_scanf_float+0x4a>
 80111b8:	e6e6      	b.n	8010f88 <_scanf_float+0x64>
 80111ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80111be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80111c2:	463a      	mov	r2, r7
 80111c4:	4640      	mov	r0, r8
 80111c6:	4798      	blx	r3
 80111c8:	6923      	ldr	r3, [r4, #16]
 80111ca:	3b01      	subs	r3, #1
 80111cc:	6123      	str	r3, [r4, #16]
 80111ce:	e6e8      	b.n	8010fa2 <_scanf_float+0x7e>
 80111d0:	1e6b      	subs	r3, r5, #1
 80111d2:	2b06      	cmp	r3, #6
 80111d4:	d824      	bhi.n	8011220 <_scanf_float+0x2fc>
 80111d6:	2d02      	cmp	r5, #2
 80111d8:	d836      	bhi.n	8011248 <_scanf_float+0x324>
 80111da:	9b01      	ldr	r3, [sp, #4]
 80111dc:	429e      	cmp	r6, r3
 80111de:	f67f aee4 	bls.w	8010faa <_scanf_float+0x86>
 80111e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80111e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80111ea:	463a      	mov	r2, r7
 80111ec:	4640      	mov	r0, r8
 80111ee:	4798      	blx	r3
 80111f0:	6923      	ldr	r3, [r4, #16]
 80111f2:	3b01      	subs	r3, #1
 80111f4:	6123      	str	r3, [r4, #16]
 80111f6:	e7f0      	b.n	80111da <_scanf_float+0x2b6>
 80111f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80111fc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8011200:	463a      	mov	r2, r7
 8011202:	4640      	mov	r0, r8
 8011204:	4798      	blx	r3
 8011206:	6923      	ldr	r3, [r4, #16]
 8011208:	3b01      	subs	r3, #1
 801120a:	6123      	str	r3, [r4, #16]
 801120c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011210:	fa5f fa8a 	uxtb.w	sl, sl
 8011214:	f1ba 0f02 	cmp.w	sl, #2
 8011218:	d1ee      	bne.n	80111f8 <_scanf_float+0x2d4>
 801121a:	3d03      	subs	r5, #3
 801121c:	b2ed      	uxtb	r5, r5
 801121e:	1b76      	subs	r6, r6, r5
 8011220:	6823      	ldr	r3, [r4, #0]
 8011222:	05da      	lsls	r2, r3, #23
 8011224:	d530      	bpl.n	8011288 <_scanf_float+0x364>
 8011226:	055b      	lsls	r3, r3, #21
 8011228:	d511      	bpl.n	801124e <_scanf_float+0x32a>
 801122a:	9b01      	ldr	r3, [sp, #4]
 801122c:	429e      	cmp	r6, r3
 801122e:	f67f aebc 	bls.w	8010faa <_scanf_float+0x86>
 8011232:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011236:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801123a:	463a      	mov	r2, r7
 801123c:	4640      	mov	r0, r8
 801123e:	4798      	blx	r3
 8011240:	6923      	ldr	r3, [r4, #16]
 8011242:	3b01      	subs	r3, #1
 8011244:	6123      	str	r3, [r4, #16]
 8011246:	e7f0      	b.n	801122a <_scanf_float+0x306>
 8011248:	46aa      	mov	sl, r5
 801124a:	46b3      	mov	fp, r6
 801124c:	e7de      	b.n	801120c <_scanf_float+0x2e8>
 801124e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011252:	6923      	ldr	r3, [r4, #16]
 8011254:	2965      	cmp	r1, #101	@ 0x65
 8011256:	f103 33ff 	add.w	r3, r3, #4294967295
 801125a:	f106 35ff 	add.w	r5, r6, #4294967295
 801125e:	6123      	str	r3, [r4, #16]
 8011260:	d00c      	beq.n	801127c <_scanf_float+0x358>
 8011262:	2945      	cmp	r1, #69	@ 0x45
 8011264:	d00a      	beq.n	801127c <_scanf_float+0x358>
 8011266:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801126a:	463a      	mov	r2, r7
 801126c:	4640      	mov	r0, r8
 801126e:	4798      	blx	r3
 8011270:	6923      	ldr	r3, [r4, #16]
 8011272:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011276:	3b01      	subs	r3, #1
 8011278:	1eb5      	subs	r5, r6, #2
 801127a:	6123      	str	r3, [r4, #16]
 801127c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011280:	463a      	mov	r2, r7
 8011282:	4640      	mov	r0, r8
 8011284:	4798      	blx	r3
 8011286:	462e      	mov	r6, r5
 8011288:	6822      	ldr	r2, [r4, #0]
 801128a:	f012 0210 	ands.w	r2, r2, #16
 801128e:	d001      	beq.n	8011294 <_scanf_float+0x370>
 8011290:	2000      	movs	r0, #0
 8011292:	e68b      	b.n	8010fac <_scanf_float+0x88>
 8011294:	7032      	strb	r2, [r6, #0]
 8011296:	6823      	ldr	r3, [r4, #0]
 8011298:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801129c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80112a0:	d11c      	bne.n	80112dc <_scanf_float+0x3b8>
 80112a2:	9b02      	ldr	r3, [sp, #8]
 80112a4:	454b      	cmp	r3, r9
 80112a6:	eba3 0209 	sub.w	r2, r3, r9
 80112aa:	d123      	bne.n	80112f4 <_scanf_float+0x3d0>
 80112ac:	9901      	ldr	r1, [sp, #4]
 80112ae:	2200      	movs	r2, #0
 80112b0:	4640      	mov	r0, r8
 80112b2:	f002 fc45 	bl	8013b40 <_strtod_r>
 80112b6:	9b03      	ldr	r3, [sp, #12]
 80112b8:	6821      	ldr	r1, [r4, #0]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	f011 0f02 	tst.w	r1, #2
 80112c0:	ec57 6b10 	vmov	r6, r7, d0
 80112c4:	f103 0204 	add.w	r2, r3, #4
 80112c8:	d01f      	beq.n	801130a <_scanf_float+0x3e6>
 80112ca:	9903      	ldr	r1, [sp, #12]
 80112cc:	600a      	str	r2, [r1, #0]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	e9c3 6700 	strd	r6, r7, [r3]
 80112d4:	68e3      	ldr	r3, [r4, #12]
 80112d6:	3301      	adds	r3, #1
 80112d8:	60e3      	str	r3, [r4, #12]
 80112da:	e7d9      	b.n	8011290 <_scanf_float+0x36c>
 80112dc:	9b04      	ldr	r3, [sp, #16]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d0e4      	beq.n	80112ac <_scanf_float+0x388>
 80112e2:	9905      	ldr	r1, [sp, #20]
 80112e4:	230a      	movs	r3, #10
 80112e6:	3101      	adds	r1, #1
 80112e8:	4640      	mov	r0, r8
 80112ea:	f002 fca9 	bl	8013c40 <_strtol_r>
 80112ee:	9b04      	ldr	r3, [sp, #16]
 80112f0:	9e05      	ldr	r6, [sp, #20]
 80112f2:	1ac2      	subs	r2, r0, r3
 80112f4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80112f8:	429e      	cmp	r6, r3
 80112fa:	bf28      	it	cs
 80112fc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011300:	4910      	ldr	r1, [pc, #64]	@ (8011344 <_scanf_float+0x420>)
 8011302:	4630      	mov	r0, r6
 8011304:	f000 f8e4 	bl	80114d0 <siprintf>
 8011308:	e7d0      	b.n	80112ac <_scanf_float+0x388>
 801130a:	f011 0f04 	tst.w	r1, #4
 801130e:	9903      	ldr	r1, [sp, #12]
 8011310:	600a      	str	r2, [r1, #0]
 8011312:	d1dc      	bne.n	80112ce <_scanf_float+0x3aa>
 8011314:	681d      	ldr	r5, [r3, #0]
 8011316:	4632      	mov	r2, r6
 8011318:	463b      	mov	r3, r7
 801131a:	4630      	mov	r0, r6
 801131c:	4639      	mov	r1, r7
 801131e:	f7ef fc2d 	bl	8000b7c <__aeabi_dcmpun>
 8011322:	b128      	cbz	r0, 8011330 <_scanf_float+0x40c>
 8011324:	4808      	ldr	r0, [pc, #32]	@ (8011348 <_scanf_float+0x424>)
 8011326:	f000 fa03 	bl	8011730 <nanf>
 801132a:	ed85 0a00 	vstr	s0, [r5]
 801132e:	e7d1      	b.n	80112d4 <_scanf_float+0x3b0>
 8011330:	4630      	mov	r0, r6
 8011332:	4639      	mov	r1, r7
 8011334:	f7ef fc80 	bl	8000c38 <__aeabi_d2f>
 8011338:	6028      	str	r0, [r5, #0]
 801133a:	e7cb      	b.n	80112d4 <_scanf_float+0x3b0>
 801133c:	f04f 0900 	mov.w	r9, #0
 8011340:	e629      	b.n	8010f96 <_scanf_float+0x72>
 8011342:	bf00      	nop
 8011344:	08016dd2 	.word	0x08016dd2
 8011348:	08017188 	.word	0x08017188

0801134c <std>:
 801134c:	2300      	movs	r3, #0
 801134e:	b510      	push	{r4, lr}
 8011350:	4604      	mov	r4, r0
 8011352:	e9c0 3300 	strd	r3, r3, [r0]
 8011356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801135a:	6083      	str	r3, [r0, #8]
 801135c:	8181      	strh	r1, [r0, #12]
 801135e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011360:	81c2      	strh	r2, [r0, #14]
 8011362:	6183      	str	r3, [r0, #24]
 8011364:	4619      	mov	r1, r3
 8011366:	2208      	movs	r2, #8
 8011368:	305c      	adds	r0, #92	@ 0x5c
 801136a:	f000 f940 	bl	80115ee <memset>
 801136e:	4b0d      	ldr	r3, [pc, #52]	@ (80113a4 <std+0x58>)
 8011370:	6263      	str	r3, [r4, #36]	@ 0x24
 8011372:	4b0d      	ldr	r3, [pc, #52]	@ (80113a8 <std+0x5c>)
 8011374:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011376:	4b0d      	ldr	r3, [pc, #52]	@ (80113ac <std+0x60>)
 8011378:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801137a:	4b0d      	ldr	r3, [pc, #52]	@ (80113b0 <std+0x64>)
 801137c:	6323      	str	r3, [r4, #48]	@ 0x30
 801137e:	4b0d      	ldr	r3, [pc, #52]	@ (80113b4 <std+0x68>)
 8011380:	6224      	str	r4, [r4, #32]
 8011382:	429c      	cmp	r4, r3
 8011384:	d006      	beq.n	8011394 <std+0x48>
 8011386:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801138a:	4294      	cmp	r4, r2
 801138c:	d002      	beq.n	8011394 <std+0x48>
 801138e:	33d0      	adds	r3, #208	@ 0xd0
 8011390:	429c      	cmp	r4, r3
 8011392:	d105      	bne.n	80113a0 <std+0x54>
 8011394:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801139c:	f000 b9b6 	b.w	801170c <__retarget_lock_init_recursive>
 80113a0:	bd10      	pop	{r4, pc}
 80113a2:	bf00      	nop
 80113a4:	08011565 	.word	0x08011565
 80113a8:	0801158b 	.word	0x0801158b
 80113ac:	080115c3 	.word	0x080115c3
 80113b0:	080115e7 	.word	0x080115e7
 80113b4:	2000252c 	.word	0x2000252c

080113b8 <stdio_exit_handler>:
 80113b8:	4a02      	ldr	r2, [pc, #8]	@ (80113c4 <stdio_exit_handler+0xc>)
 80113ba:	4903      	ldr	r1, [pc, #12]	@ (80113c8 <stdio_exit_handler+0x10>)
 80113bc:	4803      	ldr	r0, [pc, #12]	@ (80113cc <stdio_exit_handler+0x14>)
 80113be:	f000 b869 	b.w	8011494 <_fwalk_sglue>
 80113c2:	bf00      	nop
 80113c4:	200001a0 	.word	0x200001a0
 80113c8:	08014631 	.word	0x08014631
 80113cc:	200001b0 	.word	0x200001b0

080113d0 <cleanup_stdio>:
 80113d0:	6841      	ldr	r1, [r0, #4]
 80113d2:	4b0c      	ldr	r3, [pc, #48]	@ (8011404 <cleanup_stdio+0x34>)
 80113d4:	4299      	cmp	r1, r3
 80113d6:	b510      	push	{r4, lr}
 80113d8:	4604      	mov	r4, r0
 80113da:	d001      	beq.n	80113e0 <cleanup_stdio+0x10>
 80113dc:	f003 f928 	bl	8014630 <_fflush_r>
 80113e0:	68a1      	ldr	r1, [r4, #8]
 80113e2:	4b09      	ldr	r3, [pc, #36]	@ (8011408 <cleanup_stdio+0x38>)
 80113e4:	4299      	cmp	r1, r3
 80113e6:	d002      	beq.n	80113ee <cleanup_stdio+0x1e>
 80113e8:	4620      	mov	r0, r4
 80113ea:	f003 f921 	bl	8014630 <_fflush_r>
 80113ee:	68e1      	ldr	r1, [r4, #12]
 80113f0:	4b06      	ldr	r3, [pc, #24]	@ (801140c <cleanup_stdio+0x3c>)
 80113f2:	4299      	cmp	r1, r3
 80113f4:	d004      	beq.n	8011400 <cleanup_stdio+0x30>
 80113f6:	4620      	mov	r0, r4
 80113f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113fc:	f003 b918 	b.w	8014630 <_fflush_r>
 8011400:	bd10      	pop	{r4, pc}
 8011402:	bf00      	nop
 8011404:	2000252c 	.word	0x2000252c
 8011408:	20002594 	.word	0x20002594
 801140c:	200025fc 	.word	0x200025fc

08011410 <global_stdio_init.part.0>:
 8011410:	b510      	push	{r4, lr}
 8011412:	4b0b      	ldr	r3, [pc, #44]	@ (8011440 <global_stdio_init.part.0+0x30>)
 8011414:	4c0b      	ldr	r4, [pc, #44]	@ (8011444 <global_stdio_init.part.0+0x34>)
 8011416:	4a0c      	ldr	r2, [pc, #48]	@ (8011448 <global_stdio_init.part.0+0x38>)
 8011418:	601a      	str	r2, [r3, #0]
 801141a:	4620      	mov	r0, r4
 801141c:	2200      	movs	r2, #0
 801141e:	2104      	movs	r1, #4
 8011420:	f7ff ff94 	bl	801134c <std>
 8011424:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011428:	2201      	movs	r2, #1
 801142a:	2109      	movs	r1, #9
 801142c:	f7ff ff8e 	bl	801134c <std>
 8011430:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011434:	2202      	movs	r2, #2
 8011436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801143a:	2112      	movs	r1, #18
 801143c:	f7ff bf86 	b.w	801134c <std>
 8011440:	20002664 	.word	0x20002664
 8011444:	2000252c 	.word	0x2000252c
 8011448:	080113b9 	.word	0x080113b9

0801144c <__sfp_lock_acquire>:
 801144c:	4801      	ldr	r0, [pc, #4]	@ (8011454 <__sfp_lock_acquire+0x8>)
 801144e:	f000 b95e 	b.w	801170e <__retarget_lock_acquire_recursive>
 8011452:	bf00      	nop
 8011454:	2000266d 	.word	0x2000266d

08011458 <__sfp_lock_release>:
 8011458:	4801      	ldr	r0, [pc, #4]	@ (8011460 <__sfp_lock_release+0x8>)
 801145a:	f000 b959 	b.w	8011710 <__retarget_lock_release_recursive>
 801145e:	bf00      	nop
 8011460:	2000266d 	.word	0x2000266d

08011464 <__sinit>:
 8011464:	b510      	push	{r4, lr}
 8011466:	4604      	mov	r4, r0
 8011468:	f7ff fff0 	bl	801144c <__sfp_lock_acquire>
 801146c:	6a23      	ldr	r3, [r4, #32]
 801146e:	b11b      	cbz	r3, 8011478 <__sinit+0x14>
 8011470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011474:	f7ff bff0 	b.w	8011458 <__sfp_lock_release>
 8011478:	4b04      	ldr	r3, [pc, #16]	@ (801148c <__sinit+0x28>)
 801147a:	6223      	str	r3, [r4, #32]
 801147c:	4b04      	ldr	r3, [pc, #16]	@ (8011490 <__sinit+0x2c>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d1f5      	bne.n	8011470 <__sinit+0xc>
 8011484:	f7ff ffc4 	bl	8011410 <global_stdio_init.part.0>
 8011488:	e7f2      	b.n	8011470 <__sinit+0xc>
 801148a:	bf00      	nop
 801148c:	080113d1 	.word	0x080113d1
 8011490:	20002664 	.word	0x20002664

08011494 <_fwalk_sglue>:
 8011494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011498:	4607      	mov	r7, r0
 801149a:	4688      	mov	r8, r1
 801149c:	4614      	mov	r4, r2
 801149e:	2600      	movs	r6, #0
 80114a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80114a4:	f1b9 0901 	subs.w	r9, r9, #1
 80114a8:	d505      	bpl.n	80114b6 <_fwalk_sglue+0x22>
 80114aa:	6824      	ldr	r4, [r4, #0]
 80114ac:	2c00      	cmp	r4, #0
 80114ae:	d1f7      	bne.n	80114a0 <_fwalk_sglue+0xc>
 80114b0:	4630      	mov	r0, r6
 80114b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114b6:	89ab      	ldrh	r3, [r5, #12]
 80114b8:	2b01      	cmp	r3, #1
 80114ba:	d907      	bls.n	80114cc <_fwalk_sglue+0x38>
 80114bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80114c0:	3301      	adds	r3, #1
 80114c2:	d003      	beq.n	80114cc <_fwalk_sglue+0x38>
 80114c4:	4629      	mov	r1, r5
 80114c6:	4638      	mov	r0, r7
 80114c8:	47c0      	blx	r8
 80114ca:	4306      	orrs	r6, r0
 80114cc:	3568      	adds	r5, #104	@ 0x68
 80114ce:	e7e9      	b.n	80114a4 <_fwalk_sglue+0x10>

080114d0 <siprintf>:
 80114d0:	b40e      	push	{r1, r2, r3}
 80114d2:	b500      	push	{lr}
 80114d4:	b09c      	sub	sp, #112	@ 0x70
 80114d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80114d8:	9002      	str	r0, [sp, #8]
 80114da:	9006      	str	r0, [sp, #24]
 80114dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80114e0:	4809      	ldr	r0, [pc, #36]	@ (8011508 <siprintf+0x38>)
 80114e2:	9107      	str	r1, [sp, #28]
 80114e4:	9104      	str	r1, [sp, #16]
 80114e6:	4909      	ldr	r1, [pc, #36]	@ (801150c <siprintf+0x3c>)
 80114e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80114ec:	9105      	str	r1, [sp, #20]
 80114ee:	6800      	ldr	r0, [r0, #0]
 80114f0:	9301      	str	r3, [sp, #4]
 80114f2:	a902      	add	r1, sp, #8
 80114f4:	f002 fc02 	bl	8013cfc <_svfiprintf_r>
 80114f8:	9b02      	ldr	r3, [sp, #8]
 80114fa:	2200      	movs	r2, #0
 80114fc:	701a      	strb	r2, [r3, #0]
 80114fe:	b01c      	add	sp, #112	@ 0x70
 8011500:	f85d eb04 	ldr.w	lr, [sp], #4
 8011504:	b003      	add	sp, #12
 8011506:	4770      	bx	lr
 8011508:	200001ac 	.word	0x200001ac
 801150c:	ffff0208 	.word	0xffff0208

08011510 <siscanf>:
 8011510:	b40e      	push	{r1, r2, r3}
 8011512:	b530      	push	{r4, r5, lr}
 8011514:	b09c      	sub	sp, #112	@ 0x70
 8011516:	ac1f      	add	r4, sp, #124	@ 0x7c
 8011518:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801151c:	f854 5b04 	ldr.w	r5, [r4], #4
 8011520:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011524:	9002      	str	r0, [sp, #8]
 8011526:	9006      	str	r0, [sp, #24]
 8011528:	f7ee feca 	bl	80002c0 <strlen>
 801152c:	4b0b      	ldr	r3, [pc, #44]	@ (801155c <siscanf+0x4c>)
 801152e:	9003      	str	r0, [sp, #12]
 8011530:	9007      	str	r0, [sp, #28]
 8011532:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011534:	480a      	ldr	r0, [pc, #40]	@ (8011560 <siscanf+0x50>)
 8011536:	9401      	str	r4, [sp, #4]
 8011538:	2300      	movs	r3, #0
 801153a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801153c:	9314      	str	r3, [sp, #80]	@ 0x50
 801153e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011542:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011546:	462a      	mov	r2, r5
 8011548:	4623      	mov	r3, r4
 801154a:	a902      	add	r1, sp, #8
 801154c:	6800      	ldr	r0, [r0, #0]
 801154e:	f002 fd29 	bl	8013fa4 <__ssvfiscanf_r>
 8011552:	b01c      	add	sp, #112	@ 0x70
 8011554:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011558:	b003      	add	sp, #12
 801155a:	4770      	bx	lr
 801155c:	08011587 	.word	0x08011587
 8011560:	200001ac 	.word	0x200001ac

08011564 <__sread>:
 8011564:	b510      	push	{r4, lr}
 8011566:	460c      	mov	r4, r1
 8011568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801156c:	f000 f880 	bl	8011670 <_read_r>
 8011570:	2800      	cmp	r0, #0
 8011572:	bfab      	itete	ge
 8011574:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011576:	89a3      	ldrhlt	r3, [r4, #12]
 8011578:	181b      	addge	r3, r3, r0
 801157a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801157e:	bfac      	ite	ge
 8011580:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011582:	81a3      	strhlt	r3, [r4, #12]
 8011584:	bd10      	pop	{r4, pc}

08011586 <__seofread>:
 8011586:	2000      	movs	r0, #0
 8011588:	4770      	bx	lr

0801158a <__swrite>:
 801158a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801158e:	461f      	mov	r7, r3
 8011590:	898b      	ldrh	r3, [r1, #12]
 8011592:	05db      	lsls	r3, r3, #23
 8011594:	4605      	mov	r5, r0
 8011596:	460c      	mov	r4, r1
 8011598:	4616      	mov	r6, r2
 801159a:	d505      	bpl.n	80115a8 <__swrite+0x1e>
 801159c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115a0:	2302      	movs	r3, #2
 80115a2:	2200      	movs	r2, #0
 80115a4:	f000 f852 	bl	801164c <_lseek_r>
 80115a8:	89a3      	ldrh	r3, [r4, #12]
 80115aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80115b2:	81a3      	strh	r3, [r4, #12]
 80115b4:	4632      	mov	r2, r6
 80115b6:	463b      	mov	r3, r7
 80115b8:	4628      	mov	r0, r5
 80115ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115be:	f000 b869 	b.w	8011694 <_write_r>

080115c2 <__sseek>:
 80115c2:	b510      	push	{r4, lr}
 80115c4:	460c      	mov	r4, r1
 80115c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115ca:	f000 f83f 	bl	801164c <_lseek_r>
 80115ce:	1c43      	adds	r3, r0, #1
 80115d0:	89a3      	ldrh	r3, [r4, #12]
 80115d2:	bf15      	itete	ne
 80115d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80115d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80115da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80115de:	81a3      	strheq	r3, [r4, #12]
 80115e0:	bf18      	it	ne
 80115e2:	81a3      	strhne	r3, [r4, #12]
 80115e4:	bd10      	pop	{r4, pc}

080115e6 <__sclose>:
 80115e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115ea:	f000 b81f 	b.w	801162c <_close_r>

080115ee <memset>:
 80115ee:	4402      	add	r2, r0
 80115f0:	4603      	mov	r3, r0
 80115f2:	4293      	cmp	r3, r2
 80115f4:	d100      	bne.n	80115f8 <memset+0xa>
 80115f6:	4770      	bx	lr
 80115f8:	f803 1b01 	strb.w	r1, [r3], #1
 80115fc:	e7f9      	b.n	80115f2 <memset+0x4>

080115fe <strncmp>:
 80115fe:	b510      	push	{r4, lr}
 8011600:	b16a      	cbz	r2, 801161e <strncmp+0x20>
 8011602:	3901      	subs	r1, #1
 8011604:	1884      	adds	r4, r0, r2
 8011606:	f810 2b01 	ldrb.w	r2, [r0], #1
 801160a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801160e:	429a      	cmp	r2, r3
 8011610:	d103      	bne.n	801161a <strncmp+0x1c>
 8011612:	42a0      	cmp	r0, r4
 8011614:	d001      	beq.n	801161a <strncmp+0x1c>
 8011616:	2a00      	cmp	r2, #0
 8011618:	d1f5      	bne.n	8011606 <strncmp+0x8>
 801161a:	1ad0      	subs	r0, r2, r3
 801161c:	bd10      	pop	{r4, pc}
 801161e:	4610      	mov	r0, r2
 8011620:	e7fc      	b.n	801161c <strncmp+0x1e>
	...

08011624 <_localeconv_r>:
 8011624:	4800      	ldr	r0, [pc, #0]	@ (8011628 <_localeconv_r+0x4>)
 8011626:	4770      	bx	lr
 8011628:	200002ec 	.word	0x200002ec

0801162c <_close_r>:
 801162c:	b538      	push	{r3, r4, r5, lr}
 801162e:	4d06      	ldr	r5, [pc, #24]	@ (8011648 <_close_r+0x1c>)
 8011630:	2300      	movs	r3, #0
 8011632:	4604      	mov	r4, r0
 8011634:	4608      	mov	r0, r1
 8011636:	602b      	str	r3, [r5, #0]
 8011638:	f7f2 fc38 	bl	8003eac <_close>
 801163c:	1c43      	adds	r3, r0, #1
 801163e:	d102      	bne.n	8011646 <_close_r+0x1a>
 8011640:	682b      	ldr	r3, [r5, #0]
 8011642:	b103      	cbz	r3, 8011646 <_close_r+0x1a>
 8011644:	6023      	str	r3, [r4, #0]
 8011646:	bd38      	pop	{r3, r4, r5, pc}
 8011648:	20002668 	.word	0x20002668

0801164c <_lseek_r>:
 801164c:	b538      	push	{r3, r4, r5, lr}
 801164e:	4d07      	ldr	r5, [pc, #28]	@ (801166c <_lseek_r+0x20>)
 8011650:	4604      	mov	r4, r0
 8011652:	4608      	mov	r0, r1
 8011654:	4611      	mov	r1, r2
 8011656:	2200      	movs	r2, #0
 8011658:	602a      	str	r2, [r5, #0]
 801165a:	461a      	mov	r2, r3
 801165c:	f7f2 fc4d 	bl	8003efa <_lseek>
 8011660:	1c43      	adds	r3, r0, #1
 8011662:	d102      	bne.n	801166a <_lseek_r+0x1e>
 8011664:	682b      	ldr	r3, [r5, #0]
 8011666:	b103      	cbz	r3, 801166a <_lseek_r+0x1e>
 8011668:	6023      	str	r3, [r4, #0]
 801166a:	bd38      	pop	{r3, r4, r5, pc}
 801166c:	20002668 	.word	0x20002668

08011670 <_read_r>:
 8011670:	b538      	push	{r3, r4, r5, lr}
 8011672:	4d07      	ldr	r5, [pc, #28]	@ (8011690 <_read_r+0x20>)
 8011674:	4604      	mov	r4, r0
 8011676:	4608      	mov	r0, r1
 8011678:	4611      	mov	r1, r2
 801167a:	2200      	movs	r2, #0
 801167c:	602a      	str	r2, [r5, #0]
 801167e:	461a      	mov	r2, r3
 8011680:	f7f2 fbdb 	bl	8003e3a <_read>
 8011684:	1c43      	adds	r3, r0, #1
 8011686:	d102      	bne.n	801168e <_read_r+0x1e>
 8011688:	682b      	ldr	r3, [r5, #0]
 801168a:	b103      	cbz	r3, 801168e <_read_r+0x1e>
 801168c:	6023      	str	r3, [r4, #0]
 801168e:	bd38      	pop	{r3, r4, r5, pc}
 8011690:	20002668 	.word	0x20002668

08011694 <_write_r>:
 8011694:	b538      	push	{r3, r4, r5, lr}
 8011696:	4d07      	ldr	r5, [pc, #28]	@ (80116b4 <_write_r+0x20>)
 8011698:	4604      	mov	r4, r0
 801169a:	4608      	mov	r0, r1
 801169c:	4611      	mov	r1, r2
 801169e:	2200      	movs	r2, #0
 80116a0:	602a      	str	r2, [r5, #0]
 80116a2:	461a      	mov	r2, r3
 80116a4:	f7f2 fbe6 	bl	8003e74 <_write>
 80116a8:	1c43      	adds	r3, r0, #1
 80116aa:	d102      	bne.n	80116b2 <_write_r+0x1e>
 80116ac:	682b      	ldr	r3, [r5, #0]
 80116ae:	b103      	cbz	r3, 80116b2 <_write_r+0x1e>
 80116b0:	6023      	str	r3, [r4, #0]
 80116b2:	bd38      	pop	{r3, r4, r5, pc}
 80116b4:	20002668 	.word	0x20002668

080116b8 <__errno>:
 80116b8:	4b01      	ldr	r3, [pc, #4]	@ (80116c0 <__errno+0x8>)
 80116ba:	6818      	ldr	r0, [r3, #0]
 80116bc:	4770      	bx	lr
 80116be:	bf00      	nop
 80116c0:	200001ac 	.word	0x200001ac

080116c4 <__libc_init_array>:
 80116c4:	b570      	push	{r4, r5, r6, lr}
 80116c6:	4d0d      	ldr	r5, [pc, #52]	@ (80116fc <__libc_init_array+0x38>)
 80116c8:	4c0d      	ldr	r4, [pc, #52]	@ (8011700 <__libc_init_array+0x3c>)
 80116ca:	1b64      	subs	r4, r4, r5
 80116cc:	10a4      	asrs	r4, r4, #2
 80116ce:	2600      	movs	r6, #0
 80116d0:	42a6      	cmp	r6, r4
 80116d2:	d109      	bne.n	80116e8 <__libc_init_array+0x24>
 80116d4:	4d0b      	ldr	r5, [pc, #44]	@ (8011704 <__libc_init_array+0x40>)
 80116d6:	4c0c      	ldr	r4, [pc, #48]	@ (8011708 <__libc_init_array+0x44>)
 80116d8:	f005 f97e 	bl	80169d8 <_init>
 80116dc:	1b64      	subs	r4, r4, r5
 80116de:	10a4      	asrs	r4, r4, #2
 80116e0:	2600      	movs	r6, #0
 80116e2:	42a6      	cmp	r6, r4
 80116e4:	d105      	bne.n	80116f2 <__libc_init_array+0x2e>
 80116e6:	bd70      	pop	{r4, r5, r6, pc}
 80116e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80116ec:	4798      	blx	r3
 80116ee:	3601      	adds	r6, #1
 80116f0:	e7ee      	b.n	80116d0 <__libc_init_array+0xc>
 80116f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80116f6:	4798      	blx	r3
 80116f8:	3601      	adds	r6, #1
 80116fa:	e7f2      	b.n	80116e2 <__libc_init_array+0x1e>
 80116fc:	08017228 	.word	0x08017228
 8011700:	08017228 	.word	0x08017228
 8011704:	08017228 	.word	0x08017228
 8011708:	0801722c 	.word	0x0801722c

0801170c <__retarget_lock_init_recursive>:
 801170c:	4770      	bx	lr

0801170e <__retarget_lock_acquire_recursive>:
 801170e:	4770      	bx	lr

08011710 <__retarget_lock_release_recursive>:
 8011710:	4770      	bx	lr

08011712 <memcpy>:
 8011712:	440a      	add	r2, r1
 8011714:	4291      	cmp	r1, r2
 8011716:	f100 33ff 	add.w	r3, r0, #4294967295
 801171a:	d100      	bne.n	801171e <memcpy+0xc>
 801171c:	4770      	bx	lr
 801171e:	b510      	push	{r4, lr}
 8011720:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011724:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011728:	4291      	cmp	r1, r2
 801172a:	d1f9      	bne.n	8011720 <memcpy+0xe>
 801172c:	bd10      	pop	{r4, pc}
	...

08011730 <nanf>:
 8011730:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011738 <nanf+0x8>
 8011734:	4770      	bx	lr
 8011736:	bf00      	nop
 8011738:	7fc00000 	.word	0x7fc00000

0801173c <quorem>:
 801173c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011740:	6903      	ldr	r3, [r0, #16]
 8011742:	690c      	ldr	r4, [r1, #16]
 8011744:	42a3      	cmp	r3, r4
 8011746:	4607      	mov	r7, r0
 8011748:	db7e      	blt.n	8011848 <quorem+0x10c>
 801174a:	3c01      	subs	r4, #1
 801174c:	f101 0814 	add.w	r8, r1, #20
 8011750:	00a3      	lsls	r3, r4, #2
 8011752:	f100 0514 	add.w	r5, r0, #20
 8011756:	9300      	str	r3, [sp, #0]
 8011758:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801175c:	9301      	str	r3, [sp, #4]
 801175e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011762:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011766:	3301      	adds	r3, #1
 8011768:	429a      	cmp	r2, r3
 801176a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801176e:	fbb2 f6f3 	udiv	r6, r2, r3
 8011772:	d32e      	bcc.n	80117d2 <quorem+0x96>
 8011774:	f04f 0a00 	mov.w	sl, #0
 8011778:	46c4      	mov	ip, r8
 801177a:	46ae      	mov	lr, r5
 801177c:	46d3      	mov	fp, sl
 801177e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011782:	b298      	uxth	r0, r3
 8011784:	fb06 a000 	mla	r0, r6, r0, sl
 8011788:	0c02      	lsrs	r2, r0, #16
 801178a:	0c1b      	lsrs	r3, r3, #16
 801178c:	fb06 2303 	mla	r3, r6, r3, r2
 8011790:	f8de 2000 	ldr.w	r2, [lr]
 8011794:	b280      	uxth	r0, r0
 8011796:	b292      	uxth	r2, r2
 8011798:	1a12      	subs	r2, r2, r0
 801179a:	445a      	add	r2, fp
 801179c:	f8de 0000 	ldr.w	r0, [lr]
 80117a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80117a4:	b29b      	uxth	r3, r3
 80117a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80117aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80117ae:	b292      	uxth	r2, r2
 80117b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80117b4:	45e1      	cmp	r9, ip
 80117b6:	f84e 2b04 	str.w	r2, [lr], #4
 80117ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80117be:	d2de      	bcs.n	801177e <quorem+0x42>
 80117c0:	9b00      	ldr	r3, [sp, #0]
 80117c2:	58eb      	ldr	r3, [r5, r3]
 80117c4:	b92b      	cbnz	r3, 80117d2 <quorem+0x96>
 80117c6:	9b01      	ldr	r3, [sp, #4]
 80117c8:	3b04      	subs	r3, #4
 80117ca:	429d      	cmp	r5, r3
 80117cc:	461a      	mov	r2, r3
 80117ce:	d32f      	bcc.n	8011830 <quorem+0xf4>
 80117d0:	613c      	str	r4, [r7, #16]
 80117d2:	4638      	mov	r0, r7
 80117d4:	f001 f9c4 	bl	8012b60 <__mcmp>
 80117d8:	2800      	cmp	r0, #0
 80117da:	db25      	blt.n	8011828 <quorem+0xec>
 80117dc:	4629      	mov	r1, r5
 80117de:	2000      	movs	r0, #0
 80117e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80117e4:	f8d1 c000 	ldr.w	ip, [r1]
 80117e8:	fa1f fe82 	uxth.w	lr, r2
 80117ec:	fa1f f38c 	uxth.w	r3, ip
 80117f0:	eba3 030e 	sub.w	r3, r3, lr
 80117f4:	4403      	add	r3, r0
 80117f6:	0c12      	lsrs	r2, r2, #16
 80117f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80117fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011800:	b29b      	uxth	r3, r3
 8011802:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011806:	45c1      	cmp	r9, r8
 8011808:	f841 3b04 	str.w	r3, [r1], #4
 801180c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011810:	d2e6      	bcs.n	80117e0 <quorem+0xa4>
 8011812:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801181a:	b922      	cbnz	r2, 8011826 <quorem+0xea>
 801181c:	3b04      	subs	r3, #4
 801181e:	429d      	cmp	r5, r3
 8011820:	461a      	mov	r2, r3
 8011822:	d30b      	bcc.n	801183c <quorem+0x100>
 8011824:	613c      	str	r4, [r7, #16]
 8011826:	3601      	adds	r6, #1
 8011828:	4630      	mov	r0, r6
 801182a:	b003      	add	sp, #12
 801182c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011830:	6812      	ldr	r2, [r2, #0]
 8011832:	3b04      	subs	r3, #4
 8011834:	2a00      	cmp	r2, #0
 8011836:	d1cb      	bne.n	80117d0 <quorem+0x94>
 8011838:	3c01      	subs	r4, #1
 801183a:	e7c6      	b.n	80117ca <quorem+0x8e>
 801183c:	6812      	ldr	r2, [r2, #0]
 801183e:	3b04      	subs	r3, #4
 8011840:	2a00      	cmp	r2, #0
 8011842:	d1ef      	bne.n	8011824 <quorem+0xe8>
 8011844:	3c01      	subs	r4, #1
 8011846:	e7ea      	b.n	801181e <quorem+0xe2>
 8011848:	2000      	movs	r0, #0
 801184a:	e7ee      	b.n	801182a <quorem+0xee>
 801184c:	0000      	movs	r0, r0
	...

08011850 <_dtoa_r>:
 8011850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011854:	69c7      	ldr	r7, [r0, #28]
 8011856:	b099      	sub	sp, #100	@ 0x64
 8011858:	ed8d 0b02 	vstr	d0, [sp, #8]
 801185c:	ec55 4b10 	vmov	r4, r5, d0
 8011860:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011862:	9109      	str	r1, [sp, #36]	@ 0x24
 8011864:	4683      	mov	fp, r0
 8011866:	920e      	str	r2, [sp, #56]	@ 0x38
 8011868:	9313      	str	r3, [sp, #76]	@ 0x4c
 801186a:	b97f      	cbnz	r7, 801188c <_dtoa_r+0x3c>
 801186c:	2010      	movs	r0, #16
 801186e:	f000 fdfd 	bl	801246c <malloc>
 8011872:	4602      	mov	r2, r0
 8011874:	f8cb 001c 	str.w	r0, [fp, #28]
 8011878:	b920      	cbnz	r0, 8011884 <_dtoa_r+0x34>
 801187a:	4ba7      	ldr	r3, [pc, #668]	@ (8011b18 <_dtoa_r+0x2c8>)
 801187c:	21ef      	movs	r1, #239	@ 0xef
 801187e:	48a7      	ldr	r0, [pc, #668]	@ (8011b1c <_dtoa_r+0x2cc>)
 8011880:	f002 ffa6 	bl	80147d0 <__assert_func>
 8011884:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011888:	6007      	str	r7, [r0, #0]
 801188a:	60c7      	str	r7, [r0, #12]
 801188c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011890:	6819      	ldr	r1, [r3, #0]
 8011892:	b159      	cbz	r1, 80118ac <_dtoa_r+0x5c>
 8011894:	685a      	ldr	r2, [r3, #4]
 8011896:	604a      	str	r2, [r1, #4]
 8011898:	2301      	movs	r3, #1
 801189a:	4093      	lsls	r3, r2
 801189c:	608b      	str	r3, [r1, #8]
 801189e:	4658      	mov	r0, fp
 80118a0:	f000 feda 	bl	8012658 <_Bfree>
 80118a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80118a8:	2200      	movs	r2, #0
 80118aa:	601a      	str	r2, [r3, #0]
 80118ac:	1e2b      	subs	r3, r5, #0
 80118ae:	bfb9      	ittee	lt
 80118b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80118b4:	9303      	strlt	r3, [sp, #12]
 80118b6:	2300      	movge	r3, #0
 80118b8:	6033      	strge	r3, [r6, #0]
 80118ba:	9f03      	ldr	r7, [sp, #12]
 80118bc:	4b98      	ldr	r3, [pc, #608]	@ (8011b20 <_dtoa_r+0x2d0>)
 80118be:	bfbc      	itt	lt
 80118c0:	2201      	movlt	r2, #1
 80118c2:	6032      	strlt	r2, [r6, #0]
 80118c4:	43bb      	bics	r3, r7
 80118c6:	d112      	bne.n	80118ee <_dtoa_r+0x9e>
 80118c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80118ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80118ce:	6013      	str	r3, [r2, #0]
 80118d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80118d4:	4323      	orrs	r3, r4
 80118d6:	f000 854d 	beq.w	8012374 <_dtoa_r+0xb24>
 80118da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80118dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011b34 <_dtoa_r+0x2e4>
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	f000 854f 	beq.w	8012384 <_dtoa_r+0xb34>
 80118e6:	f10a 0303 	add.w	r3, sl, #3
 80118ea:	f000 bd49 	b.w	8012380 <_dtoa_r+0xb30>
 80118ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80118f2:	2200      	movs	r2, #0
 80118f4:	ec51 0b17 	vmov	r0, r1, d7
 80118f8:	2300      	movs	r3, #0
 80118fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80118fe:	f7ef f90b 	bl	8000b18 <__aeabi_dcmpeq>
 8011902:	4680      	mov	r8, r0
 8011904:	b158      	cbz	r0, 801191e <_dtoa_r+0xce>
 8011906:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011908:	2301      	movs	r3, #1
 801190a:	6013      	str	r3, [r2, #0]
 801190c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801190e:	b113      	cbz	r3, 8011916 <_dtoa_r+0xc6>
 8011910:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011912:	4b84      	ldr	r3, [pc, #528]	@ (8011b24 <_dtoa_r+0x2d4>)
 8011914:	6013      	str	r3, [r2, #0]
 8011916:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011b38 <_dtoa_r+0x2e8>
 801191a:	f000 bd33 	b.w	8012384 <_dtoa_r+0xb34>
 801191e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011922:	aa16      	add	r2, sp, #88	@ 0x58
 8011924:	a917      	add	r1, sp, #92	@ 0x5c
 8011926:	4658      	mov	r0, fp
 8011928:	f001 fa3a 	bl	8012da0 <__d2b>
 801192c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011930:	4681      	mov	r9, r0
 8011932:	2e00      	cmp	r6, #0
 8011934:	d077      	beq.n	8011a26 <_dtoa_r+0x1d6>
 8011936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011938:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801193c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011940:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011944:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011948:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801194c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011950:	4619      	mov	r1, r3
 8011952:	2200      	movs	r2, #0
 8011954:	4b74      	ldr	r3, [pc, #464]	@ (8011b28 <_dtoa_r+0x2d8>)
 8011956:	f7ee fcbf 	bl	80002d8 <__aeabi_dsub>
 801195a:	a369      	add	r3, pc, #420	@ (adr r3, 8011b00 <_dtoa_r+0x2b0>)
 801195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011960:	f7ee fe72 	bl	8000648 <__aeabi_dmul>
 8011964:	a368      	add	r3, pc, #416	@ (adr r3, 8011b08 <_dtoa_r+0x2b8>)
 8011966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801196a:	f7ee fcb7 	bl	80002dc <__adddf3>
 801196e:	4604      	mov	r4, r0
 8011970:	4630      	mov	r0, r6
 8011972:	460d      	mov	r5, r1
 8011974:	f7ee fdfe 	bl	8000574 <__aeabi_i2d>
 8011978:	a365      	add	r3, pc, #404	@ (adr r3, 8011b10 <_dtoa_r+0x2c0>)
 801197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801197e:	f7ee fe63 	bl	8000648 <__aeabi_dmul>
 8011982:	4602      	mov	r2, r0
 8011984:	460b      	mov	r3, r1
 8011986:	4620      	mov	r0, r4
 8011988:	4629      	mov	r1, r5
 801198a:	f7ee fca7 	bl	80002dc <__adddf3>
 801198e:	4604      	mov	r4, r0
 8011990:	460d      	mov	r5, r1
 8011992:	f7ef f909 	bl	8000ba8 <__aeabi_d2iz>
 8011996:	2200      	movs	r2, #0
 8011998:	4607      	mov	r7, r0
 801199a:	2300      	movs	r3, #0
 801199c:	4620      	mov	r0, r4
 801199e:	4629      	mov	r1, r5
 80119a0:	f7ef f8c4 	bl	8000b2c <__aeabi_dcmplt>
 80119a4:	b140      	cbz	r0, 80119b8 <_dtoa_r+0x168>
 80119a6:	4638      	mov	r0, r7
 80119a8:	f7ee fde4 	bl	8000574 <__aeabi_i2d>
 80119ac:	4622      	mov	r2, r4
 80119ae:	462b      	mov	r3, r5
 80119b0:	f7ef f8b2 	bl	8000b18 <__aeabi_dcmpeq>
 80119b4:	b900      	cbnz	r0, 80119b8 <_dtoa_r+0x168>
 80119b6:	3f01      	subs	r7, #1
 80119b8:	2f16      	cmp	r7, #22
 80119ba:	d851      	bhi.n	8011a60 <_dtoa_r+0x210>
 80119bc:	4b5b      	ldr	r3, [pc, #364]	@ (8011b2c <_dtoa_r+0x2dc>)
 80119be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80119c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80119ca:	f7ef f8af 	bl	8000b2c <__aeabi_dcmplt>
 80119ce:	2800      	cmp	r0, #0
 80119d0:	d048      	beq.n	8011a64 <_dtoa_r+0x214>
 80119d2:	3f01      	subs	r7, #1
 80119d4:	2300      	movs	r3, #0
 80119d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80119d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80119da:	1b9b      	subs	r3, r3, r6
 80119dc:	1e5a      	subs	r2, r3, #1
 80119de:	bf44      	itt	mi
 80119e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80119e4:	2300      	movmi	r3, #0
 80119e6:	9208      	str	r2, [sp, #32]
 80119e8:	bf54      	ite	pl
 80119ea:	f04f 0800 	movpl.w	r8, #0
 80119ee:	9308      	strmi	r3, [sp, #32]
 80119f0:	2f00      	cmp	r7, #0
 80119f2:	db39      	blt.n	8011a68 <_dtoa_r+0x218>
 80119f4:	9b08      	ldr	r3, [sp, #32]
 80119f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80119f8:	443b      	add	r3, r7
 80119fa:	9308      	str	r3, [sp, #32]
 80119fc:	2300      	movs	r3, #0
 80119fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8011a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a02:	2b09      	cmp	r3, #9
 8011a04:	d864      	bhi.n	8011ad0 <_dtoa_r+0x280>
 8011a06:	2b05      	cmp	r3, #5
 8011a08:	bfc4      	itt	gt
 8011a0a:	3b04      	subgt	r3, #4
 8011a0c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8011a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a10:	f1a3 0302 	sub.w	r3, r3, #2
 8011a14:	bfcc      	ite	gt
 8011a16:	2400      	movgt	r4, #0
 8011a18:	2401      	movle	r4, #1
 8011a1a:	2b03      	cmp	r3, #3
 8011a1c:	d863      	bhi.n	8011ae6 <_dtoa_r+0x296>
 8011a1e:	e8df f003 	tbb	[pc, r3]
 8011a22:	372a      	.short	0x372a
 8011a24:	5535      	.short	0x5535
 8011a26:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011a2a:	441e      	add	r6, r3
 8011a2c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011a30:	2b20      	cmp	r3, #32
 8011a32:	bfc1      	itttt	gt
 8011a34:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011a38:	409f      	lslgt	r7, r3
 8011a3a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011a3e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011a42:	bfd6      	itet	le
 8011a44:	f1c3 0320 	rsble	r3, r3, #32
 8011a48:	ea47 0003 	orrgt.w	r0, r7, r3
 8011a4c:	fa04 f003 	lslle.w	r0, r4, r3
 8011a50:	f7ee fd80 	bl	8000554 <__aeabi_ui2d>
 8011a54:	2201      	movs	r2, #1
 8011a56:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011a5a:	3e01      	subs	r6, #1
 8011a5c:	9214      	str	r2, [sp, #80]	@ 0x50
 8011a5e:	e777      	b.n	8011950 <_dtoa_r+0x100>
 8011a60:	2301      	movs	r3, #1
 8011a62:	e7b8      	b.n	80119d6 <_dtoa_r+0x186>
 8011a64:	9012      	str	r0, [sp, #72]	@ 0x48
 8011a66:	e7b7      	b.n	80119d8 <_dtoa_r+0x188>
 8011a68:	427b      	negs	r3, r7
 8011a6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	eba8 0807 	sub.w	r8, r8, r7
 8011a72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011a74:	e7c4      	b.n	8011a00 <_dtoa_r+0x1b0>
 8011a76:	2300      	movs	r3, #0
 8011a78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	dc35      	bgt.n	8011aec <_dtoa_r+0x29c>
 8011a80:	2301      	movs	r3, #1
 8011a82:	9300      	str	r3, [sp, #0]
 8011a84:	9307      	str	r3, [sp, #28]
 8011a86:	461a      	mov	r2, r3
 8011a88:	920e      	str	r2, [sp, #56]	@ 0x38
 8011a8a:	e00b      	b.n	8011aa4 <_dtoa_r+0x254>
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	e7f3      	b.n	8011a78 <_dtoa_r+0x228>
 8011a90:	2300      	movs	r3, #0
 8011a92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a96:	18fb      	adds	r3, r7, r3
 8011a98:	9300      	str	r3, [sp, #0]
 8011a9a:	3301      	adds	r3, #1
 8011a9c:	2b01      	cmp	r3, #1
 8011a9e:	9307      	str	r3, [sp, #28]
 8011aa0:	bfb8      	it	lt
 8011aa2:	2301      	movlt	r3, #1
 8011aa4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011aa8:	2100      	movs	r1, #0
 8011aaa:	2204      	movs	r2, #4
 8011aac:	f102 0514 	add.w	r5, r2, #20
 8011ab0:	429d      	cmp	r5, r3
 8011ab2:	d91f      	bls.n	8011af4 <_dtoa_r+0x2a4>
 8011ab4:	6041      	str	r1, [r0, #4]
 8011ab6:	4658      	mov	r0, fp
 8011ab8:	f000 fd8e 	bl	80125d8 <_Balloc>
 8011abc:	4682      	mov	sl, r0
 8011abe:	2800      	cmp	r0, #0
 8011ac0:	d13c      	bne.n	8011b3c <_dtoa_r+0x2ec>
 8011ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8011b30 <_dtoa_r+0x2e0>)
 8011ac4:	4602      	mov	r2, r0
 8011ac6:	f240 11af 	movw	r1, #431	@ 0x1af
 8011aca:	e6d8      	b.n	801187e <_dtoa_r+0x2e>
 8011acc:	2301      	movs	r3, #1
 8011ace:	e7e0      	b.n	8011a92 <_dtoa_r+0x242>
 8011ad0:	2401      	movs	r4, #1
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ad6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8011adc:	9300      	str	r3, [sp, #0]
 8011ade:	9307      	str	r3, [sp, #28]
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	2312      	movs	r3, #18
 8011ae4:	e7d0      	b.n	8011a88 <_dtoa_r+0x238>
 8011ae6:	2301      	movs	r3, #1
 8011ae8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011aea:	e7f5      	b.n	8011ad8 <_dtoa_r+0x288>
 8011aec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011aee:	9300      	str	r3, [sp, #0]
 8011af0:	9307      	str	r3, [sp, #28]
 8011af2:	e7d7      	b.n	8011aa4 <_dtoa_r+0x254>
 8011af4:	3101      	adds	r1, #1
 8011af6:	0052      	lsls	r2, r2, #1
 8011af8:	e7d8      	b.n	8011aac <_dtoa_r+0x25c>
 8011afa:	bf00      	nop
 8011afc:	f3af 8000 	nop.w
 8011b00:	636f4361 	.word	0x636f4361
 8011b04:	3fd287a7 	.word	0x3fd287a7
 8011b08:	8b60c8b3 	.word	0x8b60c8b3
 8011b0c:	3fc68a28 	.word	0x3fc68a28
 8011b10:	509f79fb 	.word	0x509f79fb
 8011b14:	3fd34413 	.word	0x3fd34413
 8011b18:	08016de4 	.word	0x08016de4
 8011b1c:	08016dfb 	.word	0x08016dfb
 8011b20:	7ff00000 	.word	0x7ff00000
 8011b24:	08017141 	.word	0x08017141
 8011b28:	3ff80000 	.word	0x3ff80000
 8011b2c:	08016ef8 	.word	0x08016ef8
 8011b30:	08016e53 	.word	0x08016e53
 8011b34:	08016de0 	.word	0x08016de0
 8011b38:	08017140 	.word	0x08017140
 8011b3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011b40:	6018      	str	r0, [r3, #0]
 8011b42:	9b07      	ldr	r3, [sp, #28]
 8011b44:	2b0e      	cmp	r3, #14
 8011b46:	f200 80a4 	bhi.w	8011c92 <_dtoa_r+0x442>
 8011b4a:	2c00      	cmp	r4, #0
 8011b4c:	f000 80a1 	beq.w	8011c92 <_dtoa_r+0x442>
 8011b50:	2f00      	cmp	r7, #0
 8011b52:	dd33      	ble.n	8011bbc <_dtoa_r+0x36c>
 8011b54:	4bad      	ldr	r3, [pc, #692]	@ (8011e0c <_dtoa_r+0x5bc>)
 8011b56:	f007 020f 	and.w	r2, r7, #15
 8011b5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b5e:	ed93 7b00 	vldr	d7, [r3]
 8011b62:	05f8      	lsls	r0, r7, #23
 8011b64:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011b68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011b6c:	d516      	bpl.n	8011b9c <_dtoa_r+0x34c>
 8011b6e:	4ba8      	ldr	r3, [pc, #672]	@ (8011e10 <_dtoa_r+0x5c0>)
 8011b70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011b74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011b78:	f7ee fe90 	bl	800089c <__aeabi_ddiv>
 8011b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b80:	f004 040f 	and.w	r4, r4, #15
 8011b84:	2603      	movs	r6, #3
 8011b86:	4da2      	ldr	r5, [pc, #648]	@ (8011e10 <_dtoa_r+0x5c0>)
 8011b88:	b954      	cbnz	r4, 8011ba0 <_dtoa_r+0x350>
 8011b8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b92:	f7ee fe83 	bl	800089c <__aeabi_ddiv>
 8011b96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b9a:	e028      	b.n	8011bee <_dtoa_r+0x39e>
 8011b9c:	2602      	movs	r6, #2
 8011b9e:	e7f2      	b.n	8011b86 <_dtoa_r+0x336>
 8011ba0:	07e1      	lsls	r1, r4, #31
 8011ba2:	d508      	bpl.n	8011bb6 <_dtoa_r+0x366>
 8011ba4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011ba8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011bac:	f7ee fd4c 	bl	8000648 <__aeabi_dmul>
 8011bb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011bb4:	3601      	adds	r6, #1
 8011bb6:	1064      	asrs	r4, r4, #1
 8011bb8:	3508      	adds	r5, #8
 8011bba:	e7e5      	b.n	8011b88 <_dtoa_r+0x338>
 8011bbc:	f000 80d2 	beq.w	8011d64 <_dtoa_r+0x514>
 8011bc0:	427c      	negs	r4, r7
 8011bc2:	4b92      	ldr	r3, [pc, #584]	@ (8011e0c <_dtoa_r+0x5bc>)
 8011bc4:	4d92      	ldr	r5, [pc, #584]	@ (8011e10 <_dtoa_r+0x5c0>)
 8011bc6:	f004 020f 	and.w	r2, r4, #15
 8011bca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011bd6:	f7ee fd37 	bl	8000648 <__aeabi_dmul>
 8011bda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011bde:	1124      	asrs	r4, r4, #4
 8011be0:	2300      	movs	r3, #0
 8011be2:	2602      	movs	r6, #2
 8011be4:	2c00      	cmp	r4, #0
 8011be6:	f040 80b2 	bne.w	8011d4e <_dtoa_r+0x4fe>
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d1d3      	bne.n	8011b96 <_dtoa_r+0x346>
 8011bee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011bf0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	f000 80b7 	beq.w	8011d68 <_dtoa_r+0x518>
 8011bfa:	4b86      	ldr	r3, [pc, #536]	@ (8011e14 <_dtoa_r+0x5c4>)
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	4620      	mov	r0, r4
 8011c00:	4629      	mov	r1, r5
 8011c02:	f7ee ff93 	bl	8000b2c <__aeabi_dcmplt>
 8011c06:	2800      	cmp	r0, #0
 8011c08:	f000 80ae 	beq.w	8011d68 <_dtoa_r+0x518>
 8011c0c:	9b07      	ldr	r3, [sp, #28]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	f000 80aa 	beq.w	8011d68 <_dtoa_r+0x518>
 8011c14:	9b00      	ldr	r3, [sp, #0]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	dd37      	ble.n	8011c8a <_dtoa_r+0x43a>
 8011c1a:	1e7b      	subs	r3, r7, #1
 8011c1c:	9304      	str	r3, [sp, #16]
 8011c1e:	4620      	mov	r0, r4
 8011c20:	4b7d      	ldr	r3, [pc, #500]	@ (8011e18 <_dtoa_r+0x5c8>)
 8011c22:	2200      	movs	r2, #0
 8011c24:	4629      	mov	r1, r5
 8011c26:	f7ee fd0f 	bl	8000648 <__aeabi_dmul>
 8011c2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c2e:	9c00      	ldr	r4, [sp, #0]
 8011c30:	3601      	adds	r6, #1
 8011c32:	4630      	mov	r0, r6
 8011c34:	f7ee fc9e 	bl	8000574 <__aeabi_i2d>
 8011c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011c3c:	f7ee fd04 	bl	8000648 <__aeabi_dmul>
 8011c40:	4b76      	ldr	r3, [pc, #472]	@ (8011e1c <_dtoa_r+0x5cc>)
 8011c42:	2200      	movs	r2, #0
 8011c44:	f7ee fb4a 	bl	80002dc <__adddf3>
 8011c48:	4605      	mov	r5, r0
 8011c4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011c4e:	2c00      	cmp	r4, #0
 8011c50:	f040 808d 	bne.w	8011d6e <_dtoa_r+0x51e>
 8011c54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c58:	4b71      	ldr	r3, [pc, #452]	@ (8011e20 <_dtoa_r+0x5d0>)
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	f7ee fb3c 	bl	80002d8 <__aeabi_dsub>
 8011c60:	4602      	mov	r2, r0
 8011c62:	460b      	mov	r3, r1
 8011c64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011c68:	462a      	mov	r2, r5
 8011c6a:	4633      	mov	r3, r6
 8011c6c:	f7ee ff7c 	bl	8000b68 <__aeabi_dcmpgt>
 8011c70:	2800      	cmp	r0, #0
 8011c72:	f040 828b 	bne.w	801218c <_dtoa_r+0x93c>
 8011c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c7a:	462a      	mov	r2, r5
 8011c7c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011c80:	f7ee ff54 	bl	8000b2c <__aeabi_dcmplt>
 8011c84:	2800      	cmp	r0, #0
 8011c86:	f040 8128 	bne.w	8011eda <_dtoa_r+0x68a>
 8011c8a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011c8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011c92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	f2c0 815a 	blt.w	8011f4e <_dtoa_r+0x6fe>
 8011c9a:	2f0e      	cmp	r7, #14
 8011c9c:	f300 8157 	bgt.w	8011f4e <_dtoa_r+0x6fe>
 8011ca0:	4b5a      	ldr	r3, [pc, #360]	@ (8011e0c <_dtoa_r+0x5bc>)
 8011ca2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011ca6:	ed93 7b00 	vldr	d7, [r3]
 8011caa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	ed8d 7b00 	vstr	d7, [sp]
 8011cb2:	da03      	bge.n	8011cbc <_dtoa_r+0x46c>
 8011cb4:	9b07      	ldr	r3, [sp, #28]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	f340 8101 	ble.w	8011ebe <_dtoa_r+0x66e>
 8011cbc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011cc0:	4656      	mov	r6, sl
 8011cc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011cc6:	4620      	mov	r0, r4
 8011cc8:	4629      	mov	r1, r5
 8011cca:	f7ee fde7 	bl	800089c <__aeabi_ddiv>
 8011cce:	f7ee ff6b 	bl	8000ba8 <__aeabi_d2iz>
 8011cd2:	4680      	mov	r8, r0
 8011cd4:	f7ee fc4e 	bl	8000574 <__aeabi_i2d>
 8011cd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011cdc:	f7ee fcb4 	bl	8000648 <__aeabi_dmul>
 8011ce0:	4602      	mov	r2, r0
 8011ce2:	460b      	mov	r3, r1
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	4629      	mov	r1, r5
 8011ce8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011cec:	f7ee faf4 	bl	80002d8 <__aeabi_dsub>
 8011cf0:	f806 4b01 	strb.w	r4, [r6], #1
 8011cf4:	9d07      	ldr	r5, [sp, #28]
 8011cf6:	eba6 040a 	sub.w	r4, r6, sl
 8011cfa:	42a5      	cmp	r5, r4
 8011cfc:	4602      	mov	r2, r0
 8011cfe:	460b      	mov	r3, r1
 8011d00:	f040 8117 	bne.w	8011f32 <_dtoa_r+0x6e2>
 8011d04:	f7ee faea 	bl	80002dc <__adddf3>
 8011d08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d0c:	4604      	mov	r4, r0
 8011d0e:	460d      	mov	r5, r1
 8011d10:	f7ee ff2a 	bl	8000b68 <__aeabi_dcmpgt>
 8011d14:	2800      	cmp	r0, #0
 8011d16:	f040 80f9 	bne.w	8011f0c <_dtoa_r+0x6bc>
 8011d1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d1e:	4620      	mov	r0, r4
 8011d20:	4629      	mov	r1, r5
 8011d22:	f7ee fef9 	bl	8000b18 <__aeabi_dcmpeq>
 8011d26:	b118      	cbz	r0, 8011d30 <_dtoa_r+0x4e0>
 8011d28:	f018 0f01 	tst.w	r8, #1
 8011d2c:	f040 80ee 	bne.w	8011f0c <_dtoa_r+0x6bc>
 8011d30:	4649      	mov	r1, r9
 8011d32:	4658      	mov	r0, fp
 8011d34:	f000 fc90 	bl	8012658 <_Bfree>
 8011d38:	2300      	movs	r3, #0
 8011d3a:	7033      	strb	r3, [r6, #0]
 8011d3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011d3e:	3701      	adds	r7, #1
 8011d40:	601f      	str	r7, [r3, #0]
 8011d42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	f000 831d 	beq.w	8012384 <_dtoa_r+0xb34>
 8011d4a:	601e      	str	r6, [r3, #0]
 8011d4c:	e31a      	b.n	8012384 <_dtoa_r+0xb34>
 8011d4e:	07e2      	lsls	r2, r4, #31
 8011d50:	d505      	bpl.n	8011d5e <_dtoa_r+0x50e>
 8011d52:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011d56:	f7ee fc77 	bl	8000648 <__aeabi_dmul>
 8011d5a:	3601      	adds	r6, #1
 8011d5c:	2301      	movs	r3, #1
 8011d5e:	1064      	asrs	r4, r4, #1
 8011d60:	3508      	adds	r5, #8
 8011d62:	e73f      	b.n	8011be4 <_dtoa_r+0x394>
 8011d64:	2602      	movs	r6, #2
 8011d66:	e742      	b.n	8011bee <_dtoa_r+0x39e>
 8011d68:	9c07      	ldr	r4, [sp, #28]
 8011d6a:	9704      	str	r7, [sp, #16]
 8011d6c:	e761      	b.n	8011c32 <_dtoa_r+0x3e2>
 8011d6e:	4b27      	ldr	r3, [pc, #156]	@ (8011e0c <_dtoa_r+0x5bc>)
 8011d70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011d72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011d76:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011d7a:	4454      	add	r4, sl
 8011d7c:	2900      	cmp	r1, #0
 8011d7e:	d053      	beq.n	8011e28 <_dtoa_r+0x5d8>
 8011d80:	4928      	ldr	r1, [pc, #160]	@ (8011e24 <_dtoa_r+0x5d4>)
 8011d82:	2000      	movs	r0, #0
 8011d84:	f7ee fd8a 	bl	800089c <__aeabi_ddiv>
 8011d88:	4633      	mov	r3, r6
 8011d8a:	462a      	mov	r2, r5
 8011d8c:	f7ee faa4 	bl	80002d8 <__aeabi_dsub>
 8011d90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011d94:	4656      	mov	r6, sl
 8011d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d9a:	f7ee ff05 	bl	8000ba8 <__aeabi_d2iz>
 8011d9e:	4605      	mov	r5, r0
 8011da0:	f7ee fbe8 	bl	8000574 <__aeabi_i2d>
 8011da4:	4602      	mov	r2, r0
 8011da6:	460b      	mov	r3, r1
 8011da8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011dac:	f7ee fa94 	bl	80002d8 <__aeabi_dsub>
 8011db0:	3530      	adds	r5, #48	@ 0x30
 8011db2:	4602      	mov	r2, r0
 8011db4:	460b      	mov	r3, r1
 8011db6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011dba:	f806 5b01 	strb.w	r5, [r6], #1
 8011dbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011dc2:	f7ee feb3 	bl	8000b2c <__aeabi_dcmplt>
 8011dc6:	2800      	cmp	r0, #0
 8011dc8:	d171      	bne.n	8011eae <_dtoa_r+0x65e>
 8011dca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011dce:	4911      	ldr	r1, [pc, #68]	@ (8011e14 <_dtoa_r+0x5c4>)
 8011dd0:	2000      	movs	r0, #0
 8011dd2:	f7ee fa81 	bl	80002d8 <__aeabi_dsub>
 8011dd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011dda:	f7ee fea7 	bl	8000b2c <__aeabi_dcmplt>
 8011dde:	2800      	cmp	r0, #0
 8011de0:	f040 8095 	bne.w	8011f0e <_dtoa_r+0x6be>
 8011de4:	42a6      	cmp	r6, r4
 8011de6:	f43f af50 	beq.w	8011c8a <_dtoa_r+0x43a>
 8011dea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011dee:	4b0a      	ldr	r3, [pc, #40]	@ (8011e18 <_dtoa_r+0x5c8>)
 8011df0:	2200      	movs	r2, #0
 8011df2:	f7ee fc29 	bl	8000648 <__aeabi_dmul>
 8011df6:	4b08      	ldr	r3, [pc, #32]	@ (8011e18 <_dtoa_r+0x5c8>)
 8011df8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e02:	f7ee fc21 	bl	8000648 <__aeabi_dmul>
 8011e06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e0a:	e7c4      	b.n	8011d96 <_dtoa_r+0x546>
 8011e0c:	08016ef8 	.word	0x08016ef8
 8011e10:	08016ed0 	.word	0x08016ed0
 8011e14:	3ff00000 	.word	0x3ff00000
 8011e18:	40240000 	.word	0x40240000
 8011e1c:	401c0000 	.word	0x401c0000
 8011e20:	40140000 	.word	0x40140000
 8011e24:	3fe00000 	.word	0x3fe00000
 8011e28:	4631      	mov	r1, r6
 8011e2a:	4628      	mov	r0, r5
 8011e2c:	f7ee fc0c 	bl	8000648 <__aeabi_dmul>
 8011e30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011e34:	9415      	str	r4, [sp, #84]	@ 0x54
 8011e36:	4656      	mov	r6, sl
 8011e38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e3c:	f7ee feb4 	bl	8000ba8 <__aeabi_d2iz>
 8011e40:	4605      	mov	r5, r0
 8011e42:	f7ee fb97 	bl	8000574 <__aeabi_i2d>
 8011e46:	4602      	mov	r2, r0
 8011e48:	460b      	mov	r3, r1
 8011e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e4e:	f7ee fa43 	bl	80002d8 <__aeabi_dsub>
 8011e52:	3530      	adds	r5, #48	@ 0x30
 8011e54:	f806 5b01 	strb.w	r5, [r6], #1
 8011e58:	4602      	mov	r2, r0
 8011e5a:	460b      	mov	r3, r1
 8011e5c:	42a6      	cmp	r6, r4
 8011e5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011e62:	f04f 0200 	mov.w	r2, #0
 8011e66:	d124      	bne.n	8011eb2 <_dtoa_r+0x662>
 8011e68:	4bac      	ldr	r3, [pc, #688]	@ (801211c <_dtoa_r+0x8cc>)
 8011e6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011e6e:	f7ee fa35 	bl	80002dc <__adddf3>
 8011e72:	4602      	mov	r2, r0
 8011e74:	460b      	mov	r3, r1
 8011e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e7a:	f7ee fe75 	bl	8000b68 <__aeabi_dcmpgt>
 8011e7e:	2800      	cmp	r0, #0
 8011e80:	d145      	bne.n	8011f0e <_dtoa_r+0x6be>
 8011e82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011e86:	49a5      	ldr	r1, [pc, #660]	@ (801211c <_dtoa_r+0x8cc>)
 8011e88:	2000      	movs	r0, #0
 8011e8a:	f7ee fa25 	bl	80002d8 <__aeabi_dsub>
 8011e8e:	4602      	mov	r2, r0
 8011e90:	460b      	mov	r3, r1
 8011e92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e96:	f7ee fe49 	bl	8000b2c <__aeabi_dcmplt>
 8011e9a:	2800      	cmp	r0, #0
 8011e9c:	f43f aef5 	beq.w	8011c8a <_dtoa_r+0x43a>
 8011ea0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011ea2:	1e73      	subs	r3, r6, #1
 8011ea4:	9315      	str	r3, [sp, #84]	@ 0x54
 8011ea6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011eaa:	2b30      	cmp	r3, #48	@ 0x30
 8011eac:	d0f8      	beq.n	8011ea0 <_dtoa_r+0x650>
 8011eae:	9f04      	ldr	r7, [sp, #16]
 8011eb0:	e73e      	b.n	8011d30 <_dtoa_r+0x4e0>
 8011eb2:	4b9b      	ldr	r3, [pc, #620]	@ (8012120 <_dtoa_r+0x8d0>)
 8011eb4:	f7ee fbc8 	bl	8000648 <__aeabi_dmul>
 8011eb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ebc:	e7bc      	b.n	8011e38 <_dtoa_r+0x5e8>
 8011ebe:	d10c      	bne.n	8011eda <_dtoa_r+0x68a>
 8011ec0:	4b98      	ldr	r3, [pc, #608]	@ (8012124 <_dtoa_r+0x8d4>)
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ec8:	f7ee fbbe 	bl	8000648 <__aeabi_dmul>
 8011ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011ed0:	f7ee fe40 	bl	8000b54 <__aeabi_dcmpge>
 8011ed4:	2800      	cmp	r0, #0
 8011ed6:	f000 8157 	beq.w	8012188 <_dtoa_r+0x938>
 8011eda:	2400      	movs	r4, #0
 8011edc:	4625      	mov	r5, r4
 8011ede:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ee0:	43db      	mvns	r3, r3
 8011ee2:	9304      	str	r3, [sp, #16]
 8011ee4:	4656      	mov	r6, sl
 8011ee6:	2700      	movs	r7, #0
 8011ee8:	4621      	mov	r1, r4
 8011eea:	4658      	mov	r0, fp
 8011eec:	f000 fbb4 	bl	8012658 <_Bfree>
 8011ef0:	2d00      	cmp	r5, #0
 8011ef2:	d0dc      	beq.n	8011eae <_dtoa_r+0x65e>
 8011ef4:	b12f      	cbz	r7, 8011f02 <_dtoa_r+0x6b2>
 8011ef6:	42af      	cmp	r7, r5
 8011ef8:	d003      	beq.n	8011f02 <_dtoa_r+0x6b2>
 8011efa:	4639      	mov	r1, r7
 8011efc:	4658      	mov	r0, fp
 8011efe:	f000 fbab 	bl	8012658 <_Bfree>
 8011f02:	4629      	mov	r1, r5
 8011f04:	4658      	mov	r0, fp
 8011f06:	f000 fba7 	bl	8012658 <_Bfree>
 8011f0a:	e7d0      	b.n	8011eae <_dtoa_r+0x65e>
 8011f0c:	9704      	str	r7, [sp, #16]
 8011f0e:	4633      	mov	r3, r6
 8011f10:	461e      	mov	r6, r3
 8011f12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011f16:	2a39      	cmp	r2, #57	@ 0x39
 8011f18:	d107      	bne.n	8011f2a <_dtoa_r+0x6da>
 8011f1a:	459a      	cmp	sl, r3
 8011f1c:	d1f8      	bne.n	8011f10 <_dtoa_r+0x6c0>
 8011f1e:	9a04      	ldr	r2, [sp, #16]
 8011f20:	3201      	adds	r2, #1
 8011f22:	9204      	str	r2, [sp, #16]
 8011f24:	2230      	movs	r2, #48	@ 0x30
 8011f26:	f88a 2000 	strb.w	r2, [sl]
 8011f2a:	781a      	ldrb	r2, [r3, #0]
 8011f2c:	3201      	adds	r2, #1
 8011f2e:	701a      	strb	r2, [r3, #0]
 8011f30:	e7bd      	b.n	8011eae <_dtoa_r+0x65e>
 8011f32:	4b7b      	ldr	r3, [pc, #492]	@ (8012120 <_dtoa_r+0x8d0>)
 8011f34:	2200      	movs	r2, #0
 8011f36:	f7ee fb87 	bl	8000648 <__aeabi_dmul>
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	4604      	mov	r4, r0
 8011f40:	460d      	mov	r5, r1
 8011f42:	f7ee fde9 	bl	8000b18 <__aeabi_dcmpeq>
 8011f46:	2800      	cmp	r0, #0
 8011f48:	f43f aebb 	beq.w	8011cc2 <_dtoa_r+0x472>
 8011f4c:	e6f0      	b.n	8011d30 <_dtoa_r+0x4e0>
 8011f4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011f50:	2a00      	cmp	r2, #0
 8011f52:	f000 80db 	beq.w	801210c <_dtoa_r+0x8bc>
 8011f56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011f58:	2a01      	cmp	r2, #1
 8011f5a:	f300 80bf 	bgt.w	80120dc <_dtoa_r+0x88c>
 8011f5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011f60:	2a00      	cmp	r2, #0
 8011f62:	f000 80b7 	beq.w	80120d4 <_dtoa_r+0x884>
 8011f66:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011f6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011f6c:	4646      	mov	r6, r8
 8011f6e:	9a08      	ldr	r2, [sp, #32]
 8011f70:	2101      	movs	r1, #1
 8011f72:	441a      	add	r2, r3
 8011f74:	4658      	mov	r0, fp
 8011f76:	4498      	add	r8, r3
 8011f78:	9208      	str	r2, [sp, #32]
 8011f7a:	f000 fc6b 	bl	8012854 <__i2b>
 8011f7e:	4605      	mov	r5, r0
 8011f80:	b15e      	cbz	r6, 8011f9a <_dtoa_r+0x74a>
 8011f82:	9b08      	ldr	r3, [sp, #32]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	dd08      	ble.n	8011f9a <_dtoa_r+0x74a>
 8011f88:	42b3      	cmp	r3, r6
 8011f8a:	9a08      	ldr	r2, [sp, #32]
 8011f8c:	bfa8      	it	ge
 8011f8e:	4633      	movge	r3, r6
 8011f90:	eba8 0803 	sub.w	r8, r8, r3
 8011f94:	1af6      	subs	r6, r6, r3
 8011f96:	1ad3      	subs	r3, r2, r3
 8011f98:	9308      	str	r3, [sp, #32]
 8011f9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f9c:	b1f3      	cbz	r3, 8011fdc <_dtoa_r+0x78c>
 8011f9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	f000 80b7 	beq.w	8012114 <_dtoa_r+0x8c4>
 8011fa6:	b18c      	cbz	r4, 8011fcc <_dtoa_r+0x77c>
 8011fa8:	4629      	mov	r1, r5
 8011faa:	4622      	mov	r2, r4
 8011fac:	4658      	mov	r0, fp
 8011fae:	f000 fd11 	bl	80129d4 <__pow5mult>
 8011fb2:	464a      	mov	r2, r9
 8011fb4:	4601      	mov	r1, r0
 8011fb6:	4605      	mov	r5, r0
 8011fb8:	4658      	mov	r0, fp
 8011fba:	f000 fc61 	bl	8012880 <__multiply>
 8011fbe:	4649      	mov	r1, r9
 8011fc0:	9004      	str	r0, [sp, #16]
 8011fc2:	4658      	mov	r0, fp
 8011fc4:	f000 fb48 	bl	8012658 <_Bfree>
 8011fc8:	9b04      	ldr	r3, [sp, #16]
 8011fca:	4699      	mov	r9, r3
 8011fcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011fce:	1b1a      	subs	r2, r3, r4
 8011fd0:	d004      	beq.n	8011fdc <_dtoa_r+0x78c>
 8011fd2:	4649      	mov	r1, r9
 8011fd4:	4658      	mov	r0, fp
 8011fd6:	f000 fcfd 	bl	80129d4 <__pow5mult>
 8011fda:	4681      	mov	r9, r0
 8011fdc:	2101      	movs	r1, #1
 8011fde:	4658      	mov	r0, fp
 8011fe0:	f000 fc38 	bl	8012854 <__i2b>
 8011fe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011fe6:	4604      	mov	r4, r0
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	f000 81cf 	beq.w	801238c <_dtoa_r+0xb3c>
 8011fee:	461a      	mov	r2, r3
 8011ff0:	4601      	mov	r1, r0
 8011ff2:	4658      	mov	r0, fp
 8011ff4:	f000 fcee 	bl	80129d4 <__pow5mult>
 8011ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ffa:	2b01      	cmp	r3, #1
 8011ffc:	4604      	mov	r4, r0
 8011ffe:	f300 8095 	bgt.w	801212c <_dtoa_r+0x8dc>
 8012002:	9b02      	ldr	r3, [sp, #8]
 8012004:	2b00      	cmp	r3, #0
 8012006:	f040 8087 	bne.w	8012118 <_dtoa_r+0x8c8>
 801200a:	9b03      	ldr	r3, [sp, #12]
 801200c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012010:	2b00      	cmp	r3, #0
 8012012:	f040 8089 	bne.w	8012128 <_dtoa_r+0x8d8>
 8012016:	9b03      	ldr	r3, [sp, #12]
 8012018:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801201c:	0d1b      	lsrs	r3, r3, #20
 801201e:	051b      	lsls	r3, r3, #20
 8012020:	b12b      	cbz	r3, 801202e <_dtoa_r+0x7de>
 8012022:	9b08      	ldr	r3, [sp, #32]
 8012024:	3301      	adds	r3, #1
 8012026:	9308      	str	r3, [sp, #32]
 8012028:	f108 0801 	add.w	r8, r8, #1
 801202c:	2301      	movs	r3, #1
 801202e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012030:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012032:	2b00      	cmp	r3, #0
 8012034:	f000 81b0 	beq.w	8012398 <_dtoa_r+0xb48>
 8012038:	6923      	ldr	r3, [r4, #16]
 801203a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801203e:	6918      	ldr	r0, [r3, #16]
 8012040:	f000 fbbc 	bl	80127bc <__hi0bits>
 8012044:	f1c0 0020 	rsb	r0, r0, #32
 8012048:	9b08      	ldr	r3, [sp, #32]
 801204a:	4418      	add	r0, r3
 801204c:	f010 001f 	ands.w	r0, r0, #31
 8012050:	d077      	beq.n	8012142 <_dtoa_r+0x8f2>
 8012052:	f1c0 0320 	rsb	r3, r0, #32
 8012056:	2b04      	cmp	r3, #4
 8012058:	dd6b      	ble.n	8012132 <_dtoa_r+0x8e2>
 801205a:	9b08      	ldr	r3, [sp, #32]
 801205c:	f1c0 001c 	rsb	r0, r0, #28
 8012060:	4403      	add	r3, r0
 8012062:	4480      	add	r8, r0
 8012064:	4406      	add	r6, r0
 8012066:	9308      	str	r3, [sp, #32]
 8012068:	f1b8 0f00 	cmp.w	r8, #0
 801206c:	dd05      	ble.n	801207a <_dtoa_r+0x82a>
 801206e:	4649      	mov	r1, r9
 8012070:	4642      	mov	r2, r8
 8012072:	4658      	mov	r0, fp
 8012074:	f000 fd08 	bl	8012a88 <__lshift>
 8012078:	4681      	mov	r9, r0
 801207a:	9b08      	ldr	r3, [sp, #32]
 801207c:	2b00      	cmp	r3, #0
 801207e:	dd05      	ble.n	801208c <_dtoa_r+0x83c>
 8012080:	4621      	mov	r1, r4
 8012082:	461a      	mov	r2, r3
 8012084:	4658      	mov	r0, fp
 8012086:	f000 fcff 	bl	8012a88 <__lshift>
 801208a:	4604      	mov	r4, r0
 801208c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801208e:	2b00      	cmp	r3, #0
 8012090:	d059      	beq.n	8012146 <_dtoa_r+0x8f6>
 8012092:	4621      	mov	r1, r4
 8012094:	4648      	mov	r0, r9
 8012096:	f000 fd63 	bl	8012b60 <__mcmp>
 801209a:	2800      	cmp	r0, #0
 801209c:	da53      	bge.n	8012146 <_dtoa_r+0x8f6>
 801209e:	1e7b      	subs	r3, r7, #1
 80120a0:	9304      	str	r3, [sp, #16]
 80120a2:	4649      	mov	r1, r9
 80120a4:	2300      	movs	r3, #0
 80120a6:	220a      	movs	r2, #10
 80120a8:	4658      	mov	r0, fp
 80120aa:	f000 faf7 	bl	801269c <__multadd>
 80120ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80120b0:	4681      	mov	r9, r0
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	f000 8172 	beq.w	801239c <_dtoa_r+0xb4c>
 80120b8:	2300      	movs	r3, #0
 80120ba:	4629      	mov	r1, r5
 80120bc:	220a      	movs	r2, #10
 80120be:	4658      	mov	r0, fp
 80120c0:	f000 faec 	bl	801269c <__multadd>
 80120c4:	9b00      	ldr	r3, [sp, #0]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	4605      	mov	r5, r0
 80120ca:	dc67      	bgt.n	801219c <_dtoa_r+0x94c>
 80120cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120ce:	2b02      	cmp	r3, #2
 80120d0:	dc41      	bgt.n	8012156 <_dtoa_r+0x906>
 80120d2:	e063      	b.n	801219c <_dtoa_r+0x94c>
 80120d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80120d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80120da:	e746      	b.n	8011f6a <_dtoa_r+0x71a>
 80120dc:	9b07      	ldr	r3, [sp, #28]
 80120de:	1e5c      	subs	r4, r3, #1
 80120e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80120e2:	42a3      	cmp	r3, r4
 80120e4:	bfbf      	itttt	lt
 80120e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80120e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80120ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80120ec:	1ae3      	sublt	r3, r4, r3
 80120ee:	bfb4      	ite	lt
 80120f0:	18d2      	addlt	r2, r2, r3
 80120f2:	1b1c      	subge	r4, r3, r4
 80120f4:	9b07      	ldr	r3, [sp, #28]
 80120f6:	bfbc      	itt	lt
 80120f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80120fa:	2400      	movlt	r4, #0
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	bfb5      	itete	lt
 8012100:	eba8 0603 	sublt.w	r6, r8, r3
 8012104:	9b07      	ldrge	r3, [sp, #28]
 8012106:	2300      	movlt	r3, #0
 8012108:	4646      	movge	r6, r8
 801210a:	e730      	b.n	8011f6e <_dtoa_r+0x71e>
 801210c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801210e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012110:	4646      	mov	r6, r8
 8012112:	e735      	b.n	8011f80 <_dtoa_r+0x730>
 8012114:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012116:	e75c      	b.n	8011fd2 <_dtoa_r+0x782>
 8012118:	2300      	movs	r3, #0
 801211a:	e788      	b.n	801202e <_dtoa_r+0x7de>
 801211c:	3fe00000 	.word	0x3fe00000
 8012120:	40240000 	.word	0x40240000
 8012124:	40140000 	.word	0x40140000
 8012128:	9b02      	ldr	r3, [sp, #8]
 801212a:	e780      	b.n	801202e <_dtoa_r+0x7de>
 801212c:	2300      	movs	r3, #0
 801212e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012130:	e782      	b.n	8012038 <_dtoa_r+0x7e8>
 8012132:	d099      	beq.n	8012068 <_dtoa_r+0x818>
 8012134:	9a08      	ldr	r2, [sp, #32]
 8012136:	331c      	adds	r3, #28
 8012138:	441a      	add	r2, r3
 801213a:	4498      	add	r8, r3
 801213c:	441e      	add	r6, r3
 801213e:	9208      	str	r2, [sp, #32]
 8012140:	e792      	b.n	8012068 <_dtoa_r+0x818>
 8012142:	4603      	mov	r3, r0
 8012144:	e7f6      	b.n	8012134 <_dtoa_r+0x8e4>
 8012146:	9b07      	ldr	r3, [sp, #28]
 8012148:	9704      	str	r7, [sp, #16]
 801214a:	2b00      	cmp	r3, #0
 801214c:	dc20      	bgt.n	8012190 <_dtoa_r+0x940>
 801214e:	9300      	str	r3, [sp, #0]
 8012150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012152:	2b02      	cmp	r3, #2
 8012154:	dd1e      	ble.n	8012194 <_dtoa_r+0x944>
 8012156:	9b00      	ldr	r3, [sp, #0]
 8012158:	2b00      	cmp	r3, #0
 801215a:	f47f aec0 	bne.w	8011ede <_dtoa_r+0x68e>
 801215e:	4621      	mov	r1, r4
 8012160:	2205      	movs	r2, #5
 8012162:	4658      	mov	r0, fp
 8012164:	f000 fa9a 	bl	801269c <__multadd>
 8012168:	4601      	mov	r1, r0
 801216a:	4604      	mov	r4, r0
 801216c:	4648      	mov	r0, r9
 801216e:	f000 fcf7 	bl	8012b60 <__mcmp>
 8012172:	2800      	cmp	r0, #0
 8012174:	f77f aeb3 	ble.w	8011ede <_dtoa_r+0x68e>
 8012178:	4656      	mov	r6, sl
 801217a:	2331      	movs	r3, #49	@ 0x31
 801217c:	f806 3b01 	strb.w	r3, [r6], #1
 8012180:	9b04      	ldr	r3, [sp, #16]
 8012182:	3301      	adds	r3, #1
 8012184:	9304      	str	r3, [sp, #16]
 8012186:	e6ae      	b.n	8011ee6 <_dtoa_r+0x696>
 8012188:	9c07      	ldr	r4, [sp, #28]
 801218a:	9704      	str	r7, [sp, #16]
 801218c:	4625      	mov	r5, r4
 801218e:	e7f3      	b.n	8012178 <_dtoa_r+0x928>
 8012190:	9b07      	ldr	r3, [sp, #28]
 8012192:	9300      	str	r3, [sp, #0]
 8012194:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012196:	2b00      	cmp	r3, #0
 8012198:	f000 8104 	beq.w	80123a4 <_dtoa_r+0xb54>
 801219c:	2e00      	cmp	r6, #0
 801219e:	dd05      	ble.n	80121ac <_dtoa_r+0x95c>
 80121a0:	4629      	mov	r1, r5
 80121a2:	4632      	mov	r2, r6
 80121a4:	4658      	mov	r0, fp
 80121a6:	f000 fc6f 	bl	8012a88 <__lshift>
 80121aa:	4605      	mov	r5, r0
 80121ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d05a      	beq.n	8012268 <_dtoa_r+0xa18>
 80121b2:	6869      	ldr	r1, [r5, #4]
 80121b4:	4658      	mov	r0, fp
 80121b6:	f000 fa0f 	bl	80125d8 <_Balloc>
 80121ba:	4606      	mov	r6, r0
 80121bc:	b928      	cbnz	r0, 80121ca <_dtoa_r+0x97a>
 80121be:	4b84      	ldr	r3, [pc, #528]	@ (80123d0 <_dtoa_r+0xb80>)
 80121c0:	4602      	mov	r2, r0
 80121c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80121c6:	f7ff bb5a 	b.w	801187e <_dtoa_r+0x2e>
 80121ca:	692a      	ldr	r2, [r5, #16]
 80121cc:	3202      	adds	r2, #2
 80121ce:	0092      	lsls	r2, r2, #2
 80121d0:	f105 010c 	add.w	r1, r5, #12
 80121d4:	300c      	adds	r0, #12
 80121d6:	f7ff fa9c 	bl	8011712 <memcpy>
 80121da:	2201      	movs	r2, #1
 80121dc:	4631      	mov	r1, r6
 80121de:	4658      	mov	r0, fp
 80121e0:	f000 fc52 	bl	8012a88 <__lshift>
 80121e4:	f10a 0301 	add.w	r3, sl, #1
 80121e8:	9307      	str	r3, [sp, #28]
 80121ea:	9b00      	ldr	r3, [sp, #0]
 80121ec:	4453      	add	r3, sl
 80121ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80121f0:	9b02      	ldr	r3, [sp, #8]
 80121f2:	f003 0301 	and.w	r3, r3, #1
 80121f6:	462f      	mov	r7, r5
 80121f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80121fa:	4605      	mov	r5, r0
 80121fc:	9b07      	ldr	r3, [sp, #28]
 80121fe:	4621      	mov	r1, r4
 8012200:	3b01      	subs	r3, #1
 8012202:	4648      	mov	r0, r9
 8012204:	9300      	str	r3, [sp, #0]
 8012206:	f7ff fa99 	bl	801173c <quorem>
 801220a:	4639      	mov	r1, r7
 801220c:	9002      	str	r0, [sp, #8]
 801220e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012212:	4648      	mov	r0, r9
 8012214:	f000 fca4 	bl	8012b60 <__mcmp>
 8012218:	462a      	mov	r2, r5
 801221a:	9008      	str	r0, [sp, #32]
 801221c:	4621      	mov	r1, r4
 801221e:	4658      	mov	r0, fp
 8012220:	f000 fcba 	bl	8012b98 <__mdiff>
 8012224:	68c2      	ldr	r2, [r0, #12]
 8012226:	4606      	mov	r6, r0
 8012228:	bb02      	cbnz	r2, 801226c <_dtoa_r+0xa1c>
 801222a:	4601      	mov	r1, r0
 801222c:	4648      	mov	r0, r9
 801222e:	f000 fc97 	bl	8012b60 <__mcmp>
 8012232:	4602      	mov	r2, r0
 8012234:	4631      	mov	r1, r6
 8012236:	4658      	mov	r0, fp
 8012238:	920e      	str	r2, [sp, #56]	@ 0x38
 801223a:	f000 fa0d 	bl	8012658 <_Bfree>
 801223e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012240:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012242:	9e07      	ldr	r6, [sp, #28]
 8012244:	ea43 0102 	orr.w	r1, r3, r2
 8012248:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801224a:	4319      	orrs	r1, r3
 801224c:	d110      	bne.n	8012270 <_dtoa_r+0xa20>
 801224e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012252:	d029      	beq.n	80122a8 <_dtoa_r+0xa58>
 8012254:	9b08      	ldr	r3, [sp, #32]
 8012256:	2b00      	cmp	r3, #0
 8012258:	dd02      	ble.n	8012260 <_dtoa_r+0xa10>
 801225a:	9b02      	ldr	r3, [sp, #8]
 801225c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012260:	9b00      	ldr	r3, [sp, #0]
 8012262:	f883 8000 	strb.w	r8, [r3]
 8012266:	e63f      	b.n	8011ee8 <_dtoa_r+0x698>
 8012268:	4628      	mov	r0, r5
 801226a:	e7bb      	b.n	80121e4 <_dtoa_r+0x994>
 801226c:	2201      	movs	r2, #1
 801226e:	e7e1      	b.n	8012234 <_dtoa_r+0x9e4>
 8012270:	9b08      	ldr	r3, [sp, #32]
 8012272:	2b00      	cmp	r3, #0
 8012274:	db04      	blt.n	8012280 <_dtoa_r+0xa30>
 8012276:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012278:	430b      	orrs	r3, r1
 801227a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801227c:	430b      	orrs	r3, r1
 801227e:	d120      	bne.n	80122c2 <_dtoa_r+0xa72>
 8012280:	2a00      	cmp	r2, #0
 8012282:	dded      	ble.n	8012260 <_dtoa_r+0xa10>
 8012284:	4649      	mov	r1, r9
 8012286:	2201      	movs	r2, #1
 8012288:	4658      	mov	r0, fp
 801228a:	f000 fbfd 	bl	8012a88 <__lshift>
 801228e:	4621      	mov	r1, r4
 8012290:	4681      	mov	r9, r0
 8012292:	f000 fc65 	bl	8012b60 <__mcmp>
 8012296:	2800      	cmp	r0, #0
 8012298:	dc03      	bgt.n	80122a2 <_dtoa_r+0xa52>
 801229a:	d1e1      	bne.n	8012260 <_dtoa_r+0xa10>
 801229c:	f018 0f01 	tst.w	r8, #1
 80122a0:	d0de      	beq.n	8012260 <_dtoa_r+0xa10>
 80122a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80122a6:	d1d8      	bne.n	801225a <_dtoa_r+0xa0a>
 80122a8:	9a00      	ldr	r2, [sp, #0]
 80122aa:	2339      	movs	r3, #57	@ 0x39
 80122ac:	7013      	strb	r3, [r2, #0]
 80122ae:	4633      	mov	r3, r6
 80122b0:	461e      	mov	r6, r3
 80122b2:	3b01      	subs	r3, #1
 80122b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80122b8:	2a39      	cmp	r2, #57	@ 0x39
 80122ba:	d052      	beq.n	8012362 <_dtoa_r+0xb12>
 80122bc:	3201      	adds	r2, #1
 80122be:	701a      	strb	r2, [r3, #0]
 80122c0:	e612      	b.n	8011ee8 <_dtoa_r+0x698>
 80122c2:	2a00      	cmp	r2, #0
 80122c4:	dd07      	ble.n	80122d6 <_dtoa_r+0xa86>
 80122c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80122ca:	d0ed      	beq.n	80122a8 <_dtoa_r+0xa58>
 80122cc:	9a00      	ldr	r2, [sp, #0]
 80122ce:	f108 0301 	add.w	r3, r8, #1
 80122d2:	7013      	strb	r3, [r2, #0]
 80122d4:	e608      	b.n	8011ee8 <_dtoa_r+0x698>
 80122d6:	9b07      	ldr	r3, [sp, #28]
 80122d8:	9a07      	ldr	r2, [sp, #28]
 80122da:	f803 8c01 	strb.w	r8, [r3, #-1]
 80122de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80122e0:	4293      	cmp	r3, r2
 80122e2:	d028      	beq.n	8012336 <_dtoa_r+0xae6>
 80122e4:	4649      	mov	r1, r9
 80122e6:	2300      	movs	r3, #0
 80122e8:	220a      	movs	r2, #10
 80122ea:	4658      	mov	r0, fp
 80122ec:	f000 f9d6 	bl	801269c <__multadd>
 80122f0:	42af      	cmp	r7, r5
 80122f2:	4681      	mov	r9, r0
 80122f4:	f04f 0300 	mov.w	r3, #0
 80122f8:	f04f 020a 	mov.w	r2, #10
 80122fc:	4639      	mov	r1, r7
 80122fe:	4658      	mov	r0, fp
 8012300:	d107      	bne.n	8012312 <_dtoa_r+0xac2>
 8012302:	f000 f9cb 	bl	801269c <__multadd>
 8012306:	4607      	mov	r7, r0
 8012308:	4605      	mov	r5, r0
 801230a:	9b07      	ldr	r3, [sp, #28]
 801230c:	3301      	adds	r3, #1
 801230e:	9307      	str	r3, [sp, #28]
 8012310:	e774      	b.n	80121fc <_dtoa_r+0x9ac>
 8012312:	f000 f9c3 	bl	801269c <__multadd>
 8012316:	4629      	mov	r1, r5
 8012318:	4607      	mov	r7, r0
 801231a:	2300      	movs	r3, #0
 801231c:	220a      	movs	r2, #10
 801231e:	4658      	mov	r0, fp
 8012320:	f000 f9bc 	bl	801269c <__multadd>
 8012324:	4605      	mov	r5, r0
 8012326:	e7f0      	b.n	801230a <_dtoa_r+0xaba>
 8012328:	9b00      	ldr	r3, [sp, #0]
 801232a:	2b00      	cmp	r3, #0
 801232c:	bfcc      	ite	gt
 801232e:	461e      	movgt	r6, r3
 8012330:	2601      	movle	r6, #1
 8012332:	4456      	add	r6, sl
 8012334:	2700      	movs	r7, #0
 8012336:	4649      	mov	r1, r9
 8012338:	2201      	movs	r2, #1
 801233a:	4658      	mov	r0, fp
 801233c:	f000 fba4 	bl	8012a88 <__lshift>
 8012340:	4621      	mov	r1, r4
 8012342:	4681      	mov	r9, r0
 8012344:	f000 fc0c 	bl	8012b60 <__mcmp>
 8012348:	2800      	cmp	r0, #0
 801234a:	dcb0      	bgt.n	80122ae <_dtoa_r+0xa5e>
 801234c:	d102      	bne.n	8012354 <_dtoa_r+0xb04>
 801234e:	f018 0f01 	tst.w	r8, #1
 8012352:	d1ac      	bne.n	80122ae <_dtoa_r+0xa5e>
 8012354:	4633      	mov	r3, r6
 8012356:	461e      	mov	r6, r3
 8012358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801235c:	2a30      	cmp	r2, #48	@ 0x30
 801235e:	d0fa      	beq.n	8012356 <_dtoa_r+0xb06>
 8012360:	e5c2      	b.n	8011ee8 <_dtoa_r+0x698>
 8012362:	459a      	cmp	sl, r3
 8012364:	d1a4      	bne.n	80122b0 <_dtoa_r+0xa60>
 8012366:	9b04      	ldr	r3, [sp, #16]
 8012368:	3301      	adds	r3, #1
 801236a:	9304      	str	r3, [sp, #16]
 801236c:	2331      	movs	r3, #49	@ 0x31
 801236e:	f88a 3000 	strb.w	r3, [sl]
 8012372:	e5b9      	b.n	8011ee8 <_dtoa_r+0x698>
 8012374:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012376:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80123d4 <_dtoa_r+0xb84>
 801237a:	b11b      	cbz	r3, 8012384 <_dtoa_r+0xb34>
 801237c:	f10a 0308 	add.w	r3, sl, #8
 8012380:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012382:	6013      	str	r3, [r2, #0]
 8012384:	4650      	mov	r0, sl
 8012386:	b019      	add	sp, #100	@ 0x64
 8012388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801238c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801238e:	2b01      	cmp	r3, #1
 8012390:	f77f ae37 	ble.w	8012002 <_dtoa_r+0x7b2>
 8012394:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012396:	930a      	str	r3, [sp, #40]	@ 0x28
 8012398:	2001      	movs	r0, #1
 801239a:	e655      	b.n	8012048 <_dtoa_r+0x7f8>
 801239c:	9b00      	ldr	r3, [sp, #0]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	f77f aed6 	ble.w	8012150 <_dtoa_r+0x900>
 80123a4:	4656      	mov	r6, sl
 80123a6:	4621      	mov	r1, r4
 80123a8:	4648      	mov	r0, r9
 80123aa:	f7ff f9c7 	bl	801173c <quorem>
 80123ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80123b2:	f806 8b01 	strb.w	r8, [r6], #1
 80123b6:	9b00      	ldr	r3, [sp, #0]
 80123b8:	eba6 020a 	sub.w	r2, r6, sl
 80123bc:	4293      	cmp	r3, r2
 80123be:	ddb3      	ble.n	8012328 <_dtoa_r+0xad8>
 80123c0:	4649      	mov	r1, r9
 80123c2:	2300      	movs	r3, #0
 80123c4:	220a      	movs	r2, #10
 80123c6:	4658      	mov	r0, fp
 80123c8:	f000 f968 	bl	801269c <__multadd>
 80123cc:	4681      	mov	r9, r0
 80123ce:	e7ea      	b.n	80123a6 <_dtoa_r+0xb56>
 80123d0:	08016e53 	.word	0x08016e53
 80123d4:	08016dd7 	.word	0x08016dd7

080123d8 <_free_r>:
 80123d8:	b538      	push	{r3, r4, r5, lr}
 80123da:	4605      	mov	r5, r0
 80123dc:	2900      	cmp	r1, #0
 80123de:	d041      	beq.n	8012464 <_free_r+0x8c>
 80123e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80123e4:	1f0c      	subs	r4, r1, #4
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	bfb8      	it	lt
 80123ea:	18e4      	addlt	r4, r4, r3
 80123ec:	f000 f8e8 	bl	80125c0 <__malloc_lock>
 80123f0:	4a1d      	ldr	r2, [pc, #116]	@ (8012468 <_free_r+0x90>)
 80123f2:	6813      	ldr	r3, [r2, #0]
 80123f4:	b933      	cbnz	r3, 8012404 <_free_r+0x2c>
 80123f6:	6063      	str	r3, [r4, #4]
 80123f8:	6014      	str	r4, [r2, #0]
 80123fa:	4628      	mov	r0, r5
 80123fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012400:	f000 b8e4 	b.w	80125cc <__malloc_unlock>
 8012404:	42a3      	cmp	r3, r4
 8012406:	d908      	bls.n	801241a <_free_r+0x42>
 8012408:	6820      	ldr	r0, [r4, #0]
 801240a:	1821      	adds	r1, r4, r0
 801240c:	428b      	cmp	r3, r1
 801240e:	bf01      	itttt	eq
 8012410:	6819      	ldreq	r1, [r3, #0]
 8012412:	685b      	ldreq	r3, [r3, #4]
 8012414:	1809      	addeq	r1, r1, r0
 8012416:	6021      	streq	r1, [r4, #0]
 8012418:	e7ed      	b.n	80123f6 <_free_r+0x1e>
 801241a:	461a      	mov	r2, r3
 801241c:	685b      	ldr	r3, [r3, #4]
 801241e:	b10b      	cbz	r3, 8012424 <_free_r+0x4c>
 8012420:	42a3      	cmp	r3, r4
 8012422:	d9fa      	bls.n	801241a <_free_r+0x42>
 8012424:	6811      	ldr	r1, [r2, #0]
 8012426:	1850      	adds	r0, r2, r1
 8012428:	42a0      	cmp	r0, r4
 801242a:	d10b      	bne.n	8012444 <_free_r+0x6c>
 801242c:	6820      	ldr	r0, [r4, #0]
 801242e:	4401      	add	r1, r0
 8012430:	1850      	adds	r0, r2, r1
 8012432:	4283      	cmp	r3, r0
 8012434:	6011      	str	r1, [r2, #0]
 8012436:	d1e0      	bne.n	80123fa <_free_r+0x22>
 8012438:	6818      	ldr	r0, [r3, #0]
 801243a:	685b      	ldr	r3, [r3, #4]
 801243c:	6053      	str	r3, [r2, #4]
 801243e:	4408      	add	r0, r1
 8012440:	6010      	str	r0, [r2, #0]
 8012442:	e7da      	b.n	80123fa <_free_r+0x22>
 8012444:	d902      	bls.n	801244c <_free_r+0x74>
 8012446:	230c      	movs	r3, #12
 8012448:	602b      	str	r3, [r5, #0]
 801244a:	e7d6      	b.n	80123fa <_free_r+0x22>
 801244c:	6820      	ldr	r0, [r4, #0]
 801244e:	1821      	adds	r1, r4, r0
 8012450:	428b      	cmp	r3, r1
 8012452:	bf04      	itt	eq
 8012454:	6819      	ldreq	r1, [r3, #0]
 8012456:	685b      	ldreq	r3, [r3, #4]
 8012458:	6063      	str	r3, [r4, #4]
 801245a:	bf04      	itt	eq
 801245c:	1809      	addeq	r1, r1, r0
 801245e:	6021      	streq	r1, [r4, #0]
 8012460:	6054      	str	r4, [r2, #4]
 8012462:	e7ca      	b.n	80123fa <_free_r+0x22>
 8012464:	bd38      	pop	{r3, r4, r5, pc}
 8012466:	bf00      	nop
 8012468:	20002674 	.word	0x20002674

0801246c <malloc>:
 801246c:	4b02      	ldr	r3, [pc, #8]	@ (8012478 <malloc+0xc>)
 801246e:	4601      	mov	r1, r0
 8012470:	6818      	ldr	r0, [r3, #0]
 8012472:	f000 b825 	b.w	80124c0 <_malloc_r>
 8012476:	bf00      	nop
 8012478:	200001ac 	.word	0x200001ac

0801247c <sbrk_aligned>:
 801247c:	b570      	push	{r4, r5, r6, lr}
 801247e:	4e0f      	ldr	r6, [pc, #60]	@ (80124bc <sbrk_aligned+0x40>)
 8012480:	460c      	mov	r4, r1
 8012482:	6831      	ldr	r1, [r6, #0]
 8012484:	4605      	mov	r5, r0
 8012486:	b911      	cbnz	r1, 801248e <sbrk_aligned+0x12>
 8012488:	f002 f988 	bl	801479c <_sbrk_r>
 801248c:	6030      	str	r0, [r6, #0]
 801248e:	4621      	mov	r1, r4
 8012490:	4628      	mov	r0, r5
 8012492:	f002 f983 	bl	801479c <_sbrk_r>
 8012496:	1c43      	adds	r3, r0, #1
 8012498:	d103      	bne.n	80124a2 <sbrk_aligned+0x26>
 801249a:	f04f 34ff 	mov.w	r4, #4294967295
 801249e:	4620      	mov	r0, r4
 80124a0:	bd70      	pop	{r4, r5, r6, pc}
 80124a2:	1cc4      	adds	r4, r0, #3
 80124a4:	f024 0403 	bic.w	r4, r4, #3
 80124a8:	42a0      	cmp	r0, r4
 80124aa:	d0f8      	beq.n	801249e <sbrk_aligned+0x22>
 80124ac:	1a21      	subs	r1, r4, r0
 80124ae:	4628      	mov	r0, r5
 80124b0:	f002 f974 	bl	801479c <_sbrk_r>
 80124b4:	3001      	adds	r0, #1
 80124b6:	d1f2      	bne.n	801249e <sbrk_aligned+0x22>
 80124b8:	e7ef      	b.n	801249a <sbrk_aligned+0x1e>
 80124ba:	bf00      	nop
 80124bc:	20002670 	.word	0x20002670

080124c0 <_malloc_r>:
 80124c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124c4:	1ccd      	adds	r5, r1, #3
 80124c6:	f025 0503 	bic.w	r5, r5, #3
 80124ca:	3508      	adds	r5, #8
 80124cc:	2d0c      	cmp	r5, #12
 80124ce:	bf38      	it	cc
 80124d0:	250c      	movcc	r5, #12
 80124d2:	2d00      	cmp	r5, #0
 80124d4:	4606      	mov	r6, r0
 80124d6:	db01      	blt.n	80124dc <_malloc_r+0x1c>
 80124d8:	42a9      	cmp	r1, r5
 80124da:	d904      	bls.n	80124e6 <_malloc_r+0x26>
 80124dc:	230c      	movs	r3, #12
 80124de:	6033      	str	r3, [r6, #0]
 80124e0:	2000      	movs	r0, #0
 80124e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80125bc <_malloc_r+0xfc>
 80124ea:	f000 f869 	bl	80125c0 <__malloc_lock>
 80124ee:	f8d8 3000 	ldr.w	r3, [r8]
 80124f2:	461c      	mov	r4, r3
 80124f4:	bb44      	cbnz	r4, 8012548 <_malloc_r+0x88>
 80124f6:	4629      	mov	r1, r5
 80124f8:	4630      	mov	r0, r6
 80124fa:	f7ff ffbf 	bl	801247c <sbrk_aligned>
 80124fe:	1c43      	adds	r3, r0, #1
 8012500:	4604      	mov	r4, r0
 8012502:	d158      	bne.n	80125b6 <_malloc_r+0xf6>
 8012504:	f8d8 4000 	ldr.w	r4, [r8]
 8012508:	4627      	mov	r7, r4
 801250a:	2f00      	cmp	r7, #0
 801250c:	d143      	bne.n	8012596 <_malloc_r+0xd6>
 801250e:	2c00      	cmp	r4, #0
 8012510:	d04b      	beq.n	80125aa <_malloc_r+0xea>
 8012512:	6823      	ldr	r3, [r4, #0]
 8012514:	4639      	mov	r1, r7
 8012516:	4630      	mov	r0, r6
 8012518:	eb04 0903 	add.w	r9, r4, r3
 801251c:	f002 f93e 	bl	801479c <_sbrk_r>
 8012520:	4581      	cmp	r9, r0
 8012522:	d142      	bne.n	80125aa <_malloc_r+0xea>
 8012524:	6821      	ldr	r1, [r4, #0]
 8012526:	1a6d      	subs	r5, r5, r1
 8012528:	4629      	mov	r1, r5
 801252a:	4630      	mov	r0, r6
 801252c:	f7ff ffa6 	bl	801247c <sbrk_aligned>
 8012530:	3001      	adds	r0, #1
 8012532:	d03a      	beq.n	80125aa <_malloc_r+0xea>
 8012534:	6823      	ldr	r3, [r4, #0]
 8012536:	442b      	add	r3, r5
 8012538:	6023      	str	r3, [r4, #0]
 801253a:	f8d8 3000 	ldr.w	r3, [r8]
 801253e:	685a      	ldr	r2, [r3, #4]
 8012540:	bb62      	cbnz	r2, 801259c <_malloc_r+0xdc>
 8012542:	f8c8 7000 	str.w	r7, [r8]
 8012546:	e00f      	b.n	8012568 <_malloc_r+0xa8>
 8012548:	6822      	ldr	r2, [r4, #0]
 801254a:	1b52      	subs	r2, r2, r5
 801254c:	d420      	bmi.n	8012590 <_malloc_r+0xd0>
 801254e:	2a0b      	cmp	r2, #11
 8012550:	d917      	bls.n	8012582 <_malloc_r+0xc2>
 8012552:	1961      	adds	r1, r4, r5
 8012554:	42a3      	cmp	r3, r4
 8012556:	6025      	str	r5, [r4, #0]
 8012558:	bf18      	it	ne
 801255a:	6059      	strne	r1, [r3, #4]
 801255c:	6863      	ldr	r3, [r4, #4]
 801255e:	bf08      	it	eq
 8012560:	f8c8 1000 	streq.w	r1, [r8]
 8012564:	5162      	str	r2, [r4, r5]
 8012566:	604b      	str	r3, [r1, #4]
 8012568:	4630      	mov	r0, r6
 801256a:	f000 f82f 	bl	80125cc <__malloc_unlock>
 801256e:	f104 000b 	add.w	r0, r4, #11
 8012572:	1d23      	adds	r3, r4, #4
 8012574:	f020 0007 	bic.w	r0, r0, #7
 8012578:	1ac2      	subs	r2, r0, r3
 801257a:	bf1c      	itt	ne
 801257c:	1a1b      	subne	r3, r3, r0
 801257e:	50a3      	strne	r3, [r4, r2]
 8012580:	e7af      	b.n	80124e2 <_malloc_r+0x22>
 8012582:	6862      	ldr	r2, [r4, #4]
 8012584:	42a3      	cmp	r3, r4
 8012586:	bf0c      	ite	eq
 8012588:	f8c8 2000 	streq.w	r2, [r8]
 801258c:	605a      	strne	r2, [r3, #4]
 801258e:	e7eb      	b.n	8012568 <_malloc_r+0xa8>
 8012590:	4623      	mov	r3, r4
 8012592:	6864      	ldr	r4, [r4, #4]
 8012594:	e7ae      	b.n	80124f4 <_malloc_r+0x34>
 8012596:	463c      	mov	r4, r7
 8012598:	687f      	ldr	r7, [r7, #4]
 801259a:	e7b6      	b.n	801250a <_malloc_r+0x4a>
 801259c:	461a      	mov	r2, r3
 801259e:	685b      	ldr	r3, [r3, #4]
 80125a0:	42a3      	cmp	r3, r4
 80125a2:	d1fb      	bne.n	801259c <_malloc_r+0xdc>
 80125a4:	2300      	movs	r3, #0
 80125a6:	6053      	str	r3, [r2, #4]
 80125a8:	e7de      	b.n	8012568 <_malloc_r+0xa8>
 80125aa:	230c      	movs	r3, #12
 80125ac:	6033      	str	r3, [r6, #0]
 80125ae:	4630      	mov	r0, r6
 80125b0:	f000 f80c 	bl	80125cc <__malloc_unlock>
 80125b4:	e794      	b.n	80124e0 <_malloc_r+0x20>
 80125b6:	6005      	str	r5, [r0, #0]
 80125b8:	e7d6      	b.n	8012568 <_malloc_r+0xa8>
 80125ba:	bf00      	nop
 80125bc:	20002674 	.word	0x20002674

080125c0 <__malloc_lock>:
 80125c0:	4801      	ldr	r0, [pc, #4]	@ (80125c8 <__malloc_lock+0x8>)
 80125c2:	f7ff b8a4 	b.w	801170e <__retarget_lock_acquire_recursive>
 80125c6:	bf00      	nop
 80125c8:	2000266c 	.word	0x2000266c

080125cc <__malloc_unlock>:
 80125cc:	4801      	ldr	r0, [pc, #4]	@ (80125d4 <__malloc_unlock+0x8>)
 80125ce:	f7ff b89f 	b.w	8011710 <__retarget_lock_release_recursive>
 80125d2:	bf00      	nop
 80125d4:	2000266c 	.word	0x2000266c

080125d8 <_Balloc>:
 80125d8:	b570      	push	{r4, r5, r6, lr}
 80125da:	69c6      	ldr	r6, [r0, #28]
 80125dc:	4604      	mov	r4, r0
 80125de:	460d      	mov	r5, r1
 80125e0:	b976      	cbnz	r6, 8012600 <_Balloc+0x28>
 80125e2:	2010      	movs	r0, #16
 80125e4:	f7ff ff42 	bl	801246c <malloc>
 80125e8:	4602      	mov	r2, r0
 80125ea:	61e0      	str	r0, [r4, #28]
 80125ec:	b920      	cbnz	r0, 80125f8 <_Balloc+0x20>
 80125ee:	4b18      	ldr	r3, [pc, #96]	@ (8012650 <_Balloc+0x78>)
 80125f0:	4818      	ldr	r0, [pc, #96]	@ (8012654 <_Balloc+0x7c>)
 80125f2:	216b      	movs	r1, #107	@ 0x6b
 80125f4:	f002 f8ec 	bl	80147d0 <__assert_func>
 80125f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80125fc:	6006      	str	r6, [r0, #0]
 80125fe:	60c6      	str	r6, [r0, #12]
 8012600:	69e6      	ldr	r6, [r4, #28]
 8012602:	68f3      	ldr	r3, [r6, #12]
 8012604:	b183      	cbz	r3, 8012628 <_Balloc+0x50>
 8012606:	69e3      	ldr	r3, [r4, #28]
 8012608:	68db      	ldr	r3, [r3, #12]
 801260a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801260e:	b9b8      	cbnz	r0, 8012640 <_Balloc+0x68>
 8012610:	2101      	movs	r1, #1
 8012612:	fa01 f605 	lsl.w	r6, r1, r5
 8012616:	1d72      	adds	r2, r6, #5
 8012618:	0092      	lsls	r2, r2, #2
 801261a:	4620      	mov	r0, r4
 801261c:	f002 f8f6 	bl	801480c <_calloc_r>
 8012620:	b160      	cbz	r0, 801263c <_Balloc+0x64>
 8012622:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012626:	e00e      	b.n	8012646 <_Balloc+0x6e>
 8012628:	2221      	movs	r2, #33	@ 0x21
 801262a:	2104      	movs	r1, #4
 801262c:	4620      	mov	r0, r4
 801262e:	f002 f8ed 	bl	801480c <_calloc_r>
 8012632:	69e3      	ldr	r3, [r4, #28]
 8012634:	60f0      	str	r0, [r6, #12]
 8012636:	68db      	ldr	r3, [r3, #12]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d1e4      	bne.n	8012606 <_Balloc+0x2e>
 801263c:	2000      	movs	r0, #0
 801263e:	bd70      	pop	{r4, r5, r6, pc}
 8012640:	6802      	ldr	r2, [r0, #0]
 8012642:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012646:	2300      	movs	r3, #0
 8012648:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801264c:	e7f7      	b.n	801263e <_Balloc+0x66>
 801264e:	bf00      	nop
 8012650:	08016de4 	.word	0x08016de4
 8012654:	08016e64 	.word	0x08016e64

08012658 <_Bfree>:
 8012658:	b570      	push	{r4, r5, r6, lr}
 801265a:	69c6      	ldr	r6, [r0, #28]
 801265c:	4605      	mov	r5, r0
 801265e:	460c      	mov	r4, r1
 8012660:	b976      	cbnz	r6, 8012680 <_Bfree+0x28>
 8012662:	2010      	movs	r0, #16
 8012664:	f7ff ff02 	bl	801246c <malloc>
 8012668:	4602      	mov	r2, r0
 801266a:	61e8      	str	r0, [r5, #28]
 801266c:	b920      	cbnz	r0, 8012678 <_Bfree+0x20>
 801266e:	4b09      	ldr	r3, [pc, #36]	@ (8012694 <_Bfree+0x3c>)
 8012670:	4809      	ldr	r0, [pc, #36]	@ (8012698 <_Bfree+0x40>)
 8012672:	218f      	movs	r1, #143	@ 0x8f
 8012674:	f002 f8ac 	bl	80147d0 <__assert_func>
 8012678:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801267c:	6006      	str	r6, [r0, #0]
 801267e:	60c6      	str	r6, [r0, #12]
 8012680:	b13c      	cbz	r4, 8012692 <_Bfree+0x3a>
 8012682:	69eb      	ldr	r3, [r5, #28]
 8012684:	6862      	ldr	r2, [r4, #4]
 8012686:	68db      	ldr	r3, [r3, #12]
 8012688:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801268c:	6021      	str	r1, [r4, #0]
 801268e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012692:	bd70      	pop	{r4, r5, r6, pc}
 8012694:	08016de4 	.word	0x08016de4
 8012698:	08016e64 	.word	0x08016e64

0801269c <__multadd>:
 801269c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126a0:	690d      	ldr	r5, [r1, #16]
 80126a2:	4607      	mov	r7, r0
 80126a4:	460c      	mov	r4, r1
 80126a6:	461e      	mov	r6, r3
 80126a8:	f101 0c14 	add.w	ip, r1, #20
 80126ac:	2000      	movs	r0, #0
 80126ae:	f8dc 3000 	ldr.w	r3, [ip]
 80126b2:	b299      	uxth	r1, r3
 80126b4:	fb02 6101 	mla	r1, r2, r1, r6
 80126b8:	0c1e      	lsrs	r6, r3, #16
 80126ba:	0c0b      	lsrs	r3, r1, #16
 80126bc:	fb02 3306 	mla	r3, r2, r6, r3
 80126c0:	b289      	uxth	r1, r1
 80126c2:	3001      	adds	r0, #1
 80126c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80126c8:	4285      	cmp	r5, r0
 80126ca:	f84c 1b04 	str.w	r1, [ip], #4
 80126ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80126d2:	dcec      	bgt.n	80126ae <__multadd+0x12>
 80126d4:	b30e      	cbz	r6, 801271a <__multadd+0x7e>
 80126d6:	68a3      	ldr	r3, [r4, #8]
 80126d8:	42ab      	cmp	r3, r5
 80126da:	dc19      	bgt.n	8012710 <__multadd+0x74>
 80126dc:	6861      	ldr	r1, [r4, #4]
 80126de:	4638      	mov	r0, r7
 80126e0:	3101      	adds	r1, #1
 80126e2:	f7ff ff79 	bl	80125d8 <_Balloc>
 80126e6:	4680      	mov	r8, r0
 80126e8:	b928      	cbnz	r0, 80126f6 <__multadd+0x5a>
 80126ea:	4602      	mov	r2, r0
 80126ec:	4b0c      	ldr	r3, [pc, #48]	@ (8012720 <__multadd+0x84>)
 80126ee:	480d      	ldr	r0, [pc, #52]	@ (8012724 <__multadd+0x88>)
 80126f0:	21ba      	movs	r1, #186	@ 0xba
 80126f2:	f002 f86d 	bl	80147d0 <__assert_func>
 80126f6:	6922      	ldr	r2, [r4, #16]
 80126f8:	3202      	adds	r2, #2
 80126fa:	f104 010c 	add.w	r1, r4, #12
 80126fe:	0092      	lsls	r2, r2, #2
 8012700:	300c      	adds	r0, #12
 8012702:	f7ff f806 	bl	8011712 <memcpy>
 8012706:	4621      	mov	r1, r4
 8012708:	4638      	mov	r0, r7
 801270a:	f7ff ffa5 	bl	8012658 <_Bfree>
 801270e:	4644      	mov	r4, r8
 8012710:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012714:	3501      	adds	r5, #1
 8012716:	615e      	str	r6, [r3, #20]
 8012718:	6125      	str	r5, [r4, #16]
 801271a:	4620      	mov	r0, r4
 801271c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012720:	08016e53 	.word	0x08016e53
 8012724:	08016e64 	.word	0x08016e64

08012728 <__s2b>:
 8012728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801272c:	460c      	mov	r4, r1
 801272e:	4615      	mov	r5, r2
 8012730:	461f      	mov	r7, r3
 8012732:	2209      	movs	r2, #9
 8012734:	3308      	adds	r3, #8
 8012736:	4606      	mov	r6, r0
 8012738:	fb93 f3f2 	sdiv	r3, r3, r2
 801273c:	2100      	movs	r1, #0
 801273e:	2201      	movs	r2, #1
 8012740:	429a      	cmp	r2, r3
 8012742:	db09      	blt.n	8012758 <__s2b+0x30>
 8012744:	4630      	mov	r0, r6
 8012746:	f7ff ff47 	bl	80125d8 <_Balloc>
 801274a:	b940      	cbnz	r0, 801275e <__s2b+0x36>
 801274c:	4602      	mov	r2, r0
 801274e:	4b19      	ldr	r3, [pc, #100]	@ (80127b4 <__s2b+0x8c>)
 8012750:	4819      	ldr	r0, [pc, #100]	@ (80127b8 <__s2b+0x90>)
 8012752:	21d3      	movs	r1, #211	@ 0xd3
 8012754:	f002 f83c 	bl	80147d0 <__assert_func>
 8012758:	0052      	lsls	r2, r2, #1
 801275a:	3101      	adds	r1, #1
 801275c:	e7f0      	b.n	8012740 <__s2b+0x18>
 801275e:	9b08      	ldr	r3, [sp, #32]
 8012760:	6143      	str	r3, [r0, #20]
 8012762:	2d09      	cmp	r5, #9
 8012764:	f04f 0301 	mov.w	r3, #1
 8012768:	6103      	str	r3, [r0, #16]
 801276a:	dd16      	ble.n	801279a <__s2b+0x72>
 801276c:	f104 0909 	add.w	r9, r4, #9
 8012770:	46c8      	mov	r8, r9
 8012772:	442c      	add	r4, r5
 8012774:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012778:	4601      	mov	r1, r0
 801277a:	3b30      	subs	r3, #48	@ 0x30
 801277c:	220a      	movs	r2, #10
 801277e:	4630      	mov	r0, r6
 8012780:	f7ff ff8c 	bl	801269c <__multadd>
 8012784:	45a0      	cmp	r8, r4
 8012786:	d1f5      	bne.n	8012774 <__s2b+0x4c>
 8012788:	f1a5 0408 	sub.w	r4, r5, #8
 801278c:	444c      	add	r4, r9
 801278e:	1b2d      	subs	r5, r5, r4
 8012790:	1963      	adds	r3, r4, r5
 8012792:	42bb      	cmp	r3, r7
 8012794:	db04      	blt.n	80127a0 <__s2b+0x78>
 8012796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801279a:	340a      	adds	r4, #10
 801279c:	2509      	movs	r5, #9
 801279e:	e7f6      	b.n	801278e <__s2b+0x66>
 80127a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80127a4:	4601      	mov	r1, r0
 80127a6:	3b30      	subs	r3, #48	@ 0x30
 80127a8:	220a      	movs	r2, #10
 80127aa:	4630      	mov	r0, r6
 80127ac:	f7ff ff76 	bl	801269c <__multadd>
 80127b0:	e7ee      	b.n	8012790 <__s2b+0x68>
 80127b2:	bf00      	nop
 80127b4:	08016e53 	.word	0x08016e53
 80127b8:	08016e64 	.word	0x08016e64

080127bc <__hi0bits>:
 80127bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80127c0:	4603      	mov	r3, r0
 80127c2:	bf36      	itet	cc
 80127c4:	0403      	lslcc	r3, r0, #16
 80127c6:	2000      	movcs	r0, #0
 80127c8:	2010      	movcc	r0, #16
 80127ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80127ce:	bf3c      	itt	cc
 80127d0:	021b      	lslcc	r3, r3, #8
 80127d2:	3008      	addcc	r0, #8
 80127d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80127d8:	bf3c      	itt	cc
 80127da:	011b      	lslcc	r3, r3, #4
 80127dc:	3004      	addcc	r0, #4
 80127de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80127e2:	bf3c      	itt	cc
 80127e4:	009b      	lslcc	r3, r3, #2
 80127e6:	3002      	addcc	r0, #2
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	db05      	blt.n	80127f8 <__hi0bits+0x3c>
 80127ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80127f0:	f100 0001 	add.w	r0, r0, #1
 80127f4:	bf08      	it	eq
 80127f6:	2020      	moveq	r0, #32
 80127f8:	4770      	bx	lr

080127fa <__lo0bits>:
 80127fa:	6803      	ldr	r3, [r0, #0]
 80127fc:	4602      	mov	r2, r0
 80127fe:	f013 0007 	ands.w	r0, r3, #7
 8012802:	d00b      	beq.n	801281c <__lo0bits+0x22>
 8012804:	07d9      	lsls	r1, r3, #31
 8012806:	d421      	bmi.n	801284c <__lo0bits+0x52>
 8012808:	0798      	lsls	r0, r3, #30
 801280a:	bf49      	itett	mi
 801280c:	085b      	lsrmi	r3, r3, #1
 801280e:	089b      	lsrpl	r3, r3, #2
 8012810:	2001      	movmi	r0, #1
 8012812:	6013      	strmi	r3, [r2, #0]
 8012814:	bf5c      	itt	pl
 8012816:	6013      	strpl	r3, [r2, #0]
 8012818:	2002      	movpl	r0, #2
 801281a:	4770      	bx	lr
 801281c:	b299      	uxth	r1, r3
 801281e:	b909      	cbnz	r1, 8012824 <__lo0bits+0x2a>
 8012820:	0c1b      	lsrs	r3, r3, #16
 8012822:	2010      	movs	r0, #16
 8012824:	b2d9      	uxtb	r1, r3
 8012826:	b909      	cbnz	r1, 801282c <__lo0bits+0x32>
 8012828:	3008      	adds	r0, #8
 801282a:	0a1b      	lsrs	r3, r3, #8
 801282c:	0719      	lsls	r1, r3, #28
 801282e:	bf04      	itt	eq
 8012830:	091b      	lsreq	r3, r3, #4
 8012832:	3004      	addeq	r0, #4
 8012834:	0799      	lsls	r1, r3, #30
 8012836:	bf04      	itt	eq
 8012838:	089b      	lsreq	r3, r3, #2
 801283a:	3002      	addeq	r0, #2
 801283c:	07d9      	lsls	r1, r3, #31
 801283e:	d403      	bmi.n	8012848 <__lo0bits+0x4e>
 8012840:	085b      	lsrs	r3, r3, #1
 8012842:	f100 0001 	add.w	r0, r0, #1
 8012846:	d003      	beq.n	8012850 <__lo0bits+0x56>
 8012848:	6013      	str	r3, [r2, #0]
 801284a:	4770      	bx	lr
 801284c:	2000      	movs	r0, #0
 801284e:	4770      	bx	lr
 8012850:	2020      	movs	r0, #32
 8012852:	4770      	bx	lr

08012854 <__i2b>:
 8012854:	b510      	push	{r4, lr}
 8012856:	460c      	mov	r4, r1
 8012858:	2101      	movs	r1, #1
 801285a:	f7ff febd 	bl	80125d8 <_Balloc>
 801285e:	4602      	mov	r2, r0
 8012860:	b928      	cbnz	r0, 801286e <__i2b+0x1a>
 8012862:	4b05      	ldr	r3, [pc, #20]	@ (8012878 <__i2b+0x24>)
 8012864:	4805      	ldr	r0, [pc, #20]	@ (801287c <__i2b+0x28>)
 8012866:	f240 1145 	movw	r1, #325	@ 0x145
 801286a:	f001 ffb1 	bl	80147d0 <__assert_func>
 801286e:	2301      	movs	r3, #1
 8012870:	6144      	str	r4, [r0, #20]
 8012872:	6103      	str	r3, [r0, #16]
 8012874:	bd10      	pop	{r4, pc}
 8012876:	bf00      	nop
 8012878:	08016e53 	.word	0x08016e53
 801287c:	08016e64 	.word	0x08016e64

08012880 <__multiply>:
 8012880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012884:	4614      	mov	r4, r2
 8012886:	690a      	ldr	r2, [r1, #16]
 8012888:	6923      	ldr	r3, [r4, #16]
 801288a:	429a      	cmp	r2, r3
 801288c:	bfa8      	it	ge
 801288e:	4623      	movge	r3, r4
 8012890:	460f      	mov	r7, r1
 8012892:	bfa4      	itt	ge
 8012894:	460c      	movge	r4, r1
 8012896:	461f      	movge	r7, r3
 8012898:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801289c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80128a0:	68a3      	ldr	r3, [r4, #8]
 80128a2:	6861      	ldr	r1, [r4, #4]
 80128a4:	eb0a 0609 	add.w	r6, sl, r9
 80128a8:	42b3      	cmp	r3, r6
 80128aa:	b085      	sub	sp, #20
 80128ac:	bfb8      	it	lt
 80128ae:	3101      	addlt	r1, #1
 80128b0:	f7ff fe92 	bl	80125d8 <_Balloc>
 80128b4:	b930      	cbnz	r0, 80128c4 <__multiply+0x44>
 80128b6:	4602      	mov	r2, r0
 80128b8:	4b44      	ldr	r3, [pc, #272]	@ (80129cc <__multiply+0x14c>)
 80128ba:	4845      	ldr	r0, [pc, #276]	@ (80129d0 <__multiply+0x150>)
 80128bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80128c0:	f001 ff86 	bl	80147d0 <__assert_func>
 80128c4:	f100 0514 	add.w	r5, r0, #20
 80128c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80128cc:	462b      	mov	r3, r5
 80128ce:	2200      	movs	r2, #0
 80128d0:	4543      	cmp	r3, r8
 80128d2:	d321      	bcc.n	8012918 <__multiply+0x98>
 80128d4:	f107 0114 	add.w	r1, r7, #20
 80128d8:	f104 0214 	add.w	r2, r4, #20
 80128dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80128e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80128e4:	9302      	str	r3, [sp, #8]
 80128e6:	1b13      	subs	r3, r2, r4
 80128e8:	3b15      	subs	r3, #21
 80128ea:	f023 0303 	bic.w	r3, r3, #3
 80128ee:	3304      	adds	r3, #4
 80128f0:	f104 0715 	add.w	r7, r4, #21
 80128f4:	42ba      	cmp	r2, r7
 80128f6:	bf38      	it	cc
 80128f8:	2304      	movcc	r3, #4
 80128fa:	9301      	str	r3, [sp, #4]
 80128fc:	9b02      	ldr	r3, [sp, #8]
 80128fe:	9103      	str	r1, [sp, #12]
 8012900:	428b      	cmp	r3, r1
 8012902:	d80c      	bhi.n	801291e <__multiply+0x9e>
 8012904:	2e00      	cmp	r6, #0
 8012906:	dd03      	ble.n	8012910 <__multiply+0x90>
 8012908:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801290c:	2b00      	cmp	r3, #0
 801290e:	d05b      	beq.n	80129c8 <__multiply+0x148>
 8012910:	6106      	str	r6, [r0, #16]
 8012912:	b005      	add	sp, #20
 8012914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012918:	f843 2b04 	str.w	r2, [r3], #4
 801291c:	e7d8      	b.n	80128d0 <__multiply+0x50>
 801291e:	f8b1 a000 	ldrh.w	sl, [r1]
 8012922:	f1ba 0f00 	cmp.w	sl, #0
 8012926:	d024      	beq.n	8012972 <__multiply+0xf2>
 8012928:	f104 0e14 	add.w	lr, r4, #20
 801292c:	46a9      	mov	r9, r5
 801292e:	f04f 0c00 	mov.w	ip, #0
 8012932:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012936:	f8d9 3000 	ldr.w	r3, [r9]
 801293a:	fa1f fb87 	uxth.w	fp, r7
 801293e:	b29b      	uxth	r3, r3
 8012940:	fb0a 330b 	mla	r3, sl, fp, r3
 8012944:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012948:	f8d9 7000 	ldr.w	r7, [r9]
 801294c:	4463      	add	r3, ip
 801294e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012952:	fb0a c70b 	mla	r7, sl, fp, ip
 8012956:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801295a:	b29b      	uxth	r3, r3
 801295c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012960:	4572      	cmp	r2, lr
 8012962:	f849 3b04 	str.w	r3, [r9], #4
 8012966:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801296a:	d8e2      	bhi.n	8012932 <__multiply+0xb2>
 801296c:	9b01      	ldr	r3, [sp, #4]
 801296e:	f845 c003 	str.w	ip, [r5, r3]
 8012972:	9b03      	ldr	r3, [sp, #12]
 8012974:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012978:	3104      	adds	r1, #4
 801297a:	f1b9 0f00 	cmp.w	r9, #0
 801297e:	d021      	beq.n	80129c4 <__multiply+0x144>
 8012980:	682b      	ldr	r3, [r5, #0]
 8012982:	f104 0c14 	add.w	ip, r4, #20
 8012986:	46ae      	mov	lr, r5
 8012988:	f04f 0a00 	mov.w	sl, #0
 801298c:	f8bc b000 	ldrh.w	fp, [ip]
 8012990:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012994:	fb09 770b 	mla	r7, r9, fp, r7
 8012998:	4457      	add	r7, sl
 801299a:	b29b      	uxth	r3, r3
 801299c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80129a0:	f84e 3b04 	str.w	r3, [lr], #4
 80129a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80129a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80129ac:	f8be 3000 	ldrh.w	r3, [lr]
 80129b0:	fb09 330a 	mla	r3, r9, sl, r3
 80129b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80129b8:	4562      	cmp	r2, ip
 80129ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80129be:	d8e5      	bhi.n	801298c <__multiply+0x10c>
 80129c0:	9f01      	ldr	r7, [sp, #4]
 80129c2:	51eb      	str	r3, [r5, r7]
 80129c4:	3504      	adds	r5, #4
 80129c6:	e799      	b.n	80128fc <__multiply+0x7c>
 80129c8:	3e01      	subs	r6, #1
 80129ca:	e79b      	b.n	8012904 <__multiply+0x84>
 80129cc:	08016e53 	.word	0x08016e53
 80129d0:	08016e64 	.word	0x08016e64

080129d4 <__pow5mult>:
 80129d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129d8:	4615      	mov	r5, r2
 80129da:	f012 0203 	ands.w	r2, r2, #3
 80129de:	4607      	mov	r7, r0
 80129e0:	460e      	mov	r6, r1
 80129e2:	d007      	beq.n	80129f4 <__pow5mult+0x20>
 80129e4:	4c25      	ldr	r4, [pc, #148]	@ (8012a7c <__pow5mult+0xa8>)
 80129e6:	3a01      	subs	r2, #1
 80129e8:	2300      	movs	r3, #0
 80129ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80129ee:	f7ff fe55 	bl	801269c <__multadd>
 80129f2:	4606      	mov	r6, r0
 80129f4:	10ad      	asrs	r5, r5, #2
 80129f6:	d03d      	beq.n	8012a74 <__pow5mult+0xa0>
 80129f8:	69fc      	ldr	r4, [r7, #28]
 80129fa:	b97c      	cbnz	r4, 8012a1c <__pow5mult+0x48>
 80129fc:	2010      	movs	r0, #16
 80129fe:	f7ff fd35 	bl	801246c <malloc>
 8012a02:	4602      	mov	r2, r0
 8012a04:	61f8      	str	r0, [r7, #28]
 8012a06:	b928      	cbnz	r0, 8012a14 <__pow5mult+0x40>
 8012a08:	4b1d      	ldr	r3, [pc, #116]	@ (8012a80 <__pow5mult+0xac>)
 8012a0a:	481e      	ldr	r0, [pc, #120]	@ (8012a84 <__pow5mult+0xb0>)
 8012a0c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012a10:	f001 fede 	bl	80147d0 <__assert_func>
 8012a14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012a18:	6004      	str	r4, [r0, #0]
 8012a1a:	60c4      	str	r4, [r0, #12]
 8012a1c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012a20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012a24:	b94c      	cbnz	r4, 8012a3a <__pow5mult+0x66>
 8012a26:	f240 2171 	movw	r1, #625	@ 0x271
 8012a2a:	4638      	mov	r0, r7
 8012a2c:	f7ff ff12 	bl	8012854 <__i2b>
 8012a30:	2300      	movs	r3, #0
 8012a32:	f8c8 0008 	str.w	r0, [r8, #8]
 8012a36:	4604      	mov	r4, r0
 8012a38:	6003      	str	r3, [r0, #0]
 8012a3a:	f04f 0900 	mov.w	r9, #0
 8012a3e:	07eb      	lsls	r3, r5, #31
 8012a40:	d50a      	bpl.n	8012a58 <__pow5mult+0x84>
 8012a42:	4631      	mov	r1, r6
 8012a44:	4622      	mov	r2, r4
 8012a46:	4638      	mov	r0, r7
 8012a48:	f7ff ff1a 	bl	8012880 <__multiply>
 8012a4c:	4631      	mov	r1, r6
 8012a4e:	4680      	mov	r8, r0
 8012a50:	4638      	mov	r0, r7
 8012a52:	f7ff fe01 	bl	8012658 <_Bfree>
 8012a56:	4646      	mov	r6, r8
 8012a58:	106d      	asrs	r5, r5, #1
 8012a5a:	d00b      	beq.n	8012a74 <__pow5mult+0xa0>
 8012a5c:	6820      	ldr	r0, [r4, #0]
 8012a5e:	b938      	cbnz	r0, 8012a70 <__pow5mult+0x9c>
 8012a60:	4622      	mov	r2, r4
 8012a62:	4621      	mov	r1, r4
 8012a64:	4638      	mov	r0, r7
 8012a66:	f7ff ff0b 	bl	8012880 <__multiply>
 8012a6a:	6020      	str	r0, [r4, #0]
 8012a6c:	f8c0 9000 	str.w	r9, [r0]
 8012a70:	4604      	mov	r4, r0
 8012a72:	e7e4      	b.n	8012a3e <__pow5mult+0x6a>
 8012a74:	4630      	mov	r0, r6
 8012a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a7a:	bf00      	nop
 8012a7c:	08016ec0 	.word	0x08016ec0
 8012a80:	08016de4 	.word	0x08016de4
 8012a84:	08016e64 	.word	0x08016e64

08012a88 <__lshift>:
 8012a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a8c:	460c      	mov	r4, r1
 8012a8e:	6849      	ldr	r1, [r1, #4]
 8012a90:	6923      	ldr	r3, [r4, #16]
 8012a92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012a96:	68a3      	ldr	r3, [r4, #8]
 8012a98:	4607      	mov	r7, r0
 8012a9a:	4691      	mov	r9, r2
 8012a9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012aa0:	f108 0601 	add.w	r6, r8, #1
 8012aa4:	42b3      	cmp	r3, r6
 8012aa6:	db0b      	blt.n	8012ac0 <__lshift+0x38>
 8012aa8:	4638      	mov	r0, r7
 8012aaa:	f7ff fd95 	bl	80125d8 <_Balloc>
 8012aae:	4605      	mov	r5, r0
 8012ab0:	b948      	cbnz	r0, 8012ac6 <__lshift+0x3e>
 8012ab2:	4602      	mov	r2, r0
 8012ab4:	4b28      	ldr	r3, [pc, #160]	@ (8012b58 <__lshift+0xd0>)
 8012ab6:	4829      	ldr	r0, [pc, #164]	@ (8012b5c <__lshift+0xd4>)
 8012ab8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012abc:	f001 fe88 	bl	80147d0 <__assert_func>
 8012ac0:	3101      	adds	r1, #1
 8012ac2:	005b      	lsls	r3, r3, #1
 8012ac4:	e7ee      	b.n	8012aa4 <__lshift+0x1c>
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	f100 0114 	add.w	r1, r0, #20
 8012acc:	f100 0210 	add.w	r2, r0, #16
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	4553      	cmp	r3, sl
 8012ad4:	db33      	blt.n	8012b3e <__lshift+0xb6>
 8012ad6:	6920      	ldr	r0, [r4, #16]
 8012ad8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012adc:	f104 0314 	add.w	r3, r4, #20
 8012ae0:	f019 091f 	ands.w	r9, r9, #31
 8012ae4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012ae8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012aec:	d02b      	beq.n	8012b46 <__lshift+0xbe>
 8012aee:	f1c9 0e20 	rsb	lr, r9, #32
 8012af2:	468a      	mov	sl, r1
 8012af4:	2200      	movs	r2, #0
 8012af6:	6818      	ldr	r0, [r3, #0]
 8012af8:	fa00 f009 	lsl.w	r0, r0, r9
 8012afc:	4310      	orrs	r0, r2
 8012afe:	f84a 0b04 	str.w	r0, [sl], #4
 8012b02:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b06:	459c      	cmp	ip, r3
 8012b08:	fa22 f20e 	lsr.w	r2, r2, lr
 8012b0c:	d8f3      	bhi.n	8012af6 <__lshift+0x6e>
 8012b0e:	ebac 0304 	sub.w	r3, ip, r4
 8012b12:	3b15      	subs	r3, #21
 8012b14:	f023 0303 	bic.w	r3, r3, #3
 8012b18:	3304      	adds	r3, #4
 8012b1a:	f104 0015 	add.w	r0, r4, #21
 8012b1e:	4584      	cmp	ip, r0
 8012b20:	bf38      	it	cc
 8012b22:	2304      	movcc	r3, #4
 8012b24:	50ca      	str	r2, [r1, r3]
 8012b26:	b10a      	cbz	r2, 8012b2c <__lshift+0xa4>
 8012b28:	f108 0602 	add.w	r6, r8, #2
 8012b2c:	3e01      	subs	r6, #1
 8012b2e:	4638      	mov	r0, r7
 8012b30:	612e      	str	r6, [r5, #16]
 8012b32:	4621      	mov	r1, r4
 8012b34:	f7ff fd90 	bl	8012658 <_Bfree>
 8012b38:	4628      	mov	r0, r5
 8012b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012b42:	3301      	adds	r3, #1
 8012b44:	e7c5      	b.n	8012ad2 <__lshift+0x4a>
 8012b46:	3904      	subs	r1, #4
 8012b48:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b4c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012b50:	459c      	cmp	ip, r3
 8012b52:	d8f9      	bhi.n	8012b48 <__lshift+0xc0>
 8012b54:	e7ea      	b.n	8012b2c <__lshift+0xa4>
 8012b56:	bf00      	nop
 8012b58:	08016e53 	.word	0x08016e53
 8012b5c:	08016e64 	.word	0x08016e64

08012b60 <__mcmp>:
 8012b60:	690a      	ldr	r2, [r1, #16]
 8012b62:	4603      	mov	r3, r0
 8012b64:	6900      	ldr	r0, [r0, #16]
 8012b66:	1a80      	subs	r0, r0, r2
 8012b68:	b530      	push	{r4, r5, lr}
 8012b6a:	d10e      	bne.n	8012b8a <__mcmp+0x2a>
 8012b6c:	3314      	adds	r3, #20
 8012b6e:	3114      	adds	r1, #20
 8012b70:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012b74:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012b78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012b7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012b80:	4295      	cmp	r5, r2
 8012b82:	d003      	beq.n	8012b8c <__mcmp+0x2c>
 8012b84:	d205      	bcs.n	8012b92 <__mcmp+0x32>
 8012b86:	f04f 30ff 	mov.w	r0, #4294967295
 8012b8a:	bd30      	pop	{r4, r5, pc}
 8012b8c:	42a3      	cmp	r3, r4
 8012b8e:	d3f3      	bcc.n	8012b78 <__mcmp+0x18>
 8012b90:	e7fb      	b.n	8012b8a <__mcmp+0x2a>
 8012b92:	2001      	movs	r0, #1
 8012b94:	e7f9      	b.n	8012b8a <__mcmp+0x2a>
	...

08012b98 <__mdiff>:
 8012b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b9c:	4689      	mov	r9, r1
 8012b9e:	4606      	mov	r6, r0
 8012ba0:	4611      	mov	r1, r2
 8012ba2:	4648      	mov	r0, r9
 8012ba4:	4614      	mov	r4, r2
 8012ba6:	f7ff ffdb 	bl	8012b60 <__mcmp>
 8012baa:	1e05      	subs	r5, r0, #0
 8012bac:	d112      	bne.n	8012bd4 <__mdiff+0x3c>
 8012bae:	4629      	mov	r1, r5
 8012bb0:	4630      	mov	r0, r6
 8012bb2:	f7ff fd11 	bl	80125d8 <_Balloc>
 8012bb6:	4602      	mov	r2, r0
 8012bb8:	b928      	cbnz	r0, 8012bc6 <__mdiff+0x2e>
 8012bba:	4b3f      	ldr	r3, [pc, #252]	@ (8012cb8 <__mdiff+0x120>)
 8012bbc:	f240 2137 	movw	r1, #567	@ 0x237
 8012bc0:	483e      	ldr	r0, [pc, #248]	@ (8012cbc <__mdiff+0x124>)
 8012bc2:	f001 fe05 	bl	80147d0 <__assert_func>
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012bcc:	4610      	mov	r0, r2
 8012bce:	b003      	add	sp, #12
 8012bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bd4:	bfbc      	itt	lt
 8012bd6:	464b      	movlt	r3, r9
 8012bd8:	46a1      	movlt	r9, r4
 8012bda:	4630      	mov	r0, r6
 8012bdc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012be0:	bfba      	itte	lt
 8012be2:	461c      	movlt	r4, r3
 8012be4:	2501      	movlt	r5, #1
 8012be6:	2500      	movge	r5, #0
 8012be8:	f7ff fcf6 	bl	80125d8 <_Balloc>
 8012bec:	4602      	mov	r2, r0
 8012bee:	b918      	cbnz	r0, 8012bf8 <__mdiff+0x60>
 8012bf0:	4b31      	ldr	r3, [pc, #196]	@ (8012cb8 <__mdiff+0x120>)
 8012bf2:	f240 2145 	movw	r1, #581	@ 0x245
 8012bf6:	e7e3      	b.n	8012bc0 <__mdiff+0x28>
 8012bf8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012bfc:	6926      	ldr	r6, [r4, #16]
 8012bfe:	60c5      	str	r5, [r0, #12]
 8012c00:	f109 0310 	add.w	r3, r9, #16
 8012c04:	f109 0514 	add.w	r5, r9, #20
 8012c08:	f104 0e14 	add.w	lr, r4, #20
 8012c0c:	f100 0b14 	add.w	fp, r0, #20
 8012c10:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012c14:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012c18:	9301      	str	r3, [sp, #4]
 8012c1a:	46d9      	mov	r9, fp
 8012c1c:	f04f 0c00 	mov.w	ip, #0
 8012c20:	9b01      	ldr	r3, [sp, #4]
 8012c22:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012c26:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012c2a:	9301      	str	r3, [sp, #4]
 8012c2c:	fa1f f38a 	uxth.w	r3, sl
 8012c30:	4619      	mov	r1, r3
 8012c32:	b283      	uxth	r3, r0
 8012c34:	1acb      	subs	r3, r1, r3
 8012c36:	0c00      	lsrs	r0, r0, #16
 8012c38:	4463      	add	r3, ip
 8012c3a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012c3e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012c42:	b29b      	uxth	r3, r3
 8012c44:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012c48:	4576      	cmp	r6, lr
 8012c4a:	f849 3b04 	str.w	r3, [r9], #4
 8012c4e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012c52:	d8e5      	bhi.n	8012c20 <__mdiff+0x88>
 8012c54:	1b33      	subs	r3, r6, r4
 8012c56:	3b15      	subs	r3, #21
 8012c58:	f023 0303 	bic.w	r3, r3, #3
 8012c5c:	3415      	adds	r4, #21
 8012c5e:	3304      	adds	r3, #4
 8012c60:	42a6      	cmp	r6, r4
 8012c62:	bf38      	it	cc
 8012c64:	2304      	movcc	r3, #4
 8012c66:	441d      	add	r5, r3
 8012c68:	445b      	add	r3, fp
 8012c6a:	461e      	mov	r6, r3
 8012c6c:	462c      	mov	r4, r5
 8012c6e:	4544      	cmp	r4, r8
 8012c70:	d30e      	bcc.n	8012c90 <__mdiff+0xf8>
 8012c72:	f108 0103 	add.w	r1, r8, #3
 8012c76:	1b49      	subs	r1, r1, r5
 8012c78:	f021 0103 	bic.w	r1, r1, #3
 8012c7c:	3d03      	subs	r5, #3
 8012c7e:	45a8      	cmp	r8, r5
 8012c80:	bf38      	it	cc
 8012c82:	2100      	movcc	r1, #0
 8012c84:	440b      	add	r3, r1
 8012c86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012c8a:	b191      	cbz	r1, 8012cb2 <__mdiff+0x11a>
 8012c8c:	6117      	str	r7, [r2, #16]
 8012c8e:	e79d      	b.n	8012bcc <__mdiff+0x34>
 8012c90:	f854 1b04 	ldr.w	r1, [r4], #4
 8012c94:	46e6      	mov	lr, ip
 8012c96:	0c08      	lsrs	r0, r1, #16
 8012c98:	fa1c fc81 	uxtah	ip, ip, r1
 8012c9c:	4471      	add	r1, lr
 8012c9e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012ca2:	b289      	uxth	r1, r1
 8012ca4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012ca8:	f846 1b04 	str.w	r1, [r6], #4
 8012cac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012cb0:	e7dd      	b.n	8012c6e <__mdiff+0xd6>
 8012cb2:	3f01      	subs	r7, #1
 8012cb4:	e7e7      	b.n	8012c86 <__mdiff+0xee>
 8012cb6:	bf00      	nop
 8012cb8:	08016e53 	.word	0x08016e53
 8012cbc:	08016e64 	.word	0x08016e64

08012cc0 <__ulp>:
 8012cc0:	b082      	sub	sp, #8
 8012cc2:	ed8d 0b00 	vstr	d0, [sp]
 8012cc6:	9a01      	ldr	r2, [sp, #4]
 8012cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8012d08 <__ulp+0x48>)
 8012cca:	4013      	ands	r3, r2
 8012ccc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	dc08      	bgt.n	8012ce6 <__ulp+0x26>
 8012cd4:	425b      	negs	r3, r3
 8012cd6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012cda:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012cde:	da04      	bge.n	8012cea <__ulp+0x2a>
 8012ce0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012ce4:	4113      	asrs	r3, r2
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	e008      	b.n	8012cfc <__ulp+0x3c>
 8012cea:	f1a2 0314 	sub.w	r3, r2, #20
 8012cee:	2b1e      	cmp	r3, #30
 8012cf0:	bfda      	itte	le
 8012cf2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012cf6:	40da      	lsrle	r2, r3
 8012cf8:	2201      	movgt	r2, #1
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	4619      	mov	r1, r3
 8012cfe:	4610      	mov	r0, r2
 8012d00:	ec41 0b10 	vmov	d0, r0, r1
 8012d04:	b002      	add	sp, #8
 8012d06:	4770      	bx	lr
 8012d08:	7ff00000 	.word	0x7ff00000

08012d0c <__b2d>:
 8012d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d10:	6906      	ldr	r6, [r0, #16]
 8012d12:	f100 0814 	add.w	r8, r0, #20
 8012d16:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012d1a:	1f37      	subs	r7, r6, #4
 8012d1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012d20:	4610      	mov	r0, r2
 8012d22:	f7ff fd4b 	bl	80127bc <__hi0bits>
 8012d26:	f1c0 0320 	rsb	r3, r0, #32
 8012d2a:	280a      	cmp	r0, #10
 8012d2c:	600b      	str	r3, [r1, #0]
 8012d2e:	491b      	ldr	r1, [pc, #108]	@ (8012d9c <__b2d+0x90>)
 8012d30:	dc15      	bgt.n	8012d5e <__b2d+0x52>
 8012d32:	f1c0 0c0b 	rsb	ip, r0, #11
 8012d36:	fa22 f30c 	lsr.w	r3, r2, ip
 8012d3a:	45b8      	cmp	r8, r7
 8012d3c:	ea43 0501 	orr.w	r5, r3, r1
 8012d40:	bf34      	ite	cc
 8012d42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012d46:	2300      	movcs	r3, #0
 8012d48:	3015      	adds	r0, #21
 8012d4a:	fa02 f000 	lsl.w	r0, r2, r0
 8012d4e:	fa23 f30c 	lsr.w	r3, r3, ip
 8012d52:	4303      	orrs	r3, r0
 8012d54:	461c      	mov	r4, r3
 8012d56:	ec45 4b10 	vmov	d0, r4, r5
 8012d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d5e:	45b8      	cmp	r8, r7
 8012d60:	bf3a      	itte	cc
 8012d62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012d66:	f1a6 0708 	subcc.w	r7, r6, #8
 8012d6a:	2300      	movcs	r3, #0
 8012d6c:	380b      	subs	r0, #11
 8012d6e:	d012      	beq.n	8012d96 <__b2d+0x8a>
 8012d70:	f1c0 0120 	rsb	r1, r0, #32
 8012d74:	fa23 f401 	lsr.w	r4, r3, r1
 8012d78:	4082      	lsls	r2, r0
 8012d7a:	4322      	orrs	r2, r4
 8012d7c:	4547      	cmp	r7, r8
 8012d7e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012d82:	bf8c      	ite	hi
 8012d84:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012d88:	2200      	movls	r2, #0
 8012d8a:	4083      	lsls	r3, r0
 8012d8c:	40ca      	lsrs	r2, r1
 8012d8e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012d92:	4313      	orrs	r3, r2
 8012d94:	e7de      	b.n	8012d54 <__b2d+0x48>
 8012d96:	ea42 0501 	orr.w	r5, r2, r1
 8012d9a:	e7db      	b.n	8012d54 <__b2d+0x48>
 8012d9c:	3ff00000 	.word	0x3ff00000

08012da0 <__d2b>:
 8012da0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012da4:	460f      	mov	r7, r1
 8012da6:	2101      	movs	r1, #1
 8012da8:	ec59 8b10 	vmov	r8, r9, d0
 8012dac:	4616      	mov	r6, r2
 8012dae:	f7ff fc13 	bl	80125d8 <_Balloc>
 8012db2:	4604      	mov	r4, r0
 8012db4:	b930      	cbnz	r0, 8012dc4 <__d2b+0x24>
 8012db6:	4602      	mov	r2, r0
 8012db8:	4b23      	ldr	r3, [pc, #140]	@ (8012e48 <__d2b+0xa8>)
 8012dba:	4824      	ldr	r0, [pc, #144]	@ (8012e4c <__d2b+0xac>)
 8012dbc:	f240 310f 	movw	r1, #783	@ 0x30f
 8012dc0:	f001 fd06 	bl	80147d0 <__assert_func>
 8012dc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012dc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012dcc:	b10d      	cbz	r5, 8012dd2 <__d2b+0x32>
 8012dce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012dd2:	9301      	str	r3, [sp, #4]
 8012dd4:	f1b8 0300 	subs.w	r3, r8, #0
 8012dd8:	d023      	beq.n	8012e22 <__d2b+0x82>
 8012dda:	4668      	mov	r0, sp
 8012ddc:	9300      	str	r3, [sp, #0]
 8012dde:	f7ff fd0c 	bl	80127fa <__lo0bits>
 8012de2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012de6:	b1d0      	cbz	r0, 8012e1e <__d2b+0x7e>
 8012de8:	f1c0 0320 	rsb	r3, r0, #32
 8012dec:	fa02 f303 	lsl.w	r3, r2, r3
 8012df0:	430b      	orrs	r3, r1
 8012df2:	40c2      	lsrs	r2, r0
 8012df4:	6163      	str	r3, [r4, #20]
 8012df6:	9201      	str	r2, [sp, #4]
 8012df8:	9b01      	ldr	r3, [sp, #4]
 8012dfa:	61a3      	str	r3, [r4, #24]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	bf0c      	ite	eq
 8012e00:	2201      	moveq	r2, #1
 8012e02:	2202      	movne	r2, #2
 8012e04:	6122      	str	r2, [r4, #16]
 8012e06:	b1a5      	cbz	r5, 8012e32 <__d2b+0x92>
 8012e08:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012e0c:	4405      	add	r5, r0
 8012e0e:	603d      	str	r5, [r7, #0]
 8012e10:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012e14:	6030      	str	r0, [r6, #0]
 8012e16:	4620      	mov	r0, r4
 8012e18:	b003      	add	sp, #12
 8012e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e1e:	6161      	str	r1, [r4, #20]
 8012e20:	e7ea      	b.n	8012df8 <__d2b+0x58>
 8012e22:	a801      	add	r0, sp, #4
 8012e24:	f7ff fce9 	bl	80127fa <__lo0bits>
 8012e28:	9b01      	ldr	r3, [sp, #4]
 8012e2a:	6163      	str	r3, [r4, #20]
 8012e2c:	3020      	adds	r0, #32
 8012e2e:	2201      	movs	r2, #1
 8012e30:	e7e8      	b.n	8012e04 <__d2b+0x64>
 8012e32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012e36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012e3a:	6038      	str	r0, [r7, #0]
 8012e3c:	6918      	ldr	r0, [r3, #16]
 8012e3e:	f7ff fcbd 	bl	80127bc <__hi0bits>
 8012e42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012e46:	e7e5      	b.n	8012e14 <__d2b+0x74>
 8012e48:	08016e53 	.word	0x08016e53
 8012e4c:	08016e64 	.word	0x08016e64

08012e50 <__ratio>:
 8012e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e54:	b085      	sub	sp, #20
 8012e56:	e9cd 1000 	strd	r1, r0, [sp]
 8012e5a:	a902      	add	r1, sp, #8
 8012e5c:	f7ff ff56 	bl	8012d0c <__b2d>
 8012e60:	9800      	ldr	r0, [sp, #0]
 8012e62:	a903      	add	r1, sp, #12
 8012e64:	ec55 4b10 	vmov	r4, r5, d0
 8012e68:	f7ff ff50 	bl	8012d0c <__b2d>
 8012e6c:	9b01      	ldr	r3, [sp, #4]
 8012e6e:	6919      	ldr	r1, [r3, #16]
 8012e70:	9b00      	ldr	r3, [sp, #0]
 8012e72:	691b      	ldr	r3, [r3, #16]
 8012e74:	1ac9      	subs	r1, r1, r3
 8012e76:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012e7a:	1a9b      	subs	r3, r3, r2
 8012e7c:	ec5b ab10 	vmov	sl, fp, d0
 8012e80:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	bfce      	itee	gt
 8012e88:	462a      	movgt	r2, r5
 8012e8a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012e8e:	465a      	movle	r2, fp
 8012e90:	462f      	mov	r7, r5
 8012e92:	46d9      	mov	r9, fp
 8012e94:	bfcc      	ite	gt
 8012e96:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012e9a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012e9e:	464b      	mov	r3, r9
 8012ea0:	4652      	mov	r2, sl
 8012ea2:	4620      	mov	r0, r4
 8012ea4:	4639      	mov	r1, r7
 8012ea6:	f7ed fcf9 	bl	800089c <__aeabi_ddiv>
 8012eaa:	ec41 0b10 	vmov	d0, r0, r1
 8012eae:	b005      	add	sp, #20
 8012eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012eb4 <__copybits>:
 8012eb4:	3901      	subs	r1, #1
 8012eb6:	b570      	push	{r4, r5, r6, lr}
 8012eb8:	1149      	asrs	r1, r1, #5
 8012eba:	6914      	ldr	r4, [r2, #16]
 8012ebc:	3101      	adds	r1, #1
 8012ebe:	f102 0314 	add.w	r3, r2, #20
 8012ec2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012ec6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012eca:	1f05      	subs	r5, r0, #4
 8012ecc:	42a3      	cmp	r3, r4
 8012ece:	d30c      	bcc.n	8012eea <__copybits+0x36>
 8012ed0:	1aa3      	subs	r3, r4, r2
 8012ed2:	3b11      	subs	r3, #17
 8012ed4:	f023 0303 	bic.w	r3, r3, #3
 8012ed8:	3211      	adds	r2, #17
 8012eda:	42a2      	cmp	r2, r4
 8012edc:	bf88      	it	hi
 8012ede:	2300      	movhi	r3, #0
 8012ee0:	4418      	add	r0, r3
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	4288      	cmp	r0, r1
 8012ee6:	d305      	bcc.n	8012ef4 <__copybits+0x40>
 8012ee8:	bd70      	pop	{r4, r5, r6, pc}
 8012eea:	f853 6b04 	ldr.w	r6, [r3], #4
 8012eee:	f845 6f04 	str.w	r6, [r5, #4]!
 8012ef2:	e7eb      	b.n	8012ecc <__copybits+0x18>
 8012ef4:	f840 3b04 	str.w	r3, [r0], #4
 8012ef8:	e7f4      	b.n	8012ee4 <__copybits+0x30>

08012efa <__any_on>:
 8012efa:	f100 0214 	add.w	r2, r0, #20
 8012efe:	6900      	ldr	r0, [r0, #16]
 8012f00:	114b      	asrs	r3, r1, #5
 8012f02:	4298      	cmp	r0, r3
 8012f04:	b510      	push	{r4, lr}
 8012f06:	db11      	blt.n	8012f2c <__any_on+0x32>
 8012f08:	dd0a      	ble.n	8012f20 <__any_on+0x26>
 8012f0a:	f011 011f 	ands.w	r1, r1, #31
 8012f0e:	d007      	beq.n	8012f20 <__any_on+0x26>
 8012f10:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012f14:	fa24 f001 	lsr.w	r0, r4, r1
 8012f18:	fa00 f101 	lsl.w	r1, r0, r1
 8012f1c:	428c      	cmp	r4, r1
 8012f1e:	d10b      	bne.n	8012f38 <__any_on+0x3e>
 8012f20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012f24:	4293      	cmp	r3, r2
 8012f26:	d803      	bhi.n	8012f30 <__any_on+0x36>
 8012f28:	2000      	movs	r0, #0
 8012f2a:	bd10      	pop	{r4, pc}
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	e7f7      	b.n	8012f20 <__any_on+0x26>
 8012f30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012f34:	2900      	cmp	r1, #0
 8012f36:	d0f5      	beq.n	8012f24 <__any_on+0x2a>
 8012f38:	2001      	movs	r0, #1
 8012f3a:	e7f6      	b.n	8012f2a <__any_on+0x30>

08012f3c <sulp>:
 8012f3c:	b570      	push	{r4, r5, r6, lr}
 8012f3e:	4604      	mov	r4, r0
 8012f40:	460d      	mov	r5, r1
 8012f42:	ec45 4b10 	vmov	d0, r4, r5
 8012f46:	4616      	mov	r6, r2
 8012f48:	f7ff feba 	bl	8012cc0 <__ulp>
 8012f4c:	ec51 0b10 	vmov	r0, r1, d0
 8012f50:	b17e      	cbz	r6, 8012f72 <sulp+0x36>
 8012f52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012f56:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	dd09      	ble.n	8012f72 <sulp+0x36>
 8012f5e:	051b      	lsls	r3, r3, #20
 8012f60:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8012f64:	2400      	movs	r4, #0
 8012f66:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8012f6a:	4622      	mov	r2, r4
 8012f6c:	462b      	mov	r3, r5
 8012f6e:	f7ed fb6b 	bl	8000648 <__aeabi_dmul>
 8012f72:	ec41 0b10 	vmov	d0, r0, r1
 8012f76:	bd70      	pop	{r4, r5, r6, pc}

08012f78 <_strtod_l>:
 8012f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f7c:	b09f      	sub	sp, #124	@ 0x7c
 8012f7e:	460c      	mov	r4, r1
 8012f80:	9217      	str	r2, [sp, #92]	@ 0x5c
 8012f82:	2200      	movs	r2, #0
 8012f84:	921a      	str	r2, [sp, #104]	@ 0x68
 8012f86:	9005      	str	r0, [sp, #20]
 8012f88:	f04f 0a00 	mov.w	sl, #0
 8012f8c:	f04f 0b00 	mov.w	fp, #0
 8012f90:	460a      	mov	r2, r1
 8012f92:	9219      	str	r2, [sp, #100]	@ 0x64
 8012f94:	7811      	ldrb	r1, [r2, #0]
 8012f96:	292b      	cmp	r1, #43	@ 0x2b
 8012f98:	d04a      	beq.n	8013030 <_strtod_l+0xb8>
 8012f9a:	d838      	bhi.n	801300e <_strtod_l+0x96>
 8012f9c:	290d      	cmp	r1, #13
 8012f9e:	d832      	bhi.n	8013006 <_strtod_l+0x8e>
 8012fa0:	2908      	cmp	r1, #8
 8012fa2:	d832      	bhi.n	801300a <_strtod_l+0x92>
 8012fa4:	2900      	cmp	r1, #0
 8012fa6:	d03b      	beq.n	8013020 <_strtod_l+0xa8>
 8012fa8:	2200      	movs	r2, #0
 8012faa:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012fac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8012fae:	782a      	ldrb	r2, [r5, #0]
 8012fb0:	2a30      	cmp	r2, #48	@ 0x30
 8012fb2:	f040 80b3 	bne.w	801311c <_strtod_l+0x1a4>
 8012fb6:	786a      	ldrb	r2, [r5, #1]
 8012fb8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012fbc:	2a58      	cmp	r2, #88	@ 0x58
 8012fbe:	d16e      	bne.n	801309e <_strtod_l+0x126>
 8012fc0:	9302      	str	r3, [sp, #8]
 8012fc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012fc4:	9301      	str	r3, [sp, #4]
 8012fc6:	ab1a      	add	r3, sp, #104	@ 0x68
 8012fc8:	9300      	str	r3, [sp, #0]
 8012fca:	4a8e      	ldr	r2, [pc, #568]	@ (8013204 <_strtod_l+0x28c>)
 8012fcc:	9805      	ldr	r0, [sp, #20]
 8012fce:	ab1b      	add	r3, sp, #108	@ 0x6c
 8012fd0:	a919      	add	r1, sp, #100	@ 0x64
 8012fd2:	f001 fc97 	bl	8014904 <__gethex>
 8012fd6:	f010 060f 	ands.w	r6, r0, #15
 8012fda:	4604      	mov	r4, r0
 8012fdc:	d005      	beq.n	8012fea <_strtod_l+0x72>
 8012fde:	2e06      	cmp	r6, #6
 8012fe0:	d128      	bne.n	8013034 <_strtod_l+0xbc>
 8012fe2:	3501      	adds	r5, #1
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	9519      	str	r5, [sp, #100]	@ 0x64
 8012fe8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012fea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	f040 858e 	bne.w	8013b0e <_strtod_l+0xb96>
 8012ff2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012ff4:	b1cb      	cbz	r3, 801302a <_strtod_l+0xb2>
 8012ff6:	4652      	mov	r2, sl
 8012ff8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8012ffc:	ec43 2b10 	vmov	d0, r2, r3
 8013000:	b01f      	add	sp, #124	@ 0x7c
 8013002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013006:	2920      	cmp	r1, #32
 8013008:	d1ce      	bne.n	8012fa8 <_strtod_l+0x30>
 801300a:	3201      	adds	r2, #1
 801300c:	e7c1      	b.n	8012f92 <_strtod_l+0x1a>
 801300e:	292d      	cmp	r1, #45	@ 0x2d
 8013010:	d1ca      	bne.n	8012fa8 <_strtod_l+0x30>
 8013012:	2101      	movs	r1, #1
 8013014:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013016:	1c51      	adds	r1, r2, #1
 8013018:	9119      	str	r1, [sp, #100]	@ 0x64
 801301a:	7852      	ldrb	r2, [r2, #1]
 801301c:	2a00      	cmp	r2, #0
 801301e:	d1c5      	bne.n	8012fac <_strtod_l+0x34>
 8013020:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013022:	9419      	str	r4, [sp, #100]	@ 0x64
 8013024:	2b00      	cmp	r3, #0
 8013026:	f040 8570 	bne.w	8013b0a <_strtod_l+0xb92>
 801302a:	4652      	mov	r2, sl
 801302c:	465b      	mov	r3, fp
 801302e:	e7e5      	b.n	8012ffc <_strtod_l+0x84>
 8013030:	2100      	movs	r1, #0
 8013032:	e7ef      	b.n	8013014 <_strtod_l+0x9c>
 8013034:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013036:	b13a      	cbz	r2, 8013048 <_strtod_l+0xd0>
 8013038:	2135      	movs	r1, #53	@ 0x35
 801303a:	a81c      	add	r0, sp, #112	@ 0x70
 801303c:	f7ff ff3a 	bl	8012eb4 <__copybits>
 8013040:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013042:	9805      	ldr	r0, [sp, #20]
 8013044:	f7ff fb08 	bl	8012658 <_Bfree>
 8013048:	3e01      	subs	r6, #1
 801304a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801304c:	2e04      	cmp	r6, #4
 801304e:	d806      	bhi.n	801305e <_strtod_l+0xe6>
 8013050:	e8df f006 	tbb	[pc, r6]
 8013054:	201d0314 	.word	0x201d0314
 8013058:	14          	.byte	0x14
 8013059:	00          	.byte	0x00
 801305a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801305e:	05e1      	lsls	r1, r4, #23
 8013060:	bf48      	it	mi
 8013062:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013066:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801306a:	0d1b      	lsrs	r3, r3, #20
 801306c:	051b      	lsls	r3, r3, #20
 801306e:	2b00      	cmp	r3, #0
 8013070:	d1bb      	bne.n	8012fea <_strtod_l+0x72>
 8013072:	f7fe fb21 	bl	80116b8 <__errno>
 8013076:	2322      	movs	r3, #34	@ 0x22
 8013078:	6003      	str	r3, [r0, #0]
 801307a:	e7b6      	b.n	8012fea <_strtod_l+0x72>
 801307c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013080:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013084:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013088:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801308c:	e7e7      	b.n	801305e <_strtod_l+0xe6>
 801308e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801320c <_strtod_l+0x294>
 8013092:	e7e4      	b.n	801305e <_strtod_l+0xe6>
 8013094:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013098:	f04f 3aff 	mov.w	sl, #4294967295
 801309c:	e7df      	b.n	801305e <_strtod_l+0xe6>
 801309e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80130a0:	1c5a      	adds	r2, r3, #1
 80130a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80130a4:	785b      	ldrb	r3, [r3, #1]
 80130a6:	2b30      	cmp	r3, #48	@ 0x30
 80130a8:	d0f9      	beq.n	801309e <_strtod_l+0x126>
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d09d      	beq.n	8012fea <_strtod_l+0x72>
 80130ae:	2301      	movs	r3, #1
 80130b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80130b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80130b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80130b6:	2300      	movs	r3, #0
 80130b8:	9308      	str	r3, [sp, #32]
 80130ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80130bc:	461f      	mov	r7, r3
 80130be:	220a      	movs	r2, #10
 80130c0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80130c2:	7805      	ldrb	r5, [r0, #0]
 80130c4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80130c8:	b2d9      	uxtb	r1, r3
 80130ca:	2909      	cmp	r1, #9
 80130cc:	d928      	bls.n	8013120 <_strtod_l+0x1a8>
 80130ce:	494e      	ldr	r1, [pc, #312]	@ (8013208 <_strtod_l+0x290>)
 80130d0:	2201      	movs	r2, #1
 80130d2:	f7fe fa94 	bl	80115fe <strncmp>
 80130d6:	2800      	cmp	r0, #0
 80130d8:	d032      	beq.n	8013140 <_strtod_l+0x1c8>
 80130da:	2000      	movs	r0, #0
 80130dc:	462a      	mov	r2, r5
 80130de:	4681      	mov	r9, r0
 80130e0:	463d      	mov	r5, r7
 80130e2:	4603      	mov	r3, r0
 80130e4:	2a65      	cmp	r2, #101	@ 0x65
 80130e6:	d001      	beq.n	80130ec <_strtod_l+0x174>
 80130e8:	2a45      	cmp	r2, #69	@ 0x45
 80130ea:	d114      	bne.n	8013116 <_strtod_l+0x19e>
 80130ec:	b91d      	cbnz	r5, 80130f6 <_strtod_l+0x17e>
 80130ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80130f0:	4302      	orrs	r2, r0
 80130f2:	d095      	beq.n	8013020 <_strtod_l+0xa8>
 80130f4:	2500      	movs	r5, #0
 80130f6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80130f8:	1c62      	adds	r2, r4, #1
 80130fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80130fc:	7862      	ldrb	r2, [r4, #1]
 80130fe:	2a2b      	cmp	r2, #43	@ 0x2b
 8013100:	d077      	beq.n	80131f2 <_strtod_l+0x27a>
 8013102:	2a2d      	cmp	r2, #45	@ 0x2d
 8013104:	d07b      	beq.n	80131fe <_strtod_l+0x286>
 8013106:	f04f 0c00 	mov.w	ip, #0
 801310a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801310e:	2909      	cmp	r1, #9
 8013110:	f240 8082 	bls.w	8013218 <_strtod_l+0x2a0>
 8013114:	9419      	str	r4, [sp, #100]	@ 0x64
 8013116:	f04f 0800 	mov.w	r8, #0
 801311a:	e0a2      	b.n	8013262 <_strtod_l+0x2ea>
 801311c:	2300      	movs	r3, #0
 801311e:	e7c7      	b.n	80130b0 <_strtod_l+0x138>
 8013120:	2f08      	cmp	r7, #8
 8013122:	bfd5      	itete	le
 8013124:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8013126:	9908      	ldrgt	r1, [sp, #32]
 8013128:	fb02 3301 	mlale	r3, r2, r1, r3
 801312c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013130:	f100 0001 	add.w	r0, r0, #1
 8013134:	bfd4      	ite	le
 8013136:	930a      	strle	r3, [sp, #40]	@ 0x28
 8013138:	9308      	strgt	r3, [sp, #32]
 801313a:	3701      	adds	r7, #1
 801313c:	9019      	str	r0, [sp, #100]	@ 0x64
 801313e:	e7bf      	b.n	80130c0 <_strtod_l+0x148>
 8013140:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013142:	1c5a      	adds	r2, r3, #1
 8013144:	9219      	str	r2, [sp, #100]	@ 0x64
 8013146:	785a      	ldrb	r2, [r3, #1]
 8013148:	b37f      	cbz	r7, 80131aa <_strtod_l+0x232>
 801314a:	4681      	mov	r9, r0
 801314c:	463d      	mov	r5, r7
 801314e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8013152:	2b09      	cmp	r3, #9
 8013154:	d912      	bls.n	801317c <_strtod_l+0x204>
 8013156:	2301      	movs	r3, #1
 8013158:	e7c4      	b.n	80130e4 <_strtod_l+0x16c>
 801315a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801315c:	1c5a      	adds	r2, r3, #1
 801315e:	9219      	str	r2, [sp, #100]	@ 0x64
 8013160:	785a      	ldrb	r2, [r3, #1]
 8013162:	3001      	adds	r0, #1
 8013164:	2a30      	cmp	r2, #48	@ 0x30
 8013166:	d0f8      	beq.n	801315a <_strtod_l+0x1e2>
 8013168:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801316c:	2b08      	cmp	r3, #8
 801316e:	f200 84d3 	bhi.w	8013b18 <_strtod_l+0xba0>
 8013172:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013174:	930c      	str	r3, [sp, #48]	@ 0x30
 8013176:	4681      	mov	r9, r0
 8013178:	2000      	movs	r0, #0
 801317a:	4605      	mov	r5, r0
 801317c:	3a30      	subs	r2, #48	@ 0x30
 801317e:	f100 0301 	add.w	r3, r0, #1
 8013182:	d02a      	beq.n	80131da <_strtod_l+0x262>
 8013184:	4499      	add	r9, r3
 8013186:	eb00 0c05 	add.w	ip, r0, r5
 801318a:	462b      	mov	r3, r5
 801318c:	210a      	movs	r1, #10
 801318e:	4563      	cmp	r3, ip
 8013190:	d10d      	bne.n	80131ae <_strtod_l+0x236>
 8013192:	1c69      	adds	r1, r5, #1
 8013194:	4401      	add	r1, r0
 8013196:	4428      	add	r0, r5
 8013198:	2808      	cmp	r0, #8
 801319a:	dc16      	bgt.n	80131ca <_strtod_l+0x252>
 801319c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801319e:	230a      	movs	r3, #10
 80131a0:	fb03 2300 	mla	r3, r3, r0, r2
 80131a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80131a6:	2300      	movs	r3, #0
 80131a8:	e018      	b.n	80131dc <_strtod_l+0x264>
 80131aa:	4638      	mov	r0, r7
 80131ac:	e7da      	b.n	8013164 <_strtod_l+0x1ec>
 80131ae:	2b08      	cmp	r3, #8
 80131b0:	f103 0301 	add.w	r3, r3, #1
 80131b4:	dc03      	bgt.n	80131be <_strtod_l+0x246>
 80131b6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80131b8:	434e      	muls	r6, r1
 80131ba:	960a      	str	r6, [sp, #40]	@ 0x28
 80131bc:	e7e7      	b.n	801318e <_strtod_l+0x216>
 80131be:	2b10      	cmp	r3, #16
 80131c0:	bfde      	ittt	le
 80131c2:	9e08      	ldrle	r6, [sp, #32]
 80131c4:	434e      	mulle	r6, r1
 80131c6:	9608      	strle	r6, [sp, #32]
 80131c8:	e7e1      	b.n	801318e <_strtod_l+0x216>
 80131ca:	280f      	cmp	r0, #15
 80131cc:	dceb      	bgt.n	80131a6 <_strtod_l+0x22e>
 80131ce:	9808      	ldr	r0, [sp, #32]
 80131d0:	230a      	movs	r3, #10
 80131d2:	fb03 2300 	mla	r3, r3, r0, r2
 80131d6:	9308      	str	r3, [sp, #32]
 80131d8:	e7e5      	b.n	80131a6 <_strtod_l+0x22e>
 80131da:	4629      	mov	r1, r5
 80131dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80131de:	1c50      	adds	r0, r2, #1
 80131e0:	9019      	str	r0, [sp, #100]	@ 0x64
 80131e2:	7852      	ldrb	r2, [r2, #1]
 80131e4:	4618      	mov	r0, r3
 80131e6:	460d      	mov	r5, r1
 80131e8:	e7b1      	b.n	801314e <_strtod_l+0x1d6>
 80131ea:	f04f 0900 	mov.w	r9, #0
 80131ee:	2301      	movs	r3, #1
 80131f0:	e77d      	b.n	80130ee <_strtod_l+0x176>
 80131f2:	f04f 0c00 	mov.w	ip, #0
 80131f6:	1ca2      	adds	r2, r4, #2
 80131f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80131fa:	78a2      	ldrb	r2, [r4, #2]
 80131fc:	e785      	b.n	801310a <_strtod_l+0x192>
 80131fe:	f04f 0c01 	mov.w	ip, #1
 8013202:	e7f8      	b.n	80131f6 <_strtod_l+0x27e>
 8013204:	08016fd8 	.word	0x08016fd8
 8013208:	08016fc0 	.word	0x08016fc0
 801320c:	7ff00000 	.word	0x7ff00000
 8013210:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013212:	1c51      	adds	r1, r2, #1
 8013214:	9119      	str	r1, [sp, #100]	@ 0x64
 8013216:	7852      	ldrb	r2, [r2, #1]
 8013218:	2a30      	cmp	r2, #48	@ 0x30
 801321a:	d0f9      	beq.n	8013210 <_strtod_l+0x298>
 801321c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8013220:	2908      	cmp	r1, #8
 8013222:	f63f af78 	bhi.w	8013116 <_strtod_l+0x19e>
 8013226:	3a30      	subs	r2, #48	@ 0x30
 8013228:	920e      	str	r2, [sp, #56]	@ 0x38
 801322a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801322c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801322e:	f04f 080a 	mov.w	r8, #10
 8013232:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013234:	1c56      	adds	r6, r2, #1
 8013236:	9619      	str	r6, [sp, #100]	@ 0x64
 8013238:	7852      	ldrb	r2, [r2, #1]
 801323a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801323e:	f1be 0f09 	cmp.w	lr, #9
 8013242:	d939      	bls.n	80132b8 <_strtod_l+0x340>
 8013244:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013246:	1a76      	subs	r6, r6, r1
 8013248:	2e08      	cmp	r6, #8
 801324a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801324e:	dc03      	bgt.n	8013258 <_strtod_l+0x2e0>
 8013250:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013252:	4588      	cmp	r8, r1
 8013254:	bfa8      	it	ge
 8013256:	4688      	movge	r8, r1
 8013258:	f1bc 0f00 	cmp.w	ip, #0
 801325c:	d001      	beq.n	8013262 <_strtod_l+0x2ea>
 801325e:	f1c8 0800 	rsb	r8, r8, #0
 8013262:	2d00      	cmp	r5, #0
 8013264:	d14e      	bne.n	8013304 <_strtod_l+0x38c>
 8013266:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013268:	4308      	orrs	r0, r1
 801326a:	f47f aebe 	bne.w	8012fea <_strtod_l+0x72>
 801326e:	2b00      	cmp	r3, #0
 8013270:	f47f aed6 	bne.w	8013020 <_strtod_l+0xa8>
 8013274:	2a69      	cmp	r2, #105	@ 0x69
 8013276:	d028      	beq.n	80132ca <_strtod_l+0x352>
 8013278:	dc25      	bgt.n	80132c6 <_strtod_l+0x34e>
 801327a:	2a49      	cmp	r2, #73	@ 0x49
 801327c:	d025      	beq.n	80132ca <_strtod_l+0x352>
 801327e:	2a4e      	cmp	r2, #78	@ 0x4e
 8013280:	f47f aece 	bne.w	8013020 <_strtod_l+0xa8>
 8013284:	499b      	ldr	r1, [pc, #620]	@ (80134f4 <_strtod_l+0x57c>)
 8013286:	a819      	add	r0, sp, #100	@ 0x64
 8013288:	f001 fd5e 	bl	8014d48 <__match>
 801328c:	2800      	cmp	r0, #0
 801328e:	f43f aec7 	beq.w	8013020 <_strtod_l+0xa8>
 8013292:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013294:	781b      	ldrb	r3, [r3, #0]
 8013296:	2b28      	cmp	r3, #40	@ 0x28
 8013298:	d12e      	bne.n	80132f8 <_strtod_l+0x380>
 801329a:	4997      	ldr	r1, [pc, #604]	@ (80134f8 <_strtod_l+0x580>)
 801329c:	aa1c      	add	r2, sp, #112	@ 0x70
 801329e:	a819      	add	r0, sp, #100	@ 0x64
 80132a0:	f001 fd66 	bl	8014d70 <__hexnan>
 80132a4:	2805      	cmp	r0, #5
 80132a6:	d127      	bne.n	80132f8 <_strtod_l+0x380>
 80132a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80132aa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80132ae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80132b2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80132b6:	e698      	b.n	8012fea <_strtod_l+0x72>
 80132b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80132ba:	fb08 2101 	mla	r1, r8, r1, r2
 80132be:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80132c2:	920e      	str	r2, [sp, #56]	@ 0x38
 80132c4:	e7b5      	b.n	8013232 <_strtod_l+0x2ba>
 80132c6:	2a6e      	cmp	r2, #110	@ 0x6e
 80132c8:	e7da      	b.n	8013280 <_strtod_l+0x308>
 80132ca:	498c      	ldr	r1, [pc, #560]	@ (80134fc <_strtod_l+0x584>)
 80132cc:	a819      	add	r0, sp, #100	@ 0x64
 80132ce:	f001 fd3b 	bl	8014d48 <__match>
 80132d2:	2800      	cmp	r0, #0
 80132d4:	f43f aea4 	beq.w	8013020 <_strtod_l+0xa8>
 80132d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80132da:	4989      	ldr	r1, [pc, #548]	@ (8013500 <_strtod_l+0x588>)
 80132dc:	3b01      	subs	r3, #1
 80132de:	a819      	add	r0, sp, #100	@ 0x64
 80132e0:	9319      	str	r3, [sp, #100]	@ 0x64
 80132e2:	f001 fd31 	bl	8014d48 <__match>
 80132e6:	b910      	cbnz	r0, 80132ee <_strtod_l+0x376>
 80132e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80132ea:	3301      	adds	r3, #1
 80132ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80132ee:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8013510 <_strtod_l+0x598>
 80132f2:	f04f 0a00 	mov.w	sl, #0
 80132f6:	e678      	b.n	8012fea <_strtod_l+0x72>
 80132f8:	4882      	ldr	r0, [pc, #520]	@ (8013504 <_strtod_l+0x58c>)
 80132fa:	f001 fa61 	bl	80147c0 <nan>
 80132fe:	ec5b ab10 	vmov	sl, fp, d0
 8013302:	e672      	b.n	8012fea <_strtod_l+0x72>
 8013304:	eba8 0309 	sub.w	r3, r8, r9
 8013308:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801330a:	9309      	str	r3, [sp, #36]	@ 0x24
 801330c:	2f00      	cmp	r7, #0
 801330e:	bf08      	it	eq
 8013310:	462f      	moveq	r7, r5
 8013312:	2d10      	cmp	r5, #16
 8013314:	462c      	mov	r4, r5
 8013316:	bfa8      	it	ge
 8013318:	2410      	movge	r4, #16
 801331a:	f7ed f91b 	bl	8000554 <__aeabi_ui2d>
 801331e:	2d09      	cmp	r5, #9
 8013320:	4682      	mov	sl, r0
 8013322:	468b      	mov	fp, r1
 8013324:	dc13      	bgt.n	801334e <_strtod_l+0x3d6>
 8013326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013328:	2b00      	cmp	r3, #0
 801332a:	f43f ae5e 	beq.w	8012fea <_strtod_l+0x72>
 801332e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013330:	dd78      	ble.n	8013424 <_strtod_l+0x4ac>
 8013332:	2b16      	cmp	r3, #22
 8013334:	dc5f      	bgt.n	80133f6 <_strtod_l+0x47e>
 8013336:	4974      	ldr	r1, [pc, #464]	@ (8013508 <_strtod_l+0x590>)
 8013338:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801333c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013340:	4652      	mov	r2, sl
 8013342:	465b      	mov	r3, fp
 8013344:	f7ed f980 	bl	8000648 <__aeabi_dmul>
 8013348:	4682      	mov	sl, r0
 801334a:	468b      	mov	fp, r1
 801334c:	e64d      	b.n	8012fea <_strtod_l+0x72>
 801334e:	4b6e      	ldr	r3, [pc, #440]	@ (8013508 <_strtod_l+0x590>)
 8013350:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013354:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8013358:	f7ed f976 	bl	8000648 <__aeabi_dmul>
 801335c:	4682      	mov	sl, r0
 801335e:	9808      	ldr	r0, [sp, #32]
 8013360:	468b      	mov	fp, r1
 8013362:	f7ed f8f7 	bl	8000554 <__aeabi_ui2d>
 8013366:	4602      	mov	r2, r0
 8013368:	460b      	mov	r3, r1
 801336a:	4650      	mov	r0, sl
 801336c:	4659      	mov	r1, fp
 801336e:	f7ec ffb5 	bl	80002dc <__adddf3>
 8013372:	2d0f      	cmp	r5, #15
 8013374:	4682      	mov	sl, r0
 8013376:	468b      	mov	fp, r1
 8013378:	ddd5      	ble.n	8013326 <_strtod_l+0x3ae>
 801337a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801337c:	1b2c      	subs	r4, r5, r4
 801337e:	441c      	add	r4, r3
 8013380:	2c00      	cmp	r4, #0
 8013382:	f340 8096 	ble.w	80134b2 <_strtod_l+0x53a>
 8013386:	f014 030f 	ands.w	r3, r4, #15
 801338a:	d00a      	beq.n	80133a2 <_strtod_l+0x42a>
 801338c:	495e      	ldr	r1, [pc, #376]	@ (8013508 <_strtod_l+0x590>)
 801338e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013392:	4652      	mov	r2, sl
 8013394:	465b      	mov	r3, fp
 8013396:	e9d1 0100 	ldrd	r0, r1, [r1]
 801339a:	f7ed f955 	bl	8000648 <__aeabi_dmul>
 801339e:	4682      	mov	sl, r0
 80133a0:	468b      	mov	fp, r1
 80133a2:	f034 040f 	bics.w	r4, r4, #15
 80133a6:	d073      	beq.n	8013490 <_strtod_l+0x518>
 80133a8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80133ac:	dd48      	ble.n	8013440 <_strtod_l+0x4c8>
 80133ae:	2400      	movs	r4, #0
 80133b0:	46a0      	mov	r8, r4
 80133b2:	940a      	str	r4, [sp, #40]	@ 0x28
 80133b4:	46a1      	mov	r9, r4
 80133b6:	9a05      	ldr	r2, [sp, #20]
 80133b8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013510 <_strtod_l+0x598>
 80133bc:	2322      	movs	r3, #34	@ 0x22
 80133be:	6013      	str	r3, [r2, #0]
 80133c0:	f04f 0a00 	mov.w	sl, #0
 80133c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	f43f ae0f 	beq.w	8012fea <_strtod_l+0x72>
 80133cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80133ce:	9805      	ldr	r0, [sp, #20]
 80133d0:	f7ff f942 	bl	8012658 <_Bfree>
 80133d4:	9805      	ldr	r0, [sp, #20]
 80133d6:	4649      	mov	r1, r9
 80133d8:	f7ff f93e 	bl	8012658 <_Bfree>
 80133dc:	9805      	ldr	r0, [sp, #20]
 80133de:	4641      	mov	r1, r8
 80133e0:	f7ff f93a 	bl	8012658 <_Bfree>
 80133e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80133e6:	9805      	ldr	r0, [sp, #20]
 80133e8:	f7ff f936 	bl	8012658 <_Bfree>
 80133ec:	9805      	ldr	r0, [sp, #20]
 80133ee:	4621      	mov	r1, r4
 80133f0:	f7ff f932 	bl	8012658 <_Bfree>
 80133f4:	e5f9      	b.n	8012fea <_strtod_l+0x72>
 80133f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80133f8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80133fc:	4293      	cmp	r3, r2
 80133fe:	dbbc      	blt.n	801337a <_strtod_l+0x402>
 8013400:	4c41      	ldr	r4, [pc, #260]	@ (8013508 <_strtod_l+0x590>)
 8013402:	f1c5 050f 	rsb	r5, r5, #15
 8013406:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801340a:	4652      	mov	r2, sl
 801340c:	465b      	mov	r3, fp
 801340e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013412:	f7ed f919 	bl	8000648 <__aeabi_dmul>
 8013416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013418:	1b5d      	subs	r5, r3, r5
 801341a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801341e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013422:	e78f      	b.n	8013344 <_strtod_l+0x3cc>
 8013424:	3316      	adds	r3, #22
 8013426:	dba8      	blt.n	801337a <_strtod_l+0x402>
 8013428:	4b37      	ldr	r3, [pc, #220]	@ (8013508 <_strtod_l+0x590>)
 801342a:	eba9 0808 	sub.w	r8, r9, r8
 801342e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8013432:	e9d8 2300 	ldrd	r2, r3, [r8]
 8013436:	4650      	mov	r0, sl
 8013438:	4659      	mov	r1, fp
 801343a:	f7ed fa2f 	bl	800089c <__aeabi_ddiv>
 801343e:	e783      	b.n	8013348 <_strtod_l+0x3d0>
 8013440:	4b32      	ldr	r3, [pc, #200]	@ (801350c <_strtod_l+0x594>)
 8013442:	9308      	str	r3, [sp, #32]
 8013444:	2300      	movs	r3, #0
 8013446:	1124      	asrs	r4, r4, #4
 8013448:	4650      	mov	r0, sl
 801344a:	4659      	mov	r1, fp
 801344c:	461e      	mov	r6, r3
 801344e:	2c01      	cmp	r4, #1
 8013450:	dc21      	bgt.n	8013496 <_strtod_l+0x51e>
 8013452:	b10b      	cbz	r3, 8013458 <_strtod_l+0x4e0>
 8013454:	4682      	mov	sl, r0
 8013456:	468b      	mov	fp, r1
 8013458:	492c      	ldr	r1, [pc, #176]	@ (801350c <_strtod_l+0x594>)
 801345a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801345e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8013462:	4652      	mov	r2, sl
 8013464:	465b      	mov	r3, fp
 8013466:	e9d1 0100 	ldrd	r0, r1, [r1]
 801346a:	f7ed f8ed 	bl	8000648 <__aeabi_dmul>
 801346e:	4b28      	ldr	r3, [pc, #160]	@ (8013510 <_strtod_l+0x598>)
 8013470:	460a      	mov	r2, r1
 8013472:	400b      	ands	r3, r1
 8013474:	4927      	ldr	r1, [pc, #156]	@ (8013514 <_strtod_l+0x59c>)
 8013476:	428b      	cmp	r3, r1
 8013478:	4682      	mov	sl, r0
 801347a:	d898      	bhi.n	80133ae <_strtod_l+0x436>
 801347c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013480:	428b      	cmp	r3, r1
 8013482:	bf86      	itte	hi
 8013484:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8013518 <_strtod_l+0x5a0>
 8013488:	f04f 3aff 	movhi.w	sl, #4294967295
 801348c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013490:	2300      	movs	r3, #0
 8013492:	9308      	str	r3, [sp, #32]
 8013494:	e07a      	b.n	801358c <_strtod_l+0x614>
 8013496:	07e2      	lsls	r2, r4, #31
 8013498:	d505      	bpl.n	80134a6 <_strtod_l+0x52e>
 801349a:	9b08      	ldr	r3, [sp, #32]
 801349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a0:	f7ed f8d2 	bl	8000648 <__aeabi_dmul>
 80134a4:	2301      	movs	r3, #1
 80134a6:	9a08      	ldr	r2, [sp, #32]
 80134a8:	3208      	adds	r2, #8
 80134aa:	3601      	adds	r6, #1
 80134ac:	1064      	asrs	r4, r4, #1
 80134ae:	9208      	str	r2, [sp, #32]
 80134b0:	e7cd      	b.n	801344e <_strtod_l+0x4d6>
 80134b2:	d0ed      	beq.n	8013490 <_strtod_l+0x518>
 80134b4:	4264      	negs	r4, r4
 80134b6:	f014 020f 	ands.w	r2, r4, #15
 80134ba:	d00a      	beq.n	80134d2 <_strtod_l+0x55a>
 80134bc:	4b12      	ldr	r3, [pc, #72]	@ (8013508 <_strtod_l+0x590>)
 80134be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80134c2:	4650      	mov	r0, sl
 80134c4:	4659      	mov	r1, fp
 80134c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ca:	f7ed f9e7 	bl	800089c <__aeabi_ddiv>
 80134ce:	4682      	mov	sl, r0
 80134d0:	468b      	mov	fp, r1
 80134d2:	1124      	asrs	r4, r4, #4
 80134d4:	d0dc      	beq.n	8013490 <_strtod_l+0x518>
 80134d6:	2c1f      	cmp	r4, #31
 80134d8:	dd20      	ble.n	801351c <_strtod_l+0x5a4>
 80134da:	2400      	movs	r4, #0
 80134dc:	46a0      	mov	r8, r4
 80134de:	940a      	str	r4, [sp, #40]	@ 0x28
 80134e0:	46a1      	mov	r9, r4
 80134e2:	9a05      	ldr	r2, [sp, #20]
 80134e4:	2322      	movs	r3, #34	@ 0x22
 80134e6:	f04f 0a00 	mov.w	sl, #0
 80134ea:	f04f 0b00 	mov.w	fp, #0
 80134ee:	6013      	str	r3, [r2, #0]
 80134f0:	e768      	b.n	80133c4 <_strtod_l+0x44c>
 80134f2:	bf00      	nop
 80134f4:	08016dad 	.word	0x08016dad
 80134f8:	08016fc4 	.word	0x08016fc4
 80134fc:	08016da5 	.word	0x08016da5
 8013500:	08016dda 	.word	0x08016dda
 8013504:	08017188 	.word	0x08017188
 8013508:	08016ef8 	.word	0x08016ef8
 801350c:	08016ed0 	.word	0x08016ed0
 8013510:	7ff00000 	.word	0x7ff00000
 8013514:	7ca00000 	.word	0x7ca00000
 8013518:	7fefffff 	.word	0x7fefffff
 801351c:	f014 0310 	ands.w	r3, r4, #16
 8013520:	bf18      	it	ne
 8013522:	236a      	movne	r3, #106	@ 0x6a
 8013524:	4ea9      	ldr	r6, [pc, #676]	@ (80137cc <_strtod_l+0x854>)
 8013526:	9308      	str	r3, [sp, #32]
 8013528:	4650      	mov	r0, sl
 801352a:	4659      	mov	r1, fp
 801352c:	2300      	movs	r3, #0
 801352e:	07e2      	lsls	r2, r4, #31
 8013530:	d504      	bpl.n	801353c <_strtod_l+0x5c4>
 8013532:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013536:	f7ed f887 	bl	8000648 <__aeabi_dmul>
 801353a:	2301      	movs	r3, #1
 801353c:	1064      	asrs	r4, r4, #1
 801353e:	f106 0608 	add.w	r6, r6, #8
 8013542:	d1f4      	bne.n	801352e <_strtod_l+0x5b6>
 8013544:	b10b      	cbz	r3, 801354a <_strtod_l+0x5d2>
 8013546:	4682      	mov	sl, r0
 8013548:	468b      	mov	fp, r1
 801354a:	9b08      	ldr	r3, [sp, #32]
 801354c:	b1b3      	cbz	r3, 801357c <_strtod_l+0x604>
 801354e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013552:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8013556:	2b00      	cmp	r3, #0
 8013558:	4659      	mov	r1, fp
 801355a:	dd0f      	ble.n	801357c <_strtod_l+0x604>
 801355c:	2b1f      	cmp	r3, #31
 801355e:	dd55      	ble.n	801360c <_strtod_l+0x694>
 8013560:	2b34      	cmp	r3, #52	@ 0x34
 8013562:	bfde      	ittt	le
 8013564:	f04f 33ff 	movle.w	r3, #4294967295
 8013568:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801356c:	4093      	lslle	r3, r2
 801356e:	f04f 0a00 	mov.w	sl, #0
 8013572:	bfcc      	ite	gt
 8013574:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013578:	ea03 0b01 	andle.w	fp, r3, r1
 801357c:	2200      	movs	r2, #0
 801357e:	2300      	movs	r3, #0
 8013580:	4650      	mov	r0, sl
 8013582:	4659      	mov	r1, fp
 8013584:	f7ed fac8 	bl	8000b18 <__aeabi_dcmpeq>
 8013588:	2800      	cmp	r0, #0
 801358a:	d1a6      	bne.n	80134da <_strtod_l+0x562>
 801358c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801358e:	9300      	str	r3, [sp, #0]
 8013590:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013592:	9805      	ldr	r0, [sp, #20]
 8013594:	462b      	mov	r3, r5
 8013596:	463a      	mov	r2, r7
 8013598:	f7ff f8c6 	bl	8012728 <__s2b>
 801359c:	900a      	str	r0, [sp, #40]	@ 0x28
 801359e:	2800      	cmp	r0, #0
 80135a0:	f43f af05 	beq.w	80133ae <_strtod_l+0x436>
 80135a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80135a6:	2a00      	cmp	r2, #0
 80135a8:	eba9 0308 	sub.w	r3, r9, r8
 80135ac:	bfa8      	it	ge
 80135ae:	2300      	movge	r3, #0
 80135b0:	9312      	str	r3, [sp, #72]	@ 0x48
 80135b2:	2400      	movs	r4, #0
 80135b4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80135b8:	9316      	str	r3, [sp, #88]	@ 0x58
 80135ba:	46a0      	mov	r8, r4
 80135bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80135be:	9805      	ldr	r0, [sp, #20]
 80135c0:	6859      	ldr	r1, [r3, #4]
 80135c2:	f7ff f809 	bl	80125d8 <_Balloc>
 80135c6:	4681      	mov	r9, r0
 80135c8:	2800      	cmp	r0, #0
 80135ca:	f43f aef4 	beq.w	80133b6 <_strtod_l+0x43e>
 80135ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80135d0:	691a      	ldr	r2, [r3, #16]
 80135d2:	3202      	adds	r2, #2
 80135d4:	f103 010c 	add.w	r1, r3, #12
 80135d8:	0092      	lsls	r2, r2, #2
 80135da:	300c      	adds	r0, #12
 80135dc:	f7fe f899 	bl	8011712 <memcpy>
 80135e0:	ec4b ab10 	vmov	d0, sl, fp
 80135e4:	9805      	ldr	r0, [sp, #20]
 80135e6:	aa1c      	add	r2, sp, #112	@ 0x70
 80135e8:	a91b      	add	r1, sp, #108	@ 0x6c
 80135ea:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80135ee:	f7ff fbd7 	bl	8012da0 <__d2b>
 80135f2:	901a      	str	r0, [sp, #104]	@ 0x68
 80135f4:	2800      	cmp	r0, #0
 80135f6:	f43f aede 	beq.w	80133b6 <_strtod_l+0x43e>
 80135fa:	9805      	ldr	r0, [sp, #20]
 80135fc:	2101      	movs	r1, #1
 80135fe:	f7ff f929 	bl	8012854 <__i2b>
 8013602:	4680      	mov	r8, r0
 8013604:	b948      	cbnz	r0, 801361a <_strtod_l+0x6a2>
 8013606:	f04f 0800 	mov.w	r8, #0
 801360a:	e6d4      	b.n	80133b6 <_strtod_l+0x43e>
 801360c:	f04f 32ff 	mov.w	r2, #4294967295
 8013610:	fa02 f303 	lsl.w	r3, r2, r3
 8013614:	ea03 0a0a 	and.w	sl, r3, sl
 8013618:	e7b0      	b.n	801357c <_strtod_l+0x604>
 801361a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801361c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801361e:	2d00      	cmp	r5, #0
 8013620:	bfab      	itete	ge
 8013622:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8013624:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8013626:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8013628:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801362a:	bfac      	ite	ge
 801362c:	18ef      	addge	r7, r5, r3
 801362e:	1b5e      	sublt	r6, r3, r5
 8013630:	9b08      	ldr	r3, [sp, #32]
 8013632:	1aed      	subs	r5, r5, r3
 8013634:	4415      	add	r5, r2
 8013636:	4b66      	ldr	r3, [pc, #408]	@ (80137d0 <_strtod_l+0x858>)
 8013638:	3d01      	subs	r5, #1
 801363a:	429d      	cmp	r5, r3
 801363c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013640:	da50      	bge.n	80136e4 <_strtod_l+0x76c>
 8013642:	1b5b      	subs	r3, r3, r5
 8013644:	2b1f      	cmp	r3, #31
 8013646:	eba2 0203 	sub.w	r2, r2, r3
 801364a:	f04f 0101 	mov.w	r1, #1
 801364e:	dc3d      	bgt.n	80136cc <_strtod_l+0x754>
 8013650:	fa01 f303 	lsl.w	r3, r1, r3
 8013654:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013656:	2300      	movs	r3, #0
 8013658:	9310      	str	r3, [sp, #64]	@ 0x40
 801365a:	18bd      	adds	r5, r7, r2
 801365c:	9b08      	ldr	r3, [sp, #32]
 801365e:	42af      	cmp	r7, r5
 8013660:	4416      	add	r6, r2
 8013662:	441e      	add	r6, r3
 8013664:	463b      	mov	r3, r7
 8013666:	bfa8      	it	ge
 8013668:	462b      	movge	r3, r5
 801366a:	42b3      	cmp	r3, r6
 801366c:	bfa8      	it	ge
 801366e:	4633      	movge	r3, r6
 8013670:	2b00      	cmp	r3, #0
 8013672:	bfc2      	ittt	gt
 8013674:	1aed      	subgt	r5, r5, r3
 8013676:	1af6      	subgt	r6, r6, r3
 8013678:	1aff      	subgt	r7, r7, r3
 801367a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801367c:	2b00      	cmp	r3, #0
 801367e:	dd16      	ble.n	80136ae <_strtod_l+0x736>
 8013680:	4641      	mov	r1, r8
 8013682:	9805      	ldr	r0, [sp, #20]
 8013684:	461a      	mov	r2, r3
 8013686:	f7ff f9a5 	bl	80129d4 <__pow5mult>
 801368a:	4680      	mov	r8, r0
 801368c:	2800      	cmp	r0, #0
 801368e:	d0ba      	beq.n	8013606 <_strtod_l+0x68e>
 8013690:	4601      	mov	r1, r0
 8013692:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013694:	9805      	ldr	r0, [sp, #20]
 8013696:	f7ff f8f3 	bl	8012880 <__multiply>
 801369a:	900e      	str	r0, [sp, #56]	@ 0x38
 801369c:	2800      	cmp	r0, #0
 801369e:	f43f ae8a 	beq.w	80133b6 <_strtod_l+0x43e>
 80136a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80136a4:	9805      	ldr	r0, [sp, #20]
 80136a6:	f7fe ffd7 	bl	8012658 <_Bfree>
 80136aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80136ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80136ae:	2d00      	cmp	r5, #0
 80136b0:	dc1d      	bgt.n	80136ee <_strtod_l+0x776>
 80136b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	dd23      	ble.n	8013700 <_strtod_l+0x788>
 80136b8:	4649      	mov	r1, r9
 80136ba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80136bc:	9805      	ldr	r0, [sp, #20]
 80136be:	f7ff f989 	bl	80129d4 <__pow5mult>
 80136c2:	4681      	mov	r9, r0
 80136c4:	b9e0      	cbnz	r0, 8013700 <_strtod_l+0x788>
 80136c6:	f04f 0900 	mov.w	r9, #0
 80136ca:	e674      	b.n	80133b6 <_strtod_l+0x43e>
 80136cc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80136d0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80136d4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80136d8:	35e2      	adds	r5, #226	@ 0xe2
 80136da:	fa01 f305 	lsl.w	r3, r1, r5
 80136de:	9310      	str	r3, [sp, #64]	@ 0x40
 80136e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80136e2:	e7ba      	b.n	801365a <_strtod_l+0x6e2>
 80136e4:	2300      	movs	r3, #0
 80136e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80136e8:	2301      	movs	r3, #1
 80136ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80136ec:	e7b5      	b.n	801365a <_strtod_l+0x6e2>
 80136ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80136f0:	9805      	ldr	r0, [sp, #20]
 80136f2:	462a      	mov	r2, r5
 80136f4:	f7ff f9c8 	bl	8012a88 <__lshift>
 80136f8:	901a      	str	r0, [sp, #104]	@ 0x68
 80136fa:	2800      	cmp	r0, #0
 80136fc:	d1d9      	bne.n	80136b2 <_strtod_l+0x73a>
 80136fe:	e65a      	b.n	80133b6 <_strtod_l+0x43e>
 8013700:	2e00      	cmp	r6, #0
 8013702:	dd07      	ble.n	8013714 <_strtod_l+0x79c>
 8013704:	4649      	mov	r1, r9
 8013706:	9805      	ldr	r0, [sp, #20]
 8013708:	4632      	mov	r2, r6
 801370a:	f7ff f9bd 	bl	8012a88 <__lshift>
 801370e:	4681      	mov	r9, r0
 8013710:	2800      	cmp	r0, #0
 8013712:	d0d8      	beq.n	80136c6 <_strtod_l+0x74e>
 8013714:	2f00      	cmp	r7, #0
 8013716:	dd08      	ble.n	801372a <_strtod_l+0x7b2>
 8013718:	4641      	mov	r1, r8
 801371a:	9805      	ldr	r0, [sp, #20]
 801371c:	463a      	mov	r2, r7
 801371e:	f7ff f9b3 	bl	8012a88 <__lshift>
 8013722:	4680      	mov	r8, r0
 8013724:	2800      	cmp	r0, #0
 8013726:	f43f ae46 	beq.w	80133b6 <_strtod_l+0x43e>
 801372a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801372c:	9805      	ldr	r0, [sp, #20]
 801372e:	464a      	mov	r2, r9
 8013730:	f7ff fa32 	bl	8012b98 <__mdiff>
 8013734:	4604      	mov	r4, r0
 8013736:	2800      	cmp	r0, #0
 8013738:	f43f ae3d 	beq.w	80133b6 <_strtod_l+0x43e>
 801373c:	68c3      	ldr	r3, [r0, #12]
 801373e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013740:	2300      	movs	r3, #0
 8013742:	60c3      	str	r3, [r0, #12]
 8013744:	4641      	mov	r1, r8
 8013746:	f7ff fa0b 	bl	8012b60 <__mcmp>
 801374a:	2800      	cmp	r0, #0
 801374c:	da46      	bge.n	80137dc <_strtod_l+0x864>
 801374e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013750:	ea53 030a 	orrs.w	r3, r3, sl
 8013754:	d16c      	bne.n	8013830 <_strtod_l+0x8b8>
 8013756:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801375a:	2b00      	cmp	r3, #0
 801375c:	d168      	bne.n	8013830 <_strtod_l+0x8b8>
 801375e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013762:	0d1b      	lsrs	r3, r3, #20
 8013764:	051b      	lsls	r3, r3, #20
 8013766:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801376a:	d961      	bls.n	8013830 <_strtod_l+0x8b8>
 801376c:	6963      	ldr	r3, [r4, #20]
 801376e:	b913      	cbnz	r3, 8013776 <_strtod_l+0x7fe>
 8013770:	6923      	ldr	r3, [r4, #16]
 8013772:	2b01      	cmp	r3, #1
 8013774:	dd5c      	ble.n	8013830 <_strtod_l+0x8b8>
 8013776:	4621      	mov	r1, r4
 8013778:	2201      	movs	r2, #1
 801377a:	9805      	ldr	r0, [sp, #20]
 801377c:	f7ff f984 	bl	8012a88 <__lshift>
 8013780:	4641      	mov	r1, r8
 8013782:	4604      	mov	r4, r0
 8013784:	f7ff f9ec 	bl	8012b60 <__mcmp>
 8013788:	2800      	cmp	r0, #0
 801378a:	dd51      	ble.n	8013830 <_strtod_l+0x8b8>
 801378c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013790:	9a08      	ldr	r2, [sp, #32]
 8013792:	0d1b      	lsrs	r3, r3, #20
 8013794:	051b      	lsls	r3, r3, #20
 8013796:	2a00      	cmp	r2, #0
 8013798:	d06b      	beq.n	8013872 <_strtod_l+0x8fa>
 801379a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801379e:	d868      	bhi.n	8013872 <_strtod_l+0x8fa>
 80137a0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80137a4:	f67f ae9d 	bls.w	80134e2 <_strtod_l+0x56a>
 80137a8:	4b0a      	ldr	r3, [pc, #40]	@ (80137d4 <_strtod_l+0x85c>)
 80137aa:	4650      	mov	r0, sl
 80137ac:	4659      	mov	r1, fp
 80137ae:	2200      	movs	r2, #0
 80137b0:	f7ec ff4a 	bl	8000648 <__aeabi_dmul>
 80137b4:	4b08      	ldr	r3, [pc, #32]	@ (80137d8 <_strtod_l+0x860>)
 80137b6:	400b      	ands	r3, r1
 80137b8:	4682      	mov	sl, r0
 80137ba:	468b      	mov	fp, r1
 80137bc:	2b00      	cmp	r3, #0
 80137be:	f47f ae05 	bne.w	80133cc <_strtod_l+0x454>
 80137c2:	9a05      	ldr	r2, [sp, #20]
 80137c4:	2322      	movs	r3, #34	@ 0x22
 80137c6:	6013      	str	r3, [r2, #0]
 80137c8:	e600      	b.n	80133cc <_strtod_l+0x454>
 80137ca:	bf00      	nop
 80137cc:	08016ff0 	.word	0x08016ff0
 80137d0:	fffffc02 	.word	0xfffffc02
 80137d4:	39500000 	.word	0x39500000
 80137d8:	7ff00000 	.word	0x7ff00000
 80137dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80137e0:	d165      	bne.n	80138ae <_strtod_l+0x936>
 80137e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80137e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80137e8:	b35a      	cbz	r2, 8013842 <_strtod_l+0x8ca>
 80137ea:	4a9f      	ldr	r2, [pc, #636]	@ (8013a68 <_strtod_l+0xaf0>)
 80137ec:	4293      	cmp	r3, r2
 80137ee:	d12b      	bne.n	8013848 <_strtod_l+0x8d0>
 80137f0:	9b08      	ldr	r3, [sp, #32]
 80137f2:	4651      	mov	r1, sl
 80137f4:	b303      	cbz	r3, 8013838 <_strtod_l+0x8c0>
 80137f6:	4b9d      	ldr	r3, [pc, #628]	@ (8013a6c <_strtod_l+0xaf4>)
 80137f8:	465a      	mov	r2, fp
 80137fa:	4013      	ands	r3, r2
 80137fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013800:	f04f 32ff 	mov.w	r2, #4294967295
 8013804:	d81b      	bhi.n	801383e <_strtod_l+0x8c6>
 8013806:	0d1b      	lsrs	r3, r3, #20
 8013808:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801380c:	fa02 f303 	lsl.w	r3, r2, r3
 8013810:	4299      	cmp	r1, r3
 8013812:	d119      	bne.n	8013848 <_strtod_l+0x8d0>
 8013814:	4b96      	ldr	r3, [pc, #600]	@ (8013a70 <_strtod_l+0xaf8>)
 8013816:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013818:	429a      	cmp	r2, r3
 801381a:	d102      	bne.n	8013822 <_strtod_l+0x8aa>
 801381c:	3101      	adds	r1, #1
 801381e:	f43f adca 	beq.w	80133b6 <_strtod_l+0x43e>
 8013822:	4b92      	ldr	r3, [pc, #584]	@ (8013a6c <_strtod_l+0xaf4>)
 8013824:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013826:	401a      	ands	r2, r3
 8013828:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801382c:	f04f 0a00 	mov.w	sl, #0
 8013830:	9b08      	ldr	r3, [sp, #32]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d1b8      	bne.n	80137a8 <_strtod_l+0x830>
 8013836:	e5c9      	b.n	80133cc <_strtod_l+0x454>
 8013838:	f04f 33ff 	mov.w	r3, #4294967295
 801383c:	e7e8      	b.n	8013810 <_strtod_l+0x898>
 801383e:	4613      	mov	r3, r2
 8013840:	e7e6      	b.n	8013810 <_strtod_l+0x898>
 8013842:	ea53 030a 	orrs.w	r3, r3, sl
 8013846:	d0a1      	beq.n	801378c <_strtod_l+0x814>
 8013848:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801384a:	b1db      	cbz	r3, 8013884 <_strtod_l+0x90c>
 801384c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801384e:	4213      	tst	r3, r2
 8013850:	d0ee      	beq.n	8013830 <_strtod_l+0x8b8>
 8013852:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013854:	9a08      	ldr	r2, [sp, #32]
 8013856:	4650      	mov	r0, sl
 8013858:	4659      	mov	r1, fp
 801385a:	b1bb      	cbz	r3, 801388c <_strtod_l+0x914>
 801385c:	f7ff fb6e 	bl	8012f3c <sulp>
 8013860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013864:	ec53 2b10 	vmov	r2, r3, d0
 8013868:	f7ec fd38 	bl	80002dc <__adddf3>
 801386c:	4682      	mov	sl, r0
 801386e:	468b      	mov	fp, r1
 8013870:	e7de      	b.n	8013830 <_strtod_l+0x8b8>
 8013872:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013876:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801387a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801387e:	f04f 3aff 	mov.w	sl, #4294967295
 8013882:	e7d5      	b.n	8013830 <_strtod_l+0x8b8>
 8013884:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013886:	ea13 0f0a 	tst.w	r3, sl
 801388a:	e7e1      	b.n	8013850 <_strtod_l+0x8d8>
 801388c:	f7ff fb56 	bl	8012f3c <sulp>
 8013890:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013894:	ec53 2b10 	vmov	r2, r3, d0
 8013898:	f7ec fd1e 	bl	80002d8 <__aeabi_dsub>
 801389c:	2200      	movs	r2, #0
 801389e:	2300      	movs	r3, #0
 80138a0:	4682      	mov	sl, r0
 80138a2:	468b      	mov	fp, r1
 80138a4:	f7ed f938 	bl	8000b18 <__aeabi_dcmpeq>
 80138a8:	2800      	cmp	r0, #0
 80138aa:	d0c1      	beq.n	8013830 <_strtod_l+0x8b8>
 80138ac:	e619      	b.n	80134e2 <_strtod_l+0x56a>
 80138ae:	4641      	mov	r1, r8
 80138b0:	4620      	mov	r0, r4
 80138b2:	f7ff facd 	bl	8012e50 <__ratio>
 80138b6:	ec57 6b10 	vmov	r6, r7, d0
 80138ba:	2200      	movs	r2, #0
 80138bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80138c0:	4630      	mov	r0, r6
 80138c2:	4639      	mov	r1, r7
 80138c4:	f7ed f93c 	bl	8000b40 <__aeabi_dcmple>
 80138c8:	2800      	cmp	r0, #0
 80138ca:	d06f      	beq.n	80139ac <_strtod_l+0xa34>
 80138cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d17a      	bne.n	80139c8 <_strtod_l+0xa50>
 80138d2:	f1ba 0f00 	cmp.w	sl, #0
 80138d6:	d158      	bne.n	801398a <_strtod_l+0xa12>
 80138d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80138da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d15a      	bne.n	8013998 <_strtod_l+0xa20>
 80138e2:	4b64      	ldr	r3, [pc, #400]	@ (8013a74 <_strtod_l+0xafc>)
 80138e4:	2200      	movs	r2, #0
 80138e6:	4630      	mov	r0, r6
 80138e8:	4639      	mov	r1, r7
 80138ea:	f7ed f91f 	bl	8000b2c <__aeabi_dcmplt>
 80138ee:	2800      	cmp	r0, #0
 80138f0:	d159      	bne.n	80139a6 <_strtod_l+0xa2e>
 80138f2:	4630      	mov	r0, r6
 80138f4:	4639      	mov	r1, r7
 80138f6:	4b60      	ldr	r3, [pc, #384]	@ (8013a78 <_strtod_l+0xb00>)
 80138f8:	2200      	movs	r2, #0
 80138fa:	f7ec fea5 	bl	8000648 <__aeabi_dmul>
 80138fe:	4606      	mov	r6, r0
 8013900:	460f      	mov	r7, r1
 8013902:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8013906:	9606      	str	r6, [sp, #24]
 8013908:	9307      	str	r3, [sp, #28]
 801390a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801390e:	4d57      	ldr	r5, [pc, #348]	@ (8013a6c <_strtod_l+0xaf4>)
 8013910:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013914:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013916:	401d      	ands	r5, r3
 8013918:	4b58      	ldr	r3, [pc, #352]	@ (8013a7c <_strtod_l+0xb04>)
 801391a:	429d      	cmp	r5, r3
 801391c:	f040 80b2 	bne.w	8013a84 <_strtod_l+0xb0c>
 8013920:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013922:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8013926:	ec4b ab10 	vmov	d0, sl, fp
 801392a:	f7ff f9c9 	bl	8012cc0 <__ulp>
 801392e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013932:	ec51 0b10 	vmov	r0, r1, d0
 8013936:	f7ec fe87 	bl	8000648 <__aeabi_dmul>
 801393a:	4652      	mov	r2, sl
 801393c:	465b      	mov	r3, fp
 801393e:	f7ec fccd 	bl	80002dc <__adddf3>
 8013942:	460b      	mov	r3, r1
 8013944:	4949      	ldr	r1, [pc, #292]	@ (8013a6c <_strtod_l+0xaf4>)
 8013946:	4a4e      	ldr	r2, [pc, #312]	@ (8013a80 <_strtod_l+0xb08>)
 8013948:	4019      	ands	r1, r3
 801394a:	4291      	cmp	r1, r2
 801394c:	4682      	mov	sl, r0
 801394e:	d942      	bls.n	80139d6 <_strtod_l+0xa5e>
 8013950:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013952:	4b47      	ldr	r3, [pc, #284]	@ (8013a70 <_strtod_l+0xaf8>)
 8013954:	429a      	cmp	r2, r3
 8013956:	d103      	bne.n	8013960 <_strtod_l+0x9e8>
 8013958:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801395a:	3301      	adds	r3, #1
 801395c:	f43f ad2b 	beq.w	80133b6 <_strtod_l+0x43e>
 8013960:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8013a70 <_strtod_l+0xaf8>
 8013964:	f04f 3aff 	mov.w	sl, #4294967295
 8013968:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801396a:	9805      	ldr	r0, [sp, #20]
 801396c:	f7fe fe74 	bl	8012658 <_Bfree>
 8013970:	9805      	ldr	r0, [sp, #20]
 8013972:	4649      	mov	r1, r9
 8013974:	f7fe fe70 	bl	8012658 <_Bfree>
 8013978:	9805      	ldr	r0, [sp, #20]
 801397a:	4641      	mov	r1, r8
 801397c:	f7fe fe6c 	bl	8012658 <_Bfree>
 8013980:	9805      	ldr	r0, [sp, #20]
 8013982:	4621      	mov	r1, r4
 8013984:	f7fe fe68 	bl	8012658 <_Bfree>
 8013988:	e618      	b.n	80135bc <_strtod_l+0x644>
 801398a:	f1ba 0f01 	cmp.w	sl, #1
 801398e:	d103      	bne.n	8013998 <_strtod_l+0xa20>
 8013990:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013992:	2b00      	cmp	r3, #0
 8013994:	f43f ada5 	beq.w	80134e2 <_strtod_l+0x56a>
 8013998:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8013a48 <_strtod_l+0xad0>
 801399c:	4f35      	ldr	r7, [pc, #212]	@ (8013a74 <_strtod_l+0xafc>)
 801399e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80139a2:	2600      	movs	r6, #0
 80139a4:	e7b1      	b.n	801390a <_strtod_l+0x992>
 80139a6:	4f34      	ldr	r7, [pc, #208]	@ (8013a78 <_strtod_l+0xb00>)
 80139a8:	2600      	movs	r6, #0
 80139aa:	e7aa      	b.n	8013902 <_strtod_l+0x98a>
 80139ac:	4b32      	ldr	r3, [pc, #200]	@ (8013a78 <_strtod_l+0xb00>)
 80139ae:	4630      	mov	r0, r6
 80139b0:	4639      	mov	r1, r7
 80139b2:	2200      	movs	r2, #0
 80139b4:	f7ec fe48 	bl	8000648 <__aeabi_dmul>
 80139b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80139ba:	4606      	mov	r6, r0
 80139bc:	460f      	mov	r7, r1
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d09f      	beq.n	8013902 <_strtod_l+0x98a>
 80139c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80139c6:	e7a0      	b.n	801390a <_strtod_l+0x992>
 80139c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8013a50 <_strtod_l+0xad8>
 80139cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80139d0:	ec57 6b17 	vmov	r6, r7, d7
 80139d4:	e799      	b.n	801390a <_strtod_l+0x992>
 80139d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80139da:	9b08      	ldr	r3, [sp, #32]
 80139dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d1c1      	bne.n	8013968 <_strtod_l+0x9f0>
 80139e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80139e8:	0d1b      	lsrs	r3, r3, #20
 80139ea:	051b      	lsls	r3, r3, #20
 80139ec:	429d      	cmp	r5, r3
 80139ee:	d1bb      	bne.n	8013968 <_strtod_l+0x9f0>
 80139f0:	4630      	mov	r0, r6
 80139f2:	4639      	mov	r1, r7
 80139f4:	f7ed f988 	bl	8000d08 <__aeabi_d2lz>
 80139f8:	f7ec fdf8 	bl	80005ec <__aeabi_l2d>
 80139fc:	4602      	mov	r2, r0
 80139fe:	460b      	mov	r3, r1
 8013a00:	4630      	mov	r0, r6
 8013a02:	4639      	mov	r1, r7
 8013a04:	f7ec fc68 	bl	80002d8 <__aeabi_dsub>
 8013a08:	460b      	mov	r3, r1
 8013a0a:	4602      	mov	r2, r0
 8013a0c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8013a10:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8013a14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a16:	ea46 060a 	orr.w	r6, r6, sl
 8013a1a:	431e      	orrs	r6, r3
 8013a1c:	d06f      	beq.n	8013afe <_strtod_l+0xb86>
 8013a1e:	a30e      	add	r3, pc, #56	@ (adr r3, 8013a58 <_strtod_l+0xae0>)
 8013a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a24:	f7ed f882 	bl	8000b2c <__aeabi_dcmplt>
 8013a28:	2800      	cmp	r0, #0
 8013a2a:	f47f accf 	bne.w	80133cc <_strtod_l+0x454>
 8013a2e:	a30c      	add	r3, pc, #48	@ (adr r3, 8013a60 <_strtod_l+0xae8>)
 8013a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013a38:	f7ed f896 	bl	8000b68 <__aeabi_dcmpgt>
 8013a3c:	2800      	cmp	r0, #0
 8013a3e:	d093      	beq.n	8013968 <_strtod_l+0x9f0>
 8013a40:	e4c4      	b.n	80133cc <_strtod_l+0x454>
 8013a42:	bf00      	nop
 8013a44:	f3af 8000 	nop.w
 8013a48:	00000000 	.word	0x00000000
 8013a4c:	bff00000 	.word	0xbff00000
 8013a50:	00000000 	.word	0x00000000
 8013a54:	3ff00000 	.word	0x3ff00000
 8013a58:	94a03595 	.word	0x94a03595
 8013a5c:	3fdfffff 	.word	0x3fdfffff
 8013a60:	35afe535 	.word	0x35afe535
 8013a64:	3fe00000 	.word	0x3fe00000
 8013a68:	000fffff 	.word	0x000fffff
 8013a6c:	7ff00000 	.word	0x7ff00000
 8013a70:	7fefffff 	.word	0x7fefffff
 8013a74:	3ff00000 	.word	0x3ff00000
 8013a78:	3fe00000 	.word	0x3fe00000
 8013a7c:	7fe00000 	.word	0x7fe00000
 8013a80:	7c9fffff 	.word	0x7c9fffff
 8013a84:	9b08      	ldr	r3, [sp, #32]
 8013a86:	b323      	cbz	r3, 8013ad2 <_strtod_l+0xb5a>
 8013a88:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8013a8c:	d821      	bhi.n	8013ad2 <_strtod_l+0xb5a>
 8013a8e:	a328      	add	r3, pc, #160	@ (adr r3, 8013b30 <_strtod_l+0xbb8>)
 8013a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a94:	4630      	mov	r0, r6
 8013a96:	4639      	mov	r1, r7
 8013a98:	f7ed f852 	bl	8000b40 <__aeabi_dcmple>
 8013a9c:	b1a0      	cbz	r0, 8013ac8 <_strtod_l+0xb50>
 8013a9e:	4639      	mov	r1, r7
 8013aa0:	4630      	mov	r0, r6
 8013aa2:	f7ed f8a9 	bl	8000bf8 <__aeabi_d2uiz>
 8013aa6:	2801      	cmp	r0, #1
 8013aa8:	bf38      	it	cc
 8013aaa:	2001      	movcc	r0, #1
 8013aac:	f7ec fd52 	bl	8000554 <__aeabi_ui2d>
 8013ab0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013ab2:	4606      	mov	r6, r0
 8013ab4:	460f      	mov	r7, r1
 8013ab6:	b9fb      	cbnz	r3, 8013af8 <_strtod_l+0xb80>
 8013ab8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013abc:	9014      	str	r0, [sp, #80]	@ 0x50
 8013abe:	9315      	str	r3, [sp, #84]	@ 0x54
 8013ac0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8013ac4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013ac8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013aca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8013ace:	1b5b      	subs	r3, r3, r5
 8013ad0:	9311      	str	r3, [sp, #68]	@ 0x44
 8013ad2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013ad6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8013ada:	f7ff f8f1 	bl	8012cc0 <__ulp>
 8013ade:	4650      	mov	r0, sl
 8013ae0:	ec53 2b10 	vmov	r2, r3, d0
 8013ae4:	4659      	mov	r1, fp
 8013ae6:	f7ec fdaf 	bl	8000648 <__aeabi_dmul>
 8013aea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013aee:	f7ec fbf5 	bl	80002dc <__adddf3>
 8013af2:	4682      	mov	sl, r0
 8013af4:	468b      	mov	fp, r1
 8013af6:	e770      	b.n	80139da <_strtod_l+0xa62>
 8013af8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8013afc:	e7e0      	b.n	8013ac0 <_strtod_l+0xb48>
 8013afe:	a30e      	add	r3, pc, #56	@ (adr r3, 8013b38 <_strtod_l+0xbc0>)
 8013b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b04:	f7ed f812 	bl	8000b2c <__aeabi_dcmplt>
 8013b08:	e798      	b.n	8013a3c <_strtod_l+0xac4>
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013b0e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013b10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013b12:	6013      	str	r3, [r2, #0]
 8013b14:	f7ff ba6d 	b.w	8012ff2 <_strtod_l+0x7a>
 8013b18:	2a65      	cmp	r2, #101	@ 0x65
 8013b1a:	f43f ab66 	beq.w	80131ea <_strtod_l+0x272>
 8013b1e:	2a45      	cmp	r2, #69	@ 0x45
 8013b20:	f43f ab63 	beq.w	80131ea <_strtod_l+0x272>
 8013b24:	2301      	movs	r3, #1
 8013b26:	f7ff bb9e 	b.w	8013266 <_strtod_l+0x2ee>
 8013b2a:	bf00      	nop
 8013b2c:	f3af 8000 	nop.w
 8013b30:	ffc00000 	.word	0xffc00000
 8013b34:	41dfffff 	.word	0x41dfffff
 8013b38:	94a03595 	.word	0x94a03595
 8013b3c:	3fcfffff 	.word	0x3fcfffff

08013b40 <_strtod_r>:
 8013b40:	4b01      	ldr	r3, [pc, #4]	@ (8013b48 <_strtod_r+0x8>)
 8013b42:	f7ff ba19 	b.w	8012f78 <_strtod_l>
 8013b46:	bf00      	nop
 8013b48:	200001fc 	.word	0x200001fc

08013b4c <_strtol_l.constprop.0>:
 8013b4c:	2b24      	cmp	r3, #36	@ 0x24
 8013b4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b52:	4686      	mov	lr, r0
 8013b54:	4690      	mov	r8, r2
 8013b56:	d801      	bhi.n	8013b5c <_strtol_l.constprop.0+0x10>
 8013b58:	2b01      	cmp	r3, #1
 8013b5a:	d106      	bne.n	8013b6a <_strtol_l.constprop.0+0x1e>
 8013b5c:	f7fd fdac 	bl	80116b8 <__errno>
 8013b60:	2316      	movs	r3, #22
 8013b62:	6003      	str	r3, [r0, #0]
 8013b64:	2000      	movs	r0, #0
 8013b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b6a:	4834      	ldr	r0, [pc, #208]	@ (8013c3c <_strtol_l.constprop.0+0xf0>)
 8013b6c:	460d      	mov	r5, r1
 8013b6e:	462a      	mov	r2, r5
 8013b70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013b74:	5d06      	ldrb	r6, [r0, r4]
 8013b76:	f016 0608 	ands.w	r6, r6, #8
 8013b7a:	d1f8      	bne.n	8013b6e <_strtol_l.constprop.0+0x22>
 8013b7c:	2c2d      	cmp	r4, #45	@ 0x2d
 8013b7e:	d12d      	bne.n	8013bdc <_strtol_l.constprop.0+0x90>
 8013b80:	782c      	ldrb	r4, [r5, #0]
 8013b82:	2601      	movs	r6, #1
 8013b84:	1c95      	adds	r5, r2, #2
 8013b86:	f033 0210 	bics.w	r2, r3, #16
 8013b8a:	d109      	bne.n	8013ba0 <_strtol_l.constprop.0+0x54>
 8013b8c:	2c30      	cmp	r4, #48	@ 0x30
 8013b8e:	d12a      	bne.n	8013be6 <_strtol_l.constprop.0+0x9a>
 8013b90:	782a      	ldrb	r2, [r5, #0]
 8013b92:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013b96:	2a58      	cmp	r2, #88	@ 0x58
 8013b98:	d125      	bne.n	8013be6 <_strtol_l.constprop.0+0x9a>
 8013b9a:	786c      	ldrb	r4, [r5, #1]
 8013b9c:	2310      	movs	r3, #16
 8013b9e:	3502      	adds	r5, #2
 8013ba0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013ba4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013ba8:	2200      	movs	r2, #0
 8013baa:	fbbc f9f3 	udiv	r9, ip, r3
 8013bae:	4610      	mov	r0, r2
 8013bb0:	fb03 ca19 	mls	sl, r3, r9, ip
 8013bb4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013bb8:	2f09      	cmp	r7, #9
 8013bba:	d81b      	bhi.n	8013bf4 <_strtol_l.constprop.0+0xa8>
 8013bbc:	463c      	mov	r4, r7
 8013bbe:	42a3      	cmp	r3, r4
 8013bc0:	dd27      	ble.n	8013c12 <_strtol_l.constprop.0+0xc6>
 8013bc2:	1c57      	adds	r7, r2, #1
 8013bc4:	d007      	beq.n	8013bd6 <_strtol_l.constprop.0+0x8a>
 8013bc6:	4581      	cmp	r9, r0
 8013bc8:	d320      	bcc.n	8013c0c <_strtol_l.constprop.0+0xc0>
 8013bca:	d101      	bne.n	8013bd0 <_strtol_l.constprop.0+0x84>
 8013bcc:	45a2      	cmp	sl, r4
 8013bce:	db1d      	blt.n	8013c0c <_strtol_l.constprop.0+0xc0>
 8013bd0:	fb00 4003 	mla	r0, r0, r3, r4
 8013bd4:	2201      	movs	r2, #1
 8013bd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013bda:	e7eb      	b.n	8013bb4 <_strtol_l.constprop.0+0x68>
 8013bdc:	2c2b      	cmp	r4, #43	@ 0x2b
 8013bde:	bf04      	itt	eq
 8013be0:	782c      	ldrbeq	r4, [r5, #0]
 8013be2:	1c95      	addeq	r5, r2, #2
 8013be4:	e7cf      	b.n	8013b86 <_strtol_l.constprop.0+0x3a>
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d1da      	bne.n	8013ba0 <_strtol_l.constprop.0+0x54>
 8013bea:	2c30      	cmp	r4, #48	@ 0x30
 8013bec:	bf0c      	ite	eq
 8013bee:	2308      	moveq	r3, #8
 8013bf0:	230a      	movne	r3, #10
 8013bf2:	e7d5      	b.n	8013ba0 <_strtol_l.constprop.0+0x54>
 8013bf4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013bf8:	2f19      	cmp	r7, #25
 8013bfa:	d801      	bhi.n	8013c00 <_strtol_l.constprop.0+0xb4>
 8013bfc:	3c37      	subs	r4, #55	@ 0x37
 8013bfe:	e7de      	b.n	8013bbe <_strtol_l.constprop.0+0x72>
 8013c00:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013c04:	2f19      	cmp	r7, #25
 8013c06:	d804      	bhi.n	8013c12 <_strtol_l.constprop.0+0xc6>
 8013c08:	3c57      	subs	r4, #87	@ 0x57
 8013c0a:	e7d8      	b.n	8013bbe <_strtol_l.constprop.0+0x72>
 8013c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8013c10:	e7e1      	b.n	8013bd6 <_strtol_l.constprop.0+0x8a>
 8013c12:	1c53      	adds	r3, r2, #1
 8013c14:	d108      	bne.n	8013c28 <_strtol_l.constprop.0+0xdc>
 8013c16:	2322      	movs	r3, #34	@ 0x22
 8013c18:	f8ce 3000 	str.w	r3, [lr]
 8013c1c:	4660      	mov	r0, ip
 8013c1e:	f1b8 0f00 	cmp.w	r8, #0
 8013c22:	d0a0      	beq.n	8013b66 <_strtol_l.constprop.0+0x1a>
 8013c24:	1e69      	subs	r1, r5, #1
 8013c26:	e006      	b.n	8013c36 <_strtol_l.constprop.0+0xea>
 8013c28:	b106      	cbz	r6, 8013c2c <_strtol_l.constprop.0+0xe0>
 8013c2a:	4240      	negs	r0, r0
 8013c2c:	f1b8 0f00 	cmp.w	r8, #0
 8013c30:	d099      	beq.n	8013b66 <_strtol_l.constprop.0+0x1a>
 8013c32:	2a00      	cmp	r2, #0
 8013c34:	d1f6      	bne.n	8013c24 <_strtol_l.constprop.0+0xd8>
 8013c36:	f8c8 1000 	str.w	r1, [r8]
 8013c3a:	e794      	b.n	8013b66 <_strtol_l.constprop.0+0x1a>
 8013c3c:	08017019 	.word	0x08017019

08013c40 <_strtol_r>:
 8013c40:	f7ff bf84 	b.w	8013b4c <_strtol_l.constprop.0>

08013c44 <__ssputs_r>:
 8013c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c48:	688e      	ldr	r6, [r1, #8]
 8013c4a:	461f      	mov	r7, r3
 8013c4c:	42be      	cmp	r6, r7
 8013c4e:	680b      	ldr	r3, [r1, #0]
 8013c50:	4682      	mov	sl, r0
 8013c52:	460c      	mov	r4, r1
 8013c54:	4690      	mov	r8, r2
 8013c56:	d82d      	bhi.n	8013cb4 <__ssputs_r+0x70>
 8013c58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013c5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013c60:	d026      	beq.n	8013cb0 <__ssputs_r+0x6c>
 8013c62:	6965      	ldr	r5, [r4, #20]
 8013c64:	6909      	ldr	r1, [r1, #16]
 8013c66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013c6a:	eba3 0901 	sub.w	r9, r3, r1
 8013c6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013c72:	1c7b      	adds	r3, r7, #1
 8013c74:	444b      	add	r3, r9
 8013c76:	106d      	asrs	r5, r5, #1
 8013c78:	429d      	cmp	r5, r3
 8013c7a:	bf38      	it	cc
 8013c7c:	461d      	movcc	r5, r3
 8013c7e:	0553      	lsls	r3, r2, #21
 8013c80:	d527      	bpl.n	8013cd2 <__ssputs_r+0x8e>
 8013c82:	4629      	mov	r1, r5
 8013c84:	f7fe fc1c 	bl	80124c0 <_malloc_r>
 8013c88:	4606      	mov	r6, r0
 8013c8a:	b360      	cbz	r0, 8013ce6 <__ssputs_r+0xa2>
 8013c8c:	6921      	ldr	r1, [r4, #16]
 8013c8e:	464a      	mov	r2, r9
 8013c90:	f7fd fd3f 	bl	8011712 <memcpy>
 8013c94:	89a3      	ldrh	r3, [r4, #12]
 8013c96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c9e:	81a3      	strh	r3, [r4, #12]
 8013ca0:	6126      	str	r6, [r4, #16]
 8013ca2:	6165      	str	r5, [r4, #20]
 8013ca4:	444e      	add	r6, r9
 8013ca6:	eba5 0509 	sub.w	r5, r5, r9
 8013caa:	6026      	str	r6, [r4, #0]
 8013cac:	60a5      	str	r5, [r4, #8]
 8013cae:	463e      	mov	r6, r7
 8013cb0:	42be      	cmp	r6, r7
 8013cb2:	d900      	bls.n	8013cb6 <__ssputs_r+0x72>
 8013cb4:	463e      	mov	r6, r7
 8013cb6:	6820      	ldr	r0, [r4, #0]
 8013cb8:	4632      	mov	r2, r6
 8013cba:	4641      	mov	r1, r8
 8013cbc:	f000 fd53 	bl	8014766 <memmove>
 8013cc0:	68a3      	ldr	r3, [r4, #8]
 8013cc2:	1b9b      	subs	r3, r3, r6
 8013cc4:	60a3      	str	r3, [r4, #8]
 8013cc6:	6823      	ldr	r3, [r4, #0]
 8013cc8:	4433      	add	r3, r6
 8013cca:	6023      	str	r3, [r4, #0]
 8013ccc:	2000      	movs	r0, #0
 8013cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cd2:	462a      	mov	r2, r5
 8013cd4:	f001 f8f9 	bl	8014eca <_realloc_r>
 8013cd8:	4606      	mov	r6, r0
 8013cda:	2800      	cmp	r0, #0
 8013cdc:	d1e0      	bne.n	8013ca0 <__ssputs_r+0x5c>
 8013cde:	6921      	ldr	r1, [r4, #16]
 8013ce0:	4650      	mov	r0, sl
 8013ce2:	f7fe fb79 	bl	80123d8 <_free_r>
 8013ce6:	230c      	movs	r3, #12
 8013ce8:	f8ca 3000 	str.w	r3, [sl]
 8013cec:	89a3      	ldrh	r3, [r4, #12]
 8013cee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013cf2:	81a3      	strh	r3, [r4, #12]
 8013cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8013cf8:	e7e9      	b.n	8013cce <__ssputs_r+0x8a>
	...

08013cfc <_svfiprintf_r>:
 8013cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d00:	4698      	mov	r8, r3
 8013d02:	898b      	ldrh	r3, [r1, #12]
 8013d04:	061b      	lsls	r3, r3, #24
 8013d06:	b09d      	sub	sp, #116	@ 0x74
 8013d08:	4607      	mov	r7, r0
 8013d0a:	460d      	mov	r5, r1
 8013d0c:	4614      	mov	r4, r2
 8013d0e:	d510      	bpl.n	8013d32 <_svfiprintf_r+0x36>
 8013d10:	690b      	ldr	r3, [r1, #16]
 8013d12:	b973      	cbnz	r3, 8013d32 <_svfiprintf_r+0x36>
 8013d14:	2140      	movs	r1, #64	@ 0x40
 8013d16:	f7fe fbd3 	bl	80124c0 <_malloc_r>
 8013d1a:	6028      	str	r0, [r5, #0]
 8013d1c:	6128      	str	r0, [r5, #16]
 8013d1e:	b930      	cbnz	r0, 8013d2e <_svfiprintf_r+0x32>
 8013d20:	230c      	movs	r3, #12
 8013d22:	603b      	str	r3, [r7, #0]
 8013d24:	f04f 30ff 	mov.w	r0, #4294967295
 8013d28:	b01d      	add	sp, #116	@ 0x74
 8013d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d2e:	2340      	movs	r3, #64	@ 0x40
 8013d30:	616b      	str	r3, [r5, #20]
 8013d32:	2300      	movs	r3, #0
 8013d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d36:	2320      	movs	r3, #32
 8013d38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013d3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d40:	2330      	movs	r3, #48	@ 0x30
 8013d42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013ee0 <_svfiprintf_r+0x1e4>
 8013d46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013d4a:	f04f 0901 	mov.w	r9, #1
 8013d4e:	4623      	mov	r3, r4
 8013d50:	469a      	mov	sl, r3
 8013d52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d56:	b10a      	cbz	r2, 8013d5c <_svfiprintf_r+0x60>
 8013d58:	2a25      	cmp	r2, #37	@ 0x25
 8013d5a:	d1f9      	bne.n	8013d50 <_svfiprintf_r+0x54>
 8013d5c:	ebba 0b04 	subs.w	fp, sl, r4
 8013d60:	d00b      	beq.n	8013d7a <_svfiprintf_r+0x7e>
 8013d62:	465b      	mov	r3, fp
 8013d64:	4622      	mov	r2, r4
 8013d66:	4629      	mov	r1, r5
 8013d68:	4638      	mov	r0, r7
 8013d6a:	f7ff ff6b 	bl	8013c44 <__ssputs_r>
 8013d6e:	3001      	adds	r0, #1
 8013d70:	f000 80a7 	beq.w	8013ec2 <_svfiprintf_r+0x1c6>
 8013d74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013d76:	445a      	add	r2, fp
 8013d78:	9209      	str	r2, [sp, #36]	@ 0x24
 8013d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	f000 809f 	beq.w	8013ec2 <_svfiprintf_r+0x1c6>
 8013d84:	2300      	movs	r3, #0
 8013d86:	f04f 32ff 	mov.w	r2, #4294967295
 8013d8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013d8e:	f10a 0a01 	add.w	sl, sl, #1
 8013d92:	9304      	str	r3, [sp, #16]
 8013d94:	9307      	str	r3, [sp, #28]
 8013d96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013d9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8013d9c:	4654      	mov	r4, sl
 8013d9e:	2205      	movs	r2, #5
 8013da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013da4:	484e      	ldr	r0, [pc, #312]	@ (8013ee0 <_svfiprintf_r+0x1e4>)
 8013da6:	f7ec fa3b 	bl	8000220 <memchr>
 8013daa:	9a04      	ldr	r2, [sp, #16]
 8013dac:	b9d8      	cbnz	r0, 8013de6 <_svfiprintf_r+0xea>
 8013dae:	06d0      	lsls	r0, r2, #27
 8013db0:	bf44      	itt	mi
 8013db2:	2320      	movmi	r3, #32
 8013db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013db8:	0711      	lsls	r1, r2, #28
 8013dba:	bf44      	itt	mi
 8013dbc:	232b      	movmi	r3, #43	@ 0x2b
 8013dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8013dc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8013dc8:	d015      	beq.n	8013df6 <_svfiprintf_r+0xfa>
 8013dca:	9a07      	ldr	r2, [sp, #28]
 8013dcc:	4654      	mov	r4, sl
 8013dce:	2000      	movs	r0, #0
 8013dd0:	f04f 0c0a 	mov.w	ip, #10
 8013dd4:	4621      	mov	r1, r4
 8013dd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013dda:	3b30      	subs	r3, #48	@ 0x30
 8013ddc:	2b09      	cmp	r3, #9
 8013dde:	d94b      	bls.n	8013e78 <_svfiprintf_r+0x17c>
 8013de0:	b1b0      	cbz	r0, 8013e10 <_svfiprintf_r+0x114>
 8013de2:	9207      	str	r2, [sp, #28]
 8013de4:	e014      	b.n	8013e10 <_svfiprintf_r+0x114>
 8013de6:	eba0 0308 	sub.w	r3, r0, r8
 8013dea:	fa09 f303 	lsl.w	r3, r9, r3
 8013dee:	4313      	orrs	r3, r2
 8013df0:	9304      	str	r3, [sp, #16]
 8013df2:	46a2      	mov	sl, r4
 8013df4:	e7d2      	b.n	8013d9c <_svfiprintf_r+0xa0>
 8013df6:	9b03      	ldr	r3, [sp, #12]
 8013df8:	1d19      	adds	r1, r3, #4
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	9103      	str	r1, [sp, #12]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	bfbb      	ittet	lt
 8013e02:	425b      	neglt	r3, r3
 8013e04:	f042 0202 	orrlt.w	r2, r2, #2
 8013e08:	9307      	strge	r3, [sp, #28]
 8013e0a:	9307      	strlt	r3, [sp, #28]
 8013e0c:	bfb8      	it	lt
 8013e0e:	9204      	strlt	r2, [sp, #16]
 8013e10:	7823      	ldrb	r3, [r4, #0]
 8013e12:	2b2e      	cmp	r3, #46	@ 0x2e
 8013e14:	d10a      	bne.n	8013e2c <_svfiprintf_r+0x130>
 8013e16:	7863      	ldrb	r3, [r4, #1]
 8013e18:	2b2a      	cmp	r3, #42	@ 0x2a
 8013e1a:	d132      	bne.n	8013e82 <_svfiprintf_r+0x186>
 8013e1c:	9b03      	ldr	r3, [sp, #12]
 8013e1e:	1d1a      	adds	r2, r3, #4
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	9203      	str	r2, [sp, #12]
 8013e24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013e28:	3402      	adds	r4, #2
 8013e2a:	9305      	str	r3, [sp, #20]
 8013e2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013ef0 <_svfiprintf_r+0x1f4>
 8013e30:	7821      	ldrb	r1, [r4, #0]
 8013e32:	2203      	movs	r2, #3
 8013e34:	4650      	mov	r0, sl
 8013e36:	f7ec f9f3 	bl	8000220 <memchr>
 8013e3a:	b138      	cbz	r0, 8013e4c <_svfiprintf_r+0x150>
 8013e3c:	9b04      	ldr	r3, [sp, #16]
 8013e3e:	eba0 000a 	sub.w	r0, r0, sl
 8013e42:	2240      	movs	r2, #64	@ 0x40
 8013e44:	4082      	lsls	r2, r0
 8013e46:	4313      	orrs	r3, r2
 8013e48:	3401      	adds	r4, #1
 8013e4a:	9304      	str	r3, [sp, #16]
 8013e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e50:	4824      	ldr	r0, [pc, #144]	@ (8013ee4 <_svfiprintf_r+0x1e8>)
 8013e52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013e56:	2206      	movs	r2, #6
 8013e58:	f7ec f9e2 	bl	8000220 <memchr>
 8013e5c:	2800      	cmp	r0, #0
 8013e5e:	d036      	beq.n	8013ece <_svfiprintf_r+0x1d2>
 8013e60:	4b21      	ldr	r3, [pc, #132]	@ (8013ee8 <_svfiprintf_r+0x1ec>)
 8013e62:	bb1b      	cbnz	r3, 8013eac <_svfiprintf_r+0x1b0>
 8013e64:	9b03      	ldr	r3, [sp, #12]
 8013e66:	3307      	adds	r3, #7
 8013e68:	f023 0307 	bic.w	r3, r3, #7
 8013e6c:	3308      	adds	r3, #8
 8013e6e:	9303      	str	r3, [sp, #12]
 8013e70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e72:	4433      	add	r3, r6
 8013e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e76:	e76a      	b.n	8013d4e <_svfiprintf_r+0x52>
 8013e78:	fb0c 3202 	mla	r2, ip, r2, r3
 8013e7c:	460c      	mov	r4, r1
 8013e7e:	2001      	movs	r0, #1
 8013e80:	e7a8      	b.n	8013dd4 <_svfiprintf_r+0xd8>
 8013e82:	2300      	movs	r3, #0
 8013e84:	3401      	adds	r4, #1
 8013e86:	9305      	str	r3, [sp, #20]
 8013e88:	4619      	mov	r1, r3
 8013e8a:	f04f 0c0a 	mov.w	ip, #10
 8013e8e:	4620      	mov	r0, r4
 8013e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e94:	3a30      	subs	r2, #48	@ 0x30
 8013e96:	2a09      	cmp	r2, #9
 8013e98:	d903      	bls.n	8013ea2 <_svfiprintf_r+0x1a6>
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d0c6      	beq.n	8013e2c <_svfiprintf_r+0x130>
 8013e9e:	9105      	str	r1, [sp, #20]
 8013ea0:	e7c4      	b.n	8013e2c <_svfiprintf_r+0x130>
 8013ea2:	fb0c 2101 	mla	r1, ip, r1, r2
 8013ea6:	4604      	mov	r4, r0
 8013ea8:	2301      	movs	r3, #1
 8013eaa:	e7f0      	b.n	8013e8e <_svfiprintf_r+0x192>
 8013eac:	ab03      	add	r3, sp, #12
 8013eae:	9300      	str	r3, [sp, #0]
 8013eb0:	462a      	mov	r2, r5
 8013eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8013eec <_svfiprintf_r+0x1f0>)
 8013eb4:	a904      	add	r1, sp, #16
 8013eb6:	4638      	mov	r0, r7
 8013eb8:	f7fc fc7c 	bl	80107b4 <_printf_float>
 8013ebc:	1c42      	adds	r2, r0, #1
 8013ebe:	4606      	mov	r6, r0
 8013ec0:	d1d6      	bne.n	8013e70 <_svfiprintf_r+0x174>
 8013ec2:	89ab      	ldrh	r3, [r5, #12]
 8013ec4:	065b      	lsls	r3, r3, #25
 8013ec6:	f53f af2d 	bmi.w	8013d24 <_svfiprintf_r+0x28>
 8013eca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013ecc:	e72c      	b.n	8013d28 <_svfiprintf_r+0x2c>
 8013ece:	ab03      	add	r3, sp, #12
 8013ed0:	9300      	str	r3, [sp, #0]
 8013ed2:	462a      	mov	r2, r5
 8013ed4:	4b05      	ldr	r3, [pc, #20]	@ (8013eec <_svfiprintf_r+0x1f0>)
 8013ed6:	a904      	add	r1, sp, #16
 8013ed8:	4638      	mov	r0, r7
 8013eda:	f7fc ff03 	bl	8010ce4 <_printf_i>
 8013ede:	e7ed      	b.n	8013ebc <_svfiprintf_r+0x1c0>
 8013ee0:	08017119 	.word	0x08017119
 8013ee4:	08017123 	.word	0x08017123
 8013ee8:	080107b5 	.word	0x080107b5
 8013eec:	08013c45 	.word	0x08013c45
 8013ef0:	0801711f 	.word	0x0801711f

08013ef4 <_sungetc_r>:
 8013ef4:	b538      	push	{r3, r4, r5, lr}
 8013ef6:	1c4b      	adds	r3, r1, #1
 8013ef8:	4614      	mov	r4, r2
 8013efa:	d103      	bne.n	8013f04 <_sungetc_r+0x10>
 8013efc:	f04f 35ff 	mov.w	r5, #4294967295
 8013f00:	4628      	mov	r0, r5
 8013f02:	bd38      	pop	{r3, r4, r5, pc}
 8013f04:	8993      	ldrh	r3, [r2, #12]
 8013f06:	f023 0320 	bic.w	r3, r3, #32
 8013f0a:	8193      	strh	r3, [r2, #12]
 8013f0c:	6853      	ldr	r3, [r2, #4]
 8013f0e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8013f10:	b2cd      	uxtb	r5, r1
 8013f12:	b18a      	cbz	r2, 8013f38 <_sungetc_r+0x44>
 8013f14:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8013f16:	429a      	cmp	r2, r3
 8013f18:	dd08      	ble.n	8013f2c <_sungetc_r+0x38>
 8013f1a:	6823      	ldr	r3, [r4, #0]
 8013f1c:	1e5a      	subs	r2, r3, #1
 8013f1e:	6022      	str	r2, [r4, #0]
 8013f20:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013f24:	6863      	ldr	r3, [r4, #4]
 8013f26:	3301      	adds	r3, #1
 8013f28:	6063      	str	r3, [r4, #4]
 8013f2a:	e7e9      	b.n	8013f00 <_sungetc_r+0xc>
 8013f2c:	4621      	mov	r1, r4
 8013f2e:	f000 fbe0 	bl	80146f2 <__submore>
 8013f32:	2800      	cmp	r0, #0
 8013f34:	d0f1      	beq.n	8013f1a <_sungetc_r+0x26>
 8013f36:	e7e1      	b.n	8013efc <_sungetc_r+0x8>
 8013f38:	6921      	ldr	r1, [r4, #16]
 8013f3a:	6822      	ldr	r2, [r4, #0]
 8013f3c:	b141      	cbz	r1, 8013f50 <_sungetc_r+0x5c>
 8013f3e:	4291      	cmp	r1, r2
 8013f40:	d206      	bcs.n	8013f50 <_sungetc_r+0x5c>
 8013f42:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8013f46:	42a9      	cmp	r1, r5
 8013f48:	d102      	bne.n	8013f50 <_sungetc_r+0x5c>
 8013f4a:	3a01      	subs	r2, #1
 8013f4c:	6022      	str	r2, [r4, #0]
 8013f4e:	e7ea      	b.n	8013f26 <_sungetc_r+0x32>
 8013f50:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8013f54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013f58:	6363      	str	r3, [r4, #52]	@ 0x34
 8013f5a:	2303      	movs	r3, #3
 8013f5c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8013f5e:	4623      	mov	r3, r4
 8013f60:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013f64:	6023      	str	r3, [r4, #0]
 8013f66:	2301      	movs	r3, #1
 8013f68:	e7de      	b.n	8013f28 <_sungetc_r+0x34>

08013f6a <__ssrefill_r>:
 8013f6a:	b510      	push	{r4, lr}
 8013f6c:	460c      	mov	r4, r1
 8013f6e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8013f70:	b169      	cbz	r1, 8013f8e <__ssrefill_r+0x24>
 8013f72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013f76:	4299      	cmp	r1, r3
 8013f78:	d001      	beq.n	8013f7e <__ssrefill_r+0x14>
 8013f7a:	f7fe fa2d 	bl	80123d8 <_free_r>
 8013f7e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013f80:	6063      	str	r3, [r4, #4]
 8013f82:	2000      	movs	r0, #0
 8013f84:	6360      	str	r0, [r4, #52]	@ 0x34
 8013f86:	b113      	cbz	r3, 8013f8e <__ssrefill_r+0x24>
 8013f88:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8013f8a:	6023      	str	r3, [r4, #0]
 8013f8c:	bd10      	pop	{r4, pc}
 8013f8e:	6923      	ldr	r3, [r4, #16]
 8013f90:	6023      	str	r3, [r4, #0]
 8013f92:	2300      	movs	r3, #0
 8013f94:	6063      	str	r3, [r4, #4]
 8013f96:	89a3      	ldrh	r3, [r4, #12]
 8013f98:	f043 0320 	orr.w	r3, r3, #32
 8013f9c:	81a3      	strh	r3, [r4, #12]
 8013f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8013fa2:	e7f3      	b.n	8013f8c <__ssrefill_r+0x22>

08013fa4 <__ssvfiscanf_r>:
 8013fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fa8:	460c      	mov	r4, r1
 8013faa:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8013fae:	2100      	movs	r1, #0
 8013fb0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8013fb4:	49a5      	ldr	r1, [pc, #660]	@ (801424c <__ssvfiscanf_r+0x2a8>)
 8013fb6:	91a0      	str	r1, [sp, #640]	@ 0x280
 8013fb8:	f10d 0804 	add.w	r8, sp, #4
 8013fbc:	49a4      	ldr	r1, [pc, #656]	@ (8014250 <__ssvfiscanf_r+0x2ac>)
 8013fbe:	4fa5      	ldr	r7, [pc, #660]	@ (8014254 <__ssvfiscanf_r+0x2b0>)
 8013fc0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8013fc4:	4606      	mov	r6, r0
 8013fc6:	91a1      	str	r1, [sp, #644]	@ 0x284
 8013fc8:	9300      	str	r3, [sp, #0]
 8013fca:	7813      	ldrb	r3, [r2, #0]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	f000 8158 	beq.w	8014282 <__ssvfiscanf_r+0x2de>
 8013fd2:	5cf9      	ldrb	r1, [r7, r3]
 8013fd4:	f011 0108 	ands.w	r1, r1, #8
 8013fd8:	f102 0501 	add.w	r5, r2, #1
 8013fdc:	d019      	beq.n	8014012 <__ssvfiscanf_r+0x6e>
 8013fde:	6863      	ldr	r3, [r4, #4]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	dd0f      	ble.n	8014004 <__ssvfiscanf_r+0x60>
 8013fe4:	6823      	ldr	r3, [r4, #0]
 8013fe6:	781a      	ldrb	r2, [r3, #0]
 8013fe8:	5cba      	ldrb	r2, [r7, r2]
 8013fea:	0712      	lsls	r2, r2, #28
 8013fec:	d401      	bmi.n	8013ff2 <__ssvfiscanf_r+0x4e>
 8013fee:	462a      	mov	r2, r5
 8013ff0:	e7eb      	b.n	8013fca <__ssvfiscanf_r+0x26>
 8013ff2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013ff4:	3201      	adds	r2, #1
 8013ff6:	9245      	str	r2, [sp, #276]	@ 0x114
 8013ff8:	6862      	ldr	r2, [r4, #4]
 8013ffa:	3301      	adds	r3, #1
 8013ffc:	3a01      	subs	r2, #1
 8013ffe:	6062      	str	r2, [r4, #4]
 8014000:	6023      	str	r3, [r4, #0]
 8014002:	e7ec      	b.n	8013fde <__ssvfiscanf_r+0x3a>
 8014004:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014006:	4621      	mov	r1, r4
 8014008:	4630      	mov	r0, r6
 801400a:	4798      	blx	r3
 801400c:	2800      	cmp	r0, #0
 801400e:	d0e9      	beq.n	8013fe4 <__ssvfiscanf_r+0x40>
 8014010:	e7ed      	b.n	8013fee <__ssvfiscanf_r+0x4a>
 8014012:	2b25      	cmp	r3, #37	@ 0x25
 8014014:	d012      	beq.n	801403c <__ssvfiscanf_r+0x98>
 8014016:	4699      	mov	r9, r3
 8014018:	6863      	ldr	r3, [r4, #4]
 801401a:	2b00      	cmp	r3, #0
 801401c:	f340 8093 	ble.w	8014146 <__ssvfiscanf_r+0x1a2>
 8014020:	6822      	ldr	r2, [r4, #0]
 8014022:	7813      	ldrb	r3, [r2, #0]
 8014024:	454b      	cmp	r3, r9
 8014026:	f040 812c 	bne.w	8014282 <__ssvfiscanf_r+0x2de>
 801402a:	6863      	ldr	r3, [r4, #4]
 801402c:	3b01      	subs	r3, #1
 801402e:	6063      	str	r3, [r4, #4]
 8014030:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8014032:	3201      	adds	r2, #1
 8014034:	3301      	adds	r3, #1
 8014036:	6022      	str	r2, [r4, #0]
 8014038:	9345      	str	r3, [sp, #276]	@ 0x114
 801403a:	e7d8      	b.n	8013fee <__ssvfiscanf_r+0x4a>
 801403c:	9141      	str	r1, [sp, #260]	@ 0x104
 801403e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8014040:	7853      	ldrb	r3, [r2, #1]
 8014042:	2b2a      	cmp	r3, #42	@ 0x2a
 8014044:	bf02      	ittt	eq
 8014046:	2310      	moveq	r3, #16
 8014048:	1c95      	addeq	r5, r2, #2
 801404a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801404c:	220a      	movs	r2, #10
 801404e:	46a9      	mov	r9, r5
 8014050:	f819 1b01 	ldrb.w	r1, [r9], #1
 8014054:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8014058:	2b09      	cmp	r3, #9
 801405a:	d91e      	bls.n	801409a <__ssvfiscanf_r+0xf6>
 801405c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8014258 <__ssvfiscanf_r+0x2b4>
 8014060:	2203      	movs	r2, #3
 8014062:	4650      	mov	r0, sl
 8014064:	f7ec f8dc 	bl	8000220 <memchr>
 8014068:	b138      	cbz	r0, 801407a <__ssvfiscanf_r+0xd6>
 801406a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801406c:	eba0 000a 	sub.w	r0, r0, sl
 8014070:	2301      	movs	r3, #1
 8014072:	4083      	lsls	r3, r0
 8014074:	4313      	orrs	r3, r2
 8014076:	9341      	str	r3, [sp, #260]	@ 0x104
 8014078:	464d      	mov	r5, r9
 801407a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801407e:	2b78      	cmp	r3, #120	@ 0x78
 8014080:	d806      	bhi.n	8014090 <__ssvfiscanf_r+0xec>
 8014082:	2b57      	cmp	r3, #87	@ 0x57
 8014084:	d810      	bhi.n	80140a8 <__ssvfiscanf_r+0x104>
 8014086:	2b25      	cmp	r3, #37	@ 0x25
 8014088:	d0c5      	beq.n	8014016 <__ssvfiscanf_r+0x72>
 801408a:	d857      	bhi.n	801413c <__ssvfiscanf_r+0x198>
 801408c:	2b00      	cmp	r3, #0
 801408e:	d065      	beq.n	801415c <__ssvfiscanf_r+0x1b8>
 8014090:	2303      	movs	r3, #3
 8014092:	9347      	str	r3, [sp, #284]	@ 0x11c
 8014094:	230a      	movs	r3, #10
 8014096:	9342      	str	r3, [sp, #264]	@ 0x108
 8014098:	e078      	b.n	801418c <__ssvfiscanf_r+0x1e8>
 801409a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801409c:	fb02 1103 	mla	r1, r2, r3, r1
 80140a0:	3930      	subs	r1, #48	@ 0x30
 80140a2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80140a4:	464d      	mov	r5, r9
 80140a6:	e7d2      	b.n	801404e <__ssvfiscanf_r+0xaa>
 80140a8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80140ac:	2a20      	cmp	r2, #32
 80140ae:	d8ef      	bhi.n	8014090 <__ssvfiscanf_r+0xec>
 80140b0:	a101      	add	r1, pc, #4	@ (adr r1, 80140b8 <__ssvfiscanf_r+0x114>)
 80140b2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80140b6:	bf00      	nop
 80140b8:	0801416b 	.word	0x0801416b
 80140bc:	08014091 	.word	0x08014091
 80140c0:	08014091 	.word	0x08014091
 80140c4:	080141c5 	.word	0x080141c5
 80140c8:	08014091 	.word	0x08014091
 80140cc:	08014091 	.word	0x08014091
 80140d0:	08014091 	.word	0x08014091
 80140d4:	08014091 	.word	0x08014091
 80140d8:	08014091 	.word	0x08014091
 80140dc:	08014091 	.word	0x08014091
 80140e0:	08014091 	.word	0x08014091
 80140e4:	080141db 	.word	0x080141db
 80140e8:	080141c1 	.word	0x080141c1
 80140ec:	08014143 	.word	0x08014143
 80140f0:	08014143 	.word	0x08014143
 80140f4:	08014143 	.word	0x08014143
 80140f8:	08014091 	.word	0x08014091
 80140fc:	0801417d 	.word	0x0801417d
 8014100:	08014091 	.word	0x08014091
 8014104:	08014091 	.word	0x08014091
 8014108:	08014091 	.word	0x08014091
 801410c:	08014091 	.word	0x08014091
 8014110:	080141eb 	.word	0x080141eb
 8014114:	08014185 	.word	0x08014185
 8014118:	08014163 	.word	0x08014163
 801411c:	08014091 	.word	0x08014091
 8014120:	08014091 	.word	0x08014091
 8014124:	080141e7 	.word	0x080141e7
 8014128:	08014091 	.word	0x08014091
 801412c:	080141c1 	.word	0x080141c1
 8014130:	08014091 	.word	0x08014091
 8014134:	08014091 	.word	0x08014091
 8014138:	0801416b 	.word	0x0801416b
 801413c:	3b45      	subs	r3, #69	@ 0x45
 801413e:	2b02      	cmp	r3, #2
 8014140:	d8a6      	bhi.n	8014090 <__ssvfiscanf_r+0xec>
 8014142:	2305      	movs	r3, #5
 8014144:	e021      	b.n	801418a <__ssvfiscanf_r+0x1e6>
 8014146:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014148:	4621      	mov	r1, r4
 801414a:	4630      	mov	r0, r6
 801414c:	4798      	blx	r3
 801414e:	2800      	cmp	r0, #0
 8014150:	f43f af66 	beq.w	8014020 <__ssvfiscanf_r+0x7c>
 8014154:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8014156:	2800      	cmp	r0, #0
 8014158:	f040 808b 	bne.w	8014272 <__ssvfiscanf_r+0x2ce>
 801415c:	f04f 30ff 	mov.w	r0, #4294967295
 8014160:	e08b      	b.n	801427a <__ssvfiscanf_r+0x2d6>
 8014162:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014164:	f042 0220 	orr.w	r2, r2, #32
 8014168:	9241      	str	r2, [sp, #260]	@ 0x104
 801416a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801416c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014170:	9241      	str	r2, [sp, #260]	@ 0x104
 8014172:	2210      	movs	r2, #16
 8014174:	2b6e      	cmp	r3, #110	@ 0x6e
 8014176:	9242      	str	r2, [sp, #264]	@ 0x108
 8014178:	d902      	bls.n	8014180 <__ssvfiscanf_r+0x1dc>
 801417a:	e005      	b.n	8014188 <__ssvfiscanf_r+0x1e4>
 801417c:	2300      	movs	r3, #0
 801417e:	9342      	str	r3, [sp, #264]	@ 0x108
 8014180:	2303      	movs	r3, #3
 8014182:	e002      	b.n	801418a <__ssvfiscanf_r+0x1e6>
 8014184:	2308      	movs	r3, #8
 8014186:	9342      	str	r3, [sp, #264]	@ 0x108
 8014188:	2304      	movs	r3, #4
 801418a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801418c:	6863      	ldr	r3, [r4, #4]
 801418e:	2b00      	cmp	r3, #0
 8014190:	dd39      	ble.n	8014206 <__ssvfiscanf_r+0x262>
 8014192:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014194:	0659      	lsls	r1, r3, #25
 8014196:	d404      	bmi.n	80141a2 <__ssvfiscanf_r+0x1fe>
 8014198:	6823      	ldr	r3, [r4, #0]
 801419a:	781a      	ldrb	r2, [r3, #0]
 801419c:	5cba      	ldrb	r2, [r7, r2]
 801419e:	0712      	lsls	r2, r2, #28
 80141a0:	d438      	bmi.n	8014214 <__ssvfiscanf_r+0x270>
 80141a2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80141a4:	2b02      	cmp	r3, #2
 80141a6:	dc47      	bgt.n	8014238 <__ssvfiscanf_r+0x294>
 80141a8:	466b      	mov	r3, sp
 80141aa:	4622      	mov	r2, r4
 80141ac:	a941      	add	r1, sp, #260	@ 0x104
 80141ae:	4630      	mov	r0, r6
 80141b0:	f000 f86c 	bl	801428c <_scanf_chars>
 80141b4:	2801      	cmp	r0, #1
 80141b6:	d064      	beq.n	8014282 <__ssvfiscanf_r+0x2de>
 80141b8:	2802      	cmp	r0, #2
 80141ba:	f47f af18 	bne.w	8013fee <__ssvfiscanf_r+0x4a>
 80141be:	e7c9      	b.n	8014154 <__ssvfiscanf_r+0x1b0>
 80141c0:	220a      	movs	r2, #10
 80141c2:	e7d7      	b.n	8014174 <__ssvfiscanf_r+0x1d0>
 80141c4:	4629      	mov	r1, r5
 80141c6:	4640      	mov	r0, r8
 80141c8:	f000 fa5a 	bl	8014680 <__sccl>
 80141cc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80141ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80141d2:	9341      	str	r3, [sp, #260]	@ 0x104
 80141d4:	4605      	mov	r5, r0
 80141d6:	2301      	movs	r3, #1
 80141d8:	e7d7      	b.n	801418a <__ssvfiscanf_r+0x1e6>
 80141da:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80141dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80141e0:	9341      	str	r3, [sp, #260]	@ 0x104
 80141e2:	2300      	movs	r3, #0
 80141e4:	e7d1      	b.n	801418a <__ssvfiscanf_r+0x1e6>
 80141e6:	2302      	movs	r3, #2
 80141e8:	e7cf      	b.n	801418a <__ssvfiscanf_r+0x1e6>
 80141ea:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80141ec:	06c3      	lsls	r3, r0, #27
 80141ee:	f53f aefe 	bmi.w	8013fee <__ssvfiscanf_r+0x4a>
 80141f2:	9b00      	ldr	r3, [sp, #0]
 80141f4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80141f6:	1d19      	adds	r1, r3, #4
 80141f8:	9100      	str	r1, [sp, #0]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	07c0      	lsls	r0, r0, #31
 80141fe:	bf4c      	ite	mi
 8014200:	801a      	strhmi	r2, [r3, #0]
 8014202:	601a      	strpl	r2, [r3, #0]
 8014204:	e6f3      	b.n	8013fee <__ssvfiscanf_r+0x4a>
 8014206:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014208:	4621      	mov	r1, r4
 801420a:	4630      	mov	r0, r6
 801420c:	4798      	blx	r3
 801420e:	2800      	cmp	r0, #0
 8014210:	d0bf      	beq.n	8014192 <__ssvfiscanf_r+0x1ee>
 8014212:	e79f      	b.n	8014154 <__ssvfiscanf_r+0x1b0>
 8014214:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8014216:	3201      	adds	r2, #1
 8014218:	9245      	str	r2, [sp, #276]	@ 0x114
 801421a:	6862      	ldr	r2, [r4, #4]
 801421c:	3a01      	subs	r2, #1
 801421e:	2a00      	cmp	r2, #0
 8014220:	6062      	str	r2, [r4, #4]
 8014222:	dd02      	ble.n	801422a <__ssvfiscanf_r+0x286>
 8014224:	3301      	adds	r3, #1
 8014226:	6023      	str	r3, [r4, #0]
 8014228:	e7b6      	b.n	8014198 <__ssvfiscanf_r+0x1f4>
 801422a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801422c:	4621      	mov	r1, r4
 801422e:	4630      	mov	r0, r6
 8014230:	4798      	blx	r3
 8014232:	2800      	cmp	r0, #0
 8014234:	d0b0      	beq.n	8014198 <__ssvfiscanf_r+0x1f4>
 8014236:	e78d      	b.n	8014154 <__ssvfiscanf_r+0x1b0>
 8014238:	2b04      	cmp	r3, #4
 801423a:	dc0f      	bgt.n	801425c <__ssvfiscanf_r+0x2b8>
 801423c:	466b      	mov	r3, sp
 801423e:	4622      	mov	r2, r4
 8014240:	a941      	add	r1, sp, #260	@ 0x104
 8014242:	4630      	mov	r0, r6
 8014244:	f000 f87c 	bl	8014340 <_scanf_i>
 8014248:	e7b4      	b.n	80141b4 <__ssvfiscanf_r+0x210>
 801424a:	bf00      	nop
 801424c:	08013ef5 	.word	0x08013ef5
 8014250:	08013f6b 	.word	0x08013f6b
 8014254:	08017019 	.word	0x08017019
 8014258:	0801711f 	.word	0x0801711f
 801425c:	4b0a      	ldr	r3, [pc, #40]	@ (8014288 <__ssvfiscanf_r+0x2e4>)
 801425e:	2b00      	cmp	r3, #0
 8014260:	f43f aec5 	beq.w	8013fee <__ssvfiscanf_r+0x4a>
 8014264:	466b      	mov	r3, sp
 8014266:	4622      	mov	r2, r4
 8014268:	a941      	add	r1, sp, #260	@ 0x104
 801426a:	4630      	mov	r0, r6
 801426c:	f7fc fe5a 	bl	8010f24 <_scanf_float>
 8014270:	e7a0      	b.n	80141b4 <__ssvfiscanf_r+0x210>
 8014272:	89a3      	ldrh	r3, [r4, #12]
 8014274:	065b      	lsls	r3, r3, #25
 8014276:	f53f af71 	bmi.w	801415c <__ssvfiscanf_r+0x1b8>
 801427a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801427e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014282:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8014284:	e7f9      	b.n	801427a <__ssvfiscanf_r+0x2d6>
 8014286:	bf00      	nop
 8014288:	08010f25 	.word	0x08010f25

0801428c <_scanf_chars>:
 801428c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014290:	4615      	mov	r5, r2
 8014292:	688a      	ldr	r2, [r1, #8]
 8014294:	4680      	mov	r8, r0
 8014296:	460c      	mov	r4, r1
 8014298:	b932      	cbnz	r2, 80142a8 <_scanf_chars+0x1c>
 801429a:	698a      	ldr	r2, [r1, #24]
 801429c:	2a00      	cmp	r2, #0
 801429e:	bf14      	ite	ne
 80142a0:	f04f 32ff 	movne.w	r2, #4294967295
 80142a4:	2201      	moveq	r2, #1
 80142a6:	608a      	str	r2, [r1, #8]
 80142a8:	6822      	ldr	r2, [r4, #0]
 80142aa:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801433c <_scanf_chars+0xb0>
 80142ae:	06d1      	lsls	r1, r2, #27
 80142b0:	bf5f      	itttt	pl
 80142b2:	681a      	ldrpl	r2, [r3, #0]
 80142b4:	1d11      	addpl	r1, r2, #4
 80142b6:	6019      	strpl	r1, [r3, #0]
 80142b8:	6816      	ldrpl	r6, [r2, #0]
 80142ba:	2700      	movs	r7, #0
 80142bc:	69a0      	ldr	r0, [r4, #24]
 80142be:	b188      	cbz	r0, 80142e4 <_scanf_chars+0x58>
 80142c0:	2801      	cmp	r0, #1
 80142c2:	d107      	bne.n	80142d4 <_scanf_chars+0x48>
 80142c4:	682b      	ldr	r3, [r5, #0]
 80142c6:	781a      	ldrb	r2, [r3, #0]
 80142c8:	6963      	ldr	r3, [r4, #20]
 80142ca:	5c9b      	ldrb	r3, [r3, r2]
 80142cc:	b953      	cbnz	r3, 80142e4 <_scanf_chars+0x58>
 80142ce:	2f00      	cmp	r7, #0
 80142d0:	d031      	beq.n	8014336 <_scanf_chars+0xaa>
 80142d2:	e022      	b.n	801431a <_scanf_chars+0x8e>
 80142d4:	2802      	cmp	r0, #2
 80142d6:	d120      	bne.n	801431a <_scanf_chars+0x8e>
 80142d8:	682b      	ldr	r3, [r5, #0]
 80142da:	781b      	ldrb	r3, [r3, #0]
 80142dc:	f819 3003 	ldrb.w	r3, [r9, r3]
 80142e0:	071b      	lsls	r3, r3, #28
 80142e2:	d41a      	bmi.n	801431a <_scanf_chars+0x8e>
 80142e4:	6823      	ldr	r3, [r4, #0]
 80142e6:	06da      	lsls	r2, r3, #27
 80142e8:	bf5e      	ittt	pl
 80142ea:	682b      	ldrpl	r3, [r5, #0]
 80142ec:	781b      	ldrbpl	r3, [r3, #0]
 80142ee:	f806 3b01 	strbpl.w	r3, [r6], #1
 80142f2:	682a      	ldr	r2, [r5, #0]
 80142f4:	686b      	ldr	r3, [r5, #4]
 80142f6:	3201      	adds	r2, #1
 80142f8:	602a      	str	r2, [r5, #0]
 80142fa:	68a2      	ldr	r2, [r4, #8]
 80142fc:	3b01      	subs	r3, #1
 80142fe:	3a01      	subs	r2, #1
 8014300:	606b      	str	r3, [r5, #4]
 8014302:	3701      	adds	r7, #1
 8014304:	60a2      	str	r2, [r4, #8]
 8014306:	b142      	cbz	r2, 801431a <_scanf_chars+0x8e>
 8014308:	2b00      	cmp	r3, #0
 801430a:	dcd7      	bgt.n	80142bc <_scanf_chars+0x30>
 801430c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014310:	4629      	mov	r1, r5
 8014312:	4640      	mov	r0, r8
 8014314:	4798      	blx	r3
 8014316:	2800      	cmp	r0, #0
 8014318:	d0d0      	beq.n	80142bc <_scanf_chars+0x30>
 801431a:	6823      	ldr	r3, [r4, #0]
 801431c:	f013 0310 	ands.w	r3, r3, #16
 8014320:	d105      	bne.n	801432e <_scanf_chars+0xa2>
 8014322:	68e2      	ldr	r2, [r4, #12]
 8014324:	3201      	adds	r2, #1
 8014326:	60e2      	str	r2, [r4, #12]
 8014328:	69a2      	ldr	r2, [r4, #24]
 801432a:	b102      	cbz	r2, 801432e <_scanf_chars+0xa2>
 801432c:	7033      	strb	r3, [r6, #0]
 801432e:	6923      	ldr	r3, [r4, #16]
 8014330:	443b      	add	r3, r7
 8014332:	6123      	str	r3, [r4, #16]
 8014334:	2000      	movs	r0, #0
 8014336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801433a:	bf00      	nop
 801433c:	08017019 	.word	0x08017019

08014340 <_scanf_i>:
 8014340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014344:	4698      	mov	r8, r3
 8014346:	4b74      	ldr	r3, [pc, #464]	@ (8014518 <_scanf_i+0x1d8>)
 8014348:	460c      	mov	r4, r1
 801434a:	4682      	mov	sl, r0
 801434c:	4616      	mov	r6, r2
 801434e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014352:	b087      	sub	sp, #28
 8014354:	ab03      	add	r3, sp, #12
 8014356:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801435a:	4b70      	ldr	r3, [pc, #448]	@ (801451c <_scanf_i+0x1dc>)
 801435c:	69a1      	ldr	r1, [r4, #24]
 801435e:	4a70      	ldr	r2, [pc, #448]	@ (8014520 <_scanf_i+0x1e0>)
 8014360:	2903      	cmp	r1, #3
 8014362:	bf08      	it	eq
 8014364:	461a      	moveq	r2, r3
 8014366:	68a3      	ldr	r3, [r4, #8]
 8014368:	9201      	str	r2, [sp, #4]
 801436a:	1e5a      	subs	r2, r3, #1
 801436c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014370:	bf88      	it	hi
 8014372:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014376:	4627      	mov	r7, r4
 8014378:	bf82      	ittt	hi
 801437a:	eb03 0905 	addhi.w	r9, r3, r5
 801437e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014382:	60a3      	strhi	r3, [r4, #8]
 8014384:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014388:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801438c:	bf98      	it	ls
 801438e:	f04f 0900 	movls.w	r9, #0
 8014392:	6023      	str	r3, [r4, #0]
 8014394:	463d      	mov	r5, r7
 8014396:	f04f 0b00 	mov.w	fp, #0
 801439a:	6831      	ldr	r1, [r6, #0]
 801439c:	ab03      	add	r3, sp, #12
 801439e:	7809      	ldrb	r1, [r1, #0]
 80143a0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80143a4:	2202      	movs	r2, #2
 80143a6:	f7eb ff3b 	bl	8000220 <memchr>
 80143aa:	b328      	cbz	r0, 80143f8 <_scanf_i+0xb8>
 80143ac:	f1bb 0f01 	cmp.w	fp, #1
 80143b0:	d159      	bne.n	8014466 <_scanf_i+0x126>
 80143b2:	6862      	ldr	r2, [r4, #4]
 80143b4:	b92a      	cbnz	r2, 80143c2 <_scanf_i+0x82>
 80143b6:	6822      	ldr	r2, [r4, #0]
 80143b8:	2108      	movs	r1, #8
 80143ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80143be:	6061      	str	r1, [r4, #4]
 80143c0:	6022      	str	r2, [r4, #0]
 80143c2:	6822      	ldr	r2, [r4, #0]
 80143c4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80143c8:	6022      	str	r2, [r4, #0]
 80143ca:	68a2      	ldr	r2, [r4, #8]
 80143cc:	1e51      	subs	r1, r2, #1
 80143ce:	60a1      	str	r1, [r4, #8]
 80143d0:	b192      	cbz	r2, 80143f8 <_scanf_i+0xb8>
 80143d2:	6832      	ldr	r2, [r6, #0]
 80143d4:	1c51      	adds	r1, r2, #1
 80143d6:	6031      	str	r1, [r6, #0]
 80143d8:	7812      	ldrb	r2, [r2, #0]
 80143da:	f805 2b01 	strb.w	r2, [r5], #1
 80143de:	6872      	ldr	r2, [r6, #4]
 80143e0:	3a01      	subs	r2, #1
 80143e2:	2a00      	cmp	r2, #0
 80143e4:	6072      	str	r2, [r6, #4]
 80143e6:	dc07      	bgt.n	80143f8 <_scanf_i+0xb8>
 80143e8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80143ec:	4631      	mov	r1, r6
 80143ee:	4650      	mov	r0, sl
 80143f0:	4790      	blx	r2
 80143f2:	2800      	cmp	r0, #0
 80143f4:	f040 8085 	bne.w	8014502 <_scanf_i+0x1c2>
 80143f8:	f10b 0b01 	add.w	fp, fp, #1
 80143fc:	f1bb 0f03 	cmp.w	fp, #3
 8014400:	d1cb      	bne.n	801439a <_scanf_i+0x5a>
 8014402:	6863      	ldr	r3, [r4, #4]
 8014404:	b90b      	cbnz	r3, 801440a <_scanf_i+0xca>
 8014406:	230a      	movs	r3, #10
 8014408:	6063      	str	r3, [r4, #4]
 801440a:	6863      	ldr	r3, [r4, #4]
 801440c:	4945      	ldr	r1, [pc, #276]	@ (8014524 <_scanf_i+0x1e4>)
 801440e:	6960      	ldr	r0, [r4, #20]
 8014410:	1ac9      	subs	r1, r1, r3
 8014412:	f000 f935 	bl	8014680 <__sccl>
 8014416:	f04f 0b00 	mov.w	fp, #0
 801441a:	68a3      	ldr	r3, [r4, #8]
 801441c:	6822      	ldr	r2, [r4, #0]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d03d      	beq.n	801449e <_scanf_i+0x15e>
 8014422:	6831      	ldr	r1, [r6, #0]
 8014424:	6960      	ldr	r0, [r4, #20]
 8014426:	f891 c000 	ldrb.w	ip, [r1]
 801442a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801442e:	2800      	cmp	r0, #0
 8014430:	d035      	beq.n	801449e <_scanf_i+0x15e>
 8014432:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8014436:	d124      	bne.n	8014482 <_scanf_i+0x142>
 8014438:	0510      	lsls	r0, r2, #20
 801443a:	d522      	bpl.n	8014482 <_scanf_i+0x142>
 801443c:	f10b 0b01 	add.w	fp, fp, #1
 8014440:	f1b9 0f00 	cmp.w	r9, #0
 8014444:	d003      	beq.n	801444e <_scanf_i+0x10e>
 8014446:	3301      	adds	r3, #1
 8014448:	f109 39ff 	add.w	r9, r9, #4294967295
 801444c:	60a3      	str	r3, [r4, #8]
 801444e:	6873      	ldr	r3, [r6, #4]
 8014450:	3b01      	subs	r3, #1
 8014452:	2b00      	cmp	r3, #0
 8014454:	6073      	str	r3, [r6, #4]
 8014456:	dd1b      	ble.n	8014490 <_scanf_i+0x150>
 8014458:	6833      	ldr	r3, [r6, #0]
 801445a:	3301      	adds	r3, #1
 801445c:	6033      	str	r3, [r6, #0]
 801445e:	68a3      	ldr	r3, [r4, #8]
 8014460:	3b01      	subs	r3, #1
 8014462:	60a3      	str	r3, [r4, #8]
 8014464:	e7d9      	b.n	801441a <_scanf_i+0xda>
 8014466:	f1bb 0f02 	cmp.w	fp, #2
 801446a:	d1ae      	bne.n	80143ca <_scanf_i+0x8a>
 801446c:	6822      	ldr	r2, [r4, #0]
 801446e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8014472:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8014476:	d1bf      	bne.n	80143f8 <_scanf_i+0xb8>
 8014478:	2110      	movs	r1, #16
 801447a:	6061      	str	r1, [r4, #4]
 801447c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8014480:	e7a2      	b.n	80143c8 <_scanf_i+0x88>
 8014482:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8014486:	6022      	str	r2, [r4, #0]
 8014488:	780b      	ldrb	r3, [r1, #0]
 801448a:	f805 3b01 	strb.w	r3, [r5], #1
 801448e:	e7de      	b.n	801444e <_scanf_i+0x10e>
 8014490:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014494:	4631      	mov	r1, r6
 8014496:	4650      	mov	r0, sl
 8014498:	4798      	blx	r3
 801449a:	2800      	cmp	r0, #0
 801449c:	d0df      	beq.n	801445e <_scanf_i+0x11e>
 801449e:	6823      	ldr	r3, [r4, #0]
 80144a0:	05d9      	lsls	r1, r3, #23
 80144a2:	d50d      	bpl.n	80144c0 <_scanf_i+0x180>
 80144a4:	42bd      	cmp	r5, r7
 80144a6:	d909      	bls.n	80144bc <_scanf_i+0x17c>
 80144a8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80144ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80144b0:	4632      	mov	r2, r6
 80144b2:	4650      	mov	r0, sl
 80144b4:	4798      	blx	r3
 80144b6:	f105 39ff 	add.w	r9, r5, #4294967295
 80144ba:	464d      	mov	r5, r9
 80144bc:	42bd      	cmp	r5, r7
 80144be:	d028      	beq.n	8014512 <_scanf_i+0x1d2>
 80144c0:	6822      	ldr	r2, [r4, #0]
 80144c2:	f012 0210 	ands.w	r2, r2, #16
 80144c6:	d113      	bne.n	80144f0 <_scanf_i+0x1b0>
 80144c8:	702a      	strb	r2, [r5, #0]
 80144ca:	6863      	ldr	r3, [r4, #4]
 80144cc:	9e01      	ldr	r6, [sp, #4]
 80144ce:	4639      	mov	r1, r7
 80144d0:	4650      	mov	r0, sl
 80144d2:	47b0      	blx	r6
 80144d4:	f8d8 3000 	ldr.w	r3, [r8]
 80144d8:	6821      	ldr	r1, [r4, #0]
 80144da:	1d1a      	adds	r2, r3, #4
 80144dc:	f8c8 2000 	str.w	r2, [r8]
 80144e0:	f011 0f20 	tst.w	r1, #32
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	d00f      	beq.n	8014508 <_scanf_i+0x1c8>
 80144e8:	6018      	str	r0, [r3, #0]
 80144ea:	68e3      	ldr	r3, [r4, #12]
 80144ec:	3301      	adds	r3, #1
 80144ee:	60e3      	str	r3, [r4, #12]
 80144f0:	6923      	ldr	r3, [r4, #16]
 80144f2:	1bed      	subs	r5, r5, r7
 80144f4:	445d      	add	r5, fp
 80144f6:	442b      	add	r3, r5
 80144f8:	6123      	str	r3, [r4, #16]
 80144fa:	2000      	movs	r0, #0
 80144fc:	b007      	add	sp, #28
 80144fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014502:	f04f 0b00 	mov.w	fp, #0
 8014506:	e7ca      	b.n	801449e <_scanf_i+0x15e>
 8014508:	07ca      	lsls	r2, r1, #31
 801450a:	bf4c      	ite	mi
 801450c:	8018      	strhmi	r0, [r3, #0]
 801450e:	6018      	strpl	r0, [r3, #0]
 8014510:	e7eb      	b.n	80144ea <_scanf_i+0x1aa>
 8014512:	2001      	movs	r0, #1
 8014514:	e7f2      	b.n	80144fc <_scanf_i+0x1bc>
 8014516:	bf00      	nop
 8014518:	08016d54 	.word	0x08016d54
 801451c:	08013c41 	.word	0x08013c41
 8014520:	08015005 	.word	0x08015005
 8014524:	0801713a 	.word	0x0801713a

08014528 <__sflush_r>:
 8014528:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801452c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014530:	0716      	lsls	r6, r2, #28
 8014532:	4605      	mov	r5, r0
 8014534:	460c      	mov	r4, r1
 8014536:	d454      	bmi.n	80145e2 <__sflush_r+0xba>
 8014538:	684b      	ldr	r3, [r1, #4]
 801453a:	2b00      	cmp	r3, #0
 801453c:	dc02      	bgt.n	8014544 <__sflush_r+0x1c>
 801453e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014540:	2b00      	cmp	r3, #0
 8014542:	dd48      	ble.n	80145d6 <__sflush_r+0xae>
 8014544:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014546:	2e00      	cmp	r6, #0
 8014548:	d045      	beq.n	80145d6 <__sflush_r+0xae>
 801454a:	2300      	movs	r3, #0
 801454c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014550:	682f      	ldr	r7, [r5, #0]
 8014552:	6a21      	ldr	r1, [r4, #32]
 8014554:	602b      	str	r3, [r5, #0]
 8014556:	d030      	beq.n	80145ba <__sflush_r+0x92>
 8014558:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801455a:	89a3      	ldrh	r3, [r4, #12]
 801455c:	0759      	lsls	r1, r3, #29
 801455e:	d505      	bpl.n	801456c <__sflush_r+0x44>
 8014560:	6863      	ldr	r3, [r4, #4]
 8014562:	1ad2      	subs	r2, r2, r3
 8014564:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014566:	b10b      	cbz	r3, 801456c <__sflush_r+0x44>
 8014568:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801456a:	1ad2      	subs	r2, r2, r3
 801456c:	2300      	movs	r3, #0
 801456e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014570:	6a21      	ldr	r1, [r4, #32]
 8014572:	4628      	mov	r0, r5
 8014574:	47b0      	blx	r6
 8014576:	1c43      	adds	r3, r0, #1
 8014578:	89a3      	ldrh	r3, [r4, #12]
 801457a:	d106      	bne.n	801458a <__sflush_r+0x62>
 801457c:	6829      	ldr	r1, [r5, #0]
 801457e:	291d      	cmp	r1, #29
 8014580:	d82b      	bhi.n	80145da <__sflush_r+0xb2>
 8014582:	4a2a      	ldr	r2, [pc, #168]	@ (801462c <__sflush_r+0x104>)
 8014584:	410a      	asrs	r2, r1
 8014586:	07d6      	lsls	r6, r2, #31
 8014588:	d427      	bmi.n	80145da <__sflush_r+0xb2>
 801458a:	2200      	movs	r2, #0
 801458c:	6062      	str	r2, [r4, #4]
 801458e:	04d9      	lsls	r1, r3, #19
 8014590:	6922      	ldr	r2, [r4, #16]
 8014592:	6022      	str	r2, [r4, #0]
 8014594:	d504      	bpl.n	80145a0 <__sflush_r+0x78>
 8014596:	1c42      	adds	r2, r0, #1
 8014598:	d101      	bne.n	801459e <__sflush_r+0x76>
 801459a:	682b      	ldr	r3, [r5, #0]
 801459c:	b903      	cbnz	r3, 80145a0 <__sflush_r+0x78>
 801459e:	6560      	str	r0, [r4, #84]	@ 0x54
 80145a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80145a2:	602f      	str	r7, [r5, #0]
 80145a4:	b1b9      	cbz	r1, 80145d6 <__sflush_r+0xae>
 80145a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80145aa:	4299      	cmp	r1, r3
 80145ac:	d002      	beq.n	80145b4 <__sflush_r+0x8c>
 80145ae:	4628      	mov	r0, r5
 80145b0:	f7fd ff12 	bl	80123d8 <_free_r>
 80145b4:	2300      	movs	r3, #0
 80145b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80145b8:	e00d      	b.n	80145d6 <__sflush_r+0xae>
 80145ba:	2301      	movs	r3, #1
 80145bc:	4628      	mov	r0, r5
 80145be:	47b0      	blx	r6
 80145c0:	4602      	mov	r2, r0
 80145c2:	1c50      	adds	r0, r2, #1
 80145c4:	d1c9      	bne.n	801455a <__sflush_r+0x32>
 80145c6:	682b      	ldr	r3, [r5, #0]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d0c6      	beq.n	801455a <__sflush_r+0x32>
 80145cc:	2b1d      	cmp	r3, #29
 80145ce:	d001      	beq.n	80145d4 <__sflush_r+0xac>
 80145d0:	2b16      	cmp	r3, #22
 80145d2:	d11e      	bne.n	8014612 <__sflush_r+0xea>
 80145d4:	602f      	str	r7, [r5, #0]
 80145d6:	2000      	movs	r0, #0
 80145d8:	e022      	b.n	8014620 <__sflush_r+0xf8>
 80145da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80145de:	b21b      	sxth	r3, r3
 80145e0:	e01b      	b.n	801461a <__sflush_r+0xf2>
 80145e2:	690f      	ldr	r7, [r1, #16]
 80145e4:	2f00      	cmp	r7, #0
 80145e6:	d0f6      	beq.n	80145d6 <__sflush_r+0xae>
 80145e8:	0793      	lsls	r3, r2, #30
 80145ea:	680e      	ldr	r6, [r1, #0]
 80145ec:	bf08      	it	eq
 80145ee:	694b      	ldreq	r3, [r1, #20]
 80145f0:	600f      	str	r7, [r1, #0]
 80145f2:	bf18      	it	ne
 80145f4:	2300      	movne	r3, #0
 80145f6:	eba6 0807 	sub.w	r8, r6, r7
 80145fa:	608b      	str	r3, [r1, #8]
 80145fc:	f1b8 0f00 	cmp.w	r8, #0
 8014600:	dde9      	ble.n	80145d6 <__sflush_r+0xae>
 8014602:	6a21      	ldr	r1, [r4, #32]
 8014604:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014606:	4643      	mov	r3, r8
 8014608:	463a      	mov	r2, r7
 801460a:	4628      	mov	r0, r5
 801460c:	47b0      	blx	r6
 801460e:	2800      	cmp	r0, #0
 8014610:	dc08      	bgt.n	8014624 <__sflush_r+0xfc>
 8014612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801461a:	81a3      	strh	r3, [r4, #12]
 801461c:	f04f 30ff 	mov.w	r0, #4294967295
 8014620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014624:	4407      	add	r7, r0
 8014626:	eba8 0800 	sub.w	r8, r8, r0
 801462a:	e7e7      	b.n	80145fc <__sflush_r+0xd4>
 801462c:	dfbffffe 	.word	0xdfbffffe

08014630 <_fflush_r>:
 8014630:	b538      	push	{r3, r4, r5, lr}
 8014632:	690b      	ldr	r3, [r1, #16]
 8014634:	4605      	mov	r5, r0
 8014636:	460c      	mov	r4, r1
 8014638:	b913      	cbnz	r3, 8014640 <_fflush_r+0x10>
 801463a:	2500      	movs	r5, #0
 801463c:	4628      	mov	r0, r5
 801463e:	bd38      	pop	{r3, r4, r5, pc}
 8014640:	b118      	cbz	r0, 801464a <_fflush_r+0x1a>
 8014642:	6a03      	ldr	r3, [r0, #32]
 8014644:	b90b      	cbnz	r3, 801464a <_fflush_r+0x1a>
 8014646:	f7fc ff0d 	bl	8011464 <__sinit>
 801464a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d0f3      	beq.n	801463a <_fflush_r+0xa>
 8014652:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014654:	07d0      	lsls	r0, r2, #31
 8014656:	d404      	bmi.n	8014662 <_fflush_r+0x32>
 8014658:	0599      	lsls	r1, r3, #22
 801465a:	d402      	bmi.n	8014662 <_fflush_r+0x32>
 801465c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801465e:	f7fd f856 	bl	801170e <__retarget_lock_acquire_recursive>
 8014662:	4628      	mov	r0, r5
 8014664:	4621      	mov	r1, r4
 8014666:	f7ff ff5f 	bl	8014528 <__sflush_r>
 801466a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801466c:	07da      	lsls	r2, r3, #31
 801466e:	4605      	mov	r5, r0
 8014670:	d4e4      	bmi.n	801463c <_fflush_r+0xc>
 8014672:	89a3      	ldrh	r3, [r4, #12]
 8014674:	059b      	lsls	r3, r3, #22
 8014676:	d4e1      	bmi.n	801463c <_fflush_r+0xc>
 8014678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801467a:	f7fd f849 	bl	8011710 <__retarget_lock_release_recursive>
 801467e:	e7dd      	b.n	801463c <_fflush_r+0xc>

08014680 <__sccl>:
 8014680:	b570      	push	{r4, r5, r6, lr}
 8014682:	780b      	ldrb	r3, [r1, #0]
 8014684:	4604      	mov	r4, r0
 8014686:	2b5e      	cmp	r3, #94	@ 0x5e
 8014688:	bf0b      	itete	eq
 801468a:	784b      	ldrbeq	r3, [r1, #1]
 801468c:	1c4a      	addne	r2, r1, #1
 801468e:	1c8a      	addeq	r2, r1, #2
 8014690:	2100      	movne	r1, #0
 8014692:	bf08      	it	eq
 8014694:	2101      	moveq	r1, #1
 8014696:	3801      	subs	r0, #1
 8014698:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801469c:	f800 1f01 	strb.w	r1, [r0, #1]!
 80146a0:	42a8      	cmp	r0, r5
 80146a2:	d1fb      	bne.n	801469c <__sccl+0x1c>
 80146a4:	b90b      	cbnz	r3, 80146aa <__sccl+0x2a>
 80146a6:	1e50      	subs	r0, r2, #1
 80146a8:	bd70      	pop	{r4, r5, r6, pc}
 80146aa:	f081 0101 	eor.w	r1, r1, #1
 80146ae:	54e1      	strb	r1, [r4, r3]
 80146b0:	4610      	mov	r0, r2
 80146b2:	4602      	mov	r2, r0
 80146b4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80146b8:	2d2d      	cmp	r5, #45	@ 0x2d
 80146ba:	d005      	beq.n	80146c8 <__sccl+0x48>
 80146bc:	2d5d      	cmp	r5, #93	@ 0x5d
 80146be:	d016      	beq.n	80146ee <__sccl+0x6e>
 80146c0:	2d00      	cmp	r5, #0
 80146c2:	d0f1      	beq.n	80146a8 <__sccl+0x28>
 80146c4:	462b      	mov	r3, r5
 80146c6:	e7f2      	b.n	80146ae <__sccl+0x2e>
 80146c8:	7846      	ldrb	r6, [r0, #1]
 80146ca:	2e5d      	cmp	r6, #93	@ 0x5d
 80146cc:	d0fa      	beq.n	80146c4 <__sccl+0x44>
 80146ce:	42b3      	cmp	r3, r6
 80146d0:	dcf8      	bgt.n	80146c4 <__sccl+0x44>
 80146d2:	3002      	adds	r0, #2
 80146d4:	461a      	mov	r2, r3
 80146d6:	3201      	adds	r2, #1
 80146d8:	4296      	cmp	r6, r2
 80146da:	54a1      	strb	r1, [r4, r2]
 80146dc:	dcfb      	bgt.n	80146d6 <__sccl+0x56>
 80146de:	1af2      	subs	r2, r6, r3
 80146e0:	3a01      	subs	r2, #1
 80146e2:	1c5d      	adds	r5, r3, #1
 80146e4:	42b3      	cmp	r3, r6
 80146e6:	bfa8      	it	ge
 80146e8:	2200      	movge	r2, #0
 80146ea:	18ab      	adds	r3, r5, r2
 80146ec:	e7e1      	b.n	80146b2 <__sccl+0x32>
 80146ee:	4610      	mov	r0, r2
 80146f0:	e7da      	b.n	80146a8 <__sccl+0x28>

080146f2 <__submore>:
 80146f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146f6:	460c      	mov	r4, r1
 80146f8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80146fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80146fe:	4299      	cmp	r1, r3
 8014700:	d11d      	bne.n	801473e <__submore+0x4c>
 8014702:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8014706:	f7fd fedb 	bl	80124c0 <_malloc_r>
 801470a:	b918      	cbnz	r0, 8014714 <__submore+0x22>
 801470c:	f04f 30ff 	mov.w	r0, #4294967295
 8014710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014714:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014718:	63a3      	str	r3, [r4, #56]	@ 0x38
 801471a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801471e:	6360      	str	r0, [r4, #52]	@ 0x34
 8014720:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8014724:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8014728:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801472c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014730:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8014734:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8014738:	6020      	str	r0, [r4, #0]
 801473a:	2000      	movs	r0, #0
 801473c:	e7e8      	b.n	8014710 <__submore+0x1e>
 801473e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8014740:	0077      	lsls	r7, r6, #1
 8014742:	463a      	mov	r2, r7
 8014744:	f000 fbc1 	bl	8014eca <_realloc_r>
 8014748:	4605      	mov	r5, r0
 801474a:	2800      	cmp	r0, #0
 801474c:	d0de      	beq.n	801470c <__submore+0x1a>
 801474e:	eb00 0806 	add.w	r8, r0, r6
 8014752:	4601      	mov	r1, r0
 8014754:	4632      	mov	r2, r6
 8014756:	4640      	mov	r0, r8
 8014758:	f7fc ffdb 	bl	8011712 <memcpy>
 801475c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8014760:	f8c4 8000 	str.w	r8, [r4]
 8014764:	e7e9      	b.n	801473a <__submore+0x48>

08014766 <memmove>:
 8014766:	4288      	cmp	r0, r1
 8014768:	b510      	push	{r4, lr}
 801476a:	eb01 0402 	add.w	r4, r1, r2
 801476e:	d902      	bls.n	8014776 <memmove+0x10>
 8014770:	4284      	cmp	r4, r0
 8014772:	4623      	mov	r3, r4
 8014774:	d807      	bhi.n	8014786 <memmove+0x20>
 8014776:	1e43      	subs	r3, r0, #1
 8014778:	42a1      	cmp	r1, r4
 801477a:	d008      	beq.n	801478e <memmove+0x28>
 801477c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014780:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014784:	e7f8      	b.n	8014778 <memmove+0x12>
 8014786:	4402      	add	r2, r0
 8014788:	4601      	mov	r1, r0
 801478a:	428a      	cmp	r2, r1
 801478c:	d100      	bne.n	8014790 <memmove+0x2a>
 801478e:	bd10      	pop	{r4, pc}
 8014790:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014794:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014798:	e7f7      	b.n	801478a <memmove+0x24>
	...

0801479c <_sbrk_r>:
 801479c:	b538      	push	{r3, r4, r5, lr}
 801479e:	4d06      	ldr	r5, [pc, #24]	@ (80147b8 <_sbrk_r+0x1c>)
 80147a0:	2300      	movs	r3, #0
 80147a2:	4604      	mov	r4, r0
 80147a4:	4608      	mov	r0, r1
 80147a6:	602b      	str	r3, [r5, #0]
 80147a8:	f7ef fbb4 	bl	8003f14 <_sbrk>
 80147ac:	1c43      	adds	r3, r0, #1
 80147ae:	d102      	bne.n	80147b6 <_sbrk_r+0x1a>
 80147b0:	682b      	ldr	r3, [r5, #0]
 80147b2:	b103      	cbz	r3, 80147b6 <_sbrk_r+0x1a>
 80147b4:	6023      	str	r3, [r4, #0]
 80147b6:	bd38      	pop	{r3, r4, r5, pc}
 80147b8:	20002668 	.word	0x20002668
 80147bc:	00000000 	.word	0x00000000

080147c0 <nan>:
 80147c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80147c8 <nan+0x8>
 80147c4:	4770      	bx	lr
 80147c6:	bf00      	nop
 80147c8:	00000000 	.word	0x00000000
 80147cc:	7ff80000 	.word	0x7ff80000

080147d0 <__assert_func>:
 80147d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80147d2:	4614      	mov	r4, r2
 80147d4:	461a      	mov	r2, r3
 80147d6:	4b09      	ldr	r3, [pc, #36]	@ (80147fc <__assert_func+0x2c>)
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	4605      	mov	r5, r0
 80147dc:	68d8      	ldr	r0, [r3, #12]
 80147de:	b954      	cbnz	r4, 80147f6 <__assert_func+0x26>
 80147e0:	4b07      	ldr	r3, [pc, #28]	@ (8014800 <__assert_func+0x30>)
 80147e2:	461c      	mov	r4, r3
 80147e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80147e8:	9100      	str	r1, [sp, #0]
 80147ea:	462b      	mov	r3, r5
 80147ec:	4905      	ldr	r1, [pc, #20]	@ (8014804 <__assert_func+0x34>)
 80147ee:	f000 fc19 	bl	8015024 <fiprintf>
 80147f2:	f000 fc29 	bl	8015048 <abort>
 80147f6:	4b04      	ldr	r3, [pc, #16]	@ (8014808 <__assert_func+0x38>)
 80147f8:	e7f4      	b.n	80147e4 <__assert_func+0x14>
 80147fa:	bf00      	nop
 80147fc:	200001ac 	.word	0x200001ac
 8014800:	08017188 	.word	0x08017188
 8014804:	0801715a 	.word	0x0801715a
 8014808:	0801714d 	.word	0x0801714d

0801480c <_calloc_r>:
 801480c:	b570      	push	{r4, r5, r6, lr}
 801480e:	fba1 5402 	umull	r5, r4, r1, r2
 8014812:	b93c      	cbnz	r4, 8014824 <_calloc_r+0x18>
 8014814:	4629      	mov	r1, r5
 8014816:	f7fd fe53 	bl	80124c0 <_malloc_r>
 801481a:	4606      	mov	r6, r0
 801481c:	b928      	cbnz	r0, 801482a <_calloc_r+0x1e>
 801481e:	2600      	movs	r6, #0
 8014820:	4630      	mov	r0, r6
 8014822:	bd70      	pop	{r4, r5, r6, pc}
 8014824:	220c      	movs	r2, #12
 8014826:	6002      	str	r2, [r0, #0]
 8014828:	e7f9      	b.n	801481e <_calloc_r+0x12>
 801482a:	462a      	mov	r2, r5
 801482c:	4621      	mov	r1, r4
 801482e:	f7fc fede 	bl	80115ee <memset>
 8014832:	e7f5      	b.n	8014820 <_calloc_r+0x14>

08014834 <rshift>:
 8014834:	6903      	ldr	r3, [r0, #16]
 8014836:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801483a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801483e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014842:	f100 0414 	add.w	r4, r0, #20
 8014846:	dd45      	ble.n	80148d4 <rshift+0xa0>
 8014848:	f011 011f 	ands.w	r1, r1, #31
 801484c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014850:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014854:	d10c      	bne.n	8014870 <rshift+0x3c>
 8014856:	f100 0710 	add.w	r7, r0, #16
 801485a:	4629      	mov	r1, r5
 801485c:	42b1      	cmp	r1, r6
 801485e:	d334      	bcc.n	80148ca <rshift+0x96>
 8014860:	1a9b      	subs	r3, r3, r2
 8014862:	009b      	lsls	r3, r3, #2
 8014864:	1eea      	subs	r2, r5, #3
 8014866:	4296      	cmp	r6, r2
 8014868:	bf38      	it	cc
 801486a:	2300      	movcc	r3, #0
 801486c:	4423      	add	r3, r4
 801486e:	e015      	b.n	801489c <rshift+0x68>
 8014870:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014874:	f1c1 0820 	rsb	r8, r1, #32
 8014878:	40cf      	lsrs	r7, r1
 801487a:	f105 0e04 	add.w	lr, r5, #4
 801487e:	46a1      	mov	r9, r4
 8014880:	4576      	cmp	r6, lr
 8014882:	46f4      	mov	ip, lr
 8014884:	d815      	bhi.n	80148b2 <rshift+0x7e>
 8014886:	1a9a      	subs	r2, r3, r2
 8014888:	0092      	lsls	r2, r2, #2
 801488a:	3a04      	subs	r2, #4
 801488c:	3501      	adds	r5, #1
 801488e:	42ae      	cmp	r6, r5
 8014890:	bf38      	it	cc
 8014892:	2200      	movcc	r2, #0
 8014894:	18a3      	adds	r3, r4, r2
 8014896:	50a7      	str	r7, [r4, r2]
 8014898:	b107      	cbz	r7, 801489c <rshift+0x68>
 801489a:	3304      	adds	r3, #4
 801489c:	1b1a      	subs	r2, r3, r4
 801489e:	42a3      	cmp	r3, r4
 80148a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80148a4:	bf08      	it	eq
 80148a6:	2300      	moveq	r3, #0
 80148a8:	6102      	str	r2, [r0, #16]
 80148aa:	bf08      	it	eq
 80148ac:	6143      	streq	r3, [r0, #20]
 80148ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148b2:	f8dc c000 	ldr.w	ip, [ip]
 80148b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80148ba:	ea4c 0707 	orr.w	r7, ip, r7
 80148be:	f849 7b04 	str.w	r7, [r9], #4
 80148c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80148c6:	40cf      	lsrs	r7, r1
 80148c8:	e7da      	b.n	8014880 <rshift+0x4c>
 80148ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80148ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80148d2:	e7c3      	b.n	801485c <rshift+0x28>
 80148d4:	4623      	mov	r3, r4
 80148d6:	e7e1      	b.n	801489c <rshift+0x68>

080148d8 <__hexdig_fun>:
 80148d8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80148dc:	2b09      	cmp	r3, #9
 80148de:	d802      	bhi.n	80148e6 <__hexdig_fun+0xe>
 80148e0:	3820      	subs	r0, #32
 80148e2:	b2c0      	uxtb	r0, r0
 80148e4:	4770      	bx	lr
 80148e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80148ea:	2b05      	cmp	r3, #5
 80148ec:	d801      	bhi.n	80148f2 <__hexdig_fun+0x1a>
 80148ee:	3847      	subs	r0, #71	@ 0x47
 80148f0:	e7f7      	b.n	80148e2 <__hexdig_fun+0xa>
 80148f2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80148f6:	2b05      	cmp	r3, #5
 80148f8:	d801      	bhi.n	80148fe <__hexdig_fun+0x26>
 80148fa:	3827      	subs	r0, #39	@ 0x27
 80148fc:	e7f1      	b.n	80148e2 <__hexdig_fun+0xa>
 80148fe:	2000      	movs	r0, #0
 8014900:	4770      	bx	lr
	...

08014904 <__gethex>:
 8014904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014908:	b085      	sub	sp, #20
 801490a:	468a      	mov	sl, r1
 801490c:	9302      	str	r3, [sp, #8]
 801490e:	680b      	ldr	r3, [r1, #0]
 8014910:	9001      	str	r0, [sp, #4]
 8014912:	4690      	mov	r8, r2
 8014914:	1c9c      	adds	r4, r3, #2
 8014916:	46a1      	mov	r9, r4
 8014918:	f814 0b01 	ldrb.w	r0, [r4], #1
 801491c:	2830      	cmp	r0, #48	@ 0x30
 801491e:	d0fa      	beq.n	8014916 <__gethex+0x12>
 8014920:	eba9 0303 	sub.w	r3, r9, r3
 8014924:	f1a3 0b02 	sub.w	fp, r3, #2
 8014928:	f7ff ffd6 	bl	80148d8 <__hexdig_fun>
 801492c:	4605      	mov	r5, r0
 801492e:	2800      	cmp	r0, #0
 8014930:	d168      	bne.n	8014a04 <__gethex+0x100>
 8014932:	49a0      	ldr	r1, [pc, #640]	@ (8014bb4 <__gethex+0x2b0>)
 8014934:	2201      	movs	r2, #1
 8014936:	4648      	mov	r0, r9
 8014938:	f7fc fe61 	bl	80115fe <strncmp>
 801493c:	4607      	mov	r7, r0
 801493e:	2800      	cmp	r0, #0
 8014940:	d167      	bne.n	8014a12 <__gethex+0x10e>
 8014942:	f899 0001 	ldrb.w	r0, [r9, #1]
 8014946:	4626      	mov	r6, r4
 8014948:	f7ff ffc6 	bl	80148d8 <__hexdig_fun>
 801494c:	2800      	cmp	r0, #0
 801494e:	d062      	beq.n	8014a16 <__gethex+0x112>
 8014950:	4623      	mov	r3, r4
 8014952:	7818      	ldrb	r0, [r3, #0]
 8014954:	2830      	cmp	r0, #48	@ 0x30
 8014956:	4699      	mov	r9, r3
 8014958:	f103 0301 	add.w	r3, r3, #1
 801495c:	d0f9      	beq.n	8014952 <__gethex+0x4e>
 801495e:	f7ff ffbb 	bl	80148d8 <__hexdig_fun>
 8014962:	fab0 f580 	clz	r5, r0
 8014966:	096d      	lsrs	r5, r5, #5
 8014968:	f04f 0b01 	mov.w	fp, #1
 801496c:	464a      	mov	r2, r9
 801496e:	4616      	mov	r6, r2
 8014970:	3201      	adds	r2, #1
 8014972:	7830      	ldrb	r0, [r6, #0]
 8014974:	f7ff ffb0 	bl	80148d8 <__hexdig_fun>
 8014978:	2800      	cmp	r0, #0
 801497a:	d1f8      	bne.n	801496e <__gethex+0x6a>
 801497c:	498d      	ldr	r1, [pc, #564]	@ (8014bb4 <__gethex+0x2b0>)
 801497e:	2201      	movs	r2, #1
 8014980:	4630      	mov	r0, r6
 8014982:	f7fc fe3c 	bl	80115fe <strncmp>
 8014986:	2800      	cmp	r0, #0
 8014988:	d13f      	bne.n	8014a0a <__gethex+0x106>
 801498a:	b944      	cbnz	r4, 801499e <__gethex+0x9a>
 801498c:	1c74      	adds	r4, r6, #1
 801498e:	4622      	mov	r2, r4
 8014990:	4616      	mov	r6, r2
 8014992:	3201      	adds	r2, #1
 8014994:	7830      	ldrb	r0, [r6, #0]
 8014996:	f7ff ff9f 	bl	80148d8 <__hexdig_fun>
 801499a:	2800      	cmp	r0, #0
 801499c:	d1f8      	bne.n	8014990 <__gethex+0x8c>
 801499e:	1ba4      	subs	r4, r4, r6
 80149a0:	00a7      	lsls	r7, r4, #2
 80149a2:	7833      	ldrb	r3, [r6, #0]
 80149a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80149a8:	2b50      	cmp	r3, #80	@ 0x50
 80149aa:	d13e      	bne.n	8014a2a <__gethex+0x126>
 80149ac:	7873      	ldrb	r3, [r6, #1]
 80149ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80149b0:	d033      	beq.n	8014a1a <__gethex+0x116>
 80149b2:	2b2d      	cmp	r3, #45	@ 0x2d
 80149b4:	d034      	beq.n	8014a20 <__gethex+0x11c>
 80149b6:	1c71      	adds	r1, r6, #1
 80149b8:	2400      	movs	r4, #0
 80149ba:	7808      	ldrb	r0, [r1, #0]
 80149bc:	f7ff ff8c 	bl	80148d8 <__hexdig_fun>
 80149c0:	1e43      	subs	r3, r0, #1
 80149c2:	b2db      	uxtb	r3, r3
 80149c4:	2b18      	cmp	r3, #24
 80149c6:	d830      	bhi.n	8014a2a <__gethex+0x126>
 80149c8:	f1a0 0210 	sub.w	r2, r0, #16
 80149cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80149d0:	f7ff ff82 	bl	80148d8 <__hexdig_fun>
 80149d4:	f100 3cff 	add.w	ip, r0, #4294967295
 80149d8:	fa5f fc8c 	uxtb.w	ip, ip
 80149dc:	f1bc 0f18 	cmp.w	ip, #24
 80149e0:	f04f 030a 	mov.w	r3, #10
 80149e4:	d91e      	bls.n	8014a24 <__gethex+0x120>
 80149e6:	b104      	cbz	r4, 80149ea <__gethex+0xe6>
 80149e8:	4252      	negs	r2, r2
 80149ea:	4417      	add	r7, r2
 80149ec:	f8ca 1000 	str.w	r1, [sl]
 80149f0:	b1ed      	cbz	r5, 8014a2e <__gethex+0x12a>
 80149f2:	f1bb 0f00 	cmp.w	fp, #0
 80149f6:	bf0c      	ite	eq
 80149f8:	2506      	moveq	r5, #6
 80149fa:	2500      	movne	r5, #0
 80149fc:	4628      	mov	r0, r5
 80149fe:	b005      	add	sp, #20
 8014a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a04:	2500      	movs	r5, #0
 8014a06:	462c      	mov	r4, r5
 8014a08:	e7b0      	b.n	801496c <__gethex+0x68>
 8014a0a:	2c00      	cmp	r4, #0
 8014a0c:	d1c7      	bne.n	801499e <__gethex+0x9a>
 8014a0e:	4627      	mov	r7, r4
 8014a10:	e7c7      	b.n	80149a2 <__gethex+0x9e>
 8014a12:	464e      	mov	r6, r9
 8014a14:	462f      	mov	r7, r5
 8014a16:	2501      	movs	r5, #1
 8014a18:	e7c3      	b.n	80149a2 <__gethex+0x9e>
 8014a1a:	2400      	movs	r4, #0
 8014a1c:	1cb1      	adds	r1, r6, #2
 8014a1e:	e7cc      	b.n	80149ba <__gethex+0xb6>
 8014a20:	2401      	movs	r4, #1
 8014a22:	e7fb      	b.n	8014a1c <__gethex+0x118>
 8014a24:	fb03 0002 	mla	r0, r3, r2, r0
 8014a28:	e7ce      	b.n	80149c8 <__gethex+0xc4>
 8014a2a:	4631      	mov	r1, r6
 8014a2c:	e7de      	b.n	80149ec <__gethex+0xe8>
 8014a2e:	eba6 0309 	sub.w	r3, r6, r9
 8014a32:	3b01      	subs	r3, #1
 8014a34:	4629      	mov	r1, r5
 8014a36:	2b07      	cmp	r3, #7
 8014a38:	dc0a      	bgt.n	8014a50 <__gethex+0x14c>
 8014a3a:	9801      	ldr	r0, [sp, #4]
 8014a3c:	f7fd fdcc 	bl	80125d8 <_Balloc>
 8014a40:	4604      	mov	r4, r0
 8014a42:	b940      	cbnz	r0, 8014a56 <__gethex+0x152>
 8014a44:	4b5c      	ldr	r3, [pc, #368]	@ (8014bb8 <__gethex+0x2b4>)
 8014a46:	4602      	mov	r2, r0
 8014a48:	21e4      	movs	r1, #228	@ 0xe4
 8014a4a:	485c      	ldr	r0, [pc, #368]	@ (8014bbc <__gethex+0x2b8>)
 8014a4c:	f7ff fec0 	bl	80147d0 <__assert_func>
 8014a50:	3101      	adds	r1, #1
 8014a52:	105b      	asrs	r3, r3, #1
 8014a54:	e7ef      	b.n	8014a36 <__gethex+0x132>
 8014a56:	f100 0a14 	add.w	sl, r0, #20
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	4655      	mov	r5, sl
 8014a5e:	469b      	mov	fp, r3
 8014a60:	45b1      	cmp	r9, r6
 8014a62:	d337      	bcc.n	8014ad4 <__gethex+0x1d0>
 8014a64:	f845 bb04 	str.w	fp, [r5], #4
 8014a68:	eba5 050a 	sub.w	r5, r5, sl
 8014a6c:	10ad      	asrs	r5, r5, #2
 8014a6e:	6125      	str	r5, [r4, #16]
 8014a70:	4658      	mov	r0, fp
 8014a72:	f7fd fea3 	bl	80127bc <__hi0bits>
 8014a76:	016d      	lsls	r5, r5, #5
 8014a78:	f8d8 6000 	ldr.w	r6, [r8]
 8014a7c:	1a2d      	subs	r5, r5, r0
 8014a7e:	42b5      	cmp	r5, r6
 8014a80:	dd54      	ble.n	8014b2c <__gethex+0x228>
 8014a82:	1bad      	subs	r5, r5, r6
 8014a84:	4629      	mov	r1, r5
 8014a86:	4620      	mov	r0, r4
 8014a88:	f7fe fa37 	bl	8012efa <__any_on>
 8014a8c:	4681      	mov	r9, r0
 8014a8e:	b178      	cbz	r0, 8014ab0 <__gethex+0x1ac>
 8014a90:	1e6b      	subs	r3, r5, #1
 8014a92:	1159      	asrs	r1, r3, #5
 8014a94:	f003 021f 	and.w	r2, r3, #31
 8014a98:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014a9c:	f04f 0901 	mov.w	r9, #1
 8014aa0:	fa09 f202 	lsl.w	r2, r9, r2
 8014aa4:	420a      	tst	r2, r1
 8014aa6:	d003      	beq.n	8014ab0 <__gethex+0x1ac>
 8014aa8:	454b      	cmp	r3, r9
 8014aaa:	dc36      	bgt.n	8014b1a <__gethex+0x216>
 8014aac:	f04f 0902 	mov.w	r9, #2
 8014ab0:	4629      	mov	r1, r5
 8014ab2:	4620      	mov	r0, r4
 8014ab4:	f7ff febe 	bl	8014834 <rshift>
 8014ab8:	442f      	add	r7, r5
 8014aba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014abe:	42bb      	cmp	r3, r7
 8014ac0:	da42      	bge.n	8014b48 <__gethex+0x244>
 8014ac2:	9801      	ldr	r0, [sp, #4]
 8014ac4:	4621      	mov	r1, r4
 8014ac6:	f7fd fdc7 	bl	8012658 <_Bfree>
 8014aca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014acc:	2300      	movs	r3, #0
 8014ace:	6013      	str	r3, [r2, #0]
 8014ad0:	25a3      	movs	r5, #163	@ 0xa3
 8014ad2:	e793      	b.n	80149fc <__gethex+0xf8>
 8014ad4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014ad8:	2a2e      	cmp	r2, #46	@ 0x2e
 8014ada:	d012      	beq.n	8014b02 <__gethex+0x1fe>
 8014adc:	2b20      	cmp	r3, #32
 8014ade:	d104      	bne.n	8014aea <__gethex+0x1e6>
 8014ae0:	f845 bb04 	str.w	fp, [r5], #4
 8014ae4:	f04f 0b00 	mov.w	fp, #0
 8014ae8:	465b      	mov	r3, fp
 8014aea:	7830      	ldrb	r0, [r6, #0]
 8014aec:	9303      	str	r3, [sp, #12]
 8014aee:	f7ff fef3 	bl	80148d8 <__hexdig_fun>
 8014af2:	9b03      	ldr	r3, [sp, #12]
 8014af4:	f000 000f 	and.w	r0, r0, #15
 8014af8:	4098      	lsls	r0, r3
 8014afa:	ea4b 0b00 	orr.w	fp, fp, r0
 8014afe:	3304      	adds	r3, #4
 8014b00:	e7ae      	b.n	8014a60 <__gethex+0x15c>
 8014b02:	45b1      	cmp	r9, r6
 8014b04:	d8ea      	bhi.n	8014adc <__gethex+0x1d8>
 8014b06:	492b      	ldr	r1, [pc, #172]	@ (8014bb4 <__gethex+0x2b0>)
 8014b08:	9303      	str	r3, [sp, #12]
 8014b0a:	2201      	movs	r2, #1
 8014b0c:	4630      	mov	r0, r6
 8014b0e:	f7fc fd76 	bl	80115fe <strncmp>
 8014b12:	9b03      	ldr	r3, [sp, #12]
 8014b14:	2800      	cmp	r0, #0
 8014b16:	d1e1      	bne.n	8014adc <__gethex+0x1d8>
 8014b18:	e7a2      	b.n	8014a60 <__gethex+0x15c>
 8014b1a:	1ea9      	subs	r1, r5, #2
 8014b1c:	4620      	mov	r0, r4
 8014b1e:	f7fe f9ec 	bl	8012efa <__any_on>
 8014b22:	2800      	cmp	r0, #0
 8014b24:	d0c2      	beq.n	8014aac <__gethex+0x1a8>
 8014b26:	f04f 0903 	mov.w	r9, #3
 8014b2a:	e7c1      	b.n	8014ab0 <__gethex+0x1ac>
 8014b2c:	da09      	bge.n	8014b42 <__gethex+0x23e>
 8014b2e:	1b75      	subs	r5, r6, r5
 8014b30:	4621      	mov	r1, r4
 8014b32:	9801      	ldr	r0, [sp, #4]
 8014b34:	462a      	mov	r2, r5
 8014b36:	f7fd ffa7 	bl	8012a88 <__lshift>
 8014b3a:	1b7f      	subs	r7, r7, r5
 8014b3c:	4604      	mov	r4, r0
 8014b3e:	f100 0a14 	add.w	sl, r0, #20
 8014b42:	f04f 0900 	mov.w	r9, #0
 8014b46:	e7b8      	b.n	8014aba <__gethex+0x1b6>
 8014b48:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014b4c:	42bd      	cmp	r5, r7
 8014b4e:	dd6f      	ble.n	8014c30 <__gethex+0x32c>
 8014b50:	1bed      	subs	r5, r5, r7
 8014b52:	42ae      	cmp	r6, r5
 8014b54:	dc34      	bgt.n	8014bc0 <__gethex+0x2bc>
 8014b56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014b5a:	2b02      	cmp	r3, #2
 8014b5c:	d022      	beq.n	8014ba4 <__gethex+0x2a0>
 8014b5e:	2b03      	cmp	r3, #3
 8014b60:	d024      	beq.n	8014bac <__gethex+0x2a8>
 8014b62:	2b01      	cmp	r3, #1
 8014b64:	d115      	bne.n	8014b92 <__gethex+0x28e>
 8014b66:	42ae      	cmp	r6, r5
 8014b68:	d113      	bne.n	8014b92 <__gethex+0x28e>
 8014b6a:	2e01      	cmp	r6, #1
 8014b6c:	d10b      	bne.n	8014b86 <__gethex+0x282>
 8014b6e:	9a02      	ldr	r2, [sp, #8]
 8014b70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014b74:	6013      	str	r3, [r2, #0]
 8014b76:	2301      	movs	r3, #1
 8014b78:	6123      	str	r3, [r4, #16]
 8014b7a:	f8ca 3000 	str.w	r3, [sl]
 8014b7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014b80:	2562      	movs	r5, #98	@ 0x62
 8014b82:	601c      	str	r4, [r3, #0]
 8014b84:	e73a      	b.n	80149fc <__gethex+0xf8>
 8014b86:	1e71      	subs	r1, r6, #1
 8014b88:	4620      	mov	r0, r4
 8014b8a:	f7fe f9b6 	bl	8012efa <__any_on>
 8014b8e:	2800      	cmp	r0, #0
 8014b90:	d1ed      	bne.n	8014b6e <__gethex+0x26a>
 8014b92:	9801      	ldr	r0, [sp, #4]
 8014b94:	4621      	mov	r1, r4
 8014b96:	f7fd fd5f 	bl	8012658 <_Bfree>
 8014b9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	6013      	str	r3, [r2, #0]
 8014ba0:	2550      	movs	r5, #80	@ 0x50
 8014ba2:	e72b      	b.n	80149fc <__gethex+0xf8>
 8014ba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d1f3      	bne.n	8014b92 <__gethex+0x28e>
 8014baa:	e7e0      	b.n	8014b6e <__gethex+0x26a>
 8014bac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d1dd      	bne.n	8014b6e <__gethex+0x26a>
 8014bb2:	e7ee      	b.n	8014b92 <__gethex+0x28e>
 8014bb4:	08016fc0 	.word	0x08016fc0
 8014bb8:	08016e53 	.word	0x08016e53
 8014bbc:	08017189 	.word	0x08017189
 8014bc0:	1e6f      	subs	r7, r5, #1
 8014bc2:	f1b9 0f00 	cmp.w	r9, #0
 8014bc6:	d130      	bne.n	8014c2a <__gethex+0x326>
 8014bc8:	b127      	cbz	r7, 8014bd4 <__gethex+0x2d0>
 8014bca:	4639      	mov	r1, r7
 8014bcc:	4620      	mov	r0, r4
 8014bce:	f7fe f994 	bl	8012efa <__any_on>
 8014bd2:	4681      	mov	r9, r0
 8014bd4:	117a      	asrs	r2, r7, #5
 8014bd6:	2301      	movs	r3, #1
 8014bd8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014bdc:	f007 071f 	and.w	r7, r7, #31
 8014be0:	40bb      	lsls	r3, r7
 8014be2:	4213      	tst	r3, r2
 8014be4:	4629      	mov	r1, r5
 8014be6:	4620      	mov	r0, r4
 8014be8:	bf18      	it	ne
 8014bea:	f049 0902 	orrne.w	r9, r9, #2
 8014bee:	f7ff fe21 	bl	8014834 <rshift>
 8014bf2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014bf6:	1b76      	subs	r6, r6, r5
 8014bf8:	2502      	movs	r5, #2
 8014bfa:	f1b9 0f00 	cmp.w	r9, #0
 8014bfe:	d047      	beq.n	8014c90 <__gethex+0x38c>
 8014c00:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014c04:	2b02      	cmp	r3, #2
 8014c06:	d015      	beq.n	8014c34 <__gethex+0x330>
 8014c08:	2b03      	cmp	r3, #3
 8014c0a:	d017      	beq.n	8014c3c <__gethex+0x338>
 8014c0c:	2b01      	cmp	r3, #1
 8014c0e:	d109      	bne.n	8014c24 <__gethex+0x320>
 8014c10:	f019 0f02 	tst.w	r9, #2
 8014c14:	d006      	beq.n	8014c24 <__gethex+0x320>
 8014c16:	f8da 3000 	ldr.w	r3, [sl]
 8014c1a:	ea49 0903 	orr.w	r9, r9, r3
 8014c1e:	f019 0f01 	tst.w	r9, #1
 8014c22:	d10e      	bne.n	8014c42 <__gethex+0x33e>
 8014c24:	f045 0510 	orr.w	r5, r5, #16
 8014c28:	e032      	b.n	8014c90 <__gethex+0x38c>
 8014c2a:	f04f 0901 	mov.w	r9, #1
 8014c2e:	e7d1      	b.n	8014bd4 <__gethex+0x2d0>
 8014c30:	2501      	movs	r5, #1
 8014c32:	e7e2      	b.n	8014bfa <__gethex+0x2f6>
 8014c34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c36:	f1c3 0301 	rsb	r3, r3, #1
 8014c3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014c3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d0f0      	beq.n	8014c24 <__gethex+0x320>
 8014c42:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014c46:	f104 0314 	add.w	r3, r4, #20
 8014c4a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014c4e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014c52:	f04f 0c00 	mov.w	ip, #0
 8014c56:	4618      	mov	r0, r3
 8014c58:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c5c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014c60:	d01b      	beq.n	8014c9a <__gethex+0x396>
 8014c62:	3201      	adds	r2, #1
 8014c64:	6002      	str	r2, [r0, #0]
 8014c66:	2d02      	cmp	r5, #2
 8014c68:	f104 0314 	add.w	r3, r4, #20
 8014c6c:	d13c      	bne.n	8014ce8 <__gethex+0x3e4>
 8014c6e:	f8d8 2000 	ldr.w	r2, [r8]
 8014c72:	3a01      	subs	r2, #1
 8014c74:	42b2      	cmp	r2, r6
 8014c76:	d109      	bne.n	8014c8c <__gethex+0x388>
 8014c78:	1171      	asrs	r1, r6, #5
 8014c7a:	2201      	movs	r2, #1
 8014c7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014c80:	f006 061f 	and.w	r6, r6, #31
 8014c84:	fa02 f606 	lsl.w	r6, r2, r6
 8014c88:	421e      	tst	r6, r3
 8014c8a:	d13a      	bne.n	8014d02 <__gethex+0x3fe>
 8014c8c:	f045 0520 	orr.w	r5, r5, #32
 8014c90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014c92:	601c      	str	r4, [r3, #0]
 8014c94:	9b02      	ldr	r3, [sp, #8]
 8014c96:	601f      	str	r7, [r3, #0]
 8014c98:	e6b0      	b.n	80149fc <__gethex+0xf8>
 8014c9a:	4299      	cmp	r1, r3
 8014c9c:	f843 cc04 	str.w	ip, [r3, #-4]
 8014ca0:	d8d9      	bhi.n	8014c56 <__gethex+0x352>
 8014ca2:	68a3      	ldr	r3, [r4, #8]
 8014ca4:	459b      	cmp	fp, r3
 8014ca6:	db17      	blt.n	8014cd8 <__gethex+0x3d4>
 8014ca8:	6861      	ldr	r1, [r4, #4]
 8014caa:	9801      	ldr	r0, [sp, #4]
 8014cac:	3101      	adds	r1, #1
 8014cae:	f7fd fc93 	bl	80125d8 <_Balloc>
 8014cb2:	4681      	mov	r9, r0
 8014cb4:	b918      	cbnz	r0, 8014cbe <__gethex+0x3ba>
 8014cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8014d20 <__gethex+0x41c>)
 8014cb8:	4602      	mov	r2, r0
 8014cba:	2184      	movs	r1, #132	@ 0x84
 8014cbc:	e6c5      	b.n	8014a4a <__gethex+0x146>
 8014cbe:	6922      	ldr	r2, [r4, #16]
 8014cc0:	3202      	adds	r2, #2
 8014cc2:	f104 010c 	add.w	r1, r4, #12
 8014cc6:	0092      	lsls	r2, r2, #2
 8014cc8:	300c      	adds	r0, #12
 8014cca:	f7fc fd22 	bl	8011712 <memcpy>
 8014cce:	4621      	mov	r1, r4
 8014cd0:	9801      	ldr	r0, [sp, #4]
 8014cd2:	f7fd fcc1 	bl	8012658 <_Bfree>
 8014cd6:	464c      	mov	r4, r9
 8014cd8:	6923      	ldr	r3, [r4, #16]
 8014cda:	1c5a      	adds	r2, r3, #1
 8014cdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014ce0:	6122      	str	r2, [r4, #16]
 8014ce2:	2201      	movs	r2, #1
 8014ce4:	615a      	str	r2, [r3, #20]
 8014ce6:	e7be      	b.n	8014c66 <__gethex+0x362>
 8014ce8:	6922      	ldr	r2, [r4, #16]
 8014cea:	455a      	cmp	r2, fp
 8014cec:	dd0b      	ble.n	8014d06 <__gethex+0x402>
 8014cee:	2101      	movs	r1, #1
 8014cf0:	4620      	mov	r0, r4
 8014cf2:	f7ff fd9f 	bl	8014834 <rshift>
 8014cf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014cfa:	3701      	adds	r7, #1
 8014cfc:	42bb      	cmp	r3, r7
 8014cfe:	f6ff aee0 	blt.w	8014ac2 <__gethex+0x1be>
 8014d02:	2501      	movs	r5, #1
 8014d04:	e7c2      	b.n	8014c8c <__gethex+0x388>
 8014d06:	f016 061f 	ands.w	r6, r6, #31
 8014d0a:	d0fa      	beq.n	8014d02 <__gethex+0x3fe>
 8014d0c:	4453      	add	r3, sl
 8014d0e:	f1c6 0620 	rsb	r6, r6, #32
 8014d12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014d16:	f7fd fd51 	bl	80127bc <__hi0bits>
 8014d1a:	42b0      	cmp	r0, r6
 8014d1c:	dbe7      	blt.n	8014cee <__gethex+0x3ea>
 8014d1e:	e7f0      	b.n	8014d02 <__gethex+0x3fe>
 8014d20:	08016e53 	.word	0x08016e53

08014d24 <L_shift>:
 8014d24:	f1c2 0208 	rsb	r2, r2, #8
 8014d28:	0092      	lsls	r2, r2, #2
 8014d2a:	b570      	push	{r4, r5, r6, lr}
 8014d2c:	f1c2 0620 	rsb	r6, r2, #32
 8014d30:	6843      	ldr	r3, [r0, #4]
 8014d32:	6804      	ldr	r4, [r0, #0]
 8014d34:	fa03 f506 	lsl.w	r5, r3, r6
 8014d38:	432c      	orrs	r4, r5
 8014d3a:	40d3      	lsrs	r3, r2
 8014d3c:	6004      	str	r4, [r0, #0]
 8014d3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8014d42:	4288      	cmp	r0, r1
 8014d44:	d3f4      	bcc.n	8014d30 <L_shift+0xc>
 8014d46:	bd70      	pop	{r4, r5, r6, pc}

08014d48 <__match>:
 8014d48:	b530      	push	{r4, r5, lr}
 8014d4a:	6803      	ldr	r3, [r0, #0]
 8014d4c:	3301      	adds	r3, #1
 8014d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d52:	b914      	cbnz	r4, 8014d5a <__match+0x12>
 8014d54:	6003      	str	r3, [r0, #0]
 8014d56:	2001      	movs	r0, #1
 8014d58:	bd30      	pop	{r4, r5, pc}
 8014d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d5e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8014d62:	2d19      	cmp	r5, #25
 8014d64:	bf98      	it	ls
 8014d66:	3220      	addls	r2, #32
 8014d68:	42a2      	cmp	r2, r4
 8014d6a:	d0f0      	beq.n	8014d4e <__match+0x6>
 8014d6c:	2000      	movs	r0, #0
 8014d6e:	e7f3      	b.n	8014d58 <__match+0x10>

08014d70 <__hexnan>:
 8014d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d74:	680b      	ldr	r3, [r1, #0]
 8014d76:	6801      	ldr	r1, [r0, #0]
 8014d78:	115e      	asrs	r6, r3, #5
 8014d7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014d7e:	f013 031f 	ands.w	r3, r3, #31
 8014d82:	b087      	sub	sp, #28
 8014d84:	bf18      	it	ne
 8014d86:	3604      	addne	r6, #4
 8014d88:	2500      	movs	r5, #0
 8014d8a:	1f37      	subs	r7, r6, #4
 8014d8c:	4682      	mov	sl, r0
 8014d8e:	4690      	mov	r8, r2
 8014d90:	9301      	str	r3, [sp, #4]
 8014d92:	f846 5c04 	str.w	r5, [r6, #-4]
 8014d96:	46b9      	mov	r9, r7
 8014d98:	463c      	mov	r4, r7
 8014d9a:	9502      	str	r5, [sp, #8]
 8014d9c:	46ab      	mov	fp, r5
 8014d9e:	784a      	ldrb	r2, [r1, #1]
 8014da0:	1c4b      	adds	r3, r1, #1
 8014da2:	9303      	str	r3, [sp, #12]
 8014da4:	b342      	cbz	r2, 8014df8 <__hexnan+0x88>
 8014da6:	4610      	mov	r0, r2
 8014da8:	9105      	str	r1, [sp, #20]
 8014daa:	9204      	str	r2, [sp, #16]
 8014dac:	f7ff fd94 	bl	80148d8 <__hexdig_fun>
 8014db0:	2800      	cmp	r0, #0
 8014db2:	d151      	bne.n	8014e58 <__hexnan+0xe8>
 8014db4:	9a04      	ldr	r2, [sp, #16]
 8014db6:	9905      	ldr	r1, [sp, #20]
 8014db8:	2a20      	cmp	r2, #32
 8014dba:	d818      	bhi.n	8014dee <__hexnan+0x7e>
 8014dbc:	9b02      	ldr	r3, [sp, #8]
 8014dbe:	459b      	cmp	fp, r3
 8014dc0:	dd13      	ble.n	8014dea <__hexnan+0x7a>
 8014dc2:	454c      	cmp	r4, r9
 8014dc4:	d206      	bcs.n	8014dd4 <__hexnan+0x64>
 8014dc6:	2d07      	cmp	r5, #7
 8014dc8:	dc04      	bgt.n	8014dd4 <__hexnan+0x64>
 8014dca:	462a      	mov	r2, r5
 8014dcc:	4649      	mov	r1, r9
 8014dce:	4620      	mov	r0, r4
 8014dd0:	f7ff ffa8 	bl	8014d24 <L_shift>
 8014dd4:	4544      	cmp	r4, r8
 8014dd6:	d952      	bls.n	8014e7e <__hexnan+0x10e>
 8014dd8:	2300      	movs	r3, #0
 8014dda:	f1a4 0904 	sub.w	r9, r4, #4
 8014dde:	f844 3c04 	str.w	r3, [r4, #-4]
 8014de2:	f8cd b008 	str.w	fp, [sp, #8]
 8014de6:	464c      	mov	r4, r9
 8014de8:	461d      	mov	r5, r3
 8014dea:	9903      	ldr	r1, [sp, #12]
 8014dec:	e7d7      	b.n	8014d9e <__hexnan+0x2e>
 8014dee:	2a29      	cmp	r2, #41	@ 0x29
 8014df0:	d157      	bne.n	8014ea2 <__hexnan+0x132>
 8014df2:	3102      	adds	r1, #2
 8014df4:	f8ca 1000 	str.w	r1, [sl]
 8014df8:	f1bb 0f00 	cmp.w	fp, #0
 8014dfc:	d051      	beq.n	8014ea2 <__hexnan+0x132>
 8014dfe:	454c      	cmp	r4, r9
 8014e00:	d206      	bcs.n	8014e10 <__hexnan+0xa0>
 8014e02:	2d07      	cmp	r5, #7
 8014e04:	dc04      	bgt.n	8014e10 <__hexnan+0xa0>
 8014e06:	462a      	mov	r2, r5
 8014e08:	4649      	mov	r1, r9
 8014e0a:	4620      	mov	r0, r4
 8014e0c:	f7ff ff8a 	bl	8014d24 <L_shift>
 8014e10:	4544      	cmp	r4, r8
 8014e12:	d936      	bls.n	8014e82 <__hexnan+0x112>
 8014e14:	f1a8 0204 	sub.w	r2, r8, #4
 8014e18:	4623      	mov	r3, r4
 8014e1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8014e1e:	f842 1f04 	str.w	r1, [r2, #4]!
 8014e22:	429f      	cmp	r7, r3
 8014e24:	d2f9      	bcs.n	8014e1a <__hexnan+0xaa>
 8014e26:	1b3b      	subs	r3, r7, r4
 8014e28:	f023 0303 	bic.w	r3, r3, #3
 8014e2c:	3304      	adds	r3, #4
 8014e2e:	3401      	adds	r4, #1
 8014e30:	3e03      	subs	r6, #3
 8014e32:	42b4      	cmp	r4, r6
 8014e34:	bf88      	it	hi
 8014e36:	2304      	movhi	r3, #4
 8014e38:	4443      	add	r3, r8
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	f843 2b04 	str.w	r2, [r3], #4
 8014e40:	429f      	cmp	r7, r3
 8014e42:	d2fb      	bcs.n	8014e3c <__hexnan+0xcc>
 8014e44:	683b      	ldr	r3, [r7, #0]
 8014e46:	b91b      	cbnz	r3, 8014e50 <__hexnan+0xe0>
 8014e48:	4547      	cmp	r7, r8
 8014e4a:	d128      	bne.n	8014e9e <__hexnan+0x12e>
 8014e4c:	2301      	movs	r3, #1
 8014e4e:	603b      	str	r3, [r7, #0]
 8014e50:	2005      	movs	r0, #5
 8014e52:	b007      	add	sp, #28
 8014e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e58:	3501      	adds	r5, #1
 8014e5a:	2d08      	cmp	r5, #8
 8014e5c:	f10b 0b01 	add.w	fp, fp, #1
 8014e60:	dd06      	ble.n	8014e70 <__hexnan+0x100>
 8014e62:	4544      	cmp	r4, r8
 8014e64:	d9c1      	bls.n	8014dea <__hexnan+0x7a>
 8014e66:	2300      	movs	r3, #0
 8014e68:	f844 3c04 	str.w	r3, [r4, #-4]
 8014e6c:	2501      	movs	r5, #1
 8014e6e:	3c04      	subs	r4, #4
 8014e70:	6822      	ldr	r2, [r4, #0]
 8014e72:	f000 000f 	and.w	r0, r0, #15
 8014e76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014e7a:	6020      	str	r0, [r4, #0]
 8014e7c:	e7b5      	b.n	8014dea <__hexnan+0x7a>
 8014e7e:	2508      	movs	r5, #8
 8014e80:	e7b3      	b.n	8014dea <__hexnan+0x7a>
 8014e82:	9b01      	ldr	r3, [sp, #4]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d0dd      	beq.n	8014e44 <__hexnan+0xd4>
 8014e88:	f1c3 0320 	rsb	r3, r3, #32
 8014e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8014e90:	40da      	lsrs	r2, r3
 8014e92:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014e96:	4013      	ands	r3, r2
 8014e98:	f846 3c04 	str.w	r3, [r6, #-4]
 8014e9c:	e7d2      	b.n	8014e44 <__hexnan+0xd4>
 8014e9e:	3f04      	subs	r7, #4
 8014ea0:	e7d0      	b.n	8014e44 <__hexnan+0xd4>
 8014ea2:	2004      	movs	r0, #4
 8014ea4:	e7d5      	b.n	8014e52 <__hexnan+0xe2>

08014ea6 <__ascii_mbtowc>:
 8014ea6:	b082      	sub	sp, #8
 8014ea8:	b901      	cbnz	r1, 8014eac <__ascii_mbtowc+0x6>
 8014eaa:	a901      	add	r1, sp, #4
 8014eac:	b142      	cbz	r2, 8014ec0 <__ascii_mbtowc+0x1a>
 8014eae:	b14b      	cbz	r3, 8014ec4 <__ascii_mbtowc+0x1e>
 8014eb0:	7813      	ldrb	r3, [r2, #0]
 8014eb2:	600b      	str	r3, [r1, #0]
 8014eb4:	7812      	ldrb	r2, [r2, #0]
 8014eb6:	1e10      	subs	r0, r2, #0
 8014eb8:	bf18      	it	ne
 8014eba:	2001      	movne	r0, #1
 8014ebc:	b002      	add	sp, #8
 8014ebe:	4770      	bx	lr
 8014ec0:	4610      	mov	r0, r2
 8014ec2:	e7fb      	b.n	8014ebc <__ascii_mbtowc+0x16>
 8014ec4:	f06f 0001 	mvn.w	r0, #1
 8014ec8:	e7f8      	b.n	8014ebc <__ascii_mbtowc+0x16>

08014eca <_realloc_r>:
 8014eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ece:	4680      	mov	r8, r0
 8014ed0:	4615      	mov	r5, r2
 8014ed2:	460c      	mov	r4, r1
 8014ed4:	b921      	cbnz	r1, 8014ee0 <_realloc_r+0x16>
 8014ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014eda:	4611      	mov	r1, r2
 8014edc:	f7fd baf0 	b.w	80124c0 <_malloc_r>
 8014ee0:	b92a      	cbnz	r2, 8014eee <_realloc_r+0x24>
 8014ee2:	f7fd fa79 	bl	80123d8 <_free_r>
 8014ee6:	2400      	movs	r4, #0
 8014ee8:	4620      	mov	r0, r4
 8014eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eee:	f000 f8b2 	bl	8015056 <_malloc_usable_size_r>
 8014ef2:	4285      	cmp	r5, r0
 8014ef4:	4606      	mov	r6, r0
 8014ef6:	d802      	bhi.n	8014efe <_realloc_r+0x34>
 8014ef8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014efc:	d8f4      	bhi.n	8014ee8 <_realloc_r+0x1e>
 8014efe:	4629      	mov	r1, r5
 8014f00:	4640      	mov	r0, r8
 8014f02:	f7fd fadd 	bl	80124c0 <_malloc_r>
 8014f06:	4607      	mov	r7, r0
 8014f08:	2800      	cmp	r0, #0
 8014f0a:	d0ec      	beq.n	8014ee6 <_realloc_r+0x1c>
 8014f0c:	42b5      	cmp	r5, r6
 8014f0e:	462a      	mov	r2, r5
 8014f10:	4621      	mov	r1, r4
 8014f12:	bf28      	it	cs
 8014f14:	4632      	movcs	r2, r6
 8014f16:	f7fc fbfc 	bl	8011712 <memcpy>
 8014f1a:	4621      	mov	r1, r4
 8014f1c:	4640      	mov	r0, r8
 8014f1e:	f7fd fa5b 	bl	80123d8 <_free_r>
 8014f22:	463c      	mov	r4, r7
 8014f24:	e7e0      	b.n	8014ee8 <_realloc_r+0x1e>
	...

08014f28 <_strtoul_l.constprop.0>:
 8014f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f2c:	4e34      	ldr	r6, [pc, #208]	@ (8015000 <_strtoul_l.constprop.0+0xd8>)
 8014f2e:	4686      	mov	lr, r0
 8014f30:	460d      	mov	r5, r1
 8014f32:	4628      	mov	r0, r5
 8014f34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f38:	5d37      	ldrb	r7, [r6, r4]
 8014f3a:	f017 0708 	ands.w	r7, r7, #8
 8014f3e:	d1f8      	bne.n	8014f32 <_strtoul_l.constprop.0+0xa>
 8014f40:	2c2d      	cmp	r4, #45	@ 0x2d
 8014f42:	d12f      	bne.n	8014fa4 <_strtoul_l.constprop.0+0x7c>
 8014f44:	782c      	ldrb	r4, [r5, #0]
 8014f46:	2701      	movs	r7, #1
 8014f48:	1c85      	adds	r5, r0, #2
 8014f4a:	f033 0010 	bics.w	r0, r3, #16
 8014f4e:	d109      	bne.n	8014f64 <_strtoul_l.constprop.0+0x3c>
 8014f50:	2c30      	cmp	r4, #48	@ 0x30
 8014f52:	d12c      	bne.n	8014fae <_strtoul_l.constprop.0+0x86>
 8014f54:	7828      	ldrb	r0, [r5, #0]
 8014f56:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8014f5a:	2858      	cmp	r0, #88	@ 0x58
 8014f5c:	d127      	bne.n	8014fae <_strtoul_l.constprop.0+0x86>
 8014f5e:	786c      	ldrb	r4, [r5, #1]
 8014f60:	2310      	movs	r3, #16
 8014f62:	3502      	adds	r5, #2
 8014f64:	f04f 38ff 	mov.w	r8, #4294967295
 8014f68:	2600      	movs	r6, #0
 8014f6a:	fbb8 f8f3 	udiv	r8, r8, r3
 8014f6e:	fb03 f908 	mul.w	r9, r3, r8
 8014f72:	ea6f 0909 	mvn.w	r9, r9
 8014f76:	4630      	mov	r0, r6
 8014f78:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8014f7c:	f1bc 0f09 	cmp.w	ip, #9
 8014f80:	d81c      	bhi.n	8014fbc <_strtoul_l.constprop.0+0x94>
 8014f82:	4664      	mov	r4, ip
 8014f84:	42a3      	cmp	r3, r4
 8014f86:	dd2a      	ble.n	8014fde <_strtoul_l.constprop.0+0xb6>
 8014f88:	f1b6 3fff 	cmp.w	r6, #4294967295
 8014f8c:	d007      	beq.n	8014f9e <_strtoul_l.constprop.0+0x76>
 8014f8e:	4580      	cmp	r8, r0
 8014f90:	d322      	bcc.n	8014fd8 <_strtoul_l.constprop.0+0xb0>
 8014f92:	d101      	bne.n	8014f98 <_strtoul_l.constprop.0+0x70>
 8014f94:	45a1      	cmp	r9, r4
 8014f96:	db1f      	blt.n	8014fd8 <_strtoul_l.constprop.0+0xb0>
 8014f98:	fb00 4003 	mla	r0, r0, r3, r4
 8014f9c:	2601      	movs	r6, #1
 8014f9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014fa2:	e7e9      	b.n	8014f78 <_strtoul_l.constprop.0+0x50>
 8014fa4:	2c2b      	cmp	r4, #43	@ 0x2b
 8014fa6:	bf04      	itt	eq
 8014fa8:	782c      	ldrbeq	r4, [r5, #0]
 8014faa:	1c85      	addeq	r5, r0, #2
 8014fac:	e7cd      	b.n	8014f4a <_strtoul_l.constprop.0+0x22>
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d1d8      	bne.n	8014f64 <_strtoul_l.constprop.0+0x3c>
 8014fb2:	2c30      	cmp	r4, #48	@ 0x30
 8014fb4:	bf0c      	ite	eq
 8014fb6:	2308      	moveq	r3, #8
 8014fb8:	230a      	movne	r3, #10
 8014fba:	e7d3      	b.n	8014f64 <_strtoul_l.constprop.0+0x3c>
 8014fbc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8014fc0:	f1bc 0f19 	cmp.w	ip, #25
 8014fc4:	d801      	bhi.n	8014fca <_strtoul_l.constprop.0+0xa2>
 8014fc6:	3c37      	subs	r4, #55	@ 0x37
 8014fc8:	e7dc      	b.n	8014f84 <_strtoul_l.constprop.0+0x5c>
 8014fca:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8014fce:	f1bc 0f19 	cmp.w	ip, #25
 8014fd2:	d804      	bhi.n	8014fde <_strtoul_l.constprop.0+0xb6>
 8014fd4:	3c57      	subs	r4, #87	@ 0x57
 8014fd6:	e7d5      	b.n	8014f84 <_strtoul_l.constprop.0+0x5c>
 8014fd8:	f04f 36ff 	mov.w	r6, #4294967295
 8014fdc:	e7df      	b.n	8014f9e <_strtoul_l.constprop.0+0x76>
 8014fde:	1c73      	adds	r3, r6, #1
 8014fe0:	d106      	bne.n	8014ff0 <_strtoul_l.constprop.0+0xc8>
 8014fe2:	2322      	movs	r3, #34	@ 0x22
 8014fe4:	f8ce 3000 	str.w	r3, [lr]
 8014fe8:	4630      	mov	r0, r6
 8014fea:	b932      	cbnz	r2, 8014ffa <_strtoul_l.constprop.0+0xd2>
 8014fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ff0:	b107      	cbz	r7, 8014ff4 <_strtoul_l.constprop.0+0xcc>
 8014ff2:	4240      	negs	r0, r0
 8014ff4:	2a00      	cmp	r2, #0
 8014ff6:	d0f9      	beq.n	8014fec <_strtoul_l.constprop.0+0xc4>
 8014ff8:	b106      	cbz	r6, 8014ffc <_strtoul_l.constprop.0+0xd4>
 8014ffa:	1e69      	subs	r1, r5, #1
 8014ffc:	6011      	str	r1, [r2, #0]
 8014ffe:	e7f5      	b.n	8014fec <_strtoul_l.constprop.0+0xc4>
 8015000:	08017019 	.word	0x08017019

08015004 <_strtoul_r>:
 8015004:	f7ff bf90 	b.w	8014f28 <_strtoul_l.constprop.0>

08015008 <__ascii_wctomb>:
 8015008:	4603      	mov	r3, r0
 801500a:	4608      	mov	r0, r1
 801500c:	b141      	cbz	r1, 8015020 <__ascii_wctomb+0x18>
 801500e:	2aff      	cmp	r2, #255	@ 0xff
 8015010:	d904      	bls.n	801501c <__ascii_wctomb+0x14>
 8015012:	228a      	movs	r2, #138	@ 0x8a
 8015014:	601a      	str	r2, [r3, #0]
 8015016:	f04f 30ff 	mov.w	r0, #4294967295
 801501a:	4770      	bx	lr
 801501c:	700a      	strb	r2, [r1, #0]
 801501e:	2001      	movs	r0, #1
 8015020:	4770      	bx	lr
	...

08015024 <fiprintf>:
 8015024:	b40e      	push	{r1, r2, r3}
 8015026:	b503      	push	{r0, r1, lr}
 8015028:	4601      	mov	r1, r0
 801502a:	ab03      	add	r3, sp, #12
 801502c:	4805      	ldr	r0, [pc, #20]	@ (8015044 <fiprintf+0x20>)
 801502e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015032:	6800      	ldr	r0, [r0, #0]
 8015034:	9301      	str	r3, [sp, #4]
 8015036:	f000 f83f 	bl	80150b8 <_vfiprintf_r>
 801503a:	b002      	add	sp, #8
 801503c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015040:	b003      	add	sp, #12
 8015042:	4770      	bx	lr
 8015044:	200001ac 	.word	0x200001ac

08015048 <abort>:
 8015048:	b508      	push	{r3, lr}
 801504a:	2006      	movs	r0, #6
 801504c:	f000 fa08 	bl	8015460 <raise>
 8015050:	2001      	movs	r0, #1
 8015052:	f7ee fee7 	bl	8003e24 <_exit>

08015056 <_malloc_usable_size_r>:
 8015056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801505a:	1f18      	subs	r0, r3, #4
 801505c:	2b00      	cmp	r3, #0
 801505e:	bfbc      	itt	lt
 8015060:	580b      	ldrlt	r3, [r1, r0]
 8015062:	18c0      	addlt	r0, r0, r3
 8015064:	4770      	bx	lr

08015066 <__sfputc_r>:
 8015066:	6893      	ldr	r3, [r2, #8]
 8015068:	3b01      	subs	r3, #1
 801506a:	2b00      	cmp	r3, #0
 801506c:	b410      	push	{r4}
 801506e:	6093      	str	r3, [r2, #8]
 8015070:	da08      	bge.n	8015084 <__sfputc_r+0x1e>
 8015072:	6994      	ldr	r4, [r2, #24]
 8015074:	42a3      	cmp	r3, r4
 8015076:	db01      	blt.n	801507c <__sfputc_r+0x16>
 8015078:	290a      	cmp	r1, #10
 801507a:	d103      	bne.n	8015084 <__sfputc_r+0x1e>
 801507c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015080:	f000 b932 	b.w	80152e8 <__swbuf_r>
 8015084:	6813      	ldr	r3, [r2, #0]
 8015086:	1c58      	adds	r0, r3, #1
 8015088:	6010      	str	r0, [r2, #0]
 801508a:	7019      	strb	r1, [r3, #0]
 801508c:	4608      	mov	r0, r1
 801508e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015092:	4770      	bx	lr

08015094 <__sfputs_r>:
 8015094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015096:	4606      	mov	r6, r0
 8015098:	460f      	mov	r7, r1
 801509a:	4614      	mov	r4, r2
 801509c:	18d5      	adds	r5, r2, r3
 801509e:	42ac      	cmp	r4, r5
 80150a0:	d101      	bne.n	80150a6 <__sfputs_r+0x12>
 80150a2:	2000      	movs	r0, #0
 80150a4:	e007      	b.n	80150b6 <__sfputs_r+0x22>
 80150a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150aa:	463a      	mov	r2, r7
 80150ac:	4630      	mov	r0, r6
 80150ae:	f7ff ffda 	bl	8015066 <__sfputc_r>
 80150b2:	1c43      	adds	r3, r0, #1
 80150b4:	d1f3      	bne.n	801509e <__sfputs_r+0xa>
 80150b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080150b8 <_vfiprintf_r>:
 80150b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150bc:	460d      	mov	r5, r1
 80150be:	b09d      	sub	sp, #116	@ 0x74
 80150c0:	4614      	mov	r4, r2
 80150c2:	4698      	mov	r8, r3
 80150c4:	4606      	mov	r6, r0
 80150c6:	b118      	cbz	r0, 80150d0 <_vfiprintf_r+0x18>
 80150c8:	6a03      	ldr	r3, [r0, #32]
 80150ca:	b90b      	cbnz	r3, 80150d0 <_vfiprintf_r+0x18>
 80150cc:	f7fc f9ca 	bl	8011464 <__sinit>
 80150d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80150d2:	07d9      	lsls	r1, r3, #31
 80150d4:	d405      	bmi.n	80150e2 <_vfiprintf_r+0x2a>
 80150d6:	89ab      	ldrh	r3, [r5, #12]
 80150d8:	059a      	lsls	r2, r3, #22
 80150da:	d402      	bmi.n	80150e2 <_vfiprintf_r+0x2a>
 80150dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80150de:	f7fc fb16 	bl	801170e <__retarget_lock_acquire_recursive>
 80150e2:	89ab      	ldrh	r3, [r5, #12]
 80150e4:	071b      	lsls	r3, r3, #28
 80150e6:	d501      	bpl.n	80150ec <_vfiprintf_r+0x34>
 80150e8:	692b      	ldr	r3, [r5, #16]
 80150ea:	b99b      	cbnz	r3, 8015114 <_vfiprintf_r+0x5c>
 80150ec:	4629      	mov	r1, r5
 80150ee:	4630      	mov	r0, r6
 80150f0:	f000 f938 	bl	8015364 <__swsetup_r>
 80150f4:	b170      	cbz	r0, 8015114 <_vfiprintf_r+0x5c>
 80150f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80150f8:	07dc      	lsls	r4, r3, #31
 80150fa:	d504      	bpl.n	8015106 <_vfiprintf_r+0x4e>
 80150fc:	f04f 30ff 	mov.w	r0, #4294967295
 8015100:	b01d      	add	sp, #116	@ 0x74
 8015102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015106:	89ab      	ldrh	r3, [r5, #12]
 8015108:	0598      	lsls	r0, r3, #22
 801510a:	d4f7      	bmi.n	80150fc <_vfiprintf_r+0x44>
 801510c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801510e:	f7fc faff 	bl	8011710 <__retarget_lock_release_recursive>
 8015112:	e7f3      	b.n	80150fc <_vfiprintf_r+0x44>
 8015114:	2300      	movs	r3, #0
 8015116:	9309      	str	r3, [sp, #36]	@ 0x24
 8015118:	2320      	movs	r3, #32
 801511a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801511e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015122:	2330      	movs	r3, #48	@ 0x30
 8015124:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80152d4 <_vfiprintf_r+0x21c>
 8015128:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801512c:	f04f 0901 	mov.w	r9, #1
 8015130:	4623      	mov	r3, r4
 8015132:	469a      	mov	sl, r3
 8015134:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015138:	b10a      	cbz	r2, 801513e <_vfiprintf_r+0x86>
 801513a:	2a25      	cmp	r2, #37	@ 0x25
 801513c:	d1f9      	bne.n	8015132 <_vfiprintf_r+0x7a>
 801513e:	ebba 0b04 	subs.w	fp, sl, r4
 8015142:	d00b      	beq.n	801515c <_vfiprintf_r+0xa4>
 8015144:	465b      	mov	r3, fp
 8015146:	4622      	mov	r2, r4
 8015148:	4629      	mov	r1, r5
 801514a:	4630      	mov	r0, r6
 801514c:	f7ff ffa2 	bl	8015094 <__sfputs_r>
 8015150:	3001      	adds	r0, #1
 8015152:	f000 80a7 	beq.w	80152a4 <_vfiprintf_r+0x1ec>
 8015156:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015158:	445a      	add	r2, fp
 801515a:	9209      	str	r2, [sp, #36]	@ 0x24
 801515c:	f89a 3000 	ldrb.w	r3, [sl]
 8015160:	2b00      	cmp	r3, #0
 8015162:	f000 809f 	beq.w	80152a4 <_vfiprintf_r+0x1ec>
 8015166:	2300      	movs	r3, #0
 8015168:	f04f 32ff 	mov.w	r2, #4294967295
 801516c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015170:	f10a 0a01 	add.w	sl, sl, #1
 8015174:	9304      	str	r3, [sp, #16]
 8015176:	9307      	str	r3, [sp, #28]
 8015178:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801517c:	931a      	str	r3, [sp, #104]	@ 0x68
 801517e:	4654      	mov	r4, sl
 8015180:	2205      	movs	r2, #5
 8015182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015186:	4853      	ldr	r0, [pc, #332]	@ (80152d4 <_vfiprintf_r+0x21c>)
 8015188:	f7eb f84a 	bl	8000220 <memchr>
 801518c:	9a04      	ldr	r2, [sp, #16]
 801518e:	b9d8      	cbnz	r0, 80151c8 <_vfiprintf_r+0x110>
 8015190:	06d1      	lsls	r1, r2, #27
 8015192:	bf44      	itt	mi
 8015194:	2320      	movmi	r3, #32
 8015196:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801519a:	0713      	lsls	r3, r2, #28
 801519c:	bf44      	itt	mi
 801519e:	232b      	movmi	r3, #43	@ 0x2b
 80151a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80151a4:	f89a 3000 	ldrb.w	r3, [sl]
 80151a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80151aa:	d015      	beq.n	80151d8 <_vfiprintf_r+0x120>
 80151ac:	9a07      	ldr	r2, [sp, #28]
 80151ae:	4654      	mov	r4, sl
 80151b0:	2000      	movs	r0, #0
 80151b2:	f04f 0c0a 	mov.w	ip, #10
 80151b6:	4621      	mov	r1, r4
 80151b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80151bc:	3b30      	subs	r3, #48	@ 0x30
 80151be:	2b09      	cmp	r3, #9
 80151c0:	d94b      	bls.n	801525a <_vfiprintf_r+0x1a2>
 80151c2:	b1b0      	cbz	r0, 80151f2 <_vfiprintf_r+0x13a>
 80151c4:	9207      	str	r2, [sp, #28]
 80151c6:	e014      	b.n	80151f2 <_vfiprintf_r+0x13a>
 80151c8:	eba0 0308 	sub.w	r3, r0, r8
 80151cc:	fa09 f303 	lsl.w	r3, r9, r3
 80151d0:	4313      	orrs	r3, r2
 80151d2:	9304      	str	r3, [sp, #16]
 80151d4:	46a2      	mov	sl, r4
 80151d6:	e7d2      	b.n	801517e <_vfiprintf_r+0xc6>
 80151d8:	9b03      	ldr	r3, [sp, #12]
 80151da:	1d19      	adds	r1, r3, #4
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	9103      	str	r1, [sp, #12]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	bfbb      	ittet	lt
 80151e4:	425b      	neglt	r3, r3
 80151e6:	f042 0202 	orrlt.w	r2, r2, #2
 80151ea:	9307      	strge	r3, [sp, #28]
 80151ec:	9307      	strlt	r3, [sp, #28]
 80151ee:	bfb8      	it	lt
 80151f0:	9204      	strlt	r2, [sp, #16]
 80151f2:	7823      	ldrb	r3, [r4, #0]
 80151f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80151f6:	d10a      	bne.n	801520e <_vfiprintf_r+0x156>
 80151f8:	7863      	ldrb	r3, [r4, #1]
 80151fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80151fc:	d132      	bne.n	8015264 <_vfiprintf_r+0x1ac>
 80151fe:	9b03      	ldr	r3, [sp, #12]
 8015200:	1d1a      	adds	r2, r3, #4
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	9203      	str	r2, [sp, #12]
 8015206:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801520a:	3402      	adds	r4, #2
 801520c:	9305      	str	r3, [sp, #20]
 801520e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80152e4 <_vfiprintf_r+0x22c>
 8015212:	7821      	ldrb	r1, [r4, #0]
 8015214:	2203      	movs	r2, #3
 8015216:	4650      	mov	r0, sl
 8015218:	f7eb f802 	bl	8000220 <memchr>
 801521c:	b138      	cbz	r0, 801522e <_vfiprintf_r+0x176>
 801521e:	9b04      	ldr	r3, [sp, #16]
 8015220:	eba0 000a 	sub.w	r0, r0, sl
 8015224:	2240      	movs	r2, #64	@ 0x40
 8015226:	4082      	lsls	r2, r0
 8015228:	4313      	orrs	r3, r2
 801522a:	3401      	adds	r4, #1
 801522c:	9304      	str	r3, [sp, #16]
 801522e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015232:	4829      	ldr	r0, [pc, #164]	@ (80152d8 <_vfiprintf_r+0x220>)
 8015234:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015238:	2206      	movs	r2, #6
 801523a:	f7ea fff1 	bl	8000220 <memchr>
 801523e:	2800      	cmp	r0, #0
 8015240:	d03f      	beq.n	80152c2 <_vfiprintf_r+0x20a>
 8015242:	4b26      	ldr	r3, [pc, #152]	@ (80152dc <_vfiprintf_r+0x224>)
 8015244:	bb1b      	cbnz	r3, 801528e <_vfiprintf_r+0x1d6>
 8015246:	9b03      	ldr	r3, [sp, #12]
 8015248:	3307      	adds	r3, #7
 801524a:	f023 0307 	bic.w	r3, r3, #7
 801524e:	3308      	adds	r3, #8
 8015250:	9303      	str	r3, [sp, #12]
 8015252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015254:	443b      	add	r3, r7
 8015256:	9309      	str	r3, [sp, #36]	@ 0x24
 8015258:	e76a      	b.n	8015130 <_vfiprintf_r+0x78>
 801525a:	fb0c 3202 	mla	r2, ip, r2, r3
 801525e:	460c      	mov	r4, r1
 8015260:	2001      	movs	r0, #1
 8015262:	e7a8      	b.n	80151b6 <_vfiprintf_r+0xfe>
 8015264:	2300      	movs	r3, #0
 8015266:	3401      	adds	r4, #1
 8015268:	9305      	str	r3, [sp, #20]
 801526a:	4619      	mov	r1, r3
 801526c:	f04f 0c0a 	mov.w	ip, #10
 8015270:	4620      	mov	r0, r4
 8015272:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015276:	3a30      	subs	r2, #48	@ 0x30
 8015278:	2a09      	cmp	r2, #9
 801527a:	d903      	bls.n	8015284 <_vfiprintf_r+0x1cc>
 801527c:	2b00      	cmp	r3, #0
 801527e:	d0c6      	beq.n	801520e <_vfiprintf_r+0x156>
 8015280:	9105      	str	r1, [sp, #20]
 8015282:	e7c4      	b.n	801520e <_vfiprintf_r+0x156>
 8015284:	fb0c 2101 	mla	r1, ip, r1, r2
 8015288:	4604      	mov	r4, r0
 801528a:	2301      	movs	r3, #1
 801528c:	e7f0      	b.n	8015270 <_vfiprintf_r+0x1b8>
 801528e:	ab03      	add	r3, sp, #12
 8015290:	9300      	str	r3, [sp, #0]
 8015292:	462a      	mov	r2, r5
 8015294:	4b12      	ldr	r3, [pc, #72]	@ (80152e0 <_vfiprintf_r+0x228>)
 8015296:	a904      	add	r1, sp, #16
 8015298:	4630      	mov	r0, r6
 801529a:	f7fb fa8b 	bl	80107b4 <_printf_float>
 801529e:	4607      	mov	r7, r0
 80152a0:	1c78      	adds	r0, r7, #1
 80152a2:	d1d6      	bne.n	8015252 <_vfiprintf_r+0x19a>
 80152a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80152a6:	07d9      	lsls	r1, r3, #31
 80152a8:	d405      	bmi.n	80152b6 <_vfiprintf_r+0x1fe>
 80152aa:	89ab      	ldrh	r3, [r5, #12]
 80152ac:	059a      	lsls	r2, r3, #22
 80152ae:	d402      	bmi.n	80152b6 <_vfiprintf_r+0x1fe>
 80152b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80152b2:	f7fc fa2d 	bl	8011710 <__retarget_lock_release_recursive>
 80152b6:	89ab      	ldrh	r3, [r5, #12]
 80152b8:	065b      	lsls	r3, r3, #25
 80152ba:	f53f af1f 	bmi.w	80150fc <_vfiprintf_r+0x44>
 80152be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80152c0:	e71e      	b.n	8015100 <_vfiprintf_r+0x48>
 80152c2:	ab03      	add	r3, sp, #12
 80152c4:	9300      	str	r3, [sp, #0]
 80152c6:	462a      	mov	r2, r5
 80152c8:	4b05      	ldr	r3, [pc, #20]	@ (80152e0 <_vfiprintf_r+0x228>)
 80152ca:	a904      	add	r1, sp, #16
 80152cc:	4630      	mov	r0, r6
 80152ce:	f7fb fd09 	bl	8010ce4 <_printf_i>
 80152d2:	e7e4      	b.n	801529e <_vfiprintf_r+0x1e6>
 80152d4:	08017119 	.word	0x08017119
 80152d8:	08017123 	.word	0x08017123
 80152dc:	080107b5 	.word	0x080107b5
 80152e0:	08015095 	.word	0x08015095
 80152e4:	0801711f 	.word	0x0801711f

080152e8 <__swbuf_r>:
 80152e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152ea:	460e      	mov	r6, r1
 80152ec:	4614      	mov	r4, r2
 80152ee:	4605      	mov	r5, r0
 80152f0:	b118      	cbz	r0, 80152fa <__swbuf_r+0x12>
 80152f2:	6a03      	ldr	r3, [r0, #32]
 80152f4:	b90b      	cbnz	r3, 80152fa <__swbuf_r+0x12>
 80152f6:	f7fc f8b5 	bl	8011464 <__sinit>
 80152fa:	69a3      	ldr	r3, [r4, #24]
 80152fc:	60a3      	str	r3, [r4, #8]
 80152fe:	89a3      	ldrh	r3, [r4, #12]
 8015300:	071a      	lsls	r2, r3, #28
 8015302:	d501      	bpl.n	8015308 <__swbuf_r+0x20>
 8015304:	6923      	ldr	r3, [r4, #16]
 8015306:	b943      	cbnz	r3, 801531a <__swbuf_r+0x32>
 8015308:	4621      	mov	r1, r4
 801530a:	4628      	mov	r0, r5
 801530c:	f000 f82a 	bl	8015364 <__swsetup_r>
 8015310:	b118      	cbz	r0, 801531a <__swbuf_r+0x32>
 8015312:	f04f 37ff 	mov.w	r7, #4294967295
 8015316:	4638      	mov	r0, r7
 8015318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801531a:	6823      	ldr	r3, [r4, #0]
 801531c:	6922      	ldr	r2, [r4, #16]
 801531e:	1a98      	subs	r0, r3, r2
 8015320:	6963      	ldr	r3, [r4, #20]
 8015322:	b2f6      	uxtb	r6, r6
 8015324:	4283      	cmp	r3, r0
 8015326:	4637      	mov	r7, r6
 8015328:	dc05      	bgt.n	8015336 <__swbuf_r+0x4e>
 801532a:	4621      	mov	r1, r4
 801532c:	4628      	mov	r0, r5
 801532e:	f7ff f97f 	bl	8014630 <_fflush_r>
 8015332:	2800      	cmp	r0, #0
 8015334:	d1ed      	bne.n	8015312 <__swbuf_r+0x2a>
 8015336:	68a3      	ldr	r3, [r4, #8]
 8015338:	3b01      	subs	r3, #1
 801533a:	60a3      	str	r3, [r4, #8]
 801533c:	6823      	ldr	r3, [r4, #0]
 801533e:	1c5a      	adds	r2, r3, #1
 8015340:	6022      	str	r2, [r4, #0]
 8015342:	701e      	strb	r6, [r3, #0]
 8015344:	6962      	ldr	r2, [r4, #20]
 8015346:	1c43      	adds	r3, r0, #1
 8015348:	429a      	cmp	r2, r3
 801534a:	d004      	beq.n	8015356 <__swbuf_r+0x6e>
 801534c:	89a3      	ldrh	r3, [r4, #12]
 801534e:	07db      	lsls	r3, r3, #31
 8015350:	d5e1      	bpl.n	8015316 <__swbuf_r+0x2e>
 8015352:	2e0a      	cmp	r6, #10
 8015354:	d1df      	bne.n	8015316 <__swbuf_r+0x2e>
 8015356:	4621      	mov	r1, r4
 8015358:	4628      	mov	r0, r5
 801535a:	f7ff f969 	bl	8014630 <_fflush_r>
 801535e:	2800      	cmp	r0, #0
 8015360:	d0d9      	beq.n	8015316 <__swbuf_r+0x2e>
 8015362:	e7d6      	b.n	8015312 <__swbuf_r+0x2a>

08015364 <__swsetup_r>:
 8015364:	b538      	push	{r3, r4, r5, lr}
 8015366:	4b29      	ldr	r3, [pc, #164]	@ (801540c <__swsetup_r+0xa8>)
 8015368:	4605      	mov	r5, r0
 801536a:	6818      	ldr	r0, [r3, #0]
 801536c:	460c      	mov	r4, r1
 801536e:	b118      	cbz	r0, 8015378 <__swsetup_r+0x14>
 8015370:	6a03      	ldr	r3, [r0, #32]
 8015372:	b90b      	cbnz	r3, 8015378 <__swsetup_r+0x14>
 8015374:	f7fc f876 	bl	8011464 <__sinit>
 8015378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801537c:	0719      	lsls	r1, r3, #28
 801537e:	d422      	bmi.n	80153c6 <__swsetup_r+0x62>
 8015380:	06da      	lsls	r2, r3, #27
 8015382:	d407      	bmi.n	8015394 <__swsetup_r+0x30>
 8015384:	2209      	movs	r2, #9
 8015386:	602a      	str	r2, [r5, #0]
 8015388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801538c:	81a3      	strh	r3, [r4, #12]
 801538e:	f04f 30ff 	mov.w	r0, #4294967295
 8015392:	e033      	b.n	80153fc <__swsetup_r+0x98>
 8015394:	0758      	lsls	r0, r3, #29
 8015396:	d512      	bpl.n	80153be <__swsetup_r+0x5a>
 8015398:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801539a:	b141      	cbz	r1, 80153ae <__swsetup_r+0x4a>
 801539c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80153a0:	4299      	cmp	r1, r3
 80153a2:	d002      	beq.n	80153aa <__swsetup_r+0x46>
 80153a4:	4628      	mov	r0, r5
 80153a6:	f7fd f817 	bl	80123d8 <_free_r>
 80153aa:	2300      	movs	r3, #0
 80153ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80153ae:	89a3      	ldrh	r3, [r4, #12]
 80153b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80153b4:	81a3      	strh	r3, [r4, #12]
 80153b6:	2300      	movs	r3, #0
 80153b8:	6063      	str	r3, [r4, #4]
 80153ba:	6923      	ldr	r3, [r4, #16]
 80153bc:	6023      	str	r3, [r4, #0]
 80153be:	89a3      	ldrh	r3, [r4, #12]
 80153c0:	f043 0308 	orr.w	r3, r3, #8
 80153c4:	81a3      	strh	r3, [r4, #12]
 80153c6:	6923      	ldr	r3, [r4, #16]
 80153c8:	b94b      	cbnz	r3, 80153de <__swsetup_r+0x7a>
 80153ca:	89a3      	ldrh	r3, [r4, #12]
 80153cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80153d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80153d4:	d003      	beq.n	80153de <__swsetup_r+0x7a>
 80153d6:	4621      	mov	r1, r4
 80153d8:	4628      	mov	r0, r5
 80153da:	f000 f883 	bl	80154e4 <__smakebuf_r>
 80153de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153e2:	f013 0201 	ands.w	r2, r3, #1
 80153e6:	d00a      	beq.n	80153fe <__swsetup_r+0x9a>
 80153e8:	2200      	movs	r2, #0
 80153ea:	60a2      	str	r2, [r4, #8]
 80153ec:	6962      	ldr	r2, [r4, #20]
 80153ee:	4252      	negs	r2, r2
 80153f0:	61a2      	str	r2, [r4, #24]
 80153f2:	6922      	ldr	r2, [r4, #16]
 80153f4:	b942      	cbnz	r2, 8015408 <__swsetup_r+0xa4>
 80153f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80153fa:	d1c5      	bne.n	8015388 <__swsetup_r+0x24>
 80153fc:	bd38      	pop	{r3, r4, r5, pc}
 80153fe:	0799      	lsls	r1, r3, #30
 8015400:	bf58      	it	pl
 8015402:	6962      	ldrpl	r2, [r4, #20]
 8015404:	60a2      	str	r2, [r4, #8]
 8015406:	e7f4      	b.n	80153f2 <__swsetup_r+0x8e>
 8015408:	2000      	movs	r0, #0
 801540a:	e7f7      	b.n	80153fc <__swsetup_r+0x98>
 801540c:	200001ac 	.word	0x200001ac

08015410 <_raise_r>:
 8015410:	291f      	cmp	r1, #31
 8015412:	b538      	push	{r3, r4, r5, lr}
 8015414:	4605      	mov	r5, r0
 8015416:	460c      	mov	r4, r1
 8015418:	d904      	bls.n	8015424 <_raise_r+0x14>
 801541a:	2316      	movs	r3, #22
 801541c:	6003      	str	r3, [r0, #0]
 801541e:	f04f 30ff 	mov.w	r0, #4294967295
 8015422:	bd38      	pop	{r3, r4, r5, pc}
 8015424:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015426:	b112      	cbz	r2, 801542e <_raise_r+0x1e>
 8015428:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801542c:	b94b      	cbnz	r3, 8015442 <_raise_r+0x32>
 801542e:	4628      	mov	r0, r5
 8015430:	f000 f830 	bl	8015494 <_getpid_r>
 8015434:	4622      	mov	r2, r4
 8015436:	4601      	mov	r1, r0
 8015438:	4628      	mov	r0, r5
 801543a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801543e:	f000 b817 	b.w	8015470 <_kill_r>
 8015442:	2b01      	cmp	r3, #1
 8015444:	d00a      	beq.n	801545c <_raise_r+0x4c>
 8015446:	1c59      	adds	r1, r3, #1
 8015448:	d103      	bne.n	8015452 <_raise_r+0x42>
 801544a:	2316      	movs	r3, #22
 801544c:	6003      	str	r3, [r0, #0]
 801544e:	2001      	movs	r0, #1
 8015450:	e7e7      	b.n	8015422 <_raise_r+0x12>
 8015452:	2100      	movs	r1, #0
 8015454:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015458:	4620      	mov	r0, r4
 801545a:	4798      	blx	r3
 801545c:	2000      	movs	r0, #0
 801545e:	e7e0      	b.n	8015422 <_raise_r+0x12>

08015460 <raise>:
 8015460:	4b02      	ldr	r3, [pc, #8]	@ (801546c <raise+0xc>)
 8015462:	4601      	mov	r1, r0
 8015464:	6818      	ldr	r0, [r3, #0]
 8015466:	f7ff bfd3 	b.w	8015410 <_raise_r>
 801546a:	bf00      	nop
 801546c:	200001ac 	.word	0x200001ac

08015470 <_kill_r>:
 8015470:	b538      	push	{r3, r4, r5, lr}
 8015472:	4d07      	ldr	r5, [pc, #28]	@ (8015490 <_kill_r+0x20>)
 8015474:	2300      	movs	r3, #0
 8015476:	4604      	mov	r4, r0
 8015478:	4608      	mov	r0, r1
 801547a:	4611      	mov	r1, r2
 801547c:	602b      	str	r3, [r5, #0]
 801547e:	f7ee fcc1 	bl	8003e04 <_kill>
 8015482:	1c43      	adds	r3, r0, #1
 8015484:	d102      	bne.n	801548c <_kill_r+0x1c>
 8015486:	682b      	ldr	r3, [r5, #0]
 8015488:	b103      	cbz	r3, 801548c <_kill_r+0x1c>
 801548a:	6023      	str	r3, [r4, #0]
 801548c:	bd38      	pop	{r3, r4, r5, pc}
 801548e:	bf00      	nop
 8015490:	20002668 	.word	0x20002668

08015494 <_getpid_r>:
 8015494:	f7ee bcae 	b.w	8003df4 <_getpid>

08015498 <__swhatbuf_r>:
 8015498:	b570      	push	{r4, r5, r6, lr}
 801549a:	460c      	mov	r4, r1
 801549c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154a0:	2900      	cmp	r1, #0
 80154a2:	b096      	sub	sp, #88	@ 0x58
 80154a4:	4615      	mov	r5, r2
 80154a6:	461e      	mov	r6, r3
 80154a8:	da0d      	bge.n	80154c6 <__swhatbuf_r+0x2e>
 80154aa:	89a3      	ldrh	r3, [r4, #12]
 80154ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80154b0:	f04f 0100 	mov.w	r1, #0
 80154b4:	bf14      	ite	ne
 80154b6:	2340      	movne	r3, #64	@ 0x40
 80154b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80154bc:	2000      	movs	r0, #0
 80154be:	6031      	str	r1, [r6, #0]
 80154c0:	602b      	str	r3, [r5, #0]
 80154c2:	b016      	add	sp, #88	@ 0x58
 80154c4:	bd70      	pop	{r4, r5, r6, pc}
 80154c6:	466a      	mov	r2, sp
 80154c8:	f000 f848 	bl	801555c <_fstat_r>
 80154cc:	2800      	cmp	r0, #0
 80154ce:	dbec      	blt.n	80154aa <__swhatbuf_r+0x12>
 80154d0:	9901      	ldr	r1, [sp, #4]
 80154d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80154d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80154da:	4259      	negs	r1, r3
 80154dc:	4159      	adcs	r1, r3
 80154de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80154e2:	e7eb      	b.n	80154bc <__swhatbuf_r+0x24>

080154e4 <__smakebuf_r>:
 80154e4:	898b      	ldrh	r3, [r1, #12]
 80154e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80154e8:	079d      	lsls	r5, r3, #30
 80154ea:	4606      	mov	r6, r0
 80154ec:	460c      	mov	r4, r1
 80154ee:	d507      	bpl.n	8015500 <__smakebuf_r+0x1c>
 80154f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80154f4:	6023      	str	r3, [r4, #0]
 80154f6:	6123      	str	r3, [r4, #16]
 80154f8:	2301      	movs	r3, #1
 80154fa:	6163      	str	r3, [r4, #20]
 80154fc:	b003      	add	sp, #12
 80154fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015500:	ab01      	add	r3, sp, #4
 8015502:	466a      	mov	r2, sp
 8015504:	f7ff ffc8 	bl	8015498 <__swhatbuf_r>
 8015508:	9f00      	ldr	r7, [sp, #0]
 801550a:	4605      	mov	r5, r0
 801550c:	4639      	mov	r1, r7
 801550e:	4630      	mov	r0, r6
 8015510:	f7fc ffd6 	bl	80124c0 <_malloc_r>
 8015514:	b948      	cbnz	r0, 801552a <__smakebuf_r+0x46>
 8015516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801551a:	059a      	lsls	r2, r3, #22
 801551c:	d4ee      	bmi.n	80154fc <__smakebuf_r+0x18>
 801551e:	f023 0303 	bic.w	r3, r3, #3
 8015522:	f043 0302 	orr.w	r3, r3, #2
 8015526:	81a3      	strh	r3, [r4, #12]
 8015528:	e7e2      	b.n	80154f0 <__smakebuf_r+0xc>
 801552a:	89a3      	ldrh	r3, [r4, #12]
 801552c:	6020      	str	r0, [r4, #0]
 801552e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015532:	81a3      	strh	r3, [r4, #12]
 8015534:	9b01      	ldr	r3, [sp, #4]
 8015536:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801553a:	b15b      	cbz	r3, 8015554 <__smakebuf_r+0x70>
 801553c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015540:	4630      	mov	r0, r6
 8015542:	f000 f81d 	bl	8015580 <_isatty_r>
 8015546:	b128      	cbz	r0, 8015554 <__smakebuf_r+0x70>
 8015548:	89a3      	ldrh	r3, [r4, #12]
 801554a:	f023 0303 	bic.w	r3, r3, #3
 801554e:	f043 0301 	orr.w	r3, r3, #1
 8015552:	81a3      	strh	r3, [r4, #12]
 8015554:	89a3      	ldrh	r3, [r4, #12]
 8015556:	431d      	orrs	r5, r3
 8015558:	81a5      	strh	r5, [r4, #12]
 801555a:	e7cf      	b.n	80154fc <__smakebuf_r+0x18>

0801555c <_fstat_r>:
 801555c:	b538      	push	{r3, r4, r5, lr}
 801555e:	4d07      	ldr	r5, [pc, #28]	@ (801557c <_fstat_r+0x20>)
 8015560:	2300      	movs	r3, #0
 8015562:	4604      	mov	r4, r0
 8015564:	4608      	mov	r0, r1
 8015566:	4611      	mov	r1, r2
 8015568:	602b      	str	r3, [r5, #0]
 801556a:	f7ee fcab 	bl	8003ec4 <_fstat>
 801556e:	1c43      	adds	r3, r0, #1
 8015570:	d102      	bne.n	8015578 <_fstat_r+0x1c>
 8015572:	682b      	ldr	r3, [r5, #0]
 8015574:	b103      	cbz	r3, 8015578 <_fstat_r+0x1c>
 8015576:	6023      	str	r3, [r4, #0]
 8015578:	bd38      	pop	{r3, r4, r5, pc}
 801557a:	bf00      	nop
 801557c:	20002668 	.word	0x20002668

08015580 <_isatty_r>:
 8015580:	b538      	push	{r3, r4, r5, lr}
 8015582:	4d06      	ldr	r5, [pc, #24]	@ (801559c <_isatty_r+0x1c>)
 8015584:	2300      	movs	r3, #0
 8015586:	4604      	mov	r4, r0
 8015588:	4608      	mov	r0, r1
 801558a:	602b      	str	r3, [r5, #0]
 801558c:	f7ee fcaa 	bl	8003ee4 <_isatty>
 8015590:	1c43      	adds	r3, r0, #1
 8015592:	d102      	bne.n	801559a <_isatty_r+0x1a>
 8015594:	682b      	ldr	r3, [r5, #0]
 8015596:	b103      	cbz	r3, 801559a <_isatty_r+0x1a>
 8015598:	6023      	str	r3, [r4, #0]
 801559a:	bd38      	pop	{r3, r4, r5, pc}
 801559c:	20002668 	.word	0x20002668

080155a0 <acos>:
 80155a0:	b538      	push	{r3, r4, r5, lr}
 80155a2:	ed2d 8b02 	vpush	{d8}
 80155a6:	ec55 4b10 	vmov	r4, r5, d0
 80155aa:	f000 f9b9 	bl	8015920 <__ieee754_acos>
 80155ae:	4622      	mov	r2, r4
 80155b0:	462b      	mov	r3, r5
 80155b2:	4620      	mov	r0, r4
 80155b4:	4629      	mov	r1, r5
 80155b6:	eeb0 8a40 	vmov.f32	s16, s0
 80155ba:	eef0 8a60 	vmov.f32	s17, s1
 80155be:	f7eb fadd 	bl	8000b7c <__aeabi_dcmpun>
 80155c2:	b9a8      	cbnz	r0, 80155f0 <acos+0x50>
 80155c4:	ec45 4b10 	vmov	d0, r4, r5
 80155c8:	f000 f8ba 	bl	8015740 <fabs>
 80155cc:	4b0c      	ldr	r3, [pc, #48]	@ (8015600 <acos+0x60>)
 80155ce:	ec51 0b10 	vmov	r0, r1, d0
 80155d2:	2200      	movs	r2, #0
 80155d4:	f7eb fac8 	bl	8000b68 <__aeabi_dcmpgt>
 80155d8:	b150      	cbz	r0, 80155f0 <acos+0x50>
 80155da:	f7fc f86d 	bl	80116b8 <__errno>
 80155de:	ecbd 8b02 	vpop	{d8}
 80155e2:	2321      	movs	r3, #33	@ 0x21
 80155e4:	6003      	str	r3, [r0, #0]
 80155e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80155ea:	4806      	ldr	r0, [pc, #24]	@ (8015604 <acos+0x64>)
 80155ec:	f7ff b8e8 	b.w	80147c0 <nan>
 80155f0:	eeb0 0a48 	vmov.f32	s0, s16
 80155f4:	eef0 0a68 	vmov.f32	s1, s17
 80155f8:	ecbd 8b02 	vpop	{d8}
 80155fc:	bd38      	pop	{r3, r4, r5, pc}
 80155fe:	bf00      	nop
 8015600:	3ff00000 	.word	0x3ff00000
 8015604:	08017188 	.word	0x08017188

08015608 <pow>:
 8015608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801560a:	ed2d 8b02 	vpush	{d8}
 801560e:	eeb0 8a40 	vmov.f32	s16, s0
 8015612:	eef0 8a60 	vmov.f32	s17, s1
 8015616:	ec55 4b11 	vmov	r4, r5, d1
 801561a:	f000 fbdd 	bl	8015dd8 <__ieee754_pow>
 801561e:	4622      	mov	r2, r4
 8015620:	462b      	mov	r3, r5
 8015622:	4620      	mov	r0, r4
 8015624:	4629      	mov	r1, r5
 8015626:	ec57 6b10 	vmov	r6, r7, d0
 801562a:	f7eb faa7 	bl	8000b7c <__aeabi_dcmpun>
 801562e:	2800      	cmp	r0, #0
 8015630:	d13b      	bne.n	80156aa <pow+0xa2>
 8015632:	ec51 0b18 	vmov	r0, r1, d8
 8015636:	2200      	movs	r2, #0
 8015638:	2300      	movs	r3, #0
 801563a:	f7eb fa6d 	bl	8000b18 <__aeabi_dcmpeq>
 801563e:	b1b8      	cbz	r0, 8015670 <pow+0x68>
 8015640:	2200      	movs	r2, #0
 8015642:	2300      	movs	r3, #0
 8015644:	4620      	mov	r0, r4
 8015646:	4629      	mov	r1, r5
 8015648:	f7eb fa66 	bl	8000b18 <__aeabi_dcmpeq>
 801564c:	2800      	cmp	r0, #0
 801564e:	d146      	bne.n	80156de <pow+0xd6>
 8015650:	ec45 4b10 	vmov	d0, r4, r5
 8015654:	f000 f87c 	bl	8015750 <finite>
 8015658:	b338      	cbz	r0, 80156aa <pow+0xa2>
 801565a:	2200      	movs	r2, #0
 801565c:	2300      	movs	r3, #0
 801565e:	4620      	mov	r0, r4
 8015660:	4629      	mov	r1, r5
 8015662:	f7eb fa63 	bl	8000b2c <__aeabi_dcmplt>
 8015666:	b300      	cbz	r0, 80156aa <pow+0xa2>
 8015668:	f7fc f826 	bl	80116b8 <__errno>
 801566c:	2322      	movs	r3, #34	@ 0x22
 801566e:	e01b      	b.n	80156a8 <pow+0xa0>
 8015670:	ec47 6b10 	vmov	d0, r6, r7
 8015674:	f000 f86c 	bl	8015750 <finite>
 8015678:	b9e0      	cbnz	r0, 80156b4 <pow+0xac>
 801567a:	eeb0 0a48 	vmov.f32	s0, s16
 801567e:	eef0 0a68 	vmov.f32	s1, s17
 8015682:	f000 f865 	bl	8015750 <finite>
 8015686:	b1a8      	cbz	r0, 80156b4 <pow+0xac>
 8015688:	ec45 4b10 	vmov	d0, r4, r5
 801568c:	f000 f860 	bl	8015750 <finite>
 8015690:	b180      	cbz	r0, 80156b4 <pow+0xac>
 8015692:	4632      	mov	r2, r6
 8015694:	463b      	mov	r3, r7
 8015696:	4630      	mov	r0, r6
 8015698:	4639      	mov	r1, r7
 801569a:	f7eb fa6f 	bl	8000b7c <__aeabi_dcmpun>
 801569e:	2800      	cmp	r0, #0
 80156a0:	d0e2      	beq.n	8015668 <pow+0x60>
 80156a2:	f7fc f809 	bl	80116b8 <__errno>
 80156a6:	2321      	movs	r3, #33	@ 0x21
 80156a8:	6003      	str	r3, [r0, #0]
 80156aa:	ecbd 8b02 	vpop	{d8}
 80156ae:	ec47 6b10 	vmov	d0, r6, r7
 80156b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156b4:	2200      	movs	r2, #0
 80156b6:	2300      	movs	r3, #0
 80156b8:	4630      	mov	r0, r6
 80156ba:	4639      	mov	r1, r7
 80156bc:	f7eb fa2c 	bl	8000b18 <__aeabi_dcmpeq>
 80156c0:	2800      	cmp	r0, #0
 80156c2:	d0f2      	beq.n	80156aa <pow+0xa2>
 80156c4:	eeb0 0a48 	vmov.f32	s0, s16
 80156c8:	eef0 0a68 	vmov.f32	s1, s17
 80156cc:	f000 f840 	bl	8015750 <finite>
 80156d0:	2800      	cmp	r0, #0
 80156d2:	d0ea      	beq.n	80156aa <pow+0xa2>
 80156d4:	ec45 4b10 	vmov	d0, r4, r5
 80156d8:	f000 f83a 	bl	8015750 <finite>
 80156dc:	e7c3      	b.n	8015666 <pow+0x5e>
 80156de:	4f01      	ldr	r7, [pc, #4]	@ (80156e4 <pow+0xdc>)
 80156e0:	2600      	movs	r6, #0
 80156e2:	e7e2      	b.n	80156aa <pow+0xa2>
 80156e4:	3ff00000 	.word	0x3ff00000

080156e8 <sqrt>:
 80156e8:	b538      	push	{r3, r4, r5, lr}
 80156ea:	ed2d 8b02 	vpush	{d8}
 80156ee:	ec55 4b10 	vmov	r4, r5, d0
 80156f2:	f000 f839 	bl	8015768 <__ieee754_sqrt>
 80156f6:	4622      	mov	r2, r4
 80156f8:	462b      	mov	r3, r5
 80156fa:	4620      	mov	r0, r4
 80156fc:	4629      	mov	r1, r5
 80156fe:	eeb0 8a40 	vmov.f32	s16, s0
 8015702:	eef0 8a60 	vmov.f32	s17, s1
 8015706:	f7eb fa39 	bl	8000b7c <__aeabi_dcmpun>
 801570a:	b990      	cbnz	r0, 8015732 <sqrt+0x4a>
 801570c:	2200      	movs	r2, #0
 801570e:	2300      	movs	r3, #0
 8015710:	4620      	mov	r0, r4
 8015712:	4629      	mov	r1, r5
 8015714:	f7eb fa0a 	bl	8000b2c <__aeabi_dcmplt>
 8015718:	b158      	cbz	r0, 8015732 <sqrt+0x4a>
 801571a:	f7fb ffcd 	bl	80116b8 <__errno>
 801571e:	2321      	movs	r3, #33	@ 0x21
 8015720:	6003      	str	r3, [r0, #0]
 8015722:	2200      	movs	r2, #0
 8015724:	2300      	movs	r3, #0
 8015726:	4610      	mov	r0, r2
 8015728:	4619      	mov	r1, r3
 801572a:	f7eb f8b7 	bl	800089c <__aeabi_ddiv>
 801572e:	ec41 0b18 	vmov	d8, r0, r1
 8015732:	eeb0 0a48 	vmov.f32	s0, s16
 8015736:	eef0 0a68 	vmov.f32	s1, s17
 801573a:	ecbd 8b02 	vpop	{d8}
 801573e:	bd38      	pop	{r3, r4, r5, pc}

08015740 <fabs>:
 8015740:	ec51 0b10 	vmov	r0, r1, d0
 8015744:	4602      	mov	r2, r0
 8015746:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801574a:	ec43 2b10 	vmov	d0, r2, r3
 801574e:	4770      	bx	lr

08015750 <finite>:
 8015750:	b082      	sub	sp, #8
 8015752:	ed8d 0b00 	vstr	d0, [sp]
 8015756:	9801      	ldr	r0, [sp, #4]
 8015758:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801575c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8015760:	0fc0      	lsrs	r0, r0, #31
 8015762:	b002      	add	sp, #8
 8015764:	4770      	bx	lr
	...

08015768 <__ieee754_sqrt>:
 8015768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801576c:	4a68      	ldr	r2, [pc, #416]	@ (8015910 <__ieee754_sqrt+0x1a8>)
 801576e:	ec55 4b10 	vmov	r4, r5, d0
 8015772:	43aa      	bics	r2, r5
 8015774:	462b      	mov	r3, r5
 8015776:	4621      	mov	r1, r4
 8015778:	d110      	bne.n	801579c <__ieee754_sqrt+0x34>
 801577a:	4622      	mov	r2, r4
 801577c:	4620      	mov	r0, r4
 801577e:	4629      	mov	r1, r5
 8015780:	f7ea ff62 	bl	8000648 <__aeabi_dmul>
 8015784:	4602      	mov	r2, r0
 8015786:	460b      	mov	r3, r1
 8015788:	4620      	mov	r0, r4
 801578a:	4629      	mov	r1, r5
 801578c:	f7ea fda6 	bl	80002dc <__adddf3>
 8015790:	4604      	mov	r4, r0
 8015792:	460d      	mov	r5, r1
 8015794:	ec45 4b10 	vmov	d0, r4, r5
 8015798:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801579c:	2d00      	cmp	r5, #0
 801579e:	dc0e      	bgt.n	80157be <__ieee754_sqrt+0x56>
 80157a0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80157a4:	4322      	orrs	r2, r4
 80157a6:	d0f5      	beq.n	8015794 <__ieee754_sqrt+0x2c>
 80157a8:	b19d      	cbz	r5, 80157d2 <__ieee754_sqrt+0x6a>
 80157aa:	4622      	mov	r2, r4
 80157ac:	4620      	mov	r0, r4
 80157ae:	4629      	mov	r1, r5
 80157b0:	f7ea fd92 	bl	80002d8 <__aeabi_dsub>
 80157b4:	4602      	mov	r2, r0
 80157b6:	460b      	mov	r3, r1
 80157b8:	f7eb f870 	bl	800089c <__aeabi_ddiv>
 80157bc:	e7e8      	b.n	8015790 <__ieee754_sqrt+0x28>
 80157be:	152a      	asrs	r2, r5, #20
 80157c0:	d115      	bne.n	80157ee <__ieee754_sqrt+0x86>
 80157c2:	2000      	movs	r0, #0
 80157c4:	e009      	b.n	80157da <__ieee754_sqrt+0x72>
 80157c6:	0acb      	lsrs	r3, r1, #11
 80157c8:	3a15      	subs	r2, #21
 80157ca:	0549      	lsls	r1, r1, #21
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d0fa      	beq.n	80157c6 <__ieee754_sqrt+0x5e>
 80157d0:	e7f7      	b.n	80157c2 <__ieee754_sqrt+0x5a>
 80157d2:	462a      	mov	r2, r5
 80157d4:	e7fa      	b.n	80157cc <__ieee754_sqrt+0x64>
 80157d6:	005b      	lsls	r3, r3, #1
 80157d8:	3001      	adds	r0, #1
 80157da:	02dc      	lsls	r4, r3, #11
 80157dc:	d5fb      	bpl.n	80157d6 <__ieee754_sqrt+0x6e>
 80157de:	1e44      	subs	r4, r0, #1
 80157e0:	1b12      	subs	r2, r2, r4
 80157e2:	f1c0 0420 	rsb	r4, r0, #32
 80157e6:	fa21 f404 	lsr.w	r4, r1, r4
 80157ea:	4323      	orrs	r3, r4
 80157ec:	4081      	lsls	r1, r0
 80157ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80157f2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80157f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80157fa:	07d2      	lsls	r2, r2, #31
 80157fc:	bf5c      	itt	pl
 80157fe:	005b      	lslpl	r3, r3, #1
 8015800:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8015804:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015808:	bf58      	it	pl
 801580a:	0049      	lslpl	r1, r1, #1
 801580c:	2600      	movs	r6, #0
 801580e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8015812:	106d      	asrs	r5, r5, #1
 8015814:	0049      	lsls	r1, r1, #1
 8015816:	2016      	movs	r0, #22
 8015818:	4632      	mov	r2, r6
 801581a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801581e:	1917      	adds	r7, r2, r4
 8015820:	429f      	cmp	r7, r3
 8015822:	bfde      	ittt	le
 8015824:	193a      	addle	r2, r7, r4
 8015826:	1bdb      	suble	r3, r3, r7
 8015828:	1936      	addle	r6, r6, r4
 801582a:	0fcf      	lsrs	r7, r1, #31
 801582c:	3801      	subs	r0, #1
 801582e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8015832:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015836:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801583a:	d1f0      	bne.n	801581e <__ieee754_sqrt+0xb6>
 801583c:	4604      	mov	r4, r0
 801583e:	2720      	movs	r7, #32
 8015840:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8015844:	429a      	cmp	r2, r3
 8015846:	eb00 0e0c 	add.w	lr, r0, ip
 801584a:	db02      	blt.n	8015852 <__ieee754_sqrt+0xea>
 801584c:	d113      	bne.n	8015876 <__ieee754_sqrt+0x10e>
 801584e:	458e      	cmp	lr, r1
 8015850:	d811      	bhi.n	8015876 <__ieee754_sqrt+0x10e>
 8015852:	f1be 0f00 	cmp.w	lr, #0
 8015856:	eb0e 000c 	add.w	r0, lr, ip
 801585a:	da42      	bge.n	80158e2 <__ieee754_sqrt+0x17a>
 801585c:	2800      	cmp	r0, #0
 801585e:	db40      	blt.n	80158e2 <__ieee754_sqrt+0x17a>
 8015860:	f102 0801 	add.w	r8, r2, #1
 8015864:	1a9b      	subs	r3, r3, r2
 8015866:	458e      	cmp	lr, r1
 8015868:	bf88      	it	hi
 801586a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801586e:	eba1 010e 	sub.w	r1, r1, lr
 8015872:	4464      	add	r4, ip
 8015874:	4642      	mov	r2, r8
 8015876:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801587a:	3f01      	subs	r7, #1
 801587c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8015880:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015884:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8015888:	d1dc      	bne.n	8015844 <__ieee754_sqrt+0xdc>
 801588a:	4319      	orrs	r1, r3
 801588c:	d01b      	beq.n	80158c6 <__ieee754_sqrt+0x15e>
 801588e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8015914 <__ieee754_sqrt+0x1ac>
 8015892:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8015918 <__ieee754_sqrt+0x1b0>
 8015896:	e9da 0100 	ldrd	r0, r1, [sl]
 801589a:	e9db 2300 	ldrd	r2, r3, [fp]
 801589e:	f7ea fd1b 	bl	80002d8 <__aeabi_dsub>
 80158a2:	e9da 8900 	ldrd	r8, r9, [sl]
 80158a6:	4602      	mov	r2, r0
 80158a8:	460b      	mov	r3, r1
 80158aa:	4640      	mov	r0, r8
 80158ac:	4649      	mov	r1, r9
 80158ae:	f7eb f947 	bl	8000b40 <__aeabi_dcmple>
 80158b2:	b140      	cbz	r0, 80158c6 <__ieee754_sqrt+0x15e>
 80158b4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80158b8:	e9da 0100 	ldrd	r0, r1, [sl]
 80158bc:	e9db 2300 	ldrd	r2, r3, [fp]
 80158c0:	d111      	bne.n	80158e6 <__ieee754_sqrt+0x17e>
 80158c2:	3601      	adds	r6, #1
 80158c4:	463c      	mov	r4, r7
 80158c6:	1072      	asrs	r2, r6, #1
 80158c8:	0863      	lsrs	r3, r4, #1
 80158ca:	07f1      	lsls	r1, r6, #31
 80158cc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80158d0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80158d4:	bf48      	it	mi
 80158d6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80158da:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80158de:	4618      	mov	r0, r3
 80158e0:	e756      	b.n	8015790 <__ieee754_sqrt+0x28>
 80158e2:	4690      	mov	r8, r2
 80158e4:	e7be      	b.n	8015864 <__ieee754_sqrt+0xfc>
 80158e6:	f7ea fcf9 	bl	80002dc <__adddf3>
 80158ea:	e9da 8900 	ldrd	r8, r9, [sl]
 80158ee:	4602      	mov	r2, r0
 80158f0:	460b      	mov	r3, r1
 80158f2:	4640      	mov	r0, r8
 80158f4:	4649      	mov	r1, r9
 80158f6:	f7eb f919 	bl	8000b2c <__aeabi_dcmplt>
 80158fa:	b120      	cbz	r0, 8015906 <__ieee754_sqrt+0x19e>
 80158fc:	1ca0      	adds	r0, r4, #2
 80158fe:	bf08      	it	eq
 8015900:	3601      	addeq	r6, #1
 8015902:	3402      	adds	r4, #2
 8015904:	e7df      	b.n	80158c6 <__ieee754_sqrt+0x15e>
 8015906:	1c63      	adds	r3, r4, #1
 8015908:	f023 0401 	bic.w	r4, r3, #1
 801590c:	e7db      	b.n	80158c6 <__ieee754_sqrt+0x15e>
 801590e:	bf00      	nop
 8015910:	7ff00000 	.word	0x7ff00000
 8015914:	20000370 	.word	0x20000370
 8015918:	20000368 	.word	0x20000368
 801591c:	00000000 	.word	0x00000000

08015920 <__ieee754_acos>:
 8015920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015924:	ec55 4b10 	vmov	r4, r5, d0
 8015928:	49b7      	ldr	r1, [pc, #732]	@ (8015c08 <__ieee754_acos+0x2e8>)
 801592a:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801592e:	428b      	cmp	r3, r1
 8015930:	d919      	bls.n	8015966 <__ieee754_acos+0x46>
 8015932:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8015936:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 801593a:	4323      	orrs	r3, r4
 801593c:	d106      	bne.n	801594c <__ieee754_acos+0x2c>
 801593e:	2d00      	cmp	r5, #0
 8015940:	f340 8210 	ble.w	8015d64 <__ieee754_acos+0x444>
 8015944:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8015b98 <__ieee754_acos+0x278>
 8015948:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801594c:	4622      	mov	r2, r4
 801594e:	462b      	mov	r3, r5
 8015950:	4620      	mov	r0, r4
 8015952:	4629      	mov	r1, r5
 8015954:	f7ea fcc0 	bl	80002d8 <__aeabi_dsub>
 8015958:	4602      	mov	r2, r0
 801595a:	460b      	mov	r3, r1
 801595c:	f7ea ff9e 	bl	800089c <__aeabi_ddiv>
 8015960:	ec41 0b10 	vmov	d0, r0, r1
 8015964:	e7f0      	b.n	8015948 <__ieee754_acos+0x28>
 8015966:	49a9      	ldr	r1, [pc, #676]	@ (8015c0c <__ieee754_acos+0x2ec>)
 8015968:	428b      	cmp	r3, r1
 801596a:	f200 8085 	bhi.w	8015a78 <__ieee754_acos+0x158>
 801596e:	4aa8      	ldr	r2, [pc, #672]	@ (8015c10 <__ieee754_acos+0x2f0>)
 8015970:	4293      	cmp	r3, r2
 8015972:	f240 81fa 	bls.w	8015d6a <__ieee754_acos+0x44a>
 8015976:	4622      	mov	r2, r4
 8015978:	462b      	mov	r3, r5
 801597a:	4620      	mov	r0, r4
 801597c:	4629      	mov	r1, r5
 801597e:	f7ea fe63 	bl	8000648 <__aeabi_dmul>
 8015982:	a387      	add	r3, pc, #540	@ (adr r3, 8015ba0 <__ieee754_acos+0x280>)
 8015984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015988:	4606      	mov	r6, r0
 801598a:	460f      	mov	r7, r1
 801598c:	f7ea fe5c 	bl	8000648 <__aeabi_dmul>
 8015990:	a385      	add	r3, pc, #532	@ (adr r3, 8015ba8 <__ieee754_acos+0x288>)
 8015992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015996:	f7ea fca1 	bl	80002dc <__adddf3>
 801599a:	4632      	mov	r2, r6
 801599c:	463b      	mov	r3, r7
 801599e:	f7ea fe53 	bl	8000648 <__aeabi_dmul>
 80159a2:	a383      	add	r3, pc, #524	@ (adr r3, 8015bb0 <__ieee754_acos+0x290>)
 80159a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159a8:	f7ea fc96 	bl	80002d8 <__aeabi_dsub>
 80159ac:	4632      	mov	r2, r6
 80159ae:	463b      	mov	r3, r7
 80159b0:	f7ea fe4a 	bl	8000648 <__aeabi_dmul>
 80159b4:	a380      	add	r3, pc, #512	@ (adr r3, 8015bb8 <__ieee754_acos+0x298>)
 80159b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ba:	f7ea fc8f 	bl	80002dc <__adddf3>
 80159be:	4632      	mov	r2, r6
 80159c0:	463b      	mov	r3, r7
 80159c2:	f7ea fe41 	bl	8000648 <__aeabi_dmul>
 80159c6:	a37e      	add	r3, pc, #504	@ (adr r3, 8015bc0 <__ieee754_acos+0x2a0>)
 80159c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159cc:	f7ea fc84 	bl	80002d8 <__aeabi_dsub>
 80159d0:	4632      	mov	r2, r6
 80159d2:	463b      	mov	r3, r7
 80159d4:	f7ea fe38 	bl	8000648 <__aeabi_dmul>
 80159d8:	a37b      	add	r3, pc, #492	@ (adr r3, 8015bc8 <__ieee754_acos+0x2a8>)
 80159da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159de:	f7ea fc7d 	bl	80002dc <__adddf3>
 80159e2:	4632      	mov	r2, r6
 80159e4:	463b      	mov	r3, r7
 80159e6:	f7ea fe2f 	bl	8000648 <__aeabi_dmul>
 80159ea:	a379      	add	r3, pc, #484	@ (adr r3, 8015bd0 <__ieee754_acos+0x2b0>)
 80159ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159f0:	4680      	mov	r8, r0
 80159f2:	4689      	mov	r9, r1
 80159f4:	4630      	mov	r0, r6
 80159f6:	4639      	mov	r1, r7
 80159f8:	f7ea fe26 	bl	8000648 <__aeabi_dmul>
 80159fc:	a376      	add	r3, pc, #472	@ (adr r3, 8015bd8 <__ieee754_acos+0x2b8>)
 80159fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a02:	f7ea fc69 	bl	80002d8 <__aeabi_dsub>
 8015a06:	4632      	mov	r2, r6
 8015a08:	463b      	mov	r3, r7
 8015a0a:	f7ea fe1d 	bl	8000648 <__aeabi_dmul>
 8015a0e:	a374      	add	r3, pc, #464	@ (adr r3, 8015be0 <__ieee754_acos+0x2c0>)
 8015a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a14:	f7ea fc62 	bl	80002dc <__adddf3>
 8015a18:	4632      	mov	r2, r6
 8015a1a:	463b      	mov	r3, r7
 8015a1c:	f7ea fe14 	bl	8000648 <__aeabi_dmul>
 8015a20:	a371      	add	r3, pc, #452	@ (adr r3, 8015be8 <__ieee754_acos+0x2c8>)
 8015a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a26:	f7ea fc57 	bl	80002d8 <__aeabi_dsub>
 8015a2a:	4632      	mov	r2, r6
 8015a2c:	463b      	mov	r3, r7
 8015a2e:	f7ea fe0b 	bl	8000648 <__aeabi_dmul>
 8015a32:	4b78      	ldr	r3, [pc, #480]	@ (8015c14 <__ieee754_acos+0x2f4>)
 8015a34:	2200      	movs	r2, #0
 8015a36:	f7ea fc51 	bl	80002dc <__adddf3>
 8015a3a:	4602      	mov	r2, r0
 8015a3c:	460b      	mov	r3, r1
 8015a3e:	4640      	mov	r0, r8
 8015a40:	4649      	mov	r1, r9
 8015a42:	f7ea ff2b 	bl	800089c <__aeabi_ddiv>
 8015a46:	4622      	mov	r2, r4
 8015a48:	462b      	mov	r3, r5
 8015a4a:	f7ea fdfd 	bl	8000648 <__aeabi_dmul>
 8015a4e:	4602      	mov	r2, r0
 8015a50:	460b      	mov	r3, r1
 8015a52:	a167      	add	r1, pc, #412	@ (adr r1, 8015bf0 <__ieee754_acos+0x2d0>)
 8015a54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a58:	f7ea fc3e 	bl	80002d8 <__aeabi_dsub>
 8015a5c:	4602      	mov	r2, r0
 8015a5e:	460b      	mov	r3, r1
 8015a60:	4620      	mov	r0, r4
 8015a62:	4629      	mov	r1, r5
 8015a64:	f7ea fc38 	bl	80002d8 <__aeabi_dsub>
 8015a68:	4602      	mov	r2, r0
 8015a6a:	460b      	mov	r3, r1
 8015a6c:	a162      	add	r1, pc, #392	@ (adr r1, 8015bf8 <__ieee754_acos+0x2d8>)
 8015a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a72:	f7ea fc31 	bl	80002d8 <__aeabi_dsub>
 8015a76:	e773      	b.n	8015960 <__ieee754_acos+0x40>
 8015a78:	2d00      	cmp	r5, #0
 8015a7a:	f280 80cf 	bge.w	8015c1c <__ieee754_acos+0x2fc>
 8015a7e:	4b65      	ldr	r3, [pc, #404]	@ (8015c14 <__ieee754_acos+0x2f4>)
 8015a80:	2200      	movs	r2, #0
 8015a82:	4620      	mov	r0, r4
 8015a84:	4629      	mov	r1, r5
 8015a86:	f7ea fc29 	bl	80002dc <__adddf3>
 8015a8a:	4b63      	ldr	r3, [pc, #396]	@ (8015c18 <__ieee754_acos+0x2f8>)
 8015a8c:	2200      	movs	r2, #0
 8015a8e:	f7ea fddb 	bl	8000648 <__aeabi_dmul>
 8015a92:	a343      	add	r3, pc, #268	@ (adr r3, 8015ba0 <__ieee754_acos+0x280>)
 8015a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a98:	4604      	mov	r4, r0
 8015a9a:	460d      	mov	r5, r1
 8015a9c:	f7ea fdd4 	bl	8000648 <__aeabi_dmul>
 8015aa0:	a341      	add	r3, pc, #260	@ (adr r3, 8015ba8 <__ieee754_acos+0x288>)
 8015aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aa6:	f7ea fc19 	bl	80002dc <__adddf3>
 8015aaa:	4622      	mov	r2, r4
 8015aac:	462b      	mov	r3, r5
 8015aae:	f7ea fdcb 	bl	8000648 <__aeabi_dmul>
 8015ab2:	a33f      	add	r3, pc, #252	@ (adr r3, 8015bb0 <__ieee754_acos+0x290>)
 8015ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ab8:	f7ea fc0e 	bl	80002d8 <__aeabi_dsub>
 8015abc:	4622      	mov	r2, r4
 8015abe:	462b      	mov	r3, r5
 8015ac0:	f7ea fdc2 	bl	8000648 <__aeabi_dmul>
 8015ac4:	a33c      	add	r3, pc, #240	@ (adr r3, 8015bb8 <__ieee754_acos+0x298>)
 8015ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aca:	f7ea fc07 	bl	80002dc <__adddf3>
 8015ace:	4622      	mov	r2, r4
 8015ad0:	462b      	mov	r3, r5
 8015ad2:	f7ea fdb9 	bl	8000648 <__aeabi_dmul>
 8015ad6:	a33a      	add	r3, pc, #232	@ (adr r3, 8015bc0 <__ieee754_acos+0x2a0>)
 8015ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015adc:	f7ea fbfc 	bl	80002d8 <__aeabi_dsub>
 8015ae0:	4622      	mov	r2, r4
 8015ae2:	462b      	mov	r3, r5
 8015ae4:	f7ea fdb0 	bl	8000648 <__aeabi_dmul>
 8015ae8:	a337      	add	r3, pc, #220	@ (adr r3, 8015bc8 <__ieee754_acos+0x2a8>)
 8015aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aee:	f7ea fbf5 	bl	80002dc <__adddf3>
 8015af2:	4622      	mov	r2, r4
 8015af4:	462b      	mov	r3, r5
 8015af6:	f7ea fda7 	bl	8000648 <__aeabi_dmul>
 8015afa:	a335      	add	r3, pc, #212	@ (adr r3, 8015bd0 <__ieee754_acos+0x2b0>)
 8015afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b00:	4606      	mov	r6, r0
 8015b02:	460f      	mov	r7, r1
 8015b04:	4620      	mov	r0, r4
 8015b06:	4629      	mov	r1, r5
 8015b08:	f7ea fd9e 	bl	8000648 <__aeabi_dmul>
 8015b0c:	a332      	add	r3, pc, #200	@ (adr r3, 8015bd8 <__ieee754_acos+0x2b8>)
 8015b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b12:	f7ea fbe1 	bl	80002d8 <__aeabi_dsub>
 8015b16:	4622      	mov	r2, r4
 8015b18:	462b      	mov	r3, r5
 8015b1a:	f7ea fd95 	bl	8000648 <__aeabi_dmul>
 8015b1e:	a330      	add	r3, pc, #192	@ (adr r3, 8015be0 <__ieee754_acos+0x2c0>)
 8015b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b24:	f7ea fbda 	bl	80002dc <__adddf3>
 8015b28:	4622      	mov	r2, r4
 8015b2a:	462b      	mov	r3, r5
 8015b2c:	f7ea fd8c 	bl	8000648 <__aeabi_dmul>
 8015b30:	a32d      	add	r3, pc, #180	@ (adr r3, 8015be8 <__ieee754_acos+0x2c8>)
 8015b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b36:	f7ea fbcf 	bl	80002d8 <__aeabi_dsub>
 8015b3a:	4622      	mov	r2, r4
 8015b3c:	462b      	mov	r3, r5
 8015b3e:	f7ea fd83 	bl	8000648 <__aeabi_dmul>
 8015b42:	4b34      	ldr	r3, [pc, #208]	@ (8015c14 <__ieee754_acos+0x2f4>)
 8015b44:	2200      	movs	r2, #0
 8015b46:	f7ea fbc9 	bl	80002dc <__adddf3>
 8015b4a:	ec45 4b10 	vmov	d0, r4, r5
 8015b4e:	4680      	mov	r8, r0
 8015b50:	4689      	mov	r9, r1
 8015b52:	f7ff fe09 	bl	8015768 <__ieee754_sqrt>
 8015b56:	ec55 4b10 	vmov	r4, r5, d0
 8015b5a:	4642      	mov	r2, r8
 8015b5c:	464b      	mov	r3, r9
 8015b5e:	4630      	mov	r0, r6
 8015b60:	4639      	mov	r1, r7
 8015b62:	f7ea fe9b 	bl	800089c <__aeabi_ddiv>
 8015b66:	4622      	mov	r2, r4
 8015b68:	462b      	mov	r3, r5
 8015b6a:	f7ea fd6d 	bl	8000648 <__aeabi_dmul>
 8015b6e:	a320      	add	r3, pc, #128	@ (adr r3, 8015bf0 <__ieee754_acos+0x2d0>)
 8015b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b74:	f7ea fbb0 	bl	80002d8 <__aeabi_dsub>
 8015b78:	4622      	mov	r2, r4
 8015b7a:	462b      	mov	r3, r5
 8015b7c:	f7ea fbae 	bl	80002dc <__adddf3>
 8015b80:	4602      	mov	r2, r0
 8015b82:	460b      	mov	r3, r1
 8015b84:	f7ea fbaa 	bl	80002dc <__adddf3>
 8015b88:	4602      	mov	r2, r0
 8015b8a:	460b      	mov	r3, r1
 8015b8c:	a11c      	add	r1, pc, #112	@ (adr r1, 8015c00 <__ieee754_acos+0x2e0>)
 8015b8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b92:	e76e      	b.n	8015a72 <__ieee754_acos+0x152>
 8015b94:	f3af 8000 	nop.w
	...
 8015ba0:	0dfdf709 	.word	0x0dfdf709
 8015ba4:	3f023de1 	.word	0x3f023de1
 8015ba8:	7501b288 	.word	0x7501b288
 8015bac:	3f49efe0 	.word	0x3f49efe0
 8015bb0:	b5688f3b 	.word	0xb5688f3b
 8015bb4:	3fa48228 	.word	0x3fa48228
 8015bb8:	0e884455 	.word	0x0e884455
 8015bbc:	3fc9c155 	.word	0x3fc9c155
 8015bc0:	03eb6f7d 	.word	0x03eb6f7d
 8015bc4:	3fd4d612 	.word	0x3fd4d612
 8015bc8:	55555555 	.word	0x55555555
 8015bcc:	3fc55555 	.word	0x3fc55555
 8015bd0:	b12e9282 	.word	0xb12e9282
 8015bd4:	3fb3b8c5 	.word	0x3fb3b8c5
 8015bd8:	1b8d0159 	.word	0x1b8d0159
 8015bdc:	3fe6066c 	.word	0x3fe6066c
 8015be0:	9c598ac8 	.word	0x9c598ac8
 8015be4:	40002ae5 	.word	0x40002ae5
 8015be8:	1c8a2d4b 	.word	0x1c8a2d4b
 8015bec:	40033a27 	.word	0x40033a27
 8015bf0:	33145c07 	.word	0x33145c07
 8015bf4:	3c91a626 	.word	0x3c91a626
 8015bf8:	54442d18 	.word	0x54442d18
 8015bfc:	3ff921fb 	.word	0x3ff921fb
 8015c00:	54442d18 	.word	0x54442d18
 8015c04:	400921fb 	.word	0x400921fb
 8015c08:	3fefffff 	.word	0x3fefffff
 8015c0c:	3fdfffff 	.word	0x3fdfffff
 8015c10:	3c600000 	.word	0x3c600000
 8015c14:	3ff00000 	.word	0x3ff00000
 8015c18:	3fe00000 	.word	0x3fe00000
 8015c1c:	4622      	mov	r2, r4
 8015c1e:	462b      	mov	r3, r5
 8015c20:	496b      	ldr	r1, [pc, #428]	@ (8015dd0 <__ieee754_acos+0x4b0>)
 8015c22:	2000      	movs	r0, #0
 8015c24:	f7ea fb58 	bl	80002d8 <__aeabi_dsub>
 8015c28:	4b6a      	ldr	r3, [pc, #424]	@ (8015dd4 <__ieee754_acos+0x4b4>)
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	f7ea fd0c 	bl	8000648 <__aeabi_dmul>
 8015c30:	4604      	mov	r4, r0
 8015c32:	460d      	mov	r5, r1
 8015c34:	ec45 4b10 	vmov	d0, r4, r5
 8015c38:	f7ff fd96 	bl	8015768 <__ieee754_sqrt>
 8015c3c:	a34c      	add	r3, pc, #304	@ (adr r3, 8015d70 <__ieee754_acos+0x450>)
 8015c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c42:	4620      	mov	r0, r4
 8015c44:	4629      	mov	r1, r5
 8015c46:	ec59 8b10 	vmov	r8, r9, d0
 8015c4a:	f7ea fcfd 	bl	8000648 <__aeabi_dmul>
 8015c4e:	a34a      	add	r3, pc, #296	@ (adr r3, 8015d78 <__ieee754_acos+0x458>)
 8015c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c54:	f7ea fb42 	bl	80002dc <__adddf3>
 8015c58:	4622      	mov	r2, r4
 8015c5a:	462b      	mov	r3, r5
 8015c5c:	f7ea fcf4 	bl	8000648 <__aeabi_dmul>
 8015c60:	a347      	add	r3, pc, #284	@ (adr r3, 8015d80 <__ieee754_acos+0x460>)
 8015c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c66:	f7ea fb37 	bl	80002d8 <__aeabi_dsub>
 8015c6a:	4622      	mov	r2, r4
 8015c6c:	462b      	mov	r3, r5
 8015c6e:	f7ea fceb 	bl	8000648 <__aeabi_dmul>
 8015c72:	a345      	add	r3, pc, #276	@ (adr r3, 8015d88 <__ieee754_acos+0x468>)
 8015c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c78:	f7ea fb30 	bl	80002dc <__adddf3>
 8015c7c:	4622      	mov	r2, r4
 8015c7e:	462b      	mov	r3, r5
 8015c80:	f7ea fce2 	bl	8000648 <__aeabi_dmul>
 8015c84:	a342      	add	r3, pc, #264	@ (adr r3, 8015d90 <__ieee754_acos+0x470>)
 8015c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c8a:	f7ea fb25 	bl	80002d8 <__aeabi_dsub>
 8015c8e:	4622      	mov	r2, r4
 8015c90:	462b      	mov	r3, r5
 8015c92:	f7ea fcd9 	bl	8000648 <__aeabi_dmul>
 8015c96:	a340      	add	r3, pc, #256	@ (adr r3, 8015d98 <__ieee754_acos+0x478>)
 8015c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c9c:	f7ea fb1e 	bl	80002dc <__adddf3>
 8015ca0:	4622      	mov	r2, r4
 8015ca2:	462b      	mov	r3, r5
 8015ca4:	f7ea fcd0 	bl	8000648 <__aeabi_dmul>
 8015ca8:	a33d      	add	r3, pc, #244	@ (adr r3, 8015da0 <__ieee754_acos+0x480>)
 8015caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cae:	4682      	mov	sl, r0
 8015cb0:	468b      	mov	fp, r1
 8015cb2:	4620      	mov	r0, r4
 8015cb4:	4629      	mov	r1, r5
 8015cb6:	f7ea fcc7 	bl	8000648 <__aeabi_dmul>
 8015cba:	a33b      	add	r3, pc, #236	@ (adr r3, 8015da8 <__ieee754_acos+0x488>)
 8015cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cc0:	f7ea fb0a 	bl	80002d8 <__aeabi_dsub>
 8015cc4:	4622      	mov	r2, r4
 8015cc6:	462b      	mov	r3, r5
 8015cc8:	f7ea fcbe 	bl	8000648 <__aeabi_dmul>
 8015ccc:	a338      	add	r3, pc, #224	@ (adr r3, 8015db0 <__ieee754_acos+0x490>)
 8015cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cd2:	f7ea fb03 	bl	80002dc <__adddf3>
 8015cd6:	4622      	mov	r2, r4
 8015cd8:	462b      	mov	r3, r5
 8015cda:	f7ea fcb5 	bl	8000648 <__aeabi_dmul>
 8015cde:	a336      	add	r3, pc, #216	@ (adr r3, 8015db8 <__ieee754_acos+0x498>)
 8015ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ce4:	f7ea faf8 	bl	80002d8 <__aeabi_dsub>
 8015ce8:	4622      	mov	r2, r4
 8015cea:	462b      	mov	r3, r5
 8015cec:	f7ea fcac 	bl	8000648 <__aeabi_dmul>
 8015cf0:	4b37      	ldr	r3, [pc, #220]	@ (8015dd0 <__ieee754_acos+0x4b0>)
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	f7ea faf2 	bl	80002dc <__adddf3>
 8015cf8:	4602      	mov	r2, r0
 8015cfa:	460b      	mov	r3, r1
 8015cfc:	4650      	mov	r0, sl
 8015cfe:	4659      	mov	r1, fp
 8015d00:	f7ea fdcc 	bl	800089c <__aeabi_ddiv>
 8015d04:	4642      	mov	r2, r8
 8015d06:	464b      	mov	r3, r9
 8015d08:	f7ea fc9e 	bl	8000648 <__aeabi_dmul>
 8015d0c:	2600      	movs	r6, #0
 8015d0e:	4682      	mov	sl, r0
 8015d10:	468b      	mov	fp, r1
 8015d12:	4632      	mov	r2, r6
 8015d14:	464b      	mov	r3, r9
 8015d16:	4630      	mov	r0, r6
 8015d18:	4649      	mov	r1, r9
 8015d1a:	f7ea fc95 	bl	8000648 <__aeabi_dmul>
 8015d1e:	4602      	mov	r2, r0
 8015d20:	460b      	mov	r3, r1
 8015d22:	4620      	mov	r0, r4
 8015d24:	4629      	mov	r1, r5
 8015d26:	f7ea fad7 	bl	80002d8 <__aeabi_dsub>
 8015d2a:	4632      	mov	r2, r6
 8015d2c:	4604      	mov	r4, r0
 8015d2e:	460d      	mov	r5, r1
 8015d30:	464b      	mov	r3, r9
 8015d32:	4640      	mov	r0, r8
 8015d34:	4649      	mov	r1, r9
 8015d36:	f7ea fad1 	bl	80002dc <__adddf3>
 8015d3a:	4602      	mov	r2, r0
 8015d3c:	460b      	mov	r3, r1
 8015d3e:	4620      	mov	r0, r4
 8015d40:	4629      	mov	r1, r5
 8015d42:	f7ea fdab 	bl	800089c <__aeabi_ddiv>
 8015d46:	4602      	mov	r2, r0
 8015d48:	460b      	mov	r3, r1
 8015d4a:	4650      	mov	r0, sl
 8015d4c:	4659      	mov	r1, fp
 8015d4e:	f7ea fac5 	bl	80002dc <__adddf3>
 8015d52:	4632      	mov	r2, r6
 8015d54:	464b      	mov	r3, r9
 8015d56:	f7ea fac1 	bl	80002dc <__adddf3>
 8015d5a:	4602      	mov	r2, r0
 8015d5c:	460b      	mov	r3, r1
 8015d5e:	f7ea fabd 	bl	80002dc <__adddf3>
 8015d62:	e5fd      	b.n	8015960 <__ieee754_acos+0x40>
 8015d64:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8015dc0 <__ieee754_acos+0x4a0>
 8015d68:	e5ee      	b.n	8015948 <__ieee754_acos+0x28>
 8015d6a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8015dc8 <__ieee754_acos+0x4a8>
 8015d6e:	e5eb      	b.n	8015948 <__ieee754_acos+0x28>
 8015d70:	0dfdf709 	.word	0x0dfdf709
 8015d74:	3f023de1 	.word	0x3f023de1
 8015d78:	7501b288 	.word	0x7501b288
 8015d7c:	3f49efe0 	.word	0x3f49efe0
 8015d80:	b5688f3b 	.word	0xb5688f3b
 8015d84:	3fa48228 	.word	0x3fa48228
 8015d88:	0e884455 	.word	0x0e884455
 8015d8c:	3fc9c155 	.word	0x3fc9c155
 8015d90:	03eb6f7d 	.word	0x03eb6f7d
 8015d94:	3fd4d612 	.word	0x3fd4d612
 8015d98:	55555555 	.word	0x55555555
 8015d9c:	3fc55555 	.word	0x3fc55555
 8015da0:	b12e9282 	.word	0xb12e9282
 8015da4:	3fb3b8c5 	.word	0x3fb3b8c5
 8015da8:	1b8d0159 	.word	0x1b8d0159
 8015dac:	3fe6066c 	.word	0x3fe6066c
 8015db0:	9c598ac8 	.word	0x9c598ac8
 8015db4:	40002ae5 	.word	0x40002ae5
 8015db8:	1c8a2d4b 	.word	0x1c8a2d4b
 8015dbc:	40033a27 	.word	0x40033a27
 8015dc0:	54442d18 	.word	0x54442d18
 8015dc4:	400921fb 	.word	0x400921fb
 8015dc8:	54442d18 	.word	0x54442d18
 8015dcc:	3ff921fb 	.word	0x3ff921fb
 8015dd0:	3ff00000 	.word	0x3ff00000
 8015dd4:	3fe00000 	.word	0x3fe00000

08015dd8 <__ieee754_pow>:
 8015dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ddc:	b091      	sub	sp, #68	@ 0x44
 8015dde:	ed8d 1b00 	vstr	d1, [sp]
 8015de2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8015de6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8015dea:	ea5a 0001 	orrs.w	r0, sl, r1
 8015dee:	ec57 6b10 	vmov	r6, r7, d0
 8015df2:	d113      	bne.n	8015e1c <__ieee754_pow+0x44>
 8015df4:	19b3      	adds	r3, r6, r6
 8015df6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8015dfa:	4152      	adcs	r2, r2
 8015dfc:	4298      	cmp	r0, r3
 8015dfe:	4b98      	ldr	r3, [pc, #608]	@ (8016060 <__ieee754_pow+0x288>)
 8015e00:	4193      	sbcs	r3, r2
 8015e02:	f080 84ea 	bcs.w	80167da <__ieee754_pow+0xa02>
 8015e06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015e0a:	4630      	mov	r0, r6
 8015e0c:	4639      	mov	r1, r7
 8015e0e:	f7ea fa65 	bl	80002dc <__adddf3>
 8015e12:	ec41 0b10 	vmov	d0, r0, r1
 8015e16:	b011      	add	sp, #68	@ 0x44
 8015e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e1c:	4a91      	ldr	r2, [pc, #580]	@ (8016064 <__ieee754_pow+0x28c>)
 8015e1e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8015e22:	4590      	cmp	r8, r2
 8015e24:	463d      	mov	r5, r7
 8015e26:	4633      	mov	r3, r6
 8015e28:	d806      	bhi.n	8015e38 <__ieee754_pow+0x60>
 8015e2a:	d101      	bne.n	8015e30 <__ieee754_pow+0x58>
 8015e2c:	2e00      	cmp	r6, #0
 8015e2e:	d1ea      	bne.n	8015e06 <__ieee754_pow+0x2e>
 8015e30:	4592      	cmp	sl, r2
 8015e32:	d801      	bhi.n	8015e38 <__ieee754_pow+0x60>
 8015e34:	d10e      	bne.n	8015e54 <__ieee754_pow+0x7c>
 8015e36:	b169      	cbz	r1, 8015e54 <__ieee754_pow+0x7c>
 8015e38:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8015e3c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8015e40:	431d      	orrs	r5, r3
 8015e42:	d1e0      	bne.n	8015e06 <__ieee754_pow+0x2e>
 8015e44:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015e48:	18db      	adds	r3, r3, r3
 8015e4a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8015e4e:	4152      	adcs	r2, r2
 8015e50:	429d      	cmp	r5, r3
 8015e52:	e7d4      	b.n	8015dfe <__ieee754_pow+0x26>
 8015e54:	2d00      	cmp	r5, #0
 8015e56:	46c3      	mov	fp, r8
 8015e58:	da3a      	bge.n	8015ed0 <__ieee754_pow+0xf8>
 8015e5a:	4a83      	ldr	r2, [pc, #524]	@ (8016068 <__ieee754_pow+0x290>)
 8015e5c:	4592      	cmp	sl, r2
 8015e5e:	d84d      	bhi.n	8015efc <__ieee754_pow+0x124>
 8015e60:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8015e64:	4592      	cmp	sl, r2
 8015e66:	f240 84c7 	bls.w	80167f8 <__ieee754_pow+0xa20>
 8015e6a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8015e6e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8015e72:	2a14      	cmp	r2, #20
 8015e74:	dd0f      	ble.n	8015e96 <__ieee754_pow+0xbe>
 8015e76:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8015e7a:	fa21 f402 	lsr.w	r4, r1, r2
 8015e7e:	fa04 f202 	lsl.w	r2, r4, r2
 8015e82:	428a      	cmp	r2, r1
 8015e84:	f040 84b8 	bne.w	80167f8 <__ieee754_pow+0xa20>
 8015e88:	f004 0401 	and.w	r4, r4, #1
 8015e8c:	f1c4 0402 	rsb	r4, r4, #2
 8015e90:	2900      	cmp	r1, #0
 8015e92:	d158      	bne.n	8015f46 <__ieee754_pow+0x16e>
 8015e94:	e00e      	b.n	8015eb4 <__ieee754_pow+0xdc>
 8015e96:	2900      	cmp	r1, #0
 8015e98:	d154      	bne.n	8015f44 <__ieee754_pow+0x16c>
 8015e9a:	f1c2 0214 	rsb	r2, r2, #20
 8015e9e:	fa4a f402 	asr.w	r4, sl, r2
 8015ea2:	fa04 f202 	lsl.w	r2, r4, r2
 8015ea6:	4552      	cmp	r2, sl
 8015ea8:	f040 84a3 	bne.w	80167f2 <__ieee754_pow+0xa1a>
 8015eac:	f004 0401 	and.w	r4, r4, #1
 8015eb0:	f1c4 0402 	rsb	r4, r4, #2
 8015eb4:	4a6d      	ldr	r2, [pc, #436]	@ (801606c <__ieee754_pow+0x294>)
 8015eb6:	4592      	cmp	sl, r2
 8015eb8:	d12e      	bne.n	8015f18 <__ieee754_pow+0x140>
 8015eba:	f1b9 0f00 	cmp.w	r9, #0
 8015ebe:	f280 8494 	bge.w	80167ea <__ieee754_pow+0xa12>
 8015ec2:	496a      	ldr	r1, [pc, #424]	@ (801606c <__ieee754_pow+0x294>)
 8015ec4:	4632      	mov	r2, r6
 8015ec6:	463b      	mov	r3, r7
 8015ec8:	2000      	movs	r0, #0
 8015eca:	f7ea fce7 	bl	800089c <__aeabi_ddiv>
 8015ece:	e7a0      	b.n	8015e12 <__ieee754_pow+0x3a>
 8015ed0:	2400      	movs	r4, #0
 8015ed2:	bbc1      	cbnz	r1, 8015f46 <__ieee754_pow+0x16e>
 8015ed4:	4a63      	ldr	r2, [pc, #396]	@ (8016064 <__ieee754_pow+0x28c>)
 8015ed6:	4592      	cmp	sl, r2
 8015ed8:	d1ec      	bne.n	8015eb4 <__ieee754_pow+0xdc>
 8015eda:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8015ede:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8015ee2:	431a      	orrs	r2, r3
 8015ee4:	f000 8479 	beq.w	80167da <__ieee754_pow+0xa02>
 8015ee8:	4b61      	ldr	r3, [pc, #388]	@ (8016070 <__ieee754_pow+0x298>)
 8015eea:	4598      	cmp	r8, r3
 8015eec:	d908      	bls.n	8015f00 <__ieee754_pow+0x128>
 8015eee:	f1b9 0f00 	cmp.w	r9, #0
 8015ef2:	f2c0 8476 	blt.w	80167e2 <__ieee754_pow+0xa0a>
 8015ef6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015efa:	e78a      	b.n	8015e12 <__ieee754_pow+0x3a>
 8015efc:	2402      	movs	r4, #2
 8015efe:	e7e8      	b.n	8015ed2 <__ieee754_pow+0xfa>
 8015f00:	f1b9 0f00 	cmp.w	r9, #0
 8015f04:	f04f 0000 	mov.w	r0, #0
 8015f08:	f04f 0100 	mov.w	r1, #0
 8015f0c:	da81      	bge.n	8015e12 <__ieee754_pow+0x3a>
 8015f0e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8015f12:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8015f16:	e77c      	b.n	8015e12 <__ieee754_pow+0x3a>
 8015f18:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8015f1c:	d106      	bne.n	8015f2c <__ieee754_pow+0x154>
 8015f1e:	4632      	mov	r2, r6
 8015f20:	463b      	mov	r3, r7
 8015f22:	4630      	mov	r0, r6
 8015f24:	4639      	mov	r1, r7
 8015f26:	f7ea fb8f 	bl	8000648 <__aeabi_dmul>
 8015f2a:	e772      	b.n	8015e12 <__ieee754_pow+0x3a>
 8015f2c:	4a51      	ldr	r2, [pc, #324]	@ (8016074 <__ieee754_pow+0x29c>)
 8015f2e:	4591      	cmp	r9, r2
 8015f30:	d109      	bne.n	8015f46 <__ieee754_pow+0x16e>
 8015f32:	2d00      	cmp	r5, #0
 8015f34:	db07      	blt.n	8015f46 <__ieee754_pow+0x16e>
 8015f36:	ec47 6b10 	vmov	d0, r6, r7
 8015f3a:	b011      	add	sp, #68	@ 0x44
 8015f3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f40:	f7ff bc12 	b.w	8015768 <__ieee754_sqrt>
 8015f44:	2400      	movs	r4, #0
 8015f46:	ec47 6b10 	vmov	d0, r6, r7
 8015f4a:	9302      	str	r3, [sp, #8]
 8015f4c:	f7ff fbf8 	bl	8015740 <fabs>
 8015f50:	9b02      	ldr	r3, [sp, #8]
 8015f52:	ec51 0b10 	vmov	r0, r1, d0
 8015f56:	bb53      	cbnz	r3, 8015fae <__ieee754_pow+0x1d6>
 8015f58:	4b44      	ldr	r3, [pc, #272]	@ (801606c <__ieee754_pow+0x294>)
 8015f5a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8015f5e:	429a      	cmp	r2, r3
 8015f60:	d002      	beq.n	8015f68 <__ieee754_pow+0x190>
 8015f62:	f1b8 0f00 	cmp.w	r8, #0
 8015f66:	d122      	bne.n	8015fae <__ieee754_pow+0x1d6>
 8015f68:	f1b9 0f00 	cmp.w	r9, #0
 8015f6c:	da05      	bge.n	8015f7a <__ieee754_pow+0x1a2>
 8015f6e:	4602      	mov	r2, r0
 8015f70:	460b      	mov	r3, r1
 8015f72:	2000      	movs	r0, #0
 8015f74:	493d      	ldr	r1, [pc, #244]	@ (801606c <__ieee754_pow+0x294>)
 8015f76:	f7ea fc91 	bl	800089c <__aeabi_ddiv>
 8015f7a:	2d00      	cmp	r5, #0
 8015f7c:	f6bf af49 	bge.w	8015e12 <__ieee754_pow+0x3a>
 8015f80:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8015f84:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8015f88:	ea58 0804 	orrs.w	r8, r8, r4
 8015f8c:	d108      	bne.n	8015fa0 <__ieee754_pow+0x1c8>
 8015f8e:	4602      	mov	r2, r0
 8015f90:	460b      	mov	r3, r1
 8015f92:	4610      	mov	r0, r2
 8015f94:	4619      	mov	r1, r3
 8015f96:	f7ea f99f 	bl	80002d8 <__aeabi_dsub>
 8015f9a:	4602      	mov	r2, r0
 8015f9c:	460b      	mov	r3, r1
 8015f9e:	e794      	b.n	8015eca <__ieee754_pow+0xf2>
 8015fa0:	2c01      	cmp	r4, #1
 8015fa2:	f47f af36 	bne.w	8015e12 <__ieee754_pow+0x3a>
 8015fa6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015faa:	4619      	mov	r1, r3
 8015fac:	e731      	b.n	8015e12 <__ieee754_pow+0x3a>
 8015fae:	0feb      	lsrs	r3, r5, #31
 8015fb0:	3b01      	subs	r3, #1
 8015fb2:	ea53 0204 	orrs.w	r2, r3, r4
 8015fb6:	d102      	bne.n	8015fbe <__ieee754_pow+0x1e6>
 8015fb8:	4632      	mov	r2, r6
 8015fba:	463b      	mov	r3, r7
 8015fbc:	e7e9      	b.n	8015f92 <__ieee754_pow+0x1ba>
 8015fbe:	3c01      	subs	r4, #1
 8015fc0:	431c      	orrs	r4, r3
 8015fc2:	d016      	beq.n	8015ff2 <__ieee754_pow+0x21a>
 8015fc4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8016050 <__ieee754_pow+0x278>
 8015fc8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8015fcc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015fd0:	f240 8112 	bls.w	80161f8 <__ieee754_pow+0x420>
 8015fd4:	4b28      	ldr	r3, [pc, #160]	@ (8016078 <__ieee754_pow+0x2a0>)
 8015fd6:	459a      	cmp	sl, r3
 8015fd8:	4b25      	ldr	r3, [pc, #148]	@ (8016070 <__ieee754_pow+0x298>)
 8015fda:	d916      	bls.n	801600a <__ieee754_pow+0x232>
 8015fdc:	4598      	cmp	r8, r3
 8015fde:	d80b      	bhi.n	8015ff8 <__ieee754_pow+0x220>
 8015fe0:	f1b9 0f00 	cmp.w	r9, #0
 8015fe4:	da0b      	bge.n	8015ffe <__ieee754_pow+0x226>
 8015fe6:	2000      	movs	r0, #0
 8015fe8:	b011      	add	sp, #68	@ 0x44
 8015fea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fee:	f000 bceb 	b.w	80169c8 <__math_oflow>
 8015ff2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8016058 <__ieee754_pow+0x280>
 8015ff6:	e7e7      	b.n	8015fc8 <__ieee754_pow+0x1f0>
 8015ff8:	f1b9 0f00 	cmp.w	r9, #0
 8015ffc:	dcf3      	bgt.n	8015fe6 <__ieee754_pow+0x20e>
 8015ffe:	2000      	movs	r0, #0
 8016000:	b011      	add	sp, #68	@ 0x44
 8016002:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016006:	f000 bcd7 	b.w	80169b8 <__math_uflow>
 801600a:	4598      	cmp	r8, r3
 801600c:	d20c      	bcs.n	8016028 <__ieee754_pow+0x250>
 801600e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016012:	2200      	movs	r2, #0
 8016014:	2300      	movs	r3, #0
 8016016:	f7ea fd89 	bl	8000b2c <__aeabi_dcmplt>
 801601a:	3800      	subs	r0, #0
 801601c:	bf18      	it	ne
 801601e:	2001      	movne	r0, #1
 8016020:	f1b9 0f00 	cmp.w	r9, #0
 8016024:	daec      	bge.n	8016000 <__ieee754_pow+0x228>
 8016026:	e7df      	b.n	8015fe8 <__ieee754_pow+0x210>
 8016028:	4b10      	ldr	r3, [pc, #64]	@ (801606c <__ieee754_pow+0x294>)
 801602a:	4598      	cmp	r8, r3
 801602c:	f04f 0200 	mov.w	r2, #0
 8016030:	d924      	bls.n	801607c <__ieee754_pow+0x2a4>
 8016032:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016036:	2300      	movs	r3, #0
 8016038:	f7ea fd78 	bl	8000b2c <__aeabi_dcmplt>
 801603c:	3800      	subs	r0, #0
 801603e:	bf18      	it	ne
 8016040:	2001      	movne	r0, #1
 8016042:	f1b9 0f00 	cmp.w	r9, #0
 8016046:	dccf      	bgt.n	8015fe8 <__ieee754_pow+0x210>
 8016048:	e7da      	b.n	8016000 <__ieee754_pow+0x228>
 801604a:	bf00      	nop
 801604c:	f3af 8000 	nop.w
 8016050:	00000000 	.word	0x00000000
 8016054:	3ff00000 	.word	0x3ff00000
 8016058:	00000000 	.word	0x00000000
 801605c:	bff00000 	.word	0xbff00000
 8016060:	fff00000 	.word	0xfff00000
 8016064:	7ff00000 	.word	0x7ff00000
 8016068:	433fffff 	.word	0x433fffff
 801606c:	3ff00000 	.word	0x3ff00000
 8016070:	3fefffff 	.word	0x3fefffff
 8016074:	3fe00000 	.word	0x3fe00000
 8016078:	43f00000 	.word	0x43f00000
 801607c:	4b5a      	ldr	r3, [pc, #360]	@ (80161e8 <__ieee754_pow+0x410>)
 801607e:	f7ea f92b 	bl	80002d8 <__aeabi_dsub>
 8016082:	a351      	add	r3, pc, #324	@ (adr r3, 80161c8 <__ieee754_pow+0x3f0>)
 8016084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016088:	4604      	mov	r4, r0
 801608a:	460d      	mov	r5, r1
 801608c:	f7ea fadc 	bl	8000648 <__aeabi_dmul>
 8016090:	a34f      	add	r3, pc, #316	@ (adr r3, 80161d0 <__ieee754_pow+0x3f8>)
 8016092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016096:	4606      	mov	r6, r0
 8016098:	460f      	mov	r7, r1
 801609a:	4620      	mov	r0, r4
 801609c:	4629      	mov	r1, r5
 801609e:	f7ea fad3 	bl	8000648 <__aeabi_dmul>
 80160a2:	4b52      	ldr	r3, [pc, #328]	@ (80161ec <__ieee754_pow+0x414>)
 80160a4:	4682      	mov	sl, r0
 80160a6:	468b      	mov	fp, r1
 80160a8:	2200      	movs	r2, #0
 80160aa:	4620      	mov	r0, r4
 80160ac:	4629      	mov	r1, r5
 80160ae:	f7ea facb 	bl	8000648 <__aeabi_dmul>
 80160b2:	4602      	mov	r2, r0
 80160b4:	460b      	mov	r3, r1
 80160b6:	a148      	add	r1, pc, #288	@ (adr r1, 80161d8 <__ieee754_pow+0x400>)
 80160b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80160bc:	f7ea f90c 	bl	80002d8 <__aeabi_dsub>
 80160c0:	4622      	mov	r2, r4
 80160c2:	462b      	mov	r3, r5
 80160c4:	f7ea fac0 	bl	8000648 <__aeabi_dmul>
 80160c8:	4602      	mov	r2, r0
 80160ca:	460b      	mov	r3, r1
 80160cc:	2000      	movs	r0, #0
 80160ce:	4948      	ldr	r1, [pc, #288]	@ (80161f0 <__ieee754_pow+0x418>)
 80160d0:	f7ea f902 	bl	80002d8 <__aeabi_dsub>
 80160d4:	4622      	mov	r2, r4
 80160d6:	4680      	mov	r8, r0
 80160d8:	4689      	mov	r9, r1
 80160da:	462b      	mov	r3, r5
 80160dc:	4620      	mov	r0, r4
 80160de:	4629      	mov	r1, r5
 80160e0:	f7ea fab2 	bl	8000648 <__aeabi_dmul>
 80160e4:	4602      	mov	r2, r0
 80160e6:	460b      	mov	r3, r1
 80160e8:	4640      	mov	r0, r8
 80160ea:	4649      	mov	r1, r9
 80160ec:	f7ea faac 	bl	8000648 <__aeabi_dmul>
 80160f0:	a33b      	add	r3, pc, #236	@ (adr r3, 80161e0 <__ieee754_pow+0x408>)
 80160f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160f6:	f7ea faa7 	bl	8000648 <__aeabi_dmul>
 80160fa:	4602      	mov	r2, r0
 80160fc:	460b      	mov	r3, r1
 80160fe:	4650      	mov	r0, sl
 8016100:	4659      	mov	r1, fp
 8016102:	f7ea f8e9 	bl	80002d8 <__aeabi_dsub>
 8016106:	4602      	mov	r2, r0
 8016108:	460b      	mov	r3, r1
 801610a:	4680      	mov	r8, r0
 801610c:	4689      	mov	r9, r1
 801610e:	4630      	mov	r0, r6
 8016110:	4639      	mov	r1, r7
 8016112:	f7ea f8e3 	bl	80002dc <__adddf3>
 8016116:	2400      	movs	r4, #0
 8016118:	4632      	mov	r2, r6
 801611a:	463b      	mov	r3, r7
 801611c:	4620      	mov	r0, r4
 801611e:	460d      	mov	r5, r1
 8016120:	f7ea f8da 	bl	80002d8 <__aeabi_dsub>
 8016124:	4602      	mov	r2, r0
 8016126:	460b      	mov	r3, r1
 8016128:	4640      	mov	r0, r8
 801612a:	4649      	mov	r1, r9
 801612c:	f7ea f8d4 	bl	80002d8 <__aeabi_dsub>
 8016130:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016134:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016138:	2300      	movs	r3, #0
 801613a:	9304      	str	r3, [sp, #16]
 801613c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016140:	4606      	mov	r6, r0
 8016142:	460f      	mov	r7, r1
 8016144:	4652      	mov	r2, sl
 8016146:	465b      	mov	r3, fp
 8016148:	e9dd 0100 	ldrd	r0, r1, [sp]
 801614c:	f7ea f8c4 	bl	80002d8 <__aeabi_dsub>
 8016150:	4622      	mov	r2, r4
 8016152:	462b      	mov	r3, r5
 8016154:	f7ea fa78 	bl	8000648 <__aeabi_dmul>
 8016158:	e9dd 2300 	ldrd	r2, r3, [sp]
 801615c:	4680      	mov	r8, r0
 801615e:	4689      	mov	r9, r1
 8016160:	4630      	mov	r0, r6
 8016162:	4639      	mov	r1, r7
 8016164:	f7ea fa70 	bl	8000648 <__aeabi_dmul>
 8016168:	4602      	mov	r2, r0
 801616a:	460b      	mov	r3, r1
 801616c:	4640      	mov	r0, r8
 801616e:	4649      	mov	r1, r9
 8016170:	f7ea f8b4 	bl	80002dc <__adddf3>
 8016174:	4652      	mov	r2, sl
 8016176:	465b      	mov	r3, fp
 8016178:	4606      	mov	r6, r0
 801617a:	460f      	mov	r7, r1
 801617c:	4620      	mov	r0, r4
 801617e:	4629      	mov	r1, r5
 8016180:	f7ea fa62 	bl	8000648 <__aeabi_dmul>
 8016184:	460b      	mov	r3, r1
 8016186:	4602      	mov	r2, r0
 8016188:	4680      	mov	r8, r0
 801618a:	4689      	mov	r9, r1
 801618c:	4630      	mov	r0, r6
 801618e:	4639      	mov	r1, r7
 8016190:	f7ea f8a4 	bl	80002dc <__adddf3>
 8016194:	4b17      	ldr	r3, [pc, #92]	@ (80161f4 <__ieee754_pow+0x41c>)
 8016196:	4299      	cmp	r1, r3
 8016198:	4604      	mov	r4, r0
 801619a:	460d      	mov	r5, r1
 801619c:	468a      	mov	sl, r1
 801619e:	468b      	mov	fp, r1
 80161a0:	f340 82ef 	ble.w	8016782 <__ieee754_pow+0x9aa>
 80161a4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80161a8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80161ac:	4303      	orrs	r3, r0
 80161ae:	f000 81e8 	beq.w	8016582 <__ieee754_pow+0x7aa>
 80161b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80161b6:	2200      	movs	r2, #0
 80161b8:	2300      	movs	r3, #0
 80161ba:	f7ea fcb7 	bl	8000b2c <__aeabi_dcmplt>
 80161be:	3800      	subs	r0, #0
 80161c0:	bf18      	it	ne
 80161c2:	2001      	movne	r0, #1
 80161c4:	e710      	b.n	8015fe8 <__ieee754_pow+0x210>
 80161c6:	bf00      	nop
 80161c8:	60000000 	.word	0x60000000
 80161cc:	3ff71547 	.word	0x3ff71547
 80161d0:	f85ddf44 	.word	0xf85ddf44
 80161d4:	3e54ae0b 	.word	0x3e54ae0b
 80161d8:	55555555 	.word	0x55555555
 80161dc:	3fd55555 	.word	0x3fd55555
 80161e0:	652b82fe 	.word	0x652b82fe
 80161e4:	3ff71547 	.word	0x3ff71547
 80161e8:	3ff00000 	.word	0x3ff00000
 80161ec:	3fd00000 	.word	0x3fd00000
 80161f0:	3fe00000 	.word	0x3fe00000
 80161f4:	408fffff 	.word	0x408fffff
 80161f8:	4bd5      	ldr	r3, [pc, #852]	@ (8016550 <__ieee754_pow+0x778>)
 80161fa:	402b      	ands	r3, r5
 80161fc:	2200      	movs	r2, #0
 80161fe:	b92b      	cbnz	r3, 801620c <__ieee754_pow+0x434>
 8016200:	4bd4      	ldr	r3, [pc, #848]	@ (8016554 <__ieee754_pow+0x77c>)
 8016202:	f7ea fa21 	bl	8000648 <__aeabi_dmul>
 8016206:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801620a:	468b      	mov	fp, r1
 801620c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8016210:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8016214:	4413      	add	r3, r2
 8016216:	930a      	str	r3, [sp, #40]	@ 0x28
 8016218:	4bcf      	ldr	r3, [pc, #828]	@ (8016558 <__ieee754_pow+0x780>)
 801621a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801621e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8016222:	459b      	cmp	fp, r3
 8016224:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016228:	dd08      	ble.n	801623c <__ieee754_pow+0x464>
 801622a:	4bcc      	ldr	r3, [pc, #816]	@ (801655c <__ieee754_pow+0x784>)
 801622c:	459b      	cmp	fp, r3
 801622e:	f340 81a5 	ble.w	801657c <__ieee754_pow+0x7a4>
 8016232:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016234:	3301      	adds	r3, #1
 8016236:	930a      	str	r3, [sp, #40]	@ 0x28
 8016238:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801623c:	f04f 0a00 	mov.w	sl, #0
 8016240:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016244:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016246:	4bc6      	ldr	r3, [pc, #792]	@ (8016560 <__ieee754_pow+0x788>)
 8016248:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801624c:	ed93 7b00 	vldr	d7, [r3]
 8016250:	4629      	mov	r1, r5
 8016252:	ec53 2b17 	vmov	r2, r3, d7
 8016256:	ed8d 7b06 	vstr	d7, [sp, #24]
 801625a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801625e:	f7ea f83b 	bl	80002d8 <__aeabi_dsub>
 8016262:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016266:	4606      	mov	r6, r0
 8016268:	460f      	mov	r7, r1
 801626a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801626e:	f7ea f835 	bl	80002dc <__adddf3>
 8016272:	4602      	mov	r2, r0
 8016274:	460b      	mov	r3, r1
 8016276:	2000      	movs	r0, #0
 8016278:	49ba      	ldr	r1, [pc, #744]	@ (8016564 <__ieee754_pow+0x78c>)
 801627a:	f7ea fb0f 	bl	800089c <__aeabi_ddiv>
 801627e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8016282:	4602      	mov	r2, r0
 8016284:	460b      	mov	r3, r1
 8016286:	4630      	mov	r0, r6
 8016288:	4639      	mov	r1, r7
 801628a:	f7ea f9dd 	bl	8000648 <__aeabi_dmul>
 801628e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016292:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8016296:	106d      	asrs	r5, r5, #1
 8016298:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801629c:	f04f 0b00 	mov.w	fp, #0
 80162a0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80162a4:	4661      	mov	r1, ip
 80162a6:	2200      	movs	r2, #0
 80162a8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80162ac:	4658      	mov	r0, fp
 80162ae:	46e1      	mov	r9, ip
 80162b0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80162b4:	4614      	mov	r4, r2
 80162b6:	461d      	mov	r5, r3
 80162b8:	f7ea f9c6 	bl	8000648 <__aeabi_dmul>
 80162bc:	4602      	mov	r2, r0
 80162be:	460b      	mov	r3, r1
 80162c0:	4630      	mov	r0, r6
 80162c2:	4639      	mov	r1, r7
 80162c4:	f7ea f808 	bl	80002d8 <__aeabi_dsub>
 80162c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80162cc:	4606      	mov	r6, r0
 80162ce:	460f      	mov	r7, r1
 80162d0:	4620      	mov	r0, r4
 80162d2:	4629      	mov	r1, r5
 80162d4:	f7ea f800 	bl	80002d8 <__aeabi_dsub>
 80162d8:	4602      	mov	r2, r0
 80162da:	460b      	mov	r3, r1
 80162dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80162e0:	f7e9 fffa 	bl	80002d8 <__aeabi_dsub>
 80162e4:	465a      	mov	r2, fp
 80162e6:	464b      	mov	r3, r9
 80162e8:	f7ea f9ae 	bl	8000648 <__aeabi_dmul>
 80162ec:	4602      	mov	r2, r0
 80162ee:	460b      	mov	r3, r1
 80162f0:	4630      	mov	r0, r6
 80162f2:	4639      	mov	r1, r7
 80162f4:	f7e9 fff0 	bl	80002d8 <__aeabi_dsub>
 80162f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80162fc:	f7ea f9a4 	bl	8000648 <__aeabi_dmul>
 8016300:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016304:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016308:	4610      	mov	r0, r2
 801630a:	4619      	mov	r1, r3
 801630c:	f7ea f99c 	bl	8000648 <__aeabi_dmul>
 8016310:	a37d      	add	r3, pc, #500	@ (adr r3, 8016508 <__ieee754_pow+0x730>)
 8016312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016316:	4604      	mov	r4, r0
 8016318:	460d      	mov	r5, r1
 801631a:	f7ea f995 	bl	8000648 <__aeabi_dmul>
 801631e:	a37c      	add	r3, pc, #496	@ (adr r3, 8016510 <__ieee754_pow+0x738>)
 8016320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016324:	f7e9 ffda 	bl	80002dc <__adddf3>
 8016328:	4622      	mov	r2, r4
 801632a:	462b      	mov	r3, r5
 801632c:	f7ea f98c 	bl	8000648 <__aeabi_dmul>
 8016330:	a379      	add	r3, pc, #484	@ (adr r3, 8016518 <__ieee754_pow+0x740>)
 8016332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016336:	f7e9 ffd1 	bl	80002dc <__adddf3>
 801633a:	4622      	mov	r2, r4
 801633c:	462b      	mov	r3, r5
 801633e:	f7ea f983 	bl	8000648 <__aeabi_dmul>
 8016342:	a377      	add	r3, pc, #476	@ (adr r3, 8016520 <__ieee754_pow+0x748>)
 8016344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016348:	f7e9 ffc8 	bl	80002dc <__adddf3>
 801634c:	4622      	mov	r2, r4
 801634e:	462b      	mov	r3, r5
 8016350:	f7ea f97a 	bl	8000648 <__aeabi_dmul>
 8016354:	a374      	add	r3, pc, #464	@ (adr r3, 8016528 <__ieee754_pow+0x750>)
 8016356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801635a:	f7e9 ffbf 	bl	80002dc <__adddf3>
 801635e:	4622      	mov	r2, r4
 8016360:	462b      	mov	r3, r5
 8016362:	f7ea f971 	bl	8000648 <__aeabi_dmul>
 8016366:	a372      	add	r3, pc, #456	@ (adr r3, 8016530 <__ieee754_pow+0x758>)
 8016368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801636c:	f7e9 ffb6 	bl	80002dc <__adddf3>
 8016370:	4622      	mov	r2, r4
 8016372:	4606      	mov	r6, r0
 8016374:	460f      	mov	r7, r1
 8016376:	462b      	mov	r3, r5
 8016378:	4620      	mov	r0, r4
 801637a:	4629      	mov	r1, r5
 801637c:	f7ea f964 	bl	8000648 <__aeabi_dmul>
 8016380:	4602      	mov	r2, r0
 8016382:	460b      	mov	r3, r1
 8016384:	4630      	mov	r0, r6
 8016386:	4639      	mov	r1, r7
 8016388:	f7ea f95e 	bl	8000648 <__aeabi_dmul>
 801638c:	465a      	mov	r2, fp
 801638e:	4604      	mov	r4, r0
 8016390:	460d      	mov	r5, r1
 8016392:	464b      	mov	r3, r9
 8016394:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016398:	f7e9 ffa0 	bl	80002dc <__adddf3>
 801639c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80163a0:	f7ea f952 	bl	8000648 <__aeabi_dmul>
 80163a4:	4622      	mov	r2, r4
 80163a6:	462b      	mov	r3, r5
 80163a8:	f7e9 ff98 	bl	80002dc <__adddf3>
 80163ac:	465a      	mov	r2, fp
 80163ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80163b2:	464b      	mov	r3, r9
 80163b4:	4658      	mov	r0, fp
 80163b6:	4649      	mov	r1, r9
 80163b8:	f7ea f946 	bl	8000648 <__aeabi_dmul>
 80163bc:	4b6a      	ldr	r3, [pc, #424]	@ (8016568 <__ieee754_pow+0x790>)
 80163be:	2200      	movs	r2, #0
 80163c0:	4606      	mov	r6, r0
 80163c2:	460f      	mov	r7, r1
 80163c4:	f7e9 ff8a 	bl	80002dc <__adddf3>
 80163c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80163cc:	f7e9 ff86 	bl	80002dc <__adddf3>
 80163d0:	46d8      	mov	r8, fp
 80163d2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80163d6:	460d      	mov	r5, r1
 80163d8:	465a      	mov	r2, fp
 80163da:	460b      	mov	r3, r1
 80163dc:	4640      	mov	r0, r8
 80163de:	4649      	mov	r1, r9
 80163e0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80163e4:	f7ea f930 	bl	8000648 <__aeabi_dmul>
 80163e8:	465c      	mov	r4, fp
 80163ea:	4680      	mov	r8, r0
 80163ec:	4689      	mov	r9, r1
 80163ee:	4b5e      	ldr	r3, [pc, #376]	@ (8016568 <__ieee754_pow+0x790>)
 80163f0:	2200      	movs	r2, #0
 80163f2:	4620      	mov	r0, r4
 80163f4:	4629      	mov	r1, r5
 80163f6:	f7e9 ff6f 	bl	80002d8 <__aeabi_dsub>
 80163fa:	4632      	mov	r2, r6
 80163fc:	463b      	mov	r3, r7
 80163fe:	f7e9 ff6b 	bl	80002d8 <__aeabi_dsub>
 8016402:	4602      	mov	r2, r0
 8016404:	460b      	mov	r3, r1
 8016406:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801640a:	f7e9 ff65 	bl	80002d8 <__aeabi_dsub>
 801640e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016412:	f7ea f919 	bl	8000648 <__aeabi_dmul>
 8016416:	4622      	mov	r2, r4
 8016418:	4606      	mov	r6, r0
 801641a:	460f      	mov	r7, r1
 801641c:	462b      	mov	r3, r5
 801641e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016422:	f7ea f911 	bl	8000648 <__aeabi_dmul>
 8016426:	4602      	mov	r2, r0
 8016428:	460b      	mov	r3, r1
 801642a:	4630      	mov	r0, r6
 801642c:	4639      	mov	r1, r7
 801642e:	f7e9 ff55 	bl	80002dc <__adddf3>
 8016432:	4606      	mov	r6, r0
 8016434:	460f      	mov	r7, r1
 8016436:	4602      	mov	r2, r0
 8016438:	460b      	mov	r3, r1
 801643a:	4640      	mov	r0, r8
 801643c:	4649      	mov	r1, r9
 801643e:	f7e9 ff4d 	bl	80002dc <__adddf3>
 8016442:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8016446:	a33c      	add	r3, pc, #240	@ (adr r3, 8016538 <__ieee754_pow+0x760>)
 8016448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801644c:	4658      	mov	r0, fp
 801644e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8016452:	460d      	mov	r5, r1
 8016454:	f7ea f8f8 	bl	8000648 <__aeabi_dmul>
 8016458:	465c      	mov	r4, fp
 801645a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801645e:	4642      	mov	r2, r8
 8016460:	464b      	mov	r3, r9
 8016462:	4620      	mov	r0, r4
 8016464:	4629      	mov	r1, r5
 8016466:	f7e9 ff37 	bl	80002d8 <__aeabi_dsub>
 801646a:	4602      	mov	r2, r0
 801646c:	460b      	mov	r3, r1
 801646e:	4630      	mov	r0, r6
 8016470:	4639      	mov	r1, r7
 8016472:	f7e9 ff31 	bl	80002d8 <__aeabi_dsub>
 8016476:	a332      	add	r3, pc, #200	@ (adr r3, 8016540 <__ieee754_pow+0x768>)
 8016478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801647c:	f7ea f8e4 	bl	8000648 <__aeabi_dmul>
 8016480:	a331      	add	r3, pc, #196	@ (adr r3, 8016548 <__ieee754_pow+0x770>)
 8016482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016486:	4606      	mov	r6, r0
 8016488:	460f      	mov	r7, r1
 801648a:	4620      	mov	r0, r4
 801648c:	4629      	mov	r1, r5
 801648e:	f7ea f8db 	bl	8000648 <__aeabi_dmul>
 8016492:	4602      	mov	r2, r0
 8016494:	460b      	mov	r3, r1
 8016496:	4630      	mov	r0, r6
 8016498:	4639      	mov	r1, r7
 801649a:	f7e9 ff1f 	bl	80002dc <__adddf3>
 801649e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80164a0:	4b32      	ldr	r3, [pc, #200]	@ (801656c <__ieee754_pow+0x794>)
 80164a2:	4413      	add	r3, r2
 80164a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164a8:	f7e9 ff18 	bl	80002dc <__adddf3>
 80164ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80164b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80164b2:	f7ea f85f 	bl	8000574 <__aeabi_i2d>
 80164b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80164b8:	4b2d      	ldr	r3, [pc, #180]	@ (8016570 <__ieee754_pow+0x798>)
 80164ba:	4413      	add	r3, r2
 80164bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80164c0:	4606      	mov	r6, r0
 80164c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80164c6:	460f      	mov	r7, r1
 80164c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80164cc:	f7e9 ff06 	bl	80002dc <__adddf3>
 80164d0:	4642      	mov	r2, r8
 80164d2:	464b      	mov	r3, r9
 80164d4:	f7e9 ff02 	bl	80002dc <__adddf3>
 80164d8:	4632      	mov	r2, r6
 80164da:	463b      	mov	r3, r7
 80164dc:	f7e9 fefe 	bl	80002dc <__adddf3>
 80164e0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80164e4:	4632      	mov	r2, r6
 80164e6:	463b      	mov	r3, r7
 80164e8:	4658      	mov	r0, fp
 80164ea:	460d      	mov	r5, r1
 80164ec:	f7e9 fef4 	bl	80002d8 <__aeabi_dsub>
 80164f0:	4642      	mov	r2, r8
 80164f2:	464b      	mov	r3, r9
 80164f4:	f7e9 fef0 	bl	80002d8 <__aeabi_dsub>
 80164f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80164fc:	f7e9 feec 	bl	80002d8 <__aeabi_dsub>
 8016500:	465c      	mov	r4, fp
 8016502:	4602      	mov	r2, r0
 8016504:	e036      	b.n	8016574 <__ieee754_pow+0x79c>
 8016506:	bf00      	nop
 8016508:	4a454eef 	.word	0x4a454eef
 801650c:	3fca7e28 	.word	0x3fca7e28
 8016510:	93c9db65 	.word	0x93c9db65
 8016514:	3fcd864a 	.word	0x3fcd864a
 8016518:	a91d4101 	.word	0xa91d4101
 801651c:	3fd17460 	.word	0x3fd17460
 8016520:	518f264d 	.word	0x518f264d
 8016524:	3fd55555 	.word	0x3fd55555
 8016528:	db6fabff 	.word	0xdb6fabff
 801652c:	3fdb6db6 	.word	0x3fdb6db6
 8016530:	33333303 	.word	0x33333303
 8016534:	3fe33333 	.word	0x3fe33333
 8016538:	e0000000 	.word	0xe0000000
 801653c:	3feec709 	.word	0x3feec709
 8016540:	dc3a03fd 	.word	0xdc3a03fd
 8016544:	3feec709 	.word	0x3feec709
 8016548:	145b01f5 	.word	0x145b01f5
 801654c:	be3e2fe0 	.word	0xbe3e2fe0
 8016550:	7ff00000 	.word	0x7ff00000
 8016554:	43400000 	.word	0x43400000
 8016558:	0003988e 	.word	0x0003988e
 801655c:	000bb679 	.word	0x000bb679
 8016560:	08017210 	.word	0x08017210
 8016564:	3ff00000 	.word	0x3ff00000
 8016568:	40080000 	.word	0x40080000
 801656c:	080171f0 	.word	0x080171f0
 8016570:	08017200 	.word	0x08017200
 8016574:	460b      	mov	r3, r1
 8016576:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801657a:	e5d7      	b.n	801612c <__ieee754_pow+0x354>
 801657c:	f04f 0a01 	mov.w	sl, #1
 8016580:	e65e      	b.n	8016240 <__ieee754_pow+0x468>
 8016582:	a3b4      	add	r3, pc, #720	@ (adr r3, 8016854 <__ieee754_pow+0xa7c>)
 8016584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016588:	4630      	mov	r0, r6
 801658a:	4639      	mov	r1, r7
 801658c:	f7e9 fea6 	bl	80002dc <__adddf3>
 8016590:	4642      	mov	r2, r8
 8016592:	e9cd 0100 	strd	r0, r1, [sp]
 8016596:	464b      	mov	r3, r9
 8016598:	4620      	mov	r0, r4
 801659a:	4629      	mov	r1, r5
 801659c:	f7e9 fe9c 	bl	80002d8 <__aeabi_dsub>
 80165a0:	4602      	mov	r2, r0
 80165a2:	460b      	mov	r3, r1
 80165a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80165a8:	f7ea fade 	bl	8000b68 <__aeabi_dcmpgt>
 80165ac:	2800      	cmp	r0, #0
 80165ae:	f47f ae00 	bne.w	80161b2 <__ieee754_pow+0x3da>
 80165b2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80165b6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80165ba:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80165be:	fa43 fa0a 	asr.w	sl, r3, sl
 80165c2:	44da      	add	sl, fp
 80165c4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80165c8:	489d      	ldr	r0, [pc, #628]	@ (8016840 <__ieee754_pow+0xa68>)
 80165ca:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80165ce:	4108      	asrs	r0, r1
 80165d0:	ea00 030a 	and.w	r3, r0, sl
 80165d4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80165d8:	f1c1 0114 	rsb	r1, r1, #20
 80165dc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80165e0:	fa4a fa01 	asr.w	sl, sl, r1
 80165e4:	f1bb 0f00 	cmp.w	fp, #0
 80165e8:	4640      	mov	r0, r8
 80165ea:	4649      	mov	r1, r9
 80165ec:	f04f 0200 	mov.w	r2, #0
 80165f0:	bfb8      	it	lt
 80165f2:	f1ca 0a00 	rsblt	sl, sl, #0
 80165f6:	f7e9 fe6f 	bl	80002d8 <__aeabi_dsub>
 80165fa:	4680      	mov	r8, r0
 80165fc:	4689      	mov	r9, r1
 80165fe:	4632      	mov	r2, r6
 8016600:	463b      	mov	r3, r7
 8016602:	4640      	mov	r0, r8
 8016604:	4649      	mov	r1, r9
 8016606:	f7e9 fe69 	bl	80002dc <__adddf3>
 801660a:	2400      	movs	r4, #0
 801660c:	a37c      	add	r3, pc, #496	@ (adr r3, 8016800 <__ieee754_pow+0xa28>)
 801660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016612:	4620      	mov	r0, r4
 8016614:	460d      	mov	r5, r1
 8016616:	f7ea f817 	bl	8000648 <__aeabi_dmul>
 801661a:	4642      	mov	r2, r8
 801661c:	e9cd 0100 	strd	r0, r1, [sp]
 8016620:	464b      	mov	r3, r9
 8016622:	4620      	mov	r0, r4
 8016624:	4629      	mov	r1, r5
 8016626:	f7e9 fe57 	bl	80002d8 <__aeabi_dsub>
 801662a:	4602      	mov	r2, r0
 801662c:	460b      	mov	r3, r1
 801662e:	4630      	mov	r0, r6
 8016630:	4639      	mov	r1, r7
 8016632:	f7e9 fe51 	bl	80002d8 <__aeabi_dsub>
 8016636:	a374      	add	r3, pc, #464	@ (adr r3, 8016808 <__ieee754_pow+0xa30>)
 8016638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801663c:	f7ea f804 	bl	8000648 <__aeabi_dmul>
 8016640:	a373      	add	r3, pc, #460	@ (adr r3, 8016810 <__ieee754_pow+0xa38>)
 8016642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016646:	4680      	mov	r8, r0
 8016648:	4689      	mov	r9, r1
 801664a:	4620      	mov	r0, r4
 801664c:	4629      	mov	r1, r5
 801664e:	f7e9 fffb 	bl	8000648 <__aeabi_dmul>
 8016652:	4602      	mov	r2, r0
 8016654:	460b      	mov	r3, r1
 8016656:	4640      	mov	r0, r8
 8016658:	4649      	mov	r1, r9
 801665a:	f7e9 fe3f 	bl	80002dc <__adddf3>
 801665e:	4604      	mov	r4, r0
 8016660:	460d      	mov	r5, r1
 8016662:	4602      	mov	r2, r0
 8016664:	460b      	mov	r3, r1
 8016666:	e9dd 0100 	ldrd	r0, r1, [sp]
 801666a:	f7e9 fe37 	bl	80002dc <__adddf3>
 801666e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016672:	4680      	mov	r8, r0
 8016674:	4689      	mov	r9, r1
 8016676:	f7e9 fe2f 	bl	80002d8 <__aeabi_dsub>
 801667a:	4602      	mov	r2, r0
 801667c:	460b      	mov	r3, r1
 801667e:	4620      	mov	r0, r4
 8016680:	4629      	mov	r1, r5
 8016682:	f7e9 fe29 	bl	80002d8 <__aeabi_dsub>
 8016686:	4642      	mov	r2, r8
 8016688:	4606      	mov	r6, r0
 801668a:	460f      	mov	r7, r1
 801668c:	464b      	mov	r3, r9
 801668e:	4640      	mov	r0, r8
 8016690:	4649      	mov	r1, r9
 8016692:	f7e9 ffd9 	bl	8000648 <__aeabi_dmul>
 8016696:	a360      	add	r3, pc, #384	@ (adr r3, 8016818 <__ieee754_pow+0xa40>)
 8016698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801669c:	4604      	mov	r4, r0
 801669e:	460d      	mov	r5, r1
 80166a0:	f7e9 ffd2 	bl	8000648 <__aeabi_dmul>
 80166a4:	a35e      	add	r3, pc, #376	@ (adr r3, 8016820 <__ieee754_pow+0xa48>)
 80166a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166aa:	f7e9 fe15 	bl	80002d8 <__aeabi_dsub>
 80166ae:	4622      	mov	r2, r4
 80166b0:	462b      	mov	r3, r5
 80166b2:	f7e9 ffc9 	bl	8000648 <__aeabi_dmul>
 80166b6:	a35c      	add	r3, pc, #368	@ (adr r3, 8016828 <__ieee754_pow+0xa50>)
 80166b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166bc:	f7e9 fe0e 	bl	80002dc <__adddf3>
 80166c0:	4622      	mov	r2, r4
 80166c2:	462b      	mov	r3, r5
 80166c4:	f7e9 ffc0 	bl	8000648 <__aeabi_dmul>
 80166c8:	a359      	add	r3, pc, #356	@ (adr r3, 8016830 <__ieee754_pow+0xa58>)
 80166ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ce:	f7e9 fe03 	bl	80002d8 <__aeabi_dsub>
 80166d2:	4622      	mov	r2, r4
 80166d4:	462b      	mov	r3, r5
 80166d6:	f7e9 ffb7 	bl	8000648 <__aeabi_dmul>
 80166da:	a357      	add	r3, pc, #348	@ (adr r3, 8016838 <__ieee754_pow+0xa60>)
 80166dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166e0:	f7e9 fdfc 	bl	80002dc <__adddf3>
 80166e4:	4622      	mov	r2, r4
 80166e6:	462b      	mov	r3, r5
 80166e8:	f7e9 ffae 	bl	8000648 <__aeabi_dmul>
 80166ec:	4602      	mov	r2, r0
 80166ee:	460b      	mov	r3, r1
 80166f0:	4640      	mov	r0, r8
 80166f2:	4649      	mov	r1, r9
 80166f4:	f7e9 fdf0 	bl	80002d8 <__aeabi_dsub>
 80166f8:	4604      	mov	r4, r0
 80166fa:	460d      	mov	r5, r1
 80166fc:	4602      	mov	r2, r0
 80166fe:	460b      	mov	r3, r1
 8016700:	4640      	mov	r0, r8
 8016702:	4649      	mov	r1, r9
 8016704:	f7e9 ffa0 	bl	8000648 <__aeabi_dmul>
 8016708:	2200      	movs	r2, #0
 801670a:	e9cd 0100 	strd	r0, r1, [sp]
 801670e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8016712:	4620      	mov	r0, r4
 8016714:	4629      	mov	r1, r5
 8016716:	f7e9 fddf 	bl	80002d8 <__aeabi_dsub>
 801671a:	4602      	mov	r2, r0
 801671c:	460b      	mov	r3, r1
 801671e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016722:	f7ea f8bb 	bl	800089c <__aeabi_ddiv>
 8016726:	4632      	mov	r2, r6
 8016728:	4604      	mov	r4, r0
 801672a:	460d      	mov	r5, r1
 801672c:	463b      	mov	r3, r7
 801672e:	4640      	mov	r0, r8
 8016730:	4649      	mov	r1, r9
 8016732:	f7e9 ff89 	bl	8000648 <__aeabi_dmul>
 8016736:	4632      	mov	r2, r6
 8016738:	463b      	mov	r3, r7
 801673a:	f7e9 fdcf 	bl	80002dc <__adddf3>
 801673e:	4602      	mov	r2, r0
 8016740:	460b      	mov	r3, r1
 8016742:	4620      	mov	r0, r4
 8016744:	4629      	mov	r1, r5
 8016746:	f7e9 fdc7 	bl	80002d8 <__aeabi_dsub>
 801674a:	4642      	mov	r2, r8
 801674c:	464b      	mov	r3, r9
 801674e:	f7e9 fdc3 	bl	80002d8 <__aeabi_dsub>
 8016752:	460b      	mov	r3, r1
 8016754:	4602      	mov	r2, r0
 8016756:	493b      	ldr	r1, [pc, #236]	@ (8016844 <__ieee754_pow+0xa6c>)
 8016758:	2000      	movs	r0, #0
 801675a:	f7e9 fdbd 	bl	80002d8 <__aeabi_dsub>
 801675e:	ec41 0b10 	vmov	d0, r0, r1
 8016762:	ee10 3a90 	vmov	r3, s1
 8016766:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801676a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801676e:	da30      	bge.n	80167d2 <__ieee754_pow+0x9fa>
 8016770:	4650      	mov	r0, sl
 8016772:	f000 f875 	bl	8016860 <scalbn>
 8016776:	ec51 0b10 	vmov	r0, r1, d0
 801677a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801677e:	f7ff bbd2 	b.w	8015f26 <__ieee754_pow+0x14e>
 8016782:	4c31      	ldr	r4, [pc, #196]	@ (8016848 <__ieee754_pow+0xa70>)
 8016784:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8016788:	42a3      	cmp	r3, r4
 801678a:	d91a      	bls.n	80167c2 <__ieee754_pow+0x9ea>
 801678c:	4b2f      	ldr	r3, [pc, #188]	@ (801684c <__ieee754_pow+0xa74>)
 801678e:	440b      	add	r3, r1
 8016790:	4303      	orrs	r3, r0
 8016792:	d009      	beq.n	80167a8 <__ieee754_pow+0x9d0>
 8016794:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016798:	2200      	movs	r2, #0
 801679a:	2300      	movs	r3, #0
 801679c:	f7ea f9c6 	bl	8000b2c <__aeabi_dcmplt>
 80167a0:	3800      	subs	r0, #0
 80167a2:	bf18      	it	ne
 80167a4:	2001      	movne	r0, #1
 80167a6:	e42b      	b.n	8016000 <__ieee754_pow+0x228>
 80167a8:	4642      	mov	r2, r8
 80167aa:	464b      	mov	r3, r9
 80167ac:	f7e9 fd94 	bl	80002d8 <__aeabi_dsub>
 80167b0:	4632      	mov	r2, r6
 80167b2:	463b      	mov	r3, r7
 80167b4:	f7ea f9ce 	bl	8000b54 <__aeabi_dcmpge>
 80167b8:	2800      	cmp	r0, #0
 80167ba:	d1eb      	bne.n	8016794 <__ieee754_pow+0x9bc>
 80167bc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801685c <__ieee754_pow+0xa84>
 80167c0:	e6f7      	b.n	80165b2 <__ieee754_pow+0x7da>
 80167c2:	469a      	mov	sl, r3
 80167c4:	4b22      	ldr	r3, [pc, #136]	@ (8016850 <__ieee754_pow+0xa78>)
 80167c6:	459a      	cmp	sl, r3
 80167c8:	f63f aef3 	bhi.w	80165b2 <__ieee754_pow+0x7da>
 80167cc:	f8dd a010 	ldr.w	sl, [sp, #16]
 80167d0:	e715      	b.n	80165fe <__ieee754_pow+0x826>
 80167d2:	ec51 0b10 	vmov	r0, r1, d0
 80167d6:	4619      	mov	r1, r3
 80167d8:	e7cf      	b.n	801677a <__ieee754_pow+0x9a2>
 80167da:	491a      	ldr	r1, [pc, #104]	@ (8016844 <__ieee754_pow+0xa6c>)
 80167dc:	2000      	movs	r0, #0
 80167de:	f7ff bb18 	b.w	8015e12 <__ieee754_pow+0x3a>
 80167e2:	2000      	movs	r0, #0
 80167e4:	2100      	movs	r1, #0
 80167e6:	f7ff bb14 	b.w	8015e12 <__ieee754_pow+0x3a>
 80167ea:	4630      	mov	r0, r6
 80167ec:	4639      	mov	r1, r7
 80167ee:	f7ff bb10 	b.w	8015e12 <__ieee754_pow+0x3a>
 80167f2:	460c      	mov	r4, r1
 80167f4:	f7ff bb5e 	b.w	8015eb4 <__ieee754_pow+0xdc>
 80167f8:	2400      	movs	r4, #0
 80167fa:	f7ff bb49 	b.w	8015e90 <__ieee754_pow+0xb8>
 80167fe:	bf00      	nop
 8016800:	00000000 	.word	0x00000000
 8016804:	3fe62e43 	.word	0x3fe62e43
 8016808:	fefa39ef 	.word	0xfefa39ef
 801680c:	3fe62e42 	.word	0x3fe62e42
 8016810:	0ca86c39 	.word	0x0ca86c39
 8016814:	be205c61 	.word	0xbe205c61
 8016818:	72bea4d0 	.word	0x72bea4d0
 801681c:	3e663769 	.word	0x3e663769
 8016820:	c5d26bf1 	.word	0xc5d26bf1
 8016824:	3ebbbd41 	.word	0x3ebbbd41
 8016828:	af25de2c 	.word	0xaf25de2c
 801682c:	3f11566a 	.word	0x3f11566a
 8016830:	16bebd93 	.word	0x16bebd93
 8016834:	3f66c16c 	.word	0x3f66c16c
 8016838:	5555553e 	.word	0x5555553e
 801683c:	3fc55555 	.word	0x3fc55555
 8016840:	fff00000 	.word	0xfff00000
 8016844:	3ff00000 	.word	0x3ff00000
 8016848:	4090cbff 	.word	0x4090cbff
 801684c:	3f6f3400 	.word	0x3f6f3400
 8016850:	3fe00000 	.word	0x3fe00000
 8016854:	652b82fe 	.word	0x652b82fe
 8016858:	3c971547 	.word	0x3c971547
 801685c:	4090cc00 	.word	0x4090cc00

08016860 <scalbn>:
 8016860:	b570      	push	{r4, r5, r6, lr}
 8016862:	ec55 4b10 	vmov	r4, r5, d0
 8016866:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801686a:	4606      	mov	r6, r0
 801686c:	462b      	mov	r3, r5
 801686e:	b991      	cbnz	r1, 8016896 <scalbn+0x36>
 8016870:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8016874:	4323      	orrs	r3, r4
 8016876:	d03d      	beq.n	80168f4 <scalbn+0x94>
 8016878:	4b35      	ldr	r3, [pc, #212]	@ (8016950 <scalbn+0xf0>)
 801687a:	4620      	mov	r0, r4
 801687c:	4629      	mov	r1, r5
 801687e:	2200      	movs	r2, #0
 8016880:	f7e9 fee2 	bl	8000648 <__aeabi_dmul>
 8016884:	4b33      	ldr	r3, [pc, #204]	@ (8016954 <scalbn+0xf4>)
 8016886:	429e      	cmp	r6, r3
 8016888:	4604      	mov	r4, r0
 801688a:	460d      	mov	r5, r1
 801688c:	da0f      	bge.n	80168ae <scalbn+0x4e>
 801688e:	a328      	add	r3, pc, #160	@ (adr r3, 8016930 <scalbn+0xd0>)
 8016890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016894:	e01e      	b.n	80168d4 <scalbn+0x74>
 8016896:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801689a:	4291      	cmp	r1, r2
 801689c:	d10b      	bne.n	80168b6 <scalbn+0x56>
 801689e:	4622      	mov	r2, r4
 80168a0:	4620      	mov	r0, r4
 80168a2:	4629      	mov	r1, r5
 80168a4:	f7e9 fd1a 	bl	80002dc <__adddf3>
 80168a8:	4604      	mov	r4, r0
 80168aa:	460d      	mov	r5, r1
 80168ac:	e022      	b.n	80168f4 <scalbn+0x94>
 80168ae:	460b      	mov	r3, r1
 80168b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80168b4:	3936      	subs	r1, #54	@ 0x36
 80168b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80168ba:	4296      	cmp	r6, r2
 80168bc:	dd0d      	ble.n	80168da <scalbn+0x7a>
 80168be:	2d00      	cmp	r5, #0
 80168c0:	a11d      	add	r1, pc, #116	@ (adr r1, 8016938 <scalbn+0xd8>)
 80168c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168c6:	da02      	bge.n	80168ce <scalbn+0x6e>
 80168c8:	a11d      	add	r1, pc, #116	@ (adr r1, 8016940 <scalbn+0xe0>)
 80168ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168ce:	a31a      	add	r3, pc, #104	@ (adr r3, 8016938 <scalbn+0xd8>)
 80168d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168d4:	f7e9 feb8 	bl	8000648 <__aeabi_dmul>
 80168d8:	e7e6      	b.n	80168a8 <scalbn+0x48>
 80168da:	1872      	adds	r2, r6, r1
 80168dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80168e0:	428a      	cmp	r2, r1
 80168e2:	dcec      	bgt.n	80168be <scalbn+0x5e>
 80168e4:	2a00      	cmp	r2, #0
 80168e6:	dd08      	ble.n	80168fa <scalbn+0x9a>
 80168e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80168ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80168f0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80168f4:	ec45 4b10 	vmov	d0, r4, r5
 80168f8:	bd70      	pop	{r4, r5, r6, pc}
 80168fa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80168fe:	da08      	bge.n	8016912 <scalbn+0xb2>
 8016900:	2d00      	cmp	r5, #0
 8016902:	a10b      	add	r1, pc, #44	@ (adr r1, 8016930 <scalbn+0xd0>)
 8016904:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016908:	dac1      	bge.n	801688e <scalbn+0x2e>
 801690a:	a10f      	add	r1, pc, #60	@ (adr r1, 8016948 <scalbn+0xe8>)
 801690c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016910:	e7bd      	b.n	801688e <scalbn+0x2e>
 8016912:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016916:	3236      	adds	r2, #54	@ 0x36
 8016918:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801691c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016920:	4620      	mov	r0, r4
 8016922:	4b0d      	ldr	r3, [pc, #52]	@ (8016958 <scalbn+0xf8>)
 8016924:	4629      	mov	r1, r5
 8016926:	2200      	movs	r2, #0
 8016928:	e7d4      	b.n	80168d4 <scalbn+0x74>
 801692a:	bf00      	nop
 801692c:	f3af 8000 	nop.w
 8016930:	c2f8f359 	.word	0xc2f8f359
 8016934:	01a56e1f 	.word	0x01a56e1f
 8016938:	8800759c 	.word	0x8800759c
 801693c:	7e37e43c 	.word	0x7e37e43c
 8016940:	8800759c 	.word	0x8800759c
 8016944:	fe37e43c 	.word	0xfe37e43c
 8016948:	c2f8f359 	.word	0xc2f8f359
 801694c:	81a56e1f 	.word	0x81a56e1f
 8016950:	43500000 	.word	0x43500000
 8016954:	ffff3cb0 	.word	0xffff3cb0
 8016958:	3c900000 	.word	0x3c900000

0801695c <with_errno>:
 801695c:	b510      	push	{r4, lr}
 801695e:	ed2d 8b02 	vpush	{d8}
 8016962:	eeb0 8a40 	vmov.f32	s16, s0
 8016966:	eef0 8a60 	vmov.f32	s17, s1
 801696a:	4604      	mov	r4, r0
 801696c:	f7fa fea4 	bl	80116b8 <__errno>
 8016970:	eeb0 0a48 	vmov.f32	s0, s16
 8016974:	eef0 0a68 	vmov.f32	s1, s17
 8016978:	ecbd 8b02 	vpop	{d8}
 801697c:	6004      	str	r4, [r0, #0]
 801697e:	bd10      	pop	{r4, pc}

08016980 <xflow>:
 8016980:	4603      	mov	r3, r0
 8016982:	b507      	push	{r0, r1, r2, lr}
 8016984:	ec51 0b10 	vmov	r0, r1, d0
 8016988:	b183      	cbz	r3, 80169ac <xflow+0x2c>
 801698a:	4602      	mov	r2, r0
 801698c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016990:	e9cd 2300 	strd	r2, r3, [sp]
 8016994:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016998:	f7e9 fe56 	bl	8000648 <__aeabi_dmul>
 801699c:	ec41 0b10 	vmov	d0, r0, r1
 80169a0:	2022      	movs	r0, #34	@ 0x22
 80169a2:	b003      	add	sp, #12
 80169a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80169a8:	f7ff bfd8 	b.w	801695c <with_errno>
 80169ac:	4602      	mov	r2, r0
 80169ae:	460b      	mov	r3, r1
 80169b0:	e7ee      	b.n	8016990 <xflow+0x10>
 80169b2:	0000      	movs	r0, r0
 80169b4:	0000      	movs	r0, r0
	...

080169b8 <__math_uflow>:
 80169b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80169c0 <__math_uflow+0x8>
 80169bc:	f7ff bfe0 	b.w	8016980 <xflow>
 80169c0:	00000000 	.word	0x00000000
 80169c4:	10000000 	.word	0x10000000

080169c8 <__math_oflow>:
 80169c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80169d0 <__math_oflow+0x8>
 80169cc:	f7ff bfd8 	b.w	8016980 <xflow>
 80169d0:	00000000 	.word	0x00000000
 80169d4:	70000000 	.word	0x70000000

080169d8 <_init>:
 80169d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169da:	bf00      	nop
 80169dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169de:	bc08      	pop	{r3}
 80169e0:	469e      	mov	lr, r3
 80169e2:	4770      	bx	lr

080169e4 <_fini>:
 80169e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169e6:	bf00      	nop
 80169e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169ea:	bc08      	pop	{r3}
 80169ec:	469e      	mov	lr, r3
 80169ee:	4770      	bx	lr
