
Magisterka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a8c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  08016c70  08016c70  00017c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080174a0  080174a0  000193b8  2**0
                  CONTENTS
  4 .ARM          00000008  080174a0  080174a0  000184a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080174a8  080174a8  000193b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080174a8  080174a8  000184a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080174ac  080174ac  000184ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b8  20000000  080174b0  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002324  200003b8  08017868  000193b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200026dc  08017868  000196dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000193b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025a29  00000000  00000000  000193e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ee3  00000000  00000000  0003ee11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  00043cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000180f  00000000  00000000  00045c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d56d  00000000  00000000  0004743f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000267de  00000000  00000000  000749ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f256  00000000  00000000  0009b18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ba3e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fc0  00000000  00000000  001ba424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001c43e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200003b8 	.word	0x200003b8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08016c54 	.word	0x08016c54

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003bc 	.word	0x200003bc
 800021c:	08016c54 	.word	0x08016c54

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	0000      	movs	r0, r0
	...

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103e:	f003 fb52 	bl	80046e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001042:	f000 fcf1 	bl	8001a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001046:	f001 fb23 	bl	8002690 <MX_GPIO_Init>
  MX_DMA_Init();
 800104a:	f001 fad7 	bl	80025fc <MX_DMA_Init>
  MX_ADC3_Init();
 800104e:	f000 fdb1 	bl	8001bb4 <MX_ADC3_Init>
  MX_ADC4_Init();
 8001052:	f000 fe7b 	bl	8001d4c <MX_ADC4_Init>
  MX_ADC5_Init();
 8001056:	f000 fedf 	bl	8001e18 <MX_ADC5_Init>
  MX_DAC1_Init();
 800105a:	f000 ff63 	bl	8001f24 <MX_DAC1_Init>
  MX_DAC2_Init();
 800105e:	f000 ffad 	bl	8001fbc <MX_DAC2_Init>
  MX_TIM1_Init();
 8001062:	f000 ffe5 	bl	8002030 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001066:	f001 f96b 	bl	8002340 <MX_TIM8_Init>
  MX_UART4_Init();
 800106a:	f001 fa7b 	bl	8002564 <MX_UART4_Init>
  MX_ADC1_Init();
 800106e:	f000 fd29 	bl	8001ac4 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001072:	f001 f877 	bl	8002164 <MX_TIM4_Init>
  MX_USB_Device_Init();
 8001076:	f00f f9b9 	bl	80103ec <MX_USB_Device_Init>
  MX_TIM15_Init();
 800107a:	f001 f9fb 	bl	8002474 <MX_TIM15_Init>
  MX_TIM16_Init();
 800107e:	f001 fa4b 	bl	8002518 <MX_TIM16_Init>
  MX_TIM7_Init();
 8001082:	f001 f927 	bl	80022d4 <MX_TIM7_Init>
  MX_TIM6_Init();
 8001086:	f001 f8e5 	bl	8002254 <MX_TIM6_Init>
  MX_CORDIC_Init();
 800108a:	f000 ff37 	bl	8001efc <MX_CORDIC_Init>
  /* USER CODE BEGIN 2 */

  sCordicConfig.Function   = CORDIC_FUNCTION_SQUAREROOT;       /* Compute sine (and cosine) */
 800108e:	4b85      	ldr	r3, [pc, #532]	@ (80012a4 <main+0x26c>)
 8001090:	2209      	movs	r2, #9
 8001092:	601a      	str	r2, [r3, #0]
  sCordicConfig.Precision  = CORDIC_PRECISION_6CYCLES;    /* Maximum precision (24 iterations) */
 8001094:	4b83      	ldr	r3, [pc, #524]	@ (80012a4 <main+0x26c>)
 8001096:	2260      	movs	r2, #96	@ 0x60
 8001098:	619a      	str	r2, [r3, #24]
  sCordicConfig.Scale      = CORDIC_SCALE_0;              /* No additional scaling */
 800109a:	4b82      	ldr	r3, [pc, #520]	@ (80012a4 <main+0x26c>)
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
  sCordicConfig.NbWrite    = CORDIC_NBWRITE_1;            /* One input (angle); implicit modulus = 1 */
 80010a0:	4b80      	ldr	r3, [pc, #512]	@ (80012a4 <main+0x26c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  sCordicConfig.NbRead     = CORDIC_NBREAD_1;             /* Two outputs (sine and cosine) */
 80010a6:	4b7f      	ldr	r3, [pc, #508]	@ (80012a4 <main+0x26c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
  sCordicConfig.InSize     = CORDIC_INSIZE_32BITS;        /* 32-bit input (Q1.31 format) */
 80010ac:	4b7d      	ldr	r3, [pc, #500]	@ (80012a4 <main+0x26c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  sCordicConfig.OutSize    = CORDIC_OUTSIZE_32BITS;       /* 32-bit output (Q1.31 format) */
 80010b2:	4b7c      	ldr	r3, [pc, #496]	@ (80012a4 <main+0x26c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]


  if (HAL_CORDIC_Configure(&hcordic, &sCordicConfig) != HAL_OK)
 80010b8:	497a      	ldr	r1, [pc, #488]	@ (80012a4 <main+0x26c>)
 80010ba:	487b      	ldr	r0, [pc, #492]	@ (80012a8 <main+0x270>)
 80010bc:	f005 f846 	bl	800614c <HAL_CORDIC_Configure>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <main+0x92>
    {
      /* Configuration Error */
      Error_Handler();
 80010c6:	f002 fd09 	bl	8003adc <Error_Handler>

  while (1)
  {


	  	  	  	  checkfaults = Check_Faults();
 80010ca:	f001 fd6f 	bl	8002bac <Check_Faults>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b76      	ldr	r3, [pc, #472]	@ (80012ac <main+0x274>)
 80010d4:	701a      	strb	r2, [r3, #0]

	  	  	  	  if (dataReceivedFlag) {
 80010d6:	4b76      	ldr	r3, [pc, #472]	@ (80012b0 <main+0x278>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <main+0xb2>
	  	  	  	      // Process the data
	  	  	  	      ParseUSBCommand();  // Function to handle the received command
 80010e0:	f002 f8fc 	bl	80032dc <ParseUSBCommand>

	  	  	  	      // Clear the flag after processing
	  	  	  	      dataReceivedFlag = 0;
 80010e4:	4b72      	ldr	r3, [pc, #456]	@ (80012b0 <main+0x278>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
	  	  	  	  }

	  	  	  	  interlock = HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin);
 80010ea:	2104      	movs	r1, #4
 80010ec:	4871      	ldr	r0, [pc, #452]	@ (80012b4 <main+0x27c>)
 80010ee:	f006 f917 	bl	8007320 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b70      	ldr	r3, [pc, #448]	@ (80012b8 <main+0x280>)
 80010f8:	701a      	strb	r2, [r3, #0]

	  	          if (interlock &&  start_program && !(checkfaults)) {
 80010fa:	4b6f      	ldr	r3, [pc, #444]	@ (80012b8 <main+0x280>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00e      	beq.n	8001120 <main+0xe8>
 8001102:	4b6e      	ldr	r3, [pc, #440]	@ (80012bc <main+0x284>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00a      	beq.n	8001120 <main+0xe8>
 800110a:	4b68      	ldr	r3, [pc, #416]	@ (80012ac <main+0x274>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d106      	bne.n	8001120 <main+0xe8>
	  	        	//USB_SendString("State: EVENT start_program \r\n");
	  	              event = EVENT_START;
 8001112:	4b6b      	ldr	r3, [pc, #428]	@ (80012c0 <main+0x288>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
	  	              start_program = 0;
 8001118:	4b68      	ldr	r3, [pc, #416]	@ (80012bc <main+0x284>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
 800111e:	e019      	b.n	8001154 <main+0x11c>
	  	          }else if (interlock &&  stop_program && !(checkfaults)) {
 8001120:	4b65      	ldr	r3, [pc, #404]	@ (80012b8 <main+0x280>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00e      	beq.n	8001146 <main+0x10e>
 8001128:	4b66      	ldr	r3, [pc, #408]	@ (80012c4 <main+0x28c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00a      	beq.n	8001146 <main+0x10e>
 8001130:	4b5e      	ldr	r3, [pc, #376]	@ (80012ac <main+0x274>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d106      	bne.n	8001146 <main+0x10e>
		  	        	//USB_SendString("State: EVENT start_program \r\n");
		  	              event = EVENT_SHUTDOWN;
 8001138:	4b61      	ldr	r3, [pc, #388]	@ (80012c0 <main+0x288>)
 800113a:	2203      	movs	r2, #3
 800113c:	701a      	strb	r2, [r3, #0]
		  	              stop_program = 0;
 800113e:	4b61      	ldr	r3, [pc, #388]	@ (80012c4 <main+0x28c>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e006      	b.n	8001154 <main+0x11c>
		  	          }
	  	          else if (clear_fault) {
 8001146:	4b60      	ldr	r3, [pc, #384]	@ (80012c8 <main+0x290>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <main+0x11c>
	  	        	  /* clear fault condition */
	  	              event = EVENT_CLEAR_FAULT;
 800114e:	4b5c      	ldr	r3, [pc, #368]	@ (80012c0 <main+0x288>)
 8001150:	2202      	movs	r2, #2
 8001152:	701a      	strb	r2, [r3, #0]
	  	          }

	  	         if (!interlock || checkfaults /* fault condition */)
 8001154:	4b58      	ldr	r3, [pc, #352]	@ (80012b8 <main+0x280>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <main+0x12c>
 800115c:	4b53      	ldr	r3, [pc, #332]	@ (80012ac <main+0x274>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <main+0x132>
	  	       	 {
	  	       	  	event = EVENT_FAULT;
 8001164:	4b56      	ldr	r3, [pc, #344]	@ (80012c0 <main+0x288>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
	  	       	 }

	  	          // Handle the event and update the state
	  	          currentState = handle_event(currentState, event);
 800116a:	4b58      	ldr	r3, [pc, #352]	@ (80012cc <main+0x294>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	4a54      	ldr	r2, [pc, #336]	@ (80012c0 <main+0x288>)
 8001170:	7812      	ldrb	r2, [r2, #0]
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f001 fbd7 	bl	8002928 <handle_event>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	4b53      	ldr	r3, [pc, #332]	@ (80012cc <main+0x294>)
 8001180:	701a      	strb	r2, [r3, #0]

	  	          // Perform actions based on the current state
	  	          switch (currentState) {
 8001182:	4b52      	ldr	r3, [pc, #328]	@ (80012cc <main+0x294>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b04      	cmp	r3, #4
 8001188:	f200 840a 	bhi.w	80019a0 <main+0x968>
 800118c:	a201      	add	r2, pc, #4	@ (adr r2, 8001194 <main+0x15c>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	080011a9 	.word	0x080011a9
 8001198:	08001267 	.word	0x08001267
 800119c:	08001315 	.word	0x08001315
 80011a0:	0800188d 	.word	0x0800188d
 80011a4:	08001901 	.word	0x08001901
	  	              {
	  	            	//GPIOs
	  	            	//CUrrent Sensors OCD pin needed to go low in reset condition after fault event
	  	            	//HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_SET);
	  	            	//HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 80011a8:	2201      	movs	r2, #1
 80011aa:	2104      	movs	r1, #4
 80011ac:	4848      	ldr	r0, [pc, #288]	@ (80012d0 <main+0x298>)
 80011ae:	f006 f8cf 	bl	8007350 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP
 80011b2:	2200      	movs	r2, #0
 80011b4:	2120      	movs	r1, #32
 80011b6:	483f      	ldr	r0, [pc, #252]	@ (80012b4 <main+0x27c>)
 80011b8:	f006 f8ca 	bl	8007350 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	2120      	movs	r1, #32
 80011c0:	4844      	ldr	r0, [pc, #272]	@ (80012d4 <main+0x29c>)
 80011c2:	f006 f8c5 	bl	8007350 <HAL_GPIO_WritePin>
	  	            	HAL_Delay(1000);
 80011c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011ca:	f003 fafd 	bl	80047c8 <HAL_Delay>
	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2120      	movs	r1, #32
 80011d2:	4840      	ldr	r0, [pc, #256]	@ (80012d4 <main+0x29c>)
 80011d4:	f006 f8bc 	bl	8007350 <HAL_GPIO_WritePin>
	  	            	  // Start PWM for delay time transfer to FPGA
	  	            	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011d8:	2100      	movs	r1, #0
 80011da:	483f      	ldr	r0, [pc, #252]	@ (80012d8 <main+0x2a0>)
 80011dc:	f009 f816 	bl	800a20c <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80011e0:	2104      	movs	r1, #4
 80011e2:	483e      	ldr	r0, [pc, #248]	@ (80012dc <main+0x2a4>)
 80011e4:	f009 f812 	bl	800a20c <HAL_TIM_PWM_Start>

	  	            	  //DAC for  current reference
	  	            	  ///DAC1_OUT1 	- MAX1
	  	            	  //DAC1_OUT2 	- MAX2
	  	            	  //DAC2_OUT1	- MIN
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_1);
 80011e8:	2100      	movs	r1, #0
 80011ea:	483d      	ldr	r0, [pc, #244]	@ (80012e0 <main+0x2a8>)
 80011ec:	f005 f9e8 	bl	80065c0 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_2);
 80011f0:	2110      	movs	r1, #16
 80011f2:	483b      	ldr	r0, [pc, #236]	@ (80012e0 <main+0x2a8>)
 80011f4:	f005 f9e4 	bl	80065c0 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac2,DAC2_CHANNEL_1);
 80011f8:	2100      	movs	r1, #0
 80011fa:	483a      	ldr	r0, [pc, #232]	@ (80012e4 <main+0x2ac>)
 80011fc:	f005 f9e0 	bl	80065c0 <HAL_DAC_Start>

	  	            	//if( HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, BUFFER_SIZE, DAC_ALIGN_12B_R)!= HAL_OK) printf("error");
	  	            	//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);

	  	            	  // FAN PWM and 5s timer6 for check temperature and change duty cycle
	  	            	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001200:	2100      	movs	r1, #0
 8001202:	4839      	ldr	r0, [pc, #228]	@ (80012e8 <main+0x2b0>)
 8001204:	f009 f802 	bl	800a20c <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_Base_Start_IT(&htim6);
 8001208:	4838      	ldr	r0, [pc, #224]	@ (80012ec <main+0x2b4>)
 800120a:	f008 ff01 	bl	800a010 <HAL_TIM_Base_Start_IT>

	  	            	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800120e:	217f      	movs	r1, #127	@ 0x7f
 8001210:	4837      	ldr	r0, [pc, #220]	@ (80012f0 <main+0x2b8>)
 8001212:	f004 fdff 	bl	8005e14 <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8001216:	217f      	movs	r1, #127	@ 0x7f
 8001218:	4836      	ldr	r0, [pc, #216]	@ (80012f4 <main+0x2bc>)
 800121a:	f004 fdfb 	bl	8005e14 <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 800121e:	217f      	movs	r1, #127	@ 0x7f
 8001220:	4835      	ldr	r0, [pc, #212]	@ (80012f8 <main+0x2c0>)
 8001222:	f004 fdf7 	bl	8005e14 <HAL_ADCEx_Calibration_Start>

	  	            	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_dma_buffer, 5);
 8001226:	2205      	movs	r2, #5
 8001228:	4934      	ldr	r1, [pc, #208]	@ (80012fc <main+0x2c4>)
 800122a:	4831      	ldr	r0, [pc, #196]	@ (80012f0 <main+0x2b8>)
 800122c:	f003 feee 	bl	800500c <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4_dma_buffer, 2);
 8001230:	2202      	movs	r2, #2
 8001232:	4933      	ldr	r1, [pc, #204]	@ (8001300 <main+0x2c8>)
 8001234:	482f      	ldr	r0, [pc, #188]	@ (80012f4 <main+0x2bc>)
 8001236:	f003 fee9 	bl	800500c <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adc5_dma_buffer, 10);
 800123a:	220a      	movs	r2, #10
 800123c:	4931      	ldr	r1, [pc, #196]	@ (8001304 <main+0x2cc>)
 800123e:	482e      	ldr	r0, [pc, #184]	@ (80012f8 <main+0x2c0>)
 8001240:	f003 fee4 	bl	800500c <HAL_ADC_Start_DMA>

	  	            	Set_PWM_DutyCycle(20);
 8001244:	2014      	movs	r0, #20
 8001246:	f001 fbc9 	bl	80029dc <Set_PWM_DutyCycle>

	  	            	current_sensor1_vref = adc3_dma_buffer[0];// reference for imax imin
 800124a:	4b2c      	ldr	r3, [pc, #176]	@ (80012fc <main+0x2c4>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	b29a      	uxth	r2, r3
 8001250:	4b2d      	ldr	r3, [pc, #180]	@ (8001308 <main+0x2d0>)
 8001252:	801a      	strh	r2, [r3, #0]
	  	            	current_sensor2_vref = adc3_dma_buffer[1];// reference for imax imin
 8001254:	4b29      	ldr	r3, [pc, #164]	@ (80012fc <main+0x2c4>)
 8001256:	885b      	ldrh	r3, [r3, #2]
 8001258:	b29a      	uxth	r2, r3
 800125a:	4b2c      	ldr	r3, [pc, #176]	@ (800130c <main+0x2d4>)
 800125c:	801a      	strh	r2, [r3, #0]

	  	            	currentState = STATE_STANDBY;
 800125e:	4b1b      	ldr	r3, [pc, #108]	@ (80012cc <main+0x294>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 8001264:	e3a3      	b.n	80019ae <main+0x976>
	  	              case STATE_STANDBY:
	  	                  // Wait for start_program signal
	  	              {
	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
	  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
	  	            	checkreads = Check_Ready();
 8001266:	f001 fcdb 	bl	8002c20 <Check_Ready>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	4b28      	ldr	r3, [pc, #160]	@ (8001310 <main+0x2d8>)
 8001270:	701a      	strb	r2, [r3, #0]
	  	            	  if(start_program && interlock &&  !(checkfaults)   && checkreads){
 8001272:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <main+0x284>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8395 	beq.w	80019a6 <main+0x96e>
 800127c:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <main+0x280>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 8390 	beq.w	80019a6 <main+0x96e>
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <main+0x274>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	f040 838b 	bne.w	80019a6 <main+0x96e>
 8001290:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <main+0x2d8>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 8386 	beq.w	80019a6 <main+0x96e>
	  	            		  currentState = STATE_REGULATION;//STATE_SOFT_START;
 800129a:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <main+0x294>)
 800129c:	2202      	movs	r2, #2
 800129e:	701a      	strb	r2, [r3, #0]
		  	            	//once = 1;
		  	            	  }*/
	  	            	  }

	  	              }
	  	                  break;
 80012a0:	e381      	b.n	80019a6 <main+0x96e>
 80012a2:	bf00      	nop
 80012a4:	20000b8c 	.word	0x20000b8c
 80012a8:	200006a4 	.word	0x200006a4
 80012ac:	20000b80 	.word	0x20000b80
 80012b0:	20000b70 	.word	0x20000b70
 80012b4:	48000800 	.word	0x48000800
 80012b8:	20000b88 	.word	0x20000b88
 80012bc:	20000b7c 	.word	0x20000b7c
 80012c0:	20000028 	.word	0x20000028
 80012c4:	20000b7d 	.word	0x20000b7d
 80012c8:	20000b7e 	.word	0x20000b7e
 80012cc:	20000b7f 	.word	0x20000b7f
 80012d0:	48001400 	.word	0x48001400
 80012d4:	48001000 	.word	0x48001000
 80012d8:	200007b4 	.word	0x200007b4
 80012dc:	200008e4 	.word	0x200008e4
 80012e0:	200006cc 	.word	0x200006cc
 80012e4:	200006e0 	.word	0x200006e0
 80012e8:	20000800 	.word	0x20000800
 80012ec:	2000084c 	.word	0x2000084c
 80012f0:	20000440 	.word	0x20000440
 80012f4:	200004ac 	.word	0x200004ac
 80012f8:	20000518 	.word	0x20000518
 80012fc:	20000a78 	.word	0x20000a78
 8001300:	20000a8c 	.word	0x20000a8c
 8001304:	20000a98 	.word	0x20000a98
 8001308:	20000a5c 	.word	0x20000a5c
 800130c:	20000a5e 	.word	0x20000a5e
 8001310:	20000b81 	.word	0x20000b81

	  	              case STATE_REGULATION:
	  	                  // Maintain output voltage/current
	  	            	  // 20khz sample time of regulators Timer 15
	  	                  {
	  	                	if(once == 0){
 8001314:	4b86      	ldr	r3, [pc, #536]	@ (8001530 <main+0x4f8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d107      	bne.n	800132c <main+0x2f4>
	  	                			  	            	  //Start timer that start_program ramp and pi regulation
	  	                			  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
 800131c:	2200      	movs	r2, #0
 800131e:	2104      	movs	r1, #4
 8001320:	4884      	ldr	r0, [pc, #528]	@ (8001534 <main+0x4fc>)
 8001322:	f006 f815 	bl	8007350 <HAL_GPIO_WritePin>


	  	                			  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
	  	                			  	            	HAL_TIM_Base_Start_IT(&htim15); // START TIM15 THATS IS MAIN CONTROL LOOP
 8001326:	4884      	ldr	r0, [pc, #528]	@ (8001538 <main+0x500>)
 8001328:	f008 fe72 	bl	800a010 <HAL_TIM_Base_Start_IT>
	  	                			  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
	  	                			  	            	//RAMP_FINISHED = 0;
	  	                			  	            	//once = 1;
	  	                			  	            	  }
	  	                	  if(flag_control)
 800132c:	4b83      	ldr	r3, [pc, #524]	@ (800153c <main+0x504>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 833b 	beq.w	80019ac <main+0x974>
	  	                	  {
	  	                		// start_ticks = SysTick->VAL;

	  	                		  	  	input_vol = Low_pass_filter(input_voltage, input_vol, input_vol_x_n1, input_vol_y_n1); //input_voltage;
 8001336:	4b82      	ldr	r3, [pc, #520]	@ (8001540 <main+0x508>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001342:	4b80      	ldr	r3, [pc, #512]	@ (8001544 <main+0x50c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	ee07 3a10 	vmov	s14, r3
 800134a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800134e:	4b7e      	ldr	r3, [pc, #504]	@ (8001548 <main+0x510>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	ee06 3a90 	vmov	s13, r3
 8001356:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800135a:	4b7c      	ldr	r3, [pc, #496]	@ (800154c <main+0x514>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	ee06 3a10 	vmov	s12, r3
 8001362:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8001366:	eef0 1a46 	vmov.f32	s3, s12
 800136a:	eeb0 1a66 	vmov.f32	s2, s13
 800136e:	eef0 0a47 	vmov.f32	s1, s14
 8001372:	eeb0 0a67 	vmov.f32	s0, s15
 8001376:	f001 fea3 	bl	80030c0 <Low_pass_filter>
 800137a:	eef0 7a40 	vmov.f32	s15, s0
 800137e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001382:	ee17 2a90 	vmov	r2, s15
 8001386:	4b6f      	ldr	r3, [pc, #444]	@ (8001544 <main+0x50c>)
 8001388:	601a      	str	r2, [r3, #0]
	  	                		  	  	output_vol = Low_pass_filter(output_voltage, output_vol, output_vol_x_n1, output_vol_y_n1); //output_voltage;
 800138a:	4b71      	ldr	r3, [pc, #452]	@ (8001550 <main+0x518>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	ee07 3a90 	vmov	s15, r3
 8001392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001396:	4b6f      	ldr	r3, [pc, #444]	@ (8001554 <main+0x51c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	ee07 3a10 	vmov	s14, r3
 800139e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80013a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001558 <main+0x520>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	ee06 3a90 	vmov	s13, r3
 80013aa:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80013ae:	4b6b      	ldr	r3, [pc, #428]	@ (800155c <main+0x524>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	ee06 3a10 	vmov	s12, r3
 80013b6:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80013ba:	eef0 1a46 	vmov.f32	s3, s12
 80013be:	eeb0 1a66 	vmov.f32	s2, s13
 80013c2:	eef0 0a47 	vmov.f32	s1, s14
 80013c6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ca:	f001 fe79 	bl	80030c0 <Low_pass_filter>
 80013ce:	eef0 7a40 	vmov.f32	s15, s0
 80013d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d6:	ee17 2a90 	vmov	r2, s15
 80013da:	4b5e      	ldr	r3, [pc, #376]	@ (8001554 <main+0x51c>)
 80013dc:	601a      	str	r2, [r3, #0]
	  	                		  	  	input_vol_x_n1 = input_voltage;
 80013de:	4b58      	ldr	r3, [pc, #352]	@ (8001540 <main+0x508>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a59      	ldr	r2, [pc, #356]	@ (8001548 <main+0x510>)
 80013e4:	6013      	str	r3, [r2, #0]
	  	                		  	  	input_vol_y_n1 = input_vol;
 80013e6:	4b57      	ldr	r3, [pc, #348]	@ (8001544 <main+0x50c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a58      	ldr	r2, [pc, #352]	@ (800154c <main+0x514>)
 80013ec:	6013      	str	r3, [r2, #0]
	  	                		  	  	output_vol_x_n1 = output_voltage;
 80013ee:	4b58      	ldr	r3, [pc, #352]	@ (8001550 <main+0x518>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a59      	ldr	r2, [pc, #356]	@ (8001558 <main+0x520>)
 80013f4:	6013      	str	r3, [r2, #0]
	  	                		  	  	output_vol_y_n1 = output_vol;
 80013f6:	4b57      	ldr	r3, [pc, #348]	@ (8001554 <main+0x51c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a58      	ldr	r2, [pc, #352]	@ (800155c <main+0x524>)
 80013fc:	6013      	str	r3, [r2, #0]

	  	                		  	  	Gv = (float)output_vol/(float)input_vol;//output_voltage/input_voltage;
 80013fe:	4b55      	ldr	r3, [pc, #340]	@ (8001554 <main+0x51c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800140a:	4b4e      	ldr	r3, [pc, #312]	@ (8001544 <main+0x50c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	ee07 3a90 	vmov	s15, r3
 8001412:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800141a:	4b51      	ldr	r3, [pc, #324]	@ (8001560 <main+0x528>)
 800141c:	edc3 7a00 	vstr	s15, [r3]

	  	                				if(Gv<2) //CZARY
 8001420:	4b4f      	ldr	r3, [pc, #316]	@ (8001560 <main+0x528>)
 8001422:	edd3 7a00 	vldr	s15, [r3]
 8001426:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800142a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800142e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001432:	f140 80a5 	bpl.w	8001580 <main+0x548>
	  	                				{

	  	                					delay_tr = approx_acos2((1-Gv))*INV_wr;
 8001436:	4b4a      	ldr	r3, [pc, #296]	@ (8001560 <main+0x528>)
 8001438:	edd3 7a00 	vldr	s15, [r3]
 800143c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001444:	eeb0 0a67 	vmov.f32	s0, s15
 8001448:	f002 fa00 	bl	800384c <approx_acos2>
 800144c:	ee10 3a10 	vmov	r3, s0
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f8a1 	bl	8000598 <__aeabi_f2d>
 8001456:	a332      	add	r3, pc, #200	@ (adr r3, 8001520 <main+0x4e8>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7ff f8f4 	bl	8000648 <__aeabi_dmul>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f7ff fbe6 	bl	8000c38 <__aeabi_d2f>
 800146c:	4603      	mov	r3, r0
 800146e:	4a3d      	ldr	r2, [pc, #244]	@ (8001564 <main+0x52c>)
 8001470:	6013      	str	r3, [r2, #0]
	  	                					 // start_ticks = SysTick->VAL;

	  	                					cordic_input = float_to_integer(((2-Gv)/Gv), 100, 32);
 8001472:	4b3b      	ldr	r3, [pc, #236]	@ (8001560 <main+0x528>)
 8001474:	edd3 7a00 	vldr	s15, [r3]
 8001478:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800147c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001480:	4b37      	ldr	r3, [pc, #220]	@ (8001560 <main+0x528>)
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800148a:	2120      	movs	r1, #32
 800148c:	2064      	movs	r0, #100	@ 0x64
 800148e:	eeb0 0a66 	vmov.f32	s0, s13
 8001492:	f002 f8dd 	bl	8003650 <float_to_integer>
 8001496:	4603      	mov	r3, r0
 8001498:	4a33      	ldr	r2, [pc, #204]	@ (8001568 <main+0x530>)
 800149a:	6013      	str	r3, [r2, #0]
	  	                					HAL_CORDIC_Calculate(&hcordic, &cordic_input, &result_q31, 1, 100);//sqrt((2-Gv)/Gv))
 800149c:	2364      	movs	r3, #100	@ 0x64
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2301      	movs	r3, #1
 80014a2:	4a32      	ldr	r2, [pc, #200]	@ (800156c <main+0x534>)
 80014a4:	4930      	ldr	r1, [pc, #192]	@ (8001568 <main+0x530>)
 80014a6:	4832      	ldr	r0, [pc, #200]	@ (8001570 <main+0x538>)
 80014a8:	f004 fe8c 	bl	80061c4 <HAL_CORDIC_Calculate>
	  	                					resultcordic = integer_to_float(result_q31, 10, 1, 32); // result of sqrt((((2-Gv)/Gv)) ) in float
 80014ac:	4b2f      	ldr	r3, [pc, #188]	@ (800156c <main+0x534>)
 80014ae:	6818      	ldr	r0, [r3, #0]
 80014b0:	2320      	movs	r3, #32
 80014b2:	2201      	movs	r2, #1
 80014b4:	210a      	movs	r1, #10
 80014b6:	f002 f951 	bl	800375c <integer_to_float>
 80014ba:	eef0 7a40 	vmov.f32	s15, s0
 80014be:	4b2d      	ldr	r3, [pc, #180]	@ (8001574 <main+0x53c>)
 80014c0:	edc3 7a00 	vstr	s15, [r3]


	  	                					imin = (int)(Imin_Factor*output_vol*resultcordic*INV_Z); //[mA] Negative current needed to Zero voltage switching in resonance
 80014c4:	4b23      	ldr	r3, [pc, #140]	@ (8001554 <main+0x51c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	ee07 3a90 	vmov	s15, r3
 80014cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014d0:	4b29      	ldr	r3, [pc, #164]	@ (8001578 <main+0x540>)
 80014d2:	edd3 7a00 	vldr	s15, [r3]
 80014d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014da:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <main+0x53c>)
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e4:	ee17 0a90 	vmov	r0, s15
 80014e8:	f7ff f856 	bl	8000598 <__aeabi_f2d>
 80014ec:	a30e      	add	r3, pc, #56	@ (adr r3, 8001528 <main+0x4f0>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7ff f8a9 	bl	8000648 <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff fb53 	bl	8000ba8 <__aeabi_d2iz>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <main+0x544>)
 8001508:	601a      	str	r2, [r3, #0]

	  	                					if(imin>4000) imin = 4000;
 800150a:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <main+0x544>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001512:	d96f      	bls.n	80015f4 <main+0x5bc>
 8001514:	4b19      	ldr	r3, [pc, #100]	@ (800157c <main+0x544>)
 8001516:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	e06a      	b.n	80015f4 <main+0x5bc>
 800151e:	bf00      	nop
 8001520:	155f05f7 	.word	0x155f05f7
 8001524:	3e4eb582 	.word	0x3e4eb582
 8001528:	411d99a8 	.word	0x411d99a8
 800152c:	3f7c9e24 	.word	0x3f7c9e24
 8001530:	20000b84 	.word	0x20000b84
 8001534:	48001400 	.word	0x48001400
 8001538:	20000930 	.word	0x20000930
 800153c:	20000b89 	.word	0x20000b89
 8001540:	20000a6c 	.word	0x20000a6c
 8001544:	20000034 	.word	0x20000034
 8001548:	2000003c 	.word	0x2000003c
 800154c:	20000040 	.word	0x20000040
 8001550:	20000a84 	.word	0x20000a84
 8001554:	20000038 	.word	0x20000038
 8001558:	20000044 	.word	0x20000044
 800155c:	20000048 	.word	0x20000048
 8001560:	20000014 	.word	0x20000014
 8001564:	20000004 	.word	0x20000004
 8001568:	20000054 	.word	0x20000054
 800156c:	2000004c 	.word	0x2000004c
 8001570:	200006a4 	.word	0x200006a4
 8001574:	20000050 	.word	0x20000050
 8001578:	20000030 	.word	0x20000030
 800157c:	20000a68 	.word	0x20000a68
	  	                				} else if(Gv>=2)
 8001580:	4ba5      	ldr	r3, [pc, #660]	@ (8001818 <main+0x7e0>)
 8001582:	edd3 7a00 	vldr	s15, [r3]
 8001586:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800158a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001592:	db2f      	blt.n	80015f4 <main+0x5bc>
	  	                				{
	  	                					delay_tr = (M_PI-approx_acos2((1/(Gv-1))))*INV_wr;
 8001594:	4ba0      	ldr	r3, [pc, #640]	@ (8001818 <main+0x7e0>)
 8001596:	edd3 7a00 	vldr	s15, [r3]
 800159a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800159e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80015a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015aa:	eeb0 0a47 	vmov.f32	s0, s14
 80015ae:	f002 f94d 	bl	800384c <approx_acos2>
 80015b2:	ee10 3a10 	vmov	r3, s0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ffee 	bl	8000598 <__aeabi_f2d>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	a18d      	add	r1, pc, #564	@ (adr r1, 80017f8 <main+0x7c0>)
 80015c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015c6:	f7fe fe87 	bl	80002d8 <__aeabi_dsub>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	a38b      	add	r3, pc, #556	@ (adr r3, 8001800 <main+0x7c8>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7ff f836 	bl	8000648 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	f7ff fb28 	bl	8000c38 <__aeabi_d2f>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a8c      	ldr	r2, [pc, #560]	@ (800181c <main+0x7e4>)
 80015ec:	6013      	str	r3, [r2, #0]
	  	                					imin = 0;
 80015ee:	4b8c      	ldr	r3, [pc, #560]	@ (8001820 <main+0x7e8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
	  	                				}
	  	                				if(/*once == 0*/delay_tr<0.001){
 80015f4:	4b89      	ldr	r3, [pc, #548]	@ (800181c <main+0x7e4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ffcd 	bl	8000598 <__aeabi_f2d>
 80015fe:	a382      	add	r3, pc, #520	@ (adr r3, 8001808 <main+0x7d0>)
 8001600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001604:	f7ff fa92 	bl	8000b2c <__aeabi_dcmplt>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d034      	beq.n	8001678 <main+0x640>

	  	                					int delay_tr_freq = (int)(1/delay_tr);
 800160e:	4b83      	ldr	r3, [pc, #524]	@ (800181c <main+0x7e4>)
 8001610:	ed93 7a00 	vldr	s14, [r3]
 8001614:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800161c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001620:	ee17 3a90 	vmov	r3, s15
 8001624:	607b      	str	r3, [r7, #4]

	  	                					if(delay_tr_freq>10000000) delay_tr_freq = 10000000;//10Mhz
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a7e      	ldr	r2, [pc, #504]	@ (8001824 <main+0x7ec>)
 800162a:	4293      	cmp	r3, r2
 800162c:	dd01      	ble.n	8001632 <main+0x5fa>
 800162e:	4b7d      	ldr	r3, [pc, #500]	@ (8001824 <main+0x7ec>)
 8001630:	607b      	str	r3, [r7, #4]

	  	                					if(abs(delay_tr_freq_ACC-delay_tr_freq)>=10000) {
 8001632:	4b7d      	ldr	r3, [pc, #500]	@ (8001828 <main+0x7f0>)
 8001634:	ed93 7a00 	vldr	s14, [r3]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800164a:	ee17 3a90 	vmov	r3, s15
 800164e:	2b00      	cmp	r3, #0
 8001650:	bfb8      	it	lt
 8001652:	425b      	neglt	r3, r3
 8001654:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001658:	4293      	cmp	r3, r2
 800165a:	dd0d      	ble.n	8001678 <main+0x640>
	  	                						Update_PWM_Frequency(&htim1, TIM_CHANNEL_1, delay_tr_freq); // Set TIM1 CH1 to freq that is delay tr and send to fpga
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	461a      	mov	r2, r3
 8001660:	2100      	movs	r1, #0
 8001662:	4872      	ldr	r0, [pc, #456]	@ (800182c <main+0x7f4>)
 8001664:	f001 fa32 	bl	8002acc <Update_PWM_Frequency>
	  	                						delay_tr_freq_ACC = delay_tr_freq;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	ee07 3a90 	vmov	s15, r3
 800166e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001672:	4b6d      	ldr	r3, [pc, #436]	@ (8001828 <main+0x7f0>)
 8001674:	edc3 7a00 	vstr	s15, [r3]
	  	                					}
	  	                				}

	  	                				if(RAMP_FINISHED == 0) RAMP(); // Adding to Vramp stepping voltage to create starting ramp
 8001678:	4b6d      	ldr	r3, [pc, #436]	@ (8001830 <main+0x7f8>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <main+0x64c>
 8001680:	f001 fc06 	bl	8002e90 <RAMP>

	  	                				regulatorPI(&imax1, &Integral_I, output_vol, Vramp, LIM_PEAK_POS, LIM_PEAK_NEG, Kp, Ti, Ts);
 8001684:	4b6b      	ldr	r3, [pc, #428]	@ (8001834 <main+0x7fc>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	ee07 3a90 	vmov	s15, r3
 800168c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001690:	4b69      	ldr	r3, [pc, #420]	@ (8001838 <main+0x800>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	ee07 3a10 	vmov	s14, r3
 8001698:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800169c:	4b67      	ldr	r3, [pc, #412]	@ (800183c <main+0x804>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	ee06 3a90 	vmov	s13, r3
 80016a4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80016a8:	4b65      	ldr	r3, [pc, #404]	@ (8001840 <main+0x808>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	ee06 3a10 	vmov	s12, r3
 80016b0:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80016b4:	4b63      	ldr	r3, [pc, #396]	@ (8001844 <main+0x80c>)
 80016b6:	edd3 5a00 	vldr	s11, [r3]
 80016ba:	4b63      	ldr	r3, [pc, #396]	@ (8001848 <main+0x810>)
 80016bc:	ed93 5a00 	vldr	s10, [r3]
 80016c0:	ed9f 3a62 	vldr	s6, [pc, #392]	@ 800184c <main+0x814>
 80016c4:	eef0 2a45 	vmov.f32	s5, s10
 80016c8:	eeb0 2a65 	vmov.f32	s4, s11
 80016cc:	eef0 1a46 	vmov.f32	s3, s12
 80016d0:	eeb0 1a66 	vmov.f32	s2, s13
 80016d4:	eef0 0a47 	vmov.f32	s1, s14
 80016d8:	eeb0 0a67 	vmov.f32	s0, s15
 80016dc:	495c      	ldr	r1, [pc, #368]	@ (8001850 <main+0x818>)
 80016de:	485d      	ldr	r0, [pc, #372]	@ (8001854 <main+0x81c>)
 80016e0:	f001 fc10 	bl	8002f04 <regulatorPI>

	  	                				if(/*once == 0*/ output_vol>40000)
 80016e4:	4b53      	ldr	r3, [pc, #332]	@ (8001834 <main+0x7fc>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f649 4240 	movw	r2, #40000	@ 0x9c40
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d95b      	bls.n	80017a8 <main+0x770>
	  	                				{
	  	                					delay_hc = (2*C_CAP*output_vol)*(1/imax1);
 80016f0:	4b50      	ldr	r3, [pc, #320]	@ (8001834 <main+0x7fc>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff2d 	bl	8000554 <__aeabi_ui2d>
 80016fa:	a345      	add	r3, pc, #276	@ (adr r3, 8001810 <main+0x7d8>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	f7fe ffa2 	bl	8000648 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4614      	mov	r4, r2
 800170a:	461d      	mov	r5, r3
 800170c:	4b51      	ldr	r3, [pc, #324]	@ (8001854 <main+0x81c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d103      	bne.n	800171c <main+0x6e4>
 8001714:	f04f 0000 	mov.w	r0, #0
 8001718:	494f      	ldr	r1, [pc, #316]	@ (8001858 <main+0x820>)
 800171a:	e003      	b.n	8001724 <main+0x6ec>
 800171c:	f04f 0000 	mov.w	r0, #0
 8001720:	f04f 0100 	mov.w	r1, #0
 8001724:	4622      	mov	r2, r4
 8001726:	462b      	mov	r3, r5
 8001728:	f7fe ff8e 	bl	8000648 <__aeabi_dmul>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff fa80 	bl	8000c38 <__aeabi_d2f>
 8001738:	4603      	mov	r3, r0
 800173a:	4a48      	ldr	r2, [pc, #288]	@ (800185c <main+0x824>)
 800173c:	6013      	str	r3, [r2, #0]
	  	                					int delay_hc_freq = (int)(1/delay_hc);
 800173e:	4b47      	ldr	r3, [pc, #284]	@ (800185c <main+0x824>)
 8001740:	ed93 7a00 	vldr	s14, [r3]
 8001744:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800174c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001750:	ee17 3a90 	vmov	r3, s15
 8001754:	603b      	str	r3, [r7, #0]
	  	                					if(delay_hc_freq>10000000) delay_hc_freq = 10000000;//10Mhz jakis problem
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	4a32      	ldr	r2, [pc, #200]	@ (8001824 <main+0x7ec>)
 800175a:	4293      	cmp	r3, r2
 800175c:	dd01      	ble.n	8001762 <main+0x72a>
 800175e:	4b31      	ldr	r3, [pc, #196]	@ (8001824 <main+0x7ec>)
 8001760:	603b      	str	r3, [r7, #0]

	  	                					if(abs(delay_hc_freq_ACC-delay_hc_freq)>=10000) {
 8001762:	4b3f      	ldr	r3, [pc, #252]	@ (8001860 <main+0x828>)
 8001764:	ed93 7a00 	vldr	s14, [r3]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001776:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800177a:	ee17 3a90 	vmov	r3, s15
 800177e:	2b00      	cmp	r3, #0
 8001780:	bfb8      	it	lt
 8001782:	425b      	neglt	r3, r3
 8001784:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001788:	4293      	cmp	r3, r2
 800178a:	dd0d      	ble.n	80017a8 <main+0x770>
	  	                						Update_PWM_Frequency(&htim8, TIM_CHANNEL_2, delay_hc_freq); // Set TIM8 CH1 o freq that is delay hc and send to fpga
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	2104      	movs	r1, #4
 8001792:	4834      	ldr	r0, [pc, #208]	@ (8001864 <main+0x82c>)
 8001794:	f001 f99a 	bl	8002acc <Update_PWM_Frequency>
	  	                						delay_hc_freq_ACC = delay_hc_freq;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	ee07 3a90 	vmov	s15, r3
 800179e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001860 <main+0x828>)
 80017a4:	edc3 7a00 	vstr	s15, [r3]
	  	                					}
	  	                				}

	  	                				imax2 =  imax1 + imax2_sum;//
 80017a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001854 <main+0x81c>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001868 <main+0x830>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4413      	add	r3, r2
 80017b2:	4a2e      	ldr	r2, [pc, #184]	@ (800186c <main+0x834>)
 80017b4:	6013      	str	r3, [r2, #0]

	  	                				if(once == 0){
 80017b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001870 <main+0x838>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10b      	bne.n	80017d6 <main+0x79e>
	  	                					HAL_Delay(500);
 80017be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017c2:	f003 f801 	bl	80047c8 <HAL_Delay>
	  	                					HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
 80017c6:	2201      	movs	r2, #1
 80017c8:	2120      	movs	r1, #32
 80017ca:	482a      	ldr	r0, [pc, #168]	@ (8001874 <main+0x83c>)
 80017cc:	f005 fdc0 	bl	8007350 <HAL_GPIO_WritePin>
	  	                					once = 1;
 80017d0:	4b27      	ldr	r3, [pc, #156]	@ (8001870 <main+0x838>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
	  	                				}

	  	                				flag_control = 0;
 80017d6:	4b28      	ldr	r3, [pc, #160]	@ (8001878 <main+0x840>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
	  	                				stop_ticks = SysTick->VAL;
 80017dc:	4b27      	ldr	r3, [pc, #156]	@ (800187c <main+0x844>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b27      	ldr	r3, [pc, #156]	@ (8001880 <main+0x848>)
 80017e4:	601a      	str	r2, [r3, #0]
	  	                				elapsed_ticks = start_ticks-stop_ticks;
 80017e6:	4b27      	ldr	r3, [pc, #156]	@ (8001884 <main+0x84c>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4b25      	ldr	r3, [pc, #148]	@ (8001880 <main+0x848>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	4a25      	ldr	r2, [pc, #148]	@ (8001888 <main+0x850>)
 80017f2:	6013      	str	r3, [r2, #0]
	  	                	  }

	  	                  }
	  	                  break;
 80017f4:	e0da      	b.n	80019ac <main+0x974>
 80017f6:	bf00      	nop
 80017f8:	54442d18 	.word	0x54442d18
 80017fc:	400921fb 	.word	0x400921fb
 8001800:	155f05f7 	.word	0x155f05f7
 8001804:	3e4eb582 	.word	0x3e4eb582
 8001808:	d2f1a9fc 	.word	0xd2f1a9fc
 800180c:	3f50624d 	.word	0x3f50624d
 8001810:	e5c45270 	.word	0xe5c45270
 8001814:	3e32e5d9 	.word	0x3e32e5d9
 8001818:	20000014 	.word	0x20000014
 800181c:	20000004 	.word	0x20000004
 8001820:	20000a68 	.word	0x20000a68
 8001824:	00989680 	.word	0x00989680
 8001828:	2000000c 	.word	0x2000000c
 800182c:	200007b4 	.word	0x200007b4
 8001830:	20000a90 	.word	0x20000a90
 8001834:	20000038 	.word	0x20000038
 8001838:	20000a8a 	.word	0x20000a8a
 800183c:	20000020 	.word	0x20000020
 8001840:	20000024 	.word	0x20000024
 8001844:	20000018 	.word	0x20000018
 8001848:	2000001c 	.word	0x2000001c
 800184c:	3851b717 	.word	0x3851b717
 8001850:	20000b74 	.word	0x20000b74
 8001854:	20000a60 	.word	0x20000a60
 8001858:	3ff00000 	.word	0x3ff00000
 800185c:	20000008 	.word	0x20000008
 8001860:	20000010 	.word	0x20000010
 8001864:	200008e4 	.word	0x200008e4
 8001868:	20000a94 	.word	0x20000a94
 800186c:	20000a64 	.word	0x20000a64
 8001870:	20000b84 	.word	0x20000b84
 8001874:	48000800 	.word	0x48000800
 8001878:	20000b89 	.word	0x20000b89
 800187c:	e000e010 	.word	0xe000e010
 8001880:	20000bac 	.word	0x20000bac
 8001884:	20000ba8 	.word	0x20000ba8
 8001888:	20000bb0 	.word	0x20000bb0
	  	              case STATE_FAULT:
	  	                  // Handle fault condition
	  	            	  // Turn off all gate drivers and stop FPGA
	  	              {
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP drives mosfet etc
 800188c:	2200      	movs	r2, #0
 800188e:	2120      	movs	r1, #32
 8001890:	4848      	ldr	r0, [pc, #288]	@ (80019b4 <main+0x97c>)
 8001892:	f005 fd5d 	bl	8007350 <HAL_GPIO_WritePin>

	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!


	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 8001896:	4848      	ldr	r0, [pc, #288]	@ (80019b8 <main+0x980>)
 8001898:	f008 fc32 	bl	800a100 <HAL_TIM_Base_Stop_IT>

	  	            	HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port,NOT_RST_1_Pin, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	2180      	movs	r1, #128	@ 0x80
 80018a0:	4846      	ldr	r0, [pc, #280]	@ (80019bc <main+0x984>)
 80018a2:	f005 fd55 	bl	8007350 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_2_GPIO_Port,NOT_RST_2_Pin, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018ac:	4844      	ldr	r0, [pc, #272]	@ (80019c0 <main+0x988>)
 80018ae:	f005 fd4f 	bl	8007350 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port,NOT_RST_3_Pin, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2101      	movs	r1, #1
 80018b6:	4843      	ldr	r0, [pc, #268]	@ (80019c4 <main+0x98c>)
 80018b8:	f005 fd4a 	bl	8007350 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port,NOT_RST_4_Pin, GPIO_PIN_RESET);
 80018bc:	2200      	movs	r2, #0
 80018be:	2140      	movs	r1, #64	@ 0x40
 80018c0:	483c      	ldr	r0, [pc, #240]	@ (80019b4 <main+0x97c>)
 80018c2:	f005 fd45 	bl	8007350 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2102      	movs	r1, #2
 80018ca:	483d      	ldr	r0, [pc, #244]	@ (80019c0 <main+0x988>)
 80018cc:	f005 fd40 	bl	8007350 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018d6:	483c      	ldr	r0, [pc, #240]	@ (80019c8 <main+0x990>)
 80018d8:	f005 fd3a 	bl	8007350 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 80018dc:	2201      	movs	r2, #1
 80018de:	2120      	movs	r1, #32
 80018e0:	4837      	ldr	r0, [pc, #220]	@ (80019c0 <main+0x988>)
 80018e2:	f005 fd35 	bl	8007350 <HAL_GPIO_WritePin>

	  	            	HAL_TIM_Base_Start(&htim7); // timer for reset OCD and INTERLOCK reset turn off
 80018e6:	4839      	ldr	r0, [pc, #228]	@ (80019cc <main+0x994>)
 80018e8:	f008 fb22 	bl	8009f30 <HAL_TIM_Base_Start>


	  	            	once = 0;
 80018ec:	4b38      	ldr	r3, [pc, #224]	@ (80019d0 <main+0x998>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
	  	            	start_program = 0;
 80018f2:	4b38      	ldr	r3, [pc, #224]	@ (80019d4 <main+0x99c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
	  	            	currentState = STATE_SHUTDOWN;
 80018f8:	4b37      	ldr	r3, [pc, #220]	@ (80019d8 <main+0x9a0>)
 80018fa:	2204      	movs	r2, #4
 80018fc:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 80018fe:	e056      	b.n	80019ae <main+0x976>
	  	              case STATE_SHUTDOWN:
	  	                  // Safely shut down the converter
	  	              {
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	2120      	movs	r1, #32
 8001904:	482b      	ldr	r0, [pc, #172]	@ (80019b4 <main+0x97c>)
 8001906:	f005 fd23 	bl	8007350 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 800190a:	2201      	movs	r2, #1
 800190c:	2104      	movs	r1, #4
 800190e:	482e      	ldr	r0, [pc, #184]	@ (80019c8 <main+0x990>)
 8001910:	f005 fd1e 	bl	8007350 <HAL_GPIO_WritePin>
	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 8001914:	4828      	ldr	r0, [pc, #160]	@ (80019b8 <main+0x980>)
 8001916:	f008 fbf3 	bl	800a100 <HAL_TIM_Base_Stop_IT>
	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
	  	            	RAMP_FINISHED = 0;
 800191a:	4b30      	ldr	r3, [pc, #192]	@ (80019dc <main+0x9a4>)
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
						once = 0;
 8001920:	4b2b      	ldr	r3, [pc, #172]	@ (80019d0 <main+0x998>)
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
	  	            	imax1 = 1;
 8001926:	4b2e      	ldr	r3, [pc, #184]	@ (80019e0 <main+0x9a8>)
 8001928:	2201      	movs	r2, #1
 800192a:	601a      	str	r2, [r3, #0]
						imax2 = 1;
 800192c:	4b2d      	ldr	r3, [pc, #180]	@ (80019e4 <main+0x9ac>)
 800192e:	2201      	movs	r2, #1
 8001930:	601a      	str	r2, [r3, #0]
						vout = 1;
 8001932:	4b2d      	ldr	r3, [pc, #180]	@ (80019e8 <main+0x9b0>)
 8001934:	2201      	movs	r2, #1
 8001936:	801a      	strh	r2, [r3, #0]
						Vramp = 1;
 8001938:	4b2c      	ldr	r3, [pc, #176]	@ (80019ec <main+0x9b4>)
 800193a:	2201      	movs	r2, #1
 800193c:	801a      	strh	r2, [r3, #0]
						delay_tr = 1;
 800193e:	4b2c      	ldr	r3, [pc, #176]	@ (80019f0 <main+0x9b8>)
 8001940:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001944:	601a      	str	r2, [r3, #0]
						delay_hc = 1;
 8001946:	4b2b      	ldr	r3, [pc, #172]	@ (80019f4 <main+0x9bc>)
 8001948:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800194c:	601a      	str	r2, [r3, #0]
						Gv = 1;
 800194e:	4b2a      	ldr	r3, [pc, #168]	@ (80019f8 <main+0x9c0>)
 8001950:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001954:	601a      	str	r2, [r3, #0]
						Integral_I = 1;
 8001956:	4b29      	ldr	r3, [pc, #164]	@ (80019fc <main+0x9c4>)
 8001958:	2201      	movs	r2, #1
 800195a:	601a      	str	r2, [r3, #0]
						prev_delta = 1;
 800195c:	4b28      	ldr	r3, [pc, #160]	@ (8001a00 <main+0x9c8>)
 800195e:	2201      	movs	r2, #1
 8001960:	601a      	str	r2, [r3, #0]
						input_vol = 1;
 8001962:	4b28      	ldr	r3, [pc, #160]	@ (8001a04 <main+0x9cc>)
 8001964:	2201      	movs	r2, #1
 8001966:	601a      	str	r2, [r3, #0]
						input_voltage =1;
 8001968:	4b27      	ldr	r3, [pc, #156]	@ (8001a08 <main+0x9d0>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]
						output_vol = 1;
 800196e:	4b27      	ldr	r3, [pc, #156]	@ (8001a0c <main+0x9d4>)
 8001970:	2201      	movs	r2, #1
 8001972:	601a      	str	r2, [r3, #0]
						output_voltage =1;
 8001974:	4b26      	ldr	r3, [pc, #152]	@ (8001a10 <main+0x9d8>)
 8001976:	2201      	movs	r2, #1
 8001978:	601a      	str	r2, [r3, #0]
						input_vol_x_n1 = 1;
 800197a:	4b26      	ldr	r3, [pc, #152]	@ (8001a14 <main+0x9dc>)
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]
						input_vol_y_n1 = 1;
 8001980:	4b25      	ldr	r3, [pc, #148]	@ (8001a18 <main+0x9e0>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]
						output_vol_x_n1 = 1;
 8001986:	4b25      	ldr	r3, [pc, #148]	@ (8001a1c <main+0x9e4>)
 8001988:	2201      	movs	r2, #1
 800198a:	601a      	str	r2, [r3, #0]
						output_vol_y_n1 = 1;
 800198c:	4b24      	ldr	r3, [pc, #144]	@ (8001a20 <main+0x9e8>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]
						imin = 1;
 8001992:	4b24      	ldr	r3, [pc, #144]	@ (8001a24 <main+0x9ec>)
 8001994:	2201      	movs	r2, #1
 8001996:	601a      	str	r2, [r3, #0]

	  	            	currentState = STATE_STANDBY;
 8001998:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <main+0x9a0>)
 800199a:	2201      	movs	r2, #1
 800199c:	701a      	strb	r2, [r3, #0]
	  	              }

	  	                  break;
 800199e:	e006      	b.n	80019ae <main+0x976>
	  	              default:
	  	                  break;
 80019a0:	bf00      	nop
 80019a2:	f7ff bb92 	b.w	80010ca <main+0x92>
	  	                  break;
 80019a6:	bf00      	nop
 80019a8:	f7ff bb8f 	b.w	80010ca <main+0x92>
	  	                  break;
 80019ac:	bf00      	nop
	  	  	  	  checkfaults = Check_Faults();
 80019ae:	f7ff bb8c 	b.w	80010ca <main+0x92>
 80019b2:	bf00      	nop
 80019b4:	48000800 	.word	0x48000800
 80019b8:	20000930 	.word	0x20000930
 80019bc:	48000400 	.word	0x48000400
 80019c0:	48001000 	.word	0x48001000
 80019c4:	48000c00 	.word	0x48000c00
 80019c8:	48001400 	.word	0x48001400
 80019cc:	20000898 	.word	0x20000898
 80019d0:	20000b84 	.word	0x20000b84
 80019d4:	20000b7c 	.word	0x20000b7c
 80019d8:	20000b7f 	.word	0x20000b7f
 80019dc:	20000a90 	.word	0x20000a90
 80019e0:	20000a60 	.word	0x20000a60
 80019e4:	20000a64 	.word	0x20000a64
 80019e8:	20000a88 	.word	0x20000a88
 80019ec:	20000a8a 	.word	0x20000a8a
 80019f0:	20000004 	.word	0x20000004
 80019f4:	20000008 	.word	0x20000008
 80019f8:	20000014 	.word	0x20000014
 80019fc:	20000b74 	.word	0x20000b74
 8001a00:	20000b78 	.word	0x20000b78
 8001a04:	20000034 	.word	0x20000034
 8001a08:	20000a6c 	.word	0x20000a6c
 8001a0c:	20000038 	.word	0x20000038
 8001a10:	20000a84 	.word	0x20000a84
 8001a14:	2000003c 	.word	0x2000003c
 8001a18:	20000040 	.word	0x20000040
 8001a1c:	20000044 	.word	0x20000044
 8001a20:	20000048 	.word	0x20000048
 8001a24:	20000a68 	.word	0x20000a68

08001a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b094      	sub	sp, #80	@ 0x50
 8001a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2e:	f107 0318 	add.w	r3, r7, #24
 8001a32:	2238      	movs	r2, #56	@ 0x38
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f010 f9b5 	bl	8011da6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a4a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a4e:	f007 f9e7 	bl	8008e20 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001a52:	2322      	movs	r3, #34	@ 0x22
 8001a54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a5c:	2340      	movs	r3, #64	@ 0x40
 8001a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001a60:	2301      	movs	r3, #1
 8001a62:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a64:	2302      	movs	r3, #2
 8001a66:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001a70:	234b      	movs	r3, #75	@ 0x4b
 8001a72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a74:	2302      	movs	r3, #2
 8001a76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a80:	f107 0318 	add.w	r3, r7, #24
 8001a84:	4618      	mov	r0, r3
 8001a86:	f007 fa7f 	bl	8008f88 <HAL_RCC_OscConfig>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001a90:	f002 f824 	bl	8003adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a94:	230f      	movs	r3, #15
 8001a96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2104      	movs	r1, #4
 8001aac:	4618      	mov	r0, r3
 8001aae:	f007 fd7d 	bl	80095ac <HAL_RCC_ClockConfig>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ab8:	f002 f810 	bl	8003adc <Error_Handler>
  }
}
 8001abc:	bf00      	nop
 8001abe:	3750      	adds	r7, #80	@ 0x50
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08c      	sub	sp, #48	@ 0x30
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001aca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	2220      	movs	r2, #32
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f010 f962 	bl	8011da6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ae2:	4b32      	ldr	r3, [pc, #200]	@ (8001bac <MX_ADC1_Init+0xe8>)
 8001ae4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001ae8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001aea:	4b30      	ldr	r3, [pc, #192]	@ (8001bac <MX_ADC1_Init+0xe8>)
 8001aec:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001af0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001af2:	4b2e      	ldr	r3, [pc, #184]	@ (8001bac <MX_ADC1_Init+0xe8>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001af8:	4b2c      	ldr	r3, [pc, #176]	@ (8001bac <MX_ADC1_Init+0xe8>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001afe:	4b2b      	ldr	r3, [pc, #172]	@ (8001bac <MX_ADC1_Init+0xe8>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b04:	4b29      	ldr	r3, [pc, #164]	@ (8001bac <MX_ADC1_Init+0xe8>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b0a:	4b28      	ldr	r3, [pc, #160]	@ (8001bac <MX_ADC1_Init+0xe8>)
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b10:	4b26      	ldr	r3, [pc, #152]	@ (8001bac <MX_ADC1_Init+0xe8>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b16:	4b25      	ldr	r3, [pc, #148]	@ (8001bac <MX_ADC1_Init+0xe8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001b1c:	4b23      	ldr	r3, [pc, #140]	@ (8001bac <MX_ADC1_Init+0xe8>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b22:	4b22      	ldr	r3, [pc, #136]	@ (8001bac <MX_ADC1_Init+0xe8>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b2a:	4b20      	ldr	r3, [pc, #128]	@ (8001bac <MX_ADC1_Init+0xe8>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b30:	4b1e      	ldr	r3, [pc, #120]	@ (8001bac <MX_ADC1_Init+0xe8>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b36:	4b1d      	ldr	r3, [pc, #116]	@ (8001bac <MX_ADC1_Init+0xe8>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <MX_ADC1_Init+0xe8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001b44:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <MX_ADC1_Init+0xe8>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b4c:	4817      	ldr	r0, [pc, #92]	@ (8001bac <MX_ADC1_Init+0xe8>)
 8001b4e:	f003 f8a1 	bl	8004c94 <HAL_ADC_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001b58:	f001 ffc0 	bl	8003adc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b64:	4619      	mov	r1, r3
 8001b66:	4811      	ldr	r0, [pc, #68]	@ (8001bac <MX_ADC1_Init+0xe8>)
 8001b68:	f004 f9b6 	bl	8005ed8 <HAL_ADCEx_MultiModeConfigChannel>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001b72:	f001 ffb3 	bl	8003adc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <MX_ADC1_Init+0xec>)
 8001b78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b7a:	2306      	movs	r3, #6
 8001b7c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001b7e:	2307      	movs	r3, #7
 8001b80:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b82:	237f      	movs	r3, #127	@ 0x7f
 8001b84:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b86:	2304      	movs	r3, #4
 8001b88:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	4619      	mov	r1, r3
 8001b92:	4806      	ldr	r0, [pc, #24]	@ (8001bac <MX_ADC1_Init+0xe8>)
 8001b94:	f003 fb22 	bl	80051dc <HAL_ADC_ConfigChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001b9e:	f001 ff9d 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	3730      	adds	r7, #48	@ 0x30
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200003d4 	.word	0x200003d4
 8001bb0:	cb840000 	.word	0xcb840000

08001bb4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08c      	sub	sp, #48	@ 0x30
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	2220      	movs	r2, #32
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f010 f8ea 	bl	8011da6 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001bd2:	4b57      	ldr	r3, [pc, #348]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001bd4:	4a57      	ldr	r2, [pc, #348]	@ (8001d34 <MX_ADC3_Init+0x180>)
 8001bd6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001bd8:	4b55      	ldr	r3, [pc, #340]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001bda:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001bde:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001be0:	4b53      	ldr	r3, [pc, #332]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001be6:	4b52      	ldr	r3, [pc, #328]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001bec:	4b50      	ldr	r3, [pc, #320]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001bf2:	4b4f      	ldr	r3, [pc, #316]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bf8:	4b4d      	ldr	r3, [pc, #308]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001bfe:	4b4c      	ldr	r3, [pc, #304]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001c04:	4b4a      	ldr	r3, [pc, #296]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 5;
 8001c0a:	4b49      	ldr	r3, [pc, #292]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001c0c:	2205      	movs	r2, #5
 8001c0e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001c10:	4b47      	ldr	r3, [pc, #284]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c18:	4b45      	ldr	r3, [pc, #276]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c1e:	4b44      	ldr	r3, [pc, #272]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001c24:	4b42      	ldr	r3, [pc, #264]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001c2c:	4b40      	ldr	r3, [pc, #256]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001c2e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c32:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001c34:	4b3e      	ldr	r3, [pc, #248]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001c3c:	483c      	ldr	r0, [pc, #240]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001c3e:	f003 f829 	bl	8004c94 <HAL_ADC_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 8001c48:	f001 ff48 	bl	8003adc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c54:	4619      	mov	r1, r3
 8001c56:	4836      	ldr	r0, [pc, #216]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001c58:	f004 f93e 	bl	8005ed8 <HAL_ADCEx_MultiModeConfigChannel>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001c62:	f001 ff3b 	bl	8003adc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c66:	4b34      	ldr	r3, [pc, #208]	@ (8001d38 <MX_ADC3_Init+0x184>)
 8001c68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c6a:	2306      	movs	r3, #6
 8001c6c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c72:	237f      	movs	r3, #127	@ 0x7f
 8001c74:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 38;
 8001c7a:	2326      	movs	r3, #38	@ 0x26
 8001c7c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 8001c7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c82:	61fb      	str	r3, [r7, #28]
  sConfig.OffsetSaturation = DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4828      	ldr	r0, [pc, #160]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001c90:	f003 faa4 	bl	80051dc <HAL_ADC_ConfigChannel>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001c9a:	f001 ff1f 	bl	8003adc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c9e:	4b27      	ldr	r3, [pc, #156]	@ (8001d3c <MX_ADC3_Init+0x188>)
 8001ca0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ca2:	230c      	movs	r3, #12
 8001ca4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_2;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 37;
 8001caa:	2325      	movs	r3, #37	@ 0x25
 8001cac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cae:	1d3b      	adds	r3, r7, #4
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	481f      	ldr	r0, [pc, #124]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001cb4:	f003 fa92 	bl	80051dc <HAL_ADC_ConfigChannel>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_ADC3_Init+0x10e>
  {
    Error_Handler();
 8001cbe:	f001 ff0d 	bl	8003adc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d40 <MX_ADC3_Init+0x18c>)
 8001cc4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001cc6:	2312      	movs	r3, #18
 8001cc8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_3;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 8;
 8001cce:	2308      	movs	r3, #8
 8001cd0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4816      	ldr	r0, [pc, #88]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001cd8:	f003 fa80 	bl	80051dc <HAL_ADC_ConfigChannel>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_ADC3_Init+0x132>
  {
    Error_Handler();
 8001ce2:	f001 fefb 	bl	8003adc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001ce6:	4b17      	ldr	r3, [pc, #92]	@ (8001d44 <MX_ADC3_Init+0x190>)
 8001ce8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001cea:	2318      	movs	r3, #24
 8001cec:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001cee:	2304      	movs	r3, #4
 8001cf0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	480d      	ldr	r0, [pc, #52]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001cfc:	f003 fa6e 	bl	80051dc <HAL_ADC_ConfigChannel>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 8001d06:	f001 fee9 	bl	8003adc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d48 <MX_ADC3_Init+0x194>)
 8001d0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001d0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	4619      	mov	r1, r3
 8001d18:	4805      	ldr	r0, [pc, #20]	@ (8001d30 <MX_ADC3_Init+0x17c>)
 8001d1a:	f003 fa5f 	bl	80051dc <HAL_ADC_ConfigChannel>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 8001d24:	f001 feda 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001d28:	bf00      	nop
 8001d2a:	3730      	adds	r7, #48	@ 0x30
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000440 	.word	0x20000440
 8001d34:	50000400 	.word	0x50000400
 8001d38:	04300002 	.word	0x04300002
 8001d3c:	08600004 	.word	0x08600004
 8001d40:	0c900008 	.word	0x0c900008
 8001d44:	10c00010 	.word	0x10c00010
 8001d48:	14f00020 	.word	0x14f00020

08001d4c <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d52:	463b      	mov	r3, r7
 8001d54:	2220      	movs	r2, #32
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f010 f824 	bl	8011da6 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001d5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e0c <MX_ADC4_Init+0xc0>)
 8001d60:	4a2b      	ldr	r2, [pc, #172]	@ (8001e10 <MX_ADC4_Init+0xc4>)
 8001d62:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001d64:	4b29      	ldr	r3, [pc, #164]	@ (8001e0c <MX_ADC4_Init+0xc0>)
 8001d66:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001d6a:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001d6c:	4b27      	ldr	r3, [pc, #156]	@ (8001e0c <MX_ADC4_Init+0xc0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d72:	4b26      	ldr	r3, [pc, #152]	@ (8001e0c <MX_ADC4_Init+0xc0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001d78:	4b24      	ldr	r3, [pc, #144]	@ (8001e0c <MX_ADC4_Init+0xc0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d7e:	4b23      	ldr	r3, [pc, #140]	@ (8001e0c <MX_ADC4_Init+0xc0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d84:	4b21      	ldr	r3, [pc, #132]	@ (8001e0c <MX_ADC4_Init+0xc0>)
 8001d86:	2204      	movs	r2, #4
 8001d88:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001d8a:	4b20      	ldr	r3, [pc, #128]	@ (8001e0c <MX_ADC4_Init+0xc0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001d90:	4b1e      	ldr	r3, [pc, #120]	@ (8001e0c <MX_ADC4_Init+0xc0>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8001d96:	4b1d      	ldr	r3, [pc, #116]	@ (8001e0c <MX_ADC4_Init+0xc0>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e0c <MX_ADC4_Init+0xc0>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001da4:	4b19      	ldr	r3, [pc, #100]	@ (8001e0c <MX_ADC4_Init+0xc0>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001daa:	4b18      	ldr	r3, [pc, #96]	@ (8001e0c <MX_ADC4_Init+0xc0>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001db0:	4b16      	ldr	r3, [pc, #88]	@ (8001e0c <MX_ADC4_Init+0xc0>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001db8:	4b14      	ldr	r3, [pc, #80]	@ (8001e0c <MX_ADC4_Init+0xc0>)
 8001dba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dbe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001dc0:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <MX_ADC4_Init+0xc0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001dc8:	4810      	ldr	r0, [pc, #64]	@ (8001e0c <MX_ADC4_Init+0xc0>)
 8001dca:	f002 ff63 	bl	8004c94 <HAL_ADC_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8001dd4:	f001 fe82 	bl	8003adc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <MX_ADC4_Init+0xc8>)
 8001dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ddc:	2306      	movs	r3, #6
 8001dde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001de0:	2307      	movs	r3, #7
 8001de2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001de4:	237f      	movs	r3, #127	@ 0x7f
 8001de6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001de8:	2304      	movs	r3, #4
 8001dea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001df0:	463b      	mov	r3, r7
 8001df2:	4619      	mov	r1, r3
 8001df4:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <MX_ADC4_Init+0xc0>)
 8001df6:	f003 f9f1 	bl	80051dc <HAL_ADC_ConfigChannel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 8001e00:	f001 fe6c 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	3720      	adds	r7, #32
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	200004ac 	.word	0x200004ac
 8001e10:	50000500 	.word	0x50000500
 8001e14:	04300002 	.word	0x04300002

08001e18 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e1e:	463b      	mov	r3, r7
 8001e20:	2220      	movs	r2, #32
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f00f ffbe 	bl	8011da6 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001e2a:	4b31      	ldr	r3, [pc, #196]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001e2c:	4a31      	ldr	r2, [pc, #196]	@ (8001ef4 <MX_ADC5_Init+0xdc>)
 8001e2e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001e30:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001e32:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001e36:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001e38:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001e44:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e4a:	4b29      	ldr	r3, [pc, #164]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e50:	4b27      	ldr	r3, [pc, #156]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001e52:	2204      	movs	r2, #4
 8001e54:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001e56:	4b26      	ldr	r3, [pc, #152]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8001e5c:	4b24      	ldr	r3, [pc, #144]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8001e62:	4b23      	ldr	r3, [pc, #140]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001e68:	4b21      	ldr	r3, [pc, #132]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e70:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e84:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8001e8a:	4b19      	ldr	r3, [pc, #100]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8001e92:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001e94:	221c      	movs	r2, #28
 8001e96:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8001e98:	4b15      	ldr	r3, [pc, #84]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001e9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e9e:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001ea0:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001ea6:	4b12      	ldr	r3, [pc, #72]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001eac:	4810      	ldr	r0, [pc, #64]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001eae:	f002 fef1 	bl	8004c94 <HAL_ADC_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_ADC5_Init+0xa4>
  {
    Error_Handler();
 8001eb8:	f001 fe10 	bl	8003adc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <MX_ADC5_Init+0xe0>)
 8001ebe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ec0:	2306      	movs	r3, #6
 8001ec2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ec8:	237f      	movs	r3, #127	@ 0x7f
 8001eca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ecc:	2304      	movs	r3, #4
 8001ece:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001ed4:	463b      	mov	r3, r7
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4805      	ldr	r0, [pc, #20]	@ (8001ef0 <MX_ADC5_Init+0xd8>)
 8001eda:	f003 f97f 	bl	80051dc <HAL_ADC_ConfigChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_ADC5_Init+0xd0>
  {
    Error_Handler();
 8001ee4:	f001 fdfa 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001ee8:	bf00      	nop
 8001eea:	3720      	adds	r7, #32
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000518 	.word	0x20000518
 8001ef4:	50000600 	.word	0x50000600
 8001ef8:	04300002 	.word	0x04300002

08001efc <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001f00:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <MX_CORDIC_Init+0x20>)
 8001f02:	4a07      	ldr	r2, [pc, #28]	@ (8001f20 <MX_CORDIC_Init+0x24>)
 8001f04:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001f06:	4805      	ldr	r0, [pc, #20]	@ (8001f1c <MX_CORDIC_Init+0x20>)
 8001f08:	f004 f8ee 	bl	80060e8 <HAL_CORDIC_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001f12:	f001 fde3 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200006a4 	.word	0x200006a4
 8001f20:	40020c00 	.word	0x40020c00

08001f24 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08c      	sub	sp, #48	@ 0x30
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001f2a:	463b      	mov	r3, r7
 8001f2c:	2230      	movs	r2, #48	@ 0x30
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f00f ff38 	bl	8011da6 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001f36:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb0 <MX_DAC1_Init+0x8c>)
 8001f38:	4a1e      	ldr	r2, [pc, #120]	@ (8001fb4 <MX_DAC1_Init+0x90>)
 8001f3a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001f3c:	481c      	ldr	r0, [pc, #112]	@ (8001fb0 <MX_DAC1_Init+0x8c>)
 8001f3e:	f004 fb1c 	bl	800657a <HAL_DAC_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001f48:	f001 fdc8 	bl	8003adc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f70:	463b      	mov	r3, r7
 8001f72:	2200      	movs	r2, #0
 8001f74:	4619      	mov	r1, r3
 8001f76:	480e      	ldr	r0, [pc, #56]	@ (8001fb0 <MX_DAC1_Init+0x8c>)
 8001f78:	f004 fc1c 	bl	80067b4 <HAL_DAC_ConfigChannel>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001f82:	f001 fdab 	bl	8003adc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001f86:	463b      	mov	r3, r7
 8001f88:	2210      	movs	r2, #16
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4808      	ldr	r0, [pc, #32]	@ (8001fb0 <MX_DAC1_Init+0x8c>)
 8001f8e:	f004 fc11 	bl	80067b4 <HAL_DAC_ConfigChannel>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8001f98:	f001 fda0 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  __HAL_LINKDMA(&hdac1, DMA_Handle1, hdma_dac1_ch1);
 8001f9c:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <MX_DAC1_Init+0x8c>)
 8001f9e:	4a06      	ldr	r2, [pc, #24]	@ (8001fb8 <MX_DAC1_Init+0x94>)
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <MX_DAC1_Init+0x94>)
 8001fa4:	4a02      	ldr	r2, [pc, #8]	@ (8001fb0 <MX_DAC1_Init+0x8c>)
 8001fa6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END DAC1_Init 2 */

}
 8001fa8:	bf00      	nop
 8001faa:	3730      	adds	r7, #48	@ 0x30
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	200006cc 	.word	0x200006cc
 8001fb4:	50000800 	.word	0x50000800
 8001fb8:	200006f4 	.word	0x200006f4

08001fbc <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08c      	sub	sp, #48	@ 0x30
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001fc2:	463b      	mov	r3, r7
 8001fc4:	2230      	movs	r2, #48	@ 0x30
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f00f feec 	bl	8011da6 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001fce:	4b16      	ldr	r3, [pc, #88]	@ (8002028 <MX_DAC2_Init+0x6c>)
 8001fd0:	4a16      	ldr	r2, [pc, #88]	@ (800202c <MX_DAC2_Init+0x70>)
 8001fd2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001fd4:	4814      	ldr	r0, [pc, #80]	@ (8002028 <MX_DAC2_Init+0x6c>)
 8001fd6:	f004 fad0 	bl	800657a <HAL_DAC_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001fe0:	f001 fd7c 	bl	8003adc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8002000:	2301      	movs	r3, #1
 8002002:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002008:	463b      	mov	r3, r7
 800200a:	2200      	movs	r2, #0
 800200c:	4619      	mov	r1, r3
 800200e:	4806      	ldr	r0, [pc, #24]	@ (8002028 <MX_DAC2_Init+0x6c>)
 8002010:	f004 fbd0 	bl	80067b4 <HAL_DAC_ConfigChannel>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 800201a:	f001 fd5f 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 800201e:	bf00      	nop
 8002020:	3730      	adds	r7, #48	@ 0x30
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	200006e0 	.word	0x200006e0
 800202c:	50000c00 	.word	0x50000c00

08002030 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b098      	sub	sp, #96	@ 0x60
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002036:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002042:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	609a      	str	r2, [r3, #8]
 800204e:	60da      	str	r2, [r3, #12]
 8002050:	611a      	str	r2, [r3, #16]
 8002052:	615a      	str	r2, [r3, #20]
 8002054:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	2234      	movs	r2, #52	@ 0x34
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f00f fea2 	bl	8011da6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002062:	4b3e      	ldr	r3, [pc, #248]	@ (800215c <MX_TIM1_Init+0x12c>)
 8002064:	4a3e      	ldr	r2, [pc, #248]	@ (8002160 <MX_TIM1_Init+0x130>)
 8002066:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002068:	4b3c      	ldr	r3, [pc, #240]	@ (800215c <MX_TIM1_Init+0x12c>)
 800206a:	2200      	movs	r2, #0
 800206c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206e:	4b3b      	ldr	r3, [pc, #236]	@ (800215c <MX_TIM1_Init+0x12c>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210;
 8002074:	4b39      	ldr	r3, [pc, #228]	@ (800215c <MX_TIM1_Init+0x12c>)
 8002076:	22d2      	movs	r2, #210	@ 0xd2
 8002078:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207a:	4b38      	ldr	r3, [pc, #224]	@ (800215c <MX_TIM1_Init+0x12c>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002080:	4b36      	ldr	r3, [pc, #216]	@ (800215c <MX_TIM1_Init+0x12c>)
 8002082:	2200      	movs	r2, #0
 8002084:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002086:	4b35      	ldr	r3, [pc, #212]	@ (800215c <MX_TIM1_Init+0x12c>)
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800208c:	4833      	ldr	r0, [pc, #204]	@ (800215c <MX_TIM1_Init+0x12c>)
 800208e:	f008 f866 	bl	800a15e <HAL_TIM_PWM_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002098:	f001 fd20 	bl	8003adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800209c:	2300      	movs	r3, #0
 800209e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020a0:	2300      	movs	r3, #0
 80020a2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020ac:	4619      	mov	r1, r3
 80020ae:	482b      	ldr	r0, [pc, #172]	@ (800215c <MX_TIM1_Init+0x12c>)
 80020b0:	f009 fa00 	bl	800b4b4 <HAL_TIMEx_MasterConfigSynchronization>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80020ba:	f001 fd0f 	bl	8003adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020be:	2360      	movs	r3, #96	@ 0x60
 80020c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020c6:	2300      	movs	r3, #0
 80020c8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020ca:	2300      	movs	r3, #0
 80020cc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020de:	2200      	movs	r2, #0
 80020e0:	4619      	mov	r1, r3
 80020e2:	481e      	ldr	r0, [pc, #120]	@ (800215c <MX_TIM1_Init+0x12c>)
 80020e4:	f008 faf4 	bl	800a6d0 <HAL_TIM_PWM_ConfigChannel>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80020ee:	f001 fcf5 	bl	8003adc <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 80020f2:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <MX_TIM1_Init+0x12c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699a      	ldr	r2, [r3, #24]
 80020f8:	4b18      	ldr	r3, [pc, #96]	@ (800215c <MX_TIM1_Init+0x12c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0208 	bic.w	r2, r2, #8
 8002100:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002116:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800211a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002120:	2300      	movs	r3, #0
 8002122:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002128:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800212c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002132:	2300      	movs	r3, #0
 8002134:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	4619      	mov	r1, r3
 800213e:	4807      	ldr	r0, [pc, #28]	@ (800215c <MX_TIM1_Init+0x12c>)
 8002140:	f009 fa4e 	bl	800b5e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 800214a:	f001 fcc7 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800214e:	4803      	ldr	r0, [pc, #12]	@ (800215c <MX_TIM1_Init+0x12c>)
 8002150:	f002 f864 	bl	800421c <HAL_TIM_MspPostInit>

}
 8002154:	bf00      	nop
 8002156:	3760      	adds	r7, #96	@ 0x60
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200007b4 	.word	0x200007b4
 8002160:	40012c00 	.word	0x40012c00

08002164 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08e      	sub	sp, #56	@ 0x38
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800216a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002178:	f107 031c 	add.w	r3, r7, #28
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002184:	463b      	mov	r3, r7
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	60da      	str	r2, [r3, #12]
 8002190:	611a      	str	r2, [r3, #16]
 8002192:	615a      	str	r2, [r3, #20]
 8002194:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002196:	4b2d      	ldr	r3, [pc, #180]	@ (800224c <MX_TIM4_Init+0xe8>)
 8002198:	4a2d      	ldr	r2, [pc, #180]	@ (8002250 <MX_TIM4_Init+0xec>)
 800219a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800219c:	4b2b      	ldr	r3, [pc, #172]	@ (800224c <MX_TIM4_Init+0xe8>)
 800219e:	2200      	movs	r2, #0
 80021a0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a2:	4b2a      	ldr	r3, [pc, #168]	@ (800224c <MX_TIM4_Init+0xe8>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 679;
 80021a8:	4b28      	ldr	r3, [pc, #160]	@ (800224c <MX_TIM4_Init+0xe8>)
 80021aa:	f240 22a7 	movw	r2, #679	@ 0x2a7
 80021ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b0:	4b26      	ldr	r3, [pc, #152]	@ (800224c <MX_TIM4_Init+0xe8>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b6:	4b25      	ldr	r3, [pc, #148]	@ (800224c <MX_TIM4_Init+0xe8>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021bc:	4823      	ldr	r0, [pc, #140]	@ (800224c <MX_TIM4_Init+0xe8>)
 80021be:	f007 fe5f 	bl	8009e80 <HAL_TIM_Base_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80021c8:	f001 fc88 	bl	8003adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021d6:	4619      	mov	r1, r3
 80021d8:	481c      	ldr	r0, [pc, #112]	@ (800224c <MX_TIM4_Init+0xe8>)
 80021da:	f008 fb8d 	bl	800a8f8 <HAL_TIM_ConfigClockSource>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80021e4:	f001 fc7a 	bl	8003adc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021e8:	4818      	ldr	r0, [pc, #96]	@ (800224c <MX_TIM4_Init+0xe8>)
 80021ea:	f007 ffb8 	bl	800a15e <HAL_TIM_PWM_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80021f4:	f001 fc72 	bl	8003adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002200:	f107 031c 	add.w	r3, r7, #28
 8002204:	4619      	mov	r1, r3
 8002206:	4811      	ldr	r0, [pc, #68]	@ (800224c <MX_TIM4_Init+0xe8>)
 8002208:	f009 f954 	bl	800b4b4 <HAL_TIMEx_MasterConfigSynchronization>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002212:	f001 fc63 	bl	8003adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002216:	2360      	movs	r3, #96	@ 0x60
 8002218:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002226:	463b      	mov	r3, r7
 8002228:	2200      	movs	r2, #0
 800222a:	4619      	mov	r1, r3
 800222c:	4807      	ldr	r0, [pc, #28]	@ (800224c <MX_TIM4_Init+0xe8>)
 800222e:	f008 fa4f 	bl	800a6d0 <HAL_TIM_PWM_ConfigChannel>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002238:	f001 fc50 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800223c:	4803      	ldr	r0, [pc, #12]	@ (800224c <MX_TIM4_Init+0xe8>)
 800223e:	f001 ffed 	bl	800421c <HAL_TIM_MspPostInit>

}
 8002242:	bf00      	nop
 8002244:	3738      	adds	r7, #56	@ 0x38
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000800 	.word	0x20000800
 8002250:	40000800 	.word	0x40000800

08002254 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002264:	4b19      	ldr	r3, [pc, #100]	@ (80022cc <MX_TIM6_Init+0x78>)
 8002266:	4a1a      	ldr	r2, [pc, #104]	@ (80022d0 <MX_TIM6_Init+0x7c>)
 8002268:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11549;
 800226a:	4b18      	ldr	r3, [pc, #96]	@ (80022cc <MX_TIM6_Init+0x78>)
 800226c:	f642 521d 	movw	r2, #11549	@ 0x2d1d
 8002270:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002272:	4b16      	ldr	r3, [pc, #88]	@ (80022cc <MX_TIM6_Init+0x78>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64934;
 8002278:	4b14      	ldr	r3, [pc, #80]	@ (80022cc <MX_TIM6_Init+0x78>)
 800227a:	f64f 52a6 	movw	r2, #64934	@ 0xfda6
 800227e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002280:	4b12      	ldr	r3, [pc, #72]	@ (80022cc <MX_TIM6_Init+0x78>)
 8002282:	2200      	movs	r2, #0
 8002284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002286:	4811      	ldr	r0, [pc, #68]	@ (80022cc <MX_TIM6_Init+0x78>)
 8002288:	f007 fdfa 	bl	8009e80 <HAL_TIM_Base_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002292:	f001 fc23 	bl	8003adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	4619      	mov	r1, r3
 80022a2:	480a      	ldr	r0, [pc, #40]	@ (80022cc <MX_TIM6_Init+0x78>)
 80022a4:	f009 f906 	bl	800b4b4 <HAL_TIMEx_MasterConfigSynchronization>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80022ae:	f001 fc15 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2100      	movs	r1, #0
 80022b6:	2036      	movs	r0, #54	@ 0x36
 80022b8:	f004 f92b 	bl	8006512 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022bc:	2036      	movs	r0, #54	@ 0x36
 80022be:	f004 f942 	bl	8006546 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM6_Init 2 */

}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	2000084c 	.word	0x2000084c
 80022d0:	40001000 	.word	0x40001000

080022d4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80022e4:	4b14      	ldr	r3, [pc, #80]	@ (8002338 <MX_TIM7_Init+0x64>)
 80022e6:	4a15      	ldr	r2, [pc, #84]	@ (800233c <MX_TIM7_Init+0x68>)
 80022e8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 14999;
 80022ea:	4b13      	ldr	r3, [pc, #76]	@ (8002338 <MX_TIM7_Init+0x64>)
 80022ec:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80022f0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f2:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <MX_TIM7_Init+0x64>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80022f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002338 <MX_TIM7_Init+0x64>)
 80022fa:	2209      	movs	r2, #9
 80022fc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002338 <MX_TIM7_Init+0x64>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002304:	480c      	ldr	r0, [pc, #48]	@ (8002338 <MX_TIM7_Init+0x64>)
 8002306:	f007 fdbb 	bl	8009e80 <HAL_TIM_Base_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002310:	f001 fbe4 	bl	8003adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002314:	2300      	movs	r3, #0
 8002316:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	4619      	mov	r1, r3
 8002320:	4805      	ldr	r0, [pc, #20]	@ (8002338 <MX_TIM7_Init+0x64>)
 8002322:	f009 f8c7 	bl	800b4b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800232c:	f001 fbd6 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002330:	bf00      	nop
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000898 	.word	0x20000898
 800233c:	40001400 	.word	0x40001400

08002340 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b098      	sub	sp, #96	@ 0x60
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002346:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
 8002350:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002352:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]
 8002360:	611a      	str	r2, [r3, #16]
 8002362:	615a      	str	r2, [r3, #20]
 8002364:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	2234      	movs	r2, #52	@ 0x34
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f00f fd1a 	bl	8011da6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002372:	4b3e      	ldr	r3, [pc, #248]	@ (800246c <MX_TIM8_Init+0x12c>)
 8002374:	4a3e      	ldr	r2, [pc, #248]	@ (8002470 <MX_TIM8_Init+0x130>)
 8002376:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002378:	4b3c      	ldr	r3, [pc, #240]	@ (800246c <MX_TIM8_Init+0x12c>)
 800237a:	2200      	movs	r2, #0
 800237c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237e:	4b3b      	ldr	r3, [pc, #236]	@ (800246c <MX_TIM8_Init+0x12c>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 210;
 8002384:	4b39      	ldr	r3, [pc, #228]	@ (800246c <MX_TIM8_Init+0x12c>)
 8002386:	22d2      	movs	r2, #210	@ 0xd2
 8002388:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238a:	4b38      	ldr	r3, [pc, #224]	@ (800246c <MX_TIM8_Init+0x12c>)
 800238c:	2200      	movs	r2, #0
 800238e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002390:	4b36      	ldr	r3, [pc, #216]	@ (800246c <MX_TIM8_Init+0x12c>)
 8002392:	2200      	movs	r2, #0
 8002394:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002396:	4b35      	ldr	r3, [pc, #212]	@ (800246c <MX_TIM8_Init+0x12c>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800239c:	4833      	ldr	r0, [pc, #204]	@ (800246c <MX_TIM8_Init+0x12c>)
 800239e:	f007 fede 	bl	800a15e <HAL_TIM_PWM_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80023a8:	f001 fb98 	bl	8003adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ac:	2300      	movs	r3, #0
 80023ae:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023b0:	2300      	movs	r3, #0
 80023b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80023b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023bc:	4619      	mov	r1, r3
 80023be:	482b      	ldr	r0, [pc, #172]	@ (800246c <MX_TIM8_Init+0x12c>)
 80023c0:	f009 f878 	bl	800b4b4 <HAL_TIMEx_MasterConfigSynchronization>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 80023ca:	f001 fb87 	bl	8003adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ce:	2360      	movs	r3, #96	@ 0x60
 80023d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023d6:	2300      	movs	r3, #0
 80023d8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023da:	2300      	movs	r3, #0
 80023dc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023e2:	2300      	movs	r3, #0
 80023e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023e6:	2300      	movs	r3, #0
 80023e8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023ea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80023ee:	2204      	movs	r2, #4
 80023f0:	4619      	mov	r1, r3
 80023f2:	481e      	ldr	r0, [pc, #120]	@ (800246c <MX_TIM8_Init+0x12c>)
 80023f4:	f008 f96c 	bl	800a6d0 <HAL_TIM_PWM_ConfigChannel>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80023fe:	f001 fb6d 	bl	8003adc <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_2);
 8002402:	4b1a      	ldr	r3, [pc, #104]	@ (800246c <MX_TIM8_Init+0x12c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	699a      	ldr	r2, [r3, #24]
 8002408:	4b18      	ldr	r3, [pc, #96]	@ (800246c <MX_TIM8_Init+0x12c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002410:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002426:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800242a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002430:	2300      	movs	r3, #0
 8002432:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002438:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800243c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002442:	2300      	movs	r3, #0
 8002444:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002446:	2300      	movs	r3, #0
 8002448:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	4619      	mov	r1, r3
 800244e:	4807      	ldr	r0, [pc, #28]	@ (800246c <MX_TIM8_Init+0x12c>)
 8002450:	f009 f8c6 	bl	800b5e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 800245a:	f001 fb3f 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800245e:	4803      	ldr	r0, [pc, #12]	@ (800246c <MX_TIM8_Init+0x12c>)
 8002460:	f001 fedc 	bl	800421c <HAL_TIM_MspPostInit>

}
 8002464:	bf00      	nop
 8002466:	3760      	adds	r7, #96	@ 0x60
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	200008e4 	.word	0x200008e4
 8002470:	40013400 	.word	0x40013400

08002474 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800247a:	f107 0310 	add.w	r3, r7, #16
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002492:	4b1f      	ldr	r3, [pc, #124]	@ (8002510 <MX_TIM15_Init+0x9c>)
 8002494:	4a1f      	ldr	r2, [pc, #124]	@ (8002514 <MX_TIM15_Init+0xa0>)
 8002496:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1499;
 8002498:	4b1d      	ldr	r3, [pc, #116]	@ (8002510 <MX_TIM15_Init+0x9c>)
 800249a:	f240 52db 	movw	r2, #1499	@ 0x5db
 800249e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002510 <MX_TIM15_Init+0x9c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 4;
 80024a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002510 <MX_TIM15_Init+0x9c>)
 80024a8:	2204      	movs	r2, #4
 80024aa:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ac:	4b18      	ldr	r3, [pc, #96]	@ (8002510 <MX_TIM15_Init+0x9c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80024b2:	4b17      	ldr	r3, [pc, #92]	@ (8002510 <MX_TIM15_Init+0x9c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b8:	4b15      	ldr	r3, [pc, #84]	@ (8002510 <MX_TIM15_Init+0x9c>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80024be:	4814      	ldr	r0, [pc, #80]	@ (8002510 <MX_TIM15_Init+0x9c>)
 80024c0:	f007 fcde 	bl	8009e80 <HAL_TIM_Base_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80024ca:	f001 fb07 	bl	8003adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80024d4:	f107 0310 	add.w	r3, r7, #16
 80024d8:	4619      	mov	r1, r3
 80024da:	480d      	ldr	r0, [pc, #52]	@ (8002510 <MX_TIM15_Init+0x9c>)
 80024dc:	f008 fa0c 	bl	800a8f8 <HAL_TIM_ConfigClockSource>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80024e6:	f001 faf9 	bl	8003adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	4619      	mov	r1, r3
 80024f6:	4806      	ldr	r0, [pc, #24]	@ (8002510 <MX_TIM15_Init+0x9c>)
 80024f8:	f008 ffdc 	bl	800b4b4 <HAL_TIMEx_MasterConfigSynchronization>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8002502:	f001 faeb 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	3720      	adds	r7, #32
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000930 	.word	0x20000930
 8002514:	40014000 	.word	0x40014000

08002518 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800251c:	4b0f      	ldr	r3, [pc, #60]	@ (800255c <MX_TIM16_Init+0x44>)
 800251e:	4a10      	ldr	r2, [pc, #64]	@ (8002560 <MX_TIM16_Init+0x48>)
 8002520:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 14999;
 8002522:	4b0e      	ldr	r3, [pc, #56]	@ (800255c <MX_TIM16_Init+0x44>)
 8002524:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8002528:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252a:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <MX_TIM16_Init+0x44>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 8002530:	4b0a      	ldr	r3, [pc, #40]	@ (800255c <MX_TIM16_Init+0x44>)
 8002532:	2209      	movs	r2, #9
 8002534:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002536:	4b09      	ldr	r3, [pc, #36]	@ (800255c <MX_TIM16_Init+0x44>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800253c:	4b07      	ldr	r3, [pc, #28]	@ (800255c <MX_TIM16_Init+0x44>)
 800253e:	2200      	movs	r2, #0
 8002540:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002542:	4b06      	ldr	r3, [pc, #24]	@ (800255c <MX_TIM16_Init+0x44>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002548:	4804      	ldr	r0, [pc, #16]	@ (800255c <MX_TIM16_Init+0x44>)
 800254a:	f007 fc99 	bl	8009e80 <HAL_TIM_Base_Init>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002554:	f001 fac2 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}
 800255c:	2000097c 	.word	0x2000097c
 8002560:	40014400 	.word	0x40014400

08002564 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002568:	4b22      	ldr	r3, [pc, #136]	@ (80025f4 <MX_UART4_Init+0x90>)
 800256a:	4a23      	ldr	r2, [pc, #140]	@ (80025f8 <MX_UART4_Init+0x94>)
 800256c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800256e:	4b21      	ldr	r3, [pc, #132]	@ (80025f4 <MX_UART4_Init+0x90>)
 8002570:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002574:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002576:	4b1f      	ldr	r3, [pc, #124]	@ (80025f4 <MX_UART4_Init+0x90>)
 8002578:	2200      	movs	r2, #0
 800257a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800257c:	4b1d      	ldr	r3, [pc, #116]	@ (80025f4 <MX_UART4_Init+0x90>)
 800257e:	2200      	movs	r2, #0
 8002580:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002582:	4b1c      	ldr	r3, [pc, #112]	@ (80025f4 <MX_UART4_Init+0x90>)
 8002584:	2200      	movs	r2, #0
 8002586:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002588:	4b1a      	ldr	r3, [pc, #104]	@ (80025f4 <MX_UART4_Init+0x90>)
 800258a:	220c      	movs	r2, #12
 800258c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800258e:	4b19      	ldr	r3, [pc, #100]	@ (80025f4 <MX_UART4_Init+0x90>)
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002594:	4b17      	ldr	r3, [pc, #92]	@ (80025f4 <MX_UART4_Init+0x90>)
 8002596:	2200      	movs	r2, #0
 8002598:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800259a:	4b16      	ldr	r3, [pc, #88]	@ (80025f4 <MX_UART4_Init+0x90>)
 800259c:	2200      	movs	r2, #0
 800259e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025a0:	4b14      	ldr	r3, [pc, #80]	@ (80025f4 <MX_UART4_Init+0x90>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025a6:	4b13      	ldr	r3, [pc, #76]	@ (80025f4 <MX_UART4_Init+0x90>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80025ac:	4811      	ldr	r0, [pc, #68]	@ (80025f4 <MX_UART4_Init+0x90>)
 80025ae:	f009 f8f1 	bl	800b794 <HAL_UART_Init>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80025b8:	f001 fa90 	bl	8003adc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025bc:	2100      	movs	r1, #0
 80025be:	480d      	ldr	r0, [pc, #52]	@ (80025f4 <MX_UART4_Init+0x90>)
 80025c0:	f009 fe8c 	bl	800c2dc <HAL_UARTEx_SetTxFifoThreshold>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80025ca:	f001 fa87 	bl	8003adc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025ce:	2100      	movs	r1, #0
 80025d0:	4808      	ldr	r0, [pc, #32]	@ (80025f4 <MX_UART4_Init+0x90>)
 80025d2:	f009 fec1 	bl	800c358 <HAL_UARTEx_SetRxFifoThreshold>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80025dc:	f001 fa7e 	bl	8003adc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80025e0:	4804      	ldr	r0, [pc, #16]	@ (80025f4 <MX_UART4_Init+0x90>)
 80025e2:	f009 fe42 	bl	800c26a <HAL_UARTEx_DisableFifoMode>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80025ec:	f001 fa76 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	200009c8 	.word	0x200009c8
 80025f8:	40004c00 	.word	0x40004c00

080025fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002602:	4b22      	ldr	r3, [pc, #136]	@ (800268c <MX_DMA_Init+0x90>)
 8002604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002606:	4a21      	ldr	r2, [pc, #132]	@ (800268c <MX_DMA_Init+0x90>)
 8002608:	f043 0304 	orr.w	r3, r3, #4
 800260c:	6493      	str	r3, [r2, #72]	@ 0x48
 800260e:	4b1f      	ldr	r3, [pc, #124]	@ (800268c <MX_DMA_Init+0x90>)
 8002610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800261a:	4b1c      	ldr	r3, [pc, #112]	@ (800268c <MX_DMA_Init+0x90>)
 800261c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800261e:	4a1b      	ldr	r2, [pc, #108]	@ (800268c <MX_DMA_Init+0x90>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6493      	str	r3, [r2, #72]	@ 0x48
 8002626:	4b19      	ldr	r3, [pc, #100]	@ (800268c <MX_DMA_Init+0x90>)
 8002628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	200b      	movs	r0, #11
 8002638:	f003 ff6b 	bl	8006512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800263c:	200b      	movs	r0, #11
 800263e:	f003 ff82 	bl	8006546 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	2100      	movs	r1, #0
 8002646:	200c      	movs	r0, #12
 8002648:	f003 ff63 	bl	8006512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800264c:	200c      	movs	r0, #12
 800264e:	f003 ff7a 	bl	8006546 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002652:	2200      	movs	r2, #0
 8002654:	2100      	movs	r1, #0
 8002656:	200d      	movs	r0, #13
 8002658:	f003 ff5b 	bl	8006512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800265c:	200d      	movs	r0, #13
 800265e:	f003 ff72 	bl	8006546 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002662:	2200      	movs	r2, #0
 8002664:	2100      	movs	r1, #0
 8002666:	200e      	movs	r0, #14
 8002668:	f003 ff53 	bl	8006512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800266c:	200e      	movs	r0, #14
 800266e:	f003 ff6a 	bl	8006546 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	2100      	movs	r1, #0
 8002676:	200f      	movs	r0, #15
 8002678:	f003 ff4b 	bl	8006512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800267c:	200f      	movs	r0, #15
 800267e:	f003 ff62 	bl	8006546 <HAL_NVIC_EnableIRQ>

}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000

08002690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08c      	sub	sp, #48	@ 0x30
 8002694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002696:	f107 031c 	add.w	r3, r7, #28
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	60da      	str	r2, [r3, #12]
 80026a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026a6:	4b9a      	ldr	r3, [pc, #616]	@ (8002910 <MX_GPIO_Init+0x280>)
 80026a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026aa:	4a99      	ldr	r2, [pc, #612]	@ (8002910 <MX_GPIO_Init+0x280>)
 80026ac:	f043 0310 	orr.w	r3, r3, #16
 80026b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026b2:	4b97      	ldr	r3, [pc, #604]	@ (8002910 <MX_GPIO_Init+0x280>)
 80026b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	61bb      	str	r3, [r7, #24]
 80026bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026be:	4b94      	ldr	r3, [pc, #592]	@ (8002910 <MX_GPIO_Init+0x280>)
 80026c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c2:	4a93      	ldr	r2, [pc, #588]	@ (8002910 <MX_GPIO_Init+0x280>)
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ca:	4b91      	ldr	r3, [pc, #580]	@ (8002910 <MX_GPIO_Init+0x280>)
 80026cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026d6:	4b8e      	ldr	r3, [pc, #568]	@ (8002910 <MX_GPIO_Init+0x280>)
 80026d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026da:	4a8d      	ldr	r2, [pc, #564]	@ (8002910 <MX_GPIO_Init+0x280>)
 80026dc:	f043 0320 	orr.w	r3, r3, #32
 80026e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026e2:	4b8b      	ldr	r3, [pc, #556]	@ (8002910 <MX_GPIO_Init+0x280>)
 80026e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e6:	f003 0320 	and.w	r3, r3, #32
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ee:	4b88      	ldr	r3, [pc, #544]	@ (8002910 <MX_GPIO_Init+0x280>)
 80026f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f2:	4a87      	ldr	r2, [pc, #540]	@ (8002910 <MX_GPIO_Init+0x280>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026fa:	4b85      	ldr	r3, [pc, #532]	@ (8002910 <MX_GPIO_Init+0x280>)
 80026fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002706:	4b82      	ldr	r3, [pc, #520]	@ (8002910 <MX_GPIO_Init+0x280>)
 8002708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270a:	4a81      	ldr	r2, [pc, #516]	@ (8002910 <MX_GPIO_Init+0x280>)
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002712:	4b7f      	ldr	r3, [pc, #508]	@ (8002910 <MX_GPIO_Init+0x280>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800271e:	4b7c      	ldr	r3, [pc, #496]	@ (8002910 <MX_GPIO_Init+0x280>)
 8002720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002722:	4a7b      	ldr	r2, [pc, #492]	@ (8002910 <MX_GPIO_Init+0x280>)
 8002724:	f043 0308 	orr.w	r3, r3, #8
 8002728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800272a:	4b79      	ldr	r3, [pc, #484]	@ (8002910 <MX_GPIO_Init+0x280>)
 800272c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 8002736:	2200      	movs	r2, #0
 8002738:	2120      	movs	r1, #32
 800273a:	4876      	ldr	r0, [pc, #472]	@ (8002914 <MX_GPIO_Init+0x284>)
 800273c:	f004 fe08 	bl	8007350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
 8002740:	2201      	movs	r2, #1
 8002742:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002746:	4874      	ldr	r0, [pc, #464]	@ (8002918 <MX_GPIO_Init+0x288>)
 8002748:	f004 fe02 	bl	8007350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, GPIO_PIN_RESET);
 800274c:	2200      	movs	r2, #0
 800274e:	2104      	movs	r1, #4
 8002750:	4871      	ldr	r0, [pc, #452]	@ (8002918 <MX_GPIO_Init+0x288>)
 8002752:	f004 fdfd 	bl	8007350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 8002756:	2200      	movs	r2, #0
 8002758:	2120      	movs	r1, #32
 800275a:	4870      	ldr	r0, [pc, #448]	@ (800291c <MX_GPIO_Init+0x28c>)
 800275c:	f004 fdf8 	bl	8007350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, NOT_RST_2_Pin|CS_OCD_1_Pin, GPIO_PIN_SET);
 8002760:	2201      	movs	r2, #1
 8002762:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002766:	486b      	ldr	r0, [pc, #428]	@ (8002914 <MX_GPIO_Init+0x284>)
 8002768:	f004 fdf2 	bl	8007350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port, NOT_RST_4_Pin, GPIO_PIN_SET);
 800276c:	2201      	movs	r2, #1
 800276e:	2140      	movs	r1, #64	@ 0x40
 8002770:	486a      	ldr	r0, [pc, #424]	@ (800291c <MX_GPIO_Init+0x28c>)
 8002772:	f004 fded 	bl	8007350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port, NOT_RST_3_Pin, GPIO_PIN_SET);
 8002776:	2201      	movs	r2, #1
 8002778:	2101      	movs	r1, #1
 800277a:	4869      	ldr	r0, [pc, #420]	@ (8002920 <MX_GPIO_Init+0x290>)
 800277c:	f004 fde8 	bl	8007350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port, NOT_RST_1_Pin, GPIO_PIN_SET);
 8002780:	2201      	movs	r2, #1
 8002782:	2180      	movs	r1, #128	@ 0x80
 8002784:	4867      	ldr	r0, [pc, #412]	@ (8002924 <MX_GPIO_Init+0x294>)
 8002786:	f004 fde3 	bl	8007350 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NOT_FAULT_1_Pin CS_FAULT_2_Pin NOT_FAULT_2_Pin CS_FAULT_1_Pin */
  GPIO_InitStruct.Pin = NOT_FAULT_1_Pin|CS_FAULT_2_Pin|NOT_FAULT_2_Pin|CS_FAULT_1_Pin;
 800278a:	f640 0315 	movw	r3, #2069	@ 0x815
 800278e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002790:	2300      	movs	r3, #0
 8002792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002798:	f107 031c 	add.w	r3, r7, #28
 800279c:	4619      	mov	r1, r3
 800279e:	485d      	ldr	r0, [pc, #372]	@ (8002914 <MX_GPIO_Init+0x284>)
 80027a0:	f004 fc3c 	bl	800701c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_INTERLOCK_Pin */
  GPIO_InitStruct.Pin = RESET_INTERLOCK_Pin;
 80027a4:	2320      	movs	r3, #32
 80027a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a8:	2301      	movs	r3, #1
 80027aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b0:	2300      	movs	r3, #0
 80027b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_INTERLOCK_GPIO_Port, &GPIO_InitStruct);
 80027b4:	f107 031c 	add.w	r3, r7, #28
 80027b8:	4619      	mov	r1, r3
 80027ba:	4856      	ldr	r0, [pc, #344]	@ (8002914 <MX_GPIO_Init+0x284>)
 80027bc:	f004 fc2e 	bl	800701c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_OCD_2_Pin */
  GPIO_InitStruct.Pin = CS_OCD_2_Pin;
 80027c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80027c6:	2311      	movs	r3, #17
 80027c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ce:	2300      	movs	r3, #0
 80027d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_OCD_2_GPIO_Port, &GPIO_InitStruct);
 80027d2:	f107 031c 	add.w	r3, r7, #28
 80027d6:	4619      	mov	r1, r3
 80027d8:	484f      	ldr	r0, [pc, #316]	@ (8002918 <MX_GPIO_Init+0x288>)
 80027da:	f004 fc1f 	bl	800701c <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_3_Pin */
  GPIO_InitStruct.Pin = READY_3_Pin;
 80027de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e4:	2300      	movs	r3, #0
 80027e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_3_GPIO_Port, &GPIO_InitStruct);
 80027ec:	f107 031c 	add.w	r3, r7, #28
 80027f0:	4619      	mov	r1, r3
 80027f2:	4849      	ldr	r0, [pc, #292]	@ (8002918 <MX_GPIO_Init+0x288>)
 80027f4:	f004 fc12 	bl	800701c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERLOCK_Pin NOT_FAULT_4_Pin */
  GPIO_InitStruct.Pin = INTERLOCK_Pin|NOT_FAULT_4_Pin;
 80027f8:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80027fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027fe:	2300      	movs	r3, #0
 8002800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002806:	f107 031c 	add.w	r3, r7, #28
 800280a:	4619      	mov	r1, r3
 800280c:	4843      	ldr	r0, [pc, #268]	@ (800291c <MX_GPIO_Init+0x28c>)
 800280e:	f004 fc05 	bl	800701c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_FPGA_Pin */
  GPIO_InitStruct.Pin = RESET_FPGA_Pin;
 8002812:	2304      	movs	r3, #4
 8002814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002816:	2301      	movs	r3, #1
 8002818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_FPGA_GPIO_Port, &GPIO_InitStruct);
 8002822:	f107 031c 	add.w	r3, r7, #28
 8002826:	4619      	mov	r1, r3
 8002828:	483b      	ldr	r0, [pc, #236]	@ (8002918 <MX_GPIO_Init+0x288>)
 800282a:	f004 fbf7 	bl	800701c <HAL_GPIO_Init>

  /*Configure GPIO pin : START_STOP_FPGA_Pin */
  GPIO_InitStruct.Pin = START_STOP_FPGA_Pin;
 800282e:	2320      	movs	r3, #32
 8002830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002832:	2301      	movs	r3, #1
 8002834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283a:	2300      	movs	r3, #0
 800283c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(START_STOP_FPGA_GPIO_Port, &GPIO_InitStruct);
 800283e:	f107 031c 	add.w	r3, r7, #28
 8002842:	4619      	mov	r1, r3
 8002844:	4835      	ldr	r0, [pc, #212]	@ (800291c <MX_GPIO_Init+0x28c>)
 8002846:	f004 fbe9 	bl	800701c <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_2_Pin */
  GPIO_InitStruct.Pin = READY_2_Pin;
 800284a:	2301      	movs	r3, #1
 800284c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800284e:	2300      	movs	r3, #0
 8002850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_2_GPIO_Port, &GPIO_InitStruct);
 8002856:	f107 031c 	add.w	r3, r7, #28
 800285a:	4619      	mov	r1, r3
 800285c:	4831      	ldr	r0, [pc, #196]	@ (8002924 <MX_GPIO_Init+0x294>)
 800285e:	f004 fbdd 	bl	800701c <HAL_GPIO_Init>

  /*Configure GPIO pins : NOT_RST_2_Pin CS_OCD_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_2_Pin|CS_OCD_1_Pin;
 8002862:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002868:	2311      	movs	r3, #17
 800286a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	2300      	movs	r3, #0
 8002872:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002874:	f107 031c 	add.w	r3, r7, #28
 8002878:	4619      	mov	r1, r3
 800287a:	4826      	ldr	r0, [pc, #152]	@ (8002914 <MX_GPIO_Init+0x284>)
 800287c:	f004 fbce 	bl	800701c <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_4_Pin */
  GPIO_InitStruct.Pin = NOT_RST_4_Pin;
 8002880:	2340      	movs	r3, #64	@ 0x40
 8002882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002884:	2311      	movs	r3, #17
 8002886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288c:	2300      	movs	r3, #0
 800288e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_4_GPIO_Port, &GPIO_InitStruct);
 8002890:	f107 031c 	add.w	r3, r7, #28
 8002894:	4619      	mov	r1, r3
 8002896:	4821      	ldr	r0, [pc, #132]	@ (800291c <MX_GPIO_Init+0x28c>)
 8002898:	f004 fbc0 	bl	800701c <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_4_Pin */
  GPIO_InitStruct.Pin = READY_4_Pin;
 800289c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_4_GPIO_Port, &GPIO_InitStruct);
 80028aa:	f107 031c 	add.w	r3, r7, #28
 80028ae:	4619      	mov	r1, r3
 80028b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028b4:	f004 fbb2 	bl	800701c <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_3_Pin */
  GPIO_InitStruct.Pin = NOT_RST_3_Pin;
 80028b8:	2301      	movs	r3, #1
 80028ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80028bc:	2311      	movs	r3, #17
 80028be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_3_GPIO_Port, &GPIO_InitStruct);
 80028c8:	f107 031c 	add.w	r3, r7, #28
 80028cc:	4619      	mov	r1, r3
 80028ce:	4814      	ldr	r0, [pc, #80]	@ (8002920 <MX_GPIO_Init+0x290>)
 80028d0:	f004 fba4 	bl	800701c <HAL_GPIO_Init>

  /*Configure GPIO pins : READY_1_Pin PD5 NOT_FAULT_3_Pin */
  GPIO_InitStruct.Pin = READY_1_Pin|GPIO_PIN_5|NOT_FAULT_3_Pin;
 80028d4:	2370      	movs	r3, #112	@ 0x70
 80028d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028d8:	2300      	movs	r3, #0
 80028da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028e0:	f107 031c 	add.w	r3, r7, #28
 80028e4:	4619      	mov	r1, r3
 80028e6:	480e      	ldr	r0, [pc, #56]	@ (8002920 <MX_GPIO_Init+0x290>)
 80028e8:	f004 fb98 	bl	800701c <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_1_Pin;
 80028ec:	2380      	movs	r3, #128	@ 0x80
 80028ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80028f0:	2311      	movs	r3, #17
 80028f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_1_GPIO_Port, &GPIO_InitStruct);
 80028fc:	f107 031c 	add.w	r3, r7, #28
 8002900:	4619      	mov	r1, r3
 8002902:	4808      	ldr	r0, [pc, #32]	@ (8002924 <MX_GPIO_Init+0x294>)
 8002904:	f004 fb8a 	bl	800701c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002908:	bf00      	nop
 800290a:	3730      	adds	r7, #48	@ 0x30
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40021000 	.word	0x40021000
 8002914:	48001000 	.word	0x48001000
 8002918:	48001400 	.word	0x48001400
 800291c:	48000800 	.word	0x48000800
 8002920:	48000c00 	.word	0x48000c00
 8002924:	48000400 	.word	0x48000400

08002928 <handle_event>:

/* USER CODE BEGIN 4 */

ConverterState handle_event(ConverterState currentState, ConverterEvent event) {
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	460a      	mov	r2, r1
 8002932:	71fb      	strb	r3, [r7, #7]
 8002934:	4613      	mov	r3, r2
 8002936:	71bb      	strb	r3, [r7, #6]
    switch (currentState) {
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	2b04      	cmp	r3, #4
 800293c:	d839      	bhi.n	80029b2 <handle_event+0x8a>
 800293e:	a201      	add	r2, pc, #4	@ (adr r2, 8002944 <handle_event+0x1c>)
 8002940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002944:	08002959 	.word	0x08002959
 8002948:	08002967 	.word	0x08002967
 800294c:	08002975 	.word	0x08002975
 8002950:	08002991 	.word	0x08002991
 8002954:	0800299f 	.word	0x0800299f
        case STATE_INIT:
            if (event == EVENT_START)
 8002958:	79bb      	ldrb	r3, [r7, #6]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d12b      	bne.n	80029b6 <handle_event+0x8e>
            {

            	currentState = STATE_STANDBY;
 800295e:	2301      	movs	r3, #1
 8002960:	71fb      	strb	r3, [r7, #7]
                return STATE_STANDBY;
 8002962:	2301      	movs	r3, #1
 8002964:	e031      	b.n	80029ca <handle_event+0xa2>
            }
            break;

        case STATE_STANDBY:
            if (event == EVENT_START)
 8002966:	79bb      	ldrb	r3, [r7, #6]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d126      	bne.n	80029ba <handle_event+0x92>
            {
            	currentState = STATE_REGULATION;
 800296c:	2302      	movs	r3, #2
 800296e:	71fb      	strb	r3, [r7, #7]
                return STATE_REGULATION;
 8002970:	2302      	movs	r3, #2
 8002972:	e02a      	b.n	80029ca <handle_event+0xa2>
            }
            break;

        case STATE_REGULATION:
        	//USB_SendString("State: INIT -> RUNNING\r\n");
            if (event == EVENT_FAULT)
 8002974:	79bb      	ldrb	r3, [r7, #6]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d103      	bne.n	8002982 <handle_event+0x5a>
            {
            	currentState = STATE_FAULT;
 800297a:	2303      	movs	r3, #3
 800297c:	71fb      	strb	r3, [r7, #7]
                return STATE_FAULT;
 800297e:	2303      	movs	r3, #3
 8002980:	e023      	b.n	80029ca <handle_event+0xa2>

            } else if (event == EVENT_SHUTDOWN)
 8002982:	79bb      	ldrb	r3, [r7, #6]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d11a      	bne.n	80029be <handle_event+0x96>
            {
            	currentState = STATE_SHUTDOWN;
 8002988:	2304      	movs	r3, #4
 800298a:	71fb      	strb	r3, [r7, #7]
                return STATE_SHUTDOWN;
 800298c:	2304      	movs	r3, #4
 800298e:	e01c      	b.n	80029ca <handle_event+0xa2>
            }

            break;

        case STATE_FAULT:
            if (event == EVENT_CLEAR_FAULT)
 8002990:	79bb      	ldrb	r3, [r7, #6]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d115      	bne.n	80029c2 <handle_event+0x9a>
            {
            	currentState = STATE_STANDBY;
 8002996:	2301      	movs	r3, #1
 8002998:	71fb      	strb	r3, [r7, #7]
                return STATE_STANDBY;
 800299a:	2301      	movs	r3, #1
 800299c:	e015      	b.n	80029ca <handle_event+0xa2>
            }
            break;

        case STATE_SHUTDOWN:
            if (event == EVENT_START)
 800299e:	79bb      	ldrb	r3, [r7, #6]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d110      	bne.n	80029c6 <handle_event+0x9e>
            {
            	once = 0;
 80029a4:	4b0c      	ldr	r3, [pc, #48]	@ (80029d8 <handle_event+0xb0>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
            	currentState = STATE_REGULATION;
 80029aa:	2302      	movs	r3, #2
 80029ac:	71fb      	strb	r3, [r7, #7]
                return STATE_REGULATION;
 80029ae:	2302      	movs	r3, #2
 80029b0:	e00b      	b.n	80029ca <handle_event+0xa2>
            }
            break;
        default:
            break;
 80029b2:	bf00      	nop
 80029b4:	e008      	b.n	80029c8 <handle_event+0xa0>
            break;
 80029b6:	bf00      	nop
 80029b8:	e006      	b.n	80029c8 <handle_event+0xa0>
            break;
 80029ba:	bf00      	nop
 80029bc:	e004      	b.n	80029c8 <handle_event+0xa0>
            break;
 80029be:	bf00      	nop
 80029c0:	e002      	b.n	80029c8 <handle_event+0xa0>
            break;
 80029c2:	bf00      	nop
 80029c4:	e000      	b.n	80029c8 <handle_event+0xa0>
            break;
 80029c6:	bf00      	nop
    }
    return currentState; // No state change
 80029c8:	79fb      	ldrb	r3, [r7, #7]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000b84 	.word	0x20000b84

080029dc <Set_PWM_DutyCycle>:
       // float TEMPERATURE_AFTER_CONVERSION_FROM_ADC = (((adc_value/4096.0f)*3.3f) - 0.4f)/0.0195f;
       // return TEMPERATURE_AFTER_CONVERSION_FROM_ADC;

}

void Set_PWM_DutyCycle(uint32_t dutyCycle) { // dutycyle for FAN SPEED CONTROl
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
    if (dutyCycle > 100) dutyCycle = 100;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b64      	cmp	r3, #100	@ 0x64
 80029e8:	d901      	bls.n	80029ee <Set_PWM_DutyCycle+0x12>
 80029ea:	2364      	movs	r3, #100	@ 0x64
 80029ec:	607b      	str	r3, [r7, #4]
    uint32_t pulse = (htim4.Init.Period + 1) * dutyCycle / 100 - 1;
 80029ee:	4b0b      	ldr	r3, [pc, #44]	@ (8002a1c <Set_PWM_DutyCycle+0x40>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	3301      	adds	r3, #1
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	fb02 f303 	mul.w	r3, r2, r3
 80029fa:	4a09      	ldr	r2, [pc, #36]	@ (8002a20 <Set_PWM_DutyCycle+0x44>)
 80029fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002a00:	095b      	lsrs	r3, r3, #5
 8002a02:	3b01      	subs	r3, #1
 8002a04:	60fb      	str	r3, [r7, #12]
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 8002a06:	4b05      	ldr	r3, [pc, #20]	@ (8002a1c <Set_PWM_DutyCycle+0x40>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20000800 	.word	0x20000800
 8002a20:	51eb851f 	.word	0x51eb851f
 8002a24:	00000000 	.word	0x00000000

08002a28 <HAL_ADC_ConvCpltCallback>:
//ADC save to array and moving average
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC5)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a20      	ldr	r2, [pc, #128]	@ (8002ab8 <HAL_ADC_ConvCpltCallback+0x90>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d135      	bne.n	8002aa6 <HAL_ADC_ConvCpltCallback+0x7e>
		    {
		        uint32_t sum = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	e00b      	b.n	8002a5c <HAL_ADC_ConvCpltCallback+0x34>
		        {
		            sum += adc5_dma_buffer[i];
 8002a44:	4a1d      	ldr	r2, [pc, #116]	@ (8002abc <HAL_ADC_ConvCpltCallback+0x94>)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b09      	cmp	r3, #9
 8002a60:	ddf0      	ble.n	8002a44 <HAL_ADC_ConvCpltCallback+0x1c>
		        }
		        adc_moving_average = ((sum / MA_WINDOW_SIZE)*3300)/4096;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4a16      	ldr	r2, [pc, #88]	@ (8002ac0 <HAL_ADC_ConvCpltCallback+0x98>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	08db      	lsrs	r3, r3, #3
 8002a6c:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8002a70:	fb02 f303 	mul.w	r3, r2, r3
 8002a74:	0b1b      	lsrs	r3, r3, #12
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	4b12      	ldr	r3, [pc, #72]	@ (8002ac4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8002a7a:	801a      	strh	r2, [r3, #0]
		        imax2_sum=(adc_moving_average-1450)*0.384;
 8002a7c:	4b11      	ldr	r3, [pc, #68]	@ (8002ac4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	f2a3 53aa 	subw	r3, r3, #1450	@ 0x5aa
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd fd75 	bl	8000574 <__aeabi_i2d>
 8002a8a:	a309      	add	r3, pc, #36	@ (adr r3, 8002ab0 <HAL_ADC_ConvCpltCallback+0x88>)
 8002a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a90:	f7fd fdda 	bl	8000648 <__aeabi_dmul>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4610      	mov	r0, r2
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f7fe f8ac 	bl	8000bf8 <__aeabi_d2uiz>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	4a09      	ldr	r2, [pc, #36]	@ (8002ac8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8002aa4:	6013      	str	r3, [r2, #0]
		        // Restart the DMA transfer
		       // HAL_ADC_Start_DMA(hadc, (uint32_t*)adc5_dma_buffer, MA_WINDOW_SIZE);
		    }


}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	bc6a7efa 	.word	0xbc6a7efa
 8002ab4:	3fd89374 	.word	0x3fd89374
 8002ab8:	50000600 	.word	0x50000600
 8002abc:	20000a98 	.word	0x20000a98
 8002ac0:	cccccccd 	.word	0xcccccccd
 8002ac4:	20000aac 	.word	0x20000aac
 8002ac8:	20000a94 	.word	0x20000a94

08002acc <Update_PWM_Frequency>:
        }
    }
}

void Update_PWM_Frequency(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t frequency)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	@ 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
	 uint32_t timer_clock = 150000000;  // Assuming a 150 MHz timer clock
 8002ad8:	4b33      	ldr	r3, [pc, #204]	@ (8002ba8 <Update_PWM_Frequency+0xdc>)
 8002ada:	61bb      	str	r3, [r7, #24]
	    uint32_t prescaler = htim->Init.Prescaler + 1;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	617b      	str	r3, [r7, #20]
	    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	fb02 f303 	mul.w	r3, r2, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	61fb      	str	r3, [r7, #28]

	    // Ensure period is within valid range
	    if (period > 65535) {
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002afc:	d314      	bcc.n	8002b28 <Update_PWM_Frequency+0x5c>
	        // Adjust prescaler to bring period within range
	        prescaler = (prescaler * (period / 65536)) + 1;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	3301      	adds	r3, #1
 8002b0a:	617b      	str	r3, [r7, #20]
	        period = (timer_clock / (prescaler * frequency)) - 1;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	fb02 f303 	mul.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	61fb      	str	r3, [r7, #28]
	        __HAL_TIM_SET_PRESCALER(htim, prescaler - 1);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	3a01      	subs	r2, #1
 8002b26:	629a      	str	r2, [r3, #40]	@ 0x28
	    }

	    // Update the period register (ARR) with double buffering
	    __HAL_TIM_SET_AUTORELOAD(htim, period);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	69fa      	ldr	r2, [r7, #28]
 8002b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	60da      	str	r2, [r3, #12]

	    // Set the duty cycle to approximately 50%
	    uint32_t pulse = period / 2;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	085b      	lsrs	r3, r3, #1
 8002b3a:	613b      	str	r3, [r7, #16]
	    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d104      	bne.n	8002b4c <Update_PWM_Frequency+0x80>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b4a:	e023      	b.n	8002b94 <Update_PWM_Frequency+0xc8>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d104      	bne.n	8002b5c <Update_PWM_Frequency+0x90>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	6393      	str	r3, [r2, #56]	@ 0x38
 8002b5a:	e01b      	b.n	8002b94 <Update_PWM_Frequency+0xc8>
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d104      	bne.n	8002b6c <Update_PWM_Frequency+0xa0>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002b6a:	e013      	b.n	8002b94 <Update_PWM_Frequency+0xc8>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b0c      	cmp	r3, #12
 8002b70:	d104      	bne.n	8002b7c <Update_PWM_Frequency+0xb0>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b7a:	e00b      	b.n	8002b94 <Update_PWM_Frequency+0xc8>
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b10      	cmp	r3, #16
 8002b80:	d104      	bne.n	8002b8c <Update_PWM_Frequency+0xc0>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	6493      	str	r3, [r2, #72]	@ 0x48
 8002b8a:	e003      	b.n	8002b94 <Update_PWM_Frequency+0xc8>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	64d3      	str	r3, [r2, #76]	@ 0x4c

	    // Manually generate an update event by setting the UG bit in the EGR register
	    htim->Instance->EGR = TIM_EGR_UG;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_AUTORELOAD(htim, period);

    // Restart the timer PWM generation
    HAL_TIM_PWM_Stop(htim, channel);
    HAL_TIM_PWM_Start(htim, channel);*/
}
 8002b9c:	bf00      	nop
 8002b9e:	3724      	adds	r7, #36	@ 0x24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	08f0d180 	.word	0x08f0d180

08002bac <Check_Faults>:
	        dac_buffer[i] = (((1/3.3)*res12_b) + ((0.5/3.3)*res12_b) * sin(2 * M_PI * i/BUFFER_SIZE));
	    }
}

uint8_t Check_Faults()
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	// Faults pins are from gate driver and they are active pull down
	// 4 fault pins from 4 gate driver + 2 fault pins from  2 currents sensors  = 6 pins
	if(HAL_GPIO_ReadPin(CS_FAULT_1_GPIO_Port, CS_FAULT_1_Pin) && HAL_GPIO_ReadPin(CS_FAULT_2_GPIO_Port, CS_FAULT_2_Pin)
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	4818      	ldr	r0, [pc, #96]	@ (8002c14 <Check_Faults+0x68>)
 8002bb4:	f004 fbb4 	bl	8007320 <HAL_GPIO_ReadPin>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d026      	beq.n	8002c0c <Check_Faults+0x60>
 8002bbe:	2110      	movs	r1, #16
 8002bc0:	4814      	ldr	r0, [pc, #80]	@ (8002c14 <Check_Faults+0x68>)
 8002bc2:	f004 fbad 	bl	8007320 <HAL_GPIO_ReadPin>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d01f      	beq.n	8002c0c <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_1_GPIO_Port, NOT_FAULT_1_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_2_GPIO_Port, NOT_FAULT_2_Pin)
 8002bcc:	2104      	movs	r1, #4
 8002bce:	4811      	ldr	r0, [pc, #68]	@ (8002c14 <Check_Faults+0x68>)
 8002bd0:	f004 fba6 	bl	8007320 <HAL_GPIO_ReadPin>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d018      	beq.n	8002c0c <Check_Faults+0x60>
 8002bda:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002bde:	480d      	ldr	r0, [pc, #52]	@ (8002c14 <Check_Faults+0x68>)
 8002be0:	f004 fb9e 	bl	8007320 <HAL_GPIO_ReadPin>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d010      	beq.n	8002c0c <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_3_GPIO_Port, NOT_FAULT_3_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_4_GPIO_Port, NOT_FAULT_4_Pin) )
 8002bea:	2140      	movs	r1, #64	@ 0x40
 8002bec:	480a      	ldr	r0, [pc, #40]	@ (8002c18 <Check_Faults+0x6c>)
 8002bee:	f004 fb97 	bl	8007320 <HAL_GPIO_ReadPin>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d009      	beq.n	8002c0c <Check_Faults+0x60>
 8002bf8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bfc:	4807      	ldr	r0, [pc, #28]	@ (8002c1c <Check_Faults+0x70>)
 8002bfe:	f004 fb8f 	bl	8007320 <HAL_GPIO_ReadPin>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <Check_Faults+0x60>
		return 0; // if all pins is 1 then all is ready, there is not faults then return 0
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e000      	b.n	8002c0e <Check_Faults+0x62>

	return 1;
 8002c0c:	2301      	movs	r3, #1
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	48001000 	.word	0x48001000
 8002c18:	48000c00 	.word	0x48000c00
 8002c1c:	48000800 	.word	0x48000800

08002c20 <Check_Ready>:

uint8_t Check_Ready()
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
	// Ready pins are from gate driver and they are active pull up
	// 4 ready pins from 4 gate drivers
	if(HAL_GPIO_ReadPin(READY_1_GPIO_Port, READY_1_Pin) && HAL_GPIO_ReadPin(READY_2_GPIO_Port, READY_2_Pin)
 8002c24:	2110      	movs	r1, #16
 8002c26:	4811      	ldr	r0, [pc, #68]	@ (8002c6c <Check_Ready+0x4c>)
 8002c28:	f004 fb7a 	bl	8007320 <HAL_GPIO_ReadPin>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d019      	beq.n	8002c66 <Check_Ready+0x46>
 8002c32:	2101      	movs	r1, #1
 8002c34:	480e      	ldr	r0, [pc, #56]	@ (8002c70 <Check_Ready+0x50>)
 8002c36:	f004 fb73 	bl	8007320 <HAL_GPIO_ReadPin>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d012      	beq.n	8002c66 <Check_Ready+0x46>
			&& HAL_GPIO_ReadPin(READY_3_GPIO_Port, READY_3_Pin) && HAL_GPIO_ReadPin(READY_4_GPIO_Port, READY_4_Pin) )
 8002c40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c44:	480b      	ldr	r0, [pc, #44]	@ (8002c74 <Check_Ready+0x54>)
 8002c46:	f004 fb6b 	bl	8007320 <HAL_GPIO_ReadPin>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <Check_Ready+0x46>
 8002c50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c58:	f004 fb62 	bl	8007320 <HAL_GPIO_ReadPin>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <Check_Ready+0x46>
			return 1; // return 1 when is gate drivers ready
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <Check_Ready+0x48>

		return 0;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	48000c00 	.word	0x48000c00
 8002c70:	48000400 	.word	0x48000400
 8002c74:	48001400 	.word	0x48001400

08002c78 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002c78:	b5b0      	push	{r4, r5, r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	// SOFT start_program RAMP REALISATION
	//  Ts 20khz
	if(htim->Instance == TIM15)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a6e      	ldr	r2, [pc, #440]	@ (8002e40 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	f040 80b1 	bne.w	8002dee <HAL_TIM_PeriodElapsedCallback+0x176>
	{
		//sythick1 =  HAL_GetTick();
		if(currentState == STATE_REGULATION )
 8002c8c:	4b6d      	ldr	r3, [pc, #436]	@ (8002e44 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	f040 80a9 	bne.w	8002de8 <HAL_TIM_PeriodElapsedCallback+0x170>
		{
		//current_sensor1_vref = adc3_dma_buffer[0]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[0], pcb_temp)/4096)*3.3;
		//current_sensor2_vref = adc3_dma_buffer[1]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[1], pcb_temp)/4096)*3.3;

		input_voltage = (int)((((adc3_dma_buffer[2])*3300)/4096-200)*18.81);//[mV]		((Low_pass_filter(adc3_dma_buffer[2], input_voltage)/4096)*3.3-0.2)*27.1;
 8002c96:	4b6c      	ldr	r3, [pc, #432]	@ (8002e48 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002c98:	889b      	ldrh	r3, [r3, #4]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002ca2:	fb02 f303 	mul.w	r3, r2, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	da01      	bge.n	8002cae <HAL_TIM_PeriodElapsedCallback+0x36>
 8002caa:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002cae:	131b      	asrs	r3, r3, #12
 8002cb0:	3bc8      	subs	r3, #200	@ 0xc8
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fc5e 	bl	8000574 <__aeabi_i2d>
 8002cb8:	a35d      	add	r3, pc, #372	@ (adr r3, 8002e30 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbe:	f7fd fcc3 	bl	8000648 <__aeabi_dmul>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f7fd ff6d 	bl	8000ba8 <__aeabi_d2iz>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b5e      	ldr	r3, [pc, #376]	@ (8002e4c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002cd4:	601a      	str	r2, [r3, #0]
		output_voltage = (int)((((adc4_dma_buffer[1])*3300)/4096-200)*18.81);//[mV] 		((Low_pass_filter(adc4_dma_buffer, output_voltage)/4096)*3.3-0.2)*27.1;
 8002cd6:	4b5e      	ldr	r3, [pc, #376]	@ (8002e50 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002cd8:	885b      	ldrh	r3, [r3, #2]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002ce2:	fb02 f303 	mul.w	r3, r2, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	da01      	bge.n	8002cee <HAL_TIM_PeriodElapsedCallback+0x76>
 8002cea:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002cee:	131b      	asrs	r3, r3, #12
 8002cf0:	3bc8      	subs	r3, #200	@ 0xc8
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fc3e 	bl	8000574 <__aeabi_i2d>
 8002cf8:	a34d      	add	r3, pc, #308	@ (adr r3, 8002e30 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfe:	f7fd fca3 	bl	8000648 <__aeabi_dmul>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4610      	mov	r0, r2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f7fd ff4d 	bl	8000ba8 <__aeabi_d2iz>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b50      	ldr	r3, [pc, #320]	@ (8002e54 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002d14:	601a      	str	r2, [r3, #0]
		if(once == 0) Update_PWM_Frequency(&htim8, TIM_CHANNEL_2, 7100000); // Set TIM8 CH1 o freq that is delay hc and send to fpga
		}

		imax2 = imax1 + imax2_sum; // imax2_sum signal from FPGA
		// imax1,2 each for branches to make 180 degree shift*/
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref+((int)imax1*0.025)); // imax1  1.5V is 0A;  1A is 20mV; 1 bit is 0.8mV; imax[mA]*0.02 [V/A]/0.8[mV] = Value for DAC
 8002d16:	4b50      	ldr	r3, [pc, #320]	@ (8002e58 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fd fc2a 	bl	8000574 <__aeabi_i2d>
 8002d20:	4604      	mov	r4, r0
 8002d22:	460d      	mov	r5, r1
 8002d24:	4b4d      	ldr	r3, [pc, #308]	@ (8002e5c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fd fc23 	bl	8000574 <__aeabi_i2d>
 8002d2e:	a342      	add	r3, pc, #264	@ (adr r3, 8002e38 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	f7fd fc88 	bl	8000648 <__aeabi_dmul>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	4629      	mov	r1, r5
 8002d40:	f7fd facc 	bl	80002dc <__adddf3>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	f7fd ff54 	bl	8000bf8 <__aeabi_d2uiz>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2200      	movs	r2, #0
 8002d54:	2100      	movs	r1, #0
 8002d56:	4842      	ldr	r0, [pc, #264]	@ (8002e60 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002d58:	f003 fcf4 	bl	8006744 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, current_sensor2_vref+((int)imax2*0.025)); // imax2
 8002d5c:	4b41      	ldr	r3, [pc, #260]	@ (8002e64 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fd fc07 	bl	8000574 <__aeabi_i2d>
 8002d66:	4604      	mov	r4, r0
 8002d68:	460d      	mov	r5, r1
 8002d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e68 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fc00 	bl	8000574 <__aeabi_i2d>
 8002d74:	a330      	add	r3, pc, #192	@ (adr r3, 8002e38 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	f7fd fc65 	bl	8000648 <__aeabi_dmul>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4620      	mov	r0, r4
 8002d84:	4629      	mov	r1, r5
 8002d86:	f7fd faa9 	bl	80002dc <__adddf3>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4610      	mov	r0, r2
 8002d90:	4619      	mov	r1, r3
 8002d92:	f7fd ff31 	bl	8000bf8 <__aeabi_d2uiz>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2110      	movs	r1, #16
 8002d9c:	4830      	ldr	r0, [pc, #192]	@ (8002e60 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002d9e:	f003 fcd1 	bl	8006744 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref-((int)imin*0.25)); // imin uzyto tutaj wzmacniacza 10x dla sygnalu z sensora pradu wiec ma wzmocnienie 200mv/A a nie 20mv/a
 8002da2:	4b2d      	ldr	r3, [pc, #180]	@ (8002e58 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd fbe4 	bl	8000574 <__aeabi_i2d>
 8002dac:	4604      	mov	r4, r0
 8002dae:	460d      	mov	r5, r1
 8002db0:	4b2e      	ldr	r3, [pc, #184]	@ (8002e6c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd fbdd 	bl	8000574 <__aeabi_i2d>
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8002e70 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002dc0:	f7fd fc42 	bl	8000648 <__aeabi_dmul>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4620      	mov	r0, r4
 8002dca:	4629      	mov	r1, r5
 8002dcc:	f7fd fa84 	bl	80002d8 <__aeabi_dsub>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	f7fd ff0e 	bl	8000bf8 <__aeabi_d2uiz>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2200      	movs	r2, #0
 8002de0:	2100      	movs	r1, #0
 8002de2:	4824      	ldr	r0, [pc, #144]	@ (8002e74 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002de4:	f003 fcae 	bl	8006744 <HAL_DAC_SetValue>
		//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
		//once = 1;
		//}

		//sythick2 =  HAL_GetTick() - sythick1;
		flag_control = 1;
 8002de8:	4b23      	ldr	r3, [pc, #140]	@ (8002e78 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM6) // 5 sec period
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a22      	ldr	r2, [pc, #136]	@ (8002e7c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d101      	bne.n	8002dfc <HAL_TIM_PeriodElapsedCallback+0x184>
		    {
		//if(currentState == STATE_SOFT_START || currentState == STATE_REGULATION )
				//{
				FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
 8002df8:	f000 f9ae 	bl	8003158 <FAN_Drive>
				//}
		    }


	if (htim->Instance == TIM7)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a1f      	ldr	r2, [pc, #124]	@ (8002e80 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d110      	bne.n	8002e28 <HAL_TIM_PeriodElapsedCallback+0x1b0>
	    {
	        // Turn off OCD pins of currents sensors to reset current sensor 1us

	        HAL_GPIO_TogglePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin);
 8002e06:	2102      	movs	r1, #2
 8002e08:	481e      	ldr	r0, [pc, #120]	@ (8002e84 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002e0a:	f004 fab9 	bl	8007380 <HAL_GPIO_TogglePin>
	        HAL_GPIO_TogglePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin);
 8002e0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e12:	481d      	ldr	r0, [pc, #116]	@ (8002e88 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002e14:	f004 fab4 	bl	8007380 <HAL_GPIO_TogglePin>
	        HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2120      	movs	r1, #32
 8002e1c:	4819      	ldr	r0, [pc, #100]	@ (8002e84 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002e1e:	f004 fa97 	bl	8007350 <HAL_GPIO_WritePin>
	        // Stop the timer
	        HAL_TIM_Base_Stop_IT(&htim7);
 8002e22:	481a      	ldr	r0, [pc, #104]	@ (8002e8c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002e24:	f007 f96c 	bl	800a100 <HAL_TIM_Base_Stop_IT>
	    }


}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e30:	28f5c28f 	.word	0x28f5c28f
 8002e34:	4032cf5c 	.word	0x4032cf5c
 8002e38:	9999999a 	.word	0x9999999a
 8002e3c:	3f999999 	.word	0x3f999999
 8002e40:	40014000 	.word	0x40014000
 8002e44:	20000b7f 	.word	0x20000b7f
 8002e48:	20000a78 	.word	0x20000a78
 8002e4c:	20000a6c 	.word	0x20000a6c
 8002e50:	20000a8c 	.word	0x20000a8c
 8002e54:	20000a84 	.word	0x20000a84
 8002e58:	20000a5c 	.word	0x20000a5c
 8002e5c:	20000a60 	.word	0x20000a60
 8002e60:	200006cc 	.word	0x200006cc
 8002e64:	20000a5e 	.word	0x20000a5e
 8002e68:	20000a64 	.word	0x20000a64
 8002e6c:	20000a68 	.word	0x20000a68
 8002e70:	3fd00000 	.word	0x3fd00000
 8002e74:	200006e0 	.word	0x200006e0
 8002e78:	20000b89 	.word	0x20000b89
 8002e7c:	40001000 	.word	0x40001000
 8002e80:	40001400 	.word	0x40001400
 8002e84:	48001000 	.word	0x48001000
 8002e88:	48001400 	.word	0x48001400
 8002e8c:	20000898 	.word	0x20000898

08002e90 <RAMP>:

void RAMP()
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
	// RAMP Voltage to soft-start
				if((vref-output_vol)>100)
 8002e94:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <RAMP+0x5c>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4b15      	ldr	r3, [pc, #84]	@ (8002ef0 <RAMP+0x60>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b64      	cmp	r3, #100	@ 0x64
 8002ea2:	d913      	bls.n	8002ecc <RAMP+0x3c>
				{

					Vramp = output_voltage+400000*Ts; // 200mV step per loop period
 8002ea4:	4b13      	ldr	r3, [pc, #76]	@ (8002ef4 <RAMP+0x64>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd fb53 	bl	8000554 <__aeabi_ui2d>
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <RAMP+0x68>)
 8002eb4:	f7fd fa12 	bl	80002dc <__adddf3>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	f7fd fe9a 	bl	8000bf8 <__aeabi_d2uiz>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8002efc <RAMP+0x6c>)
 8002eca:	801a      	strh	r2, [r3, #0]
				}
				//else if((vref-output_voltage)<-100)
				//{
				//	Vramp = output_voltage-4000000*Ts;
				//}
				if(Vramp>=48000)
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <RAMP+0x6c>)
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d906      	bls.n	8002ee6 <RAMP+0x56>
				{
					Vramp = 48000; // 48V
 8002ed8:	4b08      	ldr	r3, [pc, #32]	@ (8002efc <RAMP+0x6c>)
 8002eda:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002ede:	801a      	strh	r2, [r3, #0]
					RAMP_FINISHED = 1;
 8002ee0:	4b07      	ldr	r3, [pc, #28]	@ (8002f00 <RAMP+0x70>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	701a      	strb	r2, [r3, #0]
					//currentState = STATE_REGULATION;
				}


}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000000 	.word	0x20000000
 8002ef0:	20000038 	.word	0x20000038
 8002ef4:	20000a84 	.word	0x20000a84
 8002ef8:	40340000 	.word	0x40340000
 8002efc:	20000a8a 	.word	0x20000a8a
 8002f00:	20000a90 	.word	0x20000a90

08002f04 <regulatorPI>:

void regulatorPI(uint32_t *out, uint32_t *integral, float in, float in_zad, float limp, float limn, float kp, float ti, float Ts1)
{
 8002f04:	b5b0      	push	{r4, r5, r7, lr}
 8002f06:	b08c      	sub	sp, #48	@ 0x30
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6278      	str	r0, [r7, #36]	@ 0x24
 8002f0c:	6239      	str	r1, [r7, #32]
 8002f0e:	ed87 0a07 	vstr	s0, [r7, #28]
 8002f12:	edc7 0a06 	vstr	s1, [r7, #24]
 8002f16:	ed87 1a05 	vstr	s2, [r7, #20]
 8002f1a:	edc7 1a04 	vstr	s3, [r7, #16]
 8002f1e:	ed87 2a03 	vstr	s4, [r7, #12]
 8002f22:	edc7 2a02 	vstr	s5, [r7, #8]
 8002f26:	ed87 3a01 	vstr	s6, [r7, #4]
	// Tustin transfrom of PI regulator s -> 2/T * (Z-1)/(Z+1)
    float delta;
    uint32_t prev_out;
    delta = in_zad - in; // error
 8002f2a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f2e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f36:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    *integral = *integral + (delta + prev_delta) * (kp / ti) * Ts1 * 0.5 ; // I part
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fd fb08 	bl	8000554 <__aeabi_ui2d>
 8002f44:	4604      	mov	r4, r0
 8002f46:	460d      	mov	r5, r1
 8002f48:	4b5a      	ldr	r3, [pc, #360]	@ (80030b4 <regulatorPI+0x1b0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	ee07 3a90 	vmov	s15, r3
 8002f50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f54:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8002f60:	edd7 6a02 	vldr	s13, [r7, #8]
 8002f64:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002f68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f74:	ee17 0a90 	vmov	r0, s15
 8002f78:	f7fd fb0e 	bl	8000598 <__aeabi_f2d>
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	4b4d      	ldr	r3, [pc, #308]	@ (80030b8 <regulatorPI+0x1b4>)
 8002f82:	f7fd fb61 	bl	8000648 <__aeabi_dmul>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	f7fd f9a5 	bl	80002dc <__adddf3>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4610      	mov	r0, r2
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f7fd fe2d 	bl	8000bf8 <__aeabi_d2uiz>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	601a      	str	r2, [r3, #0]
    prev_delta = delta;
 8002fa4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002fa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fac:	ee17 2a90 	vmov	r2, s15
 8002fb0:	4b40      	ldr	r3, [pc, #256]	@ (80030b4 <regulatorPI+0x1b0>)
 8002fb2:	601a      	str	r2, [r3, #0]
    prev_out = *out;
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (*integral >= limp) // limit peak positive
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	ee07 3a90 	vmov	s15, r3
 8002fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002fca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd2:	d807      	bhi.n	8002fe4 <regulatorPI+0xe0>
    {
        *integral = limp;
 8002fd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fdc:	ee17 2a90 	vmov	r2, s15
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	601a      	str	r2, [r3, #0]
    }
    if (*integral <= limn)// limit peak negative
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	ee07 3a90 	vmov	s15, r3
 8002fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ff4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffc:	db07      	blt.n	800300e <regulatorPI+0x10a>
    {
        *integral = limn;
 8002ffe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003006:	ee17 2a90 	vmov	r2, s15
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	601a      	str	r2, [r3, #0]
    }
    *out = (delta * kp + *integral); // Sum of P and I
 800300e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003012:	edd7 7a03 	vldr	s15, [r7, #12]
 8003016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800302a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800302e:	ee17 2a90 	vmov	r2, s15
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	601a      	str	r2, [r3, #0]
    if (*out >= limp) // limit peak positive
 8003036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	ee07 3a90 	vmov	s15, r3
 800303e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003042:	ed97 7a05 	vldr	s14, [r7, #20]
 8003046:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800304a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304e:	d807      	bhi.n	8003060 <regulatorPI+0x15c>
    {
        *out = limp;
 8003050:	edd7 7a05 	vldr	s15, [r7, #20]
 8003054:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003058:	ee17 2a90 	vmov	r2, s15
 800305c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305e:	601a      	str	r2, [r3, #0]
    }
    if (*out <= limn)// limit peak negative
 8003060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	ee07 3a90 	vmov	s15, r3
 8003068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003070:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003078:	db07      	blt.n	800308a <regulatorPI+0x186>
    {
        *out = limn;
 800307a:	edd7 7a04 	vldr	s15, [r7, #16]
 800307e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003082:	ee17 2a90 	vmov	r2, s15
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	601a      	str	r2, [r3, #0]
    }
    if((*out - prev_out) < 50 || (*out - prev_out) > -50) // histeresis to probably prevent jitter
 800308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b31      	cmp	r3, #49	@ 0x31
 8003094:	d906      	bls.n	80030a4 <regulatorPI+0x1a0>
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f113 0f32 	cmn.w	r3, #50	@ 0x32
 80030a2:	d902      	bls.n	80030aa <regulatorPI+0x1a6>
    {
    	*out = prev_out;
 80030a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030a8:	601a      	str	r2, [r3, #0]
    }
}
 80030aa:	bf00      	nop
 80030ac:	3730      	adds	r7, #48	@ 0x30
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bdb0      	pop	{r4, r5, r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000b78 	.word	0x20000b78
 80030b8:	3fe00000 	.word	0x3fe00000
 80030bc:	00000000 	.word	0x00000000

080030c0 <Low_pass_filter>:

	    return y[0];
}*/

float Low_pass_filter(float new_sample, float old_sample, float old_sample_n1, float old_passed)
{
 80030c0:	b5b0      	push	{r4, r5, r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80030ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80030ce:	ed87 1a01 	vstr	s2, [r7, #4]
 80030d2:	edc7 1a00 	vstr	s3, [r7]
	float Low_passed_sample = 0;
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
	//Low_passed_sample = (float)ALPHA * new_sample + (1.0 - ALPHA) * old_sample;

	Low_passed_sample = (1-ALPHA)*0.5*(new_sample+old_sample_n1+ALPHA*old_passed);//(float)ALPHA * new_sample + (1.0 - ALPHA) * old_sample;
 80030dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80030e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80030e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e8:	ee17 0a90 	vmov	r0, s15
 80030ec:	f7fd fa54 	bl	8000598 <__aeabi_f2d>
 80030f0:	4604      	mov	r4, r0
 80030f2:	460d      	mov	r5, r1
 80030f4:	6838      	ldr	r0, [r7, #0]
 80030f6:	f7fd fa4f 	bl	8000598 <__aeabi_f2d>
 80030fa:	a313      	add	r3, pc, #76	@ (adr r3, 8003148 <Low_pass_filter+0x88>)
 80030fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003100:	f7fd faa2 	bl	8000648 <__aeabi_dmul>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4620      	mov	r0, r4
 800310a:	4629      	mov	r1, r5
 800310c:	f7fd f8e6 	bl	80002dc <__adddf3>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4610      	mov	r0, r2
 8003116:	4619      	mov	r1, r3
 8003118:	a30d      	add	r3, pc, #52	@ (adr r3, 8003150 <Low_pass_filter+0x90>)
 800311a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311e:	f7fd fa93 	bl	8000648 <__aeabi_dmul>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4610      	mov	r0, r2
 8003128:	4619      	mov	r1, r3
 800312a:	f7fd fd85 	bl	8000c38 <__aeabi_d2f>
 800312e:	4603      	mov	r3, r0
 8003130:	617b      	str	r3, [r7, #20]
	return Low_passed_sample;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	ee07 3a90 	vmov	s15, r3

}
 8003138:	eeb0 0a67 	vmov.f32	s0, s15
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bdb0      	pop	{r4, r5, r7, pc}
 8003142:	bf00      	nop
 8003144:	f3af 8000 	nop.w
 8003148:	33333333 	.word	0x33333333
 800314c:	3fd33333 	.word	0x3fd33333
 8003150:	66666666 	.word	0x66666666
 8003154:	3fd66666 	.word	0x3fd66666

08003158 <FAN_Drive>:
void FAN_Drive()
{ //@ToDo poprawic ogarnac zeby a intach bylo
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
		pcb_temp = (adc3_dma_buffer[3]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[3], pcb_temp)/4096)*3.3;
 800315e:	4b44      	ldr	r3, [pc, #272]	@ (8003270 <FAN_Drive+0x118>)
 8003160:	88db      	ldrh	r3, [r3, #6]
 8003162:	b29b      	uxth	r3, r3
 8003164:	461a      	mov	r2, r3
 8003166:	f640 43e4 	movw	r3, #3300	@ 0xce4
 800316a:	fb02 f303 	mul.w	r3, r2, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	da01      	bge.n	8003176 <FAN_Drive+0x1e>
 8003172:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8003176:	131b      	asrs	r3, r3, #12
 8003178:	461a      	mov	r2, r3
 800317a:	4b3e      	ldr	r3, [pc, #248]	@ (8003274 <FAN_Drive+0x11c>)
 800317c:	601a      	str	r2, [r3, #0]
		heat_sink_temp = (adc3_dma_buffer[4]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[4], heat_sink_temp)/4096)*3.3;
 800317e:	4b3c      	ldr	r3, [pc, #240]	@ (8003270 <FAN_Drive+0x118>)
 8003180:	891b      	ldrh	r3, [r3, #8]
 8003182:	b29b      	uxth	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	f640 43e4 	movw	r3, #3300	@ 0xce4
 800318a:	fb02 f303 	mul.w	r3, r2, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	da01      	bge.n	8003196 <FAN_Drive+0x3e>
 8003192:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8003196:	131b      	asrs	r3, r3, #12
 8003198:	461a      	mov	r2, r3
 800319a:	4b37      	ldr	r3, [pc, #220]	@ (8003278 <FAN_Drive+0x120>)
 800319c:	601a      	str	r2, [r3, #0]

		uint32_t temperature = 20;
 800319e:	2314      	movs	r3, #20
 80031a0:	603b      	str	r3, [r7, #0]

		pcb_temp = (pcb_temp-400)/20;
 80031a2:	4b34      	ldr	r3, [pc, #208]	@ (8003274 <FAN_Drive+0x11c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80031aa:	4a34      	ldr	r2, [pc, #208]	@ (800327c <FAN_Drive+0x124>)
 80031ac:	fba2 2303 	umull	r2, r3, r2, r3
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	4a30      	ldr	r2, [pc, #192]	@ (8003274 <FAN_Drive+0x11c>)
 80031b4:	6013      	str	r3, [r2, #0]
		heat_sink_temp = (heat_sink_temp-500)/10;
 80031b6:	4b30      	ldr	r3, [pc, #192]	@ (8003278 <FAN_Drive+0x120>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80031be:	4a2f      	ldr	r2, [pc, #188]	@ (800327c <FAN_Drive+0x124>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	08db      	lsrs	r3, r3, #3
 80031c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003278 <FAN_Drive+0x120>)
 80031c8:	6013      	str	r3, [r2, #0]
		// Choose the higher of the two temperatures
		temperature = (pcb_temp > heat_sink_temp) ? pcb_temp : heat_sink_temp;
 80031ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003278 <FAN_Drive+0x120>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4b29      	ldr	r3, [pc, #164]	@ (8003274 <FAN_Drive+0x11c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4293      	cmp	r3, r2
 80031d4:	bf38      	it	cc
 80031d6:	4613      	movcc	r3, r2
 80031d8:	603b      	str	r3, [r7, #0]
		// Apply a non-linear (exponential) scaling for the fan speed
		// This scales the temperature to a value between 0 and 1, then applies an exponential curve
		uint32_t normalized_temp = ((temperature - 20) *100)/ 80;  // Normalizing between 0 (20°C) and 1000 (100°C)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2264      	movs	r2, #100	@ 0x64
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80031e6:	4a25      	ldr	r2, [pc, #148]	@ (800327c <FAN_Drive+0x124>)
 80031e8:	fba2 2303 	umull	r2, r3, r2, r3
 80031ec:	099b      	lsrs	r3, r3, #6
 80031ee:	607b      	str	r3, [r7, #4]
		if (normalized_temp > 100) normalized_temp = 100;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b64      	cmp	r3, #100	@ 0x64
 80031f4:	d901      	bls.n	80031fa <FAN_Drive+0xa2>
 80031f6:	2364      	movs	r3, #100	@ 0x64
 80031f8:	607b      	str	r3, [r7, #4]
		if (normalized_temp < 0) normalized_temp = 0;

		duty_cycle = 20 + ((int)(pow(normalized_temp, 3) * 79))/1000000;  // Cubic curve for fan speed control
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7fd f9aa 	bl	8000554 <__aeabi_ui2d>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8003260 <FAN_Drive+0x108>
 8003208:	ec43 2b10 	vmov	d0, r2, r3
 800320c:	f012 fda4 	bl	8015d58 <pow>
 8003210:	ec51 0b10 	vmov	r0, r1, d0
 8003214:	a314      	add	r3, pc, #80	@ (adr r3, 8003268 <FAN_Drive+0x110>)
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f7fd fa15 	bl	8000648 <__aeabi_dmul>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4610      	mov	r0, r2
 8003224:	4619      	mov	r1, r3
 8003226:	f7fd fcbf 	bl	8000ba8 <__aeabi_d2iz>
 800322a:	4603      	mov	r3, r0
 800322c:	4a14      	ldr	r2, [pc, #80]	@ (8003280 <FAN_Drive+0x128>)
 800322e:	fb82 1203 	smull	r1, r2, r2, r3
 8003232:	1492      	asrs	r2, r2, #18
 8003234:	17db      	asrs	r3, r3, #31
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	3314      	adds	r3, #20
 800323a:	4a12      	ldr	r2, [pc, #72]	@ (8003284 <FAN_Drive+0x12c>)
 800323c:	6013      	str	r3, [r2, #0]

		// Enforce minimum and maximum duty cycles
		if (temperature < 20) {
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b13      	cmp	r3, #19
 8003242:	d803      	bhi.n	800324c <FAN_Drive+0xf4>
		        duty_cycle = 20;
 8003244:	4b0f      	ldr	r3, [pc, #60]	@ (8003284 <FAN_Drive+0x12c>)
 8003246:	2214      	movs	r2, #20
 8003248:	601a      	str	r2, [r3, #0]
		    	duty_cycle = 99;
		}

		//Set_PWM_DutyCycle(duty_cycle);

}
 800324a:	e005      	b.n	8003258 <FAN_Drive+0x100>
		} else if (temperature > 100) {
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2b64      	cmp	r3, #100	@ 0x64
 8003250:	d902      	bls.n	8003258 <FAN_Drive+0x100>
		    	duty_cycle = 99;
 8003252:	4b0c      	ldr	r3, [pc, #48]	@ (8003284 <FAN_Drive+0x12c>)
 8003254:	2263      	movs	r2, #99	@ 0x63
 8003256:	601a      	str	r2, [r3, #0]
}
 8003258:	bf00      	nop
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	00000000 	.word	0x00000000
 8003264:	40080000 	.word	0x40080000
 8003268:	00000000 	.word	0x00000000
 800326c:	4053c000 	.word	0x4053c000
 8003270:	20000a78 	.word	0x20000a78
 8003274:	20000a70 	.word	0x20000a70
 8003278:	20000a74 	.word	0x20000a74
 800327c:	cccccccd 	.word	0xcccccccd
 8003280:	431bde83 	.word	0x431bde83
 8003284:	2000002c 	.word	0x2000002c

08003288 <SendUSBMessage>:



void SendUSBMessage(const char* message) {
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(message);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7fd f815 	bl	80002c0 <strlen>
 8003296:	4603      	mov	r3, r0
 8003298:	81fb      	strh	r3, [r7, #14]
    if (len > 127) len = 127;  // Limit to buffer size
 800329a:	89fb      	ldrh	r3, [r7, #14]
 800329c:	2b7f      	cmp	r3, #127	@ 0x7f
 800329e:	d901      	bls.n	80032a4 <SendUSBMessage+0x1c>
 80032a0:	237f      	movs	r3, #127	@ 0x7f
 80032a2:	81fb      	strh	r3, [r7, #14]
    memcpy(USB_TX_Buffer, message, len);
 80032a4:	89fb      	ldrh	r3, [r7, #14]
 80032a6:	461a      	mov	r2, r3
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	480b      	ldr	r0, [pc, #44]	@ (80032d8 <SendUSBMessage+0x50>)
 80032ac:	f00e fe0d 	bl	8011eca <memcpy>
    USB_TX_Buffer[len] = '\0';  // Ensure null-terminated string
 80032b0:	89fb      	ldrh	r3, [r7, #14]
 80032b2:	4a09      	ldr	r2, [pc, #36]	@ (80032d8 <SendUSBMessage+0x50>)
 80032b4:	2100      	movs	r1, #0
 80032b6:	54d1      	strb	r1, [r2, r3]
            break;
        }
      // HAL_Delay(10);  // Small delay before retrying
    } while (retry_count-- > 0);*/
    do {
            result = CDC_Transmit_FS((uint8_t*)message, len);
 80032b8:	89fb      	ldrh	r3, [r7, #14]
 80032ba:	4619      	mov	r1, r3
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f00d f969 	bl	8010594 <CDC_Transmit_FS>
 80032c2:	4603      	mov	r3, r0
 80032c4:	737b      	strb	r3, [r7, #13]
        } while (result == USBD_BUSY); // Retry while USB is busy
 80032c6:	7b7b      	ldrb	r3, [r7, #13]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d0f5      	beq.n	80032b8 <SendUSBMessage+0x30>


}
 80032cc:	bf00      	nop
 80032ce:	bf00      	nop
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000af0 	.word	0x20000af0

080032dc <ParseUSBCommand>:

void ParseUSBCommand(void) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
	 if (dataReceivedFlag) {
 80032e0:	4ba6      	ldr	r3, [pc, #664]	@ (800357c <ParseUSBCommand+0x2a0>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 8146 	beq.w	8003578 <ParseUSBCommand+0x29c>
	        if (strncmp((char*)USB_RX_Buffer, "SET_KP", 6) == 0) {
 80032ec:	2206      	movs	r2, #6
 80032ee:	49a4      	ldr	r1, [pc, #656]	@ (8003580 <ParseUSBCommand+0x2a4>)
 80032f0:	48a4      	ldr	r0, [pc, #656]	@ (8003584 <ParseUSBCommand+0x2a8>)
 80032f2:	f00e fd60 	bl	8011db6 <strncmp>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d108      	bne.n	800330e <ParseUSBCommand+0x32>
	            sscanf((char*)USB_RX_Buffer, "SET_KP %f", &Kp);
 80032fc:	4aa2      	ldr	r2, [pc, #648]	@ (8003588 <ParseUSBCommand+0x2ac>)
 80032fe:	49a3      	ldr	r1, [pc, #652]	@ (800358c <ParseUSBCommand+0x2b0>)
 8003300:	48a0      	ldr	r0, [pc, #640]	@ (8003584 <ParseUSBCommand+0x2a8>)
 8003302:	f00e fce1 	bl	8011cc8 <siscanf>
	            SendUSBMessage("KP Updated\n");
 8003306:	48a2      	ldr	r0, [pc, #648]	@ (8003590 <ParseUSBCommand+0x2b4>)
 8003308:	f7ff ffbe 	bl	8003288 <SendUSBMessage>
 800330c:	e12c      	b.n	8003568 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_Ti", 6) == 0) {
 800330e:	2206      	movs	r2, #6
 8003310:	49a0      	ldr	r1, [pc, #640]	@ (8003594 <ParseUSBCommand+0x2b8>)
 8003312:	489c      	ldr	r0, [pc, #624]	@ (8003584 <ParseUSBCommand+0x2a8>)
 8003314:	f00e fd4f 	bl	8011db6 <strncmp>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d108      	bne.n	8003330 <ParseUSBCommand+0x54>
	            sscanf((char*)USB_RX_Buffer, "SET_Ti %f", &Ti);
 800331e:	4a9e      	ldr	r2, [pc, #632]	@ (8003598 <ParseUSBCommand+0x2bc>)
 8003320:	499e      	ldr	r1, [pc, #632]	@ (800359c <ParseUSBCommand+0x2c0>)
 8003322:	4898      	ldr	r0, [pc, #608]	@ (8003584 <ParseUSBCommand+0x2a8>)
 8003324:	f00e fcd0 	bl	8011cc8 <siscanf>
	            SendUSBMessage("Ti Updated\n");
 8003328:	489d      	ldr	r0, [pc, #628]	@ (80035a0 <ParseUSBCommand+0x2c4>)
 800332a:	f7ff ffad 	bl	8003288 <SendUSBMessage>
 800332e:	e11b      	b.n	8003568 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_VREF", 8) == 0) {
 8003330:	2208      	movs	r2, #8
 8003332:	499c      	ldr	r1, [pc, #624]	@ (80035a4 <ParseUSBCommand+0x2c8>)
 8003334:	4893      	ldr	r0, [pc, #588]	@ (8003584 <ParseUSBCommand+0x2a8>)
 8003336:	f00e fd3e 	bl	8011db6 <strncmp>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d108      	bne.n	8003352 <ParseUSBCommand+0x76>
	            sscanf((char*)USB_RX_Buffer, "SET_VREF %hu", &vref);
 8003340:	4a99      	ldr	r2, [pc, #612]	@ (80035a8 <ParseUSBCommand+0x2cc>)
 8003342:	499a      	ldr	r1, [pc, #616]	@ (80035ac <ParseUSBCommand+0x2d0>)
 8003344:	488f      	ldr	r0, [pc, #572]	@ (8003584 <ParseUSBCommand+0x2a8>)
 8003346:	f00e fcbf 	bl	8011cc8 <siscanf>
	            SendUSBMessage("vref Updated\n");
 800334a:	4899      	ldr	r0, [pc, #612]	@ (80035b0 <ParseUSBCommand+0x2d4>)
 800334c:	f7ff ff9c 	bl	8003288 <SendUSBMessage>
 8003350:	e10a      	b.n	8003568 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS1_VREF", 12) == 0) {
 8003352:	220c      	movs	r2, #12
 8003354:	4997      	ldr	r1, [pc, #604]	@ (80035b4 <ParseUSBCommand+0x2d8>)
 8003356:	488b      	ldr	r0, [pc, #556]	@ (8003584 <ParseUSBCommand+0x2a8>)
 8003358:	f00e fd2d 	bl	8011db6 <strncmp>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d108      	bne.n	8003374 <ParseUSBCommand+0x98>
	            sscanf((char*)USB_RX_Buffer, "SET_CS1_VREF %d", &current_sensor1_vref);
 8003362:	4a95      	ldr	r2, [pc, #596]	@ (80035b8 <ParseUSBCommand+0x2dc>)
 8003364:	4995      	ldr	r1, [pc, #596]	@ (80035bc <ParseUSBCommand+0x2e0>)
 8003366:	4887      	ldr	r0, [pc, #540]	@ (8003584 <ParseUSBCommand+0x2a8>)
 8003368:	f00e fcae 	bl	8011cc8 <siscanf>
	            SendUSBMessage("current_sensor1_vref Updated\n");
 800336c:	4894      	ldr	r0, [pc, #592]	@ (80035c0 <ParseUSBCommand+0x2e4>)
 800336e:	f7ff ff8b 	bl	8003288 <SendUSBMessage>
 8003372:	e0f9      	b.n	8003568 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS2_VREF", 12) == 0) {
 8003374:	220c      	movs	r2, #12
 8003376:	4993      	ldr	r1, [pc, #588]	@ (80035c4 <ParseUSBCommand+0x2e8>)
 8003378:	4882      	ldr	r0, [pc, #520]	@ (8003584 <ParseUSBCommand+0x2a8>)
 800337a:	f00e fd1c 	bl	8011db6 <strncmp>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d108      	bne.n	8003396 <ParseUSBCommand+0xba>
	            sscanf((char*)USB_RX_Buffer, "SET_CS2_VREF %d", &current_sensor2_vref);
 8003384:	4a90      	ldr	r2, [pc, #576]	@ (80035c8 <ParseUSBCommand+0x2ec>)
 8003386:	4991      	ldr	r1, [pc, #580]	@ (80035cc <ParseUSBCommand+0x2f0>)
 8003388:	487e      	ldr	r0, [pc, #504]	@ (8003584 <ParseUSBCommand+0x2a8>)
 800338a:	f00e fc9d 	bl	8011cc8 <siscanf>
	            SendUSBMessage("current_sensor2_vref Updated\n");
 800338e:	4890      	ldr	r0, [pc, #576]	@ (80035d0 <ParseUSBCommand+0x2f4>)
 8003390:	f7ff ff7a 	bl	8003288 <SendUSBMessage>
 8003394:	e0e8      	b.n	8003568 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_IMAX2_SUM", 13) == 0) {
 8003396:	220d      	movs	r2, #13
 8003398:	498e      	ldr	r1, [pc, #568]	@ (80035d4 <ParseUSBCommand+0x2f8>)
 800339a:	487a      	ldr	r0, [pc, #488]	@ (8003584 <ParseUSBCommand+0x2a8>)
 800339c:	f00e fd0b 	bl	8011db6 <strncmp>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d108      	bne.n	80033b8 <ParseUSBCommand+0xdc>
	            sscanf((char*)USB_RX_Buffer, "SET_IMAX2_SUM %d", &imax2_sum);
 80033a6:	4a8c      	ldr	r2, [pc, #560]	@ (80035d8 <ParseUSBCommand+0x2fc>)
 80033a8:	498c      	ldr	r1, [pc, #560]	@ (80035dc <ParseUSBCommand+0x300>)
 80033aa:	4876      	ldr	r0, [pc, #472]	@ (8003584 <ParseUSBCommand+0x2a8>)
 80033ac:	f00e fc8c 	bl	8011cc8 <siscanf>
	            SendUSBMessage("imax2_sum Updated\n");
 80033b0:	488b      	ldr	r0, [pc, #556]	@ (80035e0 <ParseUSBCommand+0x304>)
 80033b2:	f7ff ff69 	bl	8003288 <SendUSBMessage>
 80033b6:	e0d7      	b.n	8003568 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_TR", 12) == 0) {
 80033b8:	220c      	movs	r2, #12
 80033ba:	498a      	ldr	r1, [pc, #552]	@ (80035e4 <ParseUSBCommand+0x308>)
 80033bc:	4871      	ldr	r0, [pc, #452]	@ (8003584 <ParseUSBCommand+0x2a8>)
 80033be:	f00e fcfa 	bl	8011db6 <strncmp>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d108      	bne.n	80033da <ParseUSBCommand+0xfe>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_TR %f", &delay_tr);
 80033c8:	4a87      	ldr	r2, [pc, #540]	@ (80035e8 <ParseUSBCommand+0x30c>)
 80033ca:	4988      	ldr	r1, [pc, #544]	@ (80035ec <ParseUSBCommand+0x310>)
 80033cc:	486d      	ldr	r0, [pc, #436]	@ (8003584 <ParseUSBCommand+0x2a8>)
 80033ce:	f00e fc7b 	bl	8011cc8 <siscanf>
	            SendUSBMessage("delay_tr Updated\n");
 80033d2:	4887      	ldr	r0, [pc, #540]	@ (80035f0 <ParseUSBCommand+0x314>)
 80033d4:	f7ff ff58 	bl	8003288 <SendUSBMessage>
 80033d8:	e0c6      	b.n	8003568 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_HC", 12) == 0) {
 80033da:	220c      	movs	r2, #12
 80033dc:	4985      	ldr	r1, [pc, #532]	@ (80035f4 <ParseUSBCommand+0x318>)
 80033de:	4869      	ldr	r0, [pc, #420]	@ (8003584 <ParseUSBCommand+0x2a8>)
 80033e0:	f00e fce9 	bl	8011db6 <strncmp>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d108      	bne.n	80033fc <ParseUSBCommand+0x120>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_HC %f", &delay_hc);
 80033ea:	4a83      	ldr	r2, [pc, #524]	@ (80035f8 <ParseUSBCommand+0x31c>)
 80033ec:	4983      	ldr	r1, [pc, #524]	@ (80035fc <ParseUSBCommand+0x320>)
 80033ee:	4865      	ldr	r0, [pc, #404]	@ (8003584 <ParseUSBCommand+0x2a8>)
 80033f0:	f00e fc6a 	bl	8011cc8 <siscanf>
	            SendUSBMessage("delay_hc Updated\n");
 80033f4:	4882      	ldr	r0, [pc, #520]	@ (8003600 <ParseUSBCommand+0x324>)
 80033f6:	f7ff ff47 	bl	8003288 <SendUSBMessage>
 80033fa:	e0b5      	b.n	8003568 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_KP", 6) == 0) {
 80033fc:	2206      	movs	r2, #6
 80033fe:	4981      	ldr	r1, [pc, #516]	@ (8003604 <ParseUSBCommand+0x328>)
 8003400:	4860      	ldr	r0, [pc, #384]	@ (8003584 <ParseUSBCommand+0x2a8>)
 8003402:	f00e fcd8 	bl	8011db6 <strncmp>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10e      	bne.n	800342a <ParseUSBCommand+0x14e>
	            sprintf((char*)USB_TX_Buffer, "KP = %f\n", Kp);
 800340c:	4b5e      	ldr	r3, [pc, #376]	@ (8003588 <ParseUSBCommand+0x2ac>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7fd f8c1 	bl	8000598 <__aeabi_f2d>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	497b      	ldr	r1, [pc, #492]	@ (8003608 <ParseUSBCommand+0x32c>)
 800341c:	487b      	ldr	r0, [pc, #492]	@ (800360c <ParseUSBCommand+0x330>)
 800341e:	f00e fc33 	bl	8011c88 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003422:	487a      	ldr	r0, [pc, #488]	@ (800360c <ParseUSBCommand+0x330>)
 8003424:	f7ff ff30 	bl	8003288 <SendUSBMessage>
 8003428:	e09e      	b.n	8003568 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_Ti", 6) == 0) {
 800342a:	2206      	movs	r2, #6
 800342c:	4978      	ldr	r1, [pc, #480]	@ (8003610 <ParseUSBCommand+0x334>)
 800342e:	4855      	ldr	r0, [pc, #340]	@ (8003584 <ParseUSBCommand+0x2a8>)
 8003430:	f00e fcc1 	bl	8011db6 <strncmp>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10e      	bne.n	8003458 <ParseUSBCommand+0x17c>
	            sprintf((char*)USB_TX_Buffer, "Ti = %f\n", Ti);
 800343a:	4b57      	ldr	r3, [pc, #348]	@ (8003598 <ParseUSBCommand+0x2bc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7fd f8aa 	bl	8000598 <__aeabi_f2d>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4972      	ldr	r1, [pc, #456]	@ (8003614 <ParseUSBCommand+0x338>)
 800344a:	4870      	ldr	r0, [pc, #448]	@ (800360c <ParseUSBCommand+0x330>)
 800344c:	f00e fc1c 	bl	8011c88 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003450:	486e      	ldr	r0, [pc, #440]	@ (800360c <ParseUSBCommand+0x330>)
 8003452:	f7ff ff19 	bl	8003288 <SendUSBMessage>
 8003456:	e087      	b.n	8003568 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_VREF", 8) == 0) {
 8003458:	2208      	movs	r2, #8
 800345a:	496f      	ldr	r1, [pc, #444]	@ (8003618 <ParseUSBCommand+0x33c>)
 800345c:	4849      	ldr	r0, [pc, #292]	@ (8003584 <ParseUSBCommand+0x2a8>)
 800345e:	f00e fcaa 	bl	8011db6 <strncmp>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <ParseUSBCommand+0x1a2>
	            sprintf((char*)USB_TX_Buffer, "vref = %hu\n", vref);
 8003468:	4b4f      	ldr	r3, [pc, #316]	@ (80035a8 <ParseUSBCommand+0x2cc>)
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	496b      	ldr	r1, [pc, #428]	@ (800361c <ParseUSBCommand+0x340>)
 8003470:	4866      	ldr	r0, [pc, #408]	@ (800360c <ParseUSBCommand+0x330>)
 8003472:	f00e fc09 	bl	8011c88 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003476:	4865      	ldr	r0, [pc, #404]	@ (800360c <ParseUSBCommand+0x330>)
 8003478:	f7ff ff06 	bl	8003288 <SendUSBMessage>
 800347c:	e074      	b.n	8003568 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS1_VREF", 12) == 0) {
 800347e:	220c      	movs	r2, #12
 8003480:	4967      	ldr	r1, [pc, #412]	@ (8003620 <ParseUSBCommand+0x344>)
 8003482:	4840      	ldr	r0, [pc, #256]	@ (8003584 <ParseUSBCommand+0x2a8>)
 8003484:	f00e fc97 	bl	8011db6 <strncmp>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <ParseUSBCommand+0x1c8>
	            sprintf((char*)USB_TX_Buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 800348e:	4b4a      	ldr	r3, [pc, #296]	@ (80035b8 <ParseUSBCommand+0x2dc>)
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	461a      	mov	r2, r3
 8003494:	4963      	ldr	r1, [pc, #396]	@ (8003624 <ParseUSBCommand+0x348>)
 8003496:	485d      	ldr	r0, [pc, #372]	@ (800360c <ParseUSBCommand+0x330>)
 8003498:	f00e fbf6 	bl	8011c88 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800349c:	485b      	ldr	r0, [pc, #364]	@ (800360c <ParseUSBCommand+0x330>)
 800349e:	f7ff fef3 	bl	8003288 <SendUSBMessage>
 80034a2:	e061      	b.n	8003568 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS2_VREF", 12) == 0) {
 80034a4:	220c      	movs	r2, #12
 80034a6:	4960      	ldr	r1, [pc, #384]	@ (8003628 <ParseUSBCommand+0x34c>)
 80034a8:	4836      	ldr	r0, [pc, #216]	@ (8003584 <ParseUSBCommand+0x2a8>)
 80034aa:	f00e fc84 	bl	8011db6 <strncmp>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10a      	bne.n	80034ca <ParseUSBCommand+0x1ee>
	            sprintf((char*)USB_TX_Buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 80034b4:	4b44      	ldr	r3, [pc, #272]	@ (80035c8 <ParseUSBCommand+0x2ec>)
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	495c      	ldr	r1, [pc, #368]	@ (800362c <ParseUSBCommand+0x350>)
 80034bc:	4853      	ldr	r0, [pc, #332]	@ (800360c <ParseUSBCommand+0x330>)
 80034be:	f00e fbe3 	bl	8011c88 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80034c2:	4852      	ldr	r0, [pc, #328]	@ (800360c <ParseUSBCommand+0x330>)
 80034c4:	f7ff fee0 	bl	8003288 <SendUSBMessage>
 80034c8:	e04e      	b.n	8003568 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_IMAX2_SUM", 13) == 0) {
 80034ca:	220d      	movs	r2, #13
 80034cc:	4958      	ldr	r1, [pc, #352]	@ (8003630 <ParseUSBCommand+0x354>)
 80034ce:	482d      	ldr	r0, [pc, #180]	@ (8003584 <ParseUSBCommand+0x2a8>)
 80034d0:	f00e fc71 	bl	8011db6 <strncmp>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10a      	bne.n	80034f0 <ParseUSBCommand+0x214>
	            sprintf((char*)USB_TX_Buffer, "imax2_sum = %f\n", imax2_sum);
 80034da:	4b3f      	ldr	r3, [pc, #252]	@ (80035d8 <ParseUSBCommand+0x2fc>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	4954      	ldr	r1, [pc, #336]	@ (8003634 <ParseUSBCommand+0x358>)
 80034e2:	484a      	ldr	r0, [pc, #296]	@ (800360c <ParseUSBCommand+0x330>)
 80034e4:	f00e fbd0 	bl	8011c88 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80034e8:	4848      	ldr	r0, [pc, #288]	@ (800360c <ParseUSBCommand+0x330>)
 80034ea:	f7ff fecd 	bl	8003288 <SendUSBMessage>
 80034ee:	e03b      	b.n	8003568 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_TR", 12) == 0) {
 80034f0:	220c      	movs	r2, #12
 80034f2:	4951      	ldr	r1, [pc, #324]	@ (8003638 <ParseUSBCommand+0x35c>)
 80034f4:	4823      	ldr	r0, [pc, #140]	@ (8003584 <ParseUSBCommand+0x2a8>)
 80034f6:	f00e fc5e 	bl	8011db6 <strncmp>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10e      	bne.n	800351e <ParseUSBCommand+0x242>
	            sprintf((char*)USB_TX_Buffer, "delay_tr = %f\n", delay_tr);
 8003500:	4b39      	ldr	r3, [pc, #228]	@ (80035e8 <ParseUSBCommand+0x30c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f7fd f847 	bl	8000598 <__aeabi_f2d>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	494b      	ldr	r1, [pc, #300]	@ (800363c <ParseUSBCommand+0x360>)
 8003510:	483e      	ldr	r0, [pc, #248]	@ (800360c <ParseUSBCommand+0x330>)
 8003512:	f00e fbb9 	bl	8011c88 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003516:	483d      	ldr	r0, [pc, #244]	@ (800360c <ParseUSBCommand+0x330>)
 8003518:	f7ff feb6 	bl	8003288 <SendUSBMessage>
 800351c:	e024      	b.n	8003568 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_HC", 12) == 0) {
 800351e:	220c      	movs	r2, #12
 8003520:	4947      	ldr	r1, [pc, #284]	@ (8003640 <ParseUSBCommand+0x364>)
 8003522:	4818      	ldr	r0, [pc, #96]	@ (8003584 <ParseUSBCommand+0x2a8>)
 8003524:	f00e fc47 	bl	8011db6 <strncmp>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10e      	bne.n	800354c <ParseUSBCommand+0x270>
	            sprintf((char*)USB_TX_Buffer, "delay_hc = %f\n", delay_hc);
 800352e:	4b32      	ldr	r3, [pc, #200]	@ (80035f8 <ParseUSBCommand+0x31c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd f830 	bl	8000598 <__aeabi_f2d>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4941      	ldr	r1, [pc, #260]	@ (8003644 <ParseUSBCommand+0x368>)
 800353e:	4833      	ldr	r0, [pc, #204]	@ (800360c <ParseUSBCommand+0x330>)
 8003540:	f00e fba2 	bl	8011c88 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003544:	4831      	ldr	r0, [pc, #196]	@ (800360c <ParseUSBCommand+0x330>)
 8003546:	f7ff fe9f 	bl	8003288 <SendUSBMessage>
 800354a:	e00d      	b.n	8003568 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "DISPLAY_ALL", 11) == 0) {
 800354c:	220b      	movs	r2, #11
 800354e:	493e      	ldr	r1, [pc, #248]	@ (8003648 <ParseUSBCommand+0x36c>)
 8003550:	480c      	ldr	r0, [pc, #48]	@ (8003584 <ParseUSBCommand+0x2a8>)
 8003552:	f00e fc30 	bl	8011db6 <strncmp>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d102      	bne.n	8003562 <ParseUSBCommand+0x286>
	            DisplayAllVariables();
 800355c:	f000 f9c2 	bl	80038e4 <DisplayAllVariables>
 8003560:	e002      	b.n	8003568 <ParseUSBCommand+0x28c>

	        } else {
	            SendUSBMessage("Unknown Command\n");
 8003562:	483a      	ldr	r0, [pc, #232]	@ (800364c <ParseUSBCommand+0x370>)
 8003564:	f7ff fe90 	bl	8003288 <SendUSBMessage>
	        }
	        memset(USB_RX_Buffer, 0, sizeof(USB_RX_Buffer));  // Clear buffer
 8003568:	2240      	movs	r2, #64	@ 0x40
 800356a:	2100      	movs	r1, #0
 800356c:	4805      	ldr	r0, [pc, #20]	@ (8003584 <ParseUSBCommand+0x2a8>)
 800356e:	f00e fc1a 	bl	8011da6 <memset>
	        dataReceivedFlag = 0;
 8003572:	4b02      	ldr	r3, [pc, #8]	@ (800357c <ParseUSBCommand+0x2a0>)
 8003574:	2200      	movs	r2, #0
 8003576:	701a      	strb	r2, [r3, #0]
	    }
}
 8003578:	bf00      	nop
 800357a:	bd80      	pop	{r7, pc}
 800357c:	20000b70 	.word	0x20000b70
 8003580:	08016c70 	.word	0x08016c70
 8003584:	20000ab0 	.word	0x20000ab0
 8003588:	20000018 	.word	0x20000018
 800358c:	08016c78 	.word	0x08016c78
 8003590:	08016c84 	.word	0x08016c84
 8003594:	08016c90 	.word	0x08016c90
 8003598:	2000001c 	.word	0x2000001c
 800359c:	08016c98 	.word	0x08016c98
 80035a0:	08016ca4 	.word	0x08016ca4
 80035a4:	08016cb0 	.word	0x08016cb0
 80035a8:	20000000 	.word	0x20000000
 80035ac:	08016cbc 	.word	0x08016cbc
 80035b0:	08016ccc 	.word	0x08016ccc
 80035b4:	08016cdc 	.word	0x08016cdc
 80035b8:	20000a5c 	.word	0x20000a5c
 80035bc:	08016cec 	.word	0x08016cec
 80035c0:	08016cfc 	.word	0x08016cfc
 80035c4:	08016d1c 	.word	0x08016d1c
 80035c8:	20000a5e 	.word	0x20000a5e
 80035cc:	08016d2c 	.word	0x08016d2c
 80035d0:	08016d3c 	.word	0x08016d3c
 80035d4:	08016d5c 	.word	0x08016d5c
 80035d8:	20000a94 	.word	0x20000a94
 80035dc:	08016d6c 	.word	0x08016d6c
 80035e0:	08016d80 	.word	0x08016d80
 80035e4:	08016d94 	.word	0x08016d94
 80035e8:	20000004 	.word	0x20000004
 80035ec:	08016da4 	.word	0x08016da4
 80035f0:	08016db4 	.word	0x08016db4
 80035f4:	08016dc8 	.word	0x08016dc8
 80035f8:	20000008 	.word	0x20000008
 80035fc:	08016dd8 	.word	0x08016dd8
 8003600:	08016de8 	.word	0x08016de8
 8003604:	08016dfc 	.word	0x08016dfc
 8003608:	08016e04 	.word	0x08016e04
 800360c:	20000af0 	.word	0x20000af0
 8003610:	08016e10 	.word	0x08016e10
 8003614:	08016e18 	.word	0x08016e18
 8003618:	08016e24 	.word	0x08016e24
 800361c:	08016e30 	.word	0x08016e30
 8003620:	08016e3c 	.word	0x08016e3c
 8003624:	08016e4c 	.word	0x08016e4c
 8003628:	08016e68 	.word	0x08016e68
 800362c:	08016e78 	.word	0x08016e78
 8003630:	08016e94 	.word	0x08016e94
 8003634:	08016ea4 	.word	0x08016ea4
 8003638:	08016eb4 	.word	0x08016eb4
 800363c:	08016ec4 	.word	0x08016ec4
 8003640:	08016ed4 	.word	0x08016ed4
 8003644:	08016ee4 	.word	0x08016ee4
 8003648:	08016ef4 	.word	0x08016ef4
 800364c:	08016f00 	.word	0x08016f00

08003650 <float_to_integer>:

// CORDIC
int32_t float_to_integer(float in, int scaling_factor, uint8_t bits){
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	ed87 0a03 	vstr	s0, [r7, #12]
 800365a:	60b8      	str	r0, [r7, #8]
 800365c:	460b      	mov	r3, r1
 800365e:	71fb      	strb	r3, [r7, #7]

	int32_t acc;
	if(bits == 32){
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	2b20      	cmp	r3, #32
 8003664:	d135      	bne.n	80036d2 <float_to_integer+0x82>
	if(in <= 1){
 8003666:	edd7 7a03 	vldr	s15, [r7, #12]
 800366a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800366e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003676:	d811      	bhi.n	800369c <float_to_integer+0x4c>
		 acc = (uint32_t)(in*scaling_factor*2147483648);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003682:	edd7 7a03 	vldr	s15, [r7, #12]
 8003686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003754 <float_to_integer+0x104>
 800368e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003696:	ee17 3a90 	vmov	r3, s15
 800369a:	617b      	str	r3, [r7, #20]
	}

	if(in > 1){
 800369c:	edd7 7a03 	vldr	s15, [r7, #12]
 80036a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80036a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ac:	dd11      	ble.n	80036d2 <float_to_integer+0x82>
		 acc = (uint32_t)((in/scaling_factor)*2147483648);
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	ee07 3a90 	vmov	s15, r3
 80036b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036b8:	edd7 6a03 	vldr	s13, [r7, #12]
 80036bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036c0:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8003754 <float_to_integer+0x104>
 80036c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036cc:	ee17 3a90 	vmov	r3, s15
 80036d0:	617b      	str	r3, [r7, #20]
		}
}
	if(bits == 16){
 80036d2:	79fb      	ldrb	r3, [r7, #7]
 80036d4:	2b10      	cmp	r3, #16
 80036d6:	d135      	bne.n	8003744 <float_to_integer+0xf4>
		if(in <= 1){
 80036d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80036dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80036e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e8:	d811      	bhi.n	800370e <float_to_integer+0xbe>
			 acc = (uint32_t)(in*scaling_factor*32767);
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	ee07 3a90 	vmov	s15, r3
 80036f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80036f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fc:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003758 <float_to_integer+0x108>
 8003700:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003708:	ee17 3a90 	vmov	r3, s15
 800370c:	617b      	str	r3, [r7, #20]
		}

		if(in > 1){
 800370e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003712:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800371a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371e:	dd11      	ble.n	8003744 <float_to_integer+0xf4>
			 acc = (uint32_t)((in/scaling_factor)*32767);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800372a:	edd7 6a03 	vldr	s13, [r7, #12]
 800372e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003732:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003758 <float_to_integer+0x108>
 8003736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800373a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800373e:	ee17 3a90 	vmov	r3, s15
 8003742:	617b      	str	r3, [r7, #20]
			}
	}


	return acc;
 8003744:	697b      	ldr	r3, [r7, #20]
}
 8003746:	4618      	mov	r0, r3
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	4f000000 	.word	0x4f000000
 8003758:	46fffe00 	.word	0x46fffe00

0800375c <integer_to_float>:

float integer_to_float(int32_t result_cordic_integer, int squarted_scaling_factor, int8_t mode, uint8_t bits){
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	4611      	mov	r1, r2
 8003768:	461a      	mov	r2, r3
 800376a:	460b      	mov	r3, r1
 800376c:	71fb      	strb	r3, [r7, #7]
 800376e:	4613      	mov	r3, r2
 8003770:	71bb      	strb	r3, [r7, #6]
	float acc;

	if(bits == 32){
 8003772:	79bb      	ldrb	r3, [r7, #6]
 8003774:	2b20      	cmp	r3, #32
 8003776:	d12b      	bne.n	80037d0 <integer_to_float+0x74>
		// mode = 1 when float_to_integer() in is  <= 1
		if(mode){
 8003778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d011      	beq.n	80037a4 <integer_to_float+0x48>
			acc = (float)((result_cordic_integer/2147483648.0f)/squarted_scaling_factor);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800378a:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8003844 <integer_to_float+0xe8>
 800378e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	ee07 3a90 	vmov	s15, r3
 8003798:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800379c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037a0:	edc7 7a05 	vstr	s15, [r7, #20]
		}
		// mode = 0 when float_to_integer() in is > 1
		if(!mode){
 80037a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d111      	bne.n	80037d0 <integer_to_float+0x74>
			acc = (float)((result_cordic_integer/2147483648.0f)*squarted_scaling_factor);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037b6:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8003844 <integer_to_float+0xe8>
 80037ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	ee07 3a90 	vmov	s15, r3
 80037c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037cc:	edc7 7a05 	vstr	s15, [r7, #20]
		}
	}

	if(bits == 16){
 80037d0:	79bb      	ldrb	r3, [r7, #6]
 80037d2:	2b10      	cmp	r3, #16
 80037d4:	d12b      	bne.n	800382e <integer_to_float+0xd2>
		// mode = 1 when float_to_integer() in is  <= 1
		if(mode){
 80037d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d011      	beq.n	8003802 <integer_to_float+0xa6>
			acc = (float)((result_cordic_integer/32767.0f)/squarted_scaling_factor);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	ee07 3a90 	vmov	s15, r3
 80037e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037e8:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003848 <integer_to_float+0xec>
 80037ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	ee07 3a90 	vmov	s15, r3
 80037f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037fe:	edc7 7a05 	vstr	s15, [r7, #20]
		}
		// mode = 0 when float_to_integer() in is > 1
		if(!mode){
 8003802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d111      	bne.n	800382e <integer_to_float+0xd2>
			acc = (float)((result_cordic_integer/32767.0f)*squarted_scaling_factor);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	ee07 3a90 	vmov	s15, r3
 8003810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003814:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8003848 <integer_to_float+0xec>
 8003818:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382a:	edc7 7a05 	vstr	s15, [r7, #20]
		}
	}

	return acc;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	ee07 3a90 	vmov	s15, r3

}
 8003834:	eeb0 0a67 	vmov.f32	s0, s15
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	4f000000 	.word	0x4f000000
 8003848:	46fffe00 	.word	0x46fffe00

0800384c <approx_acos2>:
    // Example coefficients – you would need to adjust these for your range and precision.
    float a0 = 1.5708f;  // ~pi/2
    float a1 = -1.5700f;
    return a0 + a1 * x;
}
static inline float approx_acos2(float x) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	ed87 0a01 	vstr	s0, [r7, #4]
    // Example coefficients – you would need to adjust these for your range and precision.
	if (x < -1.0f) x = -1.0f;
 8003856:	edd7 7a01 	vldr	s15, [r7, #4]
 800385a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800385e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003866:	d502      	bpl.n	800386e <approx_acos2+0x22>
 8003868:	4b1a      	ldr	r3, [pc, #104]	@ (80038d4 <approx_acos2+0x88>)
 800386a:	607b      	str	r3, [r7, #4]
 800386c:	e00b      	b.n	8003886 <approx_acos2+0x3a>
	    else if (x > 1.0f) x = 1.0f;
 800386e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003872:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800387a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387e:	dd02      	ble.n	8003886 <approx_acos2+0x3a>
 8003880:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003884:	607b      	str	r3, [r7, #4]
	    float sqrt_val = sqrtf(1.0f - x);
 8003886:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800388a:	edd7 7a01 	vldr	s15, [r7, #4]
 800388e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003892:	eeb0 0a67 	vmov.f32	s0, s15
 8003896:	f012 facf 	bl	8015e38 <sqrtf>
 800389a:	ed87 0a03 	vstr	s0, [r7, #12]
	    return sqrt_val * (1.5707963050f + x * (-0.2145988016f + 0.0889789874f * x));
 800389e:	edd7 7a01 	vldr	s15, [r7, #4]
 80038a2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80038d8 <approx_acos2+0x8c>
 80038a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038aa:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80038dc <approx_acos2+0x90>
 80038ae:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80038b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80038b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ba:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80038e0 <approx_acos2+0x94>
 80038be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80038c6:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80038ca:	eeb0 0a67 	vmov.f32	s0, s15
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	bf800000 	.word	0xbf800000
 80038d8:	3db63a9e 	.word	0x3db63a9e
 80038dc:	3e5bbfca 	.word	0x3e5bbfca
 80038e0:	3fc90fda 	.word	0x3fc90fda

080038e4 <DisplayAllVariables>:

	    // Return the corresponding LUT entry.
	    return acos_lut[index - 1];
}

void DisplayAllVariables(void) {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b0a0      	sub	sp, #128	@ 0x80
 80038e8:	af00      	add	r7, sp, #0
    char buffer[128];

    sprintf(buffer, "KP = %f\n", Kp);
 80038ea:	4b5e      	ldr	r3, [pc, #376]	@ (8003a64 <DisplayAllVariables+0x180>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fc fe52 	bl	8000598 <__aeabi_f2d>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4638      	mov	r0, r7
 80038fa:	495b      	ldr	r1, [pc, #364]	@ (8003a68 <DisplayAllVariables+0x184>)
 80038fc:	f00e f9c4 	bl	8011c88 <siprintf>
        SendUSBMessage(buffer);
 8003900:	463b      	mov	r3, r7
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff fcc0 	bl	8003288 <SendUSBMessage>

        sprintf(buffer, "Ti = %f\n", Ti);
 8003908:	4b58      	ldr	r3, [pc, #352]	@ (8003a6c <DisplayAllVariables+0x188>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f7fc fe43 	bl	8000598 <__aeabi_f2d>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4638      	mov	r0, r7
 8003918:	4955      	ldr	r1, [pc, #340]	@ (8003a70 <DisplayAllVariables+0x18c>)
 800391a:	f00e f9b5 	bl	8011c88 <siprintf>
        SendUSBMessage(buffer);
 800391e:	463b      	mov	r3, r7
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fcb1 	bl	8003288 <SendUSBMessage>

        sprintf(buffer, "vref = %hu\n", vref);
 8003926:	4b53      	ldr	r3, [pc, #332]	@ (8003a74 <DisplayAllVariables+0x190>)
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	463b      	mov	r3, r7
 800392e:	4952      	ldr	r1, [pc, #328]	@ (8003a78 <DisplayAllVariables+0x194>)
 8003930:	4618      	mov	r0, r3
 8003932:	f00e f9a9 	bl	8011c88 <siprintf>
        SendUSBMessage(buffer);
 8003936:	463b      	mov	r3, r7
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff fca5 	bl	8003288 <SendUSBMessage>

        sprintf(buffer, "imax1 = %f\n", imax1);
 800393e:	4b4f      	ldr	r3, [pc, #316]	@ (8003a7c <DisplayAllVariables+0x198>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	463b      	mov	r3, r7
 8003944:	494e      	ldr	r1, [pc, #312]	@ (8003a80 <DisplayAllVariables+0x19c>)
 8003946:	4618      	mov	r0, r3
 8003948:	f00e f99e 	bl	8011c88 <siprintf>
        SendUSBMessage(buffer);
 800394c:	463b      	mov	r3, r7
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff fc9a 	bl	8003288 <SendUSBMessage>

        sprintf(buffer, "imax2 = %f\n", imax2);
 8003954:	4b4b      	ldr	r3, [pc, #300]	@ (8003a84 <DisplayAllVariables+0x1a0>)
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	463b      	mov	r3, r7
 800395a:	494b      	ldr	r1, [pc, #300]	@ (8003a88 <DisplayAllVariables+0x1a4>)
 800395c:	4618      	mov	r0, r3
 800395e:	f00e f993 	bl	8011c88 <siprintf>
        SendUSBMessage(buffer);
 8003962:	463b      	mov	r3, r7
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff fc8f 	bl	8003288 <SendUSBMessage>

        sprintf(buffer, "imin = %f\n", imin);
 800396a:	4b48      	ldr	r3, [pc, #288]	@ (8003a8c <DisplayAllVariables+0x1a8>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	463b      	mov	r3, r7
 8003970:	4947      	ldr	r1, [pc, #284]	@ (8003a90 <DisplayAllVariables+0x1ac>)
 8003972:	4618      	mov	r0, r3
 8003974:	f00e f988 	bl	8011c88 <siprintf>
        SendUSBMessage(buffer);
 8003978:	463b      	mov	r3, r7
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff fc84 	bl	8003288 <SendUSBMessage>

        sprintf(buffer, "input_voltage = %f\n", input_voltage);
 8003980:	4b44      	ldr	r3, [pc, #272]	@ (8003a94 <DisplayAllVariables+0x1b0>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	463b      	mov	r3, r7
 8003986:	4944      	ldr	r1, [pc, #272]	@ (8003a98 <DisplayAllVariables+0x1b4>)
 8003988:	4618      	mov	r0, r3
 800398a:	f00e f97d 	bl	8011c88 <siprintf>
        SendUSBMessage(buffer);
 800398e:	463b      	mov	r3, r7
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fc79 	bl	8003288 <SendUSBMessage>

        sprintf(buffer, "output_voltage = %f\n", output_voltage);
 8003996:	4b41      	ldr	r3, [pc, #260]	@ (8003a9c <DisplayAllVariables+0x1b8>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	463b      	mov	r3, r7
 800399c:	4940      	ldr	r1, [pc, #256]	@ (8003aa0 <DisplayAllVariables+0x1bc>)
 800399e:	4618      	mov	r0, r3
 80039a0:	f00e f972 	bl	8011c88 <siprintf>
        SendUSBMessage(buffer);
 80039a4:	463b      	mov	r3, r7
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff fc6e 	bl	8003288 <SendUSBMessage>

        sprintf(buffer, "pcb_temp = %f\n", pcb_temp);
 80039ac:	4b3d      	ldr	r3, [pc, #244]	@ (8003aa4 <DisplayAllVariables+0x1c0>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	463b      	mov	r3, r7
 80039b2:	493d      	ldr	r1, [pc, #244]	@ (8003aa8 <DisplayAllVariables+0x1c4>)
 80039b4:	4618      	mov	r0, r3
 80039b6:	f00e f967 	bl	8011c88 <siprintf>
        SendUSBMessage(buffer);
 80039ba:	463b      	mov	r3, r7
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff fc63 	bl	8003288 <SendUSBMessage>

        sprintf(buffer, "heat_sink_temp = %f\n", heat_sink_temp);
 80039c2:	4b3a      	ldr	r3, [pc, #232]	@ (8003aac <DisplayAllVariables+0x1c8>)
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	463b      	mov	r3, r7
 80039c8:	4939      	ldr	r1, [pc, #228]	@ (8003ab0 <DisplayAllVariables+0x1cc>)
 80039ca:	4618      	mov	r0, r3
 80039cc:	f00e f95c 	bl	8011c88 <siprintf>
        SendUSBMessage(buffer);
 80039d0:	463b      	mov	r3, r7
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff fc58 	bl	8003288 <SendUSBMessage>

        sprintf(buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 80039d8:	4b36      	ldr	r3, [pc, #216]	@ (8003ab4 <DisplayAllVariables+0x1d0>)
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	461a      	mov	r2, r3
 80039de:	463b      	mov	r3, r7
 80039e0:	4935      	ldr	r1, [pc, #212]	@ (8003ab8 <DisplayAllVariables+0x1d4>)
 80039e2:	4618      	mov	r0, r3
 80039e4:	f00e f950 	bl	8011c88 <siprintf>
        SendUSBMessage(buffer);
 80039e8:	463b      	mov	r3, r7
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff fc4c 	bl	8003288 <SendUSBMessage>

        sprintf(buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 80039f0:	4b32      	ldr	r3, [pc, #200]	@ (8003abc <DisplayAllVariables+0x1d8>)
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	461a      	mov	r2, r3
 80039f6:	463b      	mov	r3, r7
 80039f8:	4931      	ldr	r1, [pc, #196]	@ (8003ac0 <DisplayAllVariables+0x1dc>)
 80039fa:	4618      	mov	r0, r3
 80039fc:	f00e f944 	bl	8011c88 <siprintf>
        SendUSBMessage(buffer);
 8003a00:	463b      	mov	r3, r7
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff fc40 	bl	8003288 <SendUSBMessage>

        sprintf(buffer, "imax2_sum = %f\n", imax2_sum);
 8003a08:	4b2e      	ldr	r3, [pc, #184]	@ (8003ac4 <DisplayAllVariables+0x1e0>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	463b      	mov	r3, r7
 8003a0e:	492e      	ldr	r1, [pc, #184]	@ (8003ac8 <DisplayAllVariables+0x1e4>)
 8003a10:	4618      	mov	r0, r3
 8003a12:	f00e f939 	bl	8011c88 <siprintf>
        SendUSBMessage(buffer);
 8003a16:	463b      	mov	r3, r7
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff fc35 	bl	8003288 <SendUSBMessage>

        sprintf(buffer, "delay_tr = %f\n", delay_tr);
 8003a1e:	4b2b      	ldr	r3, [pc, #172]	@ (8003acc <DisplayAllVariables+0x1e8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fc fdb8 	bl	8000598 <__aeabi_f2d>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4638      	mov	r0, r7
 8003a2e:	4928      	ldr	r1, [pc, #160]	@ (8003ad0 <DisplayAllVariables+0x1ec>)
 8003a30:	f00e f92a 	bl	8011c88 <siprintf>
        SendUSBMessage(buffer);
 8003a34:	463b      	mov	r3, r7
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff fc26 	bl	8003288 <SendUSBMessage>

        sprintf(buffer, "delay_hc = %f\n", delay_hc);
 8003a3c:	4b25      	ldr	r3, [pc, #148]	@ (8003ad4 <DisplayAllVariables+0x1f0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fc fda9 	bl	8000598 <__aeabi_f2d>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4638      	mov	r0, r7
 8003a4c:	4922      	ldr	r1, [pc, #136]	@ (8003ad8 <DisplayAllVariables+0x1f4>)
 8003a4e:	f00e f91b 	bl	8011c88 <siprintf>
        SendUSBMessage(buffer);
 8003a52:	463b      	mov	r3, r7
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff fc17 	bl	8003288 <SendUSBMessage>
}
 8003a5a:	bf00      	nop
 8003a5c:	3780      	adds	r7, #128	@ 0x80
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20000018 	.word	0x20000018
 8003a68:	08016e04 	.word	0x08016e04
 8003a6c:	2000001c 	.word	0x2000001c
 8003a70:	08016e18 	.word	0x08016e18
 8003a74:	20000000 	.word	0x20000000
 8003a78:	08016e30 	.word	0x08016e30
 8003a7c:	20000a60 	.word	0x20000a60
 8003a80:	08016f14 	.word	0x08016f14
 8003a84:	20000a64 	.word	0x20000a64
 8003a88:	08016f20 	.word	0x08016f20
 8003a8c:	20000a68 	.word	0x20000a68
 8003a90:	08016f2c 	.word	0x08016f2c
 8003a94:	20000a6c 	.word	0x20000a6c
 8003a98:	08016f38 	.word	0x08016f38
 8003a9c:	20000a84 	.word	0x20000a84
 8003aa0:	08016f4c 	.word	0x08016f4c
 8003aa4:	20000a70 	.word	0x20000a70
 8003aa8:	08016f64 	.word	0x08016f64
 8003aac:	20000a74 	.word	0x20000a74
 8003ab0:	08016f74 	.word	0x08016f74
 8003ab4:	20000a5c 	.word	0x20000a5c
 8003ab8:	08016e4c 	.word	0x08016e4c
 8003abc:	20000a5e 	.word	0x20000a5e
 8003ac0:	08016e78 	.word	0x08016e78
 8003ac4:	20000a94 	.word	0x20000a94
 8003ac8:	08016ea4 	.word	0x08016ea4
 8003acc:	20000004 	.word	0x20000004
 8003ad0:	08016ec4 	.word	0x08016ec4
 8003ad4:	20000008 	.word	0x20000008
 8003ad8:	08016ee4 	.word	0x08016ee4

08003adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ae0:	b672      	cpsid	i
}
 8003ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ae4:	bf00      	nop
 8003ae6:	e7fd      	b.n	8003ae4 <Error_Handler+0x8>

08003ae8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aee:	4b0f      	ldr	r3, [pc, #60]	@ (8003b2c <HAL_MspInit+0x44>)
 8003af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af2:	4a0e      	ldr	r2, [pc, #56]	@ (8003b2c <HAL_MspInit+0x44>)
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	6613      	str	r3, [r2, #96]	@ 0x60
 8003afa:	4b0c      	ldr	r3, [pc, #48]	@ (8003b2c <HAL_MspInit+0x44>)
 8003afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	607b      	str	r3, [r7, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b06:	4b09      	ldr	r3, [pc, #36]	@ (8003b2c <HAL_MspInit+0x44>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0a:	4a08      	ldr	r2, [pc, #32]	@ (8003b2c <HAL_MspInit+0x44>)
 8003b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b10:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b12:	4b06      	ldr	r3, [pc, #24]	@ (8003b2c <HAL_MspInit+0x44>)
 8003b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003b1e:	f005 fa23 	bl	8008f68 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000

08003b30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b0a4      	sub	sp, #144	@ 0x90
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b38:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	60da      	str	r2, [r3, #12]
 8003b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b48:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b4c:	2254      	movs	r2, #84	@ 0x54
 8003b4e:	2100      	movs	r1, #0
 8003b50:	4618      	mov	r0, r3
 8003b52:	f00e f928 	bl	8011da6 <memset>
  if(hadc->Instance==ADC1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b5e:	d11c      	bne.n	8003b9a <HAL_ADC_MspInit+0x6a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003b60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b64:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003b66:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003b6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b6c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b70:	4618      	mov	r0, r3
 8003b72:	f005 ff37 	bl	80099e4 <HAL_RCCEx_PeriphCLKConfig>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003b7c:	f7ff ffae 	bl	8003adc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003b80:	4b86      	ldr	r3, [pc, #536]	@ (8003d9c <HAL_ADC_MspInit+0x26c>)
 8003b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b84:	4a85      	ldr	r2, [pc, #532]	@ (8003d9c <HAL_ADC_MspInit+0x26c>)
 8003b86:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b8c:	4b83      	ldr	r3, [pc, #524]	@ (8003d9c <HAL_ADC_MspInit+0x26c>)
 8003b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8003b98:	e185      	b.n	8003ea6 <HAL_ADC_MspInit+0x376>
  else if(hadc->Instance==ADC3)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a80      	ldr	r2, [pc, #512]	@ (8003da0 <HAL_ADC_MspInit+0x270>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	f040 8087 	bne.w	8003cb4 <HAL_ADC_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003ba6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003baa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003bac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003bb0:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f005 ff14 	bl	80099e4 <HAL_RCCEx_PeriphCLKConfig>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_ADC_MspInit+0x96>
      Error_Handler();
 8003bc2:	f7ff ff8b 	bl	8003adc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003bc6:	4b77      	ldr	r3, [pc, #476]	@ (8003da4 <HAL_ADC_MspInit+0x274>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	4a75      	ldr	r2, [pc, #468]	@ (8003da4 <HAL_ADC_MspInit+0x274>)
 8003bce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003bd0:	4b74      	ldr	r3, [pc, #464]	@ (8003da4 <HAL_ADC_MspInit+0x274>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_ADC_MspInit+0xc0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003bd8:	4b70      	ldr	r3, [pc, #448]	@ (8003d9c <HAL_ADC_MspInit+0x26c>)
 8003bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bdc:	4a6f      	ldr	r2, [pc, #444]	@ (8003d9c <HAL_ADC_MspInit+0x26c>)
 8003bde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003be2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003be4:	4b6d      	ldr	r3, [pc, #436]	@ (8003d9c <HAL_ADC_MspInit+0x26c>)
 8003be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bec:	623b      	str	r3, [r7, #32]
 8003bee:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf0:	4b6a      	ldr	r3, [pc, #424]	@ (8003d9c <HAL_ADC_MspInit+0x26c>)
 8003bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf4:	4a69      	ldr	r2, [pc, #420]	@ (8003d9c <HAL_ADC_MspInit+0x26c>)
 8003bf6:	f043 0302 	orr.w	r3, r3, #2
 8003bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bfc:	4b67      	ldr	r3, [pc, #412]	@ (8003d9c <HAL_ADC_MspInit+0x26c>)
 8003bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c08:	4b64      	ldr	r3, [pc, #400]	@ (8003d9c <HAL_ADC_MspInit+0x26c>)
 8003c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c0c:	4a63      	ldr	r2, [pc, #396]	@ (8003d9c <HAL_ADC_MspInit+0x26c>)
 8003c0e:	f043 0310 	orr.w	r3, r3, #16
 8003c12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c14:	4b61      	ldr	r3, [pc, #388]	@ (8003d9c <HAL_ADC_MspInit+0x26c>)
 8003c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = CS_VREF_1_Pin|HEATSINK_TEMP_Pin;
 8003c20:	f242 0302 	movw	r3, #8194	@ 0x2002
 8003c24:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c26:	2303      	movs	r3, #3
 8003c28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c32:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003c36:	4619      	mov	r1, r3
 8003c38:	485b      	ldr	r0, [pc, #364]	@ (8003da8 <HAL_ADC_MspInit+0x278>)
 8003c3a:	f003 f9ef 	bl	800701c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PCB_TEMP_Pin|CS_VREF_2_Pin|INPUT_V_ADC_Pin;
 8003c3e:	f44f 530a 	mov.w	r3, #8832	@ 0x2280
 8003c42:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c44:	2303      	movs	r3, #3
 8003c46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c50:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003c54:	4619      	mov	r1, r3
 8003c56:	4855      	ldr	r0, [pc, #340]	@ (8003dac <HAL_ADC_MspInit+0x27c>)
 8003c58:	f003 f9e0 	bl	800701c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel1;
 8003c5c:	4b54      	ldr	r3, [pc, #336]	@ (8003db0 <HAL_ADC_MspInit+0x280>)
 8003c5e:	4a55      	ldr	r2, [pc, #340]	@ (8003db4 <HAL_ADC_MspInit+0x284>)
 8003c60:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003c62:	4b53      	ldr	r3, [pc, #332]	@ (8003db0 <HAL_ADC_MspInit+0x280>)
 8003c64:	2225      	movs	r2, #37	@ 0x25
 8003c66:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c68:	4b51      	ldr	r3, [pc, #324]	@ (8003db0 <HAL_ADC_MspInit+0x280>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c6e:	4b50      	ldr	r3, [pc, #320]	@ (8003db0 <HAL_ADC_MspInit+0x280>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003c74:	4b4e      	ldr	r3, [pc, #312]	@ (8003db0 <HAL_ADC_MspInit+0x280>)
 8003c76:	2280      	movs	r2, #128	@ 0x80
 8003c78:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c7a:	4b4d      	ldr	r3, [pc, #308]	@ (8003db0 <HAL_ADC_MspInit+0x280>)
 8003c7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c80:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c82:	4b4b      	ldr	r3, [pc, #300]	@ (8003db0 <HAL_ADC_MspInit+0x280>)
 8003c84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c88:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003c8a:	4b49      	ldr	r3, [pc, #292]	@ (8003db0 <HAL_ADC_MspInit+0x280>)
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003c90:	4b47      	ldr	r3, [pc, #284]	@ (8003db0 <HAL_ADC_MspInit+0x280>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003c96:	4846      	ldr	r0, [pc, #280]	@ (8003db0 <HAL_ADC_MspInit+0x280>)
 8003c98:	f002 ff4e 	bl	8006b38 <HAL_DMA_Init>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_ADC_MspInit+0x176>
      Error_Handler();
 8003ca2:	f7ff ff1b 	bl	8003adc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a41      	ldr	r2, [pc, #260]	@ (8003db0 <HAL_ADC_MspInit+0x280>)
 8003caa:	655a      	str	r2, [r3, #84]	@ 0x54
 8003cac:	4a40      	ldr	r2, [pc, #256]	@ (8003db0 <HAL_ADC_MspInit+0x280>)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003cb2:	e0f8      	b.n	8003ea6 <HAL_ADC_MspInit+0x376>
  else if(hadc->Instance==ADC4)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a3f      	ldr	r2, [pc, #252]	@ (8003db8 <HAL_ADC_MspInit+0x288>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	f040 8082 	bne.w	8003dc4 <HAL_ADC_MspInit+0x294>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003cc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003cc6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003cca:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ccc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f005 fe87 	bl	80099e4 <HAL_RCCEx_PeriphCLKConfig>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_ADC_MspInit+0x1b0>
      Error_Handler();
 8003cdc:	f7ff fefe 	bl	8003adc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003ce0:	4b30      	ldr	r3, [pc, #192]	@ (8003da4 <HAL_ADC_MspInit+0x274>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	4a2f      	ldr	r2, [pc, #188]	@ (8003da4 <HAL_ADC_MspInit+0x274>)
 8003ce8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003cea:	4b2e      	ldr	r3, [pc, #184]	@ (8003da4 <HAL_ADC_MspInit+0x274>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d10b      	bne.n	8003d0a <HAL_ADC_MspInit+0x1da>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8003d9c <HAL_ADC_MspInit+0x26c>)
 8003cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf6:	4a29      	ldr	r2, [pc, #164]	@ (8003d9c <HAL_ADC_MspInit+0x26c>)
 8003cf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cfe:	4b27      	ldr	r3, [pc, #156]	@ (8003d9c <HAL_ADC_MspInit+0x26c>)
 8003d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d0a:	4b24      	ldr	r3, [pc, #144]	@ (8003d9c <HAL_ADC_MspInit+0x26c>)
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d0e:	4a23      	ldr	r2, [pc, #140]	@ (8003d9c <HAL_ADC_MspInit+0x26c>)
 8003d10:	f043 0310 	orr.w	r3, r3, #16
 8003d14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d16:	4b21      	ldr	r3, [pc, #132]	@ (8003d9c <HAL_ADC_MspInit+0x26c>)
 8003d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1a:	f003 0310 	and.w	r3, r3, #16
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT_V_ADC_Pin;
 8003d22:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d26:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(OUTPUT_V_ADC_GPIO_Port, &GPIO_InitStruct);
 8003d34:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003d38:	4619      	mov	r1, r3
 8003d3a:	481c      	ldr	r0, [pc, #112]	@ (8003dac <HAL_ADC_MspInit+0x27c>)
 8003d3c:	f003 f96e 	bl	800701c <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel2;
 8003d40:	4b1e      	ldr	r3, [pc, #120]	@ (8003dbc <HAL_ADC_MspInit+0x28c>)
 8003d42:	4a1f      	ldr	r2, [pc, #124]	@ (8003dc0 <HAL_ADC_MspInit+0x290>)
 8003d44:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8003d46:	4b1d      	ldr	r3, [pc, #116]	@ (8003dbc <HAL_ADC_MspInit+0x28c>)
 8003d48:	2226      	movs	r2, #38	@ 0x26
 8003d4a:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dbc <HAL_ADC_MspInit+0x28c>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d52:	4b1a      	ldr	r3, [pc, #104]	@ (8003dbc <HAL_ADC_MspInit+0x28c>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8003d58:	4b18      	ldr	r3, [pc, #96]	@ (8003dbc <HAL_ADC_MspInit+0x28c>)
 8003d5a:	2280      	movs	r2, #128	@ 0x80
 8003d5c:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d5e:	4b17      	ldr	r3, [pc, #92]	@ (8003dbc <HAL_ADC_MspInit+0x28c>)
 8003d60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d64:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d66:	4b15      	ldr	r3, [pc, #84]	@ (8003dbc <HAL_ADC_MspInit+0x28c>)
 8003d68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d6c:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8003d6e:	4b13      	ldr	r3, [pc, #76]	@ (8003dbc <HAL_ADC_MspInit+0x28c>)
 8003d70:	2220      	movs	r2, #32
 8003d72:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003d74:	4b11      	ldr	r3, [pc, #68]	@ (8003dbc <HAL_ADC_MspInit+0x28c>)
 8003d76:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8003d7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8003d7c:	480f      	ldr	r0, [pc, #60]	@ (8003dbc <HAL_ADC_MspInit+0x28c>)
 8003d7e:	f002 fedb 	bl	8006b38 <HAL_DMA_Init>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_ADC_MspInit+0x25c>
      Error_Handler();
 8003d88:	f7ff fea8 	bl	8003adc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a0b      	ldr	r2, [pc, #44]	@ (8003dbc <HAL_ADC_MspInit+0x28c>)
 8003d90:	655a      	str	r2, [r3, #84]	@ 0x54
 8003d92:	4a0a      	ldr	r2, [pc, #40]	@ (8003dbc <HAL_ADC_MspInit+0x28c>)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003d98:	e085      	b.n	8003ea6 <HAL_ADC_MspInit+0x376>
 8003d9a:	bf00      	nop
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	50000400 	.word	0x50000400
 8003da4:	20000bb4 	.word	0x20000bb4
 8003da8:	48000400 	.word	0x48000400
 8003dac:	48001000 	.word	0x48001000
 8003db0:	20000584 	.word	0x20000584
 8003db4:	40020008 	.word	0x40020008
 8003db8:	50000500 	.word	0x50000500
 8003dbc:	200005e4 	.word	0x200005e4
 8003dc0:	4002001c 	.word	0x4002001c
  else if(hadc->Instance==ADC5)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a39      	ldr	r2, [pc, #228]	@ (8003eb0 <HAL_ADC_MspInit+0x380>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d16b      	bne.n	8003ea6 <HAL_ADC_MspInit+0x376>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003dce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003dd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003dd8:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003dda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003dde:	4618      	mov	r0, r3
 8003de0:	f005 fe00 	bl	80099e4 <HAL_RCCEx_PeriphCLKConfig>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_ADC_MspInit+0x2be>
      Error_Handler();
 8003dea:	f7ff fe77 	bl	8003adc <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003dee:	4b31      	ldr	r3, [pc, #196]	@ (8003eb4 <HAL_ADC_MspInit+0x384>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3301      	adds	r3, #1
 8003df4:	4a2f      	ldr	r2, [pc, #188]	@ (8003eb4 <HAL_ADC_MspInit+0x384>)
 8003df6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003df8:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb4 <HAL_ADC_MspInit+0x384>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d10b      	bne.n	8003e18 <HAL_ADC_MspInit+0x2e8>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003e00:	4b2d      	ldr	r3, [pc, #180]	@ (8003eb8 <HAL_ADC_MspInit+0x388>)
 8003e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e04:	4a2c      	ldr	r2, [pc, #176]	@ (8003eb8 <HAL_ADC_MspInit+0x388>)
 8003e06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb8 <HAL_ADC_MspInit+0x388>)
 8003e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e18:	4b27      	ldr	r3, [pc, #156]	@ (8003eb8 <HAL_ADC_MspInit+0x388>)
 8003e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e1c:	4a26      	ldr	r2, [pc, #152]	@ (8003eb8 <HAL_ADC_MspInit+0x388>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e24:	4b24      	ldr	r3, [pc, #144]	@ (8003eb8 <HAL_ADC_MspInit+0x388>)
 8003e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMAX2_SUM_Pin;
 8003e30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e34:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e36:	2303      	movs	r3, #3
 8003e38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(IMAX2_SUM_GPIO_Port, &GPIO_InitStruct);
 8003e42:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003e46:	4619      	mov	r1, r3
 8003e48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e4c:	f003 f8e6 	bl	800701c <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel3;
 8003e50:	4b1a      	ldr	r3, [pc, #104]	@ (8003ebc <HAL_ADC_MspInit+0x38c>)
 8003e52:	4a1b      	ldr	r2, [pc, #108]	@ (8003ec0 <HAL_ADC_MspInit+0x390>)
 8003e54:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8003e56:	4b19      	ldr	r3, [pc, #100]	@ (8003ebc <HAL_ADC_MspInit+0x38c>)
 8003e58:	2227      	movs	r2, #39	@ 0x27
 8003e5a:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e5c:	4b17      	ldr	r3, [pc, #92]	@ (8003ebc <HAL_ADC_MspInit+0x38c>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e62:	4b16      	ldr	r3, [pc, #88]	@ (8003ebc <HAL_ADC_MspInit+0x38c>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8003e68:	4b14      	ldr	r3, [pc, #80]	@ (8003ebc <HAL_ADC_MspInit+0x38c>)
 8003e6a:	2280      	movs	r2, #128	@ 0x80
 8003e6c:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e6e:	4b13      	ldr	r3, [pc, #76]	@ (8003ebc <HAL_ADC_MspInit+0x38c>)
 8003e70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e74:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e76:	4b11      	ldr	r3, [pc, #68]	@ (8003ebc <HAL_ADC_MspInit+0x38c>)
 8003e78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e7c:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8003e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003ebc <HAL_ADC_MspInit+0x38c>)
 8003e80:	2220      	movs	r2, #32
 8003e82:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8003e84:	4b0d      	ldr	r3, [pc, #52]	@ (8003ebc <HAL_ADC_MspInit+0x38c>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8003e8a:	480c      	ldr	r0, [pc, #48]	@ (8003ebc <HAL_ADC_MspInit+0x38c>)
 8003e8c:	f002 fe54 	bl	8006b38 <HAL_DMA_Init>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_ADC_MspInit+0x36a>
      Error_Handler();
 8003e96:	f7ff fe21 	bl	8003adc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a07      	ldr	r2, [pc, #28]	@ (8003ebc <HAL_ADC_MspInit+0x38c>)
 8003e9e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003ea0:	4a06      	ldr	r2, [pc, #24]	@ (8003ebc <HAL_ADC_MspInit+0x38c>)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003ea6:	bf00      	nop
 8003ea8:	3790      	adds	r7, #144	@ 0x90
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	50000600 	.word	0x50000600
 8003eb4:	20000bb4 	.word	0x20000bb4
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	20000644 	.word	0x20000644
 8003ec0:	40020030 	.word	0x40020030

08003ec4 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8003efc <HAL_CORDIC_MspInit+0x38>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d10b      	bne.n	8003eee <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8003f00 <HAL_CORDIC_MspInit+0x3c>)
 8003ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eda:	4a09      	ldr	r2, [pc, #36]	@ (8003f00 <HAL_CORDIC_MspInit+0x3c>)
 8003edc:	f043 0308 	orr.w	r3, r3, #8
 8003ee0:	6493      	str	r3, [r2, #72]	@ 0x48
 8003ee2:	4b07      	ldr	r3, [pc, #28]	@ (8003f00 <HAL_CORDIC_MspInit+0x3c>)
 8003ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8003eee:	bf00      	nop
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40020c00 	.word	0x40020c00
 8003f00:	40021000 	.word	0x40021000

08003f04 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08c      	sub	sp, #48	@ 0x30
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f0c:	f107 031c 	add.w	r3, r7, #28
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	605a      	str	r2, [r3, #4]
 8003f16:	609a      	str	r2, [r3, #8]
 8003f18:	60da      	str	r2, [r3, #12]
 8003f1a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a5b      	ldr	r2, [pc, #364]	@ (8004090 <HAL_DAC_MspInit+0x18c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d159      	bne.n	8003fda <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003f26:	4b5b      	ldr	r3, [pc, #364]	@ (8004094 <HAL_DAC_MspInit+0x190>)
 8003f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f2a:	4a5a      	ldr	r2, [pc, #360]	@ (8004094 <HAL_DAC_MspInit+0x190>)
 8003f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f32:	4b58      	ldr	r3, [pc, #352]	@ (8004094 <HAL_DAC_MspInit+0x190>)
 8003f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f3e:	4b55      	ldr	r3, [pc, #340]	@ (8004094 <HAL_DAC_MspInit+0x190>)
 8003f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f42:	4a54      	ldr	r2, [pc, #336]	@ (8004094 <HAL_DAC_MspInit+0x190>)
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f4a:	4b52      	ldr	r3, [pc, #328]	@ (8004094 <HAL_DAC_MspInit+0x190>)
 8003f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = IMAX_Pin|IMAX2_Pin;
 8003f56:	2330      	movs	r3, #48	@ 0x30
 8003f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f62:	f107 031c 	add.w	r3, r7, #28
 8003f66:	4619      	mov	r1, r3
 8003f68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f6c:	f003 f856 	bl	800701c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel4;
 8003f70:	4b49      	ldr	r3, [pc, #292]	@ (8004098 <HAL_DAC_MspInit+0x194>)
 8003f72:	4a4a      	ldr	r2, [pc, #296]	@ (800409c <HAL_DAC_MspInit+0x198>)
 8003f74:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8003f76:	4b48      	ldr	r3, [pc, #288]	@ (8004098 <HAL_DAC_MspInit+0x194>)
 8003f78:	2206      	movs	r2, #6
 8003f7a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f7c:	4b46      	ldr	r3, [pc, #280]	@ (8004098 <HAL_DAC_MspInit+0x194>)
 8003f7e:	2210      	movs	r2, #16
 8003f80:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f82:	4b45      	ldr	r3, [pc, #276]	@ (8004098 <HAL_DAC_MspInit+0x194>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003f88:	4b43      	ldr	r3, [pc, #268]	@ (8004098 <HAL_DAC_MspInit+0x194>)
 8003f8a:	2280      	movs	r2, #128	@ 0x80
 8003f8c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f8e:	4b42      	ldr	r3, [pc, #264]	@ (8004098 <HAL_DAC_MspInit+0x194>)
 8003f90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f94:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003f96:	4b40      	ldr	r3, [pc, #256]	@ (8004098 <HAL_DAC_MspInit+0x194>)
 8003f98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f9c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8004098 <HAL_DAC_MspInit+0x194>)
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003fa4:	4b3c      	ldr	r3, [pc, #240]	@ (8004098 <HAL_DAC_MspInit+0x194>)
 8003fa6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003faa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003fac:	483a      	ldr	r0, [pc, #232]	@ (8004098 <HAL_DAC_MspInit+0x194>)
 8003fae:	f002 fdc3 	bl	8006b38 <HAL_DMA_Init>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8003fb8:	f7ff fd90 	bl	8003adc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a36      	ldr	r2, [pc, #216]	@ (8004098 <HAL_DAC_MspInit+0x194>)
 8003fc0:	609a      	str	r2, [r3, #8]
 8003fc2:	4a35      	ldr	r2, [pc, #212]	@ (8004098 <HAL_DAC_MspInit+0x194>)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2100      	movs	r1, #0
 8003fcc:	2036      	movs	r0, #54	@ 0x36
 8003fce:	f002 faa0 	bl	8006512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003fd2:	2036      	movs	r0, #54	@ 0x36
 8003fd4:	f002 fab7 	bl	8006546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8003fd8:	e055      	b.n	8004086 <HAL_DAC_MspInit+0x182>
  else if(hdac->Instance==DAC2)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a30      	ldr	r2, [pc, #192]	@ (80040a0 <HAL_DAC_MspInit+0x19c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d150      	bne.n	8004086 <HAL_DAC_MspInit+0x182>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8003fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8004094 <HAL_DAC_MspInit+0x190>)
 8003fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe8:	4a2a      	ldr	r2, [pc, #168]	@ (8004094 <HAL_DAC_MspInit+0x190>)
 8003fea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ff0:	4b28      	ldr	r3, [pc, #160]	@ (8004094 <HAL_DAC_MspInit+0x190>)
 8003ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffc:	4b25      	ldr	r3, [pc, #148]	@ (8004094 <HAL_DAC_MspInit+0x190>)
 8003ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004000:	4a24      	ldr	r2, [pc, #144]	@ (8004094 <HAL_DAC_MspInit+0x190>)
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004008:	4b22      	ldr	r3, [pc, #136]	@ (8004094 <HAL_DAC_MspInit+0x190>)
 800400a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMIN_Pin;
 8004014:	2340      	movs	r3, #64	@ 0x40
 8004016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004018:	2303      	movs	r3, #3
 800401a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401c:	2300      	movs	r3, #0
 800401e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMIN_GPIO_Port, &GPIO_InitStruct);
 8004020:	f107 031c 	add.w	r3, r7, #28
 8004024:	4619      	mov	r1, r3
 8004026:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800402a:	f002 fff7 	bl	800701c <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel5;
 800402e:	4b1d      	ldr	r3, [pc, #116]	@ (80040a4 <HAL_DAC_MspInit+0x1a0>)
 8004030:	4a1d      	ldr	r2, [pc, #116]	@ (80040a8 <HAL_DAC_MspInit+0x1a4>)
 8004032:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8004034:	4b1b      	ldr	r3, [pc, #108]	@ (80040a4 <HAL_DAC_MspInit+0x1a0>)
 8004036:	2229      	movs	r2, #41	@ 0x29
 8004038:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800403a:	4b1a      	ldr	r3, [pc, #104]	@ (80040a4 <HAL_DAC_MspInit+0x1a0>)
 800403c:	2210      	movs	r2, #16
 800403e:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004040:	4b18      	ldr	r3, [pc, #96]	@ (80040a4 <HAL_DAC_MspInit+0x1a0>)
 8004042:	2200      	movs	r2, #0
 8004044:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004046:	4b17      	ldr	r3, [pc, #92]	@ (80040a4 <HAL_DAC_MspInit+0x1a0>)
 8004048:	2280      	movs	r2, #128	@ 0x80
 800404a:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800404c:	4b15      	ldr	r3, [pc, #84]	@ (80040a4 <HAL_DAC_MspInit+0x1a0>)
 800404e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004052:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004054:	4b13      	ldr	r3, [pc, #76]	@ (80040a4 <HAL_DAC_MspInit+0x1a0>)
 8004056:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800405a:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 800405c:	4b11      	ldr	r3, [pc, #68]	@ (80040a4 <HAL_DAC_MspInit+0x1a0>)
 800405e:	2220      	movs	r2, #32
 8004060:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8004062:	4b10      	ldr	r3, [pc, #64]	@ (80040a4 <HAL_DAC_MspInit+0x1a0>)
 8004064:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004068:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 800406a:	480e      	ldr	r0, [pc, #56]	@ (80040a4 <HAL_DAC_MspInit+0x1a0>)
 800406c:	f002 fd64 	bl	8006b38 <HAL_DMA_Init>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_DAC_MspInit+0x176>
      Error_Handler();
 8004076:	f7ff fd31 	bl	8003adc <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a09      	ldr	r2, [pc, #36]	@ (80040a4 <HAL_DAC_MspInit+0x1a0>)
 800407e:	609a      	str	r2, [r3, #8]
 8004080:	4a08      	ldr	r2, [pc, #32]	@ (80040a4 <HAL_DAC_MspInit+0x1a0>)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8004086:	bf00      	nop
 8004088:	3730      	adds	r7, #48	@ 0x30
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	50000800 	.word	0x50000800
 8004094:	40021000 	.word	0x40021000
 8004098:	200006f4 	.word	0x200006f4
 800409c:	40020044 	.word	0x40020044
 80040a0:	50000c00 	.word	0x50000c00
 80040a4:	20000754 	.word	0x20000754
 80040a8:	40020058 	.word	0x40020058

080040ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a16      	ldr	r2, [pc, #88]	@ (8004114 <HAL_TIM_PWM_MspInit+0x68>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d114      	bne.n	80040e8 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040be:	4b16      	ldr	r3, [pc, #88]	@ (8004118 <HAL_TIM_PWM_MspInit+0x6c>)
 80040c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c2:	4a15      	ldr	r2, [pc, #84]	@ (8004118 <HAL_TIM_PWM_MspInit+0x6c>)
 80040c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80040c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80040ca:	4b13      	ldr	r3, [pc, #76]	@ (8004118 <HAL_TIM_PWM_MspInit+0x6c>)
 80040cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80040d6:	2200      	movs	r2, #0
 80040d8:	2100      	movs	r1, #0
 80040da:	2018      	movs	r0, #24
 80040dc:	f002 fa19 	bl	8006512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80040e0:	2018      	movs	r0, #24
 80040e2:	f002 fa30 	bl	8006546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80040e6:	e010      	b.n	800410a <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM8)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a0b      	ldr	r2, [pc, #44]	@ (800411c <HAL_TIM_PWM_MspInit+0x70>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d10b      	bne.n	800410a <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80040f2:	4b09      	ldr	r3, [pc, #36]	@ (8004118 <HAL_TIM_PWM_MspInit+0x6c>)
 80040f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040f6:	4a08      	ldr	r2, [pc, #32]	@ (8004118 <HAL_TIM_PWM_MspInit+0x6c>)
 80040f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80040fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80040fe:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <HAL_TIM_PWM_MspInit+0x6c>)
 8004100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004102:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004106:	60bb      	str	r3, [r7, #8]
 8004108:	68bb      	ldr	r3, [r7, #8]
}
 800410a:	bf00      	nop
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40012c00 	.word	0x40012c00
 8004118:	40021000 	.word	0x40021000
 800411c:	40013400 	.word	0x40013400

08004120 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a35      	ldr	r2, [pc, #212]	@ (8004204 <HAL_TIM_Base_MspInit+0xe4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d10c      	bne.n	800414c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004132:	4b35      	ldr	r3, [pc, #212]	@ (8004208 <HAL_TIM_Base_MspInit+0xe8>)
 8004134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004136:	4a34      	ldr	r2, [pc, #208]	@ (8004208 <HAL_TIM_Base_MspInit+0xe8>)
 8004138:	f043 0304 	orr.w	r3, r3, #4
 800413c:	6593      	str	r3, [r2, #88]	@ 0x58
 800413e:	4b32      	ldr	r3, [pc, #200]	@ (8004208 <HAL_TIM_Base_MspInit+0xe8>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	61fb      	str	r3, [r7, #28]
 8004148:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800414a:	e056      	b.n	80041fa <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a2e      	ldr	r2, [pc, #184]	@ (800420c <HAL_TIM_Base_MspInit+0xec>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d114      	bne.n	8004180 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004156:	4b2c      	ldr	r3, [pc, #176]	@ (8004208 <HAL_TIM_Base_MspInit+0xe8>)
 8004158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415a:	4a2b      	ldr	r2, [pc, #172]	@ (8004208 <HAL_TIM_Base_MspInit+0xe8>)
 800415c:	f043 0310 	orr.w	r3, r3, #16
 8004160:	6593      	str	r3, [r2, #88]	@ 0x58
 8004162:	4b29      	ldr	r3, [pc, #164]	@ (8004208 <HAL_TIM_Base_MspInit+0xe8>)
 8004164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	61bb      	str	r3, [r7, #24]
 800416c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800416e:	2200      	movs	r2, #0
 8004170:	2100      	movs	r1, #0
 8004172:	2036      	movs	r0, #54	@ 0x36
 8004174:	f002 f9cd 	bl	8006512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004178:	2036      	movs	r0, #54	@ 0x36
 800417a:	f002 f9e4 	bl	8006546 <HAL_NVIC_EnableIRQ>
}
 800417e:	e03c      	b.n	80041fa <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM7)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a22      	ldr	r2, [pc, #136]	@ (8004210 <HAL_TIM_Base_MspInit+0xf0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d10c      	bne.n	80041a4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800418a:	4b1f      	ldr	r3, [pc, #124]	@ (8004208 <HAL_TIM_Base_MspInit+0xe8>)
 800418c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418e:	4a1e      	ldr	r2, [pc, #120]	@ (8004208 <HAL_TIM_Base_MspInit+0xe8>)
 8004190:	f043 0320 	orr.w	r3, r3, #32
 8004194:	6593      	str	r3, [r2, #88]	@ 0x58
 8004196:	4b1c      	ldr	r3, [pc, #112]	@ (8004208 <HAL_TIM_Base_MspInit+0xe8>)
 8004198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	697b      	ldr	r3, [r7, #20]
}
 80041a2:	e02a      	b.n	80041fa <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM15)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a1a      	ldr	r2, [pc, #104]	@ (8004214 <HAL_TIM_Base_MspInit+0xf4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d114      	bne.n	80041d8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80041ae:	4b16      	ldr	r3, [pc, #88]	@ (8004208 <HAL_TIM_Base_MspInit+0xe8>)
 80041b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b2:	4a15      	ldr	r2, [pc, #84]	@ (8004208 <HAL_TIM_Base_MspInit+0xe8>)
 80041b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80041ba:	4b13      	ldr	r3, [pc, #76]	@ (8004208 <HAL_TIM_Base_MspInit+0xe8>)
 80041bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80041c6:	2200      	movs	r2, #0
 80041c8:	2100      	movs	r1, #0
 80041ca:	2018      	movs	r0, #24
 80041cc:	f002 f9a1 	bl	8006512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80041d0:	2018      	movs	r0, #24
 80041d2:	f002 f9b8 	bl	8006546 <HAL_NVIC_EnableIRQ>
}
 80041d6:	e010      	b.n	80041fa <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM16)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a0e      	ldr	r2, [pc, #56]	@ (8004218 <HAL_TIM_Base_MspInit+0xf8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d10b      	bne.n	80041fa <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80041e2:	4b09      	ldr	r3, [pc, #36]	@ (8004208 <HAL_TIM_Base_MspInit+0xe8>)
 80041e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e6:	4a08      	ldr	r2, [pc, #32]	@ (8004208 <HAL_TIM_Base_MspInit+0xe8>)
 80041e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80041ee:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <HAL_TIM_Base_MspInit+0xe8>)
 80041f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]
}
 80041fa:	bf00      	nop
 80041fc:	3720      	adds	r7, #32
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40000800 	.word	0x40000800
 8004208:	40021000 	.word	0x40021000
 800420c:	40001000 	.word	0x40001000
 8004210:	40001400 	.word	0x40001400
 8004214:	40014000 	.word	0x40014000
 8004218:	40014400 	.word	0x40014400

0800421c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	@ 0x28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004224:	f107 0314 	add.w	r3, r7, #20
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	605a      	str	r2, [r3, #4]
 800422e:	609a      	str	r2, [r3, #8]
 8004230:	60da      	str	r2, [r3, #12]
 8004232:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a33      	ldr	r2, [pc, #204]	@ (8004308 <HAL_TIM_MspPostInit+0xec>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d11c      	bne.n	8004278 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800423e:	4b33      	ldr	r3, [pc, #204]	@ (800430c <HAL_TIM_MspPostInit+0xf0>)
 8004240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004242:	4a32      	ldr	r2, [pc, #200]	@ (800430c <HAL_TIM_MspPostInit+0xf0>)
 8004244:	f043 0304 	orr.w	r3, r3, #4
 8004248:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800424a:	4b30      	ldr	r3, [pc, #192]	@ (800430c <HAL_TIM_MspPostInit+0xf0>)
 800424c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DEADTIME_TR_Pin;
 8004256:	2301      	movs	r3, #1
 8004258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800425a:	2302      	movs	r3, #2
 800425c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425e:	2300      	movs	r3, #0
 8004260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004262:	2302      	movs	r3, #2
 8004264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004266:	2302      	movs	r3, #2
 8004268:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_TR_GPIO_Port, &GPIO_InitStruct);
 800426a:	f107 0314 	add.w	r3, r7, #20
 800426e:	4619      	mov	r1, r3
 8004270:	4827      	ldr	r0, [pc, #156]	@ (8004310 <HAL_TIM_MspPostInit+0xf4>)
 8004272:	f002 fed3 	bl	800701c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004276:	e043      	b.n	8004300 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a25      	ldr	r2, [pc, #148]	@ (8004314 <HAL_TIM_MspPostInit+0xf8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d11d      	bne.n	80042be <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004282:	4b22      	ldr	r3, [pc, #136]	@ (800430c <HAL_TIM_MspPostInit+0xf0>)
 8004284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004286:	4a21      	ldr	r2, [pc, #132]	@ (800430c <HAL_TIM_MspPostInit+0xf0>)
 8004288:	f043 0308 	orr.w	r3, r3, #8
 800428c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800428e:	4b1f      	ldr	r3, [pc, #124]	@ (800430c <HAL_TIM_MspPostInit+0xf0>)
 8004290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 800429a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800429e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a0:	2302      	movs	r3, #2
 80042a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a4:	2300      	movs	r3, #0
 80042a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042a8:	2300      	movs	r3, #0
 80042aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80042ac:	2302      	movs	r3, #2
 80042ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 80042b0:	f107 0314 	add.w	r3, r7, #20
 80042b4:	4619      	mov	r1, r3
 80042b6:	4818      	ldr	r0, [pc, #96]	@ (8004318 <HAL_TIM_MspPostInit+0xfc>)
 80042b8:	f002 feb0 	bl	800701c <HAL_GPIO_Init>
}
 80042bc:	e020      	b.n	8004300 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a16      	ldr	r2, [pc, #88]	@ (800431c <HAL_TIM_MspPostInit+0x100>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d11b      	bne.n	8004300 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042c8:	4b10      	ldr	r3, [pc, #64]	@ (800430c <HAL_TIM_MspPostInit+0xf0>)
 80042ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042cc:	4a0f      	ldr	r2, [pc, #60]	@ (800430c <HAL_TIM_MspPostInit+0xf0>)
 80042ce:	f043 0304 	orr.w	r3, r3, #4
 80042d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042d4:	4b0d      	ldr	r3, [pc, #52]	@ (800430c <HAL_TIM_MspPostInit+0xf0>)
 80042d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	60bb      	str	r3, [r7, #8]
 80042de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEADTIME_HC_Pin;
 80042e0:	2380      	movs	r3, #128	@ 0x80
 80042e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e4:	2302      	movs	r3, #2
 80042e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042ec:	2302      	movs	r3, #2
 80042ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80042f0:	2304      	movs	r3, #4
 80042f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_HC_GPIO_Port, &GPIO_InitStruct);
 80042f4:	f107 0314 	add.w	r3, r7, #20
 80042f8:	4619      	mov	r1, r3
 80042fa:	4805      	ldr	r0, [pc, #20]	@ (8004310 <HAL_TIM_MspPostInit+0xf4>)
 80042fc:	f002 fe8e 	bl	800701c <HAL_GPIO_Init>
}
 8004300:	bf00      	nop
 8004302:	3728      	adds	r7, #40	@ 0x28
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40012c00 	.word	0x40012c00
 800430c:	40021000 	.word	0x40021000
 8004310:	48000800 	.word	0x48000800
 8004314:	40000800 	.word	0x40000800
 8004318:	48000c00 	.word	0x48000c00
 800431c:	40013400 	.word	0x40013400

08004320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b09e      	sub	sp, #120	@ 0x78
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004328:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	605a      	str	r2, [r3, #4]
 8004332:	609a      	str	r2, [r3, #8]
 8004334:	60da      	str	r2, [r3, #12]
 8004336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004338:	f107 0310 	add.w	r3, r7, #16
 800433c:	2254      	movs	r2, #84	@ 0x54
 800433e:	2100      	movs	r1, #0
 8004340:	4618      	mov	r0, r3
 8004342:	f00d fd30 	bl	8011da6 <memset>
  if(huart->Instance==UART4)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a1f      	ldr	r2, [pc, #124]	@ (80043c8 <HAL_UART_MspInit+0xa8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d136      	bne.n	80043be <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004350:	2308      	movs	r3, #8
 8004352:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_HSI;
 8004354:	2380      	movs	r3, #128	@ 0x80
 8004356:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004358:	f107 0310 	add.w	r3, r7, #16
 800435c:	4618      	mov	r0, r3
 800435e:	f005 fb41 	bl	80099e4 <HAL_RCCEx_PeriphCLKConfig>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004368:	f7ff fbb8 	bl	8003adc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800436c:	4b17      	ldr	r3, [pc, #92]	@ (80043cc <HAL_UART_MspInit+0xac>)
 800436e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004370:	4a16      	ldr	r2, [pc, #88]	@ (80043cc <HAL_UART_MspInit+0xac>)
 8004372:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004376:	6593      	str	r3, [r2, #88]	@ 0x58
 8004378:	4b14      	ldr	r3, [pc, #80]	@ (80043cc <HAL_UART_MspInit+0xac>)
 800437a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004384:	4b11      	ldr	r3, [pc, #68]	@ (80043cc <HAL_UART_MspInit+0xac>)
 8004386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004388:	4a10      	ldr	r2, [pc, #64]	@ (80043cc <HAL_UART_MspInit+0xac>)
 800438a:	f043 0304 	orr.w	r3, r3, #4
 800438e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004390:	4b0e      	ldr	r3, [pc, #56]	@ (80043cc <HAL_UART_MspInit+0xac>)
 8004392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800439c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80043a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a2:	2302      	movs	r3, #2
 80043a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043aa:	2300      	movs	r3, #0
 80043ac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80043ae:	2305      	movs	r3, #5
 80043b0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043b2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80043b6:	4619      	mov	r1, r3
 80043b8:	4805      	ldr	r0, [pc, #20]	@ (80043d0 <HAL_UART_MspInit+0xb0>)
 80043ba:	f002 fe2f 	bl	800701c <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80043be:	bf00      	nop
 80043c0:	3778      	adds	r7, #120	@ 0x78
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40004c00 	.word	0x40004c00
 80043cc:	40021000 	.word	0x40021000
 80043d0:	48000800 	.word	0x48000800

080043d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80043d8:	bf00      	nop
 80043da:	e7fd      	b.n	80043d8 <NMI_Handler+0x4>

080043dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043e0:	bf00      	nop
 80043e2:	e7fd      	b.n	80043e0 <HardFault_Handler+0x4>

080043e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043e8:	bf00      	nop
 80043ea:	e7fd      	b.n	80043e8 <MemManage_Handler+0x4>

080043ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043f0:	bf00      	nop
 80043f2:	e7fd      	b.n	80043f0 <BusFault_Handler+0x4>

080043f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043f8:	bf00      	nop
 80043fa:	e7fd      	b.n	80043f8 <UsageFault_Handler+0x4>

080043fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004400:	bf00      	nop
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800440a:	b480      	push	{r7}
 800440c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800440e:	bf00      	nop
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800441c:	bf00      	nop
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800442a:	f000 f9af 	bl	800478c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800442e:	bf00      	nop
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004438:	4802      	ldr	r0, [pc, #8]	@ (8004444 <DMA1_Channel1_IRQHandler+0x10>)
 800443a:	f002 fca0 	bl	8006d7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800443e:	bf00      	nop
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20000584 	.word	0x20000584

08004448 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 800444c:	4802      	ldr	r0, [pc, #8]	@ (8004458 <DMA1_Channel2_IRQHandler+0x10>)
 800444e:	f002 fc96 	bl	8006d7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004452:	bf00      	nop
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	200005e4 	.word	0x200005e4

0800445c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8004460:	4802      	ldr	r0, [pc, #8]	@ (800446c <DMA1_Channel3_IRQHandler+0x10>)
 8004462:	f002 fc8c 	bl	8006d7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004466:	bf00      	nop
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000644 	.word	0x20000644

08004470 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004474:	4802      	ldr	r0, [pc, #8]	@ (8004480 <DMA1_Channel4_IRQHandler+0x10>)
 8004476:	f002 fc82 	bl	8006d7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800447a:	bf00      	nop
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	200006f4 	.word	0x200006f4

08004484 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8004488:	4802      	ldr	r0, [pc, #8]	@ (8004494 <DMA1_Channel5_IRQHandler+0x10>)
 800448a:	f002 fc78 	bl	8006d7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800448e:	bf00      	nop
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000754 	.word	0x20000754

08004498 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800449c:	4802      	ldr	r0, [pc, #8]	@ (80044a8 <USB_LP_IRQHandler+0x10>)
 800449e:	f003 f879 	bl	8007594 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80044a2:	bf00      	nop
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20002094 	.word	0x20002094

080044ac <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80044b0:	4803      	ldr	r0, [pc, #12]	@ (80044c0 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80044b2:	f005 ffbd 	bl	800a430 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80044b6:	4803      	ldr	r0, [pc, #12]	@ (80044c4 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80044b8:	f005 ffba 	bl	800a430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80044bc:	bf00      	nop
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	200007b4 	.word	0x200007b4
 80044c4:	20000930 	.word	0x20000930

080044c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
					HEAT_SINK_TEMP = (ADC3_DMA_BUFFER[4]/4096)*3.3;//(Low_pass_filter(ADC3_DMA_BUFFER[4], HEAT_SINK_TEMP)/4096)*3.3;
					FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
					}*/

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80044cc:	4803      	ldr	r0, [pc, #12]	@ (80044dc <TIM6_DAC_IRQHandler+0x14>)
 80044ce:	f005 ffaf 	bl	800a430 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80044d2:	4803      	ldr	r0, [pc, #12]	@ (80044e0 <TIM6_DAC_IRQHandler+0x18>)
 80044d4:	f002 f8e0 	bl	8006698 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80044d8:	bf00      	nop
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	2000084c 	.word	0x2000084c
 80044e0:	200006cc 	.word	0x200006cc

080044e4 <_getpid>:
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	2301      	movs	r3, #1
 80044ea:	4618      	mov	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <_kill>:
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
 80044fe:	f00d fcb7 	bl	8011e70 <__errno>
 8004502:	4603      	mov	r3, r0
 8004504:	2216      	movs	r2, #22
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	f04f 33ff 	mov.w	r3, #4294967295
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <_exit>:
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	f04f 31ff 	mov.w	r1, #4294967295
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff ffe7 	bl	80044f4 <_kill>
 8004526:	bf00      	nop
 8004528:	e7fd      	b.n	8004526 <_exit+0x12>

0800452a <_read>:
 800452a:	b580      	push	{r7, lr}
 800452c:	b086      	sub	sp, #24
 800452e:	af00      	add	r7, sp, #0
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	607a      	str	r2, [r7, #4]
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	e00a      	b.n	8004552 <_read+0x28>
 800453c:	f3af 8000 	nop.w
 8004540:	4601      	mov	r1, r0
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	60ba      	str	r2, [r7, #8]
 8004548:	b2ca      	uxtb	r2, r1
 800454a:	701a      	strb	r2, [r3, #0]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	3301      	adds	r3, #1
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	429a      	cmp	r2, r3
 8004558:	dbf0      	blt.n	800453c <_read+0x12>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <_write>:
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	e009      	b.n	800458a <_write+0x26>
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	60ba      	str	r2, [r7, #8]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f3af 8000 	nop.w
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	3301      	adds	r3, #1
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	429a      	cmp	r2, r3
 8004590:	dbf1      	blt.n	8004576 <_write+0x12>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4618      	mov	r0, r3
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <_close>:
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	f04f 33ff 	mov.w	r3, #4294967295
 80045a8:	4618      	mov	r0, r3
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <_fstat>:
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80045c4:	605a      	str	r2, [r3, #4]
 80045c6:	2300      	movs	r3, #0
 80045c8:	4618      	mov	r0, r3
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <_isatty>:
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	2301      	movs	r3, #1
 80045de:	4618      	mov	r0, r3
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <_lseek>:
 80045ea:	b480      	push	{r7}
 80045ec:	b085      	sub	sp, #20
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	607a      	str	r2, [r7, #4]
 80045f6:	2300      	movs	r3, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <_sbrk>:
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	4a14      	ldr	r2, [pc, #80]	@ (8004660 <_sbrk+0x5c>)
 800460e:	4b15      	ldr	r3, [pc, #84]	@ (8004664 <_sbrk+0x60>)
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	613b      	str	r3, [r7, #16]
 8004618:	4b13      	ldr	r3, [pc, #76]	@ (8004668 <_sbrk+0x64>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d102      	bne.n	8004626 <_sbrk+0x22>
 8004620:	4b11      	ldr	r3, [pc, #68]	@ (8004668 <_sbrk+0x64>)
 8004622:	4a12      	ldr	r2, [pc, #72]	@ (800466c <_sbrk+0x68>)
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	4b10      	ldr	r3, [pc, #64]	@ (8004668 <_sbrk+0x64>)
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	429a      	cmp	r2, r3
 8004632:	d207      	bcs.n	8004644 <_sbrk+0x40>
 8004634:	f00d fc1c 	bl	8011e70 <__errno>
 8004638:	4603      	mov	r3, r0
 800463a:	220c      	movs	r2, #12
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	f04f 33ff 	mov.w	r3, #4294967295
 8004642:	e009      	b.n	8004658 <_sbrk+0x54>
 8004644:	4b08      	ldr	r3, [pc, #32]	@ (8004668 <_sbrk+0x64>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	4b07      	ldr	r3, [pc, #28]	@ (8004668 <_sbrk+0x64>)
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4413      	add	r3, r2
 8004652:	4a05      	ldr	r2, [pc, #20]	@ (8004668 <_sbrk+0x64>)
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	20020000 	.word	0x20020000
 8004664:	00000400 	.word	0x00000400
 8004668:	20000bb8 	.word	0x20000bb8
 800466c:	200026e0 	.word	0x200026e0

08004670 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004674:	4b06      	ldr	r3, [pc, #24]	@ (8004690 <SystemInit+0x20>)
 8004676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800467a:	4a05      	ldr	r2, [pc, #20]	@ (8004690 <SystemInit+0x20>)
 800467c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004684:	bf00      	nop
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	e000ed00 	.word	0xe000ed00

08004694 <Reset_Handler>:
 8004694:	480d      	ldr	r0, [pc, #52]	@ (80046cc <LoopForever+0x2>)
 8004696:	4685      	mov	sp, r0
 8004698:	f7ff ffea 	bl	8004670 <SystemInit>
 800469c:	480c      	ldr	r0, [pc, #48]	@ (80046d0 <LoopForever+0x6>)
 800469e:	490d      	ldr	r1, [pc, #52]	@ (80046d4 <LoopForever+0xa>)
 80046a0:	4a0d      	ldr	r2, [pc, #52]	@ (80046d8 <LoopForever+0xe>)
 80046a2:	2300      	movs	r3, #0
 80046a4:	e002      	b.n	80046ac <LoopCopyDataInit>

080046a6 <CopyDataInit>:
 80046a6:	58d4      	ldr	r4, [r2, r3]
 80046a8:	50c4      	str	r4, [r0, r3]
 80046aa:	3304      	adds	r3, #4

080046ac <LoopCopyDataInit>:
 80046ac:	18c4      	adds	r4, r0, r3
 80046ae:	428c      	cmp	r4, r1
 80046b0:	d3f9      	bcc.n	80046a6 <CopyDataInit>
 80046b2:	4a0a      	ldr	r2, [pc, #40]	@ (80046dc <LoopForever+0x12>)
 80046b4:	4c0a      	ldr	r4, [pc, #40]	@ (80046e0 <LoopForever+0x16>)
 80046b6:	2300      	movs	r3, #0
 80046b8:	e001      	b.n	80046be <LoopFillZerobss>

080046ba <FillZerobss>:
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	3204      	adds	r2, #4

080046be <LoopFillZerobss>:
 80046be:	42a2      	cmp	r2, r4
 80046c0:	d3fb      	bcc.n	80046ba <FillZerobss>
 80046c2:	f00d fbdb 	bl	8011e7c <__libc_init_array>
 80046c6:	f7fc fcb7 	bl	8001038 <main>

080046ca <LoopForever>:
 80046ca:	e7fe      	b.n	80046ca <LoopForever>
 80046cc:	20020000 	.word	0x20020000
 80046d0:	20000000 	.word	0x20000000
 80046d4:	200003b8 	.word	0x200003b8
 80046d8:	080174b0 	.word	0x080174b0
 80046dc:	200003b8 	.word	0x200003b8
 80046e0:	200026dc 	.word	0x200026dc

080046e4 <ADC1_2_IRQHandler>:
 80046e4:	e7fe      	b.n	80046e4 <ADC1_2_IRQHandler>

080046e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046f0:	2003      	movs	r0, #3
 80046f2:	f001 ff03 	bl	80064fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046f6:	2000      	movs	r0, #0
 80046f8:	f000 f80e 	bl	8004718 <HAL_InitTick>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	71fb      	strb	r3, [r7, #7]
 8004706:	e001      	b.n	800470c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004708:	f7ff f9ee 	bl	8003ae8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800470c:	79fb      	ldrb	r3, [r7, #7]

}
 800470e:	4618      	mov	r0, r3
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004724:	4b16      	ldr	r3, [pc, #88]	@ (8004780 <HAL_InitTick+0x68>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d022      	beq.n	8004772 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800472c:	4b15      	ldr	r3, [pc, #84]	@ (8004784 <HAL_InitTick+0x6c>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b13      	ldr	r3, [pc, #76]	@ (8004780 <HAL_InitTick+0x68>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004738:	fbb1 f3f3 	udiv	r3, r1, r3
 800473c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004740:	4618      	mov	r0, r3
 8004742:	f001 ff0e 	bl	8006562 <HAL_SYSTICK_Config>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10f      	bne.n	800476c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b0f      	cmp	r3, #15
 8004750:	d809      	bhi.n	8004766 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004752:	2200      	movs	r2, #0
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	f04f 30ff 	mov.w	r0, #4294967295
 800475a:	f001 feda 	bl	8006512 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800475e:	4a0a      	ldr	r2, [pc, #40]	@ (8004788 <HAL_InitTick+0x70>)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	e007      	b.n	8004776 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	73fb      	strb	r3, [r7, #15]
 800476a:	e004      	b.n	8004776 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
 8004770:	e001      	b.n	8004776 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004776:	7bfb      	ldrb	r3, [r7, #15]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	20000060 	.word	0x20000060
 8004784:	20000058 	.word	0x20000058
 8004788:	2000005c 	.word	0x2000005c

0800478c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004790:	4b05      	ldr	r3, [pc, #20]	@ (80047a8 <HAL_IncTick+0x1c>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4b05      	ldr	r3, [pc, #20]	@ (80047ac <HAL_IncTick+0x20>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4413      	add	r3, r2
 800479a:	4a03      	ldr	r2, [pc, #12]	@ (80047a8 <HAL_IncTick+0x1c>)
 800479c:	6013      	str	r3, [r2, #0]
}
 800479e:	bf00      	nop
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	20000bbc 	.word	0x20000bbc
 80047ac:	20000060 	.word	0x20000060

080047b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  return uwTick;
 80047b4:	4b03      	ldr	r3, [pc, #12]	@ (80047c4 <HAL_GetTick+0x14>)
 80047b6:	681b      	ldr	r3, [r3, #0]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20000bbc 	.word	0x20000bbc

080047c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047d0:	f7ff ffee 	bl	80047b0 <HAL_GetTick>
 80047d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e0:	d004      	beq.n	80047ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80047e2:	4b09      	ldr	r3, [pc, #36]	@ (8004808 <HAL_Delay+0x40>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4413      	add	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047ec:	bf00      	nop
 80047ee:	f7ff ffdf 	bl	80047b0 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d8f7      	bhi.n	80047ee <HAL_Delay+0x26>
  {
  }
}
 80047fe:	bf00      	nop
 8004800:	bf00      	nop
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20000060 	.word	0x20000060

0800480c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	609a      	str	r2, [r3, #8]
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
 800483a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	609a      	str	r2, [r3, #8]
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3360      	adds	r3, #96	@ 0x60
 8004886:	461a      	mov	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	4b08      	ldr	r3, [pc, #32]	@ (80048b8 <LL_ADC_SetOffset+0x44>)
 8004896:	4013      	ands	r3, r2
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80048ac:	bf00      	nop
 80048ae:	371c      	adds	r7, #28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	03fff000 	.word	0x03fff000

080048bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3360      	adds	r3, #96	@ 0x60
 80048ca:	461a      	mov	r2, r3
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	3360      	adds	r3, #96	@ 0x60
 80048f8:	461a      	mov	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	431a      	orrs	r2, r3
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004912:	bf00      	nop
 8004914:	371c      	adds	r7, #28
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800491e:	b480      	push	{r7}
 8004920:	b087      	sub	sp, #28
 8004922:	af00      	add	r7, sp, #0
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3360      	adds	r3, #96	@ 0x60
 800492e:	461a      	mov	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	431a      	orrs	r2, r3
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004948:	bf00      	nop
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	3360      	adds	r3, #96	@ 0x60
 8004964:	461a      	mov	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	431a      	orrs	r2, r3
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800497e:	bf00      	nop
 8004980:	371c      	adds	r7, #28
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	615a      	str	r2, [r3, #20]
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b087      	sub	sp, #28
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	60b9      	str	r1, [r7, #8]
 80049e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	3330      	adds	r3, #48	@ 0x30
 80049e6:	461a      	mov	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	0a1b      	lsrs	r3, r3, #8
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	f003 030c 	and.w	r3, r3, #12
 80049f2:	4413      	add	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f003 031f 	and.w	r3, r3, #31
 8004a00:	211f      	movs	r1, #31
 8004a02:	fa01 f303 	lsl.w	r3, r1, r3
 8004a06:	43db      	mvns	r3, r3
 8004a08:	401a      	ands	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	0e9b      	lsrs	r3, r3, #26
 8004a0e:	f003 011f 	and.w	r1, r3, #31
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f003 031f 	and.w	r3, r3, #31
 8004a18:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b087      	sub	sp, #28
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3314      	adds	r3, #20
 8004a3e:	461a      	mov	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	0e5b      	lsrs	r3, r3, #25
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	4413      	add	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	0d1b      	lsrs	r3, r3, #20
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	2107      	movs	r1, #7
 8004a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a60:	43db      	mvns	r3, r3
 8004a62:	401a      	ands	r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	0d1b      	lsrs	r3, r3, #20
 8004a68:	f003 031f 	and.w	r3, r3, #31
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a72:	431a      	orrs	r2, r3
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004a78:	bf00      	nop
 8004a7a:	371c      	adds	r7, #28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	401a      	ands	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f003 0318 	and.w	r3, r3, #24
 8004aa6:	4908      	ldr	r1, [pc, #32]	@ (8004ac8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004aa8:	40d9      	lsrs	r1, r3
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	400b      	ands	r3, r1
 8004aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004aba:	bf00      	nop
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	0007ffff 	.word	0x0007ffff

08004acc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 031f 	and.w	r3, r3, #31
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004af8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6093      	str	r3, [r2, #8]
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b20:	d101      	bne.n	8004b26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004b44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b70:	d101      	bne.n	8004b76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b98:	f043 0201 	orr.w	r2, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004bbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004bc0:	f043 0202 	orr.w	r2, r3, #2
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <LL_ADC_IsEnabled+0x18>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <LL_ADC_IsEnabled+0x1a>
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d101      	bne.n	8004c12 <LL_ADC_IsDisableOngoing+0x18>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <LL_ADC_IsDisableOngoing+0x1a>
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c34:	f043 0204 	orr.w	r2, r3, #4
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d101      	bne.n	8004c60 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e000      	b.n	8004c62 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d101      	bne.n	8004c86 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004c94:	b590      	push	{r4, r7, lr}
 8004c96:	b089      	sub	sp, #36	@ 0x24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e1a9      	b.n	8005002 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d109      	bne.n	8004cd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7fe ff37 	bl	8003b30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff ff19 	bl	8004b0c <LL_ADC_IsDeepPowerDownEnabled>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d004      	beq.n	8004cea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff feff 	bl	8004ae8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff ff34 	bl	8004b5c <LL_ADC_IsInternalRegulatorEnabled>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d115      	bne.n	8004d26 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff ff18 	bl	8004b34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d04:	4b9c      	ldr	r3, [pc, #624]	@ (8004f78 <HAL_ADC_Init+0x2e4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	099b      	lsrs	r3, r3, #6
 8004d0a:	4a9c      	ldr	r2, [pc, #624]	@ (8004f7c <HAL_ADC_Init+0x2e8>)
 8004d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d10:	099b      	lsrs	r3, r3, #6
 8004d12:	3301      	adds	r3, #1
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004d18:	e002      	b.n	8004d20 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1f9      	bne.n	8004d1a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff ff16 	bl	8004b5c <LL_ADC_IsInternalRegulatorEnabled>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10d      	bne.n	8004d52 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d3a:	f043 0210 	orr.w	r2, r3, #16
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d46:	f043 0201 	orr.w	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff ff76 	bl	8004c48 <LL_ADC_REG_IsConversionOngoing>
 8004d5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d62:	f003 0310 	and.w	r3, r3, #16
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f040 8142 	bne.w	8004ff0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f040 813e 	bne.w	8004ff0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d78:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004d7c:	f043 0202 	orr.w	r2, r3, #2
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff ff23 	bl	8004bd4 <LL_ADC_IsEnabled>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d141      	bne.n	8004e18 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d9c:	d004      	beq.n	8004da8 <HAL_ADC_Init+0x114>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a77      	ldr	r2, [pc, #476]	@ (8004f80 <HAL_ADC_Init+0x2ec>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d10f      	bne.n	8004dc8 <HAL_ADC_Init+0x134>
 8004da8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004dac:	f7ff ff12 	bl	8004bd4 <LL_ADC_IsEnabled>
 8004db0:	4604      	mov	r4, r0
 8004db2:	4873      	ldr	r0, [pc, #460]	@ (8004f80 <HAL_ADC_Init+0x2ec>)
 8004db4:	f7ff ff0e 	bl	8004bd4 <LL_ADC_IsEnabled>
 8004db8:	4603      	mov	r3, r0
 8004dba:	4323      	orrs	r3, r4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bf0c      	ite	eq
 8004dc0:	2301      	moveq	r3, #1
 8004dc2:	2300      	movne	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	e012      	b.n	8004dee <HAL_ADC_Init+0x15a>
 8004dc8:	486e      	ldr	r0, [pc, #440]	@ (8004f84 <HAL_ADC_Init+0x2f0>)
 8004dca:	f7ff ff03 	bl	8004bd4 <LL_ADC_IsEnabled>
 8004dce:	4604      	mov	r4, r0
 8004dd0:	486d      	ldr	r0, [pc, #436]	@ (8004f88 <HAL_ADC_Init+0x2f4>)
 8004dd2:	f7ff feff 	bl	8004bd4 <LL_ADC_IsEnabled>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	431c      	orrs	r4, r3
 8004dda:	486c      	ldr	r0, [pc, #432]	@ (8004f8c <HAL_ADC_Init+0x2f8>)
 8004ddc:	f7ff fefa 	bl	8004bd4 <LL_ADC_IsEnabled>
 8004de0:	4603      	mov	r3, r0
 8004de2:	4323      	orrs	r3, r4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	bf0c      	ite	eq
 8004de8:	2301      	moveq	r3, #1
 8004dea:	2300      	movne	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d012      	beq.n	8004e18 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dfa:	d004      	beq.n	8004e06 <HAL_ADC_Init+0x172>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a5f      	ldr	r2, [pc, #380]	@ (8004f80 <HAL_ADC_Init+0x2ec>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d101      	bne.n	8004e0a <HAL_ADC_Init+0x176>
 8004e06:	4a62      	ldr	r2, [pc, #392]	@ (8004f90 <HAL_ADC_Init+0x2fc>)
 8004e08:	e000      	b.n	8004e0c <HAL_ADC_Init+0x178>
 8004e0a:	4a62      	ldr	r2, [pc, #392]	@ (8004f94 <HAL_ADC_Init+0x300>)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	4619      	mov	r1, r3
 8004e12:	4610      	mov	r0, r2
 8004e14:	f7ff fcfa 	bl	800480c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	7f5b      	ldrb	r3, [r3, #29]
 8004e1c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e22:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004e28:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004e2e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e36:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d106      	bne.n	8004e54 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	045b      	lsls	r3, r3, #17
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d009      	beq.n	8004e70 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e60:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e68:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	4b48      	ldr	r3, [pc, #288]	@ (8004f98 <HAL_ADC_Init+0x304>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6812      	ldr	r2, [r2, #0]
 8004e7e:	69b9      	ldr	r1, [r7, #24]
 8004e80:	430b      	orrs	r3, r1
 8004e82:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff fee5 	bl	8004c6e <LL_ADC_INJ_IsConversionOngoing>
 8004ea4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d17f      	bne.n	8004fac <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d17c      	bne.n	8004fac <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004eb6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004ebe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ece:	f023 0302 	bic.w	r3, r3, #2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6812      	ldr	r2, [r2, #0]
 8004ed6:	69b9      	ldr	r1, [r7, #24]
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d017      	beq.n	8004f14 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691a      	ldr	r2, [r3, #16]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004ef2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004efc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004f00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6911      	ldr	r1, [r2, #16]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6812      	ldr	r2, [r2, #0]
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004f12:	e013      	b.n	8004f3c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004f22:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004f34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f38:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d12a      	bne.n	8004f9c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004f50:	f023 0304 	bic.w	r3, r3, #4
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f5c:	4311      	orrs	r1, r2
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004f62:	4311      	orrs	r1, r2
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0201 	orr.w	r2, r2, #1
 8004f74:	611a      	str	r2, [r3, #16]
 8004f76:	e019      	b.n	8004fac <HAL_ADC_Init+0x318>
 8004f78:	20000058 	.word	0x20000058
 8004f7c:	053e2d63 	.word	0x053e2d63
 8004f80:	50000100 	.word	0x50000100
 8004f84:	50000400 	.word	0x50000400
 8004f88:	50000500 	.word	0x50000500
 8004f8c:	50000600 	.word	0x50000600
 8004f90:	50000300 	.word	0x50000300
 8004f94:	50000700 	.word	0x50000700
 8004f98:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0201 	bic.w	r2, r2, #1
 8004faa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d10c      	bne.n	8004fce <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fba:	f023 010f 	bic.w	r1, r3, #15
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	1e5a      	subs	r2, r3, #1
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fcc:	e007      	b.n	8004fde <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 020f 	bic.w	r2, r2, #15
 8004fdc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fe2:	f023 0303 	bic.w	r3, r3, #3
 8004fe6:	f043 0201 	orr.w	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004fee:	e007      	b.n	8005000 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff4:	f043 0210 	orr.w	r2, r3, #16
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005000:	7ffb      	ldrb	r3, [r7, #31]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3724      	adds	r7, #36	@ 0x24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd90      	pop	{r4, r7, pc}
 800500a:	bf00      	nop

0800500c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005020:	d004      	beq.n	800502c <HAL_ADC_Start_DMA+0x20>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a5a      	ldr	r2, [pc, #360]	@ (8005190 <HAL_ADC_Start_DMA+0x184>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d101      	bne.n	8005030 <HAL_ADC_Start_DMA+0x24>
 800502c:	4b59      	ldr	r3, [pc, #356]	@ (8005194 <HAL_ADC_Start_DMA+0x188>)
 800502e:	e000      	b.n	8005032 <HAL_ADC_Start_DMA+0x26>
 8005030:	4b59      	ldr	r3, [pc, #356]	@ (8005198 <HAL_ADC_Start_DMA+0x18c>)
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff fd4a 	bl	8004acc <LL_ADC_GetMultimode>
 8005038:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f7ff fe02 	bl	8004c48 <LL_ADC_REG_IsConversionOngoing>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	f040 809b 	bne.w	8005182 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005052:	2b01      	cmp	r3, #1
 8005054:	d101      	bne.n	800505a <HAL_ADC_Start_DMA+0x4e>
 8005056:	2302      	movs	r3, #2
 8005058:	e096      	b.n	8005188 <HAL_ADC_Start_DMA+0x17c>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a4d      	ldr	r2, [pc, #308]	@ (800519c <HAL_ADC_Start_DMA+0x190>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d008      	beq.n	800507e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2b05      	cmp	r3, #5
 8005076:	d002      	beq.n	800507e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	2b09      	cmp	r3, #9
 800507c:	d17a      	bne.n	8005174 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 fcec 	bl	8005a5c <ADC_Enable>
 8005084:	4603      	mov	r3, r0
 8005086:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005088:	7dfb      	ldrb	r3, [r7, #23]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d16d      	bne.n	800516a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005092:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005096:	f023 0301 	bic.w	r3, r3, #1
 800509a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a3a      	ldr	r2, [pc, #232]	@ (8005190 <HAL_ADC_Start_DMA+0x184>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d009      	beq.n	80050c0 <HAL_ADC_Start_DMA+0xb4>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a3b      	ldr	r2, [pc, #236]	@ (80051a0 <HAL_ADC_Start_DMA+0x194>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d002      	beq.n	80050bc <HAL_ADC_Start_DMA+0xb0>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	e003      	b.n	80050c4 <HAL_ADC_Start_DMA+0xb8>
 80050bc:	4b39      	ldr	r3, [pc, #228]	@ (80051a4 <HAL_ADC_Start_DMA+0x198>)
 80050be:	e001      	b.n	80050c4 <HAL_ADC_Start_DMA+0xb8>
 80050c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	6812      	ldr	r2, [r2, #0]
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d002      	beq.n	80050d2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d105      	bne.n	80050de <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050d6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d006      	beq.n	80050f8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ee:	f023 0206 	bic.w	r2, r3, #6
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	661a      	str	r2, [r3, #96]	@ 0x60
 80050f6:	e002      	b.n	80050fe <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005102:	4a29      	ldr	r2, [pc, #164]	@ (80051a8 <HAL_ADC_Start_DMA+0x19c>)
 8005104:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510a:	4a28      	ldr	r2, [pc, #160]	@ (80051ac <HAL_ADC_Start_DMA+0x1a0>)
 800510c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005112:	4a27      	ldr	r2, [pc, #156]	@ (80051b0 <HAL_ADC_Start_DMA+0x1a4>)
 8005114:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	221c      	movs	r2, #28
 800511c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f042 0210 	orr.w	r2, r2, #16
 8005134:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f042 0201 	orr.w	r2, r2, #1
 8005144:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3340      	adds	r3, #64	@ 0x40
 8005150:	4619      	mov	r1, r3
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f001 fd97 	bl	8006c88 <HAL_DMA_Start_IT>
 800515a:	4603      	mov	r3, r0
 800515c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff fd5c 	bl	8004c20 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005168:	e00d      	b.n	8005186 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005172:	e008      	b.n	8005186 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005180:	e001      	b.n	8005186 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005182:	2302      	movs	r3, #2
 8005184:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005186:	7dfb      	ldrb	r3, [r7, #23]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	50000100 	.word	0x50000100
 8005194:	50000300 	.word	0x50000300
 8005198:	50000700 	.word	0x50000700
 800519c:	50000600 	.word	0x50000600
 80051a0:	50000500 	.word	0x50000500
 80051a4:	50000400 	.word	0x50000400
 80051a8:	08005c47 	.word	0x08005c47
 80051ac:	08005d1f 	.word	0x08005d1f
 80051b0:	08005d3b 	.word	0x08005d3b

080051b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b0b6      	sub	sp, #216	@ 0xd8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d102      	bne.n	8005200 <HAL_ADC_ConfigChannel+0x24>
 80051fa:	2302      	movs	r3, #2
 80051fc:	f000 bc13 	b.w	8005a26 <HAL_ADC_ConfigChannel+0x84a>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff fd1b 	bl	8004c48 <LL_ADC_REG_IsConversionOngoing>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	f040 83f3 	bne.w	8005a00 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6859      	ldr	r1, [r3, #4]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	f7ff fbd5 	bl	80049d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff fd09 	bl	8004c48 <LL_ADC_REG_IsConversionOngoing>
 8005236:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff fd15 	bl	8004c6e <LL_ADC_INJ_IsConversionOngoing>
 8005244:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005248:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800524c:	2b00      	cmp	r3, #0
 800524e:	f040 81d9 	bne.w	8005604 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005252:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005256:	2b00      	cmp	r3, #0
 8005258:	f040 81d4 	bne.w	8005604 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005264:	d10f      	bne.n	8005286 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2200      	movs	r2, #0
 8005270:	4619      	mov	r1, r3
 8005272:	f7ff fbdc 	bl	8004a2e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff fb83 	bl	800498a <LL_ADC_SetSamplingTimeCommonConfig>
 8005284:	e00e      	b.n	80052a4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	6819      	ldr	r1, [r3, #0]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	461a      	mov	r2, r3
 8005294:	f7ff fbcb 	bl	8004a2e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2100      	movs	r1, #0
 800529e:	4618      	mov	r0, r3
 80052a0:	f7ff fb73 	bl	800498a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	695a      	ldr	r2, [r3, #20]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	08db      	lsrs	r3, r3, #3
 80052b0:	f003 0303 	and.w	r3, r3, #3
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d022      	beq.n	800530c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6818      	ldr	r0, [r3, #0]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	6919      	ldr	r1, [r3, #16]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052d6:	f7ff facd 	bl	8004874 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6818      	ldr	r0, [r3, #0]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	6919      	ldr	r1, [r3, #16]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	461a      	mov	r2, r3
 80052e8:	f7ff fb19 	bl	800491e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6818      	ldr	r0, [r3, #0]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d102      	bne.n	8005302 <HAL_ADC_ConfigChannel+0x126>
 80052fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005300:	e000      	b.n	8005304 <HAL_ADC_ConfigChannel+0x128>
 8005302:	2300      	movs	r3, #0
 8005304:	461a      	mov	r2, r3
 8005306:	f7ff fb25 	bl	8004954 <LL_ADC_SetOffsetSaturation>
 800530a:	e17b      	b.n	8005604 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2100      	movs	r1, #0
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff fad2 	bl	80048bc <LL_ADC_GetOffsetChannel>
 8005318:	4603      	mov	r3, r0
 800531a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10a      	bne.n	8005338 <HAL_ADC_ConfigChannel+0x15c>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2100      	movs	r1, #0
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff fac7 	bl	80048bc <LL_ADC_GetOffsetChannel>
 800532e:	4603      	mov	r3, r0
 8005330:	0e9b      	lsrs	r3, r3, #26
 8005332:	f003 021f 	and.w	r2, r3, #31
 8005336:	e01e      	b.n	8005376 <HAL_ADC_ConfigChannel+0x19a>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff fabc 	bl	80048bc <LL_ADC_GetOffsetChannel>
 8005344:	4603      	mov	r3, r0
 8005346:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800534e:	fa93 f3a3 	rbit	r3, r3
 8005352:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005356:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800535a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800535e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005366:	2320      	movs	r3, #32
 8005368:	e004      	b.n	8005374 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800536a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800536e:	fab3 f383 	clz	r3, r3
 8005372:	b2db      	uxtb	r3, r3
 8005374:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800537e:	2b00      	cmp	r3, #0
 8005380:	d105      	bne.n	800538e <HAL_ADC_ConfigChannel+0x1b2>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	0e9b      	lsrs	r3, r3, #26
 8005388:	f003 031f 	and.w	r3, r3, #31
 800538c:	e018      	b.n	80053c0 <HAL_ADC_ConfigChannel+0x1e4>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005396:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800539a:	fa93 f3a3 	rbit	r3, r3
 800539e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80053a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80053aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80053b2:	2320      	movs	r3, #32
 80053b4:	e004      	b.n	80053c0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80053b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80053ba:	fab3 f383 	clz	r3, r3
 80053be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d106      	bne.n	80053d2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2200      	movs	r2, #0
 80053ca:	2100      	movs	r1, #0
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff fa8b 	bl	80048e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2101      	movs	r1, #1
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff fa6f 	bl	80048bc <LL_ADC_GetOffsetChannel>
 80053de:	4603      	mov	r3, r0
 80053e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <HAL_ADC_ConfigChannel+0x222>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2101      	movs	r1, #1
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff fa64 	bl	80048bc <LL_ADC_GetOffsetChannel>
 80053f4:	4603      	mov	r3, r0
 80053f6:	0e9b      	lsrs	r3, r3, #26
 80053f8:	f003 021f 	and.w	r2, r3, #31
 80053fc:	e01e      	b.n	800543c <HAL_ADC_ConfigChannel+0x260>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2101      	movs	r1, #1
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff fa59 	bl	80048bc <LL_ADC_GetOffsetChannel>
 800540a:	4603      	mov	r3, r0
 800540c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005410:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005414:	fa93 f3a3 	rbit	r3, r3
 8005418:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800541c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005420:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005424:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800542c:	2320      	movs	r3, #32
 800542e:	e004      	b.n	800543a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005430:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005434:	fab3 f383 	clz	r3, r3
 8005438:	b2db      	uxtb	r3, r3
 800543a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005444:	2b00      	cmp	r3, #0
 8005446:	d105      	bne.n	8005454 <HAL_ADC_ConfigChannel+0x278>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	0e9b      	lsrs	r3, r3, #26
 800544e:	f003 031f 	and.w	r3, r3, #31
 8005452:	e018      	b.n	8005486 <HAL_ADC_ConfigChannel+0x2aa>
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005460:	fa93 f3a3 	rbit	r3, r3
 8005464:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005468:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800546c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005470:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005478:	2320      	movs	r3, #32
 800547a:	e004      	b.n	8005486 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800547c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005480:	fab3 f383 	clz	r3, r3
 8005484:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005486:	429a      	cmp	r2, r3
 8005488:	d106      	bne.n	8005498 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2200      	movs	r2, #0
 8005490:	2101      	movs	r1, #1
 8005492:	4618      	mov	r0, r3
 8005494:	f7ff fa28 	bl	80048e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2102      	movs	r1, #2
 800549e:	4618      	mov	r0, r3
 80054a0:	f7ff fa0c 	bl	80048bc <LL_ADC_GetOffsetChannel>
 80054a4:	4603      	mov	r3, r0
 80054a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10a      	bne.n	80054c4 <HAL_ADC_ConfigChannel+0x2e8>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2102      	movs	r1, #2
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff fa01 	bl	80048bc <LL_ADC_GetOffsetChannel>
 80054ba:	4603      	mov	r3, r0
 80054bc:	0e9b      	lsrs	r3, r3, #26
 80054be:	f003 021f 	and.w	r2, r3, #31
 80054c2:	e01e      	b.n	8005502 <HAL_ADC_ConfigChannel+0x326>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2102      	movs	r1, #2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff f9f6 	bl	80048bc <LL_ADC_GetOffsetChannel>
 80054d0:	4603      	mov	r3, r0
 80054d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054da:	fa93 f3a3 	rbit	r3, r3
 80054de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80054e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80054ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80054f2:	2320      	movs	r3, #32
 80054f4:	e004      	b.n	8005500 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80054f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80054fa:	fab3 f383 	clz	r3, r3
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800550a:	2b00      	cmp	r3, #0
 800550c:	d105      	bne.n	800551a <HAL_ADC_ConfigChannel+0x33e>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	0e9b      	lsrs	r3, r3, #26
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	e016      	b.n	8005548 <HAL_ADC_ConfigChannel+0x36c>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005522:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005526:	fa93 f3a3 	rbit	r3, r3
 800552a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800552c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800552e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005532:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800553a:	2320      	movs	r3, #32
 800553c:	e004      	b.n	8005548 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800553e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005542:	fab3 f383 	clz	r3, r3
 8005546:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005548:	429a      	cmp	r2, r3
 800554a:	d106      	bne.n	800555a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2200      	movs	r2, #0
 8005552:	2102      	movs	r1, #2
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff f9c7 	bl	80048e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2103      	movs	r1, #3
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff f9ab 	bl	80048bc <LL_ADC_GetOffsetChannel>
 8005566:	4603      	mov	r3, r0
 8005568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <HAL_ADC_ConfigChannel+0x3aa>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2103      	movs	r1, #3
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff f9a0 	bl	80048bc <LL_ADC_GetOffsetChannel>
 800557c:	4603      	mov	r3, r0
 800557e:	0e9b      	lsrs	r3, r3, #26
 8005580:	f003 021f 	and.w	r2, r3, #31
 8005584:	e017      	b.n	80055b6 <HAL_ADC_ConfigChannel+0x3da>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2103      	movs	r1, #3
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff f995 	bl	80048bc <LL_ADC_GetOffsetChannel>
 8005592:	4603      	mov	r3, r0
 8005594:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005596:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005598:	fa93 f3a3 	rbit	r3, r3
 800559c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800559e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055a0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80055a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80055a8:	2320      	movs	r3, #32
 80055aa:	e003      	b.n	80055b4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80055ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055ae:	fab3 f383 	clz	r3, r3
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d105      	bne.n	80055ce <HAL_ADC_ConfigChannel+0x3f2>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	0e9b      	lsrs	r3, r3, #26
 80055c8:	f003 031f 	and.w	r3, r3, #31
 80055cc:	e011      	b.n	80055f2 <HAL_ADC_ConfigChannel+0x416>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055d6:	fa93 f3a3 	rbit	r3, r3
 80055da:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80055dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80055e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80055e6:	2320      	movs	r3, #32
 80055e8:	e003      	b.n	80055f2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80055ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055ec:	fab3 f383 	clz	r3, r3
 80055f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d106      	bne.n	8005604 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2200      	movs	r2, #0
 80055fc:	2103      	movs	r1, #3
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff f972 	bl	80048e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f7ff fae3 	bl	8004bd4 <LL_ADC_IsEnabled>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	f040 813d 	bne.w	8005890 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	6819      	ldr	r1, [r3, #0]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	461a      	mov	r2, r3
 8005624:	f7ff fa2e 	bl	8004a84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	4aa2      	ldr	r2, [pc, #648]	@ (80058b8 <HAL_ADC_ConfigChannel+0x6dc>)
 800562e:	4293      	cmp	r3, r2
 8005630:	f040 812e 	bne.w	8005890 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10b      	bne.n	800565c <HAL_ADC_ConfigChannel+0x480>
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	0e9b      	lsrs	r3, r3, #26
 800564a:	3301      	adds	r3, #1
 800564c:	f003 031f 	and.w	r3, r3, #31
 8005650:	2b09      	cmp	r3, #9
 8005652:	bf94      	ite	ls
 8005654:	2301      	movls	r3, #1
 8005656:	2300      	movhi	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	e019      	b.n	8005690 <HAL_ADC_ConfigChannel+0x4b4>
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005662:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005664:	fa93 f3a3 	rbit	r3, r3
 8005668:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800566a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800566c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800566e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005674:	2320      	movs	r3, #32
 8005676:	e003      	b.n	8005680 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005678:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800567a:	fab3 f383 	clz	r3, r3
 800567e:	b2db      	uxtb	r3, r3
 8005680:	3301      	adds	r3, #1
 8005682:	f003 031f 	and.w	r3, r3, #31
 8005686:	2b09      	cmp	r3, #9
 8005688:	bf94      	ite	ls
 800568a:	2301      	movls	r3, #1
 800568c:	2300      	movhi	r3, #0
 800568e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005690:	2b00      	cmp	r3, #0
 8005692:	d079      	beq.n	8005788 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800569c:	2b00      	cmp	r3, #0
 800569e:	d107      	bne.n	80056b0 <HAL_ADC_ConfigChannel+0x4d4>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	0e9b      	lsrs	r3, r3, #26
 80056a6:	3301      	adds	r3, #1
 80056a8:	069b      	lsls	r3, r3, #26
 80056aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056ae:	e015      	b.n	80056dc <HAL_ADC_ConfigChannel+0x500>
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056b8:	fa93 f3a3 	rbit	r3, r3
 80056bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80056be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056c0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80056c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80056c8:	2320      	movs	r3, #32
 80056ca:	e003      	b.n	80056d4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80056cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ce:	fab3 f383 	clz	r3, r3
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	3301      	adds	r3, #1
 80056d6:	069b      	lsls	r3, r3, #26
 80056d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d109      	bne.n	80056fc <HAL_ADC_ConfigChannel+0x520>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	0e9b      	lsrs	r3, r3, #26
 80056ee:	3301      	adds	r3, #1
 80056f0:	f003 031f 	and.w	r3, r3, #31
 80056f4:	2101      	movs	r1, #1
 80056f6:	fa01 f303 	lsl.w	r3, r1, r3
 80056fa:	e017      	b.n	800572c <HAL_ADC_ConfigChannel+0x550>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005704:	fa93 f3a3 	rbit	r3, r3
 8005708:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800570a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800570c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800570e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005714:	2320      	movs	r3, #32
 8005716:	e003      	b.n	8005720 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005718:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800571a:	fab3 f383 	clz	r3, r3
 800571e:	b2db      	uxtb	r3, r3
 8005720:	3301      	adds	r3, #1
 8005722:	f003 031f 	and.w	r3, r3, #31
 8005726:	2101      	movs	r1, #1
 8005728:	fa01 f303 	lsl.w	r3, r1, r3
 800572c:	ea42 0103 	orr.w	r1, r2, r3
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <HAL_ADC_ConfigChannel+0x576>
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	0e9b      	lsrs	r3, r3, #26
 8005742:	3301      	adds	r3, #1
 8005744:	f003 021f 	and.w	r2, r3, #31
 8005748:	4613      	mov	r3, r2
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	4413      	add	r3, r2
 800574e:	051b      	lsls	r3, r3, #20
 8005750:	e018      	b.n	8005784 <HAL_ADC_ConfigChannel+0x5a8>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575a:	fa93 f3a3 	rbit	r3, r3
 800575e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005762:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800576a:	2320      	movs	r3, #32
 800576c:	e003      	b.n	8005776 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800576e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005770:	fab3 f383 	clz	r3, r3
 8005774:	b2db      	uxtb	r3, r3
 8005776:	3301      	adds	r3, #1
 8005778:	f003 021f 	and.w	r2, r3, #31
 800577c:	4613      	mov	r3, r2
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	4413      	add	r3, r2
 8005782:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005784:	430b      	orrs	r3, r1
 8005786:	e07e      	b.n	8005886 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005790:	2b00      	cmp	r3, #0
 8005792:	d107      	bne.n	80057a4 <HAL_ADC_ConfigChannel+0x5c8>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	0e9b      	lsrs	r3, r3, #26
 800579a:	3301      	adds	r3, #1
 800579c:	069b      	lsls	r3, r3, #26
 800579e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057a2:	e015      	b.n	80057d0 <HAL_ADC_ConfigChannel+0x5f4>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ac:	fa93 f3a3 	rbit	r3, r3
 80057b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80057b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80057b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80057bc:	2320      	movs	r3, #32
 80057be:	e003      	b.n	80057c8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80057c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c2:	fab3 f383 	clz	r3, r3
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	3301      	adds	r3, #1
 80057ca:	069b      	lsls	r3, r3, #26
 80057cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d109      	bne.n	80057f0 <HAL_ADC_ConfigChannel+0x614>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	0e9b      	lsrs	r3, r3, #26
 80057e2:	3301      	adds	r3, #1
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	2101      	movs	r1, #1
 80057ea:	fa01 f303 	lsl.w	r3, r1, r3
 80057ee:	e017      	b.n	8005820 <HAL_ADC_ConfigChannel+0x644>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	fa93 f3a3 	rbit	r3, r3
 80057fc:	61fb      	str	r3, [r7, #28]
  return result;
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005808:	2320      	movs	r3, #32
 800580a:	e003      	b.n	8005814 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800580c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580e:	fab3 f383 	clz	r3, r3
 8005812:	b2db      	uxtb	r3, r3
 8005814:	3301      	adds	r3, #1
 8005816:	f003 031f 	and.w	r3, r3, #31
 800581a:	2101      	movs	r1, #1
 800581c:	fa01 f303 	lsl.w	r3, r1, r3
 8005820:	ea42 0103 	orr.w	r1, r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10d      	bne.n	800584c <HAL_ADC_ConfigChannel+0x670>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	0e9b      	lsrs	r3, r3, #26
 8005836:	3301      	adds	r3, #1
 8005838:	f003 021f 	and.w	r2, r3, #31
 800583c:	4613      	mov	r3, r2
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	4413      	add	r3, r2
 8005842:	3b1e      	subs	r3, #30
 8005844:	051b      	lsls	r3, r3, #20
 8005846:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800584a:	e01b      	b.n	8005884 <HAL_ADC_ConfigChannel+0x6a8>
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	fa93 f3a3 	rbit	r3, r3
 8005858:	613b      	str	r3, [r7, #16]
  return result;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005864:	2320      	movs	r3, #32
 8005866:	e003      	b.n	8005870 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	fab3 f383 	clz	r3, r3
 800586e:	b2db      	uxtb	r3, r3
 8005870:	3301      	adds	r3, #1
 8005872:	f003 021f 	and.w	r2, r3, #31
 8005876:	4613      	mov	r3, r2
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	4413      	add	r3, r2
 800587c:	3b1e      	subs	r3, #30
 800587e:	051b      	lsls	r3, r3, #20
 8005880:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005884:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800588a:	4619      	mov	r1, r3
 800588c:	f7ff f8cf 	bl	8004a2e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	4b09      	ldr	r3, [pc, #36]	@ (80058bc <HAL_ADC_ConfigChannel+0x6e0>)
 8005896:	4013      	ands	r3, r2
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 80be 	beq.w	8005a1a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058a6:	d004      	beq.n	80058b2 <HAL_ADC_ConfigChannel+0x6d6>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a04      	ldr	r2, [pc, #16]	@ (80058c0 <HAL_ADC_ConfigChannel+0x6e4>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d10a      	bne.n	80058c8 <HAL_ADC_ConfigChannel+0x6ec>
 80058b2:	4b04      	ldr	r3, [pc, #16]	@ (80058c4 <HAL_ADC_ConfigChannel+0x6e8>)
 80058b4:	e009      	b.n	80058ca <HAL_ADC_ConfigChannel+0x6ee>
 80058b6:	bf00      	nop
 80058b8:	407f0000 	.word	0x407f0000
 80058bc:	80080000 	.word	0x80080000
 80058c0:	50000100 	.word	0x50000100
 80058c4:	50000300 	.word	0x50000300
 80058c8:	4b59      	ldr	r3, [pc, #356]	@ (8005a30 <HAL_ADC_ConfigChannel+0x854>)
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fe ffc4 	bl	8004858 <LL_ADC_GetCommonPathInternalCh>
 80058d0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a56      	ldr	r2, [pc, #344]	@ (8005a34 <HAL_ADC_ConfigChannel+0x858>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d004      	beq.n	80058e8 <HAL_ADC_ConfigChannel+0x70c>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a55      	ldr	r2, [pc, #340]	@ (8005a38 <HAL_ADC_ConfigChannel+0x85c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d13a      	bne.n	800595e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80058e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d134      	bne.n	800595e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058fc:	d005      	beq.n	800590a <HAL_ADC_ConfigChannel+0x72e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a4e      	ldr	r2, [pc, #312]	@ (8005a3c <HAL_ADC_ConfigChannel+0x860>)
 8005904:	4293      	cmp	r3, r2
 8005906:	f040 8085 	bne.w	8005a14 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005912:	d004      	beq.n	800591e <HAL_ADC_ConfigChannel+0x742>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a49      	ldr	r2, [pc, #292]	@ (8005a40 <HAL_ADC_ConfigChannel+0x864>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d101      	bne.n	8005922 <HAL_ADC_ConfigChannel+0x746>
 800591e:	4a49      	ldr	r2, [pc, #292]	@ (8005a44 <HAL_ADC_ConfigChannel+0x868>)
 8005920:	e000      	b.n	8005924 <HAL_ADC_ConfigChannel+0x748>
 8005922:	4a43      	ldr	r2, [pc, #268]	@ (8005a30 <HAL_ADC_ConfigChannel+0x854>)
 8005924:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005928:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800592c:	4619      	mov	r1, r3
 800592e:	4610      	mov	r0, r2
 8005930:	f7fe ff7f 	bl	8004832 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005934:	4b44      	ldr	r3, [pc, #272]	@ (8005a48 <HAL_ADC_ConfigChannel+0x86c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	099b      	lsrs	r3, r3, #6
 800593a:	4a44      	ldr	r2, [pc, #272]	@ (8005a4c <HAL_ADC_ConfigChannel+0x870>)
 800593c:	fba2 2303 	umull	r2, r3, r2, r3
 8005940:	099b      	lsrs	r3, r3, #6
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	4613      	mov	r3, r2
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	4413      	add	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800594e:	e002      	b.n	8005956 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3b01      	subs	r3, #1
 8005954:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1f9      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800595c:	e05a      	b.n	8005a14 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a3b      	ldr	r2, [pc, #236]	@ (8005a50 <HAL_ADC_ConfigChannel+0x874>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d125      	bne.n	80059b4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005968:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800596c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d11f      	bne.n	80059b4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a31      	ldr	r2, [pc, #196]	@ (8005a40 <HAL_ADC_ConfigChannel+0x864>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d104      	bne.n	8005988 <HAL_ADC_ConfigChannel+0x7ac>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a34      	ldr	r2, [pc, #208]	@ (8005a54 <HAL_ADC_ConfigChannel+0x878>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d047      	beq.n	8005a18 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005990:	d004      	beq.n	800599c <HAL_ADC_ConfigChannel+0x7c0>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a2a      	ldr	r2, [pc, #168]	@ (8005a40 <HAL_ADC_ConfigChannel+0x864>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d101      	bne.n	80059a0 <HAL_ADC_ConfigChannel+0x7c4>
 800599c:	4a29      	ldr	r2, [pc, #164]	@ (8005a44 <HAL_ADC_ConfigChannel+0x868>)
 800599e:	e000      	b.n	80059a2 <HAL_ADC_ConfigChannel+0x7c6>
 80059a0:	4a23      	ldr	r2, [pc, #140]	@ (8005a30 <HAL_ADC_ConfigChannel+0x854>)
 80059a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059aa:	4619      	mov	r1, r3
 80059ac:	4610      	mov	r0, r2
 80059ae:	f7fe ff40 	bl	8004832 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80059b2:	e031      	b.n	8005a18 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a27      	ldr	r2, [pc, #156]	@ (8005a58 <HAL_ADC_ConfigChannel+0x87c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d12d      	bne.n	8005a1a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80059be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d127      	bne.n	8005a1a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005a40 <HAL_ADC_ConfigChannel+0x864>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d022      	beq.n	8005a1a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059dc:	d004      	beq.n	80059e8 <HAL_ADC_ConfigChannel+0x80c>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a17      	ldr	r2, [pc, #92]	@ (8005a40 <HAL_ADC_ConfigChannel+0x864>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d101      	bne.n	80059ec <HAL_ADC_ConfigChannel+0x810>
 80059e8:	4a16      	ldr	r2, [pc, #88]	@ (8005a44 <HAL_ADC_ConfigChannel+0x868>)
 80059ea:	e000      	b.n	80059ee <HAL_ADC_ConfigChannel+0x812>
 80059ec:	4a10      	ldr	r2, [pc, #64]	@ (8005a30 <HAL_ADC_ConfigChannel+0x854>)
 80059ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80059f6:	4619      	mov	r1, r3
 80059f8:	4610      	mov	r0, r2
 80059fa:	f7fe ff1a 	bl	8004832 <LL_ADC_SetCommonPathInternalCh>
 80059fe:	e00c      	b.n	8005a1a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a04:	f043 0220 	orr.w	r2, r3, #32
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005a12:	e002      	b.n	8005a1a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a14:	bf00      	nop
 8005a16:	e000      	b.n	8005a1a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005a22:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	37d8      	adds	r7, #216	@ 0xd8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	50000700 	.word	0x50000700
 8005a34:	c3210000 	.word	0xc3210000
 8005a38:	90c00010 	.word	0x90c00010
 8005a3c:	50000600 	.word	0x50000600
 8005a40:	50000100 	.word	0x50000100
 8005a44:	50000300 	.word	0x50000300
 8005a48:	20000058 	.word	0x20000058
 8005a4c:	053e2d63 	.word	0x053e2d63
 8005a50:	c7520000 	.word	0xc7520000
 8005a54:	50000500 	.word	0x50000500
 8005a58:	cb840000 	.word	0xcb840000

08005a5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005a64:	2300      	movs	r3, #0
 8005a66:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff f8b1 	bl	8004bd4 <LL_ADC_IsEnabled>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d176      	bne.n	8005b66 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	4b3c      	ldr	r3, [pc, #240]	@ (8005b70 <ADC_Enable+0x114>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00d      	beq.n	8005aa2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a8a:	f043 0210 	orr.w	r2, r3, #16
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a96:	f043 0201 	orr.w	r2, r3, #1
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e062      	b.n	8005b68 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7ff f86c 	bl	8004b84 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ab4:	d004      	beq.n	8005ac0 <ADC_Enable+0x64>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a2e      	ldr	r2, [pc, #184]	@ (8005b74 <ADC_Enable+0x118>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d101      	bne.n	8005ac4 <ADC_Enable+0x68>
 8005ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8005b78 <ADC_Enable+0x11c>)
 8005ac2:	e000      	b.n	8005ac6 <ADC_Enable+0x6a>
 8005ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8005b7c <ADC_Enable+0x120>)
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fe fec6 	bl	8004858 <LL_ADC_GetCommonPathInternalCh>
 8005acc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005ace:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d013      	beq.n	8005afe <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8005b80 <ADC_Enable+0x124>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	099b      	lsrs	r3, r3, #6
 8005adc:	4a29      	ldr	r2, [pc, #164]	@ (8005b84 <ADC_Enable+0x128>)
 8005ade:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae2:	099b      	lsrs	r3, r3, #6
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	4413      	add	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005af0:	e002      	b.n	8005af8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1f9      	bne.n	8005af2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005afe:	f7fe fe57 	bl	80047b0 <HAL_GetTick>
 8005b02:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b04:	e028      	b.n	8005b58 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff f862 	bl	8004bd4 <LL_ADC_IsEnabled>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d104      	bne.n	8005b20 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff f832 	bl	8004b84 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005b20:	f7fe fe46 	bl	80047b0 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d914      	bls.n	8005b58 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d00d      	beq.n	8005b58 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b40:	f043 0210 	orr.w	r2, r3, #16
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b4c:	f043 0201 	orr.w	r2, r3, #1
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e007      	b.n	8005b68 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d1cf      	bne.n	8005b06 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	8000003f 	.word	0x8000003f
 8005b74:	50000100 	.word	0x50000100
 8005b78:	50000300 	.word	0x50000300
 8005b7c:	50000700 	.word	0x50000700
 8005b80:	20000058 	.word	0x20000058
 8005b84:	053e2d63 	.word	0x053e2d63

08005b88 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff f830 	bl	8004bfa <LL_ADC_IsDisableOngoing>
 8005b9a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff f817 	bl	8004bd4 <LL_ADC_IsEnabled>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d047      	beq.n	8005c3c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d144      	bne.n	8005c3c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f003 030d 	and.w	r3, r3, #13
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d10c      	bne.n	8005bda <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fe fff1 	bl	8004bac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2203      	movs	r2, #3
 8005bd0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005bd2:	f7fe fded 	bl	80047b0 <HAL_GetTick>
 8005bd6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005bd8:	e029      	b.n	8005c2e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bde:	f043 0210 	orr.w	r2, r3, #16
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bea:	f043 0201 	orr.w	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e023      	b.n	8005c3e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005bf6:	f7fe fddb 	bl	80047b0 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d914      	bls.n	8005c2e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00d      	beq.n	8005c2e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c16:	f043 0210 	orr.w	r2, r3, #16
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c22:	f043 0201 	orr.w	r2, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e007      	b.n	8005c3e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1dc      	bne.n	8005bf6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b084      	sub	sp, #16
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d14b      	bne.n	8005cf8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c64:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0308 	and.w	r3, r3, #8
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d021      	beq.n	8005cbe <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fe fe96 	bl	80049b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d032      	beq.n	8005cf0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d12b      	bne.n	8005cf0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ca8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d11f      	bne.n	8005cf0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb4:	f043 0201 	orr.w	r2, r3, #1
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005cbc:	e018      	b.n	8005cf0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d111      	bne.n	8005cf0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d105      	bne.n	8005cf0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ce8:	f043 0201 	orr.w	r2, r3, #1
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f7fc fe99 	bl	8002a28 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005cf6:	e00e      	b.n	8005d16 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cfc:	f003 0310 	and.w	r3, r3, #16
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f7ff fa5f 	bl	80051c8 <HAL_ADC_ErrorCallback>
}
 8005d0a:	e004      	b.n	8005d16 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	4798      	blx	r3
}
 8005d16:	bf00      	nop
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f7ff fa41 	bl	80051b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d32:	bf00      	nop
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b084      	sub	sp, #16
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d58:	f043 0204 	orr.w	r2, r3, #4
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f7ff fa31 	bl	80051c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d66:	bf00      	nop
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <LL_ADC_IsEnabled>:
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d101      	bne.n	8005d86 <LL_ADC_IsEnabled+0x18>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e000      	b.n	8005d88 <LL_ADC_IsEnabled+0x1a>
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <LL_ADC_StartCalibration>:
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005da6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005db0:	4313      	orrs	r3, r2
 8005db2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	609a      	str	r2, [r3, #8]
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <LL_ADC_IsCalibrationOnGoing>:
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005dda:	d101      	bne.n	8005de0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <LL_ADC_REG_IsConversionOngoing>:
{
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d101      	bne.n	8005e06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d101      	bne.n	8005e30 <HAL_ADCEx_Calibration_Start+0x1c>
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e04d      	b.n	8005ecc <HAL_ADCEx_Calibration_Start+0xb8>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7ff fea5 	bl	8005b88 <ADC_Disable>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005e42:	7bfb      	ldrb	r3, [r7, #15]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d136      	bne.n	8005eb6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e4c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005e50:	f023 0302 	bic.w	r3, r3, #2
 8005e54:	f043 0202 	orr.w	r2, r3, #2
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6839      	ldr	r1, [r7, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff ff96 	bl	8005d94 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005e68:	e014      	b.n	8005e94 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4a18      	ldr	r2, [pc, #96]	@ (8005ed4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d90d      	bls.n	8005e94 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e7c:	f023 0312 	bic.w	r3, r3, #18
 8005e80:	f043 0210 	orr.w	r2, r3, #16
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e01b      	b.n	8005ecc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff ff94 	bl	8005dc6 <LL_ADC_IsCalibrationOnGoing>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1e2      	bne.n	8005e6a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ea8:	f023 0303 	bic.w	r3, r3, #3
 8005eac:	f043 0201 	orr.w	r2, r3, #1
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005eb4:	e005      	b.n	8005ec2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eba:	f043 0210 	orr.w	r2, r3, #16
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	0004de01 	.word	0x0004de01

08005ed8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005ed8:	b590      	push	{r4, r7, lr}
 8005eda:	b0a1      	sub	sp, #132	@ 0x84
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e0e7      	b.n	80060c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005efe:	2300      	movs	r3, #0
 8005f00:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005f02:	2300      	movs	r3, #0
 8005f04:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f0e:	d102      	bne.n	8005f16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005f10:	4b6f      	ldr	r3, [pc, #444]	@ (80060d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f12:	60bb      	str	r3, [r7, #8]
 8005f14:	e009      	b.n	8005f2a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a6e      	ldr	r2, [pc, #440]	@ (80060d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d102      	bne.n	8005f26 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005f20:	4b6d      	ldr	r3, [pc, #436]	@ (80060d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005f22:	60bb      	str	r3, [r7, #8]
 8005f24:	e001      	b.n	8005f2a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005f26:	2300      	movs	r3, #0
 8005f28:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10b      	bne.n	8005f48 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f34:	f043 0220 	orr.w	r2, r3, #32
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e0be      	b.n	80060c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7ff ff4f 	bl	8005dee <LL_ADC_REG_IsConversionOngoing>
 8005f50:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff ff49 	bl	8005dee <LL_ADC_REG_IsConversionOngoing>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f040 80a0 	bne.w	80060a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005f64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f040 809c 	bne.w	80060a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f74:	d004      	beq.n	8005f80 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a55      	ldr	r2, [pc, #340]	@ (80060d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d101      	bne.n	8005f84 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005f80:	4b56      	ldr	r3, [pc, #344]	@ (80060dc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005f82:	e000      	b.n	8005f86 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005f84:	4b56      	ldr	r3, [pc, #344]	@ (80060e0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005f86:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d04b      	beq.n	8006028 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005f90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	6859      	ldr	r1, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005fa2:	035b      	lsls	r3, r3, #13
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005faa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fb4:	d004      	beq.n	8005fc0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a45      	ldr	r2, [pc, #276]	@ (80060d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d10f      	bne.n	8005fe0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005fc0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005fc4:	f7ff fed3 	bl	8005d6e <LL_ADC_IsEnabled>
 8005fc8:	4604      	mov	r4, r0
 8005fca:	4841      	ldr	r0, [pc, #260]	@ (80060d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005fcc:	f7ff fecf 	bl	8005d6e <LL_ADC_IsEnabled>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	4323      	orrs	r3, r4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	bf0c      	ite	eq
 8005fd8:	2301      	moveq	r3, #1
 8005fda:	2300      	movne	r3, #0
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	e012      	b.n	8006006 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005fe0:	483c      	ldr	r0, [pc, #240]	@ (80060d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005fe2:	f7ff fec4 	bl	8005d6e <LL_ADC_IsEnabled>
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	483b      	ldr	r0, [pc, #236]	@ (80060d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005fea:	f7ff fec0 	bl	8005d6e <LL_ADC_IsEnabled>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	431c      	orrs	r4, r3
 8005ff2:	483c      	ldr	r0, [pc, #240]	@ (80060e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005ff4:	f7ff febb 	bl	8005d6e <LL_ADC_IsEnabled>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	4323      	orrs	r3, r4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	bf0c      	ite	eq
 8006000:	2301      	moveq	r3, #1
 8006002:	2300      	movne	r3, #0
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d056      	beq.n	80060b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800600a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006012:	f023 030f 	bic.w	r3, r3, #15
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	6811      	ldr	r1, [r2, #0]
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	6892      	ldr	r2, [r2, #8]
 800601e:	430a      	orrs	r2, r1
 8006020:	431a      	orrs	r2, r3
 8006022:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006024:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006026:	e047      	b.n	80060b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006028:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006030:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006032:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800603c:	d004      	beq.n	8006048 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a23      	ldr	r2, [pc, #140]	@ (80060d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d10f      	bne.n	8006068 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006048:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800604c:	f7ff fe8f 	bl	8005d6e <LL_ADC_IsEnabled>
 8006050:	4604      	mov	r4, r0
 8006052:	481f      	ldr	r0, [pc, #124]	@ (80060d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006054:	f7ff fe8b 	bl	8005d6e <LL_ADC_IsEnabled>
 8006058:	4603      	mov	r3, r0
 800605a:	4323      	orrs	r3, r4
 800605c:	2b00      	cmp	r3, #0
 800605e:	bf0c      	ite	eq
 8006060:	2301      	moveq	r3, #1
 8006062:	2300      	movne	r3, #0
 8006064:	b2db      	uxtb	r3, r3
 8006066:	e012      	b.n	800608e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006068:	481a      	ldr	r0, [pc, #104]	@ (80060d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800606a:	f7ff fe80 	bl	8005d6e <LL_ADC_IsEnabled>
 800606e:	4604      	mov	r4, r0
 8006070:	4819      	ldr	r0, [pc, #100]	@ (80060d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006072:	f7ff fe7c 	bl	8005d6e <LL_ADC_IsEnabled>
 8006076:	4603      	mov	r3, r0
 8006078:	431c      	orrs	r4, r3
 800607a:	481a      	ldr	r0, [pc, #104]	@ (80060e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800607c:	f7ff fe77 	bl	8005d6e <LL_ADC_IsEnabled>
 8006080:	4603      	mov	r3, r0
 8006082:	4323      	orrs	r3, r4
 8006084:	2b00      	cmp	r3, #0
 8006086:	bf0c      	ite	eq
 8006088:	2301      	moveq	r3, #1
 800608a:	2300      	movne	r3, #0
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d012      	beq.n	80060b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006092:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800609a:	f023 030f 	bic.w	r3, r3, #15
 800609e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80060a0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80060a2:	e009      	b.n	80060b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a8:	f043 0220 	orr.w	r2, r3, #32
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80060b6:	e000      	b.n	80060ba <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80060b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80060c2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3784      	adds	r7, #132	@ 0x84
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd90      	pop	{r4, r7, pc}
 80060ce:	bf00      	nop
 80060d0:	50000100 	.word	0x50000100
 80060d4:	50000400 	.word	0x50000400
 80060d8:	50000500 	.word	0x50000500
 80060dc:	50000300 	.word	0x50000300
 80060e0:	50000700 	.word	0x50000700
 80060e4:	50000600 	.word	0x50000600

080060e8 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e023      	b.n	8006142 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d106      	bne.n	8006114 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7fd fed8 	bl	8003ec4 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
	...

0800614c <HAL_CORDIC_Configure>:
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, const CORDIC_ConfigTypeDef *sConfig)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b01      	cmp	r3, #1
 8006164:	d11d      	bne.n	80061a2 <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	4b14      	ldr	r3, [pc, #80]	@ (80061c0 <HAL_CORDIC_Configure+0x74>)
 800616e:	4013      	ands	r3, r2
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	6811      	ldr	r1, [r2, #0]
 8006174:	683a      	ldr	r2, [r7, #0]
 8006176:	6992      	ldr	r2, [r2, #24]
 8006178:	4311      	orrs	r1, r2
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	6852      	ldr	r2, [r2, #4]
 800617e:	4311      	orrs	r1, r2
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	6912      	ldr	r2, [r2, #16]
 8006184:	4311      	orrs	r1, r2
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	6952      	ldr	r2, [r2, #20]
 800618a:	4311      	orrs	r1, r2
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	6892      	ldr	r2, [r2, #8]
 8006190:	4311      	orrs	r1, r2
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	68d2      	ldr	r2, [r2, #12]
 8006196:	4311      	orrs	r1, r2
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6812      	ldr	r2, [r2, #0]
 800619c:	430b      	orrs	r3, r1
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	e007      	b.n	80061b2 <HAL_CORDIC_Configure+0x66>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a6:	f043 0202 	orr.w	r2, r3, #2
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	ff87f800 	.word	0xff87f800

080061c4 <HAL_CORDIC_Calculate>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Calculate(CORDIC_HandleTypeDef *hcordic, const int32_t *pInBuff, int32_t *pOutBuff,
                                       uint32_t NbCalc, uint32_t Timeout)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t index;
  const int32_t *p_tmp_in_buff = pInBuff;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	617b      	str	r3, [r7, #20]
  int32_t *p_tmp_out_buff = pOutBuff;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	613b      	str	r3, [r7, #16]

  /* Check parameters setting */
  if ((pInBuff == NULL) || (pOutBuff == NULL) || (NbCalc == 0U))
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d005      	beq.n	80061ec <HAL_CORDIC_Calculate+0x28>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <HAL_CORDIC_Calculate+0x28>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d107      	bne.n	80061fc <HAL_CORDIC_Calculate+0x38>
  {
    /* Update the error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f0:	f043 0201 	orr.w	r2, r3, #1
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e058      	b.n	80062ae <HAL_CORDIC_Calculate+0xea>
  }

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b01      	cmp	r3, #1
 8006206:	d14b      	bne.n	80062a0 <HAL_CORDIC_Calculate+0xdc>
  {
    /* Reset CORDIC error code */
    hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_BUSY;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2202      	movs	r2, #2
 8006212:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Get tick */
    tickstart = HAL_GetTick();
 8006216:	f7fe facb 	bl	80047b0 <HAL_GetTick>
 800621a:	61b8      	str	r0, [r7, #24]

    /* Write of input data in Write Data register, and increment input buffer pointer */
    CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 800621c:	f107 0314 	add.w	r3, r7, #20
 8006220:	4619      	mov	r1, r3
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 f847 	bl	80062b6 <CORDIC_WriteInDataIncrementPtr>

    /* Calculation is started.
       Provide next set of input data, until number of calculation is achieved */
    for (index = (NbCalc - 1U); index > 0U; index--)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	3b01      	subs	r3, #1
 800622c:	61fb      	str	r3, [r7, #28]
 800622e:	e028      	b.n	8006282 <HAL_CORDIC_Calculate+0xbe>
    {
      /* Write of input data in Write Data register, and increment input buffer pointer */
      CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8006230:	f107 0314 	add.w	r3, r7, #20
 8006234:	4619      	mov	r1, r3
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 f83d 	bl	80062b6 <CORDIC_WriteInDataIncrementPtr>

      /* Wait for RRDY flag to be raised */
      do
      {
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY)
 800623c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006242:	d010      	beq.n	8006266 <HAL_CORDIC_Calculate+0xa2>
        {
          if ((HAL_GetTick() - tickstart) > Timeout)
 8006244:	f7fe fab4 	bl	80047b0 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006250:	429a      	cmp	r2, r3
 8006252:	d208      	bcs.n	8006266 <HAL_CORDIC_Calculate+0xa2>
          {
            /* Set CORDIC error code */
            hcordic->ErrorCode = HAL_CORDIC_ERROR_TIMEOUT;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2204      	movs	r2, #4
 8006258:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Change the CORDIC state */
            hcordic->State = HAL_CORDIC_STATE_READY;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Return function status */
            return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e023      	b.n	80062ae <HAL_CORDIC_Calculate+0xea>
          }
        }
      } while (HAL_IS_BIT_CLR(hcordic->Instance->CSR, CORDIC_CSR_RRDY));
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	dae5      	bge.n	800623c <HAL_CORDIC_Calculate+0x78>

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8006270:	f107 0310 	add.w	r3, r7, #16
 8006274:	4619      	mov	r1, r3
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 f846 	bl	8006308 <CORDIC_ReadOutDataIncrementPtr>
    for (index = (NbCalc - 1U); index > 0U; index--)
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	3b01      	subs	r3, #1
 8006280:	61fb      	str	r3, [r7, #28]
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1d3      	bne.n	8006230 <HAL_CORDIC_Calculate+0x6c>
    }

    /* Read output data from Read Data register, and increment output buffer pointer */
    CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8006288:	f107 0310 	add.w	r3, r7, #16
 800628c:	4619      	mov	r1, r3
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 f83a 	bl	8006308 <CORDIC_ReadOutDataIncrementPtr>

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_READY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Return function status */
    return HAL_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	e006      	b.n	80062ae <HAL_CORDIC_Calculate+0xea>
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a4:	f043 0202 	orr.w	r2, r3, #2
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
  }
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3720      	adds	r7, #32
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, const int32_t **ppInBuff)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	1d1a      	adds	r2, r3, #4
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062e4:	d10a      	bne.n	80062fc <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	1d1a      	adds	r2, r3, #4
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	601a      	str	r2, [r3, #0]
  }
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	1d1a      	adds	r2, r3, #4
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006332:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006336:	d10a      	bne.n	800634e <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	1d1a      	adds	r2, r3, #4
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	601a      	str	r2, [r3, #0]
  }
}
 800634e:	bf00      	nop
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
	...

0800635c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f003 0307 	and.w	r3, r3, #7
 800636a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800636c:	4b0c      	ldr	r3, [pc, #48]	@ (80063a0 <__NVIC_SetPriorityGrouping+0x44>)
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006378:	4013      	ands	r3, r2
 800637a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006384:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006388:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800638c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800638e:	4a04      	ldr	r2, [pc, #16]	@ (80063a0 <__NVIC_SetPriorityGrouping+0x44>)
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	60d3      	str	r3, [r2, #12]
}
 8006394:	bf00      	nop
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	e000ed00 	.word	0xe000ed00

080063a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063a4:	b480      	push	{r7}
 80063a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063a8:	4b04      	ldr	r3, [pc, #16]	@ (80063bc <__NVIC_GetPriorityGrouping+0x18>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	0a1b      	lsrs	r3, r3, #8
 80063ae:	f003 0307 	and.w	r3, r3, #7
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	e000ed00 	.word	0xe000ed00

080063c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	4603      	mov	r3, r0
 80063c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	db0b      	blt.n	80063ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063d2:	79fb      	ldrb	r3, [r7, #7]
 80063d4:	f003 021f 	and.w	r2, r3, #31
 80063d8:	4907      	ldr	r1, [pc, #28]	@ (80063f8 <__NVIC_EnableIRQ+0x38>)
 80063da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	2001      	movs	r0, #1
 80063e2:	fa00 f202 	lsl.w	r2, r0, r2
 80063e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	e000e100 	.word	0xe000e100

080063fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	4603      	mov	r3, r0
 8006404:	6039      	str	r1, [r7, #0]
 8006406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800640c:	2b00      	cmp	r3, #0
 800640e:	db0a      	blt.n	8006426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	b2da      	uxtb	r2, r3
 8006414:	490c      	ldr	r1, [pc, #48]	@ (8006448 <__NVIC_SetPriority+0x4c>)
 8006416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800641a:	0112      	lsls	r2, r2, #4
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	440b      	add	r3, r1
 8006420:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006424:	e00a      	b.n	800643c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	b2da      	uxtb	r2, r3
 800642a:	4908      	ldr	r1, [pc, #32]	@ (800644c <__NVIC_SetPriority+0x50>)
 800642c:	79fb      	ldrb	r3, [r7, #7]
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	3b04      	subs	r3, #4
 8006434:	0112      	lsls	r2, r2, #4
 8006436:	b2d2      	uxtb	r2, r2
 8006438:	440b      	add	r3, r1
 800643a:	761a      	strb	r2, [r3, #24]
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	e000e100 	.word	0xe000e100
 800644c:	e000ed00 	.word	0xe000ed00

08006450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006450:	b480      	push	{r7}
 8006452:	b089      	sub	sp, #36	@ 0x24
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f003 0307 	and.w	r3, r3, #7
 8006462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	f1c3 0307 	rsb	r3, r3, #7
 800646a:	2b04      	cmp	r3, #4
 800646c:	bf28      	it	cs
 800646e:	2304      	movcs	r3, #4
 8006470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	3304      	adds	r3, #4
 8006476:	2b06      	cmp	r3, #6
 8006478:	d902      	bls.n	8006480 <NVIC_EncodePriority+0x30>
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	3b03      	subs	r3, #3
 800647e:	e000      	b.n	8006482 <NVIC_EncodePriority+0x32>
 8006480:	2300      	movs	r3, #0
 8006482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006484:	f04f 32ff 	mov.w	r2, #4294967295
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	fa02 f303 	lsl.w	r3, r2, r3
 800648e:	43da      	mvns	r2, r3
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	401a      	ands	r2, r3
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006498:	f04f 31ff 	mov.w	r1, #4294967295
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	fa01 f303 	lsl.w	r3, r1, r3
 80064a2:	43d9      	mvns	r1, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064a8:	4313      	orrs	r3, r2
         );
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3724      	adds	r7, #36	@ 0x24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
	...

080064b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	3b01      	subs	r3, #1
 80064c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064c8:	d301      	bcc.n	80064ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80064ca:	2301      	movs	r3, #1
 80064cc:	e00f      	b.n	80064ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80064ce:	4a0a      	ldr	r2, [pc, #40]	@ (80064f8 <SysTick_Config+0x40>)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80064d6:	210f      	movs	r1, #15
 80064d8:	f04f 30ff 	mov.w	r0, #4294967295
 80064dc:	f7ff ff8e 	bl	80063fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80064e0:	4b05      	ldr	r3, [pc, #20]	@ (80064f8 <SysTick_Config+0x40>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064e6:	4b04      	ldr	r3, [pc, #16]	@ (80064f8 <SysTick_Config+0x40>)
 80064e8:	2207      	movs	r2, #7
 80064ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	e000e010 	.word	0xe000e010

080064fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7ff ff29 	bl	800635c <__NVIC_SetPriorityGrouping>
}
 800650a:	bf00      	nop
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b086      	sub	sp, #24
 8006516:	af00      	add	r7, sp, #0
 8006518:	4603      	mov	r3, r0
 800651a:	60b9      	str	r1, [r7, #8]
 800651c:	607a      	str	r2, [r7, #4]
 800651e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006520:	f7ff ff40 	bl	80063a4 <__NVIC_GetPriorityGrouping>
 8006524:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	68b9      	ldr	r1, [r7, #8]
 800652a:	6978      	ldr	r0, [r7, #20]
 800652c:	f7ff ff90 	bl	8006450 <NVIC_EncodePriority>
 8006530:	4602      	mov	r2, r0
 8006532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006536:	4611      	mov	r1, r2
 8006538:	4618      	mov	r0, r3
 800653a:	f7ff ff5f 	bl	80063fc <__NVIC_SetPriority>
}
 800653e:	bf00      	nop
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
 800654c:	4603      	mov	r3, r0
 800654e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006554:	4618      	mov	r0, r3
 8006556:	f7ff ff33 	bl	80063c0 <__NVIC_EnableIRQ>
}
 800655a:	bf00      	nop
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7ff ffa4 	bl	80064b8 <SysTick_Config>
 8006570:	4603      	mov	r3, r0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b082      	sub	sp, #8
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e014      	b.n	80065b6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	791b      	ldrb	r3, [r3, #4]
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d105      	bne.n	80065a2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7fd fcb1 	bl	8003f04 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2202      	movs	r2, #2
 80065a6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
	...

080065c0 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e056      	b.n	8006682 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	795b      	ldrb	r3, [r3, #5]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d101      	bne.n	80065e0 <HAL_DAC_Start+0x20>
 80065dc:	2302      	movs	r3, #2
 80065de:	e050      	b.n	8006682 <HAL_DAC_Start+0xc2>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2202      	movs	r2, #2
 80065ea:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6819      	ldr	r1, [r3, #0]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	f003 0310 	and.w	r3, r3, #16
 80065f8:	2201      	movs	r2, #1
 80065fa:	409a      	lsls	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006604:	4b22      	ldr	r3, [pc, #136]	@ (8006690 <HAL_DAC_Start+0xd0>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	099b      	lsrs	r3, r3, #6
 800660a:	4a22      	ldr	r2, [pc, #136]	@ (8006694 <HAL_DAC_Start+0xd4>)
 800660c:	fba2 2303 	umull	r2, r3, r2, r3
 8006610:	099b      	lsrs	r3, r3, #6
 8006612:	3301      	adds	r3, #1
 8006614:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8006616:	e002      	b.n	800661e <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3b01      	subs	r3, #1
 800661c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1f9      	bne.n	8006618 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10f      	bne.n	800664a <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8006634:	2b02      	cmp	r3, #2
 8006636:	d11d      	bne.n	8006674 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f042 0201 	orr.w	r2, r2, #1
 8006646:	605a      	str	r2, [r3, #4]
 8006648:	e014      	b.n	8006674 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	f003 0310 	and.w	r3, r3, #16
 800665a:	2102      	movs	r1, #2
 800665c:	fa01 f303 	lsl.w	r3, r1, r3
 8006660:	429a      	cmp	r2, r3
 8006662:	d107      	bne.n	8006674 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0202 	orr.w	r2, r2, #2
 8006672:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	20000058 	.word	0x20000058
 8006694:	053e2d63 	.word	0x053e2d63

08006698 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ae:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d01d      	beq.n	80066f6 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d018      	beq.n	80066f6 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2204      	movs	r2, #4
 80066c8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f043 0201 	orr.w	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80066de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066ee:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f854 	bl	800679e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01d      	beq.n	800673c <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d018      	beq.n	800673c <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2204      	movs	r2, #4
 800670e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	f043 0202 	orr.w	r2, r3, #2
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006724:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8006734:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f9f4 	bl	8006b24 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800673c:	bf00      	nop
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
 8006750:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8006752:	2300      	movs	r3, #0
 8006754:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e018      	b.n	8006792 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d105      	bne.n	800677e <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4413      	add	r3, r2
 8006778:	3308      	adds	r3, #8
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	e004      	b.n	8006788 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4413      	add	r3, r2
 8006784:	3314      	adds	r3, #20
 8006786:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	461a      	mov	r2, r3
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
	...

080067b4 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b08a      	sub	sp, #40	@ 0x28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067c0:	2300      	movs	r3, #0
 80067c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <HAL_DAC_ConfigChannel+0x1c>
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e19e      	b.n	8006b12 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	795b      	ldrb	r3, [r3, #5]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d101      	bne.n	80067e0 <HAL_DAC_ConfigChannel+0x2c>
 80067dc:	2302      	movs	r3, #2
 80067de:	e198      	b.n	8006b12 <HAL_DAC_ConfigChannel+0x35e>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2201      	movs	r2, #1
 80067e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2202      	movs	r2, #2
 80067ea:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	2b04      	cmp	r3, #4
 80067f2:	d17a      	bne.n	80068ea <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80067f4:	f7fd ffdc 	bl	80047b0 <HAL_GetTick>
 80067f8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d13d      	bne.n	800687c <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006800:	e018      	b.n	8006834 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006802:	f7fd ffd5 	bl	80047b0 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b01      	cmp	r3, #1
 800680e:	d911      	bls.n	8006834 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006816:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f043 0208 	orr.w	r2, r3, #8
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2203      	movs	r2, #3
 800682e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e16e      	b.n	8006b12 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800683a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1df      	bne.n	8006802 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800684a:	641a      	str	r2, [r3, #64]	@ 0x40
 800684c:	e020      	b.n	8006890 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800684e:	f7fd ffaf 	bl	80047b0 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	2b01      	cmp	r3, #1
 800685a:	d90f      	bls.n	800687c <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006862:	2b00      	cmp	r3, #0
 8006864:	da0a      	bge.n	800687c <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	f043 0208 	orr.w	r2, r3, #8
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2203      	movs	r2, #3
 8006876:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e14a      	b.n	8006b12 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006882:	2b00      	cmp	r3, #0
 8006884:	dbe3      	blt.n	800684e <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800688e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f003 0310 	and.w	r3, r3, #16
 800689c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80068a0:	fa01 f303 	lsl.w	r3, r1, r3
 80068a4:	43db      	mvns	r3, r3
 80068a6:	ea02 0103 	and.w	r1, r2, r3
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f003 0310 	and.w	r3, r3, #16
 80068b4:	409a      	lsls	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f003 0310 	and.w	r3, r3, #16
 80068ca:	21ff      	movs	r1, #255	@ 0xff
 80068cc:	fa01 f303 	lsl.w	r3, r1, r3
 80068d0:	43db      	mvns	r3, r3
 80068d2:	ea02 0103 	and.w	r1, r2, r3
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f003 0310 	and.w	r3, r3, #16
 80068e0:	409a      	lsls	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d11d      	bne.n	800692e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f003 0310 	and.w	r3, r3, #16
 8006900:	221f      	movs	r2, #31
 8006902:	fa02 f303 	lsl.w	r3, r2, r3
 8006906:	43db      	mvns	r3, r3
 8006908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800690a:	4013      	ands	r3, r2
 800690c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f003 0310 	and.w	r3, r3, #16
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	fa02 f303 	lsl.w	r3, r2, r3
 8006920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006922:	4313      	orrs	r3, r2
 8006924:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800692c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006934:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f003 0310 	and.w	r3, r3, #16
 800693c:	2207      	movs	r2, #7
 800693e:	fa02 f303 	lsl.w	r3, r2, r3
 8006942:	43db      	mvns	r3, r3
 8006944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006946:	4013      	ands	r3, r2
 8006948:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d102      	bne.n	8006958 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8006952:	2300      	movs	r3, #0
 8006954:	623b      	str	r3, [r7, #32]
 8006956:	e00f      	b.n	8006978 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	2b02      	cmp	r3, #2
 800695e:	d102      	bne.n	8006966 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006960:	2301      	movs	r3, #1
 8006962:	623b      	str	r3, [r7, #32]
 8006964:	e008      	b.n	8006978 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d102      	bne.n	8006974 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800696e:	2301      	movs	r3, #1
 8006970:	623b      	str	r3, [r7, #32]
 8006972:	e001      	b.n	8006978 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006974:	2300      	movs	r3, #0
 8006976:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	4313      	orrs	r3, r2
 8006982:	6a3a      	ldr	r2, [r7, #32]
 8006984:	4313      	orrs	r3, r2
 8006986:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f003 0310 	and.w	r3, r3, #16
 800698e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006992:	fa02 f303 	lsl.w	r3, r2, r3
 8006996:	43db      	mvns	r3, r3
 8006998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800699a:	4013      	ands	r3, r2
 800699c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	791b      	ldrb	r3, [r3, #4]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d102      	bne.n	80069ac <HAL_DAC_ConfigChannel+0x1f8>
 80069a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80069aa:	e000      	b.n	80069ae <HAL_DAC_ConfigChannel+0x1fa>
 80069ac:	2300      	movs	r3, #0
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f003 0310 	and.w	r3, r3, #16
 80069ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069be:	fa02 f303 	lsl.w	r3, r2, r3
 80069c2:	43db      	mvns	r3, r3
 80069c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069c6:	4013      	ands	r3, r2
 80069c8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	795b      	ldrb	r3, [r3, #5]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d102      	bne.n	80069d8 <HAL_DAC_ConfigChannel+0x224>
 80069d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069d6:	e000      	b.n	80069da <HAL_DAC_ConfigChannel+0x226>
 80069d8:	2300      	movs	r3, #0
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	4313      	orrs	r3, r2
 80069de:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80069e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80069e6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d114      	bne.n	8006a1a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80069f0:	f002 ff7a 	bl	80098e8 <HAL_RCC_GetHCLKFreq>
 80069f4:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	4a48      	ldr	r2, [pc, #288]	@ (8006b1c <HAL_DAC_ConfigChannel+0x368>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d904      	bls.n	8006a08 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80069fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a06:	e00f      	b.n	8006a28 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	4a45      	ldr	r2, [pc, #276]	@ (8006b20 <HAL_DAC_ConfigChannel+0x36c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d90a      	bls.n	8006a26 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a18:	e006      	b.n	8006a28 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a20:	4313      	orrs	r3, r2
 8006a22:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a24:	e000      	b.n	8006a28 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8006a26:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f003 0310 	and.w	r3, r3, #16
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	fa02 f303 	lsl.w	r3, r2, r3
 8006a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a36:	4313      	orrs	r3, r2
 8006a38:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6819      	ldr	r1, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f003 0310 	and.w	r3, r3, #16
 8006a4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006a52:	fa02 f303 	lsl.w	r3, r2, r3
 8006a56:	43da      	mvns	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	400a      	ands	r2, r1
 8006a5e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f003 0310 	and.w	r3, r3, #16
 8006a6e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8006a72:	fa02 f303 	lsl.w	r3, r2, r3
 8006a76:	43db      	mvns	r3, r3
 8006a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f003 0310 	and.w	r3, r3, #16
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a92:	4313      	orrs	r3, r2
 8006a94:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a9c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6819      	ldr	r1, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f003 0310 	and.w	r3, r3, #16
 8006aaa:	22c0      	movs	r2, #192	@ 0xc0
 8006aac:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab0:	43da      	mvns	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	400a      	ands	r2, r1
 8006ab8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	089b      	lsrs	r3, r3, #2
 8006ac0:	f003 030f 	and.w	r3, r3, #15
 8006ac4:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	089b      	lsrs	r3, r3, #2
 8006acc:	021b      	lsls	r3, r3, #8
 8006ace:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f003 0310 	and.w	r3, r3, #16
 8006ae4:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8006ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8006aec:	43db      	mvns	r3, r3
 8006aee:	ea02 0103 	and.w	r1, r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f003 0310 	and.w	r3, r3, #16
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	409a      	lsls	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2201      	movs	r2, #1
 8006b08:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006b10:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3728      	adds	r7, #40	@ 0x28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	09896800 	.word	0x09896800
 8006b20:	04c4b400 	.word	0x04c4b400

08006b24 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e08d      	b.n	8006c66 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	4b47      	ldr	r3, [pc, #284]	@ (8006c70 <HAL_DMA_Init+0x138>)
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d80f      	bhi.n	8006b76 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	4b45      	ldr	r3, [pc, #276]	@ (8006c74 <HAL_DMA_Init+0x13c>)
 8006b5e:	4413      	add	r3, r2
 8006b60:	4a45      	ldr	r2, [pc, #276]	@ (8006c78 <HAL_DMA_Init+0x140>)
 8006b62:	fba2 2303 	umull	r2, r3, r2, r3
 8006b66:	091b      	lsrs	r3, r3, #4
 8006b68:	009a      	lsls	r2, r3, #2
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a42      	ldr	r2, [pc, #264]	@ (8006c7c <HAL_DMA_Init+0x144>)
 8006b72:	641a      	str	r2, [r3, #64]	@ 0x40
 8006b74:	e00e      	b.n	8006b94 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	4b40      	ldr	r3, [pc, #256]	@ (8006c80 <HAL_DMA_Init+0x148>)
 8006b7e:	4413      	add	r3, r2
 8006b80:	4a3d      	ldr	r2, [pc, #244]	@ (8006c78 <HAL_DMA_Init+0x140>)
 8006b82:	fba2 2303 	umull	r2, r3, r2, r3
 8006b86:	091b      	lsrs	r3, r3, #4
 8006b88:	009a      	lsls	r2, r3, #2
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a3c      	ldr	r2, [pc, #240]	@ (8006c84 <HAL_DMA_Init+0x14c>)
 8006b92:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f9b6 	bl	8006f58 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bf4:	d102      	bne.n	8006bfc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c04:	b2d2      	uxtb	r2, r2
 8006c06:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006c10:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d010      	beq.n	8006c3c <HAL_DMA_Init+0x104>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2b04      	cmp	r3, #4
 8006c20:	d80c      	bhi.n	8006c3c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f9d6 	bl	8006fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006c38:	605a      	str	r2, [r3, #4]
 8006c3a:	e008      	b.n	8006c4e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	40020407 	.word	0x40020407
 8006c74:	bffdfff8 	.word	0xbffdfff8
 8006c78:	cccccccd 	.word	0xcccccccd
 8006c7c:	40020000 	.word	0x40020000
 8006c80:	bffdfbf8 	.word	0xbffdfbf8
 8006c84:	40020400 	.word	0x40020400

08006c88 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d101      	bne.n	8006ca8 <HAL_DMA_Start_IT+0x20>
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	e066      	b.n	8006d76 <HAL_DMA_Start_IT+0xee>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d155      	bne.n	8006d68 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0201 	bic.w	r2, r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f8fb 	bl	8006edc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d008      	beq.n	8006d00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f042 020e 	orr.w	r2, r2, #14
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	e00f      	b.n	8006d20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 0204 	bic.w	r2, r2, #4
 8006d0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 020a 	orr.w	r2, r2, #10
 8006d1e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d007      	beq.n	8006d3e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d3c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d007      	beq.n	8006d56 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d54:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f042 0201 	orr.w	r2, r2, #1
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	e005      	b.n	8006d74 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006d70:	2302      	movs	r3, #2
 8006d72:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d9a:	f003 031f 	and.w	r3, r3, #31
 8006d9e:	2204      	movs	r2, #4
 8006da0:	409a      	lsls	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4013      	ands	r3, r2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d026      	beq.n	8006df8 <HAL_DMA_IRQHandler+0x7a>
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d021      	beq.n	8006df8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d107      	bne.n	8006dd2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0204 	bic.w	r2, r2, #4
 8006dd0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dd6:	f003 021f 	and.w	r2, r3, #31
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dde:	2104      	movs	r1, #4
 8006de0:	fa01 f202 	lsl.w	r2, r1, r2
 8006de4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d071      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006df6:	e06c      	b.n	8006ed2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dfc:	f003 031f 	and.w	r3, r3, #31
 8006e00:	2202      	movs	r2, #2
 8006e02:	409a      	lsls	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4013      	ands	r3, r2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d02e      	beq.n	8006e6a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d029      	beq.n	8006e6a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0320 	and.w	r3, r3, #32
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10b      	bne.n	8006e3c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 020a 	bic.w	r2, r2, #10
 8006e32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e40:	f003 021f 	and.w	r2, r3, #31
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e48:	2102      	movs	r1, #2
 8006e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8006e4e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d038      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006e68:	e033      	b.n	8006ed2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e6e:	f003 031f 	and.w	r3, r3, #31
 8006e72:	2208      	movs	r2, #8
 8006e74:	409a      	lsls	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4013      	ands	r3, r2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d02a      	beq.n	8006ed4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f003 0308 	and.w	r3, r3, #8
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d025      	beq.n	8006ed4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f022 020e 	bic.w	r2, r2, #14
 8006e96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e9c:	f003 021f 	and.w	r2, r3, #31
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8006eaa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d004      	beq.n	8006ed4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006ed2:	bf00      	nop
 8006ed4:	bf00      	nop
}
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
 8006ee8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006ef2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d004      	beq.n	8006f06 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006f04:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f0a:	f003 021f 	and.w	r2, r3, #31
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f12:	2101      	movs	r1, #1
 8006f14:	fa01 f202 	lsl.w	r2, r1, r2
 8006f18:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	2b10      	cmp	r3, #16
 8006f28:	d108      	bne.n	8006f3c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006f3a:	e007      	b.n	8006f4c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	60da      	str	r2, [r3, #12]
}
 8006f4c:	bf00      	nop
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	461a      	mov	r2, r3
 8006f66:	4b16      	ldr	r3, [pc, #88]	@ (8006fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d802      	bhi.n	8006f72 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006f6c:	4b15      	ldr	r3, [pc, #84]	@ (8006fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006f6e:	617b      	str	r3, [r7, #20]
 8006f70:	e001      	b.n	8006f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006f72:	4b15      	ldr	r3, [pc, #84]	@ (8006fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006f74:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	3b08      	subs	r3, #8
 8006f82:	4a12      	ldr	r2, [pc, #72]	@ (8006fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006f84:	fba2 2303 	umull	r2, r3, r2, r3
 8006f88:	091b      	lsrs	r3, r3, #4
 8006f8a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f90:	089b      	lsrs	r3, r3, #2
 8006f92:	009a      	lsls	r2, r3, #2
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	4413      	add	r3, r2
 8006f98:	461a      	mov	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8006fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006fa2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f003 031f 	and.w	r3, r3, #31
 8006faa:	2201      	movs	r2, #1
 8006fac:	409a      	lsls	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006fb2:	bf00      	nop
 8006fb4:	371c      	adds	r7, #28
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	40020407 	.word	0x40020407
 8006fc4:	40020800 	.word	0x40020800
 8006fc8:	40020820 	.word	0x40020820
 8006fcc:	cccccccd 	.word	0xcccccccd
 8006fd0:	40020880 	.word	0x40020880

08006fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8007014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006fe8:	4413      	add	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	461a      	mov	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a08      	ldr	r2, [pc, #32]	@ (8007018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006ff6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	f003 031f 	and.w	r3, r3, #31
 8007000:	2201      	movs	r2, #1
 8007002:	409a      	lsls	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007008:	bf00      	nop
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	1000823f 	.word	0x1000823f
 8007018:	40020940 	.word	0x40020940

0800701c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007026:	2300      	movs	r3, #0
 8007028:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800702a:	e15a      	b.n	80072e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	2101      	movs	r1, #1
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	fa01 f303 	lsl.w	r3, r1, r3
 8007038:	4013      	ands	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 814c 	beq.w	80072dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f003 0303 	and.w	r3, r3, #3
 800704c:	2b01      	cmp	r3, #1
 800704e:	d005      	beq.n	800705c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007058:	2b02      	cmp	r3, #2
 800705a:	d130      	bne.n	80070be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	2203      	movs	r2, #3
 8007068:	fa02 f303 	lsl.w	r3, r2, r3
 800706c:	43db      	mvns	r3, r3
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	4013      	ands	r3, r2
 8007072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	68da      	ldr	r2, [r3, #12]
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	005b      	lsls	r3, r3, #1
 800707c:	fa02 f303 	lsl.w	r3, r2, r3
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	4313      	orrs	r3, r2
 8007084:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007092:	2201      	movs	r2, #1
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	fa02 f303 	lsl.w	r3, r2, r3
 800709a:	43db      	mvns	r3, r3
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	4013      	ands	r3, r2
 80070a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	091b      	lsrs	r3, r3, #4
 80070a8:	f003 0201 	and.w	r2, r3, #1
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	fa02 f303 	lsl.w	r3, r2, r3
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f003 0303 	and.w	r3, r3, #3
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d017      	beq.n	80070fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	2203      	movs	r2, #3
 80070d6:	fa02 f303 	lsl.w	r3, r2, r3
 80070da:	43db      	mvns	r3, r3
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	4013      	ands	r3, r2
 80070e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	689a      	ldr	r2, [r3, #8]
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	005b      	lsls	r3, r3, #1
 80070ea:	fa02 f303 	lsl.w	r3, r2, r3
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f003 0303 	and.w	r3, r3, #3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d123      	bne.n	800714e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	08da      	lsrs	r2, r3, #3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	3208      	adds	r2, #8
 800710e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007112:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f003 0307 	and.w	r3, r3, #7
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	220f      	movs	r2, #15
 800711e:	fa02 f303 	lsl.w	r3, r2, r3
 8007122:	43db      	mvns	r3, r3
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	4013      	ands	r3, r2
 8007128:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	691a      	ldr	r2, [r3, #16]
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f003 0307 	and.w	r3, r3, #7
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	fa02 f303 	lsl.w	r3, r2, r3
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	4313      	orrs	r3, r2
 800713e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	08da      	lsrs	r2, r3, #3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	3208      	adds	r2, #8
 8007148:	6939      	ldr	r1, [r7, #16]
 800714a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	005b      	lsls	r3, r3, #1
 8007158:	2203      	movs	r2, #3
 800715a:	fa02 f303 	lsl.w	r3, r2, r3
 800715e:	43db      	mvns	r3, r3
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	4013      	ands	r3, r2
 8007164:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f003 0203 	and.w	r2, r3, #3
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	fa02 f303 	lsl.w	r3, r2, r3
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	4313      	orrs	r3, r2
 800717a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 80a6 	beq.w	80072dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007190:	4b5b      	ldr	r3, [pc, #364]	@ (8007300 <HAL_GPIO_Init+0x2e4>)
 8007192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007194:	4a5a      	ldr	r2, [pc, #360]	@ (8007300 <HAL_GPIO_Init+0x2e4>)
 8007196:	f043 0301 	orr.w	r3, r3, #1
 800719a:	6613      	str	r3, [r2, #96]	@ 0x60
 800719c:	4b58      	ldr	r3, [pc, #352]	@ (8007300 <HAL_GPIO_Init+0x2e4>)
 800719e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	60bb      	str	r3, [r7, #8]
 80071a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071a8:	4a56      	ldr	r2, [pc, #344]	@ (8007304 <HAL_GPIO_Init+0x2e8>)
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	089b      	lsrs	r3, r3, #2
 80071ae:	3302      	adds	r3, #2
 80071b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f003 0303 	and.w	r3, r3, #3
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	220f      	movs	r2, #15
 80071c0:	fa02 f303 	lsl.w	r3, r2, r3
 80071c4:	43db      	mvns	r3, r3
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	4013      	ands	r3, r2
 80071ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80071d2:	d01f      	beq.n	8007214 <HAL_GPIO_Init+0x1f8>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a4c      	ldr	r2, [pc, #304]	@ (8007308 <HAL_GPIO_Init+0x2ec>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d019      	beq.n	8007210 <HAL_GPIO_Init+0x1f4>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a4b      	ldr	r2, [pc, #300]	@ (800730c <HAL_GPIO_Init+0x2f0>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d013      	beq.n	800720c <HAL_GPIO_Init+0x1f0>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a4a      	ldr	r2, [pc, #296]	@ (8007310 <HAL_GPIO_Init+0x2f4>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d00d      	beq.n	8007208 <HAL_GPIO_Init+0x1ec>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a49      	ldr	r2, [pc, #292]	@ (8007314 <HAL_GPIO_Init+0x2f8>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d007      	beq.n	8007204 <HAL_GPIO_Init+0x1e8>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a48      	ldr	r2, [pc, #288]	@ (8007318 <HAL_GPIO_Init+0x2fc>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d101      	bne.n	8007200 <HAL_GPIO_Init+0x1e4>
 80071fc:	2305      	movs	r3, #5
 80071fe:	e00a      	b.n	8007216 <HAL_GPIO_Init+0x1fa>
 8007200:	2306      	movs	r3, #6
 8007202:	e008      	b.n	8007216 <HAL_GPIO_Init+0x1fa>
 8007204:	2304      	movs	r3, #4
 8007206:	e006      	b.n	8007216 <HAL_GPIO_Init+0x1fa>
 8007208:	2303      	movs	r3, #3
 800720a:	e004      	b.n	8007216 <HAL_GPIO_Init+0x1fa>
 800720c:	2302      	movs	r3, #2
 800720e:	e002      	b.n	8007216 <HAL_GPIO_Init+0x1fa>
 8007210:	2301      	movs	r3, #1
 8007212:	e000      	b.n	8007216 <HAL_GPIO_Init+0x1fa>
 8007214:	2300      	movs	r3, #0
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	f002 0203 	and.w	r2, r2, #3
 800721c:	0092      	lsls	r2, r2, #2
 800721e:	4093      	lsls	r3, r2
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	4313      	orrs	r3, r2
 8007224:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007226:	4937      	ldr	r1, [pc, #220]	@ (8007304 <HAL_GPIO_Init+0x2e8>)
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	089b      	lsrs	r3, r3, #2
 800722c:	3302      	adds	r3, #2
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007234:	4b39      	ldr	r3, [pc, #228]	@ (800731c <HAL_GPIO_Init+0x300>)
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	43db      	mvns	r3, r3
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	4013      	ands	r3, r2
 8007242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d003      	beq.n	8007258 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	4313      	orrs	r3, r2
 8007256:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007258:	4a30      	ldr	r2, [pc, #192]	@ (800731c <HAL_GPIO_Init+0x300>)
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800725e:	4b2f      	ldr	r3, [pc, #188]	@ (800731c <HAL_GPIO_Init+0x300>)
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	43db      	mvns	r3, r3
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	4013      	ands	r3, r2
 800726c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4313      	orrs	r3, r2
 8007280:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007282:	4a26      	ldr	r2, [pc, #152]	@ (800731c <HAL_GPIO_Init+0x300>)
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007288:	4b24      	ldr	r3, [pc, #144]	@ (800731c <HAL_GPIO_Init+0x300>)
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	43db      	mvns	r3, r3
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	4013      	ands	r3, r2
 8007296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d003      	beq.n	80072ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80072ac:	4a1b      	ldr	r2, [pc, #108]	@ (800731c <HAL_GPIO_Init+0x300>)
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80072b2:	4b1a      	ldr	r3, [pc, #104]	@ (800731c <HAL_GPIO_Init+0x300>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	43db      	mvns	r3, r3
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	4013      	ands	r3, r2
 80072c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d003      	beq.n	80072d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80072d6:	4a11      	ldr	r2, [pc, #68]	@ (800731c <HAL_GPIO_Init+0x300>)
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	3301      	adds	r3, #1
 80072e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	fa22 f303 	lsr.w	r3, r2, r3
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f47f ae9d 	bne.w	800702c <HAL_GPIO_Init+0x10>
  }
}
 80072f2:	bf00      	nop
 80072f4:	bf00      	nop
 80072f6:	371c      	adds	r7, #28
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	40021000 	.word	0x40021000
 8007304:	40010000 	.word	0x40010000
 8007308:	48000400 	.word	0x48000400
 800730c:	48000800 	.word	0x48000800
 8007310:	48000c00 	.word	0x48000c00
 8007314:	48001000 	.word	0x48001000
 8007318:	48001400 	.word	0x48001400
 800731c:	40010400 	.word	0x40010400

08007320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	460b      	mov	r3, r1
 800732a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	691a      	ldr	r2, [r3, #16]
 8007330:	887b      	ldrh	r3, [r7, #2]
 8007332:	4013      	ands	r3, r2
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007338:	2301      	movs	r3, #1
 800733a:	73fb      	strb	r3, [r7, #15]
 800733c:	e001      	b.n	8007342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800733e:	2300      	movs	r3, #0
 8007340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007342:	7bfb      	ldrb	r3, [r7, #15]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	460b      	mov	r3, r1
 800735a:	807b      	strh	r3, [r7, #2]
 800735c:	4613      	mov	r3, r2
 800735e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007360:	787b      	ldrb	r3, [r7, #1]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007366:	887a      	ldrh	r2, [r7, #2]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800736c:	e002      	b.n	8007374 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800736e:	887a      	ldrh	r2, [r7, #2]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	460b      	mov	r3, r1
 800738a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007392:	887a      	ldrh	r2, [r7, #2]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4013      	ands	r3, r2
 8007398:	041a      	lsls	r2, r3, #16
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	43d9      	mvns	r1, r3
 800739e:	887b      	ldrh	r3, [r7, #2]
 80073a0:	400b      	ands	r3, r1
 80073a2:	431a      	orrs	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	619a      	str	r2, [r3, #24]
}
 80073a8:	bf00      	nop
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e0c0      	b.n	8007548 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d106      	bne.n	80073e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f009 fa22 	bl	8010824 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2203      	movs	r2, #3
 80073e4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4618      	mov	r0, r3
 80073ee:	f005 f856 	bl	800c49e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073f2:	2300      	movs	r3, #0
 80073f4:	73fb      	strb	r3, [r7, #15]
 80073f6:	e03e      	b.n	8007476 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80073f8:	7bfa      	ldrb	r2, [r7, #15]
 80073fa:	6879      	ldr	r1, [r7, #4]
 80073fc:	4613      	mov	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	00db      	lsls	r3, r3, #3
 8007404:	440b      	add	r3, r1
 8007406:	3311      	adds	r3, #17
 8007408:	2201      	movs	r2, #1
 800740a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800740c:	7bfa      	ldrb	r2, [r7, #15]
 800740e:	6879      	ldr	r1, [r7, #4]
 8007410:	4613      	mov	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4413      	add	r3, r2
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	440b      	add	r3, r1
 800741a:	3310      	adds	r3, #16
 800741c:	7bfa      	ldrb	r2, [r7, #15]
 800741e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007420:	7bfa      	ldrb	r2, [r7, #15]
 8007422:	6879      	ldr	r1, [r7, #4]
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	440b      	add	r3, r1
 800742e:	3313      	adds	r3, #19
 8007430:	2200      	movs	r2, #0
 8007432:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007434:	7bfa      	ldrb	r2, [r7, #15]
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	4613      	mov	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	440b      	add	r3, r1
 8007442:	3320      	adds	r3, #32
 8007444:	2200      	movs	r2, #0
 8007446:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007448:	7bfa      	ldrb	r2, [r7, #15]
 800744a:	6879      	ldr	r1, [r7, #4]
 800744c:	4613      	mov	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4413      	add	r3, r2
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	440b      	add	r3, r1
 8007456:	3324      	adds	r3, #36	@ 0x24
 8007458:	2200      	movs	r2, #0
 800745a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	6879      	ldr	r1, [r7, #4]
 8007460:	1c5a      	adds	r2, r3, #1
 8007462:	4613      	mov	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	00db      	lsls	r3, r3, #3
 800746a:	440b      	add	r3, r1
 800746c:	2200      	movs	r2, #0
 800746e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007470:	7bfb      	ldrb	r3, [r7, #15]
 8007472:	3301      	adds	r3, #1
 8007474:	73fb      	strb	r3, [r7, #15]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	791b      	ldrb	r3, [r3, #4]
 800747a:	7bfa      	ldrb	r2, [r7, #15]
 800747c:	429a      	cmp	r2, r3
 800747e:	d3bb      	bcc.n	80073f8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007480:	2300      	movs	r3, #0
 8007482:	73fb      	strb	r3, [r7, #15]
 8007484:	e044      	b.n	8007510 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007486:	7bfa      	ldrb	r2, [r7, #15]
 8007488:	6879      	ldr	r1, [r7, #4]
 800748a:	4613      	mov	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	440b      	add	r3, r1
 8007494:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8007498:	2200      	movs	r2, #0
 800749a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800749c:	7bfa      	ldrb	r2, [r7, #15]
 800749e:	6879      	ldr	r1, [r7, #4]
 80074a0:	4613      	mov	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	00db      	lsls	r3, r3, #3
 80074a8:	440b      	add	r3, r1
 80074aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074ae:	7bfa      	ldrb	r2, [r7, #15]
 80074b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80074b2:	7bfa      	ldrb	r2, [r7, #15]
 80074b4:	6879      	ldr	r1, [r7, #4]
 80074b6:	4613      	mov	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	00db      	lsls	r3, r3, #3
 80074be:	440b      	add	r3, r1
 80074c0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80074c4:	2200      	movs	r2, #0
 80074c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80074c8:	7bfa      	ldrb	r2, [r7, #15]
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	4613      	mov	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	00db      	lsls	r3, r3, #3
 80074d4:	440b      	add	r3, r1
 80074d6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80074da:	2200      	movs	r2, #0
 80074dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80074de:	7bfa      	ldrb	r2, [r7, #15]
 80074e0:	6879      	ldr	r1, [r7, #4]
 80074e2:	4613      	mov	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	00db      	lsls	r3, r3, #3
 80074ea:	440b      	add	r3, r1
 80074ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80074f0:	2200      	movs	r2, #0
 80074f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80074f4:	7bfa      	ldrb	r2, [r7, #15]
 80074f6:	6879      	ldr	r1, [r7, #4]
 80074f8:	4613      	mov	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	00db      	lsls	r3, r3, #3
 8007500:	440b      	add	r3, r1
 8007502:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8007506:	2200      	movs	r2, #0
 8007508:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800750a:	7bfb      	ldrb	r3, [r7, #15]
 800750c:	3301      	adds	r3, #1
 800750e:	73fb      	strb	r3, [r7, #15]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	791b      	ldrb	r3, [r3, #4]
 8007514:	7bfa      	ldrb	r2, [r7, #15]
 8007516:	429a      	cmp	r2, r3
 8007518:	d3b5      	bcc.n	8007486 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6818      	ldr	r0, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3304      	adds	r3, #4
 8007522:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007526:	f004 ffd5 	bl	800c4d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	7a9b      	ldrb	r3, [r3, #10]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d102      	bne.n	8007546 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f001 fc42 	bl	8008dca <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800755e:	2b01      	cmp	r3, #1
 8007560:	d101      	bne.n	8007566 <HAL_PCD_Start+0x16>
 8007562:	2302      	movs	r3, #2
 8007564:	e012      	b.n	800758c <HAL_PCD_Start+0x3c>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4618      	mov	r0, r3
 8007574:	f004 ff7c 	bl	800c470 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4618      	mov	r0, r3
 800757e:	f007 fa3d 	bl	800e9fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f007 fa42 	bl	800ea2a <USB_ReadInterrupts>
 80075a6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fb06 	bl	8007bc4 <PCD_EP_ISR_Handler>

    return;
 80075b8:	e110      	b.n	80077dc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d013      	beq.n	80075ec <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075d6:	b292      	uxth	r2, r2
 80075d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f009 f9b2 	bl	8010946 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80075e2:	2100      	movs	r1, #0
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f8fc 	bl	80077e2 <HAL_PCD_SetAddress>

    return;
 80075ea:	e0f7      	b.n	80077dc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00c      	beq.n	8007610 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80075fe:	b29a      	uxth	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007608:	b292      	uxth	r2, r2
 800760a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800760e:	e0e5      	b.n	80077dc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00c      	beq.n	8007634 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007622:	b29a      	uxth	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800762c:	b292      	uxth	r2, r2
 800762e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007632:	e0d3      	b.n	80077dc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d034      	beq.n	80076a8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007646:	b29a      	uxth	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f022 0204 	bic.w	r2, r2, #4
 8007650:	b292      	uxth	r2, r2
 8007652:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800765e:	b29a      	uxth	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0208 	bic.w	r2, r2, #8
 8007668:	b292      	uxth	r2, r2
 800766a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8007674:	2b01      	cmp	r3, #1
 8007676:	d107      	bne.n	8007688 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007680:	2100      	movs	r1, #0
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f009 fb52 	bl	8010d2c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f009 f995 	bl	80109b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007696:	b29a      	uxth	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80076a0:	b292      	uxth	r2, r2
 80076a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80076a6:	e099      	b.n	80077dc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d027      	beq.n	8007702 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f042 0208 	orr.w	r2, r2, #8
 80076c4:	b292      	uxth	r2, r2
 80076c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076dc:	b292      	uxth	r2, r2
 80076de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f042 0204 	orr.w	r2, r2, #4
 80076f4:	b292      	uxth	r2, r2
 80076f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f009 f942 	bl	8010984 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007700:	e06c      	b.n	80077dc <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007708:	2b00      	cmp	r3, #0
 800770a:	d040      	beq.n	800778e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007714:	b29a      	uxth	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800771e:	b292      	uxth	r2, r2
 8007720:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800772a:	2b00      	cmp	r3, #0
 800772c:	d12b      	bne.n	8007786 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007736:	b29a      	uxth	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f042 0204 	orr.w	r2, r2, #4
 8007740:	b292      	uxth	r2, r2
 8007742:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800774e:	b29a      	uxth	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f042 0208 	orr.w	r2, r2, #8
 8007758:	b292      	uxth	r2, r2
 800775a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800776e:	b29b      	uxth	r3, r3
 8007770:	089b      	lsrs	r3, r3, #2
 8007772:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800777c:	2101      	movs	r1, #1
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f009 fad4 	bl	8010d2c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8007784:	e02a      	b.n	80077dc <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f009 f8fc 	bl	8010984 <HAL_PCD_SuspendCallback>
    return;
 800778c:	e026      	b.n	80077dc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00f      	beq.n	80077b8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80077aa:	b292      	uxth	r2, r2
 80077ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f009 f8ba 	bl	801092a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80077b6:	e011      	b.n	80077dc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00c      	beq.n	80077dc <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80077d4:	b292      	uxth	r2, r2
 80077d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80077da:	bf00      	nop
  }
}
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b082      	sub	sp, #8
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	460b      	mov	r3, r1
 80077ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d101      	bne.n	80077fc <HAL_PCD_SetAddress+0x1a>
 80077f8:	2302      	movs	r3, #2
 80077fa:	e012      	b.n	8007822 <HAL_PCD_SetAddress+0x40>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	78fa      	ldrb	r2, [r7, #3]
 8007808:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	78fa      	ldrb	r2, [r7, #3]
 8007810:	4611      	mov	r1, r2
 8007812:	4618      	mov	r0, r3
 8007814:	f007 f8de 	bl	800e9d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b084      	sub	sp, #16
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	4608      	mov	r0, r1
 8007834:	4611      	mov	r1, r2
 8007836:	461a      	mov	r2, r3
 8007838:	4603      	mov	r3, r0
 800783a:	70fb      	strb	r3, [r7, #3]
 800783c:	460b      	mov	r3, r1
 800783e:	803b      	strh	r3, [r7, #0]
 8007840:	4613      	mov	r3, r2
 8007842:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007844:	2300      	movs	r3, #0
 8007846:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800784c:	2b00      	cmp	r3, #0
 800784e:	da0e      	bge.n	800786e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	f003 0207 	and.w	r2, r3, #7
 8007856:	4613      	mov	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	00db      	lsls	r3, r3, #3
 800785e:	3310      	adds	r3, #16
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	4413      	add	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2201      	movs	r2, #1
 800786a:	705a      	strb	r2, [r3, #1]
 800786c:	e00e      	b.n	800788c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800786e:	78fb      	ldrb	r3, [r7, #3]
 8007870:	f003 0207 	and.w	r2, r3, #7
 8007874:	4613      	mov	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	4413      	add	r3, r2
 8007884:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800788c:	78fb      	ldrb	r3, [r7, #3]
 800788e:	f003 0307 	and.w	r3, r3, #7
 8007892:	b2da      	uxtb	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007898:	883b      	ldrh	r3, [r7, #0]
 800789a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	78ba      	ldrb	r2, [r7, #2]
 80078a6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80078a8:	78bb      	ldrb	r3, [r7, #2]
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d102      	bne.n	80078b4 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d101      	bne.n	80078c2 <HAL_PCD_EP_Open+0x98>
 80078be:	2302      	movs	r3, #2
 80078c0:	e00e      	b.n	80078e0 <HAL_PCD_EP_Open+0xb6>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68f9      	ldr	r1, [r7, #12]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f004 fe1d 	bl	800c510 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80078de:	7afb      	ldrb	r3, [r7, #11]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	460b      	mov	r3, r1
 80078f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80078f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	da0e      	bge.n	800791a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078fc:	78fb      	ldrb	r3, [r7, #3]
 80078fe:	f003 0207 	and.w	r2, r3, #7
 8007902:	4613      	mov	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	00db      	lsls	r3, r3, #3
 800790a:	3310      	adds	r3, #16
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	4413      	add	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2201      	movs	r2, #1
 8007916:	705a      	strb	r2, [r3, #1]
 8007918:	e00e      	b.n	8007938 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800791a:	78fb      	ldrb	r3, [r7, #3]
 800791c:	f003 0207 	and.w	r2, r3, #7
 8007920:	4613      	mov	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	4413      	add	r3, r2
 8007930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007938:	78fb      	ldrb	r3, [r7, #3]
 800793a:	f003 0307 	and.w	r3, r3, #7
 800793e:	b2da      	uxtb	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800794a:	2b01      	cmp	r3, #1
 800794c:	d101      	bne.n	8007952 <HAL_PCD_EP_Close+0x6a>
 800794e:	2302      	movs	r3, #2
 8007950:	e00e      	b.n	8007970 <HAL_PCD_EP_Close+0x88>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68f9      	ldr	r1, [r7, #12]
 8007960:	4618      	mov	r0, r3
 8007962:	f005 f999 	bl	800cc98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	607a      	str	r2, [r7, #4]
 8007982:	603b      	str	r3, [r7, #0]
 8007984:	460b      	mov	r3, r1
 8007986:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007988:	7afb      	ldrb	r3, [r7, #11]
 800798a:	f003 0207 	and.w	r2, r3, #7
 800798e:	4613      	mov	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	00db      	lsls	r3, r3, #3
 8007996:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	4413      	add	r3, r2
 800799e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	2200      	movs	r2, #0
 80079b0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	2200      	movs	r2, #0
 80079b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079b8:	7afb      	ldrb	r3, [r7, #11]
 80079ba:	f003 0307 	and.w	r3, r3, #7
 80079be:	b2da      	uxtb	r2, r3
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6979      	ldr	r1, [r7, #20]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f005 fb51 	bl	800d072 <USB_EPStartXfer>

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	460b      	mov	r3, r1
 80079e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80079e6:	78fb      	ldrb	r3, [r7, #3]
 80079e8:	f003 0207 	and.w	r2, r3, #7
 80079ec:	6879      	ldr	r1, [r7, #4]
 80079ee:	4613      	mov	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	00db      	lsls	r3, r3, #3
 80079f6:	440b      	add	r3, r1
 80079f8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80079fc:	681b      	ldr	r3, [r3, #0]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b086      	sub	sp, #24
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	60f8      	str	r0, [r7, #12]
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	603b      	str	r3, [r7, #0]
 8007a16:	460b      	mov	r3, r1
 8007a18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a1a:	7afb      	ldrb	r3, [r7, #11]
 8007a1c:	f003 0207 	and.w	r2, r3, #7
 8007a20:	4613      	mov	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	00db      	lsls	r3, r3, #3
 8007a28:	3310      	adds	r3, #16
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	2201      	movs	r2, #1
 8007a54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a56:	7afb      	ldrb	r3, [r7, #11]
 8007a58:	f003 0307 	and.w	r3, r3, #7
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6979      	ldr	r1, [r7, #20]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f005 fb02 	bl	800d072 <USB_EPStartXfer>

  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	460b      	mov	r3, r1
 8007a82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007a84:	78fb      	ldrb	r3, [r7, #3]
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	7912      	ldrb	r2, [r2, #4]
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d901      	bls.n	8007a96 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e03e      	b.n	8007b14 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	da0e      	bge.n	8007abc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a9e:	78fb      	ldrb	r3, [r7, #3]
 8007aa0:	f003 0207 	and.w	r2, r3, #7
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	4413      	add	r3, r2
 8007aaa:	00db      	lsls	r3, r3, #3
 8007aac:	3310      	adds	r3, #16
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	705a      	strb	r2, [r3, #1]
 8007aba:	e00c      	b.n	8007ad6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007abc:	78fa      	ldrb	r2, [r7, #3]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	00db      	lsls	r3, r3, #3
 8007ac6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	4413      	add	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007adc:	78fb      	ldrb	r3, [r7, #3]
 8007ade:	f003 0307 	and.w	r3, r3, #7
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d101      	bne.n	8007af6 <HAL_PCD_EP_SetStall+0x7e>
 8007af2:	2302      	movs	r3, #2
 8007af4:	e00e      	b.n	8007b14 <HAL_PCD_EP_SetStall+0x9c>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68f9      	ldr	r1, [r7, #12]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f006 fe66 	bl	800e7d6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	460b      	mov	r3, r1
 8007b26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007b28:	78fb      	ldrb	r3, [r7, #3]
 8007b2a:	f003 030f 	and.w	r3, r3, #15
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	7912      	ldrb	r2, [r2, #4]
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d901      	bls.n	8007b3a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e040      	b.n	8007bbc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007b3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	da0e      	bge.n	8007b60 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b42:	78fb      	ldrb	r3, [r7, #3]
 8007b44:	f003 0207 	and.w	r2, r3, #7
 8007b48:	4613      	mov	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	00db      	lsls	r3, r3, #3
 8007b50:	3310      	adds	r3, #16
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	4413      	add	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	705a      	strb	r2, [r3, #1]
 8007b5e:	e00e      	b.n	8007b7e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b60:	78fb      	ldrb	r3, [r7, #3]
 8007b62:	f003 0207 	and.w	r2, r3, #7
 8007b66:	4613      	mov	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	00db      	lsls	r3, r3, #3
 8007b6e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	4413      	add	r3, r2
 8007b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b84:	78fb      	ldrb	r3, [r7, #3]
 8007b86:	f003 0307 	and.w	r3, r3, #7
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d101      	bne.n	8007b9e <HAL_PCD_EP_ClrStall+0x82>
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	e00e      	b.n	8007bbc <HAL_PCD_EP_ClrStall+0xa0>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68f9      	ldr	r1, [r7, #12]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f006 fe63 	bl	800e878 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b096      	sub	sp, #88	@ 0x58
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007bcc:	e3ad      	b.n	800832a <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007bd6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007bda:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	f003 030f 	and.w	r3, r3, #15
 8007be4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8007be8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f040 816f 	bne.w	8007ed0 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007bf2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007bf6:	f003 0310 	and.w	r3, r3, #16
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d14c      	bne.n	8007c98 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c0e:	81fb      	strh	r3, [r7, #14]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	89fb      	ldrh	r3, [r7, #14]
 8007c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	3310      	adds	r3, #16
 8007c26:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	461a      	mov	r2, r3
 8007c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	00db      	lsls	r3, r3, #3
 8007c3a:	4413      	add	r3, r2
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	6812      	ldr	r2, [r2, #0]
 8007c40:	4413      	add	r3, r2
 8007c42:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c46:	881b      	ldrh	r3, [r3, #0]
 8007c48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c4e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c52:	695a      	ldr	r2, [r3, #20]
 8007c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	441a      	add	r2, r3
 8007c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c5c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007c5e:	2100      	movs	r1, #0
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f008 fe48 	bl	80108f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	7b1b      	ldrb	r3, [r3, #12]
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 835c 	beq.w	800832a <PCD_EP_ISR_Handler+0x766>
 8007c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f040 8357 	bne.w	800832a <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	7b1b      	ldrb	r3, [r3, #12]
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	731a      	strb	r2, [r3, #12]
 8007c96:	e348      	b.n	800832a <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c9e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	881b      	ldrh	r3, [r3, #0]
 8007ca6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007caa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007cae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d032      	beq.n	8007d1c <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	00db      	lsls	r3, r3, #3
 8007cc8:	4413      	add	r3, r2
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6812      	ldr	r2, [r2, #0]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cdc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6818      	ldr	r0, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8007ce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cea:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cee:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	f006 feec 	bl	800eace <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007d02:	4013      	ands	r3, r2
 8007d04:	823b      	strh	r3, [r7, #16]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	8a3a      	ldrh	r2, [r7, #16]
 8007d0c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007d10:	b292      	uxth	r2, r2
 8007d12:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f008 fdc1 	bl	801089c <HAL_PCD_SetupStageCallback>
 8007d1a:	e306      	b.n	800832a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007d1c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f280 8302 	bge.w	800832a <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007d32:	4013      	ands	r3, r2
 8007d34:	83fb      	strh	r3, [r7, #30]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	8bfa      	ldrh	r2, [r7, #30]
 8007d3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007d40:	b292      	uxth	r2, r2
 8007d42:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	461a      	mov	r2, r3
 8007d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	00db      	lsls	r3, r3, #3
 8007d56:	4413      	add	r3, r2
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	6812      	ldr	r2, [r2, #0]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d6a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d6e:	69db      	ldr	r3, [r3, #28]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d019      	beq.n	8007da8 <PCD_EP_ISR_Handler+0x1e4>
 8007d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d015      	beq.n	8007da8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6818      	ldr	r0, [r3, #0]
 8007d80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d82:	6959      	ldr	r1, [r3, #20]
 8007d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d86:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007d88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d8a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	f006 fe9e 	bl	800eace <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d94:	695a      	ldr	r2, [r3, #20]
 8007d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d98:	69db      	ldr	r3, [r3, #28]
 8007d9a:	441a      	add	r2, r3
 8007d9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d9e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007da0:	2100      	movs	r1, #0
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f008 fd8c 	bl	80108c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007db2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007db6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f040 82b5 	bne.w	800832a <PCD_EP_ISR_Handler+0x766>
 8007dc0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007dc4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007dc8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007dcc:	f000 82ad 	beq.w	800832a <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	61bb      	str	r3, [r7, #24]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	461a      	mov	r2, r3
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	4413      	add	r3, r2
 8007de6:	61bb      	str	r3, [r7, #24]
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007dee:	617b      	str	r3, [r7, #20]
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	801a      	strh	r2, [r3, #0]
 8007e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10a      	bne.n	8007e1e <PCD_EP_ISR_Handler+0x25a>
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	881b      	ldrh	r3, [r3, #0]
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	801a      	strh	r2, [r3, #0]
 8007e1c:	e039      	b.n	8007e92 <PCD_EP_ISR_Handler+0x2ce>
 8007e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e24:	d818      	bhi.n	8007e58 <PCD_EP_ISR_Handler+0x294>
 8007e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	085b      	lsrs	r3, r3, #1
 8007e2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d002      	beq.n	8007e40 <PCD_EP_ISR_Handler+0x27c>
 8007e3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	029b      	lsls	r3, r3, #10
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	801a      	strh	r2, [r3, #0]
 8007e56:	e01c      	b.n	8007e92 <PCD_EP_ISR_Handler+0x2ce>
 8007e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	095b      	lsrs	r3, r3, #5
 8007e5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	f003 031f 	and.w	r3, r3, #31
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d102      	bne.n	8007e72 <PCD_EP_ISR_Handler+0x2ae>
 8007e6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	881b      	ldrh	r3, [r3, #0]
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	029b      	lsls	r3, r3, #10
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	4313      	orrs	r3, r2
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	881b      	ldrh	r3, [r3, #0]
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ea2:	827b      	strh	r3, [r7, #18]
 8007ea4:	8a7b      	ldrh	r3, [r7, #18]
 8007ea6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007eaa:	827b      	strh	r3, [r7, #18]
 8007eac:	8a7b      	ldrh	r3, [r7, #18]
 8007eae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007eb2:	827b      	strh	r3, [r7, #18]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	8a7b      	ldrh	r3, [r7, #18]
 8007eba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ebe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ec2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	8013      	strh	r3, [r2, #0]
 8007ece:	e22c      	b.n	800832a <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007ee4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f280 80f6 	bge.w	80080da <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007f04:	4013      	ands	r3, r2
 8007f06:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8007f1c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007f20:	b292      	uxth	r2, r2
 8007f22:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007f24:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007f28:	4613      	mov	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	00db      	lsls	r3, r3, #3
 8007f30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	4413      	add	r3, r2
 8007f38:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f3c:	7b1b      	ldrb	r3, [r3, #12]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d123      	bne.n	8007f8a <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	00db      	lsls	r3, r3, #3
 8007f54:	4413      	add	r3, r2
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	6812      	ldr	r2, [r2, #0]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f66:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8007f6a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f000 808e 	beq.w	8008090 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6818      	ldr	r0, [r3, #0]
 8007f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f7a:	6959      	ldr	r1, [r3, #20]
 8007f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f7e:	88da      	ldrh	r2, [r3, #6]
 8007f80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007f84:	f006 fda3 	bl	800eace <USB_ReadPMA>
 8007f88:	e082      	b.n	8008090 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f8c:	78db      	ldrb	r3, [r3, #3]
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d10a      	bne.n	8007fa8 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007f92:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007f96:	461a      	mov	r2, r3
 8007f98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f9d3 	bl	8008346 <HAL_PCD_EP_DB_Receive>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8007fa6:	e073      	b.n	8008090 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	461a      	mov	r2, r3
 8007fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	881b      	ldrh	r3, [r3, #0]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fc2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	441a      	add	r2, r3
 8007fd4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8007fd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fe0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fe4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	881b      	ldrh	r3, [r3, #0]
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d022      	beq.n	800804c <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800800e:	b29b      	uxth	r3, r3
 8008010:	461a      	mov	r2, r3
 8008012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	4413      	add	r3, r2
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	6812      	ldr	r2, [r2, #0]
 800801e:	4413      	add	r3, r2
 8008020:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008024:	881b      	ldrh	r3, [r3, #0]
 8008026:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800802a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800802e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008032:	2b00      	cmp	r3, #0
 8008034:	d02c      	beq.n	8008090 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6818      	ldr	r0, [r3, #0]
 800803a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800803c:	6959      	ldr	r1, [r3, #20]
 800803e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008040:	891a      	ldrh	r2, [r3, #8]
 8008042:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008046:	f006 fd42 	bl	800eace <USB_ReadPMA>
 800804a:	e021      	b.n	8008090 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008054:	b29b      	uxth	r3, r3
 8008056:	461a      	mov	r2, r3
 8008058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	00db      	lsls	r3, r3, #3
 800805e:	4413      	add	r3, r2
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	6812      	ldr	r2, [r2, #0]
 8008064:	4413      	add	r3, r2
 8008066:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008070:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8008074:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008078:	2b00      	cmp	r3, #0
 800807a:	d009      	beq.n	8008090 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6818      	ldr	r0, [r3, #0]
 8008080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008082:	6959      	ldr	r1, [r3, #20]
 8008084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008086:	895a      	ldrh	r2, [r3, #10]
 8008088:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800808c:	f006 fd1f 	bl	800eace <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8008090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008092:	69da      	ldr	r2, [r3, #28]
 8008094:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008098:	441a      	add	r2, r3
 800809a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800809c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800809e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080a0:	695a      	ldr	r2, [r3, #20]
 80080a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80080a6:	441a      	add	r2, r3
 80080a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080aa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80080ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d005      	beq.n	80080c0 <PCD_EP_ISR_Handler+0x4fc>
 80080b4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80080b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d206      	bcs.n	80080ce <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80080c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f008 fbfa 	bl	80108c0 <HAL_PCD_DataOutStageCallback>
 80080cc:	e005      	b.n	80080da <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80080d4:	4618      	mov	r0, r3
 80080d6:	f004 ffcc 	bl	800d072 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80080da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80080de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 8121 	beq.w	800832a <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80080e8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80080ec:	4613      	mov	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	00db      	lsls	r3, r3, #3
 80080f4:	3310      	adds	r3, #16
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	4413      	add	r3, r2
 80080fa:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	461a      	mov	r2, r3
 8008102:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	881b      	ldrh	r3, [r3, #0]
 800810c:	b29b      	uxth	r3, r3
 800810e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8008112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008116:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	461a      	mov	r2, r3
 8008120:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	441a      	add	r2, r3
 8008128:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800812c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008134:	b29b      	uxth	r3, r3
 8008136:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8008138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800813a:	78db      	ldrb	r3, [r3, #3]
 800813c:	2b01      	cmp	r3, #1
 800813e:	f040 80a2 	bne.w	8008286 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8008142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008144:	2200      	movs	r2, #0
 8008146:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8008148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800814a:	7b1b      	ldrb	r3, [r3, #12]
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 8093 	beq.w	8008278 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008152:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800815a:	2b00      	cmp	r3, #0
 800815c:	d046      	beq.n	80081ec <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800815e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008160:	785b      	ldrb	r3, [r3, #1]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d126      	bne.n	80081b4 <PCD_EP_ISR_Handler+0x5f0>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	627b      	str	r3, [r7, #36]	@ 0x24
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008174:	b29b      	uxth	r3, r3
 8008176:	461a      	mov	r2, r3
 8008178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817a:	4413      	add	r3, r2
 800817c:	627b      	str	r3, [r7, #36]	@ 0x24
 800817e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	00da      	lsls	r2, r3, #3
 8008184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008186:	4413      	add	r3, r2
 8008188:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800818c:	623b      	str	r3, [r7, #32]
 800818e:	6a3b      	ldr	r3, [r7, #32]
 8008190:	881b      	ldrh	r3, [r3, #0]
 8008192:	b29b      	uxth	r3, r3
 8008194:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008198:	b29a      	uxth	r2, r3
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	801a      	strh	r2, [r3, #0]
 800819e:	6a3b      	ldr	r3, [r7, #32]
 80081a0:	881b      	ldrh	r3, [r3, #0]
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	801a      	strh	r2, [r3, #0]
 80081b2:	e061      	b.n	8008278 <PCD_EP_ISR_Handler+0x6b4>
 80081b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081b6:	785b      	ldrb	r3, [r3, #1]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d15d      	bne.n	8008278 <PCD_EP_ISR_Handler+0x6b4>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	461a      	mov	r2, r3
 80081ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d0:	4413      	add	r3, r2
 80081d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	00da      	lsls	r2, r3, #3
 80081da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081dc:	4413      	add	r3, r2
 80081de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80081e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e6:	2200      	movs	r2, #0
 80081e8:	801a      	strh	r2, [r3, #0]
 80081ea:	e045      	b.n	8008278 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081f4:	785b      	ldrb	r3, [r3, #1]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d126      	bne.n	8008248 <PCD_EP_ISR_Handler+0x684>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008208:	b29b      	uxth	r3, r3
 800820a:	461a      	mov	r2, r3
 800820c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800820e:	4413      	add	r3, r2
 8008210:	637b      	str	r3, [r7, #52]	@ 0x34
 8008212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	00da      	lsls	r2, r3, #3
 8008218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800821a:	4413      	add	r3, r2
 800821c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008220:	633b      	str	r3, [r7, #48]	@ 0x30
 8008222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	b29b      	uxth	r3, r3
 8008228:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800822c:	b29a      	uxth	r2, r3
 800822e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008230:	801a      	strh	r2, [r3, #0]
 8008232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008234:	881b      	ldrh	r3, [r3, #0]
 8008236:	b29b      	uxth	r3, r3
 8008238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800823c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008240:	b29a      	uxth	r2, r3
 8008242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008244:	801a      	strh	r2, [r3, #0]
 8008246:	e017      	b.n	8008278 <PCD_EP_ISR_Handler+0x6b4>
 8008248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800824a:	785b      	ldrb	r3, [r3, #1]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d113      	bne.n	8008278 <PCD_EP_ISR_Handler+0x6b4>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008258:	b29b      	uxth	r3, r3
 800825a:	461a      	mov	r2, r3
 800825c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800825e:	4413      	add	r3, r2
 8008260:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	00da      	lsls	r2, r3, #3
 8008268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800826a:	4413      	add	r3, r2
 800826c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008270:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008274:	2200      	movs	r2, #0
 8008276:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	4619      	mov	r1, r3
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f008 fb39 	bl	80108f6 <HAL_PCD_DataInStageCallback>
 8008284:	e051      	b.n	800832a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008286:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800828a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800828e:	2b00      	cmp	r3, #0
 8008290:	d144      	bne.n	800831c <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800829a:	b29b      	uxth	r3, r3
 800829c:	461a      	mov	r2, r3
 800829e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	00db      	lsls	r3, r3, #3
 80082a4:	4413      	add	r3, r2
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	6812      	ldr	r2, [r2, #0]
 80082aa:	4413      	add	r3, r2
 80082ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80082b0:	881b      	ldrh	r3, [r3, #0]
 80082b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082b6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80082ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082bc:	699a      	ldr	r2, [r3, #24]
 80082be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d907      	bls.n	80082d6 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80082c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082c8:	699a      	ldr	r2, [r3, #24]
 80082ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80082ce:	1ad2      	subs	r2, r2, r3
 80082d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082d2:	619a      	str	r2, [r3, #24]
 80082d4:	e002      	b.n	80082dc <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80082d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082d8:	2200      	movs	r2, #0
 80082da:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80082dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d106      	bne.n	80082f2 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80082e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f008 fb03 	bl	80108f6 <HAL_PCD_DataInStageCallback>
 80082f0:	e01b      	b.n	800832a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80082f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082f4:	695a      	ldr	r2, [r3, #20]
 80082f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80082fa:	441a      	add	r2, r3
 80082fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082fe:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8008300:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008302:	69da      	ldr	r2, [r3, #28]
 8008304:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008308:	441a      	add	r2, r3
 800830a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800830c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008314:	4618      	mov	r0, r3
 8008316:	f004 feac 	bl	800d072 <USB_EPStartXfer>
 800831a:	e006      	b.n	800832a <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800831c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008320:	461a      	mov	r2, r3
 8008322:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f917 	bl	8008558 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008332:	b29b      	uxth	r3, r3
 8008334:	b21b      	sxth	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	f6ff ac49 	blt.w	8007bce <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3758      	adds	r7, #88	@ 0x58
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b088      	sub	sp, #32
 800834a:	af00      	add	r7, sp, #0
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	4613      	mov	r3, r2
 8008352:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008354:	88fb      	ldrh	r3, [r7, #6]
 8008356:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d07c      	beq.n	8008458 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008366:	b29b      	uxth	r3, r3
 8008368:	461a      	mov	r2, r3
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	00db      	lsls	r3, r3, #3
 8008370:	4413      	add	r3, r2
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	6812      	ldr	r2, [r2, #0]
 8008376:	4413      	add	r3, r2
 8008378:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008382:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	699a      	ldr	r2, [r3, #24]
 8008388:	8b7b      	ldrh	r3, [r7, #26]
 800838a:	429a      	cmp	r2, r3
 800838c:	d306      	bcc.n	800839c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	699a      	ldr	r2, [r3, #24]
 8008392:	8b7b      	ldrh	r3, [r7, #26]
 8008394:	1ad2      	subs	r2, r2, r3
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	619a      	str	r2, [r3, #24]
 800839a:	e002      	b.n	80083a2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2200      	movs	r2, #0
 80083a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d123      	bne.n	80083f2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	461a      	mov	r2, r3
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	881b      	ldrh	r3, [r3, #0]
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083c4:	833b      	strh	r3, [r7, #24]
 80083c6:	8b3b      	ldrh	r3, [r7, #24]
 80083c8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80083cc:	833b      	strh	r3, [r7, #24]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	461a      	mov	r2, r3
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	441a      	add	r2, r3
 80083dc:	8b3b      	ldrh	r3, [r7, #24]
 80083de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80083f2:	88fb      	ldrh	r3, [r7, #6]
 80083f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d01f      	beq.n	800843c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	461a      	mov	r2, r3
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	881b      	ldrh	r3, [r3, #0]
 800840c:	b29b      	uxth	r3, r3
 800840e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008416:	82fb      	strh	r3, [r7, #22]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	461a      	mov	r2, r3
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	441a      	add	r2, r3
 8008426:	8afb      	ldrh	r3, [r7, #22]
 8008428:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800842c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008430:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008434:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008438:	b29b      	uxth	r3, r3
 800843a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800843c:	8b7b      	ldrh	r3, [r7, #26]
 800843e:	2b00      	cmp	r3, #0
 8008440:	f000 8085 	beq.w	800854e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6818      	ldr	r0, [r3, #0]
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	6959      	ldr	r1, [r3, #20]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	891a      	ldrh	r2, [r3, #8]
 8008450:	8b7b      	ldrh	r3, [r7, #26]
 8008452:	f006 fb3c 	bl	800eace <USB_ReadPMA>
 8008456:	e07a      	b.n	800854e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008460:	b29b      	uxth	r3, r3
 8008462:	461a      	mov	r2, r3
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	00db      	lsls	r3, r3, #3
 800846a:	4413      	add	r3, r2
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	6812      	ldr	r2, [r2, #0]
 8008470:	4413      	add	r3, r2
 8008472:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800847c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	699a      	ldr	r2, [r3, #24]
 8008482:	8b7b      	ldrh	r3, [r7, #26]
 8008484:	429a      	cmp	r2, r3
 8008486:	d306      	bcc.n	8008496 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	699a      	ldr	r2, [r3, #24]
 800848c:	8b7b      	ldrh	r3, [r7, #26]
 800848e:	1ad2      	subs	r2, r2, r3
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	619a      	str	r2, [r3, #24]
 8008494:	e002      	b.n	800849c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2200      	movs	r2, #0
 800849a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d123      	bne.n	80084ec <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	461a      	mov	r2, r3
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	881b      	ldrh	r3, [r3, #0]
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084be:	83fb      	strh	r3, [r7, #30]
 80084c0:	8bfb      	ldrh	r3, [r7, #30]
 80084c2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80084c6:	83fb      	strh	r3, [r7, #30]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	461a      	mov	r2, r3
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	441a      	add	r2, r3
 80084d6:	8bfb      	ldrh	r3, [r7, #30]
 80084d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80084ec:	88fb      	ldrh	r3, [r7, #6]
 80084ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d11f      	bne.n	8008536 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	881b      	ldrh	r3, [r3, #0]
 8008506:	b29b      	uxth	r3, r3
 8008508:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800850c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008510:	83bb      	strh	r3, [r7, #28]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	461a      	mov	r2, r3
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	441a      	add	r2, r3
 8008520:	8bbb      	ldrh	r3, [r7, #28]
 8008522:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008526:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800852a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800852e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008532:	b29b      	uxth	r3, r3
 8008534:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008536:	8b7b      	ldrh	r3, [r7, #26]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d008      	beq.n	800854e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6818      	ldr	r0, [r3, #0]
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	6959      	ldr	r1, [r3, #20]
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	895a      	ldrh	r2, [r3, #10]
 8008548:	8b7b      	ldrh	r3, [r7, #26]
 800854a:	f006 fac0 	bl	800eace <USB_ReadPMA>
    }
  }

  return count;
 800854e:	8b7b      	ldrh	r3, [r7, #26]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3720      	adds	r7, #32
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b0a4      	sub	sp, #144	@ 0x90
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	4613      	mov	r3, r2
 8008564:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008566:	88fb      	ldrh	r3, [r7, #6]
 8008568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 81db 	beq.w	8008928 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800857a:	b29b      	uxth	r3, r3
 800857c:	461a      	mov	r2, r3
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	00db      	lsls	r3, r3, #3
 8008584:	4413      	add	r3, r2
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	6812      	ldr	r2, [r2, #0]
 800858a:	4413      	add	r3, r2
 800858c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008590:	881b      	ldrh	r3, [r3, #0]
 8008592:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008596:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	699a      	ldr	r2, [r3, #24]
 800859e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d907      	bls.n	80085b6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	699a      	ldr	r2, [r3, #24]
 80085aa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80085ae:	1ad2      	subs	r2, r2, r3
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	619a      	str	r2, [r3, #24]
 80085b4:	e002      	b.n	80085bc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	2200      	movs	r2, #0
 80085ba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f040 80b9 	bne.w	8008738 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	785b      	ldrb	r3, [r3, #1]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d126      	bne.n	800861c <HAL_PCD_EP_DB_Transmit+0xc4>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085dc:	b29b      	uxth	r3, r3
 80085de:	461a      	mov	r2, r3
 80085e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e2:	4413      	add	r3, r2
 80085e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	00da      	lsls	r2, r3, #3
 80085ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ee:	4413      	add	r3, r2
 80085f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008600:	b29a      	uxth	r2, r3
 8008602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008604:	801a      	strh	r2, [r3, #0]
 8008606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008608:	881b      	ldrh	r3, [r3, #0]
 800860a:	b29b      	uxth	r3, r3
 800860c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008614:	b29a      	uxth	r2, r3
 8008616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008618:	801a      	strh	r2, [r3, #0]
 800861a:	e01a      	b.n	8008652 <HAL_PCD_EP_DB_Transmit+0xfa>
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	785b      	ldrb	r3, [r3, #1]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d116      	bne.n	8008652 <HAL_PCD_EP_DB_Transmit+0xfa>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	637b      	str	r3, [r7, #52]	@ 0x34
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008632:	b29b      	uxth	r3, r3
 8008634:	461a      	mov	r2, r3
 8008636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008638:	4413      	add	r3, r2
 800863a:	637b      	str	r3, [r7, #52]	@ 0x34
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	00da      	lsls	r2, r3, #3
 8008642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008644:	4413      	add	r3, r2
 8008646:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800864a:	633b      	str	r3, [r7, #48]	@ 0x30
 800864c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864e:	2200      	movs	r2, #0
 8008650:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	627b      	str	r3, [r7, #36]	@ 0x24
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	785b      	ldrb	r3, [r3, #1]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d126      	bne.n	80086ae <HAL_PCD_EP_DB_Transmit+0x156>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	61fb      	str	r3, [r7, #28]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800866e:	b29b      	uxth	r3, r3
 8008670:	461a      	mov	r2, r3
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	4413      	add	r3, r2
 8008676:	61fb      	str	r3, [r7, #28]
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	00da      	lsls	r2, r3, #3
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	4413      	add	r3, r2
 8008682:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008686:	61bb      	str	r3, [r7, #24]
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	b29b      	uxth	r3, r3
 800868e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008692:	b29a      	uxth	r2, r3
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	801a      	strh	r2, [r3, #0]
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	881b      	ldrh	r3, [r3, #0]
 800869c:	b29b      	uxth	r3, r3
 800869e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	801a      	strh	r2, [r3, #0]
 80086ac:	e017      	b.n	80086de <HAL_PCD_EP_DB_Transmit+0x186>
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	785b      	ldrb	r3, [r3, #1]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d113      	bne.n	80086de <HAL_PCD_EP_DB_Transmit+0x186>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086be:	b29b      	uxth	r3, r3
 80086c0:	461a      	mov	r2, r3
 80086c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c4:	4413      	add	r3, r2
 80086c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	00da      	lsls	r2, r3, #3
 80086ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d0:	4413      	add	r3, r2
 80086d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80086d6:	623b      	str	r3, [r7, #32]
 80086d8:	6a3b      	ldr	r3, [r7, #32]
 80086da:	2200      	movs	r2, #0
 80086dc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	4619      	mov	r1, r3
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f008 f906 	bl	80108f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80086ea:	88fb      	ldrh	r3, [r7, #6]
 80086ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f000 82fa 	beq.w	8008cea <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	881b      	ldrh	r3, [r3, #0]
 8008706:	b29b      	uxth	r3, r3
 8008708:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800870c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008710:	82fb      	strh	r3, [r7, #22]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	441a      	add	r2, r3
 8008720:	8afb      	ldrh	r3, [r7, #22]
 8008722:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008726:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800872a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800872e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008732:	b29b      	uxth	r3, r3
 8008734:	8013      	strh	r3, [r2, #0]
 8008736:	e2d8      	b.n	8008cea <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008738:	88fb      	ldrh	r3, [r7, #6]
 800873a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d021      	beq.n	8008786 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	461a      	mov	r2, r3
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4413      	add	r3, r2
 8008750:	881b      	ldrh	r3, [r3, #0]
 8008752:	b29b      	uxth	r3, r3
 8008754:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800875c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	461a      	mov	r2, r3
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	441a      	add	r2, r3
 800876e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800877a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800877e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008782:	b29b      	uxth	r3, r3
 8008784:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800878c:	2b01      	cmp	r3, #1
 800878e:	f040 82ac 	bne.w	8008cea <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	695a      	ldr	r2, [r3, #20]
 8008796:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800879a:	441a      	add	r2, r3
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	69da      	ldr	r2, [r3, #28]
 80087a4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80087a8:	441a      	add	r2, r3
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	6a1a      	ldr	r2, [r3, #32]
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d30b      	bcc.n	80087d2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	6a1a      	ldr	r2, [r3, #32]
 80087c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087ca:	1ad2      	subs	r2, r2, r3
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	621a      	str	r2, [r3, #32]
 80087d0:	e017      	b.n	8008802 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d108      	bne.n	80087ec <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80087da:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80087de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80087ea:	e00a      	b.n	8008802 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	6a1b      	ldr	r3, [r3, #32]
 80087f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2200      	movs	r2, #0
 8008800:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	785b      	ldrb	r3, [r3, #1]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d165      	bne.n	80088d6 <HAL_PCD_EP_DB_Transmit+0x37e>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008818:	b29b      	uxth	r3, r3
 800881a:	461a      	mov	r2, r3
 800881c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800881e:	4413      	add	r3, r2
 8008820:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	00da      	lsls	r2, r3, #3
 8008828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800882a:	4413      	add	r3, r2
 800882c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008830:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008834:	881b      	ldrh	r3, [r3, #0]
 8008836:	b29b      	uxth	r3, r3
 8008838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800883c:	b29a      	uxth	r2, r3
 800883e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008840:	801a      	strh	r2, [r3, #0]
 8008842:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10a      	bne.n	8008860 <HAL_PCD_EP_DB_Transmit+0x308>
 800884a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	b29b      	uxth	r3, r3
 8008850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008858:	b29a      	uxth	r2, r3
 800885a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800885c:	801a      	strh	r2, [r3, #0]
 800885e:	e057      	b.n	8008910 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008860:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008864:	2b3e      	cmp	r3, #62	@ 0x3e
 8008866:	d818      	bhi.n	800889a <HAL_PCD_EP_DB_Transmit+0x342>
 8008868:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800886c:	085b      	lsrs	r3, r3, #1
 800886e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008870:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b00      	cmp	r3, #0
 800887a:	d002      	beq.n	8008882 <HAL_PCD_EP_DB_Transmit+0x32a>
 800887c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800887e:	3301      	adds	r3, #1
 8008880:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	b29a      	uxth	r2, r3
 8008888:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800888a:	b29b      	uxth	r3, r3
 800888c:	029b      	lsls	r3, r3, #10
 800888e:	b29b      	uxth	r3, r3
 8008890:	4313      	orrs	r3, r2
 8008892:	b29a      	uxth	r2, r3
 8008894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008896:	801a      	strh	r2, [r3, #0]
 8008898:	e03a      	b.n	8008910 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800889a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800889e:	095b      	lsrs	r3, r3, #5
 80088a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088a6:	f003 031f 	and.w	r3, r3, #31
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d102      	bne.n	80088b4 <HAL_PCD_EP_DB_Transmit+0x35c>
 80088ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088b0:	3b01      	subs	r3, #1
 80088b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b6:	881b      	ldrh	r3, [r3, #0]
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088bc:	b29b      	uxth	r3, r3
 80088be:	029b      	lsls	r3, r3, #10
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	4313      	orrs	r3, r2
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d2:	801a      	strh	r2, [r3, #0]
 80088d4:	e01c      	b.n	8008910 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	785b      	ldrb	r3, [r3, #1]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d118      	bne.n	8008910 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	461a      	mov	r2, r3
 80088f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088f2:	4413      	add	r3, r2
 80088f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	00da      	lsls	r2, r3, #3
 80088fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088fe:	4413      	add	r3, r2
 8008900:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008904:	643b      	str	r3, [r7, #64]	@ 0x40
 8008906:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800890a:	b29a      	uxth	r2, r3
 800890c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800890e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6818      	ldr	r0, [r3, #0]
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	6959      	ldr	r1, [r3, #20]
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	891a      	ldrh	r2, [r3, #8]
 800891c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008920:	b29b      	uxth	r3, r3
 8008922:	f006 f892 	bl	800ea4a <USB_WritePMA>
 8008926:	e1e0      	b.n	8008cea <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008930:	b29b      	uxth	r3, r3
 8008932:	461a      	mov	r2, r3
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	00db      	lsls	r3, r3, #3
 800893a:	4413      	add	r3, r2
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	6812      	ldr	r2, [r2, #0]
 8008940:	4413      	add	r3, r2
 8008942:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008946:	881b      	ldrh	r3, [r3, #0]
 8008948:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800894c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	699a      	ldr	r2, [r3, #24]
 8008954:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008958:	429a      	cmp	r2, r3
 800895a:	d307      	bcc.n	800896c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	699a      	ldr	r2, [r3, #24]
 8008960:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008964:	1ad2      	subs	r2, r2, r3
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	619a      	str	r2, [r3, #24]
 800896a:	e002      	b.n	8008972 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2200      	movs	r2, #0
 8008970:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	2b00      	cmp	r3, #0
 8008978:	f040 80c0 	bne.w	8008afc <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	785b      	ldrb	r3, [r3, #1]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d126      	bne.n	80089d2 <HAL_PCD_EP_DB_Transmit+0x47a>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008992:	b29b      	uxth	r3, r3
 8008994:	461a      	mov	r2, r3
 8008996:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008998:	4413      	add	r3, r2
 800899a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	00da      	lsls	r2, r3, #3
 80089a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80089a4:	4413      	add	r3, r2
 80089a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80089aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80089ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089ae:	881b      	ldrh	r3, [r3, #0]
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089ba:	801a      	strh	r2, [r3, #0]
 80089bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089be:	881b      	ldrh	r3, [r3, #0]
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089ce:	801a      	strh	r2, [r3, #0]
 80089d0:	e01a      	b.n	8008a08 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	785b      	ldrb	r3, [r3, #1]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d116      	bne.n	8008a08 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	667b      	str	r3, [r7, #100]	@ 0x64
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	461a      	mov	r2, r3
 80089ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089ee:	4413      	add	r3, r2
 80089f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	00da      	lsls	r2, r3, #3
 80089f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089fa:	4413      	add	r3, r2
 80089fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a00:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a04:	2200      	movs	r2, #0
 8008a06:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	785b      	ldrb	r3, [r3, #1]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d12b      	bne.n	8008a6e <HAL_PCD_EP_DB_Transmit+0x516>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	461a      	mov	r2, r3
 8008a28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a2a:	4413      	add	r3, r2
 8008a2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	00da      	lsls	r2, r3, #3
 8008a34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a36:	4413      	add	r3, r2
 8008a38:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008a3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008a40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a44:	881b      	ldrh	r3, [r3, #0]
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a52:	801a      	strh	r2, [r3, #0]
 8008a54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a58:	881b      	ldrh	r3, [r3, #0]
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a64:	b29a      	uxth	r2, r3
 8008a66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a6a:	801a      	strh	r2, [r3, #0]
 8008a6c:	e017      	b.n	8008a9e <HAL_PCD_EP_DB_Transmit+0x546>
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	785b      	ldrb	r3, [r3, #1]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d113      	bne.n	8008a9e <HAL_PCD_EP_DB_Transmit+0x546>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	461a      	mov	r2, r3
 8008a82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a84:	4413      	add	r3, r2
 8008a86:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	00da      	lsls	r2, r3, #3
 8008a8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a90:	4413      	add	r3, r2
 8008a92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008a96:	673b      	str	r3, [r7, #112]	@ 0x70
 8008a98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f007 ff26 	bl	80108f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008aaa:	88fb      	ldrh	r3, [r7, #6]
 8008aac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f040 811a 	bne.w	8008cea <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	461a      	mov	r2, r3
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4413      	add	r3, r2
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ad0:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	461a      	mov	r2, r3
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	441a      	add	r2, r3
 8008ae2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8008ae6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008aea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008aee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	8013      	strh	r3, [r2, #0]
 8008afa:	e0f6      	b.n	8008cea <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008afc:	88fb      	ldrh	r3, [r7, #6]
 8008afe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d121      	bne.n	8008b4a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	881b      	ldrh	r3, [r3, #0]
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b20:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	441a      	add	r2, r3
 8008b32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008b36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	f040 80ca 	bne.w	8008cea <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	695a      	ldr	r2, [r3, #20]
 8008b5a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008b5e:	441a      	add	r2, r3
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	69da      	ldr	r2, [r3, #28]
 8008b68:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008b6c:	441a      	add	r2, r3
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	6a1a      	ldr	r2, [r3, #32]
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d30b      	bcc.n	8008b96 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	6a1a      	ldr	r2, [r3, #32]
 8008b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b8e:	1ad2      	subs	r2, r2, r3
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	621a      	str	r2, [r3, #32]
 8008b94:	e017      	b.n	8008bc6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d108      	bne.n	8008bb0 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8008b9e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008ba2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8008bae:	e00a      	b.n	8008bc6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	6a1b      	ldr	r3, [r3, #32]
 8008bb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	785b      	ldrb	r3, [r3, #1]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d165      	bne.n	8008ca0 <HAL_PCD_EP_DB_Transmit+0x748>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	461a      	mov	r2, r3
 8008be6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008be8:	4413      	add	r3, r2
 8008bea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	00da      	lsls	r2, r3, #3
 8008bf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008bfa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008bfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008bfe:	881b      	ldrh	r3, [r3, #0]
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c0a:	801a      	strh	r2, [r3, #0]
 8008c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10a      	bne.n	8008c2a <HAL_PCD_EP_DB_Transmit+0x6d2>
 8008c14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c16:	881b      	ldrh	r3, [r3, #0]
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c26:	801a      	strh	r2, [r3, #0]
 8008c28:	e054      	b.n	8008cd4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c30:	d818      	bhi.n	8008c64 <HAL_PCD_EP_DB_Transmit+0x70c>
 8008c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c36:	085b      	lsrs	r3, r3, #1
 8008c38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c3e:	f003 0301 	and.w	r3, r3, #1
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d002      	beq.n	8008c4c <HAL_PCD_EP_DB_Transmit+0x6f4>
 8008c46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c48:	3301      	adds	r3, #1
 8008c4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c4e:	881b      	ldrh	r3, [r3, #0]
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	029b      	lsls	r3, r3, #10
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c60:	801a      	strh	r2, [r3, #0]
 8008c62:	e037      	b.n	8008cd4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c68:	095b      	lsrs	r3, r3, #5
 8008c6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c70:	f003 031f 	and.w	r3, r3, #31
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d102      	bne.n	8008c7e <HAL_PCD_EP_DB_Transmit+0x726>
 8008c78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c80:	881b      	ldrh	r3, [r3, #0]
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	029b      	lsls	r3, r3, #10
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c9c:	801a      	strh	r2, [r3, #0]
 8008c9e:	e019      	b.n	8008cd4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	785b      	ldrb	r3, [r3, #1]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d115      	bne.n	8008cd4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cb6:	4413      	add	r3, r2
 8008cb8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	00da      	lsls	r2, r3, #3
 8008cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008cc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cd2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6818      	ldr	r0, [r3, #0]
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	6959      	ldr	r1, [r3, #20]
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	895a      	ldrh	r2, [r3, #10]
 8008ce0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	f005 feb0 	bl	800ea4a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4413      	add	r3, r2
 8008cf8:	881b      	ldrh	r3, [r3, #0]
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d04:	82bb      	strh	r3, [r7, #20]
 8008d06:	8abb      	ldrh	r3, [r7, #20]
 8008d08:	f083 0310 	eor.w	r3, r3, #16
 8008d0c:	82bb      	strh	r3, [r7, #20]
 8008d0e:	8abb      	ldrh	r3, [r7, #20]
 8008d10:	f083 0320 	eor.w	r3, r3, #32
 8008d14:	82bb      	strh	r3, [r7, #20]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	441a      	add	r2, r3
 8008d24:	8abb      	ldrh	r3, [r7, #20]
 8008d26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3790      	adds	r7, #144	@ 0x90
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	607b      	str	r3, [r7, #4]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	817b      	strh	r3, [r7, #10]
 8008d52:	4613      	mov	r3, r2
 8008d54:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008d56:	897b      	ldrh	r3, [r7, #10]
 8008d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00b      	beq.n	8008d7a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d62:	897b      	ldrh	r3, [r7, #10]
 8008d64:	f003 0207 	and.w	r2, r3, #7
 8008d68:	4613      	mov	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4413      	add	r3, r2
 8008d6e:	00db      	lsls	r3, r3, #3
 8008d70:	3310      	adds	r3, #16
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	4413      	add	r3, r2
 8008d76:	617b      	str	r3, [r7, #20]
 8008d78:	e009      	b.n	8008d8e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008d7a:	897a      	ldrh	r2, [r7, #10]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4413      	add	r3, r2
 8008d82:	00db      	lsls	r3, r3, #3
 8008d84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008d8e:	893b      	ldrh	r3, [r7, #8]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d107      	bne.n	8008da4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	2200      	movs	r2, #0
 8008d98:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	80da      	strh	r2, [r3, #6]
 8008da2:	e00b      	b.n	8008dbc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	2201      	movs	r2, #1
 8008da8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	0c1b      	lsrs	r3, r3, #16
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	371c      	adds	r7, #28
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b085      	sub	sp, #20
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	f043 0301 	orr.w	r3, r3, #1
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	f043 0302 	orr.w	r3, r3, #2
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
	...

08008e20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d141      	bne.n	8008eb2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008e2e:	4b4b      	ldr	r3, [pc, #300]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e3a:	d131      	bne.n	8008ea0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008e3c:	4b47      	ldr	r3, [pc, #284]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e42:	4a46      	ldr	r2, [pc, #280]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008e4c:	4b43      	ldr	r3, [pc, #268]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008e54:	4a41      	ldr	r2, [pc, #260]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008e5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008e5c:	4b40      	ldr	r3, [pc, #256]	@ (8008f60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2232      	movs	r2, #50	@ 0x32
 8008e62:	fb02 f303 	mul.w	r3, r2, r3
 8008e66:	4a3f      	ldr	r2, [pc, #252]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008e68:	fba2 2303 	umull	r2, r3, r2, r3
 8008e6c:	0c9b      	lsrs	r3, r3, #18
 8008e6e:	3301      	adds	r3, #1
 8008e70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e72:	e002      	b.n	8008e7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	3b01      	subs	r3, #1
 8008e78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e7a:	4b38      	ldr	r3, [pc, #224]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e86:	d102      	bne.n	8008e8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1f2      	bne.n	8008e74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008e8e:	4b33      	ldr	r3, [pc, #204]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e90:	695b      	ldr	r3, [r3, #20]
 8008e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e9a:	d158      	bne.n	8008f4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	e057      	b.n	8008f50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ea6:	4a2d      	ldr	r2, [pc, #180]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008eac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008eb0:	e04d      	b.n	8008f4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008eb8:	d141      	bne.n	8008f3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008eba:	4b28      	ldr	r3, [pc, #160]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ec6:	d131      	bne.n	8008f2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ec8:	4b24      	ldr	r3, [pc, #144]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ece:	4a23      	ldr	r2, [pc, #140]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ed4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008ed8:	4b20      	ldr	r3, [pc, #128]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008ee0:	4a1e      	ldr	r2, [pc, #120]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ee2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008ee6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8008f60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2232      	movs	r2, #50	@ 0x32
 8008eee:	fb02 f303 	mul.w	r3, r2, r3
 8008ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8008f64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef8:	0c9b      	lsrs	r3, r3, #18
 8008efa:	3301      	adds	r3, #1
 8008efc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008efe:	e002      	b.n	8008f06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	3b01      	subs	r3, #1
 8008f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f06:	4b15      	ldr	r3, [pc, #84]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f12:	d102      	bne.n	8008f1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1f2      	bne.n	8008f00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008f1a:	4b10      	ldr	r3, [pc, #64]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f26:	d112      	bne.n	8008f4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	e011      	b.n	8008f50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f32:	4a0a      	ldr	r2, [pc, #40]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008f3c:	e007      	b.n	8008f4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008f3e:	4b07      	ldr	r3, [pc, #28]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008f46:	4a05      	ldr	r2, [pc, #20]	@ (8008f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008f4c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3714      	adds	r7, #20
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr
 8008f5c:	40007000 	.word	0x40007000
 8008f60:	20000058 	.word	0x20000058
 8008f64:	431bde83 	.word	0x431bde83

08008f68 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008f6c:	4b05      	ldr	r3, [pc, #20]	@ (8008f84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	4a04      	ldr	r2, [pc, #16]	@ (8008f84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008f72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008f76:	6093      	str	r3, [r2, #8]
}
 8008f78:	bf00      	nop
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	40007000 	.word	0x40007000

08008f88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b088      	sub	sp, #32
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d101      	bne.n	8008f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e2fe      	b.n	8009598 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f003 0301 	and.w	r3, r3, #1
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d075      	beq.n	8009092 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fa6:	4b97      	ldr	r3, [pc, #604]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	f003 030c 	and.w	r3, r3, #12
 8008fae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008fb0:	4b94      	ldr	r3, [pc, #592]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	f003 0303 	and.w	r3, r3, #3
 8008fb8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	2b0c      	cmp	r3, #12
 8008fbe:	d102      	bne.n	8008fc6 <HAL_RCC_OscConfig+0x3e>
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	2b03      	cmp	r3, #3
 8008fc4:	d002      	beq.n	8008fcc <HAL_RCC_OscConfig+0x44>
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	2b08      	cmp	r3, #8
 8008fca:	d10b      	bne.n	8008fe4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fcc:	4b8d      	ldr	r3, [pc, #564]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d05b      	beq.n	8009090 <HAL_RCC_OscConfig+0x108>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d157      	bne.n	8009090 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e2d9      	b.n	8009598 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fec:	d106      	bne.n	8008ffc <HAL_RCC_OscConfig+0x74>
 8008fee:	4b85      	ldr	r3, [pc, #532]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a84      	ldr	r2, [pc, #528]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 8008ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ff8:	6013      	str	r3, [r2, #0]
 8008ffa:	e01d      	b.n	8009038 <HAL_RCC_OscConfig+0xb0>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009004:	d10c      	bne.n	8009020 <HAL_RCC_OscConfig+0x98>
 8009006:	4b7f      	ldr	r3, [pc, #508]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a7e      	ldr	r2, [pc, #504]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 800900c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009010:	6013      	str	r3, [r2, #0]
 8009012:	4b7c      	ldr	r3, [pc, #496]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a7b      	ldr	r2, [pc, #492]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 8009018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800901c:	6013      	str	r3, [r2, #0]
 800901e:	e00b      	b.n	8009038 <HAL_RCC_OscConfig+0xb0>
 8009020:	4b78      	ldr	r3, [pc, #480]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a77      	ldr	r2, [pc, #476]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 8009026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800902a:	6013      	str	r3, [r2, #0]
 800902c:	4b75      	ldr	r3, [pc, #468]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a74      	ldr	r2, [pc, #464]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 8009032:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d013      	beq.n	8009068 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009040:	f7fb fbb6 	bl	80047b0 <HAL_GetTick>
 8009044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009046:	e008      	b.n	800905a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009048:	f7fb fbb2 	bl	80047b0 <HAL_GetTick>
 800904c:	4602      	mov	r2, r0
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	2b64      	cmp	r3, #100	@ 0x64
 8009054:	d901      	bls.n	800905a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009056:	2303      	movs	r3, #3
 8009058:	e29e      	b.n	8009598 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800905a:	4b6a      	ldr	r3, [pc, #424]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009062:	2b00      	cmp	r3, #0
 8009064:	d0f0      	beq.n	8009048 <HAL_RCC_OscConfig+0xc0>
 8009066:	e014      	b.n	8009092 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009068:	f7fb fba2 	bl	80047b0 <HAL_GetTick>
 800906c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800906e:	e008      	b.n	8009082 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009070:	f7fb fb9e 	bl	80047b0 <HAL_GetTick>
 8009074:	4602      	mov	r2, r0
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	2b64      	cmp	r3, #100	@ 0x64
 800907c:	d901      	bls.n	8009082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e28a      	b.n	8009598 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009082:	4b60      	ldr	r3, [pc, #384]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1f0      	bne.n	8009070 <HAL_RCC_OscConfig+0xe8>
 800908e:	e000      	b.n	8009092 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f003 0302 	and.w	r3, r3, #2
 800909a:	2b00      	cmp	r3, #0
 800909c:	d075      	beq.n	800918a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800909e:	4b59      	ldr	r3, [pc, #356]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f003 030c 	and.w	r3, r3, #12
 80090a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80090a8:	4b56      	ldr	r3, [pc, #344]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	f003 0303 	and.w	r3, r3, #3
 80090b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	2b0c      	cmp	r3, #12
 80090b6:	d102      	bne.n	80090be <HAL_RCC_OscConfig+0x136>
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d002      	beq.n	80090c4 <HAL_RCC_OscConfig+0x13c>
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	2b04      	cmp	r3, #4
 80090c2:	d11f      	bne.n	8009104 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090c4:	4b4f      	ldr	r3, [pc, #316]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d005      	beq.n	80090dc <HAL_RCC_OscConfig+0x154>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e25d      	b.n	8009598 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090dc:	4b49      	ldr	r3, [pc, #292]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	061b      	lsls	r3, r3, #24
 80090ea:	4946      	ldr	r1, [pc, #280]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 80090ec:	4313      	orrs	r3, r2
 80090ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80090f0:	4b45      	ldr	r3, [pc, #276]	@ (8009208 <HAL_RCC_OscConfig+0x280>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fb fb0f 	bl	8004718 <HAL_InitTick>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d043      	beq.n	8009188 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	e249      	b.n	8009598 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d023      	beq.n	8009154 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800910c:	4b3d      	ldr	r3, [pc, #244]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a3c      	ldr	r2, [pc, #240]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 8009112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009118:	f7fb fb4a 	bl	80047b0 <HAL_GetTick>
 800911c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800911e:	e008      	b.n	8009132 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009120:	f7fb fb46 	bl	80047b0 <HAL_GetTick>
 8009124:	4602      	mov	r2, r0
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	2b02      	cmp	r3, #2
 800912c:	d901      	bls.n	8009132 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800912e:	2303      	movs	r3, #3
 8009130:	e232      	b.n	8009598 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009132:	4b34      	ldr	r3, [pc, #208]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800913a:	2b00      	cmp	r3, #0
 800913c:	d0f0      	beq.n	8009120 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800913e:	4b31      	ldr	r3, [pc, #196]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	061b      	lsls	r3, r3, #24
 800914c:	492d      	ldr	r1, [pc, #180]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 800914e:	4313      	orrs	r3, r2
 8009150:	604b      	str	r3, [r1, #4]
 8009152:	e01a      	b.n	800918a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009154:	4b2b      	ldr	r3, [pc, #172]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a2a      	ldr	r2, [pc, #168]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 800915a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800915e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009160:	f7fb fb26 	bl	80047b0 <HAL_GetTick>
 8009164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009166:	e008      	b.n	800917a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009168:	f7fb fb22 	bl	80047b0 <HAL_GetTick>
 800916c:	4602      	mov	r2, r0
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	2b02      	cmp	r3, #2
 8009174:	d901      	bls.n	800917a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009176:	2303      	movs	r3, #3
 8009178:	e20e      	b.n	8009598 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800917a:	4b22      	ldr	r3, [pc, #136]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1f0      	bne.n	8009168 <HAL_RCC_OscConfig+0x1e0>
 8009186:	e000      	b.n	800918a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009188:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0308 	and.w	r3, r3, #8
 8009192:	2b00      	cmp	r3, #0
 8009194:	d041      	beq.n	800921a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d01c      	beq.n	80091d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800919e:	4b19      	ldr	r3, [pc, #100]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 80091a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091a4:	4a17      	ldr	r2, [pc, #92]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 80091a6:	f043 0301 	orr.w	r3, r3, #1
 80091aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091ae:	f7fb faff 	bl	80047b0 <HAL_GetTick>
 80091b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80091b4:	e008      	b.n	80091c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091b6:	f7fb fafb 	bl	80047b0 <HAL_GetTick>
 80091ba:	4602      	mov	r2, r0
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d901      	bls.n	80091c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80091c4:	2303      	movs	r3, #3
 80091c6:	e1e7      	b.n	8009598 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80091c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 80091ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091ce:	f003 0302 	and.w	r3, r3, #2
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d0ef      	beq.n	80091b6 <HAL_RCC_OscConfig+0x22e>
 80091d6:	e020      	b.n	800921a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 80091da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091de:	4a09      	ldr	r2, [pc, #36]	@ (8009204 <HAL_RCC_OscConfig+0x27c>)
 80091e0:	f023 0301 	bic.w	r3, r3, #1
 80091e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091e8:	f7fb fae2 	bl	80047b0 <HAL_GetTick>
 80091ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80091ee:	e00d      	b.n	800920c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091f0:	f7fb fade 	bl	80047b0 <HAL_GetTick>
 80091f4:	4602      	mov	r2, r0
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d906      	bls.n	800920c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80091fe:	2303      	movs	r3, #3
 8009200:	e1ca      	b.n	8009598 <HAL_RCC_OscConfig+0x610>
 8009202:	bf00      	nop
 8009204:	40021000 	.word	0x40021000
 8009208:	2000005c 	.word	0x2000005c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800920c:	4b8c      	ldr	r3, [pc, #560]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 800920e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009212:	f003 0302 	and.w	r3, r3, #2
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1ea      	bne.n	80091f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 0304 	and.w	r3, r3, #4
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 80a6 	beq.w	8009374 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009228:	2300      	movs	r3, #0
 800922a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800922c:	4b84      	ldr	r3, [pc, #528]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 800922e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d101      	bne.n	800923c <HAL_RCC_OscConfig+0x2b4>
 8009238:	2301      	movs	r3, #1
 800923a:	e000      	b.n	800923e <HAL_RCC_OscConfig+0x2b6>
 800923c:	2300      	movs	r3, #0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d00d      	beq.n	800925e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009242:	4b7f      	ldr	r3, [pc, #508]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 8009244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009246:	4a7e      	ldr	r2, [pc, #504]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 8009248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800924c:	6593      	str	r3, [r2, #88]	@ 0x58
 800924e:	4b7c      	ldr	r3, [pc, #496]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 8009250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800925a:	2301      	movs	r3, #1
 800925c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800925e:	4b79      	ldr	r3, [pc, #484]	@ (8009444 <HAL_RCC_OscConfig+0x4bc>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009266:	2b00      	cmp	r3, #0
 8009268:	d118      	bne.n	800929c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800926a:	4b76      	ldr	r3, [pc, #472]	@ (8009444 <HAL_RCC_OscConfig+0x4bc>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a75      	ldr	r2, [pc, #468]	@ (8009444 <HAL_RCC_OscConfig+0x4bc>)
 8009270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009276:	f7fb fa9b 	bl	80047b0 <HAL_GetTick>
 800927a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800927c:	e008      	b.n	8009290 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800927e:	f7fb fa97 	bl	80047b0 <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	2b02      	cmp	r3, #2
 800928a:	d901      	bls.n	8009290 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e183      	b.n	8009598 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009290:	4b6c      	ldr	r3, [pc, #432]	@ (8009444 <HAL_RCC_OscConfig+0x4bc>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009298:	2b00      	cmp	r3, #0
 800929a:	d0f0      	beq.n	800927e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d108      	bne.n	80092b6 <HAL_RCC_OscConfig+0x32e>
 80092a4:	4b66      	ldr	r3, [pc, #408]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 80092a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092aa:	4a65      	ldr	r2, [pc, #404]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 80092ac:	f043 0301 	orr.w	r3, r3, #1
 80092b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80092b4:	e024      	b.n	8009300 <HAL_RCC_OscConfig+0x378>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	2b05      	cmp	r3, #5
 80092bc:	d110      	bne.n	80092e0 <HAL_RCC_OscConfig+0x358>
 80092be:	4b60      	ldr	r3, [pc, #384]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 80092c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092c4:	4a5e      	ldr	r2, [pc, #376]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 80092c6:	f043 0304 	orr.w	r3, r3, #4
 80092ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80092ce:	4b5c      	ldr	r3, [pc, #368]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 80092d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092d4:	4a5a      	ldr	r2, [pc, #360]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 80092d6:	f043 0301 	orr.w	r3, r3, #1
 80092da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80092de:	e00f      	b.n	8009300 <HAL_RCC_OscConfig+0x378>
 80092e0:	4b57      	ldr	r3, [pc, #348]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 80092e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092e6:	4a56      	ldr	r2, [pc, #344]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 80092e8:	f023 0301 	bic.w	r3, r3, #1
 80092ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80092f0:	4b53      	ldr	r3, [pc, #332]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 80092f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092f6:	4a52      	ldr	r2, [pc, #328]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 80092f8:	f023 0304 	bic.w	r3, r3, #4
 80092fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d016      	beq.n	8009336 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009308:	f7fb fa52 	bl	80047b0 <HAL_GetTick>
 800930c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800930e:	e00a      	b.n	8009326 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009310:	f7fb fa4e 	bl	80047b0 <HAL_GetTick>
 8009314:	4602      	mov	r2, r0
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800931e:	4293      	cmp	r3, r2
 8009320:	d901      	bls.n	8009326 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009322:	2303      	movs	r3, #3
 8009324:	e138      	b.n	8009598 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009326:	4b46      	ldr	r3, [pc, #280]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 8009328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800932c:	f003 0302 	and.w	r3, r3, #2
 8009330:	2b00      	cmp	r3, #0
 8009332:	d0ed      	beq.n	8009310 <HAL_RCC_OscConfig+0x388>
 8009334:	e015      	b.n	8009362 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009336:	f7fb fa3b 	bl	80047b0 <HAL_GetTick>
 800933a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800933c:	e00a      	b.n	8009354 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800933e:	f7fb fa37 	bl	80047b0 <HAL_GetTick>
 8009342:	4602      	mov	r2, r0
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	1ad3      	subs	r3, r2, r3
 8009348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800934c:	4293      	cmp	r3, r2
 800934e:	d901      	bls.n	8009354 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009350:	2303      	movs	r3, #3
 8009352:	e121      	b.n	8009598 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009354:	4b3a      	ldr	r3, [pc, #232]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 8009356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800935a:	f003 0302 	and.w	r3, r3, #2
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1ed      	bne.n	800933e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009362:	7ffb      	ldrb	r3, [r7, #31]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d105      	bne.n	8009374 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009368:	4b35      	ldr	r3, [pc, #212]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 800936a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800936c:	4a34      	ldr	r2, [pc, #208]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 800936e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009372:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0320 	and.w	r3, r3, #32
 800937c:	2b00      	cmp	r3, #0
 800937e:	d03c      	beq.n	80093fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	699b      	ldr	r3, [r3, #24]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d01c      	beq.n	80093c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009388:	4b2d      	ldr	r3, [pc, #180]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 800938a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800938e:	4a2c      	ldr	r2, [pc, #176]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 8009390:	f043 0301 	orr.w	r3, r3, #1
 8009394:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009398:	f7fb fa0a 	bl	80047b0 <HAL_GetTick>
 800939c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800939e:	e008      	b.n	80093b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80093a0:	f7fb fa06 	bl	80047b0 <HAL_GetTick>
 80093a4:	4602      	mov	r2, r0
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d901      	bls.n	80093b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e0f2      	b.n	8009598 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80093b2:	4b23      	ldr	r3, [pc, #140]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 80093b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80093b8:	f003 0302 	and.w	r3, r3, #2
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d0ef      	beq.n	80093a0 <HAL_RCC_OscConfig+0x418>
 80093c0:	e01b      	b.n	80093fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80093c2:	4b1f      	ldr	r3, [pc, #124]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 80093c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80093c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 80093ca:	f023 0301 	bic.w	r3, r3, #1
 80093ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093d2:	f7fb f9ed 	bl	80047b0 <HAL_GetTick>
 80093d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80093d8:	e008      	b.n	80093ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80093da:	f7fb f9e9 	bl	80047b0 <HAL_GetTick>
 80093de:	4602      	mov	r2, r0
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d901      	bls.n	80093ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e0d5      	b.n	8009598 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80093ec:	4b14      	ldr	r3, [pc, #80]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 80093ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80093f2:	f003 0302 	and.w	r3, r3, #2
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1ef      	bne.n	80093da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	69db      	ldr	r3, [r3, #28]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	f000 80c9 	beq.w	8009596 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009404:	4b0e      	ldr	r3, [pc, #56]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	f003 030c 	and.w	r3, r3, #12
 800940c:	2b0c      	cmp	r3, #12
 800940e:	f000 8083 	beq.w	8009518 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	2b02      	cmp	r3, #2
 8009418:	d15e      	bne.n	80094d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800941a:	4b09      	ldr	r3, [pc, #36]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a08      	ldr	r2, [pc, #32]	@ (8009440 <HAL_RCC_OscConfig+0x4b8>)
 8009420:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009426:	f7fb f9c3 	bl	80047b0 <HAL_GetTick>
 800942a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800942c:	e00c      	b.n	8009448 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800942e:	f7fb f9bf 	bl	80047b0 <HAL_GetTick>
 8009432:	4602      	mov	r2, r0
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	2b02      	cmp	r3, #2
 800943a:	d905      	bls.n	8009448 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800943c:	2303      	movs	r3, #3
 800943e:	e0ab      	b.n	8009598 <HAL_RCC_OscConfig+0x610>
 8009440:	40021000 	.word	0x40021000
 8009444:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009448:	4b55      	ldr	r3, [pc, #340]	@ (80095a0 <HAL_RCC_OscConfig+0x618>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d1ec      	bne.n	800942e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009454:	4b52      	ldr	r3, [pc, #328]	@ (80095a0 <HAL_RCC_OscConfig+0x618>)
 8009456:	68da      	ldr	r2, [r3, #12]
 8009458:	4b52      	ldr	r3, [pc, #328]	@ (80095a4 <HAL_RCC_OscConfig+0x61c>)
 800945a:	4013      	ands	r3, r2
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	6a11      	ldr	r1, [r2, #32]
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009464:	3a01      	subs	r2, #1
 8009466:	0112      	lsls	r2, r2, #4
 8009468:	4311      	orrs	r1, r2
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800946e:	0212      	lsls	r2, r2, #8
 8009470:	4311      	orrs	r1, r2
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009476:	0852      	lsrs	r2, r2, #1
 8009478:	3a01      	subs	r2, #1
 800947a:	0552      	lsls	r2, r2, #21
 800947c:	4311      	orrs	r1, r2
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009482:	0852      	lsrs	r2, r2, #1
 8009484:	3a01      	subs	r2, #1
 8009486:	0652      	lsls	r2, r2, #25
 8009488:	4311      	orrs	r1, r2
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800948e:	06d2      	lsls	r2, r2, #27
 8009490:	430a      	orrs	r2, r1
 8009492:	4943      	ldr	r1, [pc, #268]	@ (80095a0 <HAL_RCC_OscConfig+0x618>)
 8009494:	4313      	orrs	r3, r2
 8009496:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009498:	4b41      	ldr	r3, [pc, #260]	@ (80095a0 <HAL_RCC_OscConfig+0x618>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a40      	ldr	r2, [pc, #256]	@ (80095a0 <HAL_RCC_OscConfig+0x618>)
 800949e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80094a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80094a4:	4b3e      	ldr	r3, [pc, #248]	@ (80095a0 <HAL_RCC_OscConfig+0x618>)
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	4a3d      	ldr	r2, [pc, #244]	@ (80095a0 <HAL_RCC_OscConfig+0x618>)
 80094aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80094ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094b0:	f7fb f97e 	bl	80047b0 <HAL_GetTick>
 80094b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80094b6:	e008      	b.n	80094ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094b8:	f7fb f97a 	bl	80047b0 <HAL_GetTick>
 80094bc:	4602      	mov	r2, r0
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d901      	bls.n	80094ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80094c6:	2303      	movs	r3, #3
 80094c8:	e066      	b.n	8009598 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80094ca:	4b35      	ldr	r3, [pc, #212]	@ (80095a0 <HAL_RCC_OscConfig+0x618>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d0f0      	beq.n	80094b8 <HAL_RCC_OscConfig+0x530>
 80094d6:	e05e      	b.n	8009596 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094d8:	4b31      	ldr	r3, [pc, #196]	@ (80095a0 <HAL_RCC_OscConfig+0x618>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a30      	ldr	r2, [pc, #192]	@ (80095a0 <HAL_RCC_OscConfig+0x618>)
 80094de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094e4:	f7fb f964 	bl	80047b0 <HAL_GetTick>
 80094e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094ea:	e008      	b.n	80094fe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094ec:	f7fb f960 	bl	80047b0 <HAL_GetTick>
 80094f0:	4602      	mov	r2, r0
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	1ad3      	subs	r3, r2, r3
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d901      	bls.n	80094fe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e04c      	b.n	8009598 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094fe:	4b28      	ldr	r3, [pc, #160]	@ (80095a0 <HAL_RCC_OscConfig+0x618>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1f0      	bne.n	80094ec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800950a:	4b25      	ldr	r3, [pc, #148]	@ (80095a0 <HAL_RCC_OscConfig+0x618>)
 800950c:	68da      	ldr	r2, [r3, #12]
 800950e:	4924      	ldr	r1, [pc, #144]	@ (80095a0 <HAL_RCC_OscConfig+0x618>)
 8009510:	4b25      	ldr	r3, [pc, #148]	@ (80095a8 <HAL_RCC_OscConfig+0x620>)
 8009512:	4013      	ands	r3, r2
 8009514:	60cb      	str	r3, [r1, #12]
 8009516:	e03e      	b.n	8009596 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	69db      	ldr	r3, [r3, #28]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d101      	bne.n	8009524 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e039      	b.n	8009598 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009524:	4b1e      	ldr	r3, [pc, #120]	@ (80095a0 <HAL_RCC_OscConfig+0x618>)
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	f003 0203 	and.w	r2, r3, #3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a1b      	ldr	r3, [r3, #32]
 8009534:	429a      	cmp	r2, r3
 8009536:	d12c      	bne.n	8009592 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009542:	3b01      	subs	r3, #1
 8009544:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009546:	429a      	cmp	r2, r3
 8009548:	d123      	bne.n	8009592 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009554:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009556:	429a      	cmp	r2, r3
 8009558:	d11b      	bne.n	8009592 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009564:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009566:	429a      	cmp	r2, r3
 8009568:	d113      	bne.n	8009592 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009574:	085b      	lsrs	r3, r3, #1
 8009576:	3b01      	subs	r3, #1
 8009578:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800957a:	429a      	cmp	r2, r3
 800957c:	d109      	bne.n	8009592 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009588:	085b      	lsrs	r3, r3, #1
 800958a:	3b01      	subs	r3, #1
 800958c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800958e:	429a      	cmp	r2, r3
 8009590:	d001      	beq.n	8009596 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e000      	b.n	8009598 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3720      	adds	r7, #32
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	40021000 	.word	0x40021000
 80095a4:	019f800c 	.word	0x019f800c
 80095a8:	feeefffc 	.word	0xfeeefffc

080095ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80095b6:	2300      	movs	r3, #0
 80095b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d101      	bne.n	80095c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e11e      	b.n	8009802 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80095c4:	4b91      	ldr	r3, [pc, #580]	@ (800980c <HAL_RCC_ClockConfig+0x260>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f003 030f 	and.w	r3, r3, #15
 80095cc:	683a      	ldr	r2, [r7, #0]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d910      	bls.n	80095f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095d2:	4b8e      	ldr	r3, [pc, #568]	@ (800980c <HAL_RCC_ClockConfig+0x260>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f023 020f 	bic.w	r2, r3, #15
 80095da:	498c      	ldr	r1, [pc, #560]	@ (800980c <HAL_RCC_ClockConfig+0x260>)
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	4313      	orrs	r3, r2
 80095e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095e2:	4b8a      	ldr	r3, [pc, #552]	@ (800980c <HAL_RCC_ClockConfig+0x260>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 030f 	and.w	r3, r3, #15
 80095ea:	683a      	ldr	r2, [r7, #0]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d001      	beq.n	80095f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e106      	b.n	8009802 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 0301 	and.w	r3, r3, #1
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d073      	beq.n	80096e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	2b03      	cmp	r3, #3
 8009606:	d129      	bne.n	800965c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009608:	4b81      	ldr	r3, [pc, #516]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009610:	2b00      	cmp	r3, #0
 8009612:	d101      	bne.n	8009618 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	e0f4      	b.n	8009802 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009618:	f000 f99e 	bl	8009958 <RCC_GetSysClockFreqFromPLLSource>
 800961c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	4a7c      	ldr	r2, [pc, #496]	@ (8009814 <HAL_RCC_ClockConfig+0x268>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d93f      	bls.n	80096a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009626:	4b7a      	ldr	r3, [pc, #488]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d009      	beq.n	8009646 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800963a:	2b00      	cmp	r3, #0
 800963c:	d033      	beq.n	80096a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009642:	2b00      	cmp	r3, #0
 8009644:	d12f      	bne.n	80096a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009646:	4b72      	ldr	r3, [pc, #456]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800964e:	4a70      	ldr	r2, [pc, #448]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 8009650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009654:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009656:	2380      	movs	r3, #128	@ 0x80
 8009658:	617b      	str	r3, [r7, #20]
 800965a:	e024      	b.n	80096a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	2b02      	cmp	r3, #2
 8009662:	d107      	bne.n	8009674 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009664:	4b6a      	ldr	r3, [pc, #424]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800966c:	2b00      	cmp	r3, #0
 800966e:	d109      	bne.n	8009684 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e0c6      	b.n	8009802 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009674:	4b66      	ldr	r3, [pc, #408]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800967c:	2b00      	cmp	r3, #0
 800967e:	d101      	bne.n	8009684 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	e0be      	b.n	8009802 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009684:	f000 f8ce 	bl	8009824 <HAL_RCC_GetSysClockFreq>
 8009688:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	4a61      	ldr	r2, [pc, #388]	@ (8009814 <HAL_RCC_ClockConfig+0x268>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d909      	bls.n	80096a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009692:	4b5f      	ldr	r3, [pc, #380]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800969a:	4a5d      	ldr	r2, [pc, #372]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 800969c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80096a2:	2380      	movs	r3, #128	@ 0x80
 80096a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80096a6:	4b5a      	ldr	r3, [pc, #360]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f023 0203 	bic.w	r2, r3, #3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	4957      	ldr	r1, [pc, #348]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 80096b4:	4313      	orrs	r3, r2
 80096b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096b8:	f7fb f87a 	bl	80047b0 <HAL_GetTick>
 80096bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096be:	e00a      	b.n	80096d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096c0:	f7fb f876 	bl	80047b0 <HAL_GetTick>
 80096c4:	4602      	mov	r2, r0
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d901      	bls.n	80096d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80096d2:	2303      	movs	r3, #3
 80096d4:	e095      	b.n	8009802 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096d6:	4b4e      	ldr	r3, [pc, #312]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	f003 020c 	and.w	r2, r3, #12
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d1eb      	bne.n	80096c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 0302 	and.w	r3, r3, #2
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d023      	beq.n	800973c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0304 	and.w	r3, r3, #4
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d005      	beq.n	800970c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009700:	4b43      	ldr	r3, [pc, #268]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	4a42      	ldr	r2, [pc, #264]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 8009706:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800970a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 0308 	and.w	r3, r3, #8
 8009714:	2b00      	cmp	r3, #0
 8009716:	d007      	beq.n	8009728 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009718:	4b3d      	ldr	r3, [pc, #244]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009720:	4a3b      	ldr	r2, [pc, #236]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 8009722:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009726:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009728:	4b39      	ldr	r3, [pc, #228]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	4936      	ldr	r1, [pc, #216]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 8009736:	4313      	orrs	r3, r2
 8009738:	608b      	str	r3, [r1, #8]
 800973a:	e008      	b.n	800974e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	2b80      	cmp	r3, #128	@ 0x80
 8009740:	d105      	bne.n	800974e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009742:	4b33      	ldr	r3, [pc, #204]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	4a32      	ldr	r2, [pc, #200]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 8009748:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800974c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800974e:	4b2f      	ldr	r3, [pc, #188]	@ (800980c <HAL_RCC_ClockConfig+0x260>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 030f 	and.w	r3, r3, #15
 8009756:	683a      	ldr	r2, [r7, #0]
 8009758:	429a      	cmp	r2, r3
 800975a:	d21d      	bcs.n	8009798 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800975c:	4b2b      	ldr	r3, [pc, #172]	@ (800980c <HAL_RCC_ClockConfig+0x260>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f023 020f 	bic.w	r2, r3, #15
 8009764:	4929      	ldr	r1, [pc, #164]	@ (800980c <HAL_RCC_ClockConfig+0x260>)
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	4313      	orrs	r3, r2
 800976a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800976c:	f7fb f820 	bl	80047b0 <HAL_GetTick>
 8009770:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009772:	e00a      	b.n	800978a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009774:	f7fb f81c 	bl	80047b0 <HAL_GetTick>
 8009778:	4602      	mov	r2, r0
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009782:	4293      	cmp	r3, r2
 8009784:	d901      	bls.n	800978a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009786:	2303      	movs	r3, #3
 8009788:	e03b      	b.n	8009802 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800978a:	4b20      	ldr	r3, [pc, #128]	@ (800980c <HAL_RCC_ClockConfig+0x260>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 030f 	and.w	r3, r3, #15
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	429a      	cmp	r2, r3
 8009796:	d1ed      	bne.n	8009774 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 0304 	and.w	r3, r3, #4
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d008      	beq.n	80097b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80097a4:	4b1a      	ldr	r3, [pc, #104]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	4917      	ldr	r1, [pc, #92]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 80097b2:	4313      	orrs	r3, r2
 80097b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f003 0308 	and.w	r3, r3, #8
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d009      	beq.n	80097d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80097c2:	4b13      	ldr	r3, [pc, #76]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	691b      	ldr	r3, [r3, #16]
 80097ce:	00db      	lsls	r3, r3, #3
 80097d0:	490f      	ldr	r1, [pc, #60]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 80097d2:	4313      	orrs	r3, r2
 80097d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80097d6:	f000 f825 	bl	8009824 <HAL_RCC_GetSysClockFreq>
 80097da:	4602      	mov	r2, r0
 80097dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009810 <HAL_RCC_ClockConfig+0x264>)
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	091b      	lsrs	r3, r3, #4
 80097e2:	f003 030f 	and.w	r3, r3, #15
 80097e6:	490c      	ldr	r1, [pc, #48]	@ (8009818 <HAL_RCC_ClockConfig+0x26c>)
 80097e8:	5ccb      	ldrb	r3, [r1, r3]
 80097ea:	f003 031f 	and.w	r3, r3, #31
 80097ee:	fa22 f303 	lsr.w	r3, r2, r3
 80097f2:	4a0a      	ldr	r2, [pc, #40]	@ (800981c <HAL_RCC_ClockConfig+0x270>)
 80097f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80097f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009820 <HAL_RCC_ClockConfig+0x274>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fa ff8c 	bl	8004718 <HAL_InitTick>
 8009800:	4603      	mov	r3, r0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3718      	adds	r7, #24
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	40022000 	.word	0x40022000
 8009810:	40021000 	.word	0x40021000
 8009814:	04c4b400 	.word	0x04c4b400
 8009818:	08016fe0 	.word	0x08016fe0
 800981c:	20000058 	.word	0x20000058
 8009820:	2000005c 	.word	0x2000005c

08009824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009824:	b480      	push	{r7}
 8009826:	b087      	sub	sp, #28
 8009828:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800982a:	4b2c      	ldr	r3, [pc, #176]	@ (80098dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	f003 030c 	and.w	r3, r3, #12
 8009832:	2b04      	cmp	r3, #4
 8009834:	d102      	bne.n	800983c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009836:	4b2a      	ldr	r3, [pc, #168]	@ (80098e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009838:	613b      	str	r3, [r7, #16]
 800983a:	e047      	b.n	80098cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800983c:	4b27      	ldr	r3, [pc, #156]	@ (80098dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	f003 030c 	and.w	r3, r3, #12
 8009844:	2b08      	cmp	r3, #8
 8009846:	d102      	bne.n	800984e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009848:	4b26      	ldr	r3, [pc, #152]	@ (80098e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800984a:	613b      	str	r3, [r7, #16]
 800984c:	e03e      	b.n	80098cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800984e:	4b23      	ldr	r3, [pc, #140]	@ (80098dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	f003 030c 	and.w	r3, r3, #12
 8009856:	2b0c      	cmp	r3, #12
 8009858:	d136      	bne.n	80098c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800985a:	4b20      	ldr	r3, [pc, #128]	@ (80098dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	f003 0303 	and.w	r3, r3, #3
 8009862:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009864:	4b1d      	ldr	r3, [pc, #116]	@ (80098dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	091b      	lsrs	r3, r3, #4
 800986a:	f003 030f 	and.w	r3, r3, #15
 800986e:	3301      	adds	r3, #1
 8009870:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2b03      	cmp	r3, #3
 8009876:	d10c      	bne.n	8009892 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009878:	4a1a      	ldr	r2, [pc, #104]	@ (80098e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009880:	4a16      	ldr	r2, [pc, #88]	@ (80098dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009882:	68d2      	ldr	r2, [r2, #12]
 8009884:	0a12      	lsrs	r2, r2, #8
 8009886:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800988a:	fb02 f303 	mul.w	r3, r2, r3
 800988e:	617b      	str	r3, [r7, #20]
      break;
 8009890:	e00c      	b.n	80098ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009892:	4a13      	ldr	r2, [pc, #76]	@ (80098e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	fbb2 f3f3 	udiv	r3, r2, r3
 800989a:	4a10      	ldr	r2, [pc, #64]	@ (80098dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800989c:	68d2      	ldr	r2, [r2, #12]
 800989e:	0a12      	lsrs	r2, r2, #8
 80098a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80098a4:	fb02 f303 	mul.w	r3, r2, r3
 80098a8:	617b      	str	r3, [r7, #20]
      break;
 80098aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80098ac:	4b0b      	ldr	r3, [pc, #44]	@ (80098dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	0e5b      	lsrs	r3, r3, #25
 80098b2:	f003 0303 	and.w	r3, r3, #3
 80098b6:	3301      	adds	r3, #1
 80098b8:	005b      	lsls	r3, r3, #1
 80098ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80098bc:	697a      	ldr	r2, [r7, #20]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80098c4:	613b      	str	r3, [r7, #16]
 80098c6:	e001      	b.n	80098cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80098c8:	2300      	movs	r3, #0
 80098ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80098cc:	693b      	ldr	r3, [r7, #16]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	371c      	adds	r7, #28
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	40021000 	.word	0x40021000
 80098e0:	00f42400 	.word	0x00f42400
 80098e4:	016e3600 	.word	0x016e3600

080098e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80098e8:	b480      	push	{r7}
 80098ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80098ec:	4b03      	ldr	r3, [pc, #12]	@ (80098fc <HAL_RCC_GetHCLKFreq+0x14>)
 80098ee:	681b      	ldr	r3, [r3, #0]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	20000058 	.word	0x20000058

08009900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009904:	f7ff fff0 	bl	80098e8 <HAL_RCC_GetHCLKFreq>
 8009908:	4602      	mov	r2, r0
 800990a:	4b06      	ldr	r3, [pc, #24]	@ (8009924 <HAL_RCC_GetPCLK1Freq+0x24>)
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	0a1b      	lsrs	r3, r3, #8
 8009910:	f003 0307 	and.w	r3, r3, #7
 8009914:	4904      	ldr	r1, [pc, #16]	@ (8009928 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009916:	5ccb      	ldrb	r3, [r1, r3]
 8009918:	f003 031f 	and.w	r3, r3, #31
 800991c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009920:	4618      	mov	r0, r3
 8009922:	bd80      	pop	{r7, pc}
 8009924:	40021000 	.word	0x40021000
 8009928:	08016ff0 	.word	0x08016ff0

0800992c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009930:	f7ff ffda 	bl	80098e8 <HAL_RCC_GetHCLKFreq>
 8009934:	4602      	mov	r2, r0
 8009936:	4b06      	ldr	r3, [pc, #24]	@ (8009950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	0adb      	lsrs	r3, r3, #11
 800993c:	f003 0307 	and.w	r3, r3, #7
 8009940:	4904      	ldr	r1, [pc, #16]	@ (8009954 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009942:	5ccb      	ldrb	r3, [r1, r3]
 8009944:	f003 031f 	and.w	r3, r3, #31
 8009948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800994c:	4618      	mov	r0, r3
 800994e:	bd80      	pop	{r7, pc}
 8009950:	40021000 	.word	0x40021000
 8009954:	08016ff0 	.word	0x08016ff0

08009958 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009958:	b480      	push	{r7}
 800995a:	b087      	sub	sp, #28
 800995c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800995e:	4b1e      	ldr	r3, [pc, #120]	@ (80099d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	f003 0303 	and.w	r3, r3, #3
 8009966:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009968:	4b1b      	ldr	r3, [pc, #108]	@ (80099d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	091b      	lsrs	r3, r3, #4
 800996e:	f003 030f 	and.w	r3, r3, #15
 8009972:	3301      	adds	r3, #1
 8009974:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	2b03      	cmp	r3, #3
 800997a:	d10c      	bne.n	8009996 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800997c:	4a17      	ldr	r2, [pc, #92]	@ (80099dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	fbb2 f3f3 	udiv	r3, r2, r3
 8009984:	4a14      	ldr	r2, [pc, #80]	@ (80099d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009986:	68d2      	ldr	r2, [r2, #12]
 8009988:	0a12      	lsrs	r2, r2, #8
 800998a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800998e:	fb02 f303 	mul.w	r3, r2, r3
 8009992:	617b      	str	r3, [r7, #20]
    break;
 8009994:	e00c      	b.n	80099b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009996:	4a12      	ldr	r2, [pc, #72]	@ (80099e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	fbb2 f3f3 	udiv	r3, r2, r3
 800999e:	4a0e      	ldr	r2, [pc, #56]	@ (80099d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80099a0:	68d2      	ldr	r2, [r2, #12]
 80099a2:	0a12      	lsrs	r2, r2, #8
 80099a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80099a8:	fb02 f303 	mul.w	r3, r2, r3
 80099ac:	617b      	str	r3, [r7, #20]
    break;
 80099ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80099b0:	4b09      	ldr	r3, [pc, #36]	@ (80099d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	0e5b      	lsrs	r3, r3, #25
 80099b6:	f003 0303 	and.w	r3, r3, #3
 80099ba:	3301      	adds	r3, #1
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80099c0:	697a      	ldr	r2, [r7, #20]
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80099c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80099ca:	687b      	ldr	r3, [r7, #4]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	371c      	adds	r7, #28
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr
 80099d8:	40021000 	.word	0x40021000
 80099dc:	016e3600 	.word	0x016e3600
 80099e0:	00f42400 	.word	0x00f42400

080099e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80099ec:	2300      	movs	r3, #0
 80099ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80099f0:	2300      	movs	r3, #0
 80099f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f000 8098 	beq.w	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a02:	2300      	movs	r3, #0
 8009a04:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a06:	4b43      	ldr	r3, [pc, #268]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10d      	bne.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a12:	4b40      	ldr	r3, [pc, #256]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a16:	4a3f      	ldr	r2, [pc, #252]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a26:	60bb      	str	r3, [r7, #8]
 8009a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a2e:	4b3a      	ldr	r3, [pc, #232]	@ (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a39      	ldr	r2, [pc, #228]	@ (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a3a:	f7fa feb9 	bl	80047b0 <HAL_GetTick>
 8009a3e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a40:	e009      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a42:	f7fa feb5 	bl	80047b0 <HAL_GetTick>
 8009a46:	4602      	mov	r2, r0
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	1ad3      	subs	r3, r2, r3
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d902      	bls.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009a50:	2303      	movs	r3, #3
 8009a52:	74fb      	strb	r3, [r7, #19]
        break;
 8009a54:	e005      	b.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a56:	4b30      	ldr	r3, [pc, #192]	@ (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d0ef      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009a62:	7cfb      	ldrb	r3, [r7, #19]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d159      	bne.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009a68:	4b2a      	ldr	r3, [pc, #168]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a72:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d01e      	beq.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d019      	beq.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009a84:	4b23      	ldr	r3, [pc, #140]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a90:	4b20      	ldr	r3, [pc, #128]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a96:	4a1f      	ldr	r2, [pc, #124]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009aa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009aac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009ab0:	4a18      	ldr	r2, [pc, #96]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	f003 0301 	and.w	r3, r3, #1
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d016      	beq.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ac2:	f7fa fe75 	bl	80047b0 <HAL_GetTick>
 8009ac6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009ac8:	e00b      	b.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009aca:	f7fa fe71 	bl	80047b0 <HAL_GetTick>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	1ad3      	subs	r3, r2, r3
 8009ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d902      	bls.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009adc:	2303      	movs	r3, #3
 8009ade:	74fb      	strb	r3, [r7, #19]
            break;
 8009ae0:	e006      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ae8:	f003 0302 	and.w	r3, r3, #2
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d0ec      	beq.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009af0:	7cfb      	ldrb	r3, [r7, #19]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10b      	bne.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009af6:	4b07      	ldr	r3, [pc, #28]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009afc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b04:	4903      	ldr	r1, [pc, #12]	@ (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b06:	4313      	orrs	r3, r2
 8009b08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009b0c:	e008      	b.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009b0e:	7cfb      	ldrb	r3, [r7, #19]
 8009b10:	74bb      	strb	r3, [r7, #18]
 8009b12:	e005      	b.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009b14:	40021000 	.word	0x40021000
 8009b18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b1c:	7cfb      	ldrb	r3, [r7, #19]
 8009b1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b20:	7c7b      	ldrb	r3, [r7, #17]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d105      	bne.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b26:	4ba7      	ldr	r3, [pc, #668]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b2a:	4aa6      	ldr	r2, [pc, #664]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b30:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f003 0301 	and.w	r3, r3, #1
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00a      	beq.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009b3e:	4ba1      	ldr	r3, [pc, #644]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b44:	f023 0203 	bic.w	r2, r3, #3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	499d      	ldr	r1, [pc, #628]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 0302 	and.w	r3, r3, #2
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00a      	beq.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009b60:	4b98      	ldr	r3, [pc, #608]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b66:	f023 020c 	bic.w	r2, r3, #12
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	4995      	ldr	r1, [pc, #596]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b70:	4313      	orrs	r3, r2
 8009b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0304 	and.w	r3, r3, #4
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00a      	beq.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009b82:	4b90      	ldr	r3, [pc, #576]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b88:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	498c      	ldr	r1, [pc, #560]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b92:	4313      	orrs	r3, r2
 8009b94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 0308 	and.w	r3, r3, #8
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00a      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009ba4:	4b87      	ldr	r3, [pc, #540]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009baa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	4984      	ldr	r1, [pc, #528]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f003 0310 	and.w	r3, r3, #16
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00a      	beq.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009bc6:	4b7f      	ldr	r3, [pc, #508]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	695b      	ldr	r3, [r3, #20]
 8009bd4:	497b      	ldr	r1, [pc, #492]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 0320 	and.w	r3, r3, #32
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00a      	beq.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009be8:	4b76      	ldr	r3, [pc, #472]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	4973      	ldr	r1, [pc, #460]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00a      	beq.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009c0a:	4b6e      	ldr	r3, [pc, #440]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c10:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	69db      	ldr	r3, [r3, #28]
 8009c18:	496a      	ldr	r1, [pc, #424]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00a      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009c2c:	4b65      	ldr	r3, [pc, #404]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c32:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	4962      	ldr	r1, [pc, #392]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00a      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009c4e:	4b5d      	ldr	r3, [pc, #372]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c5c:	4959      	ldr	r1, [pc, #356]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00a      	beq.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009c70:	4b54      	ldr	r3, [pc, #336]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c76:	f023 0203 	bic.w	r2, r3, #3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c7e:	4951      	ldr	r1, [pc, #324]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c80:	4313      	orrs	r3, r2
 8009c82:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00a      	beq.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c92:	4b4c      	ldr	r3, [pc, #304]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c98:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ca0:	4948      	ldr	r1, [pc, #288]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d015      	beq.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009cb4:	4b43      	ldr	r3, [pc, #268]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cc2:	4940      	ldr	r1, [pc, #256]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cd2:	d105      	bne.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	4a3a      	ldr	r2, [pc, #232]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009cde:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d015      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009cec:	4b35      	ldr	r3, [pc, #212]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cf2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cfa:	4932      	ldr	r1, [pc, #200]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d0a:	d105      	bne.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	4a2c      	ldr	r2, [pc, #176]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d16:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d015      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009d24:	4b27      	ldr	r3, [pc, #156]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d2a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d32:	4924      	ldr	r1, [pc, #144]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d34:	4313      	orrs	r3, r2
 8009d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d42:	d105      	bne.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d44:	4b1f      	ldr	r3, [pc, #124]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	4a1e      	ldr	r2, [pc, #120]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d4e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d015      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009d5c:	4b19      	ldr	r3, [pc, #100]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d6a:	4916      	ldr	r1, [pc, #88]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d7a:	d105      	bne.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d7c:	4b11      	ldr	r3, [pc, #68]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	4a10      	ldr	r2, [pc, #64]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d86:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d019      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d94:	4b0b      	ldr	r3, [pc, #44]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009da2:	4908      	ldr	r1, [pc, #32]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009da4:	4313      	orrs	r3, r2
 8009da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009db2:	d109      	bne.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009db4:	4b03      	ldr	r3, [pc, #12]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	4a02      	ldr	r2, [pc, #8]	@ (8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009dbe:	60d3      	str	r3, [r2, #12]
 8009dc0:	e002      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009dc2:	bf00      	nop
 8009dc4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d015      	beq.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009dd4:	4b29      	ldr	r3, [pc, #164]	@ (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dda:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009de2:	4926      	ldr	r1, [pc, #152]	@ (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009de4:	4313      	orrs	r3, r2
 8009de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009df2:	d105      	bne.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009df4:	4b21      	ldr	r3, [pc, #132]	@ (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	4a20      	ldr	r2, [pc, #128]	@ (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009dfe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d015      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e12:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e1a:	4918      	ldr	r1, [pc, #96]	@ (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e2a:	d105      	bne.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009e2c:	4b13      	ldr	r3, [pc, #76]	@ (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	4a12      	ldr	r2, [pc, #72]	@ (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e36:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d015      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009e44:	4b0d      	ldr	r3, [pc, #52]	@ (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e52:	490a      	ldr	r1, [pc, #40]	@ (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e54:	4313      	orrs	r3, r2
 8009e56:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e62:	d105      	bne.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e64:	4b05      	ldr	r3, [pc, #20]	@ (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	4a04      	ldr	r2, [pc, #16]	@ (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e6e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009e70:	7cbb      	ldrb	r3, [r7, #18]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	40021000 	.word	0x40021000

08009e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d101      	bne.n	8009e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e049      	b.n	8009f26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d106      	bne.n	8009eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7fa f93a 	bl	8004120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2202      	movs	r2, #2
 8009eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	3304      	adds	r3, #4
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	f000 fe58 	bl	800ab74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
	...

08009f30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d001      	beq.n	8009f48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	e04c      	b.n	8009fe2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2202      	movs	r2, #2
 8009f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a26      	ldr	r2, [pc, #152]	@ (8009ff0 <HAL_TIM_Base_Start+0xc0>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d022      	beq.n	8009fa0 <HAL_TIM_Base_Start+0x70>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f62:	d01d      	beq.n	8009fa0 <HAL_TIM_Base_Start+0x70>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a22      	ldr	r2, [pc, #136]	@ (8009ff4 <HAL_TIM_Base_Start+0xc4>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d018      	beq.n	8009fa0 <HAL_TIM_Base_Start+0x70>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a21      	ldr	r2, [pc, #132]	@ (8009ff8 <HAL_TIM_Base_Start+0xc8>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d013      	beq.n	8009fa0 <HAL_TIM_Base_Start+0x70>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8009ffc <HAL_TIM_Base_Start+0xcc>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d00e      	beq.n	8009fa0 <HAL_TIM_Base_Start+0x70>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a1e      	ldr	r2, [pc, #120]	@ (800a000 <HAL_TIM_Base_Start+0xd0>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d009      	beq.n	8009fa0 <HAL_TIM_Base_Start+0x70>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a1c      	ldr	r2, [pc, #112]	@ (800a004 <HAL_TIM_Base_Start+0xd4>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d004      	beq.n	8009fa0 <HAL_TIM_Base_Start+0x70>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a1b      	ldr	r2, [pc, #108]	@ (800a008 <HAL_TIM_Base_Start+0xd8>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d115      	bne.n	8009fcc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	689a      	ldr	r2, [r3, #8]
 8009fa6:	4b19      	ldr	r3, [pc, #100]	@ (800a00c <HAL_TIM_Base_Start+0xdc>)
 8009fa8:	4013      	ands	r3, r2
 8009faa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2b06      	cmp	r3, #6
 8009fb0:	d015      	beq.n	8009fde <HAL_TIM_Base_Start+0xae>
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fb8:	d011      	beq.n	8009fde <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f042 0201 	orr.w	r2, r2, #1
 8009fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fca:	e008      	b.n	8009fde <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f042 0201 	orr.w	r2, r2, #1
 8009fda:	601a      	str	r2, [r3, #0]
 8009fdc:	e000      	b.n	8009fe0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3714      	adds	r7, #20
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	40012c00 	.word	0x40012c00
 8009ff4:	40000400 	.word	0x40000400
 8009ff8:	40000800 	.word	0x40000800
 8009ffc:	40000c00 	.word	0x40000c00
 800a000:	40013400 	.word	0x40013400
 800a004:	40014000 	.word	0x40014000
 800a008:	40015000 	.word	0x40015000
 800a00c:	00010007 	.word	0x00010007

0800a010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	2b01      	cmp	r3, #1
 800a022:	d001      	beq.n	800a028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	e054      	b.n	800a0d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2202      	movs	r2, #2
 800a02c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68da      	ldr	r2, [r3, #12]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f042 0201 	orr.w	r2, r2, #1
 800a03e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a26      	ldr	r2, [pc, #152]	@ (800a0e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d022      	beq.n	800a090 <HAL_TIM_Base_Start_IT+0x80>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a052:	d01d      	beq.n	800a090 <HAL_TIM_Base_Start_IT+0x80>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a22      	ldr	r2, [pc, #136]	@ (800a0e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d018      	beq.n	800a090 <HAL_TIM_Base_Start_IT+0x80>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a21      	ldr	r2, [pc, #132]	@ (800a0e8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d013      	beq.n	800a090 <HAL_TIM_Base_Start_IT+0x80>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a1f      	ldr	r2, [pc, #124]	@ (800a0ec <HAL_TIM_Base_Start_IT+0xdc>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d00e      	beq.n	800a090 <HAL_TIM_Base_Start_IT+0x80>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a1e      	ldr	r2, [pc, #120]	@ (800a0f0 <HAL_TIM_Base_Start_IT+0xe0>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d009      	beq.n	800a090 <HAL_TIM_Base_Start_IT+0x80>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a1c      	ldr	r2, [pc, #112]	@ (800a0f4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d004      	beq.n	800a090 <HAL_TIM_Base_Start_IT+0x80>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a1b      	ldr	r2, [pc, #108]	@ (800a0f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d115      	bne.n	800a0bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	689a      	ldr	r2, [r3, #8]
 800a096:	4b19      	ldr	r3, [pc, #100]	@ (800a0fc <HAL_TIM_Base_Start_IT+0xec>)
 800a098:	4013      	ands	r3, r2
 800a09a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2b06      	cmp	r3, #6
 800a0a0:	d015      	beq.n	800a0ce <HAL_TIM_Base_Start_IT+0xbe>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0a8:	d011      	beq.n	800a0ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f042 0201 	orr.w	r2, r2, #1
 800a0b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ba:	e008      	b.n	800a0ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f042 0201 	orr.w	r2, r2, #1
 800a0ca:	601a      	str	r2, [r3, #0]
 800a0cc:	e000      	b.n	800a0d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3714      	adds	r7, #20
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop
 800a0e0:	40012c00 	.word	0x40012c00
 800a0e4:	40000400 	.word	0x40000400
 800a0e8:	40000800 	.word	0x40000800
 800a0ec:	40000c00 	.word	0x40000c00
 800a0f0:	40013400 	.word	0x40013400
 800a0f4:	40014000 	.word	0x40014000
 800a0f8:	40015000 	.word	0x40015000
 800a0fc:	00010007 	.word	0x00010007

0800a100 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	68da      	ldr	r2, [r3, #12]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f022 0201 	bic.w	r2, r2, #1
 800a116:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	6a1a      	ldr	r2, [r3, #32]
 800a11e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a122:	4013      	ands	r3, r2
 800a124:	2b00      	cmp	r3, #0
 800a126:	d10f      	bne.n	800a148 <HAL_TIM_Base_Stop_IT+0x48>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	6a1a      	ldr	r2, [r3, #32]
 800a12e:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a132:	4013      	ands	r3, r2
 800a134:	2b00      	cmp	r3, #0
 800a136:	d107      	bne.n	800a148 <HAL_TIM_Base_Stop_IT+0x48>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f022 0201 	bic.w	r2, r2, #1
 800a146:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	370c      	adds	r7, #12
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b082      	sub	sp, #8
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d101      	bne.n	800a170 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a16c:	2301      	movs	r3, #1
 800a16e:	e049      	b.n	800a204 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a176:	b2db      	uxtb	r3, r3
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d106      	bne.n	800a18a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f7f9 ff91 	bl	80040ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2202      	movs	r2, #2
 800a18e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	3304      	adds	r3, #4
 800a19a:	4619      	mov	r1, r3
 800a19c:	4610      	mov	r0, r2
 800a19e:	f000 fce9 	bl	800ab74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a202:	2300      	movs	r3, #0
}
 800a204:	4618      	mov	r0, r3
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d109      	bne.n	800a230 <HAL_TIM_PWM_Start+0x24>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a222:	b2db      	uxtb	r3, r3
 800a224:	2b01      	cmp	r3, #1
 800a226:	bf14      	ite	ne
 800a228:	2301      	movne	r3, #1
 800a22a:	2300      	moveq	r3, #0
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	e03c      	b.n	800a2aa <HAL_TIM_PWM_Start+0x9e>
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	2b04      	cmp	r3, #4
 800a234:	d109      	bne.n	800a24a <HAL_TIM_PWM_Start+0x3e>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2b01      	cmp	r3, #1
 800a240:	bf14      	ite	ne
 800a242:	2301      	movne	r3, #1
 800a244:	2300      	moveq	r3, #0
 800a246:	b2db      	uxtb	r3, r3
 800a248:	e02f      	b.n	800a2aa <HAL_TIM_PWM_Start+0x9e>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2b08      	cmp	r3, #8
 800a24e:	d109      	bne.n	800a264 <HAL_TIM_PWM_Start+0x58>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a256:	b2db      	uxtb	r3, r3
 800a258:	2b01      	cmp	r3, #1
 800a25a:	bf14      	ite	ne
 800a25c:	2301      	movne	r3, #1
 800a25e:	2300      	moveq	r3, #0
 800a260:	b2db      	uxtb	r3, r3
 800a262:	e022      	b.n	800a2aa <HAL_TIM_PWM_Start+0x9e>
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	2b0c      	cmp	r3, #12
 800a268:	d109      	bne.n	800a27e <HAL_TIM_PWM_Start+0x72>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a270:	b2db      	uxtb	r3, r3
 800a272:	2b01      	cmp	r3, #1
 800a274:	bf14      	ite	ne
 800a276:	2301      	movne	r3, #1
 800a278:	2300      	moveq	r3, #0
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	e015      	b.n	800a2aa <HAL_TIM_PWM_Start+0x9e>
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	2b10      	cmp	r3, #16
 800a282:	d109      	bne.n	800a298 <HAL_TIM_PWM_Start+0x8c>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	bf14      	ite	ne
 800a290:	2301      	movne	r3, #1
 800a292:	2300      	moveq	r3, #0
 800a294:	b2db      	uxtb	r3, r3
 800a296:	e008      	b.n	800a2aa <HAL_TIM_PWM_Start+0x9e>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	bf14      	ite	ne
 800a2a4:	2301      	movne	r3, #1
 800a2a6:	2300      	moveq	r3, #0
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e0a6      	b.n	800a400 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d104      	bne.n	800a2c2 <HAL_TIM_PWM_Start+0xb6>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2202      	movs	r2, #2
 800a2bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2c0:	e023      	b.n	800a30a <HAL_TIM_PWM_Start+0xfe>
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	2b04      	cmp	r3, #4
 800a2c6:	d104      	bne.n	800a2d2 <HAL_TIM_PWM_Start+0xc6>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2202      	movs	r2, #2
 800a2cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2d0:	e01b      	b.n	800a30a <HAL_TIM_PWM_Start+0xfe>
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	2b08      	cmp	r3, #8
 800a2d6:	d104      	bne.n	800a2e2 <HAL_TIM_PWM_Start+0xd6>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2202      	movs	r2, #2
 800a2dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2e0:	e013      	b.n	800a30a <HAL_TIM_PWM_Start+0xfe>
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	2b0c      	cmp	r3, #12
 800a2e6:	d104      	bne.n	800a2f2 <HAL_TIM_PWM_Start+0xe6>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2202      	movs	r2, #2
 800a2ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a2f0:	e00b      	b.n	800a30a <HAL_TIM_PWM_Start+0xfe>
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	2b10      	cmp	r3, #16
 800a2f6:	d104      	bne.n	800a302 <HAL_TIM_PWM_Start+0xf6>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2202      	movs	r2, #2
 800a2fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a300:	e003      	b.n	800a30a <HAL_TIM_PWM_Start+0xfe>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2202      	movs	r2, #2
 800a306:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2201      	movs	r2, #1
 800a310:	6839      	ldr	r1, [r7, #0]
 800a312:	4618      	mov	r0, r3
 800a314:	f001 f8a8 	bl	800b468 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a3a      	ldr	r2, [pc, #232]	@ (800a408 <HAL_TIM_PWM_Start+0x1fc>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d018      	beq.n	800a354 <HAL_TIM_PWM_Start+0x148>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a39      	ldr	r2, [pc, #228]	@ (800a40c <HAL_TIM_PWM_Start+0x200>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d013      	beq.n	800a354 <HAL_TIM_PWM_Start+0x148>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a37      	ldr	r2, [pc, #220]	@ (800a410 <HAL_TIM_PWM_Start+0x204>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d00e      	beq.n	800a354 <HAL_TIM_PWM_Start+0x148>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a36      	ldr	r2, [pc, #216]	@ (800a414 <HAL_TIM_PWM_Start+0x208>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d009      	beq.n	800a354 <HAL_TIM_PWM_Start+0x148>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a34      	ldr	r2, [pc, #208]	@ (800a418 <HAL_TIM_PWM_Start+0x20c>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d004      	beq.n	800a354 <HAL_TIM_PWM_Start+0x148>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a33      	ldr	r2, [pc, #204]	@ (800a41c <HAL_TIM_PWM_Start+0x210>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d101      	bne.n	800a358 <HAL_TIM_PWM_Start+0x14c>
 800a354:	2301      	movs	r3, #1
 800a356:	e000      	b.n	800a35a <HAL_TIM_PWM_Start+0x14e>
 800a358:	2300      	movs	r3, #0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d007      	beq.n	800a36e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a36c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a25      	ldr	r2, [pc, #148]	@ (800a408 <HAL_TIM_PWM_Start+0x1fc>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d022      	beq.n	800a3be <HAL_TIM_PWM_Start+0x1b2>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a380:	d01d      	beq.n	800a3be <HAL_TIM_PWM_Start+0x1b2>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a26      	ldr	r2, [pc, #152]	@ (800a420 <HAL_TIM_PWM_Start+0x214>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d018      	beq.n	800a3be <HAL_TIM_PWM_Start+0x1b2>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a24      	ldr	r2, [pc, #144]	@ (800a424 <HAL_TIM_PWM_Start+0x218>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d013      	beq.n	800a3be <HAL_TIM_PWM_Start+0x1b2>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a23      	ldr	r2, [pc, #140]	@ (800a428 <HAL_TIM_PWM_Start+0x21c>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d00e      	beq.n	800a3be <HAL_TIM_PWM_Start+0x1b2>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a19      	ldr	r2, [pc, #100]	@ (800a40c <HAL_TIM_PWM_Start+0x200>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d009      	beq.n	800a3be <HAL_TIM_PWM_Start+0x1b2>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a18      	ldr	r2, [pc, #96]	@ (800a410 <HAL_TIM_PWM_Start+0x204>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d004      	beq.n	800a3be <HAL_TIM_PWM_Start+0x1b2>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a18      	ldr	r2, [pc, #96]	@ (800a41c <HAL_TIM_PWM_Start+0x210>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d115      	bne.n	800a3ea <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	689a      	ldr	r2, [r3, #8]
 800a3c4:	4b19      	ldr	r3, [pc, #100]	@ (800a42c <HAL_TIM_PWM_Start+0x220>)
 800a3c6:	4013      	ands	r3, r2
 800a3c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2b06      	cmp	r3, #6
 800a3ce:	d015      	beq.n	800a3fc <HAL_TIM_PWM_Start+0x1f0>
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3d6:	d011      	beq.n	800a3fc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f042 0201 	orr.w	r2, r2, #1
 800a3e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3e8:	e008      	b.n	800a3fc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f042 0201 	orr.w	r2, r2, #1
 800a3f8:	601a      	str	r2, [r3, #0]
 800a3fa:	e000      	b.n	800a3fe <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3fe:	2300      	movs	r3, #0
}
 800a400:	4618      	mov	r0, r3
 800a402:	3710      	adds	r7, #16
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	40012c00 	.word	0x40012c00
 800a40c:	40013400 	.word	0x40013400
 800a410:	40014000 	.word	0x40014000
 800a414:	40014400 	.word	0x40014400
 800a418:	40014800 	.word	0x40014800
 800a41c:	40015000 	.word	0x40015000
 800a420:	40000400 	.word	0x40000400
 800a424:	40000800 	.word	0x40000800
 800a428:	40000c00 	.word	0x40000c00
 800a42c:	00010007 	.word	0x00010007

0800a430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	f003 0302 	and.w	r3, r3, #2
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d020      	beq.n	800a494 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f003 0302 	and.w	r3, r3, #2
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d01b      	beq.n	800a494 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f06f 0202 	mvn.w	r2, #2
 800a464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2201      	movs	r2, #1
 800a46a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	699b      	ldr	r3, [r3, #24]
 800a472:	f003 0303 	and.w	r3, r3, #3
 800a476:	2b00      	cmp	r3, #0
 800a478:	d003      	beq.n	800a482 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 fb5c 	bl	800ab38 <HAL_TIM_IC_CaptureCallback>
 800a480:	e005      	b.n	800a48e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 fb4e 	bl	800ab24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 fb5f 	bl	800ab4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	f003 0304 	and.w	r3, r3, #4
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d020      	beq.n	800a4e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f003 0304 	and.w	r3, r3, #4
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d01b      	beq.n	800a4e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f06f 0204 	mvn.w	r2, #4
 800a4b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2202      	movs	r2, #2
 800a4b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	699b      	ldr	r3, [r3, #24]
 800a4be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d003      	beq.n	800a4ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 fb36 	bl	800ab38 <HAL_TIM_IC_CaptureCallback>
 800a4cc:	e005      	b.n	800a4da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 fb28 	bl	800ab24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 fb39 	bl	800ab4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	f003 0308 	and.w	r3, r3, #8
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d020      	beq.n	800a52c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f003 0308 	and.w	r3, r3, #8
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d01b      	beq.n	800a52c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f06f 0208 	mvn.w	r2, #8
 800a4fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2204      	movs	r2, #4
 800a502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	69db      	ldr	r3, [r3, #28]
 800a50a:	f003 0303 	and.w	r3, r3, #3
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d003      	beq.n	800a51a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 fb10 	bl	800ab38 <HAL_TIM_IC_CaptureCallback>
 800a518:	e005      	b.n	800a526 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fb02 	bl	800ab24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 fb13 	bl	800ab4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	f003 0310 	and.w	r3, r3, #16
 800a532:	2b00      	cmp	r3, #0
 800a534:	d020      	beq.n	800a578 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f003 0310 	and.w	r3, r3, #16
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d01b      	beq.n	800a578 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f06f 0210 	mvn.w	r2, #16
 800a548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2208      	movs	r2, #8
 800a54e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	69db      	ldr	r3, [r3, #28]
 800a556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d003      	beq.n	800a566 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 faea 	bl	800ab38 <HAL_TIM_IC_CaptureCallback>
 800a564:	e005      	b.n	800a572 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 fadc 	bl	800ab24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 faed 	bl	800ab4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	f003 0301 	and.w	r3, r3, #1
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00c      	beq.n	800a59c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f003 0301 	and.w	r3, r3, #1
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d007      	beq.n	800a59c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f06f 0201 	mvn.w	r2, #1
 800a594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f7f8 fb6e 	bl	8002c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d104      	bne.n	800a5b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00c      	beq.n	800a5ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d007      	beq.n	800a5ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a5c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f001 f8a9 	bl	800b71c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d00c      	beq.n	800a5ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d007      	beq.n	800a5ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a5e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f001 f8a1 	bl	800b730 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d00c      	beq.n	800a612 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d007      	beq.n	800a612 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a60a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 faa7 	bl	800ab60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	f003 0320 	and.w	r3, r3, #32
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00c      	beq.n	800a636 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f003 0320 	and.w	r3, r3, #32
 800a622:	2b00      	cmp	r3, #0
 800a624:	d007      	beq.n	800a636 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f06f 0220 	mvn.w	r2, #32
 800a62e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f001 f869 	bl	800b708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00c      	beq.n	800a65a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a646:	2b00      	cmp	r3, #0
 800a648:	d007      	beq.n	800a65a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f001 f875 	bl	800b744 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00c      	beq.n	800a67e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d007      	beq.n	800a67e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f001 f86d 	bl	800b758 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a684:	2b00      	cmp	r3, #0
 800a686:	d00c      	beq.n	800a6a2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d007      	beq.n	800a6a2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a69a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f001 f865 	bl	800b76c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00c      	beq.n	800a6c6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d007      	beq.n	800a6c6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a6be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f001 f85d 	bl	800b780 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6c6:	bf00      	nop
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
	...

0800a6d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b086      	sub	sp, #24
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d101      	bne.n	800a6ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a6ea:	2302      	movs	r3, #2
 800a6ec:	e0ff      	b.n	800a8ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2b14      	cmp	r3, #20
 800a6fa:	f200 80f0 	bhi.w	800a8de <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a6fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a704 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a704:	0800a759 	.word	0x0800a759
 800a708:	0800a8df 	.word	0x0800a8df
 800a70c:	0800a8df 	.word	0x0800a8df
 800a710:	0800a8df 	.word	0x0800a8df
 800a714:	0800a799 	.word	0x0800a799
 800a718:	0800a8df 	.word	0x0800a8df
 800a71c:	0800a8df 	.word	0x0800a8df
 800a720:	0800a8df 	.word	0x0800a8df
 800a724:	0800a7db 	.word	0x0800a7db
 800a728:	0800a8df 	.word	0x0800a8df
 800a72c:	0800a8df 	.word	0x0800a8df
 800a730:	0800a8df 	.word	0x0800a8df
 800a734:	0800a81b 	.word	0x0800a81b
 800a738:	0800a8df 	.word	0x0800a8df
 800a73c:	0800a8df 	.word	0x0800a8df
 800a740:	0800a8df 	.word	0x0800a8df
 800a744:	0800a85d 	.word	0x0800a85d
 800a748:	0800a8df 	.word	0x0800a8df
 800a74c:	0800a8df 	.word	0x0800a8df
 800a750:	0800a8df 	.word	0x0800a8df
 800a754:	0800a89d 	.word	0x0800a89d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	68b9      	ldr	r1, [r7, #8]
 800a75e:	4618      	mov	r0, r3
 800a760:	f000 fabc 	bl	800acdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	699a      	ldr	r2, [r3, #24]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f042 0208 	orr.w	r2, r2, #8
 800a772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	699a      	ldr	r2, [r3, #24]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f022 0204 	bic.w	r2, r2, #4
 800a782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	6999      	ldr	r1, [r3, #24]
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	691a      	ldr	r2, [r3, #16]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	430a      	orrs	r2, r1
 800a794:	619a      	str	r2, [r3, #24]
      break;
 800a796:	e0a5      	b.n	800a8e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	68b9      	ldr	r1, [r7, #8]
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f000 fb36 	bl	800ae10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	699a      	ldr	r2, [r3, #24]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a7b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	699a      	ldr	r2, [r3, #24]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a7c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	6999      	ldr	r1, [r3, #24]
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	691b      	ldr	r3, [r3, #16]
 800a7ce:	021a      	lsls	r2, r3, #8
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	430a      	orrs	r2, r1
 800a7d6:	619a      	str	r2, [r3, #24]
      break;
 800a7d8:	e084      	b.n	800a8e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	68b9      	ldr	r1, [r7, #8]
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f000 fba9 	bl	800af38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	69da      	ldr	r2, [r3, #28]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f042 0208 	orr.w	r2, r2, #8
 800a7f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	69da      	ldr	r2, [r3, #28]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f022 0204 	bic.w	r2, r2, #4
 800a804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	69d9      	ldr	r1, [r3, #28]
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	691a      	ldr	r2, [r3, #16]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	430a      	orrs	r2, r1
 800a816:	61da      	str	r2, [r3, #28]
      break;
 800a818:	e064      	b.n	800a8e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	68b9      	ldr	r1, [r7, #8]
 800a820:	4618      	mov	r0, r3
 800a822:	f000 fc1b 	bl	800b05c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	69da      	ldr	r2, [r3, #28]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a834:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	69da      	ldr	r2, [r3, #28]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a844:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	69d9      	ldr	r1, [r3, #28]
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	021a      	lsls	r2, r3, #8
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	430a      	orrs	r2, r1
 800a858:	61da      	str	r2, [r3, #28]
      break;
 800a85a:	e043      	b.n	800a8e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68b9      	ldr	r1, [r7, #8]
 800a862:	4618      	mov	r0, r3
 800a864:	f000 fc8e 	bl	800b184 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f042 0208 	orr.w	r2, r2, #8
 800a876:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f022 0204 	bic.w	r2, r2, #4
 800a886:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	691a      	ldr	r2, [r3, #16]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	430a      	orrs	r2, r1
 800a898:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a89a:	e023      	b.n	800a8e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	68b9      	ldr	r1, [r7, #8]
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f000 fcd8 	bl	800b258 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a8b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a8c6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	021a      	lsls	r2, r3, #8
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	430a      	orrs	r2, r1
 800a8da:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a8dc:	e002      	b.n	800a8e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	75fb      	strb	r3, [r7, #23]
      break;
 800a8e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a8ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3718      	adds	r7, #24
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop

0800a8f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a902:	2300      	movs	r3, #0
 800a904:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d101      	bne.n	800a914 <HAL_TIM_ConfigClockSource+0x1c>
 800a910:	2302      	movs	r3, #2
 800a912:	e0f6      	b.n	800ab02 <HAL_TIM_ConfigClockSource+0x20a>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2202      	movs	r2, #2
 800a920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a932:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a93e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a6f      	ldr	r2, [pc, #444]	@ (800ab0c <HAL_TIM_ConfigClockSource+0x214>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	f000 80c1 	beq.w	800aad6 <HAL_TIM_ConfigClockSource+0x1de>
 800a954:	4a6d      	ldr	r2, [pc, #436]	@ (800ab0c <HAL_TIM_ConfigClockSource+0x214>)
 800a956:	4293      	cmp	r3, r2
 800a958:	f200 80c6 	bhi.w	800aae8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a95c:	4a6c      	ldr	r2, [pc, #432]	@ (800ab10 <HAL_TIM_ConfigClockSource+0x218>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	f000 80b9 	beq.w	800aad6 <HAL_TIM_ConfigClockSource+0x1de>
 800a964:	4a6a      	ldr	r2, [pc, #424]	@ (800ab10 <HAL_TIM_ConfigClockSource+0x218>)
 800a966:	4293      	cmp	r3, r2
 800a968:	f200 80be 	bhi.w	800aae8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a96c:	4a69      	ldr	r2, [pc, #420]	@ (800ab14 <HAL_TIM_ConfigClockSource+0x21c>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	f000 80b1 	beq.w	800aad6 <HAL_TIM_ConfigClockSource+0x1de>
 800a974:	4a67      	ldr	r2, [pc, #412]	@ (800ab14 <HAL_TIM_ConfigClockSource+0x21c>)
 800a976:	4293      	cmp	r3, r2
 800a978:	f200 80b6 	bhi.w	800aae8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a97c:	4a66      	ldr	r2, [pc, #408]	@ (800ab18 <HAL_TIM_ConfigClockSource+0x220>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	f000 80a9 	beq.w	800aad6 <HAL_TIM_ConfigClockSource+0x1de>
 800a984:	4a64      	ldr	r2, [pc, #400]	@ (800ab18 <HAL_TIM_ConfigClockSource+0x220>)
 800a986:	4293      	cmp	r3, r2
 800a988:	f200 80ae 	bhi.w	800aae8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a98c:	4a63      	ldr	r2, [pc, #396]	@ (800ab1c <HAL_TIM_ConfigClockSource+0x224>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	f000 80a1 	beq.w	800aad6 <HAL_TIM_ConfigClockSource+0x1de>
 800a994:	4a61      	ldr	r2, [pc, #388]	@ (800ab1c <HAL_TIM_ConfigClockSource+0x224>)
 800a996:	4293      	cmp	r3, r2
 800a998:	f200 80a6 	bhi.w	800aae8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a99c:	4a60      	ldr	r2, [pc, #384]	@ (800ab20 <HAL_TIM_ConfigClockSource+0x228>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	f000 8099 	beq.w	800aad6 <HAL_TIM_ConfigClockSource+0x1de>
 800a9a4:	4a5e      	ldr	r2, [pc, #376]	@ (800ab20 <HAL_TIM_ConfigClockSource+0x228>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	f200 809e 	bhi.w	800aae8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a9b0:	f000 8091 	beq.w	800aad6 <HAL_TIM_ConfigClockSource+0x1de>
 800a9b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a9b8:	f200 8096 	bhi.w	800aae8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9c0:	f000 8089 	beq.w	800aad6 <HAL_TIM_ConfigClockSource+0x1de>
 800a9c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9c8:	f200 808e 	bhi.w	800aae8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9d0:	d03e      	beq.n	800aa50 <HAL_TIM_ConfigClockSource+0x158>
 800a9d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9d6:	f200 8087 	bhi.w	800aae8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9de:	f000 8086 	beq.w	800aaee <HAL_TIM_ConfigClockSource+0x1f6>
 800a9e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9e6:	d87f      	bhi.n	800aae8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9e8:	2b70      	cmp	r3, #112	@ 0x70
 800a9ea:	d01a      	beq.n	800aa22 <HAL_TIM_ConfigClockSource+0x12a>
 800a9ec:	2b70      	cmp	r3, #112	@ 0x70
 800a9ee:	d87b      	bhi.n	800aae8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9f0:	2b60      	cmp	r3, #96	@ 0x60
 800a9f2:	d050      	beq.n	800aa96 <HAL_TIM_ConfigClockSource+0x19e>
 800a9f4:	2b60      	cmp	r3, #96	@ 0x60
 800a9f6:	d877      	bhi.n	800aae8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9f8:	2b50      	cmp	r3, #80	@ 0x50
 800a9fa:	d03c      	beq.n	800aa76 <HAL_TIM_ConfigClockSource+0x17e>
 800a9fc:	2b50      	cmp	r3, #80	@ 0x50
 800a9fe:	d873      	bhi.n	800aae8 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa00:	2b40      	cmp	r3, #64	@ 0x40
 800aa02:	d058      	beq.n	800aab6 <HAL_TIM_ConfigClockSource+0x1be>
 800aa04:	2b40      	cmp	r3, #64	@ 0x40
 800aa06:	d86f      	bhi.n	800aae8 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa08:	2b30      	cmp	r3, #48	@ 0x30
 800aa0a:	d064      	beq.n	800aad6 <HAL_TIM_ConfigClockSource+0x1de>
 800aa0c:	2b30      	cmp	r3, #48	@ 0x30
 800aa0e:	d86b      	bhi.n	800aae8 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa10:	2b20      	cmp	r3, #32
 800aa12:	d060      	beq.n	800aad6 <HAL_TIM_ConfigClockSource+0x1de>
 800aa14:	2b20      	cmp	r3, #32
 800aa16:	d867      	bhi.n	800aae8 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d05c      	beq.n	800aad6 <HAL_TIM_ConfigClockSource+0x1de>
 800aa1c:	2b10      	cmp	r3, #16
 800aa1e:	d05a      	beq.n	800aad6 <HAL_TIM_ConfigClockSource+0x1de>
 800aa20:	e062      	b.n	800aae8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa32:	f000 fcf9 	bl	800b428 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aa44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	68ba      	ldr	r2, [r7, #8]
 800aa4c:	609a      	str	r2, [r3, #8]
      break;
 800aa4e:	e04f      	b.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa60:	f000 fce2 	bl	800b428 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	689a      	ldr	r2, [r3, #8]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aa72:	609a      	str	r2, [r3, #8]
      break;
 800aa74:	e03c      	b.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa82:	461a      	mov	r2, r3
 800aa84:	f000 fc54 	bl	800b330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2150      	movs	r1, #80	@ 0x50
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f000 fcad 	bl	800b3ee <TIM_ITRx_SetConfig>
      break;
 800aa94:	e02c      	b.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	f000 fc73 	bl	800b38e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2160      	movs	r1, #96	@ 0x60
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 fc9d 	bl	800b3ee <TIM_ITRx_SetConfig>
      break;
 800aab4:	e01c      	b.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aac2:	461a      	mov	r2, r3
 800aac4:	f000 fc34 	bl	800b330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2140      	movs	r1, #64	@ 0x40
 800aace:	4618      	mov	r0, r3
 800aad0:	f000 fc8d 	bl	800b3ee <TIM_ITRx_SetConfig>
      break;
 800aad4:	e00c      	b.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4619      	mov	r1, r3
 800aae0:	4610      	mov	r0, r2
 800aae2:	f000 fc84 	bl	800b3ee <TIM_ITRx_SetConfig>
      break;
 800aae6:	e003      	b.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	73fb      	strb	r3, [r7, #15]
      break;
 800aaec:	e000      	b.n	800aaf0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800aaee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ab00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	00100070 	.word	0x00100070
 800ab10:	00100060 	.word	0x00100060
 800ab14:	00100050 	.word	0x00100050
 800ab18:	00100040 	.word	0x00100040
 800ab1c:	00100030 	.word	0x00100030
 800ab20:	00100020 	.word	0x00100020

0800ab24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab2c:	bf00      	nop
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab40:	bf00      	nop
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab54:	bf00      	nop
 800ab56:	370c      	adds	r7, #12
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab68:	bf00      	nop
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b085      	sub	sp, #20
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a4c      	ldr	r2, [pc, #304]	@ (800acb8 <TIM_Base_SetConfig+0x144>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d017      	beq.n	800abbc <TIM_Base_SetConfig+0x48>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab92:	d013      	beq.n	800abbc <TIM_Base_SetConfig+0x48>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	4a49      	ldr	r2, [pc, #292]	@ (800acbc <TIM_Base_SetConfig+0x148>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d00f      	beq.n	800abbc <TIM_Base_SetConfig+0x48>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a48      	ldr	r2, [pc, #288]	@ (800acc0 <TIM_Base_SetConfig+0x14c>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d00b      	beq.n	800abbc <TIM_Base_SetConfig+0x48>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a47      	ldr	r2, [pc, #284]	@ (800acc4 <TIM_Base_SetConfig+0x150>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d007      	beq.n	800abbc <TIM_Base_SetConfig+0x48>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4a46      	ldr	r2, [pc, #280]	@ (800acc8 <TIM_Base_SetConfig+0x154>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d003      	beq.n	800abbc <TIM_Base_SetConfig+0x48>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a45      	ldr	r2, [pc, #276]	@ (800accc <TIM_Base_SetConfig+0x158>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d108      	bne.n	800abce <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	68fa      	ldr	r2, [r7, #12]
 800abca:	4313      	orrs	r3, r2
 800abcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a39      	ldr	r2, [pc, #228]	@ (800acb8 <TIM_Base_SetConfig+0x144>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d023      	beq.n	800ac1e <TIM_Base_SetConfig+0xaa>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abdc:	d01f      	beq.n	800ac1e <TIM_Base_SetConfig+0xaa>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a36      	ldr	r2, [pc, #216]	@ (800acbc <TIM_Base_SetConfig+0x148>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d01b      	beq.n	800ac1e <TIM_Base_SetConfig+0xaa>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a35      	ldr	r2, [pc, #212]	@ (800acc0 <TIM_Base_SetConfig+0x14c>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d017      	beq.n	800ac1e <TIM_Base_SetConfig+0xaa>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4a34      	ldr	r2, [pc, #208]	@ (800acc4 <TIM_Base_SetConfig+0x150>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d013      	beq.n	800ac1e <TIM_Base_SetConfig+0xaa>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a33      	ldr	r2, [pc, #204]	@ (800acc8 <TIM_Base_SetConfig+0x154>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d00f      	beq.n	800ac1e <TIM_Base_SetConfig+0xaa>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a33      	ldr	r2, [pc, #204]	@ (800acd0 <TIM_Base_SetConfig+0x15c>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d00b      	beq.n	800ac1e <TIM_Base_SetConfig+0xaa>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a32      	ldr	r2, [pc, #200]	@ (800acd4 <TIM_Base_SetConfig+0x160>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d007      	beq.n	800ac1e <TIM_Base_SetConfig+0xaa>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a31      	ldr	r2, [pc, #196]	@ (800acd8 <TIM_Base_SetConfig+0x164>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d003      	beq.n	800ac1e <TIM_Base_SetConfig+0xaa>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a2c      	ldr	r2, [pc, #176]	@ (800accc <TIM_Base_SetConfig+0x158>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d108      	bne.n	800ac30 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	68fa      	ldr	r2, [r7, #12]
 800ac42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	689a      	ldr	r2, [r3, #8]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	4a18      	ldr	r2, [pc, #96]	@ (800acb8 <TIM_Base_SetConfig+0x144>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d013      	beq.n	800ac84 <TIM_Base_SetConfig+0x110>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a1a      	ldr	r2, [pc, #104]	@ (800acc8 <TIM_Base_SetConfig+0x154>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d00f      	beq.n	800ac84 <TIM_Base_SetConfig+0x110>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4a1a      	ldr	r2, [pc, #104]	@ (800acd0 <TIM_Base_SetConfig+0x15c>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d00b      	beq.n	800ac84 <TIM_Base_SetConfig+0x110>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a19      	ldr	r2, [pc, #100]	@ (800acd4 <TIM_Base_SetConfig+0x160>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d007      	beq.n	800ac84 <TIM_Base_SetConfig+0x110>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a18      	ldr	r2, [pc, #96]	@ (800acd8 <TIM_Base_SetConfig+0x164>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d003      	beq.n	800ac84 <TIM_Base_SetConfig+0x110>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a13      	ldr	r2, [pc, #76]	@ (800accc <TIM_Base_SetConfig+0x158>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d103      	bne.n	800ac8c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	691a      	ldr	r2, [r3, #16]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2201      	movs	r2, #1
 800ac90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	691b      	ldr	r3, [r3, #16]
 800ac96:	f003 0301 	and.w	r3, r3, #1
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d105      	bne.n	800acaa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	f023 0201 	bic.w	r2, r3, #1
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	611a      	str	r2, [r3, #16]
  }
}
 800acaa:	bf00      	nop
 800acac:	3714      	adds	r7, #20
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop
 800acb8:	40012c00 	.word	0x40012c00
 800acbc:	40000400 	.word	0x40000400
 800acc0:	40000800 	.word	0x40000800
 800acc4:	40000c00 	.word	0x40000c00
 800acc8:	40013400 	.word	0x40013400
 800accc:	40015000 	.word	0x40015000
 800acd0:	40014000 	.word	0x40014000
 800acd4:	40014400 	.word	0x40014400
 800acd8:	40014800 	.word	0x40014800

0800acdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800acdc:	b480      	push	{r7}
 800acde:	b087      	sub	sp, #28
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a1b      	ldr	r3, [r3, #32]
 800acea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6a1b      	ldr	r3, [r3, #32]
 800acf0:	f023 0201 	bic.w	r2, r3, #1
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	699b      	ldr	r3, [r3, #24]
 800ad02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f023 0303 	bic.w	r3, r3, #3
 800ad16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	f023 0302 	bic.w	r3, r3, #2
 800ad28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	697a      	ldr	r2, [r7, #20]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a30      	ldr	r2, [pc, #192]	@ (800adf8 <TIM_OC1_SetConfig+0x11c>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d013      	beq.n	800ad64 <TIM_OC1_SetConfig+0x88>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a2f      	ldr	r2, [pc, #188]	@ (800adfc <TIM_OC1_SetConfig+0x120>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d00f      	beq.n	800ad64 <TIM_OC1_SetConfig+0x88>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a2e      	ldr	r2, [pc, #184]	@ (800ae00 <TIM_OC1_SetConfig+0x124>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d00b      	beq.n	800ad64 <TIM_OC1_SetConfig+0x88>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a2d      	ldr	r2, [pc, #180]	@ (800ae04 <TIM_OC1_SetConfig+0x128>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d007      	beq.n	800ad64 <TIM_OC1_SetConfig+0x88>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4a2c      	ldr	r2, [pc, #176]	@ (800ae08 <TIM_OC1_SetConfig+0x12c>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d003      	beq.n	800ad64 <TIM_OC1_SetConfig+0x88>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4a2b      	ldr	r2, [pc, #172]	@ (800ae0c <TIM_OC1_SetConfig+0x130>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d10c      	bne.n	800ad7e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	f023 0308 	bic.w	r3, r3, #8
 800ad6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	697a      	ldr	r2, [r7, #20]
 800ad72:	4313      	orrs	r3, r2
 800ad74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	f023 0304 	bic.w	r3, r3, #4
 800ad7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4a1d      	ldr	r2, [pc, #116]	@ (800adf8 <TIM_OC1_SetConfig+0x11c>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d013      	beq.n	800adae <TIM_OC1_SetConfig+0xd2>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4a1c      	ldr	r2, [pc, #112]	@ (800adfc <TIM_OC1_SetConfig+0x120>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d00f      	beq.n	800adae <TIM_OC1_SetConfig+0xd2>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	4a1b      	ldr	r2, [pc, #108]	@ (800ae00 <TIM_OC1_SetConfig+0x124>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d00b      	beq.n	800adae <TIM_OC1_SetConfig+0xd2>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4a1a      	ldr	r2, [pc, #104]	@ (800ae04 <TIM_OC1_SetConfig+0x128>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d007      	beq.n	800adae <TIM_OC1_SetConfig+0xd2>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4a19      	ldr	r2, [pc, #100]	@ (800ae08 <TIM_OC1_SetConfig+0x12c>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d003      	beq.n	800adae <TIM_OC1_SetConfig+0xd2>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4a18      	ldr	r2, [pc, #96]	@ (800ae0c <TIM_OC1_SetConfig+0x130>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d111      	bne.n	800add2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800adb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800adbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	695b      	ldr	r3, [r3, #20]
 800adc2:	693a      	ldr	r2, [r7, #16]
 800adc4:	4313      	orrs	r3, r2
 800adc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	699b      	ldr	r3, [r3, #24]
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	4313      	orrs	r3, r2
 800add0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	693a      	ldr	r2, [r7, #16]
 800add6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	685a      	ldr	r2, [r3, #4]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	697a      	ldr	r2, [r7, #20]
 800adea:	621a      	str	r2, [r3, #32]
}
 800adec:	bf00      	nop
 800adee:	371c      	adds	r7, #28
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr
 800adf8:	40012c00 	.word	0x40012c00
 800adfc:	40013400 	.word	0x40013400
 800ae00:	40014000 	.word	0x40014000
 800ae04:	40014400 	.word	0x40014400
 800ae08:	40014800 	.word	0x40014800
 800ae0c:	40015000 	.word	0x40015000

0800ae10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b087      	sub	sp, #28
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a1b      	ldr	r3, [r3, #32]
 800ae1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6a1b      	ldr	r3, [r3, #32]
 800ae24:	f023 0210 	bic.w	r2, r3, #16
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	699b      	ldr	r3, [r3, #24]
 800ae36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ae3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	021b      	lsls	r3, r3, #8
 800ae52:	68fa      	ldr	r2, [r7, #12]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	f023 0320 	bic.w	r3, r3, #32
 800ae5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	011b      	lsls	r3, r3, #4
 800ae66:	697a      	ldr	r2, [r7, #20]
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a2c      	ldr	r2, [pc, #176]	@ (800af20 <TIM_OC2_SetConfig+0x110>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d007      	beq.n	800ae84 <TIM_OC2_SetConfig+0x74>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a2b      	ldr	r2, [pc, #172]	@ (800af24 <TIM_OC2_SetConfig+0x114>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d003      	beq.n	800ae84 <TIM_OC2_SetConfig+0x74>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a2a      	ldr	r2, [pc, #168]	@ (800af28 <TIM_OC2_SetConfig+0x118>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d10d      	bne.n	800aea0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	011b      	lsls	r3, r3, #4
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	4313      	orrs	r3, r2
 800ae96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4a1f      	ldr	r2, [pc, #124]	@ (800af20 <TIM_OC2_SetConfig+0x110>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d013      	beq.n	800aed0 <TIM_OC2_SetConfig+0xc0>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4a1e      	ldr	r2, [pc, #120]	@ (800af24 <TIM_OC2_SetConfig+0x114>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d00f      	beq.n	800aed0 <TIM_OC2_SetConfig+0xc0>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a1e      	ldr	r2, [pc, #120]	@ (800af2c <TIM_OC2_SetConfig+0x11c>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d00b      	beq.n	800aed0 <TIM_OC2_SetConfig+0xc0>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a1d      	ldr	r2, [pc, #116]	@ (800af30 <TIM_OC2_SetConfig+0x120>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d007      	beq.n	800aed0 <TIM_OC2_SetConfig+0xc0>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4a1c      	ldr	r2, [pc, #112]	@ (800af34 <TIM_OC2_SetConfig+0x124>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d003      	beq.n	800aed0 <TIM_OC2_SetConfig+0xc0>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a17      	ldr	r2, [pc, #92]	@ (800af28 <TIM_OC2_SetConfig+0x118>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d113      	bne.n	800aef8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aed6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aede:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	695b      	ldr	r3, [r3, #20]
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	693a      	ldr	r2, [r7, #16]
 800aee8:	4313      	orrs	r3, r2
 800aeea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	699b      	ldr	r3, [r3, #24]
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	693a      	ldr	r2, [r7, #16]
 800aef4:	4313      	orrs	r3, r2
 800aef6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	693a      	ldr	r2, [r7, #16]
 800aefc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	68fa      	ldr	r2, [r7, #12]
 800af02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	685a      	ldr	r2, [r3, #4]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	697a      	ldr	r2, [r7, #20]
 800af10:	621a      	str	r2, [r3, #32]
}
 800af12:	bf00      	nop
 800af14:	371c      	adds	r7, #28
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	40012c00 	.word	0x40012c00
 800af24:	40013400 	.word	0x40013400
 800af28:	40015000 	.word	0x40015000
 800af2c:	40014000 	.word	0x40014000
 800af30:	40014400 	.word	0x40014400
 800af34:	40014800 	.word	0x40014800

0800af38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af38:	b480      	push	{r7}
 800af3a:	b087      	sub	sp, #28
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6a1b      	ldr	r3, [r3, #32]
 800af46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a1b      	ldr	r3, [r3, #32]
 800af4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	69db      	ldr	r3, [r3, #28]
 800af5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f023 0303 	bic.w	r3, r3, #3
 800af72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800af84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	021b      	lsls	r3, r3, #8
 800af8c:	697a      	ldr	r2, [r7, #20]
 800af8e:	4313      	orrs	r3, r2
 800af90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a2b      	ldr	r2, [pc, #172]	@ (800b044 <TIM_OC3_SetConfig+0x10c>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d007      	beq.n	800afaa <TIM_OC3_SetConfig+0x72>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4a2a      	ldr	r2, [pc, #168]	@ (800b048 <TIM_OC3_SetConfig+0x110>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d003      	beq.n	800afaa <TIM_OC3_SetConfig+0x72>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	4a29      	ldr	r2, [pc, #164]	@ (800b04c <TIM_OC3_SetConfig+0x114>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d10d      	bne.n	800afc6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800afb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	68db      	ldr	r3, [r3, #12]
 800afb6:	021b      	lsls	r3, r3, #8
 800afb8:	697a      	ldr	r2, [r7, #20]
 800afba:	4313      	orrs	r3, r2
 800afbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800afc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4a1e      	ldr	r2, [pc, #120]	@ (800b044 <TIM_OC3_SetConfig+0x10c>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d013      	beq.n	800aff6 <TIM_OC3_SetConfig+0xbe>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4a1d      	ldr	r2, [pc, #116]	@ (800b048 <TIM_OC3_SetConfig+0x110>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d00f      	beq.n	800aff6 <TIM_OC3_SetConfig+0xbe>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	4a1d      	ldr	r2, [pc, #116]	@ (800b050 <TIM_OC3_SetConfig+0x118>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d00b      	beq.n	800aff6 <TIM_OC3_SetConfig+0xbe>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	4a1c      	ldr	r2, [pc, #112]	@ (800b054 <TIM_OC3_SetConfig+0x11c>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d007      	beq.n	800aff6 <TIM_OC3_SetConfig+0xbe>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	4a1b      	ldr	r2, [pc, #108]	@ (800b058 <TIM_OC3_SetConfig+0x120>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d003      	beq.n	800aff6 <TIM_OC3_SetConfig+0xbe>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	4a16      	ldr	r2, [pc, #88]	@ (800b04c <TIM_OC3_SetConfig+0x114>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d113      	bne.n	800b01e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800affc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	695b      	ldr	r3, [r3, #20]
 800b00a:	011b      	lsls	r3, r3, #4
 800b00c:	693a      	ldr	r2, [r7, #16]
 800b00e:	4313      	orrs	r3, r2
 800b010:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	699b      	ldr	r3, [r3, #24]
 800b016:	011b      	lsls	r3, r3, #4
 800b018:	693a      	ldr	r2, [r7, #16]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	693a      	ldr	r2, [r7, #16]
 800b022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	68fa      	ldr	r2, [r7, #12]
 800b028:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	685a      	ldr	r2, [r3, #4]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	697a      	ldr	r2, [r7, #20]
 800b036:	621a      	str	r2, [r3, #32]
}
 800b038:	bf00      	nop
 800b03a:	371c      	adds	r7, #28
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr
 800b044:	40012c00 	.word	0x40012c00
 800b048:	40013400 	.word	0x40013400
 800b04c:	40015000 	.word	0x40015000
 800b050:	40014000 	.word	0x40014000
 800b054:	40014400 	.word	0x40014400
 800b058:	40014800 	.word	0x40014800

0800b05c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b087      	sub	sp, #28
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a1b      	ldr	r3, [r3, #32]
 800b06a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6a1b      	ldr	r3, [r3, #32]
 800b070:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	69db      	ldr	r3, [r3, #28]
 800b082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b08a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b08e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	021b      	lsls	r3, r3, #8
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b0aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	031b      	lsls	r3, r3, #12
 800b0b2:	697a      	ldr	r2, [r7, #20]
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a2c      	ldr	r2, [pc, #176]	@ (800b16c <TIM_OC4_SetConfig+0x110>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d007      	beq.n	800b0d0 <TIM_OC4_SetConfig+0x74>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4a2b      	ldr	r2, [pc, #172]	@ (800b170 <TIM_OC4_SetConfig+0x114>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d003      	beq.n	800b0d0 <TIM_OC4_SetConfig+0x74>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	4a2a      	ldr	r2, [pc, #168]	@ (800b174 <TIM_OC4_SetConfig+0x118>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d10d      	bne.n	800b0ec <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b0d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	031b      	lsls	r3, r3, #12
 800b0de:	697a      	ldr	r2, [r7, #20]
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b0ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4a1f      	ldr	r2, [pc, #124]	@ (800b16c <TIM_OC4_SetConfig+0x110>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d013      	beq.n	800b11c <TIM_OC4_SetConfig+0xc0>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	4a1e      	ldr	r2, [pc, #120]	@ (800b170 <TIM_OC4_SetConfig+0x114>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d00f      	beq.n	800b11c <TIM_OC4_SetConfig+0xc0>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4a1e      	ldr	r2, [pc, #120]	@ (800b178 <TIM_OC4_SetConfig+0x11c>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d00b      	beq.n	800b11c <TIM_OC4_SetConfig+0xc0>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4a1d      	ldr	r2, [pc, #116]	@ (800b17c <TIM_OC4_SetConfig+0x120>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d007      	beq.n	800b11c <TIM_OC4_SetConfig+0xc0>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	4a1c      	ldr	r2, [pc, #112]	@ (800b180 <TIM_OC4_SetConfig+0x124>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d003      	beq.n	800b11c <TIM_OC4_SetConfig+0xc0>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	4a17      	ldr	r2, [pc, #92]	@ (800b174 <TIM_OC4_SetConfig+0x118>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d113      	bne.n	800b144 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b122:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b12a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	695b      	ldr	r3, [r3, #20]
 800b130:	019b      	lsls	r3, r3, #6
 800b132:	693a      	ldr	r2, [r7, #16]
 800b134:	4313      	orrs	r3, r2
 800b136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	699b      	ldr	r3, [r3, #24]
 800b13c:	019b      	lsls	r3, r3, #6
 800b13e:	693a      	ldr	r2, [r7, #16]
 800b140:	4313      	orrs	r3, r2
 800b142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	693a      	ldr	r2, [r7, #16]
 800b148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	685a      	ldr	r2, [r3, #4]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	697a      	ldr	r2, [r7, #20]
 800b15c:	621a      	str	r2, [r3, #32]
}
 800b15e:	bf00      	nop
 800b160:	371c      	adds	r7, #28
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop
 800b16c:	40012c00 	.word	0x40012c00
 800b170:	40013400 	.word	0x40013400
 800b174:	40015000 	.word	0x40015000
 800b178:	40014000 	.word	0x40014000
 800b17c:	40014400 	.word	0x40014400
 800b180:	40014800 	.word	0x40014800

0800b184 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b184:	b480      	push	{r7}
 800b186:	b087      	sub	sp, #28
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a1b      	ldr	r3, [r3, #32]
 800b192:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a1b      	ldr	r3, [r3, #32]
 800b198:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b1b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68fa      	ldr	r2, [r7, #12]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b1c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	041b      	lsls	r3, r3, #16
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	4a19      	ldr	r2, [pc, #100]	@ (800b240 <TIM_OC5_SetConfig+0xbc>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d013      	beq.n	800b206 <TIM_OC5_SetConfig+0x82>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	4a18      	ldr	r2, [pc, #96]	@ (800b244 <TIM_OC5_SetConfig+0xc0>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d00f      	beq.n	800b206 <TIM_OC5_SetConfig+0x82>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	4a17      	ldr	r2, [pc, #92]	@ (800b248 <TIM_OC5_SetConfig+0xc4>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d00b      	beq.n	800b206 <TIM_OC5_SetConfig+0x82>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	4a16      	ldr	r2, [pc, #88]	@ (800b24c <TIM_OC5_SetConfig+0xc8>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d007      	beq.n	800b206 <TIM_OC5_SetConfig+0x82>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4a15      	ldr	r2, [pc, #84]	@ (800b250 <TIM_OC5_SetConfig+0xcc>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d003      	beq.n	800b206 <TIM_OC5_SetConfig+0x82>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a14      	ldr	r2, [pc, #80]	@ (800b254 <TIM_OC5_SetConfig+0xd0>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d109      	bne.n	800b21a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b20c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	695b      	ldr	r3, [r3, #20]
 800b212:	021b      	lsls	r3, r3, #8
 800b214:	697a      	ldr	r2, [r7, #20]
 800b216:	4313      	orrs	r3, r2
 800b218:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	697a      	ldr	r2, [r7, #20]
 800b21e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	68fa      	ldr	r2, [r7, #12]
 800b224:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	685a      	ldr	r2, [r3, #4]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	693a      	ldr	r2, [r7, #16]
 800b232:	621a      	str	r2, [r3, #32]
}
 800b234:	bf00      	nop
 800b236:	371c      	adds	r7, #28
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr
 800b240:	40012c00 	.word	0x40012c00
 800b244:	40013400 	.word	0x40013400
 800b248:	40014000 	.word	0x40014000
 800b24c:	40014400 	.word	0x40014400
 800b250:	40014800 	.word	0x40014800
 800b254:	40015000 	.word	0x40015000

0800b258 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b258:	b480      	push	{r7}
 800b25a:	b087      	sub	sp, #28
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a1b      	ldr	r3, [r3, #32]
 800b266:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6a1b      	ldr	r3, [r3, #32]
 800b26c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b27e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b286:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b28a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	021b      	lsls	r3, r3, #8
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	4313      	orrs	r3, r2
 800b296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b29e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	051b      	lsls	r3, r3, #20
 800b2a6:	693a      	ldr	r2, [r7, #16]
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	4a1a      	ldr	r2, [pc, #104]	@ (800b318 <TIM_OC6_SetConfig+0xc0>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d013      	beq.n	800b2dc <TIM_OC6_SetConfig+0x84>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	4a19      	ldr	r2, [pc, #100]	@ (800b31c <TIM_OC6_SetConfig+0xc4>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d00f      	beq.n	800b2dc <TIM_OC6_SetConfig+0x84>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	4a18      	ldr	r2, [pc, #96]	@ (800b320 <TIM_OC6_SetConfig+0xc8>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d00b      	beq.n	800b2dc <TIM_OC6_SetConfig+0x84>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	4a17      	ldr	r2, [pc, #92]	@ (800b324 <TIM_OC6_SetConfig+0xcc>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d007      	beq.n	800b2dc <TIM_OC6_SetConfig+0x84>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4a16      	ldr	r2, [pc, #88]	@ (800b328 <TIM_OC6_SetConfig+0xd0>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d003      	beq.n	800b2dc <TIM_OC6_SetConfig+0x84>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a15      	ldr	r2, [pc, #84]	@ (800b32c <TIM_OC6_SetConfig+0xd4>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d109      	bne.n	800b2f0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b2e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	695b      	ldr	r3, [r3, #20]
 800b2e8:	029b      	lsls	r3, r3, #10
 800b2ea:	697a      	ldr	r2, [r7, #20]
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	685a      	ldr	r2, [r3, #4]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	693a      	ldr	r2, [r7, #16]
 800b308:	621a      	str	r2, [r3, #32]
}
 800b30a:	bf00      	nop
 800b30c:	371c      	adds	r7, #28
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	40012c00 	.word	0x40012c00
 800b31c:	40013400 	.word	0x40013400
 800b320:	40014000 	.word	0x40014000
 800b324:	40014400 	.word	0x40014400
 800b328:	40014800 	.word	0x40014800
 800b32c:	40015000 	.word	0x40015000

0800b330 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b330:	b480      	push	{r7}
 800b332:	b087      	sub	sp, #28
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	6a1b      	ldr	r3, [r3, #32]
 800b340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	6a1b      	ldr	r3, [r3, #32]
 800b346:	f023 0201 	bic.w	r2, r3, #1
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	699b      	ldr	r3, [r3, #24]
 800b352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b35a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	011b      	lsls	r3, r3, #4
 800b360:	693a      	ldr	r2, [r7, #16]
 800b362:	4313      	orrs	r3, r2
 800b364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	f023 030a 	bic.w	r3, r3, #10
 800b36c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b36e:	697a      	ldr	r2, [r7, #20]
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	4313      	orrs	r3, r2
 800b374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	693a      	ldr	r2, [r7, #16]
 800b37a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	697a      	ldr	r2, [r7, #20]
 800b380:	621a      	str	r2, [r3, #32]
}
 800b382:	bf00      	nop
 800b384:	371c      	adds	r7, #28
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b38e:	b480      	push	{r7}
 800b390:	b087      	sub	sp, #28
 800b392:	af00      	add	r7, sp, #0
 800b394:	60f8      	str	r0, [r7, #12]
 800b396:	60b9      	str	r1, [r7, #8]
 800b398:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	6a1b      	ldr	r3, [r3, #32]
 800b39e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	6a1b      	ldr	r3, [r3, #32]
 800b3a4:	f023 0210 	bic.w	r2, r3, #16
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	699b      	ldr	r3, [r3, #24]
 800b3b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b3b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	031b      	lsls	r3, r3, #12
 800b3be:	693a      	ldr	r2, [r7, #16]
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b3ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	011b      	lsls	r3, r3, #4
 800b3d0:	697a      	ldr	r2, [r7, #20]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	693a      	ldr	r2, [r7, #16]
 800b3da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	697a      	ldr	r2, [r7, #20]
 800b3e0:	621a      	str	r2, [r3, #32]
}
 800b3e2:	bf00      	nop
 800b3e4:	371c      	adds	r7, #28
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr

0800b3ee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b3ee:	b480      	push	{r7}
 800b3f0:	b085      	sub	sp, #20
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
 800b3f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b408:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b40a:	683a      	ldr	r2, [r7, #0]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	4313      	orrs	r3, r2
 800b410:	f043 0307 	orr.w	r3, r3, #7
 800b414:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	609a      	str	r2, [r3, #8]
}
 800b41c:	bf00      	nop
 800b41e:	3714      	adds	r7, #20
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b428:	b480      	push	{r7}
 800b42a:	b087      	sub	sp, #28
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	607a      	str	r2, [r7, #4]
 800b434:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b442:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	021a      	lsls	r2, r3, #8
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	431a      	orrs	r2, r3
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	4313      	orrs	r3, r2
 800b450:	697a      	ldr	r2, [r7, #20]
 800b452:	4313      	orrs	r3, r2
 800b454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	697a      	ldr	r2, [r7, #20]
 800b45a:	609a      	str	r2, [r3, #8]
}
 800b45c:	bf00      	nop
 800b45e:	371c      	adds	r7, #28
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b468:	b480      	push	{r7}
 800b46a:	b087      	sub	sp, #28
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	f003 031f 	and.w	r3, r3, #31
 800b47a:	2201      	movs	r2, #1
 800b47c:	fa02 f303 	lsl.w	r3, r2, r3
 800b480:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	6a1a      	ldr	r2, [r3, #32]
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	43db      	mvns	r3, r3
 800b48a:	401a      	ands	r2, r3
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6a1a      	ldr	r2, [r3, #32]
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	f003 031f 	and.w	r3, r3, #31
 800b49a:	6879      	ldr	r1, [r7, #4]
 800b49c:	fa01 f303 	lsl.w	r3, r1, r3
 800b4a0:	431a      	orrs	r2, r3
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	621a      	str	r2, [r3, #32]
}
 800b4a6:	bf00      	nop
 800b4a8:	371c      	adds	r7, #28
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr
	...

0800b4b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d101      	bne.n	800b4cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b4c8:	2302      	movs	r3, #2
 800b4ca:	e074      	b.n	800b5b6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2202      	movs	r2, #2
 800b4d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a34      	ldr	r2, [pc, #208]	@ (800b5c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d009      	beq.n	800b50a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a33      	ldr	r2, [pc, #204]	@ (800b5c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d004      	beq.n	800b50a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a31      	ldr	r2, [pc, #196]	@ (800b5cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d108      	bne.n	800b51c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b510:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	68fa      	ldr	r2, [r7, #12]
 800b518:	4313      	orrs	r3, r2
 800b51a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b526:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	4313      	orrs	r3, r2
 800b530:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a21      	ldr	r2, [pc, #132]	@ (800b5c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d022      	beq.n	800b58a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b54c:	d01d      	beq.n	800b58a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a1f      	ldr	r2, [pc, #124]	@ (800b5d0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d018      	beq.n	800b58a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a1d      	ldr	r2, [pc, #116]	@ (800b5d4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d013      	beq.n	800b58a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4a1c      	ldr	r2, [pc, #112]	@ (800b5d8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d00e      	beq.n	800b58a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a15      	ldr	r2, [pc, #84]	@ (800b5c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d009      	beq.n	800b58a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a18      	ldr	r2, [pc, #96]	@ (800b5dc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d004      	beq.n	800b58a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a11      	ldr	r2, [pc, #68]	@ (800b5cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d10c      	bne.n	800b5a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b590:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	68ba      	ldr	r2, [r7, #8]
 800b598:	4313      	orrs	r3, r2
 800b59a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	68ba      	ldr	r2, [r7, #8]
 800b5a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3714      	adds	r7, #20
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr
 800b5c2:	bf00      	nop
 800b5c4:	40012c00 	.word	0x40012c00
 800b5c8:	40013400 	.word	0x40013400
 800b5cc:	40015000 	.word	0x40015000
 800b5d0:	40000400 	.word	0x40000400
 800b5d4:	40000800 	.word	0x40000800
 800b5d8:	40000c00 	.word	0x40000c00
 800b5dc:	40014000 	.word	0x40014000

0800b5e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d101      	bne.n	800b5fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b5f8:	2302      	movs	r3, #2
 800b5fa:	e078      	b.n	800b6ee <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	4313      	orrs	r3, r2
 800b610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	4313      	orrs	r3, r2
 800b61e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	4313      	orrs	r3, r2
 800b62c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4313      	orrs	r3, r2
 800b63a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	691b      	ldr	r3, [r3, #16]
 800b646:	4313      	orrs	r3, r2
 800b648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	695b      	ldr	r3, [r3, #20]
 800b654:	4313      	orrs	r3, r2
 800b656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b662:	4313      	orrs	r3, r2
 800b664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	699b      	ldr	r3, [r3, #24]
 800b670:	041b      	lsls	r3, r3, #16
 800b672:	4313      	orrs	r3, r2
 800b674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	69db      	ldr	r3, [r3, #28]
 800b680:	4313      	orrs	r3, r2
 800b682:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a1c      	ldr	r2, [pc, #112]	@ (800b6fc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d009      	beq.n	800b6a2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4a1b      	ldr	r2, [pc, #108]	@ (800b700 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d004      	beq.n	800b6a2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a19      	ldr	r2, [pc, #100]	@ (800b704 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d11c      	bne.n	800b6dc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ac:	051b      	lsls	r3, r3, #20
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	6a1b      	ldr	r3, [r3, #32]
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3714      	adds	r7, #20
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	40012c00 	.word	0x40012c00
 800b700:	40013400 	.word	0x40013400
 800b704:	40015000 	.word	0x40015000

0800b708 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b710:	bf00      	nop
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b724:	bf00      	nop
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b738:	bf00      	nop
 800b73a:	370c      	adds	r7, #12
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b74c:	bf00      	nop
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b760:	bf00      	nop
 800b762:	370c      	adds	r7, #12
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b774:	bf00      	nop
 800b776:	370c      	adds	r7, #12
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b780:	b480      	push	{r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b788:	bf00      	nop
 800b78a:	370c      	adds	r7, #12
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d101      	bne.n	800b7a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e042      	b.n	800b82c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d106      	bne.n	800b7be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f7f8 fdb1 	bl	8004320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2224      	movs	r2, #36	@ 0x24
 800b7c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f022 0201 	bic.w	r2, r2, #1
 800b7d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d002      	beq.n	800b7e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 fb24 	bl	800be2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 f825 	bl	800b834 <UART_SetConfig>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d101      	bne.n	800b7f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	e01b      	b.n	800b82c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	685a      	ldr	r2, [r3, #4]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b802:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	689a      	ldr	r2, [r3, #8]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b812:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f042 0201 	orr.w	r2, r2, #1
 800b822:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 fba3 	bl	800bf70 <UART_CheckIdleState>
 800b82a:	4603      	mov	r3, r0
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b838:	b08c      	sub	sp, #48	@ 0x30
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b83e:	2300      	movs	r3, #0
 800b840:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	689a      	ldr	r2, [r3, #8]
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	691b      	ldr	r3, [r3, #16]
 800b84c:	431a      	orrs	r2, r3
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	695b      	ldr	r3, [r3, #20]
 800b852:	431a      	orrs	r2, r3
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	69db      	ldr	r3, [r3, #28]
 800b858:	4313      	orrs	r3, r2
 800b85a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	4baa      	ldr	r3, [pc, #680]	@ (800bb0c <UART_SetConfig+0x2d8>)
 800b864:	4013      	ands	r3, r2
 800b866:	697a      	ldr	r2, [r7, #20]
 800b868:	6812      	ldr	r2, [r2, #0]
 800b86a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b86c:	430b      	orrs	r3, r1
 800b86e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	68da      	ldr	r2, [r3, #12]
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	430a      	orrs	r2, r1
 800b884:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	699b      	ldr	r3, [r3, #24]
 800b88a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a9f      	ldr	r2, [pc, #636]	@ (800bb10 <UART_SetConfig+0x2dc>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d004      	beq.n	800b8a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	6a1b      	ldr	r3, [r3, #32]
 800b89a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b89c:	4313      	orrs	r3, r2
 800b89e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b8aa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	6812      	ldr	r2, [r2, #0]
 800b8b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8b4:	430b      	orrs	r3, r1
 800b8b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8be:	f023 010f 	bic.w	r1, r3, #15
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	430a      	orrs	r2, r1
 800b8cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a90      	ldr	r2, [pc, #576]	@ (800bb14 <UART_SetConfig+0x2e0>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d125      	bne.n	800b924 <UART_SetConfig+0xf0>
 800b8d8:	4b8f      	ldr	r3, [pc, #572]	@ (800bb18 <UART_SetConfig+0x2e4>)
 800b8da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8de:	f003 0303 	and.w	r3, r3, #3
 800b8e2:	2b03      	cmp	r3, #3
 800b8e4:	d81a      	bhi.n	800b91c <UART_SetConfig+0xe8>
 800b8e6:	a201      	add	r2, pc, #4	@ (adr r2, 800b8ec <UART_SetConfig+0xb8>)
 800b8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ec:	0800b8fd 	.word	0x0800b8fd
 800b8f0:	0800b90d 	.word	0x0800b90d
 800b8f4:	0800b905 	.word	0x0800b905
 800b8f8:	0800b915 	.word	0x0800b915
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b902:	e116      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800b904:	2302      	movs	r3, #2
 800b906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b90a:	e112      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800b90c:	2304      	movs	r3, #4
 800b90e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b912:	e10e      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800b914:	2308      	movs	r3, #8
 800b916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b91a:	e10a      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800b91c:	2310      	movs	r3, #16
 800b91e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b922:	e106      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4a7c      	ldr	r2, [pc, #496]	@ (800bb1c <UART_SetConfig+0x2e8>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d138      	bne.n	800b9a0 <UART_SetConfig+0x16c>
 800b92e:	4b7a      	ldr	r3, [pc, #488]	@ (800bb18 <UART_SetConfig+0x2e4>)
 800b930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b934:	f003 030c 	and.w	r3, r3, #12
 800b938:	2b0c      	cmp	r3, #12
 800b93a:	d82d      	bhi.n	800b998 <UART_SetConfig+0x164>
 800b93c:	a201      	add	r2, pc, #4	@ (adr r2, 800b944 <UART_SetConfig+0x110>)
 800b93e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b942:	bf00      	nop
 800b944:	0800b979 	.word	0x0800b979
 800b948:	0800b999 	.word	0x0800b999
 800b94c:	0800b999 	.word	0x0800b999
 800b950:	0800b999 	.word	0x0800b999
 800b954:	0800b989 	.word	0x0800b989
 800b958:	0800b999 	.word	0x0800b999
 800b95c:	0800b999 	.word	0x0800b999
 800b960:	0800b999 	.word	0x0800b999
 800b964:	0800b981 	.word	0x0800b981
 800b968:	0800b999 	.word	0x0800b999
 800b96c:	0800b999 	.word	0x0800b999
 800b970:	0800b999 	.word	0x0800b999
 800b974:	0800b991 	.word	0x0800b991
 800b978:	2300      	movs	r3, #0
 800b97a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b97e:	e0d8      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800b980:	2302      	movs	r3, #2
 800b982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b986:	e0d4      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800b988:	2304      	movs	r3, #4
 800b98a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b98e:	e0d0      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800b990:	2308      	movs	r3, #8
 800b992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b996:	e0cc      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800b998:	2310      	movs	r3, #16
 800b99a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b99e:	e0c8      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a5e      	ldr	r2, [pc, #376]	@ (800bb20 <UART_SetConfig+0x2ec>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d125      	bne.n	800b9f6 <UART_SetConfig+0x1c2>
 800b9aa:	4b5b      	ldr	r3, [pc, #364]	@ (800bb18 <UART_SetConfig+0x2e4>)
 800b9ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b9b4:	2b30      	cmp	r3, #48	@ 0x30
 800b9b6:	d016      	beq.n	800b9e6 <UART_SetConfig+0x1b2>
 800b9b8:	2b30      	cmp	r3, #48	@ 0x30
 800b9ba:	d818      	bhi.n	800b9ee <UART_SetConfig+0x1ba>
 800b9bc:	2b20      	cmp	r3, #32
 800b9be:	d00a      	beq.n	800b9d6 <UART_SetConfig+0x1a2>
 800b9c0:	2b20      	cmp	r3, #32
 800b9c2:	d814      	bhi.n	800b9ee <UART_SetConfig+0x1ba>
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d002      	beq.n	800b9ce <UART_SetConfig+0x19a>
 800b9c8:	2b10      	cmp	r3, #16
 800b9ca:	d008      	beq.n	800b9de <UART_SetConfig+0x1aa>
 800b9cc:	e00f      	b.n	800b9ee <UART_SetConfig+0x1ba>
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9d4:	e0ad      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800b9d6:	2302      	movs	r3, #2
 800b9d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9dc:	e0a9      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800b9de:	2304      	movs	r3, #4
 800b9e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9e4:	e0a5      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800b9e6:	2308      	movs	r3, #8
 800b9e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9ec:	e0a1      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800b9ee:	2310      	movs	r3, #16
 800b9f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9f4:	e09d      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a4a      	ldr	r2, [pc, #296]	@ (800bb24 <UART_SetConfig+0x2f0>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d125      	bne.n	800ba4c <UART_SetConfig+0x218>
 800ba00:	4b45      	ldr	r3, [pc, #276]	@ (800bb18 <UART_SetConfig+0x2e4>)
 800ba02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba06:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ba0a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ba0c:	d016      	beq.n	800ba3c <UART_SetConfig+0x208>
 800ba0e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ba10:	d818      	bhi.n	800ba44 <UART_SetConfig+0x210>
 800ba12:	2b80      	cmp	r3, #128	@ 0x80
 800ba14:	d00a      	beq.n	800ba2c <UART_SetConfig+0x1f8>
 800ba16:	2b80      	cmp	r3, #128	@ 0x80
 800ba18:	d814      	bhi.n	800ba44 <UART_SetConfig+0x210>
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d002      	beq.n	800ba24 <UART_SetConfig+0x1f0>
 800ba1e:	2b40      	cmp	r3, #64	@ 0x40
 800ba20:	d008      	beq.n	800ba34 <UART_SetConfig+0x200>
 800ba22:	e00f      	b.n	800ba44 <UART_SetConfig+0x210>
 800ba24:	2300      	movs	r3, #0
 800ba26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba2a:	e082      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800ba2c:	2302      	movs	r3, #2
 800ba2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba32:	e07e      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800ba34:	2304      	movs	r3, #4
 800ba36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba3a:	e07a      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800ba3c:	2308      	movs	r3, #8
 800ba3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba42:	e076      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800ba44:	2310      	movs	r3, #16
 800ba46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba4a:	e072      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a35      	ldr	r2, [pc, #212]	@ (800bb28 <UART_SetConfig+0x2f4>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d12a      	bne.n	800baac <UART_SetConfig+0x278>
 800ba56:	4b30      	ldr	r3, [pc, #192]	@ (800bb18 <UART_SetConfig+0x2e4>)
 800ba58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba64:	d01a      	beq.n	800ba9c <UART_SetConfig+0x268>
 800ba66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba6a:	d81b      	bhi.n	800baa4 <UART_SetConfig+0x270>
 800ba6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba70:	d00c      	beq.n	800ba8c <UART_SetConfig+0x258>
 800ba72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba76:	d815      	bhi.n	800baa4 <UART_SetConfig+0x270>
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d003      	beq.n	800ba84 <UART_SetConfig+0x250>
 800ba7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba80:	d008      	beq.n	800ba94 <UART_SetConfig+0x260>
 800ba82:	e00f      	b.n	800baa4 <UART_SetConfig+0x270>
 800ba84:	2300      	movs	r3, #0
 800ba86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba8a:	e052      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800ba8c:	2302      	movs	r3, #2
 800ba8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba92:	e04e      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800ba94:	2304      	movs	r3, #4
 800ba96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba9a:	e04a      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800ba9c:	2308      	movs	r3, #8
 800ba9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baa2:	e046      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800baa4:	2310      	movs	r3, #16
 800baa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baaa:	e042      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a17      	ldr	r2, [pc, #92]	@ (800bb10 <UART_SetConfig+0x2dc>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d13a      	bne.n	800bb2c <UART_SetConfig+0x2f8>
 800bab6:	4b18      	ldr	r3, [pc, #96]	@ (800bb18 <UART_SetConfig+0x2e4>)
 800bab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800babc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bac0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bac4:	d01a      	beq.n	800bafc <UART_SetConfig+0x2c8>
 800bac6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800baca:	d81b      	bhi.n	800bb04 <UART_SetConfig+0x2d0>
 800bacc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bad0:	d00c      	beq.n	800baec <UART_SetConfig+0x2b8>
 800bad2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bad6:	d815      	bhi.n	800bb04 <UART_SetConfig+0x2d0>
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d003      	beq.n	800bae4 <UART_SetConfig+0x2b0>
 800badc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bae0:	d008      	beq.n	800baf4 <UART_SetConfig+0x2c0>
 800bae2:	e00f      	b.n	800bb04 <UART_SetConfig+0x2d0>
 800bae4:	2300      	movs	r3, #0
 800bae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baea:	e022      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800baec:	2302      	movs	r3, #2
 800baee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baf2:	e01e      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800baf4:	2304      	movs	r3, #4
 800baf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bafa:	e01a      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800bafc:	2308      	movs	r3, #8
 800bafe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb02:	e016      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800bb04:	2310      	movs	r3, #16
 800bb06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb0a:	e012      	b.n	800bb32 <UART_SetConfig+0x2fe>
 800bb0c:	cfff69f3 	.word	0xcfff69f3
 800bb10:	40008000 	.word	0x40008000
 800bb14:	40013800 	.word	0x40013800
 800bb18:	40021000 	.word	0x40021000
 800bb1c:	40004400 	.word	0x40004400
 800bb20:	40004800 	.word	0x40004800
 800bb24:	40004c00 	.word	0x40004c00
 800bb28:	40005000 	.word	0x40005000
 800bb2c:	2310      	movs	r3, #16
 800bb2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4aae      	ldr	r2, [pc, #696]	@ (800bdf0 <UART_SetConfig+0x5bc>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	f040 8097 	bne.w	800bc6c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bb3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bb42:	2b08      	cmp	r3, #8
 800bb44:	d823      	bhi.n	800bb8e <UART_SetConfig+0x35a>
 800bb46:	a201      	add	r2, pc, #4	@ (adr r2, 800bb4c <UART_SetConfig+0x318>)
 800bb48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb4c:	0800bb71 	.word	0x0800bb71
 800bb50:	0800bb8f 	.word	0x0800bb8f
 800bb54:	0800bb79 	.word	0x0800bb79
 800bb58:	0800bb8f 	.word	0x0800bb8f
 800bb5c:	0800bb7f 	.word	0x0800bb7f
 800bb60:	0800bb8f 	.word	0x0800bb8f
 800bb64:	0800bb8f 	.word	0x0800bb8f
 800bb68:	0800bb8f 	.word	0x0800bb8f
 800bb6c:	0800bb87 	.word	0x0800bb87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb70:	f7fd fec6 	bl	8009900 <HAL_RCC_GetPCLK1Freq>
 800bb74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb76:	e010      	b.n	800bb9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb78:	4b9e      	ldr	r3, [pc, #632]	@ (800bdf4 <UART_SetConfig+0x5c0>)
 800bb7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb7c:	e00d      	b.n	800bb9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb7e:	f7fd fe51 	bl	8009824 <HAL_RCC_GetSysClockFreq>
 800bb82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb84:	e009      	b.n	800bb9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb8c:	e005      	b.n	800bb9a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bb92:	2301      	movs	r3, #1
 800bb94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bb98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bb9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f000 8130 	beq.w	800be02 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bba6:	4a94      	ldr	r2, [pc, #592]	@ (800bdf8 <UART_SetConfig+0x5c4>)
 800bba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbac:	461a      	mov	r2, r3
 800bbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbb4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	685a      	ldr	r2, [r3, #4]
 800bbba:	4613      	mov	r3, r2
 800bbbc:	005b      	lsls	r3, r3, #1
 800bbbe:	4413      	add	r3, r2
 800bbc0:	69ba      	ldr	r2, [r7, #24]
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d305      	bcc.n	800bbd2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbcc:	69ba      	ldr	r2, [r7, #24]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d903      	bls.n	800bbda <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bbd8:	e113      	b.n	800be02 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbdc:	2200      	movs	r2, #0
 800bbde:	60bb      	str	r3, [r7, #8]
 800bbe0:	60fa      	str	r2, [r7, #12]
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbe6:	4a84      	ldr	r2, [pc, #528]	@ (800bdf8 <UART_SetConfig+0x5c4>)
 800bbe8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	2200      	movs	r2, #0
 800bbf0:	603b      	str	r3, [r7, #0]
 800bbf2:	607a      	str	r2, [r7, #4]
 800bbf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbf8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bbfc:	f7f5 f86c 	bl	8000cd8 <__aeabi_uldivmod>
 800bc00:	4602      	mov	r2, r0
 800bc02:	460b      	mov	r3, r1
 800bc04:	4610      	mov	r0, r2
 800bc06:	4619      	mov	r1, r3
 800bc08:	f04f 0200 	mov.w	r2, #0
 800bc0c:	f04f 0300 	mov.w	r3, #0
 800bc10:	020b      	lsls	r3, r1, #8
 800bc12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bc16:	0202      	lsls	r2, r0, #8
 800bc18:	6979      	ldr	r1, [r7, #20]
 800bc1a:	6849      	ldr	r1, [r1, #4]
 800bc1c:	0849      	lsrs	r1, r1, #1
 800bc1e:	2000      	movs	r0, #0
 800bc20:	460c      	mov	r4, r1
 800bc22:	4605      	mov	r5, r0
 800bc24:	eb12 0804 	adds.w	r8, r2, r4
 800bc28:	eb43 0905 	adc.w	r9, r3, r5
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	469a      	mov	sl, r3
 800bc34:	4693      	mov	fp, r2
 800bc36:	4652      	mov	r2, sl
 800bc38:	465b      	mov	r3, fp
 800bc3a:	4640      	mov	r0, r8
 800bc3c:	4649      	mov	r1, r9
 800bc3e:	f7f5 f84b 	bl	8000cd8 <__aeabi_uldivmod>
 800bc42:	4602      	mov	r2, r0
 800bc44:	460b      	mov	r3, r1
 800bc46:	4613      	mov	r3, r2
 800bc48:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc4a:	6a3b      	ldr	r3, [r7, #32]
 800bc4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc50:	d308      	bcc.n	800bc64 <UART_SetConfig+0x430>
 800bc52:	6a3b      	ldr	r3, [r7, #32]
 800bc54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc58:	d204      	bcs.n	800bc64 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	6a3a      	ldr	r2, [r7, #32]
 800bc60:	60da      	str	r2, [r3, #12]
 800bc62:	e0ce      	b.n	800be02 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bc6a:	e0ca      	b.n	800be02 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	69db      	ldr	r3, [r3, #28]
 800bc70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc74:	d166      	bne.n	800bd44 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800bc76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bc7a:	2b08      	cmp	r3, #8
 800bc7c:	d827      	bhi.n	800bcce <UART_SetConfig+0x49a>
 800bc7e:	a201      	add	r2, pc, #4	@ (adr r2, 800bc84 <UART_SetConfig+0x450>)
 800bc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc84:	0800bca9 	.word	0x0800bca9
 800bc88:	0800bcb1 	.word	0x0800bcb1
 800bc8c:	0800bcb9 	.word	0x0800bcb9
 800bc90:	0800bccf 	.word	0x0800bccf
 800bc94:	0800bcbf 	.word	0x0800bcbf
 800bc98:	0800bccf 	.word	0x0800bccf
 800bc9c:	0800bccf 	.word	0x0800bccf
 800bca0:	0800bccf 	.word	0x0800bccf
 800bca4:	0800bcc7 	.word	0x0800bcc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bca8:	f7fd fe2a 	bl	8009900 <HAL_RCC_GetPCLK1Freq>
 800bcac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bcae:	e014      	b.n	800bcda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bcb0:	f7fd fe3c 	bl	800992c <HAL_RCC_GetPCLK2Freq>
 800bcb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bcb6:	e010      	b.n	800bcda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bcb8:	4b4e      	ldr	r3, [pc, #312]	@ (800bdf4 <UART_SetConfig+0x5c0>)
 800bcba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bcbc:	e00d      	b.n	800bcda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bcbe:	f7fd fdb1 	bl	8009824 <HAL_RCC_GetSysClockFreq>
 800bcc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bcc4:	e009      	b.n	800bcda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bcca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bccc:	e005      	b.n	800bcda <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bcd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bcda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	f000 8090 	beq.w	800be02 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bce6:	4a44      	ldr	r2, [pc, #272]	@ (800bdf8 <UART_SetConfig+0x5c4>)
 800bce8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcec:	461a      	mov	r2, r3
 800bcee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcf4:	005a      	lsls	r2, r3, #1
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	085b      	lsrs	r3, r3, #1
 800bcfc:	441a      	add	r2, r3
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd08:	6a3b      	ldr	r3, [r7, #32]
 800bd0a:	2b0f      	cmp	r3, #15
 800bd0c:	d916      	bls.n	800bd3c <UART_SetConfig+0x508>
 800bd0e:	6a3b      	ldr	r3, [r7, #32]
 800bd10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd14:	d212      	bcs.n	800bd3c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd16:	6a3b      	ldr	r3, [r7, #32]
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	f023 030f 	bic.w	r3, r3, #15
 800bd1e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd20:	6a3b      	ldr	r3, [r7, #32]
 800bd22:	085b      	lsrs	r3, r3, #1
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	f003 0307 	and.w	r3, r3, #7
 800bd2a:	b29a      	uxth	r2, r3
 800bd2c:	8bfb      	ldrh	r3, [r7, #30]
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	8bfa      	ldrh	r2, [r7, #30]
 800bd38:	60da      	str	r2, [r3, #12]
 800bd3a:	e062      	b.n	800be02 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bd42:	e05e      	b.n	800be02 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd44:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd48:	2b08      	cmp	r3, #8
 800bd4a:	d828      	bhi.n	800bd9e <UART_SetConfig+0x56a>
 800bd4c:	a201      	add	r2, pc, #4	@ (adr r2, 800bd54 <UART_SetConfig+0x520>)
 800bd4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd52:	bf00      	nop
 800bd54:	0800bd79 	.word	0x0800bd79
 800bd58:	0800bd81 	.word	0x0800bd81
 800bd5c:	0800bd89 	.word	0x0800bd89
 800bd60:	0800bd9f 	.word	0x0800bd9f
 800bd64:	0800bd8f 	.word	0x0800bd8f
 800bd68:	0800bd9f 	.word	0x0800bd9f
 800bd6c:	0800bd9f 	.word	0x0800bd9f
 800bd70:	0800bd9f 	.word	0x0800bd9f
 800bd74:	0800bd97 	.word	0x0800bd97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd78:	f7fd fdc2 	bl	8009900 <HAL_RCC_GetPCLK1Freq>
 800bd7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd7e:	e014      	b.n	800bdaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd80:	f7fd fdd4 	bl	800992c <HAL_RCC_GetPCLK2Freq>
 800bd84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd86:	e010      	b.n	800bdaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd88:	4b1a      	ldr	r3, [pc, #104]	@ (800bdf4 <UART_SetConfig+0x5c0>)
 800bd8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bd8c:	e00d      	b.n	800bdaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd8e:	f7fd fd49 	bl	8009824 <HAL_RCC_GetSysClockFreq>
 800bd92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd94:	e009      	b.n	800bdaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bd9c:	e005      	b.n	800bdaa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bda8:	bf00      	nop
    }

    if (pclk != 0U)
 800bdaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d028      	beq.n	800be02 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdb4:	4a10      	ldr	r2, [pc, #64]	@ (800bdf8 <UART_SetConfig+0x5c4>)
 800bdb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdba:	461a      	mov	r2, r3
 800bdbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdbe:	fbb3 f2f2 	udiv	r2, r3, r2
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	085b      	lsrs	r3, r3, #1
 800bdc8:	441a      	add	r2, r3
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdd4:	6a3b      	ldr	r3, [r7, #32]
 800bdd6:	2b0f      	cmp	r3, #15
 800bdd8:	d910      	bls.n	800bdfc <UART_SetConfig+0x5c8>
 800bdda:	6a3b      	ldr	r3, [r7, #32]
 800bddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bde0:	d20c      	bcs.n	800bdfc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bde2:	6a3b      	ldr	r3, [r7, #32]
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	60da      	str	r2, [r3, #12]
 800bdec:	e009      	b.n	800be02 <UART_SetConfig+0x5ce>
 800bdee:	bf00      	nop
 800bdf0:	40008000 	.word	0x40008000
 800bdf4:	00f42400 	.word	0x00f42400
 800bdf8:	08016ff8 	.word	0x08016ff8
      }
      else
      {
        ret = HAL_ERROR;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	2201      	movs	r2, #1
 800be06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	2201      	movs	r2, #1
 800be0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	2200      	movs	r2, #0
 800be16:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	2200      	movs	r2, #0
 800be1c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800be1e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800be22:	4618      	mov	r0, r3
 800be24:	3730      	adds	r7, #48	@ 0x30
 800be26:	46bd      	mov	sp, r7
 800be28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800be2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be38:	f003 0308 	and.w	r3, r3, #8
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d00a      	beq.n	800be56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	430a      	orrs	r2, r1
 800be54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be5a:	f003 0301 	and.w	r3, r3, #1
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00a      	beq.n	800be78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	430a      	orrs	r2, r1
 800be76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be7c:	f003 0302 	and.w	r3, r3, #2
 800be80:	2b00      	cmp	r3, #0
 800be82:	d00a      	beq.n	800be9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	430a      	orrs	r2, r1
 800be98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be9e:	f003 0304 	and.w	r3, r3, #4
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d00a      	beq.n	800bebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	685b      	ldr	r3, [r3, #4]
 800beac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	430a      	orrs	r2, r1
 800beba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bec0:	f003 0310 	and.w	r3, r3, #16
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d00a      	beq.n	800bede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	689b      	ldr	r3, [r3, #8]
 800bece:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	430a      	orrs	r2, r1
 800bedc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bee2:	f003 0320 	and.w	r3, r3, #32
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d00a      	beq.n	800bf00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	430a      	orrs	r2, r1
 800befe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d01a      	beq.n	800bf42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	430a      	orrs	r2, r1
 800bf20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf2a:	d10a      	bne.n	800bf42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	430a      	orrs	r2, r1
 800bf40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d00a      	beq.n	800bf64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	430a      	orrs	r2, r1
 800bf62:	605a      	str	r2, [r3, #4]
  }
}
 800bf64:	bf00      	nop
 800bf66:	370c      	adds	r7, #12
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b098      	sub	sp, #96	@ 0x60
 800bf74:	af02      	add	r7, sp, #8
 800bf76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf80:	f7f8 fc16 	bl	80047b0 <HAL_GetTick>
 800bf84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f003 0308 	and.w	r3, r3, #8
 800bf90:	2b08      	cmp	r3, #8
 800bf92:	d12f      	bne.n	800bff4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf98:	9300      	str	r3, [sp, #0]
 800bf9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 f88e 	bl	800c0c4 <UART_WaitOnFlagUntilTimeout>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d022      	beq.n	800bff4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfb6:	e853 3f00 	ldrex	r3, [r3]
 800bfba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bfbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bfc2:	653b      	str	r3, [r7, #80]	@ 0x50
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	461a      	mov	r2, r3
 800bfca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfcc:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bfd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfd4:	e841 2300 	strex	r3, r2, [r1]
 800bfd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bfda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d1e6      	bne.n	800bfae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2220      	movs	r2, #32
 800bfe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bff0:	2303      	movs	r3, #3
 800bff2:	e063      	b.n	800c0bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f003 0304 	and.w	r3, r3, #4
 800bffe:	2b04      	cmp	r3, #4
 800c000:	d149      	bne.n	800c096 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c002:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c006:	9300      	str	r3, [sp, #0]
 800c008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c00a:	2200      	movs	r2, #0
 800c00c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 f857 	bl	800c0c4 <UART_WaitOnFlagUntilTimeout>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d03c      	beq.n	800c096 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c024:	e853 3f00 	ldrex	r3, [r3]
 800c028:	623b      	str	r3, [r7, #32]
   return(result);
 800c02a:	6a3b      	ldr	r3, [r7, #32]
 800c02c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c030:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	461a      	mov	r2, r3
 800c038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c03a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c03c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c042:	e841 2300 	strex	r3, r2, [r1]
 800c046:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d1e6      	bne.n	800c01c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	3308      	adds	r3, #8
 800c054:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	e853 3f00 	ldrex	r3, [r3]
 800c05c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f023 0301 	bic.w	r3, r3, #1
 800c064:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	3308      	adds	r3, #8
 800c06c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c06e:	61fa      	str	r2, [r7, #28]
 800c070:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c072:	69b9      	ldr	r1, [r7, #24]
 800c074:	69fa      	ldr	r2, [r7, #28]
 800c076:	e841 2300 	strex	r3, r2, [r1]
 800c07a:	617b      	str	r3, [r7, #20]
   return(result);
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d1e5      	bne.n	800c04e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2220      	movs	r2, #32
 800c086:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c092:	2303      	movs	r3, #3
 800c094:	e012      	b.n	800c0bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2220      	movs	r2, #32
 800c09a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2220      	movs	r2, #32
 800c0a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c0ba:	2300      	movs	r3, #0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3758      	adds	r7, #88	@ 0x58
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	60f8      	str	r0, [r7, #12]
 800c0cc:	60b9      	str	r1, [r7, #8]
 800c0ce:	603b      	str	r3, [r7, #0]
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0d4:	e04f      	b.n	800c176 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0d6:	69bb      	ldr	r3, [r7, #24]
 800c0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0dc:	d04b      	beq.n	800c176 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0de:	f7f8 fb67 	bl	80047b0 <HAL_GetTick>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	1ad3      	subs	r3, r2, r3
 800c0e8:	69ba      	ldr	r2, [r7, #24]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d302      	bcc.n	800c0f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d101      	bne.n	800c0f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c0f4:	2303      	movs	r3, #3
 800c0f6:	e04e      	b.n	800c196 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f003 0304 	and.w	r3, r3, #4
 800c102:	2b00      	cmp	r3, #0
 800c104:	d037      	beq.n	800c176 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	2b80      	cmp	r3, #128	@ 0x80
 800c10a:	d034      	beq.n	800c176 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	2b40      	cmp	r3, #64	@ 0x40
 800c110:	d031      	beq.n	800c176 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	69db      	ldr	r3, [r3, #28]
 800c118:	f003 0308 	and.w	r3, r3, #8
 800c11c:	2b08      	cmp	r3, #8
 800c11e:	d110      	bne.n	800c142 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	2208      	movs	r2, #8
 800c126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c128:	68f8      	ldr	r0, [r7, #12]
 800c12a:	f000 f838 	bl	800c19e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2208      	movs	r2, #8
 800c132:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2200      	movs	r2, #0
 800c13a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	e029      	b.n	800c196 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	69db      	ldr	r3, [r3, #28]
 800c148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c14c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c150:	d111      	bne.n	800c176 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c15a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c15c:	68f8      	ldr	r0, [r7, #12]
 800c15e:	f000 f81e 	bl	800c19e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2220      	movs	r2, #32
 800c166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2200      	movs	r2, #0
 800c16e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c172:	2303      	movs	r3, #3
 800c174:	e00f      	b.n	800c196 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	69da      	ldr	r2, [r3, #28]
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	4013      	ands	r3, r2
 800c180:	68ba      	ldr	r2, [r7, #8]
 800c182:	429a      	cmp	r2, r3
 800c184:	bf0c      	ite	eq
 800c186:	2301      	moveq	r3, #1
 800c188:	2300      	movne	r3, #0
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	461a      	mov	r2, r3
 800c18e:	79fb      	ldrb	r3, [r7, #7]
 800c190:	429a      	cmp	r2, r3
 800c192:	d0a0      	beq.n	800c0d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c194:	2300      	movs	r3, #0
}
 800c196:	4618      	mov	r0, r3
 800c198:	3710      	adds	r7, #16
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}

0800c19e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c19e:	b480      	push	{r7}
 800c1a0:	b095      	sub	sp, #84	@ 0x54
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1ae:	e853 3f00 	ldrex	r3, [r3]
 800c1b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c1ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c1c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c1ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c1cc:	e841 2300 	strex	r3, r2, [r1]
 800c1d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d1e6      	bne.n	800c1a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	3308      	adds	r3, #8
 800c1de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e0:	6a3b      	ldr	r3, [r7, #32]
 800c1e2:	e853 3f00 	ldrex	r3, [r3]
 800c1e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c1e8:	69fb      	ldr	r3, [r7, #28]
 800c1ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c1ee:	f023 0301 	bic.w	r3, r3, #1
 800c1f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	3308      	adds	r3, #8
 800c1fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c1fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c1fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c200:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c204:	e841 2300 	strex	r3, r2, [r1]
 800c208:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1e3      	bne.n	800c1d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c214:	2b01      	cmp	r3, #1
 800c216:	d118      	bne.n	800c24a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	e853 3f00 	ldrex	r3, [r3]
 800c224:	60bb      	str	r3, [r7, #8]
   return(result);
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	f023 0310 	bic.w	r3, r3, #16
 800c22c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	461a      	mov	r2, r3
 800c234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c236:	61bb      	str	r3, [r7, #24]
 800c238:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c23a:	6979      	ldr	r1, [r7, #20]
 800c23c:	69ba      	ldr	r2, [r7, #24]
 800c23e:	e841 2300 	strex	r3, r2, [r1]
 800c242:	613b      	str	r3, [r7, #16]
   return(result);
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1e6      	bne.n	800c218 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2220      	movs	r2, #32
 800c24e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2200      	movs	r2, #0
 800c256:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c25e:	bf00      	nop
 800c260:	3754      	adds	r7, #84	@ 0x54
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr

0800c26a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c26a:	b480      	push	{r7}
 800c26c:	b085      	sub	sp, #20
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d101      	bne.n	800c280 <HAL_UARTEx_DisableFifoMode+0x16>
 800c27c:	2302      	movs	r3, #2
 800c27e:	e027      	b.n	800c2d0 <HAL_UARTEx_DisableFifoMode+0x66>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2201      	movs	r2, #1
 800c284:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2224      	movs	r2, #36	@ 0x24
 800c28c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f022 0201 	bic.w	r2, r2, #1
 800c2a6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c2ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2220      	movs	r2, #32
 800c2c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c2ce:	2300      	movs	r3, #0
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3714      	adds	r7, #20
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr

0800c2dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d101      	bne.n	800c2f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c2f0:	2302      	movs	r3, #2
 800c2f2:	e02d      	b.n	800c350 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2224      	movs	r2, #36	@ 0x24
 800c300:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f022 0201 	bic.w	r2, r2, #1
 800c31a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	689b      	ldr	r3, [r3, #8]
 800c322:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	683a      	ldr	r2, [r7, #0]
 800c32c:	430a      	orrs	r2, r1
 800c32e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 f84f 	bl	800c3d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	68fa      	ldr	r2, [r7, #12]
 800c33c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2220      	movs	r2, #32
 800c342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2200      	movs	r2, #0
 800c34a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c34e:	2300      	movs	r3, #0
}
 800c350:	4618      	mov	r0, r3
 800c352:	3710      	adds	r7, #16
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d101      	bne.n	800c370 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c36c:	2302      	movs	r3, #2
 800c36e:	e02d      	b.n	800c3cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2201      	movs	r2, #1
 800c374:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2224      	movs	r2, #36	@ 0x24
 800c37c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f022 0201 	bic.w	r2, r2, #1
 800c396:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	689b      	ldr	r3, [r3, #8]
 800c39e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	683a      	ldr	r2, [r7, #0]
 800c3a8:	430a      	orrs	r2, r1
 800c3aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 f811 	bl	800c3d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	68fa      	ldr	r2, [r7, #12]
 800c3b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2220      	movs	r2, #32
 800c3be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3ca:	2300      	movs	r3, #0
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3710      	adds	r7, #16
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}

0800c3d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b085      	sub	sp, #20
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d108      	bne.n	800c3f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c3f4:	e031      	b.n	800c45a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c3f6:	2308      	movs	r3, #8
 800c3f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c3fa:	2308      	movs	r3, #8
 800c3fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	689b      	ldr	r3, [r3, #8]
 800c404:	0e5b      	lsrs	r3, r3, #25
 800c406:	b2db      	uxtb	r3, r3
 800c408:	f003 0307 	and.w	r3, r3, #7
 800c40c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	0f5b      	lsrs	r3, r3, #29
 800c416:	b2db      	uxtb	r3, r3
 800c418:	f003 0307 	and.w	r3, r3, #7
 800c41c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c41e:	7bbb      	ldrb	r3, [r7, #14]
 800c420:	7b3a      	ldrb	r2, [r7, #12]
 800c422:	4911      	ldr	r1, [pc, #68]	@ (800c468 <UARTEx_SetNbDataToProcess+0x94>)
 800c424:	5c8a      	ldrb	r2, [r1, r2]
 800c426:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c42a:	7b3a      	ldrb	r2, [r7, #12]
 800c42c:	490f      	ldr	r1, [pc, #60]	@ (800c46c <UARTEx_SetNbDataToProcess+0x98>)
 800c42e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c430:	fb93 f3f2 	sdiv	r3, r3, r2
 800c434:	b29a      	uxth	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c43c:	7bfb      	ldrb	r3, [r7, #15]
 800c43e:	7b7a      	ldrb	r2, [r7, #13]
 800c440:	4909      	ldr	r1, [pc, #36]	@ (800c468 <UARTEx_SetNbDataToProcess+0x94>)
 800c442:	5c8a      	ldrb	r2, [r1, r2]
 800c444:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c448:	7b7a      	ldrb	r2, [r7, #13]
 800c44a:	4908      	ldr	r1, [pc, #32]	@ (800c46c <UARTEx_SetNbDataToProcess+0x98>)
 800c44c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c44e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c452:	b29a      	uxth	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c45a:	bf00      	nop
 800c45c:	3714      	adds	r7, #20
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop
 800c468:	08017010 	.word	0x08017010
 800c46c:	08017018 	.word	0x08017018

0800c470 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c470:	b480      	push	{r7}
 800c472:	b085      	sub	sp, #20
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c480:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c484:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	b29a      	uxth	r2, r3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c490:	2300      	movs	r3, #0
}
 800c492:	4618      	mov	r0, r3
 800c494:	3714      	adds	r7, #20
 800c496:	46bd      	mov	sp, r7
 800c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49c:	4770      	bx	lr

0800c49e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c49e:	b480      	push	{r7}
 800c4a0:	b085      	sub	sp, #20
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c4a6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c4aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c4b2:	b29a      	uxth	r2, r3
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	43db      	mvns	r3, r3
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	4013      	ands	r3, r2
 800c4be:	b29a      	uxth	r2, r3
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c4c6:	2300      	movs	r3, #0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3714      	adds	r7, #20
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr

0800c4d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b085      	sub	sp, #20
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	1d3b      	adds	r3, r7, #4
 800c4de:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800c502:	2300      	movs	r3, #0
}
 800c504:	4618      	mov	r0, r3
 800c506:	3714      	adds	r7, #20
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c510:	b480      	push	{r7}
 800c512:	b09d      	sub	sp, #116	@ 0x74
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c51a:	2300      	movs	r3, #0
 800c51c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	4413      	add	r3, r2
 800c52a:	881b      	ldrh	r3, [r3, #0]
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800c532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c536:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	78db      	ldrb	r3, [r3, #3]
 800c53e:	2b03      	cmp	r3, #3
 800c540:	d81f      	bhi.n	800c582 <USB_ActivateEndpoint+0x72>
 800c542:	a201      	add	r2, pc, #4	@ (adr r2, 800c548 <USB_ActivateEndpoint+0x38>)
 800c544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c548:	0800c559 	.word	0x0800c559
 800c54c:	0800c575 	.word	0x0800c575
 800c550:	0800c58b 	.word	0x0800c58b
 800c554:	0800c567 	.word	0x0800c567
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c558:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c55c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c560:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c564:	e012      	b.n	800c58c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c566:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c56a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800c56e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c572:	e00b      	b.n	800c58c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c574:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c578:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c57c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c580:	e004      	b.n	800c58c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800c582:	2301      	movs	r3, #1
 800c584:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800c588:	e000      	b.n	800c58c <USB_ActivateEndpoint+0x7c>
      break;
 800c58a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	009b      	lsls	r3, r3, #2
 800c594:	441a      	add	r2, r3
 800c596:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c59a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c59e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	009b      	lsls	r3, r3, #2
 800c5b6:	4413      	add	r3, r2
 800c5b8:	881b      	ldrh	r3, [r3, #0]
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	b21b      	sxth	r3, r3
 800c5be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5c6:	b21a      	sxth	r2, r3
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	b21b      	sxth	r3, r3
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	b21b      	sxth	r3, r3
 800c5d2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	441a      	add	r2, r3
 800c5e0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800c5e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5f4:	b29b      	uxth	r3, r3
 800c5f6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	7b1b      	ldrb	r3, [r3, #12]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	f040 8178 	bne.w	800c8f2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	785b      	ldrb	r3, [r3, #1]
 800c606:	2b00      	cmp	r3, #0
 800c608:	f000 8084 	beq.w	800c714 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	61bb      	str	r3, [r7, #24]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c616:	b29b      	uxth	r3, r3
 800c618:	461a      	mov	r2, r3
 800c61a:	69bb      	ldr	r3, [r7, #24]
 800c61c:	4413      	add	r3, r2
 800c61e:	61bb      	str	r3, [r7, #24]
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	00da      	lsls	r2, r3, #3
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	4413      	add	r3, r2
 800c62a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c62e:	617b      	str	r3, [r7, #20]
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	88db      	ldrh	r3, [r3, #6]
 800c634:	085b      	lsrs	r3, r3, #1
 800c636:	b29b      	uxth	r3, r3
 800c638:	005b      	lsls	r3, r3, #1
 800c63a:	b29a      	uxth	r2, r3
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	4413      	add	r3, r2
 800c64a:	881b      	ldrh	r3, [r3, #0]
 800c64c:	827b      	strh	r3, [r7, #18]
 800c64e:	8a7b      	ldrh	r3, [r7, #18]
 800c650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c654:	2b00      	cmp	r3, #0
 800c656:	d01b      	beq.n	800c690 <USB_ActivateEndpoint+0x180>
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	009b      	lsls	r3, r3, #2
 800c660:	4413      	add	r3, r2
 800c662:	881b      	ldrh	r3, [r3, #0]
 800c664:	b29b      	uxth	r3, r3
 800c666:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c66a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c66e:	823b      	strh	r3, [r7, #16]
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	009b      	lsls	r3, r3, #2
 800c678:	441a      	add	r2, r3
 800c67a:	8a3b      	ldrh	r3, [r7, #16]
 800c67c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c680:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c684:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c688:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	78db      	ldrb	r3, [r3, #3]
 800c694:	2b01      	cmp	r3, #1
 800c696:	d020      	beq.n	800c6da <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	4413      	add	r3, r2
 800c6a2:	881b      	ldrh	r3, [r3, #0]
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c6ae:	81bb      	strh	r3, [r7, #12]
 800c6b0:	89bb      	ldrh	r3, [r7, #12]
 800c6b2:	f083 0320 	eor.w	r3, r3, #32
 800c6b6:	81bb      	strh	r3, [r7, #12]
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	441a      	add	r2, r3
 800c6c2:	89bb      	ldrh	r3, [r7, #12]
 800c6c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	8013      	strh	r3, [r2, #0]
 800c6d8:	e2d5      	b.n	800cc86 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	4413      	add	r3, r2
 800c6e4:	881b      	ldrh	r3, [r3, #0]
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c6f0:	81fb      	strh	r3, [r7, #14]
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	441a      	add	r2, r3
 800c6fc:	89fb      	ldrh	r3, [r7, #14]
 800c6fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c702:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c706:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c70a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c70e:	b29b      	uxth	r3, r3
 800c710:	8013      	strh	r3, [r2, #0]
 800c712:	e2b8      	b.n	800cc86 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	633b      	str	r3, [r7, #48]	@ 0x30
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c71e:	b29b      	uxth	r3, r3
 800c720:	461a      	mov	r2, r3
 800c722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c724:	4413      	add	r3, r2
 800c726:	633b      	str	r3, [r7, #48]	@ 0x30
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	00da      	lsls	r2, r3, #3
 800c72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c730:	4413      	add	r3, r2
 800c732:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c736:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	88db      	ldrh	r3, [r3, #6]
 800c73c:	085b      	lsrs	r3, r3, #1
 800c73e:	b29b      	uxth	r3, r3
 800c740:	005b      	lsls	r3, r3, #1
 800c742:	b29a      	uxth	r2, r3
 800c744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c746:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c752:	b29b      	uxth	r3, r3
 800c754:	461a      	mov	r2, r3
 800c756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c758:	4413      	add	r3, r2
 800c75a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	00da      	lsls	r2, r3, #3
 800c762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c764:	4413      	add	r3, r2
 800c766:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c76a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c76e:	881b      	ldrh	r3, [r3, #0]
 800c770:	b29b      	uxth	r3, r3
 800c772:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c776:	b29a      	uxth	r2, r3
 800c778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77a:	801a      	strh	r2, [r3, #0]
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	691b      	ldr	r3, [r3, #16]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d10a      	bne.n	800c79a <USB_ActivateEndpoint+0x28a>
 800c784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c786:	881b      	ldrh	r3, [r3, #0]
 800c788:	b29b      	uxth	r3, r3
 800c78a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c78e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c792:	b29a      	uxth	r2, r3
 800c794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c796:	801a      	strh	r2, [r3, #0]
 800c798:	e039      	b.n	800c80e <USB_ActivateEndpoint+0x2fe>
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	691b      	ldr	r3, [r3, #16]
 800c79e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c7a0:	d818      	bhi.n	800c7d4 <USB_ActivateEndpoint+0x2c4>
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	691b      	ldr	r3, [r3, #16]
 800c7a6:	085b      	lsrs	r3, r3, #1
 800c7a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	691b      	ldr	r3, [r3, #16]
 800c7ae:	f003 0301 	and.w	r3, r3, #1
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d002      	beq.n	800c7bc <USB_ActivateEndpoint+0x2ac>
 800c7b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7be:	881b      	ldrh	r3, [r3, #0]
 800c7c0:	b29a      	uxth	r2, r3
 800c7c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	029b      	lsls	r3, r3, #10
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	b29a      	uxth	r2, r3
 800c7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d0:	801a      	strh	r2, [r3, #0]
 800c7d2:	e01c      	b.n	800c80e <USB_ActivateEndpoint+0x2fe>
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	095b      	lsrs	r3, r3, #5
 800c7da:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	691b      	ldr	r3, [r3, #16]
 800c7e0:	f003 031f 	and.w	r3, r3, #31
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d102      	bne.n	800c7ee <USB_ActivateEndpoint+0x2de>
 800c7e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7ea:	3b01      	subs	r3, #1
 800c7ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f0:	881b      	ldrh	r3, [r3, #0]
 800c7f2:	b29a      	uxth	r2, r3
 800c7f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c7f6:	b29b      	uxth	r3, r3
 800c7f8:	029b      	lsls	r3, r3, #10
 800c7fa:	b29b      	uxth	r3, r3
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	b29b      	uxth	r3, r3
 800c800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c808:	b29a      	uxth	r2, r3
 800c80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c80c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	4413      	add	r3, r2
 800c818:	881b      	ldrh	r3, [r3, #0]
 800c81a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c81c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c81e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c822:	2b00      	cmp	r3, #0
 800c824:	d01b      	beq.n	800c85e <USB_ActivateEndpoint+0x34e>
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	009b      	lsls	r3, r3, #2
 800c82e:	4413      	add	r3, r2
 800c830:	881b      	ldrh	r3, [r3, #0]
 800c832:	b29b      	uxth	r3, r3
 800c834:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c838:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c83c:	843b      	strh	r3, [r7, #32]
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	441a      	add	r2, r3
 800c848:	8c3b      	ldrh	r3, [r7, #32]
 800c84a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c84e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c852:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d124      	bne.n	800c8b0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	009b      	lsls	r3, r3, #2
 800c86e:	4413      	add	r3, r2
 800c870:	881b      	ldrh	r3, [r3, #0]
 800c872:	b29b      	uxth	r3, r3
 800c874:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c87c:	83bb      	strh	r3, [r7, #28]
 800c87e:	8bbb      	ldrh	r3, [r7, #28]
 800c880:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c884:	83bb      	strh	r3, [r7, #28]
 800c886:	8bbb      	ldrh	r3, [r7, #28]
 800c888:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c88c:	83bb      	strh	r3, [r7, #28]
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	441a      	add	r2, r3
 800c898:	8bbb      	ldrh	r3, [r7, #28]
 800c89a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c89e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	8013      	strh	r3, [r2, #0]
 800c8ae:	e1ea      	b.n	800cc86 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	4413      	add	r3, r2
 800c8ba:	881b      	ldrh	r3, [r3, #0]
 800c8bc:	b29b      	uxth	r3, r3
 800c8be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c8c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8c6:	83fb      	strh	r3, [r7, #30]
 800c8c8:	8bfb      	ldrh	r3, [r7, #30]
 800c8ca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c8ce:	83fb      	strh	r3, [r7, #30]
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	009b      	lsls	r3, r3, #2
 800c8d8:	441a      	add	r2, r3
 800c8da:	8bfb      	ldrh	r3, [r7, #30]
 800c8dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	8013      	strh	r3, [r2, #0]
 800c8f0:	e1c9      	b.n	800cc86 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	78db      	ldrb	r3, [r3, #3]
 800c8f6:	2b02      	cmp	r3, #2
 800c8f8:	d11e      	bne.n	800c938 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	4413      	add	r3, r2
 800c904:	881b      	ldrh	r3, [r3, #0]
 800c906:	b29b      	uxth	r3, r3
 800c908:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c90c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c910:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	009b      	lsls	r3, r3, #2
 800c91c:	441a      	add	r2, r3
 800c91e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c922:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c926:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c92a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c92e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c932:	b29b      	uxth	r3, r3
 800c934:	8013      	strh	r3, [r2, #0]
 800c936:	e01d      	b.n	800c974 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	009b      	lsls	r3, r3, #2
 800c940:	4413      	add	r3, r2
 800c942:	881b      	ldrh	r3, [r3, #0]
 800c944:	b29b      	uxth	r3, r3
 800c946:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c94a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c94e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	009b      	lsls	r3, r3, #2
 800c95a:	441a      	add	r2, r3
 800c95c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c960:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c964:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c968:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c96c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c970:	b29b      	uxth	r3, r3
 800c972:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c97e:	b29b      	uxth	r3, r3
 800c980:	461a      	mov	r2, r3
 800c982:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c984:	4413      	add	r3, r2
 800c986:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	00da      	lsls	r2, r3, #3
 800c98e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c990:	4413      	add	r3, r2
 800c992:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c996:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	891b      	ldrh	r3, [r3, #8]
 800c99c:	085b      	lsrs	r3, r3, #1
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	005b      	lsls	r3, r3, #1
 800c9a2:	b29a      	uxth	r2, r3
 800c9a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9a6:	801a      	strh	r2, [r3, #0]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	657b      	str	r3, [r7, #84]	@ 0x54
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9b8:	4413      	add	r3, r2
 800c9ba:	657b      	str	r3, [r7, #84]	@ 0x54
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	00da      	lsls	r2, r3, #3
 800c9c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9c4:	4413      	add	r3, r2
 800c9c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c9ca:	653b      	str	r3, [r7, #80]	@ 0x50
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	895b      	ldrh	r3, [r3, #10]
 800c9d0:	085b      	lsrs	r3, r3, #1
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	005b      	lsls	r3, r3, #1
 800c9d6:	b29a      	uxth	r2, r3
 800c9d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9da:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	785b      	ldrb	r3, [r3, #1]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f040 8093 	bne.w	800cb0c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	4413      	add	r3, r2
 800c9f0:	881b      	ldrh	r3, [r3, #0]
 800c9f2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c9f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c9fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d01b      	beq.n	800ca3a <USB_ActivateEndpoint+0x52a>
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	4413      	add	r3, r2
 800ca0c:	881b      	ldrh	r3, [r3, #0]
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca18:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	009b      	lsls	r3, r3, #2
 800ca22:	441a      	add	r2, r3
 800ca24:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ca26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ca32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	009b      	lsls	r3, r3, #2
 800ca42:	4413      	add	r3, r2
 800ca44:	881b      	ldrh	r3, [r3, #0]
 800ca46:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800ca48:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ca4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d01b      	beq.n	800ca8a <USB_ActivateEndpoint+0x57a>
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	009b      	lsls	r3, r3, #2
 800ca5a:	4413      	add	r3, r2
 800ca5c:	881b      	ldrh	r3, [r3, #0]
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca68:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	441a      	add	r2, r3
 800ca74:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ca76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca82:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	009b      	lsls	r3, r3, #2
 800ca92:	4413      	add	r3, r2
 800ca94:	881b      	ldrh	r3, [r3, #0]
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ca9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caa0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800caa2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800caa4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800caa8:	873b      	strh	r3, [r7, #56]	@ 0x38
 800caaa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800caac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cab0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	441a      	add	r2, r3
 800cabc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800cabe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cac2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cac6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800caca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cace:	b29b      	uxth	r3, r3
 800cad0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	4413      	add	r3, r2
 800cadc:	881b      	ldrh	r3, [r3, #0]
 800cade:	b29b      	uxth	r3, r3
 800cae0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cae4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cae8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	441a      	add	r2, r3
 800caf4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800caf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cafa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cafe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	8013      	strh	r3, [r2, #0]
 800cb0a:	e0bc      	b.n	800cc86 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	4413      	add	r3, r2
 800cb16:	881b      	ldrh	r3, [r3, #0]
 800cb18:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800cb1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800cb20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d01d      	beq.n	800cb64 <USB_ActivateEndpoint+0x654>
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	4413      	add	r3, r2
 800cb32:	881b      	ldrh	r3, [r3, #0]
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb3e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	441a      	add	r2, r3
 800cb4c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800cb50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cb5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	4413      	add	r3, r2
 800cb6e:	881b      	ldrh	r3, [r3, #0]
 800cb70:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800cb74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800cb78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d01d      	beq.n	800cbbc <USB_ActivateEndpoint+0x6ac>
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	009b      	lsls	r3, r3, #2
 800cb88:	4413      	add	r3, r2
 800cb8a:	881b      	ldrh	r3, [r3, #0]
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb96:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	009b      	lsls	r3, r3, #2
 800cba2:	441a      	add	r2, r3
 800cba4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800cba8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbb4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	78db      	ldrb	r3, [r3, #3]
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d024      	beq.n	800cc0e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	781b      	ldrb	r3, [r3, #0]
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	4413      	add	r3, r2
 800cbce:	881b      	ldrh	r3, [r3, #0]
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbda:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800cbde:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800cbe2:	f083 0320 	eor.w	r3, r3, #32
 800cbe6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	441a      	add	r2, r3
 800cbf4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800cbf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	8013      	strh	r3, [r2, #0]
 800cc0c:	e01d      	b.n	800cc4a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	009b      	lsls	r3, r3, #2
 800cc16:	4413      	add	r3, r2
 800cc18:	881b      	ldrh	r3, [r3, #0]
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc24:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800cc28:	687a      	ldr	r2, [r7, #4]
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	441a      	add	r2, r3
 800cc32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cc36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cc4a:	687a      	ldr	r2, [r7, #4]
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	4413      	add	r3, r2
 800cc54:	881b      	ldrh	r3, [r3, #0]
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cc5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc60:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	441a      	add	r2, r3
 800cc6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cc72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800cc86:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3774      	adds	r7, #116	@ 0x74
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr
 800cc96:	bf00      	nop

0800cc98 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b08d      	sub	sp, #52	@ 0x34
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	7b1b      	ldrb	r3, [r3, #12]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	f040 808e 	bne.w	800cdc8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	785b      	ldrb	r3, [r3, #1]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d044      	beq.n	800cd3e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	4413      	add	r3, r2
 800ccbe:	881b      	ldrh	r3, [r3, #0]
 800ccc0:	81bb      	strh	r3, [r7, #12]
 800ccc2:	89bb      	ldrh	r3, [r7, #12]
 800ccc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d01b      	beq.n	800cd04 <USB_DeactivateEndpoint+0x6c>
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	4413      	add	r3, r2
 800ccd6:	881b      	ldrh	r3, [r3, #0]
 800ccd8:	b29b      	uxth	r3, r3
 800ccda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ccde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cce2:	817b      	strh	r3, [r7, #10]
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	441a      	add	r2, r3
 800ccee:	897b      	ldrh	r3, [r7, #10]
 800ccf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ccf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ccf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ccfc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	4413      	add	r3, r2
 800cd0e:	881b      	ldrh	r3, [r3, #0]
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd1a:	813b      	strh	r3, [r7, #8]
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	009b      	lsls	r3, r3, #2
 800cd24:	441a      	add	r2, r3
 800cd26:	893b      	ldrh	r3, [r7, #8]
 800cd28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	8013      	strh	r3, [r2, #0]
 800cd3c:	e192      	b.n	800d064 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	009b      	lsls	r3, r3, #2
 800cd46:	4413      	add	r3, r2
 800cd48:	881b      	ldrh	r3, [r3, #0]
 800cd4a:	827b      	strh	r3, [r7, #18]
 800cd4c:	8a7b      	ldrh	r3, [r7, #18]
 800cd4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d01b      	beq.n	800cd8e <USB_DeactivateEndpoint+0xf6>
 800cd56:	687a      	ldr	r2, [r7, #4]
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	4413      	add	r3, r2
 800cd60:	881b      	ldrh	r3, [r3, #0]
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd6c:	823b      	strh	r3, [r7, #16]
 800cd6e:	687a      	ldr	r2, [r7, #4]
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	009b      	lsls	r3, r3, #2
 800cd76:	441a      	add	r2, r3
 800cd78:	8a3b      	ldrh	r3, [r7, #16]
 800cd7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cd86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd8a:	b29b      	uxth	r3, r3
 800cd8c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	009b      	lsls	r3, r3, #2
 800cd96:	4413      	add	r3, r2
 800cd98:	881b      	ldrh	r3, [r3, #0]
 800cd9a:	b29b      	uxth	r3, r3
 800cd9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cda0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cda4:	81fb      	strh	r3, [r7, #14]
 800cda6:	687a      	ldr	r2, [r7, #4]
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	009b      	lsls	r3, r3, #2
 800cdae:	441a      	add	r2, r3
 800cdb0:	89fb      	ldrh	r3, [r7, #14]
 800cdb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cdba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	8013      	strh	r3, [r2, #0]
 800cdc6:	e14d      	b.n	800d064 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	785b      	ldrb	r3, [r3, #1]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	f040 80a5 	bne.w	800cf1c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	4413      	add	r3, r2
 800cddc:	881b      	ldrh	r3, [r3, #0]
 800cdde:	843b      	strh	r3, [r7, #32]
 800cde0:	8c3b      	ldrh	r3, [r7, #32]
 800cde2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d01b      	beq.n	800ce22 <USB_DeactivateEndpoint+0x18a>
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	009b      	lsls	r3, r3, #2
 800cdf2:	4413      	add	r3, r2
 800cdf4:	881b      	ldrh	r3, [r3, #0]
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cdfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce00:	83fb      	strh	r3, [r7, #30]
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	441a      	add	r2, r3
 800ce0c:	8bfb      	ldrh	r3, [r7, #30]
 800ce0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ce1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	4413      	add	r3, r2
 800ce2c:	881b      	ldrh	r3, [r3, #0]
 800ce2e:	83bb      	strh	r3, [r7, #28]
 800ce30:	8bbb      	ldrh	r3, [r7, #28]
 800ce32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d01b      	beq.n	800ce72 <USB_DeactivateEndpoint+0x1da>
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	009b      	lsls	r3, r3, #2
 800ce42:	4413      	add	r3, r2
 800ce44:	881b      	ldrh	r3, [r3, #0]
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce50:	837b      	strh	r3, [r7, #26]
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	441a      	add	r2, r3
 800ce5c:	8b7b      	ldrh	r3, [r7, #26]
 800ce5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ce6e:	b29b      	uxth	r3, r3
 800ce70:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	4413      	add	r3, r2
 800ce7c:	881b      	ldrh	r3, [r3, #0]
 800ce7e:	b29b      	uxth	r3, r3
 800ce80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce88:	833b      	strh	r3, [r7, #24]
 800ce8a:	687a      	ldr	r2, [r7, #4]
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	441a      	add	r2, r3
 800ce94:	8b3b      	ldrh	r3, [r7, #24]
 800ce96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cea2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cea6:	b29b      	uxth	r3, r3
 800cea8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	009b      	lsls	r3, r3, #2
 800ceb2:	4413      	add	r3, r2
 800ceb4:	881b      	ldrh	r3, [r3, #0]
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cec0:	82fb      	strh	r3, [r7, #22]
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	441a      	add	r2, r3
 800cecc:	8afb      	ldrh	r3, [r7, #22]
 800cece:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ced2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ced6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ceda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cede:	b29b      	uxth	r3, r3
 800cee0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cee2:	687a      	ldr	r2, [r7, #4]
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	4413      	add	r3, r2
 800ceec:	881b      	ldrh	r3, [r3, #0]
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cef4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cef8:	82bb      	strh	r3, [r7, #20]
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	441a      	add	r2, r3
 800cf04:	8abb      	ldrh	r3, [r7, #20]
 800cf06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	8013      	strh	r3, [r2, #0]
 800cf1a:	e0a3      	b.n	800d064 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	4413      	add	r3, r2
 800cf26:	881b      	ldrh	r3, [r3, #0]
 800cf28:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800cf2a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cf2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d01b      	beq.n	800cf6c <USB_DeactivateEndpoint+0x2d4>
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	4413      	add	r3, r2
 800cf3e:	881b      	ldrh	r3, [r3, #0]
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf4a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	441a      	add	r2, r3
 800cf56:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cf58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cf64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf68:	b29b      	uxth	r3, r3
 800cf6a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	4413      	add	r3, r2
 800cf76:	881b      	ldrh	r3, [r3, #0]
 800cf78:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800cf7a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cf7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d01b      	beq.n	800cfbc <USB_DeactivateEndpoint+0x324>
 800cf84:	687a      	ldr	r2, [r7, #4]
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	009b      	lsls	r3, r3, #2
 800cf8c:	4413      	add	r3, r2
 800cf8e:	881b      	ldrh	r3, [r3, #0]
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf9a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	009b      	lsls	r3, r3, #2
 800cfa4:	441a      	add	r2, r3
 800cfa6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cfa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cfac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cfb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfb4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cfb8:	b29b      	uxth	r3, r3
 800cfba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800cfbc:	687a      	ldr	r2, [r7, #4]
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	4413      	add	r3, r2
 800cfc6:	881b      	ldrh	r3, [r3, #0]
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cfce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfd2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	781b      	ldrb	r3, [r3, #0]
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	441a      	add	r2, r3
 800cfde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cfe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cfe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cfe8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cfec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cff4:	687a      	ldr	r2, [r7, #4]
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	4413      	add	r3, r2
 800cffe:	881b      	ldrh	r3, [r3, #0]
 800d000:	b29b      	uxth	r3, r3
 800d002:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d006:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d00a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	441a      	add	r2, r3
 800d016:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d018:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d01c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d020:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d028:	b29b      	uxth	r3, r3
 800d02a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d02c:	687a      	ldr	r2, [r7, #4]
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	4413      	add	r3, r2
 800d036:	881b      	ldrh	r3, [r3, #0]
 800d038:	b29b      	uxth	r3, r3
 800d03a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d03e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d042:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	009b      	lsls	r3, r3, #2
 800d04c:	441a      	add	r2, r3
 800d04e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d058:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d05c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d060:	b29b      	uxth	r3, r3
 800d062:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800d064:	2300      	movs	r3, #0
}
 800d066:	4618      	mov	r0, r3
 800d068:	3734      	adds	r7, #52	@ 0x34
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr

0800d072 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d072:	b580      	push	{r7, lr}
 800d074:	b0c2      	sub	sp, #264	@ 0x108
 800d076:	af00      	add	r7, sp, #0
 800d078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d07c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d080:	6018      	str	r0, [r3, #0]
 800d082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d08a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d08c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	785b      	ldrb	r3, [r3, #1]
 800d098:	2b01      	cmp	r3, #1
 800d09a:	f040 86b7 	bne.w	800de0c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800d09e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	699a      	ldr	r2, [r3, #24]
 800d0aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	691b      	ldr	r3, [r3, #16]
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d908      	bls.n	800d0cc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800d0ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	691b      	ldr	r3, [r3, #16]
 800d0c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800d0ca:	e007      	b.n	800d0dc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800d0cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	699b      	ldr	r3, [r3, #24]
 800d0d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d0dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	7b1b      	ldrb	r3, [r3, #12]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d13a      	bne.n	800d162 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d0ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	6959      	ldr	r1, [r3, #20]
 800d0f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	88da      	ldrh	r2, [r3, #6]
 800d104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d108:	b29b      	uxth	r3, r3
 800d10a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d10e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d112:	6800      	ldr	r0, [r0, #0]
 800d114:	f001 fc99 	bl	800ea4a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d11c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	613b      	str	r3, [r7, #16]
 800d124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d128:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d132:	b29b      	uxth	r3, r3
 800d134:	461a      	mov	r2, r3
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	4413      	add	r3, r2
 800d13a:	613b      	str	r3, [r7, #16]
 800d13c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	00da      	lsls	r2, r3, #3
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	4413      	add	r3, r2
 800d14e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d152:	60fb      	str	r3, [r7, #12]
 800d154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d158:	b29a      	uxth	r2, r3
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	801a      	strh	r2, [r3, #0]
 800d15e:	f000 be1f 	b.w	800dda0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	78db      	ldrb	r3, [r3, #3]
 800d16e:	2b02      	cmp	r3, #2
 800d170:	f040 8462 	bne.w	800da38 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	6a1a      	ldr	r2, [r3, #32]
 800d180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d184:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	691b      	ldr	r3, [r3, #16]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	f240 83df 	bls.w	800d950 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d196:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	009b      	lsls	r3, r3, #2
 800d1aa:	4413      	add	r3, r2
 800d1ac:	881b      	ldrh	r3, [r3, #0]
 800d1ae:	b29b      	uxth	r3, r3
 800d1b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d1b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d1b8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800d1bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	441a      	add	r2, r3
 800d1d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d1da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d1e2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d1e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1ea:	b29b      	uxth	r3, r3
 800d1ec:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d1ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	6a1a      	ldr	r2, [r3, #32]
 800d1fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1fe:	1ad2      	subs	r2, r2, r3
 800d200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d20c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d210:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d214:	681a      	ldr	r2, [r3, #0]
 800d216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d21a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	009b      	lsls	r3, r3, #2
 800d224:	4413      	add	r3, r2
 800d226:	881b      	ldrh	r3, [r3, #0]
 800d228:	b29b      	uxth	r3, r3
 800d22a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d22e:	2b00      	cmp	r3, #0
 800d230:	f000 81c7 	beq.w	800d5c2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d238:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	785b      	ldrb	r3, [r3, #1]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d177      	bne.n	800d340 <USB_EPStartXfer+0x2ce>
 800d250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d254:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d25c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d260:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	461a      	mov	r2, r3
 800d26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d270:	4413      	add	r3, r2
 800d272:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	00da      	lsls	r2, r3, #3
 800d282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d284:	4413      	add	r3, r2
 800d286:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d28a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d28e:	881b      	ldrh	r3, [r3, #0]
 800d290:	b29b      	uxth	r3, r3
 800d292:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d296:	b29a      	uxth	r2, r3
 800d298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d29a:	801a      	strh	r2, [r3, #0]
 800d29c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d10a      	bne.n	800d2ba <USB_EPStartXfer+0x248>
 800d2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a6:	881b      	ldrh	r3, [r3, #0]
 800d2a8:	b29b      	uxth	r3, r3
 800d2aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2b2:	b29a      	uxth	r2, r3
 800d2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b6:	801a      	strh	r2, [r3, #0]
 800d2b8:	e067      	b.n	800d38a <USB_EPStartXfer+0x318>
 800d2ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2be:	2b3e      	cmp	r3, #62	@ 0x3e
 800d2c0:	d81c      	bhi.n	800d2fc <USB_EPStartXfer+0x28a>
 800d2c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2c6:	085b      	lsrs	r3, r3, #1
 800d2c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d2cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2d0:	f003 0301 	and.w	r3, r3, #1
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d004      	beq.n	800d2e2 <USB_EPStartXfer+0x270>
 800d2d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d2dc:	3301      	adds	r3, #1
 800d2de:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e4:	881b      	ldrh	r3, [r3, #0]
 800d2e6:	b29a      	uxth	r2, r3
 800d2e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	029b      	lsls	r3, r3, #10
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f8:	801a      	strh	r2, [r3, #0]
 800d2fa:	e046      	b.n	800d38a <USB_EPStartXfer+0x318>
 800d2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d300:	095b      	lsrs	r3, r3, #5
 800d302:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d30a:	f003 031f 	and.w	r3, r3, #31
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d104      	bne.n	800d31c <USB_EPStartXfer+0x2aa>
 800d312:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d316:	3b01      	subs	r3, #1
 800d318:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d31e:	881b      	ldrh	r3, [r3, #0]
 800d320:	b29a      	uxth	r2, r3
 800d322:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d326:	b29b      	uxth	r3, r3
 800d328:	029b      	lsls	r3, r3, #10
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	4313      	orrs	r3, r2
 800d32e:	b29b      	uxth	r3, r3
 800d330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d338:	b29a      	uxth	r2, r3
 800d33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d33c:	801a      	strh	r2, [r3, #0]
 800d33e:	e024      	b.n	800d38a <USB_EPStartXfer+0x318>
 800d340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	785b      	ldrb	r3, [r3, #1]
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	d11c      	bne.n	800d38a <USB_EPStartXfer+0x318>
 800d350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d354:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d35e:	b29b      	uxth	r3, r3
 800d360:	461a      	mov	r2, r3
 800d362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d364:	4413      	add	r3, r2
 800d366:	633b      	str	r3, [r7, #48]	@ 0x30
 800d368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d36c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	00da      	lsls	r2, r3, #3
 800d376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d378:	4413      	add	r3, r2
 800d37a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d37e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d384:	b29a      	uxth	r2, r3
 800d386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d388:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d38a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d38e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	895b      	ldrh	r3, [r3, #10]
 800d396:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d39a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d39e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	6959      	ldr	r1, [r3, #20]
 800d3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d3b0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d3b4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d3b8:	6800      	ldr	r0, [r0, #0]
 800d3ba:	f001 fb46 	bl	800ea4a <USB_WritePMA>
            ep->xfer_buff += len;
 800d3be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	695a      	ldr	r2, [r3, #20]
 800d3ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3ce:	441a      	add	r2, r3
 800d3d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d3dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	6a1a      	ldr	r2, [r3, #32]
 800d3e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	691b      	ldr	r3, [r3, #16]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d90f      	bls.n	800d418 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800d3f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	6a1a      	ldr	r2, [r3, #32]
 800d404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d408:	1ad2      	subs	r2, r2, r3
 800d40a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d40e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	621a      	str	r2, [r3, #32]
 800d416:	e00e      	b.n	800d436 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800d418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d41c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	6a1b      	ldr	r3, [r3, #32]
 800d424:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d42c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2200      	movs	r2, #0
 800d434:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d43a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	785b      	ldrb	r3, [r3, #1]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d177      	bne.n	800d536 <USB_EPStartXfer+0x4c4>
 800d446:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d44a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	61bb      	str	r3, [r7, #24]
 800d452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d456:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d460:	b29b      	uxth	r3, r3
 800d462:	461a      	mov	r2, r3
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	4413      	add	r3, r2
 800d468:	61bb      	str	r3, [r7, #24]
 800d46a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d46e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	00da      	lsls	r2, r3, #3
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	4413      	add	r3, r2
 800d47c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d480:	617b      	str	r3, [r7, #20]
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	881b      	ldrh	r3, [r3, #0]
 800d486:	b29b      	uxth	r3, r3
 800d488:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d48c:	b29a      	uxth	r2, r3
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	801a      	strh	r2, [r3, #0]
 800d492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d496:	2b00      	cmp	r3, #0
 800d498:	d10a      	bne.n	800d4b0 <USB_EPStartXfer+0x43e>
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	881b      	ldrh	r3, [r3, #0]
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4a8:	b29a      	uxth	r2, r3
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	801a      	strh	r2, [r3, #0]
 800d4ae:	e06d      	b.n	800d58c <USB_EPStartXfer+0x51a>
 800d4b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4b4:	2b3e      	cmp	r3, #62	@ 0x3e
 800d4b6:	d81c      	bhi.n	800d4f2 <USB_EPStartXfer+0x480>
 800d4b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4bc:	085b      	lsrs	r3, r3, #1
 800d4be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4c6:	f003 0301 	and.w	r3, r3, #1
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d004      	beq.n	800d4d8 <USB_EPStartXfer+0x466>
 800d4ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	881b      	ldrh	r3, [r3, #0]
 800d4dc:	b29a      	uxth	r2, r3
 800d4de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	029b      	lsls	r3, r3, #10
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	b29a      	uxth	r2, r3
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	801a      	strh	r2, [r3, #0]
 800d4f0:	e04c      	b.n	800d58c <USB_EPStartXfer+0x51a>
 800d4f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4f6:	095b      	lsrs	r3, r3, #5
 800d4f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d4fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d500:	f003 031f 	and.w	r3, r3, #31
 800d504:	2b00      	cmp	r3, #0
 800d506:	d104      	bne.n	800d512 <USB_EPStartXfer+0x4a0>
 800d508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d50c:	3b01      	subs	r3, #1
 800d50e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	881b      	ldrh	r3, [r3, #0]
 800d516:	b29a      	uxth	r2, r3
 800d518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	029b      	lsls	r3, r3, #10
 800d520:	b29b      	uxth	r3, r3
 800d522:	4313      	orrs	r3, r2
 800d524:	b29b      	uxth	r3, r3
 800d526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d52a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d52e:	b29a      	uxth	r2, r3
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	801a      	strh	r2, [r3, #0]
 800d534:	e02a      	b.n	800d58c <USB_EPStartXfer+0x51a>
 800d536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d53a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	785b      	ldrb	r3, [r3, #1]
 800d542:	2b01      	cmp	r3, #1
 800d544:	d122      	bne.n	800d58c <USB_EPStartXfer+0x51a>
 800d546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d54a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	623b      	str	r3, [r7, #32]
 800d552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d556:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d560:	b29b      	uxth	r3, r3
 800d562:	461a      	mov	r2, r3
 800d564:	6a3b      	ldr	r3, [r7, #32]
 800d566:	4413      	add	r3, r2
 800d568:	623b      	str	r3, [r7, #32]
 800d56a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d56e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	00da      	lsls	r2, r3, #3
 800d578:	6a3b      	ldr	r3, [r7, #32]
 800d57a:	4413      	add	r3, r2
 800d57c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d580:	61fb      	str	r3, [r7, #28]
 800d582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d586:	b29a      	uxth	r2, r3
 800d588:	69fb      	ldr	r3, [r7, #28]
 800d58a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d58c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	891b      	ldrh	r3, [r3, #8]
 800d598:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d59c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	6959      	ldr	r1, [r3, #20]
 800d5a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d5b2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d5b6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d5ba:	6800      	ldr	r0, [r0, #0]
 800d5bc:	f001 fa45 	bl	800ea4a <USB_WritePMA>
 800d5c0:	e3ee      	b.n	800dda0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d5c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	785b      	ldrb	r3, [r3, #1]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d177      	bne.n	800d6c2 <USB_EPStartXfer+0x650>
 800d5d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d5de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d5ec:	b29b      	uxth	r3, r3
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5f2:	4413      	add	r3, r2
 800d5f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d5f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	00da      	lsls	r2, r3, #3
 800d604:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d606:	4413      	add	r3, r2
 800d608:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d60c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d60e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d610:	881b      	ldrh	r3, [r3, #0]
 800d612:	b29b      	uxth	r3, r3
 800d614:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d618:	b29a      	uxth	r2, r3
 800d61a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d61c:	801a      	strh	r2, [r3, #0]
 800d61e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d622:	2b00      	cmp	r3, #0
 800d624:	d10a      	bne.n	800d63c <USB_EPStartXfer+0x5ca>
 800d626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d628:	881b      	ldrh	r3, [r3, #0]
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d634:	b29a      	uxth	r2, r3
 800d636:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d638:	801a      	strh	r2, [r3, #0]
 800d63a:	e06d      	b.n	800d718 <USB_EPStartXfer+0x6a6>
 800d63c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d640:	2b3e      	cmp	r3, #62	@ 0x3e
 800d642:	d81c      	bhi.n	800d67e <USB_EPStartXfer+0x60c>
 800d644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d648:	085b      	lsrs	r3, r3, #1
 800d64a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d64e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d652:	f003 0301 	and.w	r3, r3, #1
 800d656:	2b00      	cmp	r3, #0
 800d658:	d004      	beq.n	800d664 <USB_EPStartXfer+0x5f2>
 800d65a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d65e:	3301      	adds	r3, #1
 800d660:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d666:	881b      	ldrh	r3, [r3, #0]
 800d668:	b29a      	uxth	r2, r3
 800d66a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d66e:	b29b      	uxth	r3, r3
 800d670:	029b      	lsls	r3, r3, #10
 800d672:	b29b      	uxth	r3, r3
 800d674:	4313      	orrs	r3, r2
 800d676:	b29a      	uxth	r2, r3
 800d678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d67a:	801a      	strh	r2, [r3, #0]
 800d67c:	e04c      	b.n	800d718 <USB_EPStartXfer+0x6a6>
 800d67e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d682:	095b      	lsrs	r3, r3, #5
 800d684:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d68c:	f003 031f 	and.w	r3, r3, #31
 800d690:	2b00      	cmp	r3, #0
 800d692:	d104      	bne.n	800d69e <USB_EPStartXfer+0x62c>
 800d694:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d698:	3b01      	subs	r3, #1
 800d69a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d69e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6a0:	881b      	ldrh	r3, [r3, #0]
 800d6a2:	b29a      	uxth	r2, r3
 800d6a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d6a8:	b29b      	uxth	r3, r3
 800d6aa:	029b      	lsls	r3, r3, #10
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6be:	801a      	strh	r2, [r3, #0]
 800d6c0:	e02a      	b.n	800d718 <USB_EPStartXfer+0x6a6>
 800d6c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	785b      	ldrb	r3, [r3, #1]
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	d122      	bne.n	800d718 <USB_EPStartXfer+0x6a6>
 800d6d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	653b      	str	r3, [r7, #80]	@ 0x50
 800d6de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6f2:	4413      	add	r3, r2
 800d6f4:	653b      	str	r3, [r7, #80]	@ 0x50
 800d6f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	00da      	lsls	r2, r3, #3
 800d704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d706:	4413      	add	r3, r2
 800d708:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d70c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d712:	b29a      	uxth	r2, r3
 800d714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d716:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d71c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	891b      	ldrh	r3, [r3, #8]
 800d724:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d72c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	6959      	ldr	r1, [r3, #20]
 800d734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d738:	b29b      	uxth	r3, r3
 800d73a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d73e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d742:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d746:	6800      	ldr	r0, [r0, #0]
 800d748:	f001 f97f 	bl	800ea4a <USB_WritePMA>
            ep->xfer_buff += len;
 800d74c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	695a      	ldr	r2, [r3, #20]
 800d758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d75c:	441a      	add	r2, r3
 800d75e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d76a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d76e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	6a1a      	ldr	r2, [r3, #32]
 800d776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d77a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	691b      	ldr	r3, [r3, #16]
 800d782:	429a      	cmp	r2, r3
 800d784:	d90f      	bls.n	800d7a6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d78a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	6a1a      	ldr	r2, [r3, #32]
 800d792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d796:	1ad2      	subs	r2, r2, r3
 800d798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d79c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	621a      	str	r2, [r3, #32]
 800d7a4:	e00e      	b.n	800d7c4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d7a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	6a1b      	ldr	r3, [r3, #32]
 800d7b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d7b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d7c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800d7d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	785b      	ldrb	r3, [r3, #1]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d177      	bne.n	800d8d0 <USB_EPStartXfer+0x85e>
 800d7e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d7ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d800:	4413      	add	r3, r2
 800d802:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	00da      	lsls	r2, r3, #3
 800d812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d814:	4413      	add	r3, r2
 800d816:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d81a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d81c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d81e:	881b      	ldrh	r3, [r3, #0]
 800d820:	b29b      	uxth	r3, r3
 800d822:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d826:	b29a      	uxth	r2, r3
 800d828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d82a:	801a      	strh	r2, [r3, #0]
 800d82c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d830:	2b00      	cmp	r3, #0
 800d832:	d10a      	bne.n	800d84a <USB_EPStartXfer+0x7d8>
 800d834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d836:	881b      	ldrh	r3, [r3, #0]
 800d838:	b29b      	uxth	r3, r3
 800d83a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d83e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d842:	b29a      	uxth	r2, r3
 800d844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d846:	801a      	strh	r2, [r3, #0]
 800d848:	e067      	b.n	800d91a <USB_EPStartXfer+0x8a8>
 800d84a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d84e:	2b3e      	cmp	r3, #62	@ 0x3e
 800d850:	d81c      	bhi.n	800d88c <USB_EPStartXfer+0x81a>
 800d852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d856:	085b      	lsrs	r3, r3, #1
 800d858:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d860:	f003 0301 	and.w	r3, r3, #1
 800d864:	2b00      	cmp	r3, #0
 800d866:	d004      	beq.n	800d872 <USB_EPStartXfer+0x800>
 800d868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d86c:	3301      	adds	r3, #1
 800d86e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d874:	881b      	ldrh	r3, [r3, #0]
 800d876:	b29a      	uxth	r2, r3
 800d878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d87c:	b29b      	uxth	r3, r3
 800d87e:	029b      	lsls	r3, r3, #10
 800d880:	b29b      	uxth	r3, r3
 800d882:	4313      	orrs	r3, r2
 800d884:	b29a      	uxth	r2, r3
 800d886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d888:	801a      	strh	r2, [r3, #0]
 800d88a:	e046      	b.n	800d91a <USB_EPStartXfer+0x8a8>
 800d88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d890:	095b      	lsrs	r3, r3, #5
 800d892:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d89a:	f003 031f 	and.w	r3, r3, #31
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d104      	bne.n	800d8ac <USB_EPStartXfer+0x83a>
 800d8a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d8a6:	3b01      	subs	r3, #1
 800d8a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d8ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8ae:	881b      	ldrh	r3, [r3, #0]
 800d8b0:	b29a      	uxth	r2, r3
 800d8b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	029b      	lsls	r3, r3, #10
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	4313      	orrs	r3, r2
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8c8:	b29a      	uxth	r2, r3
 800d8ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8cc:	801a      	strh	r2, [r3, #0]
 800d8ce:	e024      	b.n	800d91a <USB_EPStartXfer+0x8a8>
 800d8d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	785b      	ldrb	r3, [r3, #1]
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d11c      	bne.n	800d91a <USB_EPStartXfer+0x8a8>
 800d8e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8f4:	4413      	add	r3, r2
 800d8f6:	643b      	str	r3, [r7, #64]	@ 0x40
 800d8f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	00da      	lsls	r2, r3, #3
 800d906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d908:	4413      	add	r3, r2
 800d90a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d914:	b29a      	uxth	r2, r3
 800d916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d918:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d91a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d91e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	895b      	ldrh	r3, [r3, #10]
 800d926:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d92a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d92e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	6959      	ldr	r1, [r3, #20]
 800d936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d940:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d944:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d948:	6800      	ldr	r0, [r0, #0]
 800d94a:	f001 f87e 	bl	800ea4a <USB_WritePMA>
 800d94e:	e227      	b.n	800dda0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	6a1b      	ldr	r3, [r3, #32]
 800d95c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d964:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d968:	681a      	ldr	r2, [r3, #0]
 800d96a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d96e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	4413      	add	r3, r2
 800d97a:	881b      	ldrh	r3, [r3, #0]
 800d97c:	b29b      	uxth	r3, r3
 800d97e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d986:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d98a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d98e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	009b      	lsls	r3, r3, #2
 800d9a2:	441a      	add	r2, r3
 800d9a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d9a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d9ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d9b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d9b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9b8:	b29b      	uxth	r3, r3
 800d9ba:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d9bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d9c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	461a      	mov	r2, r3
 800d9da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d9dc:	4413      	add	r3, r2
 800d9de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d9e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	781b      	ldrb	r3, [r3, #0]
 800d9ec:	00da      	lsls	r2, r3, #3
 800d9ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d9f0:	4413      	add	r3, r2
 800d9f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d9f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9fc:	b29a      	uxth	r2, r3
 800d9fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800da00:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800da02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	891b      	ldrh	r3, [r3, #8]
 800da0e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800da12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	6959      	ldr	r1, [r3, #20]
 800da1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da22:	b29b      	uxth	r3, r3
 800da24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800da28:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800da2c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800da30:	6800      	ldr	r0, [r0, #0]
 800da32:	f001 f80a 	bl	800ea4a <USB_WritePMA>
 800da36:	e1b3      	b.n	800dda0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800da38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	6a1a      	ldr	r2, [r3, #32]
 800da44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da48:	1ad2      	subs	r2, r2, r3
 800da4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800da56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da5e:	681a      	ldr	r2, [r3, #0]
 800da60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	009b      	lsls	r3, r3, #2
 800da6e:	4413      	add	r3, r2
 800da70:	881b      	ldrh	r3, [r3, #0]
 800da72:	b29b      	uxth	r3, r3
 800da74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da78:	2b00      	cmp	r3, #0
 800da7a:	f000 80c6 	beq.w	800dc0a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800da7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	673b      	str	r3, [r7, #112]	@ 0x70
 800da8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	785b      	ldrb	r3, [r3, #1]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d177      	bne.n	800db8a <USB_EPStartXfer+0xb18>
 800da9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800daa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	461a      	mov	r2, r3
 800dab8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800daba:	4413      	add	r3, r2
 800dabc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dabe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	00da      	lsls	r2, r3, #3
 800dacc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dace:	4413      	add	r3, r2
 800dad0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dad4:	667b      	str	r3, [r7, #100]	@ 0x64
 800dad6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dad8:	881b      	ldrh	r3, [r3, #0]
 800dada:	b29b      	uxth	r3, r3
 800dadc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dae0:	b29a      	uxth	r2, r3
 800dae2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dae4:	801a      	strh	r2, [r3, #0]
 800dae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800daea:	2b00      	cmp	r3, #0
 800daec:	d10a      	bne.n	800db04 <USB_EPStartXfer+0xa92>
 800daee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800daf0:	881b      	ldrh	r3, [r3, #0]
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800daf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dafc:	b29a      	uxth	r2, r3
 800dafe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db00:	801a      	strh	r2, [r3, #0]
 800db02:	e067      	b.n	800dbd4 <USB_EPStartXfer+0xb62>
 800db04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db08:	2b3e      	cmp	r3, #62	@ 0x3e
 800db0a:	d81c      	bhi.n	800db46 <USB_EPStartXfer+0xad4>
 800db0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db10:	085b      	lsrs	r3, r3, #1
 800db12:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800db16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db1a:	f003 0301 	and.w	r3, r3, #1
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d004      	beq.n	800db2c <USB_EPStartXfer+0xaba>
 800db22:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800db26:	3301      	adds	r3, #1
 800db28:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800db2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db2e:	881b      	ldrh	r3, [r3, #0]
 800db30:	b29a      	uxth	r2, r3
 800db32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800db36:	b29b      	uxth	r3, r3
 800db38:	029b      	lsls	r3, r3, #10
 800db3a:	b29b      	uxth	r3, r3
 800db3c:	4313      	orrs	r3, r2
 800db3e:	b29a      	uxth	r2, r3
 800db40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db42:	801a      	strh	r2, [r3, #0]
 800db44:	e046      	b.n	800dbd4 <USB_EPStartXfer+0xb62>
 800db46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db4a:	095b      	lsrs	r3, r3, #5
 800db4c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800db50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db54:	f003 031f 	and.w	r3, r3, #31
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d104      	bne.n	800db66 <USB_EPStartXfer+0xaf4>
 800db5c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800db60:	3b01      	subs	r3, #1
 800db62:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800db66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db68:	881b      	ldrh	r3, [r3, #0]
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800db70:	b29b      	uxth	r3, r3
 800db72:	029b      	lsls	r3, r3, #10
 800db74:	b29b      	uxth	r3, r3
 800db76:	4313      	orrs	r3, r2
 800db78:	b29b      	uxth	r3, r3
 800db7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db82:	b29a      	uxth	r2, r3
 800db84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db86:	801a      	strh	r2, [r3, #0]
 800db88:	e024      	b.n	800dbd4 <USB_EPStartXfer+0xb62>
 800db8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	785b      	ldrb	r3, [r3, #1]
 800db96:	2b01      	cmp	r3, #1
 800db98:	d11c      	bne.n	800dbd4 <USB_EPStartXfer+0xb62>
 800db9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	461a      	mov	r2, r3
 800dbac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dbae:	4413      	add	r3, r2
 800dbb0:	673b      	str	r3, [r7, #112]	@ 0x70
 800dbb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	00da      	lsls	r2, r3, #3
 800dbc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dbc2:	4413      	add	r3, r2
 800dbc4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dbc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dbca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbce:	b29a      	uxth	r2, r3
 800dbd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbd2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800dbd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	895b      	ldrh	r3, [r3, #10]
 800dbe0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dbe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	6959      	ldr	r1, [r3, #20]
 800dbf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dbfa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800dbfe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800dc02:	6800      	ldr	r0, [r0, #0]
 800dc04:	f000 ff21 	bl	800ea4a <USB_WritePMA>
 800dc08:	e0ca      	b.n	800dda0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dc0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	785b      	ldrb	r3, [r3, #1]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d177      	bne.n	800dd0a <USB_EPStartXfer+0xc98>
 800dc1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dc26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dc34:	b29b      	uxth	r3, r3
 800dc36:	461a      	mov	r2, r3
 800dc38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dc3a:	4413      	add	r3, r2
 800dc3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dc3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	00da      	lsls	r2, r3, #3
 800dc4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dc4e:	4413      	add	r3, r2
 800dc50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dc54:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dc56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc58:	881b      	ldrh	r3, [r3, #0]
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc60:	b29a      	uxth	r2, r3
 800dc62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc64:	801a      	strh	r2, [r3, #0]
 800dc66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d10a      	bne.n	800dc84 <USB_EPStartXfer+0xc12>
 800dc6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc70:	881b      	ldrh	r3, [r3, #0]
 800dc72:	b29b      	uxth	r3, r3
 800dc74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc7c:	b29a      	uxth	r2, r3
 800dc7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc80:	801a      	strh	r2, [r3, #0]
 800dc82:	e073      	b.n	800dd6c <USB_EPStartXfer+0xcfa>
 800dc84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc88:	2b3e      	cmp	r3, #62	@ 0x3e
 800dc8a:	d81c      	bhi.n	800dcc6 <USB_EPStartXfer+0xc54>
 800dc8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc90:	085b      	lsrs	r3, r3, #1
 800dc92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dc96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc9a:	f003 0301 	and.w	r3, r3, #1
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d004      	beq.n	800dcac <USB_EPStartXfer+0xc3a>
 800dca2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dca6:	3301      	adds	r3, #1
 800dca8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dcac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dcae:	881b      	ldrh	r3, [r3, #0]
 800dcb0:	b29a      	uxth	r2, r3
 800dcb2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	029b      	lsls	r3, r3, #10
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	4313      	orrs	r3, r2
 800dcbe:	b29a      	uxth	r2, r3
 800dcc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dcc2:	801a      	strh	r2, [r3, #0]
 800dcc4:	e052      	b.n	800dd6c <USB_EPStartXfer+0xcfa>
 800dcc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcca:	095b      	lsrs	r3, r3, #5
 800dccc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dcd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcd4:	f003 031f 	and.w	r3, r3, #31
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d104      	bne.n	800dce6 <USB_EPStartXfer+0xc74>
 800dcdc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dce0:	3b01      	subs	r3, #1
 800dce2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dce6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dce8:	881b      	ldrh	r3, [r3, #0]
 800dcea:	b29a      	uxth	r2, r3
 800dcec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dcf0:	b29b      	uxth	r3, r3
 800dcf2:	029b      	lsls	r3, r3, #10
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	b29b      	uxth	r3, r3
 800dcfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd02:	b29a      	uxth	r2, r3
 800dd04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dd06:	801a      	strh	r2, [r3, #0]
 800dd08:	e030      	b.n	800dd6c <USB_EPStartXfer+0xcfa>
 800dd0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	785b      	ldrb	r3, [r3, #1]
 800dd16:	2b01      	cmp	r3, #1
 800dd18:	d128      	bne.n	800dd6c <USB_EPStartXfer+0xcfa>
 800dd1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dd28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	461a      	mov	r2, r3
 800dd3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dd3e:	4413      	add	r3, r2
 800dd40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dd44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	00da      	lsls	r2, r3, #3
 800dd52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dd56:	4413      	add	r3, r2
 800dd58:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dd5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dd60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd64:	b29a      	uxth	r2, r3
 800dd66:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dd6a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800dd6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	891b      	ldrh	r3, [r3, #8]
 800dd78:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dd7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	6959      	ldr	r1, [r3, #20]
 800dd88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dd92:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800dd96:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800dd9a:	6800      	ldr	r0, [r0, #0]
 800dd9c:	f000 fe55 	bl	800ea4a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800dda0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dda4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	009b      	lsls	r3, r3, #2
 800ddb8:	4413      	add	r3, r2
 800ddba:	881b      	ldrh	r3, [r3, #0]
 800ddbc:	b29b      	uxth	r3, r3
 800ddbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ddc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ddc6:	817b      	strh	r3, [r7, #10]
 800ddc8:	897b      	ldrh	r3, [r7, #10]
 800ddca:	f083 0310 	eor.w	r3, r3, #16
 800ddce:	817b      	strh	r3, [r7, #10]
 800ddd0:	897b      	ldrh	r3, [r7, #10]
 800ddd2:	f083 0320 	eor.w	r3, r3, #32
 800ddd6:	817b      	strh	r3, [r7, #10]
 800ddd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dddc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dde6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	009b      	lsls	r3, r3, #2
 800ddf0:	441a      	add	r2, r3
 800ddf2:	897b      	ldrh	r3, [r7, #10]
 800ddf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ddf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ddfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800de00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de04:	b29b      	uxth	r3, r3
 800de06:	8013      	strh	r3, [r2, #0]
 800de08:	f000 bcdf 	b.w	800e7ca <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800de0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	7b1b      	ldrb	r3, [r3, #12]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	f040 80bc 	bne.w	800df96 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800de1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	699a      	ldr	r2, [r3, #24]
 800de2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	691b      	ldr	r3, [r3, #16]
 800de36:	429a      	cmp	r2, r3
 800de38:	d917      	bls.n	800de6a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800de3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	691b      	ldr	r3, [r3, #16]
 800de46:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800de4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	699a      	ldr	r2, [r3, #24]
 800de56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de5a:	1ad2      	subs	r2, r2, r3
 800de5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	619a      	str	r2, [r3, #24]
 800de68:	e00e      	b.n	800de88 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800de6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	699b      	ldr	r3, [r3, #24]
 800de76:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800de7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	2200      	movs	r2, #0
 800de86:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800de88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800de96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	461a      	mov	r2, r3
 800dea8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800deac:	4413      	add	r3, r2
 800deae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800deb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800deb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	00da      	lsls	r2, r3, #3
 800dec0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dec4:	4413      	add	r3, r2
 800dec6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800deca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800dece:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ded2:	881b      	ldrh	r3, [r3, #0]
 800ded4:	b29b      	uxth	r3, r3
 800ded6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800deda:	b29a      	uxth	r2, r3
 800dedc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dee0:	801a      	strh	r2, [r3, #0]
 800dee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d10d      	bne.n	800df06 <USB_EPStartXfer+0xe94>
 800deea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800deee:	881b      	ldrh	r3, [r3, #0]
 800def0:	b29b      	uxth	r3, r3
 800def2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800def6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800defa:	b29a      	uxth	r2, r3
 800defc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df00:	801a      	strh	r2, [r3, #0]
 800df02:	f000 bc28 	b.w	800e756 <USB_EPStartXfer+0x16e4>
 800df06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df0a:	2b3e      	cmp	r3, #62	@ 0x3e
 800df0c:	d81f      	bhi.n	800df4e <USB_EPStartXfer+0xedc>
 800df0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df12:	085b      	lsrs	r3, r3, #1
 800df14:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800df18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df1c:	f003 0301 	and.w	r3, r3, #1
 800df20:	2b00      	cmp	r3, #0
 800df22:	d004      	beq.n	800df2e <USB_EPStartXfer+0xebc>
 800df24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800df28:	3301      	adds	r3, #1
 800df2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800df2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df32:	881b      	ldrh	r3, [r3, #0]
 800df34:	b29a      	uxth	r2, r3
 800df36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800df3a:	b29b      	uxth	r3, r3
 800df3c:	029b      	lsls	r3, r3, #10
 800df3e:	b29b      	uxth	r3, r3
 800df40:	4313      	orrs	r3, r2
 800df42:	b29a      	uxth	r2, r3
 800df44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df48:	801a      	strh	r2, [r3, #0]
 800df4a:	f000 bc04 	b.w	800e756 <USB_EPStartXfer+0x16e4>
 800df4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df52:	095b      	lsrs	r3, r3, #5
 800df54:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800df58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df5c:	f003 031f 	and.w	r3, r3, #31
 800df60:	2b00      	cmp	r3, #0
 800df62:	d104      	bne.n	800df6e <USB_EPStartXfer+0xefc>
 800df64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800df68:	3b01      	subs	r3, #1
 800df6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800df6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df72:	881b      	ldrh	r3, [r3, #0]
 800df74:	b29a      	uxth	r2, r3
 800df76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800df7a:	b29b      	uxth	r3, r3
 800df7c:	029b      	lsls	r3, r3, #10
 800df7e:	b29b      	uxth	r3, r3
 800df80:	4313      	orrs	r3, r2
 800df82:	b29b      	uxth	r3, r3
 800df84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df8c:	b29a      	uxth	r2, r3
 800df8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df92:	801a      	strh	r2, [r3, #0]
 800df94:	e3df      	b.n	800e756 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800df96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	78db      	ldrb	r3, [r3, #3]
 800dfa2:	2b02      	cmp	r3, #2
 800dfa4:	f040 8218 	bne.w	800e3d8 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800dfa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	785b      	ldrb	r3, [r3, #1]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f040 809d 	bne.w	800e0f4 <USB_EPStartXfer+0x1082>
 800dfba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dfc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	461a      	mov	r2, r3
 800dfda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dfde:	4413      	add	r3, r2
 800dfe0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dfe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	00da      	lsls	r2, r3, #3
 800dff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dff6:	4413      	add	r3, r2
 800dff8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dffc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e000:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e004:	881b      	ldrh	r3, [r3, #0]
 800e006:	b29b      	uxth	r3, r3
 800e008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e00c:	b29a      	uxth	r2, r3
 800e00e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e012:	801a      	strh	r2, [r3, #0]
 800e014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	691b      	ldr	r3, [r3, #16]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d10c      	bne.n	800e03e <USB_EPStartXfer+0xfcc>
 800e024:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e028:	881b      	ldrh	r3, [r3, #0]
 800e02a:	b29b      	uxth	r3, r3
 800e02c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e034:	b29a      	uxth	r2, r3
 800e036:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e03a:	801a      	strh	r2, [r3, #0]
 800e03c:	e08f      	b.n	800e15e <USB_EPStartXfer+0x10ec>
 800e03e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	691b      	ldr	r3, [r3, #16]
 800e04a:	2b3e      	cmp	r3, #62	@ 0x3e
 800e04c:	d826      	bhi.n	800e09c <USB_EPStartXfer+0x102a>
 800e04e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	691b      	ldr	r3, [r3, #16]
 800e05a:	085b      	lsrs	r3, r3, #1
 800e05c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	691b      	ldr	r3, [r3, #16]
 800e06c:	f003 0301 	and.w	r3, r3, #1
 800e070:	2b00      	cmp	r3, #0
 800e072:	d004      	beq.n	800e07e <USB_EPStartXfer+0x100c>
 800e074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e078:	3301      	adds	r3, #1
 800e07a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e07e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e082:	881b      	ldrh	r3, [r3, #0]
 800e084:	b29a      	uxth	r2, r3
 800e086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	029b      	lsls	r3, r3, #10
 800e08e:	b29b      	uxth	r3, r3
 800e090:	4313      	orrs	r3, r2
 800e092:	b29a      	uxth	r2, r3
 800e094:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e098:	801a      	strh	r2, [r3, #0]
 800e09a:	e060      	b.n	800e15e <USB_EPStartXfer+0x10ec>
 800e09c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	691b      	ldr	r3, [r3, #16]
 800e0a8:	095b      	lsrs	r3, r3, #5
 800e0aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e0ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	691b      	ldr	r3, [r3, #16]
 800e0ba:	f003 031f 	and.w	r3, r3, #31
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d104      	bne.n	800e0cc <USB_EPStartXfer+0x105a>
 800e0c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0c6:	3b01      	subs	r3, #1
 800e0c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e0cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e0d0:	881b      	ldrh	r3, [r3, #0]
 800e0d2:	b29a      	uxth	r2, r3
 800e0d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	029b      	lsls	r3, r3, #10
 800e0dc:	b29b      	uxth	r3, r3
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0ea:	b29a      	uxth	r2, r3
 800e0ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e0f0:	801a      	strh	r2, [r3, #0]
 800e0f2:	e034      	b.n	800e15e <USB_EPStartXfer+0x10ec>
 800e0f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	785b      	ldrb	r3, [r3, #1]
 800e100:	2b01      	cmp	r3, #1
 800e102:	d12c      	bne.n	800e15e <USB_EPStartXfer+0x10ec>
 800e104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e108:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e116:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e120:	b29b      	uxth	r3, r3
 800e122:	461a      	mov	r2, r3
 800e124:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e128:	4413      	add	r3, r2
 800e12a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e12e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e132:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	00da      	lsls	r2, r3, #3
 800e13c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e140:	4413      	add	r3, r2
 800e142:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e146:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e14a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e14e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	691b      	ldr	r3, [r3, #16]
 800e156:	b29a      	uxth	r2, r3
 800e158:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e15c:	801a      	strh	r2, [r3, #0]
 800e15e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e162:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e16c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	785b      	ldrb	r3, [r3, #1]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	f040 809d 	bne.w	800e2b8 <USB_EPStartXfer+0x1246>
 800e17e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e182:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e18c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e190:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	461a      	mov	r2, r3
 800e19e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e1a2:	4413      	add	r3, r2
 800e1a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e1a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	00da      	lsls	r2, r3, #3
 800e1b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e1ba:	4413      	add	r3, r2
 800e1bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e1c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e1c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e1c8:	881b      	ldrh	r3, [r3, #0]
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e1d0:	b29a      	uxth	r2, r3
 800e1d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e1d6:	801a      	strh	r2, [r3, #0]
 800e1d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	691b      	ldr	r3, [r3, #16]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d10c      	bne.n	800e202 <USB_EPStartXfer+0x1190>
 800e1e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e1ec:	881b      	ldrh	r3, [r3, #0]
 800e1ee:	b29b      	uxth	r3, r3
 800e1f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1f8:	b29a      	uxth	r2, r3
 800e1fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e1fe:	801a      	strh	r2, [r3, #0]
 800e200:	e088      	b.n	800e314 <USB_EPStartXfer+0x12a2>
 800e202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e206:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	691b      	ldr	r3, [r3, #16]
 800e20e:	2b3e      	cmp	r3, #62	@ 0x3e
 800e210:	d826      	bhi.n	800e260 <USB_EPStartXfer+0x11ee>
 800e212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	691b      	ldr	r3, [r3, #16]
 800e21e:	085b      	lsrs	r3, r3, #1
 800e220:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	691b      	ldr	r3, [r3, #16]
 800e230:	f003 0301 	and.w	r3, r3, #1
 800e234:	2b00      	cmp	r3, #0
 800e236:	d004      	beq.n	800e242 <USB_EPStartXfer+0x11d0>
 800e238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e23c:	3301      	adds	r3, #1
 800e23e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e242:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e246:	881b      	ldrh	r3, [r3, #0]
 800e248:	b29a      	uxth	r2, r3
 800e24a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e24e:	b29b      	uxth	r3, r3
 800e250:	029b      	lsls	r3, r3, #10
 800e252:	b29b      	uxth	r3, r3
 800e254:	4313      	orrs	r3, r2
 800e256:	b29a      	uxth	r2, r3
 800e258:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e25c:	801a      	strh	r2, [r3, #0]
 800e25e:	e059      	b.n	800e314 <USB_EPStartXfer+0x12a2>
 800e260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	691b      	ldr	r3, [r3, #16]
 800e26c:	095b      	lsrs	r3, r3, #5
 800e26e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	691b      	ldr	r3, [r3, #16]
 800e27e:	f003 031f 	and.w	r3, r3, #31
 800e282:	2b00      	cmp	r3, #0
 800e284:	d104      	bne.n	800e290 <USB_EPStartXfer+0x121e>
 800e286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e28a:	3b01      	subs	r3, #1
 800e28c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e290:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e294:	881b      	ldrh	r3, [r3, #0]
 800e296:	b29a      	uxth	r2, r3
 800e298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	029b      	lsls	r3, r3, #10
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e2aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e2ae:	b29a      	uxth	r2, r3
 800e2b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e2b4:	801a      	strh	r2, [r3, #0]
 800e2b6:	e02d      	b.n	800e314 <USB_EPStartXfer+0x12a2>
 800e2b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	785b      	ldrb	r3, [r3, #1]
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d125      	bne.n	800e314 <USB_EPStartXfer+0x12a2>
 800e2c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	461a      	mov	r2, r3
 800e2da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e2de:	4413      	add	r3, r2
 800e2e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e2e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	00da      	lsls	r2, r3, #3
 800e2f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e2f6:	4413      	add	r3, r2
 800e2f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e2fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	691b      	ldr	r3, [r3, #16]
 800e30c:	b29a      	uxth	r2, r3
 800e30e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e312:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	69db      	ldr	r3, [r3, #28]
 800e320:	2b00      	cmp	r3, #0
 800e322:	f000 8218 	beq.w	800e756 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e32a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e32e:	681a      	ldr	r2, [r3, #0]
 800e330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	009b      	lsls	r3, r3, #2
 800e33e:	4413      	add	r3, r2
 800e340:	881b      	ldrh	r3, [r3, #0]
 800e342:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e346:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e34a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d005      	beq.n	800e35e <USB_EPStartXfer+0x12ec>
 800e352:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d10d      	bne.n	800e37a <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e35e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e366:	2b00      	cmp	r3, #0
 800e368:	f040 81f5 	bne.w	800e756 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e36c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e374:	2b00      	cmp	r3, #0
 800e376:	f040 81ee 	bne.w	800e756 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e37a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e37e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	009b      	lsls	r3, r3, #2
 800e392:	4413      	add	r3, r2
 800e394:	881b      	ldrh	r3, [r3, #0]
 800e396:	b29b      	uxth	r3, r3
 800e398:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e39c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e3a0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800e3a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e3ac:	681a      	ldr	r2, [r3, #0]
 800e3ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	441a      	add	r2, r3
 800e3be:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800e3c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e3c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e3ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	8013      	strh	r3, [r2, #0]
 800e3d6:	e1be      	b.n	800e756 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e3d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	78db      	ldrb	r3, [r3, #3]
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	f040 81b4 	bne.w	800e752 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800e3ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	699a      	ldr	r2, [r3, #24]
 800e3f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	691b      	ldr	r3, [r3, #16]
 800e402:	429a      	cmp	r2, r3
 800e404:	d917      	bls.n	800e436 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800e406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e40a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	691b      	ldr	r3, [r3, #16]
 800e412:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800e416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e41a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	699a      	ldr	r2, [r3, #24]
 800e422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e426:	1ad2      	subs	r2, r2, r3
 800e428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e42c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	619a      	str	r2, [r3, #24]
 800e434:	e00e      	b.n	800e454 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800e436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e43a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	699b      	ldr	r3, [r3, #24]
 800e442:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800e446:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e44a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	2200      	movs	r2, #0
 800e452:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	785b      	ldrb	r3, [r3, #1]
 800e460:	2b00      	cmp	r3, #0
 800e462:	f040 8085 	bne.w	800e570 <USB_EPStartXfer+0x14fe>
 800e466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e46a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e478:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e482:	b29b      	uxth	r3, r3
 800e484:	461a      	mov	r2, r3
 800e486:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e48a:	4413      	add	r3, r2
 800e48c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	00da      	lsls	r2, r3, #3
 800e49e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e4a2:	4413      	add	r3, r2
 800e4a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e4a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e4ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e4b0:	881b      	ldrh	r3, [r3, #0]
 800e4b2:	b29b      	uxth	r3, r3
 800e4b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e4b8:	b29a      	uxth	r2, r3
 800e4ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e4be:	801a      	strh	r2, [r3, #0]
 800e4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d10c      	bne.n	800e4e2 <USB_EPStartXfer+0x1470>
 800e4c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e4cc:	881b      	ldrh	r3, [r3, #0]
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e4d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e4d8:	b29a      	uxth	r2, r3
 800e4da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e4de:	801a      	strh	r2, [r3, #0]
 800e4e0:	e077      	b.n	800e5d2 <USB_EPStartXfer+0x1560>
 800e4e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4e6:	2b3e      	cmp	r3, #62	@ 0x3e
 800e4e8:	d81e      	bhi.n	800e528 <USB_EPStartXfer+0x14b6>
 800e4ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4ee:	085b      	lsrs	r3, r3, #1
 800e4f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e4f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4f8:	f003 0301 	and.w	r3, r3, #1
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d004      	beq.n	800e50a <USB_EPStartXfer+0x1498>
 800e500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e504:	3301      	adds	r3, #1
 800e506:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e50a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e50e:	881b      	ldrh	r3, [r3, #0]
 800e510:	b29a      	uxth	r2, r3
 800e512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e516:	b29b      	uxth	r3, r3
 800e518:	029b      	lsls	r3, r3, #10
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	4313      	orrs	r3, r2
 800e51e:	b29a      	uxth	r2, r3
 800e520:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e524:	801a      	strh	r2, [r3, #0]
 800e526:	e054      	b.n	800e5d2 <USB_EPStartXfer+0x1560>
 800e528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e52c:	095b      	lsrs	r3, r3, #5
 800e52e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e536:	f003 031f 	and.w	r3, r3, #31
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d104      	bne.n	800e548 <USB_EPStartXfer+0x14d6>
 800e53e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e542:	3b01      	subs	r3, #1
 800e544:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e548:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e54c:	881b      	ldrh	r3, [r3, #0]
 800e54e:	b29a      	uxth	r2, r3
 800e550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e554:	b29b      	uxth	r3, r3
 800e556:	029b      	lsls	r3, r3, #10
 800e558:	b29b      	uxth	r3, r3
 800e55a:	4313      	orrs	r3, r2
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e566:	b29a      	uxth	r2, r3
 800e568:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e56c:	801a      	strh	r2, [r3, #0]
 800e56e:	e030      	b.n	800e5d2 <USB_EPStartXfer+0x1560>
 800e570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	785b      	ldrb	r3, [r3, #1]
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	d128      	bne.n	800e5d2 <USB_EPStartXfer+0x1560>
 800e580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e584:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e58e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e592:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	461a      	mov	r2, r3
 800e5a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e5a4:	4413      	add	r3, r2
 800e5a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e5aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	781b      	ldrb	r3, [r3, #0]
 800e5b6:	00da      	lsls	r2, r3, #3
 800e5b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e5bc:	4413      	add	r3, r2
 800e5be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e5c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e5c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5ca:	b29a      	uxth	r2, r3
 800e5cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e5d0:	801a      	strh	r2, [r3, #0]
 800e5d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e5e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	785b      	ldrb	r3, [r3, #1]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	f040 8085 	bne.w	800e6fc <USB_EPStartXfer+0x168a>
 800e5f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e604:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e60e:	b29b      	uxth	r3, r3
 800e610:	461a      	mov	r2, r3
 800e612:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e616:	4413      	add	r3, r2
 800e618:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e61c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	00da      	lsls	r2, r3, #3
 800e62a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e62e:	4413      	add	r3, r2
 800e630:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e634:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e638:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e63c:	881b      	ldrh	r3, [r3, #0]
 800e63e:	b29b      	uxth	r3, r3
 800e640:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e644:	b29a      	uxth	r2, r3
 800e646:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e64a:	801a      	strh	r2, [r3, #0]
 800e64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e650:	2b00      	cmp	r3, #0
 800e652:	d10c      	bne.n	800e66e <USB_EPStartXfer+0x15fc>
 800e654:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e658:	881b      	ldrh	r3, [r3, #0]
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e660:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e664:	b29a      	uxth	r2, r3
 800e666:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e66a:	801a      	strh	r2, [r3, #0]
 800e66c:	e073      	b.n	800e756 <USB_EPStartXfer+0x16e4>
 800e66e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e672:	2b3e      	cmp	r3, #62	@ 0x3e
 800e674:	d81e      	bhi.n	800e6b4 <USB_EPStartXfer+0x1642>
 800e676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e67a:	085b      	lsrs	r3, r3, #1
 800e67c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e684:	f003 0301 	and.w	r3, r3, #1
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d004      	beq.n	800e696 <USB_EPStartXfer+0x1624>
 800e68c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e690:	3301      	adds	r3, #1
 800e692:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e696:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e69a:	881b      	ldrh	r3, [r3, #0]
 800e69c:	b29a      	uxth	r2, r3
 800e69e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	029b      	lsls	r3, r3, #10
 800e6a6:	b29b      	uxth	r3, r3
 800e6a8:	4313      	orrs	r3, r2
 800e6aa:	b29a      	uxth	r2, r3
 800e6ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e6b0:	801a      	strh	r2, [r3, #0]
 800e6b2:	e050      	b.n	800e756 <USB_EPStartXfer+0x16e4>
 800e6b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6b8:	095b      	lsrs	r3, r3, #5
 800e6ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6c2:	f003 031f 	and.w	r3, r3, #31
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d104      	bne.n	800e6d4 <USB_EPStartXfer+0x1662>
 800e6ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e6ce:	3b01      	subs	r3, #1
 800e6d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e6d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e6d8:	881b      	ldrh	r3, [r3, #0]
 800e6da:	b29a      	uxth	r2, r3
 800e6dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e6e0:	b29b      	uxth	r3, r3
 800e6e2:	029b      	lsls	r3, r3, #10
 800e6e4:	b29b      	uxth	r3, r3
 800e6e6:	4313      	orrs	r3, r2
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e6ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e6f2:	b29a      	uxth	r2, r3
 800e6f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e6f8:	801a      	strh	r2, [r3, #0]
 800e6fa:	e02c      	b.n	800e756 <USB_EPStartXfer+0x16e4>
 800e6fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	785b      	ldrb	r3, [r3, #1]
 800e708:	2b01      	cmp	r3, #1
 800e70a:	d124      	bne.n	800e756 <USB_EPStartXfer+0x16e4>
 800e70c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e710:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e71a:	b29b      	uxth	r3, r3
 800e71c:	461a      	mov	r2, r3
 800e71e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e722:	4413      	add	r3, r2
 800e724:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e72c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	00da      	lsls	r2, r3, #3
 800e736:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e73a:	4413      	add	r3, r2
 800e73c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e740:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e748:	b29a      	uxth	r2, r3
 800e74a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e74e:	801a      	strh	r2, [r3, #0]
 800e750:	e001      	b.n	800e756 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800e752:	2301      	movs	r3, #1
 800e754:	e03a      	b.n	800e7cc <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e75a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	009b      	lsls	r3, r3, #2
 800e76e:	4413      	add	r3, r2
 800e770:	881b      	ldrh	r3, [r3, #0]
 800e772:	b29b      	uxth	r3, r3
 800e774:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e778:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e77c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e780:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e784:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e788:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e78c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e790:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e794:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e79c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e7a0:	681a      	ldr	r2, [r3, #0]
 800e7a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	009b      	lsls	r3, r3, #2
 800e7b0:	441a      	add	r2, r3
 800e7b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e7b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e7ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e7be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e7c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e7ca:	2300      	movs	r3, #0
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}

0800e7d6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e7d6:	b480      	push	{r7}
 800e7d8:	b085      	sub	sp, #20
 800e7da:	af00      	add	r7, sp, #0
 800e7dc:	6078      	str	r0, [r7, #4]
 800e7de:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	785b      	ldrb	r3, [r3, #1]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d020      	beq.n	800e82a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e7e8:	687a      	ldr	r2, [r7, #4]
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	781b      	ldrb	r3, [r3, #0]
 800e7ee:	009b      	lsls	r3, r3, #2
 800e7f0:	4413      	add	r3, r2
 800e7f2:	881b      	ldrh	r3, [r3, #0]
 800e7f4:	b29b      	uxth	r3, r3
 800e7f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e7fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e7fe:	81bb      	strh	r3, [r7, #12]
 800e800:	89bb      	ldrh	r3, [r7, #12]
 800e802:	f083 0310 	eor.w	r3, r3, #16
 800e806:	81bb      	strh	r3, [r7, #12]
 800e808:	687a      	ldr	r2, [r7, #4]
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	781b      	ldrb	r3, [r3, #0]
 800e80e:	009b      	lsls	r3, r3, #2
 800e810:	441a      	add	r2, r3
 800e812:	89bb      	ldrh	r3, [r7, #12]
 800e814:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e818:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e81c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e824:	b29b      	uxth	r3, r3
 800e826:	8013      	strh	r3, [r2, #0]
 800e828:	e01f      	b.n	800e86a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	009b      	lsls	r3, r3, #2
 800e832:	4413      	add	r3, r2
 800e834:	881b      	ldrh	r3, [r3, #0]
 800e836:	b29b      	uxth	r3, r3
 800e838:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e83c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e840:	81fb      	strh	r3, [r7, #14]
 800e842:	89fb      	ldrh	r3, [r7, #14]
 800e844:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e848:	81fb      	strh	r3, [r7, #14]
 800e84a:	687a      	ldr	r2, [r7, #4]
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	781b      	ldrb	r3, [r3, #0]
 800e850:	009b      	lsls	r3, r3, #2
 800e852:	441a      	add	r2, r3
 800e854:	89fb      	ldrh	r3, [r7, #14]
 800e856:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e85a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e85e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e866:	b29b      	uxth	r3, r3
 800e868:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e86a:	2300      	movs	r3, #0
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3714      	adds	r7, #20
 800e870:	46bd      	mov	sp, r7
 800e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e876:	4770      	bx	lr

0800e878 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e878:	b480      	push	{r7}
 800e87a:	b087      	sub	sp, #28
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	7b1b      	ldrb	r3, [r3, #12]
 800e886:	2b00      	cmp	r3, #0
 800e888:	f040 809d 	bne.w	800e9c6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	785b      	ldrb	r3, [r3, #1]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d04c      	beq.n	800e92e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	009b      	lsls	r3, r3, #2
 800e89c:	4413      	add	r3, r2
 800e89e:	881b      	ldrh	r3, [r3, #0]
 800e8a0:	823b      	strh	r3, [r7, #16]
 800e8a2:	8a3b      	ldrh	r3, [r7, #16]
 800e8a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d01b      	beq.n	800e8e4 <USB_EPClearStall+0x6c>
 800e8ac:	687a      	ldr	r2, [r7, #4]
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	009b      	lsls	r3, r3, #2
 800e8b4:	4413      	add	r3, r2
 800e8b6:	881b      	ldrh	r3, [r3, #0]
 800e8b8:	b29b      	uxth	r3, r3
 800e8ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e8be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e8c2:	81fb      	strh	r3, [r7, #14]
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	009b      	lsls	r3, r3, #2
 800e8cc:	441a      	add	r2, r3
 800e8ce:	89fb      	ldrh	r3, [r7, #14]
 800e8d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e8d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e8d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e8dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e8e0:	b29b      	uxth	r3, r3
 800e8e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	78db      	ldrb	r3, [r3, #3]
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	d06c      	beq.n	800e9c6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e8ec:	687a      	ldr	r2, [r7, #4]
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	009b      	lsls	r3, r3, #2
 800e8f4:	4413      	add	r3, r2
 800e8f6:	881b      	ldrh	r3, [r3, #0]
 800e8f8:	b29b      	uxth	r3, r3
 800e8fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e8fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e902:	81bb      	strh	r3, [r7, #12]
 800e904:	89bb      	ldrh	r3, [r7, #12]
 800e906:	f083 0320 	eor.w	r3, r3, #32
 800e90a:	81bb      	strh	r3, [r7, #12]
 800e90c:	687a      	ldr	r2, [r7, #4]
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	441a      	add	r2, r3
 800e916:	89bb      	ldrh	r3, [r7, #12]
 800e918:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e91c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e920:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e928:	b29b      	uxth	r3, r3
 800e92a:	8013      	strh	r3, [r2, #0]
 800e92c:	e04b      	b.n	800e9c6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e92e:	687a      	ldr	r2, [r7, #4]
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	781b      	ldrb	r3, [r3, #0]
 800e934:	009b      	lsls	r3, r3, #2
 800e936:	4413      	add	r3, r2
 800e938:	881b      	ldrh	r3, [r3, #0]
 800e93a:	82fb      	strh	r3, [r7, #22]
 800e93c:	8afb      	ldrh	r3, [r7, #22]
 800e93e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e942:	2b00      	cmp	r3, #0
 800e944:	d01b      	beq.n	800e97e <USB_EPClearStall+0x106>
 800e946:	687a      	ldr	r2, [r7, #4]
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	009b      	lsls	r3, r3, #2
 800e94e:	4413      	add	r3, r2
 800e950:	881b      	ldrh	r3, [r3, #0]
 800e952:	b29b      	uxth	r3, r3
 800e954:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e95c:	82bb      	strh	r3, [r7, #20]
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	781b      	ldrb	r3, [r3, #0]
 800e964:	009b      	lsls	r3, r3, #2
 800e966:	441a      	add	r2, r3
 800e968:	8abb      	ldrh	r3, [r7, #20]
 800e96a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e96e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e972:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e97a:	b29b      	uxth	r3, r3
 800e97c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	781b      	ldrb	r3, [r3, #0]
 800e984:	009b      	lsls	r3, r3, #2
 800e986:	4413      	add	r3, r2
 800e988:	881b      	ldrh	r3, [r3, #0]
 800e98a:	b29b      	uxth	r3, r3
 800e98c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e994:	827b      	strh	r3, [r7, #18]
 800e996:	8a7b      	ldrh	r3, [r7, #18]
 800e998:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e99c:	827b      	strh	r3, [r7, #18]
 800e99e:	8a7b      	ldrh	r3, [r7, #18]
 800e9a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e9a4:	827b      	strh	r3, [r7, #18]
 800e9a6:	687a      	ldr	r2, [r7, #4]
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	781b      	ldrb	r3, [r3, #0]
 800e9ac:	009b      	lsls	r3, r3, #2
 800e9ae:	441a      	add	r2, r3
 800e9b0:	8a7b      	ldrh	r3, [r7, #18]
 800e9b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e9b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e9ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e9be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9c2:	b29b      	uxth	r3, r3
 800e9c4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e9c6:	2300      	movs	r3, #0
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	371c      	adds	r7, #28
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr

0800e9d4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	460b      	mov	r3, r1
 800e9de:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e9e0:	78fb      	ldrb	r3, [r7, #3]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d103      	bne.n	800e9ee <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2280      	movs	r2, #128	@ 0x80
 800e9ea:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e9ee:	2300      	movs	r3, #0
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	370c      	adds	r7, #12
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr

0800e9fc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	b083      	sub	sp, #12
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ea0a:	b29b      	uxth	r3, r3
 800ea0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea14:	b29a      	uxth	r2, r3
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ea1c:	2300      	movs	r3, #0
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	370c      	adds	r7, #12
 800ea22:	46bd      	mov	sp, r7
 800ea24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea28:	4770      	bx	lr

0800ea2a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ea2a:	b480      	push	{r7}
 800ea2c:	b085      	sub	sp, #20
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ea38:	b29b      	uxth	r3, r3
 800ea3a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	3714      	adds	r7, #20
 800ea42:	46bd      	mov	sp, r7
 800ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea48:	4770      	bx	lr

0800ea4a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ea4a:	b480      	push	{r7}
 800ea4c:	b08b      	sub	sp, #44	@ 0x2c
 800ea4e:	af00      	add	r7, sp, #0
 800ea50:	60f8      	str	r0, [r7, #12]
 800ea52:	60b9      	str	r1, [r7, #8]
 800ea54:	4611      	mov	r1, r2
 800ea56:	461a      	mov	r2, r3
 800ea58:	460b      	mov	r3, r1
 800ea5a:	80fb      	strh	r3, [r7, #6]
 800ea5c:	4613      	mov	r3, r2
 800ea5e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ea60:	88bb      	ldrh	r3, [r7, #4]
 800ea62:	3301      	adds	r3, #1
 800ea64:	085b      	lsrs	r3, r3, #1
 800ea66:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ea70:	88fa      	ldrh	r2, [r7, #6]
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	4413      	add	r3, r2
 800ea76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ea7a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ea7c:	69bb      	ldr	r3, [r7, #24]
 800ea7e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea80:	e01b      	b.n	800eaba <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ea82:	69fb      	ldr	r3, [r7, #28]
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ea88:	69fb      	ldr	r3, [r7, #28]
 800ea8a:	3301      	adds	r3, #1
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	021b      	lsls	r3, r3, #8
 800ea90:	b21a      	sxth	r2, r3
 800ea92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ea96:	4313      	orrs	r3, r2
 800ea98:	b21b      	sxth	r3, r3
 800ea9a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ea9c:	6a3b      	ldr	r3, [r7, #32]
 800ea9e:	8a7a      	ldrh	r2, [r7, #18]
 800eaa0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800eaa2:	6a3b      	ldr	r3, [r7, #32]
 800eaa4:	3302      	adds	r3, #2
 800eaa6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	3301      	adds	r3, #1
 800eaac:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800eaae:	69fb      	ldr	r3, [r7, #28]
 800eab0:	3301      	adds	r3, #1
 800eab2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800eab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eab6:	3b01      	subs	r3, #1
 800eab8:	627b      	str	r3, [r7, #36]	@ 0x24
 800eaba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d1e0      	bne.n	800ea82 <USB_WritePMA+0x38>
  }
}
 800eac0:	bf00      	nop
 800eac2:	bf00      	nop
 800eac4:	372c      	adds	r7, #44	@ 0x2c
 800eac6:	46bd      	mov	sp, r7
 800eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eacc:	4770      	bx	lr

0800eace <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800eace:	b480      	push	{r7}
 800ead0:	b08b      	sub	sp, #44	@ 0x2c
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	60f8      	str	r0, [r7, #12]
 800ead6:	60b9      	str	r1, [r7, #8]
 800ead8:	4611      	mov	r1, r2
 800eada:	461a      	mov	r2, r3
 800eadc:	460b      	mov	r3, r1
 800eade:	80fb      	strh	r3, [r7, #6]
 800eae0:	4613      	mov	r3, r2
 800eae2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800eae4:	88bb      	ldrh	r3, [r7, #4]
 800eae6:	085b      	lsrs	r3, r3, #1
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800eaf4:	88fa      	ldrh	r2, [r7, #6]
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	4413      	add	r3, r2
 800eafa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eafe:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800eb00:	69bb      	ldr	r3, [r7, #24]
 800eb02:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb04:	e018      	b.n	800eb38 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800eb06:	6a3b      	ldr	r3, [r7, #32]
 800eb08:	881b      	ldrh	r3, [r3, #0]
 800eb0a:	b29b      	uxth	r3, r3
 800eb0c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800eb0e:	6a3b      	ldr	r3, [r7, #32]
 800eb10:	3302      	adds	r3, #2
 800eb12:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	b2da      	uxtb	r2, r3
 800eb18:	69fb      	ldr	r3, [r7, #28]
 800eb1a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800eb1c:	69fb      	ldr	r3, [r7, #28]
 800eb1e:	3301      	adds	r3, #1
 800eb20:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	0a1b      	lsrs	r3, r3, #8
 800eb26:	b2da      	uxtb	r2, r3
 800eb28:	69fb      	ldr	r3, [r7, #28]
 800eb2a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800eb2c:	69fb      	ldr	r3, [r7, #28]
 800eb2e:	3301      	adds	r3, #1
 800eb30:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800eb32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb34:	3b01      	subs	r3, #1
 800eb36:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d1e3      	bne.n	800eb06 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800eb3e:	88bb      	ldrh	r3, [r7, #4]
 800eb40:	f003 0301 	and.w	r3, r3, #1
 800eb44:	b29b      	uxth	r3, r3
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d007      	beq.n	800eb5a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800eb4a:	6a3b      	ldr	r3, [r7, #32]
 800eb4c:	881b      	ldrh	r3, [r3, #0]
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	b2da      	uxtb	r2, r3
 800eb56:	69fb      	ldr	r3, [r7, #28]
 800eb58:	701a      	strb	r2, [r3, #0]
  }
}
 800eb5a:	bf00      	nop
 800eb5c:	372c      	adds	r7, #44	@ 0x2c
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb64:	4770      	bx	lr

0800eb66 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eb66:	b580      	push	{r7, lr}
 800eb68:	b084      	sub	sp, #16
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	6078      	str	r0, [r7, #4]
 800eb6e:	460b      	mov	r3, r1
 800eb70:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800eb72:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800eb76:	f002 f90f 	bl	8010d98 <USBD_static_malloc>
 800eb7a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d105      	bne.n	800eb8e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2200      	movs	r2, #0
 800eb86:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800eb8a:	2302      	movs	r3, #2
 800eb8c:	e066      	b.n	800ec5c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	68fa      	ldr	r2, [r7, #12]
 800eb92:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	7c1b      	ldrb	r3, [r3, #16]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d119      	bne.n	800ebd2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800eb9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eba2:	2202      	movs	r2, #2
 800eba4:	2181      	movs	r1, #129	@ 0x81
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f001 ff9d 	bl	8010ae6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2201      	movs	r2, #1
 800ebb0:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ebb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ebb6:	2202      	movs	r2, #2
 800ebb8:	2101      	movs	r1, #1
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f001 ff93 	bl	8010ae6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2210      	movs	r2, #16
 800ebcc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800ebd0:	e016      	b.n	800ec00 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ebd2:	2340      	movs	r3, #64	@ 0x40
 800ebd4:	2202      	movs	r2, #2
 800ebd6:	2181      	movs	r1, #129	@ 0x81
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f001 ff84 	bl	8010ae6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2201      	movs	r2, #1
 800ebe2:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ebe4:	2340      	movs	r3, #64	@ 0x40
 800ebe6:	2202      	movs	r2, #2
 800ebe8:	2101      	movs	r1, #1
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f001 ff7b 	bl	8010ae6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2210      	movs	r2, #16
 800ebfc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ec00:	2308      	movs	r3, #8
 800ec02:	2203      	movs	r2, #3
 800ec04:	2182      	movs	r1, #130	@ 0x82
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f001 ff6d 	bl	8010ae6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	2200      	movs	r2, #0
 800ec22:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	7c1b      	ldrb	r3, [r3, #16]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d109      	bne.n	800ec4a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ec3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ec40:	2101      	movs	r1, #1
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f002 f83e 	bl	8010cc4 <USBD_LL_PrepareReceive>
 800ec48:	e007      	b.n	800ec5a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ec50:	2340      	movs	r3, #64	@ 0x40
 800ec52:	2101      	movs	r1, #1
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f002 f835 	bl	8010cc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ec5a:	2300      	movs	r3, #0
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3710      	adds	r7, #16
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}

0800ec64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ec70:	2181      	movs	r1, #129	@ 0x81
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f001 ff5d 	bl	8010b32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ec7e:	2101      	movs	r1, #1
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f001 ff56 	bl	8010b32 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ec8e:	2182      	movs	r1, #130	@ 0x82
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	f001 ff4e 	bl	8010b32 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2200      	movs	r2, #0
 800eca2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d00e      	beq.n	800ecce <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f002 f877 	bl	8010db4 <USBD_static_free>
    pdev->pClassData = NULL;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ecce:	2300      	movs	r3, #0
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3708      	adds	r7, #8
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}

0800ecd8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b086      	sub	sp, #24
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ece8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ecea:	2300      	movs	r3, #0
 800ecec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d101      	bne.n	800ed00 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ecfc:	2303      	movs	r3, #3
 800ecfe:	e0af      	b.n	800ee60 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	781b      	ldrb	r3, [r3, #0]
 800ed04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d03f      	beq.n	800ed8c <USBD_CDC_Setup+0xb4>
 800ed0c:	2b20      	cmp	r3, #32
 800ed0e:	f040 809f 	bne.w	800ee50 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	88db      	ldrh	r3, [r3, #6]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d02e      	beq.n	800ed78 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	781b      	ldrb	r3, [r3, #0]
 800ed1e:	b25b      	sxtb	r3, r3
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	da16      	bge.n	800ed52 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ed2a:	689b      	ldr	r3, [r3, #8]
 800ed2c:	683a      	ldr	r2, [r7, #0]
 800ed2e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ed30:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ed32:	683a      	ldr	r2, [r7, #0]
 800ed34:	88d2      	ldrh	r2, [r2, #6]
 800ed36:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	88db      	ldrh	r3, [r3, #6]
 800ed3c:	2b07      	cmp	r3, #7
 800ed3e:	bf28      	it	cs
 800ed40:	2307      	movcs	r3, #7
 800ed42:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	89fa      	ldrh	r2, [r7, #14]
 800ed48:	4619      	mov	r1, r3
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f001 facd 	bl	80102ea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ed50:	e085      	b.n	800ee5e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	785a      	ldrb	r2, [r3, #1]
 800ed56:	693b      	ldr	r3, [r7, #16]
 800ed58:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	88db      	ldrh	r3, [r3, #6]
 800ed60:	b2da      	uxtb	r2, r3
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ed68:	6939      	ldr	r1, [r7, #16]
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	88db      	ldrh	r3, [r3, #6]
 800ed6e:	461a      	mov	r2, r3
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f001 fae6 	bl	8010342 <USBD_CtlPrepareRx>
      break;
 800ed76:	e072      	b.n	800ee5e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ed7e:	689b      	ldr	r3, [r3, #8]
 800ed80:	683a      	ldr	r2, [r7, #0]
 800ed82:	7850      	ldrb	r0, [r2, #1]
 800ed84:	2200      	movs	r2, #0
 800ed86:	6839      	ldr	r1, [r7, #0]
 800ed88:	4798      	blx	r3
      break;
 800ed8a:	e068      	b.n	800ee5e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	785b      	ldrb	r3, [r3, #1]
 800ed90:	2b0b      	cmp	r3, #11
 800ed92:	d852      	bhi.n	800ee3a <USBD_CDC_Setup+0x162>
 800ed94:	a201      	add	r2, pc, #4	@ (adr r2, 800ed9c <USBD_CDC_Setup+0xc4>)
 800ed96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed9a:	bf00      	nop
 800ed9c:	0800edcd 	.word	0x0800edcd
 800eda0:	0800ee49 	.word	0x0800ee49
 800eda4:	0800ee3b 	.word	0x0800ee3b
 800eda8:	0800ee3b 	.word	0x0800ee3b
 800edac:	0800ee3b 	.word	0x0800ee3b
 800edb0:	0800ee3b 	.word	0x0800ee3b
 800edb4:	0800ee3b 	.word	0x0800ee3b
 800edb8:	0800ee3b 	.word	0x0800ee3b
 800edbc:	0800ee3b 	.word	0x0800ee3b
 800edc0:	0800ee3b 	.word	0x0800ee3b
 800edc4:	0800edf7 	.word	0x0800edf7
 800edc8:	0800ee21 	.word	0x0800ee21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edd2:	b2db      	uxtb	r3, r3
 800edd4:	2b03      	cmp	r3, #3
 800edd6:	d107      	bne.n	800ede8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800edd8:	f107 030a 	add.w	r3, r7, #10
 800eddc:	2202      	movs	r2, #2
 800edde:	4619      	mov	r1, r3
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f001 fa82 	bl	80102ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ede6:	e032      	b.n	800ee4e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ede8:	6839      	ldr	r1, [r7, #0]
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f001 fa0c 	bl	8010208 <USBD_CtlError>
            ret = USBD_FAIL;
 800edf0:	2303      	movs	r3, #3
 800edf2:	75fb      	strb	r3, [r7, #23]
          break;
 800edf4:	e02b      	b.n	800ee4e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edfc:	b2db      	uxtb	r3, r3
 800edfe:	2b03      	cmp	r3, #3
 800ee00:	d107      	bne.n	800ee12 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ee02:	f107 030d 	add.w	r3, r7, #13
 800ee06:	2201      	movs	r2, #1
 800ee08:	4619      	mov	r1, r3
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f001 fa6d 	bl	80102ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ee10:	e01d      	b.n	800ee4e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ee12:	6839      	ldr	r1, [r7, #0]
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f001 f9f7 	bl	8010208 <USBD_CtlError>
            ret = USBD_FAIL;
 800ee1a:	2303      	movs	r3, #3
 800ee1c:	75fb      	strb	r3, [r7, #23]
          break;
 800ee1e:	e016      	b.n	800ee4e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee26:	b2db      	uxtb	r3, r3
 800ee28:	2b03      	cmp	r3, #3
 800ee2a:	d00f      	beq.n	800ee4c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ee2c:	6839      	ldr	r1, [r7, #0]
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f001 f9ea 	bl	8010208 <USBD_CtlError>
            ret = USBD_FAIL;
 800ee34:	2303      	movs	r3, #3
 800ee36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ee38:	e008      	b.n	800ee4c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ee3a:	6839      	ldr	r1, [r7, #0]
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f001 f9e3 	bl	8010208 <USBD_CtlError>
          ret = USBD_FAIL;
 800ee42:	2303      	movs	r3, #3
 800ee44:	75fb      	strb	r3, [r7, #23]
          break;
 800ee46:	e002      	b.n	800ee4e <USBD_CDC_Setup+0x176>
          break;
 800ee48:	bf00      	nop
 800ee4a:	e008      	b.n	800ee5e <USBD_CDC_Setup+0x186>
          break;
 800ee4c:	bf00      	nop
      }
      break;
 800ee4e:	e006      	b.n	800ee5e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ee50:	6839      	ldr	r1, [r7, #0]
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f001 f9d8 	bl	8010208 <USBD_CtlError>
      ret = USBD_FAIL;
 800ee58:	2303      	movs	r3, #3
 800ee5a:	75fb      	strb	r3, [r7, #23]
      break;
 800ee5c:	bf00      	nop
  }

  return (uint8_t)ret;
 800ee5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	3718      	adds	r7, #24
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}

0800ee68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	460b      	mov	r3, r1
 800ee72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ee7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d101      	bne.n	800ee8a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ee86:	2303      	movs	r3, #3
 800ee88:	e04f      	b.n	800ef2a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ee90:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ee92:	78fa      	ldrb	r2, [r7, #3]
 800ee94:	6879      	ldr	r1, [r7, #4]
 800ee96:	4613      	mov	r3, r2
 800ee98:	009b      	lsls	r3, r3, #2
 800ee9a:	4413      	add	r3, r2
 800ee9c:	009b      	lsls	r3, r3, #2
 800ee9e:	440b      	add	r3, r1
 800eea0:	3318      	adds	r3, #24
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d029      	beq.n	800eefc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800eea8:	78fa      	ldrb	r2, [r7, #3]
 800eeaa:	6879      	ldr	r1, [r7, #4]
 800eeac:	4613      	mov	r3, r2
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	4413      	add	r3, r2
 800eeb2:	009b      	lsls	r3, r3, #2
 800eeb4:	440b      	add	r3, r1
 800eeb6:	3318      	adds	r3, #24
 800eeb8:	681a      	ldr	r2, [r3, #0]
 800eeba:	78f9      	ldrb	r1, [r7, #3]
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	460b      	mov	r3, r1
 800eec0:	009b      	lsls	r3, r3, #2
 800eec2:	440b      	add	r3, r1
 800eec4:	00db      	lsls	r3, r3, #3
 800eec6:	4403      	add	r3, r0
 800eec8:	3320      	adds	r3, #32
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	fbb2 f1f3 	udiv	r1, r2, r3
 800eed0:	fb01 f303 	mul.w	r3, r1, r3
 800eed4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d110      	bne.n	800eefc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800eeda:	78fa      	ldrb	r2, [r7, #3]
 800eedc:	6879      	ldr	r1, [r7, #4]
 800eede:	4613      	mov	r3, r2
 800eee0:	009b      	lsls	r3, r3, #2
 800eee2:	4413      	add	r3, r2
 800eee4:	009b      	lsls	r3, r3, #2
 800eee6:	440b      	add	r3, r1
 800eee8:	3318      	adds	r3, #24
 800eeea:	2200      	movs	r2, #0
 800eeec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800eeee:	78f9      	ldrb	r1, [r7, #3]
 800eef0:	2300      	movs	r3, #0
 800eef2:	2200      	movs	r2, #0
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f001 fec4 	bl	8010c82 <USBD_LL_Transmit>
 800eefa:	e015      	b.n	800ef28 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	2200      	movs	r2, #0
 800ef00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ef0a:	691b      	ldr	r3, [r3, #16]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d00b      	beq.n	800ef28 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ef16:	691b      	ldr	r3, [r3, #16]
 800ef18:	68ba      	ldr	r2, [r7, #8]
 800ef1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ef1e:	68ba      	ldr	r2, [r7, #8]
 800ef20:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ef24:	78fa      	ldrb	r2, [r7, #3]
 800ef26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ef28:	2300      	movs	r3, #0
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3710      	adds	r7, #16
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}

0800ef32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ef32:	b580      	push	{r7, lr}
 800ef34:	b084      	sub	sp, #16
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	6078      	str	r0, [r7, #4]
 800ef3a:	460b      	mov	r3, r1
 800ef3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef44:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d101      	bne.n	800ef54 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ef50:	2303      	movs	r3, #3
 800ef52:	e015      	b.n	800ef80 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ef54:	78fb      	ldrb	r3, [r7, #3]
 800ef56:	4619      	mov	r1, r3
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f001 fed4 	bl	8010d06 <USBD_LL_GetRxDataSize>
 800ef5e:	4602      	mov	r2, r0
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ef6c:	68db      	ldr	r3, [r3, #12]
 800ef6e:	68fa      	ldr	r2, [r7, #12]
 800ef70:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ef74:	68fa      	ldr	r2, [r7, #12]
 800ef76:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ef7a:	4611      	mov	r1, r2
 800ef7c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ef7e:	2300      	movs	r3, #0
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3710      	adds	r7, #16
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}

0800ef88 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b084      	sub	sp, #16
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef96:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d101      	bne.n	800efa2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ef9e:	2303      	movs	r3, #3
 800efa0:	e01a      	b.n	800efd8 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d014      	beq.n	800efd6 <USBD_CDC_EP0_RxReady+0x4e>
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800efb2:	2bff      	cmp	r3, #255	@ 0xff
 800efb4:	d00f      	beq.n	800efd6 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800efbc:	689b      	ldr	r3, [r3, #8]
 800efbe:	68fa      	ldr	r2, [r7, #12]
 800efc0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800efc4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800efc6:	68fa      	ldr	r2, [r7, #12]
 800efc8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800efcc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	22ff      	movs	r2, #255	@ 0xff
 800efd2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800efd6:	2300      	movs	r3, #0
}
 800efd8:	4618      	mov	r0, r3
 800efda:	3710      	adds	r7, #16
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}

0800efe0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800efe0:	b480      	push	{r7}
 800efe2:	b083      	sub	sp, #12
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2243      	movs	r2, #67	@ 0x43
 800efec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800efee:	4b03      	ldr	r3, [pc, #12]	@ (800effc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	370c      	adds	r7, #12
 800eff4:	46bd      	mov	sp, r7
 800eff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effa:	4770      	bx	lr
 800effc:	200000ec 	.word	0x200000ec

0800f000 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f000:	b480      	push	{r7}
 800f002:	b083      	sub	sp, #12
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2243      	movs	r2, #67	@ 0x43
 800f00c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f00e:	4b03      	ldr	r3, [pc, #12]	@ (800f01c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f010:	4618      	mov	r0, r3
 800f012:	370c      	adds	r7, #12
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr
 800f01c:	200000a8 	.word	0x200000a8

0800f020 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f020:	b480      	push	{r7}
 800f022:	b083      	sub	sp, #12
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2243      	movs	r2, #67	@ 0x43
 800f02c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f02e:	4b03      	ldr	r3, [pc, #12]	@ (800f03c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f030:	4618      	mov	r0, r3
 800f032:	370c      	adds	r7, #12
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr
 800f03c:	20000130 	.word	0x20000130

0800f040 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f040:	b480      	push	{r7}
 800f042:	b083      	sub	sp, #12
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	220a      	movs	r2, #10
 800f04c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f04e:	4b03      	ldr	r3, [pc, #12]	@ (800f05c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f050:	4618      	mov	r0, r3
 800f052:	370c      	adds	r7, #12
 800f054:	46bd      	mov	sp, r7
 800f056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05a:	4770      	bx	lr
 800f05c:	20000064 	.word	0x20000064

0800f060 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f060:	b480      	push	{r7}
 800f062:	b083      	sub	sp, #12
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d101      	bne.n	800f074 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f070:	2303      	movs	r3, #3
 800f072:	e004      	b.n	800f07e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	683a      	ldr	r2, [r7, #0]
 800f078:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800f07c:	2300      	movs	r3, #0
}
 800f07e:	4618      	mov	r0, r3
 800f080:	370c      	adds	r7, #12
 800f082:	46bd      	mov	sp, r7
 800f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f088:	4770      	bx	lr

0800f08a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f08a:	b480      	push	{r7}
 800f08c:	b087      	sub	sp, #28
 800f08e:	af00      	add	r7, sp, #0
 800f090:	60f8      	str	r0, [r7, #12]
 800f092:	60b9      	str	r1, [r7, #8]
 800f094:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f09c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d101      	bne.n	800f0a8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f0a4:	2303      	movs	r3, #3
 800f0a6:	e008      	b.n	800f0ba <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	68ba      	ldr	r2, [r7, #8]
 800f0ac:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	687a      	ldr	r2, [r7, #4]
 800f0b4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f0b8:	2300      	movs	r3, #0
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	371c      	adds	r7, #28
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c4:	4770      	bx	lr

0800f0c6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f0c6:	b480      	push	{r7}
 800f0c8:	b085      	sub	sp, #20
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	6078      	str	r0, [r7, #4]
 800f0ce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f0d6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d101      	bne.n	800f0e2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f0de:	2303      	movs	r3, #3
 800f0e0:	e004      	b.n	800f0ec <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	683a      	ldr	r2, [r7, #0]
 800f0e6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f0ea:	2300      	movs	r3, #0
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3714      	adds	r7, #20
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f6:	4770      	bx	lr

0800f0f8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f106:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f108:	2301      	movs	r3, #1
 800f10a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f112:	2b00      	cmp	r3, #0
 800f114:	d101      	bne.n	800f11a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f116:	2303      	movs	r3, #3
 800f118:	e01a      	b.n	800f150 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f120:	2b00      	cmp	r3, #0
 800f122:	d114      	bne.n	800f14e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	2201      	movs	r2, #1
 800f128:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f142:	2181      	movs	r1, #129	@ 0x81
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f001 fd9c 	bl	8010c82 <USBD_LL_Transmit>

    ret = USBD_OK;
 800f14a:	2300      	movs	r3, #0
 800f14c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f14e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f150:	4618      	mov	r0, r3
 800f152:	3710      	adds	r7, #16
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b084      	sub	sp, #16
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f166:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d101      	bne.n	800f176 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f172:	2303      	movs	r3, #3
 800f174:	e016      	b.n	800f1a4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	7c1b      	ldrb	r3, [r3, #16]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d109      	bne.n	800f192 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f184:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f188:	2101      	movs	r1, #1
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f001 fd9a 	bl	8010cc4 <USBD_LL_PrepareReceive>
 800f190:	e007      	b.n	800f1a2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f198:	2340      	movs	r3, #64	@ 0x40
 800f19a:	2101      	movs	r1, #1
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f001 fd91 	bl	8010cc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f1a2:	2300      	movs	r3, #0
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3710      	adds	r7, #16
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b086      	sub	sp, #24
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	4613      	mov	r3, r2
 800f1b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d101      	bne.n	800f1c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f1c0:	2303      	movs	r3, #3
 800f1c2:	e01f      	b.n	800f204 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d003      	beq.n	800f1ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	68ba      	ldr	r2, [r7, #8]
 800f1e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	2201      	movs	r2, #1
 800f1ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	79fa      	ldrb	r2, [r7, #7]
 800f1f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f1f8:	68f8      	ldr	r0, [r7, #12]
 800f1fa:	f001 fbf9 	bl	80109f0 <USBD_LL_Init>
 800f1fe:	4603      	mov	r3, r0
 800f200:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f202:	7dfb      	ldrb	r3, [r7, #23]
}
 800f204:	4618      	mov	r0, r3
 800f206:	3718      	adds	r7, #24
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b084      	sub	sp, #16
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f216:	2300      	movs	r3, #0
 800f218:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d101      	bne.n	800f224 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f220:	2303      	movs	r3, #3
 800f222:	e016      	b.n	800f252 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	683a      	ldr	r2, [r7, #0]
 800f228:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f234:	2b00      	cmp	r3, #0
 800f236:	d00b      	beq.n	800f250 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f240:	f107 020e 	add.w	r2, r7, #14
 800f244:	4610      	mov	r0, r2
 800f246:	4798      	blx	r3
 800f248:	4602      	mov	r2, r0
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f250:	2300      	movs	r3, #0
}
 800f252:	4618      	mov	r0, r3
 800f254:	3710      	adds	r7, #16
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}

0800f25a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f25a:	b580      	push	{r7, lr}
 800f25c:	b082      	sub	sp, #8
 800f25e:	af00      	add	r7, sp, #0
 800f260:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f001 fc24 	bl	8010ab0 <USBD_LL_Start>
 800f268:	4603      	mov	r3, r0
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	3708      	adds	r7, #8
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}

0800f272 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f272:	b480      	push	{r7}
 800f274:	b083      	sub	sp, #12
 800f276:	af00      	add	r7, sp, #0
 800f278:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f27a:	2300      	movs	r3, #0
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	370c      	adds	r7, #12
 800f280:	46bd      	mov	sp, r7
 800f282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f286:	4770      	bx	lr

0800f288 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b084      	sub	sp, #16
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	460b      	mov	r3, r1
 800f292:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f294:	2303      	movs	r3, #3
 800f296:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d009      	beq.n	800f2b6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	78fa      	ldrb	r2, [r7, #3]
 800f2ac:	4611      	mov	r1, r2
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	4798      	blx	r3
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3710      	adds	r7, #16
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b082      	sub	sp, #8
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	460b      	mov	r3, r1
 800f2ca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d007      	beq.n	800f2e6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	78fa      	ldrb	r2, [r7, #3]
 800f2e0:	4611      	mov	r1, r2
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	4798      	blx	r3
  }

  return USBD_OK;
 800f2e6:	2300      	movs	r3, #0
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3708      	adds	r7, #8
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b084      	sub	sp, #16
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f300:	6839      	ldr	r1, [r7, #0]
 800f302:	4618      	mov	r0, r3
 800f304:	f000 ff46 	bl	8010194 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2201      	movs	r2, #1
 800f30c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f316:	461a      	mov	r2, r3
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f324:	f003 031f 	and.w	r3, r3, #31
 800f328:	2b02      	cmp	r3, #2
 800f32a:	d01a      	beq.n	800f362 <USBD_LL_SetupStage+0x72>
 800f32c:	2b02      	cmp	r3, #2
 800f32e:	d822      	bhi.n	800f376 <USBD_LL_SetupStage+0x86>
 800f330:	2b00      	cmp	r3, #0
 800f332:	d002      	beq.n	800f33a <USBD_LL_SetupStage+0x4a>
 800f334:	2b01      	cmp	r3, #1
 800f336:	d00a      	beq.n	800f34e <USBD_LL_SetupStage+0x5e>
 800f338:	e01d      	b.n	800f376 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f340:	4619      	mov	r1, r3
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 f9ee 	bl	800f724 <USBD_StdDevReq>
 800f348:	4603      	mov	r3, r0
 800f34a:	73fb      	strb	r3, [r7, #15]
      break;
 800f34c:	e020      	b.n	800f390 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f354:	4619      	mov	r1, r3
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 fa52 	bl	800f800 <USBD_StdItfReq>
 800f35c:	4603      	mov	r3, r0
 800f35e:	73fb      	strb	r3, [r7, #15]
      break;
 800f360:	e016      	b.n	800f390 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f368:	4619      	mov	r1, r3
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f000 fa91 	bl	800f892 <USBD_StdEPReq>
 800f370:	4603      	mov	r3, r0
 800f372:	73fb      	strb	r3, [r7, #15]
      break;
 800f374:	e00c      	b.n	800f390 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f37c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f380:	b2db      	uxtb	r3, r3
 800f382:	4619      	mov	r1, r3
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f001 fbf3 	bl	8010b70 <USBD_LL_StallEP>
 800f38a:	4603      	mov	r3, r0
 800f38c:	73fb      	strb	r3, [r7, #15]
      break;
 800f38e:	bf00      	nop
  }

  return ret;
 800f390:	7bfb      	ldrb	r3, [r7, #15]
}
 800f392:	4618      	mov	r0, r3
 800f394:	3710      	adds	r7, #16
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}

0800f39a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f39a:	b580      	push	{r7, lr}
 800f39c:	b086      	sub	sp, #24
 800f39e:	af00      	add	r7, sp, #0
 800f3a0:	60f8      	str	r0, [r7, #12]
 800f3a2:	460b      	mov	r3, r1
 800f3a4:	607a      	str	r2, [r7, #4]
 800f3a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f3a8:	7afb      	ldrb	r3, [r7, #11]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d138      	bne.n	800f420 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f3b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f3bc:	2b03      	cmp	r3, #3
 800f3be:	d14a      	bne.n	800f456 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f3c0:	693b      	ldr	r3, [r7, #16]
 800f3c2:	689a      	ldr	r2, [r3, #8]
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	68db      	ldr	r3, [r3, #12]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d913      	bls.n	800f3f4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	689a      	ldr	r2, [r3, #8]
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	68db      	ldr	r3, [r3, #12]
 800f3d4:	1ad2      	subs	r2, r2, r3
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	68da      	ldr	r2, [r3, #12]
 800f3de:	693b      	ldr	r3, [r7, #16]
 800f3e0:	689b      	ldr	r3, [r3, #8]
 800f3e2:	4293      	cmp	r3, r2
 800f3e4:	bf28      	it	cs
 800f3e6:	4613      	movcs	r3, r2
 800f3e8:	461a      	mov	r2, r3
 800f3ea:	6879      	ldr	r1, [r7, #4]
 800f3ec:	68f8      	ldr	r0, [r7, #12]
 800f3ee:	f000 ffc5 	bl	801037c <USBD_CtlContinueRx>
 800f3f2:	e030      	b.n	800f456 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f3fa:	b2db      	uxtb	r3, r3
 800f3fc:	2b03      	cmp	r3, #3
 800f3fe:	d10b      	bne.n	800f418 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f406:	691b      	ldr	r3, [r3, #16]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d005      	beq.n	800f418 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f412:	691b      	ldr	r3, [r3, #16]
 800f414:	68f8      	ldr	r0, [r7, #12]
 800f416:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f418:	68f8      	ldr	r0, [r7, #12]
 800f41a:	f000 ffc0 	bl	801039e <USBD_CtlSendStatus>
 800f41e:	e01a      	b.n	800f456 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f426:	b2db      	uxtb	r3, r3
 800f428:	2b03      	cmp	r3, #3
 800f42a:	d114      	bne.n	800f456 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f432:	699b      	ldr	r3, [r3, #24]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d00e      	beq.n	800f456 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f43e:	699b      	ldr	r3, [r3, #24]
 800f440:	7afa      	ldrb	r2, [r7, #11]
 800f442:	4611      	mov	r1, r2
 800f444:	68f8      	ldr	r0, [r7, #12]
 800f446:	4798      	blx	r3
 800f448:	4603      	mov	r3, r0
 800f44a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f44c:	7dfb      	ldrb	r3, [r7, #23]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d001      	beq.n	800f456 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f452:	7dfb      	ldrb	r3, [r7, #23]
 800f454:	e000      	b.n	800f458 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f456:	2300      	movs	r3, #0
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3718      	adds	r7, #24
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}

0800f460 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b086      	sub	sp, #24
 800f464:	af00      	add	r7, sp, #0
 800f466:	60f8      	str	r0, [r7, #12]
 800f468:	460b      	mov	r3, r1
 800f46a:	607a      	str	r2, [r7, #4]
 800f46c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f46e:	7afb      	ldrb	r3, [r7, #11]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d16b      	bne.n	800f54c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	3314      	adds	r3, #20
 800f478:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f480:	2b02      	cmp	r3, #2
 800f482:	d156      	bne.n	800f532 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f484:	693b      	ldr	r3, [r7, #16]
 800f486:	689a      	ldr	r2, [r3, #8]
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	68db      	ldr	r3, [r3, #12]
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d914      	bls.n	800f4ba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	689a      	ldr	r2, [r3, #8]
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	68db      	ldr	r3, [r3, #12]
 800f498:	1ad2      	subs	r2, r2, r3
 800f49a:	693b      	ldr	r3, [r7, #16]
 800f49c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f49e:	693b      	ldr	r3, [r7, #16]
 800f4a0:	689b      	ldr	r3, [r3, #8]
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	6879      	ldr	r1, [r7, #4]
 800f4a6:	68f8      	ldr	r0, [r7, #12]
 800f4a8:	f000 ff3a 	bl	8010320 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	2100      	movs	r1, #0
 800f4b2:	68f8      	ldr	r0, [r7, #12]
 800f4b4:	f001 fc06 	bl	8010cc4 <USBD_LL_PrepareReceive>
 800f4b8:	e03b      	b.n	800f532 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	68da      	ldr	r2, [r3, #12]
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	689b      	ldr	r3, [r3, #8]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d11c      	bne.n	800f500 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	685a      	ldr	r2, [r3, #4]
 800f4ca:	693b      	ldr	r3, [r7, #16]
 800f4cc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d316      	bcc.n	800f500 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	685a      	ldr	r2, [r3, #4]
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d20f      	bcs.n	800f500 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	2100      	movs	r1, #0
 800f4e4:	68f8      	ldr	r0, [r7, #12]
 800f4e6:	f000 ff1b 	bl	8010320 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	2100      	movs	r1, #0
 800f4f8:	68f8      	ldr	r0, [r7, #12]
 800f4fa:	f001 fbe3 	bl	8010cc4 <USBD_LL_PrepareReceive>
 800f4fe:	e018      	b.n	800f532 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f506:	b2db      	uxtb	r3, r3
 800f508:	2b03      	cmp	r3, #3
 800f50a:	d10b      	bne.n	800f524 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f512:	68db      	ldr	r3, [r3, #12]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d005      	beq.n	800f524 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f51e:	68db      	ldr	r3, [r3, #12]
 800f520:	68f8      	ldr	r0, [r7, #12]
 800f522:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f524:	2180      	movs	r1, #128	@ 0x80
 800f526:	68f8      	ldr	r0, [r7, #12]
 800f528:	f001 fb22 	bl	8010b70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f52c:	68f8      	ldr	r0, [r7, #12]
 800f52e:	f000 ff49 	bl	80103c4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f538:	2b01      	cmp	r3, #1
 800f53a:	d122      	bne.n	800f582 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f53c:	68f8      	ldr	r0, [r7, #12]
 800f53e:	f7ff fe98 	bl	800f272 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	2200      	movs	r2, #0
 800f546:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f54a:	e01a      	b.n	800f582 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f552:	b2db      	uxtb	r3, r3
 800f554:	2b03      	cmp	r3, #3
 800f556:	d114      	bne.n	800f582 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f55e:	695b      	ldr	r3, [r3, #20]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d00e      	beq.n	800f582 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f56a:	695b      	ldr	r3, [r3, #20]
 800f56c:	7afa      	ldrb	r2, [r7, #11]
 800f56e:	4611      	mov	r1, r2
 800f570:	68f8      	ldr	r0, [r7, #12]
 800f572:	4798      	blx	r3
 800f574:	4603      	mov	r3, r0
 800f576:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f578:	7dfb      	ldrb	r3, [r7, #23]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d001      	beq.n	800f582 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f57e:	7dfb      	ldrb	r3, [r7, #23]
 800f580:	e000      	b.n	800f584 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f582:	2300      	movs	r3, #0
}
 800f584:	4618      	mov	r0, r3
 800f586:	3718      	adds	r7, #24
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}

0800f58c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b082      	sub	sp, #8
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2201      	movs	r2, #1
 800f598:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d101      	bne.n	800f5c0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f5bc:	2303      	movs	r3, #3
 800f5be:	e02f      	b.n	800f620 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00f      	beq.n	800f5ea <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5d0:	685b      	ldr	r3, [r3, #4]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d009      	beq.n	800f5ea <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	687a      	ldr	r2, [r7, #4]
 800f5e0:	6852      	ldr	r2, [r2, #4]
 800f5e2:	b2d2      	uxtb	r2, r2
 800f5e4:	4611      	mov	r1, r2
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f5ea:	2340      	movs	r3, #64	@ 0x40
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	2100      	movs	r1, #0
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f001 fa78 	bl	8010ae6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2201      	movs	r2, #1
 800f5fa:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2240      	movs	r2, #64	@ 0x40
 800f602:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f606:	2340      	movs	r3, #64	@ 0x40
 800f608:	2200      	movs	r2, #0
 800f60a:	2180      	movs	r1, #128	@ 0x80
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f001 fa6a 	bl	8010ae6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2201      	movs	r2, #1
 800f616:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2240      	movs	r2, #64	@ 0x40
 800f61c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f61e:	2300      	movs	r3, #0
}
 800f620:	4618      	mov	r0, r3
 800f622:	3708      	adds	r7, #8
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}

0800f628 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f628:	b480      	push	{r7}
 800f62a:	b083      	sub	sp, #12
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	460b      	mov	r3, r1
 800f632:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	78fa      	ldrb	r2, [r7, #3]
 800f638:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f63a:	2300      	movs	r3, #0
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	370c      	adds	r7, #12
 800f640:	46bd      	mov	sp, r7
 800f642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f646:	4770      	bx	lr

0800f648 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f648:	b480      	push	{r7}
 800f64a:	b083      	sub	sp, #12
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f656:	b2da      	uxtb	r2, r3
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2204      	movs	r2, #4
 800f662:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f666:	2300      	movs	r3, #0
}
 800f668:	4618      	mov	r0, r3
 800f66a:	370c      	adds	r7, #12
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr

0800f674 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f674:	b480      	push	{r7}
 800f676:	b083      	sub	sp, #12
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f682:	b2db      	uxtb	r3, r3
 800f684:	2b04      	cmp	r3, #4
 800f686:	d106      	bne.n	800f696 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f68e:	b2da      	uxtb	r2, r3
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f696:	2300      	movs	r3, #0
}
 800f698:	4618      	mov	r0, r3
 800f69a:	370c      	adds	r7, #12
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr

0800f6a4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b082      	sub	sp, #8
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d101      	bne.n	800f6ba <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f6b6:	2303      	movs	r3, #3
 800f6b8:	e012      	b.n	800f6e0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	2b03      	cmp	r3, #3
 800f6c4:	d10b      	bne.n	800f6de <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6cc:	69db      	ldr	r3, [r3, #28]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d005      	beq.n	800f6de <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6d8:	69db      	ldr	r3, [r3, #28]
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f6de:	2300      	movs	r3, #0
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3708      	adds	r7, #8
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}

0800f6e8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b087      	sub	sp, #28
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	3301      	adds	r3, #1
 800f6fe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f706:	8a3b      	ldrh	r3, [r7, #16]
 800f708:	021b      	lsls	r3, r3, #8
 800f70a:	b21a      	sxth	r2, r3
 800f70c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f710:	4313      	orrs	r3, r2
 800f712:	b21b      	sxth	r3, r3
 800f714:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f716:	89fb      	ldrh	r3, [r7, #14]
}
 800f718:	4618      	mov	r0, r3
 800f71a:	371c      	adds	r7, #28
 800f71c:	46bd      	mov	sp, r7
 800f71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f722:	4770      	bx	lr

0800f724 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b084      	sub	sp, #16
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f72e:	2300      	movs	r3, #0
 800f730:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	781b      	ldrb	r3, [r3, #0]
 800f736:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f73a:	2b40      	cmp	r3, #64	@ 0x40
 800f73c:	d005      	beq.n	800f74a <USBD_StdDevReq+0x26>
 800f73e:	2b40      	cmp	r3, #64	@ 0x40
 800f740:	d853      	bhi.n	800f7ea <USBD_StdDevReq+0xc6>
 800f742:	2b00      	cmp	r3, #0
 800f744:	d00b      	beq.n	800f75e <USBD_StdDevReq+0x3a>
 800f746:	2b20      	cmp	r3, #32
 800f748:	d14f      	bne.n	800f7ea <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f750:	689b      	ldr	r3, [r3, #8]
 800f752:	6839      	ldr	r1, [r7, #0]
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	4798      	blx	r3
 800f758:	4603      	mov	r3, r0
 800f75a:	73fb      	strb	r3, [r7, #15]
      break;
 800f75c:	e04a      	b.n	800f7f4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	785b      	ldrb	r3, [r3, #1]
 800f762:	2b09      	cmp	r3, #9
 800f764:	d83b      	bhi.n	800f7de <USBD_StdDevReq+0xba>
 800f766:	a201      	add	r2, pc, #4	@ (adr r2, 800f76c <USBD_StdDevReq+0x48>)
 800f768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f76c:	0800f7c1 	.word	0x0800f7c1
 800f770:	0800f7d5 	.word	0x0800f7d5
 800f774:	0800f7df 	.word	0x0800f7df
 800f778:	0800f7cb 	.word	0x0800f7cb
 800f77c:	0800f7df 	.word	0x0800f7df
 800f780:	0800f79f 	.word	0x0800f79f
 800f784:	0800f795 	.word	0x0800f795
 800f788:	0800f7df 	.word	0x0800f7df
 800f78c:	0800f7b7 	.word	0x0800f7b7
 800f790:	0800f7a9 	.word	0x0800f7a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f794:	6839      	ldr	r1, [r7, #0]
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f000 f9de 	bl	800fb58 <USBD_GetDescriptor>
          break;
 800f79c:	e024      	b.n	800f7e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f79e:	6839      	ldr	r1, [r7, #0]
 800f7a0:	6878      	ldr	r0, [r7, #4]
 800f7a2:	f000 fb6d 	bl	800fe80 <USBD_SetAddress>
          break;
 800f7a6:	e01f      	b.n	800f7e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f7a8:	6839      	ldr	r1, [r7, #0]
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f000 fbac 	bl	800ff08 <USBD_SetConfig>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	73fb      	strb	r3, [r7, #15]
          break;
 800f7b4:	e018      	b.n	800f7e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f7b6:	6839      	ldr	r1, [r7, #0]
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f000 fc4b 	bl	8010054 <USBD_GetConfig>
          break;
 800f7be:	e013      	b.n	800f7e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f7c0:	6839      	ldr	r1, [r7, #0]
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f000 fc7c 	bl	80100c0 <USBD_GetStatus>
          break;
 800f7c8:	e00e      	b.n	800f7e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f7ca:	6839      	ldr	r1, [r7, #0]
 800f7cc:	6878      	ldr	r0, [r7, #4]
 800f7ce:	f000 fcab 	bl	8010128 <USBD_SetFeature>
          break;
 800f7d2:	e009      	b.n	800f7e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f7d4:	6839      	ldr	r1, [r7, #0]
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f000 fcba 	bl	8010150 <USBD_ClrFeature>
          break;
 800f7dc:	e004      	b.n	800f7e8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f7de:	6839      	ldr	r1, [r7, #0]
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f000 fd11 	bl	8010208 <USBD_CtlError>
          break;
 800f7e6:	bf00      	nop
      }
      break;
 800f7e8:	e004      	b.n	800f7f4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f7ea:	6839      	ldr	r1, [r7, #0]
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f000 fd0b 	bl	8010208 <USBD_CtlError>
      break;
 800f7f2:	bf00      	nop
  }

  return ret;
 800f7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3710      	adds	r7, #16
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
 800f7fe:	bf00      	nop

0800f800 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b084      	sub	sp, #16
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
 800f808:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f80a:	2300      	movs	r3, #0
 800f80c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	781b      	ldrb	r3, [r3, #0]
 800f812:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f816:	2b40      	cmp	r3, #64	@ 0x40
 800f818:	d005      	beq.n	800f826 <USBD_StdItfReq+0x26>
 800f81a:	2b40      	cmp	r3, #64	@ 0x40
 800f81c:	d82f      	bhi.n	800f87e <USBD_StdItfReq+0x7e>
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d001      	beq.n	800f826 <USBD_StdItfReq+0x26>
 800f822:	2b20      	cmp	r3, #32
 800f824:	d12b      	bne.n	800f87e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f82c:	b2db      	uxtb	r3, r3
 800f82e:	3b01      	subs	r3, #1
 800f830:	2b02      	cmp	r3, #2
 800f832:	d81d      	bhi.n	800f870 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	889b      	ldrh	r3, [r3, #4]
 800f838:	b2db      	uxtb	r3, r3
 800f83a:	2b01      	cmp	r3, #1
 800f83c:	d813      	bhi.n	800f866 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f844:	689b      	ldr	r3, [r3, #8]
 800f846:	6839      	ldr	r1, [r7, #0]
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	4798      	blx	r3
 800f84c:	4603      	mov	r3, r0
 800f84e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	88db      	ldrh	r3, [r3, #6]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d110      	bne.n	800f87a <USBD_StdItfReq+0x7a>
 800f858:	7bfb      	ldrb	r3, [r7, #15]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d10d      	bne.n	800f87a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f000 fd9d 	bl	801039e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f864:	e009      	b.n	800f87a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f866:	6839      	ldr	r1, [r7, #0]
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f000 fccd 	bl	8010208 <USBD_CtlError>
          break;
 800f86e:	e004      	b.n	800f87a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f870:	6839      	ldr	r1, [r7, #0]
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f000 fcc8 	bl	8010208 <USBD_CtlError>
          break;
 800f878:	e000      	b.n	800f87c <USBD_StdItfReq+0x7c>
          break;
 800f87a:	bf00      	nop
      }
      break;
 800f87c:	e004      	b.n	800f888 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f87e:	6839      	ldr	r1, [r7, #0]
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f000 fcc1 	bl	8010208 <USBD_CtlError>
      break;
 800f886:	bf00      	nop
  }

  return ret;
 800f888:	7bfb      	ldrb	r3, [r7, #15]
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	3710      	adds	r7, #16
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}

0800f892 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f892:	b580      	push	{r7, lr}
 800f894:	b084      	sub	sp, #16
 800f896:	af00      	add	r7, sp, #0
 800f898:	6078      	str	r0, [r7, #4]
 800f89a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f89c:	2300      	movs	r3, #0
 800f89e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	889b      	ldrh	r3, [r3, #4]
 800f8a4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	781b      	ldrb	r3, [r3, #0]
 800f8aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f8ae:	2b40      	cmp	r3, #64	@ 0x40
 800f8b0:	d007      	beq.n	800f8c2 <USBD_StdEPReq+0x30>
 800f8b2:	2b40      	cmp	r3, #64	@ 0x40
 800f8b4:	f200 8145 	bhi.w	800fb42 <USBD_StdEPReq+0x2b0>
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d00c      	beq.n	800f8d6 <USBD_StdEPReq+0x44>
 800f8bc:	2b20      	cmp	r3, #32
 800f8be:	f040 8140 	bne.w	800fb42 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f8c8:	689b      	ldr	r3, [r3, #8]
 800f8ca:	6839      	ldr	r1, [r7, #0]
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	4798      	blx	r3
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	73fb      	strb	r3, [r7, #15]
      break;
 800f8d4:	e13a      	b.n	800fb4c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	785b      	ldrb	r3, [r3, #1]
 800f8da:	2b03      	cmp	r3, #3
 800f8dc:	d007      	beq.n	800f8ee <USBD_StdEPReq+0x5c>
 800f8de:	2b03      	cmp	r3, #3
 800f8e0:	f300 8129 	bgt.w	800fb36 <USBD_StdEPReq+0x2a4>
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d07f      	beq.n	800f9e8 <USBD_StdEPReq+0x156>
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d03c      	beq.n	800f966 <USBD_StdEPReq+0xd4>
 800f8ec:	e123      	b.n	800fb36 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8f4:	b2db      	uxtb	r3, r3
 800f8f6:	2b02      	cmp	r3, #2
 800f8f8:	d002      	beq.n	800f900 <USBD_StdEPReq+0x6e>
 800f8fa:	2b03      	cmp	r3, #3
 800f8fc:	d016      	beq.n	800f92c <USBD_StdEPReq+0x9a>
 800f8fe:	e02c      	b.n	800f95a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f900:	7bbb      	ldrb	r3, [r7, #14]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d00d      	beq.n	800f922 <USBD_StdEPReq+0x90>
 800f906:	7bbb      	ldrb	r3, [r7, #14]
 800f908:	2b80      	cmp	r3, #128	@ 0x80
 800f90a:	d00a      	beq.n	800f922 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f90c:	7bbb      	ldrb	r3, [r7, #14]
 800f90e:	4619      	mov	r1, r3
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f001 f92d 	bl	8010b70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f916:	2180      	movs	r1, #128	@ 0x80
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f001 f929 	bl	8010b70 <USBD_LL_StallEP>
 800f91e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f920:	e020      	b.n	800f964 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f922:	6839      	ldr	r1, [r7, #0]
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f000 fc6f 	bl	8010208 <USBD_CtlError>
              break;
 800f92a:	e01b      	b.n	800f964 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	885b      	ldrh	r3, [r3, #2]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d10e      	bne.n	800f952 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f934:	7bbb      	ldrb	r3, [r7, #14]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d00b      	beq.n	800f952 <USBD_StdEPReq+0xc0>
 800f93a:	7bbb      	ldrb	r3, [r7, #14]
 800f93c:	2b80      	cmp	r3, #128	@ 0x80
 800f93e:	d008      	beq.n	800f952 <USBD_StdEPReq+0xc0>
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	88db      	ldrh	r3, [r3, #6]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d104      	bne.n	800f952 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f948:	7bbb      	ldrb	r3, [r7, #14]
 800f94a:	4619      	mov	r1, r3
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f001 f90f 	bl	8010b70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f000 fd23 	bl	801039e <USBD_CtlSendStatus>

              break;
 800f958:	e004      	b.n	800f964 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f95a:	6839      	ldr	r1, [r7, #0]
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f000 fc53 	bl	8010208 <USBD_CtlError>
              break;
 800f962:	bf00      	nop
          }
          break;
 800f964:	e0ec      	b.n	800fb40 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f96c:	b2db      	uxtb	r3, r3
 800f96e:	2b02      	cmp	r3, #2
 800f970:	d002      	beq.n	800f978 <USBD_StdEPReq+0xe6>
 800f972:	2b03      	cmp	r3, #3
 800f974:	d016      	beq.n	800f9a4 <USBD_StdEPReq+0x112>
 800f976:	e030      	b.n	800f9da <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f978:	7bbb      	ldrb	r3, [r7, #14]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d00d      	beq.n	800f99a <USBD_StdEPReq+0x108>
 800f97e:	7bbb      	ldrb	r3, [r7, #14]
 800f980:	2b80      	cmp	r3, #128	@ 0x80
 800f982:	d00a      	beq.n	800f99a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f984:	7bbb      	ldrb	r3, [r7, #14]
 800f986:	4619      	mov	r1, r3
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f001 f8f1 	bl	8010b70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f98e:	2180      	movs	r1, #128	@ 0x80
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f001 f8ed 	bl	8010b70 <USBD_LL_StallEP>
 800f996:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f998:	e025      	b.n	800f9e6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f99a:	6839      	ldr	r1, [r7, #0]
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f000 fc33 	bl	8010208 <USBD_CtlError>
              break;
 800f9a2:	e020      	b.n	800f9e6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	885b      	ldrh	r3, [r3, #2]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d11b      	bne.n	800f9e4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f9ac:	7bbb      	ldrb	r3, [r7, #14]
 800f9ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d004      	beq.n	800f9c0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f9b6:	7bbb      	ldrb	r3, [r7, #14]
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f001 f8f7 	bl	8010bae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f000 fcec 	bl	801039e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f9cc:	689b      	ldr	r3, [r3, #8]
 800f9ce:	6839      	ldr	r1, [r7, #0]
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	4798      	blx	r3
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f9d8:	e004      	b.n	800f9e4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f9da:	6839      	ldr	r1, [r7, #0]
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f000 fc13 	bl	8010208 <USBD_CtlError>
              break;
 800f9e2:	e000      	b.n	800f9e6 <USBD_StdEPReq+0x154>
              break;
 800f9e4:	bf00      	nop
          }
          break;
 800f9e6:	e0ab      	b.n	800fb40 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f9ee:	b2db      	uxtb	r3, r3
 800f9f0:	2b02      	cmp	r3, #2
 800f9f2:	d002      	beq.n	800f9fa <USBD_StdEPReq+0x168>
 800f9f4:	2b03      	cmp	r3, #3
 800f9f6:	d032      	beq.n	800fa5e <USBD_StdEPReq+0x1cc>
 800f9f8:	e097      	b.n	800fb2a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f9fa:	7bbb      	ldrb	r3, [r7, #14]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d007      	beq.n	800fa10 <USBD_StdEPReq+0x17e>
 800fa00:	7bbb      	ldrb	r3, [r7, #14]
 800fa02:	2b80      	cmp	r3, #128	@ 0x80
 800fa04:	d004      	beq.n	800fa10 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800fa06:	6839      	ldr	r1, [r7, #0]
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f000 fbfd 	bl	8010208 <USBD_CtlError>
                break;
 800fa0e:	e091      	b.n	800fb34 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	da0b      	bge.n	800fa30 <USBD_StdEPReq+0x19e>
 800fa18:	7bbb      	ldrb	r3, [r7, #14]
 800fa1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fa1e:	4613      	mov	r3, r2
 800fa20:	009b      	lsls	r3, r3, #2
 800fa22:	4413      	add	r3, r2
 800fa24:	009b      	lsls	r3, r3, #2
 800fa26:	3310      	adds	r3, #16
 800fa28:	687a      	ldr	r2, [r7, #4]
 800fa2a:	4413      	add	r3, r2
 800fa2c:	3304      	adds	r3, #4
 800fa2e:	e00b      	b.n	800fa48 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fa30:	7bbb      	ldrb	r3, [r7, #14]
 800fa32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa36:	4613      	mov	r3, r2
 800fa38:	009b      	lsls	r3, r3, #2
 800fa3a:	4413      	add	r3, r2
 800fa3c:	009b      	lsls	r3, r3, #2
 800fa3e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fa42:	687a      	ldr	r2, [r7, #4]
 800fa44:	4413      	add	r3, r2
 800fa46:	3304      	adds	r3, #4
 800fa48:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	2202      	movs	r2, #2
 800fa54:	4619      	mov	r1, r3
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f000 fc47 	bl	80102ea <USBD_CtlSendData>
              break;
 800fa5c:	e06a      	b.n	800fb34 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fa5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	da11      	bge.n	800fa8a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fa66:	7bbb      	ldrb	r3, [r7, #14]
 800fa68:	f003 020f 	and.w	r2, r3, #15
 800fa6c:	6879      	ldr	r1, [r7, #4]
 800fa6e:	4613      	mov	r3, r2
 800fa70:	009b      	lsls	r3, r3, #2
 800fa72:	4413      	add	r3, r2
 800fa74:	009b      	lsls	r3, r3, #2
 800fa76:	440b      	add	r3, r1
 800fa78:	3324      	adds	r3, #36	@ 0x24
 800fa7a:	881b      	ldrh	r3, [r3, #0]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d117      	bne.n	800fab0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fa80:	6839      	ldr	r1, [r7, #0]
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f000 fbc0 	bl	8010208 <USBD_CtlError>
                  break;
 800fa88:	e054      	b.n	800fb34 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fa8a:	7bbb      	ldrb	r3, [r7, #14]
 800fa8c:	f003 020f 	and.w	r2, r3, #15
 800fa90:	6879      	ldr	r1, [r7, #4]
 800fa92:	4613      	mov	r3, r2
 800fa94:	009b      	lsls	r3, r3, #2
 800fa96:	4413      	add	r3, r2
 800fa98:	009b      	lsls	r3, r3, #2
 800fa9a:	440b      	add	r3, r1
 800fa9c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800faa0:	881b      	ldrh	r3, [r3, #0]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d104      	bne.n	800fab0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800faa6:	6839      	ldr	r1, [r7, #0]
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f000 fbad 	bl	8010208 <USBD_CtlError>
                  break;
 800faae:	e041      	b.n	800fb34 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fab0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	da0b      	bge.n	800fad0 <USBD_StdEPReq+0x23e>
 800fab8:	7bbb      	ldrb	r3, [r7, #14]
 800faba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fabe:	4613      	mov	r3, r2
 800fac0:	009b      	lsls	r3, r3, #2
 800fac2:	4413      	add	r3, r2
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	3310      	adds	r3, #16
 800fac8:	687a      	ldr	r2, [r7, #4]
 800faca:	4413      	add	r3, r2
 800facc:	3304      	adds	r3, #4
 800face:	e00b      	b.n	800fae8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fad0:	7bbb      	ldrb	r3, [r7, #14]
 800fad2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fad6:	4613      	mov	r3, r2
 800fad8:	009b      	lsls	r3, r3, #2
 800fada:	4413      	add	r3, r2
 800fadc:	009b      	lsls	r3, r3, #2
 800fade:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fae2:	687a      	ldr	r2, [r7, #4]
 800fae4:	4413      	add	r3, r2
 800fae6:	3304      	adds	r3, #4
 800fae8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800faea:	7bbb      	ldrb	r3, [r7, #14]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d002      	beq.n	800faf6 <USBD_StdEPReq+0x264>
 800faf0:	7bbb      	ldrb	r3, [r7, #14]
 800faf2:	2b80      	cmp	r3, #128	@ 0x80
 800faf4:	d103      	bne.n	800fafe <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	2200      	movs	r2, #0
 800fafa:	601a      	str	r2, [r3, #0]
 800fafc:	e00e      	b.n	800fb1c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fafe:	7bbb      	ldrb	r3, [r7, #14]
 800fb00:	4619      	mov	r1, r3
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f001 f872 	bl	8010bec <USBD_LL_IsStallEP>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d003      	beq.n	800fb16 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	2201      	movs	r2, #1
 800fb12:	601a      	str	r2, [r3, #0]
 800fb14:	e002      	b.n	800fb1c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	2202      	movs	r2, #2
 800fb20:	4619      	mov	r1, r3
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f000 fbe1 	bl	80102ea <USBD_CtlSendData>
              break;
 800fb28:	e004      	b.n	800fb34 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800fb2a:	6839      	ldr	r1, [r7, #0]
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f000 fb6b 	bl	8010208 <USBD_CtlError>
              break;
 800fb32:	bf00      	nop
          }
          break;
 800fb34:	e004      	b.n	800fb40 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800fb36:	6839      	ldr	r1, [r7, #0]
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f000 fb65 	bl	8010208 <USBD_CtlError>
          break;
 800fb3e:	bf00      	nop
      }
      break;
 800fb40:	e004      	b.n	800fb4c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800fb42:	6839      	ldr	r1, [r7, #0]
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f000 fb5f 	bl	8010208 <USBD_CtlError>
      break;
 800fb4a:	bf00      	nop
  }

  return ret;
 800fb4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb4e:	4618      	mov	r0, r3
 800fb50:	3710      	adds	r7, #16
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bd80      	pop	{r7, pc}
	...

0800fb58 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fb62:	2300      	movs	r3, #0
 800fb64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fb66:	2300      	movs	r3, #0
 800fb68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	885b      	ldrh	r3, [r3, #2]
 800fb72:	0a1b      	lsrs	r3, r3, #8
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	3b01      	subs	r3, #1
 800fb78:	2b0e      	cmp	r3, #14
 800fb7a:	f200 8152 	bhi.w	800fe22 <USBD_GetDescriptor+0x2ca>
 800fb7e:	a201      	add	r2, pc, #4	@ (adr r2, 800fb84 <USBD_GetDescriptor+0x2c>)
 800fb80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb84:	0800fbf5 	.word	0x0800fbf5
 800fb88:	0800fc0d 	.word	0x0800fc0d
 800fb8c:	0800fc4d 	.word	0x0800fc4d
 800fb90:	0800fe23 	.word	0x0800fe23
 800fb94:	0800fe23 	.word	0x0800fe23
 800fb98:	0800fdc3 	.word	0x0800fdc3
 800fb9c:	0800fdef 	.word	0x0800fdef
 800fba0:	0800fe23 	.word	0x0800fe23
 800fba4:	0800fe23 	.word	0x0800fe23
 800fba8:	0800fe23 	.word	0x0800fe23
 800fbac:	0800fe23 	.word	0x0800fe23
 800fbb0:	0800fe23 	.word	0x0800fe23
 800fbb4:	0800fe23 	.word	0x0800fe23
 800fbb8:	0800fe23 	.word	0x0800fe23
 800fbbc:	0800fbc1 	.word	0x0800fbc1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbc6:	69db      	ldr	r3, [r3, #28]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d00b      	beq.n	800fbe4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbd2:	69db      	ldr	r3, [r3, #28]
 800fbd4:	687a      	ldr	r2, [r7, #4]
 800fbd6:	7c12      	ldrb	r2, [r2, #16]
 800fbd8:	f107 0108 	add.w	r1, r7, #8
 800fbdc:	4610      	mov	r0, r2
 800fbde:	4798      	blx	r3
 800fbe0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fbe2:	e126      	b.n	800fe32 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fbe4:	6839      	ldr	r1, [r7, #0]
 800fbe6:	6878      	ldr	r0, [r7, #4]
 800fbe8:	f000 fb0e 	bl	8010208 <USBD_CtlError>
        err++;
 800fbec:	7afb      	ldrb	r3, [r7, #11]
 800fbee:	3301      	adds	r3, #1
 800fbf0:	72fb      	strb	r3, [r7, #11]
      break;
 800fbf2:	e11e      	b.n	800fe32 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	687a      	ldr	r2, [r7, #4]
 800fbfe:	7c12      	ldrb	r2, [r2, #16]
 800fc00:	f107 0108 	add.w	r1, r7, #8
 800fc04:	4610      	mov	r0, r2
 800fc06:	4798      	blx	r3
 800fc08:	60f8      	str	r0, [r7, #12]
      break;
 800fc0a:	e112      	b.n	800fe32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	7c1b      	ldrb	r3, [r3, #16]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d10d      	bne.n	800fc30 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc1c:	f107 0208 	add.w	r2, r7, #8
 800fc20:	4610      	mov	r0, r2
 800fc22:	4798      	blx	r3
 800fc24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	3301      	adds	r3, #1
 800fc2a:	2202      	movs	r2, #2
 800fc2c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fc2e:	e100      	b.n	800fe32 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc38:	f107 0208 	add.w	r2, r7, #8
 800fc3c:	4610      	mov	r0, r2
 800fc3e:	4798      	blx	r3
 800fc40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	3301      	adds	r3, #1
 800fc46:	2202      	movs	r2, #2
 800fc48:	701a      	strb	r2, [r3, #0]
      break;
 800fc4a:	e0f2      	b.n	800fe32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	885b      	ldrh	r3, [r3, #2]
 800fc50:	b2db      	uxtb	r3, r3
 800fc52:	2b05      	cmp	r3, #5
 800fc54:	f200 80ac 	bhi.w	800fdb0 <USBD_GetDescriptor+0x258>
 800fc58:	a201      	add	r2, pc, #4	@ (adr r2, 800fc60 <USBD_GetDescriptor+0x108>)
 800fc5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc5e:	bf00      	nop
 800fc60:	0800fc79 	.word	0x0800fc79
 800fc64:	0800fcad 	.word	0x0800fcad
 800fc68:	0800fce1 	.word	0x0800fce1
 800fc6c:	0800fd15 	.word	0x0800fd15
 800fc70:	0800fd49 	.word	0x0800fd49
 800fc74:	0800fd7d 	.word	0x0800fd7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc7e:	685b      	ldr	r3, [r3, #4]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d00b      	beq.n	800fc9c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc8a:	685b      	ldr	r3, [r3, #4]
 800fc8c:	687a      	ldr	r2, [r7, #4]
 800fc8e:	7c12      	ldrb	r2, [r2, #16]
 800fc90:	f107 0108 	add.w	r1, r7, #8
 800fc94:	4610      	mov	r0, r2
 800fc96:	4798      	blx	r3
 800fc98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc9a:	e091      	b.n	800fdc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc9c:	6839      	ldr	r1, [r7, #0]
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f000 fab2 	bl	8010208 <USBD_CtlError>
            err++;
 800fca4:	7afb      	ldrb	r3, [r7, #11]
 800fca6:	3301      	adds	r3, #1
 800fca8:	72fb      	strb	r3, [r7, #11]
          break;
 800fcaa:	e089      	b.n	800fdc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fcb2:	689b      	ldr	r3, [r3, #8]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d00b      	beq.n	800fcd0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fcbe:	689b      	ldr	r3, [r3, #8]
 800fcc0:	687a      	ldr	r2, [r7, #4]
 800fcc2:	7c12      	ldrb	r2, [r2, #16]
 800fcc4:	f107 0108 	add.w	r1, r7, #8
 800fcc8:	4610      	mov	r0, r2
 800fcca:	4798      	blx	r3
 800fccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fcce:	e077      	b.n	800fdc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fcd0:	6839      	ldr	r1, [r7, #0]
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f000 fa98 	bl	8010208 <USBD_CtlError>
            err++;
 800fcd8:	7afb      	ldrb	r3, [r7, #11]
 800fcda:	3301      	adds	r3, #1
 800fcdc:	72fb      	strb	r3, [r7, #11]
          break;
 800fcde:	e06f      	b.n	800fdc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fce6:	68db      	ldr	r3, [r3, #12]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d00b      	beq.n	800fd04 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fcf2:	68db      	ldr	r3, [r3, #12]
 800fcf4:	687a      	ldr	r2, [r7, #4]
 800fcf6:	7c12      	ldrb	r2, [r2, #16]
 800fcf8:	f107 0108 	add.w	r1, r7, #8
 800fcfc:	4610      	mov	r0, r2
 800fcfe:	4798      	blx	r3
 800fd00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd02:	e05d      	b.n	800fdc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fd04:	6839      	ldr	r1, [r7, #0]
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f000 fa7e 	bl	8010208 <USBD_CtlError>
            err++;
 800fd0c:	7afb      	ldrb	r3, [r7, #11]
 800fd0e:	3301      	adds	r3, #1
 800fd10:	72fb      	strb	r3, [r7, #11]
          break;
 800fd12:	e055      	b.n	800fdc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd1a:	691b      	ldr	r3, [r3, #16]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d00b      	beq.n	800fd38 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd26:	691b      	ldr	r3, [r3, #16]
 800fd28:	687a      	ldr	r2, [r7, #4]
 800fd2a:	7c12      	ldrb	r2, [r2, #16]
 800fd2c:	f107 0108 	add.w	r1, r7, #8
 800fd30:	4610      	mov	r0, r2
 800fd32:	4798      	blx	r3
 800fd34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd36:	e043      	b.n	800fdc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fd38:	6839      	ldr	r1, [r7, #0]
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	f000 fa64 	bl	8010208 <USBD_CtlError>
            err++;
 800fd40:	7afb      	ldrb	r3, [r7, #11]
 800fd42:	3301      	adds	r3, #1
 800fd44:	72fb      	strb	r3, [r7, #11]
          break;
 800fd46:	e03b      	b.n	800fdc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd4e:	695b      	ldr	r3, [r3, #20]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d00b      	beq.n	800fd6c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd5a:	695b      	ldr	r3, [r3, #20]
 800fd5c:	687a      	ldr	r2, [r7, #4]
 800fd5e:	7c12      	ldrb	r2, [r2, #16]
 800fd60:	f107 0108 	add.w	r1, r7, #8
 800fd64:	4610      	mov	r0, r2
 800fd66:	4798      	blx	r3
 800fd68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd6a:	e029      	b.n	800fdc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fd6c:	6839      	ldr	r1, [r7, #0]
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f000 fa4a 	bl	8010208 <USBD_CtlError>
            err++;
 800fd74:	7afb      	ldrb	r3, [r7, #11]
 800fd76:	3301      	adds	r3, #1
 800fd78:	72fb      	strb	r3, [r7, #11]
          break;
 800fd7a:	e021      	b.n	800fdc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd82:	699b      	ldr	r3, [r3, #24]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d00b      	beq.n	800fda0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd8e:	699b      	ldr	r3, [r3, #24]
 800fd90:	687a      	ldr	r2, [r7, #4]
 800fd92:	7c12      	ldrb	r2, [r2, #16]
 800fd94:	f107 0108 	add.w	r1, r7, #8
 800fd98:	4610      	mov	r0, r2
 800fd9a:	4798      	blx	r3
 800fd9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd9e:	e00f      	b.n	800fdc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fda0:	6839      	ldr	r1, [r7, #0]
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	f000 fa30 	bl	8010208 <USBD_CtlError>
            err++;
 800fda8:	7afb      	ldrb	r3, [r7, #11]
 800fdaa:	3301      	adds	r3, #1
 800fdac:	72fb      	strb	r3, [r7, #11]
          break;
 800fdae:	e007      	b.n	800fdc0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fdb0:	6839      	ldr	r1, [r7, #0]
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	f000 fa28 	bl	8010208 <USBD_CtlError>
          err++;
 800fdb8:	7afb      	ldrb	r3, [r7, #11]
 800fdba:	3301      	adds	r3, #1
 800fdbc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800fdbe:	bf00      	nop
      }
      break;
 800fdc0:	e037      	b.n	800fe32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	7c1b      	ldrb	r3, [r3, #16]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d109      	bne.n	800fdde <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fdd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fdd2:	f107 0208 	add.w	r2, r7, #8
 800fdd6:	4610      	mov	r0, r2
 800fdd8:	4798      	blx	r3
 800fdda:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fddc:	e029      	b.n	800fe32 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fdde:	6839      	ldr	r1, [r7, #0]
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f000 fa11 	bl	8010208 <USBD_CtlError>
        err++;
 800fde6:	7afb      	ldrb	r3, [r7, #11]
 800fde8:	3301      	adds	r3, #1
 800fdea:	72fb      	strb	r3, [r7, #11]
      break;
 800fdec:	e021      	b.n	800fe32 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	7c1b      	ldrb	r3, [r3, #16]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d10d      	bne.n	800fe12 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fdfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdfe:	f107 0208 	add.w	r2, r7, #8
 800fe02:	4610      	mov	r0, r2
 800fe04:	4798      	blx	r3
 800fe06:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	3301      	adds	r3, #1
 800fe0c:	2207      	movs	r2, #7
 800fe0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fe10:	e00f      	b.n	800fe32 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fe12:	6839      	ldr	r1, [r7, #0]
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f000 f9f7 	bl	8010208 <USBD_CtlError>
        err++;
 800fe1a:	7afb      	ldrb	r3, [r7, #11]
 800fe1c:	3301      	adds	r3, #1
 800fe1e:	72fb      	strb	r3, [r7, #11]
      break;
 800fe20:	e007      	b.n	800fe32 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800fe22:	6839      	ldr	r1, [r7, #0]
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f000 f9ef 	bl	8010208 <USBD_CtlError>
      err++;
 800fe2a:	7afb      	ldrb	r3, [r7, #11]
 800fe2c:	3301      	adds	r3, #1
 800fe2e:	72fb      	strb	r3, [r7, #11]
      break;
 800fe30:	bf00      	nop
  }

  if (err != 0U)
 800fe32:	7afb      	ldrb	r3, [r7, #11]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d11e      	bne.n	800fe76 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	88db      	ldrh	r3, [r3, #6]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d016      	beq.n	800fe6e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800fe40:	893b      	ldrh	r3, [r7, #8]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d00e      	beq.n	800fe64 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	88da      	ldrh	r2, [r3, #6]
 800fe4a:	893b      	ldrh	r3, [r7, #8]
 800fe4c:	4293      	cmp	r3, r2
 800fe4e:	bf28      	it	cs
 800fe50:	4613      	movcs	r3, r2
 800fe52:	b29b      	uxth	r3, r3
 800fe54:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fe56:	893b      	ldrh	r3, [r7, #8]
 800fe58:	461a      	mov	r2, r3
 800fe5a:	68f9      	ldr	r1, [r7, #12]
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f000 fa44 	bl	80102ea <USBD_CtlSendData>
 800fe62:	e009      	b.n	800fe78 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fe64:	6839      	ldr	r1, [r7, #0]
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f000 f9ce 	bl	8010208 <USBD_CtlError>
 800fe6c:	e004      	b.n	800fe78 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f000 fa95 	bl	801039e <USBD_CtlSendStatus>
 800fe74:	e000      	b.n	800fe78 <USBD_GetDescriptor+0x320>
    return;
 800fe76:	bf00      	nop
  }
}
 800fe78:	3710      	adds	r7, #16
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}
 800fe7e:	bf00      	nop

0800fe80 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b084      	sub	sp, #16
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	889b      	ldrh	r3, [r3, #4]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d131      	bne.n	800fef6 <USBD_SetAddress+0x76>
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	88db      	ldrh	r3, [r3, #6]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d12d      	bne.n	800fef6 <USBD_SetAddress+0x76>
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	885b      	ldrh	r3, [r3, #2]
 800fe9e:	2b7f      	cmp	r3, #127	@ 0x7f
 800fea0:	d829      	bhi.n	800fef6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	885b      	ldrh	r3, [r3, #2]
 800fea6:	b2db      	uxtb	r3, r3
 800fea8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800feac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800feb4:	b2db      	uxtb	r3, r3
 800feb6:	2b03      	cmp	r3, #3
 800feb8:	d104      	bne.n	800fec4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800feba:	6839      	ldr	r1, [r7, #0]
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f000 f9a3 	bl	8010208 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fec2:	e01d      	b.n	800ff00 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	7bfa      	ldrb	r2, [r7, #15]
 800fec8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fecc:	7bfb      	ldrb	r3, [r7, #15]
 800fece:	4619      	mov	r1, r3
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f000 feb7 	bl	8010c44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f000 fa61 	bl	801039e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fedc:	7bfb      	ldrb	r3, [r7, #15]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d004      	beq.n	800feec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2202      	movs	r2, #2
 800fee6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800feea:	e009      	b.n	800ff00 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2201      	movs	r2, #1
 800fef0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fef4:	e004      	b.n	800ff00 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fef6:	6839      	ldr	r1, [r7, #0]
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f000 f985 	bl	8010208 <USBD_CtlError>
  }
}
 800fefe:	bf00      	nop
 800ff00:	bf00      	nop
 800ff02:	3710      	adds	r7, #16
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}

0800ff08 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b084      	sub	sp, #16
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff12:	2300      	movs	r3, #0
 800ff14:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	885b      	ldrh	r3, [r3, #2]
 800ff1a:	b2da      	uxtb	r2, r3
 800ff1c:	4b4c      	ldr	r3, [pc, #304]	@ (8010050 <USBD_SetConfig+0x148>)
 800ff1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ff20:	4b4b      	ldr	r3, [pc, #300]	@ (8010050 <USBD_SetConfig+0x148>)
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	2b01      	cmp	r3, #1
 800ff26:	d905      	bls.n	800ff34 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ff28:	6839      	ldr	r1, [r7, #0]
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f000 f96c 	bl	8010208 <USBD_CtlError>
    return USBD_FAIL;
 800ff30:	2303      	movs	r3, #3
 800ff32:	e088      	b.n	8010046 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff3a:	b2db      	uxtb	r3, r3
 800ff3c:	2b02      	cmp	r3, #2
 800ff3e:	d002      	beq.n	800ff46 <USBD_SetConfig+0x3e>
 800ff40:	2b03      	cmp	r3, #3
 800ff42:	d025      	beq.n	800ff90 <USBD_SetConfig+0x88>
 800ff44:	e071      	b.n	801002a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ff46:	4b42      	ldr	r3, [pc, #264]	@ (8010050 <USBD_SetConfig+0x148>)
 800ff48:	781b      	ldrb	r3, [r3, #0]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d01c      	beq.n	800ff88 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ff4e:	4b40      	ldr	r3, [pc, #256]	@ (8010050 <USBD_SetConfig+0x148>)
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	461a      	mov	r2, r3
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ff58:	4b3d      	ldr	r3, [pc, #244]	@ (8010050 <USBD_SetConfig+0x148>)
 800ff5a:	781b      	ldrb	r3, [r3, #0]
 800ff5c:	4619      	mov	r1, r3
 800ff5e:	6878      	ldr	r0, [r7, #4]
 800ff60:	f7ff f992 	bl	800f288 <USBD_SetClassConfig>
 800ff64:	4603      	mov	r3, r0
 800ff66:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ff68:	7bfb      	ldrb	r3, [r7, #15]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d004      	beq.n	800ff78 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ff6e:	6839      	ldr	r1, [r7, #0]
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f000 f949 	bl	8010208 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ff76:	e065      	b.n	8010044 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f000 fa10 	bl	801039e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2203      	movs	r2, #3
 800ff82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ff86:	e05d      	b.n	8010044 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f000 fa08 	bl	801039e <USBD_CtlSendStatus>
      break;
 800ff8e:	e059      	b.n	8010044 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ff90:	4b2f      	ldr	r3, [pc, #188]	@ (8010050 <USBD_SetConfig+0x148>)
 800ff92:	781b      	ldrb	r3, [r3, #0]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d112      	bne.n	800ffbe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2202      	movs	r2, #2
 800ff9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ffa0:	4b2b      	ldr	r3, [pc, #172]	@ (8010050 <USBD_SetConfig+0x148>)
 800ffa2:	781b      	ldrb	r3, [r3, #0]
 800ffa4:	461a      	mov	r2, r3
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ffaa:	4b29      	ldr	r3, [pc, #164]	@ (8010050 <USBD_SetConfig+0x148>)
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	4619      	mov	r1, r3
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f7ff f985 	bl	800f2c0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f000 f9f1 	bl	801039e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ffbc:	e042      	b.n	8010044 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ffbe:	4b24      	ldr	r3, [pc, #144]	@ (8010050 <USBD_SetConfig+0x148>)
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	461a      	mov	r2, r3
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	685b      	ldr	r3, [r3, #4]
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	d02a      	beq.n	8010022 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	b2db      	uxtb	r3, r3
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f7ff f973 	bl	800f2c0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ffda:	4b1d      	ldr	r3, [pc, #116]	@ (8010050 <USBD_SetConfig+0x148>)
 800ffdc:	781b      	ldrb	r3, [r3, #0]
 800ffde:	461a      	mov	r2, r3
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ffe4:	4b1a      	ldr	r3, [pc, #104]	@ (8010050 <USBD_SetConfig+0x148>)
 800ffe6:	781b      	ldrb	r3, [r3, #0]
 800ffe8:	4619      	mov	r1, r3
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f7ff f94c 	bl	800f288 <USBD_SetClassConfig>
 800fff0:	4603      	mov	r3, r0
 800fff2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fff4:	7bfb      	ldrb	r3, [r7, #15]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d00f      	beq.n	801001a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800fffa:	6839      	ldr	r1, [r7, #0]
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f000 f903 	bl	8010208 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	685b      	ldr	r3, [r3, #4]
 8010006:	b2db      	uxtb	r3, r3
 8010008:	4619      	mov	r1, r3
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f7ff f958 	bl	800f2c0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2202      	movs	r2, #2
 8010014:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010018:	e014      	b.n	8010044 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f000 f9bf 	bl	801039e <USBD_CtlSendStatus>
      break;
 8010020:	e010      	b.n	8010044 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f000 f9bb 	bl	801039e <USBD_CtlSendStatus>
      break;
 8010028:	e00c      	b.n	8010044 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801002a:	6839      	ldr	r1, [r7, #0]
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f000 f8eb 	bl	8010208 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010032:	4b07      	ldr	r3, [pc, #28]	@ (8010050 <USBD_SetConfig+0x148>)
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	4619      	mov	r1, r3
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f7ff f941 	bl	800f2c0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801003e:	2303      	movs	r3, #3
 8010040:	73fb      	strb	r3, [r7, #15]
      break;
 8010042:	bf00      	nop
  }

  return ret;
 8010044:	7bfb      	ldrb	r3, [r7, #15]
}
 8010046:	4618      	mov	r0, r3
 8010048:	3710      	adds	r7, #16
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}
 801004e:	bf00      	nop
 8010050:	20000bc0 	.word	0x20000bc0

08010054 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b082      	sub	sp, #8
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	88db      	ldrh	r3, [r3, #6]
 8010062:	2b01      	cmp	r3, #1
 8010064:	d004      	beq.n	8010070 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010066:	6839      	ldr	r1, [r7, #0]
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f000 f8cd 	bl	8010208 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801006e:	e023      	b.n	80100b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010076:	b2db      	uxtb	r3, r3
 8010078:	2b02      	cmp	r3, #2
 801007a:	dc02      	bgt.n	8010082 <USBD_GetConfig+0x2e>
 801007c:	2b00      	cmp	r3, #0
 801007e:	dc03      	bgt.n	8010088 <USBD_GetConfig+0x34>
 8010080:	e015      	b.n	80100ae <USBD_GetConfig+0x5a>
 8010082:	2b03      	cmp	r3, #3
 8010084:	d00b      	beq.n	801009e <USBD_GetConfig+0x4a>
 8010086:	e012      	b.n	80100ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2200      	movs	r2, #0
 801008c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	3308      	adds	r3, #8
 8010092:	2201      	movs	r2, #1
 8010094:	4619      	mov	r1, r3
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f000 f927 	bl	80102ea <USBD_CtlSendData>
        break;
 801009c:	e00c      	b.n	80100b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	3304      	adds	r3, #4
 80100a2:	2201      	movs	r2, #1
 80100a4:	4619      	mov	r1, r3
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f000 f91f 	bl	80102ea <USBD_CtlSendData>
        break;
 80100ac:	e004      	b.n	80100b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80100ae:	6839      	ldr	r1, [r7, #0]
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f000 f8a9 	bl	8010208 <USBD_CtlError>
        break;
 80100b6:	bf00      	nop
}
 80100b8:	bf00      	nop
 80100ba:	3708      	adds	r7, #8
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}

080100c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b082      	sub	sp, #8
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100d0:	b2db      	uxtb	r3, r3
 80100d2:	3b01      	subs	r3, #1
 80100d4:	2b02      	cmp	r3, #2
 80100d6:	d81e      	bhi.n	8010116 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	88db      	ldrh	r3, [r3, #6]
 80100dc:	2b02      	cmp	r3, #2
 80100de:	d004      	beq.n	80100ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80100e0:	6839      	ldr	r1, [r7, #0]
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	f000 f890 	bl	8010208 <USBD_CtlError>
        break;
 80100e8:	e01a      	b.n	8010120 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2201      	movs	r2, #1
 80100ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d005      	beq.n	8010106 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	68db      	ldr	r3, [r3, #12]
 80100fe:	f043 0202 	orr.w	r2, r3, #2
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	330c      	adds	r3, #12
 801010a:	2202      	movs	r2, #2
 801010c:	4619      	mov	r1, r3
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	f000 f8eb 	bl	80102ea <USBD_CtlSendData>
      break;
 8010114:	e004      	b.n	8010120 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010116:	6839      	ldr	r1, [r7, #0]
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f000 f875 	bl	8010208 <USBD_CtlError>
      break;
 801011e:	bf00      	nop
  }
}
 8010120:	bf00      	nop
 8010122:	3708      	adds	r7, #8
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}

08010128 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b082      	sub	sp, #8
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
 8010130:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	885b      	ldrh	r3, [r3, #2]
 8010136:	2b01      	cmp	r3, #1
 8010138:	d106      	bne.n	8010148 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2201      	movs	r2, #1
 801013e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f000 f92b 	bl	801039e <USBD_CtlSendStatus>
  }
}
 8010148:	bf00      	nop
 801014a:	3708      	adds	r7, #8
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}

08010150 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b082      	sub	sp, #8
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
 8010158:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010160:	b2db      	uxtb	r3, r3
 8010162:	3b01      	subs	r3, #1
 8010164:	2b02      	cmp	r3, #2
 8010166:	d80b      	bhi.n	8010180 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	885b      	ldrh	r3, [r3, #2]
 801016c:	2b01      	cmp	r3, #1
 801016e:	d10c      	bne.n	801018a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2200      	movs	r2, #0
 8010174:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f000 f910 	bl	801039e <USBD_CtlSendStatus>
      }
      break;
 801017e:	e004      	b.n	801018a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010180:	6839      	ldr	r1, [r7, #0]
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f000 f840 	bl	8010208 <USBD_CtlError>
      break;
 8010188:	e000      	b.n	801018c <USBD_ClrFeature+0x3c>
      break;
 801018a:	bf00      	nop
  }
}
 801018c:	bf00      	nop
 801018e:	3708      	adds	r7, #8
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b084      	sub	sp, #16
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	781a      	ldrb	r2, [r3, #0]
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	3301      	adds	r3, #1
 80101ae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	781a      	ldrb	r2, [r3, #0]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	3301      	adds	r3, #1
 80101bc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80101be:	68f8      	ldr	r0, [r7, #12]
 80101c0:	f7ff fa92 	bl	800f6e8 <SWAPBYTE>
 80101c4:	4603      	mov	r3, r0
 80101c6:	461a      	mov	r2, r3
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	3301      	adds	r3, #1
 80101d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	3301      	adds	r3, #1
 80101d6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80101d8:	68f8      	ldr	r0, [r7, #12]
 80101da:	f7ff fa85 	bl	800f6e8 <SWAPBYTE>
 80101de:	4603      	mov	r3, r0
 80101e0:	461a      	mov	r2, r3
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	3301      	adds	r3, #1
 80101ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	3301      	adds	r3, #1
 80101f0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80101f2:	68f8      	ldr	r0, [r7, #12]
 80101f4:	f7ff fa78 	bl	800f6e8 <SWAPBYTE>
 80101f8:	4603      	mov	r3, r0
 80101fa:	461a      	mov	r2, r3
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	80da      	strh	r2, [r3, #6]
}
 8010200:	bf00      	nop
 8010202:	3710      	adds	r7, #16
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}

08010208 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010212:	2180      	movs	r1, #128	@ 0x80
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f000 fcab 	bl	8010b70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801021a:	2100      	movs	r1, #0
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f000 fca7 	bl	8010b70 <USBD_LL_StallEP>
}
 8010222:	bf00      	nop
 8010224:	3708      	adds	r7, #8
 8010226:	46bd      	mov	sp, r7
 8010228:	bd80      	pop	{r7, pc}

0801022a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801022a:	b580      	push	{r7, lr}
 801022c:	b086      	sub	sp, #24
 801022e:	af00      	add	r7, sp, #0
 8010230:	60f8      	str	r0, [r7, #12]
 8010232:	60b9      	str	r1, [r7, #8]
 8010234:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010236:	2300      	movs	r3, #0
 8010238:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d036      	beq.n	80102ae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010244:	6938      	ldr	r0, [r7, #16]
 8010246:	f000 f836 	bl	80102b6 <USBD_GetLen>
 801024a:	4603      	mov	r3, r0
 801024c:	3301      	adds	r3, #1
 801024e:	b29b      	uxth	r3, r3
 8010250:	005b      	lsls	r3, r3, #1
 8010252:	b29a      	uxth	r2, r3
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010258:	7dfb      	ldrb	r3, [r7, #23]
 801025a:	68ba      	ldr	r2, [r7, #8]
 801025c:	4413      	add	r3, r2
 801025e:	687a      	ldr	r2, [r7, #4]
 8010260:	7812      	ldrb	r2, [r2, #0]
 8010262:	701a      	strb	r2, [r3, #0]
  idx++;
 8010264:	7dfb      	ldrb	r3, [r7, #23]
 8010266:	3301      	adds	r3, #1
 8010268:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801026a:	7dfb      	ldrb	r3, [r7, #23]
 801026c:	68ba      	ldr	r2, [r7, #8]
 801026e:	4413      	add	r3, r2
 8010270:	2203      	movs	r2, #3
 8010272:	701a      	strb	r2, [r3, #0]
  idx++;
 8010274:	7dfb      	ldrb	r3, [r7, #23]
 8010276:	3301      	adds	r3, #1
 8010278:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801027a:	e013      	b.n	80102a4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801027c:	7dfb      	ldrb	r3, [r7, #23]
 801027e:	68ba      	ldr	r2, [r7, #8]
 8010280:	4413      	add	r3, r2
 8010282:	693a      	ldr	r2, [r7, #16]
 8010284:	7812      	ldrb	r2, [r2, #0]
 8010286:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010288:	693b      	ldr	r3, [r7, #16]
 801028a:	3301      	adds	r3, #1
 801028c:	613b      	str	r3, [r7, #16]
    idx++;
 801028e:	7dfb      	ldrb	r3, [r7, #23]
 8010290:	3301      	adds	r3, #1
 8010292:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010294:	7dfb      	ldrb	r3, [r7, #23]
 8010296:	68ba      	ldr	r2, [r7, #8]
 8010298:	4413      	add	r3, r2
 801029a:	2200      	movs	r2, #0
 801029c:	701a      	strb	r2, [r3, #0]
    idx++;
 801029e:	7dfb      	ldrb	r3, [r7, #23]
 80102a0:	3301      	adds	r3, #1
 80102a2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80102a4:	693b      	ldr	r3, [r7, #16]
 80102a6:	781b      	ldrb	r3, [r3, #0]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d1e7      	bne.n	801027c <USBD_GetString+0x52>
 80102ac:	e000      	b.n	80102b0 <USBD_GetString+0x86>
    return;
 80102ae:	bf00      	nop
  }
}
 80102b0:	3718      	adds	r7, #24
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}

080102b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80102b6:	b480      	push	{r7}
 80102b8:	b085      	sub	sp, #20
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80102be:	2300      	movs	r3, #0
 80102c0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80102c6:	e005      	b.n	80102d4 <USBD_GetLen+0x1e>
  {
    len++;
 80102c8:	7bfb      	ldrb	r3, [r7, #15]
 80102ca:	3301      	adds	r3, #1
 80102cc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	3301      	adds	r3, #1
 80102d2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	781b      	ldrb	r3, [r3, #0]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d1f5      	bne.n	80102c8 <USBD_GetLen+0x12>
  }

  return len;
 80102dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80102de:	4618      	mov	r0, r3
 80102e0:	3714      	adds	r7, #20
 80102e2:	46bd      	mov	sp, r7
 80102e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e8:	4770      	bx	lr

080102ea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80102ea:	b580      	push	{r7, lr}
 80102ec:	b084      	sub	sp, #16
 80102ee:	af00      	add	r7, sp, #0
 80102f0:	60f8      	str	r0, [r7, #12]
 80102f2:	60b9      	str	r1, [r7, #8]
 80102f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	2202      	movs	r2, #2
 80102fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	687a      	ldr	r2, [r7, #4]
 8010302:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	687a      	ldr	r2, [r7, #4]
 8010308:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	68ba      	ldr	r2, [r7, #8]
 801030e:	2100      	movs	r1, #0
 8010310:	68f8      	ldr	r0, [r7, #12]
 8010312:	f000 fcb6 	bl	8010c82 <USBD_LL_Transmit>

  return USBD_OK;
 8010316:	2300      	movs	r3, #0
}
 8010318:	4618      	mov	r0, r3
 801031a:	3710      	adds	r7, #16
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}

08010320 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b084      	sub	sp, #16
 8010324:	af00      	add	r7, sp, #0
 8010326:	60f8      	str	r0, [r7, #12]
 8010328:	60b9      	str	r1, [r7, #8]
 801032a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	68ba      	ldr	r2, [r7, #8]
 8010330:	2100      	movs	r1, #0
 8010332:	68f8      	ldr	r0, [r7, #12]
 8010334:	f000 fca5 	bl	8010c82 <USBD_LL_Transmit>

  return USBD_OK;
 8010338:	2300      	movs	r3, #0
}
 801033a:	4618      	mov	r0, r3
 801033c:	3710      	adds	r7, #16
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}

08010342 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010342:	b580      	push	{r7, lr}
 8010344:	b084      	sub	sp, #16
 8010346:	af00      	add	r7, sp, #0
 8010348:	60f8      	str	r0, [r7, #12]
 801034a:	60b9      	str	r1, [r7, #8]
 801034c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2203      	movs	r2, #3
 8010352:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	687a      	ldr	r2, [r7, #4]
 801035a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	687a      	ldr	r2, [r7, #4]
 8010362:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	68ba      	ldr	r2, [r7, #8]
 801036a:	2100      	movs	r1, #0
 801036c:	68f8      	ldr	r0, [r7, #12]
 801036e:	f000 fca9 	bl	8010cc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010372:	2300      	movs	r3, #0
}
 8010374:	4618      	mov	r0, r3
 8010376:	3710      	adds	r7, #16
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}

0801037c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b084      	sub	sp, #16
 8010380:	af00      	add	r7, sp, #0
 8010382:	60f8      	str	r0, [r7, #12]
 8010384:	60b9      	str	r1, [r7, #8]
 8010386:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	68ba      	ldr	r2, [r7, #8]
 801038c:	2100      	movs	r1, #0
 801038e:	68f8      	ldr	r0, [r7, #12]
 8010390:	f000 fc98 	bl	8010cc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010394:	2300      	movs	r3, #0
}
 8010396:	4618      	mov	r0, r3
 8010398:	3710      	adds	r7, #16
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}

0801039e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801039e:	b580      	push	{r7, lr}
 80103a0:	b082      	sub	sp, #8
 80103a2:	af00      	add	r7, sp, #0
 80103a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2204      	movs	r2, #4
 80103aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80103ae:	2300      	movs	r3, #0
 80103b0:	2200      	movs	r2, #0
 80103b2:	2100      	movs	r1, #0
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f000 fc64 	bl	8010c82 <USBD_LL_Transmit>

  return USBD_OK;
 80103ba:	2300      	movs	r3, #0
}
 80103bc:	4618      	mov	r0, r3
 80103be:	3708      	adds	r7, #8
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}

080103c4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b082      	sub	sp, #8
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2205      	movs	r2, #5
 80103d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80103d4:	2300      	movs	r3, #0
 80103d6:	2200      	movs	r2, #0
 80103d8:	2100      	movs	r1, #0
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f000 fc72 	bl	8010cc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80103e0:	2300      	movs	r3, #0
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	3708      	adds	r7, #8
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}
	...

080103ec <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80103f0:	2200      	movs	r2, #0
 80103f2:	4912      	ldr	r1, [pc, #72]	@ (801043c <MX_USB_Device_Init+0x50>)
 80103f4:	4812      	ldr	r0, [pc, #72]	@ (8010440 <MX_USB_Device_Init+0x54>)
 80103f6:	f7fe fed9 	bl	800f1ac <USBD_Init>
 80103fa:	4603      	mov	r3, r0
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d001      	beq.n	8010404 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8010400:	f7f3 fb6c 	bl	8003adc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8010404:	490f      	ldr	r1, [pc, #60]	@ (8010444 <MX_USB_Device_Init+0x58>)
 8010406:	480e      	ldr	r0, [pc, #56]	@ (8010440 <MX_USB_Device_Init+0x54>)
 8010408:	f7fe ff00 	bl	800f20c <USBD_RegisterClass>
 801040c:	4603      	mov	r3, r0
 801040e:	2b00      	cmp	r3, #0
 8010410:	d001      	beq.n	8010416 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8010412:	f7f3 fb63 	bl	8003adc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8010416:	490c      	ldr	r1, [pc, #48]	@ (8010448 <MX_USB_Device_Init+0x5c>)
 8010418:	4809      	ldr	r0, [pc, #36]	@ (8010440 <MX_USB_Device_Init+0x54>)
 801041a:	f7fe fe21 	bl	800f060 <USBD_CDC_RegisterInterface>
 801041e:	4603      	mov	r3, r0
 8010420:	2b00      	cmp	r3, #0
 8010422:	d001      	beq.n	8010428 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8010424:	f7f3 fb5a 	bl	8003adc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8010428:	4805      	ldr	r0, [pc, #20]	@ (8010440 <MX_USB_Device_Init+0x54>)
 801042a:	f7fe ff16 	bl	800f25a <USBD_Start>
 801042e:	4603      	mov	r3, r0
 8010430:	2b00      	cmp	r3, #0
 8010432:	d001      	beq.n	8010438 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8010434:	f7f3 fb52 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8010438:	bf00      	nop
 801043a:	bd80      	pop	{r7, pc}
 801043c:	20000188 	.word	0x20000188
 8010440:	20000bc4 	.word	0x20000bc4
 8010444:	20000070 	.word	0x20000070
 8010448:	20000174 	.word	0x20000174

0801044c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010450:	2200      	movs	r2, #0
 8010452:	4905      	ldr	r1, [pc, #20]	@ (8010468 <CDC_Init_FS+0x1c>)
 8010454:	4805      	ldr	r0, [pc, #20]	@ (801046c <CDC_Init_FS+0x20>)
 8010456:	f7fe fe18 	bl	800f08a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801045a:	4905      	ldr	r1, [pc, #20]	@ (8010470 <CDC_Init_FS+0x24>)
 801045c:	4803      	ldr	r0, [pc, #12]	@ (801046c <CDC_Init_FS+0x20>)
 801045e:	f7fe fe32 	bl	800f0c6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010462:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010464:	4618      	mov	r0, r3
 8010466:	bd80      	pop	{r7, pc}
 8010468:	20001694 	.word	0x20001694
 801046c:	20000bc4 	.word	0x20000bc4
 8010470:	20000e94 	.word	0x20000e94

08010474 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010474:	b480      	push	{r7}
 8010476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010478:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801047a:	4618      	mov	r0, r3
 801047c:	46bd      	mov	sp, r7
 801047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010482:	4770      	bx	lr

08010484 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010484:	b480      	push	{r7}
 8010486:	b083      	sub	sp, #12
 8010488:	af00      	add	r7, sp, #0
 801048a:	4603      	mov	r3, r0
 801048c:	6039      	str	r1, [r7, #0]
 801048e:	71fb      	strb	r3, [r7, #7]
 8010490:	4613      	mov	r3, r2
 8010492:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010494:	79fb      	ldrb	r3, [r7, #7]
 8010496:	2b23      	cmp	r3, #35	@ 0x23
 8010498:	d84a      	bhi.n	8010530 <CDC_Control_FS+0xac>
 801049a:	a201      	add	r2, pc, #4	@ (adr r2, 80104a0 <CDC_Control_FS+0x1c>)
 801049c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104a0:	08010531 	.word	0x08010531
 80104a4:	08010531 	.word	0x08010531
 80104a8:	08010531 	.word	0x08010531
 80104ac:	08010531 	.word	0x08010531
 80104b0:	08010531 	.word	0x08010531
 80104b4:	08010531 	.word	0x08010531
 80104b8:	08010531 	.word	0x08010531
 80104bc:	08010531 	.word	0x08010531
 80104c0:	08010531 	.word	0x08010531
 80104c4:	08010531 	.word	0x08010531
 80104c8:	08010531 	.word	0x08010531
 80104cc:	08010531 	.word	0x08010531
 80104d0:	08010531 	.word	0x08010531
 80104d4:	08010531 	.word	0x08010531
 80104d8:	08010531 	.word	0x08010531
 80104dc:	08010531 	.word	0x08010531
 80104e0:	08010531 	.word	0x08010531
 80104e4:	08010531 	.word	0x08010531
 80104e8:	08010531 	.word	0x08010531
 80104ec:	08010531 	.word	0x08010531
 80104f0:	08010531 	.word	0x08010531
 80104f4:	08010531 	.word	0x08010531
 80104f8:	08010531 	.word	0x08010531
 80104fc:	08010531 	.word	0x08010531
 8010500:	08010531 	.word	0x08010531
 8010504:	08010531 	.word	0x08010531
 8010508:	08010531 	.word	0x08010531
 801050c:	08010531 	.word	0x08010531
 8010510:	08010531 	.word	0x08010531
 8010514:	08010531 	.word	0x08010531
 8010518:	08010531 	.word	0x08010531
 801051c:	08010531 	.word	0x08010531
 8010520:	08010531 	.word	0x08010531
 8010524:	08010531 	.word	0x08010531
 8010528:	08010531 	.word	0x08010531
 801052c:	08010531 	.word	0x08010531
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010530:	bf00      	nop
  }

  return (USBD_OK);
 8010532:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010534:	4618      	mov	r0, r3
 8010536:	370c      	adds	r7, #12
 8010538:	46bd      	mov	sp, r7
 801053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053e:	4770      	bx	lr

08010540 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b082      	sub	sp, #8
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
 8010548:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len > sizeof(USB_RX_Buffer)) {
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010552:	d903      	bls.n	801055c <CDC_Receive_FS+0x1c>
	          *Len = sizeof(USB_RX_Buffer);  // Prevent buffer overflow
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801055a:	601a      	str	r2, [r3, #0]
	      }
	      memcpy(USB_RX_Buffer, Buf, *Len);
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	461a      	mov	r2, r3
 8010562:	6879      	ldr	r1, [r7, #4]
 8010564:	4808      	ldr	r0, [pc, #32]	@ (8010588 <CDC_Receive_FS+0x48>)
 8010566:	f001 fcb0 	bl	8011eca <memcpy>

	      dataReceivedFlag = 1;
 801056a:	4b08      	ldr	r3, [pc, #32]	@ (801058c <CDC_Receive_FS+0x4c>)
 801056c:	2201      	movs	r2, #1
 801056e:	601a      	str	r2, [r3, #0]

	      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010570:	6879      	ldr	r1, [r7, #4]
 8010572:	4807      	ldr	r0, [pc, #28]	@ (8010590 <CDC_Receive_FS+0x50>)
 8010574:	f7fe fda7 	bl	800f0c6 <USBD_CDC_SetRxBuffer>
	      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010578:	4805      	ldr	r0, [pc, #20]	@ (8010590 <CDC_Receive_FS+0x50>)
 801057a:	f7fe fded 	bl	800f158 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801057e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010580:	4618      	mov	r0, r3
 8010582:	3708      	adds	r7, #8
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	20000ab0 	.word	0x20000ab0
 801058c:	20000b70 	.word	0x20000b70
 8010590:	20000bc4 	.word	0x20000bc4

08010594 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b084      	sub	sp, #16
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	460b      	mov	r3, r1
 801059e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80105a0:	2300      	movs	r3, #0
 80105a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80105a4:	4b0d      	ldr	r3, [pc, #52]	@ (80105dc <CDC_Transmit_FS+0x48>)
 80105a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80105aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d001      	beq.n	80105ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80105b6:	2301      	movs	r3, #1
 80105b8:	e00b      	b.n	80105d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80105ba:	887b      	ldrh	r3, [r7, #2]
 80105bc:	461a      	mov	r2, r3
 80105be:	6879      	ldr	r1, [r7, #4]
 80105c0:	4806      	ldr	r0, [pc, #24]	@ (80105dc <CDC_Transmit_FS+0x48>)
 80105c2:	f7fe fd62 	bl	800f08a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80105c6:	4805      	ldr	r0, [pc, #20]	@ (80105dc <CDC_Transmit_FS+0x48>)
 80105c8:	f7fe fd96 	bl	800f0f8 <USBD_CDC_TransmitPacket>
 80105cc:	4603      	mov	r3, r0
 80105ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80105d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3710      	adds	r7, #16
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}
 80105da:	bf00      	nop
 80105dc:	20000bc4 	.word	0x20000bc4

080105e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80105e0:	b480      	push	{r7}
 80105e2:	b087      	sub	sp, #28
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	60f8      	str	r0, [r7, #12]
 80105e8:	60b9      	str	r1, [r7, #8]
 80105ea:	4613      	mov	r3, r2
 80105ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80105ee:	2300      	movs	r3, #0
 80105f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80105f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	371c      	adds	r7, #28
 80105fa:	46bd      	mov	sp, r7
 80105fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010600:	4770      	bx	lr
	...

08010604 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010604:	b480      	push	{r7}
 8010606:	b083      	sub	sp, #12
 8010608:	af00      	add	r7, sp, #0
 801060a:	4603      	mov	r3, r0
 801060c:	6039      	str	r1, [r7, #0]
 801060e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	2212      	movs	r2, #18
 8010614:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8010616:	4b03      	ldr	r3, [pc, #12]	@ (8010624 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8010618:	4618      	mov	r0, r3
 801061a:	370c      	adds	r7, #12
 801061c:	46bd      	mov	sp, r7
 801061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010622:	4770      	bx	lr
 8010624:	200001a8 	.word	0x200001a8

08010628 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010628:	b480      	push	{r7}
 801062a:	b083      	sub	sp, #12
 801062c:	af00      	add	r7, sp, #0
 801062e:	4603      	mov	r3, r0
 8010630:	6039      	str	r1, [r7, #0]
 8010632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	2204      	movs	r2, #4
 8010638:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801063a:	4b03      	ldr	r3, [pc, #12]	@ (8010648 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801063c:	4618      	mov	r0, r3
 801063e:	370c      	adds	r7, #12
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr
 8010648:	200001bc 	.word	0x200001bc

0801064c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
 8010652:	4603      	mov	r3, r0
 8010654:	6039      	str	r1, [r7, #0]
 8010656:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010658:	79fb      	ldrb	r3, [r7, #7]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d105      	bne.n	801066a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801065e:	683a      	ldr	r2, [r7, #0]
 8010660:	4907      	ldr	r1, [pc, #28]	@ (8010680 <USBD_CDC_ProductStrDescriptor+0x34>)
 8010662:	4808      	ldr	r0, [pc, #32]	@ (8010684 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010664:	f7ff fde1 	bl	801022a <USBD_GetString>
 8010668:	e004      	b.n	8010674 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801066a:	683a      	ldr	r2, [r7, #0]
 801066c:	4904      	ldr	r1, [pc, #16]	@ (8010680 <USBD_CDC_ProductStrDescriptor+0x34>)
 801066e:	4805      	ldr	r0, [pc, #20]	@ (8010684 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010670:	f7ff fddb 	bl	801022a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010674:	4b02      	ldr	r3, [pc, #8]	@ (8010680 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8010676:	4618      	mov	r0, r3
 8010678:	3708      	adds	r7, #8
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}
 801067e:	bf00      	nop
 8010680:	20001e94 	.word	0x20001e94
 8010684:	08016f8c 	.word	0x08016f8c

08010688 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b082      	sub	sp, #8
 801068c:	af00      	add	r7, sp, #0
 801068e:	4603      	mov	r3, r0
 8010690:	6039      	str	r1, [r7, #0]
 8010692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010694:	683a      	ldr	r2, [r7, #0]
 8010696:	4904      	ldr	r1, [pc, #16]	@ (80106a8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8010698:	4804      	ldr	r0, [pc, #16]	@ (80106ac <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801069a:	f7ff fdc6 	bl	801022a <USBD_GetString>
  return USBD_StrDesc;
 801069e:	4b02      	ldr	r3, [pc, #8]	@ (80106a8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80106a0:	4618      	mov	r0, r3
 80106a2:	3708      	adds	r7, #8
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}
 80106a8:	20001e94 	.word	0x20001e94
 80106ac:	08016fa4 	.word	0x08016fa4

080106b0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b082      	sub	sp, #8
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	4603      	mov	r3, r0
 80106b8:	6039      	str	r1, [r7, #0]
 80106ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	221a      	movs	r2, #26
 80106c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80106c2:	f000 f843 	bl	801074c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80106c6:	4b02      	ldr	r3, [pc, #8]	@ (80106d0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	3708      	adds	r7, #8
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd80      	pop	{r7, pc}
 80106d0:	200001c0 	.word	0x200001c0

080106d4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
 80106da:	4603      	mov	r3, r0
 80106dc:	6039      	str	r1, [r7, #0]
 80106de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80106e0:	79fb      	ldrb	r3, [r7, #7]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d105      	bne.n	80106f2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80106e6:	683a      	ldr	r2, [r7, #0]
 80106e8:	4907      	ldr	r1, [pc, #28]	@ (8010708 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80106ea:	4808      	ldr	r0, [pc, #32]	@ (801070c <USBD_CDC_ConfigStrDescriptor+0x38>)
 80106ec:	f7ff fd9d 	bl	801022a <USBD_GetString>
 80106f0:	e004      	b.n	80106fc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80106f2:	683a      	ldr	r2, [r7, #0]
 80106f4:	4904      	ldr	r1, [pc, #16]	@ (8010708 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80106f6:	4805      	ldr	r0, [pc, #20]	@ (801070c <USBD_CDC_ConfigStrDescriptor+0x38>)
 80106f8:	f7ff fd97 	bl	801022a <USBD_GetString>
  }
  return USBD_StrDesc;
 80106fc:	4b02      	ldr	r3, [pc, #8]	@ (8010708 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80106fe:	4618      	mov	r0, r3
 8010700:	3708      	adds	r7, #8
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}
 8010706:	bf00      	nop
 8010708:	20001e94 	.word	0x20001e94
 801070c:	08016fb8 	.word	0x08016fb8

08010710 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b082      	sub	sp, #8
 8010714:	af00      	add	r7, sp, #0
 8010716:	4603      	mov	r3, r0
 8010718:	6039      	str	r1, [r7, #0]
 801071a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801071c:	79fb      	ldrb	r3, [r7, #7]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d105      	bne.n	801072e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010722:	683a      	ldr	r2, [r7, #0]
 8010724:	4907      	ldr	r1, [pc, #28]	@ (8010744 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010726:	4808      	ldr	r0, [pc, #32]	@ (8010748 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010728:	f7ff fd7f 	bl	801022a <USBD_GetString>
 801072c:	e004      	b.n	8010738 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801072e:	683a      	ldr	r2, [r7, #0]
 8010730:	4904      	ldr	r1, [pc, #16]	@ (8010744 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010732:	4805      	ldr	r0, [pc, #20]	@ (8010748 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010734:	f7ff fd79 	bl	801022a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010738:	4b02      	ldr	r3, [pc, #8]	@ (8010744 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801073a:	4618      	mov	r0, r3
 801073c:	3708      	adds	r7, #8
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}
 8010742:	bf00      	nop
 8010744:	20001e94 	.word	0x20001e94
 8010748:	08016fc4 	.word	0x08016fc4

0801074c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b084      	sub	sp, #16
 8010750:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010752:	4b0f      	ldr	r3, [pc, #60]	@ (8010790 <Get_SerialNum+0x44>)
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010758:	4b0e      	ldr	r3, [pc, #56]	@ (8010794 <Get_SerialNum+0x48>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801075e:	4b0e      	ldr	r3, [pc, #56]	@ (8010798 <Get_SerialNum+0x4c>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010764:	68fa      	ldr	r2, [r7, #12]
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	4413      	add	r3, r2
 801076a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d009      	beq.n	8010786 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010772:	2208      	movs	r2, #8
 8010774:	4909      	ldr	r1, [pc, #36]	@ (801079c <Get_SerialNum+0x50>)
 8010776:	68f8      	ldr	r0, [r7, #12]
 8010778:	f000 f814 	bl	80107a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801077c:	2204      	movs	r2, #4
 801077e:	4908      	ldr	r1, [pc, #32]	@ (80107a0 <Get_SerialNum+0x54>)
 8010780:	68b8      	ldr	r0, [r7, #8]
 8010782:	f000 f80f 	bl	80107a4 <IntToUnicode>
  }
}
 8010786:	bf00      	nop
 8010788:	3710      	adds	r7, #16
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
 801078e:	bf00      	nop
 8010790:	1fff7590 	.word	0x1fff7590
 8010794:	1fff7594 	.word	0x1fff7594
 8010798:	1fff7598 	.word	0x1fff7598
 801079c:	200001c2 	.word	0x200001c2
 80107a0:	200001d2 	.word	0x200001d2

080107a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80107a4:	b480      	push	{r7}
 80107a6:	b087      	sub	sp, #28
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	60f8      	str	r0, [r7, #12]
 80107ac:	60b9      	str	r1, [r7, #8]
 80107ae:	4613      	mov	r3, r2
 80107b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80107b2:	2300      	movs	r3, #0
 80107b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80107b6:	2300      	movs	r3, #0
 80107b8:	75fb      	strb	r3, [r7, #23]
 80107ba:	e027      	b.n	801080c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	0f1b      	lsrs	r3, r3, #28
 80107c0:	2b09      	cmp	r3, #9
 80107c2:	d80b      	bhi.n	80107dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	0f1b      	lsrs	r3, r3, #28
 80107c8:	b2da      	uxtb	r2, r3
 80107ca:	7dfb      	ldrb	r3, [r7, #23]
 80107cc:	005b      	lsls	r3, r3, #1
 80107ce:	4619      	mov	r1, r3
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	440b      	add	r3, r1
 80107d4:	3230      	adds	r2, #48	@ 0x30
 80107d6:	b2d2      	uxtb	r2, r2
 80107d8:	701a      	strb	r2, [r3, #0]
 80107da:	e00a      	b.n	80107f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	0f1b      	lsrs	r3, r3, #28
 80107e0:	b2da      	uxtb	r2, r3
 80107e2:	7dfb      	ldrb	r3, [r7, #23]
 80107e4:	005b      	lsls	r3, r3, #1
 80107e6:	4619      	mov	r1, r3
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	440b      	add	r3, r1
 80107ec:	3237      	adds	r2, #55	@ 0x37
 80107ee:	b2d2      	uxtb	r2, r2
 80107f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	011b      	lsls	r3, r3, #4
 80107f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80107f8:	7dfb      	ldrb	r3, [r7, #23]
 80107fa:	005b      	lsls	r3, r3, #1
 80107fc:	3301      	adds	r3, #1
 80107fe:	68ba      	ldr	r2, [r7, #8]
 8010800:	4413      	add	r3, r2
 8010802:	2200      	movs	r2, #0
 8010804:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010806:	7dfb      	ldrb	r3, [r7, #23]
 8010808:	3301      	adds	r3, #1
 801080a:	75fb      	strb	r3, [r7, #23]
 801080c:	7dfa      	ldrb	r2, [r7, #23]
 801080e:	79fb      	ldrb	r3, [r7, #7]
 8010810:	429a      	cmp	r2, r3
 8010812:	d3d3      	bcc.n	80107bc <IntToUnicode+0x18>
  }
}
 8010814:	bf00      	nop
 8010816:	bf00      	nop
 8010818:	371c      	adds	r7, #28
 801081a:	46bd      	mov	sp, r7
 801081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010820:	4770      	bx	lr
	...

08010824 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b098      	sub	sp, #96	@ 0x60
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801082c:	f107 030c 	add.w	r3, r7, #12
 8010830:	2254      	movs	r2, #84	@ 0x54
 8010832:	2100      	movs	r1, #0
 8010834:	4618      	mov	r0, r3
 8010836:	f001 fab6 	bl	8011da6 <memset>
  if(pcdHandle->Instance==USB)
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	4a15      	ldr	r2, [pc, #84]	@ (8010894 <HAL_PCD_MspInit+0x70>)
 8010840:	4293      	cmp	r3, r2
 8010842:	d122      	bne.n	801088a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010844:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010848:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801084a:	2300      	movs	r3, #0
 801084c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801084e:	f107 030c 	add.w	r3, r7, #12
 8010852:	4618      	mov	r0, r3
 8010854:	f7f9 f8c6 	bl	80099e4 <HAL_RCCEx_PeriphCLKConfig>
 8010858:	4603      	mov	r3, r0
 801085a:	2b00      	cmp	r3, #0
 801085c:	d001      	beq.n	8010862 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 801085e:	f7f3 f93d 	bl	8003adc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010862:	4b0d      	ldr	r3, [pc, #52]	@ (8010898 <HAL_PCD_MspInit+0x74>)
 8010864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010866:	4a0c      	ldr	r2, [pc, #48]	@ (8010898 <HAL_PCD_MspInit+0x74>)
 8010868:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801086c:	6593      	str	r3, [r2, #88]	@ 0x58
 801086e:	4b0a      	ldr	r3, [pc, #40]	@ (8010898 <HAL_PCD_MspInit+0x74>)
 8010870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010872:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010876:	60bb      	str	r3, [r7, #8]
 8010878:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801087a:	2200      	movs	r2, #0
 801087c:	2100      	movs	r1, #0
 801087e:	2014      	movs	r0, #20
 8010880:	f7f5 fe47 	bl	8006512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8010884:	2014      	movs	r0, #20
 8010886:	f7f5 fe5e 	bl	8006546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801088a:	bf00      	nop
 801088c:	3760      	adds	r7, #96	@ 0x60
 801088e:	46bd      	mov	sp, r7
 8010890:	bd80      	pop	{r7, pc}
 8010892:	bf00      	nop
 8010894:	40005c00 	.word	0x40005c00
 8010898:	40021000 	.word	0x40021000

0801089c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b082      	sub	sp, #8
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80108b0:	4619      	mov	r1, r3
 80108b2:	4610      	mov	r0, r2
 80108b4:	f7fe fd1c 	bl	800f2f0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80108b8:	bf00      	nop
 80108ba:	3708      	adds	r7, #8
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}

080108c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b082      	sub	sp, #8
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	460b      	mov	r3, r1
 80108ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80108d2:	78fa      	ldrb	r2, [r7, #3]
 80108d4:	6879      	ldr	r1, [r7, #4]
 80108d6:	4613      	mov	r3, r2
 80108d8:	009b      	lsls	r3, r3, #2
 80108da:	4413      	add	r3, r2
 80108dc:	00db      	lsls	r3, r3, #3
 80108de:	440b      	add	r3, r1
 80108e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80108e4:	681a      	ldr	r2, [r3, #0]
 80108e6:	78fb      	ldrb	r3, [r7, #3]
 80108e8:	4619      	mov	r1, r3
 80108ea:	f7fe fd56 	bl	800f39a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80108ee:	bf00      	nop
 80108f0:	3708      	adds	r7, #8
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}

080108f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108f6:	b580      	push	{r7, lr}
 80108f8:	b082      	sub	sp, #8
 80108fa:	af00      	add	r7, sp, #0
 80108fc:	6078      	str	r0, [r7, #4]
 80108fe:	460b      	mov	r3, r1
 8010900:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010908:	78fa      	ldrb	r2, [r7, #3]
 801090a:	6879      	ldr	r1, [r7, #4]
 801090c:	4613      	mov	r3, r2
 801090e:	009b      	lsls	r3, r3, #2
 8010910:	4413      	add	r3, r2
 8010912:	00db      	lsls	r3, r3, #3
 8010914:	440b      	add	r3, r1
 8010916:	3324      	adds	r3, #36	@ 0x24
 8010918:	681a      	ldr	r2, [r3, #0]
 801091a:	78fb      	ldrb	r3, [r7, #3]
 801091c:	4619      	mov	r1, r3
 801091e:	f7fe fd9f 	bl	800f460 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8010922:	bf00      	nop
 8010924:	3708      	adds	r7, #8
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}

0801092a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801092a:	b580      	push	{r7, lr}
 801092c:	b082      	sub	sp, #8
 801092e:	af00      	add	r7, sp, #0
 8010930:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010938:	4618      	mov	r0, r3
 801093a:	f7fe feb3 	bl	800f6a4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801093e:	bf00      	nop
 8010940:	3708      	adds	r7, #8
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}

08010946 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010946:	b580      	push	{r7, lr}
 8010948:	b084      	sub	sp, #16
 801094a:	af00      	add	r7, sp, #0
 801094c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801094e:	2301      	movs	r3, #1
 8010950:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	795b      	ldrb	r3, [r3, #5]
 8010956:	2b02      	cmp	r3, #2
 8010958:	d001      	beq.n	801095e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801095a:	f7f3 f8bf 	bl	8003adc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010964:	7bfa      	ldrb	r2, [r7, #15]
 8010966:	4611      	mov	r1, r2
 8010968:	4618      	mov	r0, r3
 801096a:	f7fe fe5d 	bl	800f628 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010974:	4618      	mov	r0, r3
 8010976:	f7fe fe09 	bl	800f58c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801097a:	bf00      	nop
 801097c:	3710      	adds	r7, #16
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
	...

08010984 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b082      	sub	sp, #8
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010992:	4618      	mov	r0, r3
 8010994:	f7fe fe58 	bl	800f648 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	7a5b      	ldrb	r3, [r3, #9]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d005      	beq.n	80109ac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80109a0:	4b04      	ldr	r3, [pc, #16]	@ (80109b4 <HAL_PCD_SuspendCallback+0x30>)
 80109a2:	691b      	ldr	r3, [r3, #16]
 80109a4:	4a03      	ldr	r2, [pc, #12]	@ (80109b4 <HAL_PCD_SuspendCallback+0x30>)
 80109a6:	f043 0306 	orr.w	r3, r3, #6
 80109aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80109ac:	bf00      	nop
 80109ae:	3708      	adds	r7, #8
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd80      	pop	{r7, pc}
 80109b4:	e000ed00 	.word	0xe000ed00

080109b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b082      	sub	sp, #8
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	7a5b      	ldrb	r3, [r3, #9]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d007      	beq.n	80109d8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80109c8:	4b08      	ldr	r3, [pc, #32]	@ (80109ec <HAL_PCD_ResumeCallback+0x34>)
 80109ca:	691b      	ldr	r3, [r3, #16]
 80109cc:	4a07      	ldr	r2, [pc, #28]	@ (80109ec <HAL_PCD_ResumeCallback+0x34>)
 80109ce:	f023 0306 	bic.w	r3, r3, #6
 80109d2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80109d4:	f000 f9f8 	bl	8010dc8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80109de:	4618      	mov	r0, r3
 80109e0:	f7fe fe48 	bl	800f674 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80109e4:	bf00      	nop
 80109e6:	3708      	adds	r7, #8
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}
 80109ec:	e000ed00 	.word	0xe000ed00

080109f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b082      	sub	sp, #8
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80109f8:	4a2b      	ldr	r2, [pc, #172]	@ (8010aa8 <USBD_LL_Init+0xb8>)
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	4a29      	ldr	r2, [pc, #164]	@ (8010aa8 <USBD_LL_Init+0xb8>)
 8010a04:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8010a08:	4b27      	ldr	r3, [pc, #156]	@ (8010aa8 <USBD_LL_Init+0xb8>)
 8010a0a:	4a28      	ldr	r2, [pc, #160]	@ (8010aac <USBD_LL_Init+0xbc>)
 8010a0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010a0e:	4b26      	ldr	r3, [pc, #152]	@ (8010aa8 <USBD_LL_Init+0xb8>)
 8010a10:	2208      	movs	r2, #8
 8010a12:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010a14:	4b24      	ldr	r3, [pc, #144]	@ (8010aa8 <USBD_LL_Init+0xb8>)
 8010a16:	2202      	movs	r2, #2
 8010a18:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010a1a:	4b23      	ldr	r3, [pc, #140]	@ (8010aa8 <USBD_LL_Init+0xb8>)
 8010a1c:	2202      	movs	r2, #2
 8010a1e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010a20:	4b21      	ldr	r3, [pc, #132]	@ (8010aa8 <USBD_LL_Init+0xb8>)
 8010a22:	2200      	movs	r2, #0
 8010a24:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010a26:	4b20      	ldr	r3, [pc, #128]	@ (8010aa8 <USBD_LL_Init+0xb8>)
 8010a28:	2200      	movs	r2, #0
 8010a2a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8010aa8 <USBD_LL_Init+0xb8>)
 8010a2e:	2200      	movs	r2, #0
 8010a30:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010a32:	4b1d      	ldr	r3, [pc, #116]	@ (8010aa8 <USBD_LL_Init+0xb8>)
 8010a34:	2200      	movs	r2, #0
 8010a36:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010a38:	481b      	ldr	r0, [pc, #108]	@ (8010aa8 <USBD_LL_Init+0xb8>)
 8010a3a:	f7f6 fcbb 	bl	80073b4 <HAL_PCD_Init>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d001      	beq.n	8010a48 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8010a44:	f7f3 f84a 	bl	8003adc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a4e:	2318      	movs	r3, #24
 8010a50:	2200      	movs	r2, #0
 8010a52:	2100      	movs	r1, #0
 8010a54:	f7f8 f976 	bl	8008d44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a5e:	2358      	movs	r3, #88	@ 0x58
 8010a60:	2200      	movs	r2, #0
 8010a62:	2180      	movs	r1, #128	@ 0x80
 8010a64:	f7f8 f96e 	bl	8008d44 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a6e:	23c0      	movs	r3, #192	@ 0xc0
 8010a70:	2200      	movs	r2, #0
 8010a72:	2181      	movs	r1, #129	@ 0x81
 8010a74:	f7f8 f966 	bl	8008d44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a7e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8010a82:	2200      	movs	r2, #0
 8010a84:	2101      	movs	r1, #1
 8010a86:	f7f8 f95d 	bl	8008d44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010a94:	2200      	movs	r2, #0
 8010a96:	2182      	movs	r1, #130	@ 0x82
 8010a98:	f7f8 f954 	bl	8008d44 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8010a9c:	2300      	movs	r3, #0
}
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	3708      	adds	r7, #8
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
 8010aa6:	bf00      	nop
 8010aa8:	20002094 	.word	0x20002094
 8010aac:	40005c00 	.word	0x40005c00

08010ab0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b084      	sub	sp, #16
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010abc:	2300      	movs	r3, #0
 8010abe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f7f6 fd42 	bl	8007550 <HAL_PCD_Start>
 8010acc:	4603      	mov	r3, r0
 8010ace:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ad0:	7bfb      	ldrb	r3, [r7, #15]
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f000 f97e 	bl	8010dd4 <USBD_Get_USB_Status>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010adc:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	3710      	adds	r7, #16
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}

08010ae6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010ae6:	b580      	push	{r7, lr}
 8010ae8:	b084      	sub	sp, #16
 8010aea:	af00      	add	r7, sp, #0
 8010aec:	6078      	str	r0, [r7, #4]
 8010aee:	4608      	mov	r0, r1
 8010af0:	4611      	mov	r1, r2
 8010af2:	461a      	mov	r2, r3
 8010af4:	4603      	mov	r3, r0
 8010af6:	70fb      	strb	r3, [r7, #3]
 8010af8:	460b      	mov	r3, r1
 8010afa:	70bb      	strb	r3, [r7, #2]
 8010afc:	4613      	mov	r3, r2
 8010afe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b00:	2300      	movs	r3, #0
 8010b02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b04:	2300      	movs	r3, #0
 8010b06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010b0e:	78bb      	ldrb	r3, [r7, #2]
 8010b10:	883a      	ldrh	r2, [r7, #0]
 8010b12:	78f9      	ldrb	r1, [r7, #3]
 8010b14:	f7f6 fe89 	bl	800782a <HAL_PCD_EP_Open>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b1c:	7bfb      	ldrb	r3, [r7, #15]
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f000 f958 	bl	8010dd4 <USBD_Get_USB_Status>
 8010b24:	4603      	mov	r3, r0
 8010b26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b28:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	3710      	adds	r7, #16
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}

08010b32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b32:	b580      	push	{r7, lr}
 8010b34:	b084      	sub	sp, #16
 8010b36:	af00      	add	r7, sp, #0
 8010b38:	6078      	str	r0, [r7, #4]
 8010b3a:	460b      	mov	r3, r1
 8010b3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b42:	2300      	movs	r3, #0
 8010b44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010b4c:	78fa      	ldrb	r2, [r7, #3]
 8010b4e:	4611      	mov	r1, r2
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7f6 fec9 	bl	80078e8 <HAL_PCD_EP_Close>
 8010b56:	4603      	mov	r3, r0
 8010b58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b5a:	7bfb      	ldrb	r3, [r7, #15]
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f000 f939 	bl	8010dd4 <USBD_Get_USB_Status>
 8010b62:	4603      	mov	r3, r0
 8010b64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b66:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3710      	adds	r7, #16
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}

08010b70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b084      	sub	sp, #16
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
 8010b78:	460b      	mov	r3, r1
 8010b7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b80:	2300      	movs	r3, #0
 8010b82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010b8a:	78fa      	ldrb	r2, [r7, #3]
 8010b8c:	4611      	mov	r1, r2
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7f6 ff72 	bl	8007a78 <HAL_PCD_EP_SetStall>
 8010b94:	4603      	mov	r3, r0
 8010b96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b98:	7bfb      	ldrb	r3, [r7, #15]
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f000 f91a 	bl	8010dd4 <USBD_Get_USB_Status>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ba4:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	3710      	adds	r7, #16
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}

08010bae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010bae:	b580      	push	{r7, lr}
 8010bb0:	b084      	sub	sp, #16
 8010bb2:	af00      	add	r7, sp, #0
 8010bb4:	6078      	str	r0, [r7, #4]
 8010bb6:	460b      	mov	r3, r1
 8010bb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bba:	2300      	movs	r3, #0
 8010bbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010bc8:	78fa      	ldrb	r2, [r7, #3]
 8010bca:	4611      	mov	r1, r2
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7f6 ffa5 	bl	8007b1c <HAL_PCD_EP_ClrStall>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bd6:	7bfb      	ldrb	r3, [r7, #15]
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f000 f8fb 	bl	8010dd4 <USBD_Get_USB_Status>
 8010bde:	4603      	mov	r3, r0
 8010be0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010be2:	7bbb      	ldrb	r3, [r7, #14]
}
 8010be4:	4618      	mov	r0, r3
 8010be6:	3710      	adds	r7, #16
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}

08010bec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010bec:	b480      	push	{r7}
 8010bee:	b085      	sub	sp, #20
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
 8010bf4:	460b      	mov	r3, r1
 8010bf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010bfe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010c00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	da0b      	bge.n	8010c20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010c08:	78fb      	ldrb	r3, [r7, #3]
 8010c0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010c0e:	68f9      	ldr	r1, [r7, #12]
 8010c10:	4613      	mov	r3, r2
 8010c12:	009b      	lsls	r3, r3, #2
 8010c14:	4413      	add	r3, r2
 8010c16:	00db      	lsls	r3, r3, #3
 8010c18:	440b      	add	r3, r1
 8010c1a:	3312      	adds	r3, #18
 8010c1c:	781b      	ldrb	r3, [r3, #0]
 8010c1e:	e00b      	b.n	8010c38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010c20:	78fb      	ldrb	r3, [r7, #3]
 8010c22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010c26:	68f9      	ldr	r1, [r7, #12]
 8010c28:	4613      	mov	r3, r2
 8010c2a:	009b      	lsls	r3, r3, #2
 8010c2c:	4413      	add	r3, r2
 8010c2e:	00db      	lsls	r3, r3, #3
 8010c30:	440b      	add	r3, r1
 8010c32:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8010c36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3714      	adds	r7, #20
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c42:	4770      	bx	lr

08010c44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b084      	sub	sp, #16
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	460b      	mov	r3, r1
 8010c4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c50:	2300      	movs	r3, #0
 8010c52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c54:	2300      	movs	r3, #0
 8010c56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010c5e:	78fa      	ldrb	r2, [r7, #3]
 8010c60:	4611      	mov	r1, r2
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7f6 fdbd 	bl	80077e2 <HAL_PCD_SetAddress>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c6c:	7bfb      	ldrb	r3, [r7, #15]
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f000 f8b0 	bl	8010dd4 <USBD_Get_USB_Status>
 8010c74:	4603      	mov	r3, r0
 8010c76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3710      	adds	r7, #16
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}

08010c82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010c82:	b580      	push	{r7, lr}
 8010c84:	b086      	sub	sp, #24
 8010c86:	af00      	add	r7, sp, #0
 8010c88:	60f8      	str	r0, [r7, #12]
 8010c8a:	607a      	str	r2, [r7, #4]
 8010c8c:	603b      	str	r3, [r7, #0]
 8010c8e:	460b      	mov	r3, r1
 8010c90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c92:	2300      	movs	r3, #0
 8010c94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c96:	2300      	movs	r3, #0
 8010c98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010ca0:	7af9      	ldrb	r1, [r7, #11]
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	687a      	ldr	r2, [r7, #4]
 8010ca6:	f7f6 feb0 	bl	8007a0a <HAL_PCD_EP_Transmit>
 8010caa:	4603      	mov	r3, r0
 8010cac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010cae:	7dfb      	ldrb	r3, [r7, #23]
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f000 f88f 	bl	8010dd4 <USBD_Get_USB_Status>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010cba:	7dbb      	ldrb	r3, [r7, #22]
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3718      	adds	r7, #24
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}

08010cc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b086      	sub	sp, #24
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	60f8      	str	r0, [r7, #12]
 8010ccc:	607a      	str	r2, [r7, #4]
 8010cce:	603b      	str	r3, [r7, #0]
 8010cd0:	460b      	mov	r3, r1
 8010cd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010ce2:	7af9      	ldrb	r1, [r7, #11]
 8010ce4:	683b      	ldr	r3, [r7, #0]
 8010ce6:	687a      	ldr	r2, [r7, #4]
 8010ce8:	f7f6 fe46 	bl	8007978 <HAL_PCD_EP_Receive>
 8010cec:	4603      	mov	r3, r0
 8010cee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010cf0:	7dfb      	ldrb	r3, [r7, #23]
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f000 f86e 	bl	8010dd4 <USBD_Get_USB_Status>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010cfc:	7dbb      	ldrb	r3, [r7, #22]
}
 8010cfe:	4618      	mov	r0, r3
 8010d00:	3718      	adds	r7, #24
 8010d02:	46bd      	mov	sp, r7
 8010d04:	bd80      	pop	{r7, pc}

08010d06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010d06:	b580      	push	{r7, lr}
 8010d08:	b082      	sub	sp, #8
 8010d0a:	af00      	add	r7, sp, #0
 8010d0c:	6078      	str	r0, [r7, #4]
 8010d0e:	460b      	mov	r3, r1
 8010d10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010d18:	78fa      	ldrb	r2, [r7, #3]
 8010d1a:	4611      	mov	r1, r2
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f7f6 fe5c 	bl	80079da <HAL_PCD_EP_GetRxCount>
 8010d22:	4603      	mov	r3, r0
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	3708      	adds	r7, #8
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}

08010d2c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b082      	sub	sp, #8
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
 8010d34:	460b      	mov	r3, r1
 8010d36:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010d38:	78fb      	ldrb	r3, [r7, #3]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d002      	beq.n	8010d44 <HAL_PCDEx_LPM_Callback+0x18>
 8010d3e:	2b01      	cmp	r3, #1
 8010d40:	d013      	beq.n	8010d6a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010d42:	e023      	b.n	8010d8c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	7a5b      	ldrb	r3, [r3, #9]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d007      	beq.n	8010d5c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010d4c:	f000 f83c 	bl	8010dc8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010d50:	4b10      	ldr	r3, [pc, #64]	@ (8010d94 <HAL_PCDEx_LPM_Callback+0x68>)
 8010d52:	691b      	ldr	r3, [r3, #16]
 8010d54:	4a0f      	ldr	r2, [pc, #60]	@ (8010d94 <HAL_PCDEx_LPM_Callback+0x68>)
 8010d56:	f023 0306 	bic.w	r3, r3, #6
 8010d5a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7fe fc86 	bl	800f674 <USBD_LL_Resume>
    break;
 8010d68:	e010      	b.n	8010d8c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7fe fc69 	bl	800f648 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	7a5b      	ldrb	r3, [r3, #9]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d005      	beq.n	8010d8a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010d7e:	4b05      	ldr	r3, [pc, #20]	@ (8010d94 <HAL_PCDEx_LPM_Callback+0x68>)
 8010d80:	691b      	ldr	r3, [r3, #16]
 8010d82:	4a04      	ldr	r2, [pc, #16]	@ (8010d94 <HAL_PCDEx_LPM_Callback+0x68>)
 8010d84:	f043 0306 	orr.w	r3, r3, #6
 8010d88:	6113      	str	r3, [r2, #16]
    break;
 8010d8a:	bf00      	nop
}
 8010d8c:	bf00      	nop
 8010d8e:	3708      	adds	r7, #8
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}
 8010d94:	e000ed00 	.word	0xe000ed00

08010d98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010d98:	b480      	push	{r7}
 8010d9a:	b083      	sub	sp, #12
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010da0:	4b03      	ldr	r3, [pc, #12]	@ (8010db0 <USBD_static_malloc+0x18>)
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	370c      	adds	r7, #12
 8010da6:	46bd      	mov	sp, r7
 8010da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dac:	4770      	bx	lr
 8010dae:	bf00      	nop
 8010db0:	20002370 	.word	0x20002370

08010db4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010db4:	b480      	push	{r7}
 8010db6:	b083      	sub	sp, #12
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]

}
 8010dbc:	bf00      	nop
 8010dbe:	370c      	adds	r7, #12
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc6:	4770      	bx	lr

08010dc8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010dcc:	f7f0 fe2c 	bl	8001a28 <SystemClock_Config>
}
 8010dd0:	bf00      	nop
 8010dd2:	bd80      	pop	{r7, pc}

08010dd4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010dd4:	b480      	push	{r7}
 8010dd6:	b085      	sub	sp, #20
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	4603      	mov	r3, r0
 8010ddc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010dde:	2300      	movs	r3, #0
 8010de0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010de2:	79fb      	ldrb	r3, [r7, #7]
 8010de4:	2b03      	cmp	r3, #3
 8010de6:	d817      	bhi.n	8010e18 <USBD_Get_USB_Status+0x44>
 8010de8:	a201      	add	r2, pc, #4	@ (adr r2, 8010df0 <USBD_Get_USB_Status+0x1c>)
 8010dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dee:	bf00      	nop
 8010df0:	08010e01 	.word	0x08010e01
 8010df4:	08010e07 	.word	0x08010e07
 8010df8:	08010e0d 	.word	0x08010e0d
 8010dfc:	08010e13 	.word	0x08010e13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010e00:	2300      	movs	r3, #0
 8010e02:	73fb      	strb	r3, [r7, #15]
    break;
 8010e04:	e00b      	b.n	8010e1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010e06:	2303      	movs	r3, #3
 8010e08:	73fb      	strb	r3, [r7, #15]
    break;
 8010e0a:	e008      	b.n	8010e1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8010e10:	e005      	b.n	8010e1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010e12:	2303      	movs	r3, #3
 8010e14:	73fb      	strb	r3, [r7, #15]
    break;
 8010e16:	e002      	b.n	8010e1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010e18:	2303      	movs	r3, #3
 8010e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8010e1c:	bf00      	nop
  }
  return usb_status;
 8010e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e20:	4618      	mov	r0, r3
 8010e22:	3714      	adds	r7, #20
 8010e24:	46bd      	mov	sp, r7
 8010e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2a:	4770      	bx	lr

08010e2c <__cvt>:
 8010e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010e30:	ec57 6b10 	vmov	r6, r7, d0
 8010e34:	2f00      	cmp	r7, #0
 8010e36:	460c      	mov	r4, r1
 8010e38:	4619      	mov	r1, r3
 8010e3a:	463b      	mov	r3, r7
 8010e3c:	bfbb      	ittet	lt
 8010e3e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010e42:	461f      	movlt	r7, r3
 8010e44:	2300      	movge	r3, #0
 8010e46:	232d      	movlt	r3, #45	@ 0x2d
 8010e48:	700b      	strb	r3, [r1, #0]
 8010e4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010e4c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010e50:	4691      	mov	r9, r2
 8010e52:	f023 0820 	bic.w	r8, r3, #32
 8010e56:	bfbc      	itt	lt
 8010e58:	4632      	movlt	r2, r6
 8010e5a:	4616      	movlt	r6, r2
 8010e5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010e60:	d005      	beq.n	8010e6e <__cvt+0x42>
 8010e62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010e66:	d100      	bne.n	8010e6a <__cvt+0x3e>
 8010e68:	3401      	adds	r4, #1
 8010e6a:	2102      	movs	r1, #2
 8010e6c:	e000      	b.n	8010e70 <__cvt+0x44>
 8010e6e:	2103      	movs	r1, #3
 8010e70:	ab03      	add	r3, sp, #12
 8010e72:	9301      	str	r3, [sp, #4]
 8010e74:	ab02      	add	r3, sp, #8
 8010e76:	9300      	str	r3, [sp, #0]
 8010e78:	ec47 6b10 	vmov	d0, r6, r7
 8010e7c:	4653      	mov	r3, sl
 8010e7e:	4622      	mov	r2, r4
 8010e80:	f001 f8c2 	bl	8012008 <_dtoa_r>
 8010e84:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010e88:	4605      	mov	r5, r0
 8010e8a:	d119      	bne.n	8010ec0 <__cvt+0x94>
 8010e8c:	f019 0f01 	tst.w	r9, #1
 8010e90:	d00e      	beq.n	8010eb0 <__cvt+0x84>
 8010e92:	eb00 0904 	add.w	r9, r0, r4
 8010e96:	2200      	movs	r2, #0
 8010e98:	2300      	movs	r3, #0
 8010e9a:	4630      	mov	r0, r6
 8010e9c:	4639      	mov	r1, r7
 8010e9e:	f7ef fe3b 	bl	8000b18 <__aeabi_dcmpeq>
 8010ea2:	b108      	cbz	r0, 8010ea8 <__cvt+0x7c>
 8010ea4:	f8cd 900c 	str.w	r9, [sp, #12]
 8010ea8:	2230      	movs	r2, #48	@ 0x30
 8010eaa:	9b03      	ldr	r3, [sp, #12]
 8010eac:	454b      	cmp	r3, r9
 8010eae:	d31e      	bcc.n	8010eee <__cvt+0xc2>
 8010eb0:	9b03      	ldr	r3, [sp, #12]
 8010eb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010eb4:	1b5b      	subs	r3, r3, r5
 8010eb6:	4628      	mov	r0, r5
 8010eb8:	6013      	str	r3, [r2, #0]
 8010eba:	b004      	add	sp, #16
 8010ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ec0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010ec4:	eb00 0904 	add.w	r9, r0, r4
 8010ec8:	d1e5      	bne.n	8010e96 <__cvt+0x6a>
 8010eca:	7803      	ldrb	r3, [r0, #0]
 8010ecc:	2b30      	cmp	r3, #48	@ 0x30
 8010ece:	d10a      	bne.n	8010ee6 <__cvt+0xba>
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	4630      	mov	r0, r6
 8010ed6:	4639      	mov	r1, r7
 8010ed8:	f7ef fe1e 	bl	8000b18 <__aeabi_dcmpeq>
 8010edc:	b918      	cbnz	r0, 8010ee6 <__cvt+0xba>
 8010ede:	f1c4 0401 	rsb	r4, r4, #1
 8010ee2:	f8ca 4000 	str.w	r4, [sl]
 8010ee6:	f8da 3000 	ldr.w	r3, [sl]
 8010eea:	4499      	add	r9, r3
 8010eec:	e7d3      	b.n	8010e96 <__cvt+0x6a>
 8010eee:	1c59      	adds	r1, r3, #1
 8010ef0:	9103      	str	r1, [sp, #12]
 8010ef2:	701a      	strb	r2, [r3, #0]
 8010ef4:	e7d9      	b.n	8010eaa <__cvt+0x7e>

08010ef6 <__exponent>:
 8010ef6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ef8:	2900      	cmp	r1, #0
 8010efa:	bfba      	itte	lt
 8010efc:	4249      	neglt	r1, r1
 8010efe:	232d      	movlt	r3, #45	@ 0x2d
 8010f00:	232b      	movge	r3, #43	@ 0x2b
 8010f02:	2909      	cmp	r1, #9
 8010f04:	7002      	strb	r2, [r0, #0]
 8010f06:	7043      	strb	r3, [r0, #1]
 8010f08:	dd29      	ble.n	8010f5e <__exponent+0x68>
 8010f0a:	f10d 0307 	add.w	r3, sp, #7
 8010f0e:	461d      	mov	r5, r3
 8010f10:	270a      	movs	r7, #10
 8010f12:	461a      	mov	r2, r3
 8010f14:	fbb1 f6f7 	udiv	r6, r1, r7
 8010f18:	fb07 1416 	mls	r4, r7, r6, r1
 8010f1c:	3430      	adds	r4, #48	@ 0x30
 8010f1e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010f22:	460c      	mov	r4, r1
 8010f24:	2c63      	cmp	r4, #99	@ 0x63
 8010f26:	f103 33ff 	add.w	r3, r3, #4294967295
 8010f2a:	4631      	mov	r1, r6
 8010f2c:	dcf1      	bgt.n	8010f12 <__exponent+0x1c>
 8010f2e:	3130      	adds	r1, #48	@ 0x30
 8010f30:	1e94      	subs	r4, r2, #2
 8010f32:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010f36:	1c41      	adds	r1, r0, #1
 8010f38:	4623      	mov	r3, r4
 8010f3a:	42ab      	cmp	r3, r5
 8010f3c:	d30a      	bcc.n	8010f54 <__exponent+0x5e>
 8010f3e:	f10d 0309 	add.w	r3, sp, #9
 8010f42:	1a9b      	subs	r3, r3, r2
 8010f44:	42ac      	cmp	r4, r5
 8010f46:	bf88      	it	hi
 8010f48:	2300      	movhi	r3, #0
 8010f4a:	3302      	adds	r3, #2
 8010f4c:	4403      	add	r3, r0
 8010f4e:	1a18      	subs	r0, r3, r0
 8010f50:	b003      	add	sp, #12
 8010f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f54:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010f58:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010f5c:	e7ed      	b.n	8010f3a <__exponent+0x44>
 8010f5e:	2330      	movs	r3, #48	@ 0x30
 8010f60:	3130      	adds	r1, #48	@ 0x30
 8010f62:	7083      	strb	r3, [r0, #2]
 8010f64:	70c1      	strb	r1, [r0, #3]
 8010f66:	1d03      	adds	r3, r0, #4
 8010f68:	e7f1      	b.n	8010f4e <__exponent+0x58>
	...

08010f6c <_printf_float>:
 8010f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f70:	b08d      	sub	sp, #52	@ 0x34
 8010f72:	460c      	mov	r4, r1
 8010f74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010f78:	4616      	mov	r6, r2
 8010f7a:	461f      	mov	r7, r3
 8010f7c:	4605      	mov	r5, r0
 8010f7e:	f000 ff2d 	bl	8011ddc <_localeconv_r>
 8010f82:	6803      	ldr	r3, [r0, #0]
 8010f84:	9304      	str	r3, [sp, #16]
 8010f86:	4618      	mov	r0, r3
 8010f88:	f7ef f99a 	bl	80002c0 <strlen>
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f90:	f8d8 3000 	ldr.w	r3, [r8]
 8010f94:	9005      	str	r0, [sp, #20]
 8010f96:	3307      	adds	r3, #7
 8010f98:	f023 0307 	bic.w	r3, r3, #7
 8010f9c:	f103 0208 	add.w	r2, r3, #8
 8010fa0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010fa4:	f8d4 b000 	ldr.w	fp, [r4]
 8010fa8:	f8c8 2000 	str.w	r2, [r8]
 8010fac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010fb0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010fb4:	9307      	str	r3, [sp, #28]
 8010fb6:	f8cd 8018 	str.w	r8, [sp, #24]
 8010fba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010fbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010fc2:	4b9c      	ldr	r3, [pc, #624]	@ (8011234 <_printf_float+0x2c8>)
 8010fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8010fc8:	f7ef fdd8 	bl	8000b7c <__aeabi_dcmpun>
 8010fcc:	bb70      	cbnz	r0, 801102c <_printf_float+0xc0>
 8010fce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010fd2:	4b98      	ldr	r3, [pc, #608]	@ (8011234 <_printf_float+0x2c8>)
 8010fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8010fd8:	f7ef fdb2 	bl	8000b40 <__aeabi_dcmple>
 8010fdc:	bb30      	cbnz	r0, 801102c <_printf_float+0xc0>
 8010fde:	2200      	movs	r2, #0
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	4640      	mov	r0, r8
 8010fe4:	4649      	mov	r1, r9
 8010fe6:	f7ef fda1 	bl	8000b2c <__aeabi_dcmplt>
 8010fea:	b110      	cbz	r0, 8010ff2 <_printf_float+0x86>
 8010fec:	232d      	movs	r3, #45	@ 0x2d
 8010fee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ff2:	4a91      	ldr	r2, [pc, #580]	@ (8011238 <_printf_float+0x2cc>)
 8010ff4:	4b91      	ldr	r3, [pc, #580]	@ (801123c <_printf_float+0x2d0>)
 8010ff6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010ffa:	bf94      	ite	ls
 8010ffc:	4690      	movls	r8, r2
 8010ffe:	4698      	movhi	r8, r3
 8011000:	2303      	movs	r3, #3
 8011002:	6123      	str	r3, [r4, #16]
 8011004:	f02b 0304 	bic.w	r3, fp, #4
 8011008:	6023      	str	r3, [r4, #0]
 801100a:	f04f 0900 	mov.w	r9, #0
 801100e:	9700      	str	r7, [sp, #0]
 8011010:	4633      	mov	r3, r6
 8011012:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011014:	4621      	mov	r1, r4
 8011016:	4628      	mov	r0, r5
 8011018:	f000 f9d2 	bl	80113c0 <_printf_common>
 801101c:	3001      	adds	r0, #1
 801101e:	f040 808d 	bne.w	801113c <_printf_float+0x1d0>
 8011022:	f04f 30ff 	mov.w	r0, #4294967295
 8011026:	b00d      	add	sp, #52	@ 0x34
 8011028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801102c:	4642      	mov	r2, r8
 801102e:	464b      	mov	r3, r9
 8011030:	4640      	mov	r0, r8
 8011032:	4649      	mov	r1, r9
 8011034:	f7ef fda2 	bl	8000b7c <__aeabi_dcmpun>
 8011038:	b140      	cbz	r0, 801104c <_printf_float+0xe0>
 801103a:	464b      	mov	r3, r9
 801103c:	2b00      	cmp	r3, #0
 801103e:	bfbc      	itt	lt
 8011040:	232d      	movlt	r3, #45	@ 0x2d
 8011042:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011046:	4a7e      	ldr	r2, [pc, #504]	@ (8011240 <_printf_float+0x2d4>)
 8011048:	4b7e      	ldr	r3, [pc, #504]	@ (8011244 <_printf_float+0x2d8>)
 801104a:	e7d4      	b.n	8010ff6 <_printf_float+0x8a>
 801104c:	6863      	ldr	r3, [r4, #4]
 801104e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011052:	9206      	str	r2, [sp, #24]
 8011054:	1c5a      	adds	r2, r3, #1
 8011056:	d13b      	bne.n	80110d0 <_printf_float+0x164>
 8011058:	2306      	movs	r3, #6
 801105a:	6063      	str	r3, [r4, #4]
 801105c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011060:	2300      	movs	r3, #0
 8011062:	6022      	str	r2, [r4, #0]
 8011064:	9303      	str	r3, [sp, #12]
 8011066:	ab0a      	add	r3, sp, #40	@ 0x28
 8011068:	e9cd a301 	strd	sl, r3, [sp, #4]
 801106c:	ab09      	add	r3, sp, #36	@ 0x24
 801106e:	9300      	str	r3, [sp, #0]
 8011070:	6861      	ldr	r1, [r4, #4]
 8011072:	ec49 8b10 	vmov	d0, r8, r9
 8011076:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801107a:	4628      	mov	r0, r5
 801107c:	f7ff fed6 	bl	8010e2c <__cvt>
 8011080:	9b06      	ldr	r3, [sp, #24]
 8011082:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011084:	2b47      	cmp	r3, #71	@ 0x47
 8011086:	4680      	mov	r8, r0
 8011088:	d129      	bne.n	80110de <_printf_float+0x172>
 801108a:	1cc8      	adds	r0, r1, #3
 801108c:	db02      	blt.n	8011094 <_printf_float+0x128>
 801108e:	6863      	ldr	r3, [r4, #4]
 8011090:	4299      	cmp	r1, r3
 8011092:	dd41      	ble.n	8011118 <_printf_float+0x1ac>
 8011094:	f1aa 0a02 	sub.w	sl, sl, #2
 8011098:	fa5f fa8a 	uxtb.w	sl, sl
 801109c:	3901      	subs	r1, #1
 801109e:	4652      	mov	r2, sl
 80110a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80110a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80110a6:	f7ff ff26 	bl	8010ef6 <__exponent>
 80110aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80110ac:	1813      	adds	r3, r2, r0
 80110ae:	2a01      	cmp	r2, #1
 80110b0:	4681      	mov	r9, r0
 80110b2:	6123      	str	r3, [r4, #16]
 80110b4:	dc02      	bgt.n	80110bc <_printf_float+0x150>
 80110b6:	6822      	ldr	r2, [r4, #0]
 80110b8:	07d2      	lsls	r2, r2, #31
 80110ba:	d501      	bpl.n	80110c0 <_printf_float+0x154>
 80110bc:	3301      	adds	r3, #1
 80110be:	6123      	str	r3, [r4, #16]
 80110c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d0a2      	beq.n	801100e <_printf_float+0xa2>
 80110c8:	232d      	movs	r3, #45	@ 0x2d
 80110ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80110ce:	e79e      	b.n	801100e <_printf_float+0xa2>
 80110d0:	9a06      	ldr	r2, [sp, #24]
 80110d2:	2a47      	cmp	r2, #71	@ 0x47
 80110d4:	d1c2      	bne.n	801105c <_printf_float+0xf0>
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d1c0      	bne.n	801105c <_printf_float+0xf0>
 80110da:	2301      	movs	r3, #1
 80110dc:	e7bd      	b.n	801105a <_printf_float+0xee>
 80110de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80110e2:	d9db      	bls.n	801109c <_printf_float+0x130>
 80110e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80110e8:	d118      	bne.n	801111c <_printf_float+0x1b0>
 80110ea:	2900      	cmp	r1, #0
 80110ec:	6863      	ldr	r3, [r4, #4]
 80110ee:	dd0b      	ble.n	8011108 <_printf_float+0x19c>
 80110f0:	6121      	str	r1, [r4, #16]
 80110f2:	b913      	cbnz	r3, 80110fa <_printf_float+0x18e>
 80110f4:	6822      	ldr	r2, [r4, #0]
 80110f6:	07d0      	lsls	r0, r2, #31
 80110f8:	d502      	bpl.n	8011100 <_printf_float+0x194>
 80110fa:	3301      	adds	r3, #1
 80110fc:	440b      	add	r3, r1
 80110fe:	6123      	str	r3, [r4, #16]
 8011100:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011102:	f04f 0900 	mov.w	r9, #0
 8011106:	e7db      	b.n	80110c0 <_printf_float+0x154>
 8011108:	b913      	cbnz	r3, 8011110 <_printf_float+0x1a4>
 801110a:	6822      	ldr	r2, [r4, #0]
 801110c:	07d2      	lsls	r2, r2, #31
 801110e:	d501      	bpl.n	8011114 <_printf_float+0x1a8>
 8011110:	3302      	adds	r3, #2
 8011112:	e7f4      	b.n	80110fe <_printf_float+0x192>
 8011114:	2301      	movs	r3, #1
 8011116:	e7f2      	b.n	80110fe <_printf_float+0x192>
 8011118:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801111c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801111e:	4299      	cmp	r1, r3
 8011120:	db05      	blt.n	801112e <_printf_float+0x1c2>
 8011122:	6823      	ldr	r3, [r4, #0]
 8011124:	6121      	str	r1, [r4, #16]
 8011126:	07d8      	lsls	r0, r3, #31
 8011128:	d5ea      	bpl.n	8011100 <_printf_float+0x194>
 801112a:	1c4b      	adds	r3, r1, #1
 801112c:	e7e7      	b.n	80110fe <_printf_float+0x192>
 801112e:	2900      	cmp	r1, #0
 8011130:	bfd4      	ite	le
 8011132:	f1c1 0202 	rsble	r2, r1, #2
 8011136:	2201      	movgt	r2, #1
 8011138:	4413      	add	r3, r2
 801113a:	e7e0      	b.n	80110fe <_printf_float+0x192>
 801113c:	6823      	ldr	r3, [r4, #0]
 801113e:	055a      	lsls	r2, r3, #21
 8011140:	d407      	bmi.n	8011152 <_printf_float+0x1e6>
 8011142:	6923      	ldr	r3, [r4, #16]
 8011144:	4642      	mov	r2, r8
 8011146:	4631      	mov	r1, r6
 8011148:	4628      	mov	r0, r5
 801114a:	47b8      	blx	r7
 801114c:	3001      	adds	r0, #1
 801114e:	d12b      	bne.n	80111a8 <_printf_float+0x23c>
 8011150:	e767      	b.n	8011022 <_printf_float+0xb6>
 8011152:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011156:	f240 80dd 	bls.w	8011314 <_printf_float+0x3a8>
 801115a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801115e:	2200      	movs	r2, #0
 8011160:	2300      	movs	r3, #0
 8011162:	f7ef fcd9 	bl	8000b18 <__aeabi_dcmpeq>
 8011166:	2800      	cmp	r0, #0
 8011168:	d033      	beq.n	80111d2 <_printf_float+0x266>
 801116a:	4a37      	ldr	r2, [pc, #220]	@ (8011248 <_printf_float+0x2dc>)
 801116c:	2301      	movs	r3, #1
 801116e:	4631      	mov	r1, r6
 8011170:	4628      	mov	r0, r5
 8011172:	47b8      	blx	r7
 8011174:	3001      	adds	r0, #1
 8011176:	f43f af54 	beq.w	8011022 <_printf_float+0xb6>
 801117a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801117e:	4543      	cmp	r3, r8
 8011180:	db02      	blt.n	8011188 <_printf_float+0x21c>
 8011182:	6823      	ldr	r3, [r4, #0]
 8011184:	07d8      	lsls	r0, r3, #31
 8011186:	d50f      	bpl.n	80111a8 <_printf_float+0x23c>
 8011188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801118c:	4631      	mov	r1, r6
 801118e:	4628      	mov	r0, r5
 8011190:	47b8      	blx	r7
 8011192:	3001      	adds	r0, #1
 8011194:	f43f af45 	beq.w	8011022 <_printf_float+0xb6>
 8011198:	f04f 0900 	mov.w	r9, #0
 801119c:	f108 38ff 	add.w	r8, r8, #4294967295
 80111a0:	f104 0a1a 	add.w	sl, r4, #26
 80111a4:	45c8      	cmp	r8, r9
 80111a6:	dc09      	bgt.n	80111bc <_printf_float+0x250>
 80111a8:	6823      	ldr	r3, [r4, #0]
 80111aa:	079b      	lsls	r3, r3, #30
 80111ac:	f100 8103 	bmi.w	80113b6 <_printf_float+0x44a>
 80111b0:	68e0      	ldr	r0, [r4, #12]
 80111b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80111b4:	4298      	cmp	r0, r3
 80111b6:	bfb8      	it	lt
 80111b8:	4618      	movlt	r0, r3
 80111ba:	e734      	b.n	8011026 <_printf_float+0xba>
 80111bc:	2301      	movs	r3, #1
 80111be:	4652      	mov	r2, sl
 80111c0:	4631      	mov	r1, r6
 80111c2:	4628      	mov	r0, r5
 80111c4:	47b8      	blx	r7
 80111c6:	3001      	adds	r0, #1
 80111c8:	f43f af2b 	beq.w	8011022 <_printf_float+0xb6>
 80111cc:	f109 0901 	add.w	r9, r9, #1
 80111d0:	e7e8      	b.n	80111a4 <_printf_float+0x238>
 80111d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	dc39      	bgt.n	801124c <_printf_float+0x2e0>
 80111d8:	4a1b      	ldr	r2, [pc, #108]	@ (8011248 <_printf_float+0x2dc>)
 80111da:	2301      	movs	r3, #1
 80111dc:	4631      	mov	r1, r6
 80111de:	4628      	mov	r0, r5
 80111e0:	47b8      	blx	r7
 80111e2:	3001      	adds	r0, #1
 80111e4:	f43f af1d 	beq.w	8011022 <_printf_float+0xb6>
 80111e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80111ec:	ea59 0303 	orrs.w	r3, r9, r3
 80111f0:	d102      	bne.n	80111f8 <_printf_float+0x28c>
 80111f2:	6823      	ldr	r3, [r4, #0]
 80111f4:	07d9      	lsls	r1, r3, #31
 80111f6:	d5d7      	bpl.n	80111a8 <_printf_float+0x23c>
 80111f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80111fc:	4631      	mov	r1, r6
 80111fe:	4628      	mov	r0, r5
 8011200:	47b8      	blx	r7
 8011202:	3001      	adds	r0, #1
 8011204:	f43f af0d 	beq.w	8011022 <_printf_float+0xb6>
 8011208:	f04f 0a00 	mov.w	sl, #0
 801120c:	f104 0b1a 	add.w	fp, r4, #26
 8011210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011212:	425b      	negs	r3, r3
 8011214:	4553      	cmp	r3, sl
 8011216:	dc01      	bgt.n	801121c <_printf_float+0x2b0>
 8011218:	464b      	mov	r3, r9
 801121a:	e793      	b.n	8011144 <_printf_float+0x1d8>
 801121c:	2301      	movs	r3, #1
 801121e:	465a      	mov	r2, fp
 8011220:	4631      	mov	r1, r6
 8011222:	4628      	mov	r0, r5
 8011224:	47b8      	blx	r7
 8011226:	3001      	adds	r0, #1
 8011228:	f43f aefb 	beq.w	8011022 <_printf_float+0xb6>
 801122c:	f10a 0a01 	add.w	sl, sl, #1
 8011230:	e7ee      	b.n	8011210 <_printf_float+0x2a4>
 8011232:	bf00      	nop
 8011234:	7fefffff 	.word	0x7fefffff
 8011238:	08017020 	.word	0x08017020
 801123c:	08017024 	.word	0x08017024
 8011240:	08017028 	.word	0x08017028
 8011244:	0801702c 	.word	0x0801702c
 8011248:	080173c0 	.word	0x080173c0
 801124c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801124e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011252:	4553      	cmp	r3, sl
 8011254:	bfa8      	it	ge
 8011256:	4653      	movge	r3, sl
 8011258:	2b00      	cmp	r3, #0
 801125a:	4699      	mov	r9, r3
 801125c:	dc36      	bgt.n	80112cc <_printf_float+0x360>
 801125e:	f04f 0b00 	mov.w	fp, #0
 8011262:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011266:	f104 021a 	add.w	r2, r4, #26
 801126a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801126c:	9306      	str	r3, [sp, #24]
 801126e:	eba3 0309 	sub.w	r3, r3, r9
 8011272:	455b      	cmp	r3, fp
 8011274:	dc31      	bgt.n	80112da <_printf_float+0x36e>
 8011276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011278:	459a      	cmp	sl, r3
 801127a:	dc3a      	bgt.n	80112f2 <_printf_float+0x386>
 801127c:	6823      	ldr	r3, [r4, #0]
 801127e:	07da      	lsls	r2, r3, #31
 8011280:	d437      	bmi.n	80112f2 <_printf_float+0x386>
 8011282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011284:	ebaa 0903 	sub.w	r9, sl, r3
 8011288:	9b06      	ldr	r3, [sp, #24]
 801128a:	ebaa 0303 	sub.w	r3, sl, r3
 801128e:	4599      	cmp	r9, r3
 8011290:	bfa8      	it	ge
 8011292:	4699      	movge	r9, r3
 8011294:	f1b9 0f00 	cmp.w	r9, #0
 8011298:	dc33      	bgt.n	8011302 <_printf_float+0x396>
 801129a:	f04f 0800 	mov.w	r8, #0
 801129e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80112a2:	f104 0b1a 	add.w	fp, r4, #26
 80112a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112a8:	ebaa 0303 	sub.w	r3, sl, r3
 80112ac:	eba3 0309 	sub.w	r3, r3, r9
 80112b0:	4543      	cmp	r3, r8
 80112b2:	f77f af79 	ble.w	80111a8 <_printf_float+0x23c>
 80112b6:	2301      	movs	r3, #1
 80112b8:	465a      	mov	r2, fp
 80112ba:	4631      	mov	r1, r6
 80112bc:	4628      	mov	r0, r5
 80112be:	47b8      	blx	r7
 80112c0:	3001      	adds	r0, #1
 80112c2:	f43f aeae 	beq.w	8011022 <_printf_float+0xb6>
 80112c6:	f108 0801 	add.w	r8, r8, #1
 80112ca:	e7ec      	b.n	80112a6 <_printf_float+0x33a>
 80112cc:	4642      	mov	r2, r8
 80112ce:	4631      	mov	r1, r6
 80112d0:	4628      	mov	r0, r5
 80112d2:	47b8      	blx	r7
 80112d4:	3001      	adds	r0, #1
 80112d6:	d1c2      	bne.n	801125e <_printf_float+0x2f2>
 80112d8:	e6a3      	b.n	8011022 <_printf_float+0xb6>
 80112da:	2301      	movs	r3, #1
 80112dc:	4631      	mov	r1, r6
 80112de:	4628      	mov	r0, r5
 80112e0:	9206      	str	r2, [sp, #24]
 80112e2:	47b8      	blx	r7
 80112e4:	3001      	adds	r0, #1
 80112e6:	f43f ae9c 	beq.w	8011022 <_printf_float+0xb6>
 80112ea:	9a06      	ldr	r2, [sp, #24]
 80112ec:	f10b 0b01 	add.w	fp, fp, #1
 80112f0:	e7bb      	b.n	801126a <_printf_float+0x2fe>
 80112f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80112f6:	4631      	mov	r1, r6
 80112f8:	4628      	mov	r0, r5
 80112fa:	47b8      	blx	r7
 80112fc:	3001      	adds	r0, #1
 80112fe:	d1c0      	bne.n	8011282 <_printf_float+0x316>
 8011300:	e68f      	b.n	8011022 <_printf_float+0xb6>
 8011302:	9a06      	ldr	r2, [sp, #24]
 8011304:	464b      	mov	r3, r9
 8011306:	4442      	add	r2, r8
 8011308:	4631      	mov	r1, r6
 801130a:	4628      	mov	r0, r5
 801130c:	47b8      	blx	r7
 801130e:	3001      	adds	r0, #1
 8011310:	d1c3      	bne.n	801129a <_printf_float+0x32e>
 8011312:	e686      	b.n	8011022 <_printf_float+0xb6>
 8011314:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011318:	f1ba 0f01 	cmp.w	sl, #1
 801131c:	dc01      	bgt.n	8011322 <_printf_float+0x3b6>
 801131e:	07db      	lsls	r3, r3, #31
 8011320:	d536      	bpl.n	8011390 <_printf_float+0x424>
 8011322:	2301      	movs	r3, #1
 8011324:	4642      	mov	r2, r8
 8011326:	4631      	mov	r1, r6
 8011328:	4628      	mov	r0, r5
 801132a:	47b8      	blx	r7
 801132c:	3001      	adds	r0, #1
 801132e:	f43f ae78 	beq.w	8011022 <_printf_float+0xb6>
 8011332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011336:	4631      	mov	r1, r6
 8011338:	4628      	mov	r0, r5
 801133a:	47b8      	blx	r7
 801133c:	3001      	adds	r0, #1
 801133e:	f43f ae70 	beq.w	8011022 <_printf_float+0xb6>
 8011342:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011346:	2200      	movs	r2, #0
 8011348:	2300      	movs	r3, #0
 801134a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801134e:	f7ef fbe3 	bl	8000b18 <__aeabi_dcmpeq>
 8011352:	b9c0      	cbnz	r0, 8011386 <_printf_float+0x41a>
 8011354:	4653      	mov	r3, sl
 8011356:	f108 0201 	add.w	r2, r8, #1
 801135a:	4631      	mov	r1, r6
 801135c:	4628      	mov	r0, r5
 801135e:	47b8      	blx	r7
 8011360:	3001      	adds	r0, #1
 8011362:	d10c      	bne.n	801137e <_printf_float+0x412>
 8011364:	e65d      	b.n	8011022 <_printf_float+0xb6>
 8011366:	2301      	movs	r3, #1
 8011368:	465a      	mov	r2, fp
 801136a:	4631      	mov	r1, r6
 801136c:	4628      	mov	r0, r5
 801136e:	47b8      	blx	r7
 8011370:	3001      	adds	r0, #1
 8011372:	f43f ae56 	beq.w	8011022 <_printf_float+0xb6>
 8011376:	f108 0801 	add.w	r8, r8, #1
 801137a:	45d0      	cmp	r8, sl
 801137c:	dbf3      	blt.n	8011366 <_printf_float+0x3fa>
 801137e:	464b      	mov	r3, r9
 8011380:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011384:	e6df      	b.n	8011146 <_printf_float+0x1da>
 8011386:	f04f 0800 	mov.w	r8, #0
 801138a:	f104 0b1a 	add.w	fp, r4, #26
 801138e:	e7f4      	b.n	801137a <_printf_float+0x40e>
 8011390:	2301      	movs	r3, #1
 8011392:	4642      	mov	r2, r8
 8011394:	e7e1      	b.n	801135a <_printf_float+0x3ee>
 8011396:	2301      	movs	r3, #1
 8011398:	464a      	mov	r2, r9
 801139a:	4631      	mov	r1, r6
 801139c:	4628      	mov	r0, r5
 801139e:	47b8      	blx	r7
 80113a0:	3001      	adds	r0, #1
 80113a2:	f43f ae3e 	beq.w	8011022 <_printf_float+0xb6>
 80113a6:	f108 0801 	add.w	r8, r8, #1
 80113aa:	68e3      	ldr	r3, [r4, #12]
 80113ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80113ae:	1a5b      	subs	r3, r3, r1
 80113b0:	4543      	cmp	r3, r8
 80113b2:	dcf0      	bgt.n	8011396 <_printf_float+0x42a>
 80113b4:	e6fc      	b.n	80111b0 <_printf_float+0x244>
 80113b6:	f04f 0800 	mov.w	r8, #0
 80113ba:	f104 0919 	add.w	r9, r4, #25
 80113be:	e7f4      	b.n	80113aa <_printf_float+0x43e>

080113c0 <_printf_common>:
 80113c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113c4:	4616      	mov	r6, r2
 80113c6:	4698      	mov	r8, r3
 80113c8:	688a      	ldr	r2, [r1, #8]
 80113ca:	690b      	ldr	r3, [r1, #16]
 80113cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80113d0:	4293      	cmp	r3, r2
 80113d2:	bfb8      	it	lt
 80113d4:	4613      	movlt	r3, r2
 80113d6:	6033      	str	r3, [r6, #0]
 80113d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80113dc:	4607      	mov	r7, r0
 80113de:	460c      	mov	r4, r1
 80113e0:	b10a      	cbz	r2, 80113e6 <_printf_common+0x26>
 80113e2:	3301      	adds	r3, #1
 80113e4:	6033      	str	r3, [r6, #0]
 80113e6:	6823      	ldr	r3, [r4, #0]
 80113e8:	0699      	lsls	r1, r3, #26
 80113ea:	bf42      	ittt	mi
 80113ec:	6833      	ldrmi	r3, [r6, #0]
 80113ee:	3302      	addmi	r3, #2
 80113f0:	6033      	strmi	r3, [r6, #0]
 80113f2:	6825      	ldr	r5, [r4, #0]
 80113f4:	f015 0506 	ands.w	r5, r5, #6
 80113f8:	d106      	bne.n	8011408 <_printf_common+0x48>
 80113fa:	f104 0a19 	add.w	sl, r4, #25
 80113fe:	68e3      	ldr	r3, [r4, #12]
 8011400:	6832      	ldr	r2, [r6, #0]
 8011402:	1a9b      	subs	r3, r3, r2
 8011404:	42ab      	cmp	r3, r5
 8011406:	dc26      	bgt.n	8011456 <_printf_common+0x96>
 8011408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801140c:	6822      	ldr	r2, [r4, #0]
 801140e:	3b00      	subs	r3, #0
 8011410:	bf18      	it	ne
 8011412:	2301      	movne	r3, #1
 8011414:	0692      	lsls	r2, r2, #26
 8011416:	d42b      	bmi.n	8011470 <_printf_common+0xb0>
 8011418:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801141c:	4641      	mov	r1, r8
 801141e:	4638      	mov	r0, r7
 8011420:	47c8      	blx	r9
 8011422:	3001      	adds	r0, #1
 8011424:	d01e      	beq.n	8011464 <_printf_common+0xa4>
 8011426:	6823      	ldr	r3, [r4, #0]
 8011428:	6922      	ldr	r2, [r4, #16]
 801142a:	f003 0306 	and.w	r3, r3, #6
 801142e:	2b04      	cmp	r3, #4
 8011430:	bf02      	ittt	eq
 8011432:	68e5      	ldreq	r5, [r4, #12]
 8011434:	6833      	ldreq	r3, [r6, #0]
 8011436:	1aed      	subeq	r5, r5, r3
 8011438:	68a3      	ldr	r3, [r4, #8]
 801143a:	bf0c      	ite	eq
 801143c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011440:	2500      	movne	r5, #0
 8011442:	4293      	cmp	r3, r2
 8011444:	bfc4      	itt	gt
 8011446:	1a9b      	subgt	r3, r3, r2
 8011448:	18ed      	addgt	r5, r5, r3
 801144a:	2600      	movs	r6, #0
 801144c:	341a      	adds	r4, #26
 801144e:	42b5      	cmp	r5, r6
 8011450:	d11a      	bne.n	8011488 <_printf_common+0xc8>
 8011452:	2000      	movs	r0, #0
 8011454:	e008      	b.n	8011468 <_printf_common+0xa8>
 8011456:	2301      	movs	r3, #1
 8011458:	4652      	mov	r2, sl
 801145a:	4641      	mov	r1, r8
 801145c:	4638      	mov	r0, r7
 801145e:	47c8      	blx	r9
 8011460:	3001      	adds	r0, #1
 8011462:	d103      	bne.n	801146c <_printf_common+0xac>
 8011464:	f04f 30ff 	mov.w	r0, #4294967295
 8011468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801146c:	3501      	adds	r5, #1
 801146e:	e7c6      	b.n	80113fe <_printf_common+0x3e>
 8011470:	18e1      	adds	r1, r4, r3
 8011472:	1c5a      	adds	r2, r3, #1
 8011474:	2030      	movs	r0, #48	@ 0x30
 8011476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801147a:	4422      	add	r2, r4
 801147c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011480:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011484:	3302      	adds	r3, #2
 8011486:	e7c7      	b.n	8011418 <_printf_common+0x58>
 8011488:	2301      	movs	r3, #1
 801148a:	4622      	mov	r2, r4
 801148c:	4641      	mov	r1, r8
 801148e:	4638      	mov	r0, r7
 8011490:	47c8      	blx	r9
 8011492:	3001      	adds	r0, #1
 8011494:	d0e6      	beq.n	8011464 <_printf_common+0xa4>
 8011496:	3601      	adds	r6, #1
 8011498:	e7d9      	b.n	801144e <_printf_common+0x8e>
	...

0801149c <_printf_i>:
 801149c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80114a0:	7e0f      	ldrb	r7, [r1, #24]
 80114a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80114a4:	2f78      	cmp	r7, #120	@ 0x78
 80114a6:	4691      	mov	r9, r2
 80114a8:	4680      	mov	r8, r0
 80114aa:	460c      	mov	r4, r1
 80114ac:	469a      	mov	sl, r3
 80114ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80114b2:	d807      	bhi.n	80114c4 <_printf_i+0x28>
 80114b4:	2f62      	cmp	r7, #98	@ 0x62
 80114b6:	d80a      	bhi.n	80114ce <_printf_i+0x32>
 80114b8:	2f00      	cmp	r7, #0
 80114ba:	f000 80d2 	beq.w	8011662 <_printf_i+0x1c6>
 80114be:	2f58      	cmp	r7, #88	@ 0x58
 80114c0:	f000 80b9 	beq.w	8011636 <_printf_i+0x19a>
 80114c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80114c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80114cc:	e03a      	b.n	8011544 <_printf_i+0xa8>
 80114ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80114d2:	2b15      	cmp	r3, #21
 80114d4:	d8f6      	bhi.n	80114c4 <_printf_i+0x28>
 80114d6:	a101      	add	r1, pc, #4	@ (adr r1, 80114dc <_printf_i+0x40>)
 80114d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80114dc:	08011535 	.word	0x08011535
 80114e0:	08011549 	.word	0x08011549
 80114e4:	080114c5 	.word	0x080114c5
 80114e8:	080114c5 	.word	0x080114c5
 80114ec:	080114c5 	.word	0x080114c5
 80114f0:	080114c5 	.word	0x080114c5
 80114f4:	08011549 	.word	0x08011549
 80114f8:	080114c5 	.word	0x080114c5
 80114fc:	080114c5 	.word	0x080114c5
 8011500:	080114c5 	.word	0x080114c5
 8011504:	080114c5 	.word	0x080114c5
 8011508:	08011649 	.word	0x08011649
 801150c:	08011573 	.word	0x08011573
 8011510:	08011603 	.word	0x08011603
 8011514:	080114c5 	.word	0x080114c5
 8011518:	080114c5 	.word	0x080114c5
 801151c:	0801166b 	.word	0x0801166b
 8011520:	080114c5 	.word	0x080114c5
 8011524:	08011573 	.word	0x08011573
 8011528:	080114c5 	.word	0x080114c5
 801152c:	080114c5 	.word	0x080114c5
 8011530:	0801160b 	.word	0x0801160b
 8011534:	6833      	ldr	r3, [r6, #0]
 8011536:	1d1a      	adds	r2, r3, #4
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	6032      	str	r2, [r6, #0]
 801153c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011544:	2301      	movs	r3, #1
 8011546:	e09d      	b.n	8011684 <_printf_i+0x1e8>
 8011548:	6833      	ldr	r3, [r6, #0]
 801154a:	6820      	ldr	r0, [r4, #0]
 801154c:	1d19      	adds	r1, r3, #4
 801154e:	6031      	str	r1, [r6, #0]
 8011550:	0606      	lsls	r6, r0, #24
 8011552:	d501      	bpl.n	8011558 <_printf_i+0xbc>
 8011554:	681d      	ldr	r5, [r3, #0]
 8011556:	e003      	b.n	8011560 <_printf_i+0xc4>
 8011558:	0645      	lsls	r5, r0, #25
 801155a:	d5fb      	bpl.n	8011554 <_printf_i+0xb8>
 801155c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011560:	2d00      	cmp	r5, #0
 8011562:	da03      	bge.n	801156c <_printf_i+0xd0>
 8011564:	232d      	movs	r3, #45	@ 0x2d
 8011566:	426d      	negs	r5, r5
 8011568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801156c:	4859      	ldr	r0, [pc, #356]	@ (80116d4 <_printf_i+0x238>)
 801156e:	230a      	movs	r3, #10
 8011570:	e011      	b.n	8011596 <_printf_i+0xfa>
 8011572:	6821      	ldr	r1, [r4, #0]
 8011574:	6833      	ldr	r3, [r6, #0]
 8011576:	0608      	lsls	r0, r1, #24
 8011578:	f853 5b04 	ldr.w	r5, [r3], #4
 801157c:	d402      	bmi.n	8011584 <_printf_i+0xe8>
 801157e:	0649      	lsls	r1, r1, #25
 8011580:	bf48      	it	mi
 8011582:	b2ad      	uxthmi	r5, r5
 8011584:	2f6f      	cmp	r7, #111	@ 0x6f
 8011586:	4853      	ldr	r0, [pc, #332]	@ (80116d4 <_printf_i+0x238>)
 8011588:	6033      	str	r3, [r6, #0]
 801158a:	bf14      	ite	ne
 801158c:	230a      	movne	r3, #10
 801158e:	2308      	moveq	r3, #8
 8011590:	2100      	movs	r1, #0
 8011592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011596:	6866      	ldr	r6, [r4, #4]
 8011598:	60a6      	str	r6, [r4, #8]
 801159a:	2e00      	cmp	r6, #0
 801159c:	bfa2      	ittt	ge
 801159e:	6821      	ldrge	r1, [r4, #0]
 80115a0:	f021 0104 	bicge.w	r1, r1, #4
 80115a4:	6021      	strge	r1, [r4, #0]
 80115a6:	b90d      	cbnz	r5, 80115ac <_printf_i+0x110>
 80115a8:	2e00      	cmp	r6, #0
 80115aa:	d04b      	beq.n	8011644 <_printf_i+0x1a8>
 80115ac:	4616      	mov	r6, r2
 80115ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80115b2:	fb03 5711 	mls	r7, r3, r1, r5
 80115b6:	5dc7      	ldrb	r7, [r0, r7]
 80115b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80115bc:	462f      	mov	r7, r5
 80115be:	42bb      	cmp	r3, r7
 80115c0:	460d      	mov	r5, r1
 80115c2:	d9f4      	bls.n	80115ae <_printf_i+0x112>
 80115c4:	2b08      	cmp	r3, #8
 80115c6:	d10b      	bne.n	80115e0 <_printf_i+0x144>
 80115c8:	6823      	ldr	r3, [r4, #0]
 80115ca:	07df      	lsls	r7, r3, #31
 80115cc:	d508      	bpl.n	80115e0 <_printf_i+0x144>
 80115ce:	6923      	ldr	r3, [r4, #16]
 80115d0:	6861      	ldr	r1, [r4, #4]
 80115d2:	4299      	cmp	r1, r3
 80115d4:	bfde      	ittt	le
 80115d6:	2330      	movle	r3, #48	@ 0x30
 80115d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80115dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80115e0:	1b92      	subs	r2, r2, r6
 80115e2:	6122      	str	r2, [r4, #16]
 80115e4:	f8cd a000 	str.w	sl, [sp]
 80115e8:	464b      	mov	r3, r9
 80115ea:	aa03      	add	r2, sp, #12
 80115ec:	4621      	mov	r1, r4
 80115ee:	4640      	mov	r0, r8
 80115f0:	f7ff fee6 	bl	80113c0 <_printf_common>
 80115f4:	3001      	adds	r0, #1
 80115f6:	d14a      	bne.n	801168e <_printf_i+0x1f2>
 80115f8:	f04f 30ff 	mov.w	r0, #4294967295
 80115fc:	b004      	add	sp, #16
 80115fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011602:	6823      	ldr	r3, [r4, #0]
 8011604:	f043 0320 	orr.w	r3, r3, #32
 8011608:	6023      	str	r3, [r4, #0]
 801160a:	4833      	ldr	r0, [pc, #204]	@ (80116d8 <_printf_i+0x23c>)
 801160c:	2778      	movs	r7, #120	@ 0x78
 801160e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011612:	6823      	ldr	r3, [r4, #0]
 8011614:	6831      	ldr	r1, [r6, #0]
 8011616:	061f      	lsls	r7, r3, #24
 8011618:	f851 5b04 	ldr.w	r5, [r1], #4
 801161c:	d402      	bmi.n	8011624 <_printf_i+0x188>
 801161e:	065f      	lsls	r7, r3, #25
 8011620:	bf48      	it	mi
 8011622:	b2ad      	uxthmi	r5, r5
 8011624:	6031      	str	r1, [r6, #0]
 8011626:	07d9      	lsls	r1, r3, #31
 8011628:	bf44      	itt	mi
 801162a:	f043 0320 	orrmi.w	r3, r3, #32
 801162e:	6023      	strmi	r3, [r4, #0]
 8011630:	b11d      	cbz	r5, 801163a <_printf_i+0x19e>
 8011632:	2310      	movs	r3, #16
 8011634:	e7ac      	b.n	8011590 <_printf_i+0xf4>
 8011636:	4827      	ldr	r0, [pc, #156]	@ (80116d4 <_printf_i+0x238>)
 8011638:	e7e9      	b.n	801160e <_printf_i+0x172>
 801163a:	6823      	ldr	r3, [r4, #0]
 801163c:	f023 0320 	bic.w	r3, r3, #32
 8011640:	6023      	str	r3, [r4, #0]
 8011642:	e7f6      	b.n	8011632 <_printf_i+0x196>
 8011644:	4616      	mov	r6, r2
 8011646:	e7bd      	b.n	80115c4 <_printf_i+0x128>
 8011648:	6833      	ldr	r3, [r6, #0]
 801164a:	6825      	ldr	r5, [r4, #0]
 801164c:	6961      	ldr	r1, [r4, #20]
 801164e:	1d18      	adds	r0, r3, #4
 8011650:	6030      	str	r0, [r6, #0]
 8011652:	062e      	lsls	r6, r5, #24
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	d501      	bpl.n	801165c <_printf_i+0x1c0>
 8011658:	6019      	str	r1, [r3, #0]
 801165a:	e002      	b.n	8011662 <_printf_i+0x1c6>
 801165c:	0668      	lsls	r0, r5, #25
 801165e:	d5fb      	bpl.n	8011658 <_printf_i+0x1bc>
 8011660:	8019      	strh	r1, [r3, #0]
 8011662:	2300      	movs	r3, #0
 8011664:	6123      	str	r3, [r4, #16]
 8011666:	4616      	mov	r6, r2
 8011668:	e7bc      	b.n	80115e4 <_printf_i+0x148>
 801166a:	6833      	ldr	r3, [r6, #0]
 801166c:	1d1a      	adds	r2, r3, #4
 801166e:	6032      	str	r2, [r6, #0]
 8011670:	681e      	ldr	r6, [r3, #0]
 8011672:	6862      	ldr	r2, [r4, #4]
 8011674:	2100      	movs	r1, #0
 8011676:	4630      	mov	r0, r6
 8011678:	f7ee fdd2 	bl	8000220 <memchr>
 801167c:	b108      	cbz	r0, 8011682 <_printf_i+0x1e6>
 801167e:	1b80      	subs	r0, r0, r6
 8011680:	6060      	str	r0, [r4, #4]
 8011682:	6863      	ldr	r3, [r4, #4]
 8011684:	6123      	str	r3, [r4, #16]
 8011686:	2300      	movs	r3, #0
 8011688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801168c:	e7aa      	b.n	80115e4 <_printf_i+0x148>
 801168e:	6923      	ldr	r3, [r4, #16]
 8011690:	4632      	mov	r2, r6
 8011692:	4649      	mov	r1, r9
 8011694:	4640      	mov	r0, r8
 8011696:	47d0      	blx	sl
 8011698:	3001      	adds	r0, #1
 801169a:	d0ad      	beq.n	80115f8 <_printf_i+0x15c>
 801169c:	6823      	ldr	r3, [r4, #0]
 801169e:	079b      	lsls	r3, r3, #30
 80116a0:	d413      	bmi.n	80116ca <_printf_i+0x22e>
 80116a2:	68e0      	ldr	r0, [r4, #12]
 80116a4:	9b03      	ldr	r3, [sp, #12]
 80116a6:	4298      	cmp	r0, r3
 80116a8:	bfb8      	it	lt
 80116aa:	4618      	movlt	r0, r3
 80116ac:	e7a6      	b.n	80115fc <_printf_i+0x160>
 80116ae:	2301      	movs	r3, #1
 80116b0:	4632      	mov	r2, r6
 80116b2:	4649      	mov	r1, r9
 80116b4:	4640      	mov	r0, r8
 80116b6:	47d0      	blx	sl
 80116b8:	3001      	adds	r0, #1
 80116ba:	d09d      	beq.n	80115f8 <_printf_i+0x15c>
 80116bc:	3501      	adds	r5, #1
 80116be:	68e3      	ldr	r3, [r4, #12]
 80116c0:	9903      	ldr	r1, [sp, #12]
 80116c2:	1a5b      	subs	r3, r3, r1
 80116c4:	42ab      	cmp	r3, r5
 80116c6:	dcf2      	bgt.n	80116ae <_printf_i+0x212>
 80116c8:	e7eb      	b.n	80116a2 <_printf_i+0x206>
 80116ca:	2500      	movs	r5, #0
 80116cc:	f104 0619 	add.w	r6, r4, #25
 80116d0:	e7f5      	b.n	80116be <_printf_i+0x222>
 80116d2:	bf00      	nop
 80116d4:	08017030 	.word	0x08017030
 80116d8:	08017041 	.word	0x08017041

080116dc <_scanf_float>:
 80116dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116e0:	b087      	sub	sp, #28
 80116e2:	4617      	mov	r7, r2
 80116e4:	9303      	str	r3, [sp, #12]
 80116e6:	688b      	ldr	r3, [r1, #8]
 80116e8:	1e5a      	subs	r2, r3, #1
 80116ea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80116ee:	bf81      	itttt	hi
 80116f0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80116f4:	eb03 0b05 	addhi.w	fp, r3, r5
 80116f8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80116fc:	608b      	strhi	r3, [r1, #8]
 80116fe:	680b      	ldr	r3, [r1, #0]
 8011700:	460a      	mov	r2, r1
 8011702:	f04f 0500 	mov.w	r5, #0
 8011706:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801170a:	f842 3b1c 	str.w	r3, [r2], #28
 801170e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011712:	4680      	mov	r8, r0
 8011714:	460c      	mov	r4, r1
 8011716:	bf98      	it	ls
 8011718:	f04f 0b00 	movls.w	fp, #0
 801171c:	9201      	str	r2, [sp, #4]
 801171e:	4616      	mov	r6, r2
 8011720:	46aa      	mov	sl, r5
 8011722:	46a9      	mov	r9, r5
 8011724:	9502      	str	r5, [sp, #8]
 8011726:	68a2      	ldr	r2, [r4, #8]
 8011728:	b152      	cbz	r2, 8011740 <_scanf_float+0x64>
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	781b      	ldrb	r3, [r3, #0]
 801172e:	2b4e      	cmp	r3, #78	@ 0x4e
 8011730:	d864      	bhi.n	80117fc <_scanf_float+0x120>
 8011732:	2b40      	cmp	r3, #64	@ 0x40
 8011734:	d83c      	bhi.n	80117b0 <_scanf_float+0xd4>
 8011736:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801173a:	b2c8      	uxtb	r0, r1
 801173c:	280e      	cmp	r0, #14
 801173e:	d93a      	bls.n	80117b6 <_scanf_float+0xda>
 8011740:	f1b9 0f00 	cmp.w	r9, #0
 8011744:	d003      	beq.n	801174e <_scanf_float+0x72>
 8011746:	6823      	ldr	r3, [r4, #0]
 8011748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801174c:	6023      	str	r3, [r4, #0]
 801174e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011752:	f1ba 0f01 	cmp.w	sl, #1
 8011756:	f200 8117 	bhi.w	8011988 <_scanf_float+0x2ac>
 801175a:	9b01      	ldr	r3, [sp, #4]
 801175c:	429e      	cmp	r6, r3
 801175e:	f200 8108 	bhi.w	8011972 <_scanf_float+0x296>
 8011762:	2001      	movs	r0, #1
 8011764:	b007      	add	sp, #28
 8011766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801176a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801176e:	2a0d      	cmp	r2, #13
 8011770:	d8e6      	bhi.n	8011740 <_scanf_float+0x64>
 8011772:	a101      	add	r1, pc, #4	@ (adr r1, 8011778 <_scanf_float+0x9c>)
 8011774:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011778:	080118bf 	.word	0x080118bf
 801177c:	08011741 	.word	0x08011741
 8011780:	08011741 	.word	0x08011741
 8011784:	08011741 	.word	0x08011741
 8011788:	0801191f 	.word	0x0801191f
 801178c:	080118f7 	.word	0x080118f7
 8011790:	08011741 	.word	0x08011741
 8011794:	08011741 	.word	0x08011741
 8011798:	080118cd 	.word	0x080118cd
 801179c:	08011741 	.word	0x08011741
 80117a0:	08011741 	.word	0x08011741
 80117a4:	08011741 	.word	0x08011741
 80117a8:	08011741 	.word	0x08011741
 80117ac:	08011885 	.word	0x08011885
 80117b0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80117b4:	e7db      	b.n	801176e <_scanf_float+0x92>
 80117b6:	290e      	cmp	r1, #14
 80117b8:	d8c2      	bhi.n	8011740 <_scanf_float+0x64>
 80117ba:	a001      	add	r0, pc, #4	@ (adr r0, 80117c0 <_scanf_float+0xe4>)
 80117bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80117c0:	08011875 	.word	0x08011875
 80117c4:	08011741 	.word	0x08011741
 80117c8:	08011875 	.word	0x08011875
 80117cc:	0801190b 	.word	0x0801190b
 80117d0:	08011741 	.word	0x08011741
 80117d4:	0801181d 	.word	0x0801181d
 80117d8:	0801185b 	.word	0x0801185b
 80117dc:	0801185b 	.word	0x0801185b
 80117e0:	0801185b 	.word	0x0801185b
 80117e4:	0801185b 	.word	0x0801185b
 80117e8:	0801185b 	.word	0x0801185b
 80117ec:	0801185b 	.word	0x0801185b
 80117f0:	0801185b 	.word	0x0801185b
 80117f4:	0801185b 	.word	0x0801185b
 80117f8:	0801185b 	.word	0x0801185b
 80117fc:	2b6e      	cmp	r3, #110	@ 0x6e
 80117fe:	d809      	bhi.n	8011814 <_scanf_float+0x138>
 8011800:	2b60      	cmp	r3, #96	@ 0x60
 8011802:	d8b2      	bhi.n	801176a <_scanf_float+0x8e>
 8011804:	2b54      	cmp	r3, #84	@ 0x54
 8011806:	d07b      	beq.n	8011900 <_scanf_float+0x224>
 8011808:	2b59      	cmp	r3, #89	@ 0x59
 801180a:	d199      	bne.n	8011740 <_scanf_float+0x64>
 801180c:	2d07      	cmp	r5, #7
 801180e:	d197      	bne.n	8011740 <_scanf_float+0x64>
 8011810:	2508      	movs	r5, #8
 8011812:	e02c      	b.n	801186e <_scanf_float+0x192>
 8011814:	2b74      	cmp	r3, #116	@ 0x74
 8011816:	d073      	beq.n	8011900 <_scanf_float+0x224>
 8011818:	2b79      	cmp	r3, #121	@ 0x79
 801181a:	e7f6      	b.n	801180a <_scanf_float+0x12e>
 801181c:	6821      	ldr	r1, [r4, #0]
 801181e:	05c8      	lsls	r0, r1, #23
 8011820:	d51b      	bpl.n	801185a <_scanf_float+0x17e>
 8011822:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8011826:	6021      	str	r1, [r4, #0]
 8011828:	f109 0901 	add.w	r9, r9, #1
 801182c:	f1bb 0f00 	cmp.w	fp, #0
 8011830:	d003      	beq.n	801183a <_scanf_float+0x15e>
 8011832:	3201      	adds	r2, #1
 8011834:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011838:	60a2      	str	r2, [r4, #8]
 801183a:	68a3      	ldr	r3, [r4, #8]
 801183c:	3b01      	subs	r3, #1
 801183e:	60a3      	str	r3, [r4, #8]
 8011840:	6923      	ldr	r3, [r4, #16]
 8011842:	3301      	adds	r3, #1
 8011844:	6123      	str	r3, [r4, #16]
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	3b01      	subs	r3, #1
 801184a:	2b00      	cmp	r3, #0
 801184c:	607b      	str	r3, [r7, #4]
 801184e:	f340 8087 	ble.w	8011960 <_scanf_float+0x284>
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	3301      	adds	r3, #1
 8011856:	603b      	str	r3, [r7, #0]
 8011858:	e765      	b.n	8011726 <_scanf_float+0x4a>
 801185a:	eb1a 0105 	adds.w	r1, sl, r5
 801185e:	f47f af6f 	bne.w	8011740 <_scanf_float+0x64>
 8011862:	6822      	ldr	r2, [r4, #0]
 8011864:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8011868:	6022      	str	r2, [r4, #0]
 801186a:	460d      	mov	r5, r1
 801186c:	468a      	mov	sl, r1
 801186e:	f806 3b01 	strb.w	r3, [r6], #1
 8011872:	e7e2      	b.n	801183a <_scanf_float+0x15e>
 8011874:	6822      	ldr	r2, [r4, #0]
 8011876:	0610      	lsls	r0, r2, #24
 8011878:	f57f af62 	bpl.w	8011740 <_scanf_float+0x64>
 801187c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011880:	6022      	str	r2, [r4, #0]
 8011882:	e7f4      	b.n	801186e <_scanf_float+0x192>
 8011884:	f1ba 0f00 	cmp.w	sl, #0
 8011888:	d10e      	bne.n	80118a8 <_scanf_float+0x1cc>
 801188a:	f1b9 0f00 	cmp.w	r9, #0
 801188e:	d10e      	bne.n	80118ae <_scanf_float+0x1d2>
 8011890:	6822      	ldr	r2, [r4, #0]
 8011892:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011896:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801189a:	d108      	bne.n	80118ae <_scanf_float+0x1d2>
 801189c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80118a0:	6022      	str	r2, [r4, #0]
 80118a2:	f04f 0a01 	mov.w	sl, #1
 80118a6:	e7e2      	b.n	801186e <_scanf_float+0x192>
 80118a8:	f1ba 0f02 	cmp.w	sl, #2
 80118ac:	d055      	beq.n	801195a <_scanf_float+0x27e>
 80118ae:	2d01      	cmp	r5, #1
 80118b0:	d002      	beq.n	80118b8 <_scanf_float+0x1dc>
 80118b2:	2d04      	cmp	r5, #4
 80118b4:	f47f af44 	bne.w	8011740 <_scanf_float+0x64>
 80118b8:	3501      	adds	r5, #1
 80118ba:	b2ed      	uxtb	r5, r5
 80118bc:	e7d7      	b.n	801186e <_scanf_float+0x192>
 80118be:	f1ba 0f01 	cmp.w	sl, #1
 80118c2:	f47f af3d 	bne.w	8011740 <_scanf_float+0x64>
 80118c6:	f04f 0a02 	mov.w	sl, #2
 80118ca:	e7d0      	b.n	801186e <_scanf_float+0x192>
 80118cc:	b97d      	cbnz	r5, 80118ee <_scanf_float+0x212>
 80118ce:	f1b9 0f00 	cmp.w	r9, #0
 80118d2:	f47f af38 	bne.w	8011746 <_scanf_float+0x6a>
 80118d6:	6822      	ldr	r2, [r4, #0]
 80118d8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80118dc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80118e0:	f040 8108 	bne.w	8011af4 <_scanf_float+0x418>
 80118e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80118e8:	6022      	str	r2, [r4, #0]
 80118ea:	2501      	movs	r5, #1
 80118ec:	e7bf      	b.n	801186e <_scanf_float+0x192>
 80118ee:	2d03      	cmp	r5, #3
 80118f0:	d0e2      	beq.n	80118b8 <_scanf_float+0x1dc>
 80118f2:	2d05      	cmp	r5, #5
 80118f4:	e7de      	b.n	80118b4 <_scanf_float+0x1d8>
 80118f6:	2d02      	cmp	r5, #2
 80118f8:	f47f af22 	bne.w	8011740 <_scanf_float+0x64>
 80118fc:	2503      	movs	r5, #3
 80118fe:	e7b6      	b.n	801186e <_scanf_float+0x192>
 8011900:	2d06      	cmp	r5, #6
 8011902:	f47f af1d 	bne.w	8011740 <_scanf_float+0x64>
 8011906:	2507      	movs	r5, #7
 8011908:	e7b1      	b.n	801186e <_scanf_float+0x192>
 801190a:	6822      	ldr	r2, [r4, #0]
 801190c:	0591      	lsls	r1, r2, #22
 801190e:	f57f af17 	bpl.w	8011740 <_scanf_float+0x64>
 8011912:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8011916:	6022      	str	r2, [r4, #0]
 8011918:	f8cd 9008 	str.w	r9, [sp, #8]
 801191c:	e7a7      	b.n	801186e <_scanf_float+0x192>
 801191e:	6822      	ldr	r2, [r4, #0]
 8011920:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8011924:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011928:	d006      	beq.n	8011938 <_scanf_float+0x25c>
 801192a:	0550      	lsls	r0, r2, #21
 801192c:	f57f af08 	bpl.w	8011740 <_scanf_float+0x64>
 8011930:	f1b9 0f00 	cmp.w	r9, #0
 8011934:	f000 80de 	beq.w	8011af4 <_scanf_float+0x418>
 8011938:	0591      	lsls	r1, r2, #22
 801193a:	bf58      	it	pl
 801193c:	9902      	ldrpl	r1, [sp, #8]
 801193e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011942:	bf58      	it	pl
 8011944:	eba9 0101 	subpl.w	r1, r9, r1
 8011948:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801194c:	bf58      	it	pl
 801194e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011952:	6022      	str	r2, [r4, #0]
 8011954:	f04f 0900 	mov.w	r9, #0
 8011958:	e789      	b.n	801186e <_scanf_float+0x192>
 801195a:	f04f 0a03 	mov.w	sl, #3
 801195e:	e786      	b.n	801186e <_scanf_float+0x192>
 8011960:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011964:	4639      	mov	r1, r7
 8011966:	4640      	mov	r0, r8
 8011968:	4798      	blx	r3
 801196a:	2800      	cmp	r0, #0
 801196c:	f43f aedb 	beq.w	8011726 <_scanf_float+0x4a>
 8011970:	e6e6      	b.n	8011740 <_scanf_float+0x64>
 8011972:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011976:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801197a:	463a      	mov	r2, r7
 801197c:	4640      	mov	r0, r8
 801197e:	4798      	blx	r3
 8011980:	6923      	ldr	r3, [r4, #16]
 8011982:	3b01      	subs	r3, #1
 8011984:	6123      	str	r3, [r4, #16]
 8011986:	e6e8      	b.n	801175a <_scanf_float+0x7e>
 8011988:	1e6b      	subs	r3, r5, #1
 801198a:	2b06      	cmp	r3, #6
 801198c:	d824      	bhi.n	80119d8 <_scanf_float+0x2fc>
 801198e:	2d02      	cmp	r5, #2
 8011990:	d836      	bhi.n	8011a00 <_scanf_float+0x324>
 8011992:	9b01      	ldr	r3, [sp, #4]
 8011994:	429e      	cmp	r6, r3
 8011996:	f67f aee4 	bls.w	8011762 <_scanf_float+0x86>
 801199a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801199e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80119a2:	463a      	mov	r2, r7
 80119a4:	4640      	mov	r0, r8
 80119a6:	4798      	blx	r3
 80119a8:	6923      	ldr	r3, [r4, #16]
 80119aa:	3b01      	subs	r3, #1
 80119ac:	6123      	str	r3, [r4, #16]
 80119ae:	e7f0      	b.n	8011992 <_scanf_float+0x2b6>
 80119b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80119b4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80119b8:	463a      	mov	r2, r7
 80119ba:	4640      	mov	r0, r8
 80119bc:	4798      	blx	r3
 80119be:	6923      	ldr	r3, [r4, #16]
 80119c0:	3b01      	subs	r3, #1
 80119c2:	6123      	str	r3, [r4, #16]
 80119c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80119c8:	fa5f fa8a 	uxtb.w	sl, sl
 80119cc:	f1ba 0f02 	cmp.w	sl, #2
 80119d0:	d1ee      	bne.n	80119b0 <_scanf_float+0x2d4>
 80119d2:	3d03      	subs	r5, #3
 80119d4:	b2ed      	uxtb	r5, r5
 80119d6:	1b76      	subs	r6, r6, r5
 80119d8:	6823      	ldr	r3, [r4, #0]
 80119da:	05da      	lsls	r2, r3, #23
 80119dc:	d530      	bpl.n	8011a40 <_scanf_float+0x364>
 80119de:	055b      	lsls	r3, r3, #21
 80119e0:	d511      	bpl.n	8011a06 <_scanf_float+0x32a>
 80119e2:	9b01      	ldr	r3, [sp, #4]
 80119e4:	429e      	cmp	r6, r3
 80119e6:	f67f aebc 	bls.w	8011762 <_scanf_float+0x86>
 80119ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80119ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80119f2:	463a      	mov	r2, r7
 80119f4:	4640      	mov	r0, r8
 80119f6:	4798      	blx	r3
 80119f8:	6923      	ldr	r3, [r4, #16]
 80119fa:	3b01      	subs	r3, #1
 80119fc:	6123      	str	r3, [r4, #16]
 80119fe:	e7f0      	b.n	80119e2 <_scanf_float+0x306>
 8011a00:	46aa      	mov	sl, r5
 8011a02:	46b3      	mov	fp, r6
 8011a04:	e7de      	b.n	80119c4 <_scanf_float+0x2e8>
 8011a06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011a0a:	6923      	ldr	r3, [r4, #16]
 8011a0c:	2965      	cmp	r1, #101	@ 0x65
 8011a0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8011a12:	f106 35ff 	add.w	r5, r6, #4294967295
 8011a16:	6123      	str	r3, [r4, #16]
 8011a18:	d00c      	beq.n	8011a34 <_scanf_float+0x358>
 8011a1a:	2945      	cmp	r1, #69	@ 0x45
 8011a1c:	d00a      	beq.n	8011a34 <_scanf_float+0x358>
 8011a1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011a22:	463a      	mov	r2, r7
 8011a24:	4640      	mov	r0, r8
 8011a26:	4798      	blx	r3
 8011a28:	6923      	ldr	r3, [r4, #16]
 8011a2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011a2e:	3b01      	subs	r3, #1
 8011a30:	1eb5      	subs	r5, r6, #2
 8011a32:	6123      	str	r3, [r4, #16]
 8011a34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011a38:	463a      	mov	r2, r7
 8011a3a:	4640      	mov	r0, r8
 8011a3c:	4798      	blx	r3
 8011a3e:	462e      	mov	r6, r5
 8011a40:	6822      	ldr	r2, [r4, #0]
 8011a42:	f012 0210 	ands.w	r2, r2, #16
 8011a46:	d001      	beq.n	8011a4c <_scanf_float+0x370>
 8011a48:	2000      	movs	r0, #0
 8011a4a:	e68b      	b.n	8011764 <_scanf_float+0x88>
 8011a4c:	7032      	strb	r2, [r6, #0]
 8011a4e:	6823      	ldr	r3, [r4, #0]
 8011a50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8011a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011a58:	d11c      	bne.n	8011a94 <_scanf_float+0x3b8>
 8011a5a:	9b02      	ldr	r3, [sp, #8]
 8011a5c:	454b      	cmp	r3, r9
 8011a5e:	eba3 0209 	sub.w	r2, r3, r9
 8011a62:	d123      	bne.n	8011aac <_scanf_float+0x3d0>
 8011a64:	9901      	ldr	r1, [sp, #4]
 8011a66:	2200      	movs	r2, #0
 8011a68:	4640      	mov	r0, r8
 8011a6a:	f002 fc45 	bl	80142f8 <_strtod_r>
 8011a6e:	9b03      	ldr	r3, [sp, #12]
 8011a70:	6821      	ldr	r1, [r4, #0]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	f011 0f02 	tst.w	r1, #2
 8011a78:	ec57 6b10 	vmov	r6, r7, d0
 8011a7c:	f103 0204 	add.w	r2, r3, #4
 8011a80:	d01f      	beq.n	8011ac2 <_scanf_float+0x3e6>
 8011a82:	9903      	ldr	r1, [sp, #12]
 8011a84:	600a      	str	r2, [r1, #0]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	e9c3 6700 	strd	r6, r7, [r3]
 8011a8c:	68e3      	ldr	r3, [r4, #12]
 8011a8e:	3301      	adds	r3, #1
 8011a90:	60e3      	str	r3, [r4, #12]
 8011a92:	e7d9      	b.n	8011a48 <_scanf_float+0x36c>
 8011a94:	9b04      	ldr	r3, [sp, #16]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d0e4      	beq.n	8011a64 <_scanf_float+0x388>
 8011a9a:	9905      	ldr	r1, [sp, #20]
 8011a9c:	230a      	movs	r3, #10
 8011a9e:	3101      	adds	r1, #1
 8011aa0:	4640      	mov	r0, r8
 8011aa2:	f002 fca9 	bl	80143f8 <_strtol_r>
 8011aa6:	9b04      	ldr	r3, [sp, #16]
 8011aa8:	9e05      	ldr	r6, [sp, #20]
 8011aaa:	1ac2      	subs	r2, r0, r3
 8011aac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8011ab0:	429e      	cmp	r6, r3
 8011ab2:	bf28      	it	cs
 8011ab4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011ab8:	4910      	ldr	r1, [pc, #64]	@ (8011afc <_scanf_float+0x420>)
 8011aba:	4630      	mov	r0, r6
 8011abc:	f000 f8e4 	bl	8011c88 <siprintf>
 8011ac0:	e7d0      	b.n	8011a64 <_scanf_float+0x388>
 8011ac2:	f011 0f04 	tst.w	r1, #4
 8011ac6:	9903      	ldr	r1, [sp, #12]
 8011ac8:	600a      	str	r2, [r1, #0]
 8011aca:	d1dc      	bne.n	8011a86 <_scanf_float+0x3aa>
 8011acc:	681d      	ldr	r5, [r3, #0]
 8011ace:	4632      	mov	r2, r6
 8011ad0:	463b      	mov	r3, r7
 8011ad2:	4630      	mov	r0, r6
 8011ad4:	4639      	mov	r1, r7
 8011ad6:	f7ef f851 	bl	8000b7c <__aeabi_dcmpun>
 8011ada:	b128      	cbz	r0, 8011ae8 <_scanf_float+0x40c>
 8011adc:	4808      	ldr	r0, [pc, #32]	@ (8011b00 <_scanf_float+0x424>)
 8011ade:	f000 fa03 	bl	8011ee8 <nanf>
 8011ae2:	ed85 0a00 	vstr	s0, [r5]
 8011ae6:	e7d1      	b.n	8011a8c <_scanf_float+0x3b0>
 8011ae8:	4630      	mov	r0, r6
 8011aea:	4639      	mov	r1, r7
 8011aec:	f7ef f8a4 	bl	8000c38 <__aeabi_d2f>
 8011af0:	6028      	str	r0, [r5, #0]
 8011af2:	e7cb      	b.n	8011a8c <_scanf_float+0x3b0>
 8011af4:	f04f 0900 	mov.w	r9, #0
 8011af8:	e629      	b.n	801174e <_scanf_float+0x72>
 8011afa:	bf00      	nop
 8011afc:	08017052 	.word	0x08017052
 8011b00:	08017408 	.word	0x08017408

08011b04 <std>:
 8011b04:	2300      	movs	r3, #0
 8011b06:	b510      	push	{r4, lr}
 8011b08:	4604      	mov	r4, r0
 8011b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8011b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b12:	6083      	str	r3, [r0, #8]
 8011b14:	8181      	strh	r1, [r0, #12]
 8011b16:	6643      	str	r3, [r0, #100]	@ 0x64
 8011b18:	81c2      	strh	r2, [r0, #14]
 8011b1a:	6183      	str	r3, [r0, #24]
 8011b1c:	4619      	mov	r1, r3
 8011b1e:	2208      	movs	r2, #8
 8011b20:	305c      	adds	r0, #92	@ 0x5c
 8011b22:	f000 f940 	bl	8011da6 <memset>
 8011b26:	4b0d      	ldr	r3, [pc, #52]	@ (8011b5c <std+0x58>)
 8011b28:	6263      	str	r3, [r4, #36]	@ 0x24
 8011b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8011b60 <std+0x5c>)
 8011b2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8011b64 <std+0x60>)
 8011b30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011b32:	4b0d      	ldr	r3, [pc, #52]	@ (8011b68 <std+0x64>)
 8011b34:	6323      	str	r3, [r4, #48]	@ 0x30
 8011b36:	4b0d      	ldr	r3, [pc, #52]	@ (8011b6c <std+0x68>)
 8011b38:	6224      	str	r4, [r4, #32]
 8011b3a:	429c      	cmp	r4, r3
 8011b3c:	d006      	beq.n	8011b4c <std+0x48>
 8011b3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011b42:	4294      	cmp	r4, r2
 8011b44:	d002      	beq.n	8011b4c <std+0x48>
 8011b46:	33d0      	adds	r3, #208	@ 0xd0
 8011b48:	429c      	cmp	r4, r3
 8011b4a:	d105      	bne.n	8011b58 <std+0x54>
 8011b4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b54:	f000 b9b6 	b.w	8011ec4 <__retarget_lock_init_recursive>
 8011b58:	bd10      	pop	{r4, pc}
 8011b5a:	bf00      	nop
 8011b5c:	08011d1d 	.word	0x08011d1d
 8011b60:	08011d43 	.word	0x08011d43
 8011b64:	08011d7b 	.word	0x08011d7b
 8011b68:	08011d9f 	.word	0x08011d9f
 8011b6c:	20002590 	.word	0x20002590

08011b70 <stdio_exit_handler>:
 8011b70:	4a02      	ldr	r2, [pc, #8]	@ (8011b7c <stdio_exit_handler+0xc>)
 8011b72:	4903      	ldr	r1, [pc, #12]	@ (8011b80 <stdio_exit_handler+0x10>)
 8011b74:	4803      	ldr	r0, [pc, #12]	@ (8011b84 <stdio_exit_handler+0x14>)
 8011b76:	f000 b869 	b.w	8011c4c <_fwalk_sglue>
 8011b7a:	bf00      	nop
 8011b7c:	200001dc 	.word	0x200001dc
 8011b80:	08014de9 	.word	0x08014de9
 8011b84:	200001ec 	.word	0x200001ec

08011b88 <cleanup_stdio>:
 8011b88:	6841      	ldr	r1, [r0, #4]
 8011b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8011bbc <cleanup_stdio+0x34>)
 8011b8c:	4299      	cmp	r1, r3
 8011b8e:	b510      	push	{r4, lr}
 8011b90:	4604      	mov	r4, r0
 8011b92:	d001      	beq.n	8011b98 <cleanup_stdio+0x10>
 8011b94:	f003 f928 	bl	8014de8 <_fflush_r>
 8011b98:	68a1      	ldr	r1, [r4, #8]
 8011b9a:	4b09      	ldr	r3, [pc, #36]	@ (8011bc0 <cleanup_stdio+0x38>)
 8011b9c:	4299      	cmp	r1, r3
 8011b9e:	d002      	beq.n	8011ba6 <cleanup_stdio+0x1e>
 8011ba0:	4620      	mov	r0, r4
 8011ba2:	f003 f921 	bl	8014de8 <_fflush_r>
 8011ba6:	68e1      	ldr	r1, [r4, #12]
 8011ba8:	4b06      	ldr	r3, [pc, #24]	@ (8011bc4 <cleanup_stdio+0x3c>)
 8011baa:	4299      	cmp	r1, r3
 8011bac:	d004      	beq.n	8011bb8 <cleanup_stdio+0x30>
 8011bae:	4620      	mov	r0, r4
 8011bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bb4:	f003 b918 	b.w	8014de8 <_fflush_r>
 8011bb8:	bd10      	pop	{r4, pc}
 8011bba:	bf00      	nop
 8011bbc:	20002590 	.word	0x20002590
 8011bc0:	200025f8 	.word	0x200025f8
 8011bc4:	20002660 	.word	0x20002660

08011bc8 <global_stdio_init.part.0>:
 8011bc8:	b510      	push	{r4, lr}
 8011bca:	4b0b      	ldr	r3, [pc, #44]	@ (8011bf8 <global_stdio_init.part.0+0x30>)
 8011bcc:	4c0b      	ldr	r4, [pc, #44]	@ (8011bfc <global_stdio_init.part.0+0x34>)
 8011bce:	4a0c      	ldr	r2, [pc, #48]	@ (8011c00 <global_stdio_init.part.0+0x38>)
 8011bd0:	601a      	str	r2, [r3, #0]
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	2104      	movs	r1, #4
 8011bd8:	f7ff ff94 	bl	8011b04 <std>
 8011bdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011be0:	2201      	movs	r2, #1
 8011be2:	2109      	movs	r1, #9
 8011be4:	f7ff ff8e 	bl	8011b04 <std>
 8011be8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011bec:	2202      	movs	r2, #2
 8011bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bf2:	2112      	movs	r1, #18
 8011bf4:	f7ff bf86 	b.w	8011b04 <std>
 8011bf8:	200026c8 	.word	0x200026c8
 8011bfc:	20002590 	.word	0x20002590
 8011c00:	08011b71 	.word	0x08011b71

08011c04 <__sfp_lock_acquire>:
 8011c04:	4801      	ldr	r0, [pc, #4]	@ (8011c0c <__sfp_lock_acquire+0x8>)
 8011c06:	f000 b95e 	b.w	8011ec6 <__retarget_lock_acquire_recursive>
 8011c0a:	bf00      	nop
 8011c0c:	200026d1 	.word	0x200026d1

08011c10 <__sfp_lock_release>:
 8011c10:	4801      	ldr	r0, [pc, #4]	@ (8011c18 <__sfp_lock_release+0x8>)
 8011c12:	f000 b959 	b.w	8011ec8 <__retarget_lock_release_recursive>
 8011c16:	bf00      	nop
 8011c18:	200026d1 	.word	0x200026d1

08011c1c <__sinit>:
 8011c1c:	b510      	push	{r4, lr}
 8011c1e:	4604      	mov	r4, r0
 8011c20:	f7ff fff0 	bl	8011c04 <__sfp_lock_acquire>
 8011c24:	6a23      	ldr	r3, [r4, #32]
 8011c26:	b11b      	cbz	r3, 8011c30 <__sinit+0x14>
 8011c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c2c:	f7ff bff0 	b.w	8011c10 <__sfp_lock_release>
 8011c30:	4b04      	ldr	r3, [pc, #16]	@ (8011c44 <__sinit+0x28>)
 8011c32:	6223      	str	r3, [r4, #32]
 8011c34:	4b04      	ldr	r3, [pc, #16]	@ (8011c48 <__sinit+0x2c>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d1f5      	bne.n	8011c28 <__sinit+0xc>
 8011c3c:	f7ff ffc4 	bl	8011bc8 <global_stdio_init.part.0>
 8011c40:	e7f2      	b.n	8011c28 <__sinit+0xc>
 8011c42:	bf00      	nop
 8011c44:	08011b89 	.word	0x08011b89
 8011c48:	200026c8 	.word	0x200026c8

08011c4c <_fwalk_sglue>:
 8011c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c50:	4607      	mov	r7, r0
 8011c52:	4688      	mov	r8, r1
 8011c54:	4614      	mov	r4, r2
 8011c56:	2600      	movs	r6, #0
 8011c58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011c5c:	f1b9 0901 	subs.w	r9, r9, #1
 8011c60:	d505      	bpl.n	8011c6e <_fwalk_sglue+0x22>
 8011c62:	6824      	ldr	r4, [r4, #0]
 8011c64:	2c00      	cmp	r4, #0
 8011c66:	d1f7      	bne.n	8011c58 <_fwalk_sglue+0xc>
 8011c68:	4630      	mov	r0, r6
 8011c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c6e:	89ab      	ldrh	r3, [r5, #12]
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	d907      	bls.n	8011c84 <_fwalk_sglue+0x38>
 8011c74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011c78:	3301      	adds	r3, #1
 8011c7a:	d003      	beq.n	8011c84 <_fwalk_sglue+0x38>
 8011c7c:	4629      	mov	r1, r5
 8011c7e:	4638      	mov	r0, r7
 8011c80:	47c0      	blx	r8
 8011c82:	4306      	orrs	r6, r0
 8011c84:	3568      	adds	r5, #104	@ 0x68
 8011c86:	e7e9      	b.n	8011c5c <_fwalk_sglue+0x10>

08011c88 <siprintf>:
 8011c88:	b40e      	push	{r1, r2, r3}
 8011c8a:	b500      	push	{lr}
 8011c8c:	b09c      	sub	sp, #112	@ 0x70
 8011c8e:	ab1d      	add	r3, sp, #116	@ 0x74
 8011c90:	9002      	str	r0, [sp, #8]
 8011c92:	9006      	str	r0, [sp, #24]
 8011c94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011c98:	4809      	ldr	r0, [pc, #36]	@ (8011cc0 <siprintf+0x38>)
 8011c9a:	9107      	str	r1, [sp, #28]
 8011c9c:	9104      	str	r1, [sp, #16]
 8011c9e:	4909      	ldr	r1, [pc, #36]	@ (8011cc4 <siprintf+0x3c>)
 8011ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ca4:	9105      	str	r1, [sp, #20]
 8011ca6:	6800      	ldr	r0, [r0, #0]
 8011ca8:	9301      	str	r3, [sp, #4]
 8011caa:	a902      	add	r1, sp, #8
 8011cac:	f002 fc02 	bl	80144b4 <_svfiprintf_r>
 8011cb0:	9b02      	ldr	r3, [sp, #8]
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	701a      	strb	r2, [r3, #0]
 8011cb6:	b01c      	add	sp, #112	@ 0x70
 8011cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011cbc:	b003      	add	sp, #12
 8011cbe:	4770      	bx	lr
 8011cc0:	200001e8 	.word	0x200001e8
 8011cc4:	ffff0208 	.word	0xffff0208

08011cc8 <siscanf>:
 8011cc8:	b40e      	push	{r1, r2, r3}
 8011cca:	b530      	push	{r4, r5, lr}
 8011ccc:	b09c      	sub	sp, #112	@ 0x70
 8011cce:	ac1f      	add	r4, sp, #124	@ 0x7c
 8011cd0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011cd4:	f854 5b04 	ldr.w	r5, [r4], #4
 8011cd8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011cdc:	9002      	str	r0, [sp, #8]
 8011cde:	9006      	str	r0, [sp, #24]
 8011ce0:	f7ee faee 	bl	80002c0 <strlen>
 8011ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8011d14 <siscanf+0x4c>)
 8011ce6:	9003      	str	r0, [sp, #12]
 8011ce8:	9007      	str	r0, [sp, #28]
 8011cea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011cec:	480a      	ldr	r0, [pc, #40]	@ (8011d18 <siscanf+0x50>)
 8011cee:	9401      	str	r4, [sp, #4]
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011cf4:	9314      	str	r3, [sp, #80]	@ 0x50
 8011cf6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011cfa:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011cfe:	462a      	mov	r2, r5
 8011d00:	4623      	mov	r3, r4
 8011d02:	a902      	add	r1, sp, #8
 8011d04:	6800      	ldr	r0, [r0, #0]
 8011d06:	f002 fd29 	bl	801475c <__ssvfiscanf_r>
 8011d0a:	b01c      	add	sp, #112	@ 0x70
 8011d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d10:	b003      	add	sp, #12
 8011d12:	4770      	bx	lr
 8011d14:	08011d3f 	.word	0x08011d3f
 8011d18:	200001e8 	.word	0x200001e8

08011d1c <__sread>:
 8011d1c:	b510      	push	{r4, lr}
 8011d1e:	460c      	mov	r4, r1
 8011d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d24:	f000 f880 	bl	8011e28 <_read_r>
 8011d28:	2800      	cmp	r0, #0
 8011d2a:	bfab      	itete	ge
 8011d2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011d2e:	89a3      	ldrhlt	r3, [r4, #12]
 8011d30:	181b      	addge	r3, r3, r0
 8011d32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011d36:	bfac      	ite	ge
 8011d38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011d3a:	81a3      	strhlt	r3, [r4, #12]
 8011d3c:	bd10      	pop	{r4, pc}

08011d3e <__seofread>:
 8011d3e:	2000      	movs	r0, #0
 8011d40:	4770      	bx	lr

08011d42 <__swrite>:
 8011d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d46:	461f      	mov	r7, r3
 8011d48:	898b      	ldrh	r3, [r1, #12]
 8011d4a:	05db      	lsls	r3, r3, #23
 8011d4c:	4605      	mov	r5, r0
 8011d4e:	460c      	mov	r4, r1
 8011d50:	4616      	mov	r6, r2
 8011d52:	d505      	bpl.n	8011d60 <__swrite+0x1e>
 8011d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d58:	2302      	movs	r3, #2
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	f000 f852 	bl	8011e04 <_lseek_r>
 8011d60:	89a3      	ldrh	r3, [r4, #12]
 8011d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011d6a:	81a3      	strh	r3, [r4, #12]
 8011d6c:	4632      	mov	r2, r6
 8011d6e:	463b      	mov	r3, r7
 8011d70:	4628      	mov	r0, r5
 8011d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d76:	f000 b869 	b.w	8011e4c <_write_r>

08011d7a <__sseek>:
 8011d7a:	b510      	push	{r4, lr}
 8011d7c:	460c      	mov	r4, r1
 8011d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d82:	f000 f83f 	bl	8011e04 <_lseek_r>
 8011d86:	1c43      	adds	r3, r0, #1
 8011d88:	89a3      	ldrh	r3, [r4, #12]
 8011d8a:	bf15      	itete	ne
 8011d8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011d8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011d92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011d96:	81a3      	strheq	r3, [r4, #12]
 8011d98:	bf18      	it	ne
 8011d9a:	81a3      	strhne	r3, [r4, #12]
 8011d9c:	bd10      	pop	{r4, pc}

08011d9e <__sclose>:
 8011d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011da2:	f000 b81f 	b.w	8011de4 <_close_r>

08011da6 <memset>:
 8011da6:	4402      	add	r2, r0
 8011da8:	4603      	mov	r3, r0
 8011daa:	4293      	cmp	r3, r2
 8011dac:	d100      	bne.n	8011db0 <memset+0xa>
 8011dae:	4770      	bx	lr
 8011db0:	f803 1b01 	strb.w	r1, [r3], #1
 8011db4:	e7f9      	b.n	8011daa <memset+0x4>

08011db6 <strncmp>:
 8011db6:	b510      	push	{r4, lr}
 8011db8:	b16a      	cbz	r2, 8011dd6 <strncmp+0x20>
 8011dba:	3901      	subs	r1, #1
 8011dbc:	1884      	adds	r4, r0, r2
 8011dbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011dc2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	d103      	bne.n	8011dd2 <strncmp+0x1c>
 8011dca:	42a0      	cmp	r0, r4
 8011dcc:	d001      	beq.n	8011dd2 <strncmp+0x1c>
 8011dce:	2a00      	cmp	r2, #0
 8011dd0:	d1f5      	bne.n	8011dbe <strncmp+0x8>
 8011dd2:	1ad0      	subs	r0, r2, r3
 8011dd4:	bd10      	pop	{r4, pc}
 8011dd6:	4610      	mov	r0, r2
 8011dd8:	e7fc      	b.n	8011dd4 <strncmp+0x1e>
	...

08011ddc <_localeconv_r>:
 8011ddc:	4800      	ldr	r0, [pc, #0]	@ (8011de0 <_localeconv_r+0x4>)
 8011dde:	4770      	bx	lr
 8011de0:	20000328 	.word	0x20000328

08011de4 <_close_r>:
 8011de4:	b538      	push	{r3, r4, r5, lr}
 8011de6:	4d06      	ldr	r5, [pc, #24]	@ (8011e00 <_close_r+0x1c>)
 8011de8:	2300      	movs	r3, #0
 8011dea:	4604      	mov	r4, r0
 8011dec:	4608      	mov	r0, r1
 8011dee:	602b      	str	r3, [r5, #0]
 8011df0:	f7f2 fbd4 	bl	800459c <_close>
 8011df4:	1c43      	adds	r3, r0, #1
 8011df6:	d102      	bne.n	8011dfe <_close_r+0x1a>
 8011df8:	682b      	ldr	r3, [r5, #0]
 8011dfa:	b103      	cbz	r3, 8011dfe <_close_r+0x1a>
 8011dfc:	6023      	str	r3, [r4, #0]
 8011dfe:	bd38      	pop	{r3, r4, r5, pc}
 8011e00:	200026cc 	.word	0x200026cc

08011e04 <_lseek_r>:
 8011e04:	b538      	push	{r3, r4, r5, lr}
 8011e06:	4d07      	ldr	r5, [pc, #28]	@ (8011e24 <_lseek_r+0x20>)
 8011e08:	4604      	mov	r4, r0
 8011e0a:	4608      	mov	r0, r1
 8011e0c:	4611      	mov	r1, r2
 8011e0e:	2200      	movs	r2, #0
 8011e10:	602a      	str	r2, [r5, #0]
 8011e12:	461a      	mov	r2, r3
 8011e14:	f7f2 fbe9 	bl	80045ea <_lseek>
 8011e18:	1c43      	adds	r3, r0, #1
 8011e1a:	d102      	bne.n	8011e22 <_lseek_r+0x1e>
 8011e1c:	682b      	ldr	r3, [r5, #0]
 8011e1e:	b103      	cbz	r3, 8011e22 <_lseek_r+0x1e>
 8011e20:	6023      	str	r3, [r4, #0]
 8011e22:	bd38      	pop	{r3, r4, r5, pc}
 8011e24:	200026cc 	.word	0x200026cc

08011e28 <_read_r>:
 8011e28:	b538      	push	{r3, r4, r5, lr}
 8011e2a:	4d07      	ldr	r5, [pc, #28]	@ (8011e48 <_read_r+0x20>)
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	4608      	mov	r0, r1
 8011e30:	4611      	mov	r1, r2
 8011e32:	2200      	movs	r2, #0
 8011e34:	602a      	str	r2, [r5, #0]
 8011e36:	461a      	mov	r2, r3
 8011e38:	f7f2 fb77 	bl	800452a <_read>
 8011e3c:	1c43      	adds	r3, r0, #1
 8011e3e:	d102      	bne.n	8011e46 <_read_r+0x1e>
 8011e40:	682b      	ldr	r3, [r5, #0]
 8011e42:	b103      	cbz	r3, 8011e46 <_read_r+0x1e>
 8011e44:	6023      	str	r3, [r4, #0]
 8011e46:	bd38      	pop	{r3, r4, r5, pc}
 8011e48:	200026cc 	.word	0x200026cc

08011e4c <_write_r>:
 8011e4c:	b538      	push	{r3, r4, r5, lr}
 8011e4e:	4d07      	ldr	r5, [pc, #28]	@ (8011e6c <_write_r+0x20>)
 8011e50:	4604      	mov	r4, r0
 8011e52:	4608      	mov	r0, r1
 8011e54:	4611      	mov	r1, r2
 8011e56:	2200      	movs	r2, #0
 8011e58:	602a      	str	r2, [r5, #0]
 8011e5a:	461a      	mov	r2, r3
 8011e5c:	f7f2 fb82 	bl	8004564 <_write>
 8011e60:	1c43      	adds	r3, r0, #1
 8011e62:	d102      	bne.n	8011e6a <_write_r+0x1e>
 8011e64:	682b      	ldr	r3, [r5, #0]
 8011e66:	b103      	cbz	r3, 8011e6a <_write_r+0x1e>
 8011e68:	6023      	str	r3, [r4, #0]
 8011e6a:	bd38      	pop	{r3, r4, r5, pc}
 8011e6c:	200026cc 	.word	0x200026cc

08011e70 <__errno>:
 8011e70:	4b01      	ldr	r3, [pc, #4]	@ (8011e78 <__errno+0x8>)
 8011e72:	6818      	ldr	r0, [r3, #0]
 8011e74:	4770      	bx	lr
 8011e76:	bf00      	nop
 8011e78:	200001e8 	.word	0x200001e8

08011e7c <__libc_init_array>:
 8011e7c:	b570      	push	{r4, r5, r6, lr}
 8011e7e:	4d0d      	ldr	r5, [pc, #52]	@ (8011eb4 <__libc_init_array+0x38>)
 8011e80:	4c0d      	ldr	r4, [pc, #52]	@ (8011eb8 <__libc_init_array+0x3c>)
 8011e82:	1b64      	subs	r4, r4, r5
 8011e84:	10a4      	asrs	r4, r4, #2
 8011e86:	2600      	movs	r6, #0
 8011e88:	42a6      	cmp	r6, r4
 8011e8a:	d109      	bne.n	8011ea0 <__libc_init_array+0x24>
 8011e8c:	4d0b      	ldr	r5, [pc, #44]	@ (8011ebc <__libc_init_array+0x40>)
 8011e8e:	4c0c      	ldr	r4, [pc, #48]	@ (8011ec0 <__libc_init_array+0x44>)
 8011e90:	f004 fee0 	bl	8016c54 <_init>
 8011e94:	1b64      	subs	r4, r4, r5
 8011e96:	10a4      	asrs	r4, r4, #2
 8011e98:	2600      	movs	r6, #0
 8011e9a:	42a6      	cmp	r6, r4
 8011e9c:	d105      	bne.n	8011eaa <__libc_init_array+0x2e>
 8011e9e:	bd70      	pop	{r4, r5, r6, pc}
 8011ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ea4:	4798      	blx	r3
 8011ea6:	3601      	adds	r6, #1
 8011ea8:	e7ee      	b.n	8011e88 <__libc_init_array+0xc>
 8011eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8011eae:	4798      	blx	r3
 8011eb0:	3601      	adds	r6, #1
 8011eb2:	e7f2      	b.n	8011e9a <__libc_init_array+0x1e>
 8011eb4:	080174a8 	.word	0x080174a8
 8011eb8:	080174a8 	.word	0x080174a8
 8011ebc:	080174a8 	.word	0x080174a8
 8011ec0:	080174ac 	.word	0x080174ac

08011ec4 <__retarget_lock_init_recursive>:
 8011ec4:	4770      	bx	lr

08011ec6 <__retarget_lock_acquire_recursive>:
 8011ec6:	4770      	bx	lr

08011ec8 <__retarget_lock_release_recursive>:
 8011ec8:	4770      	bx	lr

08011eca <memcpy>:
 8011eca:	440a      	add	r2, r1
 8011ecc:	4291      	cmp	r1, r2
 8011ece:	f100 33ff 	add.w	r3, r0, #4294967295
 8011ed2:	d100      	bne.n	8011ed6 <memcpy+0xc>
 8011ed4:	4770      	bx	lr
 8011ed6:	b510      	push	{r4, lr}
 8011ed8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011edc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ee0:	4291      	cmp	r1, r2
 8011ee2:	d1f9      	bne.n	8011ed8 <memcpy+0xe>
 8011ee4:	bd10      	pop	{r4, pc}
	...

08011ee8 <nanf>:
 8011ee8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011ef0 <nanf+0x8>
 8011eec:	4770      	bx	lr
 8011eee:	bf00      	nop
 8011ef0:	7fc00000 	.word	0x7fc00000

08011ef4 <quorem>:
 8011ef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ef8:	6903      	ldr	r3, [r0, #16]
 8011efa:	690c      	ldr	r4, [r1, #16]
 8011efc:	42a3      	cmp	r3, r4
 8011efe:	4607      	mov	r7, r0
 8011f00:	db7e      	blt.n	8012000 <quorem+0x10c>
 8011f02:	3c01      	subs	r4, #1
 8011f04:	f101 0814 	add.w	r8, r1, #20
 8011f08:	00a3      	lsls	r3, r4, #2
 8011f0a:	f100 0514 	add.w	r5, r0, #20
 8011f0e:	9300      	str	r3, [sp, #0]
 8011f10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f14:	9301      	str	r3, [sp, #4]
 8011f16:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011f1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f1e:	3301      	adds	r3, #1
 8011f20:	429a      	cmp	r2, r3
 8011f22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011f26:	fbb2 f6f3 	udiv	r6, r2, r3
 8011f2a:	d32e      	bcc.n	8011f8a <quorem+0x96>
 8011f2c:	f04f 0a00 	mov.w	sl, #0
 8011f30:	46c4      	mov	ip, r8
 8011f32:	46ae      	mov	lr, r5
 8011f34:	46d3      	mov	fp, sl
 8011f36:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011f3a:	b298      	uxth	r0, r3
 8011f3c:	fb06 a000 	mla	r0, r6, r0, sl
 8011f40:	0c02      	lsrs	r2, r0, #16
 8011f42:	0c1b      	lsrs	r3, r3, #16
 8011f44:	fb06 2303 	mla	r3, r6, r3, r2
 8011f48:	f8de 2000 	ldr.w	r2, [lr]
 8011f4c:	b280      	uxth	r0, r0
 8011f4e:	b292      	uxth	r2, r2
 8011f50:	1a12      	subs	r2, r2, r0
 8011f52:	445a      	add	r2, fp
 8011f54:	f8de 0000 	ldr.w	r0, [lr]
 8011f58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011f5c:	b29b      	uxth	r3, r3
 8011f5e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011f62:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011f66:	b292      	uxth	r2, r2
 8011f68:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011f6c:	45e1      	cmp	r9, ip
 8011f6e:	f84e 2b04 	str.w	r2, [lr], #4
 8011f72:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011f76:	d2de      	bcs.n	8011f36 <quorem+0x42>
 8011f78:	9b00      	ldr	r3, [sp, #0]
 8011f7a:	58eb      	ldr	r3, [r5, r3]
 8011f7c:	b92b      	cbnz	r3, 8011f8a <quorem+0x96>
 8011f7e:	9b01      	ldr	r3, [sp, #4]
 8011f80:	3b04      	subs	r3, #4
 8011f82:	429d      	cmp	r5, r3
 8011f84:	461a      	mov	r2, r3
 8011f86:	d32f      	bcc.n	8011fe8 <quorem+0xf4>
 8011f88:	613c      	str	r4, [r7, #16]
 8011f8a:	4638      	mov	r0, r7
 8011f8c:	f001 f9c4 	bl	8013318 <__mcmp>
 8011f90:	2800      	cmp	r0, #0
 8011f92:	db25      	blt.n	8011fe0 <quorem+0xec>
 8011f94:	4629      	mov	r1, r5
 8011f96:	2000      	movs	r0, #0
 8011f98:	f858 2b04 	ldr.w	r2, [r8], #4
 8011f9c:	f8d1 c000 	ldr.w	ip, [r1]
 8011fa0:	fa1f fe82 	uxth.w	lr, r2
 8011fa4:	fa1f f38c 	uxth.w	r3, ip
 8011fa8:	eba3 030e 	sub.w	r3, r3, lr
 8011fac:	4403      	add	r3, r0
 8011fae:	0c12      	lsrs	r2, r2, #16
 8011fb0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011fb4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011fb8:	b29b      	uxth	r3, r3
 8011fba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011fbe:	45c1      	cmp	r9, r8
 8011fc0:	f841 3b04 	str.w	r3, [r1], #4
 8011fc4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011fc8:	d2e6      	bcs.n	8011f98 <quorem+0xa4>
 8011fca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011fce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011fd2:	b922      	cbnz	r2, 8011fde <quorem+0xea>
 8011fd4:	3b04      	subs	r3, #4
 8011fd6:	429d      	cmp	r5, r3
 8011fd8:	461a      	mov	r2, r3
 8011fda:	d30b      	bcc.n	8011ff4 <quorem+0x100>
 8011fdc:	613c      	str	r4, [r7, #16]
 8011fde:	3601      	adds	r6, #1
 8011fe0:	4630      	mov	r0, r6
 8011fe2:	b003      	add	sp, #12
 8011fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fe8:	6812      	ldr	r2, [r2, #0]
 8011fea:	3b04      	subs	r3, #4
 8011fec:	2a00      	cmp	r2, #0
 8011fee:	d1cb      	bne.n	8011f88 <quorem+0x94>
 8011ff0:	3c01      	subs	r4, #1
 8011ff2:	e7c6      	b.n	8011f82 <quorem+0x8e>
 8011ff4:	6812      	ldr	r2, [r2, #0]
 8011ff6:	3b04      	subs	r3, #4
 8011ff8:	2a00      	cmp	r2, #0
 8011ffa:	d1ef      	bne.n	8011fdc <quorem+0xe8>
 8011ffc:	3c01      	subs	r4, #1
 8011ffe:	e7ea      	b.n	8011fd6 <quorem+0xe2>
 8012000:	2000      	movs	r0, #0
 8012002:	e7ee      	b.n	8011fe2 <quorem+0xee>
 8012004:	0000      	movs	r0, r0
	...

08012008 <_dtoa_r>:
 8012008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801200c:	69c7      	ldr	r7, [r0, #28]
 801200e:	b099      	sub	sp, #100	@ 0x64
 8012010:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012014:	ec55 4b10 	vmov	r4, r5, d0
 8012018:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801201a:	9109      	str	r1, [sp, #36]	@ 0x24
 801201c:	4683      	mov	fp, r0
 801201e:	920e      	str	r2, [sp, #56]	@ 0x38
 8012020:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012022:	b97f      	cbnz	r7, 8012044 <_dtoa_r+0x3c>
 8012024:	2010      	movs	r0, #16
 8012026:	f000 fdfd 	bl	8012c24 <malloc>
 801202a:	4602      	mov	r2, r0
 801202c:	f8cb 001c 	str.w	r0, [fp, #28]
 8012030:	b920      	cbnz	r0, 801203c <_dtoa_r+0x34>
 8012032:	4ba7      	ldr	r3, [pc, #668]	@ (80122d0 <_dtoa_r+0x2c8>)
 8012034:	21ef      	movs	r1, #239	@ 0xef
 8012036:	48a7      	ldr	r0, [pc, #668]	@ (80122d4 <_dtoa_r+0x2cc>)
 8012038:	f002 ffa6 	bl	8014f88 <__assert_func>
 801203c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012040:	6007      	str	r7, [r0, #0]
 8012042:	60c7      	str	r7, [r0, #12]
 8012044:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012048:	6819      	ldr	r1, [r3, #0]
 801204a:	b159      	cbz	r1, 8012064 <_dtoa_r+0x5c>
 801204c:	685a      	ldr	r2, [r3, #4]
 801204e:	604a      	str	r2, [r1, #4]
 8012050:	2301      	movs	r3, #1
 8012052:	4093      	lsls	r3, r2
 8012054:	608b      	str	r3, [r1, #8]
 8012056:	4658      	mov	r0, fp
 8012058:	f000 feda 	bl	8012e10 <_Bfree>
 801205c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012060:	2200      	movs	r2, #0
 8012062:	601a      	str	r2, [r3, #0]
 8012064:	1e2b      	subs	r3, r5, #0
 8012066:	bfb9      	ittee	lt
 8012068:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801206c:	9303      	strlt	r3, [sp, #12]
 801206e:	2300      	movge	r3, #0
 8012070:	6033      	strge	r3, [r6, #0]
 8012072:	9f03      	ldr	r7, [sp, #12]
 8012074:	4b98      	ldr	r3, [pc, #608]	@ (80122d8 <_dtoa_r+0x2d0>)
 8012076:	bfbc      	itt	lt
 8012078:	2201      	movlt	r2, #1
 801207a:	6032      	strlt	r2, [r6, #0]
 801207c:	43bb      	bics	r3, r7
 801207e:	d112      	bne.n	80120a6 <_dtoa_r+0x9e>
 8012080:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012082:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012086:	6013      	str	r3, [r2, #0]
 8012088:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801208c:	4323      	orrs	r3, r4
 801208e:	f000 854d 	beq.w	8012b2c <_dtoa_r+0xb24>
 8012092:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012094:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80122ec <_dtoa_r+0x2e4>
 8012098:	2b00      	cmp	r3, #0
 801209a:	f000 854f 	beq.w	8012b3c <_dtoa_r+0xb34>
 801209e:	f10a 0303 	add.w	r3, sl, #3
 80120a2:	f000 bd49 	b.w	8012b38 <_dtoa_r+0xb30>
 80120a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80120aa:	2200      	movs	r2, #0
 80120ac:	ec51 0b17 	vmov	r0, r1, d7
 80120b0:	2300      	movs	r3, #0
 80120b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80120b6:	f7ee fd2f 	bl	8000b18 <__aeabi_dcmpeq>
 80120ba:	4680      	mov	r8, r0
 80120bc:	b158      	cbz	r0, 80120d6 <_dtoa_r+0xce>
 80120be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80120c0:	2301      	movs	r3, #1
 80120c2:	6013      	str	r3, [r2, #0]
 80120c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80120c6:	b113      	cbz	r3, 80120ce <_dtoa_r+0xc6>
 80120c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80120ca:	4b84      	ldr	r3, [pc, #528]	@ (80122dc <_dtoa_r+0x2d4>)
 80120cc:	6013      	str	r3, [r2, #0]
 80120ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80122f0 <_dtoa_r+0x2e8>
 80120d2:	f000 bd33 	b.w	8012b3c <_dtoa_r+0xb34>
 80120d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80120da:	aa16      	add	r2, sp, #88	@ 0x58
 80120dc:	a917      	add	r1, sp, #92	@ 0x5c
 80120de:	4658      	mov	r0, fp
 80120e0:	f001 fa3a 	bl	8013558 <__d2b>
 80120e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80120e8:	4681      	mov	r9, r0
 80120ea:	2e00      	cmp	r6, #0
 80120ec:	d077      	beq.n	80121de <_dtoa_r+0x1d6>
 80120ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80120f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80120f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80120f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80120fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012100:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012104:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012108:	4619      	mov	r1, r3
 801210a:	2200      	movs	r2, #0
 801210c:	4b74      	ldr	r3, [pc, #464]	@ (80122e0 <_dtoa_r+0x2d8>)
 801210e:	f7ee f8e3 	bl	80002d8 <__aeabi_dsub>
 8012112:	a369      	add	r3, pc, #420	@ (adr r3, 80122b8 <_dtoa_r+0x2b0>)
 8012114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012118:	f7ee fa96 	bl	8000648 <__aeabi_dmul>
 801211c:	a368      	add	r3, pc, #416	@ (adr r3, 80122c0 <_dtoa_r+0x2b8>)
 801211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012122:	f7ee f8db 	bl	80002dc <__adddf3>
 8012126:	4604      	mov	r4, r0
 8012128:	4630      	mov	r0, r6
 801212a:	460d      	mov	r5, r1
 801212c:	f7ee fa22 	bl	8000574 <__aeabi_i2d>
 8012130:	a365      	add	r3, pc, #404	@ (adr r3, 80122c8 <_dtoa_r+0x2c0>)
 8012132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012136:	f7ee fa87 	bl	8000648 <__aeabi_dmul>
 801213a:	4602      	mov	r2, r0
 801213c:	460b      	mov	r3, r1
 801213e:	4620      	mov	r0, r4
 8012140:	4629      	mov	r1, r5
 8012142:	f7ee f8cb 	bl	80002dc <__adddf3>
 8012146:	4604      	mov	r4, r0
 8012148:	460d      	mov	r5, r1
 801214a:	f7ee fd2d 	bl	8000ba8 <__aeabi_d2iz>
 801214e:	2200      	movs	r2, #0
 8012150:	4607      	mov	r7, r0
 8012152:	2300      	movs	r3, #0
 8012154:	4620      	mov	r0, r4
 8012156:	4629      	mov	r1, r5
 8012158:	f7ee fce8 	bl	8000b2c <__aeabi_dcmplt>
 801215c:	b140      	cbz	r0, 8012170 <_dtoa_r+0x168>
 801215e:	4638      	mov	r0, r7
 8012160:	f7ee fa08 	bl	8000574 <__aeabi_i2d>
 8012164:	4622      	mov	r2, r4
 8012166:	462b      	mov	r3, r5
 8012168:	f7ee fcd6 	bl	8000b18 <__aeabi_dcmpeq>
 801216c:	b900      	cbnz	r0, 8012170 <_dtoa_r+0x168>
 801216e:	3f01      	subs	r7, #1
 8012170:	2f16      	cmp	r7, #22
 8012172:	d851      	bhi.n	8012218 <_dtoa_r+0x210>
 8012174:	4b5b      	ldr	r3, [pc, #364]	@ (80122e4 <_dtoa_r+0x2dc>)
 8012176:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801217e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012182:	f7ee fcd3 	bl	8000b2c <__aeabi_dcmplt>
 8012186:	2800      	cmp	r0, #0
 8012188:	d048      	beq.n	801221c <_dtoa_r+0x214>
 801218a:	3f01      	subs	r7, #1
 801218c:	2300      	movs	r3, #0
 801218e:	9312      	str	r3, [sp, #72]	@ 0x48
 8012190:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012192:	1b9b      	subs	r3, r3, r6
 8012194:	1e5a      	subs	r2, r3, #1
 8012196:	bf44      	itt	mi
 8012198:	f1c3 0801 	rsbmi	r8, r3, #1
 801219c:	2300      	movmi	r3, #0
 801219e:	9208      	str	r2, [sp, #32]
 80121a0:	bf54      	ite	pl
 80121a2:	f04f 0800 	movpl.w	r8, #0
 80121a6:	9308      	strmi	r3, [sp, #32]
 80121a8:	2f00      	cmp	r7, #0
 80121aa:	db39      	blt.n	8012220 <_dtoa_r+0x218>
 80121ac:	9b08      	ldr	r3, [sp, #32]
 80121ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 80121b0:	443b      	add	r3, r7
 80121b2:	9308      	str	r3, [sp, #32]
 80121b4:	2300      	movs	r3, #0
 80121b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80121b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121ba:	2b09      	cmp	r3, #9
 80121bc:	d864      	bhi.n	8012288 <_dtoa_r+0x280>
 80121be:	2b05      	cmp	r3, #5
 80121c0:	bfc4      	itt	gt
 80121c2:	3b04      	subgt	r3, #4
 80121c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80121c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121c8:	f1a3 0302 	sub.w	r3, r3, #2
 80121cc:	bfcc      	ite	gt
 80121ce:	2400      	movgt	r4, #0
 80121d0:	2401      	movle	r4, #1
 80121d2:	2b03      	cmp	r3, #3
 80121d4:	d863      	bhi.n	801229e <_dtoa_r+0x296>
 80121d6:	e8df f003 	tbb	[pc, r3]
 80121da:	372a      	.short	0x372a
 80121dc:	5535      	.short	0x5535
 80121de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80121e2:	441e      	add	r6, r3
 80121e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80121e8:	2b20      	cmp	r3, #32
 80121ea:	bfc1      	itttt	gt
 80121ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80121f0:	409f      	lslgt	r7, r3
 80121f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80121f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80121fa:	bfd6      	itet	le
 80121fc:	f1c3 0320 	rsble	r3, r3, #32
 8012200:	ea47 0003 	orrgt.w	r0, r7, r3
 8012204:	fa04 f003 	lslle.w	r0, r4, r3
 8012208:	f7ee f9a4 	bl	8000554 <__aeabi_ui2d>
 801220c:	2201      	movs	r2, #1
 801220e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012212:	3e01      	subs	r6, #1
 8012214:	9214      	str	r2, [sp, #80]	@ 0x50
 8012216:	e777      	b.n	8012108 <_dtoa_r+0x100>
 8012218:	2301      	movs	r3, #1
 801221a:	e7b8      	b.n	801218e <_dtoa_r+0x186>
 801221c:	9012      	str	r0, [sp, #72]	@ 0x48
 801221e:	e7b7      	b.n	8012190 <_dtoa_r+0x188>
 8012220:	427b      	negs	r3, r7
 8012222:	930a      	str	r3, [sp, #40]	@ 0x28
 8012224:	2300      	movs	r3, #0
 8012226:	eba8 0807 	sub.w	r8, r8, r7
 801222a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801222c:	e7c4      	b.n	80121b8 <_dtoa_r+0x1b0>
 801222e:	2300      	movs	r3, #0
 8012230:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012232:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012234:	2b00      	cmp	r3, #0
 8012236:	dc35      	bgt.n	80122a4 <_dtoa_r+0x29c>
 8012238:	2301      	movs	r3, #1
 801223a:	9300      	str	r3, [sp, #0]
 801223c:	9307      	str	r3, [sp, #28]
 801223e:	461a      	mov	r2, r3
 8012240:	920e      	str	r2, [sp, #56]	@ 0x38
 8012242:	e00b      	b.n	801225c <_dtoa_r+0x254>
 8012244:	2301      	movs	r3, #1
 8012246:	e7f3      	b.n	8012230 <_dtoa_r+0x228>
 8012248:	2300      	movs	r3, #0
 801224a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801224c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801224e:	18fb      	adds	r3, r7, r3
 8012250:	9300      	str	r3, [sp, #0]
 8012252:	3301      	adds	r3, #1
 8012254:	2b01      	cmp	r3, #1
 8012256:	9307      	str	r3, [sp, #28]
 8012258:	bfb8      	it	lt
 801225a:	2301      	movlt	r3, #1
 801225c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012260:	2100      	movs	r1, #0
 8012262:	2204      	movs	r2, #4
 8012264:	f102 0514 	add.w	r5, r2, #20
 8012268:	429d      	cmp	r5, r3
 801226a:	d91f      	bls.n	80122ac <_dtoa_r+0x2a4>
 801226c:	6041      	str	r1, [r0, #4]
 801226e:	4658      	mov	r0, fp
 8012270:	f000 fd8e 	bl	8012d90 <_Balloc>
 8012274:	4682      	mov	sl, r0
 8012276:	2800      	cmp	r0, #0
 8012278:	d13c      	bne.n	80122f4 <_dtoa_r+0x2ec>
 801227a:	4b1b      	ldr	r3, [pc, #108]	@ (80122e8 <_dtoa_r+0x2e0>)
 801227c:	4602      	mov	r2, r0
 801227e:	f240 11af 	movw	r1, #431	@ 0x1af
 8012282:	e6d8      	b.n	8012036 <_dtoa_r+0x2e>
 8012284:	2301      	movs	r3, #1
 8012286:	e7e0      	b.n	801224a <_dtoa_r+0x242>
 8012288:	2401      	movs	r4, #1
 801228a:	2300      	movs	r3, #0
 801228c:	9309      	str	r3, [sp, #36]	@ 0x24
 801228e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012290:	f04f 33ff 	mov.w	r3, #4294967295
 8012294:	9300      	str	r3, [sp, #0]
 8012296:	9307      	str	r3, [sp, #28]
 8012298:	2200      	movs	r2, #0
 801229a:	2312      	movs	r3, #18
 801229c:	e7d0      	b.n	8012240 <_dtoa_r+0x238>
 801229e:	2301      	movs	r3, #1
 80122a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80122a2:	e7f5      	b.n	8012290 <_dtoa_r+0x288>
 80122a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80122a6:	9300      	str	r3, [sp, #0]
 80122a8:	9307      	str	r3, [sp, #28]
 80122aa:	e7d7      	b.n	801225c <_dtoa_r+0x254>
 80122ac:	3101      	adds	r1, #1
 80122ae:	0052      	lsls	r2, r2, #1
 80122b0:	e7d8      	b.n	8012264 <_dtoa_r+0x25c>
 80122b2:	bf00      	nop
 80122b4:	f3af 8000 	nop.w
 80122b8:	636f4361 	.word	0x636f4361
 80122bc:	3fd287a7 	.word	0x3fd287a7
 80122c0:	8b60c8b3 	.word	0x8b60c8b3
 80122c4:	3fc68a28 	.word	0x3fc68a28
 80122c8:	509f79fb 	.word	0x509f79fb
 80122cc:	3fd34413 	.word	0x3fd34413
 80122d0:	08017064 	.word	0x08017064
 80122d4:	0801707b 	.word	0x0801707b
 80122d8:	7ff00000 	.word	0x7ff00000
 80122dc:	080173c1 	.word	0x080173c1
 80122e0:	3ff80000 	.word	0x3ff80000
 80122e4:	08017178 	.word	0x08017178
 80122e8:	080170d3 	.word	0x080170d3
 80122ec:	08017060 	.word	0x08017060
 80122f0:	080173c0 	.word	0x080173c0
 80122f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80122f8:	6018      	str	r0, [r3, #0]
 80122fa:	9b07      	ldr	r3, [sp, #28]
 80122fc:	2b0e      	cmp	r3, #14
 80122fe:	f200 80a4 	bhi.w	801244a <_dtoa_r+0x442>
 8012302:	2c00      	cmp	r4, #0
 8012304:	f000 80a1 	beq.w	801244a <_dtoa_r+0x442>
 8012308:	2f00      	cmp	r7, #0
 801230a:	dd33      	ble.n	8012374 <_dtoa_r+0x36c>
 801230c:	4bad      	ldr	r3, [pc, #692]	@ (80125c4 <_dtoa_r+0x5bc>)
 801230e:	f007 020f 	and.w	r2, r7, #15
 8012312:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012316:	ed93 7b00 	vldr	d7, [r3]
 801231a:	05f8      	lsls	r0, r7, #23
 801231c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012320:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012324:	d516      	bpl.n	8012354 <_dtoa_r+0x34c>
 8012326:	4ba8      	ldr	r3, [pc, #672]	@ (80125c8 <_dtoa_r+0x5c0>)
 8012328:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801232c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012330:	f7ee fab4 	bl	800089c <__aeabi_ddiv>
 8012334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012338:	f004 040f 	and.w	r4, r4, #15
 801233c:	2603      	movs	r6, #3
 801233e:	4da2      	ldr	r5, [pc, #648]	@ (80125c8 <_dtoa_r+0x5c0>)
 8012340:	b954      	cbnz	r4, 8012358 <_dtoa_r+0x350>
 8012342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801234a:	f7ee faa7 	bl	800089c <__aeabi_ddiv>
 801234e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012352:	e028      	b.n	80123a6 <_dtoa_r+0x39e>
 8012354:	2602      	movs	r6, #2
 8012356:	e7f2      	b.n	801233e <_dtoa_r+0x336>
 8012358:	07e1      	lsls	r1, r4, #31
 801235a:	d508      	bpl.n	801236e <_dtoa_r+0x366>
 801235c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012360:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012364:	f7ee f970 	bl	8000648 <__aeabi_dmul>
 8012368:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801236c:	3601      	adds	r6, #1
 801236e:	1064      	asrs	r4, r4, #1
 8012370:	3508      	adds	r5, #8
 8012372:	e7e5      	b.n	8012340 <_dtoa_r+0x338>
 8012374:	f000 80d2 	beq.w	801251c <_dtoa_r+0x514>
 8012378:	427c      	negs	r4, r7
 801237a:	4b92      	ldr	r3, [pc, #584]	@ (80125c4 <_dtoa_r+0x5bc>)
 801237c:	4d92      	ldr	r5, [pc, #584]	@ (80125c8 <_dtoa_r+0x5c0>)
 801237e:	f004 020f 	and.w	r2, r4, #15
 8012382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801238a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801238e:	f7ee f95b 	bl	8000648 <__aeabi_dmul>
 8012392:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012396:	1124      	asrs	r4, r4, #4
 8012398:	2300      	movs	r3, #0
 801239a:	2602      	movs	r6, #2
 801239c:	2c00      	cmp	r4, #0
 801239e:	f040 80b2 	bne.w	8012506 <_dtoa_r+0x4fe>
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d1d3      	bne.n	801234e <_dtoa_r+0x346>
 80123a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80123a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	f000 80b7 	beq.w	8012520 <_dtoa_r+0x518>
 80123b2:	4b86      	ldr	r3, [pc, #536]	@ (80125cc <_dtoa_r+0x5c4>)
 80123b4:	2200      	movs	r2, #0
 80123b6:	4620      	mov	r0, r4
 80123b8:	4629      	mov	r1, r5
 80123ba:	f7ee fbb7 	bl	8000b2c <__aeabi_dcmplt>
 80123be:	2800      	cmp	r0, #0
 80123c0:	f000 80ae 	beq.w	8012520 <_dtoa_r+0x518>
 80123c4:	9b07      	ldr	r3, [sp, #28]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	f000 80aa 	beq.w	8012520 <_dtoa_r+0x518>
 80123cc:	9b00      	ldr	r3, [sp, #0]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	dd37      	ble.n	8012442 <_dtoa_r+0x43a>
 80123d2:	1e7b      	subs	r3, r7, #1
 80123d4:	9304      	str	r3, [sp, #16]
 80123d6:	4620      	mov	r0, r4
 80123d8:	4b7d      	ldr	r3, [pc, #500]	@ (80125d0 <_dtoa_r+0x5c8>)
 80123da:	2200      	movs	r2, #0
 80123dc:	4629      	mov	r1, r5
 80123de:	f7ee f933 	bl	8000648 <__aeabi_dmul>
 80123e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123e6:	9c00      	ldr	r4, [sp, #0]
 80123e8:	3601      	adds	r6, #1
 80123ea:	4630      	mov	r0, r6
 80123ec:	f7ee f8c2 	bl	8000574 <__aeabi_i2d>
 80123f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80123f4:	f7ee f928 	bl	8000648 <__aeabi_dmul>
 80123f8:	4b76      	ldr	r3, [pc, #472]	@ (80125d4 <_dtoa_r+0x5cc>)
 80123fa:	2200      	movs	r2, #0
 80123fc:	f7ed ff6e 	bl	80002dc <__adddf3>
 8012400:	4605      	mov	r5, r0
 8012402:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8012406:	2c00      	cmp	r4, #0
 8012408:	f040 808d 	bne.w	8012526 <_dtoa_r+0x51e>
 801240c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012410:	4b71      	ldr	r3, [pc, #452]	@ (80125d8 <_dtoa_r+0x5d0>)
 8012412:	2200      	movs	r2, #0
 8012414:	f7ed ff60 	bl	80002d8 <__aeabi_dsub>
 8012418:	4602      	mov	r2, r0
 801241a:	460b      	mov	r3, r1
 801241c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012420:	462a      	mov	r2, r5
 8012422:	4633      	mov	r3, r6
 8012424:	f7ee fba0 	bl	8000b68 <__aeabi_dcmpgt>
 8012428:	2800      	cmp	r0, #0
 801242a:	f040 828b 	bne.w	8012944 <_dtoa_r+0x93c>
 801242e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012432:	462a      	mov	r2, r5
 8012434:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012438:	f7ee fb78 	bl	8000b2c <__aeabi_dcmplt>
 801243c:	2800      	cmp	r0, #0
 801243e:	f040 8128 	bne.w	8012692 <_dtoa_r+0x68a>
 8012442:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8012446:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801244a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801244c:	2b00      	cmp	r3, #0
 801244e:	f2c0 815a 	blt.w	8012706 <_dtoa_r+0x6fe>
 8012452:	2f0e      	cmp	r7, #14
 8012454:	f300 8157 	bgt.w	8012706 <_dtoa_r+0x6fe>
 8012458:	4b5a      	ldr	r3, [pc, #360]	@ (80125c4 <_dtoa_r+0x5bc>)
 801245a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801245e:	ed93 7b00 	vldr	d7, [r3]
 8012462:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012464:	2b00      	cmp	r3, #0
 8012466:	ed8d 7b00 	vstr	d7, [sp]
 801246a:	da03      	bge.n	8012474 <_dtoa_r+0x46c>
 801246c:	9b07      	ldr	r3, [sp, #28]
 801246e:	2b00      	cmp	r3, #0
 8012470:	f340 8101 	ble.w	8012676 <_dtoa_r+0x66e>
 8012474:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012478:	4656      	mov	r6, sl
 801247a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801247e:	4620      	mov	r0, r4
 8012480:	4629      	mov	r1, r5
 8012482:	f7ee fa0b 	bl	800089c <__aeabi_ddiv>
 8012486:	f7ee fb8f 	bl	8000ba8 <__aeabi_d2iz>
 801248a:	4680      	mov	r8, r0
 801248c:	f7ee f872 	bl	8000574 <__aeabi_i2d>
 8012490:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012494:	f7ee f8d8 	bl	8000648 <__aeabi_dmul>
 8012498:	4602      	mov	r2, r0
 801249a:	460b      	mov	r3, r1
 801249c:	4620      	mov	r0, r4
 801249e:	4629      	mov	r1, r5
 80124a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80124a4:	f7ed ff18 	bl	80002d8 <__aeabi_dsub>
 80124a8:	f806 4b01 	strb.w	r4, [r6], #1
 80124ac:	9d07      	ldr	r5, [sp, #28]
 80124ae:	eba6 040a 	sub.w	r4, r6, sl
 80124b2:	42a5      	cmp	r5, r4
 80124b4:	4602      	mov	r2, r0
 80124b6:	460b      	mov	r3, r1
 80124b8:	f040 8117 	bne.w	80126ea <_dtoa_r+0x6e2>
 80124bc:	f7ed ff0e 	bl	80002dc <__adddf3>
 80124c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80124c4:	4604      	mov	r4, r0
 80124c6:	460d      	mov	r5, r1
 80124c8:	f7ee fb4e 	bl	8000b68 <__aeabi_dcmpgt>
 80124cc:	2800      	cmp	r0, #0
 80124ce:	f040 80f9 	bne.w	80126c4 <_dtoa_r+0x6bc>
 80124d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80124d6:	4620      	mov	r0, r4
 80124d8:	4629      	mov	r1, r5
 80124da:	f7ee fb1d 	bl	8000b18 <__aeabi_dcmpeq>
 80124de:	b118      	cbz	r0, 80124e8 <_dtoa_r+0x4e0>
 80124e0:	f018 0f01 	tst.w	r8, #1
 80124e4:	f040 80ee 	bne.w	80126c4 <_dtoa_r+0x6bc>
 80124e8:	4649      	mov	r1, r9
 80124ea:	4658      	mov	r0, fp
 80124ec:	f000 fc90 	bl	8012e10 <_Bfree>
 80124f0:	2300      	movs	r3, #0
 80124f2:	7033      	strb	r3, [r6, #0]
 80124f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80124f6:	3701      	adds	r7, #1
 80124f8:	601f      	str	r7, [r3, #0]
 80124fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	f000 831d 	beq.w	8012b3c <_dtoa_r+0xb34>
 8012502:	601e      	str	r6, [r3, #0]
 8012504:	e31a      	b.n	8012b3c <_dtoa_r+0xb34>
 8012506:	07e2      	lsls	r2, r4, #31
 8012508:	d505      	bpl.n	8012516 <_dtoa_r+0x50e>
 801250a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801250e:	f7ee f89b 	bl	8000648 <__aeabi_dmul>
 8012512:	3601      	adds	r6, #1
 8012514:	2301      	movs	r3, #1
 8012516:	1064      	asrs	r4, r4, #1
 8012518:	3508      	adds	r5, #8
 801251a:	e73f      	b.n	801239c <_dtoa_r+0x394>
 801251c:	2602      	movs	r6, #2
 801251e:	e742      	b.n	80123a6 <_dtoa_r+0x39e>
 8012520:	9c07      	ldr	r4, [sp, #28]
 8012522:	9704      	str	r7, [sp, #16]
 8012524:	e761      	b.n	80123ea <_dtoa_r+0x3e2>
 8012526:	4b27      	ldr	r3, [pc, #156]	@ (80125c4 <_dtoa_r+0x5bc>)
 8012528:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801252a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801252e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012532:	4454      	add	r4, sl
 8012534:	2900      	cmp	r1, #0
 8012536:	d053      	beq.n	80125e0 <_dtoa_r+0x5d8>
 8012538:	4928      	ldr	r1, [pc, #160]	@ (80125dc <_dtoa_r+0x5d4>)
 801253a:	2000      	movs	r0, #0
 801253c:	f7ee f9ae 	bl	800089c <__aeabi_ddiv>
 8012540:	4633      	mov	r3, r6
 8012542:	462a      	mov	r2, r5
 8012544:	f7ed fec8 	bl	80002d8 <__aeabi_dsub>
 8012548:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801254c:	4656      	mov	r6, sl
 801254e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012552:	f7ee fb29 	bl	8000ba8 <__aeabi_d2iz>
 8012556:	4605      	mov	r5, r0
 8012558:	f7ee f80c 	bl	8000574 <__aeabi_i2d>
 801255c:	4602      	mov	r2, r0
 801255e:	460b      	mov	r3, r1
 8012560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012564:	f7ed feb8 	bl	80002d8 <__aeabi_dsub>
 8012568:	3530      	adds	r5, #48	@ 0x30
 801256a:	4602      	mov	r2, r0
 801256c:	460b      	mov	r3, r1
 801256e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012572:	f806 5b01 	strb.w	r5, [r6], #1
 8012576:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801257a:	f7ee fad7 	bl	8000b2c <__aeabi_dcmplt>
 801257e:	2800      	cmp	r0, #0
 8012580:	d171      	bne.n	8012666 <_dtoa_r+0x65e>
 8012582:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012586:	4911      	ldr	r1, [pc, #68]	@ (80125cc <_dtoa_r+0x5c4>)
 8012588:	2000      	movs	r0, #0
 801258a:	f7ed fea5 	bl	80002d8 <__aeabi_dsub>
 801258e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012592:	f7ee facb 	bl	8000b2c <__aeabi_dcmplt>
 8012596:	2800      	cmp	r0, #0
 8012598:	f040 8095 	bne.w	80126c6 <_dtoa_r+0x6be>
 801259c:	42a6      	cmp	r6, r4
 801259e:	f43f af50 	beq.w	8012442 <_dtoa_r+0x43a>
 80125a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80125a6:	4b0a      	ldr	r3, [pc, #40]	@ (80125d0 <_dtoa_r+0x5c8>)
 80125a8:	2200      	movs	r2, #0
 80125aa:	f7ee f84d 	bl	8000648 <__aeabi_dmul>
 80125ae:	4b08      	ldr	r3, [pc, #32]	@ (80125d0 <_dtoa_r+0x5c8>)
 80125b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80125b4:	2200      	movs	r2, #0
 80125b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125ba:	f7ee f845 	bl	8000648 <__aeabi_dmul>
 80125be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125c2:	e7c4      	b.n	801254e <_dtoa_r+0x546>
 80125c4:	08017178 	.word	0x08017178
 80125c8:	08017150 	.word	0x08017150
 80125cc:	3ff00000 	.word	0x3ff00000
 80125d0:	40240000 	.word	0x40240000
 80125d4:	401c0000 	.word	0x401c0000
 80125d8:	40140000 	.word	0x40140000
 80125dc:	3fe00000 	.word	0x3fe00000
 80125e0:	4631      	mov	r1, r6
 80125e2:	4628      	mov	r0, r5
 80125e4:	f7ee f830 	bl	8000648 <__aeabi_dmul>
 80125e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80125ec:	9415      	str	r4, [sp, #84]	@ 0x54
 80125ee:	4656      	mov	r6, sl
 80125f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125f4:	f7ee fad8 	bl	8000ba8 <__aeabi_d2iz>
 80125f8:	4605      	mov	r5, r0
 80125fa:	f7ed ffbb 	bl	8000574 <__aeabi_i2d>
 80125fe:	4602      	mov	r2, r0
 8012600:	460b      	mov	r3, r1
 8012602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012606:	f7ed fe67 	bl	80002d8 <__aeabi_dsub>
 801260a:	3530      	adds	r5, #48	@ 0x30
 801260c:	f806 5b01 	strb.w	r5, [r6], #1
 8012610:	4602      	mov	r2, r0
 8012612:	460b      	mov	r3, r1
 8012614:	42a6      	cmp	r6, r4
 8012616:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801261a:	f04f 0200 	mov.w	r2, #0
 801261e:	d124      	bne.n	801266a <_dtoa_r+0x662>
 8012620:	4bac      	ldr	r3, [pc, #688]	@ (80128d4 <_dtoa_r+0x8cc>)
 8012622:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012626:	f7ed fe59 	bl	80002dc <__adddf3>
 801262a:	4602      	mov	r2, r0
 801262c:	460b      	mov	r3, r1
 801262e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012632:	f7ee fa99 	bl	8000b68 <__aeabi_dcmpgt>
 8012636:	2800      	cmp	r0, #0
 8012638:	d145      	bne.n	80126c6 <_dtoa_r+0x6be>
 801263a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801263e:	49a5      	ldr	r1, [pc, #660]	@ (80128d4 <_dtoa_r+0x8cc>)
 8012640:	2000      	movs	r0, #0
 8012642:	f7ed fe49 	bl	80002d8 <__aeabi_dsub>
 8012646:	4602      	mov	r2, r0
 8012648:	460b      	mov	r3, r1
 801264a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801264e:	f7ee fa6d 	bl	8000b2c <__aeabi_dcmplt>
 8012652:	2800      	cmp	r0, #0
 8012654:	f43f aef5 	beq.w	8012442 <_dtoa_r+0x43a>
 8012658:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801265a:	1e73      	subs	r3, r6, #1
 801265c:	9315      	str	r3, [sp, #84]	@ 0x54
 801265e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012662:	2b30      	cmp	r3, #48	@ 0x30
 8012664:	d0f8      	beq.n	8012658 <_dtoa_r+0x650>
 8012666:	9f04      	ldr	r7, [sp, #16]
 8012668:	e73e      	b.n	80124e8 <_dtoa_r+0x4e0>
 801266a:	4b9b      	ldr	r3, [pc, #620]	@ (80128d8 <_dtoa_r+0x8d0>)
 801266c:	f7ed ffec 	bl	8000648 <__aeabi_dmul>
 8012670:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012674:	e7bc      	b.n	80125f0 <_dtoa_r+0x5e8>
 8012676:	d10c      	bne.n	8012692 <_dtoa_r+0x68a>
 8012678:	4b98      	ldr	r3, [pc, #608]	@ (80128dc <_dtoa_r+0x8d4>)
 801267a:	2200      	movs	r2, #0
 801267c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012680:	f7ed ffe2 	bl	8000648 <__aeabi_dmul>
 8012684:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012688:	f7ee fa64 	bl	8000b54 <__aeabi_dcmpge>
 801268c:	2800      	cmp	r0, #0
 801268e:	f000 8157 	beq.w	8012940 <_dtoa_r+0x938>
 8012692:	2400      	movs	r4, #0
 8012694:	4625      	mov	r5, r4
 8012696:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012698:	43db      	mvns	r3, r3
 801269a:	9304      	str	r3, [sp, #16]
 801269c:	4656      	mov	r6, sl
 801269e:	2700      	movs	r7, #0
 80126a0:	4621      	mov	r1, r4
 80126a2:	4658      	mov	r0, fp
 80126a4:	f000 fbb4 	bl	8012e10 <_Bfree>
 80126a8:	2d00      	cmp	r5, #0
 80126aa:	d0dc      	beq.n	8012666 <_dtoa_r+0x65e>
 80126ac:	b12f      	cbz	r7, 80126ba <_dtoa_r+0x6b2>
 80126ae:	42af      	cmp	r7, r5
 80126b0:	d003      	beq.n	80126ba <_dtoa_r+0x6b2>
 80126b2:	4639      	mov	r1, r7
 80126b4:	4658      	mov	r0, fp
 80126b6:	f000 fbab 	bl	8012e10 <_Bfree>
 80126ba:	4629      	mov	r1, r5
 80126bc:	4658      	mov	r0, fp
 80126be:	f000 fba7 	bl	8012e10 <_Bfree>
 80126c2:	e7d0      	b.n	8012666 <_dtoa_r+0x65e>
 80126c4:	9704      	str	r7, [sp, #16]
 80126c6:	4633      	mov	r3, r6
 80126c8:	461e      	mov	r6, r3
 80126ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80126ce:	2a39      	cmp	r2, #57	@ 0x39
 80126d0:	d107      	bne.n	80126e2 <_dtoa_r+0x6da>
 80126d2:	459a      	cmp	sl, r3
 80126d4:	d1f8      	bne.n	80126c8 <_dtoa_r+0x6c0>
 80126d6:	9a04      	ldr	r2, [sp, #16]
 80126d8:	3201      	adds	r2, #1
 80126da:	9204      	str	r2, [sp, #16]
 80126dc:	2230      	movs	r2, #48	@ 0x30
 80126de:	f88a 2000 	strb.w	r2, [sl]
 80126e2:	781a      	ldrb	r2, [r3, #0]
 80126e4:	3201      	adds	r2, #1
 80126e6:	701a      	strb	r2, [r3, #0]
 80126e8:	e7bd      	b.n	8012666 <_dtoa_r+0x65e>
 80126ea:	4b7b      	ldr	r3, [pc, #492]	@ (80128d8 <_dtoa_r+0x8d0>)
 80126ec:	2200      	movs	r2, #0
 80126ee:	f7ed ffab 	bl	8000648 <__aeabi_dmul>
 80126f2:	2200      	movs	r2, #0
 80126f4:	2300      	movs	r3, #0
 80126f6:	4604      	mov	r4, r0
 80126f8:	460d      	mov	r5, r1
 80126fa:	f7ee fa0d 	bl	8000b18 <__aeabi_dcmpeq>
 80126fe:	2800      	cmp	r0, #0
 8012700:	f43f aebb 	beq.w	801247a <_dtoa_r+0x472>
 8012704:	e6f0      	b.n	80124e8 <_dtoa_r+0x4e0>
 8012706:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012708:	2a00      	cmp	r2, #0
 801270a:	f000 80db 	beq.w	80128c4 <_dtoa_r+0x8bc>
 801270e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012710:	2a01      	cmp	r2, #1
 8012712:	f300 80bf 	bgt.w	8012894 <_dtoa_r+0x88c>
 8012716:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012718:	2a00      	cmp	r2, #0
 801271a:	f000 80b7 	beq.w	801288c <_dtoa_r+0x884>
 801271e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012722:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012724:	4646      	mov	r6, r8
 8012726:	9a08      	ldr	r2, [sp, #32]
 8012728:	2101      	movs	r1, #1
 801272a:	441a      	add	r2, r3
 801272c:	4658      	mov	r0, fp
 801272e:	4498      	add	r8, r3
 8012730:	9208      	str	r2, [sp, #32]
 8012732:	f000 fc6b 	bl	801300c <__i2b>
 8012736:	4605      	mov	r5, r0
 8012738:	b15e      	cbz	r6, 8012752 <_dtoa_r+0x74a>
 801273a:	9b08      	ldr	r3, [sp, #32]
 801273c:	2b00      	cmp	r3, #0
 801273e:	dd08      	ble.n	8012752 <_dtoa_r+0x74a>
 8012740:	42b3      	cmp	r3, r6
 8012742:	9a08      	ldr	r2, [sp, #32]
 8012744:	bfa8      	it	ge
 8012746:	4633      	movge	r3, r6
 8012748:	eba8 0803 	sub.w	r8, r8, r3
 801274c:	1af6      	subs	r6, r6, r3
 801274e:	1ad3      	subs	r3, r2, r3
 8012750:	9308      	str	r3, [sp, #32]
 8012752:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012754:	b1f3      	cbz	r3, 8012794 <_dtoa_r+0x78c>
 8012756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012758:	2b00      	cmp	r3, #0
 801275a:	f000 80b7 	beq.w	80128cc <_dtoa_r+0x8c4>
 801275e:	b18c      	cbz	r4, 8012784 <_dtoa_r+0x77c>
 8012760:	4629      	mov	r1, r5
 8012762:	4622      	mov	r2, r4
 8012764:	4658      	mov	r0, fp
 8012766:	f000 fd11 	bl	801318c <__pow5mult>
 801276a:	464a      	mov	r2, r9
 801276c:	4601      	mov	r1, r0
 801276e:	4605      	mov	r5, r0
 8012770:	4658      	mov	r0, fp
 8012772:	f000 fc61 	bl	8013038 <__multiply>
 8012776:	4649      	mov	r1, r9
 8012778:	9004      	str	r0, [sp, #16]
 801277a:	4658      	mov	r0, fp
 801277c:	f000 fb48 	bl	8012e10 <_Bfree>
 8012780:	9b04      	ldr	r3, [sp, #16]
 8012782:	4699      	mov	r9, r3
 8012784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012786:	1b1a      	subs	r2, r3, r4
 8012788:	d004      	beq.n	8012794 <_dtoa_r+0x78c>
 801278a:	4649      	mov	r1, r9
 801278c:	4658      	mov	r0, fp
 801278e:	f000 fcfd 	bl	801318c <__pow5mult>
 8012792:	4681      	mov	r9, r0
 8012794:	2101      	movs	r1, #1
 8012796:	4658      	mov	r0, fp
 8012798:	f000 fc38 	bl	801300c <__i2b>
 801279c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801279e:	4604      	mov	r4, r0
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	f000 81cf 	beq.w	8012b44 <_dtoa_r+0xb3c>
 80127a6:	461a      	mov	r2, r3
 80127a8:	4601      	mov	r1, r0
 80127aa:	4658      	mov	r0, fp
 80127ac:	f000 fcee 	bl	801318c <__pow5mult>
 80127b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127b2:	2b01      	cmp	r3, #1
 80127b4:	4604      	mov	r4, r0
 80127b6:	f300 8095 	bgt.w	80128e4 <_dtoa_r+0x8dc>
 80127ba:	9b02      	ldr	r3, [sp, #8]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	f040 8087 	bne.w	80128d0 <_dtoa_r+0x8c8>
 80127c2:	9b03      	ldr	r3, [sp, #12]
 80127c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	f040 8089 	bne.w	80128e0 <_dtoa_r+0x8d8>
 80127ce:	9b03      	ldr	r3, [sp, #12]
 80127d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80127d4:	0d1b      	lsrs	r3, r3, #20
 80127d6:	051b      	lsls	r3, r3, #20
 80127d8:	b12b      	cbz	r3, 80127e6 <_dtoa_r+0x7de>
 80127da:	9b08      	ldr	r3, [sp, #32]
 80127dc:	3301      	adds	r3, #1
 80127de:	9308      	str	r3, [sp, #32]
 80127e0:	f108 0801 	add.w	r8, r8, #1
 80127e4:	2301      	movs	r3, #1
 80127e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80127e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	f000 81b0 	beq.w	8012b50 <_dtoa_r+0xb48>
 80127f0:	6923      	ldr	r3, [r4, #16]
 80127f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80127f6:	6918      	ldr	r0, [r3, #16]
 80127f8:	f000 fbbc 	bl	8012f74 <__hi0bits>
 80127fc:	f1c0 0020 	rsb	r0, r0, #32
 8012800:	9b08      	ldr	r3, [sp, #32]
 8012802:	4418      	add	r0, r3
 8012804:	f010 001f 	ands.w	r0, r0, #31
 8012808:	d077      	beq.n	80128fa <_dtoa_r+0x8f2>
 801280a:	f1c0 0320 	rsb	r3, r0, #32
 801280e:	2b04      	cmp	r3, #4
 8012810:	dd6b      	ble.n	80128ea <_dtoa_r+0x8e2>
 8012812:	9b08      	ldr	r3, [sp, #32]
 8012814:	f1c0 001c 	rsb	r0, r0, #28
 8012818:	4403      	add	r3, r0
 801281a:	4480      	add	r8, r0
 801281c:	4406      	add	r6, r0
 801281e:	9308      	str	r3, [sp, #32]
 8012820:	f1b8 0f00 	cmp.w	r8, #0
 8012824:	dd05      	ble.n	8012832 <_dtoa_r+0x82a>
 8012826:	4649      	mov	r1, r9
 8012828:	4642      	mov	r2, r8
 801282a:	4658      	mov	r0, fp
 801282c:	f000 fd08 	bl	8013240 <__lshift>
 8012830:	4681      	mov	r9, r0
 8012832:	9b08      	ldr	r3, [sp, #32]
 8012834:	2b00      	cmp	r3, #0
 8012836:	dd05      	ble.n	8012844 <_dtoa_r+0x83c>
 8012838:	4621      	mov	r1, r4
 801283a:	461a      	mov	r2, r3
 801283c:	4658      	mov	r0, fp
 801283e:	f000 fcff 	bl	8013240 <__lshift>
 8012842:	4604      	mov	r4, r0
 8012844:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012846:	2b00      	cmp	r3, #0
 8012848:	d059      	beq.n	80128fe <_dtoa_r+0x8f6>
 801284a:	4621      	mov	r1, r4
 801284c:	4648      	mov	r0, r9
 801284e:	f000 fd63 	bl	8013318 <__mcmp>
 8012852:	2800      	cmp	r0, #0
 8012854:	da53      	bge.n	80128fe <_dtoa_r+0x8f6>
 8012856:	1e7b      	subs	r3, r7, #1
 8012858:	9304      	str	r3, [sp, #16]
 801285a:	4649      	mov	r1, r9
 801285c:	2300      	movs	r3, #0
 801285e:	220a      	movs	r2, #10
 8012860:	4658      	mov	r0, fp
 8012862:	f000 faf7 	bl	8012e54 <__multadd>
 8012866:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012868:	4681      	mov	r9, r0
 801286a:	2b00      	cmp	r3, #0
 801286c:	f000 8172 	beq.w	8012b54 <_dtoa_r+0xb4c>
 8012870:	2300      	movs	r3, #0
 8012872:	4629      	mov	r1, r5
 8012874:	220a      	movs	r2, #10
 8012876:	4658      	mov	r0, fp
 8012878:	f000 faec 	bl	8012e54 <__multadd>
 801287c:	9b00      	ldr	r3, [sp, #0]
 801287e:	2b00      	cmp	r3, #0
 8012880:	4605      	mov	r5, r0
 8012882:	dc67      	bgt.n	8012954 <_dtoa_r+0x94c>
 8012884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012886:	2b02      	cmp	r3, #2
 8012888:	dc41      	bgt.n	801290e <_dtoa_r+0x906>
 801288a:	e063      	b.n	8012954 <_dtoa_r+0x94c>
 801288c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801288e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012892:	e746      	b.n	8012722 <_dtoa_r+0x71a>
 8012894:	9b07      	ldr	r3, [sp, #28]
 8012896:	1e5c      	subs	r4, r3, #1
 8012898:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801289a:	42a3      	cmp	r3, r4
 801289c:	bfbf      	itttt	lt
 801289e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80128a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80128a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80128a4:	1ae3      	sublt	r3, r4, r3
 80128a6:	bfb4      	ite	lt
 80128a8:	18d2      	addlt	r2, r2, r3
 80128aa:	1b1c      	subge	r4, r3, r4
 80128ac:	9b07      	ldr	r3, [sp, #28]
 80128ae:	bfbc      	itt	lt
 80128b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80128b2:	2400      	movlt	r4, #0
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	bfb5      	itete	lt
 80128b8:	eba8 0603 	sublt.w	r6, r8, r3
 80128bc:	9b07      	ldrge	r3, [sp, #28]
 80128be:	2300      	movlt	r3, #0
 80128c0:	4646      	movge	r6, r8
 80128c2:	e730      	b.n	8012726 <_dtoa_r+0x71e>
 80128c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80128c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80128c8:	4646      	mov	r6, r8
 80128ca:	e735      	b.n	8012738 <_dtoa_r+0x730>
 80128cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80128ce:	e75c      	b.n	801278a <_dtoa_r+0x782>
 80128d0:	2300      	movs	r3, #0
 80128d2:	e788      	b.n	80127e6 <_dtoa_r+0x7de>
 80128d4:	3fe00000 	.word	0x3fe00000
 80128d8:	40240000 	.word	0x40240000
 80128dc:	40140000 	.word	0x40140000
 80128e0:	9b02      	ldr	r3, [sp, #8]
 80128e2:	e780      	b.n	80127e6 <_dtoa_r+0x7de>
 80128e4:	2300      	movs	r3, #0
 80128e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80128e8:	e782      	b.n	80127f0 <_dtoa_r+0x7e8>
 80128ea:	d099      	beq.n	8012820 <_dtoa_r+0x818>
 80128ec:	9a08      	ldr	r2, [sp, #32]
 80128ee:	331c      	adds	r3, #28
 80128f0:	441a      	add	r2, r3
 80128f2:	4498      	add	r8, r3
 80128f4:	441e      	add	r6, r3
 80128f6:	9208      	str	r2, [sp, #32]
 80128f8:	e792      	b.n	8012820 <_dtoa_r+0x818>
 80128fa:	4603      	mov	r3, r0
 80128fc:	e7f6      	b.n	80128ec <_dtoa_r+0x8e4>
 80128fe:	9b07      	ldr	r3, [sp, #28]
 8012900:	9704      	str	r7, [sp, #16]
 8012902:	2b00      	cmp	r3, #0
 8012904:	dc20      	bgt.n	8012948 <_dtoa_r+0x940>
 8012906:	9300      	str	r3, [sp, #0]
 8012908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801290a:	2b02      	cmp	r3, #2
 801290c:	dd1e      	ble.n	801294c <_dtoa_r+0x944>
 801290e:	9b00      	ldr	r3, [sp, #0]
 8012910:	2b00      	cmp	r3, #0
 8012912:	f47f aec0 	bne.w	8012696 <_dtoa_r+0x68e>
 8012916:	4621      	mov	r1, r4
 8012918:	2205      	movs	r2, #5
 801291a:	4658      	mov	r0, fp
 801291c:	f000 fa9a 	bl	8012e54 <__multadd>
 8012920:	4601      	mov	r1, r0
 8012922:	4604      	mov	r4, r0
 8012924:	4648      	mov	r0, r9
 8012926:	f000 fcf7 	bl	8013318 <__mcmp>
 801292a:	2800      	cmp	r0, #0
 801292c:	f77f aeb3 	ble.w	8012696 <_dtoa_r+0x68e>
 8012930:	4656      	mov	r6, sl
 8012932:	2331      	movs	r3, #49	@ 0x31
 8012934:	f806 3b01 	strb.w	r3, [r6], #1
 8012938:	9b04      	ldr	r3, [sp, #16]
 801293a:	3301      	adds	r3, #1
 801293c:	9304      	str	r3, [sp, #16]
 801293e:	e6ae      	b.n	801269e <_dtoa_r+0x696>
 8012940:	9c07      	ldr	r4, [sp, #28]
 8012942:	9704      	str	r7, [sp, #16]
 8012944:	4625      	mov	r5, r4
 8012946:	e7f3      	b.n	8012930 <_dtoa_r+0x928>
 8012948:	9b07      	ldr	r3, [sp, #28]
 801294a:	9300      	str	r3, [sp, #0]
 801294c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801294e:	2b00      	cmp	r3, #0
 8012950:	f000 8104 	beq.w	8012b5c <_dtoa_r+0xb54>
 8012954:	2e00      	cmp	r6, #0
 8012956:	dd05      	ble.n	8012964 <_dtoa_r+0x95c>
 8012958:	4629      	mov	r1, r5
 801295a:	4632      	mov	r2, r6
 801295c:	4658      	mov	r0, fp
 801295e:	f000 fc6f 	bl	8013240 <__lshift>
 8012962:	4605      	mov	r5, r0
 8012964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012966:	2b00      	cmp	r3, #0
 8012968:	d05a      	beq.n	8012a20 <_dtoa_r+0xa18>
 801296a:	6869      	ldr	r1, [r5, #4]
 801296c:	4658      	mov	r0, fp
 801296e:	f000 fa0f 	bl	8012d90 <_Balloc>
 8012972:	4606      	mov	r6, r0
 8012974:	b928      	cbnz	r0, 8012982 <_dtoa_r+0x97a>
 8012976:	4b84      	ldr	r3, [pc, #528]	@ (8012b88 <_dtoa_r+0xb80>)
 8012978:	4602      	mov	r2, r0
 801297a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801297e:	f7ff bb5a 	b.w	8012036 <_dtoa_r+0x2e>
 8012982:	692a      	ldr	r2, [r5, #16]
 8012984:	3202      	adds	r2, #2
 8012986:	0092      	lsls	r2, r2, #2
 8012988:	f105 010c 	add.w	r1, r5, #12
 801298c:	300c      	adds	r0, #12
 801298e:	f7ff fa9c 	bl	8011eca <memcpy>
 8012992:	2201      	movs	r2, #1
 8012994:	4631      	mov	r1, r6
 8012996:	4658      	mov	r0, fp
 8012998:	f000 fc52 	bl	8013240 <__lshift>
 801299c:	f10a 0301 	add.w	r3, sl, #1
 80129a0:	9307      	str	r3, [sp, #28]
 80129a2:	9b00      	ldr	r3, [sp, #0]
 80129a4:	4453      	add	r3, sl
 80129a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80129a8:	9b02      	ldr	r3, [sp, #8]
 80129aa:	f003 0301 	and.w	r3, r3, #1
 80129ae:	462f      	mov	r7, r5
 80129b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80129b2:	4605      	mov	r5, r0
 80129b4:	9b07      	ldr	r3, [sp, #28]
 80129b6:	4621      	mov	r1, r4
 80129b8:	3b01      	subs	r3, #1
 80129ba:	4648      	mov	r0, r9
 80129bc:	9300      	str	r3, [sp, #0]
 80129be:	f7ff fa99 	bl	8011ef4 <quorem>
 80129c2:	4639      	mov	r1, r7
 80129c4:	9002      	str	r0, [sp, #8]
 80129c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80129ca:	4648      	mov	r0, r9
 80129cc:	f000 fca4 	bl	8013318 <__mcmp>
 80129d0:	462a      	mov	r2, r5
 80129d2:	9008      	str	r0, [sp, #32]
 80129d4:	4621      	mov	r1, r4
 80129d6:	4658      	mov	r0, fp
 80129d8:	f000 fcba 	bl	8013350 <__mdiff>
 80129dc:	68c2      	ldr	r2, [r0, #12]
 80129de:	4606      	mov	r6, r0
 80129e0:	bb02      	cbnz	r2, 8012a24 <_dtoa_r+0xa1c>
 80129e2:	4601      	mov	r1, r0
 80129e4:	4648      	mov	r0, r9
 80129e6:	f000 fc97 	bl	8013318 <__mcmp>
 80129ea:	4602      	mov	r2, r0
 80129ec:	4631      	mov	r1, r6
 80129ee:	4658      	mov	r0, fp
 80129f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80129f2:	f000 fa0d 	bl	8012e10 <_Bfree>
 80129f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80129fa:	9e07      	ldr	r6, [sp, #28]
 80129fc:	ea43 0102 	orr.w	r1, r3, r2
 8012a00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a02:	4319      	orrs	r1, r3
 8012a04:	d110      	bne.n	8012a28 <_dtoa_r+0xa20>
 8012a06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012a0a:	d029      	beq.n	8012a60 <_dtoa_r+0xa58>
 8012a0c:	9b08      	ldr	r3, [sp, #32]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	dd02      	ble.n	8012a18 <_dtoa_r+0xa10>
 8012a12:	9b02      	ldr	r3, [sp, #8]
 8012a14:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012a18:	9b00      	ldr	r3, [sp, #0]
 8012a1a:	f883 8000 	strb.w	r8, [r3]
 8012a1e:	e63f      	b.n	80126a0 <_dtoa_r+0x698>
 8012a20:	4628      	mov	r0, r5
 8012a22:	e7bb      	b.n	801299c <_dtoa_r+0x994>
 8012a24:	2201      	movs	r2, #1
 8012a26:	e7e1      	b.n	80129ec <_dtoa_r+0x9e4>
 8012a28:	9b08      	ldr	r3, [sp, #32]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	db04      	blt.n	8012a38 <_dtoa_r+0xa30>
 8012a2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012a30:	430b      	orrs	r3, r1
 8012a32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012a34:	430b      	orrs	r3, r1
 8012a36:	d120      	bne.n	8012a7a <_dtoa_r+0xa72>
 8012a38:	2a00      	cmp	r2, #0
 8012a3a:	dded      	ble.n	8012a18 <_dtoa_r+0xa10>
 8012a3c:	4649      	mov	r1, r9
 8012a3e:	2201      	movs	r2, #1
 8012a40:	4658      	mov	r0, fp
 8012a42:	f000 fbfd 	bl	8013240 <__lshift>
 8012a46:	4621      	mov	r1, r4
 8012a48:	4681      	mov	r9, r0
 8012a4a:	f000 fc65 	bl	8013318 <__mcmp>
 8012a4e:	2800      	cmp	r0, #0
 8012a50:	dc03      	bgt.n	8012a5a <_dtoa_r+0xa52>
 8012a52:	d1e1      	bne.n	8012a18 <_dtoa_r+0xa10>
 8012a54:	f018 0f01 	tst.w	r8, #1
 8012a58:	d0de      	beq.n	8012a18 <_dtoa_r+0xa10>
 8012a5a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012a5e:	d1d8      	bne.n	8012a12 <_dtoa_r+0xa0a>
 8012a60:	9a00      	ldr	r2, [sp, #0]
 8012a62:	2339      	movs	r3, #57	@ 0x39
 8012a64:	7013      	strb	r3, [r2, #0]
 8012a66:	4633      	mov	r3, r6
 8012a68:	461e      	mov	r6, r3
 8012a6a:	3b01      	subs	r3, #1
 8012a6c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012a70:	2a39      	cmp	r2, #57	@ 0x39
 8012a72:	d052      	beq.n	8012b1a <_dtoa_r+0xb12>
 8012a74:	3201      	adds	r2, #1
 8012a76:	701a      	strb	r2, [r3, #0]
 8012a78:	e612      	b.n	80126a0 <_dtoa_r+0x698>
 8012a7a:	2a00      	cmp	r2, #0
 8012a7c:	dd07      	ble.n	8012a8e <_dtoa_r+0xa86>
 8012a7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012a82:	d0ed      	beq.n	8012a60 <_dtoa_r+0xa58>
 8012a84:	9a00      	ldr	r2, [sp, #0]
 8012a86:	f108 0301 	add.w	r3, r8, #1
 8012a8a:	7013      	strb	r3, [r2, #0]
 8012a8c:	e608      	b.n	80126a0 <_dtoa_r+0x698>
 8012a8e:	9b07      	ldr	r3, [sp, #28]
 8012a90:	9a07      	ldr	r2, [sp, #28]
 8012a92:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012a96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012a98:	4293      	cmp	r3, r2
 8012a9a:	d028      	beq.n	8012aee <_dtoa_r+0xae6>
 8012a9c:	4649      	mov	r1, r9
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	220a      	movs	r2, #10
 8012aa2:	4658      	mov	r0, fp
 8012aa4:	f000 f9d6 	bl	8012e54 <__multadd>
 8012aa8:	42af      	cmp	r7, r5
 8012aaa:	4681      	mov	r9, r0
 8012aac:	f04f 0300 	mov.w	r3, #0
 8012ab0:	f04f 020a 	mov.w	r2, #10
 8012ab4:	4639      	mov	r1, r7
 8012ab6:	4658      	mov	r0, fp
 8012ab8:	d107      	bne.n	8012aca <_dtoa_r+0xac2>
 8012aba:	f000 f9cb 	bl	8012e54 <__multadd>
 8012abe:	4607      	mov	r7, r0
 8012ac0:	4605      	mov	r5, r0
 8012ac2:	9b07      	ldr	r3, [sp, #28]
 8012ac4:	3301      	adds	r3, #1
 8012ac6:	9307      	str	r3, [sp, #28]
 8012ac8:	e774      	b.n	80129b4 <_dtoa_r+0x9ac>
 8012aca:	f000 f9c3 	bl	8012e54 <__multadd>
 8012ace:	4629      	mov	r1, r5
 8012ad0:	4607      	mov	r7, r0
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	220a      	movs	r2, #10
 8012ad6:	4658      	mov	r0, fp
 8012ad8:	f000 f9bc 	bl	8012e54 <__multadd>
 8012adc:	4605      	mov	r5, r0
 8012ade:	e7f0      	b.n	8012ac2 <_dtoa_r+0xaba>
 8012ae0:	9b00      	ldr	r3, [sp, #0]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	bfcc      	ite	gt
 8012ae6:	461e      	movgt	r6, r3
 8012ae8:	2601      	movle	r6, #1
 8012aea:	4456      	add	r6, sl
 8012aec:	2700      	movs	r7, #0
 8012aee:	4649      	mov	r1, r9
 8012af0:	2201      	movs	r2, #1
 8012af2:	4658      	mov	r0, fp
 8012af4:	f000 fba4 	bl	8013240 <__lshift>
 8012af8:	4621      	mov	r1, r4
 8012afa:	4681      	mov	r9, r0
 8012afc:	f000 fc0c 	bl	8013318 <__mcmp>
 8012b00:	2800      	cmp	r0, #0
 8012b02:	dcb0      	bgt.n	8012a66 <_dtoa_r+0xa5e>
 8012b04:	d102      	bne.n	8012b0c <_dtoa_r+0xb04>
 8012b06:	f018 0f01 	tst.w	r8, #1
 8012b0a:	d1ac      	bne.n	8012a66 <_dtoa_r+0xa5e>
 8012b0c:	4633      	mov	r3, r6
 8012b0e:	461e      	mov	r6, r3
 8012b10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b14:	2a30      	cmp	r2, #48	@ 0x30
 8012b16:	d0fa      	beq.n	8012b0e <_dtoa_r+0xb06>
 8012b18:	e5c2      	b.n	80126a0 <_dtoa_r+0x698>
 8012b1a:	459a      	cmp	sl, r3
 8012b1c:	d1a4      	bne.n	8012a68 <_dtoa_r+0xa60>
 8012b1e:	9b04      	ldr	r3, [sp, #16]
 8012b20:	3301      	adds	r3, #1
 8012b22:	9304      	str	r3, [sp, #16]
 8012b24:	2331      	movs	r3, #49	@ 0x31
 8012b26:	f88a 3000 	strb.w	r3, [sl]
 8012b2a:	e5b9      	b.n	80126a0 <_dtoa_r+0x698>
 8012b2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012b2e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012b8c <_dtoa_r+0xb84>
 8012b32:	b11b      	cbz	r3, 8012b3c <_dtoa_r+0xb34>
 8012b34:	f10a 0308 	add.w	r3, sl, #8
 8012b38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012b3a:	6013      	str	r3, [r2, #0]
 8012b3c:	4650      	mov	r0, sl
 8012b3e:	b019      	add	sp, #100	@ 0x64
 8012b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b46:	2b01      	cmp	r3, #1
 8012b48:	f77f ae37 	ble.w	80127ba <_dtoa_r+0x7b2>
 8012b4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012b50:	2001      	movs	r0, #1
 8012b52:	e655      	b.n	8012800 <_dtoa_r+0x7f8>
 8012b54:	9b00      	ldr	r3, [sp, #0]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	f77f aed6 	ble.w	8012908 <_dtoa_r+0x900>
 8012b5c:	4656      	mov	r6, sl
 8012b5e:	4621      	mov	r1, r4
 8012b60:	4648      	mov	r0, r9
 8012b62:	f7ff f9c7 	bl	8011ef4 <quorem>
 8012b66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012b6a:	f806 8b01 	strb.w	r8, [r6], #1
 8012b6e:	9b00      	ldr	r3, [sp, #0]
 8012b70:	eba6 020a 	sub.w	r2, r6, sl
 8012b74:	4293      	cmp	r3, r2
 8012b76:	ddb3      	ble.n	8012ae0 <_dtoa_r+0xad8>
 8012b78:	4649      	mov	r1, r9
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	220a      	movs	r2, #10
 8012b7e:	4658      	mov	r0, fp
 8012b80:	f000 f968 	bl	8012e54 <__multadd>
 8012b84:	4681      	mov	r9, r0
 8012b86:	e7ea      	b.n	8012b5e <_dtoa_r+0xb56>
 8012b88:	080170d3 	.word	0x080170d3
 8012b8c:	08017057 	.word	0x08017057

08012b90 <_free_r>:
 8012b90:	b538      	push	{r3, r4, r5, lr}
 8012b92:	4605      	mov	r5, r0
 8012b94:	2900      	cmp	r1, #0
 8012b96:	d041      	beq.n	8012c1c <_free_r+0x8c>
 8012b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b9c:	1f0c      	subs	r4, r1, #4
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	bfb8      	it	lt
 8012ba2:	18e4      	addlt	r4, r4, r3
 8012ba4:	f000 f8e8 	bl	8012d78 <__malloc_lock>
 8012ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8012c20 <_free_r+0x90>)
 8012baa:	6813      	ldr	r3, [r2, #0]
 8012bac:	b933      	cbnz	r3, 8012bbc <_free_r+0x2c>
 8012bae:	6063      	str	r3, [r4, #4]
 8012bb0:	6014      	str	r4, [r2, #0]
 8012bb2:	4628      	mov	r0, r5
 8012bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bb8:	f000 b8e4 	b.w	8012d84 <__malloc_unlock>
 8012bbc:	42a3      	cmp	r3, r4
 8012bbe:	d908      	bls.n	8012bd2 <_free_r+0x42>
 8012bc0:	6820      	ldr	r0, [r4, #0]
 8012bc2:	1821      	adds	r1, r4, r0
 8012bc4:	428b      	cmp	r3, r1
 8012bc6:	bf01      	itttt	eq
 8012bc8:	6819      	ldreq	r1, [r3, #0]
 8012bca:	685b      	ldreq	r3, [r3, #4]
 8012bcc:	1809      	addeq	r1, r1, r0
 8012bce:	6021      	streq	r1, [r4, #0]
 8012bd0:	e7ed      	b.n	8012bae <_free_r+0x1e>
 8012bd2:	461a      	mov	r2, r3
 8012bd4:	685b      	ldr	r3, [r3, #4]
 8012bd6:	b10b      	cbz	r3, 8012bdc <_free_r+0x4c>
 8012bd8:	42a3      	cmp	r3, r4
 8012bda:	d9fa      	bls.n	8012bd2 <_free_r+0x42>
 8012bdc:	6811      	ldr	r1, [r2, #0]
 8012bde:	1850      	adds	r0, r2, r1
 8012be0:	42a0      	cmp	r0, r4
 8012be2:	d10b      	bne.n	8012bfc <_free_r+0x6c>
 8012be4:	6820      	ldr	r0, [r4, #0]
 8012be6:	4401      	add	r1, r0
 8012be8:	1850      	adds	r0, r2, r1
 8012bea:	4283      	cmp	r3, r0
 8012bec:	6011      	str	r1, [r2, #0]
 8012bee:	d1e0      	bne.n	8012bb2 <_free_r+0x22>
 8012bf0:	6818      	ldr	r0, [r3, #0]
 8012bf2:	685b      	ldr	r3, [r3, #4]
 8012bf4:	6053      	str	r3, [r2, #4]
 8012bf6:	4408      	add	r0, r1
 8012bf8:	6010      	str	r0, [r2, #0]
 8012bfa:	e7da      	b.n	8012bb2 <_free_r+0x22>
 8012bfc:	d902      	bls.n	8012c04 <_free_r+0x74>
 8012bfe:	230c      	movs	r3, #12
 8012c00:	602b      	str	r3, [r5, #0]
 8012c02:	e7d6      	b.n	8012bb2 <_free_r+0x22>
 8012c04:	6820      	ldr	r0, [r4, #0]
 8012c06:	1821      	adds	r1, r4, r0
 8012c08:	428b      	cmp	r3, r1
 8012c0a:	bf04      	itt	eq
 8012c0c:	6819      	ldreq	r1, [r3, #0]
 8012c0e:	685b      	ldreq	r3, [r3, #4]
 8012c10:	6063      	str	r3, [r4, #4]
 8012c12:	bf04      	itt	eq
 8012c14:	1809      	addeq	r1, r1, r0
 8012c16:	6021      	streq	r1, [r4, #0]
 8012c18:	6054      	str	r4, [r2, #4]
 8012c1a:	e7ca      	b.n	8012bb2 <_free_r+0x22>
 8012c1c:	bd38      	pop	{r3, r4, r5, pc}
 8012c1e:	bf00      	nop
 8012c20:	200026d8 	.word	0x200026d8

08012c24 <malloc>:
 8012c24:	4b02      	ldr	r3, [pc, #8]	@ (8012c30 <malloc+0xc>)
 8012c26:	4601      	mov	r1, r0
 8012c28:	6818      	ldr	r0, [r3, #0]
 8012c2a:	f000 b825 	b.w	8012c78 <_malloc_r>
 8012c2e:	bf00      	nop
 8012c30:	200001e8 	.word	0x200001e8

08012c34 <sbrk_aligned>:
 8012c34:	b570      	push	{r4, r5, r6, lr}
 8012c36:	4e0f      	ldr	r6, [pc, #60]	@ (8012c74 <sbrk_aligned+0x40>)
 8012c38:	460c      	mov	r4, r1
 8012c3a:	6831      	ldr	r1, [r6, #0]
 8012c3c:	4605      	mov	r5, r0
 8012c3e:	b911      	cbnz	r1, 8012c46 <sbrk_aligned+0x12>
 8012c40:	f002 f988 	bl	8014f54 <_sbrk_r>
 8012c44:	6030      	str	r0, [r6, #0]
 8012c46:	4621      	mov	r1, r4
 8012c48:	4628      	mov	r0, r5
 8012c4a:	f002 f983 	bl	8014f54 <_sbrk_r>
 8012c4e:	1c43      	adds	r3, r0, #1
 8012c50:	d103      	bne.n	8012c5a <sbrk_aligned+0x26>
 8012c52:	f04f 34ff 	mov.w	r4, #4294967295
 8012c56:	4620      	mov	r0, r4
 8012c58:	bd70      	pop	{r4, r5, r6, pc}
 8012c5a:	1cc4      	adds	r4, r0, #3
 8012c5c:	f024 0403 	bic.w	r4, r4, #3
 8012c60:	42a0      	cmp	r0, r4
 8012c62:	d0f8      	beq.n	8012c56 <sbrk_aligned+0x22>
 8012c64:	1a21      	subs	r1, r4, r0
 8012c66:	4628      	mov	r0, r5
 8012c68:	f002 f974 	bl	8014f54 <_sbrk_r>
 8012c6c:	3001      	adds	r0, #1
 8012c6e:	d1f2      	bne.n	8012c56 <sbrk_aligned+0x22>
 8012c70:	e7ef      	b.n	8012c52 <sbrk_aligned+0x1e>
 8012c72:	bf00      	nop
 8012c74:	200026d4 	.word	0x200026d4

08012c78 <_malloc_r>:
 8012c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c7c:	1ccd      	adds	r5, r1, #3
 8012c7e:	f025 0503 	bic.w	r5, r5, #3
 8012c82:	3508      	adds	r5, #8
 8012c84:	2d0c      	cmp	r5, #12
 8012c86:	bf38      	it	cc
 8012c88:	250c      	movcc	r5, #12
 8012c8a:	2d00      	cmp	r5, #0
 8012c8c:	4606      	mov	r6, r0
 8012c8e:	db01      	blt.n	8012c94 <_malloc_r+0x1c>
 8012c90:	42a9      	cmp	r1, r5
 8012c92:	d904      	bls.n	8012c9e <_malloc_r+0x26>
 8012c94:	230c      	movs	r3, #12
 8012c96:	6033      	str	r3, [r6, #0]
 8012c98:	2000      	movs	r0, #0
 8012c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012d74 <_malloc_r+0xfc>
 8012ca2:	f000 f869 	bl	8012d78 <__malloc_lock>
 8012ca6:	f8d8 3000 	ldr.w	r3, [r8]
 8012caa:	461c      	mov	r4, r3
 8012cac:	bb44      	cbnz	r4, 8012d00 <_malloc_r+0x88>
 8012cae:	4629      	mov	r1, r5
 8012cb0:	4630      	mov	r0, r6
 8012cb2:	f7ff ffbf 	bl	8012c34 <sbrk_aligned>
 8012cb6:	1c43      	adds	r3, r0, #1
 8012cb8:	4604      	mov	r4, r0
 8012cba:	d158      	bne.n	8012d6e <_malloc_r+0xf6>
 8012cbc:	f8d8 4000 	ldr.w	r4, [r8]
 8012cc0:	4627      	mov	r7, r4
 8012cc2:	2f00      	cmp	r7, #0
 8012cc4:	d143      	bne.n	8012d4e <_malloc_r+0xd6>
 8012cc6:	2c00      	cmp	r4, #0
 8012cc8:	d04b      	beq.n	8012d62 <_malloc_r+0xea>
 8012cca:	6823      	ldr	r3, [r4, #0]
 8012ccc:	4639      	mov	r1, r7
 8012cce:	4630      	mov	r0, r6
 8012cd0:	eb04 0903 	add.w	r9, r4, r3
 8012cd4:	f002 f93e 	bl	8014f54 <_sbrk_r>
 8012cd8:	4581      	cmp	r9, r0
 8012cda:	d142      	bne.n	8012d62 <_malloc_r+0xea>
 8012cdc:	6821      	ldr	r1, [r4, #0]
 8012cde:	1a6d      	subs	r5, r5, r1
 8012ce0:	4629      	mov	r1, r5
 8012ce2:	4630      	mov	r0, r6
 8012ce4:	f7ff ffa6 	bl	8012c34 <sbrk_aligned>
 8012ce8:	3001      	adds	r0, #1
 8012cea:	d03a      	beq.n	8012d62 <_malloc_r+0xea>
 8012cec:	6823      	ldr	r3, [r4, #0]
 8012cee:	442b      	add	r3, r5
 8012cf0:	6023      	str	r3, [r4, #0]
 8012cf2:	f8d8 3000 	ldr.w	r3, [r8]
 8012cf6:	685a      	ldr	r2, [r3, #4]
 8012cf8:	bb62      	cbnz	r2, 8012d54 <_malloc_r+0xdc>
 8012cfa:	f8c8 7000 	str.w	r7, [r8]
 8012cfe:	e00f      	b.n	8012d20 <_malloc_r+0xa8>
 8012d00:	6822      	ldr	r2, [r4, #0]
 8012d02:	1b52      	subs	r2, r2, r5
 8012d04:	d420      	bmi.n	8012d48 <_malloc_r+0xd0>
 8012d06:	2a0b      	cmp	r2, #11
 8012d08:	d917      	bls.n	8012d3a <_malloc_r+0xc2>
 8012d0a:	1961      	adds	r1, r4, r5
 8012d0c:	42a3      	cmp	r3, r4
 8012d0e:	6025      	str	r5, [r4, #0]
 8012d10:	bf18      	it	ne
 8012d12:	6059      	strne	r1, [r3, #4]
 8012d14:	6863      	ldr	r3, [r4, #4]
 8012d16:	bf08      	it	eq
 8012d18:	f8c8 1000 	streq.w	r1, [r8]
 8012d1c:	5162      	str	r2, [r4, r5]
 8012d1e:	604b      	str	r3, [r1, #4]
 8012d20:	4630      	mov	r0, r6
 8012d22:	f000 f82f 	bl	8012d84 <__malloc_unlock>
 8012d26:	f104 000b 	add.w	r0, r4, #11
 8012d2a:	1d23      	adds	r3, r4, #4
 8012d2c:	f020 0007 	bic.w	r0, r0, #7
 8012d30:	1ac2      	subs	r2, r0, r3
 8012d32:	bf1c      	itt	ne
 8012d34:	1a1b      	subne	r3, r3, r0
 8012d36:	50a3      	strne	r3, [r4, r2]
 8012d38:	e7af      	b.n	8012c9a <_malloc_r+0x22>
 8012d3a:	6862      	ldr	r2, [r4, #4]
 8012d3c:	42a3      	cmp	r3, r4
 8012d3e:	bf0c      	ite	eq
 8012d40:	f8c8 2000 	streq.w	r2, [r8]
 8012d44:	605a      	strne	r2, [r3, #4]
 8012d46:	e7eb      	b.n	8012d20 <_malloc_r+0xa8>
 8012d48:	4623      	mov	r3, r4
 8012d4a:	6864      	ldr	r4, [r4, #4]
 8012d4c:	e7ae      	b.n	8012cac <_malloc_r+0x34>
 8012d4e:	463c      	mov	r4, r7
 8012d50:	687f      	ldr	r7, [r7, #4]
 8012d52:	e7b6      	b.n	8012cc2 <_malloc_r+0x4a>
 8012d54:	461a      	mov	r2, r3
 8012d56:	685b      	ldr	r3, [r3, #4]
 8012d58:	42a3      	cmp	r3, r4
 8012d5a:	d1fb      	bne.n	8012d54 <_malloc_r+0xdc>
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	6053      	str	r3, [r2, #4]
 8012d60:	e7de      	b.n	8012d20 <_malloc_r+0xa8>
 8012d62:	230c      	movs	r3, #12
 8012d64:	6033      	str	r3, [r6, #0]
 8012d66:	4630      	mov	r0, r6
 8012d68:	f000 f80c 	bl	8012d84 <__malloc_unlock>
 8012d6c:	e794      	b.n	8012c98 <_malloc_r+0x20>
 8012d6e:	6005      	str	r5, [r0, #0]
 8012d70:	e7d6      	b.n	8012d20 <_malloc_r+0xa8>
 8012d72:	bf00      	nop
 8012d74:	200026d8 	.word	0x200026d8

08012d78 <__malloc_lock>:
 8012d78:	4801      	ldr	r0, [pc, #4]	@ (8012d80 <__malloc_lock+0x8>)
 8012d7a:	f7ff b8a4 	b.w	8011ec6 <__retarget_lock_acquire_recursive>
 8012d7e:	bf00      	nop
 8012d80:	200026d0 	.word	0x200026d0

08012d84 <__malloc_unlock>:
 8012d84:	4801      	ldr	r0, [pc, #4]	@ (8012d8c <__malloc_unlock+0x8>)
 8012d86:	f7ff b89f 	b.w	8011ec8 <__retarget_lock_release_recursive>
 8012d8a:	bf00      	nop
 8012d8c:	200026d0 	.word	0x200026d0

08012d90 <_Balloc>:
 8012d90:	b570      	push	{r4, r5, r6, lr}
 8012d92:	69c6      	ldr	r6, [r0, #28]
 8012d94:	4604      	mov	r4, r0
 8012d96:	460d      	mov	r5, r1
 8012d98:	b976      	cbnz	r6, 8012db8 <_Balloc+0x28>
 8012d9a:	2010      	movs	r0, #16
 8012d9c:	f7ff ff42 	bl	8012c24 <malloc>
 8012da0:	4602      	mov	r2, r0
 8012da2:	61e0      	str	r0, [r4, #28]
 8012da4:	b920      	cbnz	r0, 8012db0 <_Balloc+0x20>
 8012da6:	4b18      	ldr	r3, [pc, #96]	@ (8012e08 <_Balloc+0x78>)
 8012da8:	4818      	ldr	r0, [pc, #96]	@ (8012e0c <_Balloc+0x7c>)
 8012daa:	216b      	movs	r1, #107	@ 0x6b
 8012dac:	f002 f8ec 	bl	8014f88 <__assert_func>
 8012db0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012db4:	6006      	str	r6, [r0, #0]
 8012db6:	60c6      	str	r6, [r0, #12]
 8012db8:	69e6      	ldr	r6, [r4, #28]
 8012dba:	68f3      	ldr	r3, [r6, #12]
 8012dbc:	b183      	cbz	r3, 8012de0 <_Balloc+0x50>
 8012dbe:	69e3      	ldr	r3, [r4, #28]
 8012dc0:	68db      	ldr	r3, [r3, #12]
 8012dc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012dc6:	b9b8      	cbnz	r0, 8012df8 <_Balloc+0x68>
 8012dc8:	2101      	movs	r1, #1
 8012dca:	fa01 f605 	lsl.w	r6, r1, r5
 8012dce:	1d72      	adds	r2, r6, #5
 8012dd0:	0092      	lsls	r2, r2, #2
 8012dd2:	4620      	mov	r0, r4
 8012dd4:	f002 f8f6 	bl	8014fc4 <_calloc_r>
 8012dd8:	b160      	cbz	r0, 8012df4 <_Balloc+0x64>
 8012dda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012dde:	e00e      	b.n	8012dfe <_Balloc+0x6e>
 8012de0:	2221      	movs	r2, #33	@ 0x21
 8012de2:	2104      	movs	r1, #4
 8012de4:	4620      	mov	r0, r4
 8012de6:	f002 f8ed 	bl	8014fc4 <_calloc_r>
 8012dea:	69e3      	ldr	r3, [r4, #28]
 8012dec:	60f0      	str	r0, [r6, #12]
 8012dee:	68db      	ldr	r3, [r3, #12]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d1e4      	bne.n	8012dbe <_Balloc+0x2e>
 8012df4:	2000      	movs	r0, #0
 8012df6:	bd70      	pop	{r4, r5, r6, pc}
 8012df8:	6802      	ldr	r2, [r0, #0]
 8012dfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012dfe:	2300      	movs	r3, #0
 8012e00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012e04:	e7f7      	b.n	8012df6 <_Balloc+0x66>
 8012e06:	bf00      	nop
 8012e08:	08017064 	.word	0x08017064
 8012e0c:	080170e4 	.word	0x080170e4

08012e10 <_Bfree>:
 8012e10:	b570      	push	{r4, r5, r6, lr}
 8012e12:	69c6      	ldr	r6, [r0, #28]
 8012e14:	4605      	mov	r5, r0
 8012e16:	460c      	mov	r4, r1
 8012e18:	b976      	cbnz	r6, 8012e38 <_Bfree+0x28>
 8012e1a:	2010      	movs	r0, #16
 8012e1c:	f7ff ff02 	bl	8012c24 <malloc>
 8012e20:	4602      	mov	r2, r0
 8012e22:	61e8      	str	r0, [r5, #28]
 8012e24:	b920      	cbnz	r0, 8012e30 <_Bfree+0x20>
 8012e26:	4b09      	ldr	r3, [pc, #36]	@ (8012e4c <_Bfree+0x3c>)
 8012e28:	4809      	ldr	r0, [pc, #36]	@ (8012e50 <_Bfree+0x40>)
 8012e2a:	218f      	movs	r1, #143	@ 0x8f
 8012e2c:	f002 f8ac 	bl	8014f88 <__assert_func>
 8012e30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e34:	6006      	str	r6, [r0, #0]
 8012e36:	60c6      	str	r6, [r0, #12]
 8012e38:	b13c      	cbz	r4, 8012e4a <_Bfree+0x3a>
 8012e3a:	69eb      	ldr	r3, [r5, #28]
 8012e3c:	6862      	ldr	r2, [r4, #4]
 8012e3e:	68db      	ldr	r3, [r3, #12]
 8012e40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012e44:	6021      	str	r1, [r4, #0]
 8012e46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012e4a:	bd70      	pop	{r4, r5, r6, pc}
 8012e4c:	08017064 	.word	0x08017064
 8012e50:	080170e4 	.word	0x080170e4

08012e54 <__multadd>:
 8012e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e58:	690d      	ldr	r5, [r1, #16]
 8012e5a:	4607      	mov	r7, r0
 8012e5c:	460c      	mov	r4, r1
 8012e5e:	461e      	mov	r6, r3
 8012e60:	f101 0c14 	add.w	ip, r1, #20
 8012e64:	2000      	movs	r0, #0
 8012e66:	f8dc 3000 	ldr.w	r3, [ip]
 8012e6a:	b299      	uxth	r1, r3
 8012e6c:	fb02 6101 	mla	r1, r2, r1, r6
 8012e70:	0c1e      	lsrs	r6, r3, #16
 8012e72:	0c0b      	lsrs	r3, r1, #16
 8012e74:	fb02 3306 	mla	r3, r2, r6, r3
 8012e78:	b289      	uxth	r1, r1
 8012e7a:	3001      	adds	r0, #1
 8012e7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012e80:	4285      	cmp	r5, r0
 8012e82:	f84c 1b04 	str.w	r1, [ip], #4
 8012e86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012e8a:	dcec      	bgt.n	8012e66 <__multadd+0x12>
 8012e8c:	b30e      	cbz	r6, 8012ed2 <__multadd+0x7e>
 8012e8e:	68a3      	ldr	r3, [r4, #8]
 8012e90:	42ab      	cmp	r3, r5
 8012e92:	dc19      	bgt.n	8012ec8 <__multadd+0x74>
 8012e94:	6861      	ldr	r1, [r4, #4]
 8012e96:	4638      	mov	r0, r7
 8012e98:	3101      	adds	r1, #1
 8012e9a:	f7ff ff79 	bl	8012d90 <_Balloc>
 8012e9e:	4680      	mov	r8, r0
 8012ea0:	b928      	cbnz	r0, 8012eae <__multadd+0x5a>
 8012ea2:	4602      	mov	r2, r0
 8012ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8012ed8 <__multadd+0x84>)
 8012ea6:	480d      	ldr	r0, [pc, #52]	@ (8012edc <__multadd+0x88>)
 8012ea8:	21ba      	movs	r1, #186	@ 0xba
 8012eaa:	f002 f86d 	bl	8014f88 <__assert_func>
 8012eae:	6922      	ldr	r2, [r4, #16]
 8012eb0:	3202      	adds	r2, #2
 8012eb2:	f104 010c 	add.w	r1, r4, #12
 8012eb6:	0092      	lsls	r2, r2, #2
 8012eb8:	300c      	adds	r0, #12
 8012eba:	f7ff f806 	bl	8011eca <memcpy>
 8012ebe:	4621      	mov	r1, r4
 8012ec0:	4638      	mov	r0, r7
 8012ec2:	f7ff ffa5 	bl	8012e10 <_Bfree>
 8012ec6:	4644      	mov	r4, r8
 8012ec8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012ecc:	3501      	adds	r5, #1
 8012ece:	615e      	str	r6, [r3, #20]
 8012ed0:	6125      	str	r5, [r4, #16]
 8012ed2:	4620      	mov	r0, r4
 8012ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ed8:	080170d3 	.word	0x080170d3
 8012edc:	080170e4 	.word	0x080170e4

08012ee0 <__s2b>:
 8012ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ee4:	460c      	mov	r4, r1
 8012ee6:	4615      	mov	r5, r2
 8012ee8:	461f      	mov	r7, r3
 8012eea:	2209      	movs	r2, #9
 8012eec:	3308      	adds	r3, #8
 8012eee:	4606      	mov	r6, r0
 8012ef0:	fb93 f3f2 	sdiv	r3, r3, r2
 8012ef4:	2100      	movs	r1, #0
 8012ef6:	2201      	movs	r2, #1
 8012ef8:	429a      	cmp	r2, r3
 8012efa:	db09      	blt.n	8012f10 <__s2b+0x30>
 8012efc:	4630      	mov	r0, r6
 8012efe:	f7ff ff47 	bl	8012d90 <_Balloc>
 8012f02:	b940      	cbnz	r0, 8012f16 <__s2b+0x36>
 8012f04:	4602      	mov	r2, r0
 8012f06:	4b19      	ldr	r3, [pc, #100]	@ (8012f6c <__s2b+0x8c>)
 8012f08:	4819      	ldr	r0, [pc, #100]	@ (8012f70 <__s2b+0x90>)
 8012f0a:	21d3      	movs	r1, #211	@ 0xd3
 8012f0c:	f002 f83c 	bl	8014f88 <__assert_func>
 8012f10:	0052      	lsls	r2, r2, #1
 8012f12:	3101      	adds	r1, #1
 8012f14:	e7f0      	b.n	8012ef8 <__s2b+0x18>
 8012f16:	9b08      	ldr	r3, [sp, #32]
 8012f18:	6143      	str	r3, [r0, #20]
 8012f1a:	2d09      	cmp	r5, #9
 8012f1c:	f04f 0301 	mov.w	r3, #1
 8012f20:	6103      	str	r3, [r0, #16]
 8012f22:	dd16      	ble.n	8012f52 <__s2b+0x72>
 8012f24:	f104 0909 	add.w	r9, r4, #9
 8012f28:	46c8      	mov	r8, r9
 8012f2a:	442c      	add	r4, r5
 8012f2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012f30:	4601      	mov	r1, r0
 8012f32:	3b30      	subs	r3, #48	@ 0x30
 8012f34:	220a      	movs	r2, #10
 8012f36:	4630      	mov	r0, r6
 8012f38:	f7ff ff8c 	bl	8012e54 <__multadd>
 8012f3c:	45a0      	cmp	r8, r4
 8012f3e:	d1f5      	bne.n	8012f2c <__s2b+0x4c>
 8012f40:	f1a5 0408 	sub.w	r4, r5, #8
 8012f44:	444c      	add	r4, r9
 8012f46:	1b2d      	subs	r5, r5, r4
 8012f48:	1963      	adds	r3, r4, r5
 8012f4a:	42bb      	cmp	r3, r7
 8012f4c:	db04      	blt.n	8012f58 <__s2b+0x78>
 8012f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f52:	340a      	adds	r4, #10
 8012f54:	2509      	movs	r5, #9
 8012f56:	e7f6      	b.n	8012f46 <__s2b+0x66>
 8012f58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012f5c:	4601      	mov	r1, r0
 8012f5e:	3b30      	subs	r3, #48	@ 0x30
 8012f60:	220a      	movs	r2, #10
 8012f62:	4630      	mov	r0, r6
 8012f64:	f7ff ff76 	bl	8012e54 <__multadd>
 8012f68:	e7ee      	b.n	8012f48 <__s2b+0x68>
 8012f6a:	bf00      	nop
 8012f6c:	080170d3 	.word	0x080170d3
 8012f70:	080170e4 	.word	0x080170e4

08012f74 <__hi0bits>:
 8012f74:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012f78:	4603      	mov	r3, r0
 8012f7a:	bf36      	itet	cc
 8012f7c:	0403      	lslcc	r3, r0, #16
 8012f7e:	2000      	movcs	r0, #0
 8012f80:	2010      	movcc	r0, #16
 8012f82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012f86:	bf3c      	itt	cc
 8012f88:	021b      	lslcc	r3, r3, #8
 8012f8a:	3008      	addcc	r0, #8
 8012f8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012f90:	bf3c      	itt	cc
 8012f92:	011b      	lslcc	r3, r3, #4
 8012f94:	3004      	addcc	r0, #4
 8012f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012f9a:	bf3c      	itt	cc
 8012f9c:	009b      	lslcc	r3, r3, #2
 8012f9e:	3002      	addcc	r0, #2
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	db05      	blt.n	8012fb0 <__hi0bits+0x3c>
 8012fa4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012fa8:	f100 0001 	add.w	r0, r0, #1
 8012fac:	bf08      	it	eq
 8012fae:	2020      	moveq	r0, #32
 8012fb0:	4770      	bx	lr

08012fb2 <__lo0bits>:
 8012fb2:	6803      	ldr	r3, [r0, #0]
 8012fb4:	4602      	mov	r2, r0
 8012fb6:	f013 0007 	ands.w	r0, r3, #7
 8012fba:	d00b      	beq.n	8012fd4 <__lo0bits+0x22>
 8012fbc:	07d9      	lsls	r1, r3, #31
 8012fbe:	d421      	bmi.n	8013004 <__lo0bits+0x52>
 8012fc0:	0798      	lsls	r0, r3, #30
 8012fc2:	bf49      	itett	mi
 8012fc4:	085b      	lsrmi	r3, r3, #1
 8012fc6:	089b      	lsrpl	r3, r3, #2
 8012fc8:	2001      	movmi	r0, #1
 8012fca:	6013      	strmi	r3, [r2, #0]
 8012fcc:	bf5c      	itt	pl
 8012fce:	6013      	strpl	r3, [r2, #0]
 8012fd0:	2002      	movpl	r0, #2
 8012fd2:	4770      	bx	lr
 8012fd4:	b299      	uxth	r1, r3
 8012fd6:	b909      	cbnz	r1, 8012fdc <__lo0bits+0x2a>
 8012fd8:	0c1b      	lsrs	r3, r3, #16
 8012fda:	2010      	movs	r0, #16
 8012fdc:	b2d9      	uxtb	r1, r3
 8012fde:	b909      	cbnz	r1, 8012fe4 <__lo0bits+0x32>
 8012fe0:	3008      	adds	r0, #8
 8012fe2:	0a1b      	lsrs	r3, r3, #8
 8012fe4:	0719      	lsls	r1, r3, #28
 8012fe6:	bf04      	itt	eq
 8012fe8:	091b      	lsreq	r3, r3, #4
 8012fea:	3004      	addeq	r0, #4
 8012fec:	0799      	lsls	r1, r3, #30
 8012fee:	bf04      	itt	eq
 8012ff0:	089b      	lsreq	r3, r3, #2
 8012ff2:	3002      	addeq	r0, #2
 8012ff4:	07d9      	lsls	r1, r3, #31
 8012ff6:	d403      	bmi.n	8013000 <__lo0bits+0x4e>
 8012ff8:	085b      	lsrs	r3, r3, #1
 8012ffa:	f100 0001 	add.w	r0, r0, #1
 8012ffe:	d003      	beq.n	8013008 <__lo0bits+0x56>
 8013000:	6013      	str	r3, [r2, #0]
 8013002:	4770      	bx	lr
 8013004:	2000      	movs	r0, #0
 8013006:	4770      	bx	lr
 8013008:	2020      	movs	r0, #32
 801300a:	4770      	bx	lr

0801300c <__i2b>:
 801300c:	b510      	push	{r4, lr}
 801300e:	460c      	mov	r4, r1
 8013010:	2101      	movs	r1, #1
 8013012:	f7ff febd 	bl	8012d90 <_Balloc>
 8013016:	4602      	mov	r2, r0
 8013018:	b928      	cbnz	r0, 8013026 <__i2b+0x1a>
 801301a:	4b05      	ldr	r3, [pc, #20]	@ (8013030 <__i2b+0x24>)
 801301c:	4805      	ldr	r0, [pc, #20]	@ (8013034 <__i2b+0x28>)
 801301e:	f240 1145 	movw	r1, #325	@ 0x145
 8013022:	f001 ffb1 	bl	8014f88 <__assert_func>
 8013026:	2301      	movs	r3, #1
 8013028:	6144      	str	r4, [r0, #20]
 801302a:	6103      	str	r3, [r0, #16]
 801302c:	bd10      	pop	{r4, pc}
 801302e:	bf00      	nop
 8013030:	080170d3 	.word	0x080170d3
 8013034:	080170e4 	.word	0x080170e4

08013038 <__multiply>:
 8013038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801303c:	4614      	mov	r4, r2
 801303e:	690a      	ldr	r2, [r1, #16]
 8013040:	6923      	ldr	r3, [r4, #16]
 8013042:	429a      	cmp	r2, r3
 8013044:	bfa8      	it	ge
 8013046:	4623      	movge	r3, r4
 8013048:	460f      	mov	r7, r1
 801304a:	bfa4      	itt	ge
 801304c:	460c      	movge	r4, r1
 801304e:	461f      	movge	r7, r3
 8013050:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013054:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013058:	68a3      	ldr	r3, [r4, #8]
 801305a:	6861      	ldr	r1, [r4, #4]
 801305c:	eb0a 0609 	add.w	r6, sl, r9
 8013060:	42b3      	cmp	r3, r6
 8013062:	b085      	sub	sp, #20
 8013064:	bfb8      	it	lt
 8013066:	3101      	addlt	r1, #1
 8013068:	f7ff fe92 	bl	8012d90 <_Balloc>
 801306c:	b930      	cbnz	r0, 801307c <__multiply+0x44>
 801306e:	4602      	mov	r2, r0
 8013070:	4b44      	ldr	r3, [pc, #272]	@ (8013184 <__multiply+0x14c>)
 8013072:	4845      	ldr	r0, [pc, #276]	@ (8013188 <__multiply+0x150>)
 8013074:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013078:	f001 ff86 	bl	8014f88 <__assert_func>
 801307c:	f100 0514 	add.w	r5, r0, #20
 8013080:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013084:	462b      	mov	r3, r5
 8013086:	2200      	movs	r2, #0
 8013088:	4543      	cmp	r3, r8
 801308a:	d321      	bcc.n	80130d0 <__multiply+0x98>
 801308c:	f107 0114 	add.w	r1, r7, #20
 8013090:	f104 0214 	add.w	r2, r4, #20
 8013094:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013098:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801309c:	9302      	str	r3, [sp, #8]
 801309e:	1b13      	subs	r3, r2, r4
 80130a0:	3b15      	subs	r3, #21
 80130a2:	f023 0303 	bic.w	r3, r3, #3
 80130a6:	3304      	adds	r3, #4
 80130a8:	f104 0715 	add.w	r7, r4, #21
 80130ac:	42ba      	cmp	r2, r7
 80130ae:	bf38      	it	cc
 80130b0:	2304      	movcc	r3, #4
 80130b2:	9301      	str	r3, [sp, #4]
 80130b4:	9b02      	ldr	r3, [sp, #8]
 80130b6:	9103      	str	r1, [sp, #12]
 80130b8:	428b      	cmp	r3, r1
 80130ba:	d80c      	bhi.n	80130d6 <__multiply+0x9e>
 80130bc:	2e00      	cmp	r6, #0
 80130be:	dd03      	ble.n	80130c8 <__multiply+0x90>
 80130c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d05b      	beq.n	8013180 <__multiply+0x148>
 80130c8:	6106      	str	r6, [r0, #16]
 80130ca:	b005      	add	sp, #20
 80130cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130d0:	f843 2b04 	str.w	r2, [r3], #4
 80130d4:	e7d8      	b.n	8013088 <__multiply+0x50>
 80130d6:	f8b1 a000 	ldrh.w	sl, [r1]
 80130da:	f1ba 0f00 	cmp.w	sl, #0
 80130de:	d024      	beq.n	801312a <__multiply+0xf2>
 80130e0:	f104 0e14 	add.w	lr, r4, #20
 80130e4:	46a9      	mov	r9, r5
 80130e6:	f04f 0c00 	mov.w	ip, #0
 80130ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80130ee:	f8d9 3000 	ldr.w	r3, [r9]
 80130f2:	fa1f fb87 	uxth.w	fp, r7
 80130f6:	b29b      	uxth	r3, r3
 80130f8:	fb0a 330b 	mla	r3, sl, fp, r3
 80130fc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013100:	f8d9 7000 	ldr.w	r7, [r9]
 8013104:	4463      	add	r3, ip
 8013106:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801310a:	fb0a c70b 	mla	r7, sl, fp, ip
 801310e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013112:	b29b      	uxth	r3, r3
 8013114:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013118:	4572      	cmp	r2, lr
 801311a:	f849 3b04 	str.w	r3, [r9], #4
 801311e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013122:	d8e2      	bhi.n	80130ea <__multiply+0xb2>
 8013124:	9b01      	ldr	r3, [sp, #4]
 8013126:	f845 c003 	str.w	ip, [r5, r3]
 801312a:	9b03      	ldr	r3, [sp, #12]
 801312c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013130:	3104      	adds	r1, #4
 8013132:	f1b9 0f00 	cmp.w	r9, #0
 8013136:	d021      	beq.n	801317c <__multiply+0x144>
 8013138:	682b      	ldr	r3, [r5, #0]
 801313a:	f104 0c14 	add.w	ip, r4, #20
 801313e:	46ae      	mov	lr, r5
 8013140:	f04f 0a00 	mov.w	sl, #0
 8013144:	f8bc b000 	ldrh.w	fp, [ip]
 8013148:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801314c:	fb09 770b 	mla	r7, r9, fp, r7
 8013150:	4457      	add	r7, sl
 8013152:	b29b      	uxth	r3, r3
 8013154:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013158:	f84e 3b04 	str.w	r3, [lr], #4
 801315c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013160:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013164:	f8be 3000 	ldrh.w	r3, [lr]
 8013168:	fb09 330a 	mla	r3, r9, sl, r3
 801316c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013170:	4562      	cmp	r2, ip
 8013172:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013176:	d8e5      	bhi.n	8013144 <__multiply+0x10c>
 8013178:	9f01      	ldr	r7, [sp, #4]
 801317a:	51eb      	str	r3, [r5, r7]
 801317c:	3504      	adds	r5, #4
 801317e:	e799      	b.n	80130b4 <__multiply+0x7c>
 8013180:	3e01      	subs	r6, #1
 8013182:	e79b      	b.n	80130bc <__multiply+0x84>
 8013184:	080170d3 	.word	0x080170d3
 8013188:	080170e4 	.word	0x080170e4

0801318c <__pow5mult>:
 801318c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013190:	4615      	mov	r5, r2
 8013192:	f012 0203 	ands.w	r2, r2, #3
 8013196:	4607      	mov	r7, r0
 8013198:	460e      	mov	r6, r1
 801319a:	d007      	beq.n	80131ac <__pow5mult+0x20>
 801319c:	4c25      	ldr	r4, [pc, #148]	@ (8013234 <__pow5mult+0xa8>)
 801319e:	3a01      	subs	r2, #1
 80131a0:	2300      	movs	r3, #0
 80131a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80131a6:	f7ff fe55 	bl	8012e54 <__multadd>
 80131aa:	4606      	mov	r6, r0
 80131ac:	10ad      	asrs	r5, r5, #2
 80131ae:	d03d      	beq.n	801322c <__pow5mult+0xa0>
 80131b0:	69fc      	ldr	r4, [r7, #28]
 80131b2:	b97c      	cbnz	r4, 80131d4 <__pow5mult+0x48>
 80131b4:	2010      	movs	r0, #16
 80131b6:	f7ff fd35 	bl	8012c24 <malloc>
 80131ba:	4602      	mov	r2, r0
 80131bc:	61f8      	str	r0, [r7, #28]
 80131be:	b928      	cbnz	r0, 80131cc <__pow5mult+0x40>
 80131c0:	4b1d      	ldr	r3, [pc, #116]	@ (8013238 <__pow5mult+0xac>)
 80131c2:	481e      	ldr	r0, [pc, #120]	@ (801323c <__pow5mult+0xb0>)
 80131c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80131c8:	f001 fede 	bl	8014f88 <__assert_func>
 80131cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80131d0:	6004      	str	r4, [r0, #0]
 80131d2:	60c4      	str	r4, [r0, #12]
 80131d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80131d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80131dc:	b94c      	cbnz	r4, 80131f2 <__pow5mult+0x66>
 80131de:	f240 2171 	movw	r1, #625	@ 0x271
 80131e2:	4638      	mov	r0, r7
 80131e4:	f7ff ff12 	bl	801300c <__i2b>
 80131e8:	2300      	movs	r3, #0
 80131ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80131ee:	4604      	mov	r4, r0
 80131f0:	6003      	str	r3, [r0, #0]
 80131f2:	f04f 0900 	mov.w	r9, #0
 80131f6:	07eb      	lsls	r3, r5, #31
 80131f8:	d50a      	bpl.n	8013210 <__pow5mult+0x84>
 80131fa:	4631      	mov	r1, r6
 80131fc:	4622      	mov	r2, r4
 80131fe:	4638      	mov	r0, r7
 8013200:	f7ff ff1a 	bl	8013038 <__multiply>
 8013204:	4631      	mov	r1, r6
 8013206:	4680      	mov	r8, r0
 8013208:	4638      	mov	r0, r7
 801320a:	f7ff fe01 	bl	8012e10 <_Bfree>
 801320e:	4646      	mov	r6, r8
 8013210:	106d      	asrs	r5, r5, #1
 8013212:	d00b      	beq.n	801322c <__pow5mult+0xa0>
 8013214:	6820      	ldr	r0, [r4, #0]
 8013216:	b938      	cbnz	r0, 8013228 <__pow5mult+0x9c>
 8013218:	4622      	mov	r2, r4
 801321a:	4621      	mov	r1, r4
 801321c:	4638      	mov	r0, r7
 801321e:	f7ff ff0b 	bl	8013038 <__multiply>
 8013222:	6020      	str	r0, [r4, #0]
 8013224:	f8c0 9000 	str.w	r9, [r0]
 8013228:	4604      	mov	r4, r0
 801322a:	e7e4      	b.n	80131f6 <__pow5mult+0x6a>
 801322c:	4630      	mov	r0, r6
 801322e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013232:	bf00      	nop
 8013234:	08017140 	.word	0x08017140
 8013238:	08017064 	.word	0x08017064
 801323c:	080170e4 	.word	0x080170e4

08013240 <__lshift>:
 8013240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013244:	460c      	mov	r4, r1
 8013246:	6849      	ldr	r1, [r1, #4]
 8013248:	6923      	ldr	r3, [r4, #16]
 801324a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801324e:	68a3      	ldr	r3, [r4, #8]
 8013250:	4607      	mov	r7, r0
 8013252:	4691      	mov	r9, r2
 8013254:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013258:	f108 0601 	add.w	r6, r8, #1
 801325c:	42b3      	cmp	r3, r6
 801325e:	db0b      	blt.n	8013278 <__lshift+0x38>
 8013260:	4638      	mov	r0, r7
 8013262:	f7ff fd95 	bl	8012d90 <_Balloc>
 8013266:	4605      	mov	r5, r0
 8013268:	b948      	cbnz	r0, 801327e <__lshift+0x3e>
 801326a:	4602      	mov	r2, r0
 801326c:	4b28      	ldr	r3, [pc, #160]	@ (8013310 <__lshift+0xd0>)
 801326e:	4829      	ldr	r0, [pc, #164]	@ (8013314 <__lshift+0xd4>)
 8013270:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013274:	f001 fe88 	bl	8014f88 <__assert_func>
 8013278:	3101      	adds	r1, #1
 801327a:	005b      	lsls	r3, r3, #1
 801327c:	e7ee      	b.n	801325c <__lshift+0x1c>
 801327e:	2300      	movs	r3, #0
 8013280:	f100 0114 	add.w	r1, r0, #20
 8013284:	f100 0210 	add.w	r2, r0, #16
 8013288:	4618      	mov	r0, r3
 801328a:	4553      	cmp	r3, sl
 801328c:	db33      	blt.n	80132f6 <__lshift+0xb6>
 801328e:	6920      	ldr	r0, [r4, #16]
 8013290:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013294:	f104 0314 	add.w	r3, r4, #20
 8013298:	f019 091f 	ands.w	r9, r9, #31
 801329c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80132a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80132a4:	d02b      	beq.n	80132fe <__lshift+0xbe>
 80132a6:	f1c9 0e20 	rsb	lr, r9, #32
 80132aa:	468a      	mov	sl, r1
 80132ac:	2200      	movs	r2, #0
 80132ae:	6818      	ldr	r0, [r3, #0]
 80132b0:	fa00 f009 	lsl.w	r0, r0, r9
 80132b4:	4310      	orrs	r0, r2
 80132b6:	f84a 0b04 	str.w	r0, [sl], #4
 80132ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80132be:	459c      	cmp	ip, r3
 80132c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80132c4:	d8f3      	bhi.n	80132ae <__lshift+0x6e>
 80132c6:	ebac 0304 	sub.w	r3, ip, r4
 80132ca:	3b15      	subs	r3, #21
 80132cc:	f023 0303 	bic.w	r3, r3, #3
 80132d0:	3304      	adds	r3, #4
 80132d2:	f104 0015 	add.w	r0, r4, #21
 80132d6:	4584      	cmp	ip, r0
 80132d8:	bf38      	it	cc
 80132da:	2304      	movcc	r3, #4
 80132dc:	50ca      	str	r2, [r1, r3]
 80132de:	b10a      	cbz	r2, 80132e4 <__lshift+0xa4>
 80132e0:	f108 0602 	add.w	r6, r8, #2
 80132e4:	3e01      	subs	r6, #1
 80132e6:	4638      	mov	r0, r7
 80132e8:	612e      	str	r6, [r5, #16]
 80132ea:	4621      	mov	r1, r4
 80132ec:	f7ff fd90 	bl	8012e10 <_Bfree>
 80132f0:	4628      	mov	r0, r5
 80132f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80132fa:	3301      	adds	r3, #1
 80132fc:	e7c5      	b.n	801328a <__lshift+0x4a>
 80132fe:	3904      	subs	r1, #4
 8013300:	f853 2b04 	ldr.w	r2, [r3], #4
 8013304:	f841 2f04 	str.w	r2, [r1, #4]!
 8013308:	459c      	cmp	ip, r3
 801330a:	d8f9      	bhi.n	8013300 <__lshift+0xc0>
 801330c:	e7ea      	b.n	80132e4 <__lshift+0xa4>
 801330e:	bf00      	nop
 8013310:	080170d3 	.word	0x080170d3
 8013314:	080170e4 	.word	0x080170e4

08013318 <__mcmp>:
 8013318:	690a      	ldr	r2, [r1, #16]
 801331a:	4603      	mov	r3, r0
 801331c:	6900      	ldr	r0, [r0, #16]
 801331e:	1a80      	subs	r0, r0, r2
 8013320:	b530      	push	{r4, r5, lr}
 8013322:	d10e      	bne.n	8013342 <__mcmp+0x2a>
 8013324:	3314      	adds	r3, #20
 8013326:	3114      	adds	r1, #20
 8013328:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801332c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013330:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013334:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013338:	4295      	cmp	r5, r2
 801333a:	d003      	beq.n	8013344 <__mcmp+0x2c>
 801333c:	d205      	bcs.n	801334a <__mcmp+0x32>
 801333e:	f04f 30ff 	mov.w	r0, #4294967295
 8013342:	bd30      	pop	{r4, r5, pc}
 8013344:	42a3      	cmp	r3, r4
 8013346:	d3f3      	bcc.n	8013330 <__mcmp+0x18>
 8013348:	e7fb      	b.n	8013342 <__mcmp+0x2a>
 801334a:	2001      	movs	r0, #1
 801334c:	e7f9      	b.n	8013342 <__mcmp+0x2a>
	...

08013350 <__mdiff>:
 8013350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013354:	4689      	mov	r9, r1
 8013356:	4606      	mov	r6, r0
 8013358:	4611      	mov	r1, r2
 801335a:	4648      	mov	r0, r9
 801335c:	4614      	mov	r4, r2
 801335e:	f7ff ffdb 	bl	8013318 <__mcmp>
 8013362:	1e05      	subs	r5, r0, #0
 8013364:	d112      	bne.n	801338c <__mdiff+0x3c>
 8013366:	4629      	mov	r1, r5
 8013368:	4630      	mov	r0, r6
 801336a:	f7ff fd11 	bl	8012d90 <_Balloc>
 801336e:	4602      	mov	r2, r0
 8013370:	b928      	cbnz	r0, 801337e <__mdiff+0x2e>
 8013372:	4b3f      	ldr	r3, [pc, #252]	@ (8013470 <__mdiff+0x120>)
 8013374:	f240 2137 	movw	r1, #567	@ 0x237
 8013378:	483e      	ldr	r0, [pc, #248]	@ (8013474 <__mdiff+0x124>)
 801337a:	f001 fe05 	bl	8014f88 <__assert_func>
 801337e:	2301      	movs	r3, #1
 8013380:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013384:	4610      	mov	r0, r2
 8013386:	b003      	add	sp, #12
 8013388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801338c:	bfbc      	itt	lt
 801338e:	464b      	movlt	r3, r9
 8013390:	46a1      	movlt	r9, r4
 8013392:	4630      	mov	r0, r6
 8013394:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013398:	bfba      	itte	lt
 801339a:	461c      	movlt	r4, r3
 801339c:	2501      	movlt	r5, #1
 801339e:	2500      	movge	r5, #0
 80133a0:	f7ff fcf6 	bl	8012d90 <_Balloc>
 80133a4:	4602      	mov	r2, r0
 80133a6:	b918      	cbnz	r0, 80133b0 <__mdiff+0x60>
 80133a8:	4b31      	ldr	r3, [pc, #196]	@ (8013470 <__mdiff+0x120>)
 80133aa:	f240 2145 	movw	r1, #581	@ 0x245
 80133ae:	e7e3      	b.n	8013378 <__mdiff+0x28>
 80133b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80133b4:	6926      	ldr	r6, [r4, #16]
 80133b6:	60c5      	str	r5, [r0, #12]
 80133b8:	f109 0310 	add.w	r3, r9, #16
 80133bc:	f109 0514 	add.w	r5, r9, #20
 80133c0:	f104 0e14 	add.w	lr, r4, #20
 80133c4:	f100 0b14 	add.w	fp, r0, #20
 80133c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80133cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80133d0:	9301      	str	r3, [sp, #4]
 80133d2:	46d9      	mov	r9, fp
 80133d4:	f04f 0c00 	mov.w	ip, #0
 80133d8:	9b01      	ldr	r3, [sp, #4]
 80133da:	f85e 0b04 	ldr.w	r0, [lr], #4
 80133de:	f853 af04 	ldr.w	sl, [r3, #4]!
 80133e2:	9301      	str	r3, [sp, #4]
 80133e4:	fa1f f38a 	uxth.w	r3, sl
 80133e8:	4619      	mov	r1, r3
 80133ea:	b283      	uxth	r3, r0
 80133ec:	1acb      	subs	r3, r1, r3
 80133ee:	0c00      	lsrs	r0, r0, #16
 80133f0:	4463      	add	r3, ip
 80133f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80133f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80133fa:	b29b      	uxth	r3, r3
 80133fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013400:	4576      	cmp	r6, lr
 8013402:	f849 3b04 	str.w	r3, [r9], #4
 8013406:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801340a:	d8e5      	bhi.n	80133d8 <__mdiff+0x88>
 801340c:	1b33      	subs	r3, r6, r4
 801340e:	3b15      	subs	r3, #21
 8013410:	f023 0303 	bic.w	r3, r3, #3
 8013414:	3415      	adds	r4, #21
 8013416:	3304      	adds	r3, #4
 8013418:	42a6      	cmp	r6, r4
 801341a:	bf38      	it	cc
 801341c:	2304      	movcc	r3, #4
 801341e:	441d      	add	r5, r3
 8013420:	445b      	add	r3, fp
 8013422:	461e      	mov	r6, r3
 8013424:	462c      	mov	r4, r5
 8013426:	4544      	cmp	r4, r8
 8013428:	d30e      	bcc.n	8013448 <__mdiff+0xf8>
 801342a:	f108 0103 	add.w	r1, r8, #3
 801342e:	1b49      	subs	r1, r1, r5
 8013430:	f021 0103 	bic.w	r1, r1, #3
 8013434:	3d03      	subs	r5, #3
 8013436:	45a8      	cmp	r8, r5
 8013438:	bf38      	it	cc
 801343a:	2100      	movcc	r1, #0
 801343c:	440b      	add	r3, r1
 801343e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013442:	b191      	cbz	r1, 801346a <__mdiff+0x11a>
 8013444:	6117      	str	r7, [r2, #16]
 8013446:	e79d      	b.n	8013384 <__mdiff+0x34>
 8013448:	f854 1b04 	ldr.w	r1, [r4], #4
 801344c:	46e6      	mov	lr, ip
 801344e:	0c08      	lsrs	r0, r1, #16
 8013450:	fa1c fc81 	uxtah	ip, ip, r1
 8013454:	4471      	add	r1, lr
 8013456:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801345a:	b289      	uxth	r1, r1
 801345c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013460:	f846 1b04 	str.w	r1, [r6], #4
 8013464:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013468:	e7dd      	b.n	8013426 <__mdiff+0xd6>
 801346a:	3f01      	subs	r7, #1
 801346c:	e7e7      	b.n	801343e <__mdiff+0xee>
 801346e:	bf00      	nop
 8013470:	080170d3 	.word	0x080170d3
 8013474:	080170e4 	.word	0x080170e4

08013478 <__ulp>:
 8013478:	b082      	sub	sp, #8
 801347a:	ed8d 0b00 	vstr	d0, [sp]
 801347e:	9a01      	ldr	r2, [sp, #4]
 8013480:	4b0f      	ldr	r3, [pc, #60]	@ (80134c0 <__ulp+0x48>)
 8013482:	4013      	ands	r3, r2
 8013484:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8013488:	2b00      	cmp	r3, #0
 801348a:	dc08      	bgt.n	801349e <__ulp+0x26>
 801348c:	425b      	negs	r3, r3
 801348e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8013492:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013496:	da04      	bge.n	80134a2 <__ulp+0x2a>
 8013498:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801349c:	4113      	asrs	r3, r2
 801349e:	2200      	movs	r2, #0
 80134a0:	e008      	b.n	80134b4 <__ulp+0x3c>
 80134a2:	f1a2 0314 	sub.w	r3, r2, #20
 80134a6:	2b1e      	cmp	r3, #30
 80134a8:	bfda      	itte	le
 80134aa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80134ae:	40da      	lsrle	r2, r3
 80134b0:	2201      	movgt	r2, #1
 80134b2:	2300      	movs	r3, #0
 80134b4:	4619      	mov	r1, r3
 80134b6:	4610      	mov	r0, r2
 80134b8:	ec41 0b10 	vmov	d0, r0, r1
 80134bc:	b002      	add	sp, #8
 80134be:	4770      	bx	lr
 80134c0:	7ff00000 	.word	0x7ff00000

080134c4 <__b2d>:
 80134c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134c8:	6906      	ldr	r6, [r0, #16]
 80134ca:	f100 0814 	add.w	r8, r0, #20
 80134ce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80134d2:	1f37      	subs	r7, r6, #4
 80134d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80134d8:	4610      	mov	r0, r2
 80134da:	f7ff fd4b 	bl	8012f74 <__hi0bits>
 80134de:	f1c0 0320 	rsb	r3, r0, #32
 80134e2:	280a      	cmp	r0, #10
 80134e4:	600b      	str	r3, [r1, #0]
 80134e6:	491b      	ldr	r1, [pc, #108]	@ (8013554 <__b2d+0x90>)
 80134e8:	dc15      	bgt.n	8013516 <__b2d+0x52>
 80134ea:	f1c0 0c0b 	rsb	ip, r0, #11
 80134ee:	fa22 f30c 	lsr.w	r3, r2, ip
 80134f2:	45b8      	cmp	r8, r7
 80134f4:	ea43 0501 	orr.w	r5, r3, r1
 80134f8:	bf34      	ite	cc
 80134fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80134fe:	2300      	movcs	r3, #0
 8013500:	3015      	adds	r0, #21
 8013502:	fa02 f000 	lsl.w	r0, r2, r0
 8013506:	fa23 f30c 	lsr.w	r3, r3, ip
 801350a:	4303      	orrs	r3, r0
 801350c:	461c      	mov	r4, r3
 801350e:	ec45 4b10 	vmov	d0, r4, r5
 8013512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013516:	45b8      	cmp	r8, r7
 8013518:	bf3a      	itte	cc
 801351a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801351e:	f1a6 0708 	subcc.w	r7, r6, #8
 8013522:	2300      	movcs	r3, #0
 8013524:	380b      	subs	r0, #11
 8013526:	d012      	beq.n	801354e <__b2d+0x8a>
 8013528:	f1c0 0120 	rsb	r1, r0, #32
 801352c:	fa23 f401 	lsr.w	r4, r3, r1
 8013530:	4082      	lsls	r2, r0
 8013532:	4322      	orrs	r2, r4
 8013534:	4547      	cmp	r7, r8
 8013536:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801353a:	bf8c      	ite	hi
 801353c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013540:	2200      	movls	r2, #0
 8013542:	4083      	lsls	r3, r0
 8013544:	40ca      	lsrs	r2, r1
 8013546:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801354a:	4313      	orrs	r3, r2
 801354c:	e7de      	b.n	801350c <__b2d+0x48>
 801354e:	ea42 0501 	orr.w	r5, r2, r1
 8013552:	e7db      	b.n	801350c <__b2d+0x48>
 8013554:	3ff00000 	.word	0x3ff00000

08013558 <__d2b>:
 8013558:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801355c:	460f      	mov	r7, r1
 801355e:	2101      	movs	r1, #1
 8013560:	ec59 8b10 	vmov	r8, r9, d0
 8013564:	4616      	mov	r6, r2
 8013566:	f7ff fc13 	bl	8012d90 <_Balloc>
 801356a:	4604      	mov	r4, r0
 801356c:	b930      	cbnz	r0, 801357c <__d2b+0x24>
 801356e:	4602      	mov	r2, r0
 8013570:	4b23      	ldr	r3, [pc, #140]	@ (8013600 <__d2b+0xa8>)
 8013572:	4824      	ldr	r0, [pc, #144]	@ (8013604 <__d2b+0xac>)
 8013574:	f240 310f 	movw	r1, #783	@ 0x30f
 8013578:	f001 fd06 	bl	8014f88 <__assert_func>
 801357c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013580:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013584:	b10d      	cbz	r5, 801358a <__d2b+0x32>
 8013586:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801358a:	9301      	str	r3, [sp, #4]
 801358c:	f1b8 0300 	subs.w	r3, r8, #0
 8013590:	d023      	beq.n	80135da <__d2b+0x82>
 8013592:	4668      	mov	r0, sp
 8013594:	9300      	str	r3, [sp, #0]
 8013596:	f7ff fd0c 	bl	8012fb2 <__lo0bits>
 801359a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801359e:	b1d0      	cbz	r0, 80135d6 <__d2b+0x7e>
 80135a0:	f1c0 0320 	rsb	r3, r0, #32
 80135a4:	fa02 f303 	lsl.w	r3, r2, r3
 80135a8:	430b      	orrs	r3, r1
 80135aa:	40c2      	lsrs	r2, r0
 80135ac:	6163      	str	r3, [r4, #20]
 80135ae:	9201      	str	r2, [sp, #4]
 80135b0:	9b01      	ldr	r3, [sp, #4]
 80135b2:	61a3      	str	r3, [r4, #24]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	bf0c      	ite	eq
 80135b8:	2201      	moveq	r2, #1
 80135ba:	2202      	movne	r2, #2
 80135bc:	6122      	str	r2, [r4, #16]
 80135be:	b1a5      	cbz	r5, 80135ea <__d2b+0x92>
 80135c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80135c4:	4405      	add	r5, r0
 80135c6:	603d      	str	r5, [r7, #0]
 80135c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80135cc:	6030      	str	r0, [r6, #0]
 80135ce:	4620      	mov	r0, r4
 80135d0:	b003      	add	sp, #12
 80135d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135d6:	6161      	str	r1, [r4, #20]
 80135d8:	e7ea      	b.n	80135b0 <__d2b+0x58>
 80135da:	a801      	add	r0, sp, #4
 80135dc:	f7ff fce9 	bl	8012fb2 <__lo0bits>
 80135e0:	9b01      	ldr	r3, [sp, #4]
 80135e2:	6163      	str	r3, [r4, #20]
 80135e4:	3020      	adds	r0, #32
 80135e6:	2201      	movs	r2, #1
 80135e8:	e7e8      	b.n	80135bc <__d2b+0x64>
 80135ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80135ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80135f2:	6038      	str	r0, [r7, #0]
 80135f4:	6918      	ldr	r0, [r3, #16]
 80135f6:	f7ff fcbd 	bl	8012f74 <__hi0bits>
 80135fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80135fe:	e7e5      	b.n	80135cc <__d2b+0x74>
 8013600:	080170d3 	.word	0x080170d3
 8013604:	080170e4 	.word	0x080170e4

08013608 <__ratio>:
 8013608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801360c:	b085      	sub	sp, #20
 801360e:	e9cd 1000 	strd	r1, r0, [sp]
 8013612:	a902      	add	r1, sp, #8
 8013614:	f7ff ff56 	bl	80134c4 <__b2d>
 8013618:	9800      	ldr	r0, [sp, #0]
 801361a:	a903      	add	r1, sp, #12
 801361c:	ec55 4b10 	vmov	r4, r5, d0
 8013620:	f7ff ff50 	bl	80134c4 <__b2d>
 8013624:	9b01      	ldr	r3, [sp, #4]
 8013626:	6919      	ldr	r1, [r3, #16]
 8013628:	9b00      	ldr	r3, [sp, #0]
 801362a:	691b      	ldr	r3, [r3, #16]
 801362c:	1ac9      	subs	r1, r1, r3
 801362e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8013632:	1a9b      	subs	r3, r3, r2
 8013634:	ec5b ab10 	vmov	sl, fp, d0
 8013638:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801363c:	2b00      	cmp	r3, #0
 801363e:	bfce      	itee	gt
 8013640:	462a      	movgt	r2, r5
 8013642:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013646:	465a      	movle	r2, fp
 8013648:	462f      	mov	r7, r5
 801364a:	46d9      	mov	r9, fp
 801364c:	bfcc      	ite	gt
 801364e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013652:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8013656:	464b      	mov	r3, r9
 8013658:	4652      	mov	r2, sl
 801365a:	4620      	mov	r0, r4
 801365c:	4639      	mov	r1, r7
 801365e:	f7ed f91d 	bl	800089c <__aeabi_ddiv>
 8013662:	ec41 0b10 	vmov	d0, r0, r1
 8013666:	b005      	add	sp, #20
 8013668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801366c <__copybits>:
 801366c:	3901      	subs	r1, #1
 801366e:	b570      	push	{r4, r5, r6, lr}
 8013670:	1149      	asrs	r1, r1, #5
 8013672:	6914      	ldr	r4, [r2, #16]
 8013674:	3101      	adds	r1, #1
 8013676:	f102 0314 	add.w	r3, r2, #20
 801367a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801367e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013682:	1f05      	subs	r5, r0, #4
 8013684:	42a3      	cmp	r3, r4
 8013686:	d30c      	bcc.n	80136a2 <__copybits+0x36>
 8013688:	1aa3      	subs	r3, r4, r2
 801368a:	3b11      	subs	r3, #17
 801368c:	f023 0303 	bic.w	r3, r3, #3
 8013690:	3211      	adds	r2, #17
 8013692:	42a2      	cmp	r2, r4
 8013694:	bf88      	it	hi
 8013696:	2300      	movhi	r3, #0
 8013698:	4418      	add	r0, r3
 801369a:	2300      	movs	r3, #0
 801369c:	4288      	cmp	r0, r1
 801369e:	d305      	bcc.n	80136ac <__copybits+0x40>
 80136a0:	bd70      	pop	{r4, r5, r6, pc}
 80136a2:	f853 6b04 	ldr.w	r6, [r3], #4
 80136a6:	f845 6f04 	str.w	r6, [r5, #4]!
 80136aa:	e7eb      	b.n	8013684 <__copybits+0x18>
 80136ac:	f840 3b04 	str.w	r3, [r0], #4
 80136b0:	e7f4      	b.n	801369c <__copybits+0x30>

080136b2 <__any_on>:
 80136b2:	f100 0214 	add.w	r2, r0, #20
 80136b6:	6900      	ldr	r0, [r0, #16]
 80136b8:	114b      	asrs	r3, r1, #5
 80136ba:	4298      	cmp	r0, r3
 80136bc:	b510      	push	{r4, lr}
 80136be:	db11      	blt.n	80136e4 <__any_on+0x32>
 80136c0:	dd0a      	ble.n	80136d8 <__any_on+0x26>
 80136c2:	f011 011f 	ands.w	r1, r1, #31
 80136c6:	d007      	beq.n	80136d8 <__any_on+0x26>
 80136c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80136cc:	fa24 f001 	lsr.w	r0, r4, r1
 80136d0:	fa00 f101 	lsl.w	r1, r0, r1
 80136d4:	428c      	cmp	r4, r1
 80136d6:	d10b      	bne.n	80136f0 <__any_on+0x3e>
 80136d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80136dc:	4293      	cmp	r3, r2
 80136de:	d803      	bhi.n	80136e8 <__any_on+0x36>
 80136e0:	2000      	movs	r0, #0
 80136e2:	bd10      	pop	{r4, pc}
 80136e4:	4603      	mov	r3, r0
 80136e6:	e7f7      	b.n	80136d8 <__any_on+0x26>
 80136e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80136ec:	2900      	cmp	r1, #0
 80136ee:	d0f5      	beq.n	80136dc <__any_on+0x2a>
 80136f0:	2001      	movs	r0, #1
 80136f2:	e7f6      	b.n	80136e2 <__any_on+0x30>

080136f4 <sulp>:
 80136f4:	b570      	push	{r4, r5, r6, lr}
 80136f6:	4604      	mov	r4, r0
 80136f8:	460d      	mov	r5, r1
 80136fa:	ec45 4b10 	vmov	d0, r4, r5
 80136fe:	4616      	mov	r6, r2
 8013700:	f7ff feba 	bl	8013478 <__ulp>
 8013704:	ec51 0b10 	vmov	r0, r1, d0
 8013708:	b17e      	cbz	r6, 801372a <sulp+0x36>
 801370a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801370e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013712:	2b00      	cmp	r3, #0
 8013714:	dd09      	ble.n	801372a <sulp+0x36>
 8013716:	051b      	lsls	r3, r3, #20
 8013718:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801371c:	2400      	movs	r4, #0
 801371e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8013722:	4622      	mov	r2, r4
 8013724:	462b      	mov	r3, r5
 8013726:	f7ec ff8f 	bl	8000648 <__aeabi_dmul>
 801372a:	ec41 0b10 	vmov	d0, r0, r1
 801372e:	bd70      	pop	{r4, r5, r6, pc}

08013730 <_strtod_l>:
 8013730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013734:	b09f      	sub	sp, #124	@ 0x7c
 8013736:	460c      	mov	r4, r1
 8013738:	9217      	str	r2, [sp, #92]	@ 0x5c
 801373a:	2200      	movs	r2, #0
 801373c:	921a      	str	r2, [sp, #104]	@ 0x68
 801373e:	9005      	str	r0, [sp, #20]
 8013740:	f04f 0a00 	mov.w	sl, #0
 8013744:	f04f 0b00 	mov.w	fp, #0
 8013748:	460a      	mov	r2, r1
 801374a:	9219      	str	r2, [sp, #100]	@ 0x64
 801374c:	7811      	ldrb	r1, [r2, #0]
 801374e:	292b      	cmp	r1, #43	@ 0x2b
 8013750:	d04a      	beq.n	80137e8 <_strtod_l+0xb8>
 8013752:	d838      	bhi.n	80137c6 <_strtod_l+0x96>
 8013754:	290d      	cmp	r1, #13
 8013756:	d832      	bhi.n	80137be <_strtod_l+0x8e>
 8013758:	2908      	cmp	r1, #8
 801375a:	d832      	bhi.n	80137c2 <_strtod_l+0x92>
 801375c:	2900      	cmp	r1, #0
 801375e:	d03b      	beq.n	80137d8 <_strtod_l+0xa8>
 8013760:	2200      	movs	r2, #0
 8013762:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013764:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8013766:	782a      	ldrb	r2, [r5, #0]
 8013768:	2a30      	cmp	r2, #48	@ 0x30
 801376a:	f040 80b3 	bne.w	80138d4 <_strtod_l+0x1a4>
 801376e:	786a      	ldrb	r2, [r5, #1]
 8013770:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013774:	2a58      	cmp	r2, #88	@ 0x58
 8013776:	d16e      	bne.n	8013856 <_strtod_l+0x126>
 8013778:	9302      	str	r3, [sp, #8]
 801377a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801377c:	9301      	str	r3, [sp, #4]
 801377e:	ab1a      	add	r3, sp, #104	@ 0x68
 8013780:	9300      	str	r3, [sp, #0]
 8013782:	4a8e      	ldr	r2, [pc, #568]	@ (80139bc <_strtod_l+0x28c>)
 8013784:	9805      	ldr	r0, [sp, #20]
 8013786:	ab1b      	add	r3, sp, #108	@ 0x6c
 8013788:	a919      	add	r1, sp, #100	@ 0x64
 801378a:	f001 fc97 	bl	80150bc <__gethex>
 801378e:	f010 060f 	ands.w	r6, r0, #15
 8013792:	4604      	mov	r4, r0
 8013794:	d005      	beq.n	80137a2 <_strtod_l+0x72>
 8013796:	2e06      	cmp	r6, #6
 8013798:	d128      	bne.n	80137ec <_strtod_l+0xbc>
 801379a:	3501      	adds	r5, #1
 801379c:	2300      	movs	r3, #0
 801379e:	9519      	str	r5, [sp, #100]	@ 0x64
 80137a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80137a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	f040 858e 	bne.w	80142c6 <_strtod_l+0xb96>
 80137aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80137ac:	b1cb      	cbz	r3, 80137e2 <_strtod_l+0xb2>
 80137ae:	4652      	mov	r2, sl
 80137b0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80137b4:	ec43 2b10 	vmov	d0, r2, r3
 80137b8:	b01f      	add	sp, #124	@ 0x7c
 80137ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137be:	2920      	cmp	r1, #32
 80137c0:	d1ce      	bne.n	8013760 <_strtod_l+0x30>
 80137c2:	3201      	adds	r2, #1
 80137c4:	e7c1      	b.n	801374a <_strtod_l+0x1a>
 80137c6:	292d      	cmp	r1, #45	@ 0x2d
 80137c8:	d1ca      	bne.n	8013760 <_strtod_l+0x30>
 80137ca:	2101      	movs	r1, #1
 80137cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80137ce:	1c51      	adds	r1, r2, #1
 80137d0:	9119      	str	r1, [sp, #100]	@ 0x64
 80137d2:	7852      	ldrb	r2, [r2, #1]
 80137d4:	2a00      	cmp	r2, #0
 80137d6:	d1c5      	bne.n	8013764 <_strtod_l+0x34>
 80137d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80137da:	9419      	str	r4, [sp, #100]	@ 0x64
 80137dc:	2b00      	cmp	r3, #0
 80137de:	f040 8570 	bne.w	80142c2 <_strtod_l+0xb92>
 80137e2:	4652      	mov	r2, sl
 80137e4:	465b      	mov	r3, fp
 80137e6:	e7e5      	b.n	80137b4 <_strtod_l+0x84>
 80137e8:	2100      	movs	r1, #0
 80137ea:	e7ef      	b.n	80137cc <_strtod_l+0x9c>
 80137ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80137ee:	b13a      	cbz	r2, 8013800 <_strtod_l+0xd0>
 80137f0:	2135      	movs	r1, #53	@ 0x35
 80137f2:	a81c      	add	r0, sp, #112	@ 0x70
 80137f4:	f7ff ff3a 	bl	801366c <__copybits>
 80137f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80137fa:	9805      	ldr	r0, [sp, #20]
 80137fc:	f7ff fb08 	bl	8012e10 <_Bfree>
 8013800:	3e01      	subs	r6, #1
 8013802:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8013804:	2e04      	cmp	r6, #4
 8013806:	d806      	bhi.n	8013816 <_strtod_l+0xe6>
 8013808:	e8df f006 	tbb	[pc, r6]
 801380c:	201d0314 	.word	0x201d0314
 8013810:	14          	.byte	0x14
 8013811:	00          	.byte	0x00
 8013812:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8013816:	05e1      	lsls	r1, r4, #23
 8013818:	bf48      	it	mi
 801381a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801381e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013822:	0d1b      	lsrs	r3, r3, #20
 8013824:	051b      	lsls	r3, r3, #20
 8013826:	2b00      	cmp	r3, #0
 8013828:	d1bb      	bne.n	80137a2 <_strtod_l+0x72>
 801382a:	f7fe fb21 	bl	8011e70 <__errno>
 801382e:	2322      	movs	r3, #34	@ 0x22
 8013830:	6003      	str	r3, [r0, #0]
 8013832:	e7b6      	b.n	80137a2 <_strtod_l+0x72>
 8013834:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013838:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801383c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013840:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013844:	e7e7      	b.n	8013816 <_strtod_l+0xe6>
 8013846:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80139c4 <_strtod_l+0x294>
 801384a:	e7e4      	b.n	8013816 <_strtod_l+0xe6>
 801384c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013850:	f04f 3aff 	mov.w	sl, #4294967295
 8013854:	e7df      	b.n	8013816 <_strtod_l+0xe6>
 8013856:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013858:	1c5a      	adds	r2, r3, #1
 801385a:	9219      	str	r2, [sp, #100]	@ 0x64
 801385c:	785b      	ldrb	r3, [r3, #1]
 801385e:	2b30      	cmp	r3, #48	@ 0x30
 8013860:	d0f9      	beq.n	8013856 <_strtod_l+0x126>
 8013862:	2b00      	cmp	r3, #0
 8013864:	d09d      	beq.n	80137a2 <_strtod_l+0x72>
 8013866:	2301      	movs	r3, #1
 8013868:	9309      	str	r3, [sp, #36]	@ 0x24
 801386a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801386c:	930c      	str	r3, [sp, #48]	@ 0x30
 801386e:	2300      	movs	r3, #0
 8013870:	9308      	str	r3, [sp, #32]
 8013872:	930a      	str	r3, [sp, #40]	@ 0x28
 8013874:	461f      	mov	r7, r3
 8013876:	220a      	movs	r2, #10
 8013878:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801387a:	7805      	ldrb	r5, [r0, #0]
 801387c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8013880:	b2d9      	uxtb	r1, r3
 8013882:	2909      	cmp	r1, #9
 8013884:	d928      	bls.n	80138d8 <_strtod_l+0x1a8>
 8013886:	494e      	ldr	r1, [pc, #312]	@ (80139c0 <_strtod_l+0x290>)
 8013888:	2201      	movs	r2, #1
 801388a:	f7fe fa94 	bl	8011db6 <strncmp>
 801388e:	2800      	cmp	r0, #0
 8013890:	d032      	beq.n	80138f8 <_strtod_l+0x1c8>
 8013892:	2000      	movs	r0, #0
 8013894:	462a      	mov	r2, r5
 8013896:	4681      	mov	r9, r0
 8013898:	463d      	mov	r5, r7
 801389a:	4603      	mov	r3, r0
 801389c:	2a65      	cmp	r2, #101	@ 0x65
 801389e:	d001      	beq.n	80138a4 <_strtod_l+0x174>
 80138a0:	2a45      	cmp	r2, #69	@ 0x45
 80138a2:	d114      	bne.n	80138ce <_strtod_l+0x19e>
 80138a4:	b91d      	cbnz	r5, 80138ae <_strtod_l+0x17e>
 80138a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80138a8:	4302      	orrs	r2, r0
 80138aa:	d095      	beq.n	80137d8 <_strtod_l+0xa8>
 80138ac:	2500      	movs	r5, #0
 80138ae:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80138b0:	1c62      	adds	r2, r4, #1
 80138b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80138b4:	7862      	ldrb	r2, [r4, #1]
 80138b6:	2a2b      	cmp	r2, #43	@ 0x2b
 80138b8:	d077      	beq.n	80139aa <_strtod_l+0x27a>
 80138ba:	2a2d      	cmp	r2, #45	@ 0x2d
 80138bc:	d07b      	beq.n	80139b6 <_strtod_l+0x286>
 80138be:	f04f 0c00 	mov.w	ip, #0
 80138c2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80138c6:	2909      	cmp	r1, #9
 80138c8:	f240 8082 	bls.w	80139d0 <_strtod_l+0x2a0>
 80138cc:	9419      	str	r4, [sp, #100]	@ 0x64
 80138ce:	f04f 0800 	mov.w	r8, #0
 80138d2:	e0a2      	b.n	8013a1a <_strtod_l+0x2ea>
 80138d4:	2300      	movs	r3, #0
 80138d6:	e7c7      	b.n	8013868 <_strtod_l+0x138>
 80138d8:	2f08      	cmp	r7, #8
 80138da:	bfd5      	itete	le
 80138dc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80138de:	9908      	ldrgt	r1, [sp, #32]
 80138e0:	fb02 3301 	mlale	r3, r2, r1, r3
 80138e4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80138e8:	f100 0001 	add.w	r0, r0, #1
 80138ec:	bfd4      	ite	le
 80138ee:	930a      	strle	r3, [sp, #40]	@ 0x28
 80138f0:	9308      	strgt	r3, [sp, #32]
 80138f2:	3701      	adds	r7, #1
 80138f4:	9019      	str	r0, [sp, #100]	@ 0x64
 80138f6:	e7bf      	b.n	8013878 <_strtod_l+0x148>
 80138f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80138fa:	1c5a      	adds	r2, r3, #1
 80138fc:	9219      	str	r2, [sp, #100]	@ 0x64
 80138fe:	785a      	ldrb	r2, [r3, #1]
 8013900:	b37f      	cbz	r7, 8013962 <_strtod_l+0x232>
 8013902:	4681      	mov	r9, r0
 8013904:	463d      	mov	r5, r7
 8013906:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801390a:	2b09      	cmp	r3, #9
 801390c:	d912      	bls.n	8013934 <_strtod_l+0x204>
 801390e:	2301      	movs	r3, #1
 8013910:	e7c4      	b.n	801389c <_strtod_l+0x16c>
 8013912:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013914:	1c5a      	adds	r2, r3, #1
 8013916:	9219      	str	r2, [sp, #100]	@ 0x64
 8013918:	785a      	ldrb	r2, [r3, #1]
 801391a:	3001      	adds	r0, #1
 801391c:	2a30      	cmp	r2, #48	@ 0x30
 801391e:	d0f8      	beq.n	8013912 <_strtod_l+0x1e2>
 8013920:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013924:	2b08      	cmp	r3, #8
 8013926:	f200 84d3 	bhi.w	80142d0 <_strtod_l+0xba0>
 801392a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801392c:	930c      	str	r3, [sp, #48]	@ 0x30
 801392e:	4681      	mov	r9, r0
 8013930:	2000      	movs	r0, #0
 8013932:	4605      	mov	r5, r0
 8013934:	3a30      	subs	r2, #48	@ 0x30
 8013936:	f100 0301 	add.w	r3, r0, #1
 801393a:	d02a      	beq.n	8013992 <_strtod_l+0x262>
 801393c:	4499      	add	r9, r3
 801393e:	eb00 0c05 	add.w	ip, r0, r5
 8013942:	462b      	mov	r3, r5
 8013944:	210a      	movs	r1, #10
 8013946:	4563      	cmp	r3, ip
 8013948:	d10d      	bne.n	8013966 <_strtod_l+0x236>
 801394a:	1c69      	adds	r1, r5, #1
 801394c:	4401      	add	r1, r0
 801394e:	4428      	add	r0, r5
 8013950:	2808      	cmp	r0, #8
 8013952:	dc16      	bgt.n	8013982 <_strtod_l+0x252>
 8013954:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013956:	230a      	movs	r3, #10
 8013958:	fb03 2300 	mla	r3, r3, r0, r2
 801395c:	930a      	str	r3, [sp, #40]	@ 0x28
 801395e:	2300      	movs	r3, #0
 8013960:	e018      	b.n	8013994 <_strtod_l+0x264>
 8013962:	4638      	mov	r0, r7
 8013964:	e7da      	b.n	801391c <_strtod_l+0x1ec>
 8013966:	2b08      	cmp	r3, #8
 8013968:	f103 0301 	add.w	r3, r3, #1
 801396c:	dc03      	bgt.n	8013976 <_strtod_l+0x246>
 801396e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013970:	434e      	muls	r6, r1
 8013972:	960a      	str	r6, [sp, #40]	@ 0x28
 8013974:	e7e7      	b.n	8013946 <_strtod_l+0x216>
 8013976:	2b10      	cmp	r3, #16
 8013978:	bfde      	ittt	le
 801397a:	9e08      	ldrle	r6, [sp, #32]
 801397c:	434e      	mulle	r6, r1
 801397e:	9608      	strle	r6, [sp, #32]
 8013980:	e7e1      	b.n	8013946 <_strtod_l+0x216>
 8013982:	280f      	cmp	r0, #15
 8013984:	dceb      	bgt.n	801395e <_strtod_l+0x22e>
 8013986:	9808      	ldr	r0, [sp, #32]
 8013988:	230a      	movs	r3, #10
 801398a:	fb03 2300 	mla	r3, r3, r0, r2
 801398e:	9308      	str	r3, [sp, #32]
 8013990:	e7e5      	b.n	801395e <_strtod_l+0x22e>
 8013992:	4629      	mov	r1, r5
 8013994:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013996:	1c50      	adds	r0, r2, #1
 8013998:	9019      	str	r0, [sp, #100]	@ 0x64
 801399a:	7852      	ldrb	r2, [r2, #1]
 801399c:	4618      	mov	r0, r3
 801399e:	460d      	mov	r5, r1
 80139a0:	e7b1      	b.n	8013906 <_strtod_l+0x1d6>
 80139a2:	f04f 0900 	mov.w	r9, #0
 80139a6:	2301      	movs	r3, #1
 80139a8:	e77d      	b.n	80138a6 <_strtod_l+0x176>
 80139aa:	f04f 0c00 	mov.w	ip, #0
 80139ae:	1ca2      	adds	r2, r4, #2
 80139b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80139b2:	78a2      	ldrb	r2, [r4, #2]
 80139b4:	e785      	b.n	80138c2 <_strtod_l+0x192>
 80139b6:	f04f 0c01 	mov.w	ip, #1
 80139ba:	e7f8      	b.n	80139ae <_strtod_l+0x27e>
 80139bc:	08017258 	.word	0x08017258
 80139c0:	08017240 	.word	0x08017240
 80139c4:	7ff00000 	.word	0x7ff00000
 80139c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80139ca:	1c51      	adds	r1, r2, #1
 80139cc:	9119      	str	r1, [sp, #100]	@ 0x64
 80139ce:	7852      	ldrb	r2, [r2, #1]
 80139d0:	2a30      	cmp	r2, #48	@ 0x30
 80139d2:	d0f9      	beq.n	80139c8 <_strtod_l+0x298>
 80139d4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80139d8:	2908      	cmp	r1, #8
 80139da:	f63f af78 	bhi.w	80138ce <_strtod_l+0x19e>
 80139de:	3a30      	subs	r2, #48	@ 0x30
 80139e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80139e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80139e4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80139e6:	f04f 080a 	mov.w	r8, #10
 80139ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80139ec:	1c56      	adds	r6, r2, #1
 80139ee:	9619      	str	r6, [sp, #100]	@ 0x64
 80139f0:	7852      	ldrb	r2, [r2, #1]
 80139f2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80139f6:	f1be 0f09 	cmp.w	lr, #9
 80139fa:	d939      	bls.n	8013a70 <_strtod_l+0x340>
 80139fc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80139fe:	1a76      	subs	r6, r6, r1
 8013a00:	2e08      	cmp	r6, #8
 8013a02:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8013a06:	dc03      	bgt.n	8013a10 <_strtod_l+0x2e0>
 8013a08:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013a0a:	4588      	cmp	r8, r1
 8013a0c:	bfa8      	it	ge
 8013a0e:	4688      	movge	r8, r1
 8013a10:	f1bc 0f00 	cmp.w	ip, #0
 8013a14:	d001      	beq.n	8013a1a <_strtod_l+0x2ea>
 8013a16:	f1c8 0800 	rsb	r8, r8, #0
 8013a1a:	2d00      	cmp	r5, #0
 8013a1c:	d14e      	bne.n	8013abc <_strtod_l+0x38c>
 8013a1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013a20:	4308      	orrs	r0, r1
 8013a22:	f47f aebe 	bne.w	80137a2 <_strtod_l+0x72>
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	f47f aed6 	bne.w	80137d8 <_strtod_l+0xa8>
 8013a2c:	2a69      	cmp	r2, #105	@ 0x69
 8013a2e:	d028      	beq.n	8013a82 <_strtod_l+0x352>
 8013a30:	dc25      	bgt.n	8013a7e <_strtod_l+0x34e>
 8013a32:	2a49      	cmp	r2, #73	@ 0x49
 8013a34:	d025      	beq.n	8013a82 <_strtod_l+0x352>
 8013a36:	2a4e      	cmp	r2, #78	@ 0x4e
 8013a38:	f47f aece 	bne.w	80137d8 <_strtod_l+0xa8>
 8013a3c:	499b      	ldr	r1, [pc, #620]	@ (8013cac <_strtod_l+0x57c>)
 8013a3e:	a819      	add	r0, sp, #100	@ 0x64
 8013a40:	f001 fd5e 	bl	8015500 <__match>
 8013a44:	2800      	cmp	r0, #0
 8013a46:	f43f aec7 	beq.w	80137d8 <_strtod_l+0xa8>
 8013a4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013a4c:	781b      	ldrb	r3, [r3, #0]
 8013a4e:	2b28      	cmp	r3, #40	@ 0x28
 8013a50:	d12e      	bne.n	8013ab0 <_strtod_l+0x380>
 8013a52:	4997      	ldr	r1, [pc, #604]	@ (8013cb0 <_strtod_l+0x580>)
 8013a54:	aa1c      	add	r2, sp, #112	@ 0x70
 8013a56:	a819      	add	r0, sp, #100	@ 0x64
 8013a58:	f001 fd66 	bl	8015528 <__hexnan>
 8013a5c:	2805      	cmp	r0, #5
 8013a5e:	d127      	bne.n	8013ab0 <_strtod_l+0x380>
 8013a60:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013a62:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8013a66:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013a6a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013a6e:	e698      	b.n	80137a2 <_strtod_l+0x72>
 8013a70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013a72:	fb08 2101 	mla	r1, r8, r1, r2
 8013a76:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8013a7a:	920e      	str	r2, [sp, #56]	@ 0x38
 8013a7c:	e7b5      	b.n	80139ea <_strtod_l+0x2ba>
 8013a7e:	2a6e      	cmp	r2, #110	@ 0x6e
 8013a80:	e7da      	b.n	8013a38 <_strtod_l+0x308>
 8013a82:	498c      	ldr	r1, [pc, #560]	@ (8013cb4 <_strtod_l+0x584>)
 8013a84:	a819      	add	r0, sp, #100	@ 0x64
 8013a86:	f001 fd3b 	bl	8015500 <__match>
 8013a8a:	2800      	cmp	r0, #0
 8013a8c:	f43f aea4 	beq.w	80137d8 <_strtod_l+0xa8>
 8013a90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013a92:	4989      	ldr	r1, [pc, #548]	@ (8013cb8 <_strtod_l+0x588>)
 8013a94:	3b01      	subs	r3, #1
 8013a96:	a819      	add	r0, sp, #100	@ 0x64
 8013a98:	9319      	str	r3, [sp, #100]	@ 0x64
 8013a9a:	f001 fd31 	bl	8015500 <__match>
 8013a9e:	b910      	cbnz	r0, 8013aa6 <_strtod_l+0x376>
 8013aa0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013aa2:	3301      	adds	r3, #1
 8013aa4:	9319      	str	r3, [sp, #100]	@ 0x64
 8013aa6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8013cc8 <_strtod_l+0x598>
 8013aaa:	f04f 0a00 	mov.w	sl, #0
 8013aae:	e678      	b.n	80137a2 <_strtod_l+0x72>
 8013ab0:	4882      	ldr	r0, [pc, #520]	@ (8013cbc <_strtod_l+0x58c>)
 8013ab2:	f001 fa61 	bl	8014f78 <nan>
 8013ab6:	ec5b ab10 	vmov	sl, fp, d0
 8013aba:	e672      	b.n	80137a2 <_strtod_l+0x72>
 8013abc:	eba8 0309 	sub.w	r3, r8, r9
 8013ac0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013ac2:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ac4:	2f00      	cmp	r7, #0
 8013ac6:	bf08      	it	eq
 8013ac8:	462f      	moveq	r7, r5
 8013aca:	2d10      	cmp	r5, #16
 8013acc:	462c      	mov	r4, r5
 8013ace:	bfa8      	it	ge
 8013ad0:	2410      	movge	r4, #16
 8013ad2:	f7ec fd3f 	bl	8000554 <__aeabi_ui2d>
 8013ad6:	2d09      	cmp	r5, #9
 8013ad8:	4682      	mov	sl, r0
 8013ada:	468b      	mov	fp, r1
 8013adc:	dc13      	bgt.n	8013b06 <_strtod_l+0x3d6>
 8013ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	f43f ae5e 	beq.w	80137a2 <_strtod_l+0x72>
 8013ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ae8:	dd78      	ble.n	8013bdc <_strtod_l+0x4ac>
 8013aea:	2b16      	cmp	r3, #22
 8013aec:	dc5f      	bgt.n	8013bae <_strtod_l+0x47e>
 8013aee:	4974      	ldr	r1, [pc, #464]	@ (8013cc0 <_strtod_l+0x590>)
 8013af0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013af4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013af8:	4652      	mov	r2, sl
 8013afa:	465b      	mov	r3, fp
 8013afc:	f7ec fda4 	bl	8000648 <__aeabi_dmul>
 8013b00:	4682      	mov	sl, r0
 8013b02:	468b      	mov	fp, r1
 8013b04:	e64d      	b.n	80137a2 <_strtod_l+0x72>
 8013b06:	4b6e      	ldr	r3, [pc, #440]	@ (8013cc0 <_strtod_l+0x590>)
 8013b08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013b0c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8013b10:	f7ec fd9a 	bl	8000648 <__aeabi_dmul>
 8013b14:	4682      	mov	sl, r0
 8013b16:	9808      	ldr	r0, [sp, #32]
 8013b18:	468b      	mov	fp, r1
 8013b1a:	f7ec fd1b 	bl	8000554 <__aeabi_ui2d>
 8013b1e:	4602      	mov	r2, r0
 8013b20:	460b      	mov	r3, r1
 8013b22:	4650      	mov	r0, sl
 8013b24:	4659      	mov	r1, fp
 8013b26:	f7ec fbd9 	bl	80002dc <__adddf3>
 8013b2a:	2d0f      	cmp	r5, #15
 8013b2c:	4682      	mov	sl, r0
 8013b2e:	468b      	mov	fp, r1
 8013b30:	ddd5      	ble.n	8013ade <_strtod_l+0x3ae>
 8013b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b34:	1b2c      	subs	r4, r5, r4
 8013b36:	441c      	add	r4, r3
 8013b38:	2c00      	cmp	r4, #0
 8013b3a:	f340 8096 	ble.w	8013c6a <_strtod_l+0x53a>
 8013b3e:	f014 030f 	ands.w	r3, r4, #15
 8013b42:	d00a      	beq.n	8013b5a <_strtod_l+0x42a>
 8013b44:	495e      	ldr	r1, [pc, #376]	@ (8013cc0 <_strtod_l+0x590>)
 8013b46:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013b4a:	4652      	mov	r2, sl
 8013b4c:	465b      	mov	r3, fp
 8013b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b52:	f7ec fd79 	bl	8000648 <__aeabi_dmul>
 8013b56:	4682      	mov	sl, r0
 8013b58:	468b      	mov	fp, r1
 8013b5a:	f034 040f 	bics.w	r4, r4, #15
 8013b5e:	d073      	beq.n	8013c48 <_strtod_l+0x518>
 8013b60:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8013b64:	dd48      	ble.n	8013bf8 <_strtod_l+0x4c8>
 8013b66:	2400      	movs	r4, #0
 8013b68:	46a0      	mov	r8, r4
 8013b6a:	940a      	str	r4, [sp, #40]	@ 0x28
 8013b6c:	46a1      	mov	r9, r4
 8013b6e:	9a05      	ldr	r2, [sp, #20]
 8013b70:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013cc8 <_strtod_l+0x598>
 8013b74:	2322      	movs	r3, #34	@ 0x22
 8013b76:	6013      	str	r3, [r2, #0]
 8013b78:	f04f 0a00 	mov.w	sl, #0
 8013b7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	f43f ae0f 	beq.w	80137a2 <_strtod_l+0x72>
 8013b84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013b86:	9805      	ldr	r0, [sp, #20]
 8013b88:	f7ff f942 	bl	8012e10 <_Bfree>
 8013b8c:	9805      	ldr	r0, [sp, #20]
 8013b8e:	4649      	mov	r1, r9
 8013b90:	f7ff f93e 	bl	8012e10 <_Bfree>
 8013b94:	9805      	ldr	r0, [sp, #20]
 8013b96:	4641      	mov	r1, r8
 8013b98:	f7ff f93a 	bl	8012e10 <_Bfree>
 8013b9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013b9e:	9805      	ldr	r0, [sp, #20]
 8013ba0:	f7ff f936 	bl	8012e10 <_Bfree>
 8013ba4:	9805      	ldr	r0, [sp, #20]
 8013ba6:	4621      	mov	r1, r4
 8013ba8:	f7ff f932 	bl	8012e10 <_Bfree>
 8013bac:	e5f9      	b.n	80137a2 <_strtod_l+0x72>
 8013bae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013bb0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8013bb4:	4293      	cmp	r3, r2
 8013bb6:	dbbc      	blt.n	8013b32 <_strtod_l+0x402>
 8013bb8:	4c41      	ldr	r4, [pc, #260]	@ (8013cc0 <_strtod_l+0x590>)
 8013bba:	f1c5 050f 	rsb	r5, r5, #15
 8013bbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013bc2:	4652      	mov	r2, sl
 8013bc4:	465b      	mov	r3, fp
 8013bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bca:	f7ec fd3d 	bl	8000648 <__aeabi_dmul>
 8013bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bd0:	1b5d      	subs	r5, r3, r5
 8013bd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013bd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013bda:	e78f      	b.n	8013afc <_strtod_l+0x3cc>
 8013bdc:	3316      	adds	r3, #22
 8013bde:	dba8      	blt.n	8013b32 <_strtod_l+0x402>
 8013be0:	4b37      	ldr	r3, [pc, #220]	@ (8013cc0 <_strtod_l+0x590>)
 8013be2:	eba9 0808 	sub.w	r8, r9, r8
 8013be6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8013bea:	e9d8 2300 	ldrd	r2, r3, [r8]
 8013bee:	4650      	mov	r0, sl
 8013bf0:	4659      	mov	r1, fp
 8013bf2:	f7ec fe53 	bl	800089c <__aeabi_ddiv>
 8013bf6:	e783      	b.n	8013b00 <_strtod_l+0x3d0>
 8013bf8:	4b32      	ldr	r3, [pc, #200]	@ (8013cc4 <_strtod_l+0x594>)
 8013bfa:	9308      	str	r3, [sp, #32]
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	1124      	asrs	r4, r4, #4
 8013c00:	4650      	mov	r0, sl
 8013c02:	4659      	mov	r1, fp
 8013c04:	461e      	mov	r6, r3
 8013c06:	2c01      	cmp	r4, #1
 8013c08:	dc21      	bgt.n	8013c4e <_strtod_l+0x51e>
 8013c0a:	b10b      	cbz	r3, 8013c10 <_strtod_l+0x4e0>
 8013c0c:	4682      	mov	sl, r0
 8013c0e:	468b      	mov	fp, r1
 8013c10:	492c      	ldr	r1, [pc, #176]	@ (8013cc4 <_strtod_l+0x594>)
 8013c12:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013c16:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8013c1a:	4652      	mov	r2, sl
 8013c1c:	465b      	mov	r3, fp
 8013c1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c22:	f7ec fd11 	bl	8000648 <__aeabi_dmul>
 8013c26:	4b28      	ldr	r3, [pc, #160]	@ (8013cc8 <_strtod_l+0x598>)
 8013c28:	460a      	mov	r2, r1
 8013c2a:	400b      	ands	r3, r1
 8013c2c:	4927      	ldr	r1, [pc, #156]	@ (8013ccc <_strtod_l+0x59c>)
 8013c2e:	428b      	cmp	r3, r1
 8013c30:	4682      	mov	sl, r0
 8013c32:	d898      	bhi.n	8013b66 <_strtod_l+0x436>
 8013c34:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013c38:	428b      	cmp	r3, r1
 8013c3a:	bf86      	itte	hi
 8013c3c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8013cd0 <_strtod_l+0x5a0>
 8013c40:	f04f 3aff 	movhi.w	sl, #4294967295
 8013c44:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013c48:	2300      	movs	r3, #0
 8013c4a:	9308      	str	r3, [sp, #32]
 8013c4c:	e07a      	b.n	8013d44 <_strtod_l+0x614>
 8013c4e:	07e2      	lsls	r2, r4, #31
 8013c50:	d505      	bpl.n	8013c5e <_strtod_l+0x52e>
 8013c52:	9b08      	ldr	r3, [sp, #32]
 8013c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c58:	f7ec fcf6 	bl	8000648 <__aeabi_dmul>
 8013c5c:	2301      	movs	r3, #1
 8013c5e:	9a08      	ldr	r2, [sp, #32]
 8013c60:	3208      	adds	r2, #8
 8013c62:	3601      	adds	r6, #1
 8013c64:	1064      	asrs	r4, r4, #1
 8013c66:	9208      	str	r2, [sp, #32]
 8013c68:	e7cd      	b.n	8013c06 <_strtod_l+0x4d6>
 8013c6a:	d0ed      	beq.n	8013c48 <_strtod_l+0x518>
 8013c6c:	4264      	negs	r4, r4
 8013c6e:	f014 020f 	ands.w	r2, r4, #15
 8013c72:	d00a      	beq.n	8013c8a <_strtod_l+0x55a>
 8013c74:	4b12      	ldr	r3, [pc, #72]	@ (8013cc0 <_strtod_l+0x590>)
 8013c76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c7a:	4650      	mov	r0, sl
 8013c7c:	4659      	mov	r1, fp
 8013c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c82:	f7ec fe0b 	bl	800089c <__aeabi_ddiv>
 8013c86:	4682      	mov	sl, r0
 8013c88:	468b      	mov	fp, r1
 8013c8a:	1124      	asrs	r4, r4, #4
 8013c8c:	d0dc      	beq.n	8013c48 <_strtod_l+0x518>
 8013c8e:	2c1f      	cmp	r4, #31
 8013c90:	dd20      	ble.n	8013cd4 <_strtod_l+0x5a4>
 8013c92:	2400      	movs	r4, #0
 8013c94:	46a0      	mov	r8, r4
 8013c96:	940a      	str	r4, [sp, #40]	@ 0x28
 8013c98:	46a1      	mov	r9, r4
 8013c9a:	9a05      	ldr	r2, [sp, #20]
 8013c9c:	2322      	movs	r3, #34	@ 0x22
 8013c9e:	f04f 0a00 	mov.w	sl, #0
 8013ca2:	f04f 0b00 	mov.w	fp, #0
 8013ca6:	6013      	str	r3, [r2, #0]
 8013ca8:	e768      	b.n	8013b7c <_strtod_l+0x44c>
 8013caa:	bf00      	nop
 8013cac:	0801702d 	.word	0x0801702d
 8013cb0:	08017244 	.word	0x08017244
 8013cb4:	08017025 	.word	0x08017025
 8013cb8:	0801705a 	.word	0x0801705a
 8013cbc:	08017408 	.word	0x08017408
 8013cc0:	08017178 	.word	0x08017178
 8013cc4:	08017150 	.word	0x08017150
 8013cc8:	7ff00000 	.word	0x7ff00000
 8013ccc:	7ca00000 	.word	0x7ca00000
 8013cd0:	7fefffff 	.word	0x7fefffff
 8013cd4:	f014 0310 	ands.w	r3, r4, #16
 8013cd8:	bf18      	it	ne
 8013cda:	236a      	movne	r3, #106	@ 0x6a
 8013cdc:	4ea9      	ldr	r6, [pc, #676]	@ (8013f84 <_strtod_l+0x854>)
 8013cde:	9308      	str	r3, [sp, #32]
 8013ce0:	4650      	mov	r0, sl
 8013ce2:	4659      	mov	r1, fp
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	07e2      	lsls	r2, r4, #31
 8013ce8:	d504      	bpl.n	8013cf4 <_strtod_l+0x5c4>
 8013cea:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013cee:	f7ec fcab 	bl	8000648 <__aeabi_dmul>
 8013cf2:	2301      	movs	r3, #1
 8013cf4:	1064      	asrs	r4, r4, #1
 8013cf6:	f106 0608 	add.w	r6, r6, #8
 8013cfa:	d1f4      	bne.n	8013ce6 <_strtod_l+0x5b6>
 8013cfc:	b10b      	cbz	r3, 8013d02 <_strtod_l+0x5d2>
 8013cfe:	4682      	mov	sl, r0
 8013d00:	468b      	mov	fp, r1
 8013d02:	9b08      	ldr	r3, [sp, #32]
 8013d04:	b1b3      	cbz	r3, 8013d34 <_strtod_l+0x604>
 8013d06:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013d0a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	4659      	mov	r1, fp
 8013d12:	dd0f      	ble.n	8013d34 <_strtod_l+0x604>
 8013d14:	2b1f      	cmp	r3, #31
 8013d16:	dd55      	ble.n	8013dc4 <_strtod_l+0x694>
 8013d18:	2b34      	cmp	r3, #52	@ 0x34
 8013d1a:	bfde      	ittt	le
 8013d1c:	f04f 33ff 	movle.w	r3, #4294967295
 8013d20:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8013d24:	4093      	lslle	r3, r2
 8013d26:	f04f 0a00 	mov.w	sl, #0
 8013d2a:	bfcc      	ite	gt
 8013d2c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013d30:	ea03 0b01 	andle.w	fp, r3, r1
 8013d34:	2200      	movs	r2, #0
 8013d36:	2300      	movs	r3, #0
 8013d38:	4650      	mov	r0, sl
 8013d3a:	4659      	mov	r1, fp
 8013d3c:	f7ec feec 	bl	8000b18 <__aeabi_dcmpeq>
 8013d40:	2800      	cmp	r0, #0
 8013d42:	d1a6      	bne.n	8013c92 <_strtod_l+0x562>
 8013d44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d46:	9300      	str	r3, [sp, #0]
 8013d48:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013d4a:	9805      	ldr	r0, [sp, #20]
 8013d4c:	462b      	mov	r3, r5
 8013d4e:	463a      	mov	r2, r7
 8013d50:	f7ff f8c6 	bl	8012ee0 <__s2b>
 8013d54:	900a      	str	r0, [sp, #40]	@ 0x28
 8013d56:	2800      	cmp	r0, #0
 8013d58:	f43f af05 	beq.w	8013b66 <_strtod_l+0x436>
 8013d5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013d5e:	2a00      	cmp	r2, #0
 8013d60:	eba9 0308 	sub.w	r3, r9, r8
 8013d64:	bfa8      	it	ge
 8013d66:	2300      	movge	r3, #0
 8013d68:	9312      	str	r3, [sp, #72]	@ 0x48
 8013d6a:	2400      	movs	r4, #0
 8013d6c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013d70:	9316      	str	r3, [sp, #88]	@ 0x58
 8013d72:	46a0      	mov	r8, r4
 8013d74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d76:	9805      	ldr	r0, [sp, #20]
 8013d78:	6859      	ldr	r1, [r3, #4]
 8013d7a:	f7ff f809 	bl	8012d90 <_Balloc>
 8013d7e:	4681      	mov	r9, r0
 8013d80:	2800      	cmp	r0, #0
 8013d82:	f43f aef4 	beq.w	8013b6e <_strtod_l+0x43e>
 8013d86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d88:	691a      	ldr	r2, [r3, #16]
 8013d8a:	3202      	adds	r2, #2
 8013d8c:	f103 010c 	add.w	r1, r3, #12
 8013d90:	0092      	lsls	r2, r2, #2
 8013d92:	300c      	adds	r0, #12
 8013d94:	f7fe f899 	bl	8011eca <memcpy>
 8013d98:	ec4b ab10 	vmov	d0, sl, fp
 8013d9c:	9805      	ldr	r0, [sp, #20]
 8013d9e:	aa1c      	add	r2, sp, #112	@ 0x70
 8013da0:	a91b      	add	r1, sp, #108	@ 0x6c
 8013da2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8013da6:	f7ff fbd7 	bl	8013558 <__d2b>
 8013daa:	901a      	str	r0, [sp, #104]	@ 0x68
 8013dac:	2800      	cmp	r0, #0
 8013dae:	f43f aede 	beq.w	8013b6e <_strtod_l+0x43e>
 8013db2:	9805      	ldr	r0, [sp, #20]
 8013db4:	2101      	movs	r1, #1
 8013db6:	f7ff f929 	bl	801300c <__i2b>
 8013dba:	4680      	mov	r8, r0
 8013dbc:	b948      	cbnz	r0, 8013dd2 <_strtod_l+0x6a2>
 8013dbe:	f04f 0800 	mov.w	r8, #0
 8013dc2:	e6d4      	b.n	8013b6e <_strtod_l+0x43e>
 8013dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8013dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8013dcc:	ea03 0a0a 	and.w	sl, r3, sl
 8013dd0:	e7b0      	b.n	8013d34 <_strtod_l+0x604>
 8013dd2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013dd4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013dd6:	2d00      	cmp	r5, #0
 8013dd8:	bfab      	itete	ge
 8013dda:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8013ddc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8013dde:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8013de0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8013de2:	bfac      	ite	ge
 8013de4:	18ef      	addge	r7, r5, r3
 8013de6:	1b5e      	sublt	r6, r3, r5
 8013de8:	9b08      	ldr	r3, [sp, #32]
 8013dea:	1aed      	subs	r5, r5, r3
 8013dec:	4415      	add	r5, r2
 8013dee:	4b66      	ldr	r3, [pc, #408]	@ (8013f88 <_strtod_l+0x858>)
 8013df0:	3d01      	subs	r5, #1
 8013df2:	429d      	cmp	r5, r3
 8013df4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013df8:	da50      	bge.n	8013e9c <_strtod_l+0x76c>
 8013dfa:	1b5b      	subs	r3, r3, r5
 8013dfc:	2b1f      	cmp	r3, #31
 8013dfe:	eba2 0203 	sub.w	r2, r2, r3
 8013e02:	f04f 0101 	mov.w	r1, #1
 8013e06:	dc3d      	bgt.n	8013e84 <_strtod_l+0x754>
 8013e08:	fa01 f303 	lsl.w	r3, r1, r3
 8013e0c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013e0e:	2300      	movs	r3, #0
 8013e10:	9310      	str	r3, [sp, #64]	@ 0x40
 8013e12:	18bd      	adds	r5, r7, r2
 8013e14:	9b08      	ldr	r3, [sp, #32]
 8013e16:	42af      	cmp	r7, r5
 8013e18:	4416      	add	r6, r2
 8013e1a:	441e      	add	r6, r3
 8013e1c:	463b      	mov	r3, r7
 8013e1e:	bfa8      	it	ge
 8013e20:	462b      	movge	r3, r5
 8013e22:	42b3      	cmp	r3, r6
 8013e24:	bfa8      	it	ge
 8013e26:	4633      	movge	r3, r6
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	bfc2      	ittt	gt
 8013e2c:	1aed      	subgt	r5, r5, r3
 8013e2e:	1af6      	subgt	r6, r6, r3
 8013e30:	1aff      	subgt	r7, r7, r3
 8013e32:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	dd16      	ble.n	8013e66 <_strtod_l+0x736>
 8013e38:	4641      	mov	r1, r8
 8013e3a:	9805      	ldr	r0, [sp, #20]
 8013e3c:	461a      	mov	r2, r3
 8013e3e:	f7ff f9a5 	bl	801318c <__pow5mult>
 8013e42:	4680      	mov	r8, r0
 8013e44:	2800      	cmp	r0, #0
 8013e46:	d0ba      	beq.n	8013dbe <_strtod_l+0x68e>
 8013e48:	4601      	mov	r1, r0
 8013e4a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013e4c:	9805      	ldr	r0, [sp, #20]
 8013e4e:	f7ff f8f3 	bl	8013038 <__multiply>
 8013e52:	900e      	str	r0, [sp, #56]	@ 0x38
 8013e54:	2800      	cmp	r0, #0
 8013e56:	f43f ae8a 	beq.w	8013b6e <_strtod_l+0x43e>
 8013e5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013e5c:	9805      	ldr	r0, [sp, #20]
 8013e5e:	f7fe ffd7 	bl	8012e10 <_Bfree>
 8013e62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e64:	931a      	str	r3, [sp, #104]	@ 0x68
 8013e66:	2d00      	cmp	r5, #0
 8013e68:	dc1d      	bgt.n	8013ea6 <_strtod_l+0x776>
 8013e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	dd23      	ble.n	8013eb8 <_strtod_l+0x788>
 8013e70:	4649      	mov	r1, r9
 8013e72:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013e74:	9805      	ldr	r0, [sp, #20]
 8013e76:	f7ff f989 	bl	801318c <__pow5mult>
 8013e7a:	4681      	mov	r9, r0
 8013e7c:	b9e0      	cbnz	r0, 8013eb8 <_strtod_l+0x788>
 8013e7e:	f04f 0900 	mov.w	r9, #0
 8013e82:	e674      	b.n	8013b6e <_strtod_l+0x43e>
 8013e84:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8013e88:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8013e8c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8013e90:	35e2      	adds	r5, #226	@ 0xe2
 8013e92:	fa01 f305 	lsl.w	r3, r1, r5
 8013e96:	9310      	str	r3, [sp, #64]	@ 0x40
 8013e98:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013e9a:	e7ba      	b.n	8013e12 <_strtod_l+0x6e2>
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8013ea0:	2301      	movs	r3, #1
 8013ea2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013ea4:	e7b5      	b.n	8013e12 <_strtod_l+0x6e2>
 8013ea6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013ea8:	9805      	ldr	r0, [sp, #20]
 8013eaa:	462a      	mov	r2, r5
 8013eac:	f7ff f9c8 	bl	8013240 <__lshift>
 8013eb0:	901a      	str	r0, [sp, #104]	@ 0x68
 8013eb2:	2800      	cmp	r0, #0
 8013eb4:	d1d9      	bne.n	8013e6a <_strtod_l+0x73a>
 8013eb6:	e65a      	b.n	8013b6e <_strtod_l+0x43e>
 8013eb8:	2e00      	cmp	r6, #0
 8013eba:	dd07      	ble.n	8013ecc <_strtod_l+0x79c>
 8013ebc:	4649      	mov	r1, r9
 8013ebe:	9805      	ldr	r0, [sp, #20]
 8013ec0:	4632      	mov	r2, r6
 8013ec2:	f7ff f9bd 	bl	8013240 <__lshift>
 8013ec6:	4681      	mov	r9, r0
 8013ec8:	2800      	cmp	r0, #0
 8013eca:	d0d8      	beq.n	8013e7e <_strtod_l+0x74e>
 8013ecc:	2f00      	cmp	r7, #0
 8013ece:	dd08      	ble.n	8013ee2 <_strtod_l+0x7b2>
 8013ed0:	4641      	mov	r1, r8
 8013ed2:	9805      	ldr	r0, [sp, #20]
 8013ed4:	463a      	mov	r2, r7
 8013ed6:	f7ff f9b3 	bl	8013240 <__lshift>
 8013eda:	4680      	mov	r8, r0
 8013edc:	2800      	cmp	r0, #0
 8013ede:	f43f ae46 	beq.w	8013b6e <_strtod_l+0x43e>
 8013ee2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013ee4:	9805      	ldr	r0, [sp, #20]
 8013ee6:	464a      	mov	r2, r9
 8013ee8:	f7ff fa32 	bl	8013350 <__mdiff>
 8013eec:	4604      	mov	r4, r0
 8013eee:	2800      	cmp	r0, #0
 8013ef0:	f43f ae3d 	beq.w	8013b6e <_strtod_l+0x43e>
 8013ef4:	68c3      	ldr	r3, [r0, #12]
 8013ef6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013ef8:	2300      	movs	r3, #0
 8013efa:	60c3      	str	r3, [r0, #12]
 8013efc:	4641      	mov	r1, r8
 8013efe:	f7ff fa0b 	bl	8013318 <__mcmp>
 8013f02:	2800      	cmp	r0, #0
 8013f04:	da46      	bge.n	8013f94 <_strtod_l+0x864>
 8013f06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013f08:	ea53 030a 	orrs.w	r3, r3, sl
 8013f0c:	d16c      	bne.n	8013fe8 <_strtod_l+0x8b8>
 8013f0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d168      	bne.n	8013fe8 <_strtod_l+0x8b8>
 8013f16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013f1a:	0d1b      	lsrs	r3, r3, #20
 8013f1c:	051b      	lsls	r3, r3, #20
 8013f1e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013f22:	d961      	bls.n	8013fe8 <_strtod_l+0x8b8>
 8013f24:	6963      	ldr	r3, [r4, #20]
 8013f26:	b913      	cbnz	r3, 8013f2e <_strtod_l+0x7fe>
 8013f28:	6923      	ldr	r3, [r4, #16]
 8013f2a:	2b01      	cmp	r3, #1
 8013f2c:	dd5c      	ble.n	8013fe8 <_strtod_l+0x8b8>
 8013f2e:	4621      	mov	r1, r4
 8013f30:	2201      	movs	r2, #1
 8013f32:	9805      	ldr	r0, [sp, #20]
 8013f34:	f7ff f984 	bl	8013240 <__lshift>
 8013f38:	4641      	mov	r1, r8
 8013f3a:	4604      	mov	r4, r0
 8013f3c:	f7ff f9ec 	bl	8013318 <__mcmp>
 8013f40:	2800      	cmp	r0, #0
 8013f42:	dd51      	ble.n	8013fe8 <_strtod_l+0x8b8>
 8013f44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013f48:	9a08      	ldr	r2, [sp, #32]
 8013f4a:	0d1b      	lsrs	r3, r3, #20
 8013f4c:	051b      	lsls	r3, r3, #20
 8013f4e:	2a00      	cmp	r2, #0
 8013f50:	d06b      	beq.n	801402a <_strtod_l+0x8fa>
 8013f52:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013f56:	d868      	bhi.n	801402a <_strtod_l+0x8fa>
 8013f58:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8013f5c:	f67f ae9d 	bls.w	8013c9a <_strtod_l+0x56a>
 8013f60:	4b0a      	ldr	r3, [pc, #40]	@ (8013f8c <_strtod_l+0x85c>)
 8013f62:	4650      	mov	r0, sl
 8013f64:	4659      	mov	r1, fp
 8013f66:	2200      	movs	r2, #0
 8013f68:	f7ec fb6e 	bl	8000648 <__aeabi_dmul>
 8013f6c:	4b08      	ldr	r3, [pc, #32]	@ (8013f90 <_strtod_l+0x860>)
 8013f6e:	400b      	ands	r3, r1
 8013f70:	4682      	mov	sl, r0
 8013f72:	468b      	mov	fp, r1
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	f47f ae05 	bne.w	8013b84 <_strtod_l+0x454>
 8013f7a:	9a05      	ldr	r2, [sp, #20]
 8013f7c:	2322      	movs	r3, #34	@ 0x22
 8013f7e:	6013      	str	r3, [r2, #0]
 8013f80:	e600      	b.n	8013b84 <_strtod_l+0x454>
 8013f82:	bf00      	nop
 8013f84:	08017270 	.word	0x08017270
 8013f88:	fffffc02 	.word	0xfffffc02
 8013f8c:	39500000 	.word	0x39500000
 8013f90:	7ff00000 	.word	0x7ff00000
 8013f94:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8013f98:	d165      	bne.n	8014066 <_strtod_l+0x936>
 8013f9a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013f9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013fa0:	b35a      	cbz	r2, 8013ffa <_strtod_l+0x8ca>
 8013fa2:	4a9f      	ldr	r2, [pc, #636]	@ (8014220 <_strtod_l+0xaf0>)
 8013fa4:	4293      	cmp	r3, r2
 8013fa6:	d12b      	bne.n	8014000 <_strtod_l+0x8d0>
 8013fa8:	9b08      	ldr	r3, [sp, #32]
 8013faa:	4651      	mov	r1, sl
 8013fac:	b303      	cbz	r3, 8013ff0 <_strtod_l+0x8c0>
 8013fae:	4b9d      	ldr	r3, [pc, #628]	@ (8014224 <_strtod_l+0xaf4>)
 8013fb0:	465a      	mov	r2, fp
 8013fb2:	4013      	ands	r3, r2
 8013fb4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8013fbc:	d81b      	bhi.n	8013ff6 <_strtod_l+0x8c6>
 8013fbe:	0d1b      	lsrs	r3, r3, #20
 8013fc0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8013fc8:	4299      	cmp	r1, r3
 8013fca:	d119      	bne.n	8014000 <_strtod_l+0x8d0>
 8013fcc:	4b96      	ldr	r3, [pc, #600]	@ (8014228 <_strtod_l+0xaf8>)
 8013fce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	d102      	bne.n	8013fda <_strtod_l+0x8aa>
 8013fd4:	3101      	adds	r1, #1
 8013fd6:	f43f adca 	beq.w	8013b6e <_strtod_l+0x43e>
 8013fda:	4b92      	ldr	r3, [pc, #584]	@ (8014224 <_strtod_l+0xaf4>)
 8013fdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013fde:	401a      	ands	r2, r3
 8013fe0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8013fe4:	f04f 0a00 	mov.w	sl, #0
 8013fe8:	9b08      	ldr	r3, [sp, #32]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d1b8      	bne.n	8013f60 <_strtod_l+0x830>
 8013fee:	e5c9      	b.n	8013b84 <_strtod_l+0x454>
 8013ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8013ff4:	e7e8      	b.n	8013fc8 <_strtod_l+0x898>
 8013ff6:	4613      	mov	r3, r2
 8013ff8:	e7e6      	b.n	8013fc8 <_strtod_l+0x898>
 8013ffa:	ea53 030a 	orrs.w	r3, r3, sl
 8013ffe:	d0a1      	beq.n	8013f44 <_strtod_l+0x814>
 8014000:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014002:	b1db      	cbz	r3, 801403c <_strtod_l+0x90c>
 8014004:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014006:	4213      	tst	r3, r2
 8014008:	d0ee      	beq.n	8013fe8 <_strtod_l+0x8b8>
 801400a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801400c:	9a08      	ldr	r2, [sp, #32]
 801400e:	4650      	mov	r0, sl
 8014010:	4659      	mov	r1, fp
 8014012:	b1bb      	cbz	r3, 8014044 <_strtod_l+0x914>
 8014014:	f7ff fb6e 	bl	80136f4 <sulp>
 8014018:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801401c:	ec53 2b10 	vmov	r2, r3, d0
 8014020:	f7ec f95c 	bl	80002dc <__adddf3>
 8014024:	4682      	mov	sl, r0
 8014026:	468b      	mov	fp, r1
 8014028:	e7de      	b.n	8013fe8 <_strtod_l+0x8b8>
 801402a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801402e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014032:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014036:	f04f 3aff 	mov.w	sl, #4294967295
 801403a:	e7d5      	b.n	8013fe8 <_strtod_l+0x8b8>
 801403c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801403e:	ea13 0f0a 	tst.w	r3, sl
 8014042:	e7e1      	b.n	8014008 <_strtod_l+0x8d8>
 8014044:	f7ff fb56 	bl	80136f4 <sulp>
 8014048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801404c:	ec53 2b10 	vmov	r2, r3, d0
 8014050:	f7ec f942 	bl	80002d8 <__aeabi_dsub>
 8014054:	2200      	movs	r2, #0
 8014056:	2300      	movs	r3, #0
 8014058:	4682      	mov	sl, r0
 801405a:	468b      	mov	fp, r1
 801405c:	f7ec fd5c 	bl	8000b18 <__aeabi_dcmpeq>
 8014060:	2800      	cmp	r0, #0
 8014062:	d0c1      	beq.n	8013fe8 <_strtod_l+0x8b8>
 8014064:	e619      	b.n	8013c9a <_strtod_l+0x56a>
 8014066:	4641      	mov	r1, r8
 8014068:	4620      	mov	r0, r4
 801406a:	f7ff facd 	bl	8013608 <__ratio>
 801406e:	ec57 6b10 	vmov	r6, r7, d0
 8014072:	2200      	movs	r2, #0
 8014074:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8014078:	4630      	mov	r0, r6
 801407a:	4639      	mov	r1, r7
 801407c:	f7ec fd60 	bl	8000b40 <__aeabi_dcmple>
 8014080:	2800      	cmp	r0, #0
 8014082:	d06f      	beq.n	8014164 <_strtod_l+0xa34>
 8014084:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014086:	2b00      	cmp	r3, #0
 8014088:	d17a      	bne.n	8014180 <_strtod_l+0xa50>
 801408a:	f1ba 0f00 	cmp.w	sl, #0
 801408e:	d158      	bne.n	8014142 <_strtod_l+0xa12>
 8014090:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014092:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014096:	2b00      	cmp	r3, #0
 8014098:	d15a      	bne.n	8014150 <_strtod_l+0xa20>
 801409a:	4b64      	ldr	r3, [pc, #400]	@ (801422c <_strtod_l+0xafc>)
 801409c:	2200      	movs	r2, #0
 801409e:	4630      	mov	r0, r6
 80140a0:	4639      	mov	r1, r7
 80140a2:	f7ec fd43 	bl	8000b2c <__aeabi_dcmplt>
 80140a6:	2800      	cmp	r0, #0
 80140a8:	d159      	bne.n	801415e <_strtod_l+0xa2e>
 80140aa:	4630      	mov	r0, r6
 80140ac:	4639      	mov	r1, r7
 80140ae:	4b60      	ldr	r3, [pc, #384]	@ (8014230 <_strtod_l+0xb00>)
 80140b0:	2200      	movs	r2, #0
 80140b2:	f7ec fac9 	bl	8000648 <__aeabi_dmul>
 80140b6:	4606      	mov	r6, r0
 80140b8:	460f      	mov	r7, r1
 80140ba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80140be:	9606      	str	r6, [sp, #24]
 80140c0:	9307      	str	r3, [sp, #28]
 80140c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80140c6:	4d57      	ldr	r5, [pc, #348]	@ (8014224 <_strtod_l+0xaf4>)
 80140c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80140cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80140ce:	401d      	ands	r5, r3
 80140d0:	4b58      	ldr	r3, [pc, #352]	@ (8014234 <_strtod_l+0xb04>)
 80140d2:	429d      	cmp	r5, r3
 80140d4:	f040 80b2 	bne.w	801423c <_strtod_l+0xb0c>
 80140d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80140da:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80140de:	ec4b ab10 	vmov	d0, sl, fp
 80140e2:	f7ff f9c9 	bl	8013478 <__ulp>
 80140e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80140ea:	ec51 0b10 	vmov	r0, r1, d0
 80140ee:	f7ec faab 	bl	8000648 <__aeabi_dmul>
 80140f2:	4652      	mov	r2, sl
 80140f4:	465b      	mov	r3, fp
 80140f6:	f7ec f8f1 	bl	80002dc <__adddf3>
 80140fa:	460b      	mov	r3, r1
 80140fc:	4949      	ldr	r1, [pc, #292]	@ (8014224 <_strtod_l+0xaf4>)
 80140fe:	4a4e      	ldr	r2, [pc, #312]	@ (8014238 <_strtod_l+0xb08>)
 8014100:	4019      	ands	r1, r3
 8014102:	4291      	cmp	r1, r2
 8014104:	4682      	mov	sl, r0
 8014106:	d942      	bls.n	801418e <_strtod_l+0xa5e>
 8014108:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801410a:	4b47      	ldr	r3, [pc, #284]	@ (8014228 <_strtod_l+0xaf8>)
 801410c:	429a      	cmp	r2, r3
 801410e:	d103      	bne.n	8014118 <_strtod_l+0x9e8>
 8014110:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014112:	3301      	adds	r3, #1
 8014114:	f43f ad2b 	beq.w	8013b6e <_strtod_l+0x43e>
 8014118:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8014228 <_strtod_l+0xaf8>
 801411c:	f04f 3aff 	mov.w	sl, #4294967295
 8014120:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014122:	9805      	ldr	r0, [sp, #20]
 8014124:	f7fe fe74 	bl	8012e10 <_Bfree>
 8014128:	9805      	ldr	r0, [sp, #20]
 801412a:	4649      	mov	r1, r9
 801412c:	f7fe fe70 	bl	8012e10 <_Bfree>
 8014130:	9805      	ldr	r0, [sp, #20]
 8014132:	4641      	mov	r1, r8
 8014134:	f7fe fe6c 	bl	8012e10 <_Bfree>
 8014138:	9805      	ldr	r0, [sp, #20]
 801413a:	4621      	mov	r1, r4
 801413c:	f7fe fe68 	bl	8012e10 <_Bfree>
 8014140:	e618      	b.n	8013d74 <_strtod_l+0x644>
 8014142:	f1ba 0f01 	cmp.w	sl, #1
 8014146:	d103      	bne.n	8014150 <_strtod_l+0xa20>
 8014148:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801414a:	2b00      	cmp	r3, #0
 801414c:	f43f ada5 	beq.w	8013c9a <_strtod_l+0x56a>
 8014150:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8014200 <_strtod_l+0xad0>
 8014154:	4f35      	ldr	r7, [pc, #212]	@ (801422c <_strtod_l+0xafc>)
 8014156:	ed8d 7b06 	vstr	d7, [sp, #24]
 801415a:	2600      	movs	r6, #0
 801415c:	e7b1      	b.n	80140c2 <_strtod_l+0x992>
 801415e:	4f34      	ldr	r7, [pc, #208]	@ (8014230 <_strtod_l+0xb00>)
 8014160:	2600      	movs	r6, #0
 8014162:	e7aa      	b.n	80140ba <_strtod_l+0x98a>
 8014164:	4b32      	ldr	r3, [pc, #200]	@ (8014230 <_strtod_l+0xb00>)
 8014166:	4630      	mov	r0, r6
 8014168:	4639      	mov	r1, r7
 801416a:	2200      	movs	r2, #0
 801416c:	f7ec fa6c 	bl	8000648 <__aeabi_dmul>
 8014170:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014172:	4606      	mov	r6, r0
 8014174:	460f      	mov	r7, r1
 8014176:	2b00      	cmp	r3, #0
 8014178:	d09f      	beq.n	80140ba <_strtod_l+0x98a>
 801417a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801417e:	e7a0      	b.n	80140c2 <_strtod_l+0x992>
 8014180:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8014208 <_strtod_l+0xad8>
 8014184:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014188:	ec57 6b17 	vmov	r6, r7, d7
 801418c:	e799      	b.n	80140c2 <_strtod_l+0x992>
 801418e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8014192:	9b08      	ldr	r3, [sp, #32]
 8014194:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8014198:	2b00      	cmp	r3, #0
 801419a:	d1c1      	bne.n	8014120 <_strtod_l+0x9f0>
 801419c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80141a0:	0d1b      	lsrs	r3, r3, #20
 80141a2:	051b      	lsls	r3, r3, #20
 80141a4:	429d      	cmp	r5, r3
 80141a6:	d1bb      	bne.n	8014120 <_strtod_l+0x9f0>
 80141a8:	4630      	mov	r0, r6
 80141aa:	4639      	mov	r1, r7
 80141ac:	f7ec fdac 	bl	8000d08 <__aeabi_d2lz>
 80141b0:	f7ec fa1c 	bl	80005ec <__aeabi_l2d>
 80141b4:	4602      	mov	r2, r0
 80141b6:	460b      	mov	r3, r1
 80141b8:	4630      	mov	r0, r6
 80141ba:	4639      	mov	r1, r7
 80141bc:	f7ec f88c 	bl	80002d8 <__aeabi_dsub>
 80141c0:	460b      	mov	r3, r1
 80141c2:	4602      	mov	r2, r0
 80141c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80141c8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80141cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80141ce:	ea46 060a 	orr.w	r6, r6, sl
 80141d2:	431e      	orrs	r6, r3
 80141d4:	d06f      	beq.n	80142b6 <_strtod_l+0xb86>
 80141d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8014210 <_strtod_l+0xae0>)
 80141d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141dc:	f7ec fca6 	bl	8000b2c <__aeabi_dcmplt>
 80141e0:	2800      	cmp	r0, #0
 80141e2:	f47f accf 	bne.w	8013b84 <_strtod_l+0x454>
 80141e6:	a30c      	add	r3, pc, #48	@ (adr r3, 8014218 <_strtod_l+0xae8>)
 80141e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80141f0:	f7ec fcba 	bl	8000b68 <__aeabi_dcmpgt>
 80141f4:	2800      	cmp	r0, #0
 80141f6:	d093      	beq.n	8014120 <_strtod_l+0x9f0>
 80141f8:	e4c4      	b.n	8013b84 <_strtod_l+0x454>
 80141fa:	bf00      	nop
 80141fc:	f3af 8000 	nop.w
 8014200:	00000000 	.word	0x00000000
 8014204:	bff00000 	.word	0xbff00000
 8014208:	00000000 	.word	0x00000000
 801420c:	3ff00000 	.word	0x3ff00000
 8014210:	94a03595 	.word	0x94a03595
 8014214:	3fdfffff 	.word	0x3fdfffff
 8014218:	35afe535 	.word	0x35afe535
 801421c:	3fe00000 	.word	0x3fe00000
 8014220:	000fffff 	.word	0x000fffff
 8014224:	7ff00000 	.word	0x7ff00000
 8014228:	7fefffff 	.word	0x7fefffff
 801422c:	3ff00000 	.word	0x3ff00000
 8014230:	3fe00000 	.word	0x3fe00000
 8014234:	7fe00000 	.word	0x7fe00000
 8014238:	7c9fffff 	.word	0x7c9fffff
 801423c:	9b08      	ldr	r3, [sp, #32]
 801423e:	b323      	cbz	r3, 801428a <_strtod_l+0xb5a>
 8014240:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8014244:	d821      	bhi.n	801428a <_strtod_l+0xb5a>
 8014246:	a328      	add	r3, pc, #160	@ (adr r3, 80142e8 <_strtod_l+0xbb8>)
 8014248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801424c:	4630      	mov	r0, r6
 801424e:	4639      	mov	r1, r7
 8014250:	f7ec fc76 	bl	8000b40 <__aeabi_dcmple>
 8014254:	b1a0      	cbz	r0, 8014280 <_strtod_l+0xb50>
 8014256:	4639      	mov	r1, r7
 8014258:	4630      	mov	r0, r6
 801425a:	f7ec fccd 	bl	8000bf8 <__aeabi_d2uiz>
 801425e:	2801      	cmp	r0, #1
 8014260:	bf38      	it	cc
 8014262:	2001      	movcc	r0, #1
 8014264:	f7ec f976 	bl	8000554 <__aeabi_ui2d>
 8014268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801426a:	4606      	mov	r6, r0
 801426c:	460f      	mov	r7, r1
 801426e:	b9fb      	cbnz	r3, 80142b0 <_strtod_l+0xb80>
 8014270:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014274:	9014      	str	r0, [sp, #80]	@ 0x50
 8014276:	9315      	str	r3, [sp, #84]	@ 0x54
 8014278:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801427c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8014280:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014282:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8014286:	1b5b      	subs	r3, r3, r5
 8014288:	9311      	str	r3, [sp, #68]	@ 0x44
 801428a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801428e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8014292:	f7ff f8f1 	bl	8013478 <__ulp>
 8014296:	4650      	mov	r0, sl
 8014298:	ec53 2b10 	vmov	r2, r3, d0
 801429c:	4659      	mov	r1, fp
 801429e:	f7ec f9d3 	bl	8000648 <__aeabi_dmul>
 80142a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80142a6:	f7ec f819 	bl	80002dc <__adddf3>
 80142aa:	4682      	mov	sl, r0
 80142ac:	468b      	mov	fp, r1
 80142ae:	e770      	b.n	8014192 <_strtod_l+0xa62>
 80142b0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80142b4:	e7e0      	b.n	8014278 <_strtod_l+0xb48>
 80142b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80142f0 <_strtod_l+0xbc0>)
 80142b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142bc:	f7ec fc36 	bl	8000b2c <__aeabi_dcmplt>
 80142c0:	e798      	b.n	80141f4 <_strtod_l+0xac4>
 80142c2:	2300      	movs	r3, #0
 80142c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80142c6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80142c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80142ca:	6013      	str	r3, [r2, #0]
 80142cc:	f7ff ba6d 	b.w	80137aa <_strtod_l+0x7a>
 80142d0:	2a65      	cmp	r2, #101	@ 0x65
 80142d2:	f43f ab66 	beq.w	80139a2 <_strtod_l+0x272>
 80142d6:	2a45      	cmp	r2, #69	@ 0x45
 80142d8:	f43f ab63 	beq.w	80139a2 <_strtod_l+0x272>
 80142dc:	2301      	movs	r3, #1
 80142de:	f7ff bb9e 	b.w	8013a1e <_strtod_l+0x2ee>
 80142e2:	bf00      	nop
 80142e4:	f3af 8000 	nop.w
 80142e8:	ffc00000 	.word	0xffc00000
 80142ec:	41dfffff 	.word	0x41dfffff
 80142f0:	94a03595 	.word	0x94a03595
 80142f4:	3fcfffff 	.word	0x3fcfffff

080142f8 <_strtod_r>:
 80142f8:	4b01      	ldr	r3, [pc, #4]	@ (8014300 <_strtod_r+0x8>)
 80142fa:	f7ff ba19 	b.w	8013730 <_strtod_l>
 80142fe:	bf00      	nop
 8014300:	20000238 	.word	0x20000238

08014304 <_strtol_l.constprop.0>:
 8014304:	2b24      	cmp	r3, #36	@ 0x24
 8014306:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801430a:	4686      	mov	lr, r0
 801430c:	4690      	mov	r8, r2
 801430e:	d801      	bhi.n	8014314 <_strtol_l.constprop.0+0x10>
 8014310:	2b01      	cmp	r3, #1
 8014312:	d106      	bne.n	8014322 <_strtol_l.constprop.0+0x1e>
 8014314:	f7fd fdac 	bl	8011e70 <__errno>
 8014318:	2316      	movs	r3, #22
 801431a:	6003      	str	r3, [r0, #0]
 801431c:	2000      	movs	r0, #0
 801431e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014322:	4834      	ldr	r0, [pc, #208]	@ (80143f4 <_strtol_l.constprop.0+0xf0>)
 8014324:	460d      	mov	r5, r1
 8014326:	462a      	mov	r2, r5
 8014328:	f815 4b01 	ldrb.w	r4, [r5], #1
 801432c:	5d06      	ldrb	r6, [r0, r4]
 801432e:	f016 0608 	ands.w	r6, r6, #8
 8014332:	d1f8      	bne.n	8014326 <_strtol_l.constprop.0+0x22>
 8014334:	2c2d      	cmp	r4, #45	@ 0x2d
 8014336:	d12d      	bne.n	8014394 <_strtol_l.constprop.0+0x90>
 8014338:	782c      	ldrb	r4, [r5, #0]
 801433a:	2601      	movs	r6, #1
 801433c:	1c95      	adds	r5, r2, #2
 801433e:	f033 0210 	bics.w	r2, r3, #16
 8014342:	d109      	bne.n	8014358 <_strtol_l.constprop.0+0x54>
 8014344:	2c30      	cmp	r4, #48	@ 0x30
 8014346:	d12a      	bne.n	801439e <_strtol_l.constprop.0+0x9a>
 8014348:	782a      	ldrb	r2, [r5, #0]
 801434a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801434e:	2a58      	cmp	r2, #88	@ 0x58
 8014350:	d125      	bne.n	801439e <_strtol_l.constprop.0+0x9a>
 8014352:	786c      	ldrb	r4, [r5, #1]
 8014354:	2310      	movs	r3, #16
 8014356:	3502      	adds	r5, #2
 8014358:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801435c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014360:	2200      	movs	r2, #0
 8014362:	fbbc f9f3 	udiv	r9, ip, r3
 8014366:	4610      	mov	r0, r2
 8014368:	fb03 ca19 	mls	sl, r3, r9, ip
 801436c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8014370:	2f09      	cmp	r7, #9
 8014372:	d81b      	bhi.n	80143ac <_strtol_l.constprop.0+0xa8>
 8014374:	463c      	mov	r4, r7
 8014376:	42a3      	cmp	r3, r4
 8014378:	dd27      	ble.n	80143ca <_strtol_l.constprop.0+0xc6>
 801437a:	1c57      	adds	r7, r2, #1
 801437c:	d007      	beq.n	801438e <_strtol_l.constprop.0+0x8a>
 801437e:	4581      	cmp	r9, r0
 8014380:	d320      	bcc.n	80143c4 <_strtol_l.constprop.0+0xc0>
 8014382:	d101      	bne.n	8014388 <_strtol_l.constprop.0+0x84>
 8014384:	45a2      	cmp	sl, r4
 8014386:	db1d      	blt.n	80143c4 <_strtol_l.constprop.0+0xc0>
 8014388:	fb00 4003 	mla	r0, r0, r3, r4
 801438c:	2201      	movs	r2, #1
 801438e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014392:	e7eb      	b.n	801436c <_strtol_l.constprop.0+0x68>
 8014394:	2c2b      	cmp	r4, #43	@ 0x2b
 8014396:	bf04      	itt	eq
 8014398:	782c      	ldrbeq	r4, [r5, #0]
 801439a:	1c95      	addeq	r5, r2, #2
 801439c:	e7cf      	b.n	801433e <_strtol_l.constprop.0+0x3a>
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d1da      	bne.n	8014358 <_strtol_l.constprop.0+0x54>
 80143a2:	2c30      	cmp	r4, #48	@ 0x30
 80143a4:	bf0c      	ite	eq
 80143a6:	2308      	moveq	r3, #8
 80143a8:	230a      	movne	r3, #10
 80143aa:	e7d5      	b.n	8014358 <_strtol_l.constprop.0+0x54>
 80143ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80143b0:	2f19      	cmp	r7, #25
 80143b2:	d801      	bhi.n	80143b8 <_strtol_l.constprop.0+0xb4>
 80143b4:	3c37      	subs	r4, #55	@ 0x37
 80143b6:	e7de      	b.n	8014376 <_strtol_l.constprop.0+0x72>
 80143b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80143bc:	2f19      	cmp	r7, #25
 80143be:	d804      	bhi.n	80143ca <_strtol_l.constprop.0+0xc6>
 80143c0:	3c57      	subs	r4, #87	@ 0x57
 80143c2:	e7d8      	b.n	8014376 <_strtol_l.constprop.0+0x72>
 80143c4:	f04f 32ff 	mov.w	r2, #4294967295
 80143c8:	e7e1      	b.n	801438e <_strtol_l.constprop.0+0x8a>
 80143ca:	1c53      	adds	r3, r2, #1
 80143cc:	d108      	bne.n	80143e0 <_strtol_l.constprop.0+0xdc>
 80143ce:	2322      	movs	r3, #34	@ 0x22
 80143d0:	f8ce 3000 	str.w	r3, [lr]
 80143d4:	4660      	mov	r0, ip
 80143d6:	f1b8 0f00 	cmp.w	r8, #0
 80143da:	d0a0      	beq.n	801431e <_strtol_l.constprop.0+0x1a>
 80143dc:	1e69      	subs	r1, r5, #1
 80143de:	e006      	b.n	80143ee <_strtol_l.constprop.0+0xea>
 80143e0:	b106      	cbz	r6, 80143e4 <_strtol_l.constprop.0+0xe0>
 80143e2:	4240      	negs	r0, r0
 80143e4:	f1b8 0f00 	cmp.w	r8, #0
 80143e8:	d099      	beq.n	801431e <_strtol_l.constprop.0+0x1a>
 80143ea:	2a00      	cmp	r2, #0
 80143ec:	d1f6      	bne.n	80143dc <_strtol_l.constprop.0+0xd8>
 80143ee:	f8c8 1000 	str.w	r1, [r8]
 80143f2:	e794      	b.n	801431e <_strtol_l.constprop.0+0x1a>
 80143f4:	08017299 	.word	0x08017299

080143f8 <_strtol_r>:
 80143f8:	f7ff bf84 	b.w	8014304 <_strtol_l.constprop.0>

080143fc <__ssputs_r>:
 80143fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014400:	688e      	ldr	r6, [r1, #8]
 8014402:	461f      	mov	r7, r3
 8014404:	42be      	cmp	r6, r7
 8014406:	680b      	ldr	r3, [r1, #0]
 8014408:	4682      	mov	sl, r0
 801440a:	460c      	mov	r4, r1
 801440c:	4690      	mov	r8, r2
 801440e:	d82d      	bhi.n	801446c <__ssputs_r+0x70>
 8014410:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014414:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014418:	d026      	beq.n	8014468 <__ssputs_r+0x6c>
 801441a:	6965      	ldr	r5, [r4, #20]
 801441c:	6909      	ldr	r1, [r1, #16]
 801441e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014422:	eba3 0901 	sub.w	r9, r3, r1
 8014426:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801442a:	1c7b      	adds	r3, r7, #1
 801442c:	444b      	add	r3, r9
 801442e:	106d      	asrs	r5, r5, #1
 8014430:	429d      	cmp	r5, r3
 8014432:	bf38      	it	cc
 8014434:	461d      	movcc	r5, r3
 8014436:	0553      	lsls	r3, r2, #21
 8014438:	d527      	bpl.n	801448a <__ssputs_r+0x8e>
 801443a:	4629      	mov	r1, r5
 801443c:	f7fe fc1c 	bl	8012c78 <_malloc_r>
 8014440:	4606      	mov	r6, r0
 8014442:	b360      	cbz	r0, 801449e <__ssputs_r+0xa2>
 8014444:	6921      	ldr	r1, [r4, #16]
 8014446:	464a      	mov	r2, r9
 8014448:	f7fd fd3f 	bl	8011eca <memcpy>
 801444c:	89a3      	ldrh	r3, [r4, #12]
 801444e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014456:	81a3      	strh	r3, [r4, #12]
 8014458:	6126      	str	r6, [r4, #16]
 801445a:	6165      	str	r5, [r4, #20]
 801445c:	444e      	add	r6, r9
 801445e:	eba5 0509 	sub.w	r5, r5, r9
 8014462:	6026      	str	r6, [r4, #0]
 8014464:	60a5      	str	r5, [r4, #8]
 8014466:	463e      	mov	r6, r7
 8014468:	42be      	cmp	r6, r7
 801446a:	d900      	bls.n	801446e <__ssputs_r+0x72>
 801446c:	463e      	mov	r6, r7
 801446e:	6820      	ldr	r0, [r4, #0]
 8014470:	4632      	mov	r2, r6
 8014472:	4641      	mov	r1, r8
 8014474:	f000 fd53 	bl	8014f1e <memmove>
 8014478:	68a3      	ldr	r3, [r4, #8]
 801447a:	1b9b      	subs	r3, r3, r6
 801447c:	60a3      	str	r3, [r4, #8]
 801447e:	6823      	ldr	r3, [r4, #0]
 8014480:	4433      	add	r3, r6
 8014482:	6023      	str	r3, [r4, #0]
 8014484:	2000      	movs	r0, #0
 8014486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801448a:	462a      	mov	r2, r5
 801448c:	f001 f8f9 	bl	8015682 <_realloc_r>
 8014490:	4606      	mov	r6, r0
 8014492:	2800      	cmp	r0, #0
 8014494:	d1e0      	bne.n	8014458 <__ssputs_r+0x5c>
 8014496:	6921      	ldr	r1, [r4, #16]
 8014498:	4650      	mov	r0, sl
 801449a:	f7fe fb79 	bl	8012b90 <_free_r>
 801449e:	230c      	movs	r3, #12
 80144a0:	f8ca 3000 	str.w	r3, [sl]
 80144a4:	89a3      	ldrh	r3, [r4, #12]
 80144a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80144aa:	81a3      	strh	r3, [r4, #12]
 80144ac:	f04f 30ff 	mov.w	r0, #4294967295
 80144b0:	e7e9      	b.n	8014486 <__ssputs_r+0x8a>
	...

080144b4 <_svfiprintf_r>:
 80144b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144b8:	4698      	mov	r8, r3
 80144ba:	898b      	ldrh	r3, [r1, #12]
 80144bc:	061b      	lsls	r3, r3, #24
 80144be:	b09d      	sub	sp, #116	@ 0x74
 80144c0:	4607      	mov	r7, r0
 80144c2:	460d      	mov	r5, r1
 80144c4:	4614      	mov	r4, r2
 80144c6:	d510      	bpl.n	80144ea <_svfiprintf_r+0x36>
 80144c8:	690b      	ldr	r3, [r1, #16]
 80144ca:	b973      	cbnz	r3, 80144ea <_svfiprintf_r+0x36>
 80144cc:	2140      	movs	r1, #64	@ 0x40
 80144ce:	f7fe fbd3 	bl	8012c78 <_malloc_r>
 80144d2:	6028      	str	r0, [r5, #0]
 80144d4:	6128      	str	r0, [r5, #16]
 80144d6:	b930      	cbnz	r0, 80144e6 <_svfiprintf_r+0x32>
 80144d8:	230c      	movs	r3, #12
 80144da:	603b      	str	r3, [r7, #0]
 80144dc:	f04f 30ff 	mov.w	r0, #4294967295
 80144e0:	b01d      	add	sp, #116	@ 0x74
 80144e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144e6:	2340      	movs	r3, #64	@ 0x40
 80144e8:	616b      	str	r3, [r5, #20]
 80144ea:	2300      	movs	r3, #0
 80144ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80144ee:	2320      	movs	r3, #32
 80144f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80144f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80144f8:	2330      	movs	r3, #48	@ 0x30
 80144fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014698 <_svfiprintf_r+0x1e4>
 80144fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014502:	f04f 0901 	mov.w	r9, #1
 8014506:	4623      	mov	r3, r4
 8014508:	469a      	mov	sl, r3
 801450a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801450e:	b10a      	cbz	r2, 8014514 <_svfiprintf_r+0x60>
 8014510:	2a25      	cmp	r2, #37	@ 0x25
 8014512:	d1f9      	bne.n	8014508 <_svfiprintf_r+0x54>
 8014514:	ebba 0b04 	subs.w	fp, sl, r4
 8014518:	d00b      	beq.n	8014532 <_svfiprintf_r+0x7e>
 801451a:	465b      	mov	r3, fp
 801451c:	4622      	mov	r2, r4
 801451e:	4629      	mov	r1, r5
 8014520:	4638      	mov	r0, r7
 8014522:	f7ff ff6b 	bl	80143fc <__ssputs_r>
 8014526:	3001      	adds	r0, #1
 8014528:	f000 80a7 	beq.w	801467a <_svfiprintf_r+0x1c6>
 801452c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801452e:	445a      	add	r2, fp
 8014530:	9209      	str	r2, [sp, #36]	@ 0x24
 8014532:	f89a 3000 	ldrb.w	r3, [sl]
 8014536:	2b00      	cmp	r3, #0
 8014538:	f000 809f 	beq.w	801467a <_svfiprintf_r+0x1c6>
 801453c:	2300      	movs	r3, #0
 801453e:	f04f 32ff 	mov.w	r2, #4294967295
 8014542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014546:	f10a 0a01 	add.w	sl, sl, #1
 801454a:	9304      	str	r3, [sp, #16]
 801454c:	9307      	str	r3, [sp, #28]
 801454e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014552:	931a      	str	r3, [sp, #104]	@ 0x68
 8014554:	4654      	mov	r4, sl
 8014556:	2205      	movs	r2, #5
 8014558:	f814 1b01 	ldrb.w	r1, [r4], #1
 801455c:	484e      	ldr	r0, [pc, #312]	@ (8014698 <_svfiprintf_r+0x1e4>)
 801455e:	f7eb fe5f 	bl	8000220 <memchr>
 8014562:	9a04      	ldr	r2, [sp, #16]
 8014564:	b9d8      	cbnz	r0, 801459e <_svfiprintf_r+0xea>
 8014566:	06d0      	lsls	r0, r2, #27
 8014568:	bf44      	itt	mi
 801456a:	2320      	movmi	r3, #32
 801456c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014570:	0711      	lsls	r1, r2, #28
 8014572:	bf44      	itt	mi
 8014574:	232b      	movmi	r3, #43	@ 0x2b
 8014576:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801457a:	f89a 3000 	ldrb.w	r3, [sl]
 801457e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014580:	d015      	beq.n	80145ae <_svfiprintf_r+0xfa>
 8014582:	9a07      	ldr	r2, [sp, #28]
 8014584:	4654      	mov	r4, sl
 8014586:	2000      	movs	r0, #0
 8014588:	f04f 0c0a 	mov.w	ip, #10
 801458c:	4621      	mov	r1, r4
 801458e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014592:	3b30      	subs	r3, #48	@ 0x30
 8014594:	2b09      	cmp	r3, #9
 8014596:	d94b      	bls.n	8014630 <_svfiprintf_r+0x17c>
 8014598:	b1b0      	cbz	r0, 80145c8 <_svfiprintf_r+0x114>
 801459a:	9207      	str	r2, [sp, #28]
 801459c:	e014      	b.n	80145c8 <_svfiprintf_r+0x114>
 801459e:	eba0 0308 	sub.w	r3, r0, r8
 80145a2:	fa09 f303 	lsl.w	r3, r9, r3
 80145a6:	4313      	orrs	r3, r2
 80145a8:	9304      	str	r3, [sp, #16]
 80145aa:	46a2      	mov	sl, r4
 80145ac:	e7d2      	b.n	8014554 <_svfiprintf_r+0xa0>
 80145ae:	9b03      	ldr	r3, [sp, #12]
 80145b0:	1d19      	adds	r1, r3, #4
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	9103      	str	r1, [sp, #12]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	bfbb      	ittet	lt
 80145ba:	425b      	neglt	r3, r3
 80145bc:	f042 0202 	orrlt.w	r2, r2, #2
 80145c0:	9307      	strge	r3, [sp, #28]
 80145c2:	9307      	strlt	r3, [sp, #28]
 80145c4:	bfb8      	it	lt
 80145c6:	9204      	strlt	r2, [sp, #16]
 80145c8:	7823      	ldrb	r3, [r4, #0]
 80145ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80145cc:	d10a      	bne.n	80145e4 <_svfiprintf_r+0x130>
 80145ce:	7863      	ldrb	r3, [r4, #1]
 80145d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80145d2:	d132      	bne.n	801463a <_svfiprintf_r+0x186>
 80145d4:	9b03      	ldr	r3, [sp, #12]
 80145d6:	1d1a      	adds	r2, r3, #4
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	9203      	str	r2, [sp, #12]
 80145dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80145e0:	3402      	adds	r4, #2
 80145e2:	9305      	str	r3, [sp, #20]
 80145e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80146a8 <_svfiprintf_r+0x1f4>
 80145e8:	7821      	ldrb	r1, [r4, #0]
 80145ea:	2203      	movs	r2, #3
 80145ec:	4650      	mov	r0, sl
 80145ee:	f7eb fe17 	bl	8000220 <memchr>
 80145f2:	b138      	cbz	r0, 8014604 <_svfiprintf_r+0x150>
 80145f4:	9b04      	ldr	r3, [sp, #16]
 80145f6:	eba0 000a 	sub.w	r0, r0, sl
 80145fa:	2240      	movs	r2, #64	@ 0x40
 80145fc:	4082      	lsls	r2, r0
 80145fe:	4313      	orrs	r3, r2
 8014600:	3401      	adds	r4, #1
 8014602:	9304      	str	r3, [sp, #16]
 8014604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014608:	4824      	ldr	r0, [pc, #144]	@ (801469c <_svfiprintf_r+0x1e8>)
 801460a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801460e:	2206      	movs	r2, #6
 8014610:	f7eb fe06 	bl	8000220 <memchr>
 8014614:	2800      	cmp	r0, #0
 8014616:	d036      	beq.n	8014686 <_svfiprintf_r+0x1d2>
 8014618:	4b21      	ldr	r3, [pc, #132]	@ (80146a0 <_svfiprintf_r+0x1ec>)
 801461a:	bb1b      	cbnz	r3, 8014664 <_svfiprintf_r+0x1b0>
 801461c:	9b03      	ldr	r3, [sp, #12]
 801461e:	3307      	adds	r3, #7
 8014620:	f023 0307 	bic.w	r3, r3, #7
 8014624:	3308      	adds	r3, #8
 8014626:	9303      	str	r3, [sp, #12]
 8014628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801462a:	4433      	add	r3, r6
 801462c:	9309      	str	r3, [sp, #36]	@ 0x24
 801462e:	e76a      	b.n	8014506 <_svfiprintf_r+0x52>
 8014630:	fb0c 3202 	mla	r2, ip, r2, r3
 8014634:	460c      	mov	r4, r1
 8014636:	2001      	movs	r0, #1
 8014638:	e7a8      	b.n	801458c <_svfiprintf_r+0xd8>
 801463a:	2300      	movs	r3, #0
 801463c:	3401      	adds	r4, #1
 801463e:	9305      	str	r3, [sp, #20]
 8014640:	4619      	mov	r1, r3
 8014642:	f04f 0c0a 	mov.w	ip, #10
 8014646:	4620      	mov	r0, r4
 8014648:	f810 2b01 	ldrb.w	r2, [r0], #1
 801464c:	3a30      	subs	r2, #48	@ 0x30
 801464e:	2a09      	cmp	r2, #9
 8014650:	d903      	bls.n	801465a <_svfiprintf_r+0x1a6>
 8014652:	2b00      	cmp	r3, #0
 8014654:	d0c6      	beq.n	80145e4 <_svfiprintf_r+0x130>
 8014656:	9105      	str	r1, [sp, #20]
 8014658:	e7c4      	b.n	80145e4 <_svfiprintf_r+0x130>
 801465a:	fb0c 2101 	mla	r1, ip, r1, r2
 801465e:	4604      	mov	r4, r0
 8014660:	2301      	movs	r3, #1
 8014662:	e7f0      	b.n	8014646 <_svfiprintf_r+0x192>
 8014664:	ab03      	add	r3, sp, #12
 8014666:	9300      	str	r3, [sp, #0]
 8014668:	462a      	mov	r2, r5
 801466a:	4b0e      	ldr	r3, [pc, #56]	@ (80146a4 <_svfiprintf_r+0x1f0>)
 801466c:	a904      	add	r1, sp, #16
 801466e:	4638      	mov	r0, r7
 8014670:	f7fc fc7c 	bl	8010f6c <_printf_float>
 8014674:	1c42      	adds	r2, r0, #1
 8014676:	4606      	mov	r6, r0
 8014678:	d1d6      	bne.n	8014628 <_svfiprintf_r+0x174>
 801467a:	89ab      	ldrh	r3, [r5, #12]
 801467c:	065b      	lsls	r3, r3, #25
 801467e:	f53f af2d 	bmi.w	80144dc <_svfiprintf_r+0x28>
 8014682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014684:	e72c      	b.n	80144e0 <_svfiprintf_r+0x2c>
 8014686:	ab03      	add	r3, sp, #12
 8014688:	9300      	str	r3, [sp, #0]
 801468a:	462a      	mov	r2, r5
 801468c:	4b05      	ldr	r3, [pc, #20]	@ (80146a4 <_svfiprintf_r+0x1f0>)
 801468e:	a904      	add	r1, sp, #16
 8014690:	4638      	mov	r0, r7
 8014692:	f7fc ff03 	bl	801149c <_printf_i>
 8014696:	e7ed      	b.n	8014674 <_svfiprintf_r+0x1c0>
 8014698:	08017399 	.word	0x08017399
 801469c:	080173a3 	.word	0x080173a3
 80146a0:	08010f6d 	.word	0x08010f6d
 80146a4:	080143fd 	.word	0x080143fd
 80146a8:	0801739f 	.word	0x0801739f

080146ac <_sungetc_r>:
 80146ac:	b538      	push	{r3, r4, r5, lr}
 80146ae:	1c4b      	adds	r3, r1, #1
 80146b0:	4614      	mov	r4, r2
 80146b2:	d103      	bne.n	80146bc <_sungetc_r+0x10>
 80146b4:	f04f 35ff 	mov.w	r5, #4294967295
 80146b8:	4628      	mov	r0, r5
 80146ba:	bd38      	pop	{r3, r4, r5, pc}
 80146bc:	8993      	ldrh	r3, [r2, #12]
 80146be:	f023 0320 	bic.w	r3, r3, #32
 80146c2:	8193      	strh	r3, [r2, #12]
 80146c4:	6853      	ldr	r3, [r2, #4]
 80146c6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80146c8:	b2cd      	uxtb	r5, r1
 80146ca:	b18a      	cbz	r2, 80146f0 <_sungetc_r+0x44>
 80146cc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80146ce:	429a      	cmp	r2, r3
 80146d0:	dd08      	ble.n	80146e4 <_sungetc_r+0x38>
 80146d2:	6823      	ldr	r3, [r4, #0]
 80146d4:	1e5a      	subs	r2, r3, #1
 80146d6:	6022      	str	r2, [r4, #0]
 80146d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80146dc:	6863      	ldr	r3, [r4, #4]
 80146de:	3301      	adds	r3, #1
 80146e0:	6063      	str	r3, [r4, #4]
 80146e2:	e7e9      	b.n	80146b8 <_sungetc_r+0xc>
 80146e4:	4621      	mov	r1, r4
 80146e6:	f000 fbe0 	bl	8014eaa <__submore>
 80146ea:	2800      	cmp	r0, #0
 80146ec:	d0f1      	beq.n	80146d2 <_sungetc_r+0x26>
 80146ee:	e7e1      	b.n	80146b4 <_sungetc_r+0x8>
 80146f0:	6921      	ldr	r1, [r4, #16]
 80146f2:	6822      	ldr	r2, [r4, #0]
 80146f4:	b141      	cbz	r1, 8014708 <_sungetc_r+0x5c>
 80146f6:	4291      	cmp	r1, r2
 80146f8:	d206      	bcs.n	8014708 <_sungetc_r+0x5c>
 80146fa:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80146fe:	42a9      	cmp	r1, r5
 8014700:	d102      	bne.n	8014708 <_sungetc_r+0x5c>
 8014702:	3a01      	subs	r2, #1
 8014704:	6022      	str	r2, [r4, #0]
 8014706:	e7ea      	b.n	80146de <_sungetc_r+0x32>
 8014708:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 801470c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014710:	6363      	str	r3, [r4, #52]	@ 0x34
 8014712:	2303      	movs	r3, #3
 8014714:	63a3      	str	r3, [r4, #56]	@ 0x38
 8014716:	4623      	mov	r3, r4
 8014718:	f803 5f46 	strb.w	r5, [r3, #70]!
 801471c:	6023      	str	r3, [r4, #0]
 801471e:	2301      	movs	r3, #1
 8014720:	e7de      	b.n	80146e0 <_sungetc_r+0x34>

08014722 <__ssrefill_r>:
 8014722:	b510      	push	{r4, lr}
 8014724:	460c      	mov	r4, r1
 8014726:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8014728:	b169      	cbz	r1, 8014746 <__ssrefill_r+0x24>
 801472a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801472e:	4299      	cmp	r1, r3
 8014730:	d001      	beq.n	8014736 <__ssrefill_r+0x14>
 8014732:	f7fe fa2d 	bl	8012b90 <_free_r>
 8014736:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014738:	6063      	str	r3, [r4, #4]
 801473a:	2000      	movs	r0, #0
 801473c:	6360      	str	r0, [r4, #52]	@ 0x34
 801473e:	b113      	cbz	r3, 8014746 <__ssrefill_r+0x24>
 8014740:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8014742:	6023      	str	r3, [r4, #0]
 8014744:	bd10      	pop	{r4, pc}
 8014746:	6923      	ldr	r3, [r4, #16]
 8014748:	6023      	str	r3, [r4, #0]
 801474a:	2300      	movs	r3, #0
 801474c:	6063      	str	r3, [r4, #4]
 801474e:	89a3      	ldrh	r3, [r4, #12]
 8014750:	f043 0320 	orr.w	r3, r3, #32
 8014754:	81a3      	strh	r3, [r4, #12]
 8014756:	f04f 30ff 	mov.w	r0, #4294967295
 801475a:	e7f3      	b.n	8014744 <__ssrefill_r+0x22>

0801475c <__ssvfiscanf_r>:
 801475c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014760:	460c      	mov	r4, r1
 8014762:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8014766:	2100      	movs	r1, #0
 8014768:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801476c:	49a5      	ldr	r1, [pc, #660]	@ (8014a04 <__ssvfiscanf_r+0x2a8>)
 801476e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8014770:	f10d 0804 	add.w	r8, sp, #4
 8014774:	49a4      	ldr	r1, [pc, #656]	@ (8014a08 <__ssvfiscanf_r+0x2ac>)
 8014776:	4fa5      	ldr	r7, [pc, #660]	@ (8014a0c <__ssvfiscanf_r+0x2b0>)
 8014778:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801477c:	4606      	mov	r6, r0
 801477e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8014780:	9300      	str	r3, [sp, #0]
 8014782:	7813      	ldrb	r3, [r2, #0]
 8014784:	2b00      	cmp	r3, #0
 8014786:	f000 8158 	beq.w	8014a3a <__ssvfiscanf_r+0x2de>
 801478a:	5cf9      	ldrb	r1, [r7, r3]
 801478c:	f011 0108 	ands.w	r1, r1, #8
 8014790:	f102 0501 	add.w	r5, r2, #1
 8014794:	d019      	beq.n	80147ca <__ssvfiscanf_r+0x6e>
 8014796:	6863      	ldr	r3, [r4, #4]
 8014798:	2b00      	cmp	r3, #0
 801479a:	dd0f      	ble.n	80147bc <__ssvfiscanf_r+0x60>
 801479c:	6823      	ldr	r3, [r4, #0]
 801479e:	781a      	ldrb	r2, [r3, #0]
 80147a0:	5cba      	ldrb	r2, [r7, r2]
 80147a2:	0712      	lsls	r2, r2, #28
 80147a4:	d401      	bmi.n	80147aa <__ssvfiscanf_r+0x4e>
 80147a6:	462a      	mov	r2, r5
 80147a8:	e7eb      	b.n	8014782 <__ssvfiscanf_r+0x26>
 80147aa:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80147ac:	3201      	adds	r2, #1
 80147ae:	9245      	str	r2, [sp, #276]	@ 0x114
 80147b0:	6862      	ldr	r2, [r4, #4]
 80147b2:	3301      	adds	r3, #1
 80147b4:	3a01      	subs	r2, #1
 80147b6:	6062      	str	r2, [r4, #4]
 80147b8:	6023      	str	r3, [r4, #0]
 80147ba:	e7ec      	b.n	8014796 <__ssvfiscanf_r+0x3a>
 80147bc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80147be:	4621      	mov	r1, r4
 80147c0:	4630      	mov	r0, r6
 80147c2:	4798      	blx	r3
 80147c4:	2800      	cmp	r0, #0
 80147c6:	d0e9      	beq.n	801479c <__ssvfiscanf_r+0x40>
 80147c8:	e7ed      	b.n	80147a6 <__ssvfiscanf_r+0x4a>
 80147ca:	2b25      	cmp	r3, #37	@ 0x25
 80147cc:	d012      	beq.n	80147f4 <__ssvfiscanf_r+0x98>
 80147ce:	4699      	mov	r9, r3
 80147d0:	6863      	ldr	r3, [r4, #4]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	f340 8093 	ble.w	80148fe <__ssvfiscanf_r+0x1a2>
 80147d8:	6822      	ldr	r2, [r4, #0]
 80147da:	7813      	ldrb	r3, [r2, #0]
 80147dc:	454b      	cmp	r3, r9
 80147de:	f040 812c 	bne.w	8014a3a <__ssvfiscanf_r+0x2de>
 80147e2:	6863      	ldr	r3, [r4, #4]
 80147e4:	3b01      	subs	r3, #1
 80147e6:	6063      	str	r3, [r4, #4]
 80147e8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80147ea:	3201      	adds	r2, #1
 80147ec:	3301      	adds	r3, #1
 80147ee:	6022      	str	r2, [r4, #0]
 80147f0:	9345      	str	r3, [sp, #276]	@ 0x114
 80147f2:	e7d8      	b.n	80147a6 <__ssvfiscanf_r+0x4a>
 80147f4:	9141      	str	r1, [sp, #260]	@ 0x104
 80147f6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80147f8:	7853      	ldrb	r3, [r2, #1]
 80147fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80147fc:	bf02      	ittt	eq
 80147fe:	2310      	moveq	r3, #16
 8014800:	1c95      	addeq	r5, r2, #2
 8014802:	9341      	streq	r3, [sp, #260]	@ 0x104
 8014804:	220a      	movs	r2, #10
 8014806:	46a9      	mov	r9, r5
 8014808:	f819 1b01 	ldrb.w	r1, [r9], #1
 801480c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8014810:	2b09      	cmp	r3, #9
 8014812:	d91e      	bls.n	8014852 <__ssvfiscanf_r+0xf6>
 8014814:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8014a10 <__ssvfiscanf_r+0x2b4>
 8014818:	2203      	movs	r2, #3
 801481a:	4650      	mov	r0, sl
 801481c:	f7eb fd00 	bl	8000220 <memchr>
 8014820:	b138      	cbz	r0, 8014832 <__ssvfiscanf_r+0xd6>
 8014822:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014824:	eba0 000a 	sub.w	r0, r0, sl
 8014828:	2301      	movs	r3, #1
 801482a:	4083      	lsls	r3, r0
 801482c:	4313      	orrs	r3, r2
 801482e:	9341      	str	r3, [sp, #260]	@ 0x104
 8014830:	464d      	mov	r5, r9
 8014832:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014836:	2b78      	cmp	r3, #120	@ 0x78
 8014838:	d806      	bhi.n	8014848 <__ssvfiscanf_r+0xec>
 801483a:	2b57      	cmp	r3, #87	@ 0x57
 801483c:	d810      	bhi.n	8014860 <__ssvfiscanf_r+0x104>
 801483e:	2b25      	cmp	r3, #37	@ 0x25
 8014840:	d0c5      	beq.n	80147ce <__ssvfiscanf_r+0x72>
 8014842:	d857      	bhi.n	80148f4 <__ssvfiscanf_r+0x198>
 8014844:	2b00      	cmp	r3, #0
 8014846:	d065      	beq.n	8014914 <__ssvfiscanf_r+0x1b8>
 8014848:	2303      	movs	r3, #3
 801484a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801484c:	230a      	movs	r3, #10
 801484e:	9342      	str	r3, [sp, #264]	@ 0x108
 8014850:	e078      	b.n	8014944 <__ssvfiscanf_r+0x1e8>
 8014852:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8014854:	fb02 1103 	mla	r1, r2, r3, r1
 8014858:	3930      	subs	r1, #48	@ 0x30
 801485a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801485c:	464d      	mov	r5, r9
 801485e:	e7d2      	b.n	8014806 <__ssvfiscanf_r+0xaa>
 8014860:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8014864:	2a20      	cmp	r2, #32
 8014866:	d8ef      	bhi.n	8014848 <__ssvfiscanf_r+0xec>
 8014868:	a101      	add	r1, pc, #4	@ (adr r1, 8014870 <__ssvfiscanf_r+0x114>)
 801486a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801486e:	bf00      	nop
 8014870:	08014923 	.word	0x08014923
 8014874:	08014849 	.word	0x08014849
 8014878:	08014849 	.word	0x08014849
 801487c:	0801497d 	.word	0x0801497d
 8014880:	08014849 	.word	0x08014849
 8014884:	08014849 	.word	0x08014849
 8014888:	08014849 	.word	0x08014849
 801488c:	08014849 	.word	0x08014849
 8014890:	08014849 	.word	0x08014849
 8014894:	08014849 	.word	0x08014849
 8014898:	08014849 	.word	0x08014849
 801489c:	08014993 	.word	0x08014993
 80148a0:	08014979 	.word	0x08014979
 80148a4:	080148fb 	.word	0x080148fb
 80148a8:	080148fb 	.word	0x080148fb
 80148ac:	080148fb 	.word	0x080148fb
 80148b0:	08014849 	.word	0x08014849
 80148b4:	08014935 	.word	0x08014935
 80148b8:	08014849 	.word	0x08014849
 80148bc:	08014849 	.word	0x08014849
 80148c0:	08014849 	.word	0x08014849
 80148c4:	08014849 	.word	0x08014849
 80148c8:	080149a3 	.word	0x080149a3
 80148cc:	0801493d 	.word	0x0801493d
 80148d0:	0801491b 	.word	0x0801491b
 80148d4:	08014849 	.word	0x08014849
 80148d8:	08014849 	.word	0x08014849
 80148dc:	0801499f 	.word	0x0801499f
 80148e0:	08014849 	.word	0x08014849
 80148e4:	08014979 	.word	0x08014979
 80148e8:	08014849 	.word	0x08014849
 80148ec:	08014849 	.word	0x08014849
 80148f0:	08014923 	.word	0x08014923
 80148f4:	3b45      	subs	r3, #69	@ 0x45
 80148f6:	2b02      	cmp	r3, #2
 80148f8:	d8a6      	bhi.n	8014848 <__ssvfiscanf_r+0xec>
 80148fa:	2305      	movs	r3, #5
 80148fc:	e021      	b.n	8014942 <__ssvfiscanf_r+0x1e6>
 80148fe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014900:	4621      	mov	r1, r4
 8014902:	4630      	mov	r0, r6
 8014904:	4798      	blx	r3
 8014906:	2800      	cmp	r0, #0
 8014908:	f43f af66 	beq.w	80147d8 <__ssvfiscanf_r+0x7c>
 801490c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801490e:	2800      	cmp	r0, #0
 8014910:	f040 808b 	bne.w	8014a2a <__ssvfiscanf_r+0x2ce>
 8014914:	f04f 30ff 	mov.w	r0, #4294967295
 8014918:	e08b      	b.n	8014a32 <__ssvfiscanf_r+0x2d6>
 801491a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801491c:	f042 0220 	orr.w	r2, r2, #32
 8014920:	9241      	str	r2, [sp, #260]	@ 0x104
 8014922:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014924:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014928:	9241      	str	r2, [sp, #260]	@ 0x104
 801492a:	2210      	movs	r2, #16
 801492c:	2b6e      	cmp	r3, #110	@ 0x6e
 801492e:	9242      	str	r2, [sp, #264]	@ 0x108
 8014930:	d902      	bls.n	8014938 <__ssvfiscanf_r+0x1dc>
 8014932:	e005      	b.n	8014940 <__ssvfiscanf_r+0x1e4>
 8014934:	2300      	movs	r3, #0
 8014936:	9342      	str	r3, [sp, #264]	@ 0x108
 8014938:	2303      	movs	r3, #3
 801493a:	e002      	b.n	8014942 <__ssvfiscanf_r+0x1e6>
 801493c:	2308      	movs	r3, #8
 801493e:	9342      	str	r3, [sp, #264]	@ 0x108
 8014940:	2304      	movs	r3, #4
 8014942:	9347      	str	r3, [sp, #284]	@ 0x11c
 8014944:	6863      	ldr	r3, [r4, #4]
 8014946:	2b00      	cmp	r3, #0
 8014948:	dd39      	ble.n	80149be <__ssvfiscanf_r+0x262>
 801494a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801494c:	0659      	lsls	r1, r3, #25
 801494e:	d404      	bmi.n	801495a <__ssvfiscanf_r+0x1fe>
 8014950:	6823      	ldr	r3, [r4, #0]
 8014952:	781a      	ldrb	r2, [r3, #0]
 8014954:	5cba      	ldrb	r2, [r7, r2]
 8014956:	0712      	lsls	r2, r2, #28
 8014958:	d438      	bmi.n	80149cc <__ssvfiscanf_r+0x270>
 801495a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801495c:	2b02      	cmp	r3, #2
 801495e:	dc47      	bgt.n	80149f0 <__ssvfiscanf_r+0x294>
 8014960:	466b      	mov	r3, sp
 8014962:	4622      	mov	r2, r4
 8014964:	a941      	add	r1, sp, #260	@ 0x104
 8014966:	4630      	mov	r0, r6
 8014968:	f000 f86c 	bl	8014a44 <_scanf_chars>
 801496c:	2801      	cmp	r0, #1
 801496e:	d064      	beq.n	8014a3a <__ssvfiscanf_r+0x2de>
 8014970:	2802      	cmp	r0, #2
 8014972:	f47f af18 	bne.w	80147a6 <__ssvfiscanf_r+0x4a>
 8014976:	e7c9      	b.n	801490c <__ssvfiscanf_r+0x1b0>
 8014978:	220a      	movs	r2, #10
 801497a:	e7d7      	b.n	801492c <__ssvfiscanf_r+0x1d0>
 801497c:	4629      	mov	r1, r5
 801497e:	4640      	mov	r0, r8
 8014980:	f000 fa5a 	bl	8014e38 <__sccl>
 8014984:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801498a:	9341      	str	r3, [sp, #260]	@ 0x104
 801498c:	4605      	mov	r5, r0
 801498e:	2301      	movs	r3, #1
 8014990:	e7d7      	b.n	8014942 <__ssvfiscanf_r+0x1e6>
 8014992:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014998:	9341      	str	r3, [sp, #260]	@ 0x104
 801499a:	2300      	movs	r3, #0
 801499c:	e7d1      	b.n	8014942 <__ssvfiscanf_r+0x1e6>
 801499e:	2302      	movs	r3, #2
 80149a0:	e7cf      	b.n	8014942 <__ssvfiscanf_r+0x1e6>
 80149a2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80149a4:	06c3      	lsls	r3, r0, #27
 80149a6:	f53f aefe 	bmi.w	80147a6 <__ssvfiscanf_r+0x4a>
 80149aa:	9b00      	ldr	r3, [sp, #0]
 80149ac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80149ae:	1d19      	adds	r1, r3, #4
 80149b0:	9100      	str	r1, [sp, #0]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	07c0      	lsls	r0, r0, #31
 80149b6:	bf4c      	ite	mi
 80149b8:	801a      	strhmi	r2, [r3, #0]
 80149ba:	601a      	strpl	r2, [r3, #0]
 80149bc:	e6f3      	b.n	80147a6 <__ssvfiscanf_r+0x4a>
 80149be:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80149c0:	4621      	mov	r1, r4
 80149c2:	4630      	mov	r0, r6
 80149c4:	4798      	blx	r3
 80149c6:	2800      	cmp	r0, #0
 80149c8:	d0bf      	beq.n	801494a <__ssvfiscanf_r+0x1ee>
 80149ca:	e79f      	b.n	801490c <__ssvfiscanf_r+0x1b0>
 80149cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80149ce:	3201      	adds	r2, #1
 80149d0:	9245      	str	r2, [sp, #276]	@ 0x114
 80149d2:	6862      	ldr	r2, [r4, #4]
 80149d4:	3a01      	subs	r2, #1
 80149d6:	2a00      	cmp	r2, #0
 80149d8:	6062      	str	r2, [r4, #4]
 80149da:	dd02      	ble.n	80149e2 <__ssvfiscanf_r+0x286>
 80149dc:	3301      	adds	r3, #1
 80149de:	6023      	str	r3, [r4, #0]
 80149e0:	e7b6      	b.n	8014950 <__ssvfiscanf_r+0x1f4>
 80149e2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80149e4:	4621      	mov	r1, r4
 80149e6:	4630      	mov	r0, r6
 80149e8:	4798      	blx	r3
 80149ea:	2800      	cmp	r0, #0
 80149ec:	d0b0      	beq.n	8014950 <__ssvfiscanf_r+0x1f4>
 80149ee:	e78d      	b.n	801490c <__ssvfiscanf_r+0x1b0>
 80149f0:	2b04      	cmp	r3, #4
 80149f2:	dc0f      	bgt.n	8014a14 <__ssvfiscanf_r+0x2b8>
 80149f4:	466b      	mov	r3, sp
 80149f6:	4622      	mov	r2, r4
 80149f8:	a941      	add	r1, sp, #260	@ 0x104
 80149fa:	4630      	mov	r0, r6
 80149fc:	f000 f87c 	bl	8014af8 <_scanf_i>
 8014a00:	e7b4      	b.n	801496c <__ssvfiscanf_r+0x210>
 8014a02:	bf00      	nop
 8014a04:	080146ad 	.word	0x080146ad
 8014a08:	08014723 	.word	0x08014723
 8014a0c:	08017299 	.word	0x08017299
 8014a10:	0801739f 	.word	0x0801739f
 8014a14:	4b0a      	ldr	r3, [pc, #40]	@ (8014a40 <__ssvfiscanf_r+0x2e4>)
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	f43f aec5 	beq.w	80147a6 <__ssvfiscanf_r+0x4a>
 8014a1c:	466b      	mov	r3, sp
 8014a1e:	4622      	mov	r2, r4
 8014a20:	a941      	add	r1, sp, #260	@ 0x104
 8014a22:	4630      	mov	r0, r6
 8014a24:	f7fc fe5a 	bl	80116dc <_scanf_float>
 8014a28:	e7a0      	b.n	801496c <__ssvfiscanf_r+0x210>
 8014a2a:	89a3      	ldrh	r3, [r4, #12]
 8014a2c:	065b      	lsls	r3, r3, #25
 8014a2e:	f53f af71 	bmi.w	8014914 <__ssvfiscanf_r+0x1b8>
 8014a32:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8014a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a3a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8014a3c:	e7f9      	b.n	8014a32 <__ssvfiscanf_r+0x2d6>
 8014a3e:	bf00      	nop
 8014a40:	080116dd 	.word	0x080116dd

08014a44 <_scanf_chars>:
 8014a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a48:	4615      	mov	r5, r2
 8014a4a:	688a      	ldr	r2, [r1, #8]
 8014a4c:	4680      	mov	r8, r0
 8014a4e:	460c      	mov	r4, r1
 8014a50:	b932      	cbnz	r2, 8014a60 <_scanf_chars+0x1c>
 8014a52:	698a      	ldr	r2, [r1, #24]
 8014a54:	2a00      	cmp	r2, #0
 8014a56:	bf14      	ite	ne
 8014a58:	f04f 32ff 	movne.w	r2, #4294967295
 8014a5c:	2201      	moveq	r2, #1
 8014a5e:	608a      	str	r2, [r1, #8]
 8014a60:	6822      	ldr	r2, [r4, #0]
 8014a62:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8014af4 <_scanf_chars+0xb0>
 8014a66:	06d1      	lsls	r1, r2, #27
 8014a68:	bf5f      	itttt	pl
 8014a6a:	681a      	ldrpl	r2, [r3, #0]
 8014a6c:	1d11      	addpl	r1, r2, #4
 8014a6e:	6019      	strpl	r1, [r3, #0]
 8014a70:	6816      	ldrpl	r6, [r2, #0]
 8014a72:	2700      	movs	r7, #0
 8014a74:	69a0      	ldr	r0, [r4, #24]
 8014a76:	b188      	cbz	r0, 8014a9c <_scanf_chars+0x58>
 8014a78:	2801      	cmp	r0, #1
 8014a7a:	d107      	bne.n	8014a8c <_scanf_chars+0x48>
 8014a7c:	682b      	ldr	r3, [r5, #0]
 8014a7e:	781a      	ldrb	r2, [r3, #0]
 8014a80:	6963      	ldr	r3, [r4, #20]
 8014a82:	5c9b      	ldrb	r3, [r3, r2]
 8014a84:	b953      	cbnz	r3, 8014a9c <_scanf_chars+0x58>
 8014a86:	2f00      	cmp	r7, #0
 8014a88:	d031      	beq.n	8014aee <_scanf_chars+0xaa>
 8014a8a:	e022      	b.n	8014ad2 <_scanf_chars+0x8e>
 8014a8c:	2802      	cmp	r0, #2
 8014a8e:	d120      	bne.n	8014ad2 <_scanf_chars+0x8e>
 8014a90:	682b      	ldr	r3, [r5, #0]
 8014a92:	781b      	ldrb	r3, [r3, #0]
 8014a94:	f819 3003 	ldrb.w	r3, [r9, r3]
 8014a98:	071b      	lsls	r3, r3, #28
 8014a9a:	d41a      	bmi.n	8014ad2 <_scanf_chars+0x8e>
 8014a9c:	6823      	ldr	r3, [r4, #0]
 8014a9e:	06da      	lsls	r2, r3, #27
 8014aa0:	bf5e      	ittt	pl
 8014aa2:	682b      	ldrpl	r3, [r5, #0]
 8014aa4:	781b      	ldrbpl	r3, [r3, #0]
 8014aa6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8014aaa:	682a      	ldr	r2, [r5, #0]
 8014aac:	686b      	ldr	r3, [r5, #4]
 8014aae:	3201      	adds	r2, #1
 8014ab0:	602a      	str	r2, [r5, #0]
 8014ab2:	68a2      	ldr	r2, [r4, #8]
 8014ab4:	3b01      	subs	r3, #1
 8014ab6:	3a01      	subs	r2, #1
 8014ab8:	606b      	str	r3, [r5, #4]
 8014aba:	3701      	adds	r7, #1
 8014abc:	60a2      	str	r2, [r4, #8]
 8014abe:	b142      	cbz	r2, 8014ad2 <_scanf_chars+0x8e>
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	dcd7      	bgt.n	8014a74 <_scanf_chars+0x30>
 8014ac4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014ac8:	4629      	mov	r1, r5
 8014aca:	4640      	mov	r0, r8
 8014acc:	4798      	blx	r3
 8014ace:	2800      	cmp	r0, #0
 8014ad0:	d0d0      	beq.n	8014a74 <_scanf_chars+0x30>
 8014ad2:	6823      	ldr	r3, [r4, #0]
 8014ad4:	f013 0310 	ands.w	r3, r3, #16
 8014ad8:	d105      	bne.n	8014ae6 <_scanf_chars+0xa2>
 8014ada:	68e2      	ldr	r2, [r4, #12]
 8014adc:	3201      	adds	r2, #1
 8014ade:	60e2      	str	r2, [r4, #12]
 8014ae0:	69a2      	ldr	r2, [r4, #24]
 8014ae2:	b102      	cbz	r2, 8014ae6 <_scanf_chars+0xa2>
 8014ae4:	7033      	strb	r3, [r6, #0]
 8014ae6:	6923      	ldr	r3, [r4, #16]
 8014ae8:	443b      	add	r3, r7
 8014aea:	6123      	str	r3, [r4, #16]
 8014aec:	2000      	movs	r0, #0
 8014aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014af2:	bf00      	nop
 8014af4:	08017299 	.word	0x08017299

08014af8 <_scanf_i>:
 8014af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014afc:	4698      	mov	r8, r3
 8014afe:	4b74      	ldr	r3, [pc, #464]	@ (8014cd0 <_scanf_i+0x1d8>)
 8014b00:	460c      	mov	r4, r1
 8014b02:	4682      	mov	sl, r0
 8014b04:	4616      	mov	r6, r2
 8014b06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014b0a:	b087      	sub	sp, #28
 8014b0c:	ab03      	add	r3, sp, #12
 8014b0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014b12:	4b70      	ldr	r3, [pc, #448]	@ (8014cd4 <_scanf_i+0x1dc>)
 8014b14:	69a1      	ldr	r1, [r4, #24]
 8014b16:	4a70      	ldr	r2, [pc, #448]	@ (8014cd8 <_scanf_i+0x1e0>)
 8014b18:	2903      	cmp	r1, #3
 8014b1a:	bf08      	it	eq
 8014b1c:	461a      	moveq	r2, r3
 8014b1e:	68a3      	ldr	r3, [r4, #8]
 8014b20:	9201      	str	r2, [sp, #4]
 8014b22:	1e5a      	subs	r2, r3, #1
 8014b24:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014b28:	bf88      	it	hi
 8014b2a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014b2e:	4627      	mov	r7, r4
 8014b30:	bf82      	ittt	hi
 8014b32:	eb03 0905 	addhi.w	r9, r3, r5
 8014b36:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014b3a:	60a3      	strhi	r3, [r4, #8]
 8014b3c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014b40:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8014b44:	bf98      	it	ls
 8014b46:	f04f 0900 	movls.w	r9, #0
 8014b4a:	6023      	str	r3, [r4, #0]
 8014b4c:	463d      	mov	r5, r7
 8014b4e:	f04f 0b00 	mov.w	fp, #0
 8014b52:	6831      	ldr	r1, [r6, #0]
 8014b54:	ab03      	add	r3, sp, #12
 8014b56:	7809      	ldrb	r1, [r1, #0]
 8014b58:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014b5c:	2202      	movs	r2, #2
 8014b5e:	f7eb fb5f 	bl	8000220 <memchr>
 8014b62:	b328      	cbz	r0, 8014bb0 <_scanf_i+0xb8>
 8014b64:	f1bb 0f01 	cmp.w	fp, #1
 8014b68:	d159      	bne.n	8014c1e <_scanf_i+0x126>
 8014b6a:	6862      	ldr	r2, [r4, #4]
 8014b6c:	b92a      	cbnz	r2, 8014b7a <_scanf_i+0x82>
 8014b6e:	6822      	ldr	r2, [r4, #0]
 8014b70:	2108      	movs	r1, #8
 8014b72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014b76:	6061      	str	r1, [r4, #4]
 8014b78:	6022      	str	r2, [r4, #0]
 8014b7a:	6822      	ldr	r2, [r4, #0]
 8014b7c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8014b80:	6022      	str	r2, [r4, #0]
 8014b82:	68a2      	ldr	r2, [r4, #8]
 8014b84:	1e51      	subs	r1, r2, #1
 8014b86:	60a1      	str	r1, [r4, #8]
 8014b88:	b192      	cbz	r2, 8014bb0 <_scanf_i+0xb8>
 8014b8a:	6832      	ldr	r2, [r6, #0]
 8014b8c:	1c51      	adds	r1, r2, #1
 8014b8e:	6031      	str	r1, [r6, #0]
 8014b90:	7812      	ldrb	r2, [r2, #0]
 8014b92:	f805 2b01 	strb.w	r2, [r5], #1
 8014b96:	6872      	ldr	r2, [r6, #4]
 8014b98:	3a01      	subs	r2, #1
 8014b9a:	2a00      	cmp	r2, #0
 8014b9c:	6072      	str	r2, [r6, #4]
 8014b9e:	dc07      	bgt.n	8014bb0 <_scanf_i+0xb8>
 8014ba0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8014ba4:	4631      	mov	r1, r6
 8014ba6:	4650      	mov	r0, sl
 8014ba8:	4790      	blx	r2
 8014baa:	2800      	cmp	r0, #0
 8014bac:	f040 8085 	bne.w	8014cba <_scanf_i+0x1c2>
 8014bb0:	f10b 0b01 	add.w	fp, fp, #1
 8014bb4:	f1bb 0f03 	cmp.w	fp, #3
 8014bb8:	d1cb      	bne.n	8014b52 <_scanf_i+0x5a>
 8014bba:	6863      	ldr	r3, [r4, #4]
 8014bbc:	b90b      	cbnz	r3, 8014bc2 <_scanf_i+0xca>
 8014bbe:	230a      	movs	r3, #10
 8014bc0:	6063      	str	r3, [r4, #4]
 8014bc2:	6863      	ldr	r3, [r4, #4]
 8014bc4:	4945      	ldr	r1, [pc, #276]	@ (8014cdc <_scanf_i+0x1e4>)
 8014bc6:	6960      	ldr	r0, [r4, #20]
 8014bc8:	1ac9      	subs	r1, r1, r3
 8014bca:	f000 f935 	bl	8014e38 <__sccl>
 8014bce:	f04f 0b00 	mov.w	fp, #0
 8014bd2:	68a3      	ldr	r3, [r4, #8]
 8014bd4:	6822      	ldr	r2, [r4, #0]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d03d      	beq.n	8014c56 <_scanf_i+0x15e>
 8014bda:	6831      	ldr	r1, [r6, #0]
 8014bdc:	6960      	ldr	r0, [r4, #20]
 8014bde:	f891 c000 	ldrb.w	ip, [r1]
 8014be2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014be6:	2800      	cmp	r0, #0
 8014be8:	d035      	beq.n	8014c56 <_scanf_i+0x15e>
 8014bea:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8014bee:	d124      	bne.n	8014c3a <_scanf_i+0x142>
 8014bf0:	0510      	lsls	r0, r2, #20
 8014bf2:	d522      	bpl.n	8014c3a <_scanf_i+0x142>
 8014bf4:	f10b 0b01 	add.w	fp, fp, #1
 8014bf8:	f1b9 0f00 	cmp.w	r9, #0
 8014bfc:	d003      	beq.n	8014c06 <_scanf_i+0x10e>
 8014bfe:	3301      	adds	r3, #1
 8014c00:	f109 39ff 	add.w	r9, r9, #4294967295
 8014c04:	60a3      	str	r3, [r4, #8]
 8014c06:	6873      	ldr	r3, [r6, #4]
 8014c08:	3b01      	subs	r3, #1
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	6073      	str	r3, [r6, #4]
 8014c0e:	dd1b      	ble.n	8014c48 <_scanf_i+0x150>
 8014c10:	6833      	ldr	r3, [r6, #0]
 8014c12:	3301      	adds	r3, #1
 8014c14:	6033      	str	r3, [r6, #0]
 8014c16:	68a3      	ldr	r3, [r4, #8]
 8014c18:	3b01      	subs	r3, #1
 8014c1a:	60a3      	str	r3, [r4, #8]
 8014c1c:	e7d9      	b.n	8014bd2 <_scanf_i+0xda>
 8014c1e:	f1bb 0f02 	cmp.w	fp, #2
 8014c22:	d1ae      	bne.n	8014b82 <_scanf_i+0x8a>
 8014c24:	6822      	ldr	r2, [r4, #0]
 8014c26:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8014c2a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8014c2e:	d1bf      	bne.n	8014bb0 <_scanf_i+0xb8>
 8014c30:	2110      	movs	r1, #16
 8014c32:	6061      	str	r1, [r4, #4]
 8014c34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8014c38:	e7a2      	b.n	8014b80 <_scanf_i+0x88>
 8014c3a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8014c3e:	6022      	str	r2, [r4, #0]
 8014c40:	780b      	ldrb	r3, [r1, #0]
 8014c42:	f805 3b01 	strb.w	r3, [r5], #1
 8014c46:	e7de      	b.n	8014c06 <_scanf_i+0x10e>
 8014c48:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014c4c:	4631      	mov	r1, r6
 8014c4e:	4650      	mov	r0, sl
 8014c50:	4798      	blx	r3
 8014c52:	2800      	cmp	r0, #0
 8014c54:	d0df      	beq.n	8014c16 <_scanf_i+0x11e>
 8014c56:	6823      	ldr	r3, [r4, #0]
 8014c58:	05d9      	lsls	r1, r3, #23
 8014c5a:	d50d      	bpl.n	8014c78 <_scanf_i+0x180>
 8014c5c:	42bd      	cmp	r5, r7
 8014c5e:	d909      	bls.n	8014c74 <_scanf_i+0x17c>
 8014c60:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014c64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014c68:	4632      	mov	r2, r6
 8014c6a:	4650      	mov	r0, sl
 8014c6c:	4798      	blx	r3
 8014c6e:	f105 39ff 	add.w	r9, r5, #4294967295
 8014c72:	464d      	mov	r5, r9
 8014c74:	42bd      	cmp	r5, r7
 8014c76:	d028      	beq.n	8014cca <_scanf_i+0x1d2>
 8014c78:	6822      	ldr	r2, [r4, #0]
 8014c7a:	f012 0210 	ands.w	r2, r2, #16
 8014c7e:	d113      	bne.n	8014ca8 <_scanf_i+0x1b0>
 8014c80:	702a      	strb	r2, [r5, #0]
 8014c82:	6863      	ldr	r3, [r4, #4]
 8014c84:	9e01      	ldr	r6, [sp, #4]
 8014c86:	4639      	mov	r1, r7
 8014c88:	4650      	mov	r0, sl
 8014c8a:	47b0      	blx	r6
 8014c8c:	f8d8 3000 	ldr.w	r3, [r8]
 8014c90:	6821      	ldr	r1, [r4, #0]
 8014c92:	1d1a      	adds	r2, r3, #4
 8014c94:	f8c8 2000 	str.w	r2, [r8]
 8014c98:	f011 0f20 	tst.w	r1, #32
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	d00f      	beq.n	8014cc0 <_scanf_i+0x1c8>
 8014ca0:	6018      	str	r0, [r3, #0]
 8014ca2:	68e3      	ldr	r3, [r4, #12]
 8014ca4:	3301      	adds	r3, #1
 8014ca6:	60e3      	str	r3, [r4, #12]
 8014ca8:	6923      	ldr	r3, [r4, #16]
 8014caa:	1bed      	subs	r5, r5, r7
 8014cac:	445d      	add	r5, fp
 8014cae:	442b      	add	r3, r5
 8014cb0:	6123      	str	r3, [r4, #16]
 8014cb2:	2000      	movs	r0, #0
 8014cb4:	b007      	add	sp, #28
 8014cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cba:	f04f 0b00 	mov.w	fp, #0
 8014cbe:	e7ca      	b.n	8014c56 <_scanf_i+0x15e>
 8014cc0:	07ca      	lsls	r2, r1, #31
 8014cc2:	bf4c      	ite	mi
 8014cc4:	8018      	strhmi	r0, [r3, #0]
 8014cc6:	6018      	strpl	r0, [r3, #0]
 8014cc8:	e7eb      	b.n	8014ca2 <_scanf_i+0x1aa>
 8014cca:	2001      	movs	r0, #1
 8014ccc:	e7f2      	b.n	8014cb4 <_scanf_i+0x1bc>
 8014cce:	bf00      	nop
 8014cd0:	08016fd4 	.word	0x08016fd4
 8014cd4:	080143f9 	.word	0x080143f9
 8014cd8:	080157bd 	.word	0x080157bd
 8014cdc:	080173ba 	.word	0x080173ba

08014ce0 <__sflush_r>:
 8014ce0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ce8:	0716      	lsls	r6, r2, #28
 8014cea:	4605      	mov	r5, r0
 8014cec:	460c      	mov	r4, r1
 8014cee:	d454      	bmi.n	8014d9a <__sflush_r+0xba>
 8014cf0:	684b      	ldr	r3, [r1, #4]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	dc02      	bgt.n	8014cfc <__sflush_r+0x1c>
 8014cf6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	dd48      	ble.n	8014d8e <__sflush_r+0xae>
 8014cfc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014cfe:	2e00      	cmp	r6, #0
 8014d00:	d045      	beq.n	8014d8e <__sflush_r+0xae>
 8014d02:	2300      	movs	r3, #0
 8014d04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014d08:	682f      	ldr	r7, [r5, #0]
 8014d0a:	6a21      	ldr	r1, [r4, #32]
 8014d0c:	602b      	str	r3, [r5, #0]
 8014d0e:	d030      	beq.n	8014d72 <__sflush_r+0x92>
 8014d10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014d12:	89a3      	ldrh	r3, [r4, #12]
 8014d14:	0759      	lsls	r1, r3, #29
 8014d16:	d505      	bpl.n	8014d24 <__sflush_r+0x44>
 8014d18:	6863      	ldr	r3, [r4, #4]
 8014d1a:	1ad2      	subs	r2, r2, r3
 8014d1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014d1e:	b10b      	cbz	r3, 8014d24 <__sflush_r+0x44>
 8014d20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014d22:	1ad2      	subs	r2, r2, r3
 8014d24:	2300      	movs	r3, #0
 8014d26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014d28:	6a21      	ldr	r1, [r4, #32]
 8014d2a:	4628      	mov	r0, r5
 8014d2c:	47b0      	blx	r6
 8014d2e:	1c43      	adds	r3, r0, #1
 8014d30:	89a3      	ldrh	r3, [r4, #12]
 8014d32:	d106      	bne.n	8014d42 <__sflush_r+0x62>
 8014d34:	6829      	ldr	r1, [r5, #0]
 8014d36:	291d      	cmp	r1, #29
 8014d38:	d82b      	bhi.n	8014d92 <__sflush_r+0xb2>
 8014d3a:	4a2a      	ldr	r2, [pc, #168]	@ (8014de4 <__sflush_r+0x104>)
 8014d3c:	410a      	asrs	r2, r1
 8014d3e:	07d6      	lsls	r6, r2, #31
 8014d40:	d427      	bmi.n	8014d92 <__sflush_r+0xb2>
 8014d42:	2200      	movs	r2, #0
 8014d44:	6062      	str	r2, [r4, #4]
 8014d46:	04d9      	lsls	r1, r3, #19
 8014d48:	6922      	ldr	r2, [r4, #16]
 8014d4a:	6022      	str	r2, [r4, #0]
 8014d4c:	d504      	bpl.n	8014d58 <__sflush_r+0x78>
 8014d4e:	1c42      	adds	r2, r0, #1
 8014d50:	d101      	bne.n	8014d56 <__sflush_r+0x76>
 8014d52:	682b      	ldr	r3, [r5, #0]
 8014d54:	b903      	cbnz	r3, 8014d58 <__sflush_r+0x78>
 8014d56:	6560      	str	r0, [r4, #84]	@ 0x54
 8014d58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014d5a:	602f      	str	r7, [r5, #0]
 8014d5c:	b1b9      	cbz	r1, 8014d8e <__sflush_r+0xae>
 8014d5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014d62:	4299      	cmp	r1, r3
 8014d64:	d002      	beq.n	8014d6c <__sflush_r+0x8c>
 8014d66:	4628      	mov	r0, r5
 8014d68:	f7fd ff12 	bl	8012b90 <_free_r>
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8014d70:	e00d      	b.n	8014d8e <__sflush_r+0xae>
 8014d72:	2301      	movs	r3, #1
 8014d74:	4628      	mov	r0, r5
 8014d76:	47b0      	blx	r6
 8014d78:	4602      	mov	r2, r0
 8014d7a:	1c50      	adds	r0, r2, #1
 8014d7c:	d1c9      	bne.n	8014d12 <__sflush_r+0x32>
 8014d7e:	682b      	ldr	r3, [r5, #0]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d0c6      	beq.n	8014d12 <__sflush_r+0x32>
 8014d84:	2b1d      	cmp	r3, #29
 8014d86:	d001      	beq.n	8014d8c <__sflush_r+0xac>
 8014d88:	2b16      	cmp	r3, #22
 8014d8a:	d11e      	bne.n	8014dca <__sflush_r+0xea>
 8014d8c:	602f      	str	r7, [r5, #0]
 8014d8e:	2000      	movs	r0, #0
 8014d90:	e022      	b.n	8014dd8 <__sflush_r+0xf8>
 8014d92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d96:	b21b      	sxth	r3, r3
 8014d98:	e01b      	b.n	8014dd2 <__sflush_r+0xf2>
 8014d9a:	690f      	ldr	r7, [r1, #16]
 8014d9c:	2f00      	cmp	r7, #0
 8014d9e:	d0f6      	beq.n	8014d8e <__sflush_r+0xae>
 8014da0:	0793      	lsls	r3, r2, #30
 8014da2:	680e      	ldr	r6, [r1, #0]
 8014da4:	bf08      	it	eq
 8014da6:	694b      	ldreq	r3, [r1, #20]
 8014da8:	600f      	str	r7, [r1, #0]
 8014daa:	bf18      	it	ne
 8014dac:	2300      	movne	r3, #0
 8014dae:	eba6 0807 	sub.w	r8, r6, r7
 8014db2:	608b      	str	r3, [r1, #8]
 8014db4:	f1b8 0f00 	cmp.w	r8, #0
 8014db8:	dde9      	ble.n	8014d8e <__sflush_r+0xae>
 8014dba:	6a21      	ldr	r1, [r4, #32]
 8014dbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014dbe:	4643      	mov	r3, r8
 8014dc0:	463a      	mov	r2, r7
 8014dc2:	4628      	mov	r0, r5
 8014dc4:	47b0      	blx	r6
 8014dc6:	2800      	cmp	r0, #0
 8014dc8:	dc08      	bgt.n	8014ddc <__sflush_r+0xfc>
 8014dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014dce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014dd2:	81a3      	strh	r3, [r4, #12]
 8014dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8014dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ddc:	4407      	add	r7, r0
 8014dde:	eba8 0800 	sub.w	r8, r8, r0
 8014de2:	e7e7      	b.n	8014db4 <__sflush_r+0xd4>
 8014de4:	dfbffffe 	.word	0xdfbffffe

08014de8 <_fflush_r>:
 8014de8:	b538      	push	{r3, r4, r5, lr}
 8014dea:	690b      	ldr	r3, [r1, #16]
 8014dec:	4605      	mov	r5, r0
 8014dee:	460c      	mov	r4, r1
 8014df0:	b913      	cbnz	r3, 8014df8 <_fflush_r+0x10>
 8014df2:	2500      	movs	r5, #0
 8014df4:	4628      	mov	r0, r5
 8014df6:	bd38      	pop	{r3, r4, r5, pc}
 8014df8:	b118      	cbz	r0, 8014e02 <_fflush_r+0x1a>
 8014dfa:	6a03      	ldr	r3, [r0, #32]
 8014dfc:	b90b      	cbnz	r3, 8014e02 <_fflush_r+0x1a>
 8014dfe:	f7fc ff0d 	bl	8011c1c <__sinit>
 8014e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d0f3      	beq.n	8014df2 <_fflush_r+0xa>
 8014e0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014e0c:	07d0      	lsls	r0, r2, #31
 8014e0e:	d404      	bmi.n	8014e1a <_fflush_r+0x32>
 8014e10:	0599      	lsls	r1, r3, #22
 8014e12:	d402      	bmi.n	8014e1a <_fflush_r+0x32>
 8014e14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014e16:	f7fd f856 	bl	8011ec6 <__retarget_lock_acquire_recursive>
 8014e1a:	4628      	mov	r0, r5
 8014e1c:	4621      	mov	r1, r4
 8014e1e:	f7ff ff5f 	bl	8014ce0 <__sflush_r>
 8014e22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014e24:	07da      	lsls	r2, r3, #31
 8014e26:	4605      	mov	r5, r0
 8014e28:	d4e4      	bmi.n	8014df4 <_fflush_r+0xc>
 8014e2a:	89a3      	ldrh	r3, [r4, #12]
 8014e2c:	059b      	lsls	r3, r3, #22
 8014e2e:	d4e1      	bmi.n	8014df4 <_fflush_r+0xc>
 8014e30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014e32:	f7fd f849 	bl	8011ec8 <__retarget_lock_release_recursive>
 8014e36:	e7dd      	b.n	8014df4 <_fflush_r+0xc>

08014e38 <__sccl>:
 8014e38:	b570      	push	{r4, r5, r6, lr}
 8014e3a:	780b      	ldrb	r3, [r1, #0]
 8014e3c:	4604      	mov	r4, r0
 8014e3e:	2b5e      	cmp	r3, #94	@ 0x5e
 8014e40:	bf0b      	itete	eq
 8014e42:	784b      	ldrbeq	r3, [r1, #1]
 8014e44:	1c4a      	addne	r2, r1, #1
 8014e46:	1c8a      	addeq	r2, r1, #2
 8014e48:	2100      	movne	r1, #0
 8014e4a:	bf08      	it	eq
 8014e4c:	2101      	moveq	r1, #1
 8014e4e:	3801      	subs	r0, #1
 8014e50:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8014e54:	f800 1f01 	strb.w	r1, [r0, #1]!
 8014e58:	42a8      	cmp	r0, r5
 8014e5a:	d1fb      	bne.n	8014e54 <__sccl+0x1c>
 8014e5c:	b90b      	cbnz	r3, 8014e62 <__sccl+0x2a>
 8014e5e:	1e50      	subs	r0, r2, #1
 8014e60:	bd70      	pop	{r4, r5, r6, pc}
 8014e62:	f081 0101 	eor.w	r1, r1, #1
 8014e66:	54e1      	strb	r1, [r4, r3]
 8014e68:	4610      	mov	r0, r2
 8014e6a:	4602      	mov	r2, r0
 8014e6c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014e70:	2d2d      	cmp	r5, #45	@ 0x2d
 8014e72:	d005      	beq.n	8014e80 <__sccl+0x48>
 8014e74:	2d5d      	cmp	r5, #93	@ 0x5d
 8014e76:	d016      	beq.n	8014ea6 <__sccl+0x6e>
 8014e78:	2d00      	cmp	r5, #0
 8014e7a:	d0f1      	beq.n	8014e60 <__sccl+0x28>
 8014e7c:	462b      	mov	r3, r5
 8014e7e:	e7f2      	b.n	8014e66 <__sccl+0x2e>
 8014e80:	7846      	ldrb	r6, [r0, #1]
 8014e82:	2e5d      	cmp	r6, #93	@ 0x5d
 8014e84:	d0fa      	beq.n	8014e7c <__sccl+0x44>
 8014e86:	42b3      	cmp	r3, r6
 8014e88:	dcf8      	bgt.n	8014e7c <__sccl+0x44>
 8014e8a:	3002      	adds	r0, #2
 8014e8c:	461a      	mov	r2, r3
 8014e8e:	3201      	adds	r2, #1
 8014e90:	4296      	cmp	r6, r2
 8014e92:	54a1      	strb	r1, [r4, r2]
 8014e94:	dcfb      	bgt.n	8014e8e <__sccl+0x56>
 8014e96:	1af2      	subs	r2, r6, r3
 8014e98:	3a01      	subs	r2, #1
 8014e9a:	1c5d      	adds	r5, r3, #1
 8014e9c:	42b3      	cmp	r3, r6
 8014e9e:	bfa8      	it	ge
 8014ea0:	2200      	movge	r2, #0
 8014ea2:	18ab      	adds	r3, r5, r2
 8014ea4:	e7e1      	b.n	8014e6a <__sccl+0x32>
 8014ea6:	4610      	mov	r0, r2
 8014ea8:	e7da      	b.n	8014e60 <__sccl+0x28>

08014eaa <__submore>:
 8014eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014eae:	460c      	mov	r4, r1
 8014eb0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8014eb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014eb6:	4299      	cmp	r1, r3
 8014eb8:	d11d      	bne.n	8014ef6 <__submore+0x4c>
 8014eba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8014ebe:	f7fd fedb 	bl	8012c78 <_malloc_r>
 8014ec2:	b918      	cbnz	r0, 8014ecc <__submore+0x22>
 8014ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ecc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014ed0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8014ed2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8014ed6:	6360      	str	r0, [r4, #52]	@ 0x34
 8014ed8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8014edc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8014ee0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8014ee4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014ee8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8014eec:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8014ef0:	6020      	str	r0, [r4, #0]
 8014ef2:	2000      	movs	r0, #0
 8014ef4:	e7e8      	b.n	8014ec8 <__submore+0x1e>
 8014ef6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8014ef8:	0077      	lsls	r7, r6, #1
 8014efa:	463a      	mov	r2, r7
 8014efc:	f000 fbc1 	bl	8015682 <_realloc_r>
 8014f00:	4605      	mov	r5, r0
 8014f02:	2800      	cmp	r0, #0
 8014f04:	d0de      	beq.n	8014ec4 <__submore+0x1a>
 8014f06:	eb00 0806 	add.w	r8, r0, r6
 8014f0a:	4601      	mov	r1, r0
 8014f0c:	4632      	mov	r2, r6
 8014f0e:	4640      	mov	r0, r8
 8014f10:	f7fc ffdb 	bl	8011eca <memcpy>
 8014f14:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8014f18:	f8c4 8000 	str.w	r8, [r4]
 8014f1c:	e7e9      	b.n	8014ef2 <__submore+0x48>

08014f1e <memmove>:
 8014f1e:	4288      	cmp	r0, r1
 8014f20:	b510      	push	{r4, lr}
 8014f22:	eb01 0402 	add.w	r4, r1, r2
 8014f26:	d902      	bls.n	8014f2e <memmove+0x10>
 8014f28:	4284      	cmp	r4, r0
 8014f2a:	4623      	mov	r3, r4
 8014f2c:	d807      	bhi.n	8014f3e <memmove+0x20>
 8014f2e:	1e43      	subs	r3, r0, #1
 8014f30:	42a1      	cmp	r1, r4
 8014f32:	d008      	beq.n	8014f46 <memmove+0x28>
 8014f34:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014f38:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014f3c:	e7f8      	b.n	8014f30 <memmove+0x12>
 8014f3e:	4402      	add	r2, r0
 8014f40:	4601      	mov	r1, r0
 8014f42:	428a      	cmp	r2, r1
 8014f44:	d100      	bne.n	8014f48 <memmove+0x2a>
 8014f46:	bd10      	pop	{r4, pc}
 8014f48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014f4c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014f50:	e7f7      	b.n	8014f42 <memmove+0x24>
	...

08014f54 <_sbrk_r>:
 8014f54:	b538      	push	{r3, r4, r5, lr}
 8014f56:	4d06      	ldr	r5, [pc, #24]	@ (8014f70 <_sbrk_r+0x1c>)
 8014f58:	2300      	movs	r3, #0
 8014f5a:	4604      	mov	r4, r0
 8014f5c:	4608      	mov	r0, r1
 8014f5e:	602b      	str	r3, [r5, #0]
 8014f60:	f7ef fb50 	bl	8004604 <_sbrk>
 8014f64:	1c43      	adds	r3, r0, #1
 8014f66:	d102      	bne.n	8014f6e <_sbrk_r+0x1a>
 8014f68:	682b      	ldr	r3, [r5, #0]
 8014f6a:	b103      	cbz	r3, 8014f6e <_sbrk_r+0x1a>
 8014f6c:	6023      	str	r3, [r4, #0]
 8014f6e:	bd38      	pop	{r3, r4, r5, pc}
 8014f70:	200026cc 	.word	0x200026cc
 8014f74:	00000000 	.word	0x00000000

08014f78 <nan>:
 8014f78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014f80 <nan+0x8>
 8014f7c:	4770      	bx	lr
 8014f7e:	bf00      	nop
 8014f80:	00000000 	.word	0x00000000
 8014f84:	7ff80000 	.word	0x7ff80000

08014f88 <__assert_func>:
 8014f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014f8a:	4614      	mov	r4, r2
 8014f8c:	461a      	mov	r2, r3
 8014f8e:	4b09      	ldr	r3, [pc, #36]	@ (8014fb4 <__assert_func+0x2c>)
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	4605      	mov	r5, r0
 8014f94:	68d8      	ldr	r0, [r3, #12]
 8014f96:	b954      	cbnz	r4, 8014fae <__assert_func+0x26>
 8014f98:	4b07      	ldr	r3, [pc, #28]	@ (8014fb8 <__assert_func+0x30>)
 8014f9a:	461c      	mov	r4, r3
 8014f9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014fa0:	9100      	str	r1, [sp, #0]
 8014fa2:	462b      	mov	r3, r5
 8014fa4:	4905      	ldr	r1, [pc, #20]	@ (8014fbc <__assert_func+0x34>)
 8014fa6:	f000 fc19 	bl	80157dc <fiprintf>
 8014faa:	f000 fc29 	bl	8015800 <abort>
 8014fae:	4b04      	ldr	r3, [pc, #16]	@ (8014fc0 <__assert_func+0x38>)
 8014fb0:	e7f4      	b.n	8014f9c <__assert_func+0x14>
 8014fb2:	bf00      	nop
 8014fb4:	200001e8 	.word	0x200001e8
 8014fb8:	08017408 	.word	0x08017408
 8014fbc:	080173da 	.word	0x080173da
 8014fc0:	080173cd 	.word	0x080173cd

08014fc4 <_calloc_r>:
 8014fc4:	b570      	push	{r4, r5, r6, lr}
 8014fc6:	fba1 5402 	umull	r5, r4, r1, r2
 8014fca:	b93c      	cbnz	r4, 8014fdc <_calloc_r+0x18>
 8014fcc:	4629      	mov	r1, r5
 8014fce:	f7fd fe53 	bl	8012c78 <_malloc_r>
 8014fd2:	4606      	mov	r6, r0
 8014fd4:	b928      	cbnz	r0, 8014fe2 <_calloc_r+0x1e>
 8014fd6:	2600      	movs	r6, #0
 8014fd8:	4630      	mov	r0, r6
 8014fda:	bd70      	pop	{r4, r5, r6, pc}
 8014fdc:	220c      	movs	r2, #12
 8014fde:	6002      	str	r2, [r0, #0]
 8014fe0:	e7f9      	b.n	8014fd6 <_calloc_r+0x12>
 8014fe2:	462a      	mov	r2, r5
 8014fe4:	4621      	mov	r1, r4
 8014fe6:	f7fc fede 	bl	8011da6 <memset>
 8014fea:	e7f5      	b.n	8014fd8 <_calloc_r+0x14>

08014fec <rshift>:
 8014fec:	6903      	ldr	r3, [r0, #16]
 8014fee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014ff2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ff6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014ffa:	f100 0414 	add.w	r4, r0, #20
 8014ffe:	dd45      	ble.n	801508c <rshift+0xa0>
 8015000:	f011 011f 	ands.w	r1, r1, #31
 8015004:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015008:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801500c:	d10c      	bne.n	8015028 <rshift+0x3c>
 801500e:	f100 0710 	add.w	r7, r0, #16
 8015012:	4629      	mov	r1, r5
 8015014:	42b1      	cmp	r1, r6
 8015016:	d334      	bcc.n	8015082 <rshift+0x96>
 8015018:	1a9b      	subs	r3, r3, r2
 801501a:	009b      	lsls	r3, r3, #2
 801501c:	1eea      	subs	r2, r5, #3
 801501e:	4296      	cmp	r6, r2
 8015020:	bf38      	it	cc
 8015022:	2300      	movcc	r3, #0
 8015024:	4423      	add	r3, r4
 8015026:	e015      	b.n	8015054 <rshift+0x68>
 8015028:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801502c:	f1c1 0820 	rsb	r8, r1, #32
 8015030:	40cf      	lsrs	r7, r1
 8015032:	f105 0e04 	add.w	lr, r5, #4
 8015036:	46a1      	mov	r9, r4
 8015038:	4576      	cmp	r6, lr
 801503a:	46f4      	mov	ip, lr
 801503c:	d815      	bhi.n	801506a <rshift+0x7e>
 801503e:	1a9a      	subs	r2, r3, r2
 8015040:	0092      	lsls	r2, r2, #2
 8015042:	3a04      	subs	r2, #4
 8015044:	3501      	adds	r5, #1
 8015046:	42ae      	cmp	r6, r5
 8015048:	bf38      	it	cc
 801504a:	2200      	movcc	r2, #0
 801504c:	18a3      	adds	r3, r4, r2
 801504e:	50a7      	str	r7, [r4, r2]
 8015050:	b107      	cbz	r7, 8015054 <rshift+0x68>
 8015052:	3304      	adds	r3, #4
 8015054:	1b1a      	subs	r2, r3, r4
 8015056:	42a3      	cmp	r3, r4
 8015058:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801505c:	bf08      	it	eq
 801505e:	2300      	moveq	r3, #0
 8015060:	6102      	str	r2, [r0, #16]
 8015062:	bf08      	it	eq
 8015064:	6143      	streq	r3, [r0, #20]
 8015066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801506a:	f8dc c000 	ldr.w	ip, [ip]
 801506e:	fa0c fc08 	lsl.w	ip, ip, r8
 8015072:	ea4c 0707 	orr.w	r7, ip, r7
 8015076:	f849 7b04 	str.w	r7, [r9], #4
 801507a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801507e:	40cf      	lsrs	r7, r1
 8015080:	e7da      	b.n	8015038 <rshift+0x4c>
 8015082:	f851 cb04 	ldr.w	ip, [r1], #4
 8015086:	f847 cf04 	str.w	ip, [r7, #4]!
 801508a:	e7c3      	b.n	8015014 <rshift+0x28>
 801508c:	4623      	mov	r3, r4
 801508e:	e7e1      	b.n	8015054 <rshift+0x68>

08015090 <__hexdig_fun>:
 8015090:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8015094:	2b09      	cmp	r3, #9
 8015096:	d802      	bhi.n	801509e <__hexdig_fun+0xe>
 8015098:	3820      	subs	r0, #32
 801509a:	b2c0      	uxtb	r0, r0
 801509c:	4770      	bx	lr
 801509e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80150a2:	2b05      	cmp	r3, #5
 80150a4:	d801      	bhi.n	80150aa <__hexdig_fun+0x1a>
 80150a6:	3847      	subs	r0, #71	@ 0x47
 80150a8:	e7f7      	b.n	801509a <__hexdig_fun+0xa>
 80150aa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80150ae:	2b05      	cmp	r3, #5
 80150b0:	d801      	bhi.n	80150b6 <__hexdig_fun+0x26>
 80150b2:	3827      	subs	r0, #39	@ 0x27
 80150b4:	e7f1      	b.n	801509a <__hexdig_fun+0xa>
 80150b6:	2000      	movs	r0, #0
 80150b8:	4770      	bx	lr
	...

080150bc <__gethex>:
 80150bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150c0:	b085      	sub	sp, #20
 80150c2:	468a      	mov	sl, r1
 80150c4:	9302      	str	r3, [sp, #8]
 80150c6:	680b      	ldr	r3, [r1, #0]
 80150c8:	9001      	str	r0, [sp, #4]
 80150ca:	4690      	mov	r8, r2
 80150cc:	1c9c      	adds	r4, r3, #2
 80150ce:	46a1      	mov	r9, r4
 80150d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80150d4:	2830      	cmp	r0, #48	@ 0x30
 80150d6:	d0fa      	beq.n	80150ce <__gethex+0x12>
 80150d8:	eba9 0303 	sub.w	r3, r9, r3
 80150dc:	f1a3 0b02 	sub.w	fp, r3, #2
 80150e0:	f7ff ffd6 	bl	8015090 <__hexdig_fun>
 80150e4:	4605      	mov	r5, r0
 80150e6:	2800      	cmp	r0, #0
 80150e8:	d168      	bne.n	80151bc <__gethex+0x100>
 80150ea:	49a0      	ldr	r1, [pc, #640]	@ (801536c <__gethex+0x2b0>)
 80150ec:	2201      	movs	r2, #1
 80150ee:	4648      	mov	r0, r9
 80150f0:	f7fc fe61 	bl	8011db6 <strncmp>
 80150f4:	4607      	mov	r7, r0
 80150f6:	2800      	cmp	r0, #0
 80150f8:	d167      	bne.n	80151ca <__gethex+0x10e>
 80150fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 80150fe:	4626      	mov	r6, r4
 8015100:	f7ff ffc6 	bl	8015090 <__hexdig_fun>
 8015104:	2800      	cmp	r0, #0
 8015106:	d062      	beq.n	80151ce <__gethex+0x112>
 8015108:	4623      	mov	r3, r4
 801510a:	7818      	ldrb	r0, [r3, #0]
 801510c:	2830      	cmp	r0, #48	@ 0x30
 801510e:	4699      	mov	r9, r3
 8015110:	f103 0301 	add.w	r3, r3, #1
 8015114:	d0f9      	beq.n	801510a <__gethex+0x4e>
 8015116:	f7ff ffbb 	bl	8015090 <__hexdig_fun>
 801511a:	fab0 f580 	clz	r5, r0
 801511e:	096d      	lsrs	r5, r5, #5
 8015120:	f04f 0b01 	mov.w	fp, #1
 8015124:	464a      	mov	r2, r9
 8015126:	4616      	mov	r6, r2
 8015128:	3201      	adds	r2, #1
 801512a:	7830      	ldrb	r0, [r6, #0]
 801512c:	f7ff ffb0 	bl	8015090 <__hexdig_fun>
 8015130:	2800      	cmp	r0, #0
 8015132:	d1f8      	bne.n	8015126 <__gethex+0x6a>
 8015134:	498d      	ldr	r1, [pc, #564]	@ (801536c <__gethex+0x2b0>)
 8015136:	2201      	movs	r2, #1
 8015138:	4630      	mov	r0, r6
 801513a:	f7fc fe3c 	bl	8011db6 <strncmp>
 801513e:	2800      	cmp	r0, #0
 8015140:	d13f      	bne.n	80151c2 <__gethex+0x106>
 8015142:	b944      	cbnz	r4, 8015156 <__gethex+0x9a>
 8015144:	1c74      	adds	r4, r6, #1
 8015146:	4622      	mov	r2, r4
 8015148:	4616      	mov	r6, r2
 801514a:	3201      	adds	r2, #1
 801514c:	7830      	ldrb	r0, [r6, #0]
 801514e:	f7ff ff9f 	bl	8015090 <__hexdig_fun>
 8015152:	2800      	cmp	r0, #0
 8015154:	d1f8      	bne.n	8015148 <__gethex+0x8c>
 8015156:	1ba4      	subs	r4, r4, r6
 8015158:	00a7      	lsls	r7, r4, #2
 801515a:	7833      	ldrb	r3, [r6, #0]
 801515c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015160:	2b50      	cmp	r3, #80	@ 0x50
 8015162:	d13e      	bne.n	80151e2 <__gethex+0x126>
 8015164:	7873      	ldrb	r3, [r6, #1]
 8015166:	2b2b      	cmp	r3, #43	@ 0x2b
 8015168:	d033      	beq.n	80151d2 <__gethex+0x116>
 801516a:	2b2d      	cmp	r3, #45	@ 0x2d
 801516c:	d034      	beq.n	80151d8 <__gethex+0x11c>
 801516e:	1c71      	adds	r1, r6, #1
 8015170:	2400      	movs	r4, #0
 8015172:	7808      	ldrb	r0, [r1, #0]
 8015174:	f7ff ff8c 	bl	8015090 <__hexdig_fun>
 8015178:	1e43      	subs	r3, r0, #1
 801517a:	b2db      	uxtb	r3, r3
 801517c:	2b18      	cmp	r3, #24
 801517e:	d830      	bhi.n	80151e2 <__gethex+0x126>
 8015180:	f1a0 0210 	sub.w	r2, r0, #16
 8015184:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015188:	f7ff ff82 	bl	8015090 <__hexdig_fun>
 801518c:	f100 3cff 	add.w	ip, r0, #4294967295
 8015190:	fa5f fc8c 	uxtb.w	ip, ip
 8015194:	f1bc 0f18 	cmp.w	ip, #24
 8015198:	f04f 030a 	mov.w	r3, #10
 801519c:	d91e      	bls.n	80151dc <__gethex+0x120>
 801519e:	b104      	cbz	r4, 80151a2 <__gethex+0xe6>
 80151a0:	4252      	negs	r2, r2
 80151a2:	4417      	add	r7, r2
 80151a4:	f8ca 1000 	str.w	r1, [sl]
 80151a8:	b1ed      	cbz	r5, 80151e6 <__gethex+0x12a>
 80151aa:	f1bb 0f00 	cmp.w	fp, #0
 80151ae:	bf0c      	ite	eq
 80151b0:	2506      	moveq	r5, #6
 80151b2:	2500      	movne	r5, #0
 80151b4:	4628      	mov	r0, r5
 80151b6:	b005      	add	sp, #20
 80151b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151bc:	2500      	movs	r5, #0
 80151be:	462c      	mov	r4, r5
 80151c0:	e7b0      	b.n	8015124 <__gethex+0x68>
 80151c2:	2c00      	cmp	r4, #0
 80151c4:	d1c7      	bne.n	8015156 <__gethex+0x9a>
 80151c6:	4627      	mov	r7, r4
 80151c8:	e7c7      	b.n	801515a <__gethex+0x9e>
 80151ca:	464e      	mov	r6, r9
 80151cc:	462f      	mov	r7, r5
 80151ce:	2501      	movs	r5, #1
 80151d0:	e7c3      	b.n	801515a <__gethex+0x9e>
 80151d2:	2400      	movs	r4, #0
 80151d4:	1cb1      	adds	r1, r6, #2
 80151d6:	e7cc      	b.n	8015172 <__gethex+0xb6>
 80151d8:	2401      	movs	r4, #1
 80151da:	e7fb      	b.n	80151d4 <__gethex+0x118>
 80151dc:	fb03 0002 	mla	r0, r3, r2, r0
 80151e0:	e7ce      	b.n	8015180 <__gethex+0xc4>
 80151e2:	4631      	mov	r1, r6
 80151e4:	e7de      	b.n	80151a4 <__gethex+0xe8>
 80151e6:	eba6 0309 	sub.w	r3, r6, r9
 80151ea:	3b01      	subs	r3, #1
 80151ec:	4629      	mov	r1, r5
 80151ee:	2b07      	cmp	r3, #7
 80151f0:	dc0a      	bgt.n	8015208 <__gethex+0x14c>
 80151f2:	9801      	ldr	r0, [sp, #4]
 80151f4:	f7fd fdcc 	bl	8012d90 <_Balloc>
 80151f8:	4604      	mov	r4, r0
 80151fa:	b940      	cbnz	r0, 801520e <__gethex+0x152>
 80151fc:	4b5c      	ldr	r3, [pc, #368]	@ (8015370 <__gethex+0x2b4>)
 80151fe:	4602      	mov	r2, r0
 8015200:	21e4      	movs	r1, #228	@ 0xe4
 8015202:	485c      	ldr	r0, [pc, #368]	@ (8015374 <__gethex+0x2b8>)
 8015204:	f7ff fec0 	bl	8014f88 <__assert_func>
 8015208:	3101      	adds	r1, #1
 801520a:	105b      	asrs	r3, r3, #1
 801520c:	e7ef      	b.n	80151ee <__gethex+0x132>
 801520e:	f100 0a14 	add.w	sl, r0, #20
 8015212:	2300      	movs	r3, #0
 8015214:	4655      	mov	r5, sl
 8015216:	469b      	mov	fp, r3
 8015218:	45b1      	cmp	r9, r6
 801521a:	d337      	bcc.n	801528c <__gethex+0x1d0>
 801521c:	f845 bb04 	str.w	fp, [r5], #4
 8015220:	eba5 050a 	sub.w	r5, r5, sl
 8015224:	10ad      	asrs	r5, r5, #2
 8015226:	6125      	str	r5, [r4, #16]
 8015228:	4658      	mov	r0, fp
 801522a:	f7fd fea3 	bl	8012f74 <__hi0bits>
 801522e:	016d      	lsls	r5, r5, #5
 8015230:	f8d8 6000 	ldr.w	r6, [r8]
 8015234:	1a2d      	subs	r5, r5, r0
 8015236:	42b5      	cmp	r5, r6
 8015238:	dd54      	ble.n	80152e4 <__gethex+0x228>
 801523a:	1bad      	subs	r5, r5, r6
 801523c:	4629      	mov	r1, r5
 801523e:	4620      	mov	r0, r4
 8015240:	f7fe fa37 	bl	80136b2 <__any_on>
 8015244:	4681      	mov	r9, r0
 8015246:	b178      	cbz	r0, 8015268 <__gethex+0x1ac>
 8015248:	1e6b      	subs	r3, r5, #1
 801524a:	1159      	asrs	r1, r3, #5
 801524c:	f003 021f 	and.w	r2, r3, #31
 8015250:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015254:	f04f 0901 	mov.w	r9, #1
 8015258:	fa09 f202 	lsl.w	r2, r9, r2
 801525c:	420a      	tst	r2, r1
 801525e:	d003      	beq.n	8015268 <__gethex+0x1ac>
 8015260:	454b      	cmp	r3, r9
 8015262:	dc36      	bgt.n	80152d2 <__gethex+0x216>
 8015264:	f04f 0902 	mov.w	r9, #2
 8015268:	4629      	mov	r1, r5
 801526a:	4620      	mov	r0, r4
 801526c:	f7ff febe 	bl	8014fec <rshift>
 8015270:	442f      	add	r7, r5
 8015272:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015276:	42bb      	cmp	r3, r7
 8015278:	da42      	bge.n	8015300 <__gethex+0x244>
 801527a:	9801      	ldr	r0, [sp, #4]
 801527c:	4621      	mov	r1, r4
 801527e:	f7fd fdc7 	bl	8012e10 <_Bfree>
 8015282:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015284:	2300      	movs	r3, #0
 8015286:	6013      	str	r3, [r2, #0]
 8015288:	25a3      	movs	r5, #163	@ 0xa3
 801528a:	e793      	b.n	80151b4 <__gethex+0xf8>
 801528c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015290:	2a2e      	cmp	r2, #46	@ 0x2e
 8015292:	d012      	beq.n	80152ba <__gethex+0x1fe>
 8015294:	2b20      	cmp	r3, #32
 8015296:	d104      	bne.n	80152a2 <__gethex+0x1e6>
 8015298:	f845 bb04 	str.w	fp, [r5], #4
 801529c:	f04f 0b00 	mov.w	fp, #0
 80152a0:	465b      	mov	r3, fp
 80152a2:	7830      	ldrb	r0, [r6, #0]
 80152a4:	9303      	str	r3, [sp, #12]
 80152a6:	f7ff fef3 	bl	8015090 <__hexdig_fun>
 80152aa:	9b03      	ldr	r3, [sp, #12]
 80152ac:	f000 000f 	and.w	r0, r0, #15
 80152b0:	4098      	lsls	r0, r3
 80152b2:	ea4b 0b00 	orr.w	fp, fp, r0
 80152b6:	3304      	adds	r3, #4
 80152b8:	e7ae      	b.n	8015218 <__gethex+0x15c>
 80152ba:	45b1      	cmp	r9, r6
 80152bc:	d8ea      	bhi.n	8015294 <__gethex+0x1d8>
 80152be:	492b      	ldr	r1, [pc, #172]	@ (801536c <__gethex+0x2b0>)
 80152c0:	9303      	str	r3, [sp, #12]
 80152c2:	2201      	movs	r2, #1
 80152c4:	4630      	mov	r0, r6
 80152c6:	f7fc fd76 	bl	8011db6 <strncmp>
 80152ca:	9b03      	ldr	r3, [sp, #12]
 80152cc:	2800      	cmp	r0, #0
 80152ce:	d1e1      	bne.n	8015294 <__gethex+0x1d8>
 80152d0:	e7a2      	b.n	8015218 <__gethex+0x15c>
 80152d2:	1ea9      	subs	r1, r5, #2
 80152d4:	4620      	mov	r0, r4
 80152d6:	f7fe f9ec 	bl	80136b2 <__any_on>
 80152da:	2800      	cmp	r0, #0
 80152dc:	d0c2      	beq.n	8015264 <__gethex+0x1a8>
 80152de:	f04f 0903 	mov.w	r9, #3
 80152e2:	e7c1      	b.n	8015268 <__gethex+0x1ac>
 80152e4:	da09      	bge.n	80152fa <__gethex+0x23e>
 80152e6:	1b75      	subs	r5, r6, r5
 80152e8:	4621      	mov	r1, r4
 80152ea:	9801      	ldr	r0, [sp, #4]
 80152ec:	462a      	mov	r2, r5
 80152ee:	f7fd ffa7 	bl	8013240 <__lshift>
 80152f2:	1b7f      	subs	r7, r7, r5
 80152f4:	4604      	mov	r4, r0
 80152f6:	f100 0a14 	add.w	sl, r0, #20
 80152fa:	f04f 0900 	mov.w	r9, #0
 80152fe:	e7b8      	b.n	8015272 <__gethex+0x1b6>
 8015300:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015304:	42bd      	cmp	r5, r7
 8015306:	dd6f      	ble.n	80153e8 <__gethex+0x32c>
 8015308:	1bed      	subs	r5, r5, r7
 801530a:	42ae      	cmp	r6, r5
 801530c:	dc34      	bgt.n	8015378 <__gethex+0x2bc>
 801530e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015312:	2b02      	cmp	r3, #2
 8015314:	d022      	beq.n	801535c <__gethex+0x2a0>
 8015316:	2b03      	cmp	r3, #3
 8015318:	d024      	beq.n	8015364 <__gethex+0x2a8>
 801531a:	2b01      	cmp	r3, #1
 801531c:	d115      	bne.n	801534a <__gethex+0x28e>
 801531e:	42ae      	cmp	r6, r5
 8015320:	d113      	bne.n	801534a <__gethex+0x28e>
 8015322:	2e01      	cmp	r6, #1
 8015324:	d10b      	bne.n	801533e <__gethex+0x282>
 8015326:	9a02      	ldr	r2, [sp, #8]
 8015328:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801532c:	6013      	str	r3, [r2, #0]
 801532e:	2301      	movs	r3, #1
 8015330:	6123      	str	r3, [r4, #16]
 8015332:	f8ca 3000 	str.w	r3, [sl]
 8015336:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015338:	2562      	movs	r5, #98	@ 0x62
 801533a:	601c      	str	r4, [r3, #0]
 801533c:	e73a      	b.n	80151b4 <__gethex+0xf8>
 801533e:	1e71      	subs	r1, r6, #1
 8015340:	4620      	mov	r0, r4
 8015342:	f7fe f9b6 	bl	80136b2 <__any_on>
 8015346:	2800      	cmp	r0, #0
 8015348:	d1ed      	bne.n	8015326 <__gethex+0x26a>
 801534a:	9801      	ldr	r0, [sp, #4]
 801534c:	4621      	mov	r1, r4
 801534e:	f7fd fd5f 	bl	8012e10 <_Bfree>
 8015352:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015354:	2300      	movs	r3, #0
 8015356:	6013      	str	r3, [r2, #0]
 8015358:	2550      	movs	r5, #80	@ 0x50
 801535a:	e72b      	b.n	80151b4 <__gethex+0xf8>
 801535c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801535e:	2b00      	cmp	r3, #0
 8015360:	d1f3      	bne.n	801534a <__gethex+0x28e>
 8015362:	e7e0      	b.n	8015326 <__gethex+0x26a>
 8015364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015366:	2b00      	cmp	r3, #0
 8015368:	d1dd      	bne.n	8015326 <__gethex+0x26a>
 801536a:	e7ee      	b.n	801534a <__gethex+0x28e>
 801536c:	08017240 	.word	0x08017240
 8015370:	080170d3 	.word	0x080170d3
 8015374:	08017409 	.word	0x08017409
 8015378:	1e6f      	subs	r7, r5, #1
 801537a:	f1b9 0f00 	cmp.w	r9, #0
 801537e:	d130      	bne.n	80153e2 <__gethex+0x326>
 8015380:	b127      	cbz	r7, 801538c <__gethex+0x2d0>
 8015382:	4639      	mov	r1, r7
 8015384:	4620      	mov	r0, r4
 8015386:	f7fe f994 	bl	80136b2 <__any_on>
 801538a:	4681      	mov	r9, r0
 801538c:	117a      	asrs	r2, r7, #5
 801538e:	2301      	movs	r3, #1
 8015390:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015394:	f007 071f 	and.w	r7, r7, #31
 8015398:	40bb      	lsls	r3, r7
 801539a:	4213      	tst	r3, r2
 801539c:	4629      	mov	r1, r5
 801539e:	4620      	mov	r0, r4
 80153a0:	bf18      	it	ne
 80153a2:	f049 0902 	orrne.w	r9, r9, #2
 80153a6:	f7ff fe21 	bl	8014fec <rshift>
 80153aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80153ae:	1b76      	subs	r6, r6, r5
 80153b0:	2502      	movs	r5, #2
 80153b2:	f1b9 0f00 	cmp.w	r9, #0
 80153b6:	d047      	beq.n	8015448 <__gethex+0x38c>
 80153b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80153bc:	2b02      	cmp	r3, #2
 80153be:	d015      	beq.n	80153ec <__gethex+0x330>
 80153c0:	2b03      	cmp	r3, #3
 80153c2:	d017      	beq.n	80153f4 <__gethex+0x338>
 80153c4:	2b01      	cmp	r3, #1
 80153c6:	d109      	bne.n	80153dc <__gethex+0x320>
 80153c8:	f019 0f02 	tst.w	r9, #2
 80153cc:	d006      	beq.n	80153dc <__gethex+0x320>
 80153ce:	f8da 3000 	ldr.w	r3, [sl]
 80153d2:	ea49 0903 	orr.w	r9, r9, r3
 80153d6:	f019 0f01 	tst.w	r9, #1
 80153da:	d10e      	bne.n	80153fa <__gethex+0x33e>
 80153dc:	f045 0510 	orr.w	r5, r5, #16
 80153e0:	e032      	b.n	8015448 <__gethex+0x38c>
 80153e2:	f04f 0901 	mov.w	r9, #1
 80153e6:	e7d1      	b.n	801538c <__gethex+0x2d0>
 80153e8:	2501      	movs	r5, #1
 80153ea:	e7e2      	b.n	80153b2 <__gethex+0x2f6>
 80153ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153ee:	f1c3 0301 	rsb	r3, r3, #1
 80153f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80153f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d0f0      	beq.n	80153dc <__gethex+0x320>
 80153fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80153fe:	f104 0314 	add.w	r3, r4, #20
 8015402:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015406:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801540a:	f04f 0c00 	mov.w	ip, #0
 801540e:	4618      	mov	r0, r3
 8015410:	f853 2b04 	ldr.w	r2, [r3], #4
 8015414:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015418:	d01b      	beq.n	8015452 <__gethex+0x396>
 801541a:	3201      	adds	r2, #1
 801541c:	6002      	str	r2, [r0, #0]
 801541e:	2d02      	cmp	r5, #2
 8015420:	f104 0314 	add.w	r3, r4, #20
 8015424:	d13c      	bne.n	80154a0 <__gethex+0x3e4>
 8015426:	f8d8 2000 	ldr.w	r2, [r8]
 801542a:	3a01      	subs	r2, #1
 801542c:	42b2      	cmp	r2, r6
 801542e:	d109      	bne.n	8015444 <__gethex+0x388>
 8015430:	1171      	asrs	r1, r6, #5
 8015432:	2201      	movs	r2, #1
 8015434:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015438:	f006 061f 	and.w	r6, r6, #31
 801543c:	fa02 f606 	lsl.w	r6, r2, r6
 8015440:	421e      	tst	r6, r3
 8015442:	d13a      	bne.n	80154ba <__gethex+0x3fe>
 8015444:	f045 0520 	orr.w	r5, r5, #32
 8015448:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801544a:	601c      	str	r4, [r3, #0]
 801544c:	9b02      	ldr	r3, [sp, #8]
 801544e:	601f      	str	r7, [r3, #0]
 8015450:	e6b0      	b.n	80151b4 <__gethex+0xf8>
 8015452:	4299      	cmp	r1, r3
 8015454:	f843 cc04 	str.w	ip, [r3, #-4]
 8015458:	d8d9      	bhi.n	801540e <__gethex+0x352>
 801545a:	68a3      	ldr	r3, [r4, #8]
 801545c:	459b      	cmp	fp, r3
 801545e:	db17      	blt.n	8015490 <__gethex+0x3d4>
 8015460:	6861      	ldr	r1, [r4, #4]
 8015462:	9801      	ldr	r0, [sp, #4]
 8015464:	3101      	adds	r1, #1
 8015466:	f7fd fc93 	bl	8012d90 <_Balloc>
 801546a:	4681      	mov	r9, r0
 801546c:	b918      	cbnz	r0, 8015476 <__gethex+0x3ba>
 801546e:	4b1a      	ldr	r3, [pc, #104]	@ (80154d8 <__gethex+0x41c>)
 8015470:	4602      	mov	r2, r0
 8015472:	2184      	movs	r1, #132	@ 0x84
 8015474:	e6c5      	b.n	8015202 <__gethex+0x146>
 8015476:	6922      	ldr	r2, [r4, #16]
 8015478:	3202      	adds	r2, #2
 801547a:	f104 010c 	add.w	r1, r4, #12
 801547e:	0092      	lsls	r2, r2, #2
 8015480:	300c      	adds	r0, #12
 8015482:	f7fc fd22 	bl	8011eca <memcpy>
 8015486:	4621      	mov	r1, r4
 8015488:	9801      	ldr	r0, [sp, #4]
 801548a:	f7fd fcc1 	bl	8012e10 <_Bfree>
 801548e:	464c      	mov	r4, r9
 8015490:	6923      	ldr	r3, [r4, #16]
 8015492:	1c5a      	adds	r2, r3, #1
 8015494:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015498:	6122      	str	r2, [r4, #16]
 801549a:	2201      	movs	r2, #1
 801549c:	615a      	str	r2, [r3, #20]
 801549e:	e7be      	b.n	801541e <__gethex+0x362>
 80154a0:	6922      	ldr	r2, [r4, #16]
 80154a2:	455a      	cmp	r2, fp
 80154a4:	dd0b      	ble.n	80154be <__gethex+0x402>
 80154a6:	2101      	movs	r1, #1
 80154a8:	4620      	mov	r0, r4
 80154aa:	f7ff fd9f 	bl	8014fec <rshift>
 80154ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80154b2:	3701      	adds	r7, #1
 80154b4:	42bb      	cmp	r3, r7
 80154b6:	f6ff aee0 	blt.w	801527a <__gethex+0x1be>
 80154ba:	2501      	movs	r5, #1
 80154bc:	e7c2      	b.n	8015444 <__gethex+0x388>
 80154be:	f016 061f 	ands.w	r6, r6, #31
 80154c2:	d0fa      	beq.n	80154ba <__gethex+0x3fe>
 80154c4:	4453      	add	r3, sl
 80154c6:	f1c6 0620 	rsb	r6, r6, #32
 80154ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80154ce:	f7fd fd51 	bl	8012f74 <__hi0bits>
 80154d2:	42b0      	cmp	r0, r6
 80154d4:	dbe7      	blt.n	80154a6 <__gethex+0x3ea>
 80154d6:	e7f0      	b.n	80154ba <__gethex+0x3fe>
 80154d8:	080170d3 	.word	0x080170d3

080154dc <L_shift>:
 80154dc:	f1c2 0208 	rsb	r2, r2, #8
 80154e0:	0092      	lsls	r2, r2, #2
 80154e2:	b570      	push	{r4, r5, r6, lr}
 80154e4:	f1c2 0620 	rsb	r6, r2, #32
 80154e8:	6843      	ldr	r3, [r0, #4]
 80154ea:	6804      	ldr	r4, [r0, #0]
 80154ec:	fa03 f506 	lsl.w	r5, r3, r6
 80154f0:	432c      	orrs	r4, r5
 80154f2:	40d3      	lsrs	r3, r2
 80154f4:	6004      	str	r4, [r0, #0]
 80154f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80154fa:	4288      	cmp	r0, r1
 80154fc:	d3f4      	bcc.n	80154e8 <L_shift+0xc>
 80154fe:	bd70      	pop	{r4, r5, r6, pc}

08015500 <__match>:
 8015500:	b530      	push	{r4, r5, lr}
 8015502:	6803      	ldr	r3, [r0, #0]
 8015504:	3301      	adds	r3, #1
 8015506:	f811 4b01 	ldrb.w	r4, [r1], #1
 801550a:	b914      	cbnz	r4, 8015512 <__match+0x12>
 801550c:	6003      	str	r3, [r0, #0]
 801550e:	2001      	movs	r0, #1
 8015510:	bd30      	pop	{r4, r5, pc}
 8015512:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015516:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801551a:	2d19      	cmp	r5, #25
 801551c:	bf98      	it	ls
 801551e:	3220      	addls	r2, #32
 8015520:	42a2      	cmp	r2, r4
 8015522:	d0f0      	beq.n	8015506 <__match+0x6>
 8015524:	2000      	movs	r0, #0
 8015526:	e7f3      	b.n	8015510 <__match+0x10>

08015528 <__hexnan>:
 8015528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801552c:	680b      	ldr	r3, [r1, #0]
 801552e:	6801      	ldr	r1, [r0, #0]
 8015530:	115e      	asrs	r6, r3, #5
 8015532:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015536:	f013 031f 	ands.w	r3, r3, #31
 801553a:	b087      	sub	sp, #28
 801553c:	bf18      	it	ne
 801553e:	3604      	addne	r6, #4
 8015540:	2500      	movs	r5, #0
 8015542:	1f37      	subs	r7, r6, #4
 8015544:	4682      	mov	sl, r0
 8015546:	4690      	mov	r8, r2
 8015548:	9301      	str	r3, [sp, #4]
 801554a:	f846 5c04 	str.w	r5, [r6, #-4]
 801554e:	46b9      	mov	r9, r7
 8015550:	463c      	mov	r4, r7
 8015552:	9502      	str	r5, [sp, #8]
 8015554:	46ab      	mov	fp, r5
 8015556:	784a      	ldrb	r2, [r1, #1]
 8015558:	1c4b      	adds	r3, r1, #1
 801555a:	9303      	str	r3, [sp, #12]
 801555c:	b342      	cbz	r2, 80155b0 <__hexnan+0x88>
 801555e:	4610      	mov	r0, r2
 8015560:	9105      	str	r1, [sp, #20]
 8015562:	9204      	str	r2, [sp, #16]
 8015564:	f7ff fd94 	bl	8015090 <__hexdig_fun>
 8015568:	2800      	cmp	r0, #0
 801556a:	d151      	bne.n	8015610 <__hexnan+0xe8>
 801556c:	9a04      	ldr	r2, [sp, #16]
 801556e:	9905      	ldr	r1, [sp, #20]
 8015570:	2a20      	cmp	r2, #32
 8015572:	d818      	bhi.n	80155a6 <__hexnan+0x7e>
 8015574:	9b02      	ldr	r3, [sp, #8]
 8015576:	459b      	cmp	fp, r3
 8015578:	dd13      	ble.n	80155a2 <__hexnan+0x7a>
 801557a:	454c      	cmp	r4, r9
 801557c:	d206      	bcs.n	801558c <__hexnan+0x64>
 801557e:	2d07      	cmp	r5, #7
 8015580:	dc04      	bgt.n	801558c <__hexnan+0x64>
 8015582:	462a      	mov	r2, r5
 8015584:	4649      	mov	r1, r9
 8015586:	4620      	mov	r0, r4
 8015588:	f7ff ffa8 	bl	80154dc <L_shift>
 801558c:	4544      	cmp	r4, r8
 801558e:	d952      	bls.n	8015636 <__hexnan+0x10e>
 8015590:	2300      	movs	r3, #0
 8015592:	f1a4 0904 	sub.w	r9, r4, #4
 8015596:	f844 3c04 	str.w	r3, [r4, #-4]
 801559a:	f8cd b008 	str.w	fp, [sp, #8]
 801559e:	464c      	mov	r4, r9
 80155a0:	461d      	mov	r5, r3
 80155a2:	9903      	ldr	r1, [sp, #12]
 80155a4:	e7d7      	b.n	8015556 <__hexnan+0x2e>
 80155a6:	2a29      	cmp	r2, #41	@ 0x29
 80155a8:	d157      	bne.n	801565a <__hexnan+0x132>
 80155aa:	3102      	adds	r1, #2
 80155ac:	f8ca 1000 	str.w	r1, [sl]
 80155b0:	f1bb 0f00 	cmp.w	fp, #0
 80155b4:	d051      	beq.n	801565a <__hexnan+0x132>
 80155b6:	454c      	cmp	r4, r9
 80155b8:	d206      	bcs.n	80155c8 <__hexnan+0xa0>
 80155ba:	2d07      	cmp	r5, #7
 80155bc:	dc04      	bgt.n	80155c8 <__hexnan+0xa0>
 80155be:	462a      	mov	r2, r5
 80155c0:	4649      	mov	r1, r9
 80155c2:	4620      	mov	r0, r4
 80155c4:	f7ff ff8a 	bl	80154dc <L_shift>
 80155c8:	4544      	cmp	r4, r8
 80155ca:	d936      	bls.n	801563a <__hexnan+0x112>
 80155cc:	f1a8 0204 	sub.w	r2, r8, #4
 80155d0:	4623      	mov	r3, r4
 80155d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80155d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80155da:	429f      	cmp	r7, r3
 80155dc:	d2f9      	bcs.n	80155d2 <__hexnan+0xaa>
 80155de:	1b3b      	subs	r3, r7, r4
 80155e0:	f023 0303 	bic.w	r3, r3, #3
 80155e4:	3304      	adds	r3, #4
 80155e6:	3401      	adds	r4, #1
 80155e8:	3e03      	subs	r6, #3
 80155ea:	42b4      	cmp	r4, r6
 80155ec:	bf88      	it	hi
 80155ee:	2304      	movhi	r3, #4
 80155f0:	4443      	add	r3, r8
 80155f2:	2200      	movs	r2, #0
 80155f4:	f843 2b04 	str.w	r2, [r3], #4
 80155f8:	429f      	cmp	r7, r3
 80155fa:	d2fb      	bcs.n	80155f4 <__hexnan+0xcc>
 80155fc:	683b      	ldr	r3, [r7, #0]
 80155fe:	b91b      	cbnz	r3, 8015608 <__hexnan+0xe0>
 8015600:	4547      	cmp	r7, r8
 8015602:	d128      	bne.n	8015656 <__hexnan+0x12e>
 8015604:	2301      	movs	r3, #1
 8015606:	603b      	str	r3, [r7, #0]
 8015608:	2005      	movs	r0, #5
 801560a:	b007      	add	sp, #28
 801560c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015610:	3501      	adds	r5, #1
 8015612:	2d08      	cmp	r5, #8
 8015614:	f10b 0b01 	add.w	fp, fp, #1
 8015618:	dd06      	ble.n	8015628 <__hexnan+0x100>
 801561a:	4544      	cmp	r4, r8
 801561c:	d9c1      	bls.n	80155a2 <__hexnan+0x7a>
 801561e:	2300      	movs	r3, #0
 8015620:	f844 3c04 	str.w	r3, [r4, #-4]
 8015624:	2501      	movs	r5, #1
 8015626:	3c04      	subs	r4, #4
 8015628:	6822      	ldr	r2, [r4, #0]
 801562a:	f000 000f 	and.w	r0, r0, #15
 801562e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015632:	6020      	str	r0, [r4, #0]
 8015634:	e7b5      	b.n	80155a2 <__hexnan+0x7a>
 8015636:	2508      	movs	r5, #8
 8015638:	e7b3      	b.n	80155a2 <__hexnan+0x7a>
 801563a:	9b01      	ldr	r3, [sp, #4]
 801563c:	2b00      	cmp	r3, #0
 801563e:	d0dd      	beq.n	80155fc <__hexnan+0xd4>
 8015640:	f1c3 0320 	rsb	r3, r3, #32
 8015644:	f04f 32ff 	mov.w	r2, #4294967295
 8015648:	40da      	lsrs	r2, r3
 801564a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801564e:	4013      	ands	r3, r2
 8015650:	f846 3c04 	str.w	r3, [r6, #-4]
 8015654:	e7d2      	b.n	80155fc <__hexnan+0xd4>
 8015656:	3f04      	subs	r7, #4
 8015658:	e7d0      	b.n	80155fc <__hexnan+0xd4>
 801565a:	2004      	movs	r0, #4
 801565c:	e7d5      	b.n	801560a <__hexnan+0xe2>

0801565e <__ascii_mbtowc>:
 801565e:	b082      	sub	sp, #8
 8015660:	b901      	cbnz	r1, 8015664 <__ascii_mbtowc+0x6>
 8015662:	a901      	add	r1, sp, #4
 8015664:	b142      	cbz	r2, 8015678 <__ascii_mbtowc+0x1a>
 8015666:	b14b      	cbz	r3, 801567c <__ascii_mbtowc+0x1e>
 8015668:	7813      	ldrb	r3, [r2, #0]
 801566a:	600b      	str	r3, [r1, #0]
 801566c:	7812      	ldrb	r2, [r2, #0]
 801566e:	1e10      	subs	r0, r2, #0
 8015670:	bf18      	it	ne
 8015672:	2001      	movne	r0, #1
 8015674:	b002      	add	sp, #8
 8015676:	4770      	bx	lr
 8015678:	4610      	mov	r0, r2
 801567a:	e7fb      	b.n	8015674 <__ascii_mbtowc+0x16>
 801567c:	f06f 0001 	mvn.w	r0, #1
 8015680:	e7f8      	b.n	8015674 <__ascii_mbtowc+0x16>

08015682 <_realloc_r>:
 8015682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015686:	4680      	mov	r8, r0
 8015688:	4615      	mov	r5, r2
 801568a:	460c      	mov	r4, r1
 801568c:	b921      	cbnz	r1, 8015698 <_realloc_r+0x16>
 801568e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015692:	4611      	mov	r1, r2
 8015694:	f7fd baf0 	b.w	8012c78 <_malloc_r>
 8015698:	b92a      	cbnz	r2, 80156a6 <_realloc_r+0x24>
 801569a:	f7fd fa79 	bl	8012b90 <_free_r>
 801569e:	2400      	movs	r4, #0
 80156a0:	4620      	mov	r0, r4
 80156a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156a6:	f000 f8b2 	bl	801580e <_malloc_usable_size_r>
 80156aa:	4285      	cmp	r5, r0
 80156ac:	4606      	mov	r6, r0
 80156ae:	d802      	bhi.n	80156b6 <_realloc_r+0x34>
 80156b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80156b4:	d8f4      	bhi.n	80156a0 <_realloc_r+0x1e>
 80156b6:	4629      	mov	r1, r5
 80156b8:	4640      	mov	r0, r8
 80156ba:	f7fd fadd 	bl	8012c78 <_malloc_r>
 80156be:	4607      	mov	r7, r0
 80156c0:	2800      	cmp	r0, #0
 80156c2:	d0ec      	beq.n	801569e <_realloc_r+0x1c>
 80156c4:	42b5      	cmp	r5, r6
 80156c6:	462a      	mov	r2, r5
 80156c8:	4621      	mov	r1, r4
 80156ca:	bf28      	it	cs
 80156cc:	4632      	movcs	r2, r6
 80156ce:	f7fc fbfc 	bl	8011eca <memcpy>
 80156d2:	4621      	mov	r1, r4
 80156d4:	4640      	mov	r0, r8
 80156d6:	f7fd fa5b 	bl	8012b90 <_free_r>
 80156da:	463c      	mov	r4, r7
 80156dc:	e7e0      	b.n	80156a0 <_realloc_r+0x1e>
	...

080156e0 <_strtoul_l.constprop.0>:
 80156e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156e4:	4e34      	ldr	r6, [pc, #208]	@ (80157b8 <_strtoul_l.constprop.0+0xd8>)
 80156e6:	4686      	mov	lr, r0
 80156e8:	460d      	mov	r5, r1
 80156ea:	4628      	mov	r0, r5
 80156ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80156f0:	5d37      	ldrb	r7, [r6, r4]
 80156f2:	f017 0708 	ands.w	r7, r7, #8
 80156f6:	d1f8      	bne.n	80156ea <_strtoul_l.constprop.0+0xa>
 80156f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80156fa:	d12f      	bne.n	801575c <_strtoul_l.constprop.0+0x7c>
 80156fc:	782c      	ldrb	r4, [r5, #0]
 80156fe:	2701      	movs	r7, #1
 8015700:	1c85      	adds	r5, r0, #2
 8015702:	f033 0010 	bics.w	r0, r3, #16
 8015706:	d109      	bne.n	801571c <_strtoul_l.constprop.0+0x3c>
 8015708:	2c30      	cmp	r4, #48	@ 0x30
 801570a:	d12c      	bne.n	8015766 <_strtoul_l.constprop.0+0x86>
 801570c:	7828      	ldrb	r0, [r5, #0]
 801570e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8015712:	2858      	cmp	r0, #88	@ 0x58
 8015714:	d127      	bne.n	8015766 <_strtoul_l.constprop.0+0x86>
 8015716:	786c      	ldrb	r4, [r5, #1]
 8015718:	2310      	movs	r3, #16
 801571a:	3502      	adds	r5, #2
 801571c:	f04f 38ff 	mov.w	r8, #4294967295
 8015720:	2600      	movs	r6, #0
 8015722:	fbb8 f8f3 	udiv	r8, r8, r3
 8015726:	fb03 f908 	mul.w	r9, r3, r8
 801572a:	ea6f 0909 	mvn.w	r9, r9
 801572e:	4630      	mov	r0, r6
 8015730:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8015734:	f1bc 0f09 	cmp.w	ip, #9
 8015738:	d81c      	bhi.n	8015774 <_strtoul_l.constprop.0+0x94>
 801573a:	4664      	mov	r4, ip
 801573c:	42a3      	cmp	r3, r4
 801573e:	dd2a      	ble.n	8015796 <_strtoul_l.constprop.0+0xb6>
 8015740:	f1b6 3fff 	cmp.w	r6, #4294967295
 8015744:	d007      	beq.n	8015756 <_strtoul_l.constprop.0+0x76>
 8015746:	4580      	cmp	r8, r0
 8015748:	d322      	bcc.n	8015790 <_strtoul_l.constprop.0+0xb0>
 801574a:	d101      	bne.n	8015750 <_strtoul_l.constprop.0+0x70>
 801574c:	45a1      	cmp	r9, r4
 801574e:	db1f      	blt.n	8015790 <_strtoul_l.constprop.0+0xb0>
 8015750:	fb00 4003 	mla	r0, r0, r3, r4
 8015754:	2601      	movs	r6, #1
 8015756:	f815 4b01 	ldrb.w	r4, [r5], #1
 801575a:	e7e9      	b.n	8015730 <_strtoul_l.constprop.0+0x50>
 801575c:	2c2b      	cmp	r4, #43	@ 0x2b
 801575e:	bf04      	itt	eq
 8015760:	782c      	ldrbeq	r4, [r5, #0]
 8015762:	1c85      	addeq	r5, r0, #2
 8015764:	e7cd      	b.n	8015702 <_strtoul_l.constprop.0+0x22>
 8015766:	2b00      	cmp	r3, #0
 8015768:	d1d8      	bne.n	801571c <_strtoul_l.constprop.0+0x3c>
 801576a:	2c30      	cmp	r4, #48	@ 0x30
 801576c:	bf0c      	ite	eq
 801576e:	2308      	moveq	r3, #8
 8015770:	230a      	movne	r3, #10
 8015772:	e7d3      	b.n	801571c <_strtoul_l.constprop.0+0x3c>
 8015774:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8015778:	f1bc 0f19 	cmp.w	ip, #25
 801577c:	d801      	bhi.n	8015782 <_strtoul_l.constprop.0+0xa2>
 801577e:	3c37      	subs	r4, #55	@ 0x37
 8015780:	e7dc      	b.n	801573c <_strtoul_l.constprop.0+0x5c>
 8015782:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8015786:	f1bc 0f19 	cmp.w	ip, #25
 801578a:	d804      	bhi.n	8015796 <_strtoul_l.constprop.0+0xb6>
 801578c:	3c57      	subs	r4, #87	@ 0x57
 801578e:	e7d5      	b.n	801573c <_strtoul_l.constprop.0+0x5c>
 8015790:	f04f 36ff 	mov.w	r6, #4294967295
 8015794:	e7df      	b.n	8015756 <_strtoul_l.constprop.0+0x76>
 8015796:	1c73      	adds	r3, r6, #1
 8015798:	d106      	bne.n	80157a8 <_strtoul_l.constprop.0+0xc8>
 801579a:	2322      	movs	r3, #34	@ 0x22
 801579c:	f8ce 3000 	str.w	r3, [lr]
 80157a0:	4630      	mov	r0, r6
 80157a2:	b932      	cbnz	r2, 80157b2 <_strtoul_l.constprop.0+0xd2>
 80157a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157a8:	b107      	cbz	r7, 80157ac <_strtoul_l.constprop.0+0xcc>
 80157aa:	4240      	negs	r0, r0
 80157ac:	2a00      	cmp	r2, #0
 80157ae:	d0f9      	beq.n	80157a4 <_strtoul_l.constprop.0+0xc4>
 80157b0:	b106      	cbz	r6, 80157b4 <_strtoul_l.constprop.0+0xd4>
 80157b2:	1e69      	subs	r1, r5, #1
 80157b4:	6011      	str	r1, [r2, #0]
 80157b6:	e7f5      	b.n	80157a4 <_strtoul_l.constprop.0+0xc4>
 80157b8:	08017299 	.word	0x08017299

080157bc <_strtoul_r>:
 80157bc:	f7ff bf90 	b.w	80156e0 <_strtoul_l.constprop.0>

080157c0 <__ascii_wctomb>:
 80157c0:	4603      	mov	r3, r0
 80157c2:	4608      	mov	r0, r1
 80157c4:	b141      	cbz	r1, 80157d8 <__ascii_wctomb+0x18>
 80157c6:	2aff      	cmp	r2, #255	@ 0xff
 80157c8:	d904      	bls.n	80157d4 <__ascii_wctomb+0x14>
 80157ca:	228a      	movs	r2, #138	@ 0x8a
 80157cc:	601a      	str	r2, [r3, #0]
 80157ce:	f04f 30ff 	mov.w	r0, #4294967295
 80157d2:	4770      	bx	lr
 80157d4:	700a      	strb	r2, [r1, #0]
 80157d6:	2001      	movs	r0, #1
 80157d8:	4770      	bx	lr
	...

080157dc <fiprintf>:
 80157dc:	b40e      	push	{r1, r2, r3}
 80157de:	b503      	push	{r0, r1, lr}
 80157e0:	4601      	mov	r1, r0
 80157e2:	ab03      	add	r3, sp, #12
 80157e4:	4805      	ldr	r0, [pc, #20]	@ (80157fc <fiprintf+0x20>)
 80157e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80157ea:	6800      	ldr	r0, [r0, #0]
 80157ec:	9301      	str	r3, [sp, #4]
 80157ee:	f000 f83f 	bl	8015870 <_vfiprintf_r>
 80157f2:	b002      	add	sp, #8
 80157f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80157f8:	b003      	add	sp, #12
 80157fa:	4770      	bx	lr
 80157fc:	200001e8 	.word	0x200001e8

08015800 <abort>:
 8015800:	b508      	push	{r3, lr}
 8015802:	2006      	movs	r0, #6
 8015804:	f000 fa08 	bl	8015c18 <raise>
 8015808:	2001      	movs	r0, #1
 801580a:	f7ee fe83 	bl	8004514 <_exit>

0801580e <_malloc_usable_size_r>:
 801580e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015812:	1f18      	subs	r0, r3, #4
 8015814:	2b00      	cmp	r3, #0
 8015816:	bfbc      	itt	lt
 8015818:	580b      	ldrlt	r3, [r1, r0]
 801581a:	18c0      	addlt	r0, r0, r3
 801581c:	4770      	bx	lr

0801581e <__sfputc_r>:
 801581e:	6893      	ldr	r3, [r2, #8]
 8015820:	3b01      	subs	r3, #1
 8015822:	2b00      	cmp	r3, #0
 8015824:	b410      	push	{r4}
 8015826:	6093      	str	r3, [r2, #8]
 8015828:	da08      	bge.n	801583c <__sfputc_r+0x1e>
 801582a:	6994      	ldr	r4, [r2, #24]
 801582c:	42a3      	cmp	r3, r4
 801582e:	db01      	blt.n	8015834 <__sfputc_r+0x16>
 8015830:	290a      	cmp	r1, #10
 8015832:	d103      	bne.n	801583c <__sfputc_r+0x1e>
 8015834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015838:	f000 b932 	b.w	8015aa0 <__swbuf_r>
 801583c:	6813      	ldr	r3, [r2, #0]
 801583e:	1c58      	adds	r0, r3, #1
 8015840:	6010      	str	r0, [r2, #0]
 8015842:	7019      	strb	r1, [r3, #0]
 8015844:	4608      	mov	r0, r1
 8015846:	f85d 4b04 	ldr.w	r4, [sp], #4
 801584a:	4770      	bx	lr

0801584c <__sfputs_r>:
 801584c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801584e:	4606      	mov	r6, r0
 8015850:	460f      	mov	r7, r1
 8015852:	4614      	mov	r4, r2
 8015854:	18d5      	adds	r5, r2, r3
 8015856:	42ac      	cmp	r4, r5
 8015858:	d101      	bne.n	801585e <__sfputs_r+0x12>
 801585a:	2000      	movs	r0, #0
 801585c:	e007      	b.n	801586e <__sfputs_r+0x22>
 801585e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015862:	463a      	mov	r2, r7
 8015864:	4630      	mov	r0, r6
 8015866:	f7ff ffda 	bl	801581e <__sfputc_r>
 801586a:	1c43      	adds	r3, r0, #1
 801586c:	d1f3      	bne.n	8015856 <__sfputs_r+0xa>
 801586e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015870 <_vfiprintf_r>:
 8015870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015874:	460d      	mov	r5, r1
 8015876:	b09d      	sub	sp, #116	@ 0x74
 8015878:	4614      	mov	r4, r2
 801587a:	4698      	mov	r8, r3
 801587c:	4606      	mov	r6, r0
 801587e:	b118      	cbz	r0, 8015888 <_vfiprintf_r+0x18>
 8015880:	6a03      	ldr	r3, [r0, #32]
 8015882:	b90b      	cbnz	r3, 8015888 <_vfiprintf_r+0x18>
 8015884:	f7fc f9ca 	bl	8011c1c <__sinit>
 8015888:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801588a:	07d9      	lsls	r1, r3, #31
 801588c:	d405      	bmi.n	801589a <_vfiprintf_r+0x2a>
 801588e:	89ab      	ldrh	r3, [r5, #12]
 8015890:	059a      	lsls	r2, r3, #22
 8015892:	d402      	bmi.n	801589a <_vfiprintf_r+0x2a>
 8015894:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015896:	f7fc fb16 	bl	8011ec6 <__retarget_lock_acquire_recursive>
 801589a:	89ab      	ldrh	r3, [r5, #12]
 801589c:	071b      	lsls	r3, r3, #28
 801589e:	d501      	bpl.n	80158a4 <_vfiprintf_r+0x34>
 80158a0:	692b      	ldr	r3, [r5, #16]
 80158a2:	b99b      	cbnz	r3, 80158cc <_vfiprintf_r+0x5c>
 80158a4:	4629      	mov	r1, r5
 80158a6:	4630      	mov	r0, r6
 80158a8:	f000 f938 	bl	8015b1c <__swsetup_r>
 80158ac:	b170      	cbz	r0, 80158cc <_vfiprintf_r+0x5c>
 80158ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80158b0:	07dc      	lsls	r4, r3, #31
 80158b2:	d504      	bpl.n	80158be <_vfiprintf_r+0x4e>
 80158b4:	f04f 30ff 	mov.w	r0, #4294967295
 80158b8:	b01d      	add	sp, #116	@ 0x74
 80158ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158be:	89ab      	ldrh	r3, [r5, #12]
 80158c0:	0598      	lsls	r0, r3, #22
 80158c2:	d4f7      	bmi.n	80158b4 <_vfiprintf_r+0x44>
 80158c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80158c6:	f7fc faff 	bl	8011ec8 <__retarget_lock_release_recursive>
 80158ca:	e7f3      	b.n	80158b4 <_vfiprintf_r+0x44>
 80158cc:	2300      	movs	r3, #0
 80158ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80158d0:	2320      	movs	r3, #32
 80158d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80158d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80158da:	2330      	movs	r3, #48	@ 0x30
 80158dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015a8c <_vfiprintf_r+0x21c>
 80158e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80158e4:	f04f 0901 	mov.w	r9, #1
 80158e8:	4623      	mov	r3, r4
 80158ea:	469a      	mov	sl, r3
 80158ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80158f0:	b10a      	cbz	r2, 80158f6 <_vfiprintf_r+0x86>
 80158f2:	2a25      	cmp	r2, #37	@ 0x25
 80158f4:	d1f9      	bne.n	80158ea <_vfiprintf_r+0x7a>
 80158f6:	ebba 0b04 	subs.w	fp, sl, r4
 80158fa:	d00b      	beq.n	8015914 <_vfiprintf_r+0xa4>
 80158fc:	465b      	mov	r3, fp
 80158fe:	4622      	mov	r2, r4
 8015900:	4629      	mov	r1, r5
 8015902:	4630      	mov	r0, r6
 8015904:	f7ff ffa2 	bl	801584c <__sfputs_r>
 8015908:	3001      	adds	r0, #1
 801590a:	f000 80a7 	beq.w	8015a5c <_vfiprintf_r+0x1ec>
 801590e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015910:	445a      	add	r2, fp
 8015912:	9209      	str	r2, [sp, #36]	@ 0x24
 8015914:	f89a 3000 	ldrb.w	r3, [sl]
 8015918:	2b00      	cmp	r3, #0
 801591a:	f000 809f 	beq.w	8015a5c <_vfiprintf_r+0x1ec>
 801591e:	2300      	movs	r3, #0
 8015920:	f04f 32ff 	mov.w	r2, #4294967295
 8015924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015928:	f10a 0a01 	add.w	sl, sl, #1
 801592c:	9304      	str	r3, [sp, #16]
 801592e:	9307      	str	r3, [sp, #28]
 8015930:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015934:	931a      	str	r3, [sp, #104]	@ 0x68
 8015936:	4654      	mov	r4, sl
 8015938:	2205      	movs	r2, #5
 801593a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801593e:	4853      	ldr	r0, [pc, #332]	@ (8015a8c <_vfiprintf_r+0x21c>)
 8015940:	f7ea fc6e 	bl	8000220 <memchr>
 8015944:	9a04      	ldr	r2, [sp, #16]
 8015946:	b9d8      	cbnz	r0, 8015980 <_vfiprintf_r+0x110>
 8015948:	06d1      	lsls	r1, r2, #27
 801594a:	bf44      	itt	mi
 801594c:	2320      	movmi	r3, #32
 801594e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015952:	0713      	lsls	r3, r2, #28
 8015954:	bf44      	itt	mi
 8015956:	232b      	movmi	r3, #43	@ 0x2b
 8015958:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801595c:	f89a 3000 	ldrb.w	r3, [sl]
 8015960:	2b2a      	cmp	r3, #42	@ 0x2a
 8015962:	d015      	beq.n	8015990 <_vfiprintf_r+0x120>
 8015964:	9a07      	ldr	r2, [sp, #28]
 8015966:	4654      	mov	r4, sl
 8015968:	2000      	movs	r0, #0
 801596a:	f04f 0c0a 	mov.w	ip, #10
 801596e:	4621      	mov	r1, r4
 8015970:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015974:	3b30      	subs	r3, #48	@ 0x30
 8015976:	2b09      	cmp	r3, #9
 8015978:	d94b      	bls.n	8015a12 <_vfiprintf_r+0x1a2>
 801597a:	b1b0      	cbz	r0, 80159aa <_vfiprintf_r+0x13a>
 801597c:	9207      	str	r2, [sp, #28]
 801597e:	e014      	b.n	80159aa <_vfiprintf_r+0x13a>
 8015980:	eba0 0308 	sub.w	r3, r0, r8
 8015984:	fa09 f303 	lsl.w	r3, r9, r3
 8015988:	4313      	orrs	r3, r2
 801598a:	9304      	str	r3, [sp, #16]
 801598c:	46a2      	mov	sl, r4
 801598e:	e7d2      	b.n	8015936 <_vfiprintf_r+0xc6>
 8015990:	9b03      	ldr	r3, [sp, #12]
 8015992:	1d19      	adds	r1, r3, #4
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	9103      	str	r1, [sp, #12]
 8015998:	2b00      	cmp	r3, #0
 801599a:	bfbb      	ittet	lt
 801599c:	425b      	neglt	r3, r3
 801599e:	f042 0202 	orrlt.w	r2, r2, #2
 80159a2:	9307      	strge	r3, [sp, #28]
 80159a4:	9307      	strlt	r3, [sp, #28]
 80159a6:	bfb8      	it	lt
 80159a8:	9204      	strlt	r2, [sp, #16]
 80159aa:	7823      	ldrb	r3, [r4, #0]
 80159ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80159ae:	d10a      	bne.n	80159c6 <_vfiprintf_r+0x156>
 80159b0:	7863      	ldrb	r3, [r4, #1]
 80159b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80159b4:	d132      	bne.n	8015a1c <_vfiprintf_r+0x1ac>
 80159b6:	9b03      	ldr	r3, [sp, #12]
 80159b8:	1d1a      	adds	r2, r3, #4
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	9203      	str	r2, [sp, #12]
 80159be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80159c2:	3402      	adds	r4, #2
 80159c4:	9305      	str	r3, [sp, #20]
 80159c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015a9c <_vfiprintf_r+0x22c>
 80159ca:	7821      	ldrb	r1, [r4, #0]
 80159cc:	2203      	movs	r2, #3
 80159ce:	4650      	mov	r0, sl
 80159d0:	f7ea fc26 	bl	8000220 <memchr>
 80159d4:	b138      	cbz	r0, 80159e6 <_vfiprintf_r+0x176>
 80159d6:	9b04      	ldr	r3, [sp, #16]
 80159d8:	eba0 000a 	sub.w	r0, r0, sl
 80159dc:	2240      	movs	r2, #64	@ 0x40
 80159de:	4082      	lsls	r2, r0
 80159e0:	4313      	orrs	r3, r2
 80159e2:	3401      	adds	r4, #1
 80159e4:	9304      	str	r3, [sp, #16]
 80159e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159ea:	4829      	ldr	r0, [pc, #164]	@ (8015a90 <_vfiprintf_r+0x220>)
 80159ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80159f0:	2206      	movs	r2, #6
 80159f2:	f7ea fc15 	bl	8000220 <memchr>
 80159f6:	2800      	cmp	r0, #0
 80159f8:	d03f      	beq.n	8015a7a <_vfiprintf_r+0x20a>
 80159fa:	4b26      	ldr	r3, [pc, #152]	@ (8015a94 <_vfiprintf_r+0x224>)
 80159fc:	bb1b      	cbnz	r3, 8015a46 <_vfiprintf_r+0x1d6>
 80159fe:	9b03      	ldr	r3, [sp, #12]
 8015a00:	3307      	adds	r3, #7
 8015a02:	f023 0307 	bic.w	r3, r3, #7
 8015a06:	3308      	adds	r3, #8
 8015a08:	9303      	str	r3, [sp, #12]
 8015a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a0c:	443b      	add	r3, r7
 8015a0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015a10:	e76a      	b.n	80158e8 <_vfiprintf_r+0x78>
 8015a12:	fb0c 3202 	mla	r2, ip, r2, r3
 8015a16:	460c      	mov	r4, r1
 8015a18:	2001      	movs	r0, #1
 8015a1a:	e7a8      	b.n	801596e <_vfiprintf_r+0xfe>
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	3401      	adds	r4, #1
 8015a20:	9305      	str	r3, [sp, #20]
 8015a22:	4619      	mov	r1, r3
 8015a24:	f04f 0c0a 	mov.w	ip, #10
 8015a28:	4620      	mov	r0, r4
 8015a2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015a2e:	3a30      	subs	r2, #48	@ 0x30
 8015a30:	2a09      	cmp	r2, #9
 8015a32:	d903      	bls.n	8015a3c <_vfiprintf_r+0x1cc>
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d0c6      	beq.n	80159c6 <_vfiprintf_r+0x156>
 8015a38:	9105      	str	r1, [sp, #20]
 8015a3a:	e7c4      	b.n	80159c6 <_vfiprintf_r+0x156>
 8015a3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015a40:	4604      	mov	r4, r0
 8015a42:	2301      	movs	r3, #1
 8015a44:	e7f0      	b.n	8015a28 <_vfiprintf_r+0x1b8>
 8015a46:	ab03      	add	r3, sp, #12
 8015a48:	9300      	str	r3, [sp, #0]
 8015a4a:	462a      	mov	r2, r5
 8015a4c:	4b12      	ldr	r3, [pc, #72]	@ (8015a98 <_vfiprintf_r+0x228>)
 8015a4e:	a904      	add	r1, sp, #16
 8015a50:	4630      	mov	r0, r6
 8015a52:	f7fb fa8b 	bl	8010f6c <_printf_float>
 8015a56:	4607      	mov	r7, r0
 8015a58:	1c78      	adds	r0, r7, #1
 8015a5a:	d1d6      	bne.n	8015a0a <_vfiprintf_r+0x19a>
 8015a5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015a5e:	07d9      	lsls	r1, r3, #31
 8015a60:	d405      	bmi.n	8015a6e <_vfiprintf_r+0x1fe>
 8015a62:	89ab      	ldrh	r3, [r5, #12]
 8015a64:	059a      	lsls	r2, r3, #22
 8015a66:	d402      	bmi.n	8015a6e <_vfiprintf_r+0x1fe>
 8015a68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015a6a:	f7fc fa2d 	bl	8011ec8 <__retarget_lock_release_recursive>
 8015a6e:	89ab      	ldrh	r3, [r5, #12]
 8015a70:	065b      	lsls	r3, r3, #25
 8015a72:	f53f af1f 	bmi.w	80158b4 <_vfiprintf_r+0x44>
 8015a76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015a78:	e71e      	b.n	80158b8 <_vfiprintf_r+0x48>
 8015a7a:	ab03      	add	r3, sp, #12
 8015a7c:	9300      	str	r3, [sp, #0]
 8015a7e:	462a      	mov	r2, r5
 8015a80:	4b05      	ldr	r3, [pc, #20]	@ (8015a98 <_vfiprintf_r+0x228>)
 8015a82:	a904      	add	r1, sp, #16
 8015a84:	4630      	mov	r0, r6
 8015a86:	f7fb fd09 	bl	801149c <_printf_i>
 8015a8a:	e7e4      	b.n	8015a56 <_vfiprintf_r+0x1e6>
 8015a8c:	08017399 	.word	0x08017399
 8015a90:	080173a3 	.word	0x080173a3
 8015a94:	08010f6d 	.word	0x08010f6d
 8015a98:	0801584d 	.word	0x0801584d
 8015a9c:	0801739f 	.word	0x0801739f

08015aa0 <__swbuf_r>:
 8015aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aa2:	460e      	mov	r6, r1
 8015aa4:	4614      	mov	r4, r2
 8015aa6:	4605      	mov	r5, r0
 8015aa8:	b118      	cbz	r0, 8015ab2 <__swbuf_r+0x12>
 8015aaa:	6a03      	ldr	r3, [r0, #32]
 8015aac:	b90b      	cbnz	r3, 8015ab2 <__swbuf_r+0x12>
 8015aae:	f7fc f8b5 	bl	8011c1c <__sinit>
 8015ab2:	69a3      	ldr	r3, [r4, #24]
 8015ab4:	60a3      	str	r3, [r4, #8]
 8015ab6:	89a3      	ldrh	r3, [r4, #12]
 8015ab8:	071a      	lsls	r2, r3, #28
 8015aba:	d501      	bpl.n	8015ac0 <__swbuf_r+0x20>
 8015abc:	6923      	ldr	r3, [r4, #16]
 8015abe:	b943      	cbnz	r3, 8015ad2 <__swbuf_r+0x32>
 8015ac0:	4621      	mov	r1, r4
 8015ac2:	4628      	mov	r0, r5
 8015ac4:	f000 f82a 	bl	8015b1c <__swsetup_r>
 8015ac8:	b118      	cbz	r0, 8015ad2 <__swbuf_r+0x32>
 8015aca:	f04f 37ff 	mov.w	r7, #4294967295
 8015ace:	4638      	mov	r0, r7
 8015ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ad2:	6823      	ldr	r3, [r4, #0]
 8015ad4:	6922      	ldr	r2, [r4, #16]
 8015ad6:	1a98      	subs	r0, r3, r2
 8015ad8:	6963      	ldr	r3, [r4, #20]
 8015ada:	b2f6      	uxtb	r6, r6
 8015adc:	4283      	cmp	r3, r0
 8015ade:	4637      	mov	r7, r6
 8015ae0:	dc05      	bgt.n	8015aee <__swbuf_r+0x4e>
 8015ae2:	4621      	mov	r1, r4
 8015ae4:	4628      	mov	r0, r5
 8015ae6:	f7ff f97f 	bl	8014de8 <_fflush_r>
 8015aea:	2800      	cmp	r0, #0
 8015aec:	d1ed      	bne.n	8015aca <__swbuf_r+0x2a>
 8015aee:	68a3      	ldr	r3, [r4, #8]
 8015af0:	3b01      	subs	r3, #1
 8015af2:	60a3      	str	r3, [r4, #8]
 8015af4:	6823      	ldr	r3, [r4, #0]
 8015af6:	1c5a      	adds	r2, r3, #1
 8015af8:	6022      	str	r2, [r4, #0]
 8015afa:	701e      	strb	r6, [r3, #0]
 8015afc:	6962      	ldr	r2, [r4, #20]
 8015afe:	1c43      	adds	r3, r0, #1
 8015b00:	429a      	cmp	r2, r3
 8015b02:	d004      	beq.n	8015b0e <__swbuf_r+0x6e>
 8015b04:	89a3      	ldrh	r3, [r4, #12]
 8015b06:	07db      	lsls	r3, r3, #31
 8015b08:	d5e1      	bpl.n	8015ace <__swbuf_r+0x2e>
 8015b0a:	2e0a      	cmp	r6, #10
 8015b0c:	d1df      	bne.n	8015ace <__swbuf_r+0x2e>
 8015b0e:	4621      	mov	r1, r4
 8015b10:	4628      	mov	r0, r5
 8015b12:	f7ff f969 	bl	8014de8 <_fflush_r>
 8015b16:	2800      	cmp	r0, #0
 8015b18:	d0d9      	beq.n	8015ace <__swbuf_r+0x2e>
 8015b1a:	e7d6      	b.n	8015aca <__swbuf_r+0x2a>

08015b1c <__swsetup_r>:
 8015b1c:	b538      	push	{r3, r4, r5, lr}
 8015b1e:	4b29      	ldr	r3, [pc, #164]	@ (8015bc4 <__swsetup_r+0xa8>)
 8015b20:	4605      	mov	r5, r0
 8015b22:	6818      	ldr	r0, [r3, #0]
 8015b24:	460c      	mov	r4, r1
 8015b26:	b118      	cbz	r0, 8015b30 <__swsetup_r+0x14>
 8015b28:	6a03      	ldr	r3, [r0, #32]
 8015b2a:	b90b      	cbnz	r3, 8015b30 <__swsetup_r+0x14>
 8015b2c:	f7fc f876 	bl	8011c1c <__sinit>
 8015b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b34:	0719      	lsls	r1, r3, #28
 8015b36:	d422      	bmi.n	8015b7e <__swsetup_r+0x62>
 8015b38:	06da      	lsls	r2, r3, #27
 8015b3a:	d407      	bmi.n	8015b4c <__swsetup_r+0x30>
 8015b3c:	2209      	movs	r2, #9
 8015b3e:	602a      	str	r2, [r5, #0]
 8015b40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015b44:	81a3      	strh	r3, [r4, #12]
 8015b46:	f04f 30ff 	mov.w	r0, #4294967295
 8015b4a:	e033      	b.n	8015bb4 <__swsetup_r+0x98>
 8015b4c:	0758      	lsls	r0, r3, #29
 8015b4e:	d512      	bpl.n	8015b76 <__swsetup_r+0x5a>
 8015b50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015b52:	b141      	cbz	r1, 8015b66 <__swsetup_r+0x4a>
 8015b54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015b58:	4299      	cmp	r1, r3
 8015b5a:	d002      	beq.n	8015b62 <__swsetup_r+0x46>
 8015b5c:	4628      	mov	r0, r5
 8015b5e:	f7fd f817 	bl	8012b90 <_free_r>
 8015b62:	2300      	movs	r3, #0
 8015b64:	6363      	str	r3, [r4, #52]	@ 0x34
 8015b66:	89a3      	ldrh	r3, [r4, #12]
 8015b68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015b6c:	81a3      	strh	r3, [r4, #12]
 8015b6e:	2300      	movs	r3, #0
 8015b70:	6063      	str	r3, [r4, #4]
 8015b72:	6923      	ldr	r3, [r4, #16]
 8015b74:	6023      	str	r3, [r4, #0]
 8015b76:	89a3      	ldrh	r3, [r4, #12]
 8015b78:	f043 0308 	orr.w	r3, r3, #8
 8015b7c:	81a3      	strh	r3, [r4, #12]
 8015b7e:	6923      	ldr	r3, [r4, #16]
 8015b80:	b94b      	cbnz	r3, 8015b96 <__swsetup_r+0x7a>
 8015b82:	89a3      	ldrh	r3, [r4, #12]
 8015b84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015b8c:	d003      	beq.n	8015b96 <__swsetup_r+0x7a>
 8015b8e:	4621      	mov	r1, r4
 8015b90:	4628      	mov	r0, r5
 8015b92:	f000 f883 	bl	8015c9c <__smakebuf_r>
 8015b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b9a:	f013 0201 	ands.w	r2, r3, #1
 8015b9e:	d00a      	beq.n	8015bb6 <__swsetup_r+0x9a>
 8015ba0:	2200      	movs	r2, #0
 8015ba2:	60a2      	str	r2, [r4, #8]
 8015ba4:	6962      	ldr	r2, [r4, #20]
 8015ba6:	4252      	negs	r2, r2
 8015ba8:	61a2      	str	r2, [r4, #24]
 8015baa:	6922      	ldr	r2, [r4, #16]
 8015bac:	b942      	cbnz	r2, 8015bc0 <__swsetup_r+0xa4>
 8015bae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015bb2:	d1c5      	bne.n	8015b40 <__swsetup_r+0x24>
 8015bb4:	bd38      	pop	{r3, r4, r5, pc}
 8015bb6:	0799      	lsls	r1, r3, #30
 8015bb8:	bf58      	it	pl
 8015bba:	6962      	ldrpl	r2, [r4, #20]
 8015bbc:	60a2      	str	r2, [r4, #8]
 8015bbe:	e7f4      	b.n	8015baa <__swsetup_r+0x8e>
 8015bc0:	2000      	movs	r0, #0
 8015bc2:	e7f7      	b.n	8015bb4 <__swsetup_r+0x98>
 8015bc4:	200001e8 	.word	0x200001e8

08015bc8 <_raise_r>:
 8015bc8:	291f      	cmp	r1, #31
 8015bca:	b538      	push	{r3, r4, r5, lr}
 8015bcc:	4605      	mov	r5, r0
 8015bce:	460c      	mov	r4, r1
 8015bd0:	d904      	bls.n	8015bdc <_raise_r+0x14>
 8015bd2:	2316      	movs	r3, #22
 8015bd4:	6003      	str	r3, [r0, #0]
 8015bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8015bda:	bd38      	pop	{r3, r4, r5, pc}
 8015bdc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015bde:	b112      	cbz	r2, 8015be6 <_raise_r+0x1e>
 8015be0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015be4:	b94b      	cbnz	r3, 8015bfa <_raise_r+0x32>
 8015be6:	4628      	mov	r0, r5
 8015be8:	f000 f830 	bl	8015c4c <_getpid_r>
 8015bec:	4622      	mov	r2, r4
 8015bee:	4601      	mov	r1, r0
 8015bf0:	4628      	mov	r0, r5
 8015bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015bf6:	f000 b817 	b.w	8015c28 <_kill_r>
 8015bfa:	2b01      	cmp	r3, #1
 8015bfc:	d00a      	beq.n	8015c14 <_raise_r+0x4c>
 8015bfe:	1c59      	adds	r1, r3, #1
 8015c00:	d103      	bne.n	8015c0a <_raise_r+0x42>
 8015c02:	2316      	movs	r3, #22
 8015c04:	6003      	str	r3, [r0, #0]
 8015c06:	2001      	movs	r0, #1
 8015c08:	e7e7      	b.n	8015bda <_raise_r+0x12>
 8015c0a:	2100      	movs	r1, #0
 8015c0c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015c10:	4620      	mov	r0, r4
 8015c12:	4798      	blx	r3
 8015c14:	2000      	movs	r0, #0
 8015c16:	e7e0      	b.n	8015bda <_raise_r+0x12>

08015c18 <raise>:
 8015c18:	4b02      	ldr	r3, [pc, #8]	@ (8015c24 <raise+0xc>)
 8015c1a:	4601      	mov	r1, r0
 8015c1c:	6818      	ldr	r0, [r3, #0]
 8015c1e:	f7ff bfd3 	b.w	8015bc8 <_raise_r>
 8015c22:	bf00      	nop
 8015c24:	200001e8 	.word	0x200001e8

08015c28 <_kill_r>:
 8015c28:	b538      	push	{r3, r4, r5, lr}
 8015c2a:	4d07      	ldr	r5, [pc, #28]	@ (8015c48 <_kill_r+0x20>)
 8015c2c:	2300      	movs	r3, #0
 8015c2e:	4604      	mov	r4, r0
 8015c30:	4608      	mov	r0, r1
 8015c32:	4611      	mov	r1, r2
 8015c34:	602b      	str	r3, [r5, #0]
 8015c36:	f7ee fc5d 	bl	80044f4 <_kill>
 8015c3a:	1c43      	adds	r3, r0, #1
 8015c3c:	d102      	bne.n	8015c44 <_kill_r+0x1c>
 8015c3e:	682b      	ldr	r3, [r5, #0]
 8015c40:	b103      	cbz	r3, 8015c44 <_kill_r+0x1c>
 8015c42:	6023      	str	r3, [r4, #0]
 8015c44:	bd38      	pop	{r3, r4, r5, pc}
 8015c46:	bf00      	nop
 8015c48:	200026cc 	.word	0x200026cc

08015c4c <_getpid_r>:
 8015c4c:	f7ee bc4a 	b.w	80044e4 <_getpid>

08015c50 <__swhatbuf_r>:
 8015c50:	b570      	push	{r4, r5, r6, lr}
 8015c52:	460c      	mov	r4, r1
 8015c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c58:	2900      	cmp	r1, #0
 8015c5a:	b096      	sub	sp, #88	@ 0x58
 8015c5c:	4615      	mov	r5, r2
 8015c5e:	461e      	mov	r6, r3
 8015c60:	da0d      	bge.n	8015c7e <__swhatbuf_r+0x2e>
 8015c62:	89a3      	ldrh	r3, [r4, #12]
 8015c64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015c68:	f04f 0100 	mov.w	r1, #0
 8015c6c:	bf14      	ite	ne
 8015c6e:	2340      	movne	r3, #64	@ 0x40
 8015c70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015c74:	2000      	movs	r0, #0
 8015c76:	6031      	str	r1, [r6, #0]
 8015c78:	602b      	str	r3, [r5, #0]
 8015c7a:	b016      	add	sp, #88	@ 0x58
 8015c7c:	bd70      	pop	{r4, r5, r6, pc}
 8015c7e:	466a      	mov	r2, sp
 8015c80:	f000 f848 	bl	8015d14 <_fstat_r>
 8015c84:	2800      	cmp	r0, #0
 8015c86:	dbec      	blt.n	8015c62 <__swhatbuf_r+0x12>
 8015c88:	9901      	ldr	r1, [sp, #4]
 8015c8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015c8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015c92:	4259      	negs	r1, r3
 8015c94:	4159      	adcs	r1, r3
 8015c96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015c9a:	e7eb      	b.n	8015c74 <__swhatbuf_r+0x24>

08015c9c <__smakebuf_r>:
 8015c9c:	898b      	ldrh	r3, [r1, #12]
 8015c9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ca0:	079d      	lsls	r5, r3, #30
 8015ca2:	4606      	mov	r6, r0
 8015ca4:	460c      	mov	r4, r1
 8015ca6:	d507      	bpl.n	8015cb8 <__smakebuf_r+0x1c>
 8015ca8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015cac:	6023      	str	r3, [r4, #0]
 8015cae:	6123      	str	r3, [r4, #16]
 8015cb0:	2301      	movs	r3, #1
 8015cb2:	6163      	str	r3, [r4, #20]
 8015cb4:	b003      	add	sp, #12
 8015cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cb8:	ab01      	add	r3, sp, #4
 8015cba:	466a      	mov	r2, sp
 8015cbc:	f7ff ffc8 	bl	8015c50 <__swhatbuf_r>
 8015cc0:	9f00      	ldr	r7, [sp, #0]
 8015cc2:	4605      	mov	r5, r0
 8015cc4:	4639      	mov	r1, r7
 8015cc6:	4630      	mov	r0, r6
 8015cc8:	f7fc ffd6 	bl	8012c78 <_malloc_r>
 8015ccc:	b948      	cbnz	r0, 8015ce2 <__smakebuf_r+0x46>
 8015cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015cd2:	059a      	lsls	r2, r3, #22
 8015cd4:	d4ee      	bmi.n	8015cb4 <__smakebuf_r+0x18>
 8015cd6:	f023 0303 	bic.w	r3, r3, #3
 8015cda:	f043 0302 	orr.w	r3, r3, #2
 8015cde:	81a3      	strh	r3, [r4, #12]
 8015ce0:	e7e2      	b.n	8015ca8 <__smakebuf_r+0xc>
 8015ce2:	89a3      	ldrh	r3, [r4, #12]
 8015ce4:	6020      	str	r0, [r4, #0]
 8015ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015cea:	81a3      	strh	r3, [r4, #12]
 8015cec:	9b01      	ldr	r3, [sp, #4]
 8015cee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015cf2:	b15b      	cbz	r3, 8015d0c <__smakebuf_r+0x70>
 8015cf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015cf8:	4630      	mov	r0, r6
 8015cfa:	f000 f81d 	bl	8015d38 <_isatty_r>
 8015cfe:	b128      	cbz	r0, 8015d0c <__smakebuf_r+0x70>
 8015d00:	89a3      	ldrh	r3, [r4, #12]
 8015d02:	f023 0303 	bic.w	r3, r3, #3
 8015d06:	f043 0301 	orr.w	r3, r3, #1
 8015d0a:	81a3      	strh	r3, [r4, #12]
 8015d0c:	89a3      	ldrh	r3, [r4, #12]
 8015d0e:	431d      	orrs	r5, r3
 8015d10:	81a5      	strh	r5, [r4, #12]
 8015d12:	e7cf      	b.n	8015cb4 <__smakebuf_r+0x18>

08015d14 <_fstat_r>:
 8015d14:	b538      	push	{r3, r4, r5, lr}
 8015d16:	4d07      	ldr	r5, [pc, #28]	@ (8015d34 <_fstat_r+0x20>)
 8015d18:	2300      	movs	r3, #0
 8015d1a:	4604      	mov	r4, r0
 8015d1c:	4608      	mov	r0, r1
 8015d1e:	4611      	mov	r1, r2
 8015d20:	602b      	str	r3, [r5, #0]
 8015d22:	f7ee fc47 	bl	80045b4 <_fstat>
 8015d26:	1c43      	adds	r3, r0, #1
 8015d28:	d102      	bne.n	8015d30 <_fstat_r+0x1c>
 8015d2a:	682b      	ldr	r3, [r5, #0]
 8015d2c:	b103      	cbz	r3, 8015d30 <_fstat_r+0x1c>
 8015d2e:	6023      	str	r3, [r4, #0]
 8015d30:	bd38      	pop	{r3, r4, r5, pc}
 8015d32:	bf00      	nop
 8015d34:	200026cc 	.word	0x200026cc

08015d38 <_isatty_r>:
 8015d38:	b538      	push	{r3, r4, r5, lr}
 8015d3a:	4d06      	ldr	r5, [pc, #24]	@ (8015d54 <_isatty_r+0x1c>)
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	4604      	mov	r4, r0
 8015d40:	4608      	mov	r0, r1
 8015d42:	602b      	str	r3, [r5, #0]
 8015d44:	f7ee fc46 	bl	80045d4 <_isatty>
 8015d48:	1c43      	adds	r3, r0, #1
 8015d4a:	d102      	bne.n	8015d52 <_isatty_r+0x1a>
 8015d4c:	682b      	ldr	r3, [r5, #0]
 8015d4e:	b103      	cbz	r3, 8015d52 <_isatty_r+0x1a>
 8015d50:	6023      	str	r3, [r4, #0]
 8015d52:	bd38      	pop	{r3, r4, r5, pc}
 8015d54:	200026cc 	.word	0x200026cc

08015d58 <pow>:
 8015d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d5a:	ed2d 8b02 	vpush	{d8}
 8015d5e:	eeb0 8a40 	vmov.f32	s16, s0
 8015d62:	eef0 8a60 	vmov.f32	s17, s1
 8015d66:	ec55 4b11 	vmov	r4, r5, d1
 8015d6a:	f000 f891 	bl	8015e90 <__ieee754_pow>
 8015d6e:	4622      	mov	r2, r4
 8015d70:	462b      	mov	r3, r5
 8015d72:	4620      	mov	r0, r4
 8015d74:	4629      	mov	r1, r5
 8015d76:	ec57 6b10 	vmov	r6, r7, d0
 8015d7a:	f7ea feff 	bl	8000b7c <__aeabi_dcmpun>
 8015d7e:	2800      	cmp	r0, #0
 8015d80:	d13b      	bne.n	8015dfa <pow+0xa2>
 8015d82:	ec51 0b18 	vmov	r0, r1, d8
 8015d86:	2200      	movs	r2, #0
 8015d88:	2300      	movs	r3, #0
 8015d8a:	f7ea fec5 	bl	8000b18 <__aeabi_dcmpeq>
 8015d8e:	b1b8      	cbz	r0, 8015dc0 <pow+0x68>
 8015d90:	2200      	movs	r2, #0
 8015d92:	2300      	movs	r3, #0
 8015d94:	4620      	mov	r0, r4
 8015d96:	4629      	mov	r1, r5
 8015d98:	f7ea febe 	bl	8000b18 <__aeabi_dcmpeq>
 8015d9c:	2800      	cmp	r0, #0
 8015d9e:	d146      	bne.n	8015e2e <pow+0xd6>
 8015da0:	ec45 4b10 	vmov	d0, r4, r5
 8015da4:	f000 f866 	bl	8015e74 <finite>
 8015da8:	b338      	cbz	r0, 8015dfa <pow+0xa2>
 8015daa:	2200      	movs	r2, #0
 8015dac:	2300      	movs	r3, #0
 8015dae:	4620      	mov	r0, r4
 8015db0:	4629      	mov	r1, r5
 8015db2:	f7ea febb 	bl	8000b2c <__aeabi_dcmplt>
 8015db6:	b300      	cbz	r0, 8015dfa <pow+0xa2>
 8015db8:	f7fc f85a 	bl	8011e70 <__errno>
 8015dbc:	2322      	movs	r3, #34	@ 0x22
 8015dbe:	e01b      	b.n	8015df8 <pow+0xa0>
 8015dc0:	ec47 6b10 	vmov	d0, r6, r7
 8015dc4:	f000 f856 	bl	8015e74 <finite>
 8015dc8:	b9e0      	cbnz	r0, 8015e04 <pow+0xac>
 8015dca:	eeb0 0a48 	vmov.f32	s0, s16
 8015dce:	eef0 0a68 	vmov.f32	s1, s17
 8015dd2:	f000 f84f 	bl	8015e74 <finite>
 8015dd6:	b1a8      	cbz	r0, 8015e04 <pow+0xac>
 8015dd8:	ec45 4b10 	vmov	d0, r4, r5
 8015ddc:	f000 f84a 	bl	8015e74 <finite>
 8015de0:	b180      	cbz	r0, 8015e04 <pow+0xac>
 8015de2:	4632      	mov	r2, r6
 8015de4:	463b      	mov	r3, r7
 8015de6:	4630      	mov	r0, r6
 8015de8:	4639      	mov	r1, r7
 8015dea:	f7ea fec7 	bl	8000b7c <__aeabi_dcmpun>
 8015dee:	2800      	cmp	r0, #0
 8015df0:	d0e2      	beq.n	8015db8 <pow+0x60>
 8015df2:	f7fc f83d 	bl	8011e70 <__errno>
 8015df6:	2321      	movs	r3, #33	@ 0x21
 8015df8:	6003      	str	r3, [r0, #0]
 8015dfa:	ecbd 8b02 	vpop	{d8}
 8015dfe:	ec47 6b10 	vmov	d0, r6, r7
 8015e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e04:	2200      	movs	r2, #0
 8015e06:	2300      	movs	r3, #0
 8015e08:	4630      	mov	r0, r6
 8015e0a:	4639      	mov	r1, r7
 8015e0c:	f7ea fe84 	bl	8000b18 <__aeabi_dcmpeq>
 8015e10:	2800      	cmp	r0, #0
 8015e12:	d0f2      	beq.n	8015dfa <pow+0xa2>
 8015e14:	eeb0 0a48 	vmov.f32	s0, s16
 8015e18:	eef0 0a68 	vmov.f32	s1, s17
 8015e1c:	f000 f82a 	bl	8015e74 <finite>
 8015e20:	2800      	cmp	r0, #0
 8015e22:	d0ea      	beq.n	8015dfa <pow+0xa2>
 8015e24:	ec45 4b10 	vmov	d0, r4, r5
 8015e28:	f000 f824 	bl	8015e74 <finite>
 8015e2c:	e7c3      	b.n	8015db6 <pow+0x5e>
 8015e2e:	4f01      	ldr	r7, [pc, #4]	@ (8015e34 <pow+0xdc>)
 8015e30:	2600      	movs	r6, #0
 8015e32:	e7e2      	b.n	8015dfa <pow+0xa2>
 8015e34:	3ff00000 	.word	0x3ff00000

08015e38 <sqrtf>:
 8015e38:	b508      	push	{r3, lr}
 8015e3a:	ed2d 8b02 	vpush	{d8}
 8015e3e:	eeb0 8a40 	vmov.f32	s16, s0
 8015e42:	f000 f822 	bl	8015e8a <__ieee754_sqrtf>
 8015e46:	eeb4 8a48 	vcmp.f32	s16, s16
 8015e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e4e:	d60c      	bvs.n	8015e6a <sqrtf+0x32>
 8015e50:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8015e70 <sqrtf+0x38>
 8015e54:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8015e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e5c:	d505      	bpl.n	8015e6a <sqrtf+0x32>
 8015e5e:	f7fc f807 	bl	8011e70 <__errno>
 8015e62:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8015e66:	2321      	movs	r3, #33	@ 0x21
 8015e68:	6003      	str	r3, [r0, #0]
 8015e6a:	ecbd 8b02 	vpop	{d8}
 8015e6e:	bd08      	pop	{r3, pc}
 8015e70:	00000000 	.word	0x00000000

08015e74 <finite>:
 8015e74:	b082      	sub	sp, #8
 8015e76:	ed8d 0b00 	vstr	d0, [sp]
 8015e7a:	9801      	ldr	r0, [sp, #4]
 8015e7c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8015e80:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8015e84:	0fc0      	lsrs	r0, r0, #31
 8015e86:	b002      	add	sp, #8
 8015e88:	4770      	bx	lr

08015e8a <__ieee754_sqrtf>:
 8015e8a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015e8e:	4770      	bx	lr

08015e90 <__ieee754_pow>:
 8015e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e94:	b091      	sub	sp, #68	@ 0x44
 8015e96:	ed8d 1b00 	vstr	d1, [sp]
 8015e9a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8015e9e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8015ea2:	ea5a 0001 	orrs.w	r0, sl, r1
 8015ea6:	ec57 6b10 	vmov	r6, r7, d0
 8015eaa:	d113      	bne.n	8015ed4 <__ieee754_pow+0x44>
 8015eac:	19b3      	adds	r3, r6, r6
 8015eae:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8015eb2:	4152      	adcs	r2, r2
 8015eb4:	4298      	cmp	r0, r3
 8015eb6:	4b98      	ldr	r3, [pc, #608]	@ (8016118 <__ieee754_pow+0x288>)
 8015eb8:	4193      	sbcs	r3, r2
 8015eba:	f080 84ea 	bcs.w	8016892 <__ieee754_pow+0xa02>
 8015ebe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015ec2:	4630      	mov	r0, r6
 8015ec4:	4639      	mov	r1, r7
 8015ec6:	f7ea fa09 	bl	80002dc <__adddf3>
 8015eca:	ec41 0b10 	vmov	d0, r0, r1
 8015ece:	b011      	add	sp, #68	@ 0x44
 8015ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ed4:	4a91      	ldr	r2, [pc, #580]	@ (801611c <__ieee754_pow+0x28c>)
 8015ed6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8015eda:	4590      	cmp	r8, r2
 8015edc:	463d      	mov	r5, r7
 8015ede:	4633      	mov	r3, r6
 8015ee0:	d806      	bhi.n	8015ef0 <__ieee754_pow+0x60>
 8015ee2:	d101      	bne.n	8015ee8 <__ieee754_pow+0x58>
 8015ee4:	2e00      	cmp	r6, #0
 8015ee6:	d1ea      	bne.n	8015ebe <__ieee754_pow+0x2e>
 8015ee8:	4592      	cmp	sl, r2
 8015eea:	d801      	bhi.n	8015ef0 <__ieee754_pow+0x60>
 8015eec:	d10e      	bne.n	8015f0c <__ieee754_pow+0x7c>
 8015eee:	b169      	cbz	r1, 8015f0c <__ieee754_pow+0x7c>
 8015ef0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8015ef4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8015ef8:	431d      	orrs	r5, r3
 8015efa:	d1e0      	bne.n	8015ebe <__ieee754_pow+0x2e>
 8015efc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015f00:	18db      	adds	r3, r3, r3
 8015f02:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8015f06:	4152      	adcs	r2, r2
 8015f08:	429d      	cmp	r5, r3
 8015f0a:	e7d4      	b.n	8015eb6 <__ieee754_pow+0x26>
 8015f0c:	2d00      	cmp	r5, #0
 8015f0e:	46c3      	mov	fp, r8
 8015f10:	da3a      	bge.n	8015f88 <__ieee754_pow+0xf8>
 8015f12:	4a83      	ldr	r2, [pc, #524]	@ (8016120 <__ieee754_pow+0x290>)
 8015f14:	4592      	cmp	sl, r2
 8015f16:	d84d      	bhi.n	8015fb4 <__ieee754_pow+0x124>
 8015f18:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8015f1c:	4592      	cmp	sl, r2
 8015f1e:	f240 84c7 	bls.w	80168b0 <__ieee754_pow+0xa20>
 8015f22:	ea4f 522a 	mov.w	r2, sl, asr #20
 8015f26:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8015f2a:	2a14      	cmp	r2, #20
 8015f2c:	dd0f      	ble.n	8015f4e <__ieee754_pow+0xbe>
 8015f2e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8015f32:	fa21 f402 	lsr.w	r4, r1, r2
 8015f36:	fa04 f202 	lsl.w	r2, r4, r2
 8015f3a:	428a      	cmp	r2, r1
 8015f3c:	f040 84b8 	bne.w	80168b0 <__ieee754_pow+0xa20>
 8015f40:	f004 0401 	and.w	r4, r4, #1
 8015f44:	f1c4 0402 	rsb	r4, r4, #2
 8015f48:	2900      	cmp	r1, #0
 8015f4a:	d158      	bne.n	8015ffe <__ieee754_pow+0x16e>
 8015f4c:	e00e      	b.n	8015f6c <__ieee754_pow+0xdc>
 8015f4e:	2900      	cmp	r1, #0
 8015f50:	d154      	bne.n	8015ffc <__ieee754_pow+0x16c>
 8015f52:	f1c2 0214 	rsb	r2, r2, #20
 8015f56:	fa4a f402 	asr.w	r4, sl, r2
 8015f5a:	fa04 f202 	lsl.w	r2, r4, r2
 8015f5e:	4552      	cmp	r2, sl
 8015f60:	f040 84a3 	bne.w	80168aa <__ieee754_pow+0xa1a>
 8015f64:	f004 0401 	and.w	r4, r4, #1
 8015f68:	f1c4 0402 	rsb	r4, r4, #2
 8015f6c:	4a6d      	ldr	r2, [pc, #436]	@ (8016124 <__ieee754_pow+0x294>)
 8015f6e:	4592      	cmp	sl, r2
 8015f70:	d12e      	bne.n	8015fd0 <__ieee754_pow+0x140>
 8015f72:	f1b9 0f00 	cmp.w	r9, #0
 8015f76:	f280 8494 	bge.w	80168a2 <__ieee754_pow+0xa12>
 8015f7a:	496a      	ldr	r1, [pc, #424]	@ (8016124 <__ieee754_pow+0x294>)
 8015f7c:	4632      	mov	r2, r6
 8015f7e:	463b      	mov	r3, r7
 8015f80:	2000      	movs	r0, #0
 8015f82:	f7ea fc8b 	bl	800089c <__aeabi_ddiv>
 8015f86:	e7a0      	b.n	8015eca <__ieee754_pow+0x3a>
 8015f88:	2400      	movs	r4, #0
 8015f8a:	bbc1      	cbnz	r1, 8015ffe <__ieee754_pow+0x16e>
 8015f8c:	4a63      	ldr	r2, [pc, #396]	@ (801611c <__ieee754_pow+0x28c>)
 8015f8e:	4592      	cmp	sl, r2
 8015f90:	d1ec      	bne.n	8015f6c <__ieee754_pow+0xdc>
 8015f92:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8015f96:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8015f9a:	431a      	orrs	r2, r3
 8015f9c:	f000 8479 	beq.w	8016892 <__ieee754_pow+0xa02>
 8015fa0:	4b61      	ldr	r3, [pc, #388]	@ (8016128 <__ieee754_pow+0x298>)
 8015fa2:	4598      	cmp	r8, r3
 8015fa4:	d908      	bls.n	8015fb8 <__ieee754_pow+0x128>
 8015fa6:	f1b9 0f00 	cmp.w	r9, #0
 8015faa:	f2c0 8476 	blt.w	801689a <__ieee754_pow+0xa0a>
 8015fae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015fb2:	e78a      	b.n	8015eca <__ieee754_pow+0x3a>
 8015fb4:	2402      	movs	r4, #2
 8015fb6:	e7e8      	b.n	8015f8a <__ieee754_pow+0xfa>
 8015fb8:	f1b9 0f00 	cmp.w	r9, #0
 8015fbc:	f04f 0000 	mov.w	r0, #0
 8015fc0:	f04f 0100 	mov.w	r1, #0
 8015fc4:	da81      	bge.n	8015eca <__ieee754_pow+0x3a>
 8015fc6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8015fca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8015fce:	e77c      	b.n	8015eca <__ieee754_pow+0x3a>
 8015fd0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8015fd4:	d106      	bne.n	8015fe4 <__ieee754_pow+0x154>
 8015fd6:	4632      	mov	r2, r6
 8015fd8:	463b      	mov	r3, r7
 8015fda:	4630      	mov	r0, r6
 8015fdc:	4639      	mov	r1, r7
 8015fde:	f7ea fb33 	bl	8000648 <__aeabi_dmul>
 8015fe2:	e772      	b.n	8015eca <__ieee754_pow+0x3a>
 8015fe4:	4a51      	ldr	r2, [pc, #324]	@ (801612c <__ieee754_pow+0x29c>)
 8015fe6:	4591      	cmp	r9, r2
 8015fe8:	d109      	bne.n	8015ffe <__ieee754_pow+0x16e>
 8015fea:	2d00      	cmp	r5, #0
 8015fec:	db07      	blt.n	8015ffe <__ieee754_pow+0x16e>
 8015fee:	ec47 6b10 	vmov	d0, r6, r7
 8015ff2:	b011      	add	sp, #68	@ 0x44
 8015ff4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ff8:	f000 bd52 	b.w	8016aa0 <__ieee754_sqrt>
 8015ffc:	2400      	movs	r4, #0
 8015ffe:	ec47 6b10 	vmov	d0, r6, r7
 8016002:	9302      	str	r3, [sp, #8]
 8016004:	f000 fc88 	bl	8016918 <fabs>
 8016008:	9b02      	ldr	r3, [sp, #8]
 801600a:	ec51 0b10 	vmov	r0, r1, d0
 801600e:	bb53      	cbnz	r3, 8016066 <__ieee754_pow+0x1d6>
 8016010:	4b44      	ldr	r3, [pc, #272]	@ (8016124 <__ieee754_pow+0x294>)
 8016012:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8016016:	429a      	cmp	r2, r3
 8016018:	d002      	beq.n	8016020 <__ieee754_pow+0x190>
 801601a:	f1b8 0f00 	cmp.w	r8, #0
 801601e:	d122      	bne.n	8016066 <__ieee754_pow+0x1d6>
 8016020:	f1b9 0f00 	cmp.w	r9, #0
 8016024:	da05      	bge.n	8016032 <__ieee754_pow+0x1a2>
 8016026:	4602      	mov	r2, r0
 8016028:	460b      	mov	r3, r1
 801602a:	2000      	movs	r0, #0
 801602c:	493d      	ldr	r1, [pc, #244]	@ (8016124 <__ieee754_pow+0x294>)
 801602e:	f7ea fc35 	bl	800089c <__aeabi_ddiv>
 8016032:	2d00      	cmp	r5, #0
 8016034:	f6bf af49 	bge.w	8015eca <__ieee754_pow+0x3a>
 8016038:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801603c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8016040:	ea58 0804 	orrs.w	r8, r8, r4
 8016044:	d108      	bne.n	8016058 <__ieee754_pow+0x1c8>
 8016046:	4602      	mov	r2, r0
 8016048:	460b      	mov	r3, r1
 801604a:	4610      	mov	r0, r2
 801604c:	4619      	mov	r1, r3
 801604e:	f7ea f943 	bl	80002d8 <__aeabi_dsub>
 8016052:	4602      	mov	r2, r0
 8016054:	460b      	mov	r3, r1
 8016056:	e794      	b.n	8015f82 <__ieee754_pow+0xf2>
 8016058:	2c01      	cmp	r4, #1
 801605a:	f47f af36 	bne.w	8015eca <__ieee754_pow+0x3a>
 801605e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016062:	4619      	mov	r1, r3
 8016064:	e731      	b.n	8015eca <__ieee754_pow+0x3a>
 8016066:	0feb      	lsrs	r3, r5, #31
 8016068:	3b01      	subs	r3, #1
 801606a:	ea53 0204 	orrs.w	r2, r3, r4
 801606e:	d102      	bne.n	8016076 <__ieee754_pow+0x1e6>
 8016070:	4632      	mov	r2, r6
 8016072:	463b      	mov	r3, r7
 8016074:	e7e9      	b.n	801604a <__ieee754_pow+0x1ba>
 8016076:	3c01      	subs	r4, #1
 8016078:	431c      	orrs	r4, r3
 801607a:	d016      	beq.n	80160aa <__ieee754_pow+0x21a>
 801607c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8016108 <__ieee754_pow+0x278>
 8016080:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8016084:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016088:	f240 8112 	bls.w	80162b0 <__ieee754_pow+0x420>
 801608c:	4b28      	ldr	r3, [pc, #160]	@ (8016130 <__ieee754_pow+0x2a0>)
 801608e:	459a      	cmp	sl, r3
 8016090:	4b25      	ldr	r3, [pc, #148]	@ (8016128 <__ieee754_pow+0x298>)
 8016092:	d916      	bls.n	80160c2 <__ieee754_pow+0x232>
 8016094:	4598      	cmp	r8, r3
 8016096:	d80b      	bhi.n	80160b0 <__ieee754_pow+0x220>
 8016098:	f1b9 0f00 	cmp.w	r9, #0
 801609c:	da0b      	bge.n	80160b6 <__ieee754_pow+0x226>
 801609e:	2000      	movs	r0, #0
 80160a0:	b011      	add	sp, #68	@ 0x44
 80160a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160a6:	f000 bcf3 	b.w	8016a90 <__math_oflow>
 80160aa:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8016110 <__ieee754_pow+0x280>
 80160ae:	e7e7      	b.n	8016080 <__ieee754_pow+0x1f0>
 80160b0:	f1b9 0f00 	cmp.w	r9, #0
 80160b4:	dcf3      	bgt.n	801609e <__ieee754_pow+0x20e>
 80160b6:	2000      	movs	r0, #0
 80160b8:	b011      	add	sp, #68	@ 0x44
 80160ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160be:	f000 bcdf 	b.w	8016a80 <__math_uflow>
 80160c2:	4598      	cmp	r8, r3
 80160c4:	d20c      	bcs.n	80160e0 <__ieee754_pow+0x250>
 80160c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80160ca:	2200      	movs	r2, #0
 80160cc:	2300      	movs	r3, #0
 80160ce:	f7ea fd2d 	bl	8000b2c <__aeabi_dcmplt>
 80160d2:	3800      	subs	r0, #0
 80160d4:	bf18      	it	ne
 80160d6:	2001      	movne	r0, #1
 80160d8:	f1b9 0f00 	cmp.w	r9, #0
 80160dc:	daec      	bge.n	80160b8 <__ieee754_pow+0x228>
 80160de:	e7df      	b.n	80160a0 <__ieee754_pow+0x210>
 80160e0:	4b10      	ldr	r3, [pc, #64]	@ (8016124 <__ieee754_pow+0x294>)
 80160e2:	4598      	cmp	r8, r3
 80160e4:	f04f 0200 	mov.w	r2, #0
 80160e8:	d924      	bls.n	8016134 <__ieee754_pow+0x2a4>
 80160ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80160ee:	2300      	movs	r3, #0
 80160f0:	f7ea fd1c 	bl	8000b2c <__aeabi_dcmplt>
 80160f4:	3800      	subs	r0, #0
 80160f6:	bf18      	it	ne
 80160f8:	2001      	movne	r0, #1
 80160fa:	f1b9 0f00 	cmp.w	r9, #0
 80160fe:	dccf      	bgt.n	80160a0 <__ieee754_pow+0x210>
 8016100:	e7da      	b.n	80160b8 <__ieee754_pow+0x228>
 8016102:	bf00      	nop
 8016104:	f3af 8000 	nop.w
 8016108:	00000000 	.word	0x00000000
 801610c:	3ff00000 	.word	0x3ff00000
 8016110:	00000000 	.word	0x00000000
 8016114:	bff00000 	.word	0xbff00000
 8016118:	fff00000 	.word	0xfff00000
 801611c:	7ff00000 	.word	0x7ff00000
 8016120:	433fffff 	.word	0x433fffff
 8016124:	3ff00000 	.word	0x3ff00000
 8016128:	3fefffff 	.word	0x3fefffff
 801612c:	3fe00000 	.word	0x3fe00000
 8016130:	43f00000 	.word	0x43f00000
 8016134:	4b5a      	ldr	r3, [pc, #360]	@ (80162a0 <__ieee754_pow+0x410>)
 8016136:	f7ea f8cf 	bl	80002d8 <__aeabi_dsub>
 801613a:	a351      	add	r3, pc, #324	@ (adr r3, 8016280 <__ieee754_pow+0x3f0>)
 801613c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016140:	4604      	mov	r4, r0
 8016142:	460d      	mov	r5, r1
 8016144:	f7ea fa80 	bl	8000648 <__aeabi_dmul>
 8016148:	a34f      	add	r3, pc, #316	@ (adr r3, 8016288 <__ieee754_pow+0x3f8>)
 801614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801614e:	4606      	mov	r6, r0
 8016150:	460f      	mov	r7, r1
 8016152:	4620      	mov	r0, r4
 8016154:	4629      	mov	r1, r5
 8016156:	f7ea fa77 	bl	8000648 <__aeabi_dmul>
 801615a:	4b52      	ldr	r3, [pc, #328]	@ (80162a4 <__ieee754_pow+0x414>)
 801615c:	4682      	mov	sl, r0
 801615e:	468b      	mov	fp, r1
 8016160:	2200      	movs	r2, #0
 8016162:	4620      	mov	r0, r4
 8016164:	4629      	mov	r1, r5
 8016166:	f7ea fa6f 	bl	8000648 <__aeabi_dmul>
 801616a:	4602      	mov	r2, r0
 801616c:	460b      	mov	r3, r1
 801616e:	a148      	add	r1, pc, #288	@ (adr r1, 8016290 <__ieee754_pow+0x400>)
 8016170:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016174:	f7ea f8b0 	bl	80002d8 <__aeabi_dsub>
 8016178:	4622      	mov	r2, r4
 801617a:	462b      	mov	r3, r5
 801617c:	f7ea fa64 	bl	8000648 <__aeabi_dmul>
 8016180:	4602      	mov	r2, r0
 8016182:	460b      	mov	r3, r1
 8016184:	2000      	movs	r0, #0
 8016186:	4948      	ldr	r1, [pc, #288]	@ (80162a8 <__ieee754_pow+0x418>)
 8016188:	f7ea f8a6 	bl	80002d8 <__aeabi_dsub>
 801618c:	4622      	mov	r2, r4
 801618e:	4680      	mov	r8, r0
 8016190:	4689      	mov	r9, r1
 8016192:	462b      	mov	r3, r5
 8016194:	4620      	mov	r0, r4
 8016196:	4629      	mov	r1, r5
 8016198:	f7ea fa56 	bl	8000648 <__aeabi_dmul>
 801619c:	4602      	mov	r2, r0
 801619e:	460b      	mov	r3, r1
 80161a0:	4640      	mov	r0, r8
 80161a2:	4649      	mov	r1, r9
 80161a4:	f7ea fa50 	bl	8000648 <__aeabi_dmul>
 80161a8:	a33b      	add	r3, pc, #236	@ (adr r3, 8016298 <__ieee754_pow+0x408>)
 80161aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ae:	f7ea fa4b 	bl	8000648 <__aeabi_dmul>
 80161b2:	4602      	mov	r2, r0
 80161b4:	460b      	mov	r3, r1
 80161b6:	4650      	mov	r0, sl
 80161b8:	4659      	mov	r1, fp
 80161ba:	f7ea f88d 	bl	80002d8 <__aeabi_dsub>
 80161be:	4602      	mov	r2, r0
 80161c0:	460b      	mov	r3, r1
 80161c2:	4680      	mov	r8, r0
 80161c4:	4689      	mov	r9, r1
 80161c6:	4630      	mov	r0, r6
 80161c8:	4639      	mov	r1, r7
 80161ca:	f7ea f887 	bl	80002dc <__adddf3>
 80161ce:	2400      	movs	r4, #0
 80161d0:	4632      	mov	r2, r6
 80161d2:	463b      	mov	r3, r7
 80161d4:	4620      	mov	r0, r4
 80161d6:	460d      	mov	r5, r1
 80161d8:	f7ea f87e 	bl	80002d8 <__aeabi_dsub>
 80161dc:	4602      	mov	r2, r0
 80161de:	460b      	mov	r3, r1
 80161e0:	4640      	mov	r0, r8
 80161e2:	4649      	mov	r1, r9
 80161e4:	f7ea f878 	bl	80002d8 <__aeabi_dsub>
 80161e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80161ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80161f0:	2300      	movs	r3, #0
 80161f2:	9304      	str	r3, [sp, #16]
 80161f4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80161f8:	4606      	mov	r6, r0
 80161fa:	460f      	mov	r7, r1
 80161fc:	4652      	mov	r2, sl
 80161fe:	465b      	mov	r3, fp
 8016200:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016204:	f7ea f868 	bl	80002d8 <__aeabi_dsub>
 8016208:	4622      	mov	r2, r4
 801620a:	462b      	mov	r3, r5
 801620c:	f7ea fa1c 	bl	8000648 <__aeabi_dmul>
 8016210:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016214:	4680      	mov	r8, r0
 8016216:	4689      	mov	r9, r1
 8016218:	4630      	mov	r0, r6
 801621a:	4639      	mov	r1, r7
 801621c:	f7ea fa14 	bl	8000648 <__aeabi_dmul>
 8016220:	4602      	mov	r2, r0
 8016222:	460b      	mov	r3, r1
 8016224:	4640      	mov	r0, r8
 8016226:	4649      	mov	r1, r9
 8016228:	f7ea f858 	bl	80002dc <__adddf3>
 801622c:	4652      	mov	r2, sl
 801622e:	465b      	mov	r3, fp
 8016230:	4606      	mov	r6, r0
 8016232:	460f      	mov	r7, r1
 8016234:	4620      	mov	r0, r4
 8016236:	4629      	mov	r1, r5
 8016238:	f7ea fa06 	bl	8000648 <__aeabi_dmul>
 801623c:	460b      	mov	r3, r1
 801623e:	4602      	mov	r2, r0
 8016240:	4680      	mov	r8, r0
 8016242:	4689      	mov	r9, r1
 8016244:	4630      	mov	r0, r6
 8016246:	4639      	mov	r1, r7
 8016248:	f7ea f848 	bl	80002dc <__adddf3>
 801624c:	4b17      	ldr	r3, [pc, #92]	@ (80162ac <__ieee754_pow+0x41c>)
 801624e:	4299      	cmp	r1, r3
 8016250:	4604      	mov	r4, r0
 8016252:	460d      	mov	r5, r1
 8016254:	468a      	mov	sl, r1
 8016256:	468b      	mov	fp, r1
 8016258:	f340 82ef 	ble.w	801683a <__ieee754_pow+0x9aa>
 801625c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8016260:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8016264:	4303      	orrs	r3, r0
 8016266:	f000 81e8 	beq.w	801663a <__ieee754_pow+0x7aa>
 801626a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801626e:	2200      	movs	r2, #0
 8016270:	2300      	movs	r3, #0
 8016272:	f7ea fc5b 	bl	8000b2c <__aeabi_dcmplt>
 8016276:	3800      	subs	r0, #0
 8016278:	bf18      	it	ne
 801627a:	2001      	movne	r0, #1
 801627c:	e710      	b.n	80160a0 <__ieee754_pow+0x210>
 801627e:	bf00      	nop
 8016280:	60000000 	.word	0x60000000
 8016284:	3ff71547 	.word	0x3ff71547
 8016288:	f85ddf44 	.word	0xf85ddf44
 801628c:	3e54ae0b 	.word	0x3e54ae0b
 8016290:	55555555 	.word	0x55555555
 8016294:	3fd55555 	.word	0x3fd55555
 8016298:	652b82fe 	.word	0x652b82fe
 801629c:	3ff71547 	.word	0x3ff71547
 80162a0:	3ff00000 	.word	0x3ff00000
 80162a4:	3fd00000 	.word	0x3fd00000
 80162a8:	3fe00000 	.word	0x3fe00000
 80162ac:	408fffff 	.word	0x408fffff
 80162b0:	4bd5      	ldr	r3, [pc, #852]	@ (8016608 <__ieee754_pow+0x778>)
 80162b2:	402b      	ands	r3, r5
 80162b4:	2200      	movs	r2, #0
 80162b6:	b92b      	cbnz	r3, 80162c4 <__ieee754_pow+0x434>
 80162b8:	4bd4      	ldr	r3, [pc, #848]	@ (801660c <__ieee754_pow+0x77c>)
 80162ba:	f7ea f9c5 	bl	8000648 <__aeabi_dmul>
 80162be:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80162c2:	468b      	mov	fp, r1
 80162c4:	ea4f 532b 	mov.w	r3, fp, asr #20
 80162c8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80162cc:	4413      	add	r3, r2
 80162ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80162d0:	4bcf      	ldr	r3, [pc, #828]	@ (8016610 <__ieee754_pow+0x780>)
 80162d2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80162d6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80162da:	459b      	cmp	fp, r3
 80162dc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80162e0:	dd08      	ble.n	80162f4 <__ieee754_pow+0x464>
 80162e2:	4bcc      	ldr	r3, [pc, #816]	@ (8016614 <__ieee754_pow+0x784>)
 80162e4:	459b      	cmp	fp, r3
 80162e6:	f340 81a5 	ble.w	8016634 <__ieee754_pow+0x7a4>
 80162ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80162ec:	3301      	adds	r3, #1
 80162ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80162f0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80162f4:	f04f 0a00 	mov.w	sl, #0
 80162f8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80162fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80162fe:	4bc6      	ldr	r3, [pc, #792]	@ (8016618 <__ieee754_pow+0x788>)
 8016300:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016304:	ed93 7b00 	vldr	d7, [r3]
 8016308:	4629      	mov	r1, r5
 801630a:	ec53 2b17 	vmov	r2, r3, d7
 801630e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016312:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016316:	f7e9 ffdf 	bl	80002d8 <__aeabi_dsub>
 801631a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801631e:	4606      	mov	r6, r0
 8016320:	460f      	mov	r7, r1
 8016322:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016326:	f7e9 ffd9 	bl	80002dc <__adddf3>
 801632a:	4602      	mov	r2, r0
 801632c:	460b      	mov	r3, r1
 801632e:	2000      	movs	r0, #0
 8016330:	49ba      	ldr	r1, [pc, #744]	@ (801661c <__ieee754_pow+0x78c>)
 8016332:	f7ea fab3 	bl	800089c <__aeabi_ddiv>
 8016336:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801633a:	4602      	mov	r2, r0
 801633c:	460b      	mov	r3, r1
 801633e:	4630      	mov	r0, r6
 8016340:	4639      	mov	r1, r7
 8016342:	f7ea f981 	bl	8000648 <__aeabi_dmul>
 8016346:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801634a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801634e:	106d      	asrs	r5, r5, #1
 8016350:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8016354:	f04f 0b00 	mov.w	fp, #0
 8016358:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801635c:	4661      	mov	r1, ip
 801635e:	2200      	movs	r2, #0
 8016360:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8016364:	4658      	mov	r0, fp
 8016366:	46e1      	mov	r9, ip
 8016368:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801636c:	4614      	mov	r4, r2
 801636e:	461d      	mov	r5, r3
 8016370:	f7ea f96a 	bl	8000648 <__aeabi_dmul>
 8016374:	4602      	mov	r2, r0
 8016376:	460b      	mov	r3, r1
 8016378:	4630      	mov	r0, r6
 801637a:	4639      	mov	r1, r7
 801637c:	f7e9 ffac 	bl	80002d8 <__aeabi_dsub>
 8016380:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016384:	4606      	mov	r6, r0
 8016386:	460f      	mov	r7, r1
 8016388:	4620      	mov	r0, r4
 801638a:	4629      	mov	r1, r5
 801638c:	f7e9 ffa4 	bl	80002d8 <__aeabi_dsub>
 8016390:	4602      	mov	r2, r0
 8016392:	460b      	mov	r3, r1
 8016394:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016398:	f7e9 ff9e 	bl	80002d8 <__aeabi_dsub>
 801639c:	465a      	mov	r2, fp
 801639e:	464b      	mov	r3, r9
 80163a0:	f7ea f952 	bl	8000648 <__aeabi_dmul>
 80163a4:	4602      	mov	r2, r0
 80163a6:	460b      	mov	r3, r1
 80163a8:	4630      	mov	r0, r6
 80163aa:	4639      	mov	r1, r7
 80163ac:	f7e9 ff94 	bl	80002d8 <__aeabi_dsub>
 80163b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80163b4:	f7ea f948 	bl	8000648 <__aeabi_dmul>
 80163b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80163bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80163c0:	4610      	mov	r0, r2
 80163c2:	4619      	mov	r1, r3
 80163c4:	f7ea f940 	bl	8000648 <__aeabi_dmul>
 80163c8:	a37d      	add	r3, pc, #500	@ (adr r3, 80165c0 <__ieee754_pow+0x730>)
 80163ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163ce:	4604      	mov	r4, r0
 80163d0:	460d      	mov	r5, r1
 80163d2:	f7ea f939 	bl	8000648 <__aeabi_dmul>
 80163d6:	a37c      	add	r3, pc, #496	@ (adr r3, 80165c8 <__ieee754_pow+0x738>)
 80163d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163dc:	f7e9 ff7e 	bl	80002dc <__adddf3>
 80163e0:	4622      	mov	r2, r4
 80163e2:	462b      	mov	r3, r5
 80163e4:	f7ea f930 	bl	8000648 <__aeabi_dmul>
 80163e8:	a379      	add	r3, pc, #484	@ (adr r3, 80165d0 <__ieee754_pow+0x740>)
 80163ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163ee:	f7e9 ff75 	bl	80002dc <__adddf3>
 80163f2:	4622      	mov	r2, r4
 80163f4:	462b      	mov	r3, r5
 80163f6:	f7ea f927 	bl	8000648 <__aeabi_dmul>
 80163fa:	a377      	add	r3, pc, #476	@ (adr r3, 80165d8 <__ieee754_pow+0x748>)
 80163fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016400:	f7e9 ff6c 	bl	80002dc <__adddf3>
 8016404:	4622      	mov	r2, r4
 8016406:	462b      	mov	r3, r5
 8016408:	f7ea f91e 	bl	8000648 <__aeabi_dmul>
 801640c:	a374      	add	r3, pc, #464	@ (adr r3, 80165e0 <__ieee754_pow+0x750>)
 801640e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016412:	f7e9 ff63 	bl	80002dc <__adddf3>
 8016416:	4622      	mov	r2, r4
 8016418:	462b      	mov	r3, r5
 801641a:	f7ea f915 	bl	8000648 <__aeabi_dmul>
 801641e:	a372      	add	r3, pc, #456	@ (adr r3, 80165e8 <__ieee754_pow+0x758>)
 8016420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016424:	f7e9 ff5a 	bl	80002dc <__adddf3>
 8016428:	4622      	mov	r2, r4
 801642a:	4606      	mov	r6, r0
 801642c:	460f      	mov	r7, r1
 801642e:	462b      	mov	r3, r5
 8016430:	4620      	mov	r0, r4
 8016432:	4629      	mov	r1, r5
 8016434:	f7ea f908 	bl	8000648 <__aeabi_dmul>
 8016438:	4602      	mov	r2, r0
 801643a:	460b      	mov	r3, r1
 801643c:	4630      	mov	r0, r6
 801643e:	4639      	mov	r1, r7
 8016440:	f7ea f902 	bl	8000648 <__aeabi_dmul>
 8016444:	465a      	mov	r2, fp
 8016446:	4604      	mov	r4, r0
 8016448:	460d      	mov	r5, r1
 801644a:	464b      	mov	r3, r9
 801644c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016450:	f7e9 ff44 	bl	80002dc <__adddf3>
 8016454:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016458:	f7ea f8f6 	bl	8000648 <__aeabi_dmul>
 801645c:	4622      	mov	r2, r4
 801645e:	462b      	mov	r3, r5
 8016460:	f7e9 ff3c 	bl	80002dc <__adddf3>
 8016464:	465a      	mov	r2, fp
 8016466:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801646a:	464b      	mov	r3, r9
 801646c:	4658      	mov	r0, fp
 801646e:	4649      	mov	r1, r9
 8016470:	f7ea f8ea 	bl	8000648 <__aeabi_dmul>
 8016474:	4b6a      	ldr	r3, [pc, #424]	@ (8016620 <__ieee754_pow+0x790>)
 8016476:	2200      	movs	r2, #0
 8016478:	4606      	mov	r6, r0
 801647a:	460f      	mov	r7, r1
 801647c:	f7e9 ff2e 	bl	80002dc <__adddf3>
 8016480:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016484:	f7e9 ff2a 	bl	80002dc <__adddf3>
 8016488:	46d8      	mov	r8, fp
 801648a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801648e:	460d      	mov	r5, r1
 8016490:	465a      	mov	r2, fp
 8016492:	460b      	mov	r3, r1
 8016494:	4640      	mov	r0, r8
 8016496:	4649      	mov	r1, r9
 8016498:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801649c:	f7ea f8d4 	bl	8000648 <__aeabi_dmul>
 80164a0:	465c      	mov	r4, fp
 80164a2:	4680      	mov	r8, r0
 80164a4:	4689      	mov	r9, r1
 80164a6:	4b5e      	ldr	r3, [pc, #376]	@ (8016620 <__ieee754_pow+0x790>)
 80164a8:	2200      	movs	r2, #0
 80164aa:	4620      	mov	r0, r4
 80164ac:	4629      	mov	r1, r5
 80164ae:	f7e9 ff13 	bl	80002d8 <__aeabi_dsub>
 80164b2:	4632      	mov	r2, r6
 80164b4:	463b      	mov	r3, r7
 80164b6:	f7e9 ff0f 	bl	80002d8 <__aeabi_dsub>
 80164ba:	4602      	mov	r2, r0
 80164bc:	460b      	mov	r3, r1
 80164be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80164c2:	f7e9 ff09 	bl	80002d8 <__aeabi_dsub>
 80164c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80164ca:	f7ea f8bd 	bl	8000648 <__aeabi_dmul>
 80164ce:	4622      	mov	r2, r4
 80164d0:	4606      	mov	r6, r0
 80164d2:	460f      	mov	r7, r1
 80164d4:	462b      	mov	r3, r5
 80164d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80164da:	f7ea f8b5 	bl	8000648 <__aeabi_dmul>
 80164de:	4602      	mov	r2, r0
 80164e0:	460b      	mov	r3, r1
 80164e2:	4630      	mov	r0, r6
 80164e4:	4639      	mov	r1, r7
 80164e6:	f7e9 fef9 	bl	80002dc <__adddf3>
 80164ea:	4606      	mov	r6, r0
 80164ec:	460f      	mov	r7, r1
 80164ee:	4602      	mov	r2, r0
 80164f0:	460b      	mov	r3, r1
 80164f2:	4640      	mov	r0, r8
 80164f4:	4649      	mov	r1, r9
 80164f6:	f7e9 fef1 	bl	80002dc <__adddf3>
 80164fa:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80164fe:	a33c      	add	r3, pc, #240	@ (adr r3, 80165f0 <__ieee754_pow+0x760>)
 8016500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016504:	4658      	mov	r0, fp
 8016506:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801650a:	460d      	mov	r5, r1
 801650c:	f7ea f89c 	bl	8000648 <__aeabi_dmul>
 8016510:	465c      	mov	r4, fp
 8016512:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016516:	4642      	mov	r2, r8
 8016518:	464b      	mov	r3, r9
 801651a:	4620      	mov	r0, r4
 801651c:	4629      	mov	r1, r5
 801651e:	f7e9 fedb 	bl	80002d8 <__aeabi_dsub>
 8016522:	4602      	mov	r2, r0
 8016524:	460b      	mov	r3, r1
 8016526:	4630      	mov	r0, r6
 8016528:	4639      	mov	r1, r7
 801652a:	f7e9 fed5 	bl	80002d8 <__aeabi_dsub>
 801652e:	a332      	add	r3, pc, #200	@ (adr r3, 80165f8 <__ieee754_pow+0x768>)
 8016530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016534:	f7ea f888 	bl	8000648 <__aeabi_dmul>
 8016538:	a331      	add	r3, pc, #196	@ (adr r3, 8016600 <__ieee754_pow+0x770>)
 801653a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801653e:	4606      	mov	r6, r0
 8016540:	460f      	mov	r7, r1
 8016542:	4620      	mov	r0, r4
 8016544:	4629      	mov	r1, r5
 8016546:	f7ea f87f 	bl	8000648 <__aeabi_dmul>
 801654a:	4602      	mov	r2, r0
 801654c:	460b      	mov	r3, r1
 801654e:	4630      	mov	r0, r6
 8016550:	4639      	mov	r1, r7
 8016552:	f7e9 fec3 	bl	80002dc <__adddf3>
 8016556:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016558:	4b32      	ldr	r3, [pc, #200]	@ (8016624 <__ieee754_pow+0x794>)
 801655a:	4413      	add	r3, r2
 801655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016560:	f7e9 febc 	bl	80002dc <__adddf3>
 8016564:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016568:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801656a:	f7ea f803 	bl	8000574 <__aeabi_i2d>
 801656e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016570:	4b2d      	ldr	r3, [pc, #180]	@ (8016628 <__ieee754_pow+0x798>)
 8016572:	4413      	add	r3, r2
 8016574:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016578:	4606      	mov	r6, r0
 801657a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801657e:	460f      	mov	r7, r1
 8016580:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016584:	f7e9 feaa 	bl	80002dc <__adddf3>
 8016588:	4642      	mov	r2, r8
 801658a:	464b      	mov	r3, r9
 801658c:	f7e9 fea6 	bl	80002dc <__adddf3>
 8016590:	4632      	mov	r2, r6
 8016592:	463b      	mov	r3, r7
 8016594:	f7e9 fea2 	bl	80002dc <__adddf3>
 8016598:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801659c:	4632      	mov	r2, r6
 801659e:	463b      	mov	r3, r7
 80165a0:	4658      	mov	r0, fp
 80165a2:	460d      	mov	r5, r1
 80165a4:	f7e9 fe98 	bl	80002d8 <__aeabi_dsub>
 80165a8:	4642      	mov	r2, r8
 80165aa:	464b      	mov	r3, r9
 80165ac:	f7e9 fe94 	bl	80002d8 <__aeabi_dsub>
 80165b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80165b4:	f7e9 fe90 	bl	80002d8 <__aeabi_dsub>
 80165b8:	465c      	mov	r4, fp
 80165ba:	4602      	mov	r2, r0
 80165bc:	e036      	b.n	801662c <__ieee754_pow+0x79c>
 80165be:	bf00      	nop
 80165c0:	4a454eef 	.word	0x4a454eef
 80165c4:	3fca7e28 	.word	0x3fca7e28
 80165c8:	93c9db65 	.word	0x93c9db65
 80165cc:	3fcd864a 	.word	0x3fcd864a
 80165d0:	a91d4101 	.word	0xa91d4101
 80165d4:	3fd17460 	.word	0x3fd17460
 80165d8:	518f264d 	.word	0x518f264d
 80165dc:	3fd55555 	.word	0x3fd55555
 80165e0:	db6fabff 	.word	0xdb6fabff
 80165e4:	3fdb6db6 	.word	0x3fdb6db6
 80165e8:	33333303 	.word	0x33333303
 80165ec:	3fe33333 	.word	0x3fe33333
 80165f0:	e0000000 	.word	0xe0000000
 80165f4:	3feec709 	.word	0x3feec709
 80165f8:	dc3a03fd 	.word	0xdc3a03fd
 80165fc:	3feec709 	.word	0x3feec709
 8016600:	145b01f5 	.word	0x145b01f5
 8016604:	be3e2fe0 	.word	0xbe3e2fe0
 8016608:	7ff00000 	.word	0x7ff00000
 801660c:	43400000 	.word	0x43400000
 8016610:	0003988e 	.word	0x0003988e
 8016614:	000bb679 	.word	0x000bb679
 8016618:	08017490 	.word	0x08017490
 801661c:	3ff00000 	.word	0x3ff00000
 8016620:	40080000 	.word	0x40080000
 8016624:	08017470 	.word	0x08017470
 8016628:	08017480 	.word	0x08017480
 801662c:	460b      	mov	r3, r1
 801662e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016632:	e5d7      	b.n	80161e4 <__ieee754_pow+0x354>
 8016634:	f04f 0a01 	mov.w	sl, #1
 8016638:	e65e      	b.n	80162f8 <__ieee754_pow+0x468>
 801663a:	a3b4      	add	r3, pc, #720	@ (adr r3, 801690c <__ieee754_pow+0xa7c>)
 801663c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016640:	4630      	mov	r0, r6
 8016642:	4639      	mov	r1, r7
 8016644:	f7e9 fe4a 	bl	80002dc <__adddf3>
 8016648:	4642      	mov	r2, r8
 801664a:	e9cd 0100 	strd	r0, r1, [sp]
 801664e:	464b      	mov	r3, r9
 8016650:	4620      	mov	r0, r4
 8016652:	4629      	mov	r1, r5
 8016654:	f7e9 fe40 	bl	80002d8 <__aeabi_dsub>
 8016658:	4602      	mov	r2, r0
 801665a:	460b      	mov	r3, r1
 801665c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016660:	f7ea fa82 	bl	8000b68 <__aeabi_dcmpgt>
 8016664:	2800      	cmp	r0, #0
 8016666:	f47f ae00 	bne.w	801626a <__ieee754_pow+0x3da>
 801666a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801666e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8016672:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8016676:	fa43 fa0a 	asr.w	sl, r3, sl
 801667a:	44da      	add	sl, fp
 801667c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8016680:	489d      	ldr	r0, [pc, #628]	@ (80168f8 <__ieee754_pow+0xa68>)
 8016682:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8016686:	4108      	asrs	r0, r1
 8016688:	ea00 030a 	and.w	r3, r0, sl
 801668c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8016690:	f1c1 0114 	rsb	r1, r1, #20
 8016694:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8016698:	fa4a fa01 	asr.w	sl, sl, r1
 801669c:	f1bb 0f00 	cmp.w	fp, #0
 80166a0:	4640      	mov	r0, r8
 80166a2:	4649      	mov	r1, r9
 80166a4:	f04f 0200 	mov.w	r2, #0
 80166a8:	bfb8      	it	lt
 80166aa:	f1ca 0a00 	rsblt	sl, sl, #0
 80166ae:	f7e9 fe13 	bl	80002d8 <__aeabi_dsub>
 80166b2:	4680      	mov	r8, r0
 80166b4:	4689      	mov	r9, r1
 80166b6:	4632      	mov	r2, r6
 80166b8:	463b      	mov	r3, r7
 80166ba:	4640      	mov	r0, r8
 80166bc:	4649      	mov	r1, r9
 80166be:	f7e9 fe0d 	bl	80002dc <__adddf3>
 80166c2:	2400      	movs	r4, #0
 80166c4:	a37c      	add	r3, pc, #496	@ (adr r3, 80168b8 <__ieee754_pow+0xa28>)
 80166c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ca:	4620      	mov	r0, r4
 80166cc:	460d      	mov	r5, r1
 80166ce:	f7e9 ffbb 	bl	8000648 <__aeabi_dmul>
 80166d2:	4642      	mov	r2, r8
 80166d4:	e9cd 0100 	strd	r0, r1, [sp]
 80166d8:	464b      	mov	r3, r9
 80166da:	4620      	mov	r0, r4
 80166dc:	4629      	mov	r1, r5
 80166de:	f7e9 fdfb 	bl	80002d8 <__aeabi_dsub>
 80166e2:	4602      	mov	r2, r0
 80166e4:	460b      	mov	r3, r1
 80166e6:	4630      	mov	r0, r6
 80166e8:	4639      	mov	r1, r7
 80166ea:	f7e9 fdf5 	bl	80002d8 <__aeabi_dsub>
 80166ee:	a374      	add	r3, pc, #464	@ (adr r3, 80168c0 <__ieee754_pow+0xa30>)
 80166f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166f4:	f7e9 ffa8 	bl	8000648 <__aeabi_dmul>
 80166f8:	a373      	add	r3, pc, #460	@ (adr r3, 80168c8 <__ieee754_pow+0xa38>)
 80166fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166fe:	4680      	mov	r8, r0
 8016700:	4689      	mov	r9, r1
 8016702:	4620      	mov	r0, r4
 8016704:	4629      	mov	r1, r5
 8016706:	f7e9 ff9f 	bl	8000648 <__aeabi_dmul>
 801670a:	4602      	mov	r2, r0
 801670c:	460b      	mov	r3, r1
 801670e:	4640      	mov	r0, r8
 8016710:	4649      	mov	r1, r9
 8016712:	f7e9 fde3 	bl	80002dc <__adddf3>
 8016716:	4604      	mov	r4, r0
 8016718:	460d      	mov	r5, r1
 801671a:	4602      	mov	r2, r0
 801671c:	460b      	mov	r3, r1
 801671e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016722:	f7e9 fddb 	bl	80002dc <__adddf3>
 8016726:	e9dd 2300 	ldrd	r2, r3, [sp]
 801672a:	4680      	mov	r8, r0
 801672c:	4689      	mov	r9, r1
 801672e:	f7e9 fdd3 	bl	80002d8 <__aeabi_dsub>
 8016732:	4602      	mov	r2, r0
 8016734:	460b      	mov	r3, r1
 8016736:	4620      	mov	r0, r4
 8016738:	4629      	mov	r1, r5
 801673a:	f7e9 fdcd 	bl	80002d8 <__aeabi_dsub>
 801673e:	4642      	mov	r2, r8
 8016740:	4606      	mov	r6, r0
 8016742:	460f      	mov	r7, r1
 8016744:	464b      	mov	r3, r9
 8016746:	4640      	mov	r0, r8
 8016748:	4649      	mov	r1, r9
 801674a:	f7e9 ff7d 	bl	8000648 <__aeabi_dmul>
 801674e:	a360      	add	r3, pc, #384	@ (adr r3, 80168d0 <__ieee754_pow+0xa40>)
 8016750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016754:	4604      	mov	r4, r0
 8016756:	460d      	mov	r5, r1
 8016758:	f7e9 ff76 	bl	8000648 <__aeabi_dmul>
 801675c:	a35e      	add	r3, pc, #376	@ (adr r3, 80168d8 <__ieee754_pow+0xa48>)
 801675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016762:	f7e9 fdb9 	bl	80002d8 <__aeabi_dsub>
 8016766:	4622      	mov	r2, r4
 8016768:	462b      	mov	r3, r5
 801676a:	f7e9 ff6d 	bl	8000648 <__aeabi_dmul>
 801676e:	a35c      	add	r3, pc, #368	@ (adr r3, 80168e0 <__ieee754_pow+0xa50>)
 8016770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016774:	f7e9 fdb2 	bl	80002dc <__adddf3>
 8016778:	4622      	mov	r2, r4
 801677a:	462b      	mov	r3, r5
 801677c:	f7e9 ff64 	bl	8000648 <__aeabi_dmul>
 8016780:	a359      	add	r3, pc, #356	@ (adr r3, 80168e8 <__ieee754_pow+0xa58>)
 8016782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016786:	f7e9 fda7 	bl	80002d8 <__aeabi_dsub>
 801678a:	4622      	mov	r2, r4
 801678c:	462b      	mov	r3, r5
 801678e:	f7e9 ff5b 	bl	8000648 <__aeabi_dmul>
 8016792:	a357      	add	r3, pc, #348	@ (adr r3, 80168f0 <__ieee754_pow+0xa60>)
 8016794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016798:	f7e9 fda0 	bl	80002dc <__adddf3>
 801679c:	4622      	mov	r2, r4
 801679e:	462b      	mov	r3, r5
 80167a0:	f7e9 ff52 	bl	8000648 <__aeabi_dmul>
 80167a4:	4602      	mov	r2, r0
 80167a6:	460b      	mov	r3, r1
 80167a8:	4640      	mov	r0, r8
 80167aa:	4649      	mov	r1, r9
 80167ac:	f7e9 fd94 	bl	80002d8 <__aeabi_dsub>
 80167b0:	4604      	mov	r4, r0
 80167b2:	460d      	mov	r5, r1
 80167b4:	4602      	mov	r2, r0
 80167b6:	460b      	mov	r3, r1
 80167b8:	4640      	mov	r0, r8
 80167ba:	4649      	mov	r1, r9
 80167bc:	f7e9 ff44 	bl	8000648 <__aeabi_dmul>
 80167c0:	2200      	movs	r2, #0
 80167c2:	e9cd 0100 	strd	r0, r1, [sp]
 80167c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80167ca:	4620      	mov	r0, r4
 80167cc:	4629      	mov	r1, r5
 80167ce:	f7e9 fd83 	bl	80002d8 <__aeabi_dsub>
 80167d2:	4602      	mov	r2, r0
 80167d4:	460b      	mov	r3, r1
 80167d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80167da:	f7ea f85f 	bl	800089c <__aeabi_ddiv>
 80167de:	4632      	mov	r2, r6
 80167e0:	4604      	mov	r4, r0
 80167e2:	460d      	mov	r5, r1
 80167e4:	463b      	mov	r3, r7
 80167e6:	4640      	mov	r0, r8
 80167e8:	4649      	mov	r1, r9
 80167ea:	f7e9 ff2d 	bl	8000648 <__aeabi_dmul>
 80167ee:	4632      	mov	r2, r6
 80167f0:	463b      	mov	r3, r7
 80167f2:	f7e9 fd73 	bl	80002dc <__adddf3>
 80167f6:	4602      	mov	r2, r0
 80167f8:	460b      	mov	r3, r1
 80167fa:	4620      	mov	r0, r4
 80167fc:	4629      	mov	r1, r5
 80167fe:	f7e9 fd6b 	bl	80002d8 <__aeabi_dsub>
 8016802:	4642      	mov	r2, r8
 8016804:	464b      	mov	r3, r9
 8016806:	f7e9 fd67 	bl	80002d8 <__aeabi_dsub>
 801680a:	460b      	mov	r3, r1
 801680c:	4602      	mov	r2, r0
 801680e:	493b      	ldr	r1, [pc, #236]	@ (80168fc <__ieee754_pow+0xa6c>)
 8016810:	2000      	movs	r0, #0
 8016812:	f7e9 fd61 	bl	80002d8 <__aeabi_dsub>
 8016816:	ec41 0b10 	vmov	d0, r0, r1
 801681a:	ee10 3a90 	vmov	r3, s1
 801681e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8016822:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016826:	da30      	bge.n	801688a <__ieee754_pow+0x9fa>
 8016828:	4650      	mov	r0, sl
 801682a:	f000 f87d 	bl	8016928 <scalbn>
 801682e:	ec51 0b10 	vmov	r0, r1, d0
 8016832:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016836:	f7ff bbd2 	b.w	8015fde <__ieee754_pow+0x14e>
 801683a:	4c31      	ldr	r4, [pc, #196]	@ (8016900 <__ieee754_pow+0xa70>)
 801683c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8016840:	42a3      	cmp	r3, r4
 8016842:	d91a      	bls.n	801687a <__ieee754_pow+0x9ea>
 8016844:	4b2f      	ldr	r3, [pc, #188]	@ (8016904 <__ieee754_pow+0xa74>)
 8016846:	440b      	add	r3, r1
 8016848:	4303      	orrs	r3, r0
 801684a:	d009      	beq.n	8016860 <__ieee754_pow+0x9d0>
 801684c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016850:	2200      	movs	r2, #0
 8016852:	2300      	movs	r3, #0
 8016854:	f7ea f96a 	bl	8000b2c <__aeabi_dcmplt>
 8016858:	3800      	subs	r0, #0
 801685a:	bf18      	it	ne
 801685c:	2001      	movne	r0, #1
 801685e:	e42b      	b.n	80160b8 <__ieee754_pow+0x228>
 8016860:	4642      	mov	r2, r8
 8016862:	464b      	mov	r3, r9
 8016864:	f7e9 fd38 	bl	80002d8 <__aeabi_dsub>
 8016868:	4632      	mov	r2, r6
 801686a:	463b      	mov	r3, r7
 801686c:	f7ea f972 	bl	8000b54 <__aeabi_dcmpge>
 8016870:	2800      	cmp	r0, #0
 8016872:	d1eb      	bne.n	801684c <__ieee754_pow+0x9bc>
 8016874:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8016914 <__ieee754_pow+0xa84>
 8016878:	e6f7      	b.n	801666a <__ieee754_pow+0x7da>
 801687a:	469a      	mov	sl, r3
 801687c:	4b22      	ldr	r3, [pc, #136]	@ (8016908 <__ieee754_pow+0xa78>)
 801687e:	459a      	cmp	sl, r3
 8016880:	f63f aef3 	bhi.w	801666a <__ieee754_pow+0x7da>
 8016884:	f8dd a010 	ldr.w	sl, [sp, #16]
 8016888:	e715      	b.n	80166b6 <__ieee754_pow+0x826>
 801688a:	ec51 0b10 	vmov	r0, r1, d0
 801688e:	4619      	mov	r1, r3
 8016890:	e7cf      	b.n	8016832 <__ieee754_pow+0x9a2>
 8016892:	491a      	ldr	r1, [pc, #104]	@ (80168fc <__ieee754_pow+0xa6c>)
 8016894:	2000      	movs	r0, #0
 8016896:	f7ff bb18 	b.w	8015eca <__ieee754_pow+0x3a>
 801689a:	2000      	movs	r0, #0
 801689c:	2100      	movs	r1, #0
 801689e:	f7ff bb14 	b.w	8015eca <__ieee754_pow+0x3a>
 80168a2:	4630      	mov	r0, r6
 80168a4:	4639      	mov	r1, r7
 80168a6:	f7ff bb10 	b.w	8015eca <__ieee754_pow+0x3a>
 80168aa:	460c      	mov	r4, r1
 80168ac:	f7ff bb5e 	b.w	8015f6c <__ieee754_pow+0xdc>
 80168b0:	2400      	movs	r4, #0
 80168b2:	f7ff bb49 	b.w	8015f48 <__ieee754_pow+0xb8>
 80168b6:	bf00      	nop
 80168b8:	00000000 	.word	0x00000000
 80168bc:	3fe62e43 	.word	0x3fe62e43
 80168c0:	fefa39ef 	.word	0xfefa39ef
 80168c4:	3fe62e42 	.word	0x3fe62e42
 80168c8:	0ca86c39 	.word	0x0ca86c39
 80168cc:	be205c61 	.word	0xbe205c61
 80168d0:	72bea4d0 	.word	0x72bea4d0
 80168d4:	3e663769 	.word	0x3e663769
 80168d8:	c5d26bf1 	.word	0xc5d26bf1
 80168dc:	3ebbbd41 	.word	0x3ebbbd41
 80168e0:	af25de2c 	.word	0xaf25de2c
 80168e4:	3f11566a 	.word	0x3f11566a
 80168e8:	16bebd93 	.word	0x16bebd93
 80168ec:	3f66c16c 	.word	0x3f66c16c
 80168f0:	5555553e 	.word	0x5555553e
 80168f4:	3fc55555 	.word	0x3fc55555
 80168f8:	fff00000 	.word	0xfff00000
 80168fc:	3ff00000 	.word	0x3ff00000
 8016900:	4090cbff 	.word	0x4090cbff
 8016904:	3f6f3400 	.word	0x3f6f3400
 8016908:	3fe00000 	.word	0x3fe00000
 801690c:	652b82fe 	.word	0x652b82fe
 8016910:	3c971547 	.word	0x3c971547
 8016914:	4090cc00 	.word	0x4090cc00

08016918 <fabs>:
 8016918:	ec51 0b10 	vmov	r0, r1, d0
 801691c:	4602      	mov	r2, r0
 801691e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8016922:	ec43 2b10 	vmov	d0, r2, r3
 8016926:	4770      	bx	lr

08016928 <scalbn>:
 8016928:	b570      	push	{r4, r5, r6, lr}
 801692a:	ec55 4b10 	vmov	r4, r5, d0
 801692e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8016932:	4606      	mov	r6, r0
 8016934:	462b      	mov	r3, r5
 8016936:	b991      	cbnz	r1, 801695e <scalbn+0x36>
 8016938:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801693c:	4323      	orrs	r3, r4
 801693e:	d03d      	beq.n	80169bc <scalbn+0x94>
 8016940:	4b35      	ldr	r3, [pc, #212]	@ (8016a18 <scalbn+0xf0>)
 8016942:	4620      	mov	r0, r4
 8016944:	4629      	mov	r1, r5
 8016946:	2200      	movs	r2, #0
 8016948:	f7e9 fe7e 	bl	8000648 <__aeabi_dmul>
 801694c:	4b33      	ldr	r3, [pc, #204]	@ (8016a1c <scalbn+0xf4>)
 801694e:	429e      	cmp	r6, r3
 8016950:	4604      	mov	r4, r0
 8016952:	460d      	mov	r5, r1
 8016954:	da0f      	bge.n	8016976 <scalbn+0x4e>
 8016956:	a328      	add	r3, pc, #160	@ (adr r3, 80169f8 <scalbn+0xd0>)
 8016958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801695c:	e01e      	b.n	801699c <scalbn+0x74>
 801695e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8016962:	4291      	cmp	r1, r2
 8016964:	d10b      	bne.n	801697e <scalbn+0x56>
 8016966:	4622      	mov	r2, r4
 8016968:	4620      	mov	r0, r4
 801696a:	4629      	mov	r1, r5
 801696c:	f7e9 fcb6 	bl	80002dc <__adddf3>
 8016970:	4604      	mov	r4, r0
 8016972:	460d      	mov	r5, r1
 8016974:	e022      	b.n	80169bc <scalbn+0x94>
 8016976:	460b      	mov	r3, r1
 8016978:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801697c:	3936      	subs	r1, #54	@ 0x36
 801697e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8016982:	4296      	cmp	r6, r2
 8016984:	dd0d      	ble.n	80169a2 <scalbn+0x7a>
 8016986:	2d00      	cmp	r5, #0
 8016988:	a11d      	add	r1, pc, #116	@ (adr r1, 8016a00 <scalbn+0xd8>)
 801698a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801698e:	da02      	bge.n	8016996 <scalbn+0x6e>
 8016990:	a11d      	add	r1, pc, #116	@ (adr r1, 8016a08 <scalbn+0xe0>)
 8016992:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016996:	a31a      	add	r3, pc, #104	@ (adr r3, 8016a00 <scalbn+0xd8>)
 8016998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801699c:	f7e9 fe54 	bl	8000648 <__aeabi_dmul>
 80169a0:	e7e6      	b.n	8016970 <scalbn+0x48>
 80169a2:	1872      	adds	r2, r6, r1
 80169a4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80169a8:	428a      	cmp	r2, r1
 80169aa:	dcec      	bgt.n	8016986 <scalbn+0x5e>
 80169ac:	2a00      	cmp	r2, #0
 80169ae:	dd08      	ble.n	80169c2 <scalbn+0x9a>
 80169b0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80169b4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80169b8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80169bc:	ec45 4b10 	vmov	d0, r4, r5
 80169c0:	bd70      	pop	{r4, r5, r6, pc}
 80169c2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80169c6:	da08      	bge.n	80169da <scalbn+0xb2>
 80169c8:	2d00      	cmp	r5, #0
 80169ca:	a10b      	add	r1, pc, #44	@ (adr r1, 80169f8 <scalbn+0xd0>)
 80169cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80169d0:	dac1      	bge.n	8016956 <scalbn+0x2e>
 80169d2:	a10f      	add	r1, pc, #60	@ (adr r1, 8016a10 <scalbn+0xe8>)
 80169d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80169d8:	e7bd      	b.n	8016956 <scalbn+0x2e>
 80169da:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80169de:	3236      	adds	r2, #54	@ 0x36
 80169e0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80169e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80169e8:	4620      	mov	r0, r4
 80169ea:	4b0d      	ldr	r3, [pc, #52]	@ (8016a20 <scalbn+0xf8>)
 80169ec:	4629      	mov	r1, r5
 80169ee:	2200      	movs	r2, #0
 80169f0:	e7d4      	b.n	801699c <scalbn+0x74>
 80169f2:	bf00      	nop
 80169f4:	f3af 8000 	nop.w
 80169f8:	c2f8f359 	.word	0xc2f8f359
 80169fc:	01a56e1f 	.word	0x01a56e1f
 8016a00:	8800759c 	.word	0x8800759c
 8016a04:	7e37e43c 	.word	0x7e37e43c
 8016a08:	8800759c 	.word	0x8800759c
 8016a0c:	fe37e43c 	.word	0xfe37e43c
 8016a10:	c2f8f359 	.word	0xc2f8f359
 8016a14:	81a56e1f 	.word	0x81a56e1f
 8016a18:	43500000 	.word	0x43500000
 8016a1c:	ffff3cb0 	.word	0xffff3cb0
 8016a20:	3c900000 	.word	0x3c900000

08016a24 <with_errno>:
 8016a24:	b510      	push	{r4, lr}
 8016a26:	ed2d 8b02 	vpush	{d8}
 8016a2a:	eeb0 8a40 	vmov.f32	s16, s0
 8016a2e:	eef0 8a60 	vmov.f32	s17, s1
 8016a32:	4604      	mov	r4, r0
 8016a34:	f7fb fa1c 	bl	8011e70 <__errno>
 8016a38:	eeb0 0a48 	vmov.f32	s0, s16
 8016a3c:	eef0 0a68 	vmov.f32	s1, s17
 8016a40:	ecbd 8b02 	vpop	{d8}
 8016a44:	6004      	str	r4, [r0, #0]
 8016a46:	bd10      	pop	{r4, pc}

08016a48 <xflow>:
 8016a48:	4603      	mov	r3, r0
 8016a4a:	b507      	push	{r0, r1, r2, lr}
 8016a4c:	ec51 0b10 	vmov	r0, r1, d0
 8016a50:	b183      	cbz	r3, 8016a74 <xflow+0x2c>
 8016a52:	4602      	mov	r2, r0
 8016a54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016a58:	e9cd 2300 	strd	r2, r3, [sp]
 8016a5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016a60:	f7e9 fdf2 	bl	8000648 <__aeabi_dmul>
 8016a64:	ec41 0b10 	vmov	d0, r0, r1
 8016a68:	2022      	movs	r0, #34	@ 0x22
 8016a6a:	b003      	add	sp, #12
 8016a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016a70:	f7ff bfd8 	b.w	8016a24 <with_errno>
 8016a74:	4602      	mov	r2, r0
 8016a76:	460b      	mov	r3, r1
 8016a78:	e7ee      	b.n	8016a58 <xflow+0x10>
 8016a7a:	0000      	movs	r0, r0
 8016a7c:	0000      	movs	r0, r0
	...

08016a80 <__math_uflow>:
 8016a80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016a88 <__math_uflow+0x8>
 8016a84:	f7ff bfe0 	b.w	8016a48 <xflow>
 8016a88:	00000000 	.word	0x00000000
 8016a8c:	10000000 	.word	0x10000000

08016a90 <__math_oflow>:
 8016a90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016a98 <__math_oflow+0x8>
 8016a94:	f7ff bfd8 	b.w	8016a48 <xflow>
 8016a98:	00000000 	.word	0x00000000
 8016a9c:	70000000 	.word	0x70000000

08016aa0 <__ieee754_sqrt>:
 8016aa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aa4:	4a68      	ldr	r2, [pc, #416]	@ (8016c48 <__ieee754_sqrt+0x1a8>)
 8016aa6:	ec55 4b10 	vmov	r4, r5, d0
 8016aaa:	43aa      	bics	r2, r5
 8016aac:	462b      	mov	r3, r5
 8016aae:	4621      	mov	r1, r4
 8016ab0:	d110      	bne.n	8016ad4 <__ieee754_sqrt+0x34>
 8016ab2:	4622      	mov	r2, r4
 8016ab4:	4620      	mov	r0, r4
 8016ab6:	4629      	mov	r1, r5
 8016ab8:	f7e9 fdc6 	bl	8000648 <__aeabi_dmul>
 8016abc:	4602      	mov	r2, r0
 8016abe:	460b      	mov	r3, r1
 8016ac0:	4620      	mov	r0, r4
 8016ac2:	4629      	mov	r1, r5
 8016ac4:	f7e9 fc0a 	bl	80002dc <__adddf3>
 8016ac8:	4604      	mov	r4, r0
 8016aca:	460d      	mov	r5, r1
 8016acc:	ec45 4b10 	vmov	d0, r4, r5
 8016ad0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ad4:	2d00      	cmp	r5, #0
 8016ad6:	dc0e      	bgt.n	8016af6 <__ieee754_sqrt+0x56>
 8016ad8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8016adc:	4322      	orrs	r2, r4
 8016ade:	d0f5      	beq.n	8016acc <__ieee754_sqrt+0x2c>
 8016ae0:	b19d      	cbz	r5, 8016b0a <__ieee754_sqrt+0x6a>
 8016ae2:	4622      	mov	r2, r4
 8016ae4:	4620      	mov	r0, r4
 8016ae6:	4629      	mov	r1, r5
 8016ae8:	f7e9 fbf6 	bl	80002d8 <__aeabi_dsub>
 8016aec:	4602      	mov	r2, r0
 8016aee:	460b      	mov	r3, r1
 8016af0:	f7e9 fed4 	bl	800089c <__aeabi_ddiv>
 8016af4:	e7e8      	b.n	8016ac8 <__ieee754_sqrt+0x28>
 8016af6:	152a      	asrs	r2, r5, #20
 8016af8:	d115      	bne.n	8016b26 <__ieee754_sqrt+0x86>
 8016afa:	2000      	movs	r0, #0
 8016afc:	e009      	b.n	8016b12 <__ieee754_sqrt+0x72>
 8016afe:	0acb      	lsrs	r3, r1, #11
 8016b00:	3a15      	subs	r2, #21
 8016b02:	0549      	lsls	r1, r1, #21
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d0fa      	beq.n	8016afe <__ieee754_sqrt+0x5e>
 8016b08:	e7f7      	b.n	8016afa <__ieee754_sqrt+0x5a>
 8016b0a:	462a      	mov	r2, r5
 8016b0c:	e7fa      	b.n	8016b04 <__ieee754_sqrt+0x64>
 8016b0e:	005b      	lsls	r3, r3, #1
 8016b10:	3001      	adds	r0, #1
 8016b12:	02dc      	lsls	r4, r3, #11
 8016b14:	d5fb      	bpl.n	8016b0e <__ieee754_sqrt+0x6e>
 8016b16:	1e44      	subs	r4, r0, #1
 8016b18:	1b12      	subs	r2, r2, r4
 8016b1a:	f1c0 0420 	rsb	r4, r0, #32
 8016b1e:	fa21 f404 	lsr.w	r4, r1, r4
 8016b22:	4323      	orrs	r3, r4
 8016b24:	4081      	lsls	r1, r0
 8016b26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016b2a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8016b2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016b32:	07d2      	lsls	r2, r2, #31
 8016b34:	bf5c      	itt	pl
 8016b36:	005b      	lslpl	r3, r3, #1
 8016b38:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8016b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016b40:	bf58      	it	pl
 8016b42:	0049      	lslpl	r1, r1, #1
 8016b44:	2600      	movs	r6, #0
 8016b46:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8016b4a:	106d      	asrs	r5, r5, #1
 8016b4c:	0049      	lsls	r1, r1, #1
 8016b4e:	2016      	movs	r0, #22
 8016b50:	4632      	mov	r2, r6
 8016b52:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8016b56:	1917      	adds	r7, r2, r4
 8016b58:	429f      	cmp	r7, r3
 8016b5a:	bfde      	ittt	le
 8016b5c:	193a      	addle	r2, r7, r4
 8016b5e:	1bdb      	suble	r3, r3, r7
 8016b60:	1936      	addle	r6, r6, r4
 8016b62:	0fcf      	lsrs	r7, r1, #31
 8016b64:	3801      	subs	r0, #1
 8016b66:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8016b6a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016b6e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8016b72:	d1f0      	bne.n	8016b56 <__ieee754_sqrt+0xb6>
 8016b74:	4604      	mov	r4, r0
 8016b76:	2720      	movs	r7, #32
 8016b78:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8016b7c:	429a      	cmp	r2, r3
 8016b7e:	eb00 0e0c 	add.w	lr, r0, ip
 8016b82:	db02      	blt.n	8016b8a <__ieee754_sqrt+0xea>
 8016b84:	d113      	bne.n	8016bae <__ieee754_sqrt+0x10e>
 8016b86:	458e      	cmp	lr, r1
 8016b88:	d811      	bhi.n	8016bae <__ieee754_sqrt+0x10e>
 8016b8a:	f1be 0f00 	cmp.w	lr, #0
 8016b8e:	eb0e 000c 	add.w	r0, lr, ip
 8016b92:	da42      	bge.n	8016c1a <__ieee754_sqrt+0x17a>
 8016b94:	2800      	cmp	r0, #0
 8016b96:	db40      	blt.n	8016c1a <__ieee754_sqrt+0x17a>
 8016b98:	f102 0801 	add.w	r8, r2, #1
 8016b9c:	1a9b      	subs	r3, r3, r2
 8016b9e:	458e      	cmp	lr, r1
 8016ba0:	bf88      	it	hi
 8016ba2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8016ba6:	eba1 010e 	sub.w	r1, r1, lr
 8016baa:	4464      	add	r4, ip
 8016bac:	4642      	mov	r2, r8
 8016bae:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8016bb2:	3f01      	subs	r7, #1
 8016bb4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8016bb8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016bbc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8016bc0:	d1dc      	bne.n	8016b7c <__ieee754_sqrt+0xdc>
 8016bc2:	4319      	orrs	r1, r3
 8016bc4:	d01b      	beq.n	8016bfe <__ieee754_sqrt+0x15e>
 8016bc6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8016c4c <__ieee754_sqrt+0x1ac>
 8016bca:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8016c50 <__ieee754_sqrt+0x1b0>
 8016bce:	e9da 0100 	ldrd	r0, r1, [sl]
 8016bd2:	e9db 2300 	ldrd	r2, r3, [fp]
 8016bd6:	f7e9 fb7f 	bl	80002d8 <__aeabi_dsub>
 8016bda:	e9da 8900 	ldrd	r8, r9, [sl]
 8016bde:	4602      	mov	r2, r0
 8016be0:	460b      	mov	r3, r1
 8016be2:	4640      	mov	r0, r8
 8016be4:	4649      	mov	r1, r9
 8016be6:	f7e9 ffab 	bl	8000b40 <__aeabi_dcmple>
 8016bea:	b140      	cbz	r0, 8016bfe <__ieee754_sqrt+0x15e>
 8016bec:	f1b4 3fff 	cmp.w	r4, #4294967295
 8016bf0:	e9da 0100 	ldrd	r0, r1, [sl]
 8016bf4:	e9db 2300 	ldrd	r2, r3, [fp]
 8016bf8:	d111      	bne.n	8016c1e <__ieee754_sqrt+0x17e>
 8016bfa:	3601      	adds	r6, #1
 8016bfc:	463c      	mov	r4, r7
 8016bfe:	1072      	asrs	r2, r6, #1
 8016c00:	0863      	lsrs	r3, r4, #1
 8016c02:	07f1      	lsls	r1, r6, #31
 8016c04:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8016c08:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8016c0c:	bf48      	it	mi
 8016c0e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8016c12:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8016c16:	4618      	mov	r0, r3
 8016c18:	e756      	b.n	8016ac8 <__ieee754_sqrt+0x28>
 8016c1a:	4690      	mov	r8, r2
 8016c1c:	e7be      	b.n	8016b9c <__ieee754_sqrt+0xfc>
 8016c1e:	f7e9 fb5d 	bl	80002dc <__adddf3>
 8016c22:	e9da 8900 	ldrd	r8, r9, [sl]
 8016c26:	4602      	mov	r2, r0
 8016c28:	460b      	mov	r3, r1
 8016c2a:	4640      	mov	r0, r8
 8016c2c:	4649      	mov	r1, r9
 8016c2e:	f7e9 ff7d 	bl	8000b2c <__aeabi_dcmplt>
 8016c32:	b120      	cbz	r0, 8016c3e <__ieee754_sqrt+0x19e>
 8016c34:	1ca0      	adds	r0, r4, #2
 8016c36:	bf08      	it	eq
 8016c38:	3601      	addeq	r6, #1
 8016c3a:	3402      	adds	r4, #2
 8016c3c:	e7df      	b.n	8016bfe <__ieee754_sqrt+0x15e>
 8016c3e:	1c63      	adds	r3, r4, #1
 8016c40:	f023 0401 	bic.w	r4, r3, #1
 8016c44:	e7db      	b.n	8016bfe <__ieee754_sqrt+0x15e>
 8016c46:	bf00      	nop
 8016c48:	7ff00000 	.word	0x7ff00000
 8016c4c:	200003b0 	.word	0x200003b0
 8016c50:	200003a8 	.word	0x200003a8

08016c54 <_init>:
 8016c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c56:	bf00      	nop
 8016c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c5a:	bc08      	pop	{r3}
 8016c5c:	469e      	mov	lr, r3
 8016c5e:	4770      	bx	lr

08016c60 <_fini>:
 8016c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c62:	bf00      	nop
 8016c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c66:	bc08      	pop	{r3}
 8016c68:	469e      	mov	lr, r3
 8016c6a:	4770      	bx	lr
