
Magisterka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000169f8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  08016bd8  08016bd8  00017bd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017408  08017408  00019398  2**0
                  CONTENTS
  4 .ARM          00000008  08017408  08017408  00018408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017410  08017410  00019398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017410  08017410  00018410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017414  08017414  00018414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000398  20000000  08017418  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002304  20000398  080177b0  00019398  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000269c  080177b0  0001969c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019398  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025595  00000000  00000000  000193c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ea2  00000000  00000000  0003e95d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f18  00000000  00000000  00043800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017f4  00000000  00000000  00045718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d55b  00000000  00000000  00046f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026678  00000000  00000000  00074467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f0a5  00000000  00000000  0009aadf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b9b84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f90  00000000  00000000  001b9bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001c3b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000398 	.word	0x20000398
 80001fc:	00000000 	.word	0x00000000
 8000200:	08016bc0 	.word	0x08016bc0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000039c 	.word	0x2000039c
 800021c:	08016bc0 	.word	0x08016bc0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	0000      	movs	r0, r0
	...

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103e:	f003 f972 	bl	8004326 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001042:	f000 fc6d 	bl	8001920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001046:	f001 fa8f 	bl	8002568 <MX_GPIO_Init>
  MX_DMA_Init();
 800104a:	f001 fa43 	bl	80024d4 <MX_DMA_Init>
  MX_ADC3_Init();
 800104e:	f000 fd2d 	bl	8001aac <MX_ADC3_Init>
  MX_ADC4_Init();
 8001052:	f000 fdf7 	bl	8001c44 <MX_ADC4_Init>
  MX_ADC5_Init();
 8001056:	f000 fe5b 	bl	8001d10 <MX_ADC5_Init>
  MX_DAC1_Init();
 800105a:	f000 fedf 	bl	8001e1c <MX_DAC1_Init>
  MX_DAC2_Init();
 800105e:	f000 ff29 	bl	8001eb4 <MX_DAC2_Init>
  MX_TIM1_Init();
 8001062:	f000 ff61 	bl	8001f28 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001066:	f001 f8df 	bl	8002228 <MX_TIM8_Init>
  MX_UART4_Init();
 800106a:	f001 f9e7 	bl	800243c <MX_UART4_Init>
  MX_ADC1_Init();
 800106e:	f000 fca5 	bl	80019bc <MX_ADC1_Init>
  MX_TIM4_Init();
 8001072:	f000 ffeb 	bl	800204c <MX_TIM4_Init>
  MX_USB_Device_Init();
 8001076:	f00e fed1 	bl	800fe1c <MX_USB_Device_Init>
  MX_TIM15_Init();
 800107a:	f001 f967 	bl	800234c <MX_TIM15_Init>
  MX_TIM16_Init();
 800107e:	f001 f9b7 	bl	80023f0 <MX_TIM16_Init>
  MX_TIM7_Init();
 8001082:	f001 f89b 	bl	80021bc <MX_TIM7_Init>
  MX_TIM6_Init();
 8001086:	f001 f859 	bl	800213c <MX_TIM6_Init>
  MX_CORDIC_Init();
 800108a:	f000 feb3 	bl	8001df4 <MX_CORDIC_Init>


  while (1)
  {

	  	  	  	  checkfaults = Check_Faults();
 800108e:	f001 fcf9 	bl	8002a84 <Check_Faults>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	4b74      	ldr	r3, [pc, #464]	@ (8001268 <main+0x230>)
 8001098:	701a      	strb	r2, [r3, #0]

	  	  	  	  if (dataReceivedFlag) {
 800109a:	4b74      	ldr	r3, [pc, #464]	@ (800126c <main+0x234>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d004      	beq.n	80010ae <main+0x76>
	  	  	  	      // Process the data
	  	  	  	      ParseUSBCommand();  // Function to handle the received command
 80010a4:	f002 f886 	bl	80031b4 <ParseUSBCommand>

	  	  	  	      // Clear the flag after processing
	  	  	  	      dataReceivedFlag = 0;
 80010a8:	4b70      	ldr	r3, [pc, #448]	@ (800126c <main+0x234>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
	  	  	  	  }

	  	  	  	  interlock = HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin);
 80010ae:	2104      	movs	r1, #4
 80010b0:	486f      	ldr	r0, [pc, #444]	@ (8001270 <main+0x238>)
 80010b2:	f005 fe4d 	bl	8006d50 <HAL_GPIO_ReadPin>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b6e      	ldr	r3, [pc, #440]	@ (8001274 <main+0x23c>)
 80010bc:	701a      	strb	r2, [r3, #0]

	  	          if (interlock &&  start_program && !(checkfaults)) {
 80010be:	4b6d      	ldr	r3, [pc, #436]	@ (8001274 <main+0x23c>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00e      	beq.n	80010e4 <main+0xac>
 80010c6:	4b6c      	ldr	r3, [pc, #432]	@ (8001278 <main+0x240>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00a      	beq.n	80010e4 <main+0xac>
 80010ce:	4b66      	ldr	r3, [pc, #408]	@ (8001268 <main+0x230>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d106      	bne.n	80010e4 <main+0xac>
	  	        	//USB_SendString("State: EVENT start_program \r\n");
	  	              event = EVENT_START;
 80010d6:	4b69      	ldr	r3, [pc, #420]	@ (800127c <main+0x244>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
	  	              start_program = 0;
 80010dc:	4b66      	ldr	r3, [pc, #408]	@ (8001278 <main+0x240>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	e019      	b.n	8001118 <main+0xe0>
	  	          }else if (interlock &&  stop_program && !(checkfaults)) {
 80010e4:	4b63      	ldr	r3, [pc, #396]	@ (8001274 <main+0x23c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00e      	beq.n	800110a <main+0xd2>
 80010ec:	4b64      	ldr	r3, [pc, #400]	@ (8001280 <main+0x248>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00a      	beq.n	800110a <main+0xd2>
 80010f4:	4b5c      	ldr	r3, [pc, #368]	@ (8001268 <main+0x230>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d106      	bne.n	800110a <main+0xd2>
		  	        	//USB_SendString("State: EVENT start_program \r\n");
		  	              event = EVENT_SHUTDOWN;
 80010fc:	4b5f      	ldr	r3, [pc, #380]	@ (800127c <main+0x244>)
 80010fe:	2203      	movs	r2, #3
 8001100:	701a      	strb	r2, [r3, #0]
		  	              stop_program = 0;
 8001102:	4b5f      	ldr	r3, [pc, #380]	@ (8001280 <main+0x248>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	e006      	b.n	8001118 <main+0xe0>
		  	          }
	  	          else if (clear_fault) {
 800110a:	4b5e      	ldr	r3, [pc, #376]	@ (8001284 <main+0x24c>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <main+0xe0>
	  	        	  /* clear fault condition */
	  	              event = EVENT_CLEAR_FAULT;
 8001112:	4b5a      	ldr	r3, [pc, #360]	@ (800127c <main+0x244>)
 8001114:	2202      	movs	r2, #2
 8001116:	701a      	strb	r2, [r3, #0]
	  	          }

	  	         if (!interlock || checkfaults /* fault condition */)
 8001118:	4b56      	ldr	r3, [pc, #344]	@ (8001274 <main+0x23c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <main+0xf0>
 8001120:	4b51      	ldr	r3, [pc, #324]	@ (8001268 <main+0x230>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <main+0xf6>
	  	       	 {
	  	       	  	event = EVENT_FAULT;
 8001128:	4b54      	ldr	r3, [pc, #336]	@ (800127c <main+0x244>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
	  	       	 }

	  	          // Handle the event and update the state
	  	          currentState = handle_event(currentState, event);
 800112e:	4b56      	ldr	r3, [pc, #344]	@ (8001288 <main+0x250>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	4a52      	ldr	r2, [pc, #328]	@ (800127c <main+0x244>)
 8001134:	7812      	ldrb	r2, [r2, #0]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fb61 	bl	8002800 <handle_event>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	4b51      	ldr	r3, [pc, #324]	@ (8001288 <main+0x250>)
 8001144:	701a      	strb	r2, [r3, #0]

	  	          // Perform actions based on the current state
	  	          switch (currentState) {
 8001146:	4b50      	ldr	r3, [pc, #320]	@ (8001288 <main+0x250>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b04      	cmp	r3, #4
 800114c:	f200 83ae 	bhi.w	80018ac <main+0x874>
 8001150:	a201      	add	r2, pc, #4	@ (adr r2, 8001158 <main+0x120>)
 8001152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001156:	bf00      	nop
 8001158:	0800116d 	.word	0x0800116d
 800115c:	0800122b 	.word	0x0800122b
 8001160:	080012d1 	.word	0x080012d1
 8001164:	080016fb 	.word	0x080016fb
 8001168:	0800180d 	.word	0x0800180d
	  	              {
	  	            	//GPIOs
	  	            	//CUrrent Sensors OCD pin needed to go low in reset condition after fault event
	  	            	//HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_SET);
	  	            	//HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 800116c:	2201      	movs	r2, #1
 800116e:	2104      	movs	r1, #4
 8001170:	4846      	ldr	r0, [pc, #280]	@ (800128c <main+0x254>)
 8001172:	f005 fe05 	bl	8006d80 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP
 8001176:	2200      	movs	r2, #0
 8001178:	2120      	movs	r1, #32
 800117a:	483d      	ldr	r0, [pc, #244]	@ (8001270 <main+0x238>)
 800117c:	f005 fe00 	bl	8006d80 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 8001180:	2201      	movs	r2, #1
 8001182:	2120      	movs	r1, #32
 8001184:	4842      	ldr	r0, [pc, #264]	@ (8001290 <main+0x258>)
 8001186:	f005 fdfb 	bl	8006d80 <HAL_GPIO_WritePin>
	  	            	HAL_Delay(1000);
 800118a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800118e:	f003 f93b 	bl	8004408 <HAL_Delay>
	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2120      	movs	r1, #32
 8001196:	483e      	ldr	r0, [pc, #248]	@ (8001290 <main+0x258>)
 8001198:	f005 fdf2 	bl	8006d80 <HAL_GPIO_WritePin>
	  	            	  // Start PWM for delay time transfer to FPGA
	  	            	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800119c:	2100      	movs	r1, #0
 800119e:	483d      	ldr	r0, [pc, #244]	@ (8001294 <main+0x25c>)
 80011a0:	f008 fd4c 	bl	8009c3c <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80011a4:	2104      	movs	r1, #4
 80011a6:	483c      	ldr	r0, [pc, #240]	@ (8001298 <main+0x260>)
 80011a8:	f008 fd48 	bl	8009c3c <HAL_TIM_PWM_Start>

	  	            	  //DAC for  current reference
	  	            	  ///DAC1_OUT1 	- MAX1
	  	            	  //DAC1_OUT2 	- MAX2
	  	            	  //DAC2_OUT1	- MIN
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_1);
 80011ac:	2100      	movs	r1, #0
 80011ae:	483b      	ldr	r0, [pc, #236]	@ (800129c <main+0x264>)
 80011b0:	f004 ff1e 	bl	8005ff0 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_2);
 80011b4:	2110      	movs	r1, #16
 80011b6:	4839      	ldr	r0, [pc, #228]	@ (800129c <main+0x264>)
 80011b8:	f004 ff1a 	bl	8005ff0 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac2,DAC2_CHANNEL_1);
 80011bc:	2100      	movs	r1, #0
 80011be:	4838      	ldr	r0, [pc, #224]	@ (80012a0 <main+0x268>)
 80011c0:	f004 ff16 	bl	8005ff0 <HAL_DAC_Start>

	  	            	//if( HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, BUFFER_SIZE, DAC_ALIGN_12B_R)!= HAL_OK) printf("error");
	  	            	//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);

	  	            	  // FAN PWM and 5s timer6 for check temperature and change duty cycle
	  	            	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80011c4:	2100      	movs	r1, #0
 80011c6:	4837      	ldr	r0, [pc, #220]	@ (80012a4 <main+0x26c>)
 80011c8:	f008 fd38 	bl	8009c3c <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_Base_Start_IT(&htim6);
 80011cc:	4836      	ldr	r0, [pc, #216]	@ (80012a8 <main+0x270>)
 80011ce:	f008 fc37 	bl	8009a40 <HAL_TIM_Base_Start_IT>

	  	            	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 80011d2:	217f      	movs	r1, #127	@ 0x7f
 80011d4:	4835      	ldr	r0, [pc, #212]	@ (80012ac <main+0x274>)
 80011d6:	f004 fc3d 	bl	8005a54 <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 80011da:	217f      	movs	r1, #127	@ 0x7f
 80011dc:	4834      	ldr	r0, [pc, #208]	@ (80012b0 <main+0x278>)
 80011de:	f004 fc39 	bl	8005a54 <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 80011e2:	217f      	movs	r1, #127	@ 0x7f
 80011e4:	4833      	ldr	r0, [pc, #204]	@ (80012b4 <main+0x27c>)
 80011e6:	f004 fc35 	bl	8005a54 <HAL_ADCEx_Calibration_Start>

	  	            	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_dma_buffer, 5);
 80011ea:	2205      	movs	r2, #5
 80011ec:	4932      	ldr	r1, [pc, #200]	@ (80012b8 <main+0x280>)
 80011ee:	482f      	ldr	r0, [pc, #188]	@ (80012ac <main+0x274>)
 80011f0:	f003 fd2c 	bl	8004c4c <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4_dma_buffer, 2);
 80011f4:	2202      	movs	r2, #2
 80011f6:	4931      	ldr	r1, [pc, #196]	@ (80012bc <main+0x284>)
 80011f8:	482d      	ldr	r0, [pc, #180]	@ (80012b0 <main+0x278>)
 80011fa:	f003 fd27 	bl	8004c4c <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adc5_dma_buffer, 10);
 80011fe:	220a      	movs	r2, #10
 8001200:	492f      	ldr	r1, [pc, #188]	@ (80012c0 <main+0x288>)
 8001202:	482c      	ldr	r0, [pc, #176]	@ (80012b4 <main+0x27c>)
 8001204:	f003 fd22 	bl	8004c4c <HAL_ADC_Start_DMA>

	  	            	Set_PWM_DutyCycle(20);
 8001208:	2014      	movs	r0, #20
 800120a:	f001 fb53 	bl	80028b4 <Set_PWM_DutyCycle>

	  	            	current_sensor1_vref = adc3_dma_buffer[0];// reference for imax imin
 800120e:	4b2a      	ldr	r3, [pc, #168]	@ (80012b8 <main+0x280>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b2b      	ldr	r3, [pc, #172]	@ (80012c4 <main+0x28c>)
 8001216:	801a      	strh	r2, [r3, #0]
	  	            	current_sensor2_vref = adc3_dma_buffer[1];// reference for imax imin
 8001218:	4b27      	ldr	r3, [pc, #156]	@ (80012b8 <main+0x280>)
 800121a:	885b      	ldrh	r3, [r3, #2]
 800121c:	b29a      	uxth	r2, r3
 800121e:	4b2a      	ldr	r3, [pc, #168]	@ (80012c8 <main+0x290>)
 8001220:	801a      	strh	r2, [r3, #0]

	  	            	currentState = STATE_STANDBY;
 8001222:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <main+0x250>)
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 8001228:	e347      	b.n	80018ba <main+0x882>
	  	              case STATE_STANDBY:
	  	                  // Wait for start_program signal
	  	              {
	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
	  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
	  	            	checkreads = Check_Ready();
 800122a:	f001 fc65 	bl	8002af8 <Check_Ready>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	4b26      	ldr	r3, [pc, #152]	@ (80012cc <main+0x294>)
 8001234:	701a      	strb	r2, [r3, #0]
	  	            	  if(start_program && interlock &&  !(checkfaults)   && checkreads){
 8001236:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <main+0x240>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 8339 	beq.w	80018b2 <main+0x87a>
 8001240:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <main+0x23c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 8334 	beq.w	80018b2 <main+0x87a>
 800124a:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <main+0x230>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f040 832f 	bne.w	80018b2 <main+0x87a>
 8001254:	4b1d      	ldr	r3, [pc, #116]	@ (80012cc <main+0x294>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 832a 	beq.w	80018b2 <main+0x87a>
	  	            		  currentState = STATE_REGULATION;//STATE_SOFT_START;
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <main+0x250>)
 8001260:	2202      	movs	r2, #2
 8001262:	701a      	strb	r2, [r3, #0]
		  	            	//once = 1;
		  	            	  }*/
	  	            	  }

	  	              }
	  	                  break;
 8001264:	e325      	b.n	80018b2 <main+0x87a>
 8001266:	bf00      	nop
 8001268:	20000b68 	.word	0x20000b68
 800126c:	20000b58 	.word	0x20000b58
 8001270:	48000800 	.word	0x48000800
 8001274:	20000b70 	.word	0x20000b70
 8001278:	20000b64 	.word	0x20000b64
 800127c:	20000018 	.word	0x20000018
 8001280:	20000b65 	.word	0x20000b65
 8001284:	20000b66 	.word	0x20000b66
 8001288:	20000b67 	.word	0x20000b67
 800128c:	48001400 	.word	0x48001400
 8001290:	48001000 	.word	0x48001000
 8001294:	20000794 	.word	0x20000794
 8001298:	200008c4 	.word	0x200008c4
 800129c:	200006ac 	.word	0x200006ac
 80012a0:	200006c0 	.word	0x200006c0
 80012a4:	200007e0 	.word	0x200007e0
 80012a8:	2000082c 	.word	0x2000082c
 80012ac:	20000420 	.word	0x20000420
 80012b0:	2000048c 	.word	0x2000048c
 80012b4:	200004f8 	.word	0x200004f8
 80012b8:	20000a58 	.word	0x20000a58
 80012bc:	20000a6c 	.word	0x20000a6c
 80012c0:	20000a80 	.word	0x20000a80
 80012c4:	20000a3c 	.word	0x20000a3c
 80012c8:	20000a3e 	.word	0x20000a3e
 80012cc:	20000b69 	.word	0x20000b69

	  	              case STATE_REGULATION:
	  	                  // Maintain output voltage/current
	  	            	  // 20khz sample time of regulators Timer 15
	  	                  {
	  	                	if(once == 0){
 80012d0:	4b81      	ldr	r3, [pc, #516]	@ (80014d8 <main+0x4a0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d107      	bne.n	80012e8 <main+0x2b0>
	  	                			  	            	  //Start timer that start_program ramp and pi regulation
	  	                			  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
 80012d8:	2200      	movs	r2, #0
 80012da:	2104      	movs	r1, #4
 80012dc:	487f      	ldr	r0, [pc, #508]	@ (80014dc <main+0x4a4>)
 80012de:	f005 fd4f 	bl	8006d80 <HAL_GPIO_WritePin>


	  	                			  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
	  	                			  	            	HAL_TIM_Base_Start_IT(&htim15); // START TIM15 THATS IS MAIN CONTROL LOOP
 80012e2:	487f      	ldr	r0, [pc, #508]	@ (80014e0 <main+0x4a8>)
 80012e4:	f008 fbac 	bl	8009a40 <HAL_TIM_Base_Start_IT>
	  	                			  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
	  	                			  	            	//RAMP_FINISHED = 0;
	  	                			  	            	//once = 1;
	  	                			  	            	  }
	  	                	  if(flag_control)
 80012e8:	4b7e      	ldr	r3, [pc, #504]	@ (80014e4 <main+0x4ac>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 82e3 	beq.w	80018b8 <main+0x880>
	  	                	  {

	  	                		  	  	input_vol = Low_pass_filter(input_voltage, input_vol, input_vol_x_n1, input_vol_y_n1); //input_voltage;
 80012f2:	4b7d      	ldr	r3, [pc, #500]	@ (80014e8 <main+0x4b0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012fe:	4b7b      	ldr	r3, [pc, #492]	@ (80014ec <main+0x4b4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	ee07 3a10 	vmov	s14, r3
 8001306:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800130a:	4b79      	ldr	r3, [pc, #484]	@ (80014f0 <main+0x4b8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	ee06 3a90 	vmov	s13, r3
 8001312:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001316:	4b77      	ldr	r3, [pc, #476]	@ (80014f4 <main+0x4bc>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	ee06 3a10 	vmov	s12, r3
 800131e:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8001322:	eef0 1a46 	vmov.f32	s3, s12
 8001326:	eeb0 1a66 	vmov.f32	s2, s13
 800132a:	eef0 0a47 	vmov.f32	s1, s14
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	f001 fe31 	bl	8002f98 <Low_pass_filter>
 8001336:	eef0 7a40 	vmov.f32	s15, s0
 800133a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800133e:	ee17 2a90 	vmov	r2, s15
 8001342:	4b6a      	ldr	r3, [pc, #424]	@ (80014ec <main+0x4b4>)
 8001344:	601a      	str	r2, [r3, #0]
	  	                		  	  	output_vol = Low_pass_filter(output_voltage, output_vol, output_vol_x_n1, output_vol_y_n1); //output_voltage;
 8001346:	4b6c      	ldr	r3, [pc, #432]	@ (80014f8 <main+0x4c0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	ee07 3a90 	vmov	s15, r3
 800134e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001352:	4b6a      	ldr	r3, [pc, #424]	@ (80014fc <main+0x4c4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	ee07 3a10 	vmov	s14, r3
 800135a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800135e:	4b68      	ldr	r3, [pc, #416]	@ (8001500 <main+0x4c8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	ee06 3a90 	vmov	s13, r3
 8001366:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800136a:	4b66      	ldr	r3, [pc, #408]	@ (8001504 <main+0x4cc>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	ee06 3a10 	vmov	s12, r3
 8001372:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8001376:	eef0 1a46 	vmov.f32	s3, s12
 800137a:	eeb0 1a66 	vmov.f32	s2, s13
 800137e:	eef0 0a47 	vmov.f32	s1, s14
 8001382:	eeb0 0a67 	vmov.f32	s0, s15
 8001386:	f001 fe07 	bl	8002f98 <Low_pass_filter>
 800138a:	eef0 7a40 	vmov.f32	s15, s0
 800138e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001392:	ee17 2a90 	vmov	r2, s15
 8001396:	4b59      	ldr	r3, [pc, #356]	@ (80014fc <main+0x4c4>)
 8001398:	601a      	str	r2, [r3, #0]
	  	                		  	  	input_vol_x_n1 = input_voltage;
 800139a:	4b53      	ldr	r3, [pc, #332]	@ (80014e8 <main+0x4b0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a54      	ldr	r2, [pc, #336]	@ (80014f0 <main+0x4b8>)
 80013a0:	6013      	str	r3, [r2, #0]
	  	                		  	  	input_vol_y_n1 = input_vol;
 80013a2:	4b52      	ldr	r3, [pc, #328]	@ (80014ec <main+0x4b4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a53      	ldr	r2, [pc, #332]	@ (80014f4 <main+0x4bc>)
 80013a8:	6013      	str	r3, [r2, #0]
	  	                		  	  	output_vol_x_n1 = output_voltage;
 80013aa:	4b53      	ldr	r3, [pc, #332]	@ (80014f8 <main+0x4c0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a54      	ldr	r2, [pc, #336]	@ (8001500 <main+0x4c8>)
 80013b0:	6013      	str	r3, [r2, #0]
	  	                		  	  	output_vol_y_n1 = output_vol;
 80013b2:	4b52      	ldr	r3, [pc, #328]	@ (80014fc <main+0x4c4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a53      	ldr	r2, [pc, #332]	@ (8001504 <main+0x4cc>)
 80013b8:	6013      	str	r3, [r2, #0]

	  	                		  	  	Gv = (float)output_vol/(float)input_vol;//output_voltage/input_voltage;
 80013ba:	4b50      	ldr	r3, [pc, #320]	@ (80014fc <main+0x4c4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	ee07 3a90 	vmov	s15, r3
 80013c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013c6:	4b49      	ldr	r3, [pc, #292]	@ (80014ec <main+0x4b4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	ee07 3a90 	vmov	s15, r3
 80013ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001508 <main+0x4d0>)
 80013d8:	edc3 7a00 	vstr	s15, [r3]

	  	                				if(Gv<2) //CZARY
 80013dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001508 <main+0x4d0>)
 80013de:	edd3 7a00 	vldr	s15, [r3]
 80013e2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80013e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	f140 8093 	bpl.w	8001518 <main+0x4e0>
	  	                				{
	  	                					delay_tr = acos(1-Gv)/wr;
 80013f2:	4b45      	ldr	r3, [pc, #276]	@ (8001508 <main+0x4d0>)
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001400:	ee17 0a90 	vmov	r0, s15
 8001404:	f7ff f8c8 	bl	8000598 <__aeabi_f2d>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	ec43 2b10 	vmov	d0, r2, r3
 8001410:	f014 f9ba 	bl	8015788 <acos>
 8001414:	ec51 0b10 	vmov	r0, r1, d0
 8001418:	a32b      	add	r3, pc, #172	@ (adr r3, 80014c8 <main+0x490>)
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	f7ff fa3d 	bl	800089c <__aeabi_ddiv>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4610      	mov	r0, r2
 8001428:	4619      	mov	r1, r3
 800142a:	f7ff fc05 	bl	8000c38 <__aeabi_d2f>
 800142e:	4603      	mov	r3, r0
 8001430:	4a36      	ldr	r2, [pc, #216]	@ (800150c <main+0x4d4>)
 8001432:	6013      	str	r3, [r2, #0]
	  	                					imin = (int)(Imin_Factor*output_vol*sqrt((2-Gv)/Gv)/Z); //[mA] Negative current needed to Zero voltage switching in resonance
 8001434:	4b31      	ldr	r3, [pc, #196]	@ (80014fc <main+0x4c4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001440:	4b33      	ldr	r3, [pc, #204]	@ (8001510 <main+0x4d8>)
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144a:	ee17 0a90 	vmov	r0, s15
 800144e:	f7ff f8a3 	bl	8000598 <__aeabi_f2d>
 8001452:	4604      	mov	r4, r0
 8001454:	460d      	mov	r5, r1
 8001456:	4b2c      	ldr	r3, [pc, #176]	@ (8001508 <main+0x4d0>)
 8001458:	edd3 7a00 	vldr	s15, [r3]
 800145c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001460:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001464:	4b28      	ldr	r3, [pc, #160]	@ (8001508 <main+0x4d0>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800146e:	ee16 0a90 	vmov	r0, s13
 8001472:	f7ff f891 	bl	8000598 <__aeabi_f2d>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	ec43 2b10 	vmov	d0, r2, r3
 800147e:	f014 fa27 	bl	80158d0 <sqrt>
 8001482:	ec53 2b10 	vmov	r2, r3, d0
 8001486:	4620      	mov	r0, r4
 8001488:	4629      	mov	r1, r5
 800148a:	f7ff f8dd 	bl	8000648 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	a30e      	add	r3, pc, #56	@ (adr r3, 80014d0 <main+0x498>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f7ff f9fe 	bl	800089c <__aeabi_ddiv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f7ff fb7e 	bl	8000ba8 <__aeabi_d2iz>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <main+0x4dc>)
 80014b2:	601a      	str	r2, [r3, #0]
	  	                					if(imin>4000) imin = 4000;
 80014b4:	4b17      	ldr	r3, [pc, #92]	@ (8001514 <main+0x4dc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80014bc:	d967      	bls.n	800158e <main+0x556>
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <main+0x4dc>)
 80014c0:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	e062      	b.n	800158e <main+0x556>
 80014c8:	78000000 	.word	0x78000000
 80014cc:	4190942a 	.word	0x4190942a
 80014d0:	9374bc6a 	.word	0x9374bc6a
 80014d4:	40624418 	.word	0x40624418
 80014d8:	20000b6c 	.word	0x20000b6c
 80014dc:	48001400 	.word	0x48001400
 80014e0:	20000910 	.word	0x20000910
 80014e4:	20000b71 	.word	0x20000b71
 80014e8:	20000a4c 	.word	0x20000a4c
 80014ec:	20000024 	.word	0x20000024
 80014f0:	2000002c 	.word	0x2000002c
 80014f4:	20000030 	.word	0x20000030
 80014f8:	20000a64 	.word	0x20000a64
 80014fc:	20000028 	.word	0x20000028
 8001500:	20000034 	.word	0x20000034
 8001504:	20000038 	.word	0x20000038
 8001508:	20000004 	.word	0x20000004
 800150c:	20000a74 	.word	0x20000a74
 8001510:	20000020 	.word	0x20000020
 8001514:	20000a48 	.word	0x20000a48
	  	                				} else if(Gv>=2)
 8001518:	4b9d      	ldr	r3, [pc, #628]	@ (8001790 <main+0x758>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	db30      	blt.n	800158e <main+0x556>
	  	                				{
	  	                					delay_tr = (M_PI-acos(1/(Gv-1)))/wr;
 800152c:	4b98      	ldr	r3, [pc, #608]	@ (8001790 <main+0x758>)
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001536:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800153a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800153e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001542:	ee16 0a90 	vmov	r0, s13
 8001546:	f7ff f827 	bl	8000598 <__aeabi_f2d>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	ec43 2b10 	vmov	d0, r2, r3
 8001552:	f014 f919 	bl	8015788 <acos>
 8001556:	ec53 2b10 	vmov	r2, r3, d0
 800155a:	a185      	add	r1, pc, #532	@ (adr r1, 8001770 <main+0x738>)
 800155c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001560:	f7fe feba 	bl	80002d8 <__aeabi_dsub>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	a382      	add	r3, pc, #520	@ (adr r3, 8001778 <main+0x740>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	f7ff f993 	bl	800089c <__aeabi_ddiv>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fb5b 	bl	8000c38 <__aeabi_d2f>
 8001582:	4603      	mov	r3, r0
 8001584:	4a83      	ldr	r2, [pc, #524]	@ (8001794 <main+0x75c>)
 8001586:	6013      	str	r3, [r2, #0]
	  	                					imin = 0;
 8001588:	4b83      	ldr	r3, [pc, #524]	@ (8001798 <main+0x760>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
	  	                				}
	  	                				if(/*once == 0*/delay_tr<0.001){
 800158e:	4b81      	ldr	r3, [pc, #516]	@ (8001794 <main+0x75c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff f800 	bl	8000598 <__aeabi_f2d>
 8001598:	a379      	add	r3, pc, #484	@ (adr r3, 8001780 <main+0x748>)
 800159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159e:	f7ff fac5 	bl	8000b2c <__aeabi_dcmplt>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d017      	beq.n	80015d8 <main+0x5a0>
	  	                				int delay_tr_freq = (int)(1/delay_tr);
 80015a8:	4b7a      	ldr	r3, [pc, #488]	@ (8001794 <main+0x75c>)
 80015aa:	ed93 7a00 	vldr	s14, [r3]
 80015ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80015b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ba:	ee17 3a90 	vmov	r3, s15
 80015be:	607b      	str	r3, [r7, #4]
	  	                				if(delay_tr_freq>20000000) delay_tr_freq = 10000000;//10Mhz
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a76      	ldr	r2, [pc, #472]	@ (800179c <main+0x764>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	dd01      	ble.n	80015cc <main+0x594>
 80015c8:	4b75      	ldr	r3, [pc, #468]	@ (80017a0 <main+0x768>)
 80015ca:	607b      	str	r3, [r7, #4]
	  	                				if(/*once == 0*/ 1) Update_PWM_Frequency(&htim1, TIM_CHANNEL_1, delay_tr_freq); // Set TIM1 CH1 to freq that is delay tr and send to fpga
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	461a      	mov	r2, r3
 80015d0:	2100      	movs	r1, #0
 80015d2:	4874      	ldr	r0, [pc, #464]	@ (80017a4 <main+0x76c>)
 80015d4:	f001 f9e6 	bl	80029a4 <Update_PWM_Frequency>
	  	                				}

	  	                				if(RAMP_FINISHED == 0) RAMP(); // Adding to Vramp stepping voltage to create starting ramp
 80015d8:	4b73      	ldr	r3, [pc, #460]	@ (80017a8 <main+0x770>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <main+0x5ac>
 80015e0:	f001 fbc2 	bl	8002d68 <RAMP>

	  	                				regulatorPI(&imax1, &Integral_I, output_vol, Vramp, LIM_PEAK_POS, LIM_PEAK_NEG, Kp, Ti, Ts);
 80015e4:	4b71      	ldr	r3, [pc, #452]	@ (80017ac <main+0x774>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	ee07 3a90 	vmov	s15, r3
 80015ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015f0:	4b6f      	ldr	r3, [pc, #444]	@ (80017b0 <main+0x778>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	ee07 3a10 	vmov	s14, r3
 80015f8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80015fc:	4b6d      	ldr	r3, [pc, #436]	@ (80017b4 <main+0x77c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	ee06 3a90 	vmov	s13, r3
 8001604:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001608:	4b6b      	ldr	r3, [pc, #428]	@ (80017b8 <main+0x780>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	ee06 3a10 	vmov	s12, r3
 8001610:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8001614:	4b69      	ldr	r3, [pc, #420]	@ (80017bc <main+0x784>)
 8001616:	edd3 5a00 	vldr	s11, [r3]
 800161a:	4b69      	ldr	r3, [pc, #420]	@ (80017c0 <main+0x788>)
 800161c:	ed93 5a00 	vldr	s10, [r3]
 8001620:	ed9f 3a68 	vldr	s6, [pc, #416]	@ 80017c4 <main+0x78c>
 8001624:	eef0 2a45 	vmov.f32	s5, s10
 8001628:	eeb0 2a65 	vmov.f32	s4, s11
 800162c:	eef0 1a46 	vmov.f32	s3, s12
 8001630:	eeb0 1a66 	vmov.f32	s2, s13
 8001634:	eef0 0a47 	vmov.f32	s1, s14
 8001638:	eeb0 0a67 	vmov.f32	s0, s15
 800163c:	4962      	ldr	r1, [pc, #392]	@ (80017c8 <main+0x790>)
 800163e:	4863      	ldr	r0, [pc, #396]	@ (80017cc <main+0x794>)
 8001640:	f001 fbcc 	bl	8002ddc <regulatorPI>

	  	                				if(/*once == 0*/ output_vol>40000)
 8001644:	4b59      	ldr	r3, [pc, #356]	@ (80017ac <main+0x774>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f649 4240 	movw	r2, #40000	@ 0x9c40
 800164c:	4293      	cmp	r3, r2
 800164e:	d939      	bls.n	80016c4 <main+0x68c>
	  	                				{
	  	                				delay_hc = (2*C_CAP*output_vol)/imax1;
 8001650:	4b56      	ldr	r3, [pc, #344]	@ (80017ac <main+0x774>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff7d 	bl	8000554 <__aeabi_ui2d>
 800165a:	a34b      	add	r3, pc, #300	@ (adr r3, 8001788 <main+0x750>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7fe fff2 	bl	8000648 <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4614      	mov	r4, r2
 800166a:	461d      	mov	r5, r3
 800166c:	4b57      	ldr	r3, [pc, #348]	@ (80017cc <main+0x794>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff6f 	bl	8000554 <__aeabi_ui2d>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7ff f90d 	bl	800089c <__aeabi_ddiv>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff fad5 	bl	8000c38 <__aeabi_d2f>
 800168e:	4603      	mov	r3, r0
 8001690:	4a4f      	ldr	r2, [pc, #316]	@ (80017d0 <main+0x798>)
 8001692:	6013      	str	r3, [r2, #0]
	  	                				int delay_hc_freq = (int)(1/delay_hc);
 8001694:	4b4e      	ldr	r3, [pc, #312]	@ (80017d0 <main+0x798>)
 8001696:	ed93 7a00 	vldr	s14, [r3]
 800169a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800169e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016a6:	ee17 3a90 	vmov	r3, s15
 80016aa:	603b      	str	r3, [r7, #0]
	  	                				if(delay_hc_freq>20000000) delay_hc_freq = 10000000;//10Mhz jakis problem
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	4a3b      	ldr	r2, [pc, #236]	@ (800179c <main+0x764>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	dd01      	ble.n	80016b8 <main+0x680>
 80016b4:	4b3a      	ldr	r3, [pc, #232]	@ (80017a0 <main+0x768>)
 80016b6:	603b      	str	r3, [r7, #0]
	  	                				if(/*once == 0*/ 1) Update_PWM_Frequency(&htim8, TIM_CHANNEL_2, delay_hc_freq); // Set TIM8 CH1 o freq that is delay hc and send to fpga
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	2104      	movs	r1, #4
 80016be:	4845      	ldr	r0, [pc, #276]	@ (80017d4 <main+0x79c>)
 80016c0:	f001 f970 	bl	80029a4 <Update_PWM_Frequency>
	  	                				}

	  	                				imax2 =  imax1 + imax2_sum;//
 80016c4:	4b41      	ldr	r3, [pc, #260]	@ (80017cc <main+0x794>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b43      	ldr	r3, [pc, #268]	@ (80017d8 <main+0x7a0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4413      	add	r3, r2
 80016ce:	4a43      	ldr	r2, [pc, #268]	@ (80017dc <main+0x7a4>)
 80016d0:	6013      	str	r3, [r2, #0]

	  	                				if(once == 0){
 80016d2:	4b43      	ldr	r3, [pc, #268]	@ (80017e0 <main+0x7a8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10b      	bne.n	80016f2 <main+0x6ba>
	  	                							HAL_Delay(500);
 80016da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016de:	f002 fe93 	bl	8004408 <HAL_Delay>
	  	                						HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
 80016e2:	2201      	movs	r2, #1
 80016e4:	2120      	movs	r1, #32
 80016e6:	483f      	ldr	r0, [pc, #252]	@ (80017e4 <main+0x7ac>)
 80016e8:	f005 fb4a 	bl	8006d80 <HAL_GPIO_WritePin>
	  	                						once = 1;
 80016ec:	4b3c      	ldr	r3, [pc, #240]	@ (80017e0 <main+0x7a8>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]
	  	                						}

	  	                				flag_control = 0;
 80016f2:	4b3d      	ldr	r3, [pc, #244]	@ (80017e8 <main+0x7b0>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
	  	                	  }

	  	                  }
	  	                  break;
 80016f8:	e0de      	b.n	80018b8 <main+0x880>
	  	              case STATE_FAULT:
	  	                  // Handle fault condition
	  	            	  // Turn off all gate drivers and stop FPGA
	  	              {
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP drives mosfet etc
 80016fa:	2200      	movs	r2, #0
 80016fc:	2120      	movs	r1, #32
 80016fe:	4839      	ldr	r0, [pc, #228]	@ (80017e4 <main+0x7ac>)
 8001700:	f005 fb3e 	bl	8006d80 <HAL_GPIO_WritePin>

	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!


	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 8001704:	4839      	ldr	r0, [pc, #228]	@ (80017ec <main+0x7b4>)
 8001706:	f008 fa13 	bl	8009b30 <HAL_TIM_Base_Stop_IT>

	  	            	HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port,NOT_RST_1_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	2180      	movs	r1, #128	@ 0x80
 800170e:	4838      	ldr	r0, [pc, #224]	@ (80017f0 <main+0x7b8>)
 8001710:	f005 fb36 	bl	8006d80 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_2_GPIO_Port,NOT_RST_2_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800171a:	4836      	ldr	r0, [pc, #216]	@ (80017f4 <main+0x7bc>)
 800171c:	f005 fb30 	bl	8006d80 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port,NOT_RST_3_Pin, GPIO_PIN_RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	2101      	movs	r1, #1
 8001724:	4834      	ldr	r0, [pc, #208]	@ (80017f8 <main+0x7c0>)
 8001726:	f005 fb2b 	bl	8006d80 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port,NOT_RST_4_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2140      	movs	r1, #64	@ 0x40
 800172e:	482d      	ldr	r0, [pc, #180]	@ (80017e4 <main+0x7ac>)
 8001730:	f005 fb26 	bl	8006d80 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2102      	movs	r1, #2
 8001738:	482e      	ldr	r0, [pc, #184]	@ (80017f4 <main+0x7bc>)
 800173a:	f005 fb21 	bl	8006d80 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001744:	482d      	ldr	r0, [pc, #180]	@ (80017fc <main+0x7c4>)
 8001746:	f005 fb1b 	bl	8006d80 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	2120      	movs	r1, #32
 800174e:	4829      	ldr	r0, [pc, #164]	@ (80017f4 <main+0x7bc>)
 8001750:	f005 fb16 	bl	8006d80 <HAL_GPIO_WritePin>

	  	            	HAL_TIM_Base_Start(&htim7); // timer for reset OCD and INTERLOCK reset turn off
 8001754:	482a      	ldr	r0, [pc, #168]	@ (8001800 <main+0x7c8>)
 8001756:	f008 f903 	bl	8009960 <HAL_TIM_Base_Start>


	  	            	once = 0;
 800175a:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <main+0x7a8>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
	  	            	start_program = 0;
 8001760:	4b28      	ldr	r3, [pc, #160]	@ (8001804 <main+0x7cc>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
	  	            	currentState = STATE_SHUTDOWN;
 8001766:	4b28      	ldr	r3, [pc, #160]	@ (8001808 <main+0x7d0>)
 8001768:	2204      	movs	r2, #4
 800176a:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 800176c:	e0a5      	b.n	80018ba <main+0x882>
 800176e:	bf00      	nop
 8001770:	54442d18 	.word	0x54442d18
 8001774:	400921fb 	.word	0x400921fb
 8001778:	78000000 	.word	0x78000000
 800177c:	4190942a 	.word	0x4190942a
 8001780:	d2f1a9fc 	.word	0xd2f1a9fc
 8001784:	3f50624d 	.word	0x3f50624d
 8001788:	e5c45270 	.word	0xe5c45270
 800178c:	3e32e5d9 	.word	0x3e32e5d9
 8001790:	20000004 	.word	0x20000004
 8001794:	20000a74 	.word	0x20000a74
 8001798:	20000a48 	.word	0x20000a48
 800179c:	01312d00 	.word	0x01312d00
 80017a0:	00989680 	.word	0x00989680
 80017a4:	20000794 	.word	0x20000794
 80017a8:	20000a70 	.word	0x20000a70
 80017ac:	20000028 	.word	0x20000028
 80017b0:	20000a6a 	.word	0x20000a6a
 80017b4:	20000010 	.word	0x20000010
 80017b8:	20000014 	.word	0x20000014
 80017bc:	20000008 	.word	0x20000008
 80017c0:	2000000c 	.word	0x2000000c
 80017c4:	3851b717 	.word	0x3851b717
 80017c8:	20000b5c 	.word	0x20000b5c
 80017cc:	20000a40 	.word	0x20000a40
 80017d0:	20000a78 	.word	0x20000a78
 80017d4:	200008c4 	.word	0x200008c4
 80017d8:	20000a7c 	.word	0x20000a7c
 80017dc:	20000a44 	.word	0x20000a44
 80017e0:	20000b6c 	.word	0x20000b6c
 80017e4:	48000800 	.word	0x48000800
 80017e8:	20000b71 	.word	0x20000b71
 80017ec:	20000910 	.word	0x20000910
 80017f0:	48000400 	.word	0x48000400
 80017f4:	48001000 	.word	0x48001000
 80017f8:	48000c00 	.word	0x48000c00
 80017fc:	48001400 	.word	0x48001400
 8001800:	20000878 	.word	0x20000878
 8001804:	20000b64 	.word	0x20000b64
 8001808:	20000b67 	.word	0x20000b67
	  	              case STATE_SHUTDOWN:
	  	                  // Safely shut down the converter
	  	              {
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	2120      	movs	r1, #32
 8001810:	482b      	ldr	r0, [pc, #172]	@ (80018c0 <main+0x888>)
 8001812:	f005 fab5 	bl	8006d80 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 8001816:	2201      	movs	r2, #1
 8001818:	2104      	movs	r1, #4
 800181a:	482a      	ldr	r0, [pc, #168]	@ (80018c4 <main+0x88c>)
 800181c:	f005 fab0 	bl	8006d80 <HAL_GPIO_WritePin>
	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 8001820:	4829      	ldr	r0, [pc, #164]	@ (80018c8 <main+0x890>)
 8001822:	f008 f985 	bl	8009b30 <HAL_TIM_Base_Stop_IT>
	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
	  	            	RAMP_FINISHED = 0;
 8001826:	4b29      	ldr	r3, [pc, #164]	@ (80018cc <main+0x894>)
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
						once = 0;
 800182c:	4b28      	ldr	r3, [pc, #160]	@ (80018d0 <main+0x898>)
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
	  	            	imax1 = 1;
 8001832:	4b28      	ldr	r3, [pc, #160]	@ (80018d4 <main+0x89c>)
 8001834:	2201      	movs	r2, #1
 8001836:	601a      	str	r2, [r3, #0]
						imax2 = 1;
 8001838:	4b27      	ldr	r3, [pc, #156]	@ (80018d8 <main+0x8a0>)
 800183a:	2201      	movs	r2, #1
 800183c:	601a      	str	r2, [r3, #0]
						vout = 1;
 800183e:	4b27      	ldr	r3, [pc, #156]	@ (80018dc <main+0x8a4>)
 8001840:	2201      	movs	r2, #1
 8001842:	801a      	strh	r2, [r3, #0]
						Vramp = 1;
 8001844:	4b26      	ldr	r3, [pc, #152]	@ (80018e0 <main+0x8a8>)
 8001846:	2201      	movs	r2, #1
 8001848:	801a      	strh	r2, [r3, #0]
						delay_tr = 1;
 800184a:	4b26      	ldr	r3, [pc, #152]	@ (80018e4 <main+0x8ac>)
 800184c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001850:	601a      	str	r2, [r3, #0]
						delay_hc = 1;
 8001852:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <main+0x8b0>)
 8001854:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001858:	601a      	str	r2, [r3, #0]
						Gv = 1;
 800185a:	4b24      	ldr	r3, [pc, #144]	@ (80018ec <main+0x8b4>)
 800185c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001860:	601a      	str	r2, [r3, #0]
						Integral_I = 1;
 8001862:	4b23      	ldr	r3, [pc, #140]	@ (80018f0 <main+0x8b8>)
 8001864:	2201      	movs	r2, #1
 8001866:	601a      	str	r2, [r3, #0]
						prev_delta = 1;
 8001868:	4b22      	ldr	r3, [pc, #136]	@ (80018f4 <main+0x8bc>)
 800186a:	2201      	movs	r2, #1
 800186c:	601a      	str	r2, [r3, #0]
						input_vol = 1;
 800186e:	4b22      	ldr	r3, [pc, #136]	@ (80018f8 <main+0x8c0>)
 8001870:	2201      	movs	r2, #1
 8001872:	601a      	str	r2, [r3, #0]
						input_voltage =1;
 8001874:	4b21      	ldr	r3, [pc, #132]	@ (80018fc <main+0x8c4>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]
						output_vol = 1;
 800187a:	4b21      	ldr	r3, [pc, #132]	@ (8001900 <main+0x8c8>)
 800187c:	2201      	movs	r2, #1
 800187e:	601a      	str	r2, [r3, #0]
						output_voltage =1;
 8001880:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <main+0x8cc>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]
						input_vol_x_n1 = 1;
 8001886:	4b20      	ldr	r3, [pc, #128]	@ (8001908 <main+0x8d0>)
 8001888:	2201      	movs	r2, #1
 800188a:	601a      	str	r2, [r3, #0]
						input_vol_y_n1 = 1;
 800188c:	4b1f      	ldr	r3, [pc, #124]	@ (800190c <main+0x8d4>)
 800188e:	2201      	movs	r2, #1
 8001890:	601a      	str	r2, [r3, #0]
						output_vol_x_n1 = 1;
 8001892:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <main+0x8d8>)
 8001894:	2201      	movs	r2, #1
 8001896:	601a      	str	r2, [r3, #0]
						output_vol_y_n1 = 1;
 8001898:	4b1e      	ldr	r3, [pc, #120]	@ (8001914 <main+0x8dc>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]
						imin = 1;
 800189e:	4b1e      	ldr	r3, [pc, #120]	@ (8001918 <main+0x8e0>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	601a      	str	r2, [r3, #0]

	  	            	currentState = STATE_STANDBY;
 80018a4:	4b1d      	ldr	r3, [pc, #116]	@ (800191c <main+0x8e4>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
	  	              }

	  	                  break;
 80018aa:	e006      	b.n	80018ba <main+0x882>
	  	              default:
	  	                  break;
 80018ac:	bf00      	nop
 80018ae:	f7ff bbee 	b.w	800108e <main+0x56>
	  	                  break;
 80018b2:	bf00      	nop
 80018b4:	f7ff bbeb 	b.w	800108e <main+0x56>
	  	                  break;
 80018b8:	bf00      	nop
	  	  	  	  checkfaults = Check_Faults();
 80018ba:	f7ff bbe8 	b.w	800108e <main+0x56>
 80018be:	bf00      	nop
 80018c0:	48000800 	.word	0x48000800
 80018c4:	48001400 	.word	0x48001400
 80018c8:	20000910 	.word	0x20000910
 80018cc:	20000a70 	.word	0x20000a70
 80018d0:	20000b6c 	.word	0x20000b6c
 80018d4:	20000a40 	.word	0x20000a40
 80018d8:	20000a44 	.word	0x20000a44
 80018dc:	20000a68 	.word	0x20000a68
 80018e0:	20000a6a 	.word	0x20000a6a
 80018e4:	20000a74 	.word	0x20000a74
 80018e8:	20000a78 	.word	0x20000a78
 80018ec:	20000004 	.word	0x20000004
 80018f0:	20000b5c 	.word	0x20000b5c
 80018f4:	20000b60 	.word	0x20000b60
 80018f8:	20000024 	.word	0x20000024
 80018fc:	20000a4c 	.word	0x20000a4c
 8001900:	20000028 	.word	0x20000028
 8001904:	20000a64 	.word	0x20000a64
 8001908:	2000002c 	.word	0x2000002c
 800190c:	20000030 	.word	0x20000030
 8001910:	20000034 	.word	0x20000034
 8001914:	20000038 	.word	0x20000038
 8001918:	20000a48 	.word	0x20000a48
 800191c:	20000b67 	.word	0x20000b67

08001920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b094      	sub	sp, #80	@ 0x50
 8001924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001926:	f107 0318 	add.w	r3, r7, #24
 800192a:	2238      	movs	r2, #56	@ 0x38
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f00f ff51 	bl	80117d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001942:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001946:	f006 ff83 	bl	8008850 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800194a:	2322      	movs	r3, #34	@ 0x22
 800194c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800194e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001954:	2340      	movs	r3, #64	@ 0x40
 8001956:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001958:	2301      	movs	r3, #1
 800195a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800195c:	2302      	movs	r3, #2
 800195e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001960:	2302      	movs	r3, #2
 8001962:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001964:	2304      	movs	r3, #4
 8001966:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001968:	234b      	movs	r3, #75	@ 0x4b
 800196a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800196c:	2302      	movs	r3, #2
 800196e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001970:	2302      	movs	r3, #2
 8001972:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001974:	2302      	movs	r3, #2
 8001976:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001978:	f107 0318 	add.w	r3, r7, #24
 800197c:	4618      	mov	r0, r3
 800197e:	f007 f81b 	bl	80089b8 <HAL_RCC_OscConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001988:	f001 feca 	bl	8003720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800198c:	230f      	movs	r3, #15
 800198e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001990:	2303      	movs	r3, #3
 8001992:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	2104      	movs	r1, #4
 80019a4:	4618      	mov	r0, r3
 80019a6:	f007 fb19 	bl	8008fdc <HAL_RCC_ClockConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019b0:	f001 feb6 	bl	8003720 <Error_Handler>
  }
}
 80019b4:	bf00      	nop
 80019b6:	3750      	adds	r7, #80	@ 0x50
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08c      	sub	sp, #48	@ 0x30
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80019c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	2220      	movs	r2, #32
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f00f fefe 	bl	80117d6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019da:	4b32      	ldr	r3, [pc, #200]	@ (8001aa4 <MX_ADC1_Init+0xe8>)
 80019dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80019e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019e2:	4b30      	ldr	r3, [pc, #192]	@ (8001aa4 <MX_ADC1_Init+0xe8>)
 80019e4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80019e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019ea:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa4 <MX_ADC1_Init+0xe8>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019f0:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa4 <MX_ADC1_Init+0xe8>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80019f6:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa4 <MX_ADC1_Init+0xe8>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019fc:	4b29      	ldr	r3, [pc, #164]	@ (8001aa4 <MX_ADC1_Init+0xe8>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a02:	4b28      	ldr	r3, [pc, #160]	@ (8001aa4 <MX_ADC1_Init+0xe8>)
 8001a04:	2204      	movs	r2, #4
 8001a06:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a08:	4b26      	ldr	r3, [pc, #152]	@ (8001aa4 <MX_ADC1_Init+0xe8>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a0e:	4b25      	ldr	r3, [pc, #148]	@ (8001aa4 <MX_ADC1_Init+0xe8>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001a14:	4b23      	ldr	r3, [pc, #140]	@ (8001aa4 <MX_ADC1_Init+0xe8>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a1a:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <MX_ADC1_Init+0xe8>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a22:	4b20      	ldr	r3, [pc, #128]	@ (8001aa4 <MX_ADC1_Init+0xe8>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a28:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa4 <MX_ADC1_Init+0xe8>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <MX_ADC1_Init+0xe8>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a36:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa4 <MX_ADC1_Init+0xe8>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001a3c:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <MX_ADC1_Init+0xe8>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a44:	4817      	ldr	r0, [pc, #92]	@ (8001aa4 <MX_ADC1_Init+0xe8>)
 8001a46:	f002 ff45 	bl	80048d4 <HAL_ADC_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001a50:	f001 fe66 	bl	8003720 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a54:	2300      	movs	r3, #0
 8001a56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4811      	ldr	r0, [pc, #68]	@ (8001aa4 <MX_ADC1_Init+0xe8>)
 8001a60:	f004 f85a 	bl	8005b18 <HAL_ADCEx_MultiModeConfigChannel>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001a6a:	f001 fe59 	bl	8003720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <MX_ADC1_Init+0xec>)
 8001a70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a72:	2306      	movs	r3, #6
 8001a74:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001a76:	2307      	movs	r3, #7
 8001a78:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a7a:	237f      	movs	r3, #127	@ 0x7f
 8001a7c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a7e:	2304      	movs	r3, #4
 8001a80:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4806      	ldr	r0, [pc, #24]	@ (8001aa4 <MX_ADC1_Init+0xe8>)
 8001a8c:	f003 f9c6 	bl	8004e1c <HAL_ADC_ConfigChannel>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001a96:	f001 fe43 	bl	8003720 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	3730      	adds	r7, #48	@ 0x30
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200003b4 	.word	0x200003b4
 8001aa8:	cb840000 	.word	0xcb840000

08001aac <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	@ 0x30
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f00f fe86 	bl	80117d6 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001aca:	4b57      	ldr	r3, [pc, #348]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001acc:	4a57      	ldr	r2, [pc, #348]	@ (8001c2c <MX_ADC3_Init+0x180>)
 8001ace:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001ad0:	4b55      	ldr	r3, [pc, #340]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001ad2:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001ad6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001ad8:	4b53      	ldr	r3, [pc, #332]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ade:	4b52      	ldr	r3, [pc, #328]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001ae4:	4b50      	ldr	r3, [pc, #320]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001aea:	4b4f      	ldr	r3, [pc, #316]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001af0:	4b4d      	ldr	r3, [pc, #308]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001af2:	2204      	movs	r2, #4
 8001af4:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001af6:	4b4c      	ldr	r3, [pc, #304]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001afc:	4b4a      	ldr	r3, [pc, #296]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 5;
 8001b02:	4b49      	ldr	r3, [pc, #292]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001b04:	2205      	movs	r2, #5
 8001b06:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001b08:	4b47      	ldr	r3, [pc, #284]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b10:	4b45      	ldr	r3, [pc, #276]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b16:	4b44      	ldr	r3, [pc, #272]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001b1c:	4b42      	ldr	r3, [pc, #264]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001b24:	4b40      	ldr	r3, [pc, #256]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001b26:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001b2c:	4b3e      	ldr	r3, [pc, #248]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001b34:	483c      	ldr	r0, [pc, #240]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001b36:	f002 fecd 	bl	80048d4 <HAL_ADC_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 8001b40:	f001 fdee 	bl	8003720 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b44:	2300      	movs	r3, #0
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001b48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4836      	ldr	r0, [pc, #216]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001b50:	f003 ffe2 	bl	8005b18 <HAL_ADCEx_MultiModeConfigChannel>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001b5a:	f001 fde1 	bl	8003720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b5e:	4b34      	ldr	r3, [pc, #208]	@ (8001c30 <MX_ADC3_Init+0x184>)
 8001b60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b62:	2306      	movs	r3, #6
 8001b64:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b6a:	237f      	movs	r3, #127	@ 0x7f
 8001b6c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 38;
 8001b72:	2326      	movs	r3, #38	@ 0x26
 8001b74:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 8001b76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b7a:	61fb      	str	r3, [r7, #28]
  sConfig.OffsetSaturation = DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	4619      	mov	r1, r3
 8001b86:	4828      	ldr	r0, [pc, #160]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001b88:	f003 f948 	bl	8004e1c <HAL_ADC_ConfigChannel>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001b92:	f001 fdc5 	bl	8003720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001b96:	4b27      	ldr	r3, [pc, #156]	@ (8001c34 <MX_ADC3_Init+0x188>)
 8001b98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b9a:	230c      	movs	r3, #12
 8001b9c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_2;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 37;
 8001ba2:	2325      	movs	r3, #37	@ 0x25
 8001ba4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	4619      	mov	r1, r3
 8001baa:	481f      	ldr	r0, [pc, #124]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001bac:	f003 f936 	bl	8004e1c <HAL_ADC_ConfigChannel>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_ADC3_Init+0x10e>
  {
    Error_Handler();
 8001bb6:	f001 fdb3 	bl	8003720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001bba:	4b1f      	ldr	r3, [pc, #124]	@ (8001c38 <MX_ADC3_Init+0x18c>)
 8001bbc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001bbe:	2312      	movs	r3, #18
 8001bc0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_3;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 8;
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4816      	ldr	r0, [pc, #88]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001bd0:	f003 f924 	bl	8004e1c <HAL_ADC_ConfigChannel>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_ADC3_Init+0x132>
  {
    Error_Handler();
 8001bda:	f001 fda1 	bl	8003720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001bde:	4b17      	ldr	r3, [pc, #92]	@ (8001c3c <MX_ADC3_Init+0x190>)
 8001be0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001be2:	2318      	movs	r3, #24
 8001be4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001be6:	2304      	movs	r3, #4
 8001be8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	480d      	ldr	r0, [pc, #52]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001bf4:	f003 f912 	bl	8004e1c <HAL_ADC_ConfigChannel>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 8001bfe:	f001 fd8f 	bl	8003720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001c02:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <MX_ADC3_Init+0x194>)
 8001c04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001c06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	@ (8001c28 <MX_ADC3_Init+0x17c>)
 8001c12:	f003 f903 	bl	8004e1c <HAL_ADC_ConfigChannel>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 8001c1c:	f001 fd80 	bl	8003720 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001c20:	bf00      	nop
 8001c22:	3730      	adds	r7, #48	@ 0x30
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000420 	.word	0x20000420
 8001c2c:	50000400 	.word	0x50000400
 8001c30:	04300002 	.word	0x04300002
 8001c34:	08600004 	.word	0x08600004
 8001c38:	0c900008 	.word	0x0c900008
 8001c3c:	10c00010 	.word	0x10c00010
 8001c40:	14f00020 	.word	0x14f00020

08001c44 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c4a:	463b      	mov	r3, r7
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f00f fdc0 	bl	80117d6 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001c56:	4b2b      	ldr	r3, [pc, #172]	@ (8001d04 <MX_ADC4_Init+0xc0>)
 8001c58:	4a2b      	ldr	r2, [pc, #172]	@ (8001d08 <MX_ADC4_Init+0xc4>)
 8001c5a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001c5c:	4b29      	ldr	r3, [pc, #164]	@ (8001d04 <MX_ADC4_Init+0xc0>)
 8001c5e:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001c62:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001c64:	4b27      	ldr	r3, [pc, #156]	@ (8001d04 <MX_ADC4_Init+0xc0>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c6a:	4b26      	ldr	r3, [pc, #152]	@ (8001d04 <MX_ADC4_Init+0xc0>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001c70:	4b24      	ldr	r3, [pc, #144]	@ (8001d04 <MX_ADC4_Init+0xc0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c76:	4b23      	ldr	r3, [pc, #140]	@ (8001d04 <MX_ADC4_Init+0xc0>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c7c:	4b21      	ldr	r3, [pc, #132]	@ (8001d04 <MX_ADC4_Init+0xc0>)
 8001c7e:	2204      	movs	r2, #4
 8001c80:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001c82:	4b20      	ldr	r3, [pc, #128]	@ (8001d04 <MX_ADC4_Init+0xc0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001c88:	4b1e      	ldr	r3, [pc, #120]	@ (8001d04 <MX_ADC4_Init+0xc0>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d04 <MX_ADC4_Init+0xc0>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	@ (8001d04 <MX_ADC4_Init+0xc0>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c9c:	4b19      	ldr	r3, [pc, #100]	@ (8001d04 <MX_ADC4_Init+0xc0>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ca2:	4b18      	ldr	r3, [pc, #96]	@ (8001d04 <MX_ADC4_Init+0xc0>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001ca8:	4b16      	ldr	r3, [pc, #88]	@ (8001d04 <MX_ADC4_Init+0xc0>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001cb0:	4b14      	ldr	r3, [pc, #80]	@ (8001d04 <MX_ADC4_Init+0xc0>)
 8001cb2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	@ (8001d04 <MX_ADC4_Init+0xc0>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001cc0:	4810      	ldr	r0, [pc, #64]	@ (8001d04 <MX_ADC4_Init+0xc0>)
 8001cc2:	f002 fe07 	bl	80048d4 <HAL_ADC_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8001ccc:	f001 fd28 	bl	8003720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8001d0c <MX_ADC4_Init+0xc8>)
 8001cd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cd4:	2306      	movs	r3, #6
 8001cd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001cd8:	2307      	movs	r3, #7
 8001cda:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001cdc:	237f      	movs	r3, #127	@ 0x7f
 8001cde:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001ce8:	463b      	mov	r3, r7
 8001cea:	4619      	mov	r1, r3
 8001cec:	4805      	ldr	r0, [pc, #20]	@ (8001d04 <MX_ADC4_Init+0xc0>)
 8001cee:	f003 f895 	bl	8004e1c <HAL_ADC_ConfigChannel>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 8001cf8:	f001 fd12 	bl	8003720 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001cfc:	bf00      	nop
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2000048c 	.word	0x2000048c
 8001d08:	50000500 	.word	0x50000500
 8001d0c:	04300002 	.word	0x04300002

08001d10 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d16:	463b      	mov	r3, r7
 8001d18:	2220      	movs	r2, #32
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f00f fd5a 	bl	80117d6 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001d22:	4b31      	ldr	r3, [pc, #196]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001d24:	4a31      	ldr	r2, [pc, #196]	@ (8001dec <MX_ADC5_Init+0xdc>)
 8001d26:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001d28:	4b2f      	ldr	r3, [pc, #188]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001d2a:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001d2e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001d30:	4b2d      	ldr	r3, [pc, #180]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d36:	4b2c      	ldr	r3, [pc, #176]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d42:	4b29      	ldr	r3, [pc, #164]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d48:	4b27      	ldr	r3, [pc, #156]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001d4e:	4b26      	ldr	r3, [pc, #152]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8001d54:	4b24      	ldr	r3, [pc, #144]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8001d5a:	4b23      	ldr	r3, [pc, #140]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001d60:	4b21      	ldr	r3, [pc, #132]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d68:	4b1f      	ldr	r3, [pc, #124]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001d74:	4b1c      	ldr	r3, [pc, #112]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8001d82:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8001d8a:	4b17      	ldr	r3, [pc, #92]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001d8c:	221c      	movs	r2, #28
 8001d8e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8001d90:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001d92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d96:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001d98:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001d9e:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001da4:	4810      	ldr	r0, [pc, #64]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001da6:	f002 fd95 	bl	80048d4 <HAL_ADC_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_ADC5_Init+0xa4>
  {
    Error_Handler();
 8001db0:	f001 fcb6 	bl	8003720 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001db4:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <MX_ADC5_Init+0xe0>)
 8001db6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001db8:	2306      	movs	r3, #6
 8001dba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001dc0:	237f      	movs	r3, #127	@ 0x7f
 8001dc2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001dcc:	463b      	mov	r3, r7
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4805      	ldr	r0, [pc, #20]	@ (8001de8 <MX_ADC5_Init+0xd8>)
 8001dd2:	f003 f823 	bl	8004e1c <HAL_ADC_ConfigChannel>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_ADC5_Init+0xd0>
  {
    Error_Handler();
 8001ddc:	f001 fca0 	bl	8003720 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001de0:	bf00      	nop
 8001de2:	3720      	adds	r7, #32
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200004f8 	.word	0x200004f8
 8001dec:	50000600 	.word	0x50000600
 8001df0:	04300002 	.word	0x04300002

08001df4 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001df8:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <MX_CORDIC_Init+0x20>)
 8001dfa:	4a07      	ldr	r2, [pc, #28]	@ (8001e18 <MX_CORDIC_Init+0x24>)
 8001dfc:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001dfe:	4805      	ldr	r0, [pc, #20]	@ (8001e14 <MX_CORDIC_Init+0x20>)
 8001e00:	f003 ff92 	bl	8005d28 <HAL_CORDIC_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001e0a:	f001 fc89 	bl	8003720 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000684 	.word	0x20000684
 8001e18:	40020c00 	.word	0x40020c00

08001e1c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08c      	sub	sp, #48	@ 0x30
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001e22:	463b      	mov	r3, r7
 8001e24:	2230      	movs	r2, #48	@ 0x30
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f00f fcd4 	bl	80117d6 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea8 <MX_DAC1_Init+0x8c>)
 8001e30:	4a1e      	ldr	r2, [pc, #120]	@ (8001eac <MX_DAC1_Init+0x90>)
 8001e32:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001e34:	481c      	ldr	r0, [pc, #112]	@ (8001ea8 <MX_DAC1_Init+0x8c>)
 8001e36:	f004 f8b8 	bl	8005faa <HAL_DAC_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001e40:	f001 fc6e 	bl	8003720 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001e44:	2302      	movs	r3, #2
 8001e46:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001e60:	2301      	movs	r3, #1
 8001e62:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001e68:	463b      	mov	r3, r7
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	480e      	ldr	r0, [pc, #56]	@ (8001ea8 <MX_DAC1_Init+0x8c>)
 8001e70:	f004 f9b8 	bl	80061e4 <HAL_DAC_ConfigChannel>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001e7a:	f001 fc51 	bl	8003720 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001e7e:	463b      	mov	r3, r7
 8001e80:	2210      	movs	r2, #16
 8001e82:	4619      	mov	r1, r3
 8001e84:	4808      	ldr	r0, [pc, #32]	@ (8001ea8 <MX_DAC1_Init+0x8c>)
 8001e86:	f004 f9ad 	bl	80061e4 <HAL_DAC_ConfigChannel>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8001e90:	f001 fc46 	bl	8003720 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  __HAL_LINKDMA(&hdac1, DMA_Handle1, hdma_dac1_ch1);
 8001e94:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <MX_DAC1_Init+0x8c>)
 8001e96:	4a06      	ldr	r2, [pc, #24]	@ (8001eb0 <MX_DAC1_Init+0x94>)
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <MX_DAC1_Init+0x94>)
 8001e9c:	4a02      	ldr	r2, [pc, #8]	@ (8001ea8 <MX_DAC1_Init+0x8c>)
 8001e9e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END DAC1_Init 2 */

}
 8001ea0:	bf00      	nop
 8001ea2:	3730      	adds	r7, #48	@ 0x30
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200006ac 	.word	0x200006ac
 8001eac:	50000800 	.word	0x50000800
 8001eb0:	200006d4 	.word	0x200006d4

08001eb4 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08c      	sub	sp, #48	@ 0x30
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001eba:	463b      	mov	r3, r7
 8001ebc:	2230      	movs	r2, #48	@ 0x30
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f00f fc88 	bl	80117d6 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001ec6:	4b16      	ldr	r3, [pc, #88]	@ (8001f20 <MX_DAC2_Init+0x6c>)
 8001ec8:	4a16      	ldr	r2, [pc, #88]	@ (8001f24 <MX_DAC2_Init+0x70>)
 8001eca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001ecc:	4814      	ldr	r0, [pc, #80]	@ (8001f20 <MX_DAC2_Init+0x6c>)
 8001ece:	f004 f86c 	bl	8005faa <HAL_DAC_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001ed8:	f001 fc22 	bl	8003720 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001edc:	2302      	movs	r3, #2
 8001ede:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f00:	463b      	mov	r3, r7
 8001f02:	2200      	movs	r2, #0
 8001f04:	4619      	mov	r1, r3
 8001f06:	4806      	ldr	r0, [pc, #24]	@ (8001f20 <MX_DAC2_Init+0x6c>)
 8001f08:	f004 f96c 	bl	80061e4 <HAL_DAC_ConfigChannel>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8001f12:	f001 fc05 	bl	8003720 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001f16:	bf00      	nop
 8001f18:	3730      	adds	r7, #48	@ 0x30
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	200006c0 	.word	0x200006c0
 8001f24:	50000c00 	.word	0x50000c00

08001f28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b098      	sub	sp, #96	@ 0x60
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f3a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
 8001f48:	611a      	str	r2, [r3, #16]
 8001f4a:	615a      	str	r2, [r3, #20]
 8001f4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	2234      	movs	r2, #52	@ 0x34
 8001f52:	2100      	movs	r1, #0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00f fc3e 	bl	80117d6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f5a:	4b3a      	ldr	r3, [pc, #232]	@ (8002044 <MX_TIM1_Init+0x11c>)
 8001f5c:	4a3a      	ldr	r2, [pc, #232]	@ (8002048 <MX_TIM1_Init+0x120>)
 8001f5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f60:	4b38      	ldr	r3, [pc, #224]	@ (8002044 <MX_TIM1_Init+0x11c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f66:	4b37      	ldr	r3, [pc, #220]	@ (8002044 <MX_TIM1_Init+0x11c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210;
 8001f6c:	4b35      	ldr	r3, [pc, #212]	@ (8002044 <MX_TIM1_Init+0x11c>)
 8001f6e:	22d2      	movs	r2, #210	@ 0xd2
 8001f70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f72:	4b34      	ldr	r3, [pc, #208]	@ (8002044 <MX_TIM1_Init+0x11c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f78:	4b32      	ldr	r3, [pc, #200]	@ (8002044 <MX_TIM1_Init+0x11c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7e:	4b31      	ldr	r3, [pc, #196]	@ (8002044 <MX_TIM1_Init+0x11c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f84:	482f      	ldr	r0, [pc, #188]	@ (8002044 <MX_TIM1_Init+0x11c>)
 8001f86:	f007 fe02 	bl	8009b8e <HAL_TIM_PWM_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001f90:	f001 fbc6 	bl	8003720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f94:	2300      	movs	r3, #0
 8001f96:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fa0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4827      	ldr	r0, [pc, #156]	@ (8002044 <MX_TIM1_Init+0x11c>)
 8001fa8:	f008 ff9c 	bl	800aee4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001fb2:	f001 fbb5 	bl	8003720 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb6:	2360      	movs	r3, #96	@ 0x60
 8001fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fd2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	4619      	mov	r1, r3
 8001fda:	481a      	ldr	r0, [pc, #104]	@ (8002044 <MX_TIM1_Init+0x11c>)
 8001fdc:	f008 f890 	bl	800a100 <HAL_TIM_PWM_ConfigChannel>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001fe6:	f001 fb9b 	bl	8003720 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ffe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002002:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002008:	2300      	movs	r3, #0
 800200a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800200c:	2300      	movs	r3, #0
 800200e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002010:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002014:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800201a:	2300      	movs	r3, #0
 800201c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	4619      	mov	r1, r3
 8002026:	4807      	ldr	r0, [pc, #28]	@ (8002044 <MX_TIM1_Init+0x11c>)
 8002028:	f008 fff2 	bl	800b010 <HAL_TIMEx_ConfigBreakDeadTime>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002032:	f001 fb75 	bl	8003720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002036:	4803      	ldr	r0, [pc, #12]	@ (8002044 <MX_TIM1_Init+0x11c>)
 8002038:	f001 ff10 	bl	8003e5c <HAL_TIM_MspPostInit>

}
 800203c:	bf00      	nop
 800203e:	3760      	adds	r7, #96	@ 0x60
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000794 	.word	0x20000794
 8002048:	40012c00 	.word	0x40012c00

0800204c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08e      	sub	sp, #56	@ 0x38
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002052:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002060:	f107 031c 	add.w	r3, r7, #28
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800206c:	463b      	mov	r3, r7
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]
 8002078:	611a      	str	r2, [r3, #16]
 800207a:	615a      	str	r2, [r3, #20]
 800207c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800207e:	4b2d      	ldr	r3, [pc, #180]	@ (8002134 <MX_TIM4_Init+0xe8>)
 8002080:	4a2d      	ldr	r2, [pc, #180]	@ (8002138 <MX_TIM4_Init+0xec>)
 8002082:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002084:	4b2b      	ldr	r3, [pc, #172]	@ (8002134 <MX_TIM4_Init+0xe8>)
 8002086:	2200      	movs	r2, #0
 8002088:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208a:	4b2a      	ldr	r3, [pc, #168]	@ (8002134 <MX_TIM4_Init+0xe8>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 679;
 8002090:	4b28      	ldr	r3, [pc, #160]	@ (8002134 <MX_TIM4_Init+0xe8>)
 8002092:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8002096:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002098:	4b26      	ldr	r3, [pc, #152]	@ (8002134 <MX_TIM4_Init+0xe8>)
 800209a:	2200      	movs	r2, #0
 800209c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209e:	4b25      	ldr	r3, [pc, #148]	@ (8002134 <MX_TIM4_Init+0xe8>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80020a4:	4823      	ldr	r0, [pc, #140]	@ (8002134 <MX_TIM4_Init+0xe8>)
 80020a6:	f007 fc03 	bl	80098b0 <HAL_TIM_Base_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80020b0:	f001 fb36 	bl	8003720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80020ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020be:	4619      	mov	r1, r3
 80020c0:	481c      	ldr	r0, [pc, #112]	@ (8002134 <MX_TIM4_Init+0xe8>)
 80020c2:	f008 f931 	bl	800a328 <HAL_TIM_ConfigClockSource>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80020cc:	f001 fb28 	bl	8003720 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80020d0:	4818      	ldr	r0, [pc, #96]	@ (8002134 <MX_TIM4_Init+0xe8>)
 80020d2:	f007 fd5c 	bl	8009b8e <HAL_TIM_PWM_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80020dc:	f001 fb20 	bl	8003720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020e8:	f107 031c 	add.w	r3, r7, #28
 80020ec:	4619      	mov	r1, r3
 80020ee:	4811      	ldr	r0, [pc, #68]	@ (8002134 <MX_TIM4_Init+0xe8>)
 80020f0:	f008 fef8 	bl	800aee4 <HAL_TIMEx_MasterConfigSynchronization>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80020fa:	f001 fb11 	bl	8003720 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020fe:	2360      	movs	r3, #96	@ 0x60
 8002100:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800210e:	463b      	mov	r3, r7
 8002110:	2200      	movs	r2, #0
 8002112:	4619      	mov	r1, r3
 8002114:	4807      	ldr	r0, [pc, #28]	@ (8002134 <MX_TIM4_Init+0xe8>)
 8002116:	f007 fff3 	bl	800a100 <HAL_TIM_PWM_ConfigChannel>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002120:	f001 fafe 	bl	8003720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002124:	4803      	ldr	r0, [pc, #12]	@ (8002134 <MX_TIM4_Init+0xe8>)
 8002126:	f001 fe99 	bl	8003e5c <HAL_TIM_MspPostInit>

}
 800212a:	bf00      	nop
 800212c:	3738      	adds	r7, #56	@ 0x38
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200007e0 	.word	0x200007e0
 8002138:	40000800 	.word	0x40000800

0800213c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800214c:	4b19      	ldr	r3, [pc, #100]	@ (80021b4 <MX_TIM6_Init+0x78>)
 800214e:	4a1a      	ldr	r2, [pc, #104]	@ (80021b8 <MX_TIM6_Init+0x7c>)
 8002150:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11549;
 8002152:	4b18      	ldr	r3, [pc, #96]	@ (80021b4 <MX_TIM6_Init+0x78>)
 8002154:	f642 521d 	movw	r2, #11549	@ 0x2d1d
 8002158:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215a:	4b16      	ldr	r3, [pc, #88]	@ (80021b4 <MX_TIM6_Init+0x78>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64934;
 8002160:	4b14      	ldr	r3, [pc, #80]	@ (80021b4 <MX_TIM6_Init+0x78>)
 8002162:	f64f 52a6 	movw	r2, #64934	@ 0xfda6
 8002166:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002168:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <MX_TIM6_Init+0x78>)
 800216a:	2200      	movs	r2, #0
 800216c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800216e:	4811      	ldr	r0, [pc, #68]	@ (80021b4 <MX_TIM6_Init+0x78>)
 8002170:	f007 fb9e 	bl	80098b0 <HAL_TIM_Base_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800217a:	f001 fad1 	bl	8003720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800217e:	2300      	movs	r3, #0
 8002180:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	4619      	mov	r1, r3
 800218a:	480a      	ldr	r0, [pc, #40]	@ (80021b4 <MX_TIM6_Init+0x78>)
 800218c:	f008 feaa 	bl	800aee4 <HAL_TIMEx_MasterConfigSynchronization>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002196:	f001 fac3 	bl	8003720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	2100      	movs	r1, #0
 800219e:	2036      	movs	r0, #54	@ 0x36
 80021a0:	f003 fecf 	bl	8005f42 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021a4:	2036      	movs	r0, #54	@ 0x36
 80021a6:	f003 fee6 	bl	8005f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM6_Init 2 */

}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	2000082c 	.word	0x2000082c
 80021b8:	40001000 	.word	0x40001000

080021bc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80021cc:	4b14      	ldr	r3, [pc, #80]	@ (8002220 <MX_TIM7_Init+0x64>)
 80021ce:	4a15      	ldr	r2, [pc, #84]	@ (8002224 <MX_TIM7_Init+0x68>)
 80021d0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 14999;
 80021d2:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <MX_TIM7_Init+0x64>)
 80021d4:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80021d8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021da:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <MX_TIM7_Init+0x64>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80021e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002220 <MX_TIM7_Init+0x64>)
 80021e2:	2209      	movs	r2, #9
 80021e4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002220 <MX_TIM7_Init+0x64>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80021ec:	480c      	ldr	r0, [pc, #48]	@ (8002220 <MX_TIM7_Init+0x64>)
 80021ee:	f007 fb5f 	bl	80098b0 <HAL_TIM_Base_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80021f8:	f001 fa92 	bl	8003720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021fc:	2300      	movs	r3, #0
 80021fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002204:	1d3b      	adds	r3, r7, #4
 8002206:	4619      	mov	r1, r3
 8002208:	4805      	ldr	r0, [pc, #20]	@ (8002220 <MX_TIM7_Init+0x64>)
 800220a:	f008 fe6b 	bl	800aee4 <HAL_TIMEx_MasterConfigSynchronization>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002214:	f001 fa84 	bl	8003720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000878 	.word	0x20000878
 8002224:	40001400 	.word	0x40001400

08002228 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b098      	sub	sp, #96	@ 0x60
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800222e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800223a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	609a      	str	r2, [r3, #8]
 8002246:	60da      	str	r2, [r3, #12]
 8002248:	611a      	str	r2, [r3, #16]
 800224a:	615a      	str	r2, [r3, #20]
 800224c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	2234      	movs	r2, #52	@ 0x34
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f00f fabe 	bl	80117d6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800225a:	4b3a      	ldr	r3, [pc, #232]	@ (8002344 <MX_TIM8_Init+0x11c>)
 800225c:	4a3a      	ldr	r2, [pc, #232]	@ (8002348 <MX_TIM8_Init+0x120>)
 800225e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002260:	4b38      	ldr	r3, [pc, #224]	@ (8002344 <MX_TIM8_Init+0x11c>)
 8002262:	2200      	movs	r2, #0
 8002264:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002266:	4b37      	ldr	r3, [pc, #220]	@ (8002344 <MX_TIM8_Init+0x11c>)
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 210;
 800226c:	4b35      	ldr	r3, [pc, #212]	@ (8002344 <MX_TIM8_Init+0x11c>)
 800226e:	22d2      	movs	r2, #210	@ 0xd2
 8002270:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002272:	4b34      	ldr	r3, [pc, #208]	@ (8002344 <MX_TIM8_Init+0x11c>)
 8002274:	2200      	movs	r2, #0
 8002276:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002278:	4b32      	ldr	r3, [pc, #200]	@ (8002344 <MX_TIM8_Init+0x11c>)
 800227a:	2200      	movs	r2, #0
 800227c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800227e:	4b31      	ldr	r3, [pc, #196]	@ (8002344 <MX_TIM8_Init+0x11c>)
 8002280:	2200      	movs	r2, #0
 8002282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002284:	482f      	ldr	r0, [pc, #188]	@ (8002344 <MX_TIM8_Init+0x11c>)
 8002286:	f007 fc82 	bl	8009b8e <HAL_TIM_PWM_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002290:	f001 fa46 	bl	8003720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002294:	2300      	movs	r3, #0
 8002296:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002298:	2300      	movs	r3, #0
 800229a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80022a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022a4:	4619      	mov	r1, r3
 80022a6:	4827      	ldr	r0, [pc, #156]	@ (8002344 <MX_TIM8_Init+0x11c>)
 80022a8:	f008 fe1c 	bl	800aee4 <HAL_TIMEx_MasterConfigSynchronization>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 80022b2:	f001 fa35 	bl	8003720 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022b6:	2360      	movs	r3, #96	@ 0x60
 80022b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022be:	2300      	movs	r3, #0
 80022c0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022c2:	2300      	movs	r3, #0
 80022c4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022ca:	2300      	movs	r3, #0
 80022cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80022d6:	2204      	movs	r2, #4
 80022d8:	4619      	mov	r1, r3
 80022da:	481a      	ldr	r0, [pc, #104]	@ (8002344 <MX_TIM8_Init+0x11c>)
 80022dc:	f007 ff10 	bl	800a100 <HAL_TIM_PWM_ConfigChannel>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80022e6:	f001 fa1b 	bl	8003720 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002302:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002308:	2300      	movs	r3, #0
 800230a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800230c:	2300      	movs	r3, #0
 800230e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002310:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002314:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800231a:	2300      	movs	r3, #0
 800231c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800231e:	2300      	movs	r3, #0
 8002320:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	4619      	mov	r1, r3
 8002326:	4807      	ldr	r0, [pc, #28]	@ (8002344 <MX_TIM8_Init+0x11c>)
 8002328:	f008 fe72 	bl	800b010 <HAL_TIMEx_ConfigBreakDeadTime>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8002332:	f001 f9f5 	bl	8003720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002336:	4803      	ldr	r0, [pc, #12]	@ (8002344 <MX_TIM8_Init+0x11c>)
 8002338:	f001 fd90 	bl	8003e5c <HAL_TIM_MspPostInit>

}
 800233c:	bf00      	nop
 800233e:	3760      	adds	r7, #96	@ 0x60
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	200008c4 	.word	0x200008c4
 8002348:	40013400 	.word	0x40013400

0800234c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002352:	f107 0310 	add.w	r3, r7, #16
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800236a:	4b1f      	ldr	r3, [pc, #124]	@ (80023e8 <MX_TIM15_Init+0x9c>)
 800236c:	4a1f      	ldr	r2, [pc, #124]	@ (80023ec <MX_TIM15_Init+0xa0>)
 800236e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1499;
 8002370:	4b1d      	ldr	r3, [pc, #116]	@ (80023e8 <MX_TIM15_Init+0x9c>)
 8002372:	f240 52db 	movw	r2, #1499	@ 0x5db
 8002376:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002378:	4b1b      	ldr	r3, [pc, #108]	@ (80023e8 <MX_TIM15_Init+0x9c>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 4;
 800237e:	4b1a      	ldr	r3, [pc, #104]	@ (80023e8 <MX_TIM15_Init+0x9c>)
 8002380:	2204      	movs	r2, #4
 8002382:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002384:	4b18      	ldr	r3, [pc, #96]	@ (80023e8 <MX_TIM15_Init+0x9c>)
 8002386:	2200      	movs	r2, #0
 8002388:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800238a:	4b17      	ldr	r3, [pc, #92]	@ (80023e8 <MX_TIM15_Init+0x9c>)
 800238c:	2200      	movs	r2, #0
 800238e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002390:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <MX_TIM15_Init+0x9c>)
 8002392:	2200      	movs	r2, #0
 8002394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002396:	4814      	ldr	r0, [pc, #80]	@ (80023e8 <MX_TIM15_Init+0x9c>)
 8002398:	f007 fa8a 	bl	80098b0 <HAL_TIM_Base_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80023a2:	f001 f9bd 	bl	8003720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80023ac:	f107 0310 	add.w	r3, r7, #16
 80023b0:	4619      	mov	r1, r3
 80023b2:	480d      	ldr	r0, [pc, #52]	@ (80023e8 <MX_TIM15_Init+0x9c>)
 80023b4:	f007 ffb8 	bl	800a328 <HAL_TIM_ConfigClockSource>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80023be:	f001 f9af 	bl	8003720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	4619      	mov	r1, r3
 80023ce:	4806      	ldr	r0, [pc, #24]	@ (80023e8 <MX_TIM15_Init+0x9c>)
 80023d0:	f008 fd88 	bl	800aee4 <HAL_TIMEx_MasterConfigSynchronization>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80023da:	f001 f9a1 	bl	8003720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80023de:	bf00      	nop
 80023e0:	3720      	adds	r7, #32
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000910 	.word	0x20000910
 80023ec:	40014000 	.word	0x40014000

080023f0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80023f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002434 <MX_TIM16_Init+0x44>)
 80023f6:	4a10      	ldr	r2, [pc, #64]	@ (8002438 <MX_TIM16_Init+0x48>)
 80023f8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 14999;
 80023fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002434 <MX_TIM16_Init+0x44>)
 80023fc:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8002400:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002402:	4b0c      	ldr	r3, [pc, #48]	@ (8002434 <MX_TIM16_Init+0x44>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 8002408:	4b0a      	ldr	r3, [pc, #40]	@ (8002434 <MX_TIM16_Init+0x44>)
 800240a:	2209      	movs	r2, #9
 800240c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240e:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <MX_TIM16_Init+0x44>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002414:	4b07      	ldr	r3, [pc, #28]	@ (8002434 <MX_TIM16_Init+0x44>)
 8002416:	2200      	movs	r2, #0
 8002418:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241a:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <MX_TIM16_Init+0x44>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002420:	4804      	ldr	r0, [pc, #16]	@ (8002434 <MX_TIM16_Init+0x44>)
 8002422:	f007 fa45 	bl	80098b0 <HAL_TIM_Base_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800242c:	f001 f978 	bl	8003720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}
 8002434:	2000095c 	.word	0x2000095c
 8002438:	40014400 	.word	0x40014400

0800243c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002440:	4b22      	ldr	r3, [pc, #136]	@ (80024cc <MX_UART4_Init+0x90>)
 8002442:	4a23      	ldr	r2, [pc, #140]	@ (80024d0 <MX_UART4_Init+0x94>)
 8002444:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002446:	4b21      	ldr	r3, [pc, #132]	@ (80024cc <MX_UART4_Init+0x90>)
 8002448:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800244c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800244e:	4b1f      	ldr	r3, [pc, #124]	@ (80024cc <MX_UART4_Init+0x90>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002454:	4b1d      	ldr	r3, [pc, #116]	@ (80024cc <MX_UART4_Init+0x90>)
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800245a:	4b1c      	ldr	r3, [pc, #112]	@ (80024cc <MX_UART4_Init+0x90>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002460:	4b1a      	ldr	r3, [pc, #104]	@ (80024cc <MX_UART4_Init+0x90>)
 8002462:	220c      	movs	r2, #12
 8002464:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002466:	4b19      	ldr	r3, [pc, #100]	@ (80024cc <MX_UART4_Init+0x90>)
 8002468:	2200      	movs	r2, #0
 800246a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800246c:	4b17      	ldr	r3, [pc, #92]	@ (80024cc <MX_UART4_Init+0x90>)
 800246e:	2200      	movs	r2, #0
 8002470:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002472:	4b16      	ldr	r3, [pc, #88]	@ (80024cc <MX_UART4_Init+0x90>)
 8002474:	2200      	movs	r2, #0
 8002476:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002478:	4b14      	ldr	r3, [pc, #80]	@ (80024cc <MX_UART4_Init+0x90>)
 800247a:	2200      	movs	r2, #0
 800247c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800247e:	4b13      	ldr	r3, [pc, #76]	@ (80024cc <MX_UART4_Init+0x90>)
 8002480:	2200      	movs	r2, #0
 8002482:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002484:	4811      	ldr	r0, [pc, #68]	@ (80024cc <MX_UART4_Init+0x90>)
 8002486:	f008 fe9d 	bl	800b1c4 <HAL_UART_Init>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002490:	f001 f946 	bl	8003720 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002494:	2100      	movs	r1, #0
 8002496:	480d      	ldr	r0, [pc, #52]	@ (80024cc <MX_UART4_Init+0x90>)
 8002498:	f009 fc38 	bl	800bd0c <HAL_UARTEx_SetTxFifoThreshold>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80024a2:	f001 f93d 	bl	8003720 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024a6:	2100      	movs	r1, #0
 80024a8:	4808      	ldr	r0, [pc, #32]	@ (80024cc <MX_UART4_Init+0x90>)
 80024aa:	f009 fc6d 	bl	800bd88 <HAL_UARTEx_SetRxFifoThreshold>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80024b4:	f001 f934 	bl	8003720 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80024b8:	4804      	ldr	r0, [pc, #16]	@ (80024cc <MX_UART4_Init+0x90>)
 80024ba:	f009 fbee 	bl	800bc9a <HAL_UARTEx_DisableFifoMode>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80024c4:	f001 f92c 	bl	8003720 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	200009a8 	.word	0x200009a8
 80024d0:	40004c00 	.word	0x40004c00

080024d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80024da:	4b22      	ldr	r3, [pc, #136]	@ (8002564 <MX_DMA_Init+0x90>)
 80024dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024de:	4a21      	ldr	r2, [pc, #132]	@ (8002564 <MX_DMA_Init+0x90>)
 80024e0:	f043 0304 	orr.w	r3, r3, #4
 80024e4:	6493      	str	r3, [r2, #72]	@ 0x48
 80024e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002564 <MX_DMA_Init+0x90>)
 80024e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	607b      	str	r3, [r7, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002564 <MX_DMA_Init+0x90>)
 80024f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002564 <MX_DMA_Init+0x90>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80024fe:	4b19      	ldr	r3, [pc, #100]	@ (8002564 <MX_DMA_Init+0x90>)
 8002500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800250a:	2200      	movs	r2, #0
 800250c:	2100      	movs	r1, #0
 800250e:	200b      	movs	r0, #11
 8002510:	f003 fd17 	bl	8005f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002514:	200b      	movs	r0, #11
 8002516:	f003 fd2e 	bl	8005f76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	2100      	movs	r1, #0
 800251e:	200c      	movs	r0, #12
 8002520:	f003 fd0f 	bl	8005f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002524:	200c      	movs	r0, #12
 8002526:	f003 fd26 	bl	8005f76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2100      	movs	r1, #0
 800252e:	200d      	movs	r0, #13
 8002530:	f003 fd07 	bl	8005f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002534:	200d      	movs	r0, #13
 8002536:	f003 fd1e 	bl	8005f76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	200e      	movs	r0, #14
 8002540:	f003 fcff 	bl	8005f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002544:	200e      	movs	r0, #14
 8002546:	f003 fd16 	bl	8005f76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	2100      	movs	r1, #0
 800254e:	200f      	movs	r0, #15
 8002550:	f003 fcf7 	bl	8005f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002554:	200f      	movs	r0, #15
 8002556:	f003 fd0e 	bl	8005f76 <HAL_NVIC_EnableIRQ>

}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000

08002568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08c      	sub	sp, #48	@ 0x30
 800256c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256e:	f107 031c 	add.w	r3, r7, #28
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	609a      	str	r2, [r3, #8]
 800257a:	60da      	str	r2, [r3, #12]
 800257c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800257e:	4b9a      	ldr	r3, [pc, #616]	@ (80027e8 <MX_GPIO_Init+0x280>)
 8002580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002582:	4a99      	ldr	r2, [pc, #612]	@ (80027e8 <MX_GPIO_Init+0x280>)
 8002584:	f043 0310 	orr.w	r3, r3, #16
 8002588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800258a:	4b97      	ldr	r3, [pc, #604]	@ (80027e8 <MX_GPIO_Init+0x280>)
 800258c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	61bb      	str	r3, [r7, #24]
 8002594:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002596:	4b94      	ldr	r3, [pc, #592]	@ (80027e8 <MX_GPIO_Init+0x280>)
 8002598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259a:	4a93      	ldr	r2, [pc, #588]	@ (80027e8 <MX_GPIO_Init+0x280>)
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025a2:	4b91      	ldr	r3, [pc, #580]	@ (80027e8 <MX_GPIO_Init+0x280>)
 80025a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025ae:	4b8e      	ldr	r3, [pc, #568]	@ (80027e8 <MX_GPIO_Init+0x280>)
 80025b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b2:	4a8d      	ldr	r2, [pc, #564]	@ (80027e8 <MX_GPIO_Init+0x280>)
 80025b4:	f043 0320 	orr.w	r3, r3, #32
 80025b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025ba:	4b8b      	ldr	r3, [pc, #556]	@ (80027e8 <MX_GPIO_Init+0x280>)
 80025bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c6:	4b88      	ldr	r3, [pc, #544]	@ (80027e8 <MX_GPIO_Init+0x280>)
 80025c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ca:	4a87      	ldr	r2, [pc, #540]	@ (80027e8 <MX_GPIO_Init+0x280>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025d2:	4b85      	ldr	r3, [pc, #532]	@ (80027e8 <MX_GPIO_Init+0x280>)
 80025d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025de:	4b82      	ldr	r3, [pc, #520]	@ (80027e8 <MX_GPIO_Init+0x280>)
 80025e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e2:	4a81      	ldr	r2, [pc, #516]	@ (80027e8 <MX_GPIO_Init+0x280>)
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025ea:	4b7f      	ldr	r3, [pc, #508]	@ (80027e8 <MX_GPIO_Init+0x280>)
 80025ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025f6:	4b7c      	ldr	r3, [pc, #496]	@ (80027e8 <MX_GPIO_Init+0x280>)
 80025f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fa:	4a7b      	ldr	r2, [pc, #492]	@ (80027e8 <MX_GPIO_Init+0x280>)
 80025fc:	f043 0308 	orr.w	r3, r3, #8
 8002600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002602:	4b79      	ldr	r3, [pc, #484]	@ (80027e8 <MX_GPIO_Init+0x280>)
 8002604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 800260e:	2200      	movs	r2, #0
 8002610:	2120      	movs	r1, #32
 8002612:	4876      	ldr	r0, [pc, #472]	@ (80027ec <MX_GPIO_Init+0x284>)
 8002614:	f004 fbb4 	bl	8006d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
 8002618:	2201      	movs	r2, #1
 800261a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800261e:	4874      	ldr	r0, [pc, #464]	@ (80027f0 <MX_GPIO_Init+0x288>)
 8002620:	f004 fbae 	bl	8006d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, GPIO_PIN_RESET);
 8002624:	2200      	movs	r2, #0
 8002626:	2104      	movs	r1, #4
 8002628:	4871      	ldr	r0, [pc, #452]	@ (80027f0 <MX_GPIO_Init+0x288>)
 800262a:	f004 fba9 	bl	8006d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 800262e:	2200      	movs	r2, #0
 8002630:	2120      	movs	r1, #32
 8002632:	4870      	ldr	r0, [pc, #448]	@ (80027f4 <MX_GPIO_Init+0x28c>)
 8002634:	f004 fba4 	bl	8006d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, NOT_RST_2_Pin|CS_OCD_1_Pin, GPIO_PIN_SET);
 8002638:	2201      	movs	r2, #1
 800263a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800263e:	486b      	ldr	r0, [pc, #428]	@ (80027ec <MX_GPIO_Init+0x284>)
 8002640:	f004 fb9e 	bl	8006d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port, NOT_RST_4_Pin, GPIO_PIN_SET);
 8002644:	2201      	movs	r2, #1
 8002646:	2140      	movs	r1, #64	@ 0x40
 8002648:	486a      	ldr	r0, [pc, #424]	@ (80027f4 <MX_GPIO_Init+0x28c>)
 800264a:	f004 fb99 	bl	8006d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port, NOT_RST_3_Pin, GPIO_PIN_SET);
 800264e:	2201      	movs	r2, #1
 8002650:	2101      	movs	r1, #1
 8002652:	4869      	ldr	r0, [pc, #420]	@ (80027f8 <MX_GPIO_Init+0x290>)
 8002654:	f004 fb94 	bl	8006d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port, NOT_RST_1_Pin, GPIO_PIN_SET);
 8002658:	2201      	movs	r2, #1
 800265a:	2180      	movs	r1, #128	@ 0x80
 800265c:	4867      	ldr	r0, [pc, #412]	@ (80027fc <MX_GPIO_Init+0x294>)
 800265e:	f004 fb8f 	bl	8006d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NOT_FAULT_1_Pin CS_FAULT_2_Pin NOT_FAULT_2_Pin CS_FAULT_1_Pin */
  GPIO_InitStruct.Pin = NOT_FAULT_1_Pin|CS_FAULT_2_Pin|NOT_FAULT_2_Pin|CS_FAULT_1_Pin;
 8002662:	f640 0315 	movw	r3, #2069	@ 0x815
 8002666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002668:	2300      	movs	r3, #0
 800266a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002670:	f107 031c 	add.w	r3, r7, #28
 8002674:	4619      	mov	r1, r3
 8002676:	485d      	ldr	r0, [pc, #372]	@ (80027ec <MX_GPIO_Init+0x284>)
 8002678:	f004 f9e8 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_INTERLOCK_Pin */
  GPIO_InitStruct.Pin = RESET_INTERLOCK_Pin;
 800267c:	2320      	movs	r3, #32
 800267e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002680:	2301      	movs	r3, #1
 8002682:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002688:	2300      	movs	r3, #0
 800268a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_INTERLOCK_GPIO_Port, &GPIO_InitStruct);
 800268c:	f107 031c 	add.w	r3, r7, #28
 8002690:	4619      	mov	r1, r3
 8002692:	4856      	ldr	r0, [pc, #344]	@ (80027ec <MX_GPIO_Init+0x284>)
 8002694:	f004 f9da 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_OCD_2_Pin */
  GPIO_InitStruct.Pin = CS_OCD_2_Pin;
 8002698:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800269c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800269e:	2311      	movs	r3, #17
 80026a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	2300      	movs	r3, #0
 80026a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_OCD_2_GPIO_Port, &GPIO_InitStruct);
 80026aa:	f107 031c 	add.w	r3, r7, #28
 80026ae:	4619      	mov	r1, r3
 80026b0:	484f      	ldr	r0, [pc, #316]	@ (80027f0 <MX_GPIO_Init+0x288>)
 80026b2:	f004 f9cb 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_3_Pin */
  GPIO_InitStruct.Pin = READY_3_Pin;
 80026b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026bc:	2300      	movs	r3, #0
 80026be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_3_GPIO_Port, &GPIO_InitStruct);
 80026c4:	f107 031c 	add.w	r3, r7, #28
 80026c8:	4619      	mov	r1, r3
 80026ca:	4849      	ldr	r0, [pc, #292]	@ (80027f0 <MX_GPIO_Init+0x288>)
 80026cc:	f004 f9be 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERLOCK_Pin NOT_FAULT_4_Pin */
  GPIO_InitStruct.Pin = INTERLOCK_Pin|NOT_FAULT_4_Pin;
 80026d0:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80026d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026d6:	2300      	movs	r3, #0
 80026d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026de:	f107 031c 	add.w	r3, r7, #28
 80026e2:	4619      	mov	r1, r3
 80026e4:	4843      	ldr	r0, [pc, #268]	@ (80027f4 <MX_GPIO_Init+0x28c>)
 80026e6:	f004 f9b1 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_FPGA_Pin */
  GPIO_InitStruct.Pin = RESET_FPGA_Pin;
 80026ea:	2304      	movs	r3, #4
 80026ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ee:	2301      	movs	r3, #1
 80026f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f6:	2300      	movs	r3, #0
 80026f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_FPGA_GPIO_Port, &GPIO_InitStruct);
 80026fa:	f107 031c 	add.w	r3, r7, #28
 80026fe:	4619      	mov	r1, r3
 8002700:	483b      	ldr	r0, [pc, #236]	@ (80027f0 <MX_GPIO_Init+0x288>)
 8002702:	f004 f9a3 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : START_STOP_FPGA_Pin */
  GPIO_InitStruct.Pin = START_STOP_FPGA_Pin;
 8002706:	2320      	movs	r3, #32
 8002708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800270a:	2301      	movs	r3, #1
 800270c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	2300      	movs	r3, #0
 8002714:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(START_STOP_FPGA_GPIO_Port, &GPIO_InitStruct);
 8002716:	f107 031c 	add.w	r3, r7, #28
 800271a:	4619      	mov	r1, r3
 800271c:	4835      	ldr	r0, [pc, #212]	@ (80027f4 <MX_GPIO_Init+0x28c>)
 800271e:	f004 f995 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_2_Pin */
  GPIO_InitStruct.Pin = READY_2_Pin;
 8002722:	2301      	movs	r3, #1
 8002724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002726:	2300      	movs	r3, #0
 8002728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_2_GPIO_Port, &GPIO_InitStruct);
 800272e:	f107 031c 	add.w	r3, r7, #28
 8002732:	4619      	mov	r1, r3
 8002734:	4831      	ldr	r0, [pc, #196]	@ (80027fc <MX_GPIO_Init+0x294>)
 8002736:	f004 f989 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : NOT_RST_2_Pin CS_OCD_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_2_Pin|CS_OCD_1_Pin;
 800273a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800273e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002740:	2311      	movs	r3, #17
 8002742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	2300      	movs	r3, #0
 800274a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800274c:	f107 031c 	add.w	r3, r7, #28
 8002750:	4619      	mov	r1, r3
 8002752:	4826      	ldr	r0, [pc, #152]	@ (80027ec <MX_GPIO_Init+0x284>)
 8002754:	f004 f97a 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_4_Pin */
  GPIO_InitStruct.Pin = NOT_RST_4_Pin;
 8002758:	2340      	movs	r3, #64	@ 0x40
 800275a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800275c:	2311      	movs	r3, #17
 800275e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002764:	2300      	movs	r3, #0
 8002766:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_4_GPIO_Port, &GPIO_InitStruct);
 8002768:	f107 031c 	add.w	r3, r7, #28
 800276c:	4619      	mov	r1, r3
 800276e:	4821      	ldr	r0, [pc, #132]	@ (80027f4 <MX_GPIO_Init+0x28c>)
 8002770:	f004 f96c 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_4_Pin */
  GPIO_InitStruct.Pin = READY_4_Pin;
 8002774:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800277a:	2300      	movs	r3, #0
 800277c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_4_GPIO_Port, &GPIO_InitStruct);
 8002782:	f107 031c 	add.w	r3, r7, #28
 8002786:	4619      	mov	r1, r3
 8002788:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800278c:	f004 f95e 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_3_Pin */
  GPIO_InitStruct.Pin = NOT_RST_3_Pin;
 8002790:	2301      	movs	r3, #1
 8002792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002794:	2311      	movs	r3, #17
 8002796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279c:	2300      	movs	r3, #0
 800279e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_3_GPIO_Port, &GPIO_InitStruct);
 80027a0:	f107 031c 	add.w	r3, r7, #28
 80027a4:	4619      	mov	r1, r3
 80027a6:	4814      	ldr	r0, [pc, #80]	@ (80027f8 <MX_GPIO_Init+0x290>)
 80027a8:	f004 f950 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : READY_1_Pin PD5 NOT_FAULT_3_Pin */
  GPIO_InitStruct.Pin = READY_1_Pin|GPIO_PIN_5|NOT_FAULT_3_Pin;
 80027ac:	2370      	movs	r3, #112	@ 0x70
 80027ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b0:	2300      	movs	r3, #0
 80027b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027b8:	f107 031c 	add.w	r3, r7, #28
 80027bc:	4619      	mov	r1, r3
 80027be:	480e      	ldr	r0, [pc, #56]	@ (80027f8 <MX_GPIO_Init+0x290>)
 80027c0:	f004 f944 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_1_Pin;
 80027c4:	2380      	movs	r3, #128	@ 0x80
 80027c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80027c8:	2311      	movs	r3, #17
 80027ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d0:	2300      	movs	r3, #0
 80027d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_1_GPIO_Port, &GPIO_InitStruct);
 80027d4:	f107 031c 	add.w	r3, r7, #28
 80027d8:	4619      	mov	r1, r3
 80027da:	4808      	ldr	r0, [pc, #32]	@ (80027fc <MX_GPIO_Init+0x294>)
 80027dc:	f004 f936 	bl	8006a4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027e0:	bf00      	nop
 80027e2:	3730      	adds	r7, #48	@ 0x30
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	48001000 	.word	0x48001000
 80027f0:	48001400 	.word	0x48001400
 80027f4:	48000800 	.word	0x48000800
 80027f8:	48000c00 	.word	0x48000c00
 80027fc:	48000400 	.word	0x48000400

08002800 <handle_event>:

/* USER CODE BEGIN 4 */

ConverterState handle_event(ConverterState currentState, ConverterEvent event) {
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	460a      	mov	r2, r1
 800280a:	71fb      	strb	r3, [r7, #7]
 800280c:	4613      	mov	r3, r2
 800280e:	71bb      	strb	r3, [r7, #6]
    switch (currentState) {
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	2b04      	cmp	r3, #4
 8002814:	d839      	bhi.n	800288a <handle_event+0x8a>
 8002816:	a201      	add	r2, pc, #4	@ (adr r2, 800281c <handle_event+0x1c>)
 8002818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281c:	08002831 	.word	0x08002831
 8002820:	0800283f 	.word	0x0800283f
 8002824:	0800284d 	.word	0x0800284d
 8002828:	08002869 	.word	0x08002869
 800282c:	08002877 	.word	0x08002877
        case STATE_INIT:
            if (event == EVENT_START)
 8002830:	79bb      	ldrb	r3, [r7, #6]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d12b      	bne.n	800288e <handle_event+0x8e>
            {

            	currentState = STATE_STANDBY;
 8002836:	2301      	movs	r3, #1
 8002838:	71fb      	strb	r3, [r7, #7]
                return STATE_STANDBY;
 800283a:	2301      	movs	r3, #1
 800283c:	e031      	b.n	80028a2 <handle_event+0xa2>
            }
            break;

        case STATE_STANDBY:
            if (event == EVENT_START)
 800283e:	79bb      	ldrb	r3, [r7, #6]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d126      	bne.n	8002892 <handle_event+0x92>
            {
            	currentState = STATE_REGULATION;
 8002844:	2302      	movs	r3, #2
 8002846:	71fb      	strb	r3, [r7, #7]
                return STATE_REGULATION;
 8002848:	2302      	movs	r3, #2
 800284a:	e02a      	b.n	80028a2 <handle_event+0xa2>
            }
            break;

        case STATE_REGULATION:
        	//USB_SendString("State: INIT -> RUNNING\r\n");
            if (event == EVENT_FAULT)
 800284c:	79bb      	ldrb	r3, [r7, #6]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d103      	bne.n	800285a <handle_event+0x5a>
            {
            	currentState = STATE_FAULT;
 8002852:	2303      	movs	r3, #3
 8002854:	71fb      	strb	r3, [r7, #7]
                return STATE_FAULT;
 8002856:	2303      	movs	r3, #3
 8002858:	e023      	b.n	80028a2 <handle_event+0xa2>

            } else if (event == EVENT_SHUTDOWN)
 800285a:	79bb      	ldrb	r3, [r7, #6]
 800285c:	2b03      	cmp	r3, #3
 800285e:	d11a      	bne.n	8002896 <handle_event+0x96>
            {
            	currentState = STATE_SHUTDOWN;
 8002860:	2304      	movs	r3, #4
 8002862:	71fb      	strb	r3, [r7, #7]
                return STATE_SHUTDOWN;
 8002864:	2304      	movs	r3, #4
 8002866:	e01c      	b.n	80028a2 <handle_event+0xa2>
            }

            break;

        case STATE_FAULT:
            if (event == EVENT_CLEAR_FAULT)
 8002868:	79bb      	ldrb	r3, [r7, #6]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d115      	bne.n	800289a <handle_event+0x9a>
            {
            	currentState = STATE_STANDBY;
 800286e:	2301      	movs	r3, #1
 8002870:	71fb      	strb	r3, [r7, #7]
                return STATE_STANDBY;
 8002872:	2301      	movs	r3, #1
 8002874:	e015      	b.n	80028a2 <handle_event+0xa2>
            }
            break;

        case STATE_SHUTDOWN:
            if (event == EVENT_START)
 8002876:	79bb      	ldrb	r3, [r7, #6]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d110      	bne.n	800289e <handle_event+0x9e>
            {
            	once = 0;
 800287c:	4b0c      	ldr	r3, [pc, #48]	@ (80028b0 <handle_event+0xb0>)
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
            	currentState = STATE_REGULATION;
 8002882:	2302      	movs	r3, #2
 8002884:	71fb      	strb	r3, [r7, #7]
                return STATE_REGULATION;
 8002886:	2302      	movs	r3, #2
 8002888:	e00b      	b.n	80028a2 <handle_event+0xa2>
            }
            break;
        default:
            break;
 800288a:	bf00      	nop
 800288c:	e008      	b.n	80028a0 <handle_event+0xa0>
            break;
 800288e:	bf00      	nop
 8002890:	e006      	b.n	80028a0 <handle_event+0xa0>
            break;
 8002892:	bf00      	nop
 8002894:	e004      	b.n	80028a0 <handle_event+0xa0>
            break;
 8002896:	bf00      	nop
 8002898:	e002      	b.n	80028a0 <handle_event+0xa0>
            break;
 800289a:	bf00      	nop
 800289c:	e000      	b.n	80028a0 <handle_event+0xa0>
            break;
 800289e:	bf00      	nop
    }
    return currentState; // No state change
 80028a0:	79fb      	ldrb	r3, [r7, #7]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000b6c 	.word	0x20000b6c

080028b4 <Set_PWM_DutyCycle>:
       // float TEMPERATURE_AFTER_CONVERSION_FROM_ADC = (((adc_value/4096.0f)*3.3f) - 0.4f)/0.0195f;
       // return TEMPERATURE_AFTER_CONVERSION_FROM_ADC;

}

void Set_PWM_DutyCycle(uint32_t dutyCycle) { // dutycyle for FAN SPEED CONTROl
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
    if (dutyCycle > 100) dutyCycle = 100;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b64      	cmp	r3, #100	@ 0x64
 80028c0:	d901      	bls.n	80028c6 <Set_PWM_DutyCycle+0x12>
 80028c2:	2364      	movs	r3, #100	@ 0x64
 80028c4:	607b      	str	r3, [r7, #4]
    uint32_t pulse = (htim4.Init.Period + 1) * dutyCycle / 100 - 1;
 80028c6:	4b0b      	ldr	r3, [pc, #44]	@ (80028f4 <Set_PWM_DutyCycle+0x40>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	3301      	adds	r3, #1
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	fb02 f303 	mul.w	r3, r2, r3
 80028d2:	4a09      	ldr	r2, [pc, #36]	@ (80028f8 <Set_PWM_DutyCycle+0x44>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	3b01      	subs	r3, #1
 80028dc:	60fb      	str	r3, [r7, #12]
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 80028de:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <Set_PWM_DutyCycle+0x40>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80028e6:	bf00      	nop
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	200007e0 	.word	0x200007e0
 80028f8:	51eb851f 	.word	0x51eb851f
 80028fc:	00000000 	.word	0x00000000

08002900 <HAL_ADC_ConvCpltCallback>:
//ADC save to array and moving average
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC5)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a20      	ldr	r2, [pc, #128]	@ (8002990 <HAL_ADC_ConvCpltCallback+0x90>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d135      	bne.n	800297e <HAL_ADC_ConvCpltCallback+0x7e>
		    {
		        uint32_t sum = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	e00b      	b.n	8002934 <HAL_ADC_ConvCpltCallback+0x34>
		        {
		            sum += adc5_dma_buffer[i];
 800291c:	4a1d      	ldr	r2, [pc, #116]	@ (8002994 <HAL_ADC_ConvCpltCallback+0x94>)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002924:	b29b      	uxth	r3, r3
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	3301      	adds	r3, #1
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b09      	cmp	r3, #9
 8002938:	ddf0      	ble.n	800291c <HAL_ADC_ConvCpltCallback+0x1c>
		        }
		        adc_moving_average = ((sum / MA_WINDOW_SIZE)*3300)/4096;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4a16      	ldr	r2, [pc, #88]	@ (8002998 <HAL_ADC_ConvCpltCallback+0x98>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	08db      	lsrs	r3, r3, #3
 8002944:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8002948:	fb02 f303 	mul.w	r3, r2, r3
 800294c:	0b1b      	lsrs	r3, r3, #12
 800294e:	b29a      	uxth	r2, r3
 8002950:	4b12      	ldr	r3, [pc, #72]	@ (800299c <HAL_ADC_ConvCpltCallback+0x9c>)
 8002952:	801a      	strh	r2, [r3, #0]
		        imax2_sum=(adc_moving_average-1450)*0.384;
 8002954:	4b11      	ldr	r3, [pc, #68]	@ (800299c <HAL_ADC_ConvCpltCallback+0x9c>)
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	f2a3 53aa 	subw	r3, r3, #1450	@ 0x5aa
 800295c:	4618      	mov	r0, r3
 800295e:	f7fd fe09 	bl	8000574 <__aeabi_i2d>
 8002962:	a309      	add	r3, pc, #36	@ (adr r3, 8002988 <HAL_ADC_ConvCpltCallback+0x88>)
 8002964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002968:	f7fd fe6e 	bl	8000648 <__aeabi_dmul>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f7fe f940 	bl	8000bf8 <__aeabi_d2uiz>
 8002978:	4603      	mov	r3, r0
 800297a:	4a09      	ldr	r2, [pc, #36]	@ (80029a0 <HAL_ADC_ConvCpltCallback+0xa0>)
 800297c:	6013      	str	r3, [r2, #0]
		        // Restart the DMA transfer
		       // HAL_ADC_Start_DMA(hadc, (uint32_t*)adc5_dma_buffer, MA_WINDOW_SIZE);
		    }


}
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	bc6a7efa 	.word	0xbc6a7efa
 800298c:	3fd89374 	.word	0x3fd89374
 8002990:	50000600 	.word	0x50000600
 8002994:	20000a80 	.word	0x20000a80
 8002998:	cccccccd 	.word	0xcccccccd
 800299c:	20000a94 	.word	0x20000a94
 80029a0:	20000a7c 	.word	0x20000a7c

080029a4 <Update_PWM_Frequency>:
        }
    }
}

void Update_PWM_Frequency(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t frequency)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	@ 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
	 uint32_t timer_clock = 150000000;  // Assuming a 150 MHz timer clock
 80029b0:	4b33      	ldr	r3, [pc, #204]	@ (8002a80 <Update_PWM_Frequency+0xdc>)
 80029b2:	61bb      	str	r3, [r7, #24]
	    uint32_t prescaler = htim->Init.Prescaler + 1;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	3301      	adds	r3, #1
 80029ba:	617b      	str	r3, [r7, #20]
	    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	fb02 f303 	mul.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	3b01      	subs	r3, #1
 80029cc:	61fb      	str	r3, [r7, #28]

	    // Ensure period is within valid range
	    if (period > 65535) {
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d4:	d314      	bcc.n	8002a00 <Update_PWM_Frequency+0x5c>
	        // Adjust prescaler to bring period within range
	        prescaler = (prescaler * (period / 65536)) + 1;
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	0c1b      	lsrs	r3, r3, #16
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	fb02 f303 	mul.w	r3, r2, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	617b      	str	r3, [r7, #20]
	        period = (timer_clock / (prescaler * frequency)) - 1;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	fb02 f303 	mul.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	61fb      	str	r3, [r7, #28]
	        __HAL_TIM_SET_PRESCALER(htim, prescaler - 1);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	3a01      	subs	r2, #1
 80029fe:	629a      	str	r2, [r3, #40]	@ 0x28
	    }

	    // Update the period register (ARR) with double buffering
	    __HAL_TIM_SET_AUTORELOAD(htim, period);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	69fa      	ldr	r2, [r7, #28]
 8002a06:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	60da      	str	r2, [r3, #12]

	    // Set the duty cycle to approximately 50%
	    uint32_t pulse = period / 2;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	085b      	lsrs	r3, r3, #1
 8002a12:	613b      	str	r3, [r7, #16]
	    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d104      	bne.n	8002a24 <Update_PWM_Frequency+0x80>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a22:	e023      	b.n	8002a6c <Update_PWM_Frequency+0xc8>
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d104      	bne.n	8002a34 <Update_PWM_Frequency+0x90>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	6393      	str	r3, [r2, #56]	@ 0x38
 8002a32:	e01b      	b.n	8002a6c <Update_PWM_Frequency+0xc8>
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d104      	bne.n	8002a44 <Update_PWM_Frequency+0xa0>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002a42:	e013      	b.n	8002a6c <Update_PWM_Frequency+0xc8>
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b0c      	cmp	r3, #12
 8002a48:	d104      	bne.n	8002a54 <Update_PWM_Frequency+0xb0>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a52:	e00b      	b.n	8002a6c <Update_PWM_Frequency+0xc8>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b10      	cmp	r3, #16
 8002a58:	d104      	bne.n	8002a64 <Update_PWM_Frequency+0xc0>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	6493      	str	r3, [r2, #72]	@ 0x48
 8002a62:	e003      	b.n	8002a6c <Update_PWM_Frequency+0xc8>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	64d3      	str	r3, [r2, #76]	@ 0x4c

	    // Manually generate an update event by setting the UG bit in the EGR register
	    htim->Instance->EGR = TIM_EGR_UG;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2201      	movs	r2, #1
 8002a72:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_AUTORELOAD(htim, period);

    // Restart the timer PWM generation
    HAL_TIM_PWM_Stop(htim, channel);
    HAL_TIM_PWM_Start(htim, channel);*/
}
 8002a74:	bf00      	nop
 8002a76:	3724      	adds	r7, #36	@ 0x24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	08f0d180 	.word	0x08f0d180

08002a84 <Check_Faults>:
	        dac_buffer[i] = (((1/3.3)*res12_b) + ((0.5/3.3)*res12_b) * sin(2 * M_PI * i/BUFFER_SIZE));
	    }
}

uint8_t Check_Faults()
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
	// Faults pins are from gate driver and they are active pull down
	// 4 fault pins from 4 gate driver + 2 fault pins from  2 currents sensors  = 6 pins
	if(HAL_GPIO_ReadPin(CS_FAULT_1_GPIO_Port, CS_FAULT_1_Pin) && HAL_GPIO_ReadPin(CS_FAULT_2_GPIO_Port, CS_FAULT_2_Pin)
 8002a88:	2101      	movs	r1, #1
 8002a8a:	4818      	ldr	r0, [pc, #96]	@ (8002aec <Check_Faults+0x68>)
 8002a8c:	f004 f960 	bl	8006d50 <HAL_GPIO_ReadPin>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d026      	beq.n	8002ae4 <Check_Faults+0x60>
 8002a96:	2110      	movs	r1, #16
 8002a98:	4814      	ldr	r0, [pc, #80]	@ (8002aec <Check_Faults+0x68>)
 8002a9a:	f004 f959 	bl	8006d50 <HAL_GPIO_ReadPin>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01f      	beq.n	8002ae4 <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_1_GPIO_Port, NOT_FAULT_1_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_2_GPIO_Port, NOT_FAULT_2_Pin)
 8002aa4:	2104      	movs	r1, #4
 8002aa6:	4811      	ldr	r0, [pc, #68]	@ (8002aec <Check_Faults+0x68>)
 8002aa8:	f004 f952 	bl	8006d50 <HAL_GPIO_ReadPin>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d018      	beq.n	8002ae4 <Check_Faults+0x60>
 8002ab2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002ab6:	480d      	ldr	r0, [pc, #52]	@ (8002aec <Check_Faults+0x68>)
 8002ab8:	f004 f94a 	bl	8006d50 <HAL_GPIO_ReadPin>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d010      	beq.n	8002ae4 <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_3_GPIO_Port, NOT_FAULT_3_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_4_GPIO_Port, NOT_FAULT_4_Pin) )
 8002ac2:	2140      	movs	r1, #64	@ 0x40
 8002ac4:	480a      	ldr	r0, [pc, #40]	@ (8002af0 <Check_Faults+0x6c>)
 8002ac6:	f004 f943 	bl	8006d50 <HAL_GPIO_ReadPin>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d009      	beq.n	8002ae4 <Check_Faults+0x60>
 8002ad0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ad4:	4807      	ldr	r0, [pc, #28]	@ (8002af4 <Check_Faults+0x70>)
 8002ad6:	f004 f93b 	bl	8006d50 <HAL_GPIO_ReadPin>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <Check_Faults+0x60>
		return 0; // if all pins is 1 then all is ready, there is not faults then return 0
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	e000      	b.n	8002ae6 <Check_Faults+0x62>

	return 1;
 8002ae4:	2301      	movs	r3, #1
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	48001000 	.word	0x48001000
 8002af0:	48000c00 	.word	0x48000c00
 8002af4:	48000800 	.word	0x48000800

08002af8 <Check_Ready>:

uint8_t Check_Ready()
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
	// Ready pins are from gate driver and they are active pull up
	// 4 ready pins from 4 gate drivers
	if(HAL_GPIO_ReadPin(READY_1_GPIO_Port, READY_1_Pin) && HAL_GPIO_ReadPin(READY_2_GPIO_Port, READY_2_Pin)
 8002afc:	2110      	movs	r1, #16
 8002afe:	4811      	ldr	r0, [pc, #68]	@ (8002b44 <Check_Ready+0x4c>)
 8002b00:	f004 f926 	bl	8006d50 <HAL_GPIO_ReadPin>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d019      	beq.n	8002b3e <Check_Ready+0x46>
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	480e      	ldr	r0, [pc, #56]	@ (8002b48 <Check_Ready+0x50>)
 8002b0e:	f004 f91f 	bl	8006d50 <HAL_GPIO_ReadPin>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d012      	beq.n	8002b3e <Check_Ready+0x46>
			&& HAL_GPIO_ReadPin(READY_3_GPIO_Port, READY_3_Pin) && HAL_GPIO_ReadPin(READY_4_GPIO_Port, READY_4_Pin) )
 8002b18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002b1c:	480b      	ldr	r0, [pc, #44]	@ (8002b4c <Check_Ready+0x54>)
 8002b1e:	f004 f917 	bl	8006d50 <HAL_GPIO_ReadPin>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00a      	beq.n	8002b3e <Check_Ready+0x46>
 8002b28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002b2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b30:	f004 f90e 	bl	8006d50 <HAL_GPIO_ReadPin>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <Check_Ready+0x46>
			return 1; // return 1 when is gate drivers ready
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <Check_Ready+0x48>

		return 0;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	48000c00 	.word	0x48000c00
 8002b48:	48000400 	.word	0x48000400
 8002b4c:	48001400 	.word	0x48001400

08002b50 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002b50:	b5b0      	push	{r4, r5, r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
	// SOFT start_program RAMP REALISATION
	//  Ts 20khz
	if(htim->Instance == TIM15)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a6e      	ldr	r2, [pc, #440]	@ (8002d18 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	f040 80b1 	bne.w	8002cc6 <HAL_TIM_PeriodElapsedCallback+0x176>
	{
		//sythick1 =  HAL_GetTick();
		if(currentState == STATE_REGULATION )
 8002b64:	4b6d      	ldr	r3, [pc, #436]	@ (8002d1c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	f040 80a9 	bne.w	8002cc0 <HAL_TIM_PeriodElapsedCallback+0x170>
		{
		//current_sensor1_vref = adc3_dma_buffer[0]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[0], pcb_temp)/4096)*3.3;
		//current_sensor2_vref = adc3_dma_buffer[1]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[1], pcb_temp)/4096)*3.3;

		input_voltage = (int)((((adc3_dma_buffer[2])*3300)/4096-200)*18.81);//[mV]		((Low_pass_filter(adc3_dma_buffer[2], input_voltage)/4096)*3.3-0.2)*27.1;
 8002b6e:	4b6c      	ldr	r3, [pc, #432]	@ (8002d20 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002b70:	889b      	ldrh	r3, [r3, #4]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002b7a:	fb02 f303 	mul.w	r3, r2, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	da01      	bge.n	8002b86 <HAL_TIM_PeriodElapsedCallback+0x36>
 8002b82:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002b86:	131b      	asrs	r3, r3, #12
 8002b88:	3bc8      	subs	r3, #200	@ 0xc8
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fd fcf2 	bl	8000574 <__aeabi_i2d>
 8002b90:	a35d      	add	r3, pc, #372	@ (adr r3, 8002d08 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b96:	f7fd fd57 	bl	8000648 <__aeabi_dmul>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f7fe f801 	bl	8000ba8 <__aeabi_d2iz>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b5e      	ldr	r3, [pc, #376]	@ (8002d24 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002bac:	601a      	str	r2, [r3, #0]
		output_voltage = (int)((((adc4_dma_buffer[1])*3300)/4096-200)*18.81);//[mV] 		((Low_pass_filter(adc4_dma_buffer, output_voltage)/4096)*3.3-0.2)*27.1;
 8002bae:	4b5e      	ldr	r3, [pc, #376]	@ (8002d28 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002bb0:	885b      	ldrh	r3, [r3, #2]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002bba:	fb02 f303 	mul.w	r3, r2, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	da01      	bge.n	8002bc6 <HAL_TIM_PeriodElapsedCallback+0x76>
 8002bc2:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002bc6:	131b      	asrs	r3, r3, #12
 8002bc8:	3bc8      	subs	r3, #200	@ 0xc8
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd fcd2 	bl	8000574 <__aeabi_i2d>
 8002bd0:	a34d      	add	r3, pc, #308	@ (adr r3, 8002d08 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd6:	f7fd fd37 	bl	8000648 <__aeabi_dmul>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	f7fd ffe1 	bl	8000ba8 <__aeabi_d2iz>
 8002be6:	4603      	mov	r3, r0
 8002be8:	461a      	mov	r2, r3
 8002bea:	4b50      	ldr	r3, [pc, #320]	@ (8002d2c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002bec:	601a      	str	r2, [r3, #0]
		if(once == 0) Update_PWM_Frequency(&htim8, TIM_CHANNEL_2, 7100000); // Set TIM8 CH1 o freq that is delay hc and send to fpga
		}

		imax2 = imax1 + imax2_sum; // imax2_sum signal from FPGA
		// imax1,2 each for branches to make 180 degree shift*/
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref+((int)imax1*0.025)); // imax1  1.5V is 0A;  1A is 20mV; 1 bit is 0.8mV; imax[mA]*0.02 [V/A]/0.8[mV] = Value for DAC
 8002bee:	4b50      	ldr	r3, [pc, #320]	@ (8002d30 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fcbe 	bl	8000574 <__aeabi_i2d>
 8002bf8:	4604      	mov	r4, r0
 8002bfa:	460d      	mov	r5, r1
 8002bfc:	4b4d      	ldr	r3, [pc, #308]	@ (8002d34 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fd fcb7 	bl	8000574 <__aeabi_i2d>
 8002c06:	a342      	add	r3, pc, #264	@ (adr r3, 8002d10 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0c:	f7fd fd1c 	bl	8000648 <__aeabi_dmul>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4620      	mov	r0, r4
 8002c16:	4629      	mov	r1, r5
 8002c18:	f7fd fb60 	bl	80002dc <__adddf3>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4610      	mov	r0, r2
 8002c22:	4619      	mov	r1, r3
 8002c24:	f7fd ffe8 	bl	8000bf8 <__aeabi_d2uiz>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	4842      	ldr	r0, [pc, #264]	@ (8002d38 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002c30:	f003 faa0 	bl	8006174 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, current_sensor2_vref+((int)imax2*0.025)); // imax2
 8002c34:	4b41      	ldr	r3, [pc, #260]	@ (8002d3c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fd fc9b 	bl	8000574 <__aeabi_i2d>
 8002c3e:	4604      	mov	r4, r0
 8002c40:	460d      	mov	r5, r1
 8002c42:	4b3f      	ldr	r3, [pc, #252]	@ (8002d40 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fc94 	bl	8000574 <__aeabi_i2d>
 8002c4c:	a330      	add	r3, pc, #192	@ (adr r3, 8002d10 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	f7fd fcf9 	bl	8000648 <__aeabi_dmul>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	f7fd fb3d 	bl	80002dc <__adddf3>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4610      	mov	r0, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f7fd ffc5 	bl	8000bf8 <__aeabi_d2uiz>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2200      	movs	r2, #0
 8002c72:	2110      	movs	r1, #16
 8002c74:	4830      	ldr	r0, [pc, #192]	@ (8002d38 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002c76:	f003 fa7d 	bl	8006174 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref-((int)imin*0.25)); // imin uzyto tutaj wzmacniacza 10x dla sygnalu z sensora pradu wiec ma wzmocnienie 200mv/A a nie 20mv/a
 8002c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d30 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fd fc78 	bl	8000574 <__aeabi_i2d>
 8002c84:	4604      	mov	r4, r0
 8002c86:	460d      	mov	r5, r1
 8002c88:	4b2e      	ldr	r3, [pc, #184]	@ (8002d44 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fd fc71 	bl	8000574 <__aeabi_i2d>
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	4b2c      	ldr	r3, [pc, #176]	@ (8002d48 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002c98:	f7fd fcd6 	bl	8000648 <__aeabi_dmul>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	f7fd fb18 	bl	80002d8 <__aeabi_dsub>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4610      	mov	r0, r2
 8002cae:	4619      	mov	r1, r3
 8002cb0:	f7fd ffa2 	bl	8000bf8 <__aeabi_d2uiz>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4824      	ldr	r0, [pc, #144]	@ (8002d4c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002cbc:	f003 fa5a 	bl	8006174 <HAL_DAC_SetValue>
		//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
		//once = 1;
		//}

		//sythick2 =  HAL_GetTick() - sythick1;
		flag_control = 1;
 8002cc0:	4b23      	ldr	r3, [pc, #140]	@ (8002d50 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM6) // 5 sec period
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a22      	ldr	r2, [pc, #136]	@ (8002d54 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d101      	bne.n	8002cd4 <HAL_TIM_PeriodElapsedCallback+0x184>
		    {
		//if(currentState == STATE_SOFT_START || currentState == STATE_REGULATION )
				//{
				FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
 8002cd0:	f000 f9ae 	bl	8003030 <FAN_Drive>
				//}
		    }


	if (htim->Instance == TIM7)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d58 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d110      	bne.n	8002d00 <HAL_TIM_PeriodElapsedCallback+0x1b0>
	    {
	        // Turn off OCD pins of currents sensors to reset current sensor 1us

	        HAL_GPIO_TogglePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin);
 8002cde:	2102      	movs	r1, #2
 8002ce0:	481e      	ldr	r0, [pc, #120]	@ (8002d5c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002ce2:	f004 f865 	bl	8006db0 <HAL_GPIO_TogglePin>
	        HAL_GPIO_TogglePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin);
 8002ce6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002cea:	481d      	ldr	r0, [pc, #116]	@ (8002d60 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002cec:	f004 f860 	bl	8006db0 <HAL_GPIO_TogglePin>
	        HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2120      	movs	r1, #32
 8002cf4:	4819      	ldr	r0, [pc, #100]	@ (8002d5c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002cf6:	f004 f843 	bl	8006d80 <HAL_GPIO_WritePin>
	        // Stop the timer
	        HAL_TIM_Base_Stop_IT(&htim7);
 8002cfa:	481a      	ldr	r0, [pc, #104]	@ (8002d64 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002cfc:	f006 ff18 	bl	8009b30 <HAL_TIM_Base_Stop_IT>
	    }


}
 8002d00:	bf00      	nop
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bdb0      	pop	{r4, r5, r7, pc}
 8002d08:	28f5c28f 	.word	0x28f5c28f
 8002d0c:	4032cf5c 	.word	0x4032cf5c
 8002d10:	9999999a 	.word	0x9999999a
 8002d14:	3f999999 	.word	0x3f999999
 8002d18:	40014000 	.word	0x40014000
 8002d1c:	20000b67 	.word	0x20000b67
 8002d20:	20000a58 	.word	0x20000a58
 8002d24:	20000a4c 	.word	0x20000a4c
 8002d28:	20000a6c 	.word	0x20000a6c
 8002d2c:	20000a64 	.word	0x20000a64
 8002d30:	20000a3c 	.word	0x20000a3c
 8002d34:	20000a40 	.word	0x20000a40
 8002d38:	200006ac 	.word	0x200006ac
 8002d3c:	20000a3e 	.word	0x20000a3e
 8002d40:	20000a44 	.word	0x20000a44
 8002d44:	20000a48 	.word	0x20000a48
 8002d48:	3fd00000 	.word	0x3fd00000
 8002d4c:	200006c0 	.word	0x200006c0
 8002d50:	20000b71 	.word	0x20000b71
 8002d54:	40001000 	.word	0x40001000
 8002d58:	40001400 	.word	0x40001400
 8002d5c:	48001000 	.word	0x48001000
 8002d60:	48001400 	.word	0x48001400
 8002d64:	20000878 	.word	0x20000878

08002d68 <RAMP>:

void RAMP()
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
	// RAMP Voltage to soft-start
				if((vref-output_vol)>100)
 8002d6c:	4b15      	ldr	r3, [pc, #84]	@ (8002dc4 <RAMP+0x5c>)
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	4b15      	ldr	r3, [pc, #84]	@ (8002dc8 <RAMP+0x60>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b64      	cmp	r3, #100	@ 0x64
 8002d7a:	d913      	bls.n	8002da4 <RAMP+0x3c>
				{

					Vramp = output_voltage+400000*Ts; // 200mV step per loop period
 8002d7c:	4b13      	ldr	r3, [pc, #76]	@ (8002dcc <RAMP+0x64>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd fbe7 	bl	8000554 <__aeabi_ui2d>
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	4b11      	ldr	r3, [pc, #68]	@ (8002dd0 <RAMP+0x68>)
 8002d8c:	f7fd faa6 	bl	80002dc <__adddf3>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	f7fd ff2e 	bl	8000bf8 <__aeabi_d2uiz>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd4 <RAMP+0x6c>)
 8002da2:	801a      	strh	r2, [r3, #0]
				}
				//else if((vref-output_voltage)<-100)
				//{
				//	Vramp = output_voltage-4000000*Ts;
				//}
				if(Vramp>=48000)
 8002da4:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd4 <RAMP+0x6c>)
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d906      	bls.n	8002dbe <RAMP+0x56>
				{
					Vramp = 48000; // 48V
 8002db0:	4b08      	ldr	r3, [pc, #32]	@ (8002dd4 <RAMP+0x6c>)
 8002db2:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002db6:	801a      	strh	r2, [r3, #0]
					RAMP_FINISHED = 1;
 8002db8:	4b07      	ldr	r3, [pc, #28]	@ (8002dd8 <RAMP+0x70>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
					//currentState = STATE_REGULATION;
				}


}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000000 	.word	0x20000000
 8002dc8:	20000028 	.word	0x20000028
 8002dcc:	20000a64 	.word	0x20000a64
 8002dd0:	40340000 	.word	0x40340000
 8002dd4:	20000a6a 	.word	0x20000a6a
 8002dd8:	20000a70 	.word	0x20000a70

08002ddc <regulatorPI>:

void regulatorPI(uint32_t *out, uint32_t *integral, float in, float in_zad, float limp, float limn, float kp, float ti, float Ts1)
{
 8002ddc:	b5b0      	push	{r4, r5, r7, lr}
 8002dde:	b08c      	sub	sp, #48	@ 0x30
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6278      	str	r0, [r7, #36]	@ 0x24
 8002de4:	6239      	str	r1, [r7, #32]
 8002de6:	ed87 0a07 	vstr	s0, [r7, #28]
 8002dea:	edc7 0a06 	vstr	s1, [r7, #24]
 8002dee:	ed87 1a05 	vstr	s2, [r7, #20]
 8002df2:	edc7 1a04 	vstr	s3, [r7, #16]
 8002df6:	ed87 2a03 	vstr	s4, [r7, #12]
 8002dfa:	edc7 2a02 	vstr	s5, [r7, #8]
 8002dfe:	ed87 3a01 	vstr	s6, [r7, #4]
	// Tustin transfrom of PI regulator s -> 2/T * (Z-1)/(Z+1)
    float delta;
    uint32_t prev_out;
    delta = in_zad - in; // error
 8002e02:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e06:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e0e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    *integral = *integral + (delta + prev_delta) * (kp / ti) * Ts1 * 0.5 ; // I part
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fd fb9c 	bl	8000554 <__aeabi_ui2d>
 8002e1c:	4604      	mov	r4, r0
 8002e1e:	460d      	mov	r5, r1
 8002e20:	4b5a      	ldr	r3, [pc, #360]	@ (8002f8c <regulatorPI+0x1b0>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	ee07 3a90 	vmov	s15, r3
 8002e28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e2c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002e30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e34:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e38:	edd7 6a02 	vldr	s13, [r7, #8]
 8002e3c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002e40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e44:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e4c:	ee17 0a90 	vmov	r0, s15
 8002e50:	f7fd fba2 	bl	8000598 <__aeabi_f2d>
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	4b4d      	ldr	r3, [pc, #308]	@ (8002f90 <regulatorPI+0x1b4>)
 8002e5a:	f7fd fbf5 	bl	8000648 <__aeabi_dmul>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4620      	mov	r0, r4
 8002e64:	4629      	mov	r1, r5
 8002e66:	f7fd fa39 	bl	80002dc <__adddf3>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4610      	mov	r0, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	f7fd fec1 	bl	8000bf8 <__aeabi_d2uiz>
 8002e76:	4602      	mov	r2, r0
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	601a      	str	r2, [r3, #0]
    prev_delta = delta;
 8002e7c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002e80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e84:	ee17 2a90 	vmov	r2, s15
 8002e88:	4b40      	ldr	r3, [pc, #256]	@ (8002f8c <regulatorPI+0x1b0>)
 8002e8a:	601a      	str	r2, [r3, #0]
    prev_out = *out;
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (*integral >= limp) // limit peak positive
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	ee07 3a90 	vmov	s15, r3
 8002e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e9e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ea2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eaa:	d807      	bhi.n	8002ebc <regulatorPI+0xe0>
    {
        *integral = limp;
 8002eac:	edd7 7a05 	vldr	s15, [r7, #20]
 8002eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eb4:	ee17 2a90 	vmov	r2, s15
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	601a      	str	r2, [r3, #0]
    }
    if (*integral <= limn)// limit peak negative
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	ee07 3a90 	vmov	s15, r3
 8002ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ecc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed4:	db07      	blt.n	8002ee6 <regulatorPI+0x10a>
    {
        *integral = limn;
 8002ed6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ede:	ee17 2a90 	vmov	r2, s15
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	601a      	str	r2, [r3, #0]
    }
    *out = (delta * kp + *integral); // Sum of P and I
 8002ee6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002eea:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	ee07 3a90 	vmov	s15, r3
 8002efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f06:	ee17 2a90 	vmov	r2, s15
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	601a      	str	r2, [r3, #0]
    if (*out >= limp) // limit peak positive
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	ee07 3a90 	vmov	s15, r3
 8002f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f26:	d807      	bhi.n	8002f38 <regulatorPI+0x15c>
    {
        *out = limp;
 8002f28:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f30:	ee17 2a90 	vmov	r2, s15
 8002f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f36:	601a      	str	r2, [r3, #0]
    }
    if (*out <= limn)// limit peak negative
 8002f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	ee07 3a90 	vmov	s15, r3
 8002f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f44:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f50:	db07      	blt.n	8002f62 <regulatorPI+0x186>
    {
        *out = limn;
 8002f52:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f5a:	ee17 2a90 	vmov	r2, s15
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f60:	601a      	str	r2, [r3, #0]
    }
    if((*out - prev_out) < 50 || (*out - prev_out) > -50) // histeresis to probably prevent jitter
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b31      	cmp	r3, #49	@ 0x31
 8002f6c:	d906      	bls.n	8002f7c <regulatorPI+0x1a0>
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f113 0f32 	cmn.w	r3, #50	@ 0x32
 8002f7a:	d902      	bls.n	8002f82 <regulatorPI+0x1a6>
    {
    	*out = prev_out;
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f80:	601a      	str	r2, [r3, #0]
    }
}
 8002f82:	bf00      	nop
 8002f84:	3730      	adds	r7, #48	@ 0x30
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bdb0      	pop	{r4, r5, r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000b60 	.word	0x20000b60
 8002f90:	3fe00000 	.word	0x3fe00000
 8002f94:	00000000 	.word	0x00000000

08002f98 <Low_pass_filter>:

	    return y[0];
}*/

float Low_pass_filter(float new_sample, float old_sample, float old_sample_n1, float old_passed)
{
 8002f98:	b5b0      	push	{r4, r5, r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002fa2:	edc7 0a02 	vstr	s1, [r7, #8]
 8002fa6:	ed87 1a01 	vstr	s2, [r7, #4]
 8002faa:	edc7 1a00 	vstr	s3, [r7]
	float Low_passed_sample = 0;
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
	//Low_passed_sample = (float)ALPHA * new_sample + (1.0 - ALPHA) * old_sample;

	Low_passed_sample = (1-ALPHA)*0.5*(new_sample+old_sample_n1+ALPHA*old_passed);//(float)ALPHA * new_sample + (1.0 - ALPHA) * old_sample;
 8002fb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc0:	ee17 0a90 	vmov	r0, s15
 8002fc4:	f7fd fae8 	bl	8000598 <__aeabi_f2d>
 8002fc8:	4604      	mov	r4, r0
 8002fca:	460d      	mov	r5, r1
 8002fcc:	6838      	ldr	r0, [r7, #0]
 8002fce:	f7fd fae3 	bl	8000598 <__aeabi_f2d>
 8002fd2:	a313      	add	r3, pc, #76	@ (adr r3, 8003020 <Low_pass_filter+0x88>)
 8002fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd8:	f7fd fb36 	bl	8000648 <__aeabi_dmul>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	4629      	mov	r1, r5
 8002fe4:	f7fd f97a 	bl	80002dc <__adddf3>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4610      	mov	r0, r2
 8002fee:	4619      	mov	r1, r3
 8002ff0:	a30d      	add	r3, pc, #52	@ (adr r3, 8003028 <Low_pass_filter+0x90>)
 8002ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff6:	f7fd fb27 	bl	8000648 <__aeabi_dmul>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4610      	mov	r0, r2
 8003000:	4619      	mov	r1, r3
 8003002:	f7fd fe19 	bl	8000c38 <__aeabi_d2f>
 8003006:	4603      	mov	r3, r0
 8003008:	617b      	str	r3, [r7, #20]
	return Low_passed_sample;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	ee07 3a90 	vmov	s15, r3

}
 8003010:	eeb0 0a67 	vmov.f32	s0, s15
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bdb0      	pop	{r4, r5, r7, pc}
 800301a:	bf00      	nop
 800301c:	f3af 8000 	nop.w
 8003020:	33333333 	.word	0x33333333
 8003024:	3fd33333 	.word	0x3fd33333
 8003028:	66666666 	.word	0x66666666
 800302c:	3fd66666 	.word	0x3fd66666

08003030 <FAN_Drive>:
void FAN_Drive()
{ //@ToDo poprawic ogarnac zeby a intach bylo
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
		pcb_temp = (adc3_dma_buffer[3]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[3], pcb_temp)/4096)*3.3;
 8003036:	4b44      	ldr	r3, [pc, #272]	@ (8003148 <FAN_Drive+0x118>)
 8003038:	88db      	ldrh	r3, [r3, #6]
 800303a:	b29b      	uxth	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8003042:	fb02 f303 	mul.w	r3, r2, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	da01      	bge.n	800304e <FAN_Drive+0x1e>
 800304a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800304e:	131b      	asrs	r3, r3, #12
 8003050:	461a      	mov	r2, r3
 8003052:	4b3e      	ldr	r3, [pc, #248]	@ (800314c <FAN_Drive+0x11c>)
 8003054:	601a      	str	r2, [r3, #0]
		heat_sink_temp = (adc3_dma_buffer[4]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[4], heat_sink_temp)/4096)*3.3;
 8003056:	4b3c      	ldr	r3, [pc, #240]	@ (8003148 <FAN_Drive+0x118>)
 8003058:	891b      	ldrh	r3, [r3, #8]
 800305a:	b29b      	uxth	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8003062:	fb02 f303 	mul.w	r3, r2, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	da01      	bge.n	800306e <FAN_Drive+0x3e>
 800306a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800306e:	131b      	asrs	r3, r3, #12
 8003070:	461a      	mov	r2, r3
 8003072:	4b37      	ldr	r3, [pc, #220]	@ (8003150 <FAN_Drive+0x120>)
 8003074:	601a      	str	r2, [r3, #0]

		uint32_t temperature = 20;
 8003076:	2314      	movs	r3, #20
 8003078:	603b      	str	r3, [r7, #0]

		pcb_temp = (pcb_temp-400)/20;
 800307a:	4b34      	ldr	r3, [pc, #208]	@ (800314c <FAN_Drive+0x11c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003082:	4a34      	ldr	r2, [pc, #208]	@ (8003154 <FAN_Drive+0x124>)
 8003084:	fba2 2303 	umull	r2, r3, r2, r3
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	4a30      	ldr	r2, [pc, #192]	@ (800314c <FAN_Drive+0x11c>)
 800308c:	6013      	str	r3, [r2, #0]
		heat_sink_temp = (heat_sink_temp-500)/10;
 800308e:	4b30      	ldr	r3, [pc, #192]	@ (8003150 <FAN_Drive+0x120>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8003096:	4a2f      	ldr	r2, [pc, #188]	@ (8003154 <FAN_Drive+0x124>)
 8003098:	fba2 2303 	umull	r2, r3, r2, r3
 800309c:	08db      	lsrs	r3, r3, #3
 800309e:	4a2c      	ldr	r2, [pc, #176]	@ (8003150 <FAN_Drive+0x120>)
 80030a0:	6013      	str	r3, [r2, #0]
		// Choose the higher of the two temperatures
		temperature = (pcb_temp > heat_sink_temp) ? pcb_temp : heat_sink_temp;
 80030a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003150 <FAN_Drive+0x120>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4b29      	ldr	r3, [pc, #164]	@ (800314c <FAN_Drive+0x11c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4293      	cmp	r3, r2
 80030ac:	bf38      	it	cc
 80030ae:	4613      	movcc	r3, r2
 80030b0:	603b      	str	r3, [r7, #0]
		// Apply a non-linear (exponential) scaling for the fan speed
		// This scales the temperature to a value between 0 and 1, then applies an exponential curve
		uint32_t normalized_temp = ((temperature - 20) *100)/ 80;  // Normalizing between 0 (20°C) and 1000 (100°C)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2264      	movs	r2, #100	@ 0x64
 80030b6:	fb02 f303 	mul.w	r3, r2, r3
 80030ba:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80030be:	4a25      	ldr	r2, [pc, #148]	@ (8003154 <FAN_Drive+0x124>)
 80030c0:	fba2 2303 	umull	r2, r3, r2, r3
 80030c4:	099b      	lsrs	r3, r3, #6
 80030c6:	607b      	str	r3, [r7, #4]
		if (normalized_temp > 100) normalized_temp = 100;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b64      	cmp	r3, #100	@ 0x64
 80030cc:	d901      	bls.n	80030d2 <FAN_Drive+0xa2>
 80030ce:	2364      	movs	r3, #100	@ 0x64
 80030d0:	607b      	str	r3, [r7, #4]
		if (normalized_temp < 0) normalized_temp = 0;

		duty_cycle = 20 + ((int)(pow(normalized_temp, 3) * 79))/1000000;  // Cubic curve for fan speed control
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fd fa3e 	bl	8000554 <__aeabi_ui2d>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8003138 <FAN_Drive+0x108>
 80030e0:	ec43 2b10 	vmov	d0, r2, r3
 80030e4:	f012 fb84 	bl	80157f0 <pow>
 80030e8:	ec51 0b10 	vmov	r0, r1, d0
 80030ec:	a314      	add	r3, pc, #80	@ (adr r3, 8003140 <FAN_Drive+0x110>)
 80030ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f2:	f7fd faa9 	bl	8000648 <__aeabi_dmul>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4610      	mov	r0, r2
 80030fc:	4619      	mov	r1, r3
 80030fe:	f7fd fd53 	bl	8000ba8 <__aeabi_d2iz>
 8003102:	4603      	mov	r3, r0
 8003104:	4a14      	ldr	r2, [pc, #80]	@ (8003158 <FAN_Drive+0x128>)
 8003106:	fb82 1203 	smull	r1, r2, r2, r3
 800310a:	1492      	asrs	r2, r2, #18
 800310c:	17db      	asrs	r3, r3, #31
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	3314      	adds	r3, #20
 8003112:	4a12      	ldr	r2, [pc, #72]	@ (800315c <FAN_Drive+0x12c>)
 8003114:	6013      	str	r3, [r2, #0]

		// Enforce minimum and maximum duty cycles
		if (temperature < 20) {
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b13      	cmp	r3, #19
 800311a:	d803      	bhi.n	8003124 <FAN_Drive+0xf4>
		        duty_cycle = 20;
 800311c:	4b0f      	ldr	r3, [pc, #60]	@ (800315c <FAN_Drive+0x12c>)
 800311e:	2214      	movs	r2, #20
 8003120:	601a      	str	r2, [r3, #0]
		    	duty_cycle = 99;
		}

		//Set_PWM_DutyCycle(duty_cycle);

}
 8003122:	e005      	b.n	8003130 <FAN_Drive+0x100>
		} else if (temperature > 100) {
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b64      	cmp	r3, #100	@ 0x64
 8003128:	d902      	bls.n	8003130 <FAN_Drive+0x100>
		    	duty_cycle = 99;
 800312a:	4b0c      	ldr	r3, [pc, #48]	@ (800315c <FAN_Drive+0x12c>)
 800312c:	2263      	movs	r2, #99	@ 0x63
 800312e:	601a      	str	r2, [r3, #0]
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	00000000 	.word	0x00000000
 800313c:	40080000 	.word	0x40080000
 8003140:	00000000 	.word	0x00000000
 8003144:	4053c000 	.word	0x4053c000
 8003148:	20000a58 	.word	0x20000a58
 800314c:	20000a50 	.word	0x20000a50
 8003150:	20000a54 	.word	0x20000a54
 8003154:	cccccccd 	.word	0xcccccccd
 8003158:	431bde83 	.word	0x431bde83
 800315c:	2000001c 	.word	0x2000001c

08003160 <SendUSBMessage>:



void SendUSBMessage(const char* message) {
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(message);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7fd f8a9 	bl	80002c0 <strlen>
 800316e:	4603      	mov	r3, r0
 8003170:	81fb      	strh	r3, [r7, #14]
    if (len > 127) len = 127;  // Limit to buffer size
 8003172:	89fb      	ldrh	r3, [r7, #14]
 8003174:	2b7f      	cmp	r3, #127	@ 0x7f
 8003176:	d901      	bls.n	800317c <SendUSBMessage+0x1c>
 8003178:	237f      	movs	r3, #127	@ 0x7f
 800317a:	81fb      	strh	r3, [r7, #14]
    memcpy(USB_TX_Buffer, message, len);
 800317c:	89fb      	ldrh	r3, [r7, #14]
 800317e:	461a      	mov	r2, r3
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	480b      	ldr	r0, [pc, #44]	@ (80031b0 <SendUSBMessage+0x50>)
 8003184:	f00e fbb9 	bl	80118fa <memcpy>
    USB_TX_Buffer[len] = '\0';  // Ensure null-terminated string
 8003188:	89fb      	ldrh	r3, [r7, #14]
 800318a:	4a09      	ldr	r2, [pc, #36]	@ (80031b0 <SendUSBMessage+0x50>)
 800318c:	2100      	movs	r1, #0
 800318e:	54d1      	strb	r1, [r2, r3]
            break;
        }
      // HAL_Delay(10);  // Small delay before retrying
    } while (retry_count-- > 0);*/
    do {
            result = CDC_Transmit_FS((uint8_t*)message, len);
 8003190:	89fb      	ldrh	r3, [r7, #14]
 8003192:	4619      	mov	r1, r3
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f00c ff15 	bl	800ffc4 <CDC_Transmit_FS>
 800319a:	4603      	mov	r3, r0
 800319c:	737b      	strb	r3, [r7, #13]
        } while (result == USBD_BUSY); // Retry while USB is busy
 800319e:	7b7b      	ldrb	r3, [r7, #13]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d0f5      	beq.n	8003190 <SendUSBMessage+0x30>


}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000ad8 	.word	0x20000ad8

080031b4 <ParseUSBCommand>:

void ParseUSBCommand(void) {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
	 if (dataReceivedFlag) {
 80031b8:	4ba6      	ldr	r3, [pc, #664]	@ (8003454 <ParseUSBCommand+0x2a0>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 8146 	beq.w	8003450 <ParseUSBCommand+0x29c>
	        if (strncmp((char*)USB_RX_Buffer, "SET_KP", 6) == 0) {
 80031c4:	2206      	movs	r2, #6
 80031c6:	49a4      	ldr	r1, [pc, #656]	@ (8003458 <ParseUSBCommand+0x2a4>)
 80031c8:	48a4      	ldr	r0, [pc, #656]	@ (800345c <ParseUSBCommand+0x2a8>)
 80031ca:	f00e fb0c 	bl	80117e6 <strncmp>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d108      	bne.n	80031e6 <ParseUSBCommand+0x32>
	            sscanf((char*)USB_RX_Buffer, "SET_KP %f", &Kp);
 80031d4:	4aa2      	ldr	r2, [pc, #648]	@ (8003460 <ParseUSBCommand+0x2ac>)
 80031d6:	49a3      	ldr	r1, [pc, #652]	@ (8003464 <ParseUSBCommand+0x2b0>)
 80031d8:	48a0      	ldr	r0, [pc, #640]	@ (800345c <ParseUSBCommand+0x2a8>)
 80031da:	f00e fa8d 	bl	80116f8 <siscanf>
	            SendUSBMessage("KP Updated\n");
 80031de:	48a2      	ldr	r0, [pc, #648]	@ (8003468 <ParseUSBCommand+0x2b4>)
 80031e0:	f7ff ffbe 	bl	8003160 <SendUSBMessage>
 80031e4:	e12c      	b.n	8003440 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_Ti", 6) == 0) {
 80031e6:	2206      	movs	r2, #6
 80031e8:	49a0      	ldr	r1, [pc, #640]	@ (800346c <ParseUSBCommand+0x2b8>)
 80031ea:	489c      	ldr	r0, [pc, #624]	@ (800345c <ParseUSBCommand+0x2a8>)
 80031ec:	f00e fafb 	bl	80117e6 <strncmp>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d108      	bne.n	8003208 <ParseUSBCommand+0x54>
	            sscanf((char*)USB_RX_Buffer, "SET_Ti %f", &Ti);
 80031f6:	4a9e      	ldr	r2, [pc, #632]	@ (8003470 <ParseUSBCommand+0x2bc>)
 80031f8:	499e      	ldr	r1, [pc, #632]	@ (8003474 <ParseUSBCommand+0x2c0>)
 80031fa:	4898      	ldr	r0, [pc, #608]	@ (800345c <ParseUSBCommand+0x2a8>)
 80031fc:	f00e fa7c 	bl	80116f8 <siscanf>
	            SendUSBMessage("Ti Updated\n");
 8003200:	489d      	ldr	r0, [pc, #628]	@ (8003478 <ParseUSBCommand+0x2c4>)
 8003202:	f7ff ffad 	bl	8003160 <SendUSBMessage>
 8003206:	e11b      	b.n	8003440 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_VREF", 8) == 0) {
 8003208:	2208      	movs	r2, #8
 800320a:	499c      	ldr	r1, [pc, #624]	@ (800347c <ParseUSBCommand+0x2c8>)
 800320c:	4893      	ldr	r0, [pc, #588]	@ (800345c <ParseUSBCommand+0x2a8>)
 800320e:	f00e faea 	bl	80117e6 <strncmp>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d108      	bne.n	800322a <ParseUSBCommand+0x76>
	            sscanf((char*)USB_RX_Buffer, "SET_VREF %hu", &vref);
 8003218:	4a99      	ldr	r2, [pc, #612]	@ (8003480 <ParseUSBCommand+0x2cc>)
 800321a:	499a      	ldr	r1, [pc, #616]	@ (8003484 <ParseUSBCommand+0x2d0>)
 800321c:	488f      	ldr	r0, [pc, #572]	@ (800345c <ParseUSBCommand+0x2a8>)
 800321e:	f00e fa6b 	bl	80116f8 <siscanf>
	            SendUSBMessage("vref Updated\n");
 8003222:	4899      	ldr	r0, [pc, #612]	@ (8003488 <ParseUSBCommand+0x2d4>)
 8003224:	f7ff ff9c 	bl	8003160 <SendUSBMessage>
 8003228:	e10a      	b.n	8003440 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS1_VREF", 12) == 0) {
 800322a:	220c      	movs	r2, #12
 800322c:	4997      	ldr	r1, [pc, #604]	@ (800348c <ParseUSBCommand+0x2d8>)
 800322e:	488b      	ldr	r0, [pc, #556]	@ (800345c <ParseUSBCommand+0x2a8>)
 8003230:	f00e fad9 	bl	80117e6 <strncmp>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d108      	bne.n	800324c <ParseUSBCommand+0x98>
	            sscanf((char*)USB_RX_Buffer, "SET_CS1_VREF %d", &current_sensor1_vref);
 800323a:	4a95      	ldr	r2, [pc, #596]	@ (8003490 <ParseUSBCommand+0x2dc>)
 800323c:	4995      	ldr	r1, [pc, #596]	@ (8003494 <ParseUSBCommand+0x2e0>)
 800323e:	4887      	ldr	r0, [pc, #540]	@ (800345c <ParseUSBCommand+0x2a8>)
 8003240:	f00e fa5a 	bl	80116f8 <siscanf>
	            SendUSBMessage("current_sensor1_vref Updated\n");
 8003244:	4894      	ldr	r0, [pc, #592]	@ (8003498 <ParseUSBCommand+0x2e4>)
 8003246:	f7ff ff8b 	bl	8003160 <SendUSBMessage>
 800324a:	e0f9      	b.n	8003440 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS2_VREF", 12) == 0) {
 800324c:	220c      	movs	r2, #12
 800324e:	4993      	ldr	r1, [pc, #588]	@ (800349c <ParseUSBCommand+0x2e8>)
 8003250:	4882      	ldr	r0, [pc, #520]	@ (800345c <ParseUSBCommand+0x2a8>)
 8003252:	f00e fac8 	bl	80117e6 <strncmp>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d108      	bne.n	800326e <ParseUSBCommand+0xba>
	            sscanf((char*)USB_RX_Buffer, "SET_CS2_VREF %d", &current_sensor2_vref);
 800325c:	4a90      	ldr	r2, [pc, #576]	@ (80034a0 <ParseUSBCommand+0x2ec>)
 800325e:	4991      	ldr	r1, [pc, #580]	@ (80034a4 <ParseUSBCommand+0x2f0>)
 8003260:	487e      	ldr	r0, [pc, #504]	@ (800345c <ParseUSBCommand+0x2a8>)
 8003262:	f00e fa49 	bl	80116f8 <siscanf>
	            SendUSBMessage("current_sensor2_vref Updated\n");
 8003266:	4890      	ldr	r0, [pc, #576]	@ (80034a8 <ParseUSBCommand+0x2f4>)
 8003268:	f7ff ff7a 	bl	8003160 <SendUSBMessage>
 800326c:	e0e8      	b.n	8003440 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_IMAX2_SUM", 13) == 0) {
 800326e:	220d      	movs	r2, #13
 8003270:	498e      	ldr	r1, [pc, #568]	@ (80034ac <ParseUSBCommand+0x2f8>)
 8003272:	487a      	ldr	r0, [pc, #488]	@ (800345c <ParseUSBCommand+0x2a8>)
 8003274:	f00e fab7 	bl	80117e6 <strncmp>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d108      	bne.n	8003290 <ParseUSBCommand+0xdc>
	            sscanf((char*)USB_RX_Buffer, "SET_IMAX2_SUM %d", &imax2_sum);
 800327e:	4a8c      	ldr	r2, [pc, #560]	@ (80034b0 <ParseUSBCommand+0x2fc>)
 8003280:	498c      	ldr	r1, [pc, #560]	@ (80034b4 <ParseUSBCommand+0x300>)
 8003282:	4876      	ldr	r0, [pc, #472]	@ (800345c <ParseUSBCommand+0x2a8>)
 8003284:	f00e fa38 	bl	80116f8 <siscanf>
	            SendUSBMessage("imax2_sum Updated\n");
 8003288:	488b      	ldr	r0, [pc, #556]	@ (80034b8 <ParseUSBCommand+0x304>)
 800328a:	f7ff ff69 	bl	8003160 <SendUSBMessage>
 800328e:	e0d7      	b.n	8003440 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_TR", 12) == 0) {
 8003290:	220c      	movs	r2, #12
 8003292:	498a      	ldr	r1, [pc, #552]	@ (80034bc <ParseUSBCommand+0x308>)
 8003294:	4871      	ldr	r0, [pc, #452]	@ (800345c <ParseUSBCommand+0x2a8>)
 8003296:	f00e faa6 	bl	80117e6 <strncmp>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d108      	bne.n	80032b2 <ParseUSBCommand+0xfe>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_TR %f", &delay_tr);
 80032a0:	4a87      	ldr	r2, [pc, #540]	@ (80034c0 <ParseUSBCommand+0x30c>)
 80032a2:	4988      	ldr	r1, [pc, #544]	@ (80034c4 <ParseUSBCommand+0x310>)
 80032a4:	486d      	ldr	r0, [pc, #436]	@ (800345c <ParseUSBCommand+0x2a8>)
 80032a6:	f00e fa27 	bl	80116f8 <siscanf>
	            SendUSBMessage("delay_tr Updated\n");
 80032aa:	4887      	ldr	r0, [pc, #540]	@ (80034c8 <ParseUSBCommand+0x314>)
 80032ac:	f7ff ff58 	bl	8003160 <SendUSBMessage>
 80032b0:	e0c6      	b.n	8003440 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_HC", 12) == 0) {
 80032b2:	220c      	movs	r2, #12
 80032b4:	4985      	ldr	r1, [pc, #532]	@ (80034cc <ParseUSBCommand+0x318>)
 80032b6:	4869      	ldr	r0, [pc, #420]	@ (800345c <ParseUSBCommand+0x2a8>)
 80032b8:	f00e fa95 	bl	80117e6 <strncmp>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d108      	bne.n	80032d4 <ParseUSBCommand+0x120>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_HC %f", &delay_hc);
 80032c2:	4a83      	ldr	r2, [pc, #524]	@ (80034d0 <ParseUSBCommand+0x31c>)
 80032c4:	4983      	ldr	r1, [pc, #524]	@ (80034d4 <ParseUSBCommand+0x320>)
 80032c6:	4865      	ldr	r0, [pc, #404]	@ (800345c <ParseUSBCommand+0x2a8>)
 80032c8:	f00e fa16 	bl	80116f8 <siscanf>
	            SendUSBMessage("delay_hc Updated\n");
 80032cc:	4882      	ldr	r0, [pc, #520]	@ (80034d8 <ParseUSBCommand+0x324>)
 80032ce:	f7ff ff47 	bl	8003160 <SendUSBMessage>
 80032d2:	e0b5      	b.n	8003440 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_KP", 6) == 0) {
 80032d4:	2206      	movs	r2, #6
 80032d6:	4981      	ldr	r1, [pc, #516]	@ (80034dc <ParseUSBCommand+0x328>)
 80032d8:	4860      	ldr	r0, [pc, #384]	@ (800345c <ParseUSBCommand+0x2a8>)
 80032da:	f00e fa84 	bl	80117e6 <strncmp>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10e      	bne.n	8003302 <ParseUSBCommand+0x14e>
	            sprintf((char*)USB_TX_Buffer, "KP = %f\n", Kp);
 80032e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003460 <ParseUSBCommand+0x2ac>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd f955 	bl	8000598 <__aeabi_f2d>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	497b      	ldr	r1, [pc, #492]	@ (80034e0 <ParseUSBCommand+0x32c>)
 80032f4:	487b      	ldr	r0, [pc, #492]	@ (80034e4 <ParseUSBCommand+0x330>)
 80032f6:	f00e f9df 	bl	80116b8 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80032fa:	487a      	ldr	r0, [pc, #488]	@ (80034e4 <ParseUSBCommand+0x330>)
 80032fc:	f7ff ff30 	bl	8003160 <SendUSBMessage>
 8003300:	e09e      	b.n	8003440 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_Ti", 6) == 0) {
 8003302:	2206      	movs	r2, #6
 8003304:	4978      	ldr	r1, [pc, #480]	@ (80034e8 <ParseUSBCommand+0x334>)
 8003306:	4855      	ldr	r0, [pc, #340]	@ (800345c <ParseUSBCommand+0x2a8>)
 8003308:	f00e fa6d 	bl	80117e6 <strncmp>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10e      	bne.n	8003330 <ParseUSBCommand+0x17c>
	            sprintf((char*)USB_TX_Buffer, "Ti = %f\n", Ti);
 8003312:	4b57      	ldr	r3, [pc, #348]	@ (8003470 <ParseUSBCommand+0x2bc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd f93e 	bl	8000598 <__aeabi_f2d>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4972      	ldr	r1, [pc, #456]	@ (80034ec <ParseUSBCommand+0x338>)
 8003322:	4870      	ldr	r0, [pc, #448]	@ (80034e4 <ParseUSBCommand+0x330>)
 8003324:	f00e f9c8 	bl	80116b8 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003328:	486e      	ldr	r0, [pc, #440]	@ (80034e4 <ParseUSBCommand+0x330>)
 800332a:	f7ff ff19 	bl	8003160 <SendUSBMessage>
 800332e:	e087      	b.n	8003440 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_VREF", 8) == 0) {
 8003330:	2208      	movs	r2, #8
 8003332:	496f      	ldr	r1, [pc, #444]	@ (80034f0 <ParseUSBCommand+0x33c>)
 8003334:	4849      	ldr	r0, [pc, #292]	@ (800345c <ParseUSBCommand+0x2a8>)
 8003336:	f00e fa56 	bl	80117e6 <strncmp>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10a      	bne.n	8003356 <ParseUSBCommand+0x1a2>
	            sprintf((char*)USB_TX_Buffer, "vref = %hu\n", vref);
 8003340:	4b4f      	ldr	r3, [pc, #316]	@ (8003480 <ParseUSBCommand+0x2cc>)
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	496b      	ldr	r1, [pc, #428]	@ (80034f4 <ParseUSBCommand+0x340>)
 8003348:	4866      	ldr	r0, [pc, #408]	@ (80034e4 <ParseUSBCommand+0x330>)
 800334a:	f00e f9b5 	bl	80116b8 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800334e:	4865      	ldr	r0, [pc, #404]	@ (80034e4 <ParseUSBCommand+0x330>)
 8003350:	f7ff ff06 	bl	8003160 <SendUSBMessage>
 8003354:	e074      	b.n	8003440 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS1_VREF", 12) == 0) {
 8003356:	220c      	movs	r2, #12
 8003358:	4967      	ldr	r1, [pc, #412]	@ (80034f8 <ParseUSBCommand+0x344>)
 800335a:	4840      	ldr	r0, [pc, #256]	@ (800345c <ParseUSBCommand+0x2a8>)
 800335c:	f00e fa43 	bl	80117e6 <strncmp>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10a      	bne.n	800337c <ParseUSBCommand+0x1c8>
	            sprintf((char*)USB_TX_Buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 8003366:	4b4a      	ldr	r3, [pc, #296]	@ (8003490 <ParseUSBCommand+0x2dc>)
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	4963      	ldr	r1, [pc, #396]	@ (80034fc <ParseUSBCommand+0x348>)
 800336e:	485d      	ldr	r0, [pc, #372]	@ (80034e4 <ParseUSBCommand+0x330>)
 8003370:	f00e f9a2 	bl	80116b8 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003374:	485b      	ldr	r0, [pc, #364]	@ (80034e4 <ParseUSBCommand+0x330>)
 8003376:	f7ff fef3 	bl	8003160 <SendUSBMessage>
 800337a:	e061      	b.n	8003440 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS2_VREF", 12) == 0) {
 800337c:	220c      	movs	r2, #12
 800337e:	4960      	ldr	r1, [pc, #384]	@ (8003500 <ParseUSBCommand+0x34c>)
 8003380:	4836      	ldr	r0, [pc, #216]	@ (800345c <ParseUSBCommand+0x2a8>)
 8003382:	f00e fa30 	bl	80117e6 <strncmp>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10a      	bne.n	80033a2 <ParseUSBCommand+0x1ee>
	            sprintf((char*)USB_TX_Buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 800338c:	4b44      	ldr	r3, [pc, #272]	@ (80034a0 <ParseUSBCommand+0x2ec>)
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	495c      	ldr	r1, [pc, #368]	@ (8003504 <ParseUSBCommand+0x350>)
 8003394:	4853      	ldr	r0, [pc, #332]	@ (80034e4 <ParseUSBCommand+0x330>)
 8003396:	f00e f98f 	bl	80116b8 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800339a:	4852      	ldr	r0, [pc, #328]	@ (80034e4 <ParseUSBCommand+0x330>)
 800339c:	f7ff fee0 	bl	8003160 <SendUSBMessage>
 80033a0:	e04e      	b.n	8003440 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_IMAX2_SUM", 13) == 0) {
 80033a2:	220d      	movs	r2, #13
 80033a4:	4958      	ldr	r1, [pc, #352]	@ (8003508 <ParseUSBCommand+0x354>)
 80033a6:	482d      	ldr	r0, [pc, #180]	@ (800345c <ParseUSBCommand+0x2a8>)
 80033a8:	f00e fa1d 	bl	80117e6 <strncmp>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10a      	bne.n	80033c8 <ParseUSBCommand+0x214>
	            sprintf((char*)USB_TX_Buffer, "imax2_sum = %f\n", imax2_sum);
 80033b2:	4b3f      	ldr	r3, [pc, #252]	@ (80034b0 <ParseUSBCommand+0x2fc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	4954      	ldr	r1, [pc, #336]	@ (800350c <ParseUSBCommand+0x358>)
 80033ba:	484a      	ldr	r0, [pc, #296]	@ (80034e4 <ParseUSBCommand+0x330>)
 80033bc:	f00e f97c 	bl	80116b8 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80033c0:	4848      	ldr	r0, [pc, #288]	@ (80034e4 <ParseUSBCommand+0x330>)
 80033c2:	f7ff fecd 	bl	8003160 <SendUSBMessage>
 80033c6:	e03b      	b.n	8003440 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_TR", 12) == 0) {
 80033c8:	220c      	movs	r2, #12
 80033ca:	4951      	ldr	r1, [pc, #324]	@ (8003510 <ParseUSBCommand+0x35c>)
 80033cc:	4823      	ldr	r0, [pc, #140]	@ (800345c <ParseUSBCommand+0x2a8>)
 80033ce:	f00e fa0a 	bl	80117e6 <strncmp>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10e      	bne.n	80033f6 <ParseUSBCommand+0x242>
	            sprintf((char*)USB_TX_Buffer, "delay_tr = %f\n", delay_tr);
 80033d8:	4b39      	ldr	r3, [pc, #228]	@ (80034c0 <ParseUSBCommand+0x30c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fd f8db 	bl	8000598 <__aeabi_f2d>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	494b      	ldr	r1, [pc, #300]	@ (8003514 <ParseUSBCommand+0x360>)
 80033e8:	483e      	ldr	r0, [pc, #248]	@ (80034e4 <ParseUSBCommand+0x330>)
 80033ea:	f00e f965 	bl	80116b8 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80033ee:	483d      	ldr	r0, [pc, #244]	@ (80034e4 <ParseUSBCommand+0x330>)
 80033f0:	f7ff feb6 	bl	8003160 <SendUSBMessage>
 80033f4:	e024      	b.n	8003440 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_HC", 12) == 0) {
 80033f6:	220c      	movs	r2, #12
 80033f8:	4947      	ldr	r1, [pc, #284]	@ (8003518 <ParseUSBCommand+0x364>)
 80033fa:	4818      	ldr	r0, [pc, #96]	@ (800345c <ParseUSBCommand+0x2a8>)
 80033fc:	f00e f9f3 	bl	80117e6 <strncmp>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10e      	bne.n	8003424 <ParseUSBCommand+0x270>
	            sprintf((char*)USB_TX_Buffer, "delay_hc = %f\n", delay_hc);
 8003406:	4b32      	ldr	r3, [pc, #200]	@ (80034d0 <ParseUSBCommand+0x31c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7fd f8c4 	bl	8000598 <__aeabi_f2d>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4941      	ldr	r1, [pc, #260]	@ (800351c <ParseUSBCommand+0x368>)
 8003416:	4833      	ldr	r0, [pc, #204]	@ (80034e4 <ParseUSBCommand+0x330>)
 8003418:	f00e f94e 	bl	80116b8 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800341c:	4831      	ldr	r0, [pc, #196]	@ (80034e4 <ParseUSBCommand+0x330>)
 800341e:	f7ff fe9f 	bl	8003160 <SendUSBMessage>
 8003422:	e00d      	b.n	8003440 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "DISPLAY_ALL", 11) == 0) {
 8003424:	220b      	movs	r2, #11
 8003426:	493e      	ldr	r1, [pc, #248]	@ (8003520 <ParseUSBCommand+0x36c>)
 8003428:	480c      	ldr	r0, [pc, #48]	@ (800345c <ParseUSBCommand+0x2a8>)
 800342a:	f00e f9dc 	bl	80117e6 <strncmp>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d102      	bne.n	800343a <ParseUSBCommand+0x286>
	            DisplayAllVariables();
 8003434:	f000 f878 	bl	8003528 <DisplayAllVariables>
 8003438:	e002      	b.n	8003440 <ParseUSBCommand+0x28c>

	        } else {
	            SendUSBMessage("Unknown Command\n");
 800343a:	483a      	ldr	r0, [pc, #232]	@ (8003524 <ParseUSBCommand+0x370>)
 800343c:	f7ff fe90 	bl	8003160 <SendUSBMessage>
	        }
	        memset(USB_RX_Buffer, 0, sizeof(USB_RX_Buffer));  // Clear buffer
 8003440:	2240      	movs	r2, #64	@ 0x40
 8003442:	2100      	movs	r1, #0
 8003444:	4805      	ldr	r0, [pc, #20]	@ (800345c <ParseUSBCommand+0x2a8>)
 8003446:	f00e f9c6 	bl	80117d6 <memset>
	        dataReceivedFlag = 0;
 800344a:	4b02      	ldr	r3, [pc, #8]	@ (8003454 <ParseUSBCommand+0x2a0>)
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
	    }
}
 8003450:	bf00      	nop
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20000b58 	.word	0x20000b58
 8003458:	08016bd8 	.word	0x08016bd8
 800345c:	20000a98 	.word	0x20000a98
 8003460:	20000008 	.word	0x20000008
 8003464:	08016be0 	.word	0x08016be0
 8003468:	08016bec 	.word	0x08016bec
 800346c:	08016bf8 	.word	0x08016bf8
 8003470:	2000000c 	.word	0x2000000c
 8003474:	08016c00 	.word	0x08016c00
 8003478:	08016c0c 	.word	0x08016c0c
 800347c:	08016c18 	.word	0x08016c18
 8003480:	20000000 	.word	0x20000000
 8003484:	08016c24 	.word	0x08016c24
 8003488:	08016c34 	.word	0x08016c34
 800348c:	08016c44 	.word	0x08016c44
 8003490:	20000a3c 	.word	0x20000a3c
 8003494:	08016c54 	.word	0x08016c54
 8003498:	08016c64 	.word	0x08016c64
 800349c:	08016c84 	.word	0x08016c84
 80034a0:	20000a3e 	.word	0x20000a3e
 80034a4:	08016c94 	.word	0x08016c94
 80034a8:	08016ca4 	.word	0x08016ca4
 80034ac:	08016cc4 	.word	0x08016cc4
 80034b0:	20000a7c 	.word	0x20000a7c
 80034b4:	08016cd4 	.word	0x08016cd4
 80034b8:	08016ce8 	.word	0x08016ce8
 80034bc:	08016cfc 	.word	0x08016cfc
 80034c0:	20000a74 	.word	0x20000a74
 80034c4:	08016d0c 	.word	0x08016d0c
 80034c8:	08016d1c 	.word	0x08016d1c
 80034cc:	08016d30 	.word	0x08016d30
 80034d0:	20000a78 	.word	0x20000a78
 80034d4:	08016d40 	.word	0x08016d40
 80034d8:	08016d50 	.word	0x08016d50
 80034dc:	08016d64 	.word	0x08016d64
 80034e0:	08016d6c 	.word	0x08016d6c
 80034e4:	20000ad8 	.word	0x20000ad8
 80034e8:	08016d78 	.word	0x08016d78
 80034ec:	08016d80 	.word	0x08016d80
 80034f0:	08016d8c 	.word	0x08016d8c
 80034f4:	08016d98 	.word	0x08016d98
 80034f8:	08016da4 	.word	0x08016da4
 80034fc:	08016db4 	.word	0x08016db4
 8003500:	08016dd0 	.word	0x08016dd0
 8003504:	08016de0 	.word	0x08016de0
 8003508:	08016dfc 	.word	0x08016dfc
 800350c:	08016e0c 	.word	0x08016e0c
 8003510:	08016e1c 	.word	0x08016e1c
 8003514:	08016e2c 	.word	0x08016e2c
 8003518:	08016e3c 	.word	0x08016e3c
 800351c:	08016e4c 	.word	0x08016e4c
 8003520:	08016e5c 	.word	0x08016e5c
 8003524:	08016e68 	.word	0x08016e68

08003528 <DisplayAllVariables>:

void DisplayAllVariables(void) {
 8003528:	b580      	push	{r7, lr}
 800352a:	b0a0      	sub	sp, #128	@ 0x80
 800352c:	af00      	add	r7, sp, #0
    char buffer[128];

    sprintf(buffer, "KP = %f\n", Kp);
 800352e:	4b5e      	ldr	r3, [pc, #376]	@ (80036a8 <DisplayAllVariables+0x180>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd f830 	bl	8000598 <__aeabi_f2d>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4638      	mov	r0, r7
 800353e:	495b      	ldr	r1, [pc, #364]	@ (80036ac <DisplayAllVariables+0x184>)
 8003540:	f00e f8ba 	bl	80116b8 <siprintf>
        SendUSBMessage(buffer);
 8003544:	463b      	mov	r3, r7
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff fe0a 	bl	8003160 <SendUSBMessage>

        sprintf(buffer, "Ti = %f\n", Ti);
 800354c:	4b58      	ldr	r3, [pc, #352]	@ (80036b0 <DisplayAllVariables+0x188>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f7fd f821 	bl	8000598 <__aeabi_f2d>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4638      	mov	r0, r7
 800355c:	4955      	ldr	r1, [pc, #340]	@ (80036b4 <DisplayAllVariables+0x18c>)
 800355e:	f00e f8ab 	bl	80116b8 <siprintf>
        SendUSBMessage(buffer);
 8003562:	463b      	mov	r3, r7
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fdfb 	bl	8003160 <SendUSBMessage>

        sprintf(buffer, "vref = %hu\n", vref);
 800356a:	4b53      	ldr	r3, [pc, #332]	@ (80036b8 <DisplayAllVariables+0x190>)
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	463b      	mov	r3, r7
 8003572:	4952      	ldr	r1, [pc, #328]	@ (80036bc <DisplayAllVariables+0x194>)
 8003574:	4618      	mov	r0, r3
 8003576:	f00e f89f 	bl	80116b8 <siprintf>
        SendUSBMessage(buffer);
 800357a:	463b      	mov	r3, r7
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fdef 	bl	8003160 <SendUSBMessage>

        sprintf(buffer, "imax1 = %f\n", imax1);
 8003582:	4b4f      	ldr	r3, [pc, #316]	@ (80036c0 <DisplayAllVariables+0x198>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	463b      	mov	r3, r7
 8003588:	494e      	ldr	r1, [pc, #312]	@ (80036c4 <DisplayAllVariables+0x19c>)
 800358a:	4618      	mov	r0, r3
 800358c:	f00e f894 	bl	80116b8 <siprintf>
        SendUSBMessage(buffer);
 8003590:	463b      	mov	r3, r7
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fde4 	bl	8003160 <SendUSBMessage>

        sprintf(buffer, "imax2 = %f\n", imax2);
 8003598:	4b4b      	ldr	r3, [pc, #300]	@ (80036c8 <DisplayAllVariables+0x1a0>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	463b      	mov	r3, r7
 800359e:	494b      	ldr	r1, [pc, #300]	@ (80036cc <DisplayAllVariables+0x1a4>)
 80035a0:	4618      	mov	r0, r3
 80035a2:	f00e f889 	bl	80116b8 <siprintf>
        SendUSBMessage(buffer);
 80035a6:	463b      	mov	r3, r7
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff fdd9 	bl	8003160 <SendUSBMessage>

        sprintf(buffer, "imin = %f\n", imin);
 80035ae:	4b48      	ldr	r3, [pc, #288]	@ (80036d0 <DisplayAllVariables+0x1a8>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	463b      	mov	r3, r7
 80035b4:	4947      	ldr	r1, [pc, #284]	@ (80036d4 <DisplayAllVariables+0x1ac>)
 80035b6:	4618      	mov	r0, r3
 80035b8:	f00e f87e 	bl	80116b8 <siprintf>
        SendUSBMessage(buffer);
 80035bc:	463b      	mov	r3, r7
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff fdce 	bl	8003160 <SendUSBMessage>

        sprintf(buffer, "input_voltage = %f\n", input_voltage);
 80035c4:	4b44      	ldr	r3, [pc, #272]	@ (80036d8 <DisplayAllVariables+0x1b0>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	463b      	mov	r3, r7
 80035ca:	4944      	ldr	r1, [pc, #272]	@ (80036dc <DisplayAllVariables+0x1b4>)
 80035cc:	4618      	mov	r0, r3
 80035ce:	f00e f873 	bl	80116b8 <siprintf>
        SendUSBMessage(buffer);
 80035d2:	463b      	mov	r3, r7
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff fdc3 	bl	8003160 <SendUSBMessage>

        sprintf(buffer, "output_voltage = %f\n", output_voltage);
 80035da:	4b41      	ldr	r3, [pc, #260]	@ (80036e0 <DisplayAllVariables+0x1b8>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	463b      	mov	r3, r7
 80035e0:	4940      	ldr	r1, [pc, #256]	@ (80036e4 <DisplayAllVariables+0x1bc>)
 80035e2:	4618      	mov	r0, r3
 80035e4:	f00e f868 	bl	80116b8 <siprintf>
        SendUSBMessage(buffer);
 80035e8:	463b      	mov	r3, r7
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fdb8 	bl	8003160 <SendUSBMessage>

        sprintf(buffer, "pcb_temp = %f\n", pcb_temp);
 80035f0:	4b3d      	ldr	r3, [pc, #244]	@ (80036e8 <DisplayAllVariables+0x1c0>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	463b      	mov	r3, r7
 80035f6:	493d      	ldr	r1, [pc, #244]	@ (80036ec <DisplayAllVariables+0x1c4>)
 80035f8:	4618      	mov	r0, r3
 80035fa:	f00e f85d 	bl	80116b8 <siprintf>
        SendUSBMessage(buffer);
 80035fe:	463b      	mov	r3, r7
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff fdad 	bl	8003160 <SendUSBMessage>

        sprintf(buffer, "heat_sink_temp = %f\n", heat_sink_temp);
 8003606:	4b3a      	ldr	r3, [pc, #232]	@ (80036f0 <DisplayAllVariables+0x1c8>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	463b      	mov	r3, r7
 800360c:	4939      	ldr	r1, [pc, #228]	@ (80036f4 <DisplayAllVariables+0x1cc>)
 800360e:	4618      	mov	r0, r3
 8003610:	f00e f852 	bl	80116b8 <siprintf>
        SendUSBMessage(buffer);
 8003614:	463b      	mov	r3, r7
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff fda2 	bl	8003160 <SendUSBMessage>

        sprintf(buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 800361c:	4b36      	ldr	r3, [pc, #216]	@ (80036f8 <DisplayAllVariables+0x1d0>)
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	461a      	mov	r2, r3
 8003622:	463b      	mov	r3, r7
 8003624:	4935      	ldr	r1, [pc, #212]	@ (80036fc <DisplayAllVariables+0x1d4>)
 8003626:	4618      	mov	r0, r3
 8003628:	f00e f846 	bl	80116b8 <siprintf>
        SendUSBMessage(buffer);
 800362c:	463b      	mov	r3, r7
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff fd96 	bl	8003160 <SendUSBMessage>

        sprintf(buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 8003634:	4b32      	ldr	r3, [pc, #200]	@ (8003700 <DisplayAllVariables+0x1d8>)
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	461a      	mov	r2, r3
 800363a:	463b      	mov	r3, r7
 800363c:	4931      	ldr	r1, [pc, #196]	@ (8003704 <DisplayAllVariables+0x1dc>)
 800363e:	4618      	mov	r0, r3
 8003640:	f00e f83a 	bl	80116b8 <siprintf>
        SendUSBMessage(buffer);
 8003644:	463b      	mov	r3, r7
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff fd8a 	bl	8003160 <SendUSBMessage>

        sprintf(buffer, "imax2_sum = %f\n", imax2_sum);
 800364c:	4b2e      	ldr	r3, [pc, #184]	@ (8003708 <DisplayAllVariables+0x1e0>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	463b      	mov	r3, r7
 8003652:	492e      	ldr	r1, [pc, #184]	@ (800370c <DisplayAllVariables+0x1e4>)
 8003654:	4618      	mov	r0, r3
 8003656:	f00e f82f 	bl	80116b8 <siprintf>
        SendUSBMessage(buffer);
 800365a:	463b      	mov	r3, r7
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fd7f 	bl	8003160 <SendUSBMessage>

        sprintf(buffer, "delay_tr = %f\n", delay_tr);
 8003662:	4b2b      	ldr	r3, [pc, #172]	@ (8003710 <DisplayAllVariables+0x1e8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7fc ff96 	bl	8000598 <__aeabi_f2d>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4638      	mov	r0, r7
 8003672:	4928      	ldr	r1, [pc, #160]	@ (8003714 <DisplayAllVariables+0x1ec>)
 8003674:	f00e f820 	bl	80116b8 <siprintf>
        SendUSBMessage(buffer);
 8003678:	463b      	mov	r3, r7
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff fd70 	bl	8003160 <SendUSBMessage>

        sprintf(buffer, "delay_hc = %f\n", delay_hc);
 8003680:	4b25      	ldr	r3, [pc, #148]	@ (8003718 <DisplayAllVariables+0x1f0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f7fc ff87 	bl	8000598 <__aeabi_f2d>
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	4638      	mov	r0, r7
 8003690:	4922      	ldr	r1, [pc, #136]	@ (800371c <DisplayAllVariables+0x1f4>)
 8003692:	f00e f811 	bl	80116b8 <siprintf>
        SendUSBMessage(buffer);
 8003696:	463b      	mov	r3, r7
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff fd61 	bl	8003160 <SendUSBMessage>
}
 800369e:	bf00      	nop
 80036a0:	3780      	adds	r7, #128	@ 0x80
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000008 	.word	0x20000008
 80036ac:	08016d6c 	.word	0x08016d6c
 80036b0:	2000000c 	.word	0x2000000c
 80036b4:	08016d80 	.word	0x08016d80
 80036b8:	20000000 	.word	0x20000000
 80036bc:	08016d98 	.word	0x08016d98
 80036c0:	20000a40 	.word	0x20000a40
 80036c4:	08016e7c 	.word	0x08016e7c
 80036c8:	20000a44 	.word	0x20000a44
 80036cc:	08016e88 	.word	0x08016e88
 80036d0:	20000a48 	.word	0x20000a48
 80036d4:	08016e94 	.word	0x08016e94
 80036d8:	20000a4c 	.word	0x20000a4c
 80036dc:	08016ea0 	.word	0x08016ea0
 80036e0:	20000a64 	.word	0x20000a64
 80036e4:	08016eb4 	.word	0x08016eb4
 80036e8:	20000a50 	.word	0x20000a50
 80036ec:	08016ecc 	.word	0x08016ecc
 80036f0:	20000a54 	.word	0x20000a54
 80036f4:	08016edc 	.word	0x08016edc
 80036f8:	20000a3c 	.word	0x20000a3c
 80036fc:	08016db4 	.word	0x08016db4
 8003700:	20000a3e 	.word	0x20000a3e
 8003704:	08016de0 	.word	0x08016de0
 8003708:	20000a7c 	.word	0x20000a7c
 800370c:	08016e0c 	.word	0x08016e0c
 8003710:	20000a74 	.word	0x20000a74
 8003714:	08016e2c 	.word	0x08016e2c
 8003718:	20000a78 	.word	0x20000a78
 800371c:	08016e4c 	.word	0x08016e4c

08003720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003724:	b672      	cpsid	i
}
 8003726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003728:	bf00      	nop
 800372a:	e7fd      	b.n	8003728 <Error_Handler+0x8>

0800372c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003732:	4b0f      	ldr	r3, [pc, #60]	@ (8003770 <HAL_MspInit+0x44>)
 8003734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003736:	4a0e      	ldr	r2, [pc, #56]	@ (8003770 <HAL_MspInit+0x44>)
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	6613      	str	r3, [r2, #96]	@ 0x60
 800373e:	4b0c      	ldr	r3, [pc, #48]	@ (8003770 <HAL_MspInit+0x44>)
 8003740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	607b      	str	r3, [r7, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800374a:	4b09      	ldr	r3, [pc, #36]	@ (8003770 <HAL_MspInit+0x44>)
 800374c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374e:	4a08      	ldr	r2, [pc, #32]	@ (8003770 <HAL_MspInit+0x44>)
 8003750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003754:	6593      	str	r3, [r2, #88]	@ 0x58
 8003756:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <HAL_MspInit+0x44>)
 8003758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003762:	f005 f919 	bl	8008998 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000

08003774 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b0a4      	sub	sp, #144	@ 0x90
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800377c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	60da      	str	r2, [r3, #12]
 800378a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800378c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003790:	2254      	movs	r2, #84	@ 0x54
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f00e f81e 	bl	80117d6 <memset>
  if(hadc->Instance==ADC1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037a2:	d11c      	bne.n	80037de <HAL_ADC_MspInit+0x6a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80037a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80037aa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80037ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80037b4:	4618      	mov	r0, r3
 80037b6:	f005 fe2d 	bl	8009414 <HAL_RCCEx_PeriphCLKConfig>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80037c0:	f7ff ffae 	bl	8003720 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80037c4:	4b85      	ldr	r3, [pc, #532]	@ (80039dc <HAL_ADC_MspInit+0x268>)
 80037c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c8:	4a84      	ldr	r2, [pc, #528]	@ (80039dc <HAL_ADC_MspInit+0x268>)
 80037ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80037ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037d0:	4b82      	ldr	r3, [pc, #520]	@ (80039dc <HAL_ADC_MspInit+0x268>)
 80037d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 80037dc:	e183      	b.n	8003ae6 <HAL_ADC_MspInit+0x372>
  else if(hadc->Instance==ADC3)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a7f      	ldr	r2, [pc, #508]	@ (80039e0 <HAL_ADC_MspInit+0x26c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	f040 8087 	bne.w	80038f8 <HAL_ADC_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80037ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80037f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80037f4:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80037fa:	4618      	mov	r0, r3
 80037fc:	f005 fe0a 	bl	8009414 <HAL_RCCEx_PeriphCLKConfig>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_ADC_MspInit+0x96>
      Error_Handler();
 8003806:	f7ff ff8b 	bl	8003720 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800380a:	4b76      	ldr	r3, [pc, #472]	@ (80039e4 <HAL_ADC_MspInit+0x270>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	3301      	adds	r3, #1
 8003810:	4a74      	ldr	r2, [pc, #464]	@ (80039e4 <HAL_ADC_MspInit+0x270>)
 8003812:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003814:	4b73      	ldr	r3, [pc, #460]	@ (80039e4 <HAL_ADC_MspInit+0x270>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d10b      	bne.n	8003834 <HAL_ADC_MspInit+0xc0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800381c:	4b6f      	ldr	r3, [pc, #444]	@ (80039dc <HAL_ADC_MspInit+0x268>)
 800381e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003820:	4a6e      	ldr	r2, [pc, #440]	@ (80039dc <HAL_ADC_MspInit+0x268>)
 8003822:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003826:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003828:	4b6c      	ldr	r3, [pc, #432]	@ (80039dc <HAL_ADC_MspInit+0x268>)
 800382a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800382c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003830:	623b      	str	r3, [r7, #32]
 8003832:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003834:	4b69      	ldr	r3, [pc, #420]	@ (80039dc <HAL_ADC_MspInit+0x268>)
 8003836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003838:	4a68      	ldr	r2, [pc, #416]	@ (80039dc <HAL_ADC_MspInit+0x268>)
 800383a:	f043 0302 	orr.w	r3, r3, #2
 800383e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003840:	4b66      	ldr	r3, [pc, #408]	@ (80039dc <HAL_ADC_MspInit+0x268>)
 8003842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800384c:	4b63      	ldr	r3, [pc, #396]	@ (80039dc <HAL_ADC_MspInit+0x268>)
 800384e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003850:	4a62      	ldr	r2, [pc, #392]	@ (80039dc <HAL_ADC_MspInit+0x268>)
 8003852:	f043 0310 	orr.w	r3, r3, #16
 8003856:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003858:	4b60      	ldr	r3, [pc, #384]	@ (80039dc <HAL_ADC_MspInit+0x268>)
 800385a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800385c:	f003 0310 	and.w	r3, r3, #16
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = CS_VREF_1_Pin|HEATSINK_TEMP_Pin;
 8003864:	f242 0302 	movw	r3, #8194	@ 0x2002
 8003868:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800386a:	2303      	movs	r3, #3
 800386c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003870:	2300      	movs	r3, #0
 8003872:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003876:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800387a:	4619      	mov	r1, r3
 800387c:	485a      	ldr	r0, [pc, #360]	@ (80039e8 <HAL_ADC_MspInit+0x274>)
 800387e:	f003 f8e5 	bl	8006a4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PCB_TEMP_Pin|CS_VREF_2_Pin|INPUT_V_ADC_Pin;
 8003882:	f44f 530a 	mov.w	r3, #8832	@ 0x2280
 8003886:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003888:	2303      	movs	r3, #3
 800388a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388e:	2300      	movs	r3, #0
 8003890:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003894:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003898:	4619      	mov	r1, r3
 800389a:	4854      	ldr	r0, [pc, #336]	@ (80039ec <HAL_ADC_MspInit+0x278>)
 800389c:	f003 f8d6 	bl	8006a4c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel1;
 80038a0:	4b53      	ldr	r3, [pc, #332]	@ (80039f0 <HAL_ADC_MspInit+0x27c>)
 80038a2:	4a54      	ldr	r2, [pc, #336]	@ (80039f4 <HAL_ADC_MspInit+0x280>)
 80038a4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80038a6:	4b52      	ldr	r3, [pc, #328]	@ (80039f0 <HAL_ADC_MspInit+0x27c>)
 80038a8:	2225      	movs	r2, #37	@ 0x25
 80038aa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038ac:	4b50      	ldr	r3, [pc, #320]	@ (80039f0 <HAL_ADC_MspInit+0x27c>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80038b2:	4b4f      	ldr	r3, [pc, #316]	@ (80039f0 <HAL_ADC_MspInit+0x27c>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80038b8:	4b4d      	ldr	r3, [pc, #308]	@ (80039f0 <HAL_ADC_MspInit+0x27c>)
 80038ba:	2280      	movs	r2, #128	@ 0x80
 80038bc:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80038be:	4b4c      	ldr	r3, [pc, #304]	@ (80039f0 <HAL_ADC_MspInit+0x27c>)
 80038c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038c4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80038c6:	4b4a      	ldr	r3, [pc, #296]	@ (80039f0 <HAL_ADC_MspInit+0x27c>)
 80038c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038cc:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80038ce:	4b48      	ldr	r3, [pc, #288]	@ (80039f0 <HAL_ADC_MspInit+0x27c>)
 80038d0:	2220      	movs	r2, #32
 80038d2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80038d4:	4b46      	ldr	r3, [pc, #280]	@ (80039f0 <HAL_ADC_MspInit+0x27c>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80038da:	4845      	ldr	r0, [pc, #276]	@ (80039f0 <HAL_ADC_MspInit+0x27c>)
 80038dc:	f002 fe44 	bl	8006568 <HAL_DMA_Init>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_ADC_MspInit+0x176>
      Error_Handler();
 80038e6:	f7ff ff1b 	bl	8003720 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a40      	ldr	r2, [pc, #256]	@ (80039f0 <HAL_ADC_MspInit+0x27c>)
 80038ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80038f0:	4a3f      	ldr	r2, [pc, #252]	@ (80039f0 <HAL_ADC_MspInit+0x27c>)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80038f6:	e0f6      	b.n	8003ae6 <HAL_ADC_MspInit+0x372>
  else if(hadc->Instance==ADC4)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a3e      	ldr	r2, [pc, #248]	@ (80039f8 <HAL_ADC_MspInit+0x284>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	f040 8080 	bne.w	8003a04 <HAL_ADC_MspInit+0x290>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003904:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003908:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 800390a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800390e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003910:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003914:	4618      	mov	r0, r3
 8003916:	f005 fd7d 	bl	8009414 <HAL_RCCEx_PeriphCLKConfig>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <HAL_ADC_MspInit+0x1b0>
      Error_Handler();
 8003920:	f7ff fefe 	bl	8003720 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003924:	4b2f      	ldr	r3, [pc, #188]	@ (80039e4 <HAL_ADC_MspInit+0x270>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3301      	adds	r3, #1
 800392a:	4a2e      	ldr	r2, [pc, #184]	@ (80039e4 <HAL_ADC_MspInit+0x270>)
 800392c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800392e:	4b2d      	ldr	r3, [pc, #180]	@ (80039e4 <HAL_ADC_MspInit+0x270>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d10b      	bne.n	800394e <HAL_ADC_MspInit+0x1da>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003936:	4b29      	ldr	r3, [pc, #164]	@ (80039dc <HAL_ADC_MspInit+0x268>)
 8003938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800393a:	4a28      	ldr	r2, [pc, #160]	@ (80039dc <HAL_ADC_MspInit+0x268>)
 800393c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003942:	4b26      	ldr	r3, [pc, #152]	@ (80039dc <HAL_ADC_MspInit+0x268>)
 8003944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800394e:	4b23      	ldr	r3, [pc, #140]	@ (80039dc <HAL_ADC_MspInit+0x268>)
 8003950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003952:	4a22      	ldr	r2, [pc, #136]	@ (80039dc <HAL_ADC_MspInit+0x268>)
 8003954:	f043 0310 	orr.w	r3, r3, #16
 8003958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800395a:	4b20      	ldr	r3, [pc, #128]	@ (80039dc <HAL_ADC_MspInit+0x268>)
 800395c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT_V_ADC_Pin;
 8003966:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800396a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800396c:	2303      	movs	r3, #3
 800396e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003972:	2300      	movs	r3, #0
 8003974:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(OUTPUT_V_ADC_GPIO_Port, &GPIO_InitStruct);
 8003978:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800397c:	4619      	mov	r1, r3
 800397e:	481b      	ldr	r0, [pc, #108]	@ (80039ec <HAL_ADC_MspInit+0x278>)
 8003980:	f003 f864 	bl	8006a4c <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel2;
 8003984:	4b1d      	ldr	r3, [pc, #116]	@ (80039fc <HAL_ADC_MspInit+0x288>)
 8003986:	4a1e      	ldr	r2, [pc, #120]	@ (8003a00 <HAL_ADC_MspInit+0x28c>)
 8003988:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 800398a:	4b1c      	ldr	r3, [pc, #112]	@ (80039fc <HAL_ADC_MspInit+0x288>)
 800398c:	2226      	movs	r2, #38	@ 0x26
 800398e:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003990:	4b1a      	ldr	r3, [pc, #104]	@ (80039fc <HAL_ADC_MspInit+0x288>)
 8003992:	2200      	movs	r2, #0
 8003994:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003996:	4b19      	ldr	r3, [pc, #100]	@ (80039fc <HAL_ADC_MspInit+0x288>)
 8003998:	2200      	movs	r2, #0
 800399a:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800399c:	4b17      	ldr	r3, [pc, #92]	@ (80039fc <HAL_ADC_MspInit+0x288>)
 800399e:	2280      	movs	r2, #128	@ 0x80
 80039a0:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80039a2:	4b16      	ldr	r3, [pc, #88]	@ (80039fc <HAL_ADC_MspInit+0x288>)
 80039a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039a8:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80039aa:	4b14      	ldr	r3, [pc, #80]	@ (80039fc <HAL_ADC_MspInit+0x288>)
 80039ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039b0:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80039b2:	4b12      	ldr	r3, [pc, #72]	@ (80039fc <HAL_ADC_MspInit+0x288>)
 80039b4:	2220      	movs	r2, #32
 80039b6:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80039b8:	4b10      	ldr	r3, [pc, #64]	@ (80039fc <HAL_ADC_MspInit+0x288>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80039be:	480f      	ldr	r0, [pc, #60]	@ (80039fc <HAL_ADC_MspInit+0x288>)
 80039c0:	f002 fdd2 	bl	8006568 <HAL_DMA_Init>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_ADC_MspInit+0x25a>
      Error_Handler();
 80039ca:	f7ff fea9 	bl	8003720 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a0a      	ldr	r2, [pc, #40]	@ (80039fc <HAL_ADC_MspInit+0x288>)
 80039d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80039d4:	4a09      	ldr	r2, [pc, #36]	@ (80039fc <HAL_ADC_MspInit+0x288>)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80039da:	e084      	b.n	8003ae6 <HAL_ADC_MspInit+0x372>
 80039dc:	40021000 	.word	0x40021000
 80039e0:	50000400 	.word	0x50000400
 80039e4:	20000b74 	.word	0x20000b74
 80039e8:	48000400 	.word	0x48000400
 80039ec:	48001000 	.word	0x48001000
 80039f0:	20000564 	.word	0x20000564
 80039f4:	40020008 	.word	0x40020008
 80039f8:	50000500 	.word	0x50000500
 80039fc:	200005c4 	.word	0x200005c4
 8003a00:	4002001c 	.word	0x4002001c
  else if(hadc->Instance==ADC5)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a39      	ldr	r2, [pc, #228]	@ (8003af0 <HAL_ADC_MspInit+0x37c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d16b      	bne.n	8003ae6 <HAL_ADC_MspInit+0x372>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003a0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a12:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003a14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003a18:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f005 fcf8 	bl	8009414 <HAL_RCCEx_PeriphCLKConfig>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_ADC_MspInit+0x2ba>
      Error_Handler();
 8003a2a:	f7ff fe79 	bl	8003720 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003a2e:	4b31      	ldr	r3, [pc, #196]	@ (8003af4 <HAL_ADC_MspInit+0x380>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3301      	adds	r3, #1
 8003a34:	4a2f      	ldr	r2, [pc, #188]	@ (8003af4 <HAL_ADC_MspInit+0x380>)
 8003a36:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003a38:	4b2e      	ldr	r3, [pc, #184]	@ (8003af4 <HAL_ADC_MspInit+0x380>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d10b      	bne.n	8003a58 <HAL_ADC_MspInit+0x2e4>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003a40:	4b2d      	ldr	r3, [pc, #180]	@ (8003af8 <HAL_ADC_MspInit+0x384>)
 8003a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a44:	4a2c      	ldr	r2, [pc, #176]	@ (8003af8 <HAL_ADC_MspInit+0x384>)
 8003a46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003af8 <HAL_ADC_MspInit+0x384>)
 8003a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a58:	4b27      	ldr	r3, [pc, #156]	@ (8003af8 <HAL_ADC_MspInit+0x384>)
 8003a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a5c:	4a26      	ldr	r2, [pc, #152]	@ (8003af8 <HAL_ADC_MspInit+0x384>)
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a64:	4b24      	ldr	r3, [pc, #144]	@ (8003af8 <HAL_ADC_MspInit+0x384>)
 8003a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMAX2_SUM_Pin;
 8003a70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a74:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a76:	2303      	movs	r3, #3
 8003a78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(IMAX2_SUM_GPIO_Port, &GPIO_InitStruct);
 8003a82:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003a86:	4619      	mov	r1, r3
 8003a88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a8c:	f002 ffde 	bl	8006a4c <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel3;
 8003a90:	4b1a      	ldr	r3, [pc, #104]	@ (8003afc <HAL_ADC_MspInit+0x388>)
 8003a92:	4a1b      	ldr	r2, [pc, #108]	@ (8003b00 <HAL_ADC_MspInit+0x38c>)
 8003a94:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8003a96:	4b19      	ldr	r3, [pc, #100]	@ (8003afc <HAL_ADC_MspInit+0x388>)
 8003a98:	2227      	movs	r2, #39	@ 0x27
 8003a9a:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a9c:	4b17      	ldr	r3, [pc, #92]	@ (8003afc <HAL_ADC_MspInit+0x388>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aa2:	4b16      	ldr	r3, [pc, #88]	@ (8003afc <HAL_ADC_MspInit+0x388>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8003aa8:	4b14      	ldr	r3, [pc, #80]	@ (8003afc <HAL_ADC_MspInit+0x388>)
 8003aaa:	2280      	movs	r2, #128	@ 0x80
 8003aac:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003aae:	4b13      	ldr	r3, [pc, #76]	@ (8003afc <HAL_ADC_MspInit+0x388>)
 8003ab0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ab4:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ab6:	4b11      	ldr	r3, [pc, #68]	@ (8003afc <HAL_ADC_MspInit+0x388>)
 8003ab8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003abc:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8003abe:	4b0f      	ldr	r3, [pc, #60]	@ (8003afc <HAL_ADC_MspInit+0x388>)
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8003ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8003afc <HAL_ADC_MspInit+0x388>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8003aca:	480c      	ldr	r0, [pc, #48]	@ (8003afc <HAL_ADC_MspInit+0x388>)
 8003acc:	f002 fd4c 	bl	8006568 <HAL_DMA_Init>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_ADC_MspInit+0x366>
      Error_Handler();
 8003ad6:	f7ff fe23 	bl	8003720 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a07      	ldr	r2, [pc, #28]	@ (8003afc <HAL_ADC_MspInit+0x388>)
 8003ade:	655a      	str	r2, [r3, #84]	@ 0x54
 8003ae0:	4a06      	ldr	r2, [pc, #24]	@ (8003afc <HAL_ADC_MspInit+0x388>)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003ae6:	bf00      	nop
 8003ae8:	3790      	adds	r7, #144	@ 0x90
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	50000600 	.word	0x50000600
 8003af4:	20000b74 	.word	0x20000b74
 8003af8:	40021000 	.word	0x40021000
 8003afc:	20000624 	.word	0x20000624
 8003b00:	40020030 	.word	0x40020030

08003b04 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a0a      	ldr	r2, [pc, #40]	@ (8003b3c <HAL_CORDIC_MspInit+0x38>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d10b      	bne.n	8003b2e <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003b16:	4b0a      	ldr	r3, [pc, #40]	@ (8003b40 <HAL_CORDIC_MspInit+0x3c>)
 8003b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b1a:	4a09      	ldr	r2, [pc, #36]	@ (8003b40 <HAL_CORDIC_MspInit+0x3c>)
 8003b1c:	f043 0308 	orr.w	r3, r3, #8
 8003b20:	6493      	str	r3, [r2, #72]	@ 0x48
 8003b22:	4b07      	ldr	r3, [pc, #28]	@ (8003b40 <HAL_CORDIC_MspInit+0x3c>)
 8003b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8003b2e:	bf00      	nop
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40020c00 	.word	0x40020c00
 8003b40:	40021000 	.word	0x40021000

08003b44 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08c      	sub	sp, #48	@ 0x30
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b4c:	f107 031c 	add.w	r3, r7, #28
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	605a      	str	r2, [r3, #4]
 8003b56:	609a      	str	r2, [r3, #8]
 8003b58:	60da      	str	r2, [r3, #12]
 8003b5a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a5b      	ldr	r2, [pc, #364]	@ (8003cd0 <HAL_DAC_MspInit+0x18c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d159      	bne.n	8003c1a <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003b66:	4b5b      	ldr	r3, [pc, #364]	@ (8003cd4 <HAL_DAC_MspInit+0x190>)
 8003b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b6a:	4a5a      	ldr	r2, [pc, #360]	@ (8003cd4 <HAL_DAC_MspInit+0x190>)
 8003b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b72:	4b58      	ldr	r3, [pc, #352]	@ (8003cd4 <HAL_DAC_MspInit+0x190>)
 8003b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b7e:	4b55      	ldr	r3, [pc, #340]	@ (8003cd4 <HAL_DAC_MspInit+0x190>)
 8003b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b82:	4a54      	ldr	r2, [pc, #336]	@ (8003cd4 <HAL_DAC_MspInit+0x190>)
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b8a:	4b52      	ldr	r3, [pc, #328]	@ (8003cd4 <HAL_DAC_MspInit+0x190>)
 8003b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = IMAX_Pin|IMAX2_Pin;
 8003b96:	2330      	movs	r3, #48	@ 0x30
 8003b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ba2:	f107 031c 	add.w	r3, r7, #28
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bac:	f002 ff4e 	bl	8006a4c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel4;
 8003bb0:	4b49      	ldr	r3, [pc, #292]	@ (8003cd8 <HAL_DAC_MspInit+0x194>)
 8003bb2:	4a4a      	ldr	r2, [pc, #296]	@ (8003cdc <HAL_DAC_MspInit+0x198>)
 8003bb4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8003bb6:	4b48      	ldr	r3, [pc, #288]	@ (8003cd8 <HAL_DAC_MspInit+0x194>)
 8003bb8:	2206      	movs	r2, #6
 8003bba:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bbc:	4b46      	ldr	r3, [pc, #280]	@ (8003cd8 <HAL_DAC_MspInit+0x194>)
 8003bbe:	2210      	movs	r2, #16
 8003bc0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bc2:	4b45      	ldr	r3, [pc, #276]	@ (8003cd8 <HAL_DAC_MspInit+0x194>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003bc8:	4b43      	ldr	r3, [pc, #268]	@ (8003cd8 <HAL_DAC_MspInit+0x194>)
 8003bca:	2280      	movs	r2, #128	@ 0x80
 8003bcc:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003bce:	4b42      	ldr	r3, [pc, #264]	@ (8003cd8 <HAL_DAC_MspInit+0x194>)
 8003bd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bd4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003bd6:	4b40      	ldr	r3, [pc, #256]	@ (8003cd8 <HAL_DAC_MspInit+0x194>)
 8003bd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003bdc:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003bde:	4b3e      	ldr	r3, [pc, #248]	@ (8003cd8 <HAL_DAC_MspInit+0x194>)
 8003be0:	2220      	movs	r2, #32
 8003be2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003be4:	4b3c      	ldr	r3, [pc, #240]	@ (8003cd8 <HAL_DAC_MspInit+0x194>)
 8003be6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003bea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003bec:	483a      	ldr	r0, [pc, #232]	@ (8003cd8 <HAL_DAC_MspInit+0x194>)
 8003bee:	f002 fcbb 	bl	8006568 <HAL_DMA_Init>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8003bf8:	f7ff fd92 	bl	8003720 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a36      	ldr	r2, [pc, #216]	@ (8003cd8 <HAL_DAC_MspInit+0x194>)
 8003c00:	609a      	str	r2, [r3, #8]
 8003c02:	4a35      	ldr	r2, [pc, #212]	@ (8003cd8 <HAL_DAC_MspInit+0x194>)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	2036      	movs	r0, #54	@ 0x36
 8003c0e:	f002 f998 	bl	8005f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c12:	2036      	movs	r0, #54	@ 0x36
 8003c14:	f002 f9af 	bl	8005f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8003c18:	e055      	b.n	8003cc6 <HAL_DAC_MspInit+0x182>
  else if(hdac->Instance==DAC2)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a30      	ldr	r2, [pc, #192]	@ (8003ce0 <HAL_DAC_MspInit+0x19c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d150      	bne.n	8003cc6 <HAL_DAC_MspInit+0x182>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8003c24:	4b2b      	ldr	r3, [pc, #172]	@ (8003cd4 <HAL_DAC_MspInit+0x190>)
 8003c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c28:	4a2a      	ldr	r2, [pc, #168]	@ (8003cd4 <HAL_DAC_MspInit+0x190>)
 8003c2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c30:	4b28      	ldr	r3, [pc, #160]	@ (8003cd4 <HAL_DAC_MspInit+0x190>)
 8003c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c3c:	4b25      	ldr	r3, [pc, #148]	@ (8003cd4 <HAL_DAC_MspInit+0x190>)
 8003c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c40:	4a24      	ldr	r2, [pc, #144]	@ (8003cd4 <HAL_DAC_MspInit+0x190>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c48:	4b22      	ldr	r3, [pc, #136]	@ (8003cd4 <HAL_DAC_MspInit+0x190>)
 8003c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMIN_Pin;
 8003c54:	2340      	movs	r3, #64	@ 0x40
 8003c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMIN_GPIO_Port, &GPIO_InitStruct);
 8003c60:	f107 031c 	add.w	r3, r7, #28
 8003c64:	4619      	mov	r1, r3
 8003c66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c6a:	f002 feef 	bl	8006a4c <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel5;
 8003c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce4 <HAL_DAC_MspInit+0x1a0>)
 8003c70:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce8 <HAL_DAC_MspInit+0x1a4>)
 8003c72:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8003c74:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce4 <HAL_DAC_MspInit+0x1a0>)
 8003c76:	2229      	movs	r2, #41	@ 0x29
 8003c78:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce4 <HAL_DAC_MspInit+0x1a0>)
 8003c7c:	2210      	movs	r2, #16
 8003c7e:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c80:	4b18      	ldr	r3, [pc, #96]	@ (8003ce4 <HAL_DAC_MspInit+0x1a0>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003c86:	4b17      	ldr	r3, [pc, #92]	@ (8003ce4 <HAL_DAC_MspInit+0x1a0>)
 8003c88:	2280      	movs	r2, #128	@ 0x80
 8003c8a:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c8c:	4b15      	ldr	r3, [pc, #84]	@ (8003ce4 <HAL_DAC_MspInit+0x1a0>)
 8003c8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c92:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003c94:	4b13      	ldr	r3, [pc, #76]	@ (8003ce4 <HAL_DAC_MspInit+0x1a0>)
 8003c96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c9a:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8003c9c:	4b11      	ldr	r3, [pc, #68]	@ (8003ce4 <HAL_DAC_MspInit+0x1a0>)
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003ca2:	4b10      	ldr	r3, [pc, #64]	@ (8003ce4 <HAL_DAC_MspInit+0x1a0>)
 8003ca4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ca8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8003caa:	480e      	ldr	r0, [pc, #56]	@ (8003ce4 <HAL_DAC_MspInit+0x1a0>)
 8003cac:	f002 fc5c 	bl	8006568 <HAL_DMA_Init>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_DAC_MspInit+0x176>
      Error_Handler();
 8003cb6:	f7ff fd33 	bl	8003720 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a09      	ldr	r2, [pc, #36]	@ (8003ce4 <HAL_DAC_MspInit+0x1a0>)
 8003cbe:	609a      	str	r2, [r3, #8]
 8003cc0:	4a08      	ldr	r2, [pc, #32]	@ (8003ce4 <HAL_DAC_MspInit+0x1a0>)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003cc6:	bf00      	nop
 8003cc8:	3730      	adds	r7, #48	@ 0x30
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	50000800 	.word	0x50000800
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	200006d4 	.word	0x200006d4
 8003cdc:	40020044 	.word	0x40020044
 8003ce0:	50000c00 	.word	0x50000c00
 8003ce4:	20000734 	.word	0x20000734
 8003ce8:	40020058 	.word	0x40020058

08003cec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a16      	ldr	r2, [pc, #88]	@ (8003d54 <HAL_TIM_PWM_MspInit+0x68>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d114      	bne.n	8003d28 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003cfe:	4b16      	ldr	r3, [pc, #88]	@ (8003d58 <HAL_TIM_PWM_MspInit+0x6c>)
 8003d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d02:	4a15      	ldr	r2, [pc, #84]	@ (8003d58 <HAL_TIM_PWM_MspInit+0x6c>)
 8003d04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d08:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d0a:	4b13      	ldr	r3, [pc, #76]	@ (8003d58 <HAL_TIM_PWM_MspInit+0x6c>)
 8003d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003d16:	2200      	movs	r2, #0
 8003d18:	2100      	movs	r1, #0
 8003d1a:	2018      	movs	r0, #24
 8003d1c:	f002 f911 	bl	8005f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003d20:	2018      	movs	r0, #24
 8003d22:	f002 f928 	bl	8005f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003d26:	e010      	b.n	8003d4a <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM8)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8003d5c <HAL_TIM_PWM_MspInit+0x70>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d10b      	bne.n	8003d4a <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003d32:	4b09      	ldr	r3, [pc, #36]	@ (8003d58 <HAL_TIM_PWM_MspInit+0x6c>)
 8003d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d36:	4a08      	ldr	r2, [pc, #32]	@ (8003d58 <HAL_TIM_PWM_MspInit+0x6c>)
 8003d38:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d3e:	4b06      	ldr	r3, [pc, #24]	@ (8003d58 <HAL_TIM_PWM_MspInit+0x6c>)
 8003d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]
}
 8003d4a:	bf00      	nop
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40012c00 	.word	0x40012c00
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	40013400 	.word	0x40013400

08003d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a35      	ldr	r2, [pc, #212]	@ (8003e44 <HAL_TIM_Base_MspInit+0xe4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d10c      	bne.n	8003d8c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d72:	4b35      	ldr	r3, [pc, #212]	@ (8003e48 <HAL_TIM_Base_MspInit+0xe8>)
 8003d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d76:	4a34      	ldr	r2, [pc, #208]	@ (8003e48 <HAL_TIM_Base_MspInit+0xe8>)
 8003d78:	f043 0304 	orr.w	r3, r3, #4
 8003d7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d7e:	4b32      	ldr	r3, [pc, #200]	@ (8003e48 <HAL_TIM_Base_MspInit+0xe8>)
 8003d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	61fb      	str	r3, [r7, #28]
 8003d88:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003d8a:	e056      	b.n	8003e3a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a2e      	ldr	r2, [pc, #184]	@ (8003e4c <HAL_TIM_Base_MspInit+0xec>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d114      	bne.n	8003dc0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d96:	4b2c      	ldr	r3, [pc, #176]	@ (8003e48 <HAL_TIM_Base_MspInit+0xe8>)
 8003d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9a:	4a2b      	ldr	r2, [pc, #172]	@ (8003e48 <HAL_TIM_Base_MspInit+0xe8>)
 8003d9c:	f043 0310 	orr.w	r3, r3, #16
 8003da0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003da2:	4b29      	ldr	r3, [pc, #164]	@ (8003e48 <HAL_TIM_Base_MspInit+0xe8>)
 8003da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da6:	f003 0310 	and.w	r3, r3, #16
 8003daa:	61bb      	str	r3, [r7, #24]
 8003dac:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003dae:	2200      	movs	r2, #0
 8003db0:	2100      	movs	r1, #0
 8003db2:	2036      	movs	r0, #54	@ 0x36
 8003db4:	f002 f8c5 	bl	8005f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003db8:	2036      	movs	r0, #54	@ 0x36
 8003dba:	f002 f8dc 	bl	8005f76 <HAL_NVIC_EnableIRQ>
}
 8003dbe:	e03c      	b.n	8003e3a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM7)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a22      	ldr	r2, [pc, #136]	@ (8003e50 <HAL_TIM_Base_MspInit+0xf0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d10c      	bne.n	8003de4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003dca:	4b1f      	ldr	r3, [pc, #124]	@ (8003e48 <HAL_TIM_Base_MspInit+0xe8>)
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dce:	4a1e      	ldr	r2, [pc, #120]	@ (8003e48 <HAL_TIM_Base_MspInit+0xe8>)
 8003dd0:	f043 0320 	orr.w	r3, r3, #32
 8003dd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e48 <HAL_TIM_Base_MspInit+0xe8>)
 8003dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	697b      	ldr	r3, [r7, #20]
}
 8003de2:	e02a      	b.n	8003e3a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM15)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a1a      	ldr	r2, [pc, #104]	@ (8003e54 <HAL_TIM_Base_MspInit+0xf4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d114      	bne.n	8003e18 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003dee:	4b16      	ldr	r3, [pc, #88]	@ (8003e48 <HAL_TIM_Base_MspInit+0xe8>)
 8003df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df2:	4a15      	ldr	r2, [pc, #84]	@ (8003e48 <HAL_TIM_Base_MspInit+0xe8>)
 8003df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003df8:	6613      	str	r3, [r2, #96]	@ 0x60
 8003dfa:	4b13      	ldr	r3, [pc, #76]	@ (8003e48 <HAL_TIM_Base_MspInit+0xe8>)
 8003dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003e06:	2200      	movs	r2, #0
 8003e08:	2100      	movs	r1, #0
 8003e0a:	2018      	movs	r0, #24
 8003e0c:	f002 f899 	bl	8005f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003e10:	2018      	movs	r0, #24
 8003e12:	f002 f8b0 	bl	8005f76 <HAL_NVIC_EnableIRQ>
}
 8003e16:	e010      	b.n	8003e3a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM16)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a0e      	ldr	r2, [pc, #56]	@ (8003e58 <HAL_TIM_Base_MspInit+0xf8>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d10b      	bne.n	8003e3a <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003e22:	4b09      	ldr	r3, [pc, #36]	@ (8003e48 <HAL_TIM_Base_MspInit+0xe8>)
 8003e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e26:	4a08      	ldr	r2, [pc, #32]	@ (8003e48 <HAL_TIM_Base_MspInit+0xe8>)
 8003e28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e2e:	4b06      	ldr	r3, [pc, #24]	@ (8003e48 <HAL_TIM_Base_MspInit+0xe8>)
 8003e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
}
 8003e3a:	bf00      	nop
 8003e3c:	3720      	adds	r7, #32
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40000800 	.word	0x40000800
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40001000 	.word	0x40001000
 8003e50:	40001400 	.word	0x40001400
 8003e54:	40014000 	.word	0x40014000
 8003e58:	40014400 	.word	0x40014400

08003e5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08a      	sub	sp, #40	@ 0x28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e64:	f107 0314 	add.w	r3, r7, #20
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	605a      	str	r2, [r3, #4]
 8003e6e:	609a      	str	r2, [r3, #8]
 8003e70:	60da      	str	r2, [r3, #12]
 8003e72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a33      	ldr	r2, [pc, #204]	@ (8003f48 <HAL_TIM_MspPostInit+0xec>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d11c      	bne.n	8003eb8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e7e:	4b33      	ldr	r3, [pc, #204]	@ (8003f4c <HAL_TIM_MspPostInit+0xf0>)
 8003e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e82:	4a32      	ldr	r2, [pc, #200]	@ (8003f4c <HAL_TIM_MspPostInit+0xf0>)
 8003e84:	f043 0304 	orr.w	r3, r3, #4
 8003e88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e8a:	4b30      	ldr	r3, [pc, #192]	@ (8003f4c <HAL_TIM_MspPostInit+0xf0>)
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DEADTIME_TR_Pin;
 8003e96:	2301      	movs	r3, #1
 8003e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_TR_GPIO_Port, &GPIO_InitStruct);
 8003eaa:	f107 0314 	add.w	r3, r7, #20
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4827      	ldr	r0, [pc, #156]	@ (8003f50 <HAL_TIM_MspPostInit+0xf4>)
 8003eb2:	f002 fdcb 	bl	8006a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003eb6:	e043      	b.n	8003f40 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a25      	ldr	r2, [pc, #148]	@ (8003f54 <HAL_TIM_MspPostInit+0xf8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d11d      	bne.n	8003efe <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ec2:	4b22      	ldr	r3, [pc, #136]	@ (8003f4c <HAL_TIM_MspPostInit+0xf0>)
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec6:	4a21      	ldr	r2, [pc, #132]	@ (8003f4c <HAL_TIM_MspPostInit+0xf0>)
 8003ec8:	f043 0308 	orr.w	r3, r3, #8
 8003ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ece:	4b1f      	ldr	r3, [pc, #124]	@ (8003f4c <HAL_TIM_MspPostInit+0xf0>)
 8003ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8003eda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003eec:	2302      	movs	r3, #2
 8003eee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8003ef0:	f107 0314 	add.w	r3, r7, #20
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4818      	ldr	r0, [pc, #96]	@ (8003f58 <HAL_TIM_MspPostInit+0xfc>)
 8003ef8:	f002 fda8 	bl	8006a4c <HAL_GPIO_Init>
}
 8003efc:	e020      	b.n	8003f40 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a16      	ldr	r2, [pc, #88]	@ (8003f5c <HAL_TIM_MspPostInit+0x100>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d11b      	bne.n	8003f40 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f08:	4b10      	ldr	r3, [pc, #64]	@ (8003f4c <HAL_TIM_MspPostInit+0xf0>)
 8003f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f0c:	4a0f      	ldr	r2, [pc, #60]	@ (8003f4c <HAL_TIM_MspPostInit+0xf0>)
 8003f0e:	f043 0304 	orr.w	r3, r3, #4
 8003f12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f14:	4b0d      	ldr	r3, [pc, #52]	@ (8003f4c <HAL_TIM_MspPostInit+0xf0>)
 8003f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEADTIME_HC_Pin;
 8003f20:	2380      	movs	r3, #128	@ 0x80
 8003f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f24:	2302      	movs	r3, #2
 8003f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003f30:	2304      	movs	r3, #4
 8003f32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_HC_GPIO_Port, &GPIO_InitStruct);
 8003f34:	f107 0314 	add.w	r3, r7, #20
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4805      	ldr	r0, [pc, #20]	@ (8003f50 <HAL_TIM_MspPostInit+0xf4>)
 8003f3c:	f002 fd86 	bl	8006a4c <HAL_GPIO_Init>
}
 8003f40:	bf00      	nop
 8003f42:	3728      	adds	r7, #40	@ 0x28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40012c00 	.word	0x40012c00
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	48000800 	.word	0x48000800
 8003f54:	40000800 	.word	0x40000800
 8003f58:	48000c00 	.word	0x48000c00
 8003f5c:	40013400 	.word	0x40013400

08003f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b09e      	sub	sp, #120	@ 0x78
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f68:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	609a      	str	r2, [r3, #8]
 8003f74:	60da      	str	r2, [r3, #12]
 8003f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f78:	f107 0310 	add.w	r3, r7, #16
 8003f7c:	2254      	movs	r2, #84	@ 0x54
 8003f7e:	2100      	movs	r1, #0
 8003f80:	4618      	mov	r0, r3
 8003f82:	f00d fc28 	bl	80117d6 <memset>
  if(huart->Instance==UART4)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a1f      	ldr	r2, [pc, #124]	@ (8004008 <HAL_UART_MspInit+0xa8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d136      	bne.n	8003ffe <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003f90:	2308      	movs	r3, #8
 8003f92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_HSI;
 8003f94:	2380      	movs	r3, #128	@ 0x80
 8003f96:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f98:	f107 0310 	add.w	r3, r7, #16
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f005 fa39 	bl	8009414 <HAL_RCCEx_PeriphCLKConfig>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003fa8:	f7ff fbba 	bl	8003720 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003fac:	4b17      	ldr	r3, [pc, #92]	@ (800400c <HAL_UART_MspInit+0xac>)
 8003fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb0:	4a16      	ldr	r2, [pc, #88]	@ (800400c <HAL_UART_MspInit+0xac>)
 8003fb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003fb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fb8:	4b14      	ldr	r3, [pc, #80]	@ (800400c <HAL_UART_MspInit+0xac>)
 8003fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fc4:	4b11      	ldr	r3, [pc, #68]	@ (800400c <HAL_UART_MspInit+0xac>)
 8003fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc8:	4a10      	ldr	r2, [pc, #64]	@ (800400c <HAL_UART_MspInit+0xac>)
 8003fca:	f043 0304 	orr.w	r3, r3, #4
 8003fce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800400c <HAL_UART_MspInit+0xac>)
 8003fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003fdc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003fe0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fea:	2300      	movs	r3, #0
 8003fec:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003fee:	2305      	movs	r3, #5
 8003ff0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ff2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4805      	ldr	r0, [pc, #20]	@ (8004010 <HAL_UART_MspInit+0xb0>)
 8003ffa:	f002 fd27 	bl	8006a4c <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8003ffe:	bf00      	nop
 8004000:	3778      	adds	r7, #120	@ 0x78
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40004c00 	.word	0x40004c00
 800400c:	40021000 	.word	0x40021000
 8004010:	48000800 	.word	0x48000800

08004014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004018:	bf00      	nop
 800401a:	e7fd      	b.n	8004018 <NMI_Handler+0x4>

0800401c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004020:	bf00      	nop
 8004022:	e7fd      	b.n	8004020 <HardFault_Handler+0x4>

08004024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004028:	bf00      	nop
 800402a:	e7fd      	b.n	8004028 <MemManage_Handler+0x4>

0800402c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004030:	bf00      	nop
 8004032:	e7fd      	b.n	8004030 <BusFault_Handler+0x4>

08004034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004038:	bf00      	nop
 800403a:	e7fd      	b.n	8004038 <UsageFault_Handler+0x4>

0800403c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004040:	bf00      	nop
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800404a:	b480      	push	{r7}
 800404c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800404e:	bf00      	nop
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800406a:	f000 f9af 	bl	80043cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800406e:	bf00      	nop
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004078:	4802      	ldr	r0, [pc, #8]	@ (8004084 <DMA1_Channel1_IRQHandler+0x10>)
 800407a:	f002 fb98 	bl	80067ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800407e:	bf00      	nop
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20000564 	.word	0x20000564

08004088 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 800408c:	4802      	ldr	r0, [pc, #8]	@ (8004098 <DMA1_Channel2_IRQHandler+0x10>)
 800408e:	f002 fb8e 	bl	80067ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004092:	bf00      	nop
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	200005c4 	.word	0x200005c4

0800409c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 80040a0:	4802      	ldr	r0, [pc, #8]	@ (80040ac <DMA1_Channel3_IRQHandler+0x10>)
 80040a2:	f002 fb84 	bl	80067ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80040a6:	bf00      	nop
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000624 	.word	0x20000624

080040b0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80040b4:	4802      	ldr	r0, [pc, #8]	@ (80040c0 <DMA1_Channel4_IRQHandler+0x10>)
 80040b6:	f002 fb7a 	bl	80067ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80040ba:	bf00      	nop
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	200006d4 	.word	0x200006d4

080040c4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80040c8:	4802      	ldr	r0, [pc, #8]	@ (80040d4 <DMA1_Channel5_IRQHandler+0x10>)
 80040ca:	f002 fb70 	bl	80067ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000734 	.word	0x20000734

080040d8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80040dc:	4802      	ldr	r0, [pc, #8]	@ (80040e8 <USB_LP_IRQHandler+0x10>)
 80040de:	f002 ff71 	bl	8006fc4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80040e2:	bf00      	nop
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20002054 	.word	0x20002054

080040ec <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80040f0:	4803      	ldr	r0, [pc, #12]	@ (8004100 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80040f2:	f005 feb5 	bl	8009e60 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80040f6:	4803      	ldr	r0, [pc, #12]	@ (8004104 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80040f8:	f005 feb2 	bl	8009e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80040fc:	bf00      	nop
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20000794 	.word	0x20000794
 8004104:	20000910 	.word	0x20000910

08004108 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
					HEAT_SINK_TEMP = (ADC3_DMA_BUFFER[4]/4096)*3.3;//(Low_pass_filter(ADC3_DMA_BUFFER[4], HEAT_SINK_TEMP)/4096)*3.3;
					FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
					}*/

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800410c:	4803      	ldr	r0, [pc, #12]	@ (800411c <TIM6_DAC_IRQHandler+0x14>)
 800410e:	f005 fea7 	bl	8009e60 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8004112:	4803      	ldr	r0, [pc, #12]	@ (8004120 <TIM6_DAC_IRQHandler+0x18>)
 8004114:	f001 ffd8 	bl	80060c8 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004118:	bf00      	nop
 800411a:	bd80      	pop	{r7, pc}
 800411c:	2000082c 	.word	0x2000082c
 8004120:	200006ac 	.word	0x200006ac

08004124 <_getpid>:
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
 8004128:	2301      	movs	r3, #1
 800412a:	4618      	mov	r0, r3
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <_kill>:
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
 800413e:	f00d fbaf 	bl	80118a0 <__errno>
 8004142:	4603      	mov	r3, r0
 8004144:	2216      	movs	r2, #22
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	f04f 33ff 	mov.w	r3, #4294967295
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <_exit>:
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	f04f 31ff 	mov.w	r1, #4294967295
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff ffe7 	bl	8004134 <_kill>
 8004166:	bf00      	nop
 8004168:	e7fd      	b.n	8004166 <_exit+0x12>

0800416a <_read>:
 800416a:	b580      	push	{r7, lr}
 800416c:	b086      	sub	sp, #24
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	e00a      	b.n	8004192 <_read+0x28>
 800417c:	f3af 8000 	nop.w
 8004180:	4601      	mov	r1, r0
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	60ba      	str	r2, [r7, #8]
 8004188:	b2ca      	uxtb	r2, r1
 800418a:	701a      	strb	r2, [r3, #0]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	3301      	adds	r3, #1
 8004190:	617b      	str	r3, [r7, #20]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	429a      	cmp	r2, r3
 8004198:	dbf0      	blt.n	800417c <_read+0x12>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <_write>:
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	e009      	b.n	80041ca <_write+0x26>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	60ba      	str	r2, [r7, #8]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f3af 8000 	nop.w
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	3301      	adds	r3, #1
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	dbf1      	blt.n	80041b6 <_write+0x12>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <_close>:
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	f04f 33ff 	mov.w	r3, #4294967295
 80041e8:	4618      	mov	r0, r3
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <_fstat>:
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004204:	605a      	str	r2, [r3, #4]
 8004206:	2300      	movs	r3, #0
 8004208:	4618      	mov	r0, r3
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <_isatty>:
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	2301      	movs	r3, #1
 800421e:	4618      	mov	r0, r3
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <_lseek>:
 800422a:	b480      	push	{r7}
 800422c:	b085      	sub	sp, #20
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]
 8004236:	2300      	movs	r3, #0
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <_sbrk>:
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	4a14      	ldr	r2, [pc, #80]	@ (80042a0 <_sbrk+0x5c>)
 800424e:	4b15      	ldr	r3, [pc, #84]	@ (80042a4 <_sbrk+0x60>)
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	613b      	str	r3, [r7, #16]
 8004258:	4b13      	ldr	r3, [pc, #76]	@ (80042a8 <_sbrk+0x64>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d102      	bne.n	8004266 <_sbrk+0x22>
 8004260:	4b11      	ldr	r3, [pc, #68]	@ (80042a8 <_sbrk+0x64>)
 8004262:	4a12      	ldr	r2, [pc, #72]	@ (80042ac <_sbrk+0x68>)
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	4b10      	ldr	r3, [pc, #64]	@ (80042a8 <_sbrk+0x64>)
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	429a      	cmp	r2, r3
 8004272:	d207      	bcs.n	8004284 <_sbrk+0x40>
 8004274:	f00d fb14 	bl	80118a0 <__errno>
 8004278:	4603      	mov	r3, r0
 800427a:	220c      	movs	r2, #12
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	f04f 33ff 	mov.w	r3, #4294967295
 8004282:	e009      	b.n	8004298 <_sbrk+0x54>
 8004284:	4b08      	ldr	r3, [pc, #32]	@ (80042a8 <_sbrk+0x64>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	4b07      	ldr	r3, [pc, #28]	@ (80042a8 <_sbrk+0x64>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4413      	add	r3, r2
 8004292:	4a05      	ldr	r2, [pc, #20]	@ (80042a8 <_sbrk+0x64>)
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	20020000 	.word	0x20020000
 80042a4:	00000400 	.word	0x00000400
 80042a8:	20000b78 	.word	0x20000b78
 80042ac:	200026a0 	.word	0x200026a0

080042b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80042b4:	4b06      	ldr	r3, [pc, #24]	@ (80042d0 <SystemInit+0x20>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ba:	4a05      	ldr	r2, [pc, #20]	@ (80042d0 <SystemInit+0x20>)
 80042bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80042c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042c4:	bf00      	nop
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	e000ed00 	.word	0xe000ed00

080042d4 <Reset_Handler>:
 80042d4:	480d      	ldr	r0, [pc, #52]	@ (800430c <LoopForever+0x2>)
 80042d6:	4685      	mov	sp, r0
 80042d8:	f7ff ffea 	bl	80042b0 <SystemInit>
 80042dc:	480c      	ldr	r0, [pc, #48]	@ (8004310 <LoopForever+0x6>)
 80042de:	490d      	ldr	r1, [pc, #52]	@ (8004314 <LoopForever+0xa>)
 80042e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004318 <LoopForever+0xe>)
 80042e2:	2300      	movs	r3, #0
 80042e4:	e002      	b.n	80042ec <LoopCopyDataInit>

080042e6 <CopyDataInit>:
 80042e6:	58d4      	ldr	r4, [r2, r3]
 80042e8:	50c4      	str	r4, [r0, r3]
 80042ea:	3304      	adds	r3, #4

080042ec <LoopCopyDataInit>:
 80042ec:	18c4      	adds	r4, r0, r3
 80042ee:	428c      	cmp	r4, r1
 80042f0:	d3f9      	bcc.n	80042e6 <CopyDataInit>
 80042f2:	4a0a      	ldr	r2, [pc, #40]	@ (800431c <LoopForever+0x12>)
 80042f4:	4c0a      	ldr	r4, [pc, #40]	@ (8004320 <LoopForever+0x16>)
 80042f6:	2300      	movs	r3, #0
 80042f8:	e001      	b.n	80042fe <LoopFillZerobss>

080042fa <FillZerobss>:
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	3204      	adds	r2, #4

080042fe <LoopFillZerobss>:
 80042fe:	42a2      	cmp	r2, r4
 8004300:	d3fb      	bcc.n	80042fa <FillZerobss>
 8004302:	f00d fad3 	bl	80118ac <__libc_init_array>
 8004306:	f7fc fe97 	bl	8001038 <main>

0800430a <LoopForever>:
 800430a:	e7fe      	b.n	800430a <LoopForever>
 800430c:	20020000 	.word	0x20020000
 8004310:	20000000 	.word	0x20000000
 8004314:	20000398 	.word	0x20000398
 8004318:	08017418 	.word	0x08017418
 800431c:	20000398 	.word	0x20000398
 8004320:	2000269c 	.word	0x2000269c

08004324 <ADC1_2_IRQHandler>:
 8004324:	e7fe      	b.n	8004324 <ADC1_2_IRQHandler>

08004326 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004330:	2003      	movs	r0, #3
 8004332:	f001 fdfb 	bl	8005f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004336:	2000      	movs	r0, #0
 8004338:	f000 f80e 	bl	8004358 <HAL_InitTick>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	71fb      	strb	r3, [r7, #7]
 8004346:	e001      	b.n	800434c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004348:	f7ff f9f0 	bl	800372c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800434c:	79fb      	ldrb	r3, [r7, #7]

}
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004360:	2300      	movs	r3, #0
 8004362:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004364:	4b16      	ldr	r3, [pc, #88]	@ (80043c0 <HAL_InitTick+0x68>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d022      	beq.n	80043b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800436c:	4b15      	ldr	r3, [pc, #84]	@ (80043c4 <HAL_InitTick+0x6c>)
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4b13      	ldr	r3, [pc, #76]	@ (80043c0 <HAL_InitTick+0x68>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004378:	fbb1 f3f3 	udiv	r3, r1, r3
 800437c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004380:	4618      	mov	r0, r3
 8004382:	f001 fe06 	bl	8005f92 <HAL_SYSTICK_Config>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10f      	bne.n	80043ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b0f      	cmp	r3, #15
 8004390:	d809      	bhi.n	80043a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004392:	2200      	movs	r2, #0
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	f04f 30ff 	mov.w	r0, #4294967295
 800439a:	f001 fdd2 	bl	8005f42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800439e:	4a0a      	ldr	r2, [pc, #40]	@ (80043c8 <HAL_InitTick+0x70>)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	e007      	b.n	80043b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	73fb      	strb	r3, [r7, #15]
 80043aa:	e004      	b.n	80043b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
 80043b0:	e001      	b.n	80043b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20000044 	.word	0x20000044
 80043c4:	2000003c 	.word	0x2000003c
 80043c8:	20000040 	.word	0x20000040

080043cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043d0:	4b05      	ldr	r3, [pc, #20]	@ (80043e8 <HAL_IncTick+0x1c>)
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	4b05      	ldr	r3, [pc, #20]	@ (80043ec <HAL_IncTick+0x20>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4413      	add	r3, r2
 80043da:	4a03      	ldr	r2, [pc, #12]	@ (80043e8 <HAL_IncTick+0x1c>)
 80043dc:	6013      	str	r3, [r2, #0]
}
 80043de:	bf00      	nop
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	20000b7c 	.word	0x20000b7c
 80043ec:	20000044 	.word	0x20000044

080043f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return uwTick;
 80043f4:	4b03      	ldr	r3, [pc, #12]	@ (8004404 <HAL_GetTick+0x14>)
 80043f6:	681b      	ldr	r3, [r3, #0]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000b7c 	.word	0x20000b7c

08004408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004410:	f7ff ffee 	bl	80043f0 <HAL_GetTick>
 8004414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004420:	d004      	beq.n	800442c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004422:	4b09      	ldr	r3, [pc, #36]	@ (8004448 <HAL_Delay+0x40>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4413      	add	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800442c:	bf00      	nop
 800442e:	f7ff ffdf 	bl	80043f0 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	429a      	cmp	r2, r3
 800443c:	d8f7      	bhi.n	800442e <HAL_Delay+0x26>
  {
  }
}
 800443e:	bf00      	nop
 8004440:	bf00      	nop
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	20000044 	.word	0x20000044

0800444c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	609a      	str	r2, [r3, #8]
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	609a      	str	r2, [r3, #8]
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3360      	adds	r3, #96	@ 0x60
 80044c6:	461a      	mov	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	4b08      	ldr	r3, [pc, #32]	@ (80044f8 <LL_ADC_SetOffset+0x44>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80044ec:	bf00      	nop
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	03fff000 	.word	0x03fff000

080044fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3360      	adds	r3, #96	@ 0x60
 800450a:	461a      	mov	r2, r3
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3360      	adds	r3, #96	@ 0x60
 8004538:	461a      	mov	r2, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	431a      	orrs	r2, r3
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800455e:	b480      	push	{r7}
 8004560:	b087      	sub	sp, #28
 8004562:	af00      	add	r7, sp, #0
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3360      	adds	r3, #96	@ 0x60
 800456e:	461a      	mov	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	431a      	orrs	r2, r3
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004588:	bf00      	nop
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	3360      	adds	r3, #96	@ 0x60
 80045a4:	461a      	mov	r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	431a      	orrs	r2, r3
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	615a      	str	r2, [r3, #20]
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004604:	2301      	movs	r3, #1
 8004606:	e000      	b.n	800460a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004616:	b480      	push	{r7}
 8004618:	b087      	sub	sp, #28
 800461a:	af00      	add	r7, sp, #0
 800461c:	60f8      	str	r0, [r7, #12]
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3330      	adds	r3, #48	@ 0x30
 8004626:	461a      	mov	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	0a1b      	lsrs	r3, r3, #8
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	4413      	add	r3, r2
 8004634:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	211f      	movs	r1, #31
 8004642:	fa01 f303 	lsl.w	r3, r1, r3
 8004646:	43db      	mvns	r3, r3
 8004648:	401a      	ands	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	0e9b      	lsrs	r3, r3, #26
 800464e:	f003 011f 	and.w	r1, r3, #31
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f003 031f 	and.w	r3, r3, #31
 8004658:	fa01 f303 	lsl.w	r3, r1, r3
 800465c:	431a      	orrs	r2, r3
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004662:	bf00      	nop
 8004664:	371c      	adds	r7, #28
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800466e:	b480      	push	{r7}
 8004670:	b087      	sub	sp, #28
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3314      	adds	r3, #20
 800467e:	461a      	mov	r2, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	0e5b      	lsrs	r3, r3, #25
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	4413      	add	r3, r2
 800468c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	0d1b      	lsrs	r3, r3, #20
 8004696:	f003 031f 	and.w	r3, r3, #31
 800469a:	2107      	movs	r1, #7
 800469c:	fa01 f303 	lsl.w	r3, r1, r3
 80046a0:	43db      	mvns	r3, r3
 80046a2:	401a      	ands	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	0d1b      	lsrs	r3, r3, #20
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	fa01 f303 	lsl.w	r3, r1, r3
 80046b2:	431a      	orrs	r2, r3
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80046b8:	bf00      	nop
 80046ba:	371c      	adds	r7, #28
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046dc:	43db      	mvns	r3, r3
 80046de:	401a      	ands	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f003 0318 	and.w	r3, r3, #24
 80046e6:	4908      	ldr	r1, [pc, #32]	@ (8004708 <LL_ADC_SetChannelSingleDiff+0x44>)
 80046e8:	40d9      	lsrs	r1, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	400b      	ands	r3, r1
 80046ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046f2:	431a      	orrs	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80046fa:	bf00      	nop
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	0007ffff 	.word	0x0007ffff

0800470c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 031f 	and.w	r3, r3, #31
}
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004738:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6093      	str	r3, [r2, #8]
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800475c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004760:	d101      	bne.n	8004766 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004784:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004788:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047b0:	d101      	bne.n	80047b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80047d8:	f043 0201 	orr.w	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004800:	f043 0202 	orr.w	r2, r3, #2
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <LL_ADC_IsEnabled+0x18>
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <LL_ADC_IsEnabled+0x1a>
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b02      	cmp	r3, #2
 800484c:	d101      	bne.n	8004852 <LL_ADC_IsDisableOngoing+0x18>
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <LL_ADC_IsDisableOngoing+0x1a>
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004870:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004874:	f043 0204 	orr.w	r2, r3, #4
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b04      	cmp	r3, #4
 800489a:	d101      	bne.n	80048a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d101      	bne.n	80048c6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80048d4:	b590      	push	{r4, r7, lr}
 80048d6:	b089      	sub	sp, #36	@ 0x24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e1a9      	b.n	8004c42 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d109      	bne.n	8004910 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7fe ff39 	bl	8003774 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff ff19 	bl	800474c <LL_ADC_IsDeepPowerDownEnabled>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d004      	beq.n	800492a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff feff 	bl	8004728 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff ff34 	bl	800479c <LL_ADC_IsInternalRegulatorEnabled>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d115      	bne.n	8004966 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff ff18 	bl	8004774 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004944:	4b9c      	ldr	r3, [pc, #624]	@ (8004bb8 <HAL_ADC_Init+0x2e4>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	099b      	lsrs	r3, r3, #6
 800494a:	4a9c      	ldr	r2, [pc, #624]	@ (8004bbc <HAL_ADC_Init+0x2e8>)
 800494c:	fba2 2303 	umull	r2, r3, r2, r3
 8004950:	099b      	lsrs	r3, r3, #6
 8004952:	3301      	adds	r3, #1
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004958:	e002      	b.n	8004960 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	3b01      	subs	r3, #1
 800495e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f9      	bne.n	800495a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff ff16 	bl	800479c <LL_ADC_IsInternalRegulatorEnabled>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10d      	bne.n	8004992 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497a:	f043 0210 	orr.w	r2, r3, #16
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004986:	f043 0201 	orr.w	r2, r3, #1
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f7ff ff76 	bl	8004888 <LL_ADC_REG_IsConversionOngoing>
 800499c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a2:	f003 0310 	and.w	r3, r3, #16
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f040 8142 	bne.w	8004c30 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f040 813e 	bne.w	8004c30 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80049bc:	f043 0202 	orr.w	r2, r3, #2
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff ff23 	bl	8004814 <LL_ADC_IsEnabled>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d141      	bne.n	8004a58 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049dc:	d004      	beq.n	80049e8 <HAL_ADC_Init+0x114>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a77      	ldr	r2, [pc, #476]	@ (8004bc0 <HAL_ADC_Init+0x2ec>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d10f      	bne.n	8004a08 <HAL_ADC_Init+0x134>
 80049e8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80049ec:	f7ff ff12 	bl	8004814 <LL_ADC_IsEnabled>
 80049f0:	4604      	mov	r4, r0
 80049f2:	4873      	ldr	r0, [pc, #460]	@ (8004bc0 <HAL_ADC_Init+0x2ec>)
 80049f4:	f7ff ff0e 	bl	8004814 <LL_ADC_IsEnabled>
 80049f8:	4603      	mov	r3, r0
 80049fa:	4323      	orrs	r3, r4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	bf0c      	ite	eq
 8004a00:	2301      	moveq	r3, #1
 8004a02:	2300      	movne	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	e012      	b.n	8004a2e <HAL_ADC_Init+0x15a>
 8004a08:	486e      	ldr	r0, [pc, #440]	@ (8004bc4 <HAL_ADC_Init+0x2f0>)
 8004a0a:	f7ff ff03 	bl	8004814 <LL_ADC_IsEnabled>
 8004a0e:	4604      	mov	r4, r0
 8004a10:	486d      	ldr	r0, [pc, #436]	@ (8004bc8 <HAL_ADC_Init+0x2f4>)
 8004a12:	f7ff feff 	bl	8004814 <LL_ADC_IsEnabled>
 8004a16:	4603      	mov	r3, r0
 8004a18:	431c      	orrs	r4, r3
 8004a1a:	486c      	ldr	r0, [pc, #432]	@ (8004bcc <HAL_ADC_Init+0x2f8>)
 8004a1c:	f7ff fefa 	bl	8004814 <LL_ADC_IsEnabled>
 8004a20:	4603      	mov	r3, r0
 8004a22:	4323      	orrs	r3, r4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	bf0c      	ite	eq
 8004a28:	2301      	moveq	r3, #1
 8004a2a:	2300      	movne	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d012      	beq.n	8004a58 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a3a:	d004      	beq.n	8004a46 <HAL_ADC_Init+0x172>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a5f      	ldr	r2, [pc, #380]	@ (8004bc0 <HAL_ADC_Init+0x2ec>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d101      	bne.n	8004a4a <HAL_ADC_Init+0x176>
 8004a46:	4a62      	ldr	r2, [pc, #392]	@ (8004bd0 <HAL_ADC_Init+0x2fc>)
 8004a48:	e000      	b.n	8004a4c <HAL_ADC_Init+0x178>
 8004a4a:	4a62      	ldr	r2, [pc, #392]	@ (8004bd4 <HAL_ADC_Init+0x300>)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f7ff fcfa 	bl	800444c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	7f5b      	ldrb	r3, [r3, #29]
 8004a5c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004a62:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004a68:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004a6e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a76:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d106      	bne.n	8004a94 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	045b      	lsls	r3, r3, #17
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d009      	beq.n	8004ab0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	4b48      	ldr	r3, [pc, #288]	@ (8004bd8 <HAL_ADC_Init+0x304>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6812      	ldr	r2, [r2, #0]
 8004abe:	69b9      	ldr	r1, [r7, #24]
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff fee5 	bl	80048ae <LL_ADC_INJ_IsConversionOngoing>
 8004ae4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d17f      	bne.n	8004bec <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d17c      	bne.n	8004bec <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004af6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004afe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004b00:	4313      	orrs	r3, r2
 8004b02:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b0e:	f023 0302 	bic.w	r3, r3, #2
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6812      	ldr	r2, [r2, #0]
 8004b16:	69b9      	ldr	r1, [r7, #24]
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d017      	beq.n	8004b54 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004b32:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004b3c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004b40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6911      	ldr	r1, [r2, #16]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	430b      	orrs	r3, r1
 8004b4e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004b52:	e013      	b.n	8004b7c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004b62:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004b74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b78:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d12a      	bne.n	8004bdc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004b90:	f023 0304 	bic.w	r3, r3, #4
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b9c:	4311      	orrs	r1, r2
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004ba2:	4311      	orrs	r1, r2
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f042 0201 	orr.w	r2, r2, #1
 8004bb4:	611a      	str	r2, [r3, #16]
 8004bb6:	e019      	b.n	8004bec <HAL_ADC_Init+0x318>
 8004bb8:	2000003c 	.word	0x2000003c
 8004bbc:	053e2d63 	.word	0x053e2d63
 8004bc0:	50000100 	.word	0x50000100
 8004bc4:	50000400 	.word	0x50000400
 8004bc8:	50000500 	.word	0x50000500
 8004bcc:	50000600 	.word	0x50000600
 8004bd0:	50000300 	.word	0x50000300
 8004bd4:	50000700 	.word	0x50000700
 8004bd8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0201 	bic.w	r2, r2, #1
 8004bea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d10c      	bne.n	8004c0e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfa:	f023 010f 	bic.w	r1, r3, #15
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	1e5a      	subs	r2, r3, #1
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c0c:	e007      	b.n	8004c1e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 020f 	bic.w	r2, r2, #15
 8004c1c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c22:	f023 0303 	bic.w	r3, r3, #3
 8004c26:	f043 0201 	orr.w	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c2e:	e007      	b.n	8004c40 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c34:	f043 0210 	orr.w	r2, r3, #16
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004c40:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3724      	adds	r7, #36	@ 0x24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd90      	pop	{r4, r7, pc}
 8004c4a:	bf00      	nop

08004c4c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c60:	d004      	beq.n	8004c6c <HAL_ADC_Start_DMA+0x20>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a5a      	ldr	r2, [pc, #360]	@ (8004dd0 <HAL_ADC_Start_DMA+0x184>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d101      	bne.n	8004c70 <HAL_ADC_Start_DMA+0x24>
 8004c6c:	4b59      	ldr	r3, [pc, #356]	@ (8004dd4 <HAL_ADC_Start_DMA+0x188>)
 8004c6e:	e000      	b.n	8004c72 <HAL_ADC_Start_DMA+0x26>
 8004c70:	4b59      	ldr	r3, [pc, #356]	@ (8004dd8 <HAL_ADC_Start_DMA+0x18c>)
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff fd4a 	bl	800470c <LL_ADC_GetMultimode>
 8004c78:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff fe02 	bl	8004888 <LL_ADC_REG_IsConversionOngoing>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f040 809b 	bne.w	8004dc2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <HAL_ADC_Start_DMA+0x4e>
 8004c96:	2302      	movs	r3, #2
 8004c98:	e096      	b.n	8004dc8 <HAL_ADC_Start_DMA+0x17c>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a4d      	ldr	r2, [pc, #308]	@ (8004ddc <HAL_ADC_Start_DMA+0x190>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d008      	beq.n	8004cbe <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d005      	beq.n	8004cbe <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	2b05      	cmp	r3, #5
 8004cb6:	d002      	beq.n	8004cbe <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	2b09      	cmp	r3, #9
 8004cbc:	d17a      	bne.n	8004db4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 fcec 	bl	800569c <ADC_Enable>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004cc8:	7dfb      	ldrb	r3, [r7, #23]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d16d      	bne.n	8004daa <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004cd6:	f023 0301 	bic.w	r3, r3, #1
 8004cda:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a3a      	ldr	r2, [pc, #232]	@ (8004dd0 <HAL_ADC_Start_DMA+0x184>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d009      	beq.n	8004d00 <HAL_ADC_Start_DMA+0xb4>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a3b      	ldr	r2, [pc, #236]	@ (8004de0 <HAL_ADC_Start_DMA+0x194>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d002      	beq.n	8004cfc <HAL_ADC_Start_DMA+0xb0>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	e003      	b.n	8004d04 <HAL_ADC_Start_DMA+0xb8>
 8004cfc:	4b39      	ldr	r3, [pc, #228]	@ (8004de4 <HAL_ADC_Start_DMA+0x198>)
 8004cfe:	e001      	b.n	8004d04 <HAL_ADC_Start_DMA+0xb8>
 8004d00:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	6812      	ldr	r2, [r2, #0]
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d002      	beq.n	8004d12 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d105      	bne.n	8004d1e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d16:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d006      	beq.n	8004d38 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d2e:	f023 0206 	bic.w	r2, r3, #6
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	661a      	str	r2, [r3, #96]	@ 0x60
 8004d36:	e002      	b.n	8004d3e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d42:	4a29      	ldr	r2, [pc, #164]	@ (8004de8 <HAL_ADC_Start_DMA+0x19c>)
 8004d44:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d4a:	4a28      	ldr	r2, [pc, #160]	@ (8004dec <HAL_ADC_Start_DMA+0x1a0>)
 8004d4c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d52:	4a27      	ldr	r2, [pc, #156]	@ (8004df0 <HAL_ADC_Start_DMA+0x1a4>)
 8004d54:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	221c      	movs	r2, #28
 8004d5c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 0210 	orr.w	r2, r2, #16
 8004d74:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f042 0201 	orr.w	r2, r2, #1
 8004d84:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3340      	adds	r3, #64	@ 0x40
 8004d90:	4619      	mov	r1, r3
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f001 fc8f 	bl	80066b8 <HAL_DMA_Start_IT>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff fd5c 	bl	8004860 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004da8:	e00d      	b.n	8004dc6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004db2:	e008      	b.n	8004dc6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004dc0:	e001      	b.n	8004dc6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	50000100 	.word	0x50000100
 8004dd4:	50000300 	.word	0x50000300
 8004dd8:	50000700 	.word	0x50000700
 8004ddc:	50000600 	.word	0x50000600
 8004de0:	50000500 	.word	0x50000500
 8004de4:	50000400 	.word	0x50000400
 8004de8:	08005887 	.word	0x08005887
 8004dec:	0800595f 	.word	0x0800595f
 8004df0:	0800597b 	.word	0x0800597b

08004df4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b0b6      	sub	sp, #216	@ 0xd8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d102      	bne.n	8004e40 <HAL_ADC_ConfigChannel+0x24>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	f000 bc13 	b.w	8005666 <HAL_ADC_ConfigChannel+0x84a>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff fd1b 	bl	8004888 <LL_ADC_REG_IsConversionOngoing>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f040 83f3 	bne.w	8005640 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	6859      	ldr	r1, [r3, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	f7ff fbd5 	bl	8004616 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff fd09 	bl	8004888 <LL_ADC_REG_IsConversionOngoing>
 8004e76:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff fd15 	bl	80048ae <LL_ADC_INJ_IsConversionOngoing>
 8004e84:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e88:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f040 81d9 	bne.w	8005244 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f040 81d4 	bne.w	8005244 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ea4:	d10f      	bne.n	8004ec6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	f7ff fbdc 	bl	800466e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff fb83 	bl	80045ca <LL_ADC_SetSamplingTimeCommonConfig>
 8004ec4:	e00e      	b.n	8004ee4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	6819      	ldr	r1, [r3, #0]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f7ff fbcb 	bl	800466e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2100      	movs	r1, #0
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fb73 	bl	80045ca <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	695a      	ldr	r2, [r3, #20]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	08db      	lsrs	r3, r3, #3
 8004ef0:	f003 0303 	and.w	r3, r3, #3
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8004efa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d022      	beq.n	8004f4c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6818      	ldr	r0, [r3, #0]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	6919      	ldr	r1, [r3, #16]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004f16:	f7ff facd 	bl	80044b4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6818      	ldr	r0, [r3, #0]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	6919      	ldr	r1, [r3, #16]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	461a      	mov	r2, r3
 8004f28:	f7ff fb19 	bl	800455e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6818      	ldr	r0, [r3, #0]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d102      	bne.n	8004f42 <HAL_ADC_ConfigChannel+0x126>
 8004f3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f40:	e000      	b.n	8004f44 <HAL_ADC_ConfigChannel+0x128>
 8004f42:	2300      	movs	r3, #0
 8004f44:	461a      	mov	r2, r3
 8004f46:	f7ff fb25 	bl	8004594 <LL_ADC_SetOffsetSaturation>
 8004f4a:	e17b      	b.n	8005244 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2100      	movs	r1, #0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7ff fad2 	bl	80044fc <LL_ADC_GetOffsetChannel>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10a      	bne.n	8004f78 <HAL_ADC_ConfigChannel+0x15c>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2100      	movs	r1, #0
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff fac7 	bl	80044fc <LL_ADC_GetOffsetChannel>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	0e9b      	lsrs	r3, r3, #26
 8004f72:	f003 021f 	and.w	r2, r3, #31
 8004f76:	e01e      	b.n	8004fb6 <HAL_ADC_ConfigChannel+0x19a>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff fabc 	bl	80044fc <LL_ADC_GetOffsetChannel>
 8004f84:	4603      	mov	r3, r0
 8004f86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004f8e:	fa93 f3a3 	rbit	r3, r3
 8004f92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004f9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004f9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004fa6:	2320      	movs	r3, #32
 8004fa8:	e004      	b.n	8004fb4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004faa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004fae:	fab3 f383 	clz	r3, r3
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d105      	bne.n	8004fce <HAL_ADC_ConfigChannel+0x1b2>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	0e9b      	lsrs	r3, r3, #26
 8004fc8:	f003 031f 	and.w	r3, r3, #31
 8004fcc:	e018      	b.n	8005000 <HAL_ADC_ConfigChannel+0x1e4>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004fda:	fa93 f3a3 	rbit	r3, r3
 8004fde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fe6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004fea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004ff2:	2320      	movs	r3, #32
 8004ff4:	e004      	b.n	8005000 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004ff6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004ffa:	fab3 f383 	clz	r3, r3
 8004ffe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005000:	429a      	cmp	r2, r3
 8005002:	d106      	bne.n	8005012 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2200      	movs	r2, #0
 800500a:	2100      	movs	r1, #0
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff fa8b 	bl	8004528 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2101      	movs	r1, #1
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff fa6f 	bl	80044fc <LL_ADC_GetOffsetChannel>
 800501e:	4603      	mov	r3, r0
 8005020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10a      	bne.n	800503e <HAL_ADC_ConfigChannel+0x222>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2101      	movs	r1, #1
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff fa64 	bl	80044fc <LL_ADC_GetOffsetChannel>
 8005034:	4603      	mov	r3, r0
 8005036:	0e9b      	lsrs	r3, r3, #26
 8005038:	f003 021f 	and.w	r2, r3, #31
 800503c:	e01e      	b.n	800507c <HAL_ADC_ConfigChannel+0x260>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2101      	movs	r1, #1
 8005044:	4618      	mov	r0, r3
 8005046:	f7ff fa59 	bl	80044fc <LL_ADC_GetOffsetChannel>
 800504a:	4603      	mov	r3, r0
 800504c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005050:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005054:	fa93 f3a3 	rbit	r3, r3
 8005058:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800505c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005060:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005064:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800506c:	2320      	movs	r3, #32
 800506e:	e004      	b.n	800507a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005070:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005074:	fab3 f383 	clz	r3, r3
 8005078:	b2db      	uxtb	r3, r3
 800507a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005084:	2b00      	cmp	r3, #0
 8005086:	d105      	bne.n	8005094 <HAL_ADC_ConfigChannel+0x278>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	0e9b      	lsrs	r3, r3, #26
 800508e:	f003 031f 	and.w	r3, r3, #31
 8005092:	e018      	b.n	80050c6 <HAL_ADC_ConfigChannel+0x2aa>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80050a0:	fa93 f3a3 	rbit	r3, r3
 80050a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80050a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80050b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80050b8:	2320      	movs	r3, #32
 80050ba:	e004      	b.n	80050c6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80050bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80050c0:	fab3 f383 	clz	r3, r3
 80050c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d106      	bne.n	80050d8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2200      	movs	r2, #0
 80050d0:	2101      	movs	r1, #1
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff fa28 	bl	8004528 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2102      	movs	r1, #2
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff fa0c 	bl	80044fc <LL_ADC_GetOffsetChannel>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10a      	bne.n	8005104 <HAL_ADC_ConfigChannel+0x2e8>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2102      	movs	r1, #2
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7ff fa01 	bl	80044fc <LL_ADC_GetOffsetChannel>
 80050fa:	4603      	mov	r3, r0
 80050fc:	0e9b      	lsrs	r3, r3, #26
 80050fe:	f003 021f 	and.w	r2, r3, #31
 8005102:	e01e      	b.n	8005142 <HAL_ADC_ConfigChannel+0x326>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2102      	movs	r1, #2
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff f9f6 	bl	80044fc <LL_ADC_GetOffsetChannel>
 8005110:	4603      	mov	r3, r0
 8005112:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005116:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800511a:	fa93 f3a3 	rbit	r3, r3
 800511e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005122:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005126:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800512a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005132:	2320      	movs	r3, #32
 8005134:	e004      	b.n	8005140 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005136:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800513a:	fab3 f383 	clz	r3, r3
 800513e:	b2db      	uxtb	r3, r3
 8005140:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800514a:	2b00      	cmp	r3, #0
 800514c:	d105      	bne.n	800515a <HAL_ADC_ConfigChannel+0x33e>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	0e9b      	lsrs	r3, r3, #26
 8005154:	f003 031f 	and.w	r3, r3, #31
 8005158:	e016      	b.n	8005188 <HAL_ADC_ConfigChannel+0x36c>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005162:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005166:	fa93 f3a3 	rbit	r3, r3
 800516a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800516c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800516e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005172:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800517a:	2320      	movs	r3, #32
 800517c:	e004      	b.n	8005188 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800517e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005182:	fab3 f383 	clz	r3, r3
 8005186:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005188:	429a      	cmp	r2, r3
 800518a:	d106      	bne.n	800519a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2200      	movs	r2, #0
 8005192:	2102      	movs	r1, #2
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff f9c7 	bl	8004528 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2103      	movs	r1, #3
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff f9ab 	bl	80044fc <LL_ADC_GetOffsetChannel>
 80051a6:	4603      	mov	r3, r0
 80051a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <HAL_ADC_ConfigChannel+0x3aa>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2103      	movs	r1, #3
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7ff f9a0 	bl	80044fc <LL_ADC_GetOffsetChannel>
 80051bc:	4603      	mov	r3, r0
 80051be:	0e9b      	lsrs	r3, r3, #26
 80051c0:	f003 021f 	and.w	r2, r3, #31
 80051c4:	e017      	b.n	80051f6 <HAL_ADC_ConfigChannel+0x3da>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2103      	movs	r1, #3
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff f995 	bl	80044fc <LL_ADC_GetOffsetChannel>
 80051d2:	4603      	mov	r3, r0
 80051d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051d8:	fa93 f3a3 	rbit	r3, r3
 80051dc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80051de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051e0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80051e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80051e8:	2320      	movs	r3, #32
 80051ea:	e003      	b.n	80051f4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80051ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051ee:	fab3 f383 	clz	r3, r3
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d105      	bne.n	800520e <HAL_ADC_ConfigChannel+0x3f2>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	0e9b      	lsrs	r3, r3, #26
 8005208:	f003 031f 	and.w	r3, r3, #31
 800520c:	e011      	b.n	8005232 <HAL_ADC_ConfigChannel+0x416>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005214:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005216:	fa93 f3a3 	rbit	r3, r3
 800521a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800521c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800521e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005220:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005226:	2320      	movs	r3, #32
 8005228:	e003      	b.n	8005232 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800522a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800522c:	fab3 f383 	clz	r3, r3
 8005230:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005232:	429a      	cmp	r2, r3
 8005234:	d106      	bne.n	8005244 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2200      	movs	r2, #0
 800523c:	2103      	movs	r1, #3
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff f972 	bl	8004528 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff fae3 	bl	8004814 <LL_ADC_IsEnabled>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	f040 813d 	bne.w	80054d0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6818      	ldr	r0, [r3, #0]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	6819      	ldr	r1, [r3, #0]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	461a      	mov	r2, r3
 8005264:	f7ff fa2e 	bl	80046c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4aa2      	ldr	r2, [pc, #648]	@ (80054f8 <HAL_ADC_ConfigChannel+0x6dc>)
 800526e:	4293      	cmp	r3, r2
 8005270:	f040 812e 	bne.w	80054d0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10b      	bne.n	800529c <HAL_ADC_ConfigChannel+0x480>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	0e9b      	lsrs	r3, r3, #26
 800528a:	3301      	adds	r3, #1
 800528c:	f003 031f 	and.w	r3, r3, #31
 8005290:	2b09      	cmp	r3, #9
 8005292:	bf94      	ite	ls
 8005294:	2301      	movls	r3, #1
 8005296:	2300      	movhi	r3, #0
 8005298:	b2db      	uxtb	r3, r3
 800529a:	e019      	b.n	80052d0 <HAL_ADC_ConfigChannel+0x4b4>
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052a4:	fa93 f3a3 	rbit	r3, r3
 80052a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80052aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052ac:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80052ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80052b4:	2320      	movs	r3, #32
 80052b6:	e003      	b.n	80052c0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80052b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052ba:	fab3 f383 	clz	r3, r3
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	3301      	adds	r3, #1
 80052c2:	f003 031f 	and.w	r3, r3, #31
 80052c6:	2b09      	cmp	r3, #9
 80052c8:	bf94      	ite	ls
 80052ca:	2301      	movls	r3, #1
 80052cc:	2300      	movhi	r3, #0
 80052ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d079      	beq.n	80053c8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d107      	bne.n	80052f0 <HAL_ADC_ConfigChannel+0x4d4>
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	0e9b      	lsrs	r3, r3, #26
 80052e6:	3301      	adds	r3, #1
 80052e8:	069b      	lsls	r3, r3, #26
 80052ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80052ee:	e015      	b.n	800531c <HAL_ADC_ConfigChannel+0x500>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052f8:	fa93 f3a3 	rbit	r3, r3
 80052fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80052fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005300:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005308:	2320      	movs	r3, #32
 800530a:	e003      	b.n	8005314 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800530c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800530e:	fab3 f383 	clz	r3, r3
 8005312:	b2db      	uxtb	r3, r3
 8005314:	3301      	adds	r3, #1
 8005316:	069b      	lsls	r3, r3, #26
 8005318:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005324:	2b00      	cmp	r3, #0
 8005326:	d109      	bne.n	800533c <HAL_ADC_ConfigChannel+0x520>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	0e9b      	lsrs	r3, r3, #26
 800532e:	3301      	adds	r3, #1
 8005330:	f003 031f 	and.w	r3, r3, #31
 8005334:	2101      	movs	r1, #1
 8005336:	fa01 f303 	lsl.w	r3, r1, r3
 800533a:	e017      	b.n	800536c <HAL_ADC_ConfigChannel+0x550>
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005342:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005344:	fa93 f3a3 	rbit	r3, r3
 8005348:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800534a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800534c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800534e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005354:	2320      	movs	r3, #32
 8005356:	e003      	b.n	8005360 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005358:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800535a:	fab3 f383 	clz	r3, r3
 800535e:	b2db      	uxtb	r3, r3
 8005360:	3301      	adds	r3, #1
 8005362:	f003 031f 	and.w	r3, r3, #31
 8005366:	2101      	movs	r1, #1
 8005368:	fa01 f303 	lsl.w	r3, r1, r3
 800536c:	ea42 0103 	orr.w	r1, r2, r3
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10a      	bne.n	8005392 <HAL_ADC_ConfigChannel+0x576>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	0e9b      	lsrs	r3, r3, #26
 8005382:	3301      	adds	r3, #1
 8005384:	f003 021f 	and.w	r2, r3, #31
 8005388:	4613      	mov	r3, r2
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	4413      	add	r3, r2
 800538e:	051b      	lsls	r3, r3, #20
 8005390:	e018      	b.n	80053c4 <HAL_ADC_ConfigChannel+0x5a8>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539a:	fa93 f3a3 	rbit	r3, r3
 800539e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80053a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80053a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80053aa:	2320      	movs	r3, #32
 80053ac:	e003      	b.n	80053b6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80053ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b0:	fab3 f383 	clz	r3, r3
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	3301      	adds	r3, #1
 80053b8:	f003 021f 	and.w	r2, r3, #31
 80053bc:	4613      	mov	r3, r2
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	4413      	add	r3, r2
 80053c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053c4:	430b      	orrs	r3, r1
 80053c6:	e07e      	b.n	80054c6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d107      	bne.n	80053e4 <HAL_ADC_ConfigChannel+0x5c8>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	0e9b      	lsrs	r3, r3, #26
 80053da:	3301      	adds	r3, #1
 80053dc:	069b      	lsls	r3, r3, #26
 80053de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80053e2:	e015      	b.n	8005410 <HAL_ADC_ConfigChannel+0x5f4>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ec:	fa93 f3a3 	rbit	r3, r3
 80053f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80053f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80053f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80053fc:	2320      	movs	r3, #32
 80053fe:	e003      	b.n	8005408 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005402:	fab3 f383 	clz	r3, r3
 8005406:	b2db      	uxtb	r3, r3
 8005408:	3301      	adds	r3, #1
 800540a:	069b      	lsls	r3, r3, #26
 800540c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005418:	2b00      	cmp	r3, #0
 800541a:	d109      	bne.n	8005430 <HAL_ADC_ConfigChannel+0x614>
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	0e9b      	lsrs	r3, r3, #26
 8005422:	3301      	adds	r3, #1
 8005424:	f003 031f 	and.w	r3, r3, #31
 8005428:	2101      	movs	r1, #1
 800542a:	fa01 f303 	lsl.w	r3, r1, r3
 800542e:	e017      	b.n	8005460 <HAL_ADC_ConfigChannel+0x644>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	fa93 f3a3 	rbit	r3, r3
 800543c:	61fb      	str	r3, [r7, #28]
  return result;
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005448:	2320      	movs	r3, #32
 800544a:	e003      	b.n	8005454 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800544c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544e:	fab3 f383 	clz	r3, r3
 8005452:	b2db      	uxtb	r3, r3
 8005454:	3301      	adds	r3, #1
 8005456:	f003 031f 	and.w	r3, r3, #31
 800545a:	2101      	movs	r1, #1
 800545c:	fa01 f303 	lsl.w	r3, r1, r3
 8005460:	ea42 0103 	orr.w	r1, r2, r3
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10d      	bne.n	800548c <HAL_ADC_ConfigChannel+0x670>
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	0e9b      	lsrs	r3, r3, #26
 8005476:	3301      	adds	r3, #1
 8005478:	f003 021f 	and.w	r2, r3, #31
 800547c:	4613      	mov	r3, r2
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	4413      	add	r3, r2
 8005482:	3b1e      	subs	r3, #30
 8005484:	051b      	lsls	r3, r3, #20
 8005486:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800548a:	e01b      	b.n	80054c4 <HAL_ADC_ConfigChannel+0x6a8>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	fa93 f3a3 	rbit	r3, r3
 8005498:	613b      	str	r3, [r7, #16]
  return result;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80054a4:	2320      	movs	r3, #32
 80054a6:	e003      	b.n	80054b0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	fab3 f383 	clz	r3, r3
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	3301      	adds	r3, #1
 80054b2:	f003 021f 	and.w	r2, r3, #31
 80054b6:	4613      	mov	r3, r2
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	4413      	add	r3, r2
 80054bc:	3b1e      	subs	r3, #30
 80054be:	051b      	lsls	r3, r3, #20
 80054c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054c4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054ca:	4619      	mov	r1, r3
 80054cc:	f7ff f8cf 	bl	800466e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	4b09      	ldr	r3, [pc, #36]	@ (80054fc <HAL_ADC_ConfigChannel+0x6e0>)
 80054d6:	4013      	ands	r3, r2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 80be 	beq.w	800565a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054e6:	d004      	beq.n	80054f2 <HAL_ADC_ConfigChannel+0x6d6>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a04      	ldr	r2, [pc, #16]	@ (8005500 <HAL_ADC_ConfigChannel+0x6e4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d10a      	bne.n	8005508 <HAL_ADC_ConfigChannel+0x6ec>
 80054f2:	4b04      	ldr	r3, [pc, #16]	@ (8005504 <HAL_ADC_ConfigChannel+0x6e8>)
 80054f4:	e009      	b.n	800550a <HAL_ADC_ConfigChannel+0x6ee>
 80054f6:	bf00      	nop
 80054f8:	407f0000 	.word	0x407f0000
 80054fc:	80080000 	.word	0x80080000
 8005500:	50000100 	.word	0x50000100
 8005504:	50000300 	.word	0x50000300
 8005508:	4b59      	ldr	r3, [pc, #356]	@ (8005670 <HAL_ADC_ConfigChannel+0x854>)
 800550a:	4618      	mov	r0, r3
 800550c:	f7fe ffc4 	bl	8004498 <LL_ADC_GetCommonPathInternalCh>
 8005510:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a56      	ldr	r2, [pc, #344]	@ (8005674 <HAL_ADC_ConfigChannel+0x858>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d004      	beq.n	8005528 <HAL_ADC_ConfigChannel+0x70c>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a55      	ldr	r2, [pc, #340]	@ (8005678 <HAL_ADC_ConfigChannel+0x85c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d13a      	bne.n	800559e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005528:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800552c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d134      	bne.n	800559e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800553c:	d005      	beq.n	800554a <HAL_ADC_ConfigChannel+0x72e>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a4e      	ldr	r2, [pc, #312]	@ (800567c <HAL_ADC_ConfigChannel+0x860>)
 8005544:	4293      	cmp	r3, r2
 8005546:	f040 8085 	bne.w	8005654 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005552:	d004      	beq.n	800555e <HAL_ADC_ConfigChannel+0x742>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a49      	ldr	r2, [pc, #292]	@ (8005680 <HAL_ADC_ConfigChannel+0x864>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d101      	bne.n	8005562 <HAL_ADC_ConfigChannel+0x746>
 800555e:	4a49      	ldr	r2, [pc, #292]	@ (8005684 <HAL_ADC_ConfigChannel+0x868>)
 8005560:	e000      	b.n	8005564 <HAL_ADC_ConfigChannel+0x748>
 8005562:	4a43      	ldr	r2, [pc, #268]	@ (8005670 <HAL_ADC_ConfigChannel+0x854>)
 8005564:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005568:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800556c:	4619      	mov	r1, r3
 800556e:	4610      	mov	r0, r2
 8005570:	f7fe ff7f 	bl	8004472 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005574:	4b44      	ldr	r3, [pc, #272]	@ (8005688 <HAL_ADC_ConfigChannel+0x86c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	099b      	lsrs	r3, r3, #6
 800557a:	4a44      	ldr	r2, [pc, #272]	@ (800568c <HAL_ADC_ConfigChannel+0x870>)
 800557c:	fba2 2303 	umull	r2, r3, r2, r3
 8005580:	099b      	lsrs	r3, r3, #6
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	4613      	mov	r3, r2
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	4413      	add	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800558e:	e002      	b.n	8005596 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3b01      	subs	r3, #1
 8005594:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1f9      	bne.n	8005590 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800559c:	e05a      	b.n	8005654 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a3b      	ldr	r2, [pc, #236]	@ (8005690 <HAL_ADC_ConfigChannel+0x874>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d125      	bne.n	80055f4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80055a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d11f      	bne.n	80055f4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a31      	ldr	r2, [pc, #196]	@ (8005680 <HAL_ADC_ConfigChannel+0x864>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d104      	bne.n	80055c8 <HAL_ADC_ConfigChannel+0x7ac>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a34      	ldr	r2, [pc, #208]	@ (8005694 <HAL_ADC_ConfigChannel+0x878>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d047      	beq.n	8005658 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055d0:	d004      	beq.n	80055dc <HAL_ADC_ConfigChannel+0x7c0>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a2a      	ldr	r2, [pc, #168]	@ (8005680 <HAL_ADC_ConfigChannel+0x864>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d101      	bne.n	80055e0 <HAL_ADC_ConfigChannel+0x7c4>
 80055dc:	4a29      	ldr	r2, [pc, #164]	@ (8005684 <HAL_ADC_ConfigChannel+0x868>)
 80055de:	e000      	b.n	80055e2 <HAL_ADC_ConfigChannel+0x7c6>
 80055e0:	4a23      	ldr	r2, [pc, #140]	@ (8005670 <HAL_ADC_ConfigChannel+0x854>)
 80055e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055ea:	4619      	mov	r1, r3
 80055ec:	4610      	mov	r0, r2
 80055ee:	f7fe ff40 	bl	8004472 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055f2:	e031      	b.n	8005658 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a27      	ldr	r2, [pc, #156]	@ (8005698 <HAL_ADC_ConfigChannel+0x87c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d12d      	bne.n	800565a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80055fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d127      	bne.n	800565a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a1c      	ldr	r2, [pc, #112]	@ (8005680 <HAL_ADC_ConfigChannel+0x864>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d022      	beq.n	800565a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800561c:	d004      	beq.n	8005628 <HAL_ADC_ConfigChannel+0x80c>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a17      	ldr	r2, [pc, #92]	@ (8005680 <HAL_ADC_ConfigChannel+0x864>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d101      	bne.n	800562c <HAL_ADC_ConfigChannel+0x810>
 8005628:	4a16      	ldr	r2, [pc, #88]	@ (8005684 <HAL_ADC_ConfigChannel+0x868>)
 800562a:	e000      	b.n	800562e <HAL_ADC_ConfigChannel+0x812>
 800562c:	4a10      	ldr	r2, [pc, #64]	@ (8005670 <HAL_ADC_ConfigChannel+0x854>)
 800562e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005632:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005636:	4619      	mov	r1, r3
 8005638:	4610      	mov	r0, r2
 800563a:	f7fe ff1a 	bl	8004472 <LL_ADC_SetCommonPathInternalCh>
 800563e:	e00c      	b.n	800565a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005644:	f043 0220 	orr.w	r2, r3, #32
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005652:	e002      	b.n	800565a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005654:	bf00      	nop
 8005656:	e000      	b.n	800565a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005658:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005662:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005666:	4618      	mov	r0, r3
 8005668:	37d8      	adds	r7, #216	@ 0xd8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	50000700 	.word	0x50000700
 8005674:	c3210000 	.word	0xc3210000
 8005678:	90c00010 	.word	0x90c00010
 800567c:	50000600 	.word	0x50000600
 8005680:	50000100 	.word	0x50000100
 8005684:	50000300 	.word	0x50000300
 8005688:	2000003c 	.word	0x2000003c
 800568c:	053e2d63 	.word	0x053e2d63
 8005690:	c7520000 	.word	0xc7520000
 8005694:	50000500 	.word	0x50000500
 8005698:	cb840000 	.word	0xcb840000

0800569c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7ff f8b1 	bl	8004814 <LL_ADC_IsEnabled>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d176      	bne.n	80057a6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	4b3c      	ldr	r3, [pc, #240]	@ (80057b0 <ADC_Enable+0x114>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00d      	beq.n	80056e2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ca:	f043 0210 	orr.w	r2, r3, #16
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056d6:	f043 0201 	orr.w	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e062      	b.n	80057a8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff f86c 	bl	80047c4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056f4:	d004      	beq.n	8005700 <ADC_Enable+0x64>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a2e      	ldr	r2, [pc, #184]	@ (80057b4 <ADC_Enable+0x118>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d101      	bne.n	8005704 <ADC_Enable+0x68>
 8005700:	4b2d      	ldr	r3, [pc, #180]	@ (80057b8 <ADC_Enable+0x11c>)
 8005702:	e000      	b.n	8005706 <ADC_Enable+0x6a>
 8005704:	4b2d      	ldr	r3, [pc, #180]	@ (80057bc <ADC_Enable+0x120>)
 8005706:	4618      	mov	r0, r3
 8005708:	f7fe fec6 	bl	8004498 <LL_ADC_GetCommonPathInternalCh>
 800570c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800570e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005712:	2b00      	cmp	r3, #0
 8005714:	d013      	beq.n	800573e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005716:	4b2a      	ldr	r3, [pc, #168]	@ (80057c0 <ADC_Enable+0x124>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	099b      	lsrs	r3, r3, #6
 800571c:	4a29      	ldr	r2, [pc, #164]	@ (80057c4 <ADC_Enable+0x128>)
 800571e:	fba2 2303 	umull	r2, r3, r2, r3
 8005722:	099b      	lsrs	r3, r3, #6
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	4613      	mov	r3, r2
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	4413      	add	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005730:	e002      	b.n	8005738 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	3b01      	subs	r3, #1
 8005736:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1f9      	bne.n	8005732 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800573e:	f7fe fe57 	bl	80043f0 <HAL_GetTick>
 8005742:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005744:	e028      	b.n	8005798 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4618      	mov	r0, r3
 800574c:	f7ff f862 	bl	8004814 <LL_ADC_IsEnabled>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d104      	bne.n	8005760 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff f832 	bl	80047c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005760:	f7fe fe46 	bl	80043f0 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d914      	bls.n	8005798 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b01      	cmp	r3, #1
 800577a:	d00d      	beq.n	8005798 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005780:	f043 0210 	orr.w	r2, r3, #16
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800578c:	f043 0201 	orr.w	r2, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e007      	b.n	80057a8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d1cf      	bne.n	8005746 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	8000003f 	.word	0x8000003f
 80057b4:	50000100 	.word	0x50000100
 80057b8:	50000300 	.word	0x50000300
 80057bc:	50000700 	.word	0x50000700
 80057c0:	2000003c 	.word	0x2000003c
 80057c4:	053e2d63 	.word	0x053e2d63

080057c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff f830 	bl	800483a <LL_ADC_IsDisableOngoing>
 80057da:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff f817 	bl	8004814 <LL_ADC_IsEnabled>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d047      	beq.n	800587c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d144      	bne.n	800587c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 030d 	and.w	r3, r3, #13
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d10c      	bne.n	800581a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4618      	mov	r0, r3
 8005806:	f7fe fff1 	bl	80047ec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2203      	movs	r2, #3
 8005810:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005812:	f7fe fded 	bl	80043f0 <HAL_GetTick>
 8005816:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005818:	e029      	b.n	800586e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800581e:	f043 0210 	orr.w	r2, r3, #16
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800582a:	f043 0201 	orr.w	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e023      	b.n	800587e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005836:	f7fe fddb 	bl	80043f0 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d914      	bls.n	800586e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00d      	beq.n	800586e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005856:	f043 0210 	orr.w	r2, r3, #16
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005862:	f043 0201 	orr.w	r2, r3, #1
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e007      	b.n	800587e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1dc      	bne.n	8005836 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b084      	sub	sp, #16
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005892:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005898:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800589c:	2b00      	cmp	r3, #0
 800589e:	d14b      	bne.n	8005938 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0308 	and.w	r3, r3, #8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d021      	beq.n	80058fe <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fe fe96 	bl	80045f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d032      	beq.n	8005930 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d12b      	bne.n	8005930 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d11f      	bne.n	8005930 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058f4:	f043 0201 	orr.w	r2, r3, #1
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80058fc:	e018      	b.n	8005930 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d111      	bne.n	8005930 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005910:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800591c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d105      	bne.n	8005930 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005928:	f043 0201 	orr.w	r2, r3, #1
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f7fc ffe5 	bl	8002900 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005936:	e00e      	b.n	8005956 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800593c:	f003 0310 	and.w	r3, r3, #16
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f7ff fa5f 	bl	8004e08 <HAL_ADC_ErrorCallback>
}
 800594a:	e004      	b.n	8005956 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	4798      	blx	r3
}
 8005956:	bf00      	nop
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f7ff fa41 	bl	8004df4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005972:	bf00      	nop
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005986:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800598c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005998:	f043 0204 	orr.w	r2, r3, #4
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f7ff fa31 	bl	8004e08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80059a6:	bf00      	nop
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <LL_ADC_IsEnabled>:
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <LL_ADC_IsEnabled+0x18>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e000      	b.n	80059c8 <LL_ADC_IsEnabled+0x1a>
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <LL_ADC_StartCalibration>:
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80059e6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80059f0:	4313      	orrs	r3, r2
 80059f2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	609a      	str	r2, [r3, #8]
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <LL_ADC_IsCalibrationOnGoing>:
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a1a:	d101      	bne.n	8005a20 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e000      	b.n	8005a22 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <LL_ADC_REG_IsConversionOngoing>:
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d101      	bne.n	8005a46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_ADCEx_Calibration_Start+0x1c>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e04d      	b.n	8005b0c <HAL_ADCEx_Calibration_Start+0xb8>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7ff fea5 	bl	80057c8 <ADC_Disable>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005a82:	7bfb      	ldrb	r3, [r7, #15]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d136      	bne.n	8005af6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a8c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005a90:	f023 0302 	bic.w	r3, r3, #2
 8005a94:	f043 0202 	orr.w	r2, r3, #2
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6839      	ldr	r1, [r7, #0]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7ff ff96 	bl	80059d4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005aa8:	e014      	b.n	8005ad4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	3301      	adds	r3, #1
 8005aae:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4a18      	ldr	r2, [pc, #96]	@ (8005b14 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d90d      	bls.n	8005ad4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005abc:	f023 0312 	bic.w	r3, r3, #18
 8005ac0:	f043 0210 	orr.w	r2, r3, #16
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e01b      	b.n	8005b0c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7ff ff94 	bl	8005a06 <LL_ADC_IsCalibrationOnGoing>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e2      	bne.n	8005aaa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ae8:	f023 0303 	bic.w	r3, r3, #3
 8005aec:	f043 0201 	orr.w	r2, r3, #1
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005af4:	e005      	b.n	8005b02 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005afa:	f043 0210 	orr.w	r2, r3, #16
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	0004de01 	.word	0x0004de01

08005b18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005b18:	b590      	push	{r4, r7, lr}
 8005b1a:	b0a1      	sub	sp, #132	@ 0x84
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d101      	bne.n	8005b36 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005b32:	2302      	movs	r3, #2
 8005b34:	e0e7      	b.n	8005d06 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005b3e:	2300      	movs	r3, #0
 8005b40:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005b42:	2300      	movs	r3, #0
 8005b44:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b4e:	d102      	bne.n	8005b56 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005b50:	4b6f      	ldr	r3, [pc, #444]	@ (8005d10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005b52:	60bb      	str	r3, [r7, #8]
 8005b54:	e009      	b.n	8005b6a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a6e      	ldr	r2, [pc, #440]	@ (8005d14 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d102      	bne.n	8005b66 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005b60:	4b6d      	ldr	r3, [pc, #436]	@ (8005d18 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005b62:	60bb      	str	r3, [r7, #8]
 8005b64:	e001      	b.n	8005b6a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005b66:	2300      	movs	r3, #0
 8005b68:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10b      	bne.n	8005b88 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b74:	f043 0220 	orr.w	r2, r3, #32
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e0be      	b.n	8005d06 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff ff4f 	bl	8005a2e <LL_ADC_REG_IsConversionOngoing>
 8005b90:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff ff49 	bl	8005a2e <LL_ADC_REG_IsConversionOngoing>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f040 80a0 	bne.w	8005ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005ba4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f040 809c 	bne.w	8005ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bb4:	d004      	beq.n	8005bc0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a55      	ldr	r2, [pc, #340]	@ (8005d10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d101      	bne.n	8005bc4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005bc0:	4b56      	ldr	r3, [pc, #344]	@ (8005d1c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005bc2:	e000      	b.n	8005bc6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005bc4:	4b56      	ldr	r3, [pc, #344]	@ (8005d20 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005bc6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d04b      	beq.n	8005c68 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005bd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	6859      	ldr	r1, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005be2:	035b      	lsls	r3, r3, #13
 8005be4:	430b      	orrs	r3, r1
 8005be6:	431a      	orrs	r2, r3
 8005be8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bf4:	d004      	beq.n	8005c00 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a45      	ldr	r2, [pc, #276]	@ (8005d10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d10f      	bne.n	8005c20 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005c00:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005c04:	f7ff fed3 	bl	80059ae <LL_ADC_IsEnabled>
 8005c08:	4604      	mov	r4, r0
 8005c0a:	4841      	ldr	r0, [pc, #260]	@ (8005d10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005c0c:	f7ff fecf 	bl	80059ae <LL_ADC_IsEnabled>
 8005c10:	4603      	mov	r3, r0
 8005c12:	4323      	orrs	r3, r4
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	bf0c      	ite	eq
 8005c18:	2301      	moveq	r3, #1
 8005c1a:	2300      	movne	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	e012      	b.n	8005c46 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005c20:	483c      	ldr	r0, [pc, #240]	@ (8005d14 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005c22:	f7ff fec4 	bl	80059ae <LL_ADC_IsEnabled>
 8005c26:	4604      	mov	r4, r0
 8005c28:	483b      	ldr	r0, [pc, #236]	@ (8005d18 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005c2a:	f7ff fec0 	bl	80059ae <LL_ADC_IsEnabled>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	431c      	orrs	r4, r3
 8005c32:	483c      	ldr	r0, [pc, #240]	@ (8005d24 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005c34:	f7ff febb 	bl	80059ae <LL_ADC_IsEnabled>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	4323      	orrs	r3, r4
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	bf0c      	ite	eq
 8005c40:	2301      	moveq	r3, #1
 8005c42:	2300      	movne	r3, #0
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d056      	beq.n	8005cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005c4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005c52:	f023 030f 	bic.w	r3, r3, #15
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	6811      	ldr	r1, [r2, #0]
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	6892      	ldr	r2, [r2, #8]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	431a      	orrs	r2, r3
 8005c62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c64:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005c66:	e047      	b.n	8005cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005c68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c72:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c7c:	d004      	beq.n	8005c88 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a23      	ldr	r2, [pc, #140]	@ (8005d10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d10f      	bne.n	8005ca8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005c88:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005c8c:	f7ff fe8f 	bl	80059ae <LL_ADC_IsEnabled>
 8005c90:	4604      	mov	r4, r0
 8005c92:	481f      	ldr	r0, [pc, #124]	@ (8005d10 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005c94:	f7ff fe8b 	bl	80059ae <LL_ADC_IsEnabled>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	4323      	orrs	r3, r4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	bf0c      	ite	eq
 8005ca0:	2301      	moveq	r3, #1
 8005ca2:	2300      	movne	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	e012      	b.n	8005cce <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005ca8:	481a      	ldr	r0, [pc, #104]	@ (8005d14 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005caa:	f7ff fe80 	bl	80059ae <LL_ADC_IsEnabled>
 8005cae:	4604      	mov	r4, r0
 8005cb0:	4819      	ldr	r0, [pc, #100]	@ (8005d18 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005cb2:	f7ff fe7c 	bl	80059ae <LL_ADC_IsEnabled>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	431c      	orrs	r4, r3
 8005cba:	481a      	ldr	r0, [pc, #104]	@ (8005d24 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005cbc:	f7ff fe77 	bl	80059ae <LL_ADC_IsEnabled>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	4323      	orrs	r3, r4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	bf0c      	ite	eq
 8005cc8:	2301      	moveq	r3, #1
 8005cca:	2300      	movne	r3, #0
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d012      	beq.n	8005cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005cd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005cda:	f023 030f 	bic.w	r3, r3, #15
 8005cde:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005ce0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005ce2:	e009      	b.n	8005cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ce8:	f043 0220 	orr.w	r2, r3, #32
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005cf6:	e000      	b.n	8005cfa <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005cf8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005d02:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3784      	adds	r7, #132	@ 0x84
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd90      	pop	{r4, r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	50000100 	.word	0x50000100
 8005d14:	50000400 	.word	0x50000400
 8005d18:	50000500 	.word	0x50000500
 8005d1c:	50000300 	.word	0x50000300
 8005d20:	50000700 	.word	0x50000700
 8005d24:	50000600 	.word	0x50000600

08005d28 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e023      	b.n	8005d82 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7fd fed8 	bl	8003b04 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005da8:	4013      	ands	r3, r2
 8005daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005db4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005dbe:	4a04      	ldr	r2, [pc, #16]	@ (8005dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	60d3      	str	r3, [r2, #12]
}
 8005dc4:	bf00      	nop
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	e000ed00 	.word	0xe000ed00

08005dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005dd8:	4b04      	ldr	r3, [pc, #16]	@ (8005dec <__NVIC_GetPriorityGrouping+0x18>)
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	0a1b      	lsrs	r3, r3, #8
 8005dde:	f003 0307 	and.w	r3, r3, #7
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	e000ed00 	.word	0xe000ed00

08005df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	4603      	mov	r3, r0
 8005df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	db0b      	blt.n	8005e1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	f003 021f 	and.w	r2, r3, #31
 8005e08:	4907      	ldr	r1, [pc, #28]	@ (8005e28 <__NVIC_EnableIRQ+0x38>)
 8005e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e0e:	095b      	lsrs	r3, r3, #5
 8005e10:	2001      	movs	r0, #1
 8005e12:	fa00 f202 	lsl.w	r2, r0, r2
 8005e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	e000e100 	.word	0xe000e100

08005e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	4603      	mov	r3, r0
 8005e34:	6039      	str	r1, [r7, #0]
 8005e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	db0a      	blt.n	8005e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	490c      	ldr	r1, [pc, #48]	@ (8005e78 <__NVIC_SetPriority+0x4c>)
 8005e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e4a:	0112      	lsls	r2, r2, #4
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	440b      	add	r3, r1
 8005e50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e54:	e00a      	b.n	8005e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	4908      	ldr	r1, [pc, #32]	@ (8005e7c <__NVIC_SetPriority+0x50>)
 8005e5c:	79fb      	ldrb	r3, [r7, #7]
 8005e5e:	f003 030f 	and.w	r3, r3, #15
 8005e62:	3b04      	subs	r3, #4
 8005e64:	0112      	lsls	r2, r2, #4
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	440b      	add	r3, r1
 8005e6a:	761a      	strb	r2, [r3, #24]
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	e000e100 	.word	0xe000e100
 8005e7c:	e000ed00 	.word	0xe000ed00

08005e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b089      	sub	sp, #36	@ 0x24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	f1c3 0307 	rsb	r3, r3, #7
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	bf28      	it	cs
 8005e9e:	2304      	movcs	r3, #4
 8005ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	2b06      	cmp	r3, #6
 8005ea8:	d902      	bls.n	8005eb0 <NVIC_EncodePriority+0x30>
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	3b03      	subs	r3, #3
 8005eae:	e000      	b.n	8005eb2 <NVIC_EncodePriority+0x32>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebe:	43da      	mvns	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	401a      	ands	r2, r3
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed2:	43d9      	mvns	r1, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ed8:	4313      	orrs	r3, r2
         );
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3724      	adds	r7, #36	@ 0x24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
	...

08005ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ef8:	d301      	bcc.n	8005efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005efa:	2301      	movs	r3, #1
 8005efc:	e00f      	b.n	8005f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005efe:	4a0a      	ldr	r2, [pc, #40]	@ (8005f28 <SysTick_Config+0x40>)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f06:	210f      	movs	r1, #15
 8005f08:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0c:	f7ff ff8e 	bl	8005e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f10:	4b05      	ldr	r3, [pc, #20]	@ (8005f28 <SysTick_Config+0x40>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f16:	4b04      	ldr	r3, [pc, #16]	@ (8005f28 <SysTick_Config+0x40>)
 8005f18:	2207      	movs	r2, #7
 8005f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	e000e010 	.word	0xe000e010

08005f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7ff ff29 	bl	8005d8c <__NVIC_SetPriorityGrouping>
}
 8005f3a:	bf00      	nop
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b086      	sub	sp, #24
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	4603      	mov	r3, r0
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	607a      	str	r2, [r7, #4]
 8005f4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005f50:	f7ff ff40 	bl	8005dd4 <__NVIC_GetPriorityGrouping>
 8005f54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	68b9      	ldr	r1, [r7, #8]
 8005f5a:	6978      	ldr	r0, [r7, #20]
 8005f5c:	f7ff ff90 	bl	8005e80 <NVIC_EncodePriority>
 8005f60:	4602      	mov	r2, r0
 8005f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f66:	4611      	mov	r1, r2
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7ff ff5f 	bl	8005e2c <__NVIC_SetPriority>
}
 8005f6e:	bf00      	nop
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b082      	sub	sp, #8
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7ff ff33 	bl	8005df0 <__NVIC_EnableIRQ>
}
 8005f8a:	bf00      	nop
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b082      	sub	sp, #8
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7ff ffa4 	bl	8005ee8 <SysTick_Config>
 8005fa0:	4603      	mov	r3, r0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b082      	sub	sp, #8
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e014      	b.n	8005fe6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	791b      	ldrb	r3, [r3, #4]
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d105      	bne.n	8005fd2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7fd fdb9 	bl	8003b44 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
	...

08005ff0 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e056      	b.n	80060b2 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	795b      	ldrb	r3, [r3, #5]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <HAL_DAC_Start+0x20>
 800600c:	2302      	movs	r3, #2
 800600e:	e050      	b.n	80060b2 <HAL_DAC_Start+0xc2>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2202      	movs	r2, #2
 800601a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6819      	ldr	r1, [r3, #0]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2201      	movs	r2, #1
 800602a:	409a      	lsls	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006034:	4b22      	ldr	r3, [pc, #136]	@ (80060c0 <HAL_DAC_Start+0xd0>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	099b      	lsrs	r3, r3, #6
 800603a:	4a22      	ldr	r2, [pc, #136]	@ (80060c4 <HAL_DAC_Start+0xd4>)
 800603c:	fba2 2303 	umull	r2, r3, r2, r3
 8006040:	099b      	lsrs	r3, r3, #6
 8006042:	3301      	adds	r3, #1
 8006044:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8006046:	e002      	b.n	800604e <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	3b01      	subs	r3, #1
 800604c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1f9      	bne.n	8006048 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10f      	bne.n	800607a <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8006064:	2b02      	cmp	r3, #2
 8006066:	d11d      	bne.n	80060a4 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0201 	orr.w	r2, r2, #1
 8006076:	605a      	str	r2, [r3, #4]
 8006078:	e014      	b.n	80060a4 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	f003 0310 	and.w	r3, r3, #16
 800608a:	2102      	movs	r1, #2
 800608c:	fa01 f303 	lsl.w	r3, r1, r3
 8006090:	429a      	cmp	r2, r3
 8006092:	d107      	bne.n	80060a4 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0202 	orr.w	r2, r2, #2
 80060a2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	2000003c 	.word	0x2000003c
 80060c4:	053e2d63 	.word	0x053e2d63

080060c8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060de:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01d      	beq.n	8006126 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d018      	beq.n	8006126 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2204      	movs	r2, #4
 80060f8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f043 0201 	orr.w	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800610e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800611e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f854 	bl	80061ce <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d01d      	beq.n	800616c <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d018      	beq.n	800616c <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2204      	movs	r2, #4
 800613e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	f043 0202 	orr.w	r2, r3, #2
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006154:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8006164:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f9f4 	bl	8006554 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800616c:	bf00      	nop
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
 8006180:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8006182:	2300      	movs	r3, #0
 8006184:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e018      	b.n	80061c2 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d105      	bne.n	80061ae <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4413      	add	r3, r2
 80061a8:	3308      	adds	r3, #8
 80061aa:	617b      	str	r3, [r7, #20]
 80061ac:	e004      	b.n	80061b8 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4413      	add	r3, r2
 80061b4:	3314      	adds	r3, #20
 80061b6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	461a      	mov	r2, r3
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	371c      	adds	r7, #28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
	...

080061e4 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08a      	sub	sp, #40	@ 0x28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <HAL_DAC_ConfigChannel+0x1c>
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e19e      	b.n	8006542 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	795b      	ldrb	r3, [r3, #5]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_DAC_ConfigChannel+0x2c>
 800620c:	2302      	movs	r3, #2
 800620e:	e198      	b.n	8006542 <HAL_DAC_ConfigChannel+0x35e>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2201      	movs	r2, #1
 8006214:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2202      	movs	r2, #2
 800621a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	2b04      	cmp	r3, #4
 8006222:	d17a      	bne.n	800631a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006224:	f7fe f8e4 	bl	80043f0 <HAL_GetTick>
 8006228:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d13d      	bne.n	80062ac <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006230:	e018      	b.n	8006264 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006232:	f7fe f8dd 	bl	80043f0 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b01      	cmp	r3, #1
 800623e:	d911      	bls.n	8006264 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006246:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f043 0208 	orr.w	r2, r3, #8
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2203      	movs	r2, #3
 800625e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e16e      	b.n	8006542 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800626a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1df      	bne.n	8006232 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800627a:	641a      	str	r2, [r3, #64]	@ 0x40
 800627c:	e020      	b.n	80062c0 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800627e:	f7fe f8b7 	bl	80043f0 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b01      	cmp	r3, #1
 800628a:	d90f      	bls.n	80062ac <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006292:	2b00      	cmp	r3, #0
 8006294:	da0a      	bge.n	80062ac <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	f043 0208 	orr.w	r2, r3, #8
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2203      	movs	r2, #3
 80062a6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e14a      	b.n	8006542 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	dbe3      	blt.n	800627e <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80062be:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f003 0310 	and.w	r3, r3, #16
 80062cc:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80062d0:	fa01 f303 	lsl.w	r3, r1, r3
 80062d4:	43db      	mvns	r3, r3
 80062d6:	ea02 0103 	and.w	r1, r2, r3
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f003 0310 	and.w	r3, r3, #16
 80062e4:	409a      	lsls	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f003 0310 	and.w	r3, r3, #16
 80062fa:	21ff      	movs	r1, #255	@ 0xff
 80062fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006300:	43db      	mvns	r3, r3
 8006302:	ea02 0103 	and.w	r1, r2, r3
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f003 0310 	and.w	r3, r3, #16
 8006310:	409a      	lsls	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d11d      	bne.n	800635e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006328:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f003 0310 	and.w	r3, r3, #16
 8006330:	221f      	movs	r2, #31
 8006332:	fa02 f303 	lsl.w	r3, r2, r3
 8006336:	43db      	mvns	r3, r3
 8006338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800633a:	4013      	ands	r3, r2
 800633c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f003 0310 	and.w	r3, r3, #16
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	fa02 f303 	lsl.w	r3, r2, r3
 8006350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006352:	4313      	orrs	r3, r2
 8006354:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800635c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006364:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f003 0310 	and.w	r3, r3, #16
 800636c:	2207      	movs	r2, #7
 800636e:	fa02 f303 	lsl.w	r3, r2, r3
 8006372:	43db      	mvns	r3, r3
 8006374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006376:	4013      	ands	r3, r2
 8006378:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d102      	bne.n	8006388 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8006382:	2300      	movs	r3, #0
 8006384:	623b      	str	r3, [r7, #32]
 8006386:	e00f      	b.n	80063a8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	2b02      	cmp	r3, #2
 800638e:	d102      	bne.n	8006396 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006390:	2301      	movs	r3, #1
 8006392:	623b      	str	r3, [r7, #32]
 8006394:	e008      	b.n	80063a8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d102      	bne.n	80063a4 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800639e:	2301      	movs	r3, #1
 80063a0:	623b      	str	r3, [r7, #32]
 80063a2:	e001      	b.n	80063a8 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80063a4:	2300      	movs	r3, #0
 80063a6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	6a3a      	ldr	r2, [r7, #32]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f003 0310 	and.w	r3, r3, #16
 80063be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80063c2:	fa02 f303 	lsl.w	r3, r2, r3
 80063c6:	43db      	mvns	r3, r3
 80063c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063ca:	4013      	ands	r3, r2
 80063cc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	791b      	ldrb	r3, [r3, #4]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d102      	bne.n	80063dc <HAL_DAC_ConfigChannel+0x1f8>
 80063d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80063da:	e000      	b.n	80063de <HAL_DAC_ConfigChannel+0x1fa>
 80063dc:	2300      	movs	r3, #0
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f003 0310 	and.w	r3, r3, #16
 80063ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063ee:	fa02 f303 	lsl.w	r3, r2, r3
 80063f2:	43db      	mvns	r3, r3
 80063f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f6:	4013      	ands	r3, r2
 80063f8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	795b      	ldrb	r3, [r3, #5]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d102      	bne.n	8006408 <HAL_DAC_ConfigChannel+0x224>
 8006402:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006406:	e000      	b.n	800640a <HAL_DAC_ConfigChannel+0x226>
 8006408:	2300      	movs	r3, #0
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006412:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006416:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b02      	cmp	r3, #2
 800641e:	d114      	bne.n	800644a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006420:	f002 ff7a 	bl	8009318 <HAL_RCC_GetHCLKFreq>
 8006424:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	4a48      	ldr	r2, [pc, #288]	@ (800654c <HAL_DAC_ConfigChannel+0x368>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d904      	bls.n	8006438 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800642e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006430:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006434:	627b      	str	r3, [r7, #36]	@ 0x24
 8006436:	e00f      	b.n	8006458 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	4a45      	ldr	r2, [pc, #276]	@ (8006550 <HAL_DAC_ConfigChannel+0x36c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d90a      	bls.n	8006456 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006442:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006446:	627b      	str	r3, [r7, #36]	@ 0x24
 8006448:	e006      	b.n	8006458 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006450:	4313      	orrs	r3, r2
 8006452:	627b      	str	r3, [r7, #36]	@ 0x24
 8006454:	e000      	b.n	8006458 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8006456:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f003 0310 	and.w	r3, r3, #16
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	fa02 f303 	lsl.w	r3, r2, r3
 8006464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006466:	4313      	orrs	r3, r2
 8006468:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006470:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6819      	ldr	r1, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f003 0310 	and.w	r3, r3, #16
 800647e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	43da      	mvns	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	400a      	ands	r2, r1
 800648e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f003 0310 	and.w	r3, r3, #16
 800649e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80064a2:	fa02 f303 	lsl.w	r3, r2, r3
 80064a6:	43db      	mvns	r3, r3
 80064a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064aa:	4013      	ands	r3, r2
 80064ac:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f003 0310 	and.w	r3, r3, #16
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	fa02 f303 	lsl.w	r3, r2, r3
 80064c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064c2:	4313      	orrs	r3, r2
 80064c4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064cc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6819      	ldr	r1, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f003 0310 	and.w	r3, r3, #16
 80064da:	22c0      	movs	r2, #192	@ 0xc0
 80064dc:	fa02 f303 	lsl.w	r3, r2, r3
 80064e0:	43da      	mvns	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	400a      	ands	r2, r1
 80064e8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	089b      	lsrs	r3, r3, #2
 80064f0:	f003 030f 	and.w	r3, r3, #15
 80064f4:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	089b      	lsrs	r3, r3, #2
 80064fc:	021b      	lsls	r3, r3, #8
 80064fe:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	4313      	orrs	r3, r2
 8006506:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f003 0310 	and.w	r3, r3, #16
 8006514:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8006518:	fa01 f303 	lsl.w	r3, r1, r3
 800651c:	43db      	mvns	r3, r3
 800651e:	ea02 0103 	and.w	r1, r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f003 0310 	and.w	r3, r3, #16
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	409a      	lsls	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2201      	movs	r2, #1
 8006538:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006540:	7ffb      	ldrb	r3, [r7, #31]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3728      	adds	r7, #40	@ 0x28
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	09896800 	.word	0x09896800
 8006550:	04c4b400 	.word	0x04c4b400

08006554 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e08d      	b.n	8006696 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	4b47      	ldr	r3, [pc, #284]	@ (80066a0 <HAL_DMA_Init+0x138>)
 8006582:	429a      	cmp	r2, r3
 8006584:	d80f      	bhi.n	80065a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	4b45      	ldr	r3, [pc, #276]	@ (80066a4 <HAL_DMA_Init+0x13c>)
 800658e:	4413      	add	r3, r2
 8006590:	4a45      	ldr	r2, [pc, #276]	@ (80066a8 <HAL_DMA_Init+0x140>)
 8006592:	fba2 2303 	umull	r2, r3, r2, r3
 8006596:	091b      	lsrs	r3, r3, #4
 8006598:	009a      	lsls	r2, r3, #2
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a42      	ldr	r2, [pc, #264]	@ (80066ac <HAL_DMA_Init+0x144>)
 80065a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80065a4:	e00e      	b.n	80065c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	4b40      	ldr	r3, [pc, #256]	@ (80066b0 <HAL_DMA_Init+0x148>)
 80065ae:	4413      	add	r3, r2
 80065b0:	4a3d      	ldr	r2, [pc, #244]	@ (80066a8 <HAL_DMA_Init+0x140>)
 80065b2:	fba2 2303 	umull	r2, r3, r2, r3
 80065b6:	091b      	lsrs	r3, r3, #4
 80065b8:	009a      	lsls	r2, r3, #2
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a3c      	ldr	r2, [pc, #240]	@ (80066b4 <HAL_DMA_Init+0x14c>)
 80065c2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80065da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80065e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f9b6 	bl	8006988 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006624:	d102      	bne.n	800662c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006640:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d010      	beq.n	800666c <HAL_DMA_Init+0x104>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	2b04      	cmp	r3, #4
 8006650:	d80c      	bhi.n	800666c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f9d6 	bl	8006a04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800665c:	2200      	movs	r2, #0
 800665e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006668:	605a      	str	r2, [r3, #4]
 800666a:	e008      	b.n	800667e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	40020407 	.word	0x40020407
 80066a4:	bffdfff8 	.word	0xbffdfff8
 80066a8:	cccccccd 	.word	0xcccccccd
 80066ac:	40020000 	.word	0x40020000
 80066b0:	bffdfbf8 	.word	0xbffdfbf8
 80066b4:	40020400 	.word	0x40020400

080066b8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d101      	bne.n	80066d8 <HAL_DMA_Start_IT+0x20>
 80066d4:	2302      	movs	r3, #2
 80066d6:	e066      	b.n	80067a6 <HAL_DMA_Start_IT+0xee>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d155      	bne.n	8006798 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2202      	movs	r2, #2
 80066f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 0201 	bic.w	r2, r2, #1
 8006708:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	68b9      	ldr	r1, [r7, #8]
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f000 f8fb 	bl	800690c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671a:	2b00      	cmp	r3, #0
 800671c:	d008      	beq.n	8006730 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f042 020e 	orr.w	r2, r2, #14
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	e00f      	b.n	8006750 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0204 	bic.w	r2, r2, #4
 800673e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 020a 	orr.w	r2, r2, #10
 800674e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d007      	beq.n	800676e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006768:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800676c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006772:	2b00      	cmp	r3, #0
 8006774:	d007      	beq.n	8006786 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006780:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006784:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f042 0201 	orr.w	r2, r2, #1
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	e005      	b.n	80067a4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80067a0:	2302      	movs	r3, #2
 80067a2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80067a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b084      	sub	sp, #16
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ca:	f003 031f 	and.w	r3, r3, #31
 80067ce:	2204      	movs	r2, #4
 80067d0:	409a      	lsls	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4013      	ands	r3, r2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d026      	beq.n	8006828 <HAL_DMA_IRQHandler+0x7a>
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d021      	beq.n	8006828 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d107      	bne.n	8006802 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0204 	bic.w	r2, r2, #4
 8006800:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006806:	f003 021f 	and.w	r2, r3, #31
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680e:	2104      	movs	r1, #4
 8006810:	fa01 f202 	lsl.w	r2, r1, r2
 8006814:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800681a:	2b00      	cmp	r3, #0
 800681c:	d071      	beq.n	8006902 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006826:	e06c      	b.n	8006902 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800682c:	f003 031f 	and.w	r3, r3, #31
 8006830:	2202      	movs	r2, #2
 8006832:	409a      	lsls	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4013      	ands	r3, r2
 8006838:	2b00      	cmp	r3, #0
 800683a:	d02e      	beq.n	800689a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d029      	beq.n	800689a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0320 	and.w	r3, r3, #32
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10b      	bne.n	800686c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 020a 	bic.w	r2, r2, #10
 8006862:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006870:	f003 021f 	and.w	r2, r3, #31
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006878:	2102      	movs	r1, #2
 800687a:	fa01 f202 	lsl.w	r2, r1, r2
 800687e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688c:	2b00      	cmp	r3, #0
 800688e:	d038      	beq.n	8006902 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006898:	e033      	b.n	8006902 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800689e:	f003 031f 	and.w	r3, r3, #31
 80068a2:	2208      	movs	r2, #8
 80068a4:	409a      	lsls	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4013      	ands	r3, r2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d02a      	beq.n	8006904 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f003 0308 	and.w	r3, r3, #8
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d025      	beq.n	8006904 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 020e 	bic.w	r2, r2, #14
 80068c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068cc:	f003 021f 	and.w	r2, r3, #31
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d4:	2101      	movs	r1, #1
 80068d6:	fa01 f202 	lsl.w	r2, r1, r2
 80068da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d004      	beq.n	8006904 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006902:	bf00      	nop
 8006904:	bf00      	nop
}
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
 8006918:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006922:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006928:	2b00      	cmp	r3, #0
 800692a:	d004      	beq.n	8006936 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006934:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800693a:	f003 021f 	and.w	r2, r3, #31
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006942:	2101      	movs	r1, #1
 8006944:	fa01 f202 	lsl.w	r2, r1, r2
 8006948:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	2b10      	cmp	r3, #16
 8006958:	d108      	bne.n	800696c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800696a:	e007      	b.n	800697c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	60da      	str	r2, [r3, #12]
}
 800697c:	bf00      	nop
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006988:	b480      	push	{r7}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	461a      	mov	r2, r3
 8006996:	4b16      	ldr	r3, [pc, #88]	@ (80069f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006998:	429a      	cmp	r2, r3
 800699a:	d802      	bhi.n	80069a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800699c:	4b15      	ldr	r3, [pc, #84]	@ (80069f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800699e:	617b      	str	r3, [r7, #20]
 80069a0:	e001      	b.n	80069a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80069a2:	4b15      	ldr	r3, [pc, #84]	@ (80069f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80069a4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	3b08      	subs	r3, #8
 80069b2:	4a12      	ldr	r2, [pc, #72]	@ (80069fc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80069b4:	fba2 2303 	umull	r2, r3, r2, r3
 80069b8:	091b      	lsrs	r3, r3, #4
 80069ba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069c0:	089b      	lsrs	r3, r3, #2
 80069c2:	009a      	lsls	r2, r3, #2
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	4413      	add	r3, r2
 80069c8:	461a      	mov	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a0b      	ldr	r2, [pc, #44]	@ (8006a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80069d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f003 031f 	and.w	r3, r3, #31
 80069da:	2201      	movs	r2, #1
 80069dc:	409a      	lsls	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80069e2:	bf00      	nop
 80069e4:	371c      	adds	r7, #28
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	40020407 	.word	0x40020407
 80069f4:	40020800 	.word	0x40020800
 80069f8:	40020820 	.word	0x40020820
 80069fc:	cccccccd 	.word	0xcccccccd
 8006a00:	40020880 	.word	0x40020880

08006a04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	4b0b      	ldr	r3, [pc, #44]	@ (8006a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006a18:	4413      	add	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a08      	ldr	r2, [pc, #32]	@ (8006a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006a26:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	f003 031f 	and.w	r3, r3, #31
 8006a30:	2201      	movs	r2, #1
 8006a32:	409a      	lsls	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006a38:	bf00      	nop
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	1000823f 	.word	0x1000823f
 8006a48:	40020940 	.word	0x40020940

08006a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b087      	sub	sp, #28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006a5a:	e15a      	b.n	8006d12 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	2101      	movs	r1, #1
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	fa01 f303 	lsl.w	r3, r1, r3
 8006a68:	4013      	ands	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 814c 	beq.w	8006d0c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f003 0303 	and.w	r3, r3, #3
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d005      	beq.n	8006a8c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d130      	bne.n	8006aee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	2203      	movs	r2, #3
 8006a98:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	68da      	ldr	r2, [r3, #12]
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aca:	43db      	mvns	r3, r3
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	091b      	lsrs	r3, r3, #4
 8006ad8:	f003 0201 	and.w	r2, r3, #1
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d017      	beq.n	8006b2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	2203      	movs	r2, #3
 8006b06:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0a:	43db      	mvns	r3, r3
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f003 0303 	and.w	r3, r3, #3
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d123      	bne.n	8006b7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	08da      	lsrs	r2, r3, #3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	3208      	adds	r2, #8
 8006b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	220f      	movs	r2, #15
 8006b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b52:	43db      	mvns	r3, r3
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	4013      	ands	r3, r2
 8006b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	691a      	ldr	r2, [r3, #16]
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f003 0307 	and.w	r3, r3, #7
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	08da      	lsrs	r2, r3, #3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3208      	adds	r2, #8
 8006b78:	6939      	ldr	r1, [r7, #16]
 8006b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	2203      	movs	r2, #3
 8006b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8e:	43db      	mvns	r3, r3
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	4013      	ands	r3, r2
 8006b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f003 0203 	and.w	r2, r3, #3
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 80a6 	beq.w	8006d0c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bc0:	4b5b      	ldr	r3, [pc, #364]	@ (8006d30 <HAL_GPIO_Init+0x2e4>)
 8006bc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bc4:	4a5a      	ldr	r2, [pc, #360]	@ (8006d30 <HAL_GPIO_Init+0x2e4>)
 8006bc6:	f043 0301 	orr.w	r3, r3, #1
 8006bca:	6613      	str	r3, [r2, #96]	@ 0x60
 8006bcc:	4b58      	ldr	r3, [pc, #352]	@ (8006d30 <HAL_GPIO_Init+0x2e4>)
 8006bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	60bb      	str	r3, [r7, #8]
 8006bd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006bd8:	4a56      	ldr	r2, [pc, #344]	@ (8006d34 <HAL_GPIO_Init+0x2e8>)
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	089b      	lsrs	r3, r3, #2
 8006bde:	3302      	adds	r3, #2
 8006be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f003 0303 	and.w	r3, r3, #3
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	220f      	movs	r2, #15
 8006bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf4:	43db      	mvns	r3, r3
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006c02:	d01f      	beq.n	8006c44 <HAL_GPIO_Init+0x1f8>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a4c      	ldr	r2, [pc, #304]	@ (8006d38 <HAL_GPIO_Init+0x2ec>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d019      	beq.n	8006c40 <HAL_GPIO_Init+0x1f4>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a4b      	ldr	r2, [pc, #300]	@ (8006d3c <HAL_GPIO_Init+0x2f0>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d013      	beq.n	8006c3c <HAL_GPIO_Init+0x1f0>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a4a      	ldr	r2, [pc, #296]	@ (8006d40 <HAL_GPIO_Init+0x2f4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d00d      	beq.n	8006c38 <HAL_GPIO_Init+0x1ec>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a49      	ldr	r2, [pc, #292]	@ (8006d44 <HAL_GPIO_Init+0x2f8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d007      	beq.n	8006c34 <HAL_GPIO_Init+0x1e8>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a48      	ldr	r2, [pc, #288]	@ (8006d48 <HAL_GPIO_Init+0x2fc>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d101      	bne.n	8006c30 <HAL_GPIO_Init+0x1e4>
 8006c2c:	2305      	movs	r3, #5
 8006c2e:	e00a      	b.n	8006c46 <HAL_GPIO_Init+0x1fa>
 8006c30:	2306      	movs	r3, #6
 8006c32:	e008      	b.n	8006c46 <HAL_GPIO_Init+0x1fa>
 8006c34:	2304      	movs	r3, #4
 8006c36:	e006      	b.n	8006c46 <HAL_GPIO_Init+0x1fa>
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e004      	b.n	8006c46 <HAL_GPIO_Init+0x1fa>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e002      	b.n	8006c46 <HAL_GPIO_Init+0x1fa>
 8006c40:	2301      	movs	r3, #1
 8006c42:	e000      	b.n	8006c46 <HAL_GPIO_Init+0x1fa>
 8006c44:	2300      	movs	r3, #0
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	f002 0203 	and.w	r2, r2, #3
 8006c4c:	0092      	lsls	r2, r2, #2
 8006c4e:	4093      	lsls	r3, r2
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c56:	4937      	ldr	r1, [pc, #220]	@ (8006d34 <HAL_GPIO_Init+0x2e8>)
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	089b      	lsrs	r3, r3, #2
 8006c5c:	3302      	adds	r3, #2
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c64:	4b39      	ldr	r3, [pc, #228]	@ (8006d4c <HAL_GPIO_Init+0x300>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	43db      	mvns	r3, r3
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	4013      	ands	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006c88:	4a30      	ldr	r2, [pc, #192]	@ (8006d4c <HAL_GPIO_Init+0x300>)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8006d4c <HAL_GPIO_Init+0x300>)
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	43db      	mvns	r3, r3
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006cb2:	4a26      	ldr	r2, [pc, #152]	@ (8006d4c <HAL_GPIO_Init+0x300>)
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006cb8:	4b24      	ldr	r3, [pc, #144]	@ (8006d4c <HAL_GPIO_Init+0x300>)
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	43db      	mvns	r3, r3
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8006d4c <HAL_GPIO_Init+0x300>)
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8006d4c <HAL_GPIO_Init+0x300>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	43db      	mvns	r3, r3
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006d06:	4a11      	ldr	r2, [pc, #68]	@ (8006d4c <HAL_GPIO_Init+0x300>)
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	fa22 f303 	lsr.w	r3, r2, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f47f ae9d 	bne.w	8006a5c <HAL_GPIO_Init+0x10>
  }
}
 8006d22:	bf00      	nop
 8006d24:	bf00      	nop
 8006d26:	371c      	adds	r7, #28
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	40021000 	.word	0x40021000
 8006d34:	40010000 	.word	0x40010000
 8006d38:	48000400 	.word	0x48000400
 8006d3c:	48000800 	.word	0x48000800
 8006d40:	48000c00 	.word	0x48000c00
 8006d44:	48001000 	.word	0x48001000
 8006d48:	48001400 	.word	0x48001400
 8006d4c:	40010400 	.word	0x40010400

08006d50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691a      	ldr	r2, [r3, #16]
 8006d60:	887b      	ldrh	r3, [r7, #2]
 8006d62:	4013      	ands	r3, r2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	73fb      	strb	r3, [r7, #15]
 8006d6c:	e001      	b.n	8006d72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	460b      	mov	r3, r1
 8006d8a:	807b      	strh	r3, [r7, #2]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d90:	787b      	ldrb	r3, [r7, #1]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006d96:	887a      	ldrh	r2, [r7, #2]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006d9c:	e002      	b.n	8006da4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006d9e:	887a      	ldrh	r2, [r7, #2]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	460b      	mov	r3, r1
 8006dba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	695b      	ldr	r3, [r3, #20]
 8006dc0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006dc2:	887a      	ldrh	r2, [r7, #2]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	041a      	lsls	r2, r3, #16
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	43d9      	mvns	r1, r3
 8006dce:	887b      	ldrh	r3, [r7, #2]
 8006dd0:	400b      	ands	r3, r1
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	619a      	str	r2, [r3, #24]
}
 8006dd8:	bf00      	nop
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e0c0      	b.n	8006f78 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d106      	bne.n	8006e10 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f009 fa22 	bl	8010254 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2203      	movs	r2, #3
 8006e14:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f005 f856 	bl	800bece <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e22:	2300      	movs	r3, #0
 8006e24:	73fb      	strb	r3, [r7, #15]
 8006e26:	e03e      	b.n	8006ea6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006e28:	7bfa      	ldrb	r2, [r7, #15]
 8006e2a:	6879      	ldr	r1, [r7, #4]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	00db      	lsls	r3, r3, #3
 8006e34:	440b      	add	r3, r1
 8006e36:	3311      	adds	r3, #17
 8006e38:	2201      	movs	r2, #1
 8006e3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006e3c:	7bfa      	ldrb	r2, [r7, #15]
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	4613      	mov	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	440b      	add	r3, r1
 8006e4a:	3310      	adds	r3, #16
 8006e4c:	7bfa      	ldrb	r2, [r7, #15]
 8006e4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006e50:	7bfa      	ldrb	r2, [r7, #15]
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	4613      	mov	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	00db      	lsls	r3, r3, #3
 8006e5c:	440b      	add	r3, r1
 8006e5e:	3313      	adds	r3, #19
 8006e60:	2200      	movs	r2, #0
 8006e62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006e64:	7bfa      	ldrb	r2, [r7, #15]
 8006e66:	6879      	ldr	r1, [r7, #4]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	00db      	lsls	r3, r3, #3
 8006e70:	440b      	add	r3, r1
 8006e72:	3320      	adds	r3, #32
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006e78:	7bfa      	ldrb	r2, [r7, #15]
 8006e7a:	6879      	ldr	r1, [r7, #4]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	440b      	add	r3, r1
 8006e86:	3324      	adds	r3, #36	@ 0x24
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
 8006e8e:	6879      	ldr	r1, [r7, #4]
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	4613      	mov	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	00db      	lsls	r3, r3, #3
 8006e9a:	440b      	add	r3, r1
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	73fb      	strb	r3, [r7, #15]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	791b      	ldrb	r3, [r3, #4]
 8006eaa:	7bfa      	ldrb	r2, [r7, #15]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d3bb      	bcc.n	8006e28 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	73fb      	strb	r3, [r7, #15]
 8006eb4:	e044      	b.n	8006f40 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006eb6:	7bfa      	ldrb	r2, [r7, #15]
 8006eb8:	6879      	ldr	r1, [r7, #4]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	00db      	lsls	r3, r3, #3
 8006ec2:	440b      	add	r3, r1
 8006ec4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006ec8:	2200      	movs	r2, #0
 8006eca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006ecc:	7bfa      	ldrb	r2, [r7, #15]
 8006ece:	6879      	ldr	r1, [r7, #4]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4413      	add	r3, r2
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	440b      	add	r3, r1
 8006eda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006ede:	7bfa      	ldrb	r2, [r7, #15]
 8006ee0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006ee2:	7bfa      	ldrb	r2, [r7, #15]
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	00db      	lsls	r3, r3, #3
 8006eee:	440b      	add	r3, r1
 8006ef0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006ef8:	7bfa      	ldrb	r2, [r7, #15]
 8006efa:	6879      	ldr	r1, [r7, #4]
 8006efc:	4613      	mov	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	00db      	lsls	r3, r3, #3
 8006f04:	440b      	add	r3, r1
 8006f06:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006f0e:	7bfa      	ldrb	r2, [r7, #15]
 8006f10:	6879      	ldr	r1, [r7, #4]
 8006f12:	4613      	mov	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	00db      	lsls	r3, r3, #3
 8006f1a:	440b      	add	r3, r1
 8006f1c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006f24:	7bfa      	ldrb	r2, [r7, #15]
 8006f26:	6879      	ldr	r1, [r7, #4]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	00db      	lsls	r3, r3, #3
 8006f30:	440b      	add	r3, r1
 8006f32:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006f36:	2200      	movs	r2, #0
 8006f38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	73fb      	strb	r3, [r7, #15]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	791b      	ldrb	r3, [r3, #4]
 8006f44:	7bfa      	ldrb	r2, [r7, #15]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d3b5      	bcc.n	8006eb6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6818      	ldr	r0, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3304      	adds	r3, #4
 8006f52:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006f56:	f004 ffd5 	bl	800bf04 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	7a9b      	ldrb	r3, [r3, #10]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d102      	bne.n	8006f76 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f001 fc42 	bl	80087fa <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d101      	bne.n	8006f96 <HAL_PCD_Start+0x16>
 8006f92:	2302      	movs	r3, #2
 8006f94:	e012      	b.n	8006fbc <HAL_PCD_Start+0x3c>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f004 ff7c 	bl	800bea0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f007 fa3d 	bl	800e42c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f007 fa42 	bl	800e45a <USB_ReadInterrupts>
 8006fd6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fb06 	bl	80075f4 <PCD_EP_ISR_Handler>

    return;
 8006fe8:	e110      	b.n	800720c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d013      	beq.n	800701c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007006:	b292      	uxth	r2, r2
 8007008:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f009 f9b2 	bl	8010376 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007012:	2100      	movs	r1, #0
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f8fc 	bl	8007212 <HAL_PCD_SetAddress>

    return;
 800701a:	e0f7      	b.n	800720c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00c      	beq.n	8007040 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800702e:	b29a      	uxth	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007038:	b292      	uxth	r2, r2
 800703a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800703e:	e0e5      	b.n	800720c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00c      	beq.n	8007064 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007052:	b29a      	uxth	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800705c:	b292      	uxth	r2, r2
 800705e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007062:	e0d3      	b.n	800720c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d034      	beq.n	80070d8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007076:	b29a      	uxth	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 0204 	bic.w	r2, r2, #4
 8007080:	b292      	uxth	r2, r2
 8007082:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800708e:	b29a      	uxth	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 0208 	bic.w	r2, r2, #8
 8007098:	b292      	uxth	r2, r2
 800709a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d107      	bne.n	80070b8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80070b0:	2100      	movs	r1, #0
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f009 fb52 	bl	801075c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f009 f995 	bl	80103e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80070d0:	b292      	uxth	r2, r2
 80070d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80070d6:	e099      	b.n	800720c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d027      	beq.n	8007132 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f042 0208 	orr.w	r2, r2, #8
 80070f4:	b292      	uxth	r2, r2
 80070f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007102:	b29a      	uxth	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800710c:	b292      	uxth	r2, r2
 800710e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800711a:	b29a      	uxth	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f042 0204 	orr.w	r2, r2, #4
 8007124:	b292      	uxth	r2, r2
 8007126:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f009 f942 	bl	80103b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007130:	e06c      	b.n	800720c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007138:	2b00      	cmp	r3, #0
 800713a:	d040      	beq.n	80071be <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007144:	b29a      	uxth	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800714e:	b292      	uxth	r2, r2
 8007150:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800715a:	2b00      	cmp	r3, #0
 800715c:	d12b      	bne.n	80071b6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007166:	b29a      	uxth	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f042 0204 	orr.w	r2, r2, #4
 8007170:	b292      	uxth	r2, r2
 8007172:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800717e:	b29a      	uxth	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f042 0208 	orr.w	r2, r2, #8
 8007188:	b292      	uxth	r2, r2
 800718a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800719e:	b29b      	uxth	r3, r3
 80071a0:	089b      	lsrs	r3, r3, #2
 80071a2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80071ac:	2101      	movs	r1, #1
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f009 fad4 	bl	801075c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80071b4:	e02a      	b.n	800720c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f009 f8fc 	bl	80103b4 <HAL_PCD_SuspendCallback>
    return;
 80071bc:	e026      	b.n	800720c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00f      	beq.n	80071e8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80071da:	b292      	uxth	r2, r2
 80071dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f009 f8ba 	bl	801035a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80071e6:	e011      	b.n	800720c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00c      	beq.n	800720c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007204:	b292      	uxth	r2, r2
 8007206:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800720a:	bf00      	nop
  }
}
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b082      	sub	sp, #8
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	460b      	mov	r3, r1
 800721c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007224:	2b01      	cmp	r3, #1
 8007226:	d101      	bne.n	800722c <HAL_PCD_SetAddress+0x1a>
 8007228:	2302      	movs	r3, #2
 800722a:	e012      	b.n	8007252 <HAL_PCD_SetAddress+0x40>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	78fa      	ldrb	r2, [r7, #3]
 8007238:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	78fa      	ldrb	r2, [r7, #3]
 8007240:	4611      	mov	r1, r2
 8007242:	4618      	mov	r0, r3
 8007244:	f007 f8de 	bl	800e404 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b084      	sub	sp, #16
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	4608      	mov	r0, r1
 8007264:	4611      	mov	r1, r2
 8007266:	461a      	mov	r2, r3
 8007268:	4603      	mov	r3, r0
 800726a:	70fb      	strb	r3, [r7, #3]
 800726c:	460b      	mov	r3, r1
 800726e:	803b      	strh	r3, [r7, #0]
 8007270:	4613      	mov	r3, r2
 8007272:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800727c:	2b00      	cmp	r3, #0
 800727e:	da0e      	bge.n	800729e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007280:	78fb      	ldrb	r3, [r7, #3]
 8007282:	f003 0207 	and.w	r2, r3, #7
 8007286:	4613      	mov	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	00db      	lsls	r3, r3, #3
 800728e:	3310      	adds	r3, #16
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	4413      	add	r3, r2
 8007294:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2201      	movs	r2, #1
 800729a:	705a      	strb	r2, [r3, #1]
 800729c:	e00e      	b.n	80072bc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800729e:	78fb      	ldrb	r3, [r7, #3]
 80072a0:	f003 0207 	and.w	r2, r3, #7
 80072a4:	4613      	mov	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	4413      	add	r3, r2
 80072b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80072bc:	78fb      	ldrb	r3, [r7, #3]
 80072be:	f003 0307 	and.w	r3, r3, #7
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80072c8:	883b      	ldrh	r3, [r7, #0]
 80072ca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	78ba      	ldrb	r2, [r7, #2]
 80072d6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80072d8:	78bb      	ldrb	r3, [r7, #2]
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d102      	bne.n	80072e4 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d101      	bne.n	80072f2 <HAL_PCD_EP_Open+0x98>
 80072ee:	2302      	movs	r3, #2
 80072f0:	e00e      	b.n	8007310 <HAL_PCD_EP_Open+0xb6>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68f9      	ldr	r1, [r7, #12]
 8007300:	4618      	mov	r0, r3
 8007302:	f004 fe1d 	bl	800bf40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800730e:	7afb      	ldrb	r3, [r7, #11]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007324:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007328:	2b00      	cmp	r3, #0
 800732a:	da0e      	bge.n	800734a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800732c:	78fb      	ldrb	r3, [r7, #3]
 800732e:	f003 0207 	and.w	r2, r3, #7
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	00db      	lsls	r3, r3, #3
 800733a:	3310      	adds	r3, #16
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	4413      	add	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2201      	movs	r2, #1
 8007346:	705a      	strb	r2, [r3, #1]
 8007348:	e00e      	b.n	8007368 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800734a:	78fb      	ldrb	r3, [r7, #3]
 800734c:	f003 0207 	and.w	r2, r3, #7
 8007350:	4613      	mov	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	00db      	lsls	r3, r3, #3
 8007358:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	4413      	add	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007368:	78fb      	ldrb	r3, [r7, #3]
 800736a:	f003 0307 	and.w	r3, r3, #7
 800736e:	b2da      	uxtb	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800737a:	2b01      	cmp	r3, #1
 800737c:	d101      	bne.n	8007382 <HAL_PCD_EP_Close+0x6a>
 800737e:	2302      	movs	r3, #2
 8007380:	e00e      	b.n	80073a0 <HAL_PCD_EP_Close+0x88>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68f9      	ldr	r1, [r7, #12]
 8007390:	4618      	mov	r0, r3
 8007392:	f005 f999 	bl	800c6c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	607a      	str	r2, [r7, #4]
 80073b2:	603b      	str	r3, [r7, #0]
 80073b4:	460b      	mov	r3, r1
 80073b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80073b8:	7afb      	ldrb	r3, [r7, #11]
 80073ba:	f003 0207 	and.w	r2, r3, #7
 80073be:	4613      	mov	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	00db      	lsls	r3, r3, #3
 80073c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	4413      	add	r3, r2
 80073ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	2200      	movs	r2, #0
 80073e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2200      	movs	r2, #0
 80073e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073e8:	7afb      	ldrb	r3, [r7, #11]
 80073ea:	f003 0307 	and.w	r3, r3, #7
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6979      	ldr	r1, [r7, #20]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f005 fb51 	bl	800caa2 <USB_EPStartXfer>

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800740a:	b480      	push	{r7}
 800740c:	b083      	sub	sp, #12
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	460b      	mov	r3, r1
 8007414:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007416:	78fb      	ldrb	r3, [r7, #3]
 8007418:	f003 0207 	and.w	r2, r3, #7
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	4613      	mov	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	00db      	lsls	r3, r3, #3
 8007426:	440b      	add	r3, r1
 8007428:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800742c:	681b      	ldr	r3, [r3, #0]
}
 800742e:	4618      	mov	r0, r3
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b086      	sub	sp, #24
 800743e:	af00      	add	r7, sp, #0
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	607a      	str	r2, [r7, #4]
 8007444:	603b      	str	r3, [r7, #0]
 8007446:	460b      	mov	r3, r1
 8007448:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800744a:	7afb      	ldrb	r3, [r7, #11]
 800744c:	f003 0207 	and.w	r2, r3, #7
 8007450:	4613      	mov	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	00db      	lsls	r3, r3, #3
 8007458:	3310      	adds	r3, #16
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	4413      	add	r3, r2
 800745e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	683a      	ldr	r2, [r7, #0]
 800746a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2200      	movs	r2, #0
 800747e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	2201      	movs	r2, #1
 8007484:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007486:	7afb      	ldrb	r3, [r7, #11]
 8007488:	f003 0307 	and.w	r3, r3, #7
 800748c:	b2da      	uxtb	r2, r3
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6979      	ldr	r1, [r7, #20]
 8007498:	4618      	mov	r0, r3
 800749a:	f005 fb02 	bl	800caa2 <USB_EPStartXfer>

  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	460b      	mov	r3, r1
 80074b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	f003 0307 	and.w	r3, r3, #7
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	7912      	ldrb	r2, [r2, #4]
 80074be:	4293      	cmp	r3, r2
 80074c0:	d901      	bls.n	80074c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e03e      	b.n	8007544 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80074c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	da0e      	bge.n	80074ec <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074ce:	78fb      	ldrb	r3, [r7, #3]
 80074d0:	f003 0207 	and.w	r2, r3, #7
 80074d4:	4613      	mov	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	3310      	adds	r3, #16
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	4413      	add	r3, r2
 80074e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2201      	movs	r2, #1
 80074e8:	705a      	strb	r2, [r3, #1]
 80074ea:	e00c      	b.n	8007506 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80074ec:	78fa      	ldrb	r2, [r7, #3]
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	00db      	lsls	r3, r3, #3
 80074f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	4413      	add	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800750c:	78fb      	ldrb	r3, [r7, #3]
 800750e:	f003 0307 	and.w	r3, r3, #7
 8007512:	b2da      	uxtb	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800751e:	2b01      	cmp	r3, #1
 8007520:	d101      	bne.n	8007526 <HAL_PCD_EP_SetStall+0x7e>
 8007522:	2302      	movs	r3, #2
 8007524:	e00e      	b.n	8007544 <HAL_PCD_EP_SetStall+0x9c>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68f9      	ldr	r1, [r7, #12]
 8007534:	4618      	mov	r0, r3
 8007536:	f006 fe66 	bl	800e206 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	460b      	mov	r3, r1
 8007556:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007558:	78fb      	ldrb	r3, [r7, #3]
 800755a:	f003 030f 	and.w	r3, r3, #15
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	7912      	ldrb	r2, [r2, #4]
 8007562:	4293      	cmp	r3, r2
 8007564:	d901      	bls.n	800756a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e040      	b.n	80075ec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800756a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800756e:	2b00      	cmp	r3, #0
 8007570:	da0e      	bge.n	8007590 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007572:	78fb      	ldrb	r3, [r7, #3]
 8007574:	f003 0207 	and.w	r2, r3, #7
 8007578:	4613      	mov	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	3310      	adds	r3, #16
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	4413      	add	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2201      	movs	r2, #1
 800758c:	705a      	strb	r2, [r3, #1]
 800758e:	e00e      	b.n	80075ae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007590:	78fb      	ldrb	r3, [r7, #3]
 8007592:	f003 0207 	and.w	r2, r3, #7
 8007596:	4613      	mov	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	00db      	lsls	r3, r3, #3
 800759e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	4413      	add	r3, r2
 80075a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80075b4:	78fb      	ldrb	r3, [r7, #3]
 80075b6:	f003 0307 	and.w	r3, r3, #7
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d101      	bne.n	80075ce <HAL_PCD_EP_ClrStall+0x82>
 80075ca:	2302      	movs	r3, #2
 80075cc:	e00e      	b.n	80075ec <HAL_PCD_EP_ClrStall+0xa0>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68f9      	ldr	r1, [r7, #12]
 80075dc:	4618      	mov	r0, r3
 80075de:	f006 fe63 	bl	800e2a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b096      	sub	sp, #88	@ 0x58
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80075fc:	e3ad      	b.n	8007d5a <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007606:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800760a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800760e:	b2db      	uxtb	r3, r3
 8007610:	f003 030f 	and.w	r3, r3, #15
 8007614:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8007618:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800761c:	2b00      	cmp	r3, #0
 800761e:	f040 816f 	bne.w	8007900 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007622:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007626:	f003 0310 	and.w	r3, r3, #16
 800762a:	2b00      	cmp	r3, #0
 800762c:	d14c      	bne.n	80076c8 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	b29b      	uxth	r3, r3
 8007636:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800763a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800763e:	81fb      	strh	r3, [r7, #14]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	89fb      	ldrh	r3, [r7, #14]
 8007646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800764a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800764e:	b29b      	uxth	r3, r3
 8007650:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	3310      	adds	r3, #16
 8007656:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007660:	b29b      	uxth	r3, r3
 8007662:	461a      	mov	r2, r3
 8007664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	00db      	lsls	r3, r3, #3
 800766a:	4413      	add	r3, r2
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	6812      	ldr	r2, [r2, #0]
 8007670:	4413      	add	r3, r2
 8007672:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007676:	881b      	ldrh	r3, [r3, #0]
 8007678:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800767c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800767e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007682:	695a      	ldr	r2, [r3, #20]
 8007684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	441a      	add	r2, r3
 800768a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800768c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800768e:	2100      	movs	r1, #0
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f008 fe48 	bl	8010326 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	7b1b      	ldrb	r3, [r3, #12]
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 835c 	beq.w	8007d5a <PCD_EP_ISR_Handler+0x766>
 80076a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f040 8357 	bne.w	8007d5a <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	7b1b      	ldrb	r3, [r3, #12]
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80076b6:	b2da      	uxtb	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	731a      	strb	r2, [r3, #12]
 80076c6:	e348      	b.n	8007d5a <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80076ce:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80076da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80076de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d032      	beq.n	800774c <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	461a      	mov	r2, r3
 80076f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	00db      	lsls	r3, r3, #3
 80076f8:	4413      	add	r3, r2
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	6812      	ldr	r2, [r2, #0]
 80076fe:	4413      	add	r3, r2
 8007700:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800770a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800770c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6818      	ldr	r0, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8007718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800771a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800771c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800771e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007720:	b29b      	uxth	r3, r3
 8007722:	f006 feec 	bl	800e4fe <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	881b      	ldrh	r3, [r3, #0]
 800772c:	b29a      	uxth	r2, r3
 800772e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007732:	4013      	ands	r3, r2
 8007734:	823b      	strh	r3, [r7, #16]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	8a3a      	ldrh	r2, [r7, #16]
 800773c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007740:	b292      	uxth	r2, r2
 8007742:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f008 fdc1 	bl	80102cc <HAL_PCD_SetupStageCallback>
 800774a:	e306      	b.n	8007d5a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800774c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007750:	2b00      	cmp	r3, #0
 8007752:	f280 8302 	bge.w	8007d5a <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	b29a      	uxth	r2, r3
 800775e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007762:	4013      	ands	r3, r2
 8007764:	83fb      	strh	r3, [r7, #30]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	8bfa      	ldrh	r2, [r7, #30]
 800776c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007770:	b292      	uxth	r2, r2
 8007772:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800777c:	b29b      	uxth	r3, r3
 800777e:	461a      	mov	r2, r3
 8007780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	00db      	lsls	r3, r3, #3
 8007786:	4413      	add	r3, r2
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	6812      	ldr	r2, [r2, #0]
 800778c:	4413      	add	r3, r2
 800778e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007792:	881b      	ldrh	r3, [r3, #0]
 8007794:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800779a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800779c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800779e:	69db      	ldr	r3, [r3, #28]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d019      	beq.n	80077d8 <PCD_EP_ISR_Handler+0x1e4>
 80077a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d015      	beq.n	80077d8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6818      	ldr	r0, [r3, #0]
 80077b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077b2:	6959      	ldr	r1, [r3, #20]
 80077b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077b6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80077b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077ba:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80077bc:	b29b      	uxth	r3, r3
 80077be:	f006 fe9e 	bl	800e4fe <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80077c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077c4:	695a      	ldr	r2, [r3, #20]
 80077c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	441a      	add	r2, r3
 80077cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077ce:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80077d0:	2100      	movs	r1, #0
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f008 fd8c 	bl	80102f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80077e2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80077e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f040 82b5 	bne.w	8007d5a <PCD_EP_ISR_Handler+0x766>
 80077f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80077f4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80077f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077fc:	f000 82ad 	beq.w	8007d5a <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	61bb      	str	r3, [r7, #24]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800780e:	b29b      	uxth	r3, r3
 8007810:	461a      	mov	r2, r3
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	4413      	add	r3, r2
 8007816:	61bb      	str	r3, [r7, #24]
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800781e:	617b      	str	r3, [r7, #20]
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	b29b      	uxth	r3, r3
 8007826:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800782a:	b29a      	uxth	r2, r3
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	801a      	strh	r2, [r3, #0]
 8007830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10a      	bne.n	800784e <PCD_EP_ISR_Handler+0x25a>
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	b29b      	uxth	r3, r3
 800783e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007846:	b29a      	uxth	r2, r3
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	801a      	strh	r2, [r3, #0]
 800784c:	e039      	b.n	80078c2 <PCD_EP_ISR_Handler+0x2ce>
 800784e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	2b3e      	cmp	r3, #62	@ 0x3e
 8007854:	d818      	bhi.n	8007888 <PCD_EP_ISR_Handler+0x294>
 8007856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	085b      	lsrs	r3, r3, #1
 800785c:	647b      	str	r3, [r7, #68]	@ 0x44
 800785e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <PCD_EP_ISR_Handler+0x27c>
 800786a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800786c:	3301      	adds	r3, #1
 800786e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	881b      	ldrh	r3, [r3, #0]
 8007874:	b29a      	uxth	r2, r3
 8007876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007878:	b29b      	uxth	r3, r3
 800787a:	029b      	lsls	r3, r3, #10
 800787c:	b29b      	uxth	r3, r3
 800787e:	4313      	orrs	r3, r2
 8007880:	b29a      	uxth	r2, r3
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	801a      	strh	r2, [r3, #0]
 8007886:	e01c      	b.n	80078c2 <PCD_EP_ISR_Handler+0x2ce>
 8007888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	095b      	lsrs	r3, r3, #5
 800788e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	f003 031f 	and.w	r3, r3, #31
 8007898:	2b00      	cmp	r3, #0
 800789a:	d102      	bne.n	80078a2 <PCD_EP_ISR_Handler+0x2ae>
 800789c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800789e:	3b01      	subs	r3, #1
 80078a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	881b      	ldrh	r3, [r3, #0]
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	029b      	lsls	r3, r3, #10
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	4313      	orrs	r3, r2
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078bc:	b29a      	uxth	r2, r3
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078d2:	827b      	strh	r3, [r7, #18]
 80078d4:	8a7b      	ldrh	r3, [r7, #18]
 80078d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80078da:	827b      	strh	r3, [r7, #18]
 80078dc:	8a7b      	ldrh	r3, [r7, #18]
 80078de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80078e2:	827b      	strh	r3, [r7, #18]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	8a7b      	ldrh	r3, [r7, #18]
 80078ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	8013      	strh	r3, [r2, #0]
 80078fe:	e22c      	b.n	8007d5a <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	461a      	mov	r2, r3
 8007906:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007914:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007918:	2b00      	cmp	r3, #0
 800791a:	f280 80f6 	bge.w	8007b0a <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	881b      	ldrh	r3, [r3, #0]
 800792e:	b29a      	uxth	r2, r3
 8007930:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007934:	4013      	ands	r3, r2
 8007936:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	461a      	mov	r2, r3
 8007940:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800794c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007950:	b292      	uxth	r2, r2
 8007952:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007954:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007958:	4613      	mov	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	00db      	lsls	r3, r3, #3
 8007960:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	4413      	add	r3, r2
 8007968:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800796a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800796c:	7b1b      	ldrb	r3, [r3, #12]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d123      	bne.n	80079ba <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800797a:	b29b      	uxth	r3, r3
 800797c:	461a      	mov	r2, r3
 800797e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	00db      	lsls	r3, r3, #3
 8007984:	4413      	add	r3, r2
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	6812      	ldr	r2, [r2, #0]
 800798a:	4413      	add	r3, r2
 800798c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007996:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800799a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 808e 	beq.w	8007ac0 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6818      	ldr	r0, [r3, #0]
 80079a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079aa:	6959      	ldr	r1, [r3, #20]
 80079ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079ae:	88da      	ldrh	r2, [r3, #6]
 80079b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80079b4:	f006 fda3 	bl	800e4fe <USB_ReadPMA>
 80079b8:	e082      	b.n	8007ac0 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80079ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079bc:	78db      	ldrb	r3, [r3, #3]
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d10a      	bne.n	80079d8 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80079c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80079c6:	461a      	mov	r2, r3
 80079c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f9d3 	bl	8007d76 <HAL_PCD_EP_DB_Receive>
 80079d0:	4603      	mov	r3, r0
 80079d2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80079d6:	e073      	b.n	8007ac0 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	461a      	mov	r2, r3
 80079de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	881b      	ldrh	r3, [r3, #0]
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079f2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	441a      	add	r2, r3
 8007a04:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8007a08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	461a      	mov	r2, r3
 8007a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d022      	beq.n	8007a7c <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	461a      	mov	r2, r3
 8007a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	00db      	lsls	r3, r3, #3
 8007a48:	4413      	add	r3, r2
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	6812      	ldr	r2, [r2, #0]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a5a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8007a5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d02c      	beq.n	8007ac0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6818      	ldr	r0, [r3, #0]
 8007a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a6c:	6959      	ldr	r1, [r3, #20]
 8007a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a70:	891a      	ldrh	r2, [r3, #8]
 8007a72:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007a76:	f006 fd42 	bl	800e4fe <USB_ReadPMA>
 8007a7a:	e021      	b.n	8007ac0 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	461a      	mov	r2, r3
 8007a88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	00db      	lsls	r3, r3, #3
 8007a8e:	4413      	add	r3, r2
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	6812      	ldr	r2, [r2, #0]
 8007a94:	4413      	add	r3, r2
 8007a96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007aa0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8007aa4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d009      	beq.n	8007ac0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6818      	ldr	r0, [r3, #0]
 8007ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ab2:	6959      	ldr	r1, [r3, #20]
 8007ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ab6:	895a      	ldrh	r2, [r3, #10]
 8007ab8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007abc:	f006 fd1f 	bl	800e4fe <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ac2:	69da      	ldr	r2, [r3, #28]
 8007ac4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007ac8:	441a      	add	r2, r3
 8007aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007acc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ad0:	695a      	ldr	r2, [r3, #20]
 8007ad2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007ad6:	441a      	add	r2, r3
 8007ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ada:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d005      	beq.n	8007af0 <PCD_EP_ISR_Handler+0x4fc>
 8007ae4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8007ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d206      	bcs.n	8007afe <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f008 fbfa 	bl	80102f0 <HAL_PCD_DataOutStageCallback>
 8007afc:	e005      	b.n	8007b0a <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b04:	4618      	mov	r0, r3
 8007b06:	f004 ffcc 	bl	800caa2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007b0a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 8121 	beq.w	8007d5a <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8007b18:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	00db      	lsls	r3, r3, #3
 8007b24:	3310      	adds	r3, #16
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	4413      	add	r3, r2
 8007b2a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	461a      	mov	r2, r3
 8007b32:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b46:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	441a      	add	r2, r3
 8007b58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b6a:	78db      	ldrb	r3, [r3, #3]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	f040 80a2 	bne.w	8007cb6 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8007b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b74:	2200      	movs	r2, #0
 8007b76:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b7a:	7b1b      	ldrb	r3, [r3, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 8093 	beq.w	8007ca8 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007b82:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d046      	beq.n	8007c1c <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b90:	785b      	ldrb	r3, [r3, #1]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d126      	bne.n	8007be4 <PCD_EP_ISR_Handler+0x5f0>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007baa:	4413      	add	r3, r2
 8007bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	00da      	lsls	r2, r3, #3
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007bbc:	623b      	str	r3, [r7, #32]
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	801a      	strh	r2, [r3, #0]
 8007bce:	6a3b      	ldr	r3, [r7, #32]
 8007bd0:	881b      	ldrh	r3, [r3, #0]
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	801a      	strh	r2, [r3, #0]
 8007be2:	e061      	b.n	8007ca8 <PCD_EP_ISR_Handler+0x6b4>
 8007be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007be6:	785b      	ldrb	r3, [r3, #1]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d15d      	bne.n	8007ca8 <PCD_EP_ISR_Handler+0x6b4>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c00:	4413      	add	r3, r2
 8007c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	00da      	lsls	r2, r3, #3
 8007c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c16:	2200      	movs	r2, #0
 8007c18:	801a      	strh	r2, [r3, #0]
 8007c1a:	e045      	b.n	8007ca8 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c24:	785b      	ldrb	r3, [r3, #1]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d126      	bne.n	8007c78 <PCD_EP_ISR_Handler+0x684>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c3e:	4413      	add	r3, r2
 8007c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	00da      	lsls	r2, r3, #3
 8007c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c50:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c60:	801a      	strh	r2, [r3, #0]
 8007c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c74:	801a      	strh	r2, [r3, #0]
 8007c76:	e017      	b.n	8007ca8 <PCD_EP_ISR_Handler+0x6b4>
 8007c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c7a:	785b      	ldrb	r3, [r3, #1]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d113      	bne.n	8007ca8 <PCD_EP_ISR_Handler+0x6b4>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c8e:	4413      	add	r3, r2
 8007c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	00da      	lsls	r2, r3, #3
 8007c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f008 fb39 	bl	8010326 <HAL_PCD_DataInStageCallback>
 8007cb4:	e051      	b.n	8007d5a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007cb6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d144      	bne.n	8007d4c <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	461a      	mov	r2, r3
 8007cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	00db      	lsls	r3, r3, #3
 8007cd4:	4413      	add	r3, r2
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	6812      	ldr	r2, [r2, #0]
 8007cda:	4413      	add	r3, r2
 8007cdc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ce6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8007cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cec:	699a      	ldr	r2, [r3, #24]
 8007cee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d907      	bls.n	8007d06 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8007cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cf8:	699a      	ldr	r2, [r3, #24]
 8007cfa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007cfe:	1ad2      	subs	r2, r2, r3
 8007d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d02:	619a      	str	r2, [r3, #24]
 8007d04:	e002      	b.n	8007d0c <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8007d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d08:	2200      	movs	r2, #0
 8007d0a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007d0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d106      	bne.n	8007d22 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f008 fb03 	bl	8010326 <HAL_PCD_DataInStageCallback>
 8007d20:	e01b      	b.n	8007d5a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d24:	695a      	ldr	r2, [r3, #20]
 8007d26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007d2a:	441a      	add	r2, r3
 8007d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d2e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d32:	69da      	ldr	r2, [r3, #28]
 8007d34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007d38:	441a      	add	r2, r3
 8007d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d3c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d44:	4618      	mov	r0, r3
 8007d46:	f004 feac 	bl	800caa2 <USB_EPStartXfer>
 8007d4a:	e006      	b.n	8007d5a <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007d4c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007d50:	461a      	mov	r2, r3
 8007d52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f917 	bl	8007f88 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	b21b      	sxth	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f6ff ac49 	blt.w	80075fe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3758      	adds	r7, #88	@ 0x58
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b088      	sub	sp, #32
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	60f8      	str	r0, [r7, #12]
 8007d7e:	60b9      	str	r1, [r7, #8]
 8007d80:	4613      	mov	r3, r2
 8007d82:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007d84:	88fb      	ldrh	r3, [r7, #6]
 8007d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d07c      	beq.n	8007e88 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	461a      	mov	r2, r3
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	4413      	add	r3, r2
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	6812      	ldr	r2, [r2, #0]
 8007da6:	4413      	add	r3, r2
 8007da8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007db2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	699a      	ldr	r2, [r3, #24]
 8007db8:	8b7b      	ldrh	r3, [r7, #26]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d306      	bcc.n	8007dcc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	699a      	ldr	r2, [r3, #24]
 8007dc2:	8b7b      	ldrh	r3, [r7, #26]
 8007dc4:	1ad2      	subs	r2, r2, r3
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	619a      	str	r2, [r3, #24]
 8007dca:	e002      	b.n	8007dd2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d123      	bne.n	8007e22 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	881b      	ldrh	r3, [r3, #0]
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007df0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007df4:	833b      	strh	r3, [r7, #24]
 8007df6:	8b3b      	ldrh	r3, [r7, #24]
 8007df8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007dfc:	833b      	strh	r3, [r7, #24]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	441a      	add	r2, r3
 8007e0c:	8b3b      	ldrh	r3, [r7, #24]
 8007e0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007e22:	88fb      	ldrh	r3, [r7, #6]
 8007e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d01f      	beq.n	8007e6c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	461a      	mov	r2, r3
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e46:	82fb      	strh	r3, [r7, #22]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	441a      	add	r2, r3
 8007e56:	8afb      	ldrh	r3, [r7, #22]
 8007e58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e64:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007e6c:	8b7b      	ldrh	r3, [r7, #26]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f000 8085 	beq.w	8007f7e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6818      	ldr	r0, [r3, #0]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	6959      	ldr	r1, [r3, #20]
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	891a      	ldrh	r2, [r3, #8]
 8007e80:	8b7b      	ldrh	r3, [r7, #26]
 8007e82:	f006 fb3c 	bl	800e4fe <USB_ReadPMA>
 8007e86:	e07a      	b.n	8007f7e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	461a      	mov	r2, r3
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	00db      	lsls	r3, r3, #3
 8007e9a:	4413      	add	r3, r2
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	6812      	ldr	r2, [r2, #0]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	699a      	ldr	r2, [r3, #24]
 8007eb2:	8b7b      	ldrh	r3, [r7, #26]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d306      	bcc.n	8007ec6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	699a      	ldr	r2, [r3, #24]
 8007ebc:	8b7b      	ldrh	r3, [r7, #26]
 8007ebe:	1ad2      	subs	r2, r2, r3
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	619a      	str	r2, [r3, #24]
 8007ec4:	e002      	b.n	8007ecc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d123      	bne.n	8007f1c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	881b      	ldrh	r3, [r3, #0]
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eee:	83fb      	strh	r3, [r7, #30]
 8007ef0:	8bfb      	ldrh	r3, [r7, #30]
 8007ef2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007ef6:	83fb      	strh	r3, [r7, #30]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	461a      	mov	r2, r3
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	441a      	add	r2, r3
 8007f06:	8bfb      	ldrh	r3, [r7, #30]
 8007f08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007f1c:	88fb      	ldrh	r3, [r7, #6]
 8007f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d11f      	bne.n	8007f66 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f40:	83bb      	strh	r3, [r7, #28]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	461a      	mov	r2, r3
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	441a      	add	r2, r3
 8007f50:	8bbb      	ldrh	r3, [r7, #28]
 8007f52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007f66:	8b7b      	ldrh	r3, [r7, #26]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d008      	beq.n	8007f7e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6818      	ldr	r0, [r3, #0]
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	6959      	ldr	r1, [r3, #20]
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	895a      	ldrh	r2, [r3, #10]
 8007f78:	8b7b      	ldrh	r3, [r7, #26]
 8007f7a:	f006 fac0 	bl	800e4fe <USB_ReadPMA>
    }
  }

  return count;
 8007f7e:	8b7b      	ldrh	r3, [r7, #26]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3720      	adds	r7, #32
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b0a4      	sub	sp, #144	@ 0x90
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	4613      	mov	r3, r2
 8007f94:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007f96:	88fb      	ldrh	r3, [r7, #6]
 8007f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f000 81db 	beq.w	8008358 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	461a      	mov	r2, r3
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	4413      	add	r3, r2
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	6812      	ldr	r2, [r2, #0]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007fc0:	881b      	ldrh	r3, [r3, #0]
 8007fc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fc6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	699a      	ldr	r2, [r3, #24]
 8007fce:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d907      	bls.n	8007fe6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	699a      	ldr	r2, [r3, #24]
 8007fda:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007fde:	1ad2      	subs	r2, r2, r3
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	619a      	str	r2, [r3, #24]
 8007fe4:	e002      	b.n	8007fec <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f040 80b9 	bne.w	8008168 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	785b      	ldrb	r3, [r3, #1]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d126      	bne.n	800804c <HAL_PCD_EP_DB_Transmit+0xc4>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800800c:	b29b      	uxth	r3, r3
 800800e:	461a      	mov	r2, r3
 8008010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008012:	4413      	add	r3, r2
 8008014:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	00da      	lsls	r2, r3, #3
 800801c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800801e:	4413      	add	r3, r2
 8008020:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008024:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	b29b      	uxth	r3, r3
 800802c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008030:	b29a      	uxth	r2, r3
 8008032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008034:	801a      	strh	r2, [r3, #0]
 8008036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	b29b      	uxth	r3, r3
 800803c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008044:	b29a      	uxth	r2, r3
 8008046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008048:	801a      	strh	r2, [r3, #0]
 800804a:	e01a      	b.n	8008082 <HAL_PCD_EP_DB_Transmit+0xfa>
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	785b      	ldrb	r3, [r3, #1]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d116      	bne.n	8008082 <HAL_PCD_EP_DB_Transmit+0xfa>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	637b      	str	r3, [r7, #52]	@ 0x34
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008062:	b29b      	uxth	r3, r3
 8008064:	461a      	mov	r2, r3
 8008066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008068:	4413      	add	r3, r2
 800806a:	637b      	str	r3, [r7, #52]	@ 0x34
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	00da      	lsls	r2, r3, #3
 8008072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008074:	4413      	add	r3, r2
 8008076:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800807a:	633b      	str	r3, [r7, #48]	@ 0x30
 800807c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807e:	2200      	movs	r2, #0
 8008080:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	627b      	str	r3, [r7, #36]	@ 0x24
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	785b      	ldrb	r3, [r3, #1]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d126      	bne.n	80080de <HAL_PCD_EP_DB_Transmit+0x156>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	61fb      	str	r3, [r7, #28]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800809e:	b29b      	uxth	r3, r3
 80080a0:	461a      	mov	r2, r3
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	4413      	add	r3, r2
 80080a6:	61fb      	str	r3, [r7, #28]
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	00da      	lsls	r2, r3, #3
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	4413      	add	r3, r2
 80080b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80080b6:	61bb      	str	r3, [r7, #24]
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	801a      	strh	r2, [r3, #0]
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	881b      	ldrh	r3, [r3, #0]
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	801a      	strh	r2, [r3, #0]
 80080dc:	e017      	b.n	800810e <HAL_PCD_EP_DB_Transmit+0x186>
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	785b      	ldrb	r3, [r3, #1]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d113      	bne.n	800810e <HAL_PCD_EP_DB_Transmit+0x186>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	461a      	mov	r2, r3
 80080f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f4:	4413      	add	r3, r2
 80080f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	00da      	lsls	r2, r3, #3
 80080fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008100:	4413      	add	r3, r2
 8008102:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008106:	623b      	str	r3, [r7, #32]
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	2200      	movs	r2, #0
 800810c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	4619      	mov	r1, r3
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f008 f906 	bl	8010326 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800811a:	88fb      	ldrh	r3, [r7, #6]
 800811c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008120:	2b00      	cmp	r3, #0
 8008122:	f000 82fa 	beq.w	800871a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	461a      	mov	r2, r3
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	b29b      	uxth	r3, r3
 8008138:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800813c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008140:	82fb      	strh	r3, [r7, #22]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	461a      	mov	r2, r3
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	441a      	add	r2, r3
 8008150:	8afb      	ldrh	r3, [r7, #22]
 8008152:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008156:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800815a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800815e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008162:	b29b      	uxth	r3, r3
 8008164:	8013      	strh	r3, [r2, #0]
 8008166:	e2d8      	b.n	800871a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008168:	88fb      	ldrh	r3, [r7, #6]
 800816a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d021      	beq.n	80081b6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	b29b      	uxth	r3, r3
 8008184:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800818c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	461a      	mov	r2, r3
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	441a      	add	r2, r3
 800819e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80081a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80081ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80081bc:	2b01      	cmp	r3, #1
 80081be:	f040 82ac 	bne.w	800871a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	695a      	ldr	r2, [r3, #20]
 80081c6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80081ca:	441a      	add	r2, r3
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	69da      	ldr	r2, [r3, #28]
 80081d4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80081d8:	441a      	add	r2, r3
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	6a1a      	ldr	r2, [r3, #32]
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d30b      	bcc.n	8008202 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	6a1a      	ldr	r2, [r3, #32]
 80081f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081fa:	1ad2      	subs	r2, r2, r3
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	621a      	str	r2, [r3, #32]
 8008200:	e017      	b.n	8008232 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d108      	bne.n	800821c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800820a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800820e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800821a:	e00a      	b.n	8008232 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	6a1b      	ldr	r3, [r3, #32]
 8008228:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2200      	movs	r2, #0
 8008230:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	785b      	ldrb	r3, [r3, #1]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d165      	bne.n	8008306 <HAL_PCD_EP_DB_Transmit+0x37e>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008248:	b29b      	uxth	r3, r3
 800824a:	461a      	mov	r2, r3
 800824c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800824e:	4413      	add	r3, r2
 8008250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	00da      	lsls	r2, r3, #3
 8008258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800825a:	4413      	add	r3, r2
 800825c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008260:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	b29b      	uxth	r3, r3
 8008268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800826c:	b29a      	uxth	r2, r3
 800826e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008270:	801a      	strh	r2, [r3, #0]
 8008272:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008276:	2b00      	cmp	r3, #0
 8008278:	d10a      	bne.n	8008290 <HAL_PCD_EP_DB_Transmit+0x308>
 800827a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827c:	881b      	ldrh	r3, [r3, #0]
 800827e:	b29b      	uxth	r3, r3
 8008280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008288:	b29a      	uxth	r2, r3
 800828a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828c:	801a      	strh	r2, [r3, #0]
 800828e:	e057      	b.n	8008340 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008290:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008294:	2b3e      	cmp	r3, #62	@ 0x3e
 8008296:	d818      	bhi.n	80082ca <HAL_PCD_EP_DB_Transmit+0x342>
 8008298:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800829c:	085b      	lsrs	r3, r3, #1
 800829e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082a4:	f003 0301 	and.w	r3, r3, #1
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d002      	beq.n	80082b2 <HAL_PCD_EP_DB_Transmit+0x32a>
 80082ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082ae:	3301      	adds	r3, #1
 80082b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b4:	881b      	ldrh	r3, [r3, #0]
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	029b      	lsls	r3, r3, #10
 80082be:	b29b      	uxth	r3, r3
 80082c0:	4313      	orrs	r3, r2
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c6:	801a      	strh	r2, [r3, #0]
 80082c8:	e03a      	b.n	8008340 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80082ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082ce:	095b      	lsrs	r3, r3, #5
 80082d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082d6:	f003 031f 	and.w	r3, r3, #31
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d102      	bne.n	80082e4 <HAL_PCD_EP_DB_Transmit+0x35c>
 80082de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082e0:	3b01      	subs	r3, #1
 80082e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	029b      	lsls	r3, r3, #10
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	4313      	orrs	r3, r2
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082fe:	b29a      	uxth	r2, r3
 8008300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008302:	801a      	strh	r2, [r3, #0]
 8008304:	e01c      	b.n	8008340 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	785b      	ldrb	r3, [r3, #1]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d118      	bne.n	8008340 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	647b      	str	r3, [r7, #68]	@ 0x44
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800831c:	b29b      	uxth	r3, r3
 800831e:	461a      	mov	r2, r3
 8008320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008322:	4413      	add	r3, r2
 8008324:	647b      	str	r3, [r7, #68]	@ 0x44
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	00da      	lsls	r2, r3, #3
 800832c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800832e:	4413      	add	r3, r2
 8008330:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008334:	643b      	str	r3, [r7, #64]	@ 0x40
 8008336:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800833a:	b29a      	uxth	r2, r3
 800833c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800833e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6818      	ldr	r0, [r3, #0]
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	6959      	ldr	r1, [r3, #20]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	891a      	ldrh	r2, [r3, #8]
 800834c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008350:	b29b      	uxth	r3, r3
 8008352:	f006 f892 	bl	800e47a <USB_WritePMA>
 8008356:	e1e0      	b.n	800871a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008360:	b29b      	uxth	r3, r3
 8008362:	461a      	mov	r2, r3
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	00db      	lsls	r3, r3, #3
 800836a:	4413      	add	r3, r2
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	6812      	ldr	r2, [r2, #0]
 8008370:	4413      	add	r3, r2
 8008372:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008376:	881b      	ldrh	r3, [r3, #0]
 8008378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800837c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	699a      	ldr	r2, [r3, #24]
 8008384:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008388:	429a      	cmp	r2, r3
 800838a:	d307      	bcc.n	800839c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	699a      	ldr	r2, [r3, #24]
 8008390:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008394:	1ad2      	subs	r2, r2, r3
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	619a      	str	r2, [r3, #24]
 800839a:	e002      	b.n	80083a2 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2200      	movs	r2, #0
 80083a0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f040 80c0 	bne.w	800852c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	785b      	ldrb	r3, [r3, #1]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d126      	bne.n	8008402 <HAL_PCD_EP_DB_Transmit+0x47a>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	461a      	mov	r2, r3
 80083c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083c8:	4413      	add	r3, r2
 80083ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	00da      	lsls	r2, r3, #3
 80083d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083d4:	4413      	add	r3, r2
 80083d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80083da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80083dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083de:	881b      	ldrh	r3, [r3, #0]
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083ea:	801a      	strh	r2, [r3, #0]
 80083ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083fe:	801a      	strh	r2, [r3, #0]
 8008400:	e01a      	b.n	8008438 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	785b      	ldrb	r3, [r3, #1]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d116      	bne.n	8008438 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008418:	b29b      	uxth	r3, r3
 800841a:	461a      	mov	r2, r3
 800841c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800841e:	4413      	add	r3, r2
 8008420:	667b      	str	r3, [r7, #100]	@ 0x64
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	00da      	lsls	r2, r3, #3
 8008428:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800842a:	4413      	add	r3, r2
 800842c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008430:	663b      	str	r3, [r7, #96]	@ 0x60
 8008432:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008434:	2200      	movs	r2, #0
 8008436:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	677b      	str	r3, [r7, #116]	@ 0x74
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	785b      	ldrb	r3, [r3, #1]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d12b      	bne.n	800849e <HAL_PCD_EP_DB_Transmit+0x516>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008454:	b29b      	uxth	r3, r3
 8008456:	461a      	mov	r2, r3
 8008458:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800845a:	4413      	add	r3, r2
 800845c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	00da      	lsls	r2, r3, #3
 8008464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008466:	4413      	add	r3, r2
 8008468:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800846c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008470:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008474:	881b      	ldrh	r3, [r3, #0]
 8008476:	b29b      	uxth	r3, r3
 8008478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800847c:	b29a      	uxth	r2, r3
 800847e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008482:	801a      	strh	r2, [r3, #0]
 8008484:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008488:	881b      	ldrh	r3, [r3, #0]
 800848a:	b29b      	uxth	r3, r3
 800848c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008494:	b29a      	uxth	r2, r3
 8008496:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800849a:	801a      	strh	r2, [r3, #0]
 800849c:	e017      	b.n	80084ce <HAL_PCD_EP_DB_Transmit+0x546>
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	785b      	ldrb	r3, [r3, #1]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d113      	bne.n	80084ce <HAL_PCD_EP_DB_Transmit+0x546>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	461a      	mov	r2, r3
 80084b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084b4:	4413      	add	r3, r2
 80084b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	00da      	lsls	r2, r3, #3
 80084be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084c0:	4413      	add	r3, r2
 80084c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80084c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80084c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084ca:	2200      	movs	r2, #0
 80084cc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	4619      	mov	r1, r3
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f007 ff26 	bl	8010326 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80084da:	88fb      	ldrh	r3, [r7, #6]
 80084dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f040 811a 	bne.w	800871a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	461a      	mov	r2, r3
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008500:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	461a      	mov	r2, r3
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	441a      	add	r2, r3
 8008512:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8008516:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800851a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800851e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008526:	b29b      	uxth	r3, r3
 8008528:	8013      	strh	r3, [r2, #0]
 800852a:	e0f6      	b.n	800871a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800852c:	88fb      	ldrh	r3, [r7, #6]
 800852e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d121      	bne.n	800857a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	461a      	mov	r2, r3
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	b29b      	uxth	r3, r3
 8008548:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800854c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008550:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	461a      	mov	r2, r3
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	441a      	add	r2, r3
 8008562:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008566:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800856a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800856e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008576:	b29b      	uxth	r3, r3
 8008578:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008580:	2b01      	cmp	r3, #1
 8008582:	f040 80ca 	bne.w	800871a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	695a      	ldr	r2, [r3, #20]
 800858a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800858e:	441a      	add	r2, r3
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	69da      	ldr	r2, [r3, #28]
 8008598:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800859c:	441a      	add	r2, r3
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	6a1a      	ldr	r2, [r3, #32]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d30b      	bcc.n	80085c6 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	6a1a      	ldr	r2, [r3, #32]
 80085ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085be:	1ad2      	subs	r2, r2, r3
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	621a      	str	r2, [r3, #32]
 80085c4:	e017      	b.n	80085f6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d108      	bne.n	80085e0 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80085ce:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80085d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80085de:	e00a      	b.n	80085f6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	6a1b      	ldr	r3, [r3, #32]
 80085e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	2200      	movs	r2, #0
 80085ec:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	785b      	ldrb	r3, [r3, #1]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d165      	bne.n	80086d0 <HAL_PCD_EP_DB_Transmit+0x748>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008612:	b29b      	uxth	r3, r3
 8008614:	461a      	mov	r2, r3
 8008616:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008618:	4413      	add	r3, r2
 800861a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	00da      	lsls	r2, r3, #3
 8008622:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008624:	4413      	add	r3, r2
 8008626:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800862a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800862c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800862e:	881b      	ldrh	r3, [r3, #0]
 8008630:	b29b      	uxth	r3, r3
 8008632:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008636:	b29a      	uxth	r2, r3
 8008638:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800863a:	801a      	strh	r2, [r3, #0]
 800863c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10a      	bne.n	800865a <HAL_PCD_EP_DB_Transmit+0x6d2>
 8008644:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008646:	881b      	ldrh	r3, [r3, #0]
 8008648:	b29b      	uxth	r3, r3
 800864a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800864e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008652:	b29a      	uxth	r2, r3
 8008654:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008656:	801a      	strh	r2, [r3, #0]
 8008658:	e054      	b.n	8008704 <HAL_PCD_EP_DB_Transmit+0x77c>
 800865a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800865e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008660:	d818      	bhi.n	8008694 <HAL_PCD_EP_DB_Transmit+0x70c>
 8008662:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008666:	085b      	lsrs	r3, r3, #1
 8008668:	66bb      	str	r3, [r7, #104]	@ 0x68
 800866a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800866e:	f003 0301 	and.w	r3, r3, #1
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <HAL_PCD_EP_DB_Transmit+0x6f4>
 8008676:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008678:	3301      	adds	r3, #1
 800867a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800867c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800867e:	881b      	ldrh	r3, [r3, #0]
 8008680:	b29a      	uxth	r2, r3
 8008682:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008684:	b29b      	uxth	r3, r3
 8008686:	029b      	lsls	r3, r3, #10
 8008688:	b29b      	uxth	r3, r3
 800868a:	4313      	orrs	r3, r2
 800868c:	b29a      	uxth	r2, r3
 800868e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008690:	801a      	strh	r2, [r3, #0]
 8008692:	e037      	b.n	8008704 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008694:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008698:	095b      	lsrs	r3, r3, #5
 800869a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800869c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086a0:	f003 031f 	and.w	r3, r3, #31
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d102      	bne.n	80086ae <HAL_PCD_EP_DB_Transmit+0x726>
 80086a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086aa:	3b01      	subs	r3, #1
 80086ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80086b0:	881b      	ldrh	r3, [r3, #0]
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	029b      	lsls	r3, r3, #10
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	4313      	orrs	r3, r2
 80086be:	b29b      	uxth	r3, r3
 80086c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80086cc:	801a      	strh	r2, [r3, #0]
 80086ce:	e019      	b.n	8008704 <HAL_PCD_EP_DB_Transmit+0x77c>
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	785b      	ldrb	r3, [r3, #1]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d115      	bne.n	8008704 <HAL_PCD_EP_DB_Transmit+0x77c>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	461a      	mov	r2, r3
 80086e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086e6:	4413      	add	r3, r2
 80086e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	00da      	lsls	r2, r3, #3
 80086f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086f2:	4413      	add	r3, r2
 80086f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80086f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80086fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086fe:	b29a      	uxth	r2, r3
 8008700:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008702:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6818      	ldr	r0, [r3, #0]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	6959      	ldr	r1, [r3, #20]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	895a      	ldrh	r2, [r3, #10]
 8008710:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008714:	b29b      	uxth	r3, r3
 8008716:	f005 feb0 	bl	800e47a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	461a      	mov	r2, r3
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4413      	add	r3, r2
 8008728:	881b      	ldrh	r3, [r3, #0]
 800872a:	b29b      	uxth	r3, r3
 800872c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008730:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008734:	82bb      	strh	r3, [r7, #20]
 8008736:	8abb      	ldrh	r3, [r7, #20]
 8008738:	f083 0310 	eor.w	r3, r3, #16
 800873c:	82bb      	strh	r3, [r7, #20]
 800873e:	8abb      	ldrh	r3, [r7, #20]
 8008740:	f083 0320 	eor.w	r3, r3, #32
 8008744:	82bb      	strh	r3, [r7, #20]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	461a      	mov	r2, r3
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	441a      	add	r2, r3
 8008754:	8abb      	ldrh	r3, [r7, #20]
 8008756:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800875a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800875e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008766:	b29b      	uxth	r3, r3
 8008768:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3790      	adds	r7, #144	@ 0x90
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008774:	b480      	push	{r7}
 8008776:	b087      	sub	sp, #28
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	607b      	str	r3, [r7, #4]
 800877e:	460b      	mov	r3, r1
 8008780:	817b      	strh	r3, [r7, #10]
 8008782:	4613      	mov	r3, r2
 8008784:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008786:	897b      	ldrh	r3, [r7, #10]
 8008788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800878c:	b29b      	uxth	r3, r3
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00b      	beq.n	80087aa <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008792:	897b      	ldrh	r3, [r7, #10]
 8008794:	f003 0207 	and.w	r2, r3, #7
 8008798:	4613      	mov	r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	3310      	adds	r3, #16
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	4413      	add	r3, r2
 80087a6:	617b      	str	r3, [r7, #20]
 80087a8:	e009      	b.n	80087be <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80087aa:	897a      	ldrh	r2, [r7, #10]
 80087ac:	4613      	mov	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	4413      	add	r3, r2
 80087bc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80087be:	893b      	ldrh	r3, [r7, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d107      	bne.n	80087d4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	2200      	movs	r2, #0
 80087c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	80da      	strh	r2, [r3, #6]
 80087d2:	e00b      	b.n	80087ec <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2201      	movs	r2, #1
 80087d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	b29a      	uxth	r2, r3
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	0c1b      	lsrs	r3, r3, #16
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	371c      	adds	r7, #28
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80087fa:	b480      	push	{r7}
 80087fc:	b085      	sub	sp, #20
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800881e:	b29b      	uxth	r3, r3
 8008820:	f043 0301 	orr.w	r3, r3, #1
 8008824:	b29a      	uxth	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008832:	b29b      	uxth	r3, r3
 8008834:	f043 0302 	orr.w	r3, r3, #2
 8008838:	b29a      	uxth	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
	...

08008850 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d141      	bne.n	80088e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800885e:	4b4b      	ldr	r3, [pc, #300]	@ (800898c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800886a:	d131      	bne.n	80088d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800886c:	4b47      	ldr	r3, [pc, #284]	@ (800898c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800886e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008872:	4a46      	ldr	r2, [pc, #280]	@ (800898c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008878:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800887c:	4b43      	ldr	r3, [pc, #268]	@ (800898c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008884:	4a41      	ldr	r2, [pc, #260]	@ (800898c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008886:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800888a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800888c:	4b40      	ldr	r3, [pc, #256]	@ (8008990 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2232      	movs	r2, #50	@ 0x32
 8008892:	fb02 f303 	mul.w	r3, r2, r3
 8008896:	4a3f      	ldr	r2, [pc, #252]	@ (8008994 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008898:	fba2 2303 	umull	r2, r3, r2, r3
 800889c:	0c9b      	lsrs	r3, r3, #18
 800889e:	3301      	adds	r3, #1
 80088a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80088a2:	e002      	b.n	80088aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3b01      	subs	r3, #1
 80088a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80088aa:	4b38      	ldr	r3, [pc, #224]	@ (800898c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088b6:	d102      	bne.n	80088be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1f2      	bne.n	80088a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80088be:	4b33      	ldr	r3, [pc, #204]	@ (800898c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088ca:	d158      	bne.n	800897e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e057      	b.n	8008980 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80088d0:	4b2e      	ldr	r3, [pc, #184]	@ (800898c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088d6:	4a2d      	ldr	r2, [pc, #180]	@ (800898c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80088e0:	e04d      	b.n	800897e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088e8:	d141      	bne.n	800896e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80088ea:	4b28      	ldr	r3, [pc, #160]	@ (800898c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80088f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088f6:	d131      	bne.n	800895c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80088f8:	4b24      	ldr	r3, [pc, #144]	@ (800898c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088fe:	4a23      	ldr	r2, [pc, #140]	@ (800898c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008904:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008908:	4b20      	ldr	r3, [pc, #128]	@ (800898c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008910:	4a1e      	ldr	r2, [pc, #120]	@ (800898c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008912:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008916:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008918:	4b1d      	ldr	r3, [pc, #116]	@ (8008990 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2232      	movs	r2, #50	@ 0x32
 800891e:	fb02 f303 	mul.w	r3, r2, r3
 8008922:	4a1c      	ldr	r2, [pc, #112]	@ (8008994 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008924:	fba2 2303 	umull	r2, r3, r2, r3
 8008928:	0c9b      	lsrs	r3, r3, #18
 800892a:	3301      	adds	r3, #1
 800892c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800892e:	e002      	b.n	8008936 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	3b01      	subs	r3, #1
 8008934:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008936:	4b15      	ldr	r3, [pc, #84]	@ (800898c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008938:	695b      	ldr	r3, [r3, #20]
 800893a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800893e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008942:	d102      	bne.n	800894a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1f2      	bne.n	8008930 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800894a:	4b10      	ldr	r3, [pc, #64]	@ (800898c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008952:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008956:	d112      	bne.n	800897e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e011      	b.n	8008980 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800895c:	4b0b      	ldr	r3, [pc, #44]	@ (800898c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800895e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008962:	4a0a      	ldr	r2, [pc, #40]	@ (800898c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008968:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800896c:	e007      	b.n	800897e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800896e:	4b07      	ldr	r3, [pc, #28]	@ (800898c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008976:	4a05      	ldr	r2, [pc, #20]	@ (800898c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008978:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800897c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr
 800898c:	40007000 	.word	0x40007000
 8008990:	2000003c 	.word	0x2000003c
 8008994:	431bde83 	.word	0x431bde83

08008998 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008998:	b480      	push	{r7}
 800899a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800899c:	4b05      	ldr	r3, [pc, #20]	@ (80089b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	4a04      	ldr	r2, [pc, #16]	@ (80089b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80089a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80089a6:	6093      	str	r3, [r2, #8]
}
 80089a8:	bf00      	nop
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	40007000 	.word	0x40007000

080089b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b088      	sub	sp, #32
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e2fe      	b.n	8008fc8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0301 	and.w	r3, r3, #1
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d075      	beq.n	8008ac2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089d6:	4b97      	ldr	r3, [pc, #604]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	f003 030c 	and.w	r3, r3, #12
 80089de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80089e0:	4b94      	ldr	r3, [pc, #592]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	f003 0303 	and.w	r3, r3, #3
 80089e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	2b0c      	cmp	r3, #12
 80089ee:	d102      	bne.n	80089f6 <HAL_RCC_OscConfig+0x3e>
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	d002      	beq.n	80089fc <HAL_RCC_OscConfig+0x44>
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	2b08      	cmp	r3, #8
 80089fa:	d10b      	bne.n	8008a14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089fc:	4b8d      	ldr	r3, [pc, #564]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d05b      	beq.n	8008ac0 <HAL_RCC_OscConfig+0x108>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d157      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	e2d9      	b.n	8008fc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a1c:	d106      	bne.n	8008a2c <HAL_RCC_OscConfig+0x74>
 8008a1e:	4b85      	ldr	r3, [pc, #532]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a84      	ldr	r2, [pc, #528]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a28:	6013      	str	r3, [r2, #0]
 8008a2a:	e01d      	b.n	8008a68 <HAL_RCC_OscConfig+0xb0>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a34:	d10c      	bne.n	8008a50 <HAL_RCC_OscConfig+0x98>
 8008a36:	4b7f      	ldr	r3, [pc, #508]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a7e      	ldr	r2, [pc, #504]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008a3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a40:	6013      	str	r3, [r2, #0]
 8008a42:	4b7c      	ldr	r3, [pc, #496]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a7b      	ldr	r2, [pc, #492]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a4c:	6013      	str	r3, [r2, #0]
 8008a4e:	e00b      	b.n	8008a68 <HAL_RCC_OscConfig+0xb0>
 8008a50:	4b78      	ldr	r3, [pc, #480]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a77      	ldr	r2, [pc, #476]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a5a:	6013      	str	r3, [r2, #0]
 8008a5c:	4b75      	ldr	r3, [pc, #468]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a74      	ldr	r2, [pc, #464]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d013      	beq.n	8008a98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a70:	f7fb fcbe 	bl	80043f0 <HAL_GetTick>
 8008a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008a76:	e008      	b.n	8008a8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a78:	f7fb fcba 	bl	80043f0 <HAL_GetTick>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	2b64      	cmp	r3, #100	@ 0x64
 8008a84:	d901      	bls.n	8008a8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e29e      	b.n	8008fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d0f0      	beq.n	8008a78 <HAL_RCC_OscConfig+0xc0>
 8008a96:	e014      	b.n	8008ac2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a98:	f7fb fcaa 	bl	80043f0 <HAL_GetTick>
 8008a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008a9e:	e008      	b.n	8008ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008aa0:	f7fb fca6 	bl	80043f0 <HAL_GetTick>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	2b64      	cmp	r3, #100	@ 0x64
 8008aac:	d901      	bls.n	8008ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e28a      	b.n	8008fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008ab2:	4b60      	ldr	r3, [pc, #384]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1f0      	bne.n	8008aa0 <HAL_RCC_OscConfig+0xe8>
 8008abe:	e000      	b.n	8008ac2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d075      	beq.n	8008bba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ace:	4b59      	ldr	r3, [pc, #356]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f003 030c 	and.w	r3, r3, #12
 8008ad6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ad8:	4b56      	ldr	r3, [pc, #344]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f003 0303 	and.w	r3, r3, #3
 8008ae0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	2b0c      	cmp	r3, #12
 8008ae6:	d102      	bne.n	8008aee <HAL_RCC_OscConfig+0x136>
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d002      	beq.n	8008af4 <HAL_RCC_OscConfig+0x13c>
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	2b04      	cmp	r3, #4
 8008af2:	d11f      	bne.n	8008b34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008af4:	4b4f      	ldr	r3, [pc, #316]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d005      	beq.n	8008b0c <HAL_RCC_OscConfig+0x154>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d101      	bne.n	8008b0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e25d      	b.n	8008fc8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b0c:	4b49      	ldr	r3, [pc, #292]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	061b      	lsls	r3, r3, #24
 8008b1a:	4946      	ldr	r1, [pc, #280]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008b20:	4b45      	ldr	r3, [pc, #276]	@ (8008c38 <HAL_RCC_OscConfig+0x280>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fb fc17 	bl	8004358 <HAL_InitTick>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d043      	beq.n	8008bb8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e249      	b.n	8008fc8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d023      	beq.n	8008b84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b3c:	4b3d      	ldr	r3, [pc, #244]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a3c      	ldr	r2, [pc, #240]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b48:	f7fb fc52 	bl	80043f0 <HAL_GetTick>
 8008b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008b4e:	e008      	b.n	8008b62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b50:	f7fb fc4e 	bl	80043f0 <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d901      	bls.n	8008b62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e232      	b.n	8008fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008b62:	4b34      	ldr	r3, [pc, #208]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d0f0      	beq.n	8008b50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b6e:	4b31      	ldr	r3, [pc, #196]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	061b      	lsls	r3, r3, #24
 8008b7c:	492d      	ldr	r1, [pc, #180]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	604b      	str	r3, [r1, #4]
 8008b82:	e01a      	b.n	8008bba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b84:	4b2b      	ldr	r3, [pc, #172]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a2a      	ldr	r2, [pc, #168]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008b8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b90:	f7fb fc2e 	bl	80043f0 <HAL_GetTick>
 8008b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008b96:	e008      	b.n	8008baa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b98:	f7fb fc2a 	bl	80043f0 <HAL_GetTick>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d901      	bls.n	8008baa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e20e      	b.n	8008fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008baa:	4b22      	ldr	r3, [pc, #136]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1f0      	bne.n	8008b98 <HAL_RCC_OscConfig+0x1e0>
 8008bb6:	e000      	b.n	8008bba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008bb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 0308 	and.w	r3, r3, #8
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d041      	beq.n	8008c4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d01c      	beq.n	8008c08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008bce:	4b19      	ldr	r3, [pc, #100]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008bd4:	4a17      	ldr	r2, [pc, #92]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008bd6:	f043 0301 	orr.w	r3, r3, #1
 8008bda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bde:	f7fb fc07 	bl	80043f0 <HAL_GetTick>
 8008be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008be4:	e008      	b.n	8008bf8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008be6:	f7fb fc03 	bl	80043f0 <HAL_GetTick>
 8008bea:	4602      	mov	r2, r0
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d901      	bls.n	8008bf8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	e1e7      	b.n	8008fc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008bfe:	f003 0302 	and.w	r3, r3, #2
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d0ef      	beq.n	8008be6 <HAL_RCC_OscConfig+0x22e>
 8008c06:	e020      	b.n	8008c4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c08:	4b0a      	ldr	r3, [pc, #40]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c0e:	4a09      	ldr	r2, [pc, #36]	@ (8008c34 <HAL_RCC_OscConfig+0x27c>)
 8008c10:	f023 0301 	bic.w	r3, r3, #1
 8008c14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c18:	f7fb fbea 	bl	80043f0 <HAL_GetTick>
 8008c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008c1e:	e00d      	b.n	8008c3c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c20:	f7fb fbe6 	bl	80043f0 <HAL_GetTick>
 8008c24:	4602      	mov	r2, r0
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d906      	bls.n	8008c3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	e1ca      	b.n	8008fc8 <HAL_RCC_OscConfig+0x610>
 8008c32:	bf00      	nop
 8008c34:	40021000 	.word	0x40021000
 8008c38:	20000040 	.word	0x20000040
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008c3c:	4b8c      	ldr	r3, [pc, #560]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c42:	f003 0302 	and.w	r3, r3, #2
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1ea      	bne.n	8008c20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 0304 	and.w	r3, r3, #4
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f000 80a6 	beq.w	8008da4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008c5c:	4b84      	ldr	r3, [pc, #528]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d101      	bne.n	8008c6c <HAL_RCC_OscConfig+0x2b4>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e000      	b.n	8008c6e <HAL_RCC_OscConfig+0x2b6>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00d      	beq.n	8008c8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c72:	4b7f      	ldr	r3, [pc, #508]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c76:	4a7e      	ldr	r2, [pc, #504]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c7e:	4b7c      	ldr	r3, [pc, #496]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c8e:	4b79      	ldr	r3, [pc, #484]	@ (8008e74 <HAL_RCC_OscConfig+0x4bc>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d118      	bne.n	8008ccc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c9a:	4b76      	ldr	r3, [pc, #472]	@ (8008e74 <HAL_RCC_OscConfig+0x4bc>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a75      	ldr	r2, [pc, #468]	@ (8008e74 <HAL_RCC_OscConfig+0x4bc>)
 8008ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ca4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ca6:	f7fb fba3 	bl	80043f0 <HAL_GetTick>
 8008caa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008cac:	e008      	b.n	8008cc0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cae:	f7fb fb9f 	bl	80043f0 <HAL_GetTick>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d901      	bls.n	8008cc0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e183      	b.n	8008fc8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008cc0:	4b6c      	ldr	r3, [pc, #432]	@ (8008e74 <HAL_RCC_OscConfig+0x4bc>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d0f0      	beq.n	8008cae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d108      	bne.n	8008ce6 <HAL_RCC_OscConfig+0x32e>
 8008cd4:	4b66      	ldr	r3, [pc, #408]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cda:	4a65      	ldr	r2, [pc, #404]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008cdc:	f043 0301 	orr.w	r3, r3, #1
 8008ce0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ce4:	e024      	b.n	8008d30 <HAL_RCC_OscConfig+0x378>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	2b05      	cmp	r3, #5
 8008cec:	d110      	bne.n	8008d10 <HAL_RCC_OscConfig+0x358>
 8008cee:	4b60      	ldr	r3, [pc, #384]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cf4:	4a5e      	ldr	r2, [pc, #376]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008cf6:	f043 0304 	orr.w	r3, r3, #4
 8008cfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008cfe:	4b5c      	ldr	r3, [pc, #368]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d04:	4a5a      	ldr	r2, [pc, #360]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008d06:	f043 0301 	orr.w	r3, r3, #1
 8008d0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008d0e:	e00f      	b.n	8008d30 <HAL_RCC_OscConfig+0x378>
 8008d10:	4b57      	ldr	r3, [pc, #348]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d16:	4a56      	ldr	r2, [pc, #344]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008d18:	f023 0301 	bic.w	r3, r3, #1
 8008d1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008d20:	4b53      	ldr	r3, [pc, #332]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d26:	4a52      	ldr	r2, [pc, #328]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008d28:	f023 0304 	bic.w	r3, r3, #4
 8008d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d016      	beq.n	8008d66 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d38:	f7fb fb5a 	bl	80043f0 <HAL_GetTick>
 8008d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d3e:	e00a      	b.n	8008d56 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d40:	f7fb fb56 	bl	80043f0 <HAL_GetTick>
 8008d44:	4602      	mov	r2, r0
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d901      	bls.n	8008d56 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e138      	b.n	8008fc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d56:	4b46      	ldr	r3, [pc, #280]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d5c:	f003 0302 	and.w	r3, r3, #2
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d0ed      	beq.n	8008d40 <HAL_RCC_OscConfig+0x388>
 8008d64:	e015      	b.n	8008d92 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d66:	f7fb fb43 	bl	80043f0 <HAL_GetTick>
 8008d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008d6c:	e00a      	b.n	8008d84 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d6e:	f7fb fb3f 	bl	80043f0 <HAL_GetTick>
 8008d72:	4602      	mov	r2, r0
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d901      	bls.n	8008d84 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008d80:	2303      	movs	r3, #3
 8008d82:	e121      	b.n	8008fc8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008d84:	4b3a      	ldr	r3, [pc, #232]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d8a:	f003 0302 	and.w	r3, r3, #2
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1ed      	bne.n	8008d6e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008d92:	7ffb      	ldrb	r3, [r7, #31]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d105      	bne.n	8008da4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d98:	4b35      	ldr	r3, [pc, #212]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d9c:	4a34      	ldr	r2, [pc, #208]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008d9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008da2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0320 	and.w	r3, r3, #32
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d03c      	beq.n	8008e2a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	699b      	ldr	r3, [r3, #24]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d01c      	beq.n	8008df2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008db8:	4b2d      	ldr	r3, [pc, #180]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008dbe:	4a2c      	ldr	r2, [pc, #176]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008dc0:	f043 0301 	orr.w	r3, r3, #1
 8008dc4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dc8:	f7fb fb12 	bl	80043f0 <HAL_GetTick>
 8008dcc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008dce:	e008      	b.n	8008de2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008dd0:	f7fb fb0e 	bl	80043f0 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d901      	bls.n	8008de2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e0f2      	b.n	8008fc8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008de2:	4b23      	ldr	r3, [pc, #140]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008de8:	f003 0302 	and.w	r3, r3, #2
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d0ef      	beq.n	8008dd0 <HAL_RCC_OscConfig+0x418>
 8008df0:	e01b      	b.n	8008e2a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008df2:	4b1f      	ldr	r3, [pc, #124]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008df4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008df8:	4a1d      	ldr	r2, [pc, #116]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008dfa:	f023 0301 	bic.w	r3, r3, #1
 8008dfe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e02:	f7fb faf5 	bl	80043f0 <HAL_GetTick>
 8008e06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008e08:	e008      	b.n	8008e1c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e0a:	f7fb faf1 	bl	80043f0 <HAL_GetTick>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d901      	bls.n	8008e1c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	e0d5      	b.n	8008fc8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008e1c:	4b14      	ldr	r3, [pc, #80]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008e1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e22:	f003 0302 	and.w	r3, r3, #2
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1ef      	bne.n	8008e0a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	69db      	ldr	r3, [r3, #28]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f000 80c9 	beq.w	8008fc6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008e34:	4b0e      	ldr	r3, [pc, #56]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	f003 030c 	and.w	r3, r3, #12
 8008e3c:	2b0c      	cmp	r3, #12
 8008e3e:	f000 8083 	beq.w	8008f48 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	69db      	ldr	r3, [r3, #28]
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d15e      	bne.n	8008f08 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e4a:	4b09      	ldr	r3, [pc, #36]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a08      	ldr	r2, [pc, #32]	@ (8008e70 <HAL_RCC_OscConfig+0x4b8>)
 8008e50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e56:	f7fb facb 	bl	80043f0 <HAL_GetTick>
 8008e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e5c:	e00c      	b.n	8008e78 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e5e:	f7fb fac7 	bl	80043f0 <HAL_GetTick>
 8008e62:	4602      	mov	r2, r0
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d905      	bls.n	8008e78 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e0ab      	b.n	8008fc8 <HAL_RCC_OscConfig+0x610>
 8008e70:	40021000 	.word	0x40021000
 8008e74:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e78:	4b55      	ldr	r3, [pc, #340]	@ (8008fd0 <HAL_RCC_OscConfig+0x618>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1ec      	bne.n	8008e5e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e84:	4b52      	ldr	r3, [pc, #328]	@ (8008fd0 <HAL_RCC_OscConfig+0x618>)
 8008e86:	68da      	ldr	r2, [r3, #12]
 8008e88:	4b52      	ldr	r3, [pc, #328]	@ (8008fd4 <HAL_RCC_OscConfig+0x61c>)
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	6a11      	ldr	r1, [r2, #32]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008e94:	3a01      	subs	r2, #1
 8008e96:	0112      	lsls	r2, r2, #4
 8008e98:	4311      	orrs	r1, r2
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008e9e:	0212      	lsls	r2, r2, #8
 8008ea0:	4311      	orrs	r1, r2
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008ea6:	0852      	lsrs	r2, r2, #1
 8008ea8:	3a01      	subs	r2, #1
 8008eaa:	0552      	lsls	r2, r2, #21
 8008eac:	4311      	orrs	r1, r2
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008eb2:	0852      	lsrs	r2, r2, #1
 8008eb4:	3a01      	subs	r2, #1
 8008eb6:	0652      	lsls	r2, r2, #25
 8008eb8:	4311      	orrs	r1, r2
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008ebe:	06d2      	lsls	r2, r2, #27
 8008ec0:	430a      	orrs	r2, r1
 8008ec2:	4943      	ldr	r1, [pc, #268]	@ (8008fd0 <HAL_RCC_OscConfig+0x618>)
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ec8:	4b41      	ldr	r3, [pc, #260]	@ (8008fd0 <HAL_RCC_OscConfig+0x618>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a40      	ldr	r2, [pc, #256]	@ (8008fd0 <HAL_RCC_OscConfig+0x618>)
 8008ece:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ed2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008ed4:	4b3e      	ldr	r3, [pc, #248]	@ (8008fd0 <HAL_RCC_OscConfig+0x618>)
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	4a3d      	ldr	r2, [pc, #244]	@ (8008fd0 <HAL_RCC_OscConfig+0x618>)
 8008eda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ede:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ee0:	f7fb fa86 	bl	80043f0 <HAL_GetTick>
 8008ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ee6:	e008      	b.n	8008efa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ee8:	f7fb fa82 	bl	80043f0 <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d901      	bls.n	8008efa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	e066      	b.n	8008fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008efa:	4b35      	ldr	r3, [pc, #212]	@ (8008fd0 <HAL_RCC_OscConfig+0x618>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d0f0      	beq.n	8008ee8 <HAL_RCC_OscConfig+0x530>
 8008f06:	e05e      	b.n	8008fc6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f08:	4b31      	ldr	r3, [pc, #196]	@ (8008fd0 <HAL_RCC_OscConfig+0x618>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a30      	ldr	r2, [pc, #192]	@ (8008fd0 <HAL_RCC_OscConfig+0x618>)
 8008f0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f14:	f7fb fa6c 	bl	80043f0 <HAL_GetTick>
 8008f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f1a:	e008      	b.n	8008f2e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f1c:	f7fb fa68 	bl	80043f0 <HAL_GetTick>
 8008f20:	4602      	mov	r2, r0
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d901      	bls.n	8008f2e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	e04c      	b.n	8008fc8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f2e:	4b28      	ldr	r3, [pc, #160]	@ (8008fd0 <HAL_RCC_OscConfig+0x618>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1f0      	bne.n	8008f1c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008f3a:	4b25      	ldr	r3, [pc, #148]	@ (8008fd0 <HAL_RCC_OscConfig+0x618>)
 8008f3c:	68da      	ldr	r2, [r3, #12]
 8008f3e:	4924      	ldr	r1, [pc, #144]	@ (8008fd0 <HAL_RCC_OscConfig+0x618>)
 8008f40:	4b25      	ldr	r3, [pc, #148]	@ (8008fd8 <HAL_RCC_OscConfig+0x620>)
 8008f42:	4013      	ands	r3, r2
 8008f44:	60cb      	str	r3, [r1, #12]
 8008f46:	e03e      	b.n	8008fc6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d101      	bne.n	8008f54 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e039      	b.n	8008fc8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008f54:	4b1e      	ldr	r3, [pc, #120]	@ (8008fd0 <HAL_RCC_OscConfig+0x618>)
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	f003 0203 	and.w	r2, r3, #3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a1b      	ldr	r3, [r3, #32]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d12c      	bne.n	8008fc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f72:	3b01      	subs	r3, #1
 8008f74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d123      	bne.n	8008fc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f84:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d11b      	bne.n	8008fc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f94:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d113      	bne.n	8008fc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa4:	085b      	lsrs	r3, r3, #1
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d109      	bne.n	8008fc2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fb8:	085b      	lsrs	r3, r3, #1
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d001      	beq.n	8008fc6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e000      	b.n	8008fc8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3720      	adds	r7, #32
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	40021000 	.word	0x40021000
 8008fd4:	019f800c 	.word	0x019f800c
 8008fd8:	feeefffc 	.word	0xfeeefffc

08008fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d101      	bne.n	8008ff4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e11e      	b.n	8009232 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ff4:	4b91      	ldr	r3, [pc, #580]	@ (800923c <HAL_RCC_ClockConfig+0x260>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 030f 	and.w	r3, r3, #15
 8008ffc:	683a      	ldr	r2, [r7, #0]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d910      	bls.n	8009024 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009002:	4b8e      	ldr	r3, [pc, #568]	@ (800923c <HAL_RCC_ClockConfig+0x260>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f023 020f 	bic.w	r2, r3, #15
 800900a:	498c      	ldr	r1, [pc, #560]	@ (800923c <HAL_RCC_ClockConfig+0x260>)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	4313      	orrs	r3, r2
 8009010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009012:	4b8a      	ldr	r3, [pc, #552]	@ (800923c <HAL_RCC_ClockConfig+0x260>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 030f 	and.w	r3, r3, #15
 800901a:	683a      	ldr	r2, [r7, #0]
 800901c:	429a      	cmp	r2, r3
 800901e:	d001      	beq.n	8009024 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e106      	b.n	8009232 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 0301 	and.w	r3, r3, #1
 800902c:	2b00      	cmp	r3, #0
 800902e:	d073      	beq.n	8009118 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	2b03      	cmp	r3, #3
 8009036:	d129      	bne.n	800908c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009038:	4b81      	ldr	r3, [pc, #516]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e0f4      	b.n	8009232 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009048:	f000 f99e 	bl	8009388 <RCC_GetSysClockFreqFromPLLSource>
 800904c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	4a7c      	ldr	r2, [pc, #496]	@ (8009244 <HAL_RCC_ClockConfig+0x268>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d93f      	bls.n	80090d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009056:	4b7a      	ldr	r3, [pc, #488]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d009      	beq.n	8009076 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800906a:	2b00      	cmp	r3, #0
 800906c:	d033      	beq.n	80090d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009072:	2b00      	cmp	r3, #0
 8009074:	d12f      	bne.n	80090d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009076:	4b72      	ldr	r3, [pc, #456]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800907e:	4a70      	ldr	r2, [pc, #448]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 8009080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009084:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009086:	2380      	movs	r3, #128	@ 0x80
 8009088:	617b      	str	r3, [r7, #20]
 800908a:	e024      	b.n	80090d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	2b02      	cmp	r3, #2
 8009092:	d107      	bne.n	80090a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009094:	4b6a      	ldr	r3, [pc, #424]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d109      	bne.n	80090b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e0c6      	b.n	8009232 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80090a4:	4b66      	ldr	r3, [pc, #408]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d101      	bne.n	80090b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e0be      	b.n	8009232 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80090b4:	f000 f8ce 	bl	8009254 <HAL_RCC_GetSysClockFreq>
 80090b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	4a61      	ldr	r2, [pc, #388]	@ (8009244 <HAL_RCC_ClockConfig+0x268>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d909      	bls.n	80090d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80090c2:	4b5f      	ldr	r3, [pc, #380]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090ca:	4a5d      	ldr	r2, [pc, #372]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 80090cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80090d2:	2380      	movs	r3, #128	@ 0x80
 80090d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80090d6:	4b5a      	ldr	r3, [pc, #360]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	f023 0203 	bic.w	r2, r3, #3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	4957      	ldr	r1, [pc, #348]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 80090e4:	4313      	orrs	r3, r2
 80090e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090e8:	f7fb f982 	bl	80043f0 <HAL_GetTick>
 80090ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090ee:	e00a      	b.n	8009106 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090f0:	f7fb f97e 	bl	80043f0 <HAL_GetTick>
 80090f4:	4602      	mov	r2, r0
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090fe:	4293      	cmp	r3, r2
 8009100:	d901      	bls.n	8009106 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009102:	2303      	movs	r3, #3
 8009104:	e095      	b.n	8009232 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009106:	4b4e      	ldr	r3, [pc, #312]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f003 020c 	and.w	r2, r3, #12
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	429a      	cmp	r2, r3
 8009116:	d1eb      	bne.n	80090f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 0302 	and.w	r3, r3, #2
 8009120:	2b00      	cmp	r3, #0
 8009122:	d023      	beq.n	800916c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 0304 	and.w	r3, r3, #4
 800912c:	2b00      	cmp	r3, #0
 800912e:	d005      	beq.n	800913c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009130:	4b43      	ldr	r3, [pc, #268]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	4a42      	ldr	r2, [pc, #264]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 8009136:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800913a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0308 	and.w	r3, r3, #8
 8009144:	2b00      	cmp	r3, #0
 8009146:	d007      	beq.n	8009158 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009148:	4b3d      	ldr	r3, [pc, #244]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009150:	4a3b      	ldr	r2, [pc, #236]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 8009152:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009156:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009158:	4b39      	ldr	r3, [pc, #228]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	4936      	ldr	r1, [pc, #216]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 8009166:	4313      	orrs	r3, r2
 8009168:	608b      	str	r3, [r1, #8]
 800916a:	e008      	b.n	800917e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	2b80      	cmp	r3, #128	@ 0x80
 8009170:	d105      	bne.n	800917e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009172:	4b33      	ldr	r3, [pc, #204]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	4a32      	ldr	r2, [pc, #200]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 8009178:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800917c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800917e:	4b2f      	ldr	r3, [pc, #188]	@ (800923c <HAL_RCC_ClockConfig+0x260>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 030f 	and.w	r3, r3, #15
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	429a      	cmp	r2, r3
 800918a:	d21d      	bcs.n	80091c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800918c:	4b2b      	ldr	r3, [pc, #172]	@ (800923c <HAL_RCC_ClockConfig+0x260>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f023 020f 	bic.w	r2, r3, #15
 8009194:	4929      	ldr	r1, [pc, #164]	@ (800923c <HAL_RCC_ClockConfig+0x260>)
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	4313      	orrs	r3, r2
 800919a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800919c:	f7fb f928 	bl	80043f0 <HAL_GetTick>
 80091a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091a2:	e00a      	b.n	80091ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091a4:	f7fb f924 	bl	80043f0 <HAL_GetTick>
 80091a8:	4602      	mov	r2, r0
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d901      	bls.n	80091ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80091b6:	2303      	movs	r3, #3
 80091b8:	e03b      	b.n	8009232 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091ba:	4b20      	ldr	r3, [pc, #128]	@ (800923c <HAL_RCC_ClockConfig+0x260>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f003 030f 	and.w	r3, r3, #15
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d1ed      	bne.n	80091a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0304 	and.w	r3, r3, #4
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d008      	beq.n	80091e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091d4:	4b1a      	ldr	r3, [pc, #104]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	4917      	ldr	r1, [pc, #92]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 80091e2:	4313      	orrs	r3, r2
 80091e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 0308 	and.w	r3, r3, #8
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d009      	beq.n	8009206 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80091f2:	4b13      	ldr	r3, [pc, #76]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	00db      	lsls	r3, r3, #3
 8009200:	490f      	ldr	r1, [pc, #60]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 8009202:	4313      	orrs	r3, r2
 8009204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009206:	f000 f825 	bl	8009254 <HAL_RCC_GetSysClockFreq>
 800920a:	4602      	mov	r2, r0
 800920c:	4b0c      	ldr	r3, [pc, #48]	@ (8009240 <HAL_RCC_ClockConfig+0x264>)
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	091b      	lsrs	r3, r3, #4
 8009212:	f003 030f 	and.w	r3, r3, #15
 8009216:	490c      	ldr	r1, [pc, #48]	@ (8009248 <HAL_RCC_ClockConfig+0x26c>)
 8009218:	5ccb      	ldrb	r3, [r1, r3]
 800921a:	f003 031f 	and.w	r3, r3, #31
 800921e:	fa22 f303 	lsr.w	r3, r2, r3
 8009222:	4a0a      	ldr	r2, [pc, #40]	@ (800924c <HAL_RCC_ClockConfig+0x270>)
 8009224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009226:	4b0a      	ldr	r3, [pc, #40]	@ (8009250 <HAL_RCC_ClockConfig+0x274>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4618      	mov	r0, r3
 800922c:	f7fb f894 	bl	8004358 <HAL_InitTick>
 8009230:	4603      	mov	r3, r0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3718      	adds	r7, #24
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	40022000 	.word	0x40022000
 8009240:	40021000 	.word	0x40021000
 8009244:	04c4b400 	.word	0x04c4b400
 8009248:	08016f48 	.word	0x08016f48
 800924c:	2000003c 	.word	0x2000003c
 8009250:	20000040 	.word	0x20000040

08009254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009254:	b480      	push	{r7}
 8009256:	b087      	sub	sp, #28
 8009258:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800925a:	4b2c      	ldr	r3, [pc, #176]	@ (800930c <HAL_RCC_GetSysClockFreq+0xb8>)
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	f003 030c 	and.w	r3, r3, #12
 8009262:	2b04      	cmp	r3, #4
 8009264:	d102      	bne.n	800926c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009266:	4b2a      	ldr	r3, [pc, #168]	@ (8009310 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009268:	613b      	str	r3, [r7, #16]
 800926a:	e047      	b.n	80092fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800926c:	4b27      	ldr	r3, [pc, #156]	@ (800930c <HAL_RCC_GetSysClockFreq+0xb8>)
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f003 030c 	and.w	r3, r3, #12
 8009274:	2b08      	cmp	r3, #8
 8009276:	d102      	bne.n	800927e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009278:	4b26      	ldr	r3, [pc, #152]	@ (8009314 <HAL_RCC_GetSysClockFreq+0xc0>)
 800927a:	613b      	str	r3, [r7, #16]
 800927c:	e03e      	b.n	80092fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800927e:	4b23      	ldr	r3, [pc, #140]	@ (800930c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f003 030c 	and.w	r3, r3, #12
 8009286:	2b0c      	cmp	r3, #12
 8009288:	d136      	bne.n	80092f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800928a:	4b20      	ldr	r3, [pc, #128]	@ (800930c <HAL_RCC_GetSysClockFreq+0xb8>)
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	f003 0303 	and.w	r3, r3, #3
 8009292:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009294:	4b1d      	ldr	r3, [pc, #116]	@ (800930c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	091b      	lsrs	r3, r3, #4
 800929a:	f003 030f 	and.w	r3, r3, #15
 800929e:	3301      	adds	r3, #1
 80092a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2b03      	cmp	r3, #3
 80092a6:	d10c      	bne.n	80092c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80092a8:	4a1a      	ldr	r2, [pc, #104]	@ (8009314 <HAL_RCC_GetSysClockFreq+0xc0>)
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80092b0:	4a16      	ldr	r2, [pc, #88]	@ (800930c <HAL_RCC_GetSysClockFreq+0xb8>)
 80092b2:	68d2      	ldr	r2, [r2, #12]
 80092b4:	0a12      	lsrs	r2, r2, #8
 80092b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80092ba:	fb02 f303 	mul.w	r3, r2, r3
 80092be:	617b      	str	r3, [r7, #20]
      break;
 80092c0:	e00c      	b.n	80092dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80092c2:	4a13      	ldr	r2, [pc, #76]	@ (8009310 <HAL_RCC_GetSysClockFreq+0xbc>)
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80092ca:	4a10      	ldr	r2, [pc, #64]	@ (800930c <HAL_RCC_GetSysClockFreq+0xb8>)
 80092cc:	68d2      	ldr	r2, [r2, #12]
 80092ce:	0a12      	lsrs	r2, r2, #8
 80092d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80092d4:	fb02 f303 	mul.w	r3, r2, r3
 80092d8:	617b      	str	r3, [r7, #20]
      break;
 80092da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80092dc:	4b0b      	ldr	r3, [pc, #44]	@ (800930c <HAL_RCC_GetSysClockFreq+0xb8>)
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	0e5b      	lsrs	r3, r3, #25
 80092e2:	f003 0303 	and.w	r3, r3, #3
 80092e6:	3301      	adds	r3, #1
 80092e8:	005b      	lsls	r3, r3, #1
 80092ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80092ec:	697a      	ldr	r2, [r7, #20]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80092f4:	613b      	str	r3, [r7, #16]
 80092f6:	e001      	b.n	80092fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80092f8:	2300      	movs	r3, #0
 80092fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80092fc:	693b      	ldr	r3, [r7, #16]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	371c      	adds	r7, #28
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	40021000 	.word	0x40021000
 8009310:	00f42400 	.word	0x00f42400
 8009314:	016e3600 	.word	0x016e3600

08009318 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009318:	b480      	push	{r7}
 800931a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800931c:	4b03      	ldr	r3, [pc, #12]	@ (800932c <HAL_RCC_GetHCLKFreq+0x14>)
 800931e:	681b      	ldr	r3, [r3, #0]
}
 8009320:	4618      	mov	r0, r3
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	2000003c 	.word	0x2000003c

08009330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009334:	f7ff fff0 	bl	8009318 <HAL_RCC_GetHCLKFreq>
 8009338:	4602      	mov	r2, r0
 800933a:	4b06      	ldr	r3, [pc, #24]	@ (8009354 <HAL_RCC_GetPCLK1Freq+0x24>)
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	0a1b      	lsrs	r3, r3, #8
 8009340:	f003 0307 	and.w	r3, r3, #7
 8009344:	4904      	ldr	r1, [pc, #16]	@ (8009358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009346:	5ccb      	ldrb	r3, [r1, r3]
 8009348:	f003 031f 	and.w	r3, r3, #31
 800934c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009350:	4618      	mov	r0, r3
 8009352:	bd80      	pop	{r7, pc}
 8009354:	40021000 	.word	0x40021000
 8009358:	08016f58 	.word	0x08016f58

0800935c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009360:	f7ff ffda 	bl	8009318 <HAL_RCC_GetHCLKFreq>
 8009364:	4602      	mov	r2, r0
 8009366:	4b06      	ldr	r3, [pc, #24]	@ (8009380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	0adb      	lsrs	r3, r3, #11
 800936c:	f003 0307 	and.w	r3, r3, #7
 8009370:	4904      	ldr	r1, [pc, #16]	@ (8009384 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009372:	5ccb      	ldrb	r3, [r1, r3]
 8009374:	f003 031f 	and.w	r3, r3, #31
 8009378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800937c:	4618      	mov	r0, r3
 800937e:	bd80      	pop	{r7, pc}
 8009380:	40021000 	.word	0x40021000
 8009384:	08016f58 	.word	0x08016f58

08009388 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009388:	b480      	push	{r7}
 800938a:	b087      	sub	sp, #28
 800938c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800938e:	4b1e      	ldr	r3, [pc, #120]	@ (8009408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	f003 0303 	and.w	r3, r3, #3
 8009396:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009398:	4b1b      	ldr	r3, [pc, #108]	@ (8009408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	091b      	lsrs	r3, r3, #4
 800939e:	f003 030f 	and.w	r3, r3, #15
 80093a2:	3301      	adds	r3, #1
 80093a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	2b03      	cmp	r3, #3
 80093aa:	d10c      	bne.n	80093c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80093ac:	4a17      	ldr	r2, [pc, #92]	@ (800940c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80093b4:	4a14      	ldr	r2, [pc, #80]	@ (8009408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80093b6:	68d2      	ldr	r2, [r2, #12]
 80093b8:	0a12      	lsrs	r2, r2, #8
 80093ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80093be:	fb02 f303 	mul.w	r3, r2, r3
 80093c2:	617b      	str	r3, [r7, #20]
    break;
 80093c4:	e00c      	b.n	80093e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80093c6:	4a12      	ldr	r2, [pc, #72]	@ (8009410 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ce:	4a0e      	ldr	r2, [pc, #56]	@ (8009408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80093d0:	68d2      	ldr	r2, [r2, #12]
 80093d2:	0a12      	lsrs	r2, r2, #8
 80093d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80093d8:	fb02 f303 	mul.w	r3, r2, r3
 80093dc:	617b      	str	r3, [r7, #20]
    break;
 80093de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80093e0:	4b09      	ldr	r3, [pc, #36]	@ (8009408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	0e5b      	lsrs	r3, r3, #25
 80093e6:	f003 0303 	and.w	r3, r3, #3
 80093ea:	3301      	adds	r3, #1
 80093ec:	005b      	lsls	r3, r3, #1
 80093ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80093f0:	697a      	ldr	r2, [r7, #20]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80093fa:	687b      	ldr	r3, [r7, #4]
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	371c      	adds	r7, #28
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	40021000 	.word	0x40021000
 800940c:	016e3600 	.word	0x016e3600
 8009410:	00f42400 	.word	0x00f42400

08009414 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800941c:	2300      	movs	r3, #0
 800941e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009420:	2300      	movs	r3, #0
 8009422:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 8098 	beq.w	8009562 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009432:	2300      	movs	r3, #0
 8009434:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009436:	4b43      	ldr	r3, [pc, #268]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800943a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10d      	bne.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009442:	4b40      	ldr	r3, [pc, #256]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009446:	4a3f      	ldr	r2, [pc, #252]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800944c:	6593      	str	r3, [r2, #88]	@ 0x58
 800944e:	4b3d      	ldr	r3, [pc, #244]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009456:	60bb      	str	r3, [r7, #8]
 8009458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800945a:	2301      	movs	r3, #1
 800945c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800945e:	4b3a      	ldr	r3, [pc, #232]	@ (8009548 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a39      	ldr	r2, [pc, #228]	@ (8009548 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009468:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800946a:	f7fa ffc1 	bl	80043f0 <HAL_GetTick>
 800946e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009470:	e009      	b.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009472:	f7fa ffbd 	bl	80043f0 <HAL_GetTick>
 8009476:	4602      	mov	r2, r0
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	2b02      	cmp	r3, #2
 800947e:	d902      	bls.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009480:	2303      	movs	r3, #3
 8009482:	74fb      	strb	r3, [r7, #19]
        break;
 8009484:	e005      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009486:	4b30      	ldr	r3, [pc, #192]	@ (8009548 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800948e:	2b00      	cmp	r3, #0
 8009490:	d0ef      	beq.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009492:	7cfb      	ldrb	r3, [r7, #19]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d159      	bne.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009498:	4b2a      	ldr	r3, [pc, #168]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800949a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800949e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d01e      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d019      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80094b4:	4b23      	ldr	r3, [pc, #140]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80094c0:	4b20      	ldr	r3, [pc, #128]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094c6:	4a1f      	ldr	r2, [pc, #124]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80094d0:	4b1c      	ldr	r3, [pc, #112]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094d6:	4a1b      	ldr	r2, [pc, #108]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80094e0:	4a18      	ldr	r2, [pc, #96]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d016      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094f2:	f7fa ff7d 	bl	80043f0 <HAL_GetTick>
 80094f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094f8:	e00b      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094fa:	f7fa ff79 	bl	80043f0 <HAL_GetTick>
 80094fe:	4602      	mov	r2, r0
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009508:	4293      	cmp	r3, r2
 800950a:	d902      	bls.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800950c:	2303      	movs	r3, #3
 800950e:	74fb      	strb	r3, [r7, #19]
            break;
 8009510:	e006      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009512:	4b0c      	ldr	r3, [pc, #48]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009518:	f003 0302 	and.w	r3, r3, #2
 800951c:	2b00      	cmp	r3, #0
 800951e:	d0ec      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009520:	7cfb      	ldrb	r3, [r7, #19]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10b      	bne.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009526:	4b07      	ldr	r3, [pc, #28]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800952c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009534:	4903      	ldr	r1, [pc, #12]	@ (8009544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009536:	4313      	orrs	r3, r2
 8009538:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800953c:	e008      	b.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800953e:	7cfb      	ldrb	r3, [r7, #19]
 8009540:	74bb      	strb	r3, [r7, #18]
 8009542:	e005      	b.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009544:	40021000 	.word	0x40021000
 8009548:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800954c:	7cfb      	ldrb	r3, [r7, #19]
 800954e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009550:	7c7b      	ldrb	r3, [r7, #17]
 8009552:	2b01      	cmp	r3, #1
 8009554:	d105      	bne.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009556:	4ba7      	ldr	r3, [pc, #668]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800955a:	4aa6      	ldr	r2, [pc, #664]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800955c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009560:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 0301 	and.w	r3, r3, #1
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00a      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800956e:	4ba1      	ldr	r3, [pc, #644]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009574:	f023 0203 	bic.w	r2, r3, #3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	499d      	ldr	r1, [pc, #628]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800957e:	4313      	orrs	r3, r2
 8009580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 0302 	and.w	r3, r3, #2
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00a      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009590:	4b98      	ldr	r3, [pc, #608]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009596:	f023 020c 	bic.w	r2, r3, #12
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	4995      	ldr	r1, [pc, #596]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095a0:	4313      	orrs	r3, r2
 80095a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0304 	and.w	r3, r3, #4
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00a      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80095b2:	4b90      	ldr	r3, [pc, #576]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	498c      	ldr	r1, [pc, #560]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095c2:	4313      	orrs	r3, r2
 80095c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 0308 	and.w	r3, r3, #8
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00a      	beq.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80095d4:	4b87      	ldr	r3, [pc, #540]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	4984      	ldr	r1, [pc, #528]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095e4:	4313      	orrs	r3, r2
 80095e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0310 	and.w	r3, r3, #16
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00a      	beq.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80095f6:	4b7f      	ldr	r3, [pc, #508]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	695b      	ldr	r3, [r3, #20]
 8009604:	497b      	ldr	r1, [pc, #492]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009606:	4313      	orrs	r3, r2
 8009608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 0320 	and.w	r3, r3, #32
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00a      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009618:	4b76      	ldr	r3, [pc, #472]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800961a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800961e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	699b      	ldr	r3, [r3, #24]
 8009626:	4973      	ldr	r1, [pc, #460]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009628:	4313      	orrs	r3, r2
 800962a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00a      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800963a:	4b6e      	ldr	r3, [pc, #440]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800963c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009640:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	69db      	ldr	r3, [r3, #28]
 8009648:	496a      	ldr	r1, [pc, #424]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800964a:	4313      	orrs	r3, r2
 800964c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00a      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800965c:	4b65      	ldr	r3, [pc, #404]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800965e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009662:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a1b      	ldr	r3, [r3, #32]
 800966a:	4962      	ldr	r1, [pc, #392]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800966c:	4313      	orrs	r3, r2
 800966e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00a      	beq.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800967e:	4b5d      	ldr	r3, [pc, #372]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009684:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800968c:	4959      	ldr	r1, [pc, #356]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800968e:	4313      	orrs	r3, r2
 8009690:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d00a      	beq.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80096a0:	4b54      	ldr	r3, [pc, #336]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80096a6:	f023 0203 	bic.w	r2, r3, #3
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ae:	4951      	ldr	r1, [pc, #324]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096b0:	4313      	orrs	r3, r2
 80096b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00a      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80096c2:	4b4c      	ldr	r3, [pc, #304]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d0:	4948      	ldr	r1, [pc, #288]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d015      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80096e4:	4b43      	ldr	r3, [pc, #268]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096f2:	4940      	ldr	r1, [pc, #256]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096f4:	4313      	orrs	r3, r2
 80096f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009702:	d105      	bne.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009704:	4b3b      	ldr	r3, [pc, #236]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	4a3a      	ldr	r2, [pc, #232]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800970a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800970e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009718:	2b00      	cmp	r3, #0
 800971a:	d015      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800971c:	4b35      	ldr	r3, [pc, #212]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800971e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009722:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800972a:	4932      	ldr	r1, [pc, #200]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800972c:	4313      	orrs	r3, r2
 800972e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009736:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800973a:	d105      	bne.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800973c:	4b2d      	ldr	r3, [pc, #180]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	4a2c      	ldr	r2, [pc, #176]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009742:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009746:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009750:	2b00      	cmp	r3, #0
 8009752:	d015      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009754:	4b27      	ldr	r3, [pc, #156]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800975a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009762:	4924      	ldr	r1, [pc, #144]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009764:	4313      	orrs	r3, r2
 8009766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800976e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009772:	d105      	bne.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009774:	4b1f      	ldr	r3, [pc, #124]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	4a1e      	ldr	r2, [pc, #120]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800977a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800977e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d015      	beq.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800978c:	4b19      	ldr	r3, [pc, #100]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800978e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009792:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800979a:	4916      	ldr	r1, [pc, #88]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800979c:	4313      	orrs	r3, r2
 800979e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097aa:	d105      	bne.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097ac:	4b11      	ldr	r3, [pc, #68]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	4a10      	ldr	r2, [pc, #64]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d019      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80097c4:	4b0b      	ldr	r3, [pc, #44]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097d2:	4908      	ldr	r1, [pc, #32]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097d4:	4313      	orrs	r3, r2
 80097d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097e2:	d109      	bne.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097e4:	4b03      	ldr	r3, [pc, #12]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	4a02      	ldr	r2, [pc, #8]	@ (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097ee:	60d3      	str	r3, [r2, #12]
 80097f0:	e002      	b.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80097f2:	bf00      	nop
 80097f4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009800:	2b00      	cmp	r3, #0
 8009802:	d015      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009804:	4b29      	ldr	r3, [pc, #164]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800980a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009812:	4926      	ldr	r1, [pc, #152]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009814:	4313      	orrs	r3, r2
 8009816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800981e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009822:	d105      	bne.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009824:	4b21      	ldr	r3, [pc, #132]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	4a20      	ldr	r2, [pc, #128]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800982a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800982e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009838:	2b00      	cmp	r3, #0
 800983a:	d015      	beq.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800983c:	4b1b      	ldr	r3, [pc, #108]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800983e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009842:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800984a:	4918      	ldr	r1, [pc, #96]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800984c:	4313      	orrs	r3, r2
 800984e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800985a:	d105      	bne.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800985c:	4b13      	ldr	r3, [pc, #76]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	4a12      	ldr	r2, [pc, #72]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009862:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009866:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009870:	2b00      	cmp	r3, #0
 8009872:	d015      	beq.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009874:	4b0d      	ldr	r3, [pc, #52]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009876:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800987a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009882:	490a      	ldr	r1, [pc, #40]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009884:	4313      	orrs	r3, r2
 8009886:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800988e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009892:	d105      	bne.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009894:	4b05      	ldr	r3, [pc, #20]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	4a04      	ldr	r2, [pc, #16]	@ (80098ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800989a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800989e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80098a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3718      	adds	r7, #24
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	40021000 	.word	0x40021000

080098b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	e049      	b.n	8009956 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d106      	bne.n	80098dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f7fa fa42 	bl	8003d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2202      	movs	r2, #2
 80098e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	3304      	adds	r3, #4
 80098ec:	4619      	mov	r1, r3
 80098ee:	4610      	mov	r0, r2
 80098f0:	f000 fe58 	bl	800a5a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2201      	movs	r2, #1
 80098f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3708      	adds	r7, #8
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
	...

08009960 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009960:	b480      	push	{r7}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b01      	cmp	r3, #1
 8009972:	d001      	beq.n	8009978 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	e04c      	b.n	8009a12 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2202      	movs	r2, #2
 800997c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a26      	ldr	r2, [pc, #152]	@ (8009a20 <HAL_TIM_Base_Start+0xc0>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d022      	beq.n	80099d0 <HAL_TIM_Base_Start+0x70>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009992:	d01d      	beq.n	80099d0 <HAL_TIM_Base_Start+0x70>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a22      	ldr	r2, [pc, #136]	@ (8009a24 <HAL_TIM_Base_Start+0xc4>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d018      	beq.n	80099d0 <HAL_TIM_Base_Start+0x70>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a21      	ldr	r2, [pc, #132]	@ (8009a28 <HAL_TIM_Base_Start+0xc8>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d013      	beq.n	80099d0 <HAL_TIM_Base_Start+0x70>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a1f      	ldr	r2, [pc, #124]	@ (8009a2c <HAL_TIM_Base_Start+0xcc>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d00e      	beq.n	80099d0 <HAL_TIM_Base_Start+0x70>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a1e      	ldr	r2, [pc, #120]	@ (8009a30 <HAL_TIM_Base_Start+0xd0>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d009      	beq.n	80099d0 <HAL_TIM_Base_Start+0x70>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a1c      	ldr	r2, [pc, #112]	@ (8009a34 <HAL_TIM_Base_Start+0xd4>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d004      	beq.n	80099d0 <HAL_TIM_Base_Start+0x70>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a1b      	ldr	r2, [pc, #108]	@ (8009a38 <HAL_TIM_Base_Start+0xd8>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d115      	bne.n	80099fc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	689a      	ldr	r2, [r3, #8]
 80099d6:	4b19      	ldr	r3, [pc, #100]	@ (8009a3c <HAL_TIM_Base_Start+0xdc>)
 80099d8:	4013      	ands	r3, r2
 80099da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2b06      	cmp	r3, #6
 80099e0:	d015      	beq.n	8009a0e <HAL_TIM_Base_Start+0xae>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099e8:	d011      	beq.n	8009a0e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f042 0201 	orr.w	r2, r2, #1
 80099f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099fa:	e008      	b.n	8009a0e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f042 0201 	orr.w	r2, r2, #1
 8009a0a:	601a      	str	r2, [r3, #0]
 8009a0c:	e000      	b.n	8009a10 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3714      	adds	r7, #20
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	40012c00 	.word	0x40012c00
 8009a24:	40000400 	.word	0x40000400
 8009a28:	40000800 	.word	0x40000800
 8009a2c:	40000c00 	.word	0x40000c00
 8009a30:	40013400 	.word	0x40013400
 8009a34:	40014000 	.word	0x40014000
 8009a38:	40015000 	.word	0x40015000
 8009a3c:	00010007 	.word	0x00010007

08009a40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d001      	beq.n	8009a58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e054      	b.n	8009b02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68da      	ldr	r2, [r3, #12]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f042 0201 	orr.w	r2, r2, #1
 8009a6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a26      	ldr	r2, [pc, #152]	@ (8009b10 <HAL_TIM_Base_Start_IT+0xd0>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d022      	beq.n	8009ac0 <HAL_TIM_Base_Start_IT+0x80>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a82:	d01d      	beq.n	8009ac0 <HAL_TIM_Base_Start_IT+0x80>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a22      	ldr	r2, [pc, #136]	@ (8009b14 <HAL_TIM_Base_Start_IT+0xd4>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d018      	beq.n	8009ac0 <HAL_TIM_Base_Start_IT+0x80>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a21      	ldr	r2, [pc, #132]	@ (8009b18 <HAL_TIM_Base_Start_IT+0xd8>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d013      	beq.n	8009ac0 <HAL_TIM_Base_Start_IT+0x80>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a1f      	ldr	r2, [pc, #124]	@ (8009b1c <HAL_TIM_Base_Start_IT+0xdc>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d00e      	beq.n	8009ac0 <HAL_TIM_Base_Start_IT+0x80>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8009b20 <HAL_TIM_Base_Start_IT+0xe0>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d009      	beq.n	8009ac0 <HAL_TIM_Base_Start_IT+0x80>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8009b24 <HAL_TIM_Base_Start_IT+0xe4>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d004      	beq.n	8009ac0 <HAL_TIM_Base_Start_IT+0x80>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a1b      	ldr	r2, [pc, #108]	@ (8009b28 <HAL_TIM_Base_Start_IT+0xe8>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d115      	bne.n	8009aec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	689a      	ldr	r2, [r3, #8]
 8009ac6:	4b19      	ldr	r3, [pc, #100]	@ (8009b2c <HAL_TIM_Base_Start_IT+0xec>)
 8009ac8:	4013      	ands	r3, r2
 8009aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2b06      	cmp	r3, #6
 8009ad0:	d015      	beq.n	8009afe <HAL_TIM_Base_Start_IT+0xbe>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ad8:	d011      	beq.n	8009afe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f042 0201 	orr.w	r2, r2, #1
 8009ae8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aea:	e008      	b.n	8009afe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f042 0201 	orr.w	r2, r2, #1
 8009afa:	601a      	str	r2, [r3, #0]
 8009afc:	e000      	b.n	8009b00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009afe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3714      	adds	r7, #20
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	40012c00 	.word	0x40012c00
 8009b14:	40000400 	.word	0x40000400
 8009b18:	40000800 	.word	0x40000800
 8009b1c:	40000c00 	.word	0x40000c00
 8009b20:	40013400 	.word	0x40013400
 8009b24:	40014000 	.word	0x40014000
 8009b28:	40015000 	.word	0x40015000
 8009b2c:	00010007 	.word	0x00010007

08009b30 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68da      	ldr	r2, [r3, #12]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f022 0201 	bic.w	r2, r2, #1
 8009b46:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	6a1a      	ldr	r2, [r3, #32]
 8009b4e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009b52:	4013      	ands	r3, r2
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10f      	bne.n	8009b78 <HAL_TIM_Base_Stop_IT+0x48>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	6a1a      	ldr	r2, [r3, #32]
 8009b5e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009b62:	4013      	ands	r3, r2
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d107      	bne.n	8009b78 <HAL_TIM_Base_Stop_IT+0x48>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f022 0201 	bic.w	r2, r2, #1
 8009b76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	370c      	adds	r7, #12
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr

08009b8e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b082      	sub	sp, #8
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d101      	bne.n	8009ba0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e049      	b.n	8009c34 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d106      	bne.n	8009bba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7fa f899 	bl	8003cec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2202      	movs	r2, #2
 8009bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	3304      	adds	r3, #4
 8009bca:	4619      	mov	r1, r3
 8009bcc:	4610      	mov	r0, r2
 8009bce:	f000 fce9 	bl	800a5a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2201      	movs	r2, #1
 8009c16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d109      	bne.n	8009c60 <HAL_TIM_PWM_Start+0x24>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	bf14      	ite	ne
 8009c58:	2301      	movne	r3, #1
 8009c5a:	2300      	moveq	r3, #0
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	e03c      	b.n	8009cda <HAL_TIM_PWM_Start+0x9e>
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	2b04      	cmp	r3, #4
 8009c64:	d109      	bne.n	8009c7a <HAL_TIM_PWM_Start+0x3e>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	bf14      	ite	ne
 8009c72:	2301      	movne	r3, #1
 8009c74:	2300      	moveq	r3, #0
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	e02f      	b.n	8009cda <HAL_TIM_PWM_Start+0x9e>
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	2b08      	cmp	r3, #8
 8009c7e:	d109      	bne.n	8009c94 <HAL_TIM_PWM_Start+0x58>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	bf14      	ite	ne
 8009c8c:	2301      	movne	r3, #1
 8009c8e:	2300      	moveq	r3, #0
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	e022      	b.n	8009cda <HAL_TIM_PWM_Start+0x9e>
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	2b0c      	cmp	r3, #12
 8009c98:	d109      	bne.n	8009cae <HAL_TIM_PWM_Start+0x72>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	bf14      	ite	ne
 8009ca6:	2301      	movne	r3, #1
 8009ca8:	2300      	moveq	r3, #0
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	e015      	b.n	8009cda <HAL_TIM_PWM_Start+0x9e>
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	2b10      	cmp	r3, #16
 8009cb2:	d109      	bne.n	8009cc8 <HAL_TIM_PWM_Start+0x8c>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	bf14      	ite	ne
 8009cc0:	2301      	movne	r3, #1
 8009cc2:	2300      	moveq	r3, #0
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	e008      	b.n	8009cda <HAL_TIM_PWM_Start+0x9e>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	bf14      	ite	ne
 8009cd4:	2301      	movne	r3, #1
 8009cd6:	2300      	moveq	r3, #0
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e0a6      	b.n	8009e30 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d104      	bne.n	8009cf2 <HAL_TIM_PWM_Start+0xb6>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2202      	movs	r2, #2
 8009cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009cf0:	e023      	b.n	8009d3a <HAL_TIM_PWM_Start+0xfe>
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	d104      	bne.n	8009d02 <HAL_TIM_PWM_Start+0xc6>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2202      	movs	r2, #2
 8009cfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d00:	e01b      	b.n	8009d3a <HAL_TIM_PWM_Start+0xfe>
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	2b08      	cmp	r3, #8
 8009d06:	d104      	bne.n	8009d12 <HAL_TIM_PWM_Start+0xd6>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2202      	movs	r2, #2
 8009d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d10:	e013      	b.n	8009d3a <HAL_TIM_PWM_Start+0xfe>
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2b0c      	cmp	r3, #12
 8009d16:	d104      	bne.n	8009d22 <HAL_TIM_PWM_Start+0xe6>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2202      	movs	r2, #2
 8009d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d20:	e00b      	b.n	8009d3a <HAL_TIM_PWM_Start+0xfe>
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	2b10      	cmp	r3, #16
 8009d26:	d104      	bne.n	8009d32 <HAL_TIM_PWM_Start+0xf6>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d30:	e003      	b.n	8009d3a <HAL_TIM_PWM_Start+0xfe>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2202      	movs	r2, #2
 8009d36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	6839      	ldr	r1, [r7, #0]
 8009d42:	4618      	mov	r0, r3
 8009d44:	f001 f8a8 	bl	800ae98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a3a      	ldr	r2, [pc, #232]	@ (8009e38 <HAL_TIM_PWM_Start+0x1fc>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d018      	beq.n	8009d84 <HAL_TIM_PWM_Start+0x148>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a39      	ldr	r2, [pc, #228]	@ (8009e3c <HAL_TIM_PWM_Start+0x200>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d013      	beq.n	8009d84 <HAL_TIM_PWM_Start+0x148>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a37      	ldr	r2, [pc, #220]	@ (8009e40 <HAL_TIM_PWM_Start+0x204>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d00e      	beq.n	8009d84 <HAL_TIM_PWM_Start+0x148>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a36      	ldr	r2, [pc, #216]	@ (8009e44 <HAL_TIM_PWM_Start+0x208>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d009      	beq.n	8009d84 <HAL_TIM_PWM_Start+0x148>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a34      	ldr	r2, [pc, #208]	@ (8009e48 <HAL_TIM_PWM_Start+0x20c>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d004      	beq.n	8009d84 <HAL_TIM_PWM_Start+0x148>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a33      	ldr	r2, [pc, #204]	@ (8009e4c <HAL_TIM_PWM_Start+0x210>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d101      	bne.n	8009d88 <HAL_TIM_PWM_Start+0x14c>
 8009d84:	2301      	movs	r3, #1
 8009d86:	e000      	b.n	8009d8a <HAL_TIM_PWM_Start+0x14e>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d007      	beq.n	8009d9e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d9c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a25      	ldr	r2, [pc, #148]	@ (8009e38 <HAL_TIM_PWM_Start+0x1fc>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d022      	beq.n	8009dee <HAL_TIM_PWM_Start+0x1b2>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009db0:	d01d      	beq.n	8009dee <HAL_TIM_PWM_Start+0x1b2>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a26      	ldr	r2, [pc, #152]	@ (8009e50 <HAL_TIM_PWM_Start+0x214>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d018      	beq.n	8009dee <HAL_TIM_PWM_Start+0x1b2>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a24      	ldr	r2, [pc, #144]	@ (8009e54 <HAL_TIM_PWM_Start+0x218>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d013      	beq.n	8009dee <HAL_TIM_PWM_Start+0x1b2>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a23      	ldr	r2, [pc, #140]	@ (8009e58 <HAL_TIM_PWM_Start+0x21c>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d00e      	beq.n	8009dee <HAL_TIM_PWM_Start+0x1b2>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a19      	ldr	r2, [pc, #100]	@ (8009e3c <HAL_TIM_PWM_Start+0x200>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d009      	beq.n	8009dee <HAL_TIM_PWM_Start+0x1b2>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a18      	ldr	r2, [pc, #96]	@ (8009e40 <HAL_TIM_PWM_Start+0x204>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d004      	beq.n	8009dee <HAL_TIM_PWM_Start+0x1b2>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a18      	ldr	r2, [pc, #96]	@ (8009e4c <HAL_TIM_PWM_Start+0x210>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d115      	bne.n	8009e1a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	689a      	ldr	r2, [r3, #8]
 8009df4:	4b19      	ldr	r3, [pc, #100]	@ (8009e5c <HAL_TIM_PWM_Start+0x220>)
 8009df6:	4013      	ands	r3, r2
 8009df8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2b06      	cmp	r3, #6
 8009dfe:	d015      	beq.n	8009e2c <HAL_TIM_PWM_Start+0x1f0>
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e06:	d011      	beq.n	8009e2c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f042 0201 	orr.w	r2, r2, #1
 8009e16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e18:	e008      	b.n	8009e2c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f042 0201 	orr.w	r2, r2, #1
 8009e28:	601a      	str	r2, [r3, #0]
 8009e2a:	e000      	b.n	8009e2e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	40012c00 	.word	0x40012c00
 8009e3c:	40013400 	.word	0x40013400
 8009e40:	40014000 	.word	0x40014000
 8009e44:	40014400 	.word	0x40014400
 8009e48:	40014800 	.word	0x40014800
 8009e4c:	40015000 	.word	0x40015000
 8009e50:	40000400 	.word	0x40000400
 8009e54:	40000800 	.word	0x40000800
 8009e58:	40000c00 	.word	0x40000c00
 8009e5c:	00010007 	.word	0x00010007

08009e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	f003 0302 	and.w	r3, r3, #2
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d020      	beq.n	8009ec4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f003 0302 	and.w	r3, r3, #2
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d01b      	beq.n	8009ec4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f06f 0202 	mvn.w	r2, #2
 8009e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	f003 0303 	and.w	r3, r3, #3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d003      	beq.n	8009eb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fb5c 	bl	800a568 <HAL_TIM_IC_CaptureCallback>
 8009eb0:	e005      	b.n	8009ebe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fb4e 	bl	800a554 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 fb5f 	bl	800a57c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	f003 0304 	and.w	r3, r3, #4
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d020      	beq.n	8009f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f003 0304 	and.w	r3, r3, #4
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d01b      	beq.n	8009f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f06f 0204 	mvn.w	r2, #4
 8009ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2202      	movs	r2, #2
 8009ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d003      	beq.n	8009efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fb36 	bl	800a568 <HAL_TIM_IC_CaptureCallback>
 8009efc:	e005      	b.n	8009f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fb28 	bl	800a554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 fb39 	bl	800a57c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	f003 0308 	and.w	r3, r3, #8
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d020      	beq.n	8009f5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f003 0308 	and.w	r3, r3, #8
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d01b      	beq.n	8009f5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f06f 0208 	mvn.w	r2, #8
 8009f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2204      	movs	r2, #4
 8009f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	69db      	ldr	r3, [r3, #28]
 8009f3a:	f003 0303 	and.w	r3, r3, #3
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d003      	beq.n	8009f4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fb10 	bl	800a568 <HAL_TIM_IC_CaptureCallback>
 8009f48:	e005      	b.n	8009f56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 fb02 	bl	800a554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 fb13 	bl	800a57c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	f003 0310 	and.w	r3, r3, #16
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d020      	beq.n	8009fa8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f003 0310 	and.w	r3, r3, #16
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d01b      	beq.n	8009fa8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f06f 0210 	mvn.w	r2, #16
 8009f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2208      	movs	r2, #8
 8009f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	69db      	ldr	r3, [r3, #28]
 8009f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d003      	beq.n	8009f96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 faea 	bl	800a568 <HAL_TIM_IC_CaptureCallback>
 8009f94:	e005      	b.n	8009fa2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fadc 	bl	800a554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 faed 	bl	800a57c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	f003 0301 	and.w	r3, r3, #1
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00c      	beq.n	8009fcc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f003 0301 	and.w	r3, r3, #1
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d007      	beq.n	8009fcc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f06f 0201 	mvn.w	r2, #1
 8009fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f7f8 fdc2 	bl	8002b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d104      	bne.n	8009fe0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00c      	beq.n	8009ffa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d007      	beq.n	8009ffa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f001 f8a9 	bl	800b14c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a000:	2b00      	cmp	r3, #0
 800a002:	d00c      	beq.n	800a01e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d007      	beq.n	800a01e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f001 f8a1 	bl	800b160 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00c      	beq.n	800a042 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d007      	beq.n	800a042 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a03a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 faa7 	bl	800a590 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	f003 0320 	and.w	r3, r3, #32
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00c      	beq.n	800a066 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f003 0320 	and.w	r3, r3, #32
 800a052:	2b00      	cmp	r3, #0
 800a054:	d007      	beq.n	800a066 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f06f 0220 	mvn.w	r2, #32
 800a05e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f001 f869 	bl	800b138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00c      	beq.n	800a08a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a076:	2b00      	cmp	r3, #0
 800a078:	d007      	beq.n	800a08a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f001 f875 	bl	800b174 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00c      	beq.n	800a0ae <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d007      	beq.n	800a0ae <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a0a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f001 f86d 	bl	800b188 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00c      	beq.n	800a0d2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d007      	beq.n	800a0d2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a0ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f001 f865 	bl	800b19c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00c      	beq.n	800a0f6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d007      	beq.n	800a0f6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a0ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f001 f85d 	bl	800b1b0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a0f6:	bf00      	nop
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
	...

0800a100 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a10c:	2300      	movs	r3, #0
 800a10e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a116:	2b01      	cmp	r3, #1
 800a118:	d101      	bne.n	800a11e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a11a:	2302      	movs	r3, #2
 800a11c:	e0ff      	b.n	800a31e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2b14      	cmp	r3, #20
 800a12a:	f200 80f0 	bhi.w	800a30e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a12e:	a201      	add	r2, pc, #4	@ (adr r2, 800a134 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a134:	0800a189 	.word	0x0800a189
 800a138:	0800a30f 	.word	0x0800a30f
 800a13c:	0800a30f 	.word	0x0800a30f
 800a140:	0800a30f 	.word	0x0800a30f
 800a144:	0800a1c9 	.word	0x0800a1c9
 800a148:	0800a30f 	.word	0x0800a30f
 800a14c:	0800a30f 	.word	0x0800a30f
 800a150:	0800a30f 	.word	0x0800a30f
 800a154:	0800a20b 	.word	0x0800a20b
 800a158:	0800a30f 	.word	0x0800a30f
 800a15c:	0800a30f 	.word	0x0800a30f
 800a160:	0800a30f 	.word	0x0800a30f
 800a164:	0800a24b 	.word	0x0800a24b
 800a168:	0800a30f 	.word	0x0800a30f
 800a16c:	0800a30f 	.word	0x0800a30f
 800a170:	0800a30f 	.word	0x0800a30f
 800a174:	0800a28d 	.word	0x0800a28d
 800a178:	0800a30f 	.word	0x0800a30f
 800a17c:	0800a30f 	.word	0x0800a30f
 800a180:	0800a30f 	.word	0x0800a30f
 800a184:	0800a2cd 	.word	0x0800a2cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68b9      	ldr	r1, [r7, #8]
 800a18e:	4618      	mov	r0, r3
 800a190:	f000 fabc 	bl	800a70c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	699a      	ldr	r2, [r3, #24]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f042 0208 	orr.w	r2, r2, #8
 800a1a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	699a      	ldr	r2, [r3, #24]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f022 0204 	bic.w	r2, r2, #4
 800a1b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	6999      	ldr	r1, [r3, #24]
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	691a      	ldr	r2, [r3, #16]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	430a      	orrs	r2, r1
 800a1c4:	619a      	str	r2, [r3, #24]
      break;
 800a1c6:	e0a5      	b.n	800a314 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	68b9      	ldr	r1, [r7, #8]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 fb36 	bl	800a840 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	699a      	ldr	r2, [r3, #24]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a1e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	699a      	ldr	r2, [r3, #24]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	6999      	ldr	r1, [r3, #24]
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	691b      	ldr	r3, [r3, #16]
 800a1fe:	021a      	lsls	r2, r3, #8
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	430a      	orrs	r2, r1
 800a206:	619a      	str	r2, [r3, #24]
      break;
 800a208:	e084      	b.n	800a314 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68b9      	ldr	r1, [r7, #8]
 800a210:	4618      	mov	r0, r3
 800a212:	f000 fba9 	bl	800a968 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	69da      	ldr	r2, [r3, #28]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f042 0208 	orr.w	r2, r2, #8
 800a224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	69da      	ldr	r2, [r3, #28]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f022 0204 	bic.w	r2, r2, #4
 800a234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	69d9      	ldr	r1, [r3, #28]
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	691a      	ldr	r2, [r3, #16]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	430a      	orrs	r2, r1
 800a246:	61da      	str	r2, [r3, #28]
      break;
 800a248:	e064      	b.n	800a314 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68b9      	ldr	r1, [r7, #8]
 800a250:	4618      	mov	r0, r3
 800a252:	f000 fc1b 	bl	800aa8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	69da      	ldr	r2, [r3, #28]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	69da      	ldr	r2, [r3, #28]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	69d9      	ldr	r1, [r3, #28]
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	691b      	ldr	r3, [r3, #16]
 800a280:	021a      	lsls	r2, r3, #8
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	430a      	orrs	r2, r1
 800a288:	61da      	str	r2, [r3, #28]
      break;
 800a28a:	e043      	b.n	800a314 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	68b9      	ldr	r1, [r7, #8]
 800a292:	4618      	mov	r0, r3
 800a294:	f000 fc8e 	bl	800abb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f042 0208 	orr.w	r2, r2, #8
 800a2a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f022 0204 	bic.w	r2, r2, #4
 800a2b6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	691a      	ldr	r2, [r3, #16]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	430a      	orrs	r2, r1
 800a2c8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a2ca:	e023      	b.n	800a314 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68b9      	ldr	r1, [r7, #8]
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f000 fcd8 	bl	800ac88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a2e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a2f6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	021a      	lsls	r2, r3, #8
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	430a      	orrs	r2, r1
 800a30a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a30c:	e002      	b.n	800a314 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a30e:	2301      	movs	r3, #1
 800a310:	75fb      	strb	r3, [r7, #23]
      break;
 800a312:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2200      	movs	r2, #0
 800a318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a31c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3718      	adds	r7, #24
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop

0800a328 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a332:	2300      	movs	r3, #0
 800a334:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d101      	bne.n	800a344 <HAL_TIM_ConfigClockSource+0x1c>
 800a340:	2302      	movs	r3, #2
 800a342:	e0f6      	b.n	800a532 <HAL_TIM_ConfigClockSource+0x20a>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2202      	movs	r2, #2
 800a350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a362:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a36e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a6f      	ldr	r2, [pc, #444]	@ (800a53c <HAL_TIM_ConfigClockSource+0x214>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	f000 80c1 	beq.w	800a506 <HAL_TIM_ConfigClockSource+0x1de>
 800a384:	4a6d      	ldr	r2, [pc, #436]	@ (800a53c <HAL_TIM_ConfigClockSource+0x214>)
 800a386:	4293      	cmp	r3, r2
 800a388:	f200 80c6 	bhi.w	800a518 <HAL_TIM_ConfigClockSource+0x1f0>
 800a38c:	4a6c      	ldr	r2, [pc, #432]	@ (800a540 <HAL_TIM_ConfigClockSource+0x218>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	f000 80b9 	beq.w	800a506 <HAL_TIM_ConfigClockSource+0x1de>
 800a394:	4a6a      	ldr	r2, [pc, #424]	@ (800a540 <HAL_TIM_ConfigClockSource+0x218>)
 800a396:	4293      	cmp	r3, r2
 800a398:	f200 80be 	bhi.w	800a518 <HAL_TIM_ConfigClockSource+0x1f0>
 800a39c:	4a69      	ldr	r2, [pc, #420]	@ (800a544 <HAL_TIM_ConfigClockSource+0x21c>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	f000 80b1 	beq.w	800a506 <HAL_TIM_ConfigClockSource+0x1de>
 800a3a4:	4a67      	ldr	r2, [pc, #412]	@ (800a544 <HAL_TIM_ConfigClockSource+0x21c>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	f200 80b6 	bhi.w	800a518 <HAL_TIM_ConfigClockSource+0x1f0>
 800a3ac:	4a66      	ldr	r2, [pc, #408]	@ (800a548 <HAL_TIM_ConfigClockSource+0x220>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	f000 80a9 	beq.w	800a506 <HAL_TIM_ConfigClockSource+0x1de>
 800a3b4:	4a64      	ldr	r2, [pc, #400]	@ (800a548 <HAL_TIM_ConfigClockSource+0x220>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	f200 80ae 	bhi.w	800a518 <HAL_TIM_ConfigClockSource+0x1f0>
 800a3bc:	4a63      	ldr	r2, [pc, #396]	@ (800a54c <HAL_TIM_ConfigClockSource+0x224>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	f000 80a1 	beq.w	800a506 <HAL_TIM_ConfigClockSource+0x1de>
 800a3c4:	4a61      	ldr	r2, [pc, #388]	@ (800a54c <HAL_TIM_ConfigClockSource+0x224>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	f200 80a6 	bhi.w	800a518 <HAL_TIM_ConfigClockSource+0x1f0>
 800a3cc:	4a60      	ldr	r2, [pc, #384]	@ (800a550 <HAL_TIM_ConfigClockSource+0x228>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	f000 8099 	beq.w	800a506 <HAL_TIM_ConfigClockSource+0x1de>
 800a3d4:	4a5e      	ldr	r2, [pc, #376]	@ (800a550 <HAL_TIM_ConfigClockSource+0x228>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	f200 809e 	bhi.w	800a518 <HAL_TIM_ConfigClockSource+0x1f0>
 800a3dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a3e0:	f000 8091 	beq.w	800a506 <HAL_TIM_ConfigClockSource+0x1de>
 800a3e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a3e8:	f200 8096 	bhi.w	800a518 <HAL_TIM_ConfigClockSource+0x1f0>
 800a3ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a3f0:	f000 8089 	beq.w	800a506 <HAL_TIM_ConfigClockSource+0x1de>
 800a3f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a3f8:	f200 808e 	bhi.w	800a518 <HAL_TIM_ConfigClockSource+0x1f0>
 800a3fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a400:	d03e      	beq.n	800a480 <HAL_TIM_ConfigClockSource+0x158>
 800a402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a406:	f200 8087 	bhi.w	800a518 <HAL_TIM_ConfigClockSource+0x1f0>
 800a40a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a40e:	f000 8086 	beq.w	800a51e <HAL_TIM_ConfigClockSource+0x1f6>
 800a412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a416:	d87f      	bhi.n	800a518 <HAL_TIM_ConfigClockSource+0x1f0>
 800a418:	2b70      	cmp	r3, #112	@ 0x70
 800a41a:	d01a      	beq.n	800a452 <HAL_TIM_ConfigClockSource+0x12a>
 800a41c:	2b70      	cmp	r3, #112	@ 0x70
 800a41e:	d87b      	bhi.n	800a518 <HAL_TIM_ConfigClockSource+0x1f0>
 800a420:	2b60      	cmp	r3, #96	@ 0x60
 800a422:	d050      	beq.n	800a4c6 <HAL_TIM_ConfigClockSource+0x19e>
 800a424:	2b60      	cmp	r3, #96	@ 0x60
 800a426:	d877      	bhi.n	800a518 <HAL_TIM_ConfigClockSource+0x1f0>
 800a428:	2b50      	cmp	r3, #80	@ 0x50
 800a42a:	d03c      	beq.n	800a4a6 <HAL_TIM_ConfigClockSource+0x17e>
 800a42c:	2b50      	cmp	r3, #80	@ 0x50
 800a42e:	d873      	bhi.n	800a518 <HAL_TIM_ConfigClockSource+0x1f0>
 800a430:	2b40      	cmp	r3, #64	@ 0x40
 800a432:	d058      	beq.n	800a4e6 <HAL_TIM_ConfigClockSource+0x1be>
 800a434:	2b40      	cmp	r3, #64	@ 0x40
 800a436:	d86f      	bhi.n	800a518 <HAL_TIM_ConfigClockSource+0x1f0>
 800a438:	2b30      	cmp	r3, #48	@ 0x30
 800a43a:	d064      	beq.n	800a506 <HAL_TIM_ConfigClockSource+0x1de>
 800a43c:	2b30      	cmp	r3, #48	@ 0x30
 800a43e:	d86b      	bhi.n	800a518 <HAL_TIM_ConfigClockSource+0x1f0>
 800a440:	2b20      	cmp	r3, #32
 800a442:	d060      	beq.n	800a506 <HAL_TIM_ConfigClockSource+0x1de>
 800a444:	2b20      	cmp	r3, #32
 800a446:	d867      	bhi.n	800a518 <HAL_TIM_ConfigClockSource+0x1f0>
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d05c      	beq.n	800a506 <HAL_TIM_ConfigClockSource+0x1de>
 800a44c:	2b10      	cmp	r3, #16
 800a44e:	d05a      	beq.n	800a506 <HAL_TIM_ConfigClockSource+0x1de>
 800a450:	e062      	b.n	800a518 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a462:	f000 fcf9 	bl	800ae58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a474:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68ba      	ldr	r2, [r7, #8]
 800a47c:	609a      	str	r2, [r3, #8]
      break;
 800a47e:	e04f      	b.n	800a520 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a490:	f000 fce2 	bl	800ae58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	689a      	ldr	r2, [r3, #8]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a4a2:	609a      	str	r2, [r3, #8]
      break;
 800a4a4:	e03c      	b.n	800a520 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	f000 fc54 	bl	800ad60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2150      	movs	r1, #80	@ 0x50
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 fcad 	bl	800ae1e <TIM_ITRx_SetConfig>
      break;
 800a4c4:	e02c      	b.n	800a520 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	f000 fc73 	bl	800adbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2160      	movs	r1, #96	@ 0x60
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f000 fc9d 	bl	800ae1e <TIM_ITRx_SetConfig>
      break;
 800a4e4:	e01c      	b.n	800a520 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	f000 fc34 	bl	800ad60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2140      	movs	r1, #64	@ 0x40
 800a4fe:	4618      	mov	r0, r3
 800a500:	f000 fc8d 	bl	800ae1e <TIM_ITRx_SetConfig>
      break;
 800a504:	e00c      	b.n	800a520 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4619      	mov	r1, r3
 800a510:	4610      	mov	r0, r2
 800a512:	f000 fc84 	bl	800ae1e <TIM_ITRx_SetConfig>
      break;
 800a516:	e003      	b.n	800a520 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	73fb      	strb	r3, [r7, #15]
      break;
 800a51c:	e000      	b.n	800a520 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800a51e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2201      	movs	r2, #1
 800a524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a530:	7bfb      	ldrb	r3, [r7, #15]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	00100070 	.word	0x00100070
 800a540:	00100060 	.word	0x00100060
 800a544:	00100050 	.word	0x00100050
 800a548:	00100040 	.word	0x00100040
 800a54c:	00100030 	.word	0x00100030
 800a550:	00100020 	.word	0x00100020

0800a554 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a55c:	bf00      	nop
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a570:	bf00      	nop
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a598:	bf00      	nop
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a4c      	ldr	r2, [pc, #304]	@ (800a6e8 <TIM_Base_SetConfig+0x144>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d017      	beq.n	800a5ec <TIM_Base_SetConfig+0x48>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5c2:	d013      	beq.n	800a5ec <TIM_Base_SetConfig+0x48>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a49      	ldr	r2, [pc, #292]	@ (800a6ec <TIM_Base_SetConfig+0x148>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d00f      	beq.n	800a5ec <TIM_Base_SetConfig+0x48>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4a48      	ldr	r2, [pc, #288]	@ (800a6f0 <TIM_Base_SetConfig+0x14c>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d00b      	beq.n	800a5ec <TIM_Base_SetConfig+0x48>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a47      	ldr	r2, [pc, #284]	@ (800a6f4 <TIM_Base_SetConfig+0x150>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d007      	beq.n	800a5ec <TIM_Base_SetConfig+0x48>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a46      	ldr	r2, [pc, #280]	@ (800a6f8 <TIM_Base_SetConfig+0x154>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d003      	beq.n	800a5ec <TIM_Base_SetConfig+0x48>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a45      	ldr	r2, [pc, #276]	@ (800a6fc <TIM_Base_SetConfig+0x158>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d108      	bne.n	800a5fe <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	4a39      	ldr	r2, [pc, #228]	@ (800a6e8 <TIM_Base_SetConfig+0x144>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d023      	beq.n	800a64e <TIM_Base_SetConfig+0xaa>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a60c:	d01f      	beq.n	800a64e <TIM_Base_SetConfig+0xaa>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4a36      	ldr	r2, [pc, #216]	@ (800a6ec <TIM_Base_SetConfig+0x148>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d01b      	beq.n	800a64e <TIM_Base_SetConfig+0xaa>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a35      	ldr	r2, [pc, #212]	@ (800a6f0 <TIM_Base_SetConfig+0x14c>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d017      	beq.n	800a64e <TIM_Base_SetConfig+0xaa>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a34      	ldr	r2, [pc, #208]	@ (800a6f4 <TIM_Base_SetConfig+0x150>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d013      	beq.n	800a64e <TIM_Base_SetConfig+0xaa>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a33      	ldr	r2, [pc, #204]	@ (800a6f8 <TIM_Base_SetConfig+0x154>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d00f      	beq.n	800a64e <TIM_Base_SetConfig+0xaa>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a33      	ldr	r2, [pc, #204]	@ (800a700 <TIM_Base_SetConfig+0x15c>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d00b      	beq.n	800a64e <TIM_Base_SetConfig+0xaa>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a32      	ldr	r2, [pc, #200]	@ (800a704 <TIM_Base_SetConfig+0x160>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d007      	beq.n	800a64e <TIM_Base_SetConfig+0xaa>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a31      	ldr	r2, [pc, #196]	@ (800a708 <TIM_Base_SetConfig+0x164>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d003      	beq.n	800a64e <TIM_Base_SetConfig+0xaa>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a2c      	ldr	r2, [pc, #176]	@ (800a6fc <TIM_Base_SetConfig+0x158>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d108      	bne.n	800a660 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	68fa      	ldr	r2, [r7, #12]
 800a65c:	4313      	orrs	r3, r2
 800a65e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	695b      	ldr	r3, [r3, #20]
 800a66a:	4313      	orrs	r3, r2
 800a66c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	689a      	ldr	r2, [r3, #8]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a18      	ldr	r2, [pc, #96]	@ (800a6e8 <TIM_Base_SetConfig+0x144>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d013      	beq.n	800a6b4 <TIM_Base_SetConfig+0x110>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a1a      	ldr	r2, [pc, #104]	@ (800a6f8 <TIM_Base_SetConfig+0x154>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d00f      	beq.n	800a6b4 <TIM_Base_SetConfig+0x110>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4a1a      	ldr	r2, [pc, #104]	@ (800a700 <TIM_Base_SetConfig+0x15c>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d00b      	beq.n	800a6b4 <TIM_Base_SetConfig+0x110>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	4a19      	ldr	r2, [pc, #100]	@ (800a704 <TIM_Base_SetConfig+0x160>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d007      	beq.n	800a6b4 <TIM_Base_SetConfig+0x110>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a18      	ldr	r2, [pc, #96]	@ (800a708 <TIM_Base_SetConfig+0x164>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d003      	beq.n	800a6b4 <TIM_Base_SetConfig+0x110>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a13      	ldr	r2, [pc, #76]	@ (800a6fc <TIM_Base_SetConfig+0x158>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d103      	bne.n	800a6bc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	691a      	ldr	r2, [r3, #16]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	f003 0301 	and.w	r3, r3, #1
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d105      	bne.n	800a6da <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	691b      	ldr	r3, [r3, #16]
 800a6d2:	f023 0201 	bic.w	r2, r3, #1
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	611a      	str	r2, [r3, #16]
  }
}
 800a6da:	bf00      	nop
 800a6dc:	3714      	adds	r7, #20
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	40012c00 	.word	0x40012c00
 800a6ec:	40000400 	.word	0x40000400
 800a6f0:	40000800 	.word	0x40000800
 800a6f4:	40000c00 	.word	0x40000c00
 800a6f8:	40013400 	.word	0x40013400
 800a6fc:	40015000 	.word	0x40015000
 800a700:	40014000 	.word	0x40014000
 800a704:	40014400 	.word	0x40014400
 800a708:	40014800 	.word	0x40014800

0800a70c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b087      	sub	sp, #28
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a1b      	ldr	r3, [r3, #32]
 800a71a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6a1b      	ldr	r3, [r3, #32]
 800a720:	f023 0201 	bic.w	r2, r3, #1
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a73a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a73e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f023 0303 	bic.w	r3, r3, #3
 800a746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	4313      	orrs	r3, r2
 800a750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	f023 0302 	bic.w	r3, r3, #2
 800a758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	697a      	ldr	r2, [r7, #20]
 800a760:	4313      	orrs	r3, r2
 800a762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4a30      	ldr	r2, [pc, #192]	@ (800a828 <TIM_OC1_SetConfig+0x11c>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d013      	beq.n	800a794 <TIM_OC1_SetConfig+0x88>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a2f      	ldr	r2, [pc, #188]	@ (800a82c <TIM_OC1_SetConfig+0x120>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d00f      	beq.n	800a794 <TIM_OC1_SetConfig+0x88>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a2e      	ldr	r2, [pc, #184]	@ (800a830 <TIM_OC1_SetConfig+0x124>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d00b      	beq.n	800a794 <TIM_OC1_SetConfig+0x88>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a2d      	ldr	r2, [pc, #180]	@ (800a834 <TIM_OC1_SetConfig+0x128>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d007      	beq.n	800a794 <TIM_OC1_SetConfig+0x88>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4a2c      	ldr	r2, [pc, #176]	@ (800a838 <TIM_OC1_SetConfig+0x12c>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d003      	beq.n	800a794 <TIM_OC1_SetConfig+0x88>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a2b      	ldr	r2, [pc, #172]	@ (800a83c <TIM_OC1_SetConfig+0x130>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d10c      	bne.n	800a7ae <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	f023 0308 	bic.w	r3, r3, #8
 800a79a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	697a      	ldr	r2, [r7, #20]
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	f023 0304 	bic.w	r3, r3, #4
 800a7ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4a1d      	ldr	r2, [pc, #116]	@ (800a828 <TIM_OC1_SetConfig+0x11c>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d013      	beq.n	800a7de <TIM_OC1_SetConfig+0xd2>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	4a1c      	ldr	r2, [pc, #112]	@ (800a82c <TIM_OC1_SetConfig+0x120>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d00f      	beq.n	800a7de <TIM_OC1_SetConfig+0xd2>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4a1b      	ldr	r2, [pc, #108]	@ (800a830 <TIM_OC1_SetConfig+0x124>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d00b      	beq.n	800a7de <TIM_OC1_SetConfig+0xd2>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	4a1a      	ldr	r2, [pc, #104]	@ (800a834 <TIM_OC1_SetConfig+0x128>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d007      	beq.n	800a7de <TIM_OC1_SetConfig+0xd2>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	4a19      	ldr	r2, [pc, #100]	@ (800a838 <TIM_OC1_SetConfig+0x12c>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d003      	beq.n	800a7de <TIM_OC1_SetConfig+0xd2>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4a18      	ldr	r2, [pc, #96]	@ (800a83c <TIM_OC1_SetConfig+0x130>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d111      	bne.n	800a802 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a7ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	695b      	ldr	r3, [r3, #20]
 800a7f2:	693a      	ldr	r2, [r7, #16]
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	699b      	ldr	r3, [r3, #24]
 800a7fc:	693a      	ldr	r2, [r7, #16]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	693a      	ldr	r2, [r7, #16]
 800a806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	685a      	ldr	r2, [r3, #4]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	697a      	ldr	r2, [r7, #20]
 800a81a:	621a      	str	r2, [r3, #32]
}
 800a81c:	bf00      	nop
 800a81e:	371c      	adds	r7, #28
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr
 800a828:	40012c00 	.word	0x40012c00
 800a82c:	40013400 	.word	0x40013400
 800a830:	40014000 	.word	0x40014000
 800a834:	40014400 	.word	0x40014400
 800a838:	40014800 	.word	0x40014800
 800a83c:	40015000 	.word	0x40015000

0800a840 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a840:	b480      	push	{r7}
 800a842:	b087      	sub	sp, #28
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a1b      	ldr	r3, [r3, #32]
 800a84e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6a1b      	ldr	r3, [r3, #32]
 800a854:	f023 0210 	bic.w	r2, r3, #16
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	699b      	ldr	r3, [r3, #24]
 800a866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a86e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a87a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	021b      	lsls	r3, r3, #8
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	4313      	orrs	r3, r2
 800a886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	f023 0320 	bic.w	r3, r3, #32
 800a88e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	011b      	lsls	r3, r3, #4
 800a896:	697a      	ldr	r2, [r7, #20]
 800a898:	4313      	orrs	r3, r2
 800a89a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4a2c      	ldr	r2, [pc, #176]	@ (800a950 <TIM_OC2_SetConfig+0x110>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d007      	beq.n	800a8b4 <TIM_OC2_SetConfig+0x74>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a2b      	ldr	r2, [pc, #172]	@ (800a954 <TIM_OC2_SetConfig+0x114>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d003      	beq.n	800a8b4 <TIM_OC2_SetConfig+0x74>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	4a2a      	ldr	r2, [pc, #168]	@ (800a958 <TIM_OC2_SetConfig+0x118>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d10d      	bne.n	800a8d0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	011b      	lsls	r3, r3, #4
 800a8c2:	697a      	ldr	r2, [r7, #20]
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4a1f      	ldr	r2, [pc, #124]	@ (800a950 <TIM_OC2_SetConfig+0x110>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d013      	beq.n	800a900 <TIM_OC2_SetConfig+0xc0>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a1e      	ldr	r2, [pc, #120]	@ (800a954 <TIM_OC2_SetConfig+0x114>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d00f      	beq.n	800a900 <TIM_OC2_SetConfig+0xc0>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a1e      	ldr	r2, [pc, #120]	@ (800a95c <TIM_OC2_SetConfig+0x11c>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d00b      	beq.n	800a900 <TIM_OC2_SetConfig+0xc0>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4a1d      	ldr	r2, [pc, #116]	@ (800a960 <TIM_OC2_SetConfig+0x120>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d007      	beq.n	800a900 <TIM_OC2_SetConfig+0xc0>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a1c      	ldr	r2, [pc, #112]	@ (800a964 <TIM_OC2_SetConfig+0x124>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d003      	beq.n	800a900 <TIM_OC2_SetConfig+0xc0>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4a17      	ldr	r2, [pc, #92]	@ (800a958 <TIM_OC2_SetConfig+0x118>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d113      	bne.n	800a928 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a906:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a90e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	695b      	ldr	r3, [r3, #20]
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	693a      	ldr	r2, [r7, #16]
 800a918:	4313      	orrs	r3, r2
 800a91a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	699b      	ldr	r3, [r3, #24]
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	693a      	ldr	r2, [r7, #16]
 800a924:	4313      	orrs	r3, r2
 800a926:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	693a      	ldr	r2, [r7, #16]
 800a92c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	685a      	ldr	r2, [r3, #4]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	697a      	ldr	r2, [r7, #20]
 800a940:	621a      	str	r2, [r3, #32]
}
 800a942:	bf00      	nop
 800a944:	371c      	adds	r7, #28
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	40012c00 	.word	0x40012c00
 800a954:	40013400 	.word	0x40013400
 800a958:	40015000 	.word	0x40015000
 800a95c:	40014000 	.word	0x40014000
 800a960:	40014400 	.word	0x40014400
 800a964:	40014800 	.word	0x40014800

0800a968 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a968:	b480      	push	{r7}
 800a96a:	b087      	sub	sp, #28
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6a1b      	ldr	r3, [r3, #32]
 800a976:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6a1b      	ldr	r3, [r3, #32]
 800a97c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	69db      	ldr	r3, [r3, #28]
 800a98e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a99a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f023 0303 	bic.w	r3, r3, #3
 800a9a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a9b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	021b      	lsls	r3, r3, #8
 800a9bc:	697a      	ldr	r2, [r7, #20]
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4a2b      	ldr	r2, [pc, #172]	@ (800aa74 <TIM_OC3_SetConfig+0x10c>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d007      	beq.n	800a9da <TIM_OC3_SetConfig+0x72>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4a2a      	ldr	r2, [pc, #168]	@ (800aa78 <TIM_OC3_SetConfig+0x110>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d003      	beq.n	800a9da <TIM_OC3_SetConfig+0x72>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a29      	ldr	r2, [pc, #164]	@ (800aa7c <TIM_OC3_SetConfig+0x114>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d10d      	bne.n	800a9f6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a9e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	021b      	lsls	r3, r3, #8
 800a9e8:	697a      	ldr	r2, [r7, #20]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a9f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4a1e      	ldr	r2, [pc, #120]	@ (800aa74 <TIM_OC3_SetConfig+0x10c>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d013      	beq.n	800aa26 <TIM_OC3_SetConfig+0xbe>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4a1d      	ldr	r2, [pc, #116]	@ (800aa78 <TIM_OC3_SetConfig+0x110>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d00f      	beq.n	800aa26 <TIM_OC3_SetConfig+0xbe>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4a1d      	ldr	r2, [pc, #116]	@ (800aa80 <TIM_OC3_SetConfig+0x118>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d00b      	beq.n	800aa26 <TIM_OC3_SetConfig+0xbe>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a1c      	ldr	r2, [pc, #112]	@ (800aa84 <TIM_OC3_SetConfig+0x11c>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d007      	beq.n	800aa26 <TIM_OC3_SetConfig+0xbe>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a1b      	ldr	r2, [pc, #108]	@ (800aa88 <TIM_OC3_SetConfig+0x120>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d003      	beq.n	800aa26 <TIM_OC3_SetConfig+0xbe>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a16      	ldr	r2, [pc, #88]	@ (800aa7c <TIM_OC3_SetConfig+0x114>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d113      	bne.n	800aa4e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aa34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	695b      	ldr	r3, [r3, #20]
 800aa3a:	011b      	lsls	r3, r3, #4
 800aa3c:	693a      	ldr	r2, [r7, #16]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	699b      	ldr	r3, [r3, #24]
 800aa46:	011b      	lsls	r3, r3, #4
 800aa48:	693a      	ldr	r2, [r7, #16]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	685a      	ldr	r2, [r3, #4]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	697a      	ldr	r2, [r7, #20]
 800aa66:	621a      	str	r2, [r3, #32]
}
 800aa68:	bf00      	nop
 800aa6a:	371c      	adds	r7, #28
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr
 800aa74:	40012c00 	.word	0x40012c00
 800aa78:	40013400 	.word	0x40013400
 800aa7c:	40015000 	.word	0x40015000
 800aa80:	40014000 	.word	0x40014000
 800aa84:	40014400 	.word	0x40014400
 800aa88:	40014800 	.word	0x40014800

0800aa8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b087      	sub	sp, #28
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a1b      	ldr	r3, [r3, #32]
 800aa9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6a1b      	ldr	r3, [r3, #32]
 800aaa0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	69db      	ldr	r3, [r3, #28]
 800aab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aaba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aabe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	021b      	lsls	r3, r3, #8
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	4313      	orrs	r3, r2
 800aad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aada:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	031b      	lsls	r3, r3, #12
 800aae2:	697a      	ldr	r2, [r7, #20]
 800aae4:	4313      	orrs	r3, r2
 800aae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	4a2c      	ldr	r2, [pc, #176]	@ (800ab9c <TIM_OC4_SetConfig+0x110>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d007      	beq.n	800ab00 <TIM_OC4_SetConfig+0x74>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a2b      	ldr	r2, [pc, #172]	@ (800aba0 <TIM_OC4_SetConfig+0x114>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d003      	beq.n	800ab00 <TIM_OC4_SetConfig+0x74>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a2a      	ldr	r2, [pc, #168]	@ (800aba4 <TIM_OC4_SetConfig+0x118>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d10d      	bne.n	800ab1c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ab06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	031b      	lsls	r3, r3, #12
 800ab0e:	697a      	ldr	r2, [r7, #20]
 800ab10:	4313      	orrs	r3, r2
 800ab12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a1f      	ldr	r2, [pc, #124]	@ (800ab9c <TIM_OC4_SetConfig+0x110>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d013      	beq.n	800ab4c <TIM_OC4_SetConfig+0xc0>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a1e      	ldr	r2, [pc, #120]	@ (800aba0 <TIM_OC4_SetConfig+0x114>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d00f      	beq.n	800ab4c <TIM_OC4_SetConfig+0xc0>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a1e      	ldr	r2, [pc, #120]	@ (800aba8 <TIM_OC4_SetConfig+0x11c>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d00b      	beq.n	800ab4c <TIM_OC4_SetConfig+0xc0>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a1d      	ldr	r2, [pc, #116]	@ (800abac <TIM_OC4_SetConfig+0x120>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d007      	beq.n	800ab4c <TIM_OC4_SetConfig+0xc0>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a1c      	ldr	r2, [pc, #112]	@ (800abb0 <TIM_OC4_SetConfig+0x124>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d003      	beq.n	800ab4c <TIM_OC4_SetConfig+0xc0>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a17      	ldr	r2, [pc, #92]	@ (800aba4 <TIM_OC4_SetConfig+0x118>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d113      	bne.n	800ab74 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab52:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ab5a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	695b      	ldr	r3, [r3, #20]
 800ab60:	019b      	lsls	r3, r3, #6
 800ab62:	693a      	ldr	r2, [r7, #16]
 800ab64:	4313      	orrs	r3, r2
 800ab66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	699b      	ldr	r3, [r3, #24]
 800ab6c:	019b      	lsls	r3, r3, #6
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	4313      	orrs	r3, r2
 800ab72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	693a      	ldr	r2, [r7, #16]
 800ab78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	685a      	ldr	r2, [r3, #4]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	697a      	ldr	r2, [r7, #20]
 800ab8c:	621a      	str	r2, [r3, #32]
}
 800ab8e:	bf00      	nop
 800ab90:	371c      	adds	r7, #28
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr
 800ab9a:	bf00      	nop
 800ab9c:	40012c00 	.word	0x40012c00
 800aba0:	40013400 	.word	0x40013400
 800aba4:	40015000 	.word	0x40015000
 800aba8:	40014000 	.word	0x40014000
 800abac:	40014400 	.word	0x40014400
 800abb0:	40014800 	.word	0x40014800

0800abb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b087      	sub	sp, #28
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a1b      	ldr	r3, [r3, #32]
 800abc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6a1b      	ldr	r3, [r3, #32]
 800abc8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800abe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	4313      	orrs	r3, r2
 800abf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800abf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	041b      	lsls	r3, r3, #16
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	4313      	orrs	r3, r2
 800ac04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a19      	ldr	r2, [pc, #100]	@ (800ac70 <TIM_OC5_SetConfig+0xbc>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d013      	beq.n	800ac36 <TIM_OC5_SetConfig+0x82>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a18      	ldr	r2, [pc, #96]	@ (800ac74 <TIM_OC5_SetConfig+0xc0>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d00f      	beq.n	800ac36 <TIM_OC5_SetConfig+0x82>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a17      	ldr	r2, [pc, #92]	@ (800ac78 <TIM_OC5_SetConfig+0xc4>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d00b      	beq.n	800ac36 <TIM_OC5_SetConfig+0x82>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4a16      	ldr	r2, [pc, #88]	@ (800ac7c <TIM_OC5_SetConfig+0xc8>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d007      	beq.n	800ac36 <TIM_OC5_SetConfig+0x82>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4a15      	ldr	r2, [pc, #84]	@ (800ac80 <TIM_OC5_SetConfig+0xcc>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d003      	beq.n	800ac36 <TIM_OC5_SetConfig+0x82>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4a14      	ldr	r2, [pc, #80]	@ (800ac84 <TIM_OC5_SetConfig+0xd0>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d109      	bne.n	800ac4a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	695b      	ldr	r3, [r3, #20]
 800ac42:	021b      	lsls	r3, r3, #8
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	697a      	ldr	r2, [r7, #20]
 800ac4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	685a      	ldr	r2, [r3, #4]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	693a      	ldr	r2, [r7, #16]
 800ac62:	621a      	str	r2, [r3, #32]
}
 800ac64:	bf00      	nop
 800ac66:	371c      	adds	r7, #28
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr
 800ac70:	40012c00 	.word	0x40012c00
 800ac74:	40013400 	.word	0x40013400
 800ac78:	40014000 	.word	0x40014000
 800ac7c:	40014400 	.word	0x40014400
 800ac80:	40014800 	.word	0x40014800
 800ac84:	40015000 	.word	0x40015000

0800ac88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b087      	sub	sp, #28
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6a1b      	ldr	r3, [r3, #32]
 800ac96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6a1b      	ldr	r3, [r3, #32]
 800ac9c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800acb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	021b      	lsls	r3, r3, #8
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	4313      	orrs	r3, r2
 800acc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800acce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	051b      	lsls	r3, r3, #20
 800acd6:	693a      	ldr	r2, [r7, #16]
 800acd8:	4313      	orrs	r3, r2
 800acda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4a1a      	ldr	r2, [pc, #104]	@ (800ad48 <TIM_OC6_SetConfig+0xc0>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d013      	beq.n	800ad0c <TIM_OC6_SetConfig+0x84>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4a19      	ldr	r2, [pc, #100]	@ (800ad4c <TIM_OC6_SetConfig+0xc4>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d00f      	beq.n	800ad0c <TIM_OC6_SetConfig+0x84>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4a18      	ldr	r2, [pc, #96]	@ (800ad50 <TIM_OC6_SetConfig+0xc8>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d00b      	beq.n	800ad0c <TIM_OC6_SetConfig+0x84>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a17      	ldr	r2, [pc, #92]	@ (800ad54 <TIM_OC6_SetConfig+0xcc>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d007      	beq.n	800ad0c <TIM_OC6_SetConfig+0x84>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4a16      	ldr	r2, [pc, #88]	@ (800ad58 <TIM_OC6_SetConfig+0xd0>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d003      	beq.n	800ad0c <TIM_OC6_SetConfig+0x84>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a15      	ldr	r2, [pc, #84]	@ (800ad5c <TIM_OC6_SetConfig+0xd4>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d109      	bne.n	800ad20 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ad12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	695b      	ldr	r3, [r3, #20]
 800ad18:	029b      	lsls	r3, r3, #10
 800ad1a:	697a      	ldr	r2, [r7, #20]
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	685a      	ldr	r2, [r3, #4]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	693a      	ldr	r2, [r7, #16]
 800ad38:	621a      	str	r2, [r3, #32]
}
 800ad3a:	bf00      	nop
 800ad3c:	371c      	adds	r7, #28
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	40012c00 	.word	0x40012c00
 800ad4c:	40013400 	.word	0x40013400
 800ad50:	40014000 	.word	0x40014000
 800ad54:	40014400 	.word	0x40014400
 800ad58:	40014800 	.word	0x40014800
 800ad5c:	40015000 	.word	0x40015000

0800ad60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b087      	sub	sp, #28
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6a1b      	ldr	r3, [r3, #32]
 800ad70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	6a1b      	ldr	r3, [r3, #32]
 800ad76:	f023 0201 	bic.w	r2, r3, #1
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	699b      	ldr	r3, [r3, #24]
 800ad82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ad8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	011b      	lsls	r3, r3, #4
 800ad90:	693a      	ldr	r2, [r7, #16]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	f023 030a 	bic.w	r3, r3, #10
 800ad9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	693a      	ldr	r2, [r7, #16]
 800adaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	697a      	ldr	r2, [r7, #20]
 800adb0:	621a      	str	r2, [r3, #32]
}
 800adb2:	bf00      	nop
 800adb4:	371c      	adds	r7, #28
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adbe:	b480      	push	{r7}
 800adc0:	b087      	sub	sp, #28
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	60f8      	str	r0, [r7, #12]
 800adc6:	60b9      	str	r1, [r7, #8]
 800adc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6a1b      	ldr	r3, [r3, #32]
 800adce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6a1b      	ldr	r3, [r3, #32]
 800add4:	f023 0210 	bic.w	r2, r3, #16
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	699b      	ldr	r3, [r3, #24]
 800ade0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ade8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	031b      	lsls	r3, r3, #12
 800adee:	693a      	ldr	r2, [r7, #16]
 800adf0:	4313      	orrs	r3, r2
 800adf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800adfa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	011b      	lsls	r3, r3, #4
 800ae00:	697a      	ldr	r2, [r7, #20]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	693a      	ldr	r2, [r7, #16]
 800ae0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	697a      	ldr	r2, [r7, #20]
 800ae10:	621a      	str	r2, [r3, #32]
}
 800ae12:	bf00      	nop
 800ae14:	371c      	adds	r7, #28
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr

0800ae1e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	b085      	sub	sp, #20
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
 800ae26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ae34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae3a:	683a      	ldr	r2, [r7, #0]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	f043 0307 	orr.w	r3, r3, #7
 800ae44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	609a      	str	r2, [r3, #8]
}
 800ae4c:	bf00      	nop
 800ae4e:	3714      	adds	r7, #20
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b087      	sub	sp, #28
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	607a      	str	r2, [r7, #4]
 800ae64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ae72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	021a      	lsls	r2, r3, #8
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	431a      	orrs	r2, r3
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	697a      	ldr	r2, [r7, #20]
 800ae8a:	609a      	str	r2, [r3, #8]
}
 800ae8c:	bf00      	nop
 800ae8e:	371c      	adds	r7, #28
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b087      	sub	sp, #28
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	f003 031f 	and.w	r3, r3, #31
 800aeaa:	2201      	movs	r2, #1
 800aeac:	fa02 f303 	lsl.w	r3, r2, r3
 800aeb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	6a1a      	ldr	r2, [r3, #32]
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	43db      	mvns	r3, r3
 800aeba:	401a      	ands	r2, r3
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6a1a      	ldr	r2, [r3, #32]
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	f003 031f 	and.w	r3, r3, #31
 800aeca:	6879      	ldr	r1, [r7, #4]
 800aecc:	fa01 f303 	lsl.w	r3, r1, r3
 800aed0:	431a      	orrs	r2, r3
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	621a      	str	r2, [r3, #32]
}
 800aed6:	bf00      	nop
 800aed8:	371c      	adds	r7, #28
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr
	...

0800aee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b085      	sub	sp, #20
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d101      	bne.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aef8:	2302      	movs	r3, #2
 800aefa:	e074      	b.n	800afe6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2202      	movs	r2, #2
 800af08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a34      	ldr	r2, [pc, #208]	@ (800aff4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d009      	beq.n	800af3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a33      	ldr	r2, [pc, #204]	@ (800aff8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d004      	beq.n	800af3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a31      	ldr	r2, [pc, #196]	@ (800affc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d108      	bne.n	800af4c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800af40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	4313      	orrs	r3, r2
 800af4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800af52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	4313      	orrs	r3, r2
 800af60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	68fa      	ldr	r2, [r7, #12]
 800af68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a21      	ldr	r2, [pc, #132]	@ (800aff4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d022      	beq.n	800afba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af7c:	d01d      	beq.n	800afba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a1f      	ldr	r2, [pc, #124]	@ (800b000 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d018      	beq.n	800afba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a1d      	ldr	r2, [pc, #116]	@ (800b004 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d013      	beq.n	800afba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a1c      	ldr	r2, [pc, #112]	@ (800b008 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d00e      	beq.n	800afba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4a15      	ldr	r2, [pc, #84]	@ (800aff8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d009      	beq.n	800afba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a18      	ldr	r2, [pc, #96]	@ (800b00c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d004      	beq.n	800afba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a11      	ldr	r2, [pc, #68]	@ (800affc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d10c      	bne.n	800afd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800afc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	4313      	orrs	r3, r2
 800afca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68ba      	ldr	r2, [r7, #8]
 800afd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3714      	adds	r7, #20
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop
 800aff4:	40012c00 	.word	0x40012c00
 800aff8:	40013400 	.word	0x40013400
 800affc:	40015000 	.word	0x40015000
 800b000:	40000400 	.word	0x40000400
 800b004:	40000800 	.word	0x40000800
 800b008:	40000c00 	.word	0x40000c00
 800b00c:	40014000 	.word	0x40014000

0800b010 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b010:	b480      	push	{r7}
 800b012:	b085      	sub	sp, #20
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b01a:	2300      	movs	r3, #0
 800b01c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b024:	2b01      	cmp	r3, #1
 800b026:	d101      	bne.n	800b02c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b028:	2302      	movs	r3, #2
 800b02a:	e078      	b.n	800b11e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	4313      	orrs	r3, r2
 800b040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	4313      	orrs	r3, r2
 800b04e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4313      	orrs	r3, r2
 800b06a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	4313      	orrs	r3, r2
 800b078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	695b      	ldr	r3, [r3, #20]
 800b084:	4313      	orrs	r3, r2
 800b086:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b092:	4313      	orrs	r3, r2
 800b094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	699b      	ldr	r3, [r3, #24]
 800b0a0:	041b      	lsls	r3, r3, #16
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	69db      	ldr	r3, [r3, #28]
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a1c      	ldr	r2, [pc, #112]	@ (800b12c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d009      	beq.n	800b0d2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a1b      	ldr	r2, [pc, #108]	@ (800b130 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d004      	beq.n	800b0d2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a19      	ldr	r2, [pc, #100]	@ (800b134 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d11c      	bne.n	800b10c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0dc:	051b      	lsls	r3, r3, #20
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	6a1b      	ldr	r3, [r3, #32]
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b108:	4313      	orrs	r3, r2
 800b10a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3714      	adds	r7, #20
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop
 800b12c:	40012c00 	.word	0x40012c00
 800b130:	40013400 	.word	0x40013400
 800b134:	40015000 	.word	0x40015000

0800b138 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b140:	bf00      	nop
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b154:	bf00      	nop
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b168:	bf00      	nop
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b1b8:	bf00      	nop
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d101      	bne.n	800b1d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e042      	b.n	800b25c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d106      	bne.n	800b1ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f7f8 feb9 	bl	8003f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2224      	movs	r2, #36	@ 0x24
 800b1f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f022 0201 	bic.w	r2, r2, #1
 800b204:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d002      	beq.n	800b214 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fb24 	bl	800b85c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 f825 	bl	800b264 <UART_SetConfig>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d101      	bne.n	800b224 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b220:	2301      	movs	r3, #1
 800b222:	e01b      	b.n	800b25c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	685a      	ldr	r2, [r3, #4]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	689a      	ldr	r2, [r3, #8]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f042 0201 	orr.w	r2, r2, #1
 800b252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 fba3 	bl	800b9a0 <UART_CheckIdleState>
 800b25a:	4603      	mov	r3, r0
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b268:	b08c      	sub	sp, #48	@ 0x30
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b26e:	2300      	movs	r3, #0
 800b270:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	689a      	ldr	r2, [r3, #8]
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	691b      	ldr	r3, [r3, #16]
 800b27c:	431a      	orrs	r2, r3
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	695b      	ldr	r3, [r3, #20]
 800b282:	431a      	orrs	r2, r3
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	69db      	ldr	r3, [r3, #28]
 800b288:	4313      	orrs	r3, r2
 800b28a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	4baa      	ldr	r3, [pc, #680]	@ (800b53c <UART_SetConfig+0x2d8>)
 800b294:	4013      	ands	r3, r2
 800b296:	697a      	ldr	r2, [r7, #20]
 800b298:	6812      	ldr	r2, [r2, #0]
 800b29a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b29c:	430b      	orrs	r3, r1
 800b29e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	68da      	ldr	r2, [r3, #12]
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	430a      	orrs	r2, r1
 800b2b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	699b      	ldr	r3, [r3, #24]
 800b2ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a9f      	ldr	r2, [pc, #636]	@ (800b540 <UART_SetConfig+0x2dc>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d004      	beq.n	800b2d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	6a1b      	ldr	r3, [r3, #32]
 800b2ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b2da:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b2de:	697a      	ldr	r2, [r7, #20]
 800b2e0:	6812      	ldr	r2, [r2, #0]
 800b2e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2e4:	430b      	orrs	r3, r1
 800b2e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ee:	f023 010f 	bic.w	r1, r3, #15
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	430a      	orrs	r2, r1
 800b2fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a90      	ldr	r2, [pc, #576]	@ (800b544 <UART_SetConfig+0x2e0>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d125      	bne.n	800b354 <UART_SetConfig+0xf0>
 800b308:	4b8f      	ldr	r3, [pc, #572]	@ (800b548 <UART_SetConfig+0x2e4>)
 800b30a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b30e:	f003 0303 	and.w	r3, r3, #3
 800b312:	2b03      	cmp	r3, #3
 800b314:	d81a      	bhi.n	800b34c <UART_SetConfig+0xe8>
 800b316:	a201      	add	r2, pc, #4	@ (adr r2, 800b31c <UART_SetConfig+0xb8>)
 800b318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b31c:	0800b32d 	.word	0x0800b32d
 800b320:	0800b33d 	.word	0x0800b33d
 800b324:	0800b335 	.word	0x0800b335
 800b328:	0800b345 	.word	0x0800b345
 800b32c:	2301      	movs	r3, #1
 800b32e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b332:	e116      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b334:	2302      	movs	r3, #2
 800b336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b33a:	e112      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b33c:	2304      	movs	r3, #4
 800b33e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b342:	e10e      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b344:	2308      	movs	r3, #8
 800b346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b34a:	e10a      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b34c:	2310      	movs	r3, #16
 800b34e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b352:	e106      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a7c      	ldr	r2, [pc, #496]	@ (800b54c <UART_SetConfig+0x2e8>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d138      	bne.n	800b3d0 <UART_SetConfig+0x16c>
 800b35e:	4b7a      	ldr	r3, [pc, #488]	@ (800b548 <UART_SetConfig+0x2e4>)
 800b360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b364:	f003 030c 	and.w	r3, r3, #12
 800b368:	2b0c      	cmp	r3, #12
 800b36a:	d82d      	bhi.n	800b3c8 <UART_SetConfig+0x164>
 800b36c:	a201      	add	r2, pc, #4	@ (adr r2, 800b374 <UART_SetConfig+0x110>)
 800b36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b372:	bf00      	nop
 800b374:	0800b3a9 	.word	0x0800b3a9
 800b378:	0800b3c9 	.word	0x0800b3c9
 800b37c:	0800b3c9 	.word	0x0800b3c9
 800b380:	0800b3c9 	.word	0x0800b3c9
 800b384:	0800b3b9 	.word	0x0800b3b9
 800b388:	0800b3c9 	.word	0x0800b3c9
 800b38c:	0800b3c9 	.word	0x0800b3c9
 800b390:	0800b3c9 	.word	0x0800b3c9
 800b394:	0800b3b1 	.word	0x0800b3b1
 800b398:	0800b3c9 	.word	0x0800b3c9
 800b39c:	0800b3c9 	.word	0x0800b3c9
 800b3a0:	0800b3c9 	.word	0x0800b3c9
 800b3a4:	0800b3c1 	.word	0x0800b3c1
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3ae:	e0d8      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3b6:	e0d4      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b3b8:	2304      	movs	r3, #4
 800b3ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3be:	e0d0      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b3c0:	2308      	movs	r3, #8
 800b3c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3c6:	e0cc      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b3c8:	2310      	movs	r3, #16
 800b3ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3ce:	e0c8      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a5e      	ldr	r2, [pc, #376]	@ (800b550 <UART_SetConfig+0x2ec>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d125      	bne.n	800b426 <UART_SetConfig+0x1c2>
 800b3da:	4b5b      	ldr	r3, [pc, #364]	@ (800b548 <UART_SetConfig+0x2e4>)
 800b3dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b3e4:	2b30      	cmp	r3, #48	@ 0x30
 800b3e6:	d016      	beq.n	800b416 <UART_SetConfig+0x1b2>
 800b3e8:	2b30      	cmp	r3, #48	@ 0x30
 800b3ea:	d818      	bhi.n	800b41e <UART_SetConfig+0x1ba>
 800b3ec:	2b20      	cmp	r3, #32
 800b3ee:	d00a      	beq.n	800b406 <UART_SetConfig+0x1a2>
 800b3f0:	2b20      	cmp	r3, #32
 800b3f2:	d814      	bhi.n	800b41e <UART_SetConfig+0x1ba>
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d002      	beq.n	800b3fe <UART_SetConfig+0x19a>
 800b3f8:	2b10      	cmp	r3, #16
 800b3fa:	d008      	beq.n	800b40e <UART_SetConfig+0x1aa>
 800b3fc:	e00f      	b.n	800b41e <UART_SetConfig+0x1ba>
 800b3fe:	2300      	movs	r3, #0
 800b400:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b404:	e0ad      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b406:	2302      	movs	r3, #2
 800b408:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b40c:	e0a9      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b40e:	2304      	movs	r3, #4
 800b410:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b414:	e0a5      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b416:	2308      	movs	r3, #8
 800b418:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b41c:	e0a1      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b41e:	2310      	movs	r3, #16
 800b420:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b424:	e09d      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a4a      	ldr	r2, [pc, #296]	@ (800b554 <UART_SetConfig+0x2f0>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d125      	bne.n	800b47c <UART_SetConfig+0x218>
 800b430:	4b45      	ldr	r3, [pc, #276]	@ (800b548 <UART_SetConfig+0x2e4>)
 800b432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b436:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b43a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b43c:	d016      	beq.n	800b46c <UART_SetConfig+0x208>
 800b43e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b440:	d818      	bhi.n	800b474 <UART_SetConfig+0x210>
 800b442:	2b80      	cmp	r3, #128	@ 0x80
 800b444:	d00a      	beq.n	800b45c <UART_SetConfig+0x1f8>
 800b446:	2b80      	cmp	r3, #128	@ 0x80
 800b448:	d814      	bhi.n	800b474 <UART_SetConfig+0x210>
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d002      	beq.n	800b454 <UART_SetConfig+0x1f0>
 800b44e:	2b40      	cmp	r3, #64	@ 0x40
 800b450:	d008      	beq.n	800b464 <UART_SetConfig+0x200>
 800b452:	e00f      	b.n	800b474 <UART_SetConfig+0x210>
 800b454:	2300      	movs	r3, #0
 800b456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b45a:	e082      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b45c:	2302      	movs	r3, #2
 800b45e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b462:	e07e      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b464:	2304      	movs	r3, #4
 800b466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b46a:	e07a      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b46c:	2308      	movs	r3, #8
 800b46e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b472:	e076      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b474:	2310      	movs	r3, #16
 800b476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b47a:	e072      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a35      	ldr	r2, [pc, #212]	@ (800b558 <UART_SetConfig+0x2f4>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d12a      	bne.n	800b4dc <UART_SetConfig+0x278>
 800b486:	4b30      	ldr	r3, [pc, #192]	@ (800b548 <UART_SetConfig+0x2e4>)
 800b488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b48c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b490:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b494:	d01a      	beq.n	800b4cc <UART_SetConfig+0x268>
 800b496:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b49a:	d81b      	bhi.n	800b4d4 <UART_SetConfig+0x270>
 800b49c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4a0:	d00c      	beq.n	800b4bc <UART_SetConfig+0x258>
 800b4a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4a6:	d815      	bhi.n	800b4d4 <UART_SetConfig+0x270>
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d003      	beq.n	800b4b4 <UART_SetConfig+0x250>
 800b4ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4b0:	d008      	beq.n	800b4c4 <UART_SetConfig+0x260>
 800b4b2:	e00f      	b.n	800b4d4 <UART_SetConfig+0x270>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4ba:	e052      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b4bc:	2302      	movs	r3, #2
 800b4be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4c2:	e04e      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b4c4:	2304      	movs	r3, #4
 800b4c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4ca:	e04a      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b4cc:	2308      	movs	r3, #8
 800b4ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4d2:	e046      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b4d4:	2310      	movs	r3, #16
 800b4d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4da:	e042      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a17      	ldr	r2, [pc, #92]	@ (800b540 <UART_SetConfig+0x2dc>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d13a      	bne.n	800b55c <UART_SetConfig+0x2f8>
 800b4e6:	4b18      	ldr	r3, [pc, #96]	@ (800b548 <UART_SetConfig+0x2e4>)
 800b4e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b4f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b4f4:	d01a      	beq.n	800b52c <UART_SetConfig+0x2c8>
 800b4f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b4fa:	d81b      	bhi.n	800b534 <UART_SetConfig+0x2d0>
 800b4fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b500:	d00c      	beq.n	800b51c <UART_SetConfig+0x2b8>
 800b502:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b506:	d815      	bhi.n	800b534 <UART_SetConfig+0x2d0>
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d003      	beq.n	800b514 <UART_SetConfig+0x2b0>
 800b50c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b510:	d008      	beq.n	800b524 <UART_SetConfig+0x2c0>
 800b512:	e00f      	b.n	800b534 <UART_SetConfig+0x2d0>
 800b514:	2300      	movs	r3, #0
 800b516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b51a:	e022      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b51c:	2302      	movs	r3, #2
 800b51e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b522:	e01e      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b524:	2304      	movs	r3, #4
 800b526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b52a:	e01a      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b52c:	2308      	movs	r3, #8
 800b52e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b532:	e016      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b534:	2310      	movs	r3, #16
 800b536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b53a:	e012      	b.n	800b562 <UART_SetConfig+0x2fe>
 800b53c:	cfff69f3 	.word	0xcfff69f3
 800b540:	40008000 	.word	0x40008000
 800b544:	40013800 	.word	0x40013800
 800b548:	40021000 	.word	0x40021000
 800b54c:	40004400 	.word	0x40004400
 800b550:	40004800 	.word	0x40004800
 800b554:	40004c00 	.word	0x40004c00
 800b558:	40005000 	.word	0x40005000
 800b55c:	2310      	movs	r3, #16
 800b55e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4aae      	ldr	r2, [pc, #696]	@ (800b820 <UART_SetConfig+0x5bc>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	f040 8097 	bne.w	800b69c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b56e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b572:	2b08      	cmp	r3, #8
 800b574:	d823      	bhi.n	800b5be <UART_SetConfig+0x35a>
 800b576:	a201      	add	r2, pc, #4	@ (adr r2, 800b57c <UART_SetConfig+0x318>)
 800b578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b57c:	0800b5a1 	.word	0x0800b5a1
 800b580:	0800b5bf 	.word	0x0800b5bf
 800b584:	0800b5a9 	.word	0x0800b5a9
 800b588:	0800b5bf 	.word	0x0800b5bf
 800b58c:	0800b5af 	.word	0x0800b5af
 800b590:	0800b5bf 	.word	0x0800b5bf
 800b594:	0800b5bf 	.word	0x0800b5bf
 800b598:	0800b5bf 	.word	0x0800b5bf
 800b59c:	0800b5b7 	.word	0x0800b5b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5a0:	f7fd fec6 	bl	8009330 <HAL_RCC_GetPCLK1Freq>
 800b5a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b5a6:	e010      	b.n	800b5ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b5a8:	4b9e      	ldr	r3, [pc, #632]	@ (800b824 <UART_SetConfig+0x5c0>)
 800b5aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b5ac:	e00d      	b.n	800b5ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b5ae:	f7fd fe51 	bl	8009254 <HAL_RCC_GetSysClockFreq>
 800b5b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b5b4:	e009      	b.n	800b5ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b5ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b5bc:	e005      	b.n	800b5ca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b5c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f000 8130 	beq.w	800b832 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5d6:	4a94      	ldr	r2, [pc, #592]	@ (800b828 <UART_SetConfig+0x5c4>)
 800b5d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5dc:	461a      	mov	r2, r3
 800b5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	685a      	ldr	r2, [r3, #4]
 800b5ea:	4613      	mov	r3, r2
 800b5ec:	005b      	lsls	r3, r3, #1
 800b5ee:	4413      	add	r3, r2
 800b5f0:	69ba      	ldr	r2, [r7, #24]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d305      	bcc.n	800b602 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b5fc:	69ba      	ldr	r2, [r7, #24]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d903      	bls.n	800b60a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b608:	e113      	b.n	800b832 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60c:	2200      	movs	r2, #0
 800b60e:	60bb      	str	r3, [r7, #8]
 800b610:	60fa      	str	r2, [r7, #12]
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b616:	4a84      	ldr	r2, [pc, #528]	@ (800b828 <UART_SetConfig+0x5c4>)
 800b618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	2200      	movs	r2, #0
 800b620:	603b      	str	r3, [r7, #0]
 800b622:	607a      	str	r2, [r7, #4]
 800b624:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b628:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b62c:	f7f5 fb54 	bl	8000cd8 <__aeabi_uldivmod>
 800b630:	4602      	mov	r2, r0
 800b632:	460b      	mov	r3, r1
 800b634:	4610      	mov	r0, r2
 800b636:	4619      	mov	r1, r3
 800b638:	f04f 0200 	mov.w	r2, #0
 800b63c:	f04f 0300 	mov.w	r3, #0
 800b640:	020b      	lsls	r3, r1, #8
 800b642:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b646:	0202      	lsls	r2, r0, #8
 800b648:	6979      	ldr	r1, [r7, #20]
 800b64a:	6849      	ldr	r1, [r1, #4]
 800b64c:	0849      	lsrs	r1, r1, #1
 800b64e:	2000      	movs	r0, #0
 800b650:	460c      	mov	r4, r1
 800b652:	4605      	mov	r5, r0
 800b654:	eb12 0804 	adds.w	r8, r2, r4
 800b658:	eb43 0905 	adc.w	r9, r3, r5
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	2200      	movs	r2, #0
 800b662:	469a      	mov	sl, r3
 800b664:	4693      	mov	fp, r2
 800b666:	4652      	mov	r2, sl
 800b668:	465b      	mov	r3, fp
 800b66a:	4640      	mov	r0, r8
 800b66c:	4649      	mov	r1, r9
 800b66e:	f7f5 fb33 	bl	8000cd8 <__aeabi_uldivmod>
 800b672:	4602      	mov	r2, r0
 800b674:	460b      	mov	r3, r1
 800b676:	4613      	mov	r3, r2
 800b678:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b67a:	6a3b      	ldr	r3, [r7, #32]
 800b67c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b680:	d308      	bcc.n	800b694 <UART_SetConfig+0x430>
 800b682:	6a3b      	ldr	r3, [r7, #32]
 800b684:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b688:	d204      	bcs.n	800b694 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6a3a      	ldr	r2, [r7, #32]
 800b690:	60da      	str	r2, [r3, #12]
 800b692:	e0ce      	b.n	800b832 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b694:	2301      	movs	r3, #1
 800b696:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b69a:	e0ca      	b.n	800b832 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	69db      	ldr	r3, [r3, #28]
 800b6a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b6a4:	d166      	bne.n	800b774 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b6a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b6aa:	2b08      	cmp	r3, #8
 800b6ac:	d827      	bhi.n	800b6fe <UART_SetConfig+0x49a>
 800b6ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b6b4 <UART_SetConfig+0x450>)
 800b6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b4:	0800b6d9 	.word	0x0800b6d9
 800b6b8:	0800b6e1 	.word	0x0800b6e1
 800b6bc:	0800b6e9 	.word	0x0800b6e9
 800b6c0:	0800b6ff 	.word	0x0800b6ff
 800b6c4:	0800b6ef 	.word	0x0800b6ef
 800b6c8:	0800b6ff 	.word	0x0800b6ff
 800b6cc:	0800b6ff 	.word	0x0800b6ff
 800b6d0:	0800b6ff 	.word	0x0800b6ff
 800b6d4:	0800b6f7 	.word	0x0800b6f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6d8:	f7fd fe2a 	bl	8009330 <HAL_RCC_GetPCLK1Freq>
 800b6dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b6de:	e014      	b.n	800b70a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6e0:	f7fd fe3c 	bl	800935c <HAL_RCC_GetPCLK2Freq>
 800b6e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b6e6:	e010      	b.n	800b70a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b6e8:	4b4e      	ldr	r3, [pc, #312]	@ (800b824 <UART_SetConfig+0x5c0>)
 800b6ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b6ec:	e00d      	b.n	800b70a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6ee:	f7fd fdb1 	bl	8009254 <HAL_RCC_GetSysClockFreq>
 800b6f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b6f4:	e009      	b.n	800b70a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b6fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b6fc:	e005      	b.n	800b70a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b6fe:	2300      	movs	r3, #0
 800b700:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b708:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f000 8090 	beq.w	800b832 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b716:	4a44      	ldr	r2, [pc, #272]	@ (800b828 <UART_SetConfig+0x5c4>)
 800b718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b71c:	461a      	mov	r2, r3
 800b71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b720:	fbb3 f3f2 	udiv	r3, r3, r2
 800b724:	005a      	lsls	r2, r3, #1
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	085b      	lsrs	r3, r3, #1
 800b72c:	441a      	add	r2, r3
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	fbb2 f3f3 	udiv	r3, r2, r3
 800b736:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b738:	6a3b      	ldr	r3, [r7, #32]
 800b73a:	2b0f      	cmp	r3, #15
 800b73c:	d916      	bls.n	800b76c <UART_SetConfig+0x508>
 800b73e:	6a3b      	ldr	r3, [r7, #32]
 800b740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b744:	d212      	bcs.n	800b76c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b746:	6a3b      	ldr	r3, [r7, #32]
 800b748:	b29b      	uxth	r3, r3
 800b74a:	f023 030f 	bic.w	r3, r3, #15
 800b74e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b750:	6a3b      	ldr	r3, [r7, #32]
 800b752:	085b      	lsrs	r3, r3, #1
 800b754:	b29b      	uxth	r3, r3
 800b756:	f003 0307 	and.w	r3, r3, #7
 800b75a:	b29a      	uxth	r2, r3
 800b75c:	8bfb      	ldrh	r3, [r7, #30]
 800b75e:	4313      	orrs	r3, r2
 800b760:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	8bfa      	ldrh	r2, [r7, #30]
 800b768:	60da      	str	r2, [r3, #12]
 800b76a:	e062      	b.n	800b832 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b76c:	2301      	movs	r3, #1
 800b76e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b772:	e05e      	b.n	800b832 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b774:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b778:	2b08      	cmp	r3, #8
 800b77a:	d828      	bhi.n	800b7ce <UART_SetConfig+0x56a>
 800b77c:	a201      	add	r2, pc, #4	@ (adr r2, 800b784 <UART_SetConfig+0x520>)
 800b77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b782:	bf00      	nop
 800b784:	0800b7a9 	.word	0x0800b7a9
 800b788:	0800b7b1 	.word	0x0800b7b1
 800b78c:	0800b7b9 	.word	0x0800b7b9
 800b790:	0800b7cf 	.word	0x0800b7cf
 800b794:	0800b7bf 	.word	0x0800b7bf
 800b798:	0800b7cf 	.word	0x0800b7cf
 800b79c:	0800b7cf 	.word	0x0800b7cf
 800b7a0:	0800b7cf 	.word	0x0800b7cf
 800b7a4:	0800b7c7 	.word	0x0800b7c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7a8:	f7fd fdc2 	bl	8009330 <HAL_RCC_GetPCLK1Freq>
 800b7ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b7ae:	e014      	b.n	800b7da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7b0:	f7fd fdd4 	bl	800935c <HAL_RCC_GetPCLK2Freq>
 800b7b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b7b6:	e010      	b.n	800b7da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7b8:	4b1a      	ldr	r3, [pc, #104]	@ (800b824 <UART_SetConfig+0x5c0>)
 800b7ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b7bc:	e00d      	b.n	800b7da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7be:	f7fd fd49 	bl	8009254 <HAL_RCC_GetSysClockFreq>
 800b7c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b7c4:	e009      	b.n	800b7da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b7ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b7cc:	e005      	b.n	800b7da <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b7d8:	bf00      	nop
    }

    if (pclk != 0U)
 800b7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d028      	beq.n	800b832 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7e4:	4a10      	ldr	r2, [pc, #64]	@ (800b828 <UART_SetConfig+0x5c4>)
 800b7e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ee:	fbb3 f2f2 	udiv	r2, r3, r2
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	085b      	lsrs	r3, r3, #1
 800b7f8:	441a      	add	r2, r3
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b802:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b804:	6a3b      	ldr	r3, [r7, #32]
 800b806:	2b0f      	cmp	r3, #15
 800b808:	d910      	bls.n	800b82c <UART_SetConfig+0x5c8>
 800b80a:	6a3b      	ldr	r3, [r7, #32]
 800b80c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b810:	d20c      	bcs.n	800b82c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b812:	6a3b      	ldr	r3, [r7, #32]
 800b814:	b29a      	uxth	r2, r3
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	60da      	str	r2, [r3, #12]
 800b81c:	e009      	b.n	800b832 <UART_SetConfig+0x5ce>
 800b81e:	bf00      	nop
 800b820:	40008000 	.word	0x40008000
 800b824:	00f42400 	.word	0x00f42400
 800b828:	08016f60 	.word	0x08016f60
      }
      else
      {
        ret = HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	2201      	movs	r2, #1
 800b836:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	2201      	movs	r2, #1
 800b83e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	2200      	movs	r2, #0
 800b846:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	2200      	movs	r2, #0
 800b84c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b84e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b852:	4618      	mov	r0, r3
 800b854:	3730      	adds	r7, #48	@ 0x30
 800b856:	46bd      	mov	sp, r7
 800b858:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b85c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b868:	f003 0308 	and.w	r3, r3, #8
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00a      	beq.n	800b886 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	430a      	orrs	r2, r1
 800b884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b88a:	f003 0301 	and.w	r3, r3, #1
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00a      	beq.n	800b8a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	430a      	orrs	r2, r1
 800b8a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8ac:	f003 0302 	and.w	r3, r3, #2
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00a      	beq.n	800b8ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	430a      	orrs	r2, r1
 800b8c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8ce:	f003 0304 	and.w	r3, r3, #4
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00a      	beq.n	800b8ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	430a      	orrs	r2, r1
 800b8ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8f0:	f003 0310 	and.w	r3, r3, #16
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00a      	beq.n	800b90e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	430a      	orrs	r2, r1
 800b90c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b912:	f003 0320 	and.w	r3, r3, #32
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00a      	beq.n	800b930 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	689b      	ldr	r3, [r3, #8]
 800b920:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	430a      	orrs	r2, r1
 800b92e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d01a      	beq.n	800b972 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	430a      	orrs	r2, r1
 800b950:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b956:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b95a:	d10a      	bne.n	800b972 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	430a      	orrs	r2, r1
 800b970:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d00a      	beq.n	800b994 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	430a      	orrs	r2, r1
 800b992:	605a      	str	r2, [r3, #4]
  }
}
 800b994:	bf00      	nop
 800b996:	370c      	adds	r7, #12
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b098      	sub	sp, #96	@ 0x60
 800b9a4:	af02      	add	r7, sp, #8
 800b9a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b9b0:	f7f8 fd1e 	bl	80043f0 <HAL_GetTick>
 800b9b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f003 0308 	and.w	r3, r3, #8
 800b9c0:	2b08      	cmp	r3, #8
 800b9c2:	d12f      	bne.n	800ba24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 f88e 	bl	800baf4 <UART_WaitOnFlagUntilTimeout>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d022      	beq.n	800ba24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9e6:	e853 3f00 	ldrex	r3, [r3]
 800b9ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b9ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b9f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ba02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba04:	e841 2300 	strex	r3, r2, [r1]
 800ba08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ba0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d1e6      	bne.n	800b9de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2220      	movs	r2, #32
 800ba14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba20:	2303      	movs	r3, #3
 800ba22:	e063      	b.n	800baec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f003 0304 	and.w	r3, r3, #4
 800ba2e:	2b04      	cmp	r3, #4
 800ba30:	d149      	bne.n	800bac6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba32:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 f857 	bl	800baf4 <UART_WaitOnFlagUntilTimeout>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d03c      	beq.n	800bac6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba54:	e853 3f00 	ldrex	r3, [r3]
 800ba58:	623b      	str	r3, [r7, #32]
   return(result);
 800ba5a:	6a3b      	ldr	r3, [r7, #32]
 800ba5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	461a      	mov	r2, r3
 800ba68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba6a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba72:	e841 2300 	strex	r3, r2, [r1]
 800ba76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d1e6      	bne.n	800ba4c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	3308      	adds	r3, #8
 800ba84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	e853 3f00 	ldrex	r3, [r3]
 800ba8c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f023 0301 	bic.w	r3, r3, #1
 800ba94:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	3308      	adds	r3, #8
 800ba9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba9e:	61fa      	str	r2, [r7, #28]
 800baa0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa2:	69b9      	ldr	r1, [r7, #24]
 800baa4:	69fa      	ldr	r2, [r7, #28]
 800baa6:	e841 2300 	strex	r3, r2, [r1]
 800baaa:	617b      	str	r3, [r7, #20]
   return(result);
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d1e5      	bne.n	800ba7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2220      	movs	r2, #32
 800bab6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2200      	movs	r2, #0
 800babe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bac2:	2303      	movs	r3, #3
 800bac4:	e012      	b.n	800baec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2220      	movs	r2, #32
 800baca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2220      	movs	r2, #32
 800bad2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800baea:	2300      	movs	r3, #0
}
 800baec:	4618      	mov	r0, r3
 800baee:	3758      	adds	r7, #88	@ 0x58
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	603b      	str	r3, [r7, #0]
 800bb00:	4613      	mov	r3, r2
 800bb02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb04:	e04f      	b.n	800bba6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb0c:	d04b      	beq.n	800bba6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb0e:	f7f8 fc6f 	bl	80043f0 <HAL_GetTick>
 800bb12:	4602      	mov	r2, r0
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	69ba      	ldr	r2, [r7, #24]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d302      	bcc.n	800bb24 <UART_WaitOnFlagUntilTimeout+0x30>
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d101      	bne.n	800bb28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bb24:	2303      	movs	r3, #3
 800bb26:	e04e      	b.n	800bbc6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f003 0304 	and.w	r3, r3, #4
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d037      	beq.n	800bba6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	2b80      	cmp	r3, #128	@ 0x80
 800bb3a:	d034      	beq.n	800bba6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	2b40      	cmp	r3, #64	@ 0x40
 800bb40:	d031      	beq.n	800bba6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	69db      	ldr	r3, [r3, #28]
 800bb48:	f003 0308 	and.w	r3, r3, #8
 800bb4c:	2b08      	cmp	r3, #8
 800bb4e:	d110      	bne.n	800bb72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2208      	movs	r2, #8
 800bb56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb58:	68f8      	ldr	r0, [r7, #12]
 800bb5a:	f000 f838 	bl	800bbce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2208      	movs	r2, #8
 800bb62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e029      	b.n	800bbc6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	69db      	ldr	r3, [r3, #28]
 800bb78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb80:	d111      	bne.n	800bba6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bb8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb8c:	68f8      	ldr	r0, [r7, #12]
 800bb8e:	f000 f81e 	bl	800bbce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2220      	movs	r2, #32
 800bb96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bba2:	2303      	movs	r3, #3
 800bba4:	e00f      	b.n	800bbc6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	69da      	ldr	r2, [r3, #28]
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	4013      	ands	r3, r2
 800bbb0:	68ba      	ldr	r2, [r7, #8]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	bf0c      	ite	eq
 800bbb6:	2301      	moveq	r3, #1
 800bbb8:	2300      	movne	r3, #0
 800bbba:	b2db      	uxtb	r3, r3
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	79fb      	ldrb	r3, [r7, #7]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d0a0      	beq.n	800bb06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bbce:	b480      	push	{r7}
 800bbd0:	b095      	sub	sp, #84	@ 0x54
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbde:	e853 3f00 	ldrex	r3, [r3]
 800bbe2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbe6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bbea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbf4:	643b      	str	r3, [r7, #64]	@ 0x40
 800bbf6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bbfa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bbfc:	e841 2300 	strex	r3, r2, [r1]
 800bc00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bc02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d1e6      	bne.n	800bbd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	3308      	adds	r3, #8
 800bc0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc10:	6a3b      	ldr	r3, [r7, #32]
 800bc12:	e853 3f00 	ldrex	r3, [r3]
 800bc16:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bc1e:	f023 0301 	bic.w	r3, r3, #1
 800bc22:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	3308      	adds	r3, #8
 800bc2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bc2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc34:	e841 2300 	strex	r3, r2, [r1]
 800bc38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d1e3      	bne.n	800bc08 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d118      	bne.n	800bc7a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	e853 3f00 	ldrex	r3, [r3]
 800bc54:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	f023 0310 	bic.w	r3, r3, #16
 800bc5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	461a      	mov	r2, r3
 800bc64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc66:	61bb      	str	r3, [r7, #24]
 800bc68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc6a:	6979      	ldr	r1, [r7, #20]
 800bc6c:	69ba      	ldr	r2, [r7, #24]
 800bc6e:	e841 2300 	strex	r3, r2, [r1]
 800bc72:	613b      	str	r3, [r7, #16]
   return(result);
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d1e6      	bne.n	800bc48 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2220      	movs	r2, #32
 800bc7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bc8e:	bf00      	nop
 800bc90:	3754      	adds	r7, #84	@ 0x54
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr

0800bc9a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc9a:	b480      	push	{r7}
 800bc9c:	b085      	sub	sp, #20
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d101      	bne.n	800bcb0 <HAL_UARTEx_DisableFifoMode+0x16>
 800bcac:	2302      	movs	r3, #2
 800bcae:	e027      	b.n	800bd00 <HAL_UARTEx_DisableFifoMode+0x66>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2224      	movs	r2, #36	@ 0x24
 800bcbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f022 0201 	bic.w	r2, r2, #1
 800bcd6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bcde:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	68fa      	ldr	r2, [r7, #12]
 800bcec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2220      	movs	r2, #32
 800bcf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bcfe:	2300      	movs	r3, #0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3714      	adds	r7, #20
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d101      	bne.n	800bd24 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bd20:	2302      	movs	r3, #2
 800bd22:	e02d      	b.n	800bd80 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2201      	movs	r2, #1
 800bd28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2224      	movs	r2, #36	@ 0x24
 800bd30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f022 0201 	bic.w	r2, r2, #1
 800bd4a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	683a      	ldr	r2, [r7, #0]
 800bd5c:	430a      	orrs	r2, r1
 800bd5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 f84f 	bl	800be04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2220      	movs	r2, #32
 800bd72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd7e:	2300      	movs	r3, #0
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d101      	bne.n	800bda0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd9c:	2302      	movs	r3, #2
 800bd9e:	e02d      	b.n	800bdfc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2201      	movs	r2, #1
 800bda4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2224      	movs	r2, #36	@ 0x24
 800bdac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f022 0201 	bic.w	r2, r2, #1
 800bdc6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	683a      	ldr	r2, [r7, #0]
 800bdd8:	430a      	orrs	r2, r1
 800bdda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 f811 	bl	800be04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	68fa      	ldr	r2, [r7, #12]
 800bde8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2220      	movs	r2, #32
 800bdee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3710      	adds	r7, #16
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be10:	2b00      	cmp	r3, #0
 800be12:	d108      	bne.n	800be26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2201      	movs	r2, #1
 800be18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2201      	movs	r2, #1
 800be20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800be24:	e031      	b.n	800be8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800be26:	2308      	movs	r3, #8
 800be28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800be2a:	2308      	movs	r3, #8
 800be2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	689b      	ldr	r3, [r3, #8]
 800be34:	0e5b      	lsrs	r3, r3, #25
 800be36:	b2db      	uxtb	r3, r3
 800be38:	f003 0307 	and.w	r3, r3, #7
 800be3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	689b      	ldr	r3, [r3, #8]
 800be44:	0f5b      	lsrs	r3, r3, #29
 800be46:	b2db      	uxtb	r3, r3
 800be48:	f003 0307 	and.w	r3, r3, #7
 800be4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be4e:	7bbb      	ldrb	r3, [r7, #14]
 800be50:	7b3a      	ldrb	r2, [r7, #12]
 800be52:	4911      	ldr	r1, [pc, #68]	@ (800be98 <UARTEx_SetNbDataToProcess+0x94>)
 800be54:	5c8a      	ldrb	r2, [r1, r2]
 800be56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800be5a:	7b3a      	ldrb	r2, [r7, #12]
 800be5c:	490f      	ldr	r1, [pc, #60]	@ (800be9c <UARTEx_SetNbDataToProcess+0x98>)
 800be5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be60:	fb93 f3f2 	sdiv	r3, r3, r2
 800be64:	b29a      	uxth	r2, r3
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be6c:	7bfb      	ldrb	r3, [r7, #15]
 800be6e:	7b7a      	ldrb	r2, [r7, #13]
 800be70:	4909      	ldr	r1, [pc, #36]	@ (800be98 <UARTEx_SetNbDataToProcess+0x94>)
 800be72:	5c8a      	ldrb	r2, [r1, r2]
 800be74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800be78:	7b7a      	ldrb	r2, [r7, #13]
 800be7a:	4908      	ldr	r1, [pc, #32]	@ (800be9c <UARTEx_SetNbDataToProcess+0x98>)
 800be7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be7e:	fb93 f3f2 	sdiv	r3, r3, r2
 800be82:	b29a      	uxth	r2, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800be8a:	bf00      	nop
 800be8c:	3714      	adds	r7, #20
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr
 800be96:	bf00      	nop
 800be98:	08016f78 	.word	0x08016f78
 800be9c:	08016f80 	.word	0x08016f80

0800bea0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b085      	sub	sp, #20
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2200      	movs	r2, #0
 800beac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800beb0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800beb4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	b29a      	uxth	r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3714      	adds	r7, #20
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr

0800bece <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800bece:	b480      	push	{r7}
 800bed0:	b085      	sub	sp, #20
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bed6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800beda:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800bee2:	b29a      	uxth	r2, r3
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	43db      	mvns	r3, r3
 800beea:	b29b      	uxth	r3, r3
 800beec:	4013      	ands	r3, r2
 800beee:	b29a      	uxth	r2, r3
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bef6:	2300      	movs	r3, #0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3714      	adds	r7, #20
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	1d3b      	adds	r3, r7, #4
 800bf0e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2201      	movs	r2, #1
 800bf16:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2200      	movs	r2, #0
 800bf26:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3714      	adds	r7, #20
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b09d      	sub	sp, #116	@ 0x74
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	4413      	add	r3, r2
 800bf5a:	881b      	ldrh	r3, [r3, #0]
 800bf5c:	b29b      	uxth	r3, r3
 800bf5e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800bf62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf66:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	78db      	ldrb	r3, [r3, #3]
 800bf6e:	2b03      	cmp	r3, #3
 800bf70:	d81f      	bhi.n	800bfb2 <USB_ActivateEndpoint+0x72>
 800bf72:	a201      	add	r2, pc, #4	@ (adr r2, 800bf78 <USB_ActivateEndpoint+0x38>)
 800bf74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf78:	0800bf89 	.word	0x0800bf89
 800bf7c:	0800bfa5 	.word	0x0800bfa5
 800bf80:	0800bfbb 	.word	0x0800bfbb
 800bf84:	0800bf97 	.word	0x0800bf97
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bf88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bf8c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bf90:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bf94:	e012      	b.n	800bfbc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bf96:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bf9a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800bf9e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bfa2:	e00b      	b.n	800bfbc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bfa4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bfa8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bfac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bfb0:	e004      	b.n	800bfbc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800bfb8:	e000      	b.n	800bfbc <USB_ActivateEndpoint+0x7c>
      break;
 800bfba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	441a      	add	r2, r3
 800bfc6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bfca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bfce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bfd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	4413      	add	r3, r2
 800bfe8:	881b      	ldrh	r3, [r3, #0]
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	b21b      	sxth	r3, r3
 800bfee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bff6:	b21a      	sxth	r2, r3
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	b21b      	sxth	r3, r3
 800bffe:	4313      	orrs	r3, r2
 800c000:	b21b      	sxth	r3, r3
 800c002:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	441a      	add	r2, r3
 800c010:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800c014:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c018:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c01c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c024:	b29b      	uxth	r3, r3
 800c026:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	7b1b      	ldrb	r3, [r3, #12]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f040 8178 	bne.w	800c322 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	785b      	ldrb	r3, [r3, #1]
 800c036:	2b00      	cmp	r3, #0
 800c038:	f000 8084 	beq.w	800c144 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	61bb      	str	r3, [r7, #24]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c046:	b29b      	uxth	r3, r3
 800c048:	461a      	mov	r2, r3
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	4413      	add	r3, r2
 800c04e:	61bb      	str	r3, [r7, #24]
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	00da      	lsls	r2, r3, #3
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	4413      	add	r3, r2
 800c05a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c05e:	617b      	str	r3, [r7, #20]
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	88db      	ldrh	r3, [r3, #6]
 800c064:	085b      	lsrs	r3, r3, #1
 800c066:	b29b      	uxth	r3, r3
 800c068:	005b      	lsls	r3, r3, #1
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	4413      	add	r3, r2
 800c07a:	881b      	ldrh	r3, [r3, #0]
 800c07c:	827b      	strh	r3, [r7, #18]
 800c07e:	8a7b      	ldrh	r3, [r7, #18]
 800c080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c084:	2b00      	cmp	r3, #0
 800c086:	d01b      	beq.n	800c0c0 <USB_ActivateEndpoint+0x180>
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	4413      	add	r3, r2
 800c092:	881b      	ldrh	r3, [r3, #0]
 800c094:	b29b      	uxth	r3, r3
 800c096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c09a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c09e:	823b      	strh	r3, [r7, #16]
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	441a      	add	r2, r3
 800c0aa:	8a3b      	ldrh	r3, [r7, #16]
 800c0ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	78db      	ldrb	r3, [r3, #3]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d020      	beq.n	800c10a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	4413      	add	r3, r2
 800c0d2:	881b      	ldrh	r3, [r3, #0]
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0de:	81bb      	strh	r3, [r7, #12]
 800c0e0:	89bb      	ldrh	r3, [r7, #12]
 800c0e2:	f083 0320 	eor.w	r3, r3, #32
 800c0e6:	81bb      	strh	r3, [r7, #12]
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	441a      	add	r2, r3
 800c0f2:	89bb      	ldrh	r3, [r7, #12]
 800c0f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c104:	b29b      	uxth	r3, r3
 800c106:	8013      	strh	r3, [r2, #0]
 800c108:	e2d5      	b.n	800c6b6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4413      	add	r3, r2
 800c114:	881b      	ldrh	r3, [r3, #0]
 800c116:	b29b      	uxth	r3, r3
 800c118:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c11c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c120:	81fb      	strh	r3, [r7, #14]
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	441a      	add	r2, r3
 800c12c:	89fb      	ldrh	r3, [r7, #14]
 800c12e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c132:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c136:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c13a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c13e:	b29b      	uxth	r3, r3
 800c140:	8013      	strh	r3, [r2, #0]
 800c142:	e2b8      	b.n	800c6b6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	633b      	str	r3, [r7, #48]	@ 0x30
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c14e:	b29b      	uxth	r3, r3
 800c150:	461a      	mov	r2, r3
 800c152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c154:	4413      	add	r3, r2
 800c156:	633b      	str	r3, [r7, #48]	@ 0x30
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	00da      	lsls	r2, r3, #3
 800c15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c160:	4413      	add	r3, r2
 800c162:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c166:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	88db      	ldrh	r3, [r3, #6]
 800c16c:	085b      	lsrs	r3, r3, #1
 800c16e:	b29b      	uxth	r3, r3
 800c170:	005b      	lsls	r3, r3, #1
 800c172:	b29a      	uxth	r2, r3
 800c174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c176:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c182:	b29b      	uxth	r3, r3
 800c184:	461a      	mov	r2, r3
 800c186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c188:	4413      	add	r3, r2
 800c18a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	00da      	lsls	r2, r3, #3
 800c192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c194:	4413      	add	r3, r2
 800c196:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c19a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c19e:	881b      	ldrh	r3, [r3, #0]
 800c1a0:	b29b      	uxth	r3, r3
 800c1a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1a6:	b29a      	uxth	r2, r3
 800c1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1aa:	801a      	strh	r2, [r3, #0]
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	691b      	ldr	r3, [r3, #16]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d10a      	bne.n	800c1ca <USB_ActivateEndpoint+0x28a>
 800c1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b6:	881b      	ldrh	r3, [r3, #0]
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1c2:	b29a      	uxth	r2, r3
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c6:	801a      	strh	r2, [r3, #0]
 800c1c8:	e039      	b.n	800c23e <USB_ActivateEndpoint+0x2fe>
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	691b      	ldr	r3, [r3, #16]
 800c1ce:	2b3e      	cmp	r3, #62	@ 0x3e
 800c1d0:	d818      	bhi.n	800c204 <USB_ActivateEndpoint+0x2c4>
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	691b      	ldr	r3, [r3, #16]
 800c1d6:	085b      	lsrs	r3, r3, #1
 800c1d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	f003 0301 	and.w	r3, r3, #1
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d002      	beq.n	800c1ec <USB_ActivateEndpoint+0x2ac>
 800c1e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ee:	881b      	ldrh	r3, [r3, #0]
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c1f4:	b29b      	uxth	r3, r3
 800c1f6:	029b      	lsls	r3, r3, #10
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c200:	801a      	strh	r2, [r3, #0]
 800c202:	e01c      	b.n	800c23e <USB_ActivateEndpoint+0x2fe>
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	691b      	ldr	r3, [r3, #16]
 800c208:	095b      	lsrs	r3, r3, #5
 800c20a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	691b      	ldr	r3, [r3, #16]
 800c210:	f003 031f 	and.w	r3, r3, #31
 800c214:	2b00      	cmp	r3, #0
 800c216:	d102      	bne.n	800c21e <USB_ActivateEndpoint+0x2de>
 800c218:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c21a:	3b01      	subs	r3, #1
 800c21c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c220:	881b      	ldrh	r3, [r3, #0]
 800c222:	b29a      	uxth	r2, r3
 800c224:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c226:	b29b      	uxth	r3, r3
 800c228:	029b      	lsls	r3, r3, #10
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	4313      	orrs	r3, r2
 800c22e:	b29b      	uxth	r3, r3
 800c230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c238:	b29a      	uxth	r2, r3
 800c23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c23c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	4413      	add	r3, r2
 800c248:	881b      	ldrh	r3, [r3, #0]
 800c24a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c24c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c24e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c252:	2b00      	cmp	r3, #0
 800c254:	d01b      	beq.n	800c28e <USB_ActivateEndpoint+0x34e>
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	4413      	add	r3, r2
 800c260:	881b      	ldrh	r3, [r3, #0]
 800c262:	b29b      	uxth	r3, r3
 800c264:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c268:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c26c:	843b      	strh	r3, [r7, #32]
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	441a      	add	r2, r3
 800c278:	8c3b      	ldrh	r3, [r7, #32]
 800c27a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c27e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c282:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d124      	bne.n	800c2e0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	4413      	add	r3, r2
 800c2a0:	881b      	ldrh	r3, [r3, #0]
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c2a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2ac:	83bb      	strh	r3, [r7, #28]
 800c2ae:	8bbb      	ldrh	r3, [r7, #28]
 800c2b0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c2b4:	83bb      	strh	r3, [r7, #28]
 800c2b6:	8bbb      	ldrh	r3, [r7, #28]
 800c2b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c2bc:	83bb      	strh	r3, [r7, #28]
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	441a      	add	r2, r3
 800c2c8:	8bbb      	ldrh	r3, [r7, #28]
 800c2ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	8013      	strh	r3, [r2, #0]
 800c2de:	e1ea      	b.n	800c6b6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	4413      	add	r3, r2
 800c2ea:	881b      	ldrh	r3, [r3, #0]
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c2f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2f6:	83fb      	strh	r3, [r7, #30]
 800c2f8:	8bfb      	ldrh	r3, [r7, #30]
 800c2fa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c2fe:	83fb      	strh	r3, [r7, #30]
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	441a      	add	r2, r3
 800c30a:	8bfb      	ldrh	r3, [r7, #30]
 800c30c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c310:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c314:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	8013      	strh	r3, [r2, #0]
 800c320:	e1c9      	b.n	800c6b6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	78db      	ldrb	r3, [r3, #3]
 800c326:	2b02      	cmp	r3, #2
 800c328:	d11e      	bne.n	800c368 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	009b      	lsls	r3, r3, #2
 800c332:	4413      	add	r3, r2
 800c334:	881b      	ldrh	r3, [r3, #0]
 800c336:	b29b      	uxth	r3, r3
 800c338:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c33c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c340:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	441a      	add	r2, r3
 800c34e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c352:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c356:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c35a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c35e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c362:	b29b      	uxth	r3, r3
 800c364:	8013      	strh	r3, [r2, #0]
 800c366:	e01d      	b.n	800c3a4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	009b      	lsls	r3, r3, #2
 800c370:	4413      	add	r3, r2
 800c372:	881b      	ldrh	r3, [r3, #0]
 800c374:	b29b      	uxth	r3, r3
 800c376:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c37a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c37e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	441a      	add	r2, r3
 800c38c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c390:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c394:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c398:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c39c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3a0:	b29b      	uxth	r3, r3
 800c3a2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3b4:	4413      	add	r3, r2
 800c3b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	00da      	lsls	r2, r3, #3
 800c3be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3c0:	4413      	add	r3, r2
 800c3c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c3c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	891b      	ldrh	r3, [r3, #8]
 800c3cc:	085b      	lsrs	r3, r3, #1
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	005b      	lsls	r3, r3, #1
 800c3d2:	b29a      	uxth	r2, r3
 800c3d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c3d6:	801a      	strh	r2, [r3, #0]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	657b      	str	r3, [r7, #84]	@ 0x54
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3e8:	4413      	add	r3, r2
 800c3ea:	657b      	str	r3, [r7, #84]	@ 0x54
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	00da      	lsls	r2, r3, #3
 800c3f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3f4:	4413      	add	r3, r2
 800c3f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c3fa:	653b      	str	r3, [r7, #80]	@ 0x50
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	895b      	ldrh	r3, [r3, #10]
 800c400:	085b      	lsrs	r3, r3, #1
 800c402:	b29b      	uxth	r3, r3
 800c404:	005b      	lsls	r3, r3, #1
 800c406:	b29a      	uxth	r2, r3
 800c408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c40a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	785b      	ldrb	r3, [r3, #1]
 800c410:	2b00      	cmp	r3, #0
 800c412:	f040 8093 	bne.w	800c53c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	4413      	add	r3, r2
 800c420:	881b      	ldrh	r3, [r3, #0]
 800c422:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c426:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c42a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d01b      	beq.n	800c46a <USB_ActivateEndpoint+0x52a>
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	4413      	add	r3, r2
 800c43c:	881b      	ldrh	r3, [r3, #0]
 800c43e:	b29b      	uxth	r3, r3
 800c440:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c444:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c448:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	441a      	add	r2, r3
 800c454:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c456:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c45a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c45e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c466:	b29b      	uxth	r3, r3
 800c468:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	4413      	add	r3, r2
 800c474:	881b      	ldrh	r3, [r3, #0]
 800c476:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c478:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c47a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d01b      	beq.n	800c4ba <USB_ActivateEndpoint+0x57a>
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	4413      	add	r3, r2
 800c48c:	881b      	ldrh	r3, [r3, #0]
 800c48e:	b29b      	uxth	r3, r3
 800c490:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c494:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c498:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	441a      	add	r2, r3
 800c4a4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c4a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c4ba:	687a      	ldr	r2, [r7, #4]
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	4413      	add	r3, r2
 800c4c4:	881b      	ldrh	r3, [r3, #0]
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c4cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4d0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c4d2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c4d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c4d8:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c4da:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c4dc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c4e0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	009b      	lsls	r3, r3, #2
 800c4ea:	441a      	add	r2, r3
 800c4ec:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c4ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	4413      	add	r3, r2
 800c50c:	881b      	ldrh	r3, [r3, #0]
 800c50e:	b29b      	uxth	r3, r3
 800c510:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c514:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c518:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c51a:	687a      	ldr	r2, [r7, #4]
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	441a      	add	r2, r3
 800c524:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c526:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c52a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c52e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c536:	b29b      	uxth	r3, r3
 800c538:	8013      	strh	r3, [r2, #0]
 800c53a:	e0bc      	b.n	800c6b6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	4413      	add	r3, r2
 800c546:	881b      	ldrh	r3, [r3, #0]
 800c548:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800c54c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c554:	2b00      	cmp	r3, #0
 800c556:	d01d      	beq.n	800c594 <USB_ActivateEndpoint+0x654>
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4413      	add	r3, r2
 800c562:	881b      	ldrh	r3, [r3, #0]
 800c564:	b29b      	uxth	r3, r3
 800c566:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c56a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c56e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	009b      	lsls	r3, r3, #2
 800c57a:	441a      	add	r2, r3
 800c57c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800c580:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c584:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c588:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c58c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c590:	b29b      	uxth	r3, r3
 800c592:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	009b      	lsls	r3, r3, #2
 800c59c:	4413      	add	r3, r2
 800c59e:	881b      	ldrh	r3, [r3, #0]
 800c5a0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800c5a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c5a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d01d      	beq.n	800c5ec <USB_ActivateEndpoint+0x6ac>
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	4413      	add	r3, r2
 800c5ba:	881b      	ldrh	r3, [r3, #0]
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5c6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	441a      	add	r2, r3
 800c5d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800c5d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	78db      	ldrb	r3, [r3, #3]
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d024      	beq.n	800c63e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	009b      	lsls	r3, r3, #2
 800c5fc:	4413      	add	r3, r2
 800c5fe:	881b      	ldrh	r3, [r3, #0]
 800c600:	b29b      	uxth	r3, r3
 800c602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c606:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c60a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c60e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c612:	f083 0320 	eor.w	r3, r3, #32
 800c616:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	441a      	add	r2, r3
 800c624:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c628:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c62c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c630:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c638:	b29b      	uxth	r3, r3
 800c63a:	8013      	strh	r3, [r2, #0]
 800c63c:	e01d      	b.n	800c67a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	4413      	add	r3, r2
 800c648:	881b      	ldrh	r3, [r3, #0]
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c654:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	009b      	lsls	r3, r3, #2
 800c660:	441a      	add	r2, r3
 800c662:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c666:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c66a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c66e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c676:	b29b      	uxth	r3, r3
 800c678:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	4413      	add	r3, r2
 800c684:	881b      	ldrh	r3, [r3, #0]
 800c686:	b29b      	uxth	r3, r3
 800c688:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c68c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c690:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	441a      	add	r2, r3
 800c69e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c6a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c6b6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3774      	adds	r7, #116	@ 0x74
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr
 800c6c6:	bf00      	nop

0800c6c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b08d      	sub	sp, #52	@ 0x34
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	7b1b      	ldrb	r3, [r3, #12]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	f040 808e 	bne.w	800c7f8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	785b      	ldrb	r3, [r3, #1]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d044      	beq.n	800c76e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	4413      	add	r3, r2
 800c6ee:	881b      	ldrh	r3, [r3, #0]
 800c6f0:	81bb      	strh	r3, [r7, #12]
 800c6f2:	89bb      	ldrh	r3, [r7, #12]
 800c6f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d01b      	beq.n	800c734 <USB_DeactivateEndpoint+0x6c>
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	4413      	add	r3, r2
 800c706:	881b      	ldrh	r3, [r3, #0]
 800c708:	b29b      	uxth	r3, r3
 800c70a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c70e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c712:	817b      	strh	r3, [r7, #10]
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	441a      	add	r2, r3
 800c71e:	897b      	ldrh	r3, [r7, #10]
 800c720:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c724:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c728:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c72c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c730:	b29b      	uxth	r3, r3
 800c732:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	4413      	add	r3, r2
 800c73e:	881b      	ldrh	r3, [r3, #0]
 800c740:	b29b      	uxth	r3, r3
 800c742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c746:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c74a:	813b      	strh	r3, [r7, #8]
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	009b      	lsls	r3, r3, #2
 800c754:	441a      	add	r2, r3
 800c756:	893b      	ldrh	r3, [r7, #8]
 800c758:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c75c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c760:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c768:	b29b      	uxth	r3, r3
 800c76a:	8013      	strh	r3, [r2, #0]
 800c76c:	e192      	b.n	800ca94 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	4413      	add	r3, r2
 800c778:	881b      	ldrh	r3, [r3, #0]
 800c77a:	827b      	strh	r3, [r7, #18]
 800c77c:	8a7b      	ldrh	r3, [r7, #18]
 800c77e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c782:	2b00      	cmp	r3, #0
 800c784:	d01b      	beq.n	800c7be <USB_DeactivateEndpoint+0xf6>
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	009b      	lsls	r3, r3, #2
 800c78e:	4413      	add	r3, r2
 800c790:	881b      	ldrh	r3, [r3, #0]
 800c792:	b29b      	uxth	r3, r3
 800c794:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c79c:	823b      	strh	r3, [r7, #16]
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	441a      	add	r2, r3
 800c7a8:	8a3b      	ldrh	r3, [r7, #16]
 800c7aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c7b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	4413      	add	r3, r2
 800c7c8:	881b      	ldrh	r3, [r3, #0]
 800c7ca:	b29b      	uxth	r3, r3
 800c7cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c7d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7d4:	81fb      	strh	r3, [r7, #14]
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	441a      	add	r2, r3
 800c7e0:	89fb      	ldrh	r3, [r7, #14]
 800c7e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7f2:	b29b      	uxth	r3, r3
 800c7f4:	8013      	strh	r3, [r2, #0]
 800c7f6:	e14d      	b.n	800ca94 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	785b      	ldrb	r3, [r3, #1]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f040 80a5 	bne.w	800c94c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	4413      	add	r3, r2
 800c80c:	881b      	ldrh	r3, [r3, #0]
 800c80e:	843b      	strh	r3, [r7, #32]
 800c810:	8c3b      	ldrh	r3, [r7, #32]
 800c812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c816:	2b00      	cmp	r3, #0
 800c818:	d01b      	beq.n	800c852 <USB_DeactivateEndpoint+0x18a>
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	4413      	add	r3, r2
 800c824:	881b      	ldrh	r3, [r3, #0]
 800c826:	b29b      	uxth	r3, r3
 800c828:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c82c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c830:	83fb      	strh	r3, [r7, #30]
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	009b      	lsls	r3, r3, #2
 800c83a:	441a      	add	r2, r3
 800c83c:	8bfb      	ldrh	r3, [r7, #30]
 800c83e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c842:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c846:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c84a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c84e:	b29b      	uxth	r3, r3
 800c850:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	4413      	add	r3, r2
 800c85c:	881b      	ldrh	r3, [r3, #0]
 800c85e:	83bb      	strh	r3, [r7, #28]
 800c860:	8bbb      	ldrh	r3, [r7, #28]
 800c862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c866:	2b00      	cmp	r3, #0
 800c868:	d01b      	beq.n	800c8a2 <USB_DeactivateEndpoint+0x1da>
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	4413      	add	r3, r2
 800c874:	881b      	ldrh	r3, [r3, #0]
 800c876:	b29b      	uxth	r3, r3
 800c878:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c87c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c880:	837b      	strh	r3, [r7, #26]
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	441a      	add	r2, r3
 800c88c:	8b7b      	ldrh	r3, [r7, #26]
 800c88e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c892:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c896:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c89a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	4413      	add	r3, r2
 800c8ac:	881b      	ldrh	r3, [r3, #0]
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8b8:	833b      	strh	r3, [r7, #24]
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	009b      	lsls	r3, r3, #2
 800c8c2:	441a      	add	r2, r3
 800c8c4:	8b3b      	ldrh	r3, [r7, #24]
 800c8c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	4413      	add	r3, r2
 800c8e4:	881b      	ldrh	r3, [r3, #0]
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c8ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8f0:	82fb      	strh	r3, [r7, #22]
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	441a      	add	r2, r3
 800c8fc:	8afb      	ldrh	r3, [r7, #22]
 800c8fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c902:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c90a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c90e:	b29b      	uxth	r3, r3
 800c910:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	4413      	add	r3, r2
 800c91c:	881b      	ldrh	r3, [r3, #0]
 800c91e:	b29b      	uxth	r3, r3
 800c920:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c924:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c928:	82bb      	strh	r3, [r7, #20]
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	441a      	add	r2, r3
 800c934:	8abb      	ldrh	r3, [r7, #20]
 800c936:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c93a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c93e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c946:	b29b      	uxth	r3, r3
 800c948:	8013      	strh	r3, [r2, #0]
 800c94a:	e0a3      	b.n	800ca94 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	4413      	add	r3, r2
 800c956:	881b      	ldrh	r3, [r3, #0]
 800c958:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c95a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c95c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c960:	2b00      	cmp	r3, #0
 800c962:	d01b      	beq.n	800c99c <USB_DeactivateEndpoint+0x2d4>
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	009b      	lsls	r3, r3, #2
 800c96c:	4413      	add	r3, r2
 800c96e:	881b      	ldrh	r3, [r3, #0]
 800c970:	b29b      	uxth	r3, r3
 800c972:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c97a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	009b      	lsls	r3, r3, #2
 800c984:	441a      	add	r2, r3
 800c986:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c988:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c98c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c990:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c998:	b29b      	uxth	r3, r3
 800c99a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	4413      	add	r3, r2
 800c9a6:	881b      	ldrh	r3, [r3, #0]
 800c9a8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800c9aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c9ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d01b      	beq.n	800c9ec <USB_DeactivateEndpoint+0x324>
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	4413      	add	r3, r2
 800c9be:	881b      	ldrh	r3, [r3, #0]
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9ca:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	441a      	add	r2, r3
 800c9d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c9d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	4413      	add	r3, r2
 800c9f6:	881b      	ldrh	r3, [r3, #0]
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca02:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	009b      	lsls	r3, r3, #2
 800ca0c:	441a      	add	r2, r3
 800ca0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ca10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ca1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	4413      	add	r3, r2
 800ca2e:	881b      	ldrh	r3, [r3, #0]
 800ca30:	b29b      	uxth	r3, r3
 800ca32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca3a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	441a      	add	r2, r3
 800ca46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca58:	b29b      	uxth	r3, r3
 800ca5a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	4413      	add	r3, r2
 800ca66:	881b      	ldrh	r3, [r3, #0]
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ca6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca72:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	441a      	add	r2, r3
 800ca7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ca80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca90:	b29b      	uxth	r3, r3
 800ca92:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ca94:	2300      	movs	r3, #0
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3734      	adds	r7, #52	@ 0x34
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr

0800caa2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b0c2      	sub	sp, #264	@ 0x108
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cab0:	6018      	str	r0, [r3, #0]
 800cab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caba:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cabc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	785b      	ldrb	r3, [r3, #1]
 800cac8:	2b01      	cmp	r3, #1
 800caca:	f040 86b7 	bne.w	800d83c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800cace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	699a      	ldr	r2, [r3, #24]
 800cada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	691b      	ldr	r3, [r3, #16]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d908      	bls.n	800cafc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800caea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	691b      	ldr	r3, [r3, #16]
 800caf6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800cafa:	e007      	b.n	800cb0c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800cafc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	699b      	ldr	r3, [r3, #24]
 800cb08:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800cb0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	7b1b      	ldrb	r3, [r3, #12]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d13a      	bne.n	800cb92 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800cb1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	6959      	ldr	r1, [r3, #20]
 800cb28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	88da      	ldrh	r2, [r3, #6]
 800cb34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cb3e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cb42:	6800      	ldr	r0, [r0, #0]
 800cb44:	f001 fc99 	bl	800e47a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cb48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	613b      	str	r3, [r7, #16]
 800cb54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	461a      	mov	r2, r3
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	4413      	add	r3, r2
 800cb6a:	613b      	str	r3, [r7, #16]
 800cb6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	00da      	lsls	r2, r3, #3
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	4413      	add	r3, r2
 800cb7e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cb82:	60fb      	str	r3, [r7, #12]
 800cb84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb88:	b29a      	uxth	r2, r3
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	801a      	strh	r2, [r3, #0]
 800cb8e:	f000 be1f 	b.w	800d7d0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800cb92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	78db      	ldrb	r3, [r3, #3]
 800cb9e:	2b02      	cmp	r3, #2
 800cba0:	f040 8462 	bne.w	800d468 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800cba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	6a1a      	ldr	r2, [r3, #32]
 800cbb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	691b      	ldr	r3, [r3, #16]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	f240 83df 	bls.w	800d380 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800cbc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	009b      	lsls	r3, r3, #2
 800cbda:	4413      	add	r3, r2
 800cbdc:	881b      	ldrh	r3, [r3, #0]
 800cbde:	b29b      	uxth	r3, r3
 800cbe0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbe8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800cbec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	441a      	add	r2, r3
 800cc06:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800cc0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc12:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800cc16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800cc1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	6a1a      	ldr	r2, [r3, #32]
 800cc2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc2e:	1ad2      	subs	r2, r2, r3
 800cc30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cc3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	4413      	add	r3, r2
 800cc56:	881b      	ldrh	r3, [r3, #0]
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	f000 81c7 	beq.w	800cff2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cc64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	785b      	ldrb	r3, [r3, #1]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d177      	bne.n	800cd70 <USB_EPStartXfer+0x2ce>
 800cc80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc9a:	b29b      	uxth	r3, r3
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cca0:	4413      	add	r3, r2
 800cca2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cca8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	00da      	lsls	r2, r3, #3
 800ccb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb4:	4413      	add	r3, r2
 800ccb6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ccba:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccbe:	881b      	ldrh	r3, [r3, #0]
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ccc6:	b29a      	uxth	r2, r3
 800ccc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccca:	801a      	strh	r2, [r3, #0]
 800cccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d10a      	bne.n	800ccea <USB_EPStartXfer+0x248>
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd6:	881b      	ldrh	r3, [r3, #0]
 800ccd8:	b29b      	uxth	r3, r3
 800ccda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce6:	801a      	strh	r2, [r3, #0]
 800cce8:	e067      	b.n	800cdba <USB_EPStartXfer+0x318>
 800ccea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccee:	2b3e      	cmp	r3, #62	@ 0x3e
 800ccf0:	d81c      	bhi.n	800cd2c <USB_EPStartXfer+0x28a>
 800ccf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccf6:	085b      	lsrs	r3, r3, #1
 800ccf8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ccfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd00:	f003 0301 	and.w	r3, r3, #1
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d004      	beq.n	800cd12 <USB_EPStartXfer+0x270>
 800cd08:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cd12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd14:	881b      	ldrh	r3, [r3, #0]
 800cd16:	b29a      	uxth	r2, r3
 800cd18:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	029b      	lsls	r3, r3, #10
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	4313      	orrs	r3, r2
 800cd24:	b29a      	uxth	r2, r3
 800cd26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd28:	801a      	strh	r2, [r3, #0]
 800cd2a:	e046      	b.n	800cdba <USB_EPStartXfer+0x318>
 800cd2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd30:	095b      	lsrs	r3, r3, #5
 800cd32:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cd36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd3a:	f003 031f 	and.w	r3, r3, #31
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d104      	bne.n	800cd4c <USB_EPStartXfer+0x2aa>
 800cd42:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cd46:	3b01      	subs	r3, #1
 800cd48:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cd4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd4e:	881b      	ldrh	r3, [r3, #0]
 800cd50:	b29a      	uxth	r2, r3
 800cd52:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	029b      	lsls	r3, r3, #10
 800cd5a:	b29b      	uxth	r3, r3
 800cd5c:	4313      	orrs	r3, r2
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd68:	b29a      	uxth	r2, r3
 800cd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd6c:	801a      	strh	r2, [r3, #0]
 800cd6e:	e024      	b.n	800cdba <USB_EPStartXfer+0x318>
 800cd70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	785b      	ldrb	r3, [r3, #1]
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d11c      	bne.n	800cdba <USB_EPStartXfer+0x318>
 800cd80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	461a      	mov	r2, r3
 800cd92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd94:	4413      	add	r3, r2
 800cd96:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	00da      	lsls	r2, r3, #3
 800cda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda8:	4413      	add	r3, r2
 800cdaa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cdae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cdb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdb4:	b29a      	uxth	r2, r3
 800cdb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdb8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cdba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	895b      	ldrh	r3, [r3, #10]
 800cdc6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cdca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	6959      	ldr	r1, [r3, #20]
 800cdd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cde0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cde4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cde8:	6800      	ldr	r0, [r0, #0]
 800cdea:	f001 fb46 	bl	800e47a <USB_WritePMA>
            ep->xfer_buff += len;
 800cdee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	695a      	ldr	r2, [r3, #20]
 800cdfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdfe:	441a      	add	r2, r3
 800ce00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ce0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	6a1a      	ldr	r2, [r3, #32]
 800ce18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	691b      	ldr	r3, [r3, #16]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d90f      	bls.n	800ce48 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800ce28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	6a1a      	ldr	r2, [r3, #32]
 800ce34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce38:	1ad2      	subs	r2, r2, r3
 800ce3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	621a      	str	r2, [r3, #32]
 800ce46:	e00e      	b.n	800ce66 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800ce48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	6a1b      	ldr	r3, [r3, #32]
 800ce54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800ce58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	2200      	movs	r2, #0
 800ce64:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ce66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	785b      	ldrb	r3, [r3, #1]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d177      	bne.n	800cf66 <USB_EPStartXfer+0x4c4>
 800ce76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	61bb      	str	r3, [r7, #24]
 800ce82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	461a      	mov	r2, r3
 800ce94:	69bb      	ldr	r3, [r7, #24]
 800ce96:	4413      	add	r3, r2
 800ce98:	61bb      	str	r3, [r7, #24]
 800ce9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	00da      	lsls	r2, r3, #3
 800cea8:	69bb      	ldr	r3, [r7, #24]
 800ceaa:	4413      	add	r3, r2
 800ceac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ceb0:	617b      	str	r3, [r7, #20]
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	881b      	ldrh	r3, [r3, #0]
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	801a      	strh	r2, [r3, #0]
 800cec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d10a      	bne.n	800cee0 <USB_EPStartXfer+0x43e>
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	881b      	ldrh	r3, [r3, #0]
 800cece:	b29b      	uxth	r3, r3
 800ced0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ced4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ced8:	b29a      	uxth	r2, r3
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	801a      	strh	r2, [r3, #0]
 800cede:	e06d      	b.n	800cfbc <USB_EPStartXfer+0x51a>
 800cee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cee4:	2b3e      	cmp	r3, #62	@ 0x3e
 800cee6:	d81c      	bhi.n	800cf22 <USB_EPStartXfer+0x480>
 800cee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceec:	085b      	lsrs	r3, r3, #1
 800ceee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cef6:	f003 0301 	and.w	r3, r3, #1
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d004      	beq.n	800cf08 <USB_EPStartXfer+0x466>
 800cefe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf02:	3301      	adds	r3, #1
 800cf04:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	881b      	ldrh	r3, [r3, #0]
 800cf0c:	b29a      	uxth	r2, r3
 800cf0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	029b      	lsls	r3, r3, #10
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	b29a      	uxth	r2, r3
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	801a      	strh	r2, [r3, #0]
 800cf20:	e04c      	b.n	800cfbc <USB_EPStartXfer+0x51a>
 800cf22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf26:	095b      	lsrs	r3, r3, #5
 800cf28:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cf2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf30:	f003 031f 	and.w	r3, r3, #31
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d104      	bne.n	800cf42 <USB_EPStartXfer+0x4a0>
 800cf38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf3c:	3b01      	subs	r3, #1
 800cf3e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	881b      	ldrh	r3, [r3, #0]
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	029b      	lsls	r3, r3, #10
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	4313      	orrs	r3, r2
 800cf54:	b29b      	uxth	r3, r3
 800cf56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf5e:	b29a      	uxth	r2, r3
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	801a      	strh	r2, [r3, #0]
 800cf64:	e02a      	b.n	800cfbc <USB_EPStartXfer+0x51a>
 800cf66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	785b      	ldrb	r3, [r3, #1]
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d122      	bne.n	800cfbc <USB_EPStartXfer+0x51a>
 800cf76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	623b      	str	r3, [r7, #32]
 800cf82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	461a      	mov	r2, r3
 800cf94:	6a3b      	ldr	r3, [r7, #32]
 800cf96:	4413      	add	r3, r2
 800cf98:	623b      	str	r3, [r7, #32]
 800cf9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	00da      	lsls	r2, r3, #3
 800cfa8:	6a3b      	ldr	r3, [r7, #32]
 800cfaa:	4413      	add	r3, r2
 800cfac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cfb0:	61fb      	str	r3, [r7, #28]
 800cfb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfb6:	b29a      	uxth	r2, r3
 800cfb8:	69fb      	ldr	r3, [r7, #28]
 800cfba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cfbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	891b      	ldrh	r3, [r3, #8]
 800cfc8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cfcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	6959      	ldr	r1, [r3, #20]
 800cfd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cfe2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cfe6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cfea:	6800      	ldr	r0, [r0, #0]
 800cfec:	f001 fa45 	bl	800e47a <USB_WritePMA>
 800cff0:	e3ee      	b.n	800d7d0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cff6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	785b      	ldrb	r3, [r3, #1]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d177      	bne.n	800d0f2 <USB_EPStartXfer+0x650>
 800d002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d006:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d00e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d012:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	461a      	mov	r2, r3
 800d020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d022:	4413      	add	r3, r2
 800d024:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d02a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	00da      	lsls	r2, r3, #3
 800d034:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d036:	4413      	add	r3, r2
 800d038:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d03c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d03e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d040:	881b      	ldrh	r3, [r3, #0]
 800d042:	b29b      	uxth	r3, r3
 800d044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d048:	b29a      	uxth	r2, r3
 800d04a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d04c:	801a      	strh	r2, [r3, #0]
 800d04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d052:	2b00      	cmp	r3, #0
 800d054:	d10a      	bne.n	800d06c <USB_EPStartXfer+0x5ca>
 800d056:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d058:	881b      	ldrh	r3, [r3, #0]
 800d05a:	b29b      	uxth	r3, r3
 800d05c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d064:	b29a      	uxth	r2, r3
 800d066:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d068:	801a      	strh	r2, [r3, #0]
 800d06a:	e06d      	b.n	800d148 <USB_EPStartXfer+0x6a6>
 800d06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d070:	2b3e      	cmp	r3, #62	@ 0x3e
 800d072:	d81c      	bhi.n	800d0ae <USB_EPStartXfer+0x60c>
 800d074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d078:	085b      	lsrs	r3, r3, #1
 800d07a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d07e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d082:	f003 0301 	and.w	r3, r3, #1
 800d086:	2b00      	cmp	r3, #0
 800d088:	d004      	beq.n	800d094 <USB_EPStartXfer+0x5f2>
 800d08a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d08e:	3301      	adds	r3, #1
 800d090:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d096:	881b      	ldrh	r3, [r3, #0]
 800d098:	b29a      	uxth	r2, r3
 800d09a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	029b      	lsls	r3, r3, #10
 800d0a2:	b29b      	uxth	r3, r3
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	b29a      	uxth	r2, r3
 800d0a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0aa:	801a      	strh	r2, [r3, #0]
 800d0ac:	e04c      	b.n	800d148 <USB_EPStartXfer+0x6a6>
 800d0ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0b2:	095b      	lsrs	r3, r3, #5
 800d0b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d0b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0bc:	f003 031f 	and.w	r3, r3, #31
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d104      	bne.n	800d0ce <USB_EPStartXfer+0x62c>
 800d0c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d0c8:	3b01      	subs	r3, #1
 800d0ca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d0ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0d0:	881b      	ldrh	r3, [r3, #0]
 800d0d2:	b29a      	uxth	r2, r3
 800d0d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	029b      	lsls	r3, r3, #10
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0ea:	b29a      	uxth	r2, r3
 800d0ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0ee:	801a      	strh	r2, [r3, #0]
 800d0f0:	e02a      	b.n	800d148 <USB_EPStartXfer+0x6a6>
 800d0f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	785b      	ldrb	r3, [r3, #1]
 800d0fe:	2b01      	cmp	r3, #1
 800d100:	d122      	bne.n	800d148 <USB_EPStartXfer+0x6a6>
 800d102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d106:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d10e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d11c:	b29b      	uxth	r3, r3
 800d11e:	461a      	mov	r2, r3
 800d120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d122:	4413      	add	r3, r2
 800d124:	653b      	str	r3, [r7, #80]	@ 0x50
 800d126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d12a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	00da      	lsls	r2, r3, #3
 800d134:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d136:	4413      	add	r3, r2
 800d138:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d13c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d13e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d142:	b29a      	uxth	r2, r3
 800d144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d146:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d14c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	891b      	ldrh	r3, [r3, #8]
 800d154:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d15c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	6959      	ldr	r1, [r3, #20]
 800d164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d168:	b29b      	uxth	r3, r3
 800d16a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d16e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d172:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d176:	6800      	ldr	r0, [r0, #0]
 800d178:	f001 f97f 	bl	800e47a <USB_WritePMA>
            ep->xfer_buff += len;
 800d17c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	695a      	ldr	r2, [r3, #20]
 800d188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d18c:	441a      	add	r2, r3
 800d18e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d192:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d19a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d19e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	6a1a      	ldr	r2, [r3, #32]
 800d1a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	691b      	ldr	r3, [r3, #16]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d90f      	bls.n	800d1d6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d1b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	6a1a      	ldr	r2, [r3, #32]
 800d1c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1c6:	1ad2      	subs	r2, r2, r3
 800d1c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	621a      	str	r2, [r3, #32]
 800d1d4:	e00e      	b.n	800d1f4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d1d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	6a1b      	ldr	r3, [r3, #32]
 800d1e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d1e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d1f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	643b      	str	r3, [r7, #64]	@ 0x40
 800d200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	785b      	ldrb	r3, [r3, #1]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d177      	bne.n	800d300 <USB_EPStartXfer+0x85e>
 800d210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d214:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d21c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d220:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	461a      	mov	r2, r3
 800d22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d230:	4413      	add	r3, r2
 800d232:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	00da      	lsls	r2, r3, #3
 800d242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d244:	4413      	add	r3, r2
 800d246:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d24a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d24c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d24e:	881b      	ldrh	r3, [r3, #0]
 800d250:	b29b      	uxth	r3, r3
 800d252:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d256:	b29a      	uxth	r2, r3
 800d258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d25a:	801a      	strh	r2, [r3, #0]
 800d25c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d260:	2b00      	cmp	r3, #0
 800d262:	d10a      	bne.n	800d27a <USB_EPStartXfer+0x7d8>
 800d264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d266:	881b      	ldrh	r3, [r3, #0]
 800d268:	b29b      	uxth	r3, r3
 800d26a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d26e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d272:	b29a      	uxth	r2, r3
 800d274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d276:	801a      	strh	r2, [r3, #0]
 800d278:	e067      	b.n	800d34a <USB_EPStartXfer+0x8a8>
 800d27a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d27e:	2b3e      	cmp	r3, #62	@ 0x3e
 800d280:	d81c      	bhi.n	800d2bc <USB_EPStartXfer+0x81a>
 800d282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d286:	085b      	lsrs	r3, r3, #1
 800d288:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d28c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d290:	f003 0301 	and.w	r3, r3, #1
 800d294:	2b00      	cmp	r3, #0
 800d296:	d004      	beq.n	800d2a2 <USB_EPStartXfer+0x800>
 800d298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d29c:	3301      	adds	r3, #1
 800d29e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d2a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2a4:	881b      	ldrh	r3, [r3, #0]
 800d2a6:	b29a      	uxth	r2, r3
 800d2a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2ac:	b29b      	uxth	r3, r3
 800d2ae:	029b      	lsls	r3, r3, #10
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	b29a      	uxth	r2, r3
 800d2b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2b8:	801a      	strh	r2, [r3, #0]
 800d2ba:	e046      	b.n	800d34a <USB_EPStartXfer+0x8a8>
 800d2bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2c0:	095b      	lsrs	r3, r3, #5
 800d2c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d2c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2ca:	f003 031f 	and.w	r3, r3, #31
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d104      	bne.n	800d2dc <USB_EPStartXfer+0x83a>
 800d2d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2d6:	3b01      	subs	r3, #1
 800d2d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d2dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2de:	881b      	ldrh	r3, [r3, #0]
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2e6:	b29b      	uxth	r3, r3
 800d2e8:	029b      	lsls	r3, r3, #10
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	b29b      	uxth	r3, r3
 800d2f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2fc:	801a      	strh	r2, [r3, #0]
 800d2fe:	e024      	b.n	800d34a <USB_EPStartXfer+0x8a8>
 800d300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	785b      	ldrb	r3, [r3, #1]
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d11c      	bne.n	800d34a <USB_EPStartXfer+0x8a8>
 800d310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d314:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d31e:	b29b      	uxth	r3, r3
 800d320:	461a      	mov	r2, r3
 800d322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d324:	4413      	add	r3, r2
 800d326:	643b      	str	r3, [r7, #64]	@ 0x40
 800d328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d32c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	00da      	lsls	r2, r3, #3
 800d336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d338:	4413      	add	r3, r2
 800d33a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d344:	b29a      	uxth	r2, r3
 800d346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d348:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d34a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d34e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	895b      	ldrh	r3, [r3, #10]
 800d356:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d35a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d35e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	6959      	ldr	r1, [r3, #20]
 800d366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d370:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d374:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d378:	6800      	ldr	r0, [r0, #0]
 800d37a:	f001 f87e 	bl	800e47a <USB_WritePMA>
 800d37e:	e227      	b.n	800d7d0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	6a1b      	ldr	r3, [r3, #32]
 800d38c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d394:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d39e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	009b      	lsls	r3, r3, #2
 800d3a8:	4413      	add	r3, r2
 800d3aa:	881b      	ldrh	r3, [r3, #0]
 800d3ac:	b29b      	uxth	r3, r3
 800d3ae:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d3b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3b6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d3ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	009b      	lsls	r3, r3, #2
 800d3d2:	441a      	add	r2, r3
 800d3d4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d3d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d3dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d3e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d3ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d3f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d406:	b29b      	uxth	r3, r3
 800d408:	461a      	mov	r2, r3
 800d40a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d40c:	4413      	add	r3, r2
 800d40e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	00da      	lsls	r2, r3, #3
 800d41e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d420:	4413      	add	r3, r2
 800d422:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d426:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d42c:	b29a      	uxth	r2, r3
 800d42e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d430:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	891b      	ldrh	r3, [r3, #8]
 800d43e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	6959      	ldr	r1, [r3, #20]
 800d44e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d452:	b29b      	uxth	r3, r3
 800d454:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d458:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d45c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d460:	6800      	ldr	r0, [r0, #0]
 800d462:	f001 f80a 	bl	800e47a <USB_WritePMA>
 800d466:	e1b3      	b.n	800d7d0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d46c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	6a1a      	ldr	r2, [r3, #32]
 800d474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d478:	1ad2      	subs	r2, r2, r3
 800d47a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d47e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d48a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d48e:	681a      	ldr	r2, [r3, #0]
 800d490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	009b      	lsls	r3, r3, #2
 800d49e:	4413      	add	r3, r2
 800d4a0:	881b      	ldrh	r3, [r3, #0]
 800d4a2:	b29b      	uxth	r3, r3
 800d4a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	f000 80c6 	beq.w	800d63a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d4ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	673b      	str	r3, [r7, #112]	@ 0x70
 800d4ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	785b      	ldrb	r3, [r3, #1]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d177      	bne.n	800d5ba <USB_EPStartXfer+0xb18>
 800d4ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d4d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4e4:	b29b      	uxth	r3, r3
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d4ea:	4413      	add	r3, r2
 800d4ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d4ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	00da      	lsls	r2, r3, #3
 800d4fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d4fe:	4413      	add	r3, r2
 800d500:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d504:	667b      	str	r3, [r7, #100]	@ 0x64
 800d506:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d508:	881b      	ldrh	r3, [r3, #0]
 800d50a:	b29b      	uxth	r3, r3
 800d50c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d510:	b29a      	uxth	r2, r3
 800d512:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d514:	801a      	strh	r2, [r3, #0]
 800d516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d10a      	bne.n	800d534 <USB_EPStartXfer+0xa92>
 800d51e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d520:	881b      	ldrh	r3, [r3, #0]
 800d522:	b29b      	uxth	r3, r3
 800d524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d52c:	b29a      	uxth	r2, r3
 800d52e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d530:	801a      	strh	r2, [r3, #0]
 800d532:	e067      	b.n	800d604 <USB_EPStartXfer+0xb62>
 800d534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d538:	2b3e      	cmp	r3, #62	@ 0x3e
 800d53a:	d81c      	bhi.n	800d576 <USB_EPStartXfer+0xad4>
 800d53c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d540:	085b      	lsrs	r3, r3, #1
 800d542:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d54a:	f003 0301 	and.w	r3, r3, #1
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d004      	beq.n	800d55c <USB_EPStartXfer+0xaba>
 800d552:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d556:	3301      	adds	r3, #1
 800d558:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d55c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d55e:	881b      	ldrh	r3, [r3, #0]
 800d560:	b29a      	uxth	r2, r3
 800d562:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d566:	b29b      	uxth	r3, r3
 800d568:	029b      	lsls	r3, r3, #10
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	4313      	orrs	r3, r2
 800d56e:	b29a      	uxth	r2, r3
 800d570:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d572:	801a      	strh	r2, [r3, #0]
 800d574:	e046      	b.n	800d604 <USB_EPStartXfer+0xb62>
 800d576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d57a:	095b      	lsrs	r3, r3, #5
 800d57c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d584:	f003 031f 	and.w	r3, r3, #31
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d104      	bne.n	800d596 <USB_EPStartXfer+0xaf4>
 800d58c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d590:	3b01      	subs	r3, #1
 800d592:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d596:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d598:	881b      	ldrh	r3, [r3, #0]
 800d59a:	b29a      	uxth	r2, r3
 800d59c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d5a0:	b29b      	uxth	r3, r3
 800d5a2:	029b      	lsls	r3, r3, #10
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	4313      	orrs	r3, r2
 800d5a8:	b29b      	uxth	r3, r3
 800d5aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5b2:	b29a      	uxth	r2, r3
 800d5b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d5b6:	801a      	strh	r2, [r3, #0]
 800d5b8:	e024      	b.n	800d604 <USB_EPStartXfer+0xb62>
 800d5ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	785b      	ldrb	r3, [r3, #1]
 800d5c6:	2b01      	cmp	r3, #1
 800d5c8:	d11c      	bne.n	800d604 <USB_EPStartXfer+0xb62>
 800d5ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	461a      	mov	r2, r3
 800d5dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d5de:	4413      	add	r3, r2
 800d5e0:	673b      	str	r3, [r7, #112]	@ 0x70
 800d5e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	00da      	lsls	r2, r3, #3
 800d5f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d5f2:	4413      	add	r3, r2
 800d5f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d5f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5fe:	b29a      	uxth	r2, r3
 800d600:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d602:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	895b      	ldrh	r3, [r3, #10]
 800d610:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	6959      	ldr	r1, [r3, #20]
 800d620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d624:	b29b      	uxth	r3, r3
 800d626:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d62a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d62e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d632:	6800      	ldr	r0, [r0, #0]
 800d634:	f000 ff21 	bl	800e47a <USB_WritePMA>
 800d638:	e0ca      	b.n	800d7d0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d63a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d63e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	785b      	ldrb	r3, [r3, #1]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d177      	bne.n	800d73a <USB_EPStartXfer+0xc98>
 800d64a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d64e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d65a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d664:	b29b      	uxth	r3, r3
 800d666:	461a      	mov	r2, r3
 800d668:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d66a:	4413      	add	r3, r2
 800d66c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d66e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d672:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	00da      	lsls	r2, r3, #3
 800d67c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d67e:	4413      	add	r3, r2
 800d680:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d684:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d686:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d688:	881b      	ldrh	r3, [r3, #0]
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d690:	b29a      	uxth	r2, r3
 800d692:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d694:	801a      	strh	r2, [r3, #0]
 800d696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d10a      	bne.n	800d6b4 <USB_EPStartXfer+0xc12>
 800d69e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d6a0:	881b      	ldrh	r3, [r3, #0]
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6ac:	b29a      	uxth	r2, r3
 800d6ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d6b0:	801a      	strh	r2, [r3, #0]
 800d6b2:	e073      	b.n	800d79c <USB_EPStartXfer+0xcfa>
 800d6b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6b8:	2b3e      	cmp	r3, #62	@ 0x3e
 800d6ba:	d81c      	bhi.n	800d6f6 <USB_EPStartXfer+0xc54>
 800d6bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6c0:	085b      	lsrs	r3, r3, #1
 800d6c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d6c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6ca:	f003 0301 	and.w	r3, r3, #1
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d004      	beq.n	800d6dc <USB_EPStartXfer+0xc3a>
 800d6d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d6dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d6de:	881b      	ldrh	r3, [r3, #0]
 800d6e0:	b29a      	uxth	r2, r3
 800d6e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	029b      	lsls	r3, r3, #10
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	b29a      	uxth	r2, r3
 800d6f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d6f2:	801a      	strh	r2, [r3, #0]
 800d6f4:	e052      	b.n	800d79c <USB_EPStartXfer+0xcfa>
 800d6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6fa:	095b      	lsrs	r3, r3, #5
 800d6fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d704:	f003 031f 	and.w	r3, r3, #31
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d104      	bne.n	800d716 <USB_EPStartXfer+0xc74>
 800d70c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d710:	3b01      	subs	r3, #1
 800d712:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d716:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d718:	881b      	ldrh	r3, [r3, #0]
 800d71a:	b29a      	uxth	r2, r3
 800d71c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d720:	b29b      	uxth	r3, r3
 800d722:	029b      	lsls	r3, r3, #10
 800d724:	b29b      	uxth	r3, r3
 800d726:	4313      	orrs	r3, r2
 800d728:	b29b      	uxth	r3, r3
 800d72a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d72e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d732:	b29a      	uxth	r2, r3
 800d734:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d736:	801a      	strh	r2, [r3, #0]
 800d738:	e030      	b.n	800d79c <USB_EPStartXfer+0xcfa>
 800d73a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d73e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	785b      	ldrb	r3, [r3, #1]
 800d746:	2b01      	cmp	r3, #1
 800d748:	d128      	bne.n	800d79c <USB_EPStartXfer+0xcfa>
 800d74a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d74e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d75c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d766:	b29b      	uxth	r3, r3
 800d768:	461a      	mov	r2, r3
 800d76a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d76e:	4413      	add	r3, r2
 800d770:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	00da      	lsls	r2, r3, #3
 800d782:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d786:	4413      	add	r3, r2
 800d788:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d78c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d794:	b29a      	uxth	r2, r3
 800d796:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d79a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d79c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	891b      	ldrh	r3, [r3, #8]
 800d7a8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d7ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	6959      	ldr	r1, [r3, #20]
 800d7b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d7c2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d7c6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d7ca:	6800      	ldr	r0, [r0, #0]
 800d7cc:	f000 fe55 	bl	800e47a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d7d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d7d8:	681a      	ldr	r2, [r3, #0]
 800d7da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	009b      	lsls	r3, r3, #2
 800d7e8:	4413      	add	r3, r2
 800d7ea:	881b      	ldrh	r3, [r3, #0]
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d7f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7f6:	817b      	strh	r3, [r7, #10]
 800d7f8:	897b      	ldrh	r3, [r7, #10]
 800d7fa:	f083 0310 	eor.w	r3, r3, #16
 800d7fe:	817b      	strh	r3, [r7, #10]
 800d800:	897b      	ldrh	r3, [r7, #10]
 800d802:	f083 0320 	eor.w	r3, r3, #32
 800d806:	817b      	strh	r3, [r7, #10]
 800d808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d80c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d816:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	009b      	lsls	r3, r3, #2
 800d820:	441a      	add	r2, r3
 800d822:	897b      	ldrh	r3, [r7, #10]
 800d824:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d828:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d82c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d834:	b29b      	uxth	r3, r3
 800d836:	8013      	strh	r3, [r2, #0]
 800d838:	f000 bcdf 	b.w	800e1fa <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d83c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d840:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	7b1b      	ldrb	r3, [r3, #12]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	f040 80bc 	bne.w	800d9c6 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d84e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	699a      	ldr	r2, [r3, #24]
 800d85a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d85e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	691b      	ldr	r3, [r3, #16]
 800d866:	429a      	cmp	r2, r3
 800d868:	d917      	bls.n	800d89a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800d86a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d86e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	691b      	ldr	r3, [r3, #16]
 800d876:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800d87a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d87e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	699a      	ldr	r2, [r3, #24]
 800d886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d88a:	1ad2      	subs	r2, r2, r3
 800d88c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	619a      	str	r2, [r3, #24]
 800d898:	e00e      	b.n	800d8b8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800d89a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d89e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	699b      	ldr	r3, [r3, #24]
 800d8a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800d8aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d8b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d8c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d8dc:	4413      	add	r3, r2
 800d8de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d8e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	781b      	ldrb	r3, [r3, #0]
 800d8ee:	00da      	lsls	r2, r3, #3
 800d8f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d8f4:	4413      	add	r3, r2
 800d8f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d8fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d8fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d902:	881b      	ldrh	r3, [r3, #0]
 800d904:	b29b      	uxth	r3, r3
 800d906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d90a:	b29a      	uxth	r2, r3
 800d90c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d910:	801a      	strh	r2, [r3, #0]
 800d912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d916:	2b00      	cmp	r3, #0
 800d918:	d10d      	bne.n	800d936 <USB_EPStartXfer+0xe94>
 800d91a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d91e:	881b      	ldrh	r3, [r3, #0]
 800d920:	b29b      	uxth	r3, r3
 800d922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d92a:	b29a      	uxth	r2, r3
 800d92c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d930:	801a      	strh	r2, [r3, #0]
 800d932:	f000 bc28 	b.w	800e186 <USB_EPStartXfer+0x16e4>
 800d936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d93a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d93c:	d81f      	bhi.n	800d97e <USB_EPStartXfer+0xedc>
 800d93e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d942:	085b      	lsrs	r3, r3, #1
 800d944:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d94c:	f003 0301 	and.w	r3, r3, #1
 800d950:	2b00      	cmp	r3, #0
 800d952:	d004      	beq.n	800d95e <USB_EPStartXfer+0xebc>
 800d954:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d958:	3301      	adds	r3, #1
 800d95a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d95e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d962:	881b      	ldrh	r3, [r3, #0]
 800d964:	b29a      	uxth	r2, r3
 800d966:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	029b      	lsls	r3, r3, #10
 800d96e:	b29b      	uxth	r3, r3
 800d970:	4313      	orrs	r3, r2
 800d972:	b29a      	uxth	r2, r3
 800d974:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d978:	801a      	strh	r2, [r3, #0]
 800d97a:	f000 bc04 	b.w	800e186 <USB_EPStartXfer+0x16e4>
 800d97e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d982:	095b      	lsrs	r3, r3, #5
 800d984:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d98c:	f003 031f 	and.w	r3, r3, #31
 800d990:	2b00      	cmp	r3, #0
 800d992:	d104      	bne.n	800d99e <USB_EPStartXfer+0xefc>
 800d994:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d998:	3b01      	subs	r3, #1
 800d99a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d99e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d9a2:	881b      	ldrh	r3, [r3, #0]
 800d9a4:	b29a      	uxth	r2, r3
 800d9a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	029b      	lsls	r3, r3, #10
 800d9ae:	b29b      	uxth	r3, r3
 800d9b0:	4313      	orrs	r3, r2
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9bc:	b29a      	uxth	r2, r3
 800d9be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d9c2:	801a      	strh	r2, [r3, #0]
 800d9c4:	e3df      	b.n	800e186 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d9c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	78db      	ldrb	r3, [r3, #3]
 800d9d2:	2b02      	cmp	r3, #2
 800d9d4:	f040 8218 	bne.w	800de08 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d9d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	785b      	ldrb	r3, [r3, #1]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	f040 809d 	bne.w	800db24 <USB_EPStartXfer+0x1082>
 800d9ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d9f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da06:	b29b      	uxth	r3, r3
 800da08:	461a      	mov	r2, r3
 800da0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da0e:	4413      	add	r3, r2
 800da10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800da14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	00da      	lsls	r2, r3, #3
 800da22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800da26:	4413      	add	r3, r2
 800da28:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800da2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800da30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800da34:	881b      	ldrh	r3, [r3, #0]
 800da36:	b29b      	uxth	r3, r3
 800da38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800da42:	801a      	strh	r2, [r3, #0]
 800da44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	691b      	ldr	r3, [r3, #16]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d10c      	bne.n	800da6e <USB_EPStartXfer+0xfcc>
 800da54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800da58:	881b      	ldrh	r3, [r3, #0]
 800da5a:	b29b      	uxth	r3, r3
 800da5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da64:	b29a      	uxth	r2, r3
 800da66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800da6a:	801a      	strh	r2, [r3, #0]
 800da6c:	e08f      	b.n	800db8e <USB_EPStartXfer+0x10ec>
 800da6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	691b      	ldr	r3, [r3, #16]
 800da7a:	2b3e      	cmp	r3, #62	@ 0x3e
 800da7c:	d826      	bhi.n	800dacc <USB_EPStartXfer+0x102a>
 800da7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	691b      	ldr	r3, [r3, #16]
 800da8a:	085b      	lsrs	r3, r3, #1
 800da8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800da90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	691b      	ldr	r3, [r3, #16]
 800da9c:	f003 0301 	and.w	r3, r3, #1
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d004      	beq.n	800daae <USB_EPStartXfer+0x100c>
 800daa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800daa8:	3301      	adds	r3, #1
 800daaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800daae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dab2:	881b      	ldrh	r3, [r3, #0]
 800dab4:	b29a      	uxth	r2, r3
 800dab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800daba:	b29b      	uxth	r3, r3
 800dabc:	029b      	lsls	r3, r3, #10
 800dabe:	b29b      	uxth	r3, r3
 800dac0:	4313      	orrs	r3, r2
 800dac2:	b29a      	uxth	r2, r3
 800dac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dac8:	801a      	strh	r2, [r3, #0]
 800daca:	e060      	b.n	800db8e <USB_EPStartXfer+0x10ec>
 800dacc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	691b      	ldr	r3, [r3, #16]
 800dad8:	095b      	lsrs	r3, r3, #5
 800dada:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	691b      	ldr	r3, [r3, #16]
 800daea:	f003 031f 	and.w	r3, r3, #31
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d104      	bne.n	800dafc <USB_EPStartXfer+0x105a>
 800daf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800daf6:	3b01      	subs	r3, #1
 800daf8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dafc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800db00:	881b      	ldrh	r3, [r3, #0]
 800db02:	b29a      	uxth	r2, r3
 800db04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db08:	b29b      	uxth	r3, r3
 800db0a:	029b      	lsls	r3, r3, #10
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	4313      	orrs	r3, r2
 800db10:	b29b      	uxth	r3, r3
 800db12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db1a:	b29a      	uxth	r2, r3
 800db1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800db20:	801a      	strh	r2, [r3, #0]
 800db22:	e034      	b.n	800db8e <USB_EPStartXfer+0x10ec>
 800db24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	785b      	ldrb	r3, [r3, #1]
 800db30:	2b01      	cmp	r3, #1
 800db32:	d12c      	bne.n	800db8e <USB_EPStartXfer+0x10ec>
 800db34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800db42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db50:	b29b      	uxth	r3, r3
 800db52:	461a      	mov	r2, r3
 800db54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800db58:	4413      	add	r3, r2
 800db5a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800db5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	00da      	lsls	r2, r3, #3
 800db6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800db70:	4413      	add	r3, r2
 800db72:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800db76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800db7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	691b      	ldr	r3, [r3, #16]
 800db86:	b29a      	uxth	r2, r3
 800db88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800db8c:	801a      	strh	r2, [r3, #0]
 800db8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800db9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	785b      	ldrb	r3, [r3, #1]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	f040 809d 	bne.w	800dce8 <USB_EPStartXfer+0x1246>
 800dbae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dbbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	461a      	mov	r2, r3
 800dbce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dbd2:	4413      	add	r3, r2
 800dbd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dbd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	00da      	lsls	r2, r3, #3
 800dbe6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dbea:	4413      	add	r3, r2
 800dbec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dbf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800dbf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dbf8:	881b      	ldrh	r3, [r3, #0]
 800dbfa:	b29b      	uxth	r3, r3
 800dbfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc00:	b29a      	uxth	r2, r3
 800dc02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dc06:	801a      	strh	r2, [r3, #0]
 800dc08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	691b      	ldr	r3, [r3, #16]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d10c      	bne.n	800dc32 <USB_EPStartXfer+0x1190>
 800dc18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dc1c:	881b      	ldrh	r3, [r3, #0]
 800dc1e:	b29b      	uxth	r3, r3
 800dc20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc28:	b29a      	uxth	r2, r3
 800dc2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dc2e:	801a      	strh	r2, [r3, #0]
 800dc30:	e088      	b.n	800dd44 <USB_EPStartXfer+0x12a2>
 800dc32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	691b      	ldr	r3, [r3, #16]
 800dc3e:	2b3e      	cmp	r3, #62	@ 0x3e
 800dc40:	d826      	bhi.n	800dc90 <USB_EPStartXfer+0x11ee>
 800dc42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	691b      	ldr	r3, [r3, #16]
 800dc4e:	085b      	lsrs	r3, r3, #1
 800dc50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dc54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	691b      	ldr	r3, [r3, #16]
 800dc60:	f003 0301 	and.w	r3, r3, #1
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d004      	beq.n	800dc72 <USB_EPStartXfer+0x11d0>
 800dc68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dc72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dc76:	881b      	ldrh	r3, [r3, #0]
 800dc78:	b29a      	uxth	r2, r3
 800dc7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	029b      	lsls	r3, r3, #10
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	4313      	orrs	r3, r2
 800dc86:	b29a      	uxth	r2, r3
 800dc88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dc8c:	801a      	strh	r2, [r3, #0]
 800dc8e:	e059      	b.n	800dd44 <USB_EPStartXfer+0x12a2>
 800dc90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	691b      	ldr	r3, [r3, #16]
 800dc9c:	095b      	lsrs	r3, r3, #5
 800dc9e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dca6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	691b      	ldr	r3, [r3, #16]
 800dcae:	f003 031f 	and.w	r3, r3, #31
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d104      	bne.n	800dcc0 <USB_EPStartXfer+0x121e>
 800dcb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dcba:	3b01      	subs	r3, #1
 800dcbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dcc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dcc4:	881b      	ldrh	r3, [r3, #0]
 800dcc6:	b29a      	uxth	r2, r3
 800dcc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dccc:	b29b      	uxth	r3, r3
 800dcce:	029b      	lsls	r3, r3, #10
 800dcd0:	b29b      	uxth	r3, r3
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	b29b      	uxth	r3, r3
 800dcd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcde:	b29a      	uxth	r2, r3
 800dce0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dce4:	801a      	strh	r2, [r3, #0]
 800dce6:	e02d      	b.n	800dd44 <USB_EPStartXfer+0x12a2>
 800dce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	785b      	ldrb	r3, [r3, #1]
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d125      	bne.n	800dd44 <USB_EPStartXfer+0x12a2>
 800dcf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd06:	b29b      	uxth	r3, r3
 800dd08:	461a      	mov	r2, r3
 800dd0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dd0e:	4413      	add	r3, r2
 800dd10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dd14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	00da      	lsls	r2, r3, #3
 800dd22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dd26:	4413      	add	r3, r2
 800dd28:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dd2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800dd30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	691b      	ldr	r3, [r3, #16]
 800dd3c:	b29a      	uxth	r2, r3
 800dd3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dd42:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800dd44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	69db      	ldr	r3, [r3, #28]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	f000 8218 	beq.w	800e186 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800dd56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd5e:	681a      	ldr	r2, [r3, #0]
 800dd60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	009b      	lsls	r3, r3, #2
 800dd6e:	4413      	add	r3, r2
 800dd70:	881b      	ldrh	r3, [r3, #0]
 800dd72:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dd76:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dd7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d005      	beq.n	800dd8e <USB_EPStartXfer+0x12ec>
 800dd82:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dd86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d10d      	bne.n	800ddaa <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dd8e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dd92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	f040 81f5 	bne.w	800e186 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dd9c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dda0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	f040 81ee 	bne.w	800e186 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ddaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ddb2:	681a      	ldr	r2, [r3, #0]
 800ddb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	4413      	add	r3, r2
 800ddc4:	881b      	ldrh	r3, [r3, #0]
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ddcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ddd0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800ddd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dddc:	681a      	ldr	r2, [r3, #0]
 800ddde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dde2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	009b      	lsls	r3, r3, #2
 800ddec:	441a      	add	r2, r3
 800ddee:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ddf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ddf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ddfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ddfe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800de02:	b29b      	uxth	r3, r3
 800de04:	8013      	strh	r3, [r2, #0]
 800de06:	e1be      	b.n	800e186 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800de08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	78db      	ldrb	r3, [r3, #3]
 800de14:	2b01      	cmp	r3, #1
 800de16:	f040 81b4 	bne.w	800e182 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800de1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	699a      	ldr	r2, [r3, #24]
 800de26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	691b      	ldr	r3, [r3, #16]
 800de32:	429a      	cmp	r2, r3
 800de34:	d917      	bls.n	800de66 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800de36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	691b      	ldr	r3, [r3, #16]
 800de42:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800de46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	699a      	ldr	r2, [r3, #24]
 800de52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de56:	1ad2      	subs	r2, r2, r3
 800de58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	619a      	str	r2, [r3, #24]
 800de64:	e00e      	b.n	800de84 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800de66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	699b      	ldr	r3, [r3, #24]
 800de72:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800de76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	2200      	movs	r2, #0
 800de82:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800de84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	785b      	ldrb	r3, [r3, #1]
 800de90:	2b00      	cmp	r3, #0
 800de92:	f040 8085 	bne.w	800dfa0 <USB_EPStartXfer+0x14fe>
 800de96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dea8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	461a      	mov	r2, r3
 800deb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800deba:	4413      	add	r3, r2
 800debc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dec4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	00da      	lsls	r2, r3, #3
 800dece:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ded2:	4413      	add	r3, r2
 800ded4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ded8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dedc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dee0:	881b      	ldrh	r3, [r3, #0]
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dee8:	b29a      	uxth	r2, r3
 800deea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800deee:	801a      	strh	r2, [r3, #0]
 800def0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800def4:	2b00      	cmp	r3, #0
 800def6:	d10c      	bne.n	800df12 <USB_EPStartXfer+0x1470>
 800def8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800defc:	881b      	ldrh	r3, [r3, #0]
 800defe:	b29b      	uxth	r3, r3
 800df00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df08:	b29a      	uxth	r2, r3
 800df0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800df0e:	801a      	strh	r2, [r3, #0]
 800df10:	e077      	b.n	800e002 <USB_EPStartXfer+0x1560>
 800df12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df16:	2b3e      	cmp	r3, #62	@ 0x3e
 800df18:	d81e      	bhi.n	800df58 <USB_EPStartXfer+0x14b6>
 800df1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df1e:	085b      	lsrs	r3, r3, #1
 800df20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800df24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df28:	f003 0301 	and.w	r3, r3, #1
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d004      	beq.n	800df3a <USB_EPStartXfer+0x1498>
 800df30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800df34:	3301      	adds	r3, #1
 800df36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800df3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800df3e:	881b      	ldrh	r3, [r3, #0]
 800df40:	b29a      	uxth	r2, r3
 800df42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800df46:	b29b      	uxth	r3, r3
 800df48:	029b      	lsls	r3, r3, #10
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	4313      	orrs	r3, r2
 800df4e:	b29a      	uxth	r2, r3
 800df50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800df54:	801a      	strh	r2, [r3, #0]
 800df56:	e054      	b.n	800e002 <USB_EPStartXfer+0x1560>
 800df58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df5c:	095b      	lsrs	r3, r3, #5
 800df5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800df62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df66:	f003 031f 	and.w	r3, r3, #31
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d104      	bne.n	800df78 <USB_EPStartXfer+0x14d6>
 800df6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800df72:	3b01      	subs	r3, #1
 800df74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800df78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800df7c:	881b      	ldrh	r3, [r3, #0]
 800df7e:	b29a      	uxth	r2, r3
 800df80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800df84:	b29b      	uxth	r3, r3
 800df86:	029b      	lsls	r3, r3, #10
 800df88:	b29b      	uxth	r3, r3
 800df8a:	4313      	orrs	r3, r2
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df96:	b29a      	uxth	r2, r3
 800df98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800df9c:	801a      	strh	r2, [r3, #0]
 800df9e:	e030      	b.n	800e002 <USB_EPStartXfer+0x1560>
 800dfa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	785b      	ldrb	r3, [r3, #1]
 800dfac:	2b01      	cmp	r3, #1
 800dfae:	d128      	bne.n	800e002 <USB_EPStartXfer+0x1560>
 800dfb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800dfbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	461a      	mov	r2, r3
 800dfd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dfd4:	4413      	add	r3, r2
 800dfd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800dfda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	00da      	lsls	r2, r3, #3
 800dfe8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dfec:	4413      	add	r3, r2
 800dfee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dff2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800dff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dffa:	b29a      	uxth	r2, r3
 800dffc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e000:	801a      	strh	r2, [r3, #0]
 800e002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e006:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	785b      	ldrb	r3, [r3, #1]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	f040 8085 	bne.w	800e12c <USB_EPStartXfer+0x168a>
 800e022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e026:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e034:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e03e:	b29b      	uxth	r3, r3
 800e040:	461a      	mov	r2, r3
 800e042:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e046:	4413      	add	r3, r2
 800e048:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e04c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	00da      	lsls	r2, r3, #3
 800e05a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e05e:	4413      	add	r3, r2
 800e060:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e064:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e068:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e06c:	881b      	ldrh	r3, [r3, #0]
 800e06e:	b29b      	uxth	r3, r3
 800e070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e074:	b29a      	uxth	r2, r3
 800e076:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e07a:	801a      	strh	r2, [r3, #0]
 800e07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e080:	2b00      	cmp	r3, #0
 800e082:	d10c      	bne.n	800e09e <USB_EPStartXfer+0x15fc>
 800e084:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e088:	881b      	ldrh	r3, [r3, #0]
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e094:	b29a      	uxth	r2, r3
 800e096:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e09a:	801a      	strh	r2, [r3, #0]
 800e09c:	e073      	b.n	800e186 <USB_EPStartXfer+0x16e4>
 800e09e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0a2:	2b3e      	cmp	r3, #62	@ 0x3e
 800e0a4:	d81e      	bhi.n	800e0e4 <USB_EPStartXfer+0x1642>
 800e0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0aa:	085b      	lsrs	r3, r3, #1
 800e0ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0b4:	f003 0301 	and.w	r3, r3, #1
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d004      	beq.n	800e0c6 <USB_EPStartXfer+0x1624>
 800e0bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e0c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e0ca:	881b      	ldrh	r3, [r3, #0]
 800e0cc:	b29a      	uxth	r2, r3
 800e0ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e0d2:	b29b      	uxth	r3, r3
 800e0d4:	029b      	lsls	r3, r3, #10
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	b29a      	uxth	r2, r3
 800e0dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e0e0:	801a      	strh	r2, [r3, #0]
 800e0e2:	e050      	b.n	800e186 <USB_EPStartXfer+0x16e4>
 800e0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0e8:	095b      	lsrs	r3, r3, #5
 800e0ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e0ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0f2:	f003 031f 	and.w	r3, r3, #31
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d104      	bne.n	800e104 <USB_EPStartXfer+0x1662>
 800e0fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e0fe:	3b01      	subs	r3, #1
 800e100:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e104:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e108:	881b      	ldrh	r3, [r3, #0]
 800e10a:	b29a      	uxth	r2, r3
 800e10c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e110:	b29b      	uxth	r3, r3
 800e112:	029b      	lsls	r3, r3, #10
 800e114:	b29b      	uxth	r3, r3
 800e116:	4313      	orrs	r3, r2
 800e118:	b29b      	uxth	r3, r3
 800e11a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e11e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e122:	b29a      	uxth	r2, r3
 800e124:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e128:	801a      	strh	r2, [r3, #0]
 800e12a:	e02c      	b.n	800e186 <USB_EPStartXfer+0x16e4>
 800e12c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	785b      	ldrb	r3, [r3, #1]
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d124      	bne.n	800e186 <USB_EPStartXfer+0x16e4>
 800e13c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e140:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	461a      	mov	r2, r3
 800e14e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e152:	4413      	add	r3, r2
 800e154:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e15c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	00da      	lsls	r2, r3, #3
 800e166:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e16a:	4413      	add	r3, r2
 800e16c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e170:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e178:	b29a      	uxth	r2, r3
 800e17a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e17e:	801a      	strh	r2, [r3, #0]
 800e180:	e001      	b.n	800e186 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800e182:	2301      	movs	r3, #1
 800e184:	e03a      	b.n	800e1fc <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e18a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	781b      	ldrb	r3, [r3, #0]
 800e19c:	009b      	lsls	r3, r3, #2
 800e19e:	4413      	add	r3, r2
 800e1a0:	881b      	ldrh	r3, [r3, #0]
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e1a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e1ac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e1b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e1b4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e1b8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e1bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e1c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e1c4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e1c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e1d0:	681a      	ldr	r2, [r3, #0]
 800e1d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	009b      	lsls	r3, r3, #2
 800e1e0:	441a      	add	r2, r3
 800e1e2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e1e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e1ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e1ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e1fa:	2300      	movs	r3, #0
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}

0800e206 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e206:	b480      	push	{r7}
 800e208:	b085      	sub	sp, #20
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	6078      	str	r0, [r7, #4]
 800e20e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	785b      	ldrb	r3, [r3, #1]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d020      	beq.n	800e25a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e218:	687a      	ldr	r2, [r7, #4]
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	781b      	ldrb	r3, [r3, #0]
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	4413      	add	r3, r2
 800e222:	881b      	ldrh	r3, [r3, #0]
 800e224:	b29b      	uxth	r3, r3
 800e226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e22a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e22e:	81bb      	strh	r3, [r7, #12]
 800e230:	89bb      	ldrh	r3, [r7, #12]
 800e232:	f083 0310 	eor.w	r3, r3, #16
 800e236:	81bb      	strh	r3, [r7, #12]
 800e238:	687a      	ldr	r2, [r7, #4]
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	781b      	ldrb	r3, [r3, #0]
 800e23e:	009b      	lsls	r3, r3, #2
 800e240:	441a      	add	r2, r3
 800e242:	89bb      	ldrh	r3, [r7, #12]
 800e244:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e248:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e24c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e254:	b29b      	uxth	r3, r3
 800e256:	8013      	strh	r3, [r2, #0]
 800e258:	e01f      	b.n	800e29a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e25a:	687a      	ldr	r2, [r7, #4]
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	009b      	lsls	r3, r3, #2
 800e262:	4413      	add	r3, r2
 800e264:	881b      	ldrh	r3, [r3, #0]
 800e266:	b29b      	uxth	r3, r3
 800e268:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e26c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e270:	81fb      	strh	r3, [r7, #14]
 800e272:	89fb      	ldrh	r3, [r7, #14]
 800e274:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e278:	81fb      	strh	r3, [r7, #14]
 800e27a:	687a      	ldr	r2, [r7, #4]
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	009b      	lsls	r3, r3, #2
 800e282:	441a      	add	r2, r3
 800e284:	89fb      	ldrh	r3, [r7, #14]
 800e286:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e28a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e28e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e296:	b29b      	uxth	r3, r3
 800e298:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e29a:	2300      	movs	r3, #0
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3714      	adds	r7, #20
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr

0800e2a8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b087      	sub	sp, #28
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	7b1b      	ldrb	r3, [r3, #12]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	f040 809d 	bne.w	800e3f6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	785b      	ldrb	r3, [r3, #1]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d04c      	beq.n	800e35e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e2c4:	687a      	ldr	r2, [r7, #4]
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	781b      	ldrb	r3, [r3, #0]
 800e2ca:	009b      	lsls	r3, r3, #2
 800e2cc:	4413      	add	r3, r2
 800e2ce:	881b      	ldrh	r3, [r3, #0]
 800e2d0:	823b      	strh	r3, [r7, #16]
 800e2d2:	8a3b      	ldrh	r3, [r7, #16]
 800e2d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d01b      	beq.n	800e314 <USB_EPClearStall+0x6c>
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	781b      	ldrb	r3, [r3, #0]
 800e2e2:	009b      	lsls	r3, r3, #2
 800e2e4:	4413      	add	r3, r2
 800e2e6:	881b      	ldrh	r3, [r3, #0]
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e2ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e2f2:	81fb      	strh	r3, [r7, #14]
 800e2f4:	687a      	ldr	r2, [r7, #4]
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	781b      	ldrb	r3, [r3, #0]
 800e2fa:	009b      	lsls	r3, r3, #2
 800e2fc:	441a      	add	r2, r3
 800e2fe:	89fb      	ldrh	r3, [r7, #14]
 800e300:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e304:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e308:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e30c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e310:	b29b      	uxth	r3, r3
 800e312:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	78db      	ldrb	r3, [r3, #3]
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d06c      	beq.n	800e3f6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e31c:	687a      	ldr	r2, [r7, #4]
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	781b      	ldrb	r3, [r3, #0]
 800e322:	009b      	lsls	r3, r3, #2
 800e324:	4413      	add	r3, r2
 800e326:	881b      	ldrh	r3, [r3, #0]
 800e328:	b29b      	uxth	r3, r3
 800e32a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e32e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e332:	81bb      	strh	r3, [r7, #12]
 800e334:	89bb      	ldrh	r3, [r7, #12]
 800e336:	f083 0320 	eor.w	r3, r3, #32
 800e33a:	81bb      	strh	r3, [r7, #12]
 800e33c:	687a      	ldr	r2, [r7, #4]
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	441a      	add	r2, r3
 800e346:	89bb      	ldrh	r3, [r7, #12]
 800e348:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e34c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e350:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e358:	b29b      	uxth	r3, r3
 800e35a:	8013      	strh	r3, [r2, #0]
 800e35c:	e04b      	b.n	800e3f6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	009b      	lsls	r3, r3, #2
 800e366:	4413      	add	r3, r2
 800e368:	881b      	ldrh	r3, [r3, #0]
 800e36a:	82fb      	strh	r3, [r7, #22]
 800e36c:	8afb      	ldrh	r3, [r7, #22]
 800e36e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e372:	2b00      	cmp	r3, #0
 800e374:	d01b      	beq.n	800e3ae <USB_EPClearStall+0x106>
 800e376:	687a      	ldr	r2, [r7, #4]
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	009b      	lsls	r3, r3, #2
 800e37e:	4413      	add	r3, r2
 800e380:	881b      	ldrh	r3, [r3, #0]
 800e382:	b29b      	uxth	r3, r3
 800e384:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e388:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e38c:	82bb      	strh	r3, [r7, #20]
 800e38e:	687a      	ldr	r2, [r7, #4]
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	781b      	ldrb	r3, [r3, #0]
 800e394:	009b      	lsls	r3, r3, #2
 800e396:	441a      	add	r2, r3
 800e398:	8abb      	ldrh	r3, [r7, #20]
 800e39a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e39e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e3a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e3a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3aa:	b29b      	uxth	r3, r3
 800e3ac:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e3ae:	687a      	ldr	r2, [r7, #4]
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	009b      	lsls	r3, r3, #2
 800e3b6:	4413      	add	r3, r2
 800e3b8:	881b      	ldrh	r3, [r3, #0]
 800e3ba:	b29b      	uxth	r3, r3
 800e3bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e3c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e3c4:	827b      	strh	r3, [r7, #18]
 800e3c6:	8a7b      	ldrh	r3, [r7, #18]
 800e3c8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e3cc:	827b      	strh	r3, [r7, #18]
 800e3ce:	8a7b      	ldrh	r3, [r7, #18]
 800e3d0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e3d4:	827b      	strh	r3, [r7, #18]
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	781b      	ldrb	r3, [r3, #0]
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	441a      	add	r2, r3
 800e3e0:	8a7b      	ldrh	r3, [r7, #18]
 800e3e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e3e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e3ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3f2:	b29b      	uxth	r3, r3
 800e3f4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e3f6:	2300      	movs	r3, #0
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	371c      	adds	r7, #28
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr

0800e404 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e404:	b480      	push	{r7}
 800e406:	b083      	sub	sp, #12
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	460b      	mov	r3, r1
 800e40e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e410:	78fb      	ldrb	r3, [r7, #3]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d103      	bne.n	800e41e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2280      	movs	r2, #128	@ 0x80
 800e41a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e41e:	2300      	movs	r3, #0
}
 800e420:	4618      	mov	r0, r3
 800e422:	370c      	adds	r7, #12
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr

0800e42c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e42c:	b480      	push	{r7}
 800e42e:	b083      	sub	sp, #12
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e43a:	b29b      	uxth	r3, r3
 800e43c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e444:	b29a      	uxth	r2, r3
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e44c:	2300      	movs	r3, #0
}
 800e44e:	4618      	mov	r0, r3
 800e450:	370c      	adds	r7, #12
 800e452:	46bd      	mov	sp, r7
 800e454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e458:	4770      	bx	lr

0800e45a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e45a:	b480      	push	{r7}
 800e45c:	b085      	sub	sp, #20
 800e45e:	af00      	add	r7, sp, #0
 800e460:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800e468:	b29b      	uxth	r3, r3
 800e46a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e46c:	68fb      	ldr	r3, [r7, #12]
}
 800e46e:	4618      	mov	r0, r3
 800e470:	3714      	adds	r7, #20
 800e472:	46bd      	mov	sp, r7
 800e474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e478:	4770      	bx	lr

0800e47a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e47a:	b480      	push	{r7}
 800e47c:	b08b      	sub	sp, #44	@ 0x2c
 800e47e:	af00      	add	r7, sp, #0
 800e480:	60f8      	str	r0, [r7, #12]
 800e482:	60b9      	str	r1, [r7, #8]
 800e484:	4611      	mov	r1, r2
 800e486:	461a      	mov	r2, r3
 800e488:	460b      	mov	r3, r1
 800e48a:	80fb      	strh	r3, [r7, #6]
 800e48c:	4613      	mov	r3, r2
 800e48e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e490:	88bb      	ldrh	r3, [r7, #4]
 800e492:	3301      	adds	r3, #1
 800e494:	085b      	lsrs	r3, r3, #1
 800e496:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e4a0:	88fa      	ldrh	r2, [r7, #6]
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	4413      	add	r3, r2
 800e4a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e4aa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e4ac:	69bb      	ldr	r3, [r7, #24]
 800e4ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4b0:	e01b      	b.n	800e4ea <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800e4b2:	69fb      	ldr	r3, [r7, #28]
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	021b      	lsls	r3, r3, #8
 800e4c0:	b21a      	sxth	r2, r3
 800e4c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	b21b      	sxth	r3, r3
 800e4ca:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e4cc:	6a3b      	ldr	r3, [r7, #32]
 800e4ce:	8a7a      	ldrh	r2, [r7, #18]
 800e4d0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e4d2:	6a3b      	ldr	r3, [r7, #32]
 800e4d4:	3302      	adds	r3, #2
 800e4d6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e4d8:	69fb      	ldr	r3, [r7, #28]
 800e4da:	3301      	adds	r3, #1
 800e4dc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e4de:	69fb      	ldr	r3, [r7, #28]
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4e6:	3b01      	subs	r3, #1
 800e4e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d1e0      	bne.n	800e4b2 <USB_WritePMA+0x38>
  }
}
 800e4f0:	bf00      	nop
 800e4f2:	bf00      	nop
 800e4f4:	372c      	adds	r7, #44	@ 0x2c
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fc:	4770      	bx	lr

0800e4fe <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e4fe:	b480      	push	{r7}
 800e500:	b08b      	sub	sp, #44	@ 0x2c
 800e502:	af00      	add	r7, sp, #0
 800e504:	60f8      	str	r0, [r7, #12]
 800e506:	60b9      	str	r1, [r7, #8]
 800e508:	4611      	mov	r1, r2
 800e50a:	461a      	mov	r2, r3
 800e50c:	460b      	mov	r3, r1
 800e50e:	80fb      	strh	r3, [r7, #6]
 800e510:	4613      	mov	r3, r2
 800e512:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e514:	88bb      	ldrh	r3, [r7, #4]
 800e516:	085b      	lsrs	r3, r3, #1
 800e518:	b29b      	uxth	r3, r3
 800e51a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e524:	88fa      	ldrh	r2, [r7, #6]
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	4413      	add	r3, r2
 800e52a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e52e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e530:	69bb      	ldr	r3, [r7, #24]
 800e532:	627b      	str	r3, [r7, #36]	@ 0x24
 800e534:	e018      	b.n	800e568 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e536:	6a3b      	ldr	r3, [r7, #32]
 800e538:	881b      	ldrh	r3, [r3, #0]
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e53e:	6a3b      	ldr	r3, [r7, #32]
 800e540:	3302      	adds	r3, #2
 800e542:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	b2da      	uxtb	r2, r3
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	3301      	adds	r3, #1
 800e550:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	0a1b      	lsrs	r3, r3, #8
 800e556:	b2da      	uxtb	r2, r3
 800e558:	69fb      	ldr	r3, [r7, #28]
 800e55a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	3301      	adds	r3, #1
 800e560:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e564:	3b01      	subs	r3, #1
 800e566:	627b      	str	r3, [r7, #36]	@ 0x24
 800e568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d1e3      	bne.n	800e536 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e56e:	88bb      	ldrh	r3, [r7, #4]
 800e570:	f003 0301 	and.w	r3, r3, #1
 800e574:	b29b      	uxth	r3, r3
 800e576:	2b00      	cmp	r3, #0
 800e578:	d007      	beq.n	800e58a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e57a:	6a3b      	ldr	r3, [r7, #32]
 800e57c:	881b      	ldrh	r3, [r3, #0]
 800e57e:	b29b      	uxth	r3, r3
 800e580:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	b2da      	uxtb	r2, r3
 800e586:	69fb      	ldr	r3, [r7, #28]
 800e588:	701a      	strb	r2, [r3, #0]
  }
}
 800e58a:	bf00      	nop
 800e58c:	372c      	adds	r7, #44	@ 0x2c
 800e58e:	46bd      	mov	sp, r7
 800e590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e594:	4770      	bx	lr

0800e596 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e596:	b580      	push	{r7, lr}
 800e598:	b084      	sub	sp, #16
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	6078      	str	r0, [r7, #4]
 800e59e:	460b      	mov	r3, r1
 800e5a0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e5a2:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e5a6:	f002 f90f 	bl	80107c8 <USBD_static_malloc>
 800e5aa:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d105      	bne.n	800e5be <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800e5ba:	2302      	movs	r3, #2
 800e5bc:	e066      	b.n	800e68c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	68fa      	ldr	r2, [r7, #12]
 800e5c2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	7c1b      	ldrb	r3, [r3, #16]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d119      	bne.n	800e602 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e5ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e5d2:	2202      	movs	r2, #2
 800e5d4:	2181      	movs	r1, #129	@ 0x81
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f001 ff9d 	bl	8010516 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2201      	movs	r2, #1
 800e5e0:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e5e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e5e6:	2202      	movs	r2, #2
 800e5e8:	2101      	movs	r1, #1
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f001 ff93 	bl	8010516 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2210      	movs	r2, #16
 800e5fc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800e600:	e016      	b.n	800e630 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e602:	2340      	movs	r3, #64	@ 0x40
 800e604:	2202      	movs	r2, #2
 800e606:	2181      	movs	r1, #129	@ 0x81
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f001 ff84 	bl	8010516 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2201      	movs	r2, #1
 800e612:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e614:	2340      	movs	r3, #64	@ 0x40
 800e616:	2202      	movs	r2, #2
 800e618:	2101      	movs	r1, #1
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f001 ff7b 	bl	8010516 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2201      	movs	r2, #1
 800e624:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2210      	movs	r2, #16
 800e62c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e630:	2308      	movs	r3, #8
 800e632:	2203      	movs	r2, #3
 800e634:	2182      	movs	r1, #130	@ 0x82
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f001 ff6d 	bl	8010516 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2201      	movs	r2, #1
 800e640:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2200      	movs	r2, #0
 800e652:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	2200      	movs	r2, #0
 800e65a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	7c1b      	ldrb	r3, [r3, #16]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d109      	bne.n	800e67a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e66c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e670:	2101      	movs	r1, #1
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f002 f83e 	bl	80106f4 <USBD_LL_PrepareReceive>
 800e678:	e007      	b.n	800e68a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e680:	2340      	movs	r3, #64	@ 0x40
 800e682:	2101      	movs	r1, #1
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f002 f835 	bl	80106f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e68a:	2300      	movs	r3, #0
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3710      	adds	r7, #16
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b082      	sub	sp, #8
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	460b      	mov	r3, r1
 800e69e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e6a0:	2181      	movs	r1, #129	@ 0x81
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f001 ff5d 	bl	8010562 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e6ae:	2101      	movs	r1, #1
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f001 ff56 	bl	8010562 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e6be:	2182      	movs	r1, #130	@ 0x82
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f001 ff4e 	bl	8010562 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d00e      	beq.n	800e6fe <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f002 f877 	bl	80107e4 <USBD_static_free>
    pdev->pClassData = NULL;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e6fe:	2300      	movs	r3, #0
}
 800e700:	4618      	mov	r0, r3
 800e702:	3708      	adds	r7, #8
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}

0800e708 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b086      	sub	sp, #24
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e718:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e71a:	2300      	movs	r3, #0
 800e71c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e71e:	2300      	movs	r3, #0
 800e720:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e722:	2300      	movs	r3, #0
 800e724:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d101      	bne.n	800e730 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e72c:	2303      	movs	r3, #3
 800e72e:	e0af      	b.n	800e890 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d03f      	beq.n	800e7bc <USBD_CDC_Setup+0xb4>
 800e73c:	2b20      	cmp	r3, #32
 800e73e:	f040 809f 	bne.w	800e880 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	88db      	ldrh	r3, [r3, #6]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d02e      	beq.n	800e7a8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	b25b      	sxtb	r3, r3
 800e750:	2b00      	cmp	r3, #0
 800e752:	da16      	bge.n	800e782 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e75a:	689b      	ldr	r3, [r3, #8]
 800e75c:	683a      	ldr	r2, [r7, #0]
 800e75e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e760:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e762:	683a      	ldr	r2, [r7, #0]
 800e764:	88d2      	ldrh	r2, [r2, #6]
 800e766:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	88db      	ldrh	r3, [r3, #6]
 800e76c:	2b07      	cmp	r3, #7
 800e76e:	bf28      	it	cs
 800e770:	2307      	movcs	r3, #7
 800e772:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	89fa      	ldrh	r2, [r7, #14]
 800e778:	4619      	mov	r1, r3
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f001 facd 	bl	800fd1a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e780:	e085      	b.n	800e88e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	785a      	ldrb	r2, [r3, #1]
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	88db      	ldrh	r3, [r3, #6]
 800e790:	b2da      	uxtb	r2, r3
 800e792:	693b      	ldr	r3, [r7, #16]
 800e794:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e798:	6939      	ldr	r1, [r7, #16]
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	88db      	ldrh	r3, [r3, #6]
 800e79e:	461a      	mov	r2, r3
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f001 fae6 	bl	800fd72 <USBD_CtlPrepareRx>
      break;
 800e7a6:	e072      	b.n	800e88e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e7ae:	689b      	ldr	r3, [r3, #8]
 800e7b0:	683a      	ldr	r2, [r7, #0]
 800e7b2:	7850      	ldrb	r0, [r2, #1]
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	6839      	ldr	r1, [r7, #0]
 800e7b8:	4798      	blx	r3
      break;
 800e7ba:	e068      	b.n	800e88e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	785b      	ldrb	r3, [r3, #1]
 800e7c0:	2b0b      	cmp	r3, #11
 800e7c2:	d852      	bhi.n	800e86a <USBD_CDC_Setup+0x162>
 800e7c4:	a201      	add	r2, pc, #4	@ (adr r2, 800e7cc <USBD_CDC_Setup+0xc4>)
 800e7c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ca:	bf00      	nop
 800e7cc:	0800e7fd 	.word	0x0800e7fd
 800e7d0:	0800e879 	.word	0x0800e879
 800e7d4:	0800e86b 	.word	0x0800e86b
 800e7d8:	0800e86b 	.word	0x0800e86b
 800e7dc:	0800e86b 	.word	0x0800e86b
 800e7e0:	0800e86b 	.word	0x0800e86b
 800e7e4:	0800e86b 	.word	0x0800e86b
 800e7e8:	0800e86b 	.word	0x0800e86b
 800e7ec:	0800e86b 	.word	0x0800e86b
 800e7f0:	0800e86b 	.word	0x0800e86b
 800e7f4:	0800e827 	.word	0x0800e827
 800e7f8:	0800e851 	.word	0x0800e851
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e802:	b2db      	uxtb	r3, r3
 800e804:	2b03      	cmp	r3, #3
 800e806:	d107      	bne.n	800e818 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e808:	f107 030a 	add.w	r3, r7, #10
 800e80c:	2202      	movs	r2, #2
 800e80e:	4619      	mov	r1, r3
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f001 fa82 	bl	800fd1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e816:	e032      	b.n	800e87e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e818:	6839      	ldr	r1, [r7, #0]
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f001 fa0c 	bl	800fc38 <USBD_CtlError>
            ret = USBD_FAIL;
 800e820:	2303      	movs	r3, #3
 800e822:	75fb      	strb	r3, [r7, #23]
          break;
 800e824:	e02b      	b.n	800e87e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e82c:	b2db      	uxtb	r3, r3
 800e82e:	2b03      	cmp	r3, #3
 800e830:	d107      	bne.n	800e842 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e832:	f107 030d 	add.w	r3, r7, #13
 800e836:	2201      	movs	r2, #1
 800e838:	4619      	mov	r1, r3
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f001 fa6d 	bl	800fd1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e840:	e01d      	b.n	800e87e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e842:	6839      	ldr	r1, [r7, #0]
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f001 f9f7 	bl	800fc38 <USBD_CtlError>
            ret = USBD_FAIL;
 800e84a:	2303      	movs	r3, #3
 800e84c:	75fb      	strb	r3, [r7, #23]
          break;
 800e84e:	e016      	b.n	800e87e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e856:	b2db      	uxtb	r3, r3
 800e858:	2b03      	cmp	r3, #3
 800e85a:	d00f      	beq.n	800e87c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e85c:	6839      	ldr	r1, [r7, #0]
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f001 f9ea 	bl	800fc38 <USBD_CtlError>
            ret = USBD_FAIL;
 800e864:	2303      	movs	r3, #3
 800e866:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e868:	e008      	b.n	800e87c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e86a:	6839      	ldr	r1, [r7, #0]
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f001 f9e3 	bl	800fc38 <USBD_CtlError>
          ret = USBD_FAIL;
 800e872:	2303      	movs	r3, #3
 800e874:	75fb      	strb	r3, [r7, #23]
          break;
 800e876:	e002      	b.n	800e87e <USBD_CDC_Setup+0x176>
          break;
 800e878:	bf00      	nop
 800e87a:	e008      	b.n	800e88e <USBD_CDC_Setup+0x186>
          break;
 800e87c:	bf00      	nop
      }
      break;
 800e87e:	e006      	b.n	800e88e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e880:	6839      	ldr	r1, [r7, #0]
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f001 f9d8 	bl	800fc38 <USBD_CtlError>
      ret = USBD_FAIL;
 800e888:	2303      	movs	r3, #3
 800e88a:	75fb      	strb	r3, [r7, #23]
      break;
 800e88c:	bf00      	nop
  }

  return (uint8_t)ret;
 800e88e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e890:	4618      	mov	r0, r3
 800e892:	3718      	adds	r7, #24
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}

0800e898 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b084      	sub	sp, #16
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	460b      	mov	r3, r1
 800e8a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e8aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d101      	bne.n	800e8ba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e8b6:	2303      	movs	r3, #3
 800e8b8:	e04f      	b.n	800e95a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e8c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e8c2:	78fa      	ldrb	r2, [r7, #3]
 800e8c4:	6879      	ldr	r1, [r7, #4]
 800e8c6:	4613      	mov	r3, r2
 800e8c8:	009b      	lsls	r3, r3, #2
 800e8ca:	4413      	add	r3, r2
 800e8cc:	009b      	lsls	r3, r3, #2
 800e8ce:	440b      	add	r3, r1
 800e8d0:	3318      	adds	r3, #24
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d029      	beq.n	800e92c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e8d8:	78fa      	ldrb	r2, [r7, #3]
 800e8da:	6879      	ldr	r1, [r7, #4]
 800e8dc:	4613      	mov	r3, r2
 800e8de:	009b      	lsls	r3, r3, #2
 800e8e0:	4413      	add	r3, r2
 800e8e2:	009b      	lsls	r3, r3, #2
 800e8e4:	440b      	add	r3, r1
 800e8e6:	3318      	adds	r3, #24
 800e8e8:	681a      	ldr	r2, [r3, #0]
 800e8ea:	78f9      	ldrb	r1, [r7, #3]
 800e8ec:	68f8      	ldr	r0, [r7, #12]
 800e8ee:	460b      	mov	r3, r1
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	440b      	add	r3, r1
 800e8f4:	00db      	lsls	r3, r3, #3
 800e8f6:	4403      	add	r3, r0
 800e8f8:	3320      	adds	r3, #32
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	fbb2 f1f3 	udiv	r1, r2, r3
 800e900:	fb01 f303 	mul.w	r3, r1, r3
 800e904:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e906:	2b00      	cmp	r3, #0
 800e908:	d110      	bne.n	800e92c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e90a:	78fa      	ldrb	r2, [r7, #3]
 800e90c:	6879      	ldr	r1, [r7, #4]
 800e90e:	4613      	mov	r3, r2
 800e910:	009b      	lsls	r3, r3, #2
 800e912:	4413      	add	r3, r2
 800e914:	009b      	lsls	r3, r3, #2
 800e916:	440b      	add	r3, r1
 800e918:	3318      	adds	r3, #24
 800e91a:	2200      	movs	r2, #0
 800e91c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e91e:	78f9      	ldrb	r1, [r7, #3]
 800e920:	2300      	movs	r3, #0
 800e922:	2200      	movs	r2, #0
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f001 fec4 	bl	80106b2 <USBD_LL_Transmit>
 800e92a:	e015      	b.n	800e958 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	2200      	movs	r2, #0
 800e930:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e93a:	691b      	ldr	r3, [r3, #16]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d00b      	beq.n	800e958 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e946:	691b      	ldr	r3, [r3, #16]
 800e948:	68ba      	ldr	r2, [r7, #8]
 800e94a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e94e:	68ba      	ldr	r2, [r7, #8]
 800e950:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e954:	78fa      	ldrb	r2, [r7, #3]
 800e956:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e958:	2300      	movs	r3, #0
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3710      	adds	r7, #16
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}

0800e962 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e962:	b580      	push	{r7, lr}
 800e964:	b084      	sub	sp, #16
 800e966:	af00      	add	r7, sp, #0
 800e968:	6078      	str	r0, [r7, #4]
 800e96a:	460b      	mov	r3, r1
 800e96c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e974:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d101      	bne.n	800e984 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e980:	2303      	movs	r3, #3
 800e982:	e015      	b.n	800e9b0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e984:	78fb      	ldrb	r3, [r7, #3]
 800e986:	4619      	mov	r1, r3
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f001 fed4 	bl	8010736 <USBD_LL_GetRxDataSize>
 800e98e:	4602      	mov	r2, r0
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e99c:	68db      	ldr	r3, [r3, #12]
 800e99e:	68fa      	ldr	r2, [r7, #12]
 800e9a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e9a4:	68fa      	ldr	r2, [r7, #12]
 800e9a6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e9aa:	4611      	mov	r1, r2
 800e9ac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e9ae:	2300      	movs	r3, #0
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3710      	adds	r7, #16
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b084      	sub	sp, #16
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e9c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d101      	bne.n	800e9d2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e9ce:	2303      	movs	r3, #3
 800e9d0:	e01a      	b.n	800ea08 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d014      	beq.n	800ea06 <USBD_CDC_EP0_RxReady+0x4e>
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e9e2:	2bff      	cmp	r3, #255	@ 0xff
 800e9e4:	d00f      	beq.n	800ea06 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e9ec:	689b      	ldr	r3, [r3, #8]
 800e9ee:	68fa      	ldr	r2, [r7, #12]
 800e9f0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800e9f4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e9f6:	68fa      	ldr	r2, [r7, #12]
 800e9f8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e9fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	22ff      	movs	r2, #255	@ 0xff
 800ea02:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ea06:	2300      	movs	r3, #0
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3710      	adds	r7, #16
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}

0800ea10 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2243      	movs	r2, #67	@ 0x43
 800ea1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ea1e:	4b03      	ldr	r3, [pc, #12]	@ (800ea2c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	370c      	adds	r7, #12
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr
 800ea2c:	200000d0 	.word	0x200000d0

0800ea30 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b083      	sub	sp, #12
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2243      	movs	r2, #67	@ 0x43
 800ea3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ea3e:	4b03      	ldr	r3, [pc, #12]	@ (800ea4c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	370c      	adds	r7, #12
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr
 800ea4c:	2000008c 	.word	0x2000008c

0800ea50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2243      	movs	r2, #67	@ 0x43
 800ea5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ea5e:	4b03      	ldr	r3, [pc, #12]	@ (800ea6c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	370c      	adds	r7, #12
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr
 800ea6c:	20000114 	.word	0x20000114

0800ea70 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b083      	sub	sp, #12
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	220a      	movs	r2, #10
 800ea7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ea7e:	4b03      	ldr	r3, [pc, #12]	@ (800ea8c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	370c      	adds	r7, #12
 800ea84:	46bd      	mov	sp, r7
 800ea86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8a:	4770      	bx	lr
 800ea8c:	20000048 	.word	0x20000048

0800ea90 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ea90:	b480      	push	{r7}
 800ea92:	b083      	sub	sp, #12
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d101      	bne.n	800eaa4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800eaa0:	2303      	movs	r3, #3
 800eaa2:	e004      	b.n	800eaae <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	683a      	ldr	r2, [r7, #0]
 800eaa8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800eaac:	2300      	movs	r3, #0
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	370c      	adds	r7, #12
 800eab2:	46bd      	mov	sp, r7
 800eab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab8:	4770      	bx	lr

0800eaba <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800eaba:	b480      	push	{r7}
 800eabc:	b087      	sub	sp, #28
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	60f8      	str	r0, [r7, #12]
 800eac2:	60b9      	str	r1, [r7, #8]
 800eac4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eacc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d101      	bne.n	800ead8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ead4:	2303      	movs	r3, #3
 800ead6:	e008      	b.n	800eaea <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	68ba      	ldr	r2, [r7, #8]
 800eadc:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	687a      	ldr	r2, [r7, #4]
 800eae4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800eae8:	2300      	movs	r3, #0
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	371c      	adds	r7, #28
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr

0800eaf6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800eaf6:	b480      	push	{r7}
 800eaf8:	b085      	sub	sp, #20
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
 800eafe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eb06:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d101      	bne.n	800eb12 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800eb0e:	2303      	movs	r3, #3
 800eb10:	e004      	b.n	800eb1c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	683a      	ldr	r2, [r7, #0]
 800eb16:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800eb1a:	2300      	movs	r3, #0
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3714      	adds	r7, #20
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eb36:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d101      	bne.n	800eb4a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800eb46:	2303      	movs	r3, #3
 800eb48:	e01a      	b.n	800eb80 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d114      	bne.n	800eb7e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	2201      	movs	r2, #1
 800eb58:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800eb72:	2181      	movs	r1, #129	@ 0x81
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f001 fd9c 	bl	80106b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800eb7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3710      	adds	r7, #16
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}

0800eb88 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b084      	sub	sp, #16
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eb96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d101      	bne.n	800eba6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800eba2:	2303      	movs	r3, #3
 800eba4:	e016      	b.n	800ebd4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	7c1b      	ldrb	r3, [r3, #16]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d109      	bne.n	800ebc2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ebb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ebb8:	2101      	movs	r1, #1
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f001 fd9a 	bl	80106f4 <USBD_LL_PrepareReceive>
 800ebc0:	e007      	b.n	800ebd2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ebc8:	2340      	movs	r3, #64	@ 0x40
 800ebca:	2101      	movs	r1, #1
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f001 fd91 	bl	80106f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ebd2:	2300      	movs	r3, #0
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3710      	adds	r7, #16
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b086      	sub	sp, #24
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	60f8      	str	r0, [r7, #12]
 800ebe4:	60b9      	str	r1, [r7, #8]
 800ebe6:	4613      	mov	r3, r2
 800ebe8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d101      	bne.n	800ebf4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ebf0:	2303      	movs	r3, #3
 800ebf2:	e01f      	b.n	800ec34 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2200      	movs	r2, #0
 800ec08:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d003      	beq.n	800ec1a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	68ba      	ldr	r2, [r7, #8]
 800ec16:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	2201      	movs	r2, #1
 800ec1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	79fa      	ldrb	r2, [r7, #7]
 800ec26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ec28:	68f8      	ldr	r0, [r7, #12]
 800ec2a:	f001 fbf9 	bl	8010420 <USBD_LL_Init>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ec32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3718      	adds	r7, #24
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ec46:	2300      	movs	r3, #0
 800ec48:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d101      	bne.n	800ec54 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ec50:	2303      	movs	r3, #3
 800ec52:	e016      	b.n	800ec82 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	683a      	ldr	r2, [r7, #0]
 800ec58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d00b      	beq.n	800ec80 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec70:	f107 020e 	add.w	r2, r7, #14
 800ec74:	4610      	mov	r0, r2
 800ec76:	4798      	blx	r3
 800ec78:	4602      	mov	r2, r0
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ec80:	2300      	movs	r3, #0
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3710      	adds	r7, #16
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}

0800ec8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ec8a:	b580      	push	{r7, lr}
 800ec8c:	b082      	sub	sp, #8
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f001 fc24 	bl	80104e0 <USBD_LL_Start>
 800ec98:	4603      	mov	r3, r0
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3708      	adds	r7, #8
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}

0800eca2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800eca2:	b480      	push	{r7}
 800eca4:	b083      	sub	sp, #12
 800eca6:	af00      	add	r7, sp, #0
 800eca8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ecaa:	2300      	movs	r3, #0
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	370c      	adds	r7, #12
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr

0800ecb8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b084      	sub	sp, #16
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	460b      	mov	r3, r1
 800ecc2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ecc4:	2303      	movs	r3, #3
 800ecc6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d009      	beq.n	800ece6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	78fa      	ldrb	r2, [r7, #3]
 800ecdc:	4611      	mov	r1, r2
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	4798      	blx	r3
 800ece2:	4603      	mov	r3, r0
 800ece4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ece6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	3710      	adds	r7, #16
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d007      	beq.n	800ed16 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	78fa      	ldrb	r2, [r7, #3]
 800ed10:	4611      	mov	r1, r2
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	4798      	blx	r3
  }

  return USBD_OK;
 800ed16:	2300      	movs	r3, #0
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3708      	adds	r7, #8
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ed30:	6839      	ldr	r1, [r7, #0]
 800ed32:	4618      	mov	r0, r3
 800ed34:	f000 ff46 	bl	800fbc4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ed46:	461a      	mov	r2, r3
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ed54:	f003 031f 	and.w	r3, r3, #31
 800ed58:	2b02      	cmp	r3, #2
 800ed5a:	d01a      	beq.n	800ed92 <USBD_LL_SetupStage+0x72>
 800ed5c:	2b02      	cmp	r3, #2
 800ed5e:	d822      	bhi.n	800eda6 <USBD_LL_SetupStage+0x86>
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d002      	beq.n	800ed6a <USBD_LL_SetupStage+0x4a>
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	d00a      	beq.n	800ed7e <USBD_LL_SetupStage+0x5e>
 800ed68:	e01d      	b.n	800eda6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ed70:	4619      	mov	r1, r3
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f000 f9ee 	bl	800f154 <USBD_StdDevReq>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	73fb      	strb	r3, [r7, #15]
      break;
 800ed7c:	e020      	b.n	800edc0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ed84:	4619      	mov	r1, r3
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f000 fa52 	bl	800f230 <USBD_StdItfReq>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	73fb      	strb	r3, [r7, #15]
      break;
 800ed90:	e016      	b.n	800edc0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ed98:	4619      	mov	r1, r3
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f000 fa91 	bl	800f2c2 <USBD_StdEPReq>
 800eda0:	4603      	mov	r3, r0
 800eda2:	73fb      	strb	r3, [r7, #15]
      break;
 800eda4:	e00c      	b.n	800edc0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800edac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800edb0:	b2db      	uxtb	r3, r3
 800edb2:	4619      	mov	r1, r3
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f001 fbf3 	bl	80105a0 <USBD_LL_StallEP>
 800edba:	4603      	mov	r3, r0
 800edbc:	73fb      	strb	r3, [r7, #15]
      break;
 800edbe:	bf00      	nop
  }

  return ret;
 800edc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800edc2:	4618      	mov	r0, r3
 800edc4:	3710      	adds	r7, #16
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}

0800edca <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800edca:	b580      	push	{r7, lr}
 800edcc:	b086      	sub	sp, #24
 800edce:	af00      	add	r7, sp, #0
 800edd0:	60f8      	str	r0, [r7, #12]
 800edd2:	460b      	mov	r3, r1
 800edd4:	607a      	str	r2, [r7, #4]
 800edd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800edd8:	7afb      	ldrb	r3, [r7, #11]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d138      	bne.n	800ee50 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ede4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800edec:	2b03      	cmp	r3, #3
 800edee:	d14a      	bne.n	800ee86 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	689a      	ldr	r2, [r3, #8]
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	68db      	ldr	r3, [r3, #12]
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d913      	bls.n	800ee24 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	689a      	ldr	r2, [r3, #8]
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	68db      	ldr	r3, [r3, #12]
 800ee04:	1ad2      	subs	r2, r2, r3
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	68da      	ldr	r2, [r3, #12]
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	689b      	ldr	r3, [r3, #8]
 800ee12:	4293      	cmp	r3, r2
 800ee14:	bf28      	it	cs
 800ee16:	4613      	movcs	r3, r2
 800ee18:	461a      	mov	r2, r3
 800ee1a:	6879      	ldr	r1, [r7, #4]
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f000 ffc5 	bl	800fdac <USBD_CtlContinueRx>
 800ee22:	e030      	b.n	800ee86 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee2a:	b2db      	uxtb	r3, r3
 800ee2c:	2b03      	cmp	r3, #3
 800ee2e:	d10b      	bne.n	800ee48 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee36:	691b      	ldr	r3, [r3, #16]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d005      	beq.n	800ee48 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee42:	691b      	ldr	r3, [r3, #16]
 800ee44:	68f8      	ldr	r0, [r7, #12]
 800ee46:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ee48:	68f8      	ldr	r0, [r7, #12]
 800ee4a:	f000 ffc0 	bl	800fdce <USBD_CtlSendStatus>
 800ee4e:	e01a      	b.n	800ee86 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	2b03      	cmp	r3, #3
 800ee5a:	d114      	bne.n	800ee86 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee62:	699b      	ldr	r3, [r3, #24]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d00e      	beq.n	800ee86 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee6e:	699b      	ldr	r3, [r3, #24]
 800ee70:	7afa      	ldrb	r2, [r7, #11]
 800ee72:	4611      	mov	r1, r2
 800ee74:	68f8      	ldr	r0, [r7, #12]
 800ee76:	4798      	blx	r3
 800ee78:	4603      	mov	r3, r0
 800ee7a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ee7c:	7dfb      	ldrb	r3, [r7, #23]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d001      	beq.n	800ee86 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ee82:	7dfb      	ldrb	r3, [r7, #23]
 800ee84:	e000      	b.n	800ee88 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ee86:	2300      	movs	r3, #0
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3718      	adds	r7, #24
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b086      	sub	sp, #24
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	60f8      	str	r0, [r7, #12]
 800ee98:	460b      	mov	r3, r1
 800ee9a:	607a      	str	r2, [r7, #4]
 800ee9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ee9e:	7afb      	ldrb	r3, [r7, #11]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d16b      	bne.n	800ef7c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	3314      	adds	r3, #20
 800eea8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800eeb0:	2b02      	cmp	r3, #2
 800eeb2:	d156      	bne.n	800ef62 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	689a      	ldr	r2, [r3, #8]
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	68db      	ldr	r3, [r3, #12]
 800eebc:	429a      	cmp	r2, r3
 800eebe:	d914      	bls.n	800eeea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800eec0:	693b      	ldr	r3, [r7, #16]
 800eec2:	689a      	ldr	r2, [r3, #8]
 800eec4:	693b      	ldr	r3, [r7, #16]
 800eec6:	68db      	ldr	r3, [r3, #12]
 800eec8:	1ad2      	subs	r2, r2, r3
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	689b      	ldr	r3, [r3, #8]
 800eed2:	461a      	mov	r2, r3
 800eed4:	6879      	ldr	r1, [r7, #4]
 800eed6:	68f8      	ldr	r0, [r7, #12]
 800eed8:	f000 ff3a 	bl	800fd50 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eedc:	2300      	movs	r3, #0
 800eede:	2200      	movs	r2, #0
 800eee0:	2100      	movs	r1, #0
 800eee2:	68f8      	ldr	r0, [r7, #12]
 800eee4:	f001 fc06 	bl	80106f4 <USBD_LL_PrepareReceive>
 800eee8:	e03b      	b.n	800ef62 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	68da      	ldr	r2, [r3, #12]
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	689b      	ldr	r3, [r3, #8]
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d11c      	bne.n	800ef30 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	685a      	ldr	r2, [r3, #4]
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d316      	bcc.n	800ef30 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ef02:	693b      	ldr	r3, [r7, #16]
 800ef04:	685a      	ldr	r2, [r3, #4]
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	d20f      	bcs.n	800ef30 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ef10:	2200      	movs	r2, #0
 800ef12:	2100      	movs	r1, #0
 800ef14:	68f8      	ldr	r0, [r7, #12]
 800ef16:	f000 ff1b 	bl	800fd50 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ef22:	2300      	movs	r3, #0
 800ef24:	2200      	movs	r2, #0
 800ef26:	2100      	movs	r1, #0
 800ef28:	68f8      	ldr	r0, [r7, #12]
 800ef2a:	f001 fbe3 	bl	80106f4 <USBD_LL_PrepareReceive>
 800ef2e:	e018      	b.n	800ef62 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef36:	b2db      	uxtb	r3, r3
 800ef38:	2b03      	cmp	r3, #3
 800ef3a:	d10b      	bne.n	800ef54 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef42:	68db      	ldr	r3, [r3, #12]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d005      	beq.n	800ef54 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef4e:	68db      	ldr	r3, [r3, #12]
 800ef50:	68f8      	ldr	r0, [r7, #12]
 800ef52:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ef54:	2180      	movs	r1, #128	@ 0x80
 800ef56:	68f8      	ldr	r0, [r7, #12]
 800ef58:	f001 fb22 	bl	80105a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ef5c:	68f8      	ldr	r0, [r7, #12]
 800ef5e:	f000 ff49 	bl	800fdf4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ef68:	2b01      	cmp	r3, #1
 800ef6a:	d122      	bne.n	800efb2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ef6c:	68f8      	ldr	r0, [r7, #12]
 800ef6e:	f7ff fe98 	bl	800eca2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	2200      	movs	r2, #0
 800ef76:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ef7a:	e01a      	b.n	800efb2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef82:	b2db      	uxtb	r3, r3
 800ef84:	2b03      	cmp	r3, #3
 800ef86:	d114      	bne.n	800efb2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef8e:	695b      	ldr	r3, [r3, #20]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d00e      	beq.n	800efb2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef9a:	695b      	ldr	r3, [r3, #20]
 800ef9c:	7afa      	ldrb	r2, [r7, #11]
 800ef9e:	4611      	mov	r1, r2
 800efa0:	68f8      	ldr	r0, [r7, #12]
 800efa2:	4798      	blx	r3
 800efa4:	4603      	mov	r3, r0
 800efa6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800efa8:	7dfb      	ldrb	r3, [r7, #23]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d001      	beq.n	800efb2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800efae:	7dfb      	ldrb	r3, [r7, #23]
 800efb0:	e000      	b.n	800efb4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800efb2:	2300      	movs	r3, #0
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	3718      	adds	r7, #24
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b082      	sub	sp, #8
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2201      	movs	r2, #1
 800efc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2200      	movs	r2, #0
 800efd0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2200      	movs	r2, #0
 800efd8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2200      	movs	r2, #0
 800efde:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d101      	bne.n	800eff0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800efec:	2303      	movs	r3, #3
 800efee:	e02f      	b.n	800f050 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d00f      	beq.n	800f01a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d009      	beq.n	800f01a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	687a      	ldr	r2, [r7, #4]
 800f010:	6852      	ldr	r2, [r2, #4]
 800f012:	b2d2      	uxtb	r2, r2
 800f014:	4611      	mov	r1, r2
 800f016:	6878      	ldr	r0, [r7, #4]
 800f018:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f01a:	2340      	movs	r3, #64	@ 0x40
 800f01c:	2200      	movs	r2, #0
 800f01e:	2100      	movs	r1, #0
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f001 fa78 	bl	8010516 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2201      	movs	r2, #1
 800f02a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2240      	movs	r2, #64	@ 0x40
 800f032:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f036:	2340      	movs	r3, #64	@ 0x40
 800f038:	2200      	movs	r2, #0
 800f03a:	2180      	movs	r1, #128	@ 0x80
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f001 fa6a 	bl	8010516 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2201      	movs	r2, #1
 800f046:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2240      	movs	r2, #64	@ 0x40
 800f04c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f04e:	2300      	movs	r3, #0
}
 800f050:	4618      	mov	r0, r3
 800f052:	3708      	adds	r7, #8
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}

0800f058 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f058:	b480      	push	{r7}
 800f05a:	b083      	sub	sp, #12
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	460b      	mov	r3, r1
 800f062:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	78fa      	ldrb	r2, [r7, #3]
 800f068:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f06a:	2300      	movs	r3, #0
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	370c      	adds	r7, #12
 800f070:	46bd      	mov	sp, r7
 800f072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f076:	4770      	bx	lr

0800f078 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f078:	b480      	push	{r7}
 800f07a:	b083      	sub	sp, #12
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f086:	b2da      	uxtb	r2, r3
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2204      	movs	r2, #4
 800f092:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f096:	2300      	movs	r3, #0
}
 800f098:	4618      	mov	r0, r3
 800f09a:	370c      	adds	r7, #12
 800f09c:	46bd      	mov	sp, r7
 800f09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a2:	4770      	bx	lr

0800f0a4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b083      	sub	sp, #12
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0b2:	b2db      	uxtb	r3, r3
 800f0b4:	2b04      	cmp	r3, #4
 800f0b6:	d106      	bne.n	800f0c6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f0be:	b2da      	uxtb	r2, r3
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f0c6:	2300      	movs	r3, #0
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	370c      	adds	r7, #12
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d2:	4770      	bx	lr

0800f0d4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b082      	sub	sp, #8
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d101      	bne.n	800f0ea <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f0e6:	2303      	movs	r3, #3
 800f0e8:	e012      	b.n	800f110 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0f0:	b2db      	uxtb	r3, r3
 800f0f2:	2b03      	cmp	r3, #3
 800f0f4:	d10b      	bne.n	800f10e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0fc:	69db      	ldr	r3, [r3, #28]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d005      	beq.n	800f10e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f108:	69db      	ldr	r3, [r3, #28]
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f10e:	2300      	movs	r3, #0
}
 800f110:	4618      	mov	r0, r3
 800f112:	3708      	adds	r7, #8
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f118:	b480      	push	{r7}
 800f11a:	b087      	sub	sp, #28
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	781b      	ldrb	r3, [r3, #0]
 800f128:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	3301      	adds	r3, #1
 800f12e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	781b      	ldrb	r3, [r3, #0]
 800f134:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f136:	8a3b      	ldrh	r3, [r7, #16]
 800f138:	021b      	lsls	r3, r3, #8
 800f13a:	b21a      	sxth	r2, r3
 800f13c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f140:	4313      	orrs	r3, r2
 800f142:	b21b      	sxth	r3, r3
 800f144:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f146:	89fb      	ldrh	r3, [r7, #14]
}
 800f148:	4618      	mov	r0, r3
 800f14a:	371c      	adds	r7, #28
 800f14c:	46bd      	mov	sp, r7
 800f14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f152:	4770      	bx	lr

0800f154 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b084      	sub	sp, #16
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f15e:	2300      	movs	r3, #0
 800f160:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f16a:	2b40      	cmp	r3, #64	@ 0x40
 800f16c:	d005      	beq.n	800f17a <USBD_StdDevReq+0x26>
 800f16e:	2b40      	cmp	r3, #64	@ 0x40
 800f170:	d853      	bhi.n	800f21a <USBD_StdDevReq+0xc6>
 800f172:	2b00      	cmp	r3, #0
 800f174:	d00b      	beq.n	800f18e <USBD_StdDevReq+0x3a>
 800f176:	2b20      	cmp	r3, #32
 800f178:	d14f      	bne.n	800f21a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f180:	689b      	ldr	r3, [r3, #8]
 800f182:	6839      	ldr	r1, [r7, #0]
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	4798      	blx	r3
 800f188:	4603      	mov	r3, r0
 800f18a:	73fb      	strb	r3, [r7, #15]
      break;
 800f18c:	e04a      	b.n	800f224 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	785b      	ldrb	r3, [r3, #1]
 800f192:	2b09      	cmp	r3, #9
 800f194:	d83b      	bhi.n	800f20e <USBD_StdDevReq+0xba>
 800f196:	a201      	add	r2, pc, #4	@ (adr r2, 800f19c <USBD_StdDevReq+0x48>)
 800f198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f19c:	0800f1f1 	.word	0x0800f1f1
 800f1a0:	0800f205 	.word	0x0800f205
 800f1a4:	0800f20f 	.word	0x0800f20f
 800f1a8:	0800f1fb 	.word	0x0800f1fb
 800f1ac:	0800f20f 	.word	0x0800f20f
 800f1b0:	0800f1cf 	.word	0x0800f1cf
 800f1b4:	0800f1c5 	.word	0x0800f1c5
 800f1b8:	0800f20f 	.word	0x0800f20f
 800f1bc:	0800f1e7 	.word	0x0800f1e7
 800f1c0:	0800f1d9 	.word	0x0800f1d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f1c4:	6839      	ldr	r1, [r7, #0]
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f000 f9de 	bl	800f588 <USBD_GetDescriptor>
          break;
 800f1cc:	e024      	b.n	800f218 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f1ce:	6839      	ldr	r1, [r7, #0]
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f000 fb6d 	bl	800f8b0 <USBD_SetAddress>
          break;
 800f1d6:	e01f      	b.n	800f218 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f1d8:	6839      	ldr	r1, [r7, #0]
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 fbac 	bl	800f938 <USBD_SetConfig>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	73fb      	strb	r3, [r7, #15]
          break;
 800f1e4:	e018      	b.n	800f218 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f1e6:	6839      	ldr	r1, [r7, #0]
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f000 fc4b 	bl	800fa84 <USBD_GetConfig>
          break;
 800f1ee:	e013      	b.n	800f218 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f1f0:	6839      	ldr	r1, [r7, #0]
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f000 fc7c 	bl	800faf0 <USBD_GetStatus>
          break;
 800f1f8:	e00e      	b.n	800f218 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f1fa:	6839      	ldr	r1, [r7, #0]
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f000 fcab 	bl	800fb58 <USBD_SetFeature>
          break;
 800f202:	e009      	b.n	800f218 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f204:	6839      	ldr	r1, [r7, #0]
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f000 fcba 	bl	800fb80 <USBD_ClrFeature>
          break;
 800f20c:	e004      	b.n	800f218 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f20e:	6839      	ldr	r1, [r7, #0]
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f000 fd11 	bl	800fc38 <USBD_CtlError>
          break;
 800f216:	bf00      	nop
      }
      break;
 800f218:	e004      	b.n	800f224 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f21a:	6839      	ldr	r1, [r7, #0]
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f000 fd0b 	bl	800fc38 <USBD_CtlError>
      break;
 800f222:	bf00      	nop
  }

  return ret;
 800f224:	7bfb      	ldrb	r3, [r7, #15]
}
 800f226:	4618      	mov	r0, r3
 800f228:	3710      	adds	r7, #16
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	bf00      	nop

0800f230 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b084      	sub	sp, #16
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f23a:	2300      	movs	r3, #0
 800f23c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f246:	2b40      	cmp	r3, #64	@ 0x40
 800f248:	d005      	beq.n	800f256 <USBD_StdItfReq+0x26>
 800f24a:	2b40      	cmp	r3, #64	@ 0x40
 800f24c:	d82f      	bhi.n	800f2ae <USBD_StdItfReq+0x7e>
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d001      	beq.n	800f256 <USBD_StdItfReq+0x26>
 800f252:	2b20      	cmp	r3, #32
 800f254:	d12b      	bne.n	800f2ae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	3b01      	subs	r3, #1
 800f260:	2b02      	cmp	r3, #2
 800f262:	d81d      	bhi.n	800f2a0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	889b      	ldrh	r3, [r3, #4]
 800f268:	b2db      	uxtb	r3, r3
 800f26a:	2b01      	cmp	r3, #1
 800f26c:	d813      	bhi.n	800f296 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f274:	689b      	ldr	r3, [r3, #8]
 800f276:	6839      	ldr	r1, [r7, #0]
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	4798      	blx	r3
 800f27c:	4603      	mov	r3, r0
 800f27e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	88db      	ldrh	r3, [r3, #6]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d110      	bne.n	800f2aa <USBD_StdItfReq+0x7a>
 800f288:	7bfb      	ldrb	r3, [r7, #15]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d10d      	bne.n	800f2aa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 fd9d 	bl	800fdce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f294:	e009      	b.n	800f2aa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f296:	6839      	ldr	r1, [r7, #0]
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f000 fccd 	bl	800fc38 <USBD_CtlError>
          break;
 800f29e:	e004      	b.n	800f2aa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f2a0:	6839      	ldr	r1, [r7, #0]
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f000 fcc8 	bl	800fc38 <USBD_CtlError>
          break;
 800f2a8:	e000      	b.n	800f2ac <USBD_StdItfReq+0x7c>
          break;
 800f2aa:	bf00      	nop
      }
      break;
 800f2ac:	e004      	b.n	800f2b8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f2ae:	6839      	ldr	r1, [r7, #0]
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f000 fcc1 	bl	800fc38 <USBD_CtlError>
      break;
 800f2b6:	bf00      	nop
  }

  return ret;
 800f2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3710      	adds	r7, #16
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}

0800f2c2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2c2:	b580      	push	{r7, lr}
 800f2c4:	b084      	sub	sp, #16
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	6078      	str	r0, [r7, #4]
 800f2ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	889b      	ldrh	r3, [r3, #4]
 800f2d4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f2de:	2b40      	cmp	r3, #64	@ 0x40
 800f2e0:	d007      	beq.n	800f2f2 <USBD_StdEPReq+0x30>
 800f2e2:	2b40      	cmp	r3, #64	@ 0x40
 800f2e4:	f200 8145 	bhi.w	800f572 <USBD_StdEPReq+0x2b0>
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d00c      	beq.n	800f306 <USBD_StdEPReq+0x44>
 800f2ec:	2b20      	cmp	r3, #32
 800f2ee:	f040 8140 	bne.w	800f572 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2f8:	689b      	ldr	r3, [r3, #8]
 800f2fa:	6839      	ldr	r1, [r7, #0]
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	4798      	blx	r3
 800f300:	4603      	mov	r3, r0
 800f302:	73fb      	strb	r3, [r7, #15]
      break;
 800f304:	e13a      	b.n	800f57c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	785b      	ldrb	r3, [r3, #1]
 800f30a:	2b03      	cmp	r3, #3
 800f30c:	d007      	beq.n	800f31e <USBD_StdEPReq+0x5c>
 800f30e:	2b03      	cmp	r3, #3
 800f310:	f300 8129 	bgt.w	800f566 <USBD_StdEPReq+0x2a4>
 800f314:	2b00      	cmp	r3, #0
 800f316:	d07f      	beq.n	800f418 <USBD_StdEPReq+0x156>
 800f318:	2b01      	cmp	r3, #1
 800f31a:	d03c      	beq.n	800f396 <USBD_StdEPReq+0xd4>
 800f31c:	e123      	b.n	800f566 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f324:	b2db      	uxtb	r3, r3
 800f326:	2b02      	cmp	r3, #2
 800f328:	d002      	beq.n	800f330 <USBD_StdEPReq+0x6e>
 800f32a:	2b03      	cmp	r3, #3
 800f32c:	d016      	beq.n	800f35c <USBD_StdEPReq+0x9a>
 800f32e:	e02c      	b.n	800f38a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f330:	7bbb      	ldrb	r3, [r7, #14]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d00d      	beq.n	800f352 <USBD_StdEPReq+0x90>
 800f336:	7bbb      	ldrb	r3, [r7, #14]
 800f338:	2b80      	cmp	r3, #128	@ 0x80
 800f33a:	d00a      	beq.n	800f352 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f33c:	7bbb      	ldrb	r3, [r7, #14]
 800f33e:	4619      	mov	r1, r3
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f001 f92d 	bl	80105a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f346:	2180      	movs	r1, #128	@ 0x80
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f001 f929 	bl	80105a0 <USBD_LL_StallEP>
 800f34e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f350:	e020      	b.n	800f394 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f352:	6839      	ldr	r1, [r7, #0]
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f000 fc6f 	bl	800fc38 <USBD_CtlError>
              break;
 800f35a:	e01b      	b.n	800f394 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	885b      	ldrh	r3, [r3, #2]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d10e      	bne.n	800f382 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f364:	7bbb      	ldrb	r3, [r7, #14]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d00b      	beq.n	800f382 <USBD_StdEPReq+0xc0>
 800f36a:	7bbb      	ldrb	r3, [r7, #14]
 800f36c:	2b80      	cmp	r3, #128	@ 0x80
 800f36e:	d008      	beq.n	800f382 <USBD_StdEPReq+0xc0>
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	88db      	ldrh	r3, [r3, #6]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d104      	bne.n	800f382 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f378:	7bbb      	ldrb	r3, [r7, #14]
 800f37a:	4619      	mov	r1, r3
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f001 f90f 	bl	80105a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f000 fd23 	bl	800fdce <USBD_CtlSendStatus>

              break;
 800f388:	e004      	b.n	800f394 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f38a:	6839      	ldr	r1, [r7, #0]
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f000 fc53 	bl	800fc38 <USBD_CtlError>
              break;
 800f392:	bf00      	nop
          }
          break;
 800f394:	e0ec      	b.n	800f570 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f39c:	b2db      	uxtb	r3, r3
 800f39e:	2b02      	cmp	r3, #2
 800f3a0:	d002      	beq.n	800f3a8 <USBD_StdEPReq+0xe6>
 800f3a2:	2b03      	cmp	r3, #3
 800f3a4:	d016      	beq.n	800f3d4 <USBD_StdEPReq+0x112>
 800f3a6:	e030      	b.n	800f40a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f3a8:	7bbb      	ldrb	r3, [r7, #14]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d00d      	beq.n	800f3ca <USBD_StdEPReq+0x108>
 800f3ae:	7bbb      	ldrb	r3, [r7, #14]
 800f3b0:	2b80      	cmp	r3, #128	@ 0x80
 800f3b2:	d00a      	beq.n	800f3ca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f3b4:	7bbb      	ldrb	r3, [r7, #14]
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f001 f8f1 	bl	80105a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f3be:	2180      	movs	r1, #128	@ 0x80
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f001 f8ed 	bl	80105a0 <USBD_LL_StallEP>
 800f3c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f3c8:	e025      	b.n	800f416 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f3ca:	6839      	ldr	r1, [r7, #0]
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f000 fc33 	bl	800fc38 <USBD_CtlError>
              break;
 800f3d2:	e020      	b.n	800f416 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	885b      	ldrh	r3, [r3, #2]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d11b      	bne.n	800f414 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f3dc:	7bbb      	ldrb	r3, [r7, #14]
 800f3de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d004      	beq.n	800f3f0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f3e6:	7bbb      	ldrb	r3, [r7, #14]
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f001 f8f7 	bl	80105de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f000 fcec 	bl	800fdce <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3fc:	689b      	ldr	r3, [r3, #8]
 800f3fe:	6839      	ldr	r1, [r7, #0]
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	4798      	blx	r3
 800f404:	4603      	mov	r3, r0
 800f406:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f408:	e004      	b.n	800f414 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f40a:	6839      	ldr	r1, [r7, #0]
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f000 fc13 	bl	800fc38 <USBD_CtlError>
              break;
 800f412:	e000      	b.n	800f416 <USBD_StdEPReq+0x154>
              break;
 800f414:	bf00      	nop
          }
          break;
 800f416:	e0ab      	b.n	800f570 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f41e:	b2db      	uxtb	r3, r3
 800f420:	2b02      	cmp	r3, #2
 800f422:	d002      	beq.n	800f42a <USBD_StdEPReq+0x168>
 800f424:	2b03      	cmp	r3, #3
 800f426:	d032      	beq.n	800f48e <USBD_StdEPReq+0x1cc>
 800f428:	e097      	b.n	800f55a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f42a:	7bbb      	ldrb	r3, [r7, #14]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d007      	beq.n	800f440 <USBD_StdEPReq+0x17e>
 800f430:	7bbb      	ldrb	r3, [r7, #14]
 800f432:	2b80      	cmp	r3, #128	@ 0x80
 800f434:	d004      	beq.n	800f440 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f436:	6839      	ldr	r1, [r7, #0]
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f000 fbfd 	bl	800fc38 <USBD_CtlError>
                break;
 800f43e:	e091      	b.n	800f564 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f440:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f444:	2b00      	cmp	r3, #0
 800f446:	da0b      	bge.n	800f460 <USBD_StdEPReq+0x19e>
 800f448:	7bbb      	ldrb	r3, [r7, #14]
 800f44a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f44e:	4613      	mov	r3, r2
 800f450:	009b      	lsls	r3, r3, #2
 800f452:	4413      	add	r3, r2
 800f454:	009b      	lsls	r3, r3, #2
 800f456:	3310      	adds	r3, #16
 800f458:	687a      	ldr	r2, [r7, #4]
 800f45a:	4413      	add	r3, r2
 800f45c:	3304      	adds	r3, #4
 800f45e:	e00b      	b.n	800f478 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f460:	7bbb      	ldrb	r3, [r7, #14]
 800f462:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f466:	4613      	mov	r3, r2
 800f468:	009b      	lsls	r3, r3, #2
 800f46a:	4413      	add	r3, r2
 800f46c:	009b      	lsls	r3, r3, #2
 800f46e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f472:	687a      	ldr	r2, [r7, #4]
 800f474:	4413      	add	r3, r2
 800f476:	3304      	adds	r3, #4
 800f478:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	2200      	movs	r2, #0
 800f47e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	2202      	movs	r2, #2
 800f484:	4619      	mov	r1, r3
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f000 fc47 	bl	800fd1a <USBD_CtlSendData>
              break;
 800f48c:	e06a      	b.n	800f564 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f48e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f492:	2b00      	cmp	r3, #0
 800f494:	da11      	bge.n	800f4ba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f496:	7bbb      	ldrb	r3, [r7, #14]
 800f498:	f003 020f 	and.w	r2, r3, #15
 800f49c:	6879      	ldr	r1, [r7, #4]
 800f49e:	4613      	mov	r3, r2
 800f4a0:	009b      	lsls	r3, r3, #2
 800f4a2:	4413      	add	r3, r2
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	440b      	add	r3, r1
 800f4a8:	3324      	adds	r3, #36	@ 0x24
 800f4aa:	881b      	ldrh	r3, [r3, #0]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d117      	bne.n	800f4e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f4b0:	6839      	ldr	r1, [r7, #0]
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f000 fbc0 	bl	800fc38 <USBD_CtlError>
                  break;
 800f4b8:	e054      	b.n	800f564 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f4ba:	7bbb      	ldrb	r3, [r7, #14]
 800f4bc:	f003 020f 	and.w	r2, r3, #15
 800f4c0:	6879      	ldr	r1, [r7, #4]
 800f4c2:	4613      	mov	r3, r2
 800f4c4:	009b      	lsls	r3, r3, #2
 800f4c6:	4413      	add	r3, r2
 800f4c8:	009b      	lsls	r3, r3, #2
 800f4ca:	440b      	add	r3, r1
 800f4cc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f4d0:	881b      	ldrh	r3, [r3, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d104      	bne.n	800f4e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f4d6:	6839      	ldr	r1, [r7, #0]
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f000 fbad 	bl	800fc38 <USBD_CtlError>
                  break;
 800f4de:	e041      	b.n	800f564 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f4e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	da0b      	bge.n	800f500 <USBD_StdEPReq+0x23e>
 800f4e8:	7bbb      	ldrb	r3, [r7, #14]
 800f4ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f4ee:	4613      	mov	r3, r2
 800f4f0:	009b      	lsls	r3, r3, #2
 800f4f2:	4413      	add	r3, r2
 800f4f4:	009b      	lsls	r3, r3, #2
 800f4f6:	3310      	adds	r3, #16
 800f4f8:	687a      	ldr	r2, [r7, #4]
 800f4fa:	4413      	add	r3, r2
 800f4fc:	3304      	adds	r3, #4
 800f4fe:	e00b      	b.n	800f518 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f500:	7bbb      	ldrb	r3, [r7, #14]
 800f502:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f506:	4613      	mov	r3, r2
 800f508:	009b      	lsls	r3, r3, #2
 800f50a:	4413      	add	r3, r2
 800f50c:	009b      	lsls	r3, r3, #2
 800f50e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	4413      	add	r3, r2
 800f516:	3304      	adds	r3, #4
 800f518:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f51a:	7bbb      	ldrb	r3, [r7, #14]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d002      	beq.n	800f526 <USBD_StdEPReq+0x264>
 800f520:	7bbb      	ldrb	r3, [r7, #14]
 800f522:	2b80      	cmp	r3, #128	@ 0x80
 800f524:	d103      	bne.n	800f52e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	2200      	movs	r2, #0
 800f52a:	601a      	str	r2, [r3, #0]
 800f52c:	e00e      	b.n	800f54c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f52e:	7bbb      	ldrb	r3, [r7, #14]
 800f530:	4619      	mov	r1, r3
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f001 f872 	bl	801061c <USBD_LL_IsStallEP>
 800f538:	4603      	mov	r3, r0
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d003      	beq.n	800f546 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	2201      	movs	r2, #1
 800f542:	601a      	str	r2, [r3, #0]
 800f544:	e002      	b.n	800f54c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	2200      	movs	r2, #0
 800f54a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	2202      	movs	r2, #2
 800f550:	4619      	mov	r1, r3
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f000 fbe1 	bl	800fd1a <USBD_CtlSendData>
              break;
 800f558:	e004      	b.n	800f564 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f55a:	6839      	ldr	r1, [r7, #0]
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f000 fb6b 	bl	800fc38 <USBD_CtlError>
              break;
 800f562:	bf00      	nop
          }
          break;
 800f564:	e004      	b.n	800f570 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f566:	6839      	ldr	r1, [r7, #0]
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f000 fb65 	bl	800fc38 <USBD_CtlError>
          break;
 800f56e:	bf00      	nop
      }
      break;
 800f570:	e004      	b.n	800f57c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f572:	6839      	ldr	r1, [r7, #0]
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f000 fb5f 	bl	800fc38 <USBD_CtlError>
      break;
 800f57a:	bf00      	nop
  }

  return ret;
 800f57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3710      	adds	r7, #16
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
	...

0800f588 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b084      	sub	sp, #16
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f592:	2300      	movs	r3, #0
 800f594:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f596:	2300      	movs	r3, #0
 800f598:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f59a:	2300      	movs	r3, #0
 800f59c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	885b      	ldrh	r3, [r3, #2]
 800f5a2:	0a1b      	lsrs	r3, r3, #8
 800f5a4:	b29b      	uxth	r3, r3
 800f5a6:	3b01      	subs	r3, #1
 800f5a8:	2b0e      	cmp	r3, #14
 800f5aa:	f200 8152 	bhi.w	800f852 <USBD_GetDescriptor+0x2ca>
 800f5ae:	a201      	add	r2, pc, #4	@ (adr r2, 800f5b4 <USBD_GetDescriptor+0x2c>)
 800f5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5b4:	0800f625 	.word	0x0800f625
 800f5b8:	0800f63d 	.word	0x0800f63d
 800f5bc:	0800f67d 	.word	0x0800f67d
 800f5c0:	0800f853 	.word	0x0800f853
 800f5c4:	0800f853 	.word	0x0800f853
 800f5c8:	0800f7f3 	.word	0x0800f7f3
 800f5cc:	0800f81f 	.word	0x0800f81f
 800f5d0:	0800f853 	.word	0x0800f853
 800f5d4:	0800f853 	.word	0x0800f853
 800f5d8:	0800f853 	.word	0x0800f853
 800f5dc:	0800f853 	.word	0x0800f853
 800f5e0:	0800f853 	.word	0x0800f853
 800f5e4:	0800f853 	.word	0x0800f853
 800f5e8:	0800f853 	.word	0x0800f853
 800f5ec:	0800f5f1 	.word	0x0800f5f1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5f6:	69db      	ldr	r3, [r3, #28]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d00b      	beq.n	800f614 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f602:	69db      	ldr	r3, [r3, #28]
 800f604:	687a      	ldr	r2, [r7, #4]
 800f606:	7c12      	ldrb	r2, [r2, #16]
 800f608:	f107 0108 	add.w	r1, r7, #8
 800f60c:	4610      	mov	r0, r2
 800f60e:	4798      	blx	r3
 800f610:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f612:	e126      	b.n	800f862 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f614:	6839      	ldr	r1, [r7, #0]
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f000 fb0e 	bl	800fc38 <USBD_CtlError>
        err++;
 800f61c:	7afb      	ldrb	r3, [r7, #11]
 800f61e:	3301      	adds	r3, #1
 800f620:	72fb      	strb	r3, [r7, #11]
      break;
 800f622:	e11e      	b.n	800f862 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	687a      	ldr	r2, [r7, #4]
 800f62e:	7c12      	ldrb	r2, [r2, #16]
 800f630:	f107 0108 	add.w	r1, r7, #8
 800f634:	4610      	mov	r0, r2
 800f636:	4798      	blx	r3
 800f638:	60f8      	str	r0, [r7, #12]
      break;
 800f63a:	e112      	b.n	800f862 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	7c1b      	ldrb	r3, [r3, #16]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d10d      	bne.n	800f660 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f64a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f64c:	f107 0208 	add.w	r2, r7, #8
 800f650:	4610      	mov	r0, r2
 800f652:	4798      	blx	r3
 800f654:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	3301      	adds	r3, #1
 800f65a:	2202      	movs	r2, #2
 800f65c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f65e:	e100      	b.n	800f862 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f668:	f107 0208 	add.w	r2, r7, #8
 800f66c:	4610      	mov	r0, r2
 800f66e:	4798      	blx	r3
 800f670:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	3301      	adds	r3, #1
 800f676:	2202      	movs	r2, #2
 800f678:	701a      	strb	r2, [r3, #0]
      break;
 800f67a:	e0f2      	b.n	800f862 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	885b      	ldrh	r3, [r3, #2]
 800f680:	b2db      	uxtb	r3, r3
 800f682:	2b05      	cmp	r3, #5
 800f684:	f200 80ac 	bhi.w	800f7e0 <USBD_GetDescriptor+0x258>
 800f688:	a201      	add	r2, pc, #4	@ (adr r2, 800f690 <USBD_GetDescriptor+0x108>)
 800f68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f68e:	bf00      	nop
 800f690:	0800f6a9 	.word	0x0800f6a9
 800f694:	0800f6dd 	.word	0x0800f6dd
 800f698:	0800f711 	.word	0x0800f711
 800f69c:	0800f745 	.word	0x0800f745
 800f6a0:	0800f779 	.word	0x0800f779
 800f6a4:	0800f7ad 	.word	0x0800f7ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6ae:	685b      	ldr	r3, [r3, #4]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d00b      	beq.n	800f6cc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6ba:	685b      	ldr	r3, [r3, #4]
 800f6bc:	687a      	ldr	r2, [r7, #4]
 800f6be:	7c12      	ldrb	r2, [r2, #16]
 800f6c0:	f107 0108 	add.w	r1, r7, #8
 800f6c4:	4610      	mov	r0, r2
 800f6c6:	4798      	blx	r3
 800f6c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6ca:	e091      	b.n	800f7f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f6cc:	6839      	ldr	r1, [r7, #0]
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f000 fab2 	bl	800fc38 <USBD_CtlError>
            err++;
 800f6d4:	7afb      	ldrb	r3, [r7, #11]
 800f6d6:	3301      	adds	r3, #1
 800f6d8:	72fb      	strb	r3, [r7, #11]
          break;
 800f6da:	e089      	b.n	800f7f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6e2:	689b      	ldr	r3, [r3, #8]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d00b      	beq.n	800f700 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6ee:	689b      	ldr	r3, [r3, #8]
 800f6f0:	687a      	ldr	r2, [r7, #4]
 800f6f2:	7c12      	ldrb	r2, [r2, #16]
 800f6f4:	f107 0108 	add.w	r1, r7, #8
 800f6f8:	4610      	mov	r0, r2
 800f6fa:	4798      	blx	r3
 800f6fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6fe:	e077      	b.n	800f7f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f700:	6839      	ldr	r1, [r7, #0]
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f000 fa98 	bl	800fc38 <USBD_CtlError>
            err++;
 800f708:	7afb      	ldrb	r3, [r7, #11]
 800f70a:	3301      	adds	r3, #1
 800f70c:	72fb      	strb	r3, [r7, #11]
          break;
 800f70e:	e06f      	b.n	800f7f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f716:	68db      	ldr	r3, [r3, #12]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d00b      	beq.n	800f734 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f722:	68db      	ldr	r3, [r3, #12]
 800f724:	687a      	ldr	r2, [r7, #4]
 800f726:	7c12      	ldrb	r2, [r2, #16]
 800f728:	f107 0108 	add.w	r1, r7, #8
 800f72c:	4610      	mov	r0, r2
 800f72e:	4798      	blx	r3
 800f730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f732:	e05d      	b.n	800f7f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f734:	6839      	ldr	r1, [r7, #0]
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	f000 fa7e 	bl	800fc38 <USBD_CtlError>
            err++;
 800f73c:	7afb      	ldrb	r3, [r7, #11]
 800f73e:	3301      	adds	r3, #1
 800f740:	72fb      	strb	r3, [r7, #11]
          break;
 800f742:	e055      	b.n	800f7f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f74a:	691b      	ldr	r3, [r3, #16]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d00b      	beq.n	800f768 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f756:	691b      	ldr	r3, [r3, #16]
 800f758:	687a      	ldr	r2, [r7, #4]
 800f75a:	7c12      	ldrb	r2, [r2, #16]
 800f75c:	f107 0108 	add.w	r1, r7, #8
 800f760:	4610      	mov	r0, r2
 800f762:	4798      	blx	r3
 800f764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f766:	e043      	b.n	800f7f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f768:	6839      	ldr	r1, [r7, #0]
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f000 fa64 	bl	800fc38 <USBD_CtlError>
            err++;
 800f770:	7afb      	ldrb	r3, [r7, #11]
 800f772:	3301      	adds	r3, #1
 800f774:	72fb      	strb	r3, [r7, #11]
          break;
 800f776:	e03b      	b.n	800f7f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f77e:	695b      	ldr	r3, [r3, #20]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d00b      	beq.n	800f79c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f78a:	695b      	ldr	r3, [r3, #20]
 800f78c:	687a      	ldr	r2, [r7, #4]
 800f78e:	7c12      	ldrb	r2, [r2, #16]
 800f790:	f107 0108 	add.w	r1, r7, #8
 800f794:	4610      	mov	r0, r2
 800f796:	4798      	blx	r3
 800f798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f79a:	e029      	b.n	800f7f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f79c:	6839      	ldr	r1, [r7, #0]
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f000 fa4a 	bl	800fc38 <USBD_CtlError>
            err++;
 800f7a4:	7afb      	ldrb	r3, [r7, #11]
 800f7a6:	3301      	adds	r3, #1
 800f7a8:	72fb      	strb	r3, [r7, #11]
          break;
 800f7aa:	e021      	b.n	800f7f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f7b2:	699b      	ldr	r3, [r3, #24]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d00b      	beq.n	800f7d0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f7be:	699b      	ldr	r3, [r3, #24]
 800f7c0:	687a      	ldr	r2, [r7, #4]
 800f7c2:	7c12      	ldrb	r2, [r2, #16]
 800f7c4:	f107 0108 	add.w	r1, r7, #8
 800f7c8:	4610      	mov	r0, r2
 800f7ca:	4798      	blx	r3
 800f7cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7ce:	e00f      	b.n	800f7f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f7d0:	6839      	ldr	r1, [r7, #0]
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f000 fa30 	bl	800fc38 <USBD_CtlError>
            err++;
 800f7d8:	7afb      	ldrb	r3, [r7, #11]
 800f7da:	3301      	adds	r3, #1
 800f7dc:	72fb      	strb	r3, [r7, #11]
          break;
 800f7de:	e007      	b.n	800f7f0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f7e0:	6839      	ldr	r1, [r7, #0]
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f000 fa28 	bl	800fc38 <USBD_CtlError>
          err++;
 800f7e8:	7afb      	ldrb	r3, [r7, #11]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f7ee:	bf00      	nop
      }
      break;
 800f7f0:	e037      	b.n	800f862 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	7c1b      	ldrb	r3, [r3, #16]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d109      	bne.n	800f80e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f802:	f107 0208 	add.w	r2, r7, #8
 800f806:	4610      	mov	r0, r2
 800f808:	4798      	blx	r3
 800f80a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f80c:	e029      	b.n	800f862 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f80e:	6839      	ldr	r1, [r7, #0]
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f000 fa11 	bl	800fc38 <USBD_CtlError>
        err++;
 800f816:	7afb      	ldrb	r3, [r7, #11]
 800f818:	3301      	adds	r3, #1
 800f81a:	72fb      	strb	r3, [r7, #11]
      break;
 800f81c:	e021      	b.n	800f862 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	7c1b      	ldrb	r3, [r3, #16]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d10d      	bne.n	800f842 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f82c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f82e:	f107 0208 	add.w	r2, r7, #8
 800f832:	4610      	mov	r0, r2
 800f834:	4798      	blx	r3
 800f836:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	3301      	adds	r3, #1
 800f83c:	2207      	movs	r2, #7
 800f83e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f840:	e00f      	b.n	800f862 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f842:	6839      	ldr	r1, [r7, #0]
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f000 f9f7 	bl	800fc38 <USBD_CtlError>
        err++;
 800f84a:	7afb      	ldrb	r3, [r7, #11]
 800f84c:	3301      	adds	r3, #1
 800f84e:	72fb      	strb	r3, [r7, #11]
      break;
 800f850:	e007      	b.n	800f862 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f852:	6839      	ldr	r1, [r7, #0]
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 f9ef 	bl	800fc38 <USBD_CtlError>
      err++;
 800f85a:	7afb      	ldrb	r3, [r7, #11]
 800f85c:	3301      	adds	r3, #1
 800f85e:	72fb      	strb	r3, [r7, #11]
      break;
 800f860:	bf00      	nop
  }

  if (err != 0U)
 800f862:	7afb      	ldrb	r3, [r7, #11]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d11e      	bne.n	800f8a6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	88db      	ldrh	r3, [r3, #6]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d016      	beq.n	800f89e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f870:	893b      	ldrh	r3, [r7, #8]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d00e      	beq.n	800f894 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	88da      	ldrh	r2, [r3, #6]
 800f87a:	893b      	ldrh	r3, [r7, #8]
 800f87c:	4293      	cmp	r3, r2
 800f87e:	bf28      	it	cs
 800f880:	4613      	movcs	r3, r2
 800f882:	b29b      	uxth	r3, r3
 800f884:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f886:	893b      	ldrh	r3, [r7, #8]
 800f888:	461a      	mov	r2, r3
 800f88a:	68f9      	ldr	r1, [r7, #12]
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f000 fa44 	bl	800fd1a <USBD_CtlSendData>
 800f892:	e009      	b.n	800f8a8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f894:	6839      	ldr	r1, [r7, #0]
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f000 f9ce 	bl	800fc38 <USBD_CtlError>
 800f89c:	e004      	b.n	800f8a8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f000 fa95 	bl	800fdce <USBD_CtlSendStatus>
 800f8a4:	e000      	b.n	800f8a8 <USBD_GetDescriptor+0x320>
    return;
 800f8a6:	bf00      	nop
  }
}
 800f8a8:	3710      	adds	r7, #16
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}
 800f8ae:	bf00      	nop

0800f8b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b084      	sub	sp, #16
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	889b      	ldrh	r3, [r3, #4]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d131      	bne.n	800f926 <USBD_SetAddress+0x76>
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	88db      	ldrh	r3, [r3, #6]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d12d      	bne.n	800f926 <USBD_SetAddress+0x76>
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	885b      	ldrh	r3, [r3, #2]
 800f8ce:	2b7f      	cmp	r3, #127	@ 0x7f
 800f8d0:	d829      	bhi.n	800f926 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	885b      	ldrh	r3, [r3, #2]
 800f8d6:	b2db      	uxtb	r3, r3
 800f8d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f8dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8e4:	b2db      	uxtb	r3, r3
 800f8e6:	2b03      	cmp	r3, #3
 800f8e8:	d104      	bne.n	800f8f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f8ea:	6839      	ldr	r1, [r7, #0]
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f000 f9a3 	bl	800fc38 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8f2:	e01d      	b.n	800f930 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	7bfa      	ldrb	r2, [r7, #15]
 800f8f8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f8fc:	7bfb      	ldrb	r3, [r7, #15]
 800f8fe:	4619      	mov	r1, r3
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f000 feb7 	bl	8010674 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f000 fa61 	bl	800fdce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f90c:	7bfb      	ldrb	r3, [r7, #15]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d004      	beq.n	800f91c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2202      	movs	r2, #2
 800f916:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f91a:	e009      	b.n	800f930 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2201      	movs	r2, #1
 800f920:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f924:	e004      	b.n	800f930 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f926:	6839      	ldr	r1, [r7, #0]
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f000 f985 	bl	800fc38 <USBD_CtlError>
  }
}
 800f92e:	bf00      	nop
 800f930:	bf00      	nop
 800f932:	3710      	adds	r7, #16
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b084      	sub	sp, #16
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f942:	2300      	movs	r3, #0
 800f944:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	885b      	ldrh	r3, [r3, #2]
 800f94a:	b2da      	uxtb	r2, r3
 800f94c:	4b4c      	ldr	r3, [pc, #304]	@ (800fa80 <USBD_SetConfig+0x148>)
 800f94e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f950:	4b4b      	ldr	r3, [pc, #300]	@ (800fa80 <USBD_SetConfig+0x148>)
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	2b01      	cmp	r3, #1
 800f956:	d905      	bls.n	800f964 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f958:	6839      	ldr	r1, [r7, #0]
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f000 f96c 	bl	800fc38 <USBD_CtlError>
    return USBD_FAIL;
 800f960:	2303      	movs	r3, #3
 800f962:	e088      	b.n	800fa76 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f96a:	b2db      	uxtb	r3, r3
 800f96c:	2b02      	cmp	r3, #2
 800f96e:	d002      	beq.n	800f976 <USBD_SetConfig+0x3e>
 800f970:	2b03      	cmp	r3, #3
 800f972:	d025      	beq.n	800f9c0 <USBD_SetConfig+0x88>
 800f974:	e071      	b.n	800fa5a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f976:	4b42      	ldr	r3, [pc, #264]	@ (800fa80 <USBD_SetConfig+0x148>)
 800f978:	781b      	ldrb	r3, [r3, #0]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d01c      	beq.n	800f9b8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f97e:	4b40      	ldr	r3, [pc, #256]	@ (800fa80 <USBD_SetConfig+0x148>)
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	461a      	mov	r2, r3
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f988:	4b3d      	ldr	r3, [pc, #244]	@ (800fa80 <USBD_SetConfig+0x148>)
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	4619      	mov	r1, r3
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	f7ff f992 	bl	800ecb8 <USBD_SetClassConfig>
 800f994:	4603      	mov	r3, r0
 800f996:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f998:	7bfb      	ldrb	r3, [r7, #15]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d004      	beq.n	800f9a8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f99e:	6839      	ldr	r1, [r7, #0]
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f000 f949 	bl	800fc38 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f9a6:	e065      	b.n	800fa74 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 fa10 	bl	800fdce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2203      	movs	r2, #3
 800f9b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f9b6:	e05d      	b.n	800fa74 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f000 fa08 	bl	800fdce <USBD_CtlSendStatus>
      break;
 800f9be:	e059      	b.n	800fa74 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f9c0:	4b2f      	ldr	r3, [pc, #188]	@ (800fa80 <USBD_SetConfig+0x148>)
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d112      	bne.n	800f9ee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2202      	movs	r2, #2
 800f9cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f9d0:	4b2b      	ldr	r3, [pc, #172]	@ (800fa80 <USBD_SetConfig+0x148>)
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	461a      	mov	r2, r3
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f9da:	4b29      	ldr	r3, [pc, #164]	@ (800fa80 <USBD_SetConfig+0x148>)
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	4619      	mov	r1, r3
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f7ff f985 	bl	800ecf0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f000 f9f1 	bl	800fdce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f9ec:	e042      	b.n	800fa74 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f9ee:	4b24      	ldr	r3, [pc, #144]	@ (800fa80 <USBD_SetConfig+0x148>)
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	d02a      	beq.n	800fa52 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	685b      	ldr	r3, [r3, #4]
 800fa00:	b2db      	uxtb	r3, r3
 800fa02:	4619      	mov	r1, r3
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f7ff f973 	bl	800ecf0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fa0a:	4b1d      	ldr	r3, [pc, #116]	@ (800fa80 <USBD_SetConfig+0x148>)
 800fa0c:	781b      	ldrb	r3, [r3, #0]
 800fa0e:	461a      	mov	r2, r3
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fa14:	4b1a      	ldr	r3, [pc, #104]	@ (800fa80 <USBD_SetConfig+0x148>)
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	4619      	mov	r1, r3
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f7ff f94c 	bl	800ecb8 <USBD_SetClassConfig>
 800fa20:	4603      	mov	r3, r0
 800fa22:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fa24:	7bfb      	ldrb	r3, [r7, #15]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d00f      	beq.n	800fa4a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800fa2a:	6839      	ldr	r1, [r7, #0]
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f000 f903 	bl	800fc38 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	685b      	ldr	r3, [r3, #4]
 800fa36:	b2db      	uxtb	r3, r3
 800fa38:	4619      	mov	r1, r3
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f7ff f958 	bl	800ecf0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2202      	movs	r2, #2
 800fa44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fa48:	e014      	b.n	800fa74 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f000 f9bf 	bl	800fdce <USBD_CtlSendStatus>
      break;
 800fa50:	e010      	b.n	800fa74 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f000 f9bb 	bl	800fdce <USBD_CtlSendStatus>
      break;
 800fa58:	e00c      	b.n	800fa74 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800fa5a:	6839      	ldr	r1, [r7, #0]
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f000 f8eb 	bl	800fc38 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fa62:	4b07      	ldr	r3, [pc, #28]	@ (800fa80 <USBD_SetConfig+0x148>)
 800fa64:	781b      	ldrb	r3, [r3, #0]
 800fa66:	4619      	mov	r1, r3
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f7ff f941 	bl	800ecf0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fa6e:	2303      	movs	r3, #3
 800fa70:	73fb      	strb	r3, [r7, #15]
      break;
 800fa72:	bf00      	nop
  }

  return ret;
 800fa74:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3710      	adds	r7, #16
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}
 800fa7e:	bf00      	nop
 800fa80:	20000b80 	.word	0x20000b80

0800fa84 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	88db      	ldrh	r3, [r3, #6]
 800fa92:	2b01      	cmp	r3, #1
 800fa94:	d004      	beq.n	800faa0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fa96:	6839      	ldr	r1, [r7, #0]
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f000 f8cd 	bl	800fc38 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fa9e:	e023      	b.n	800fae8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800faa6:	b2db      	uxtb	r3, r3
 800faa8:	2b02      	cmp	r3, #2
 800faaa:	dc02      	bgt.n	800fab2 <USBD_GetConfig+0x2e>
 800faac:	2b00      	cmp	r3, #0
 800faae:	dc03      	bgt.n	800fab8 <USBD_GetConfig+0x34>
 800fab0:	e015      	b.n	800fade <USBD_GetConfig+0x5a>
 800fab2:	2b03      	cmp	r3, #3
 800fab4:	d00b      	beq.n	800face <USBD_GetConfig+0x4a>
 800fab6:	e012      	b.n	800fade <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	2200      	movs	r2, #0
 800fabc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	3308      	adds	r3, #8
 800fac2:	2201      	movs	r2, #1
 800fac4:	4619      	mov	r1, r3
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f000 f927 	bl	800fd1a <USBD_CtlSendData>
        break;
 800facc:	e00c      	b.n	800fae8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	3304      	adds	r3, #4
 800fad2:	2201      	movs	r2, #1
 800fad4:	4619      	mov	r1, r3
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f000 f91f 	bl	800fd1a <USBD_CtlSendData>
        break;
 800fadc:	e004      	b.n	800fae8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fade:	6839      	ldr	r1, [r7, #0]
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f000 f8a9 	bl	800fc38 <USBD_CtlError>
        break;
 800fae6:	bf00      	nop
}
 800fae8:	bf00      	nop
 800faea:	3708      	adds	r7, #8
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b082      	sub	sp, #8
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb00:	b2db      	uxtb	r3, r3
 800fb02:	3b01      	subs	r3, #1
 800fb04:	2b02      	cmp	r3, #2
 800fb06:	d81e      	bhi.n	800fb46 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	88db      	ldrh	r3, [r3, #6]
 800fb0c:	2b02      	cmp	r3, #2
 800fb0e:	d004      	beq.n	800fb1a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fb10:	6839      	ldr	r1, [r7, #0]
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f000 f890 	bl	800fc38 <USBD_CtlError>
        break;
 800fb18:	e01a      	b.n	800fb50 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2201      	movs	r2, #1
 800fb1e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d005      	beq.n	800fb36 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	68db      	ldr	r3, [r3, #12]
 800fb2e:	f043 0202 	orr.w	r2, r3, #2
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	330c      	adds	r3, #12
 800fb3a:	2202      	movs	r2, #2
 800fb3c:	4619      	mov	r1, r3
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f000 f8eb 	bl	800fd1a <USBD_CtlSendData>
      break;
 800fb44:	e004      	b.n	800fb50 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fb46:	6839      	ldr	r1, [r7, #0]
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f000 f875 	bl	800fc38 <USBD_CtlError>
      break;
 800fb4e:	bf00      	nop
  }
}
 800fb50:	bf00      	nop
 800fb52:	3708      	adds	r7, #8
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}

0800fb58 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	885b      	ldrh	r3, [r3, #2]
 800fb66:	2b01      	cmp	r3, #1
 800fb68:	d106      	bne.n	800fb78 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f000 f92b 	bl	800fdce <USBD_CtlSendStatus>
  }
}
 800fb78:	bf00      	nop
 800fb7a:	3708      	adds	r7, #8
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}

0800fb80 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b082      	sub	sp, #8
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb90:	b2db      	uxtb	r3, r3
 800fb92:	3b01      	subs	r3, #1
 800fb94:	2b02      	cmp	r3, #2
 800fb96:	d80b      	bhi.n	800fbb0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	885b      	ldrh	r3, [r3, #2]
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	d10c      	bne.n	800fbba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2200      	movs	r2, #0
 800fba4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f000 f910 	bl	800fdce <USBD_CtlSendStatus>
      }
      break;
 800fbae:	e004      	b.n	800fbba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fbb0:	6839      	ldr	r1, [r7, #0]
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f000 f840 	bl	800fc38 <USBD_CtlError>
      break;
 800fbb8:	e000      	b.n	800fbbc <USBD_ClrFeature+0x3c>
      break;
 800fbba:	bf00      	nop
  }
}
 800fbbc:	bf00      	nop
 800fbbe:	3708      	adds	r7, #8
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}

0800fbc4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b084      	sub	sp, #16
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	781a      	ldrb	r2, [r3, #0]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	3301      	adds	r3, #1
 800fbde:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	781a      	ldrb	r2, [r3, #0]
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	3301      	adds	r3, #1
 800fbec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fbee:	68f8      	ldr	r0, [r7, #12]
 800fbf0:	f7ff fa92 	bl	800f118 <SWAPBYTE>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	3301      	adds	r3, #1
 800fc00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	3301      	adds	r3, #1
 800fc06:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fc08:	68f8      	ldr	r0, [r7, #12]
 800fc0a:	f7ff fa85 	bl	800f118 <SWAPBYTE>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	461a      	mov	r2, r3
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	3301      	adds	r3, #1
 800fc1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	3301      	adds	r3, #1
 800fc20:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fc22:	68f8      	ldr	r0, [r7, #12]
 800fc24:	f7ff fa78 	bl	800f118 <SWAPBYTE>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	80da      	strh	r2, [r3, #6]
}
 800fc30:	bf00      	nop
 800fc32:	3710      	adds	r7, #16
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}

0800fc38 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b082      	sub	sp, #8
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc42:	2180      	movs	r1, #128	@ 0x80
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f000 fcab 	bl	80105a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f000 fca7 	bl	80105a0 <USBD_LL_StallEP>
}
 800fc52:	bf00      	nop
 800fc54:	3708      	adds	r7, #8
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}

0800fc5a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fc5a:	b580      	push	{r7, lr}
 800fc5c:	b086      	sub	sp, #24
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	60f8      	str	r0, [r7, #12]
 800fc62:	60b9      	str	r1, [r7, #8]
 800fc64:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fc66:	2300      	movs	r3, #0
 800fc68:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d036      	beq.n	800fcde <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fc74:	6938      	ldr	r0, [r7, #16]
 800fc76:	f000 f836 	bl	800fce6 <USBD_GetLen>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	3301      	adds	r3, #1
 800fc7e:	b29b      	uxth	r3, r3
 800fc80:	005b      	lsls	r3, r3, #1
 800fc82:	b29a      	uxth	r2, r3
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fc88:	7dfb      	ldrb	r3, [r7, #23]
 800fc8a:	68ba      	ldr	r2, [r7, #8]
 800fc8c:	4413      	add	r3, r2
 800fc8e:	687a      	ldr	r2, [r7, #4]
 800fc90:	7812      	ldrb	r2, [r2, #0]
 800fc92:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc94:	7dfb      	ldrb	r3, [r7, #23]
 800fc96:	3301      	adds	r3, #1
 800fc98:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fc9a:	7dfb      	ldrb	r3, [r7, #23]
 800fc9c:	68ba      	ldr	r2, [r7, #8]
 800fc9e:	4413      	add	r3, r2
 800fca0:	2203      	movs	r2, #3
 800fca2:	701a      	strb	r2, [r3, #0]
  idx++;
 800fca4:	7dfb      	ldrb	r3, [r7, #23]
 800fca6:	3301      	adds	r3, #1
 800fca8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fcaa:	e013      	b.n	800fcd4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fcac:	7dfb      	ldrb	r3, [r7, #23]
 800fcae:	68ba      	ldr	r2, [r7, #8]
 800fcb0:	4413      	add	r3, r2
 800fcb2:	693a      	ldr	r2, [r7, #16]
 800fcb4:	7812      	ldrb	r2, [r2, #0]
 800fcb6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fcb8:	693b      	ldr	r3, [r7, #16]
 800fcba:	3301      	adds	r3, #1
 800fcbc:	613b      	str	r3, [r7, #16]
    idx++;
 800fcbe:	7dfb      	ldrb	r3, [r7, #23]
 800fcc0:	3301      	adds	r3, #1
 800fcc2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fcc4:	7dfb      	ldrb	r3, [r7, #23]
 800fcc6:	68ba      	ldr	r2, [r7, #8]
 800fcc8:	4413      	add	r3, r2
 800fcca:	2200      	movs	r2, #0
 800fccc:	701a      	strb	r2, [r3, #0]
    idx++;
 800fcce:	7dfb      	ldrb	r3, [r7, #23]
 800fcd0:	3301      	adds	r3, #1
 800fcd2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d1e7      	bne.n	800fcac <USBD_GetString+0x52>
 800fcdc:	e000      	b.n	800fce0 <USBD_GetString+0x86>
    return;
 800fcde:	bf00      	nop
  }
}
 800fce0:	3718      	adds	r7, #24
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}

0800fce6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fce6:	b480      	push	{r7}
 800fce8:	b085      	sub	sp, #20
 800fcea:	af00      	add	r7, sp, #0
 800fcec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fcf6:	e005      	b.n	800fd04 <USBD_GetLen+0x1e>
  {
    len++;
 800fcf8:	7bfb      	ldrb	r3, [r7, #15]
 800fcfa:	3301      	adds	r3, #1
 800fcfc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	3301      	adds	r3, #1
 800fd02:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	781b      	ldrb	r3, [r3, #0]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d1f5      	bne.n	800fcf8 <USBD_GetLen+0x12>
  }

  return len;
 800fd0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	3714      	adds	r7, #20
 800fd12:	46bd      	mov	sp, r7
 800fd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd18:	4770      	bx	lr

0800fd1a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fd1a:	b580      	push	{r7, lr}
 800fd1c:	b084      	sub	sp, #16
 800fd1e:	af00      	add	r7, sp, #0
 800fd20:	60f8      	str	r0, [r7, #12]
 800fd22:	60b9      	str	r1, [r7, #8]
 800fd24:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	2202      	movs	r2, #2
 800fd2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	687a      	ldr	r2, [r7, #4]
 800fd32:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	687a      	ldr	r2, [r7, #4]
 800fd38:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	68ba      	ldr	r2, [r7, #8]
 800fd3e:	2100      	movs	r1, #0
 800fd40:	68f8      	ldr	r0, [r7, #12]
 800fd42:	f000 fcb6 	bl	80106b2 <USBD_LL_Transmit>

  return USBD_OK;
 800fd46:	2300      	movs	r3, #0
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3710      	adds	r7, #16
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b084      	sub	sp, #16
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	60f8      	str	r0, [r7, #12]
 800fd58:	60b9      	str	r1, [r7, #8]
 800fd5a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	68ba      	ldr	r2, [r7, #8]
 800fd60:	2100      	movs	r1, #0
 800fd62:	68f8      	ldr	r0, [r7, #12]
 800fd64:	f000 fca5 	bl	80106b2 <USBD_LL_Transmit>

  return USBD_OK;
 800fd68:	2300      	movs	r3, #0
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3710      	adds	r7, #16
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}

0800fd72 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fd72:	b580      	push	{r7, lr}
 800fd74:	b084      	sub	sp, #16
 800fd76:	af00      	add	r7, sp, #0
 800fd78:	60f8      	str	r0, [r7, #12]
 800fd7a:	60b9      	str	r1, [r7, #8]
 800fd7c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	2203      	movs	r2, #3
 800fd82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	687a      	ldr	r2, [r7, #4]
 800fd8a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	687a      	ldr	r2, [r7, #4]
 800fd92:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	68ba      	ldr	r2, [r7, #8]
 800fd9a:	2100      	movs	r1, #0
 800fd9c:	68f8      	ldr	r0, [r7, #12]
 800fd9e:	f000 fca9 	bl	80106f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fda2:	2300      	movs	r3, #0
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	3710      	adds	r7, #16
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b084      	sub	sp, #16
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	60b9      	str	r1, [r7, #8]
 800fdb6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	68ba      	ldr	r2, [r7, #8]
 800fdbc:	2100      	movs	r1, #0
 800fdbe:	68f8      	ldr	r0, [r7, #12]
 800fdc0:	f000 fc98 	bl	80106f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fdc4:	2300      	movs	r3, #0
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3710      	adds	r7, #16
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}

0800fdce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fdce:	b580      	push	{r7, lr}
 800fdd0:	b082      	sub	sp, #8
 800fdd2:	af00      	add	r7, sp, #0
 800fdd4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2204      	movs	r2, #4
 800fdda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fdde:	2300      	movs	r3, #0
 800fde0:	2200      	movs	r2, #0
 800fde2:	2100      	movs	r1, #0
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f000 fc64 	bl	80106b2 <USBD_LL_Transmit>

  return USBD_OK;
 800fdea:	2300      	movs	r3, #0
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3708      	adds	r7, #8
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}

0800fdf4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b082      	sub	sp, #8
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2205      	movs	r2, #5
 800fe00:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fe04:	2300      	movs	r3, #0
 800fe06:	2200      	movs	r2, #0
 800fe08:	2100      	movs	r1, #0
 800fe0a:	6878      	ldr	r0, [r7, #4]
 800fe0c:	f000 fc72 	bl	80106f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe10:	2300      	movs	r3, #0
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	3708      	adds	r7, #8
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}
	...

0800fe1c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800fe20:	2200      	movs	r2, #0
 800fe22:	4912      	ldr	r1, [pc, #72]	@ (800fe6c <MX_USB_Device_Init+0x50>)
 800fe24:	4812      	ldr	r0, [pc, #72]	@ (800fe70 <MX_USB_Device_Init+0x54>)
 800fe26:	f7fe fed9 	bl	800ebdc <USBD_Init>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d001      	beq.n	800fe34 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800fe30:	f7f3 fc76 	bl	8003720 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800fe34:	490f      	ldr	r1, [pc, #60]	@ (800fe74 <MX_USB_Device_Init+0x58>)
 800fe36:	480e      	ldr	r0, [pc, #56]	@ (800fe70 <MX_USB_Device_Init+0x54>)
 800fe38:	f7fe ff00 	bl	800ec3c <USBD_RegisterClass>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d001      	beq.n	800fe46 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800fe42:	f7f3 fc6d 	bl	8003720 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800fe46:	490c      	ldr	r1, [pc, #48]	@ (800fe78 <MX_USB_Device_Init+0x5c>)
 800fe48:	4809      	ldr	r0, [pc, #36]	@ (800fe70 <MX_USB_Device_Init+0x54>)
 800fe4a:	f7fe fe21 	bl	800ea90 <USBD_CDC_RegisterInterface>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d001      	beq.n	800fe58 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800fe54:	f7f3 fc64 	bl	8003720 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800fe58:	4805      	ldr	r0, [pc, #20]	@ (800fe70 <MX_USB_Device_Init+0x54>)
 800fe5a:	f7fe ff16 	bl	800ec8a <USBD_Start>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d001      	beq.n	800fe68 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800fe64:	f7f3 fc5c 	bl	8003720 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800fe68:	bf00      	nop
 800fe6a:	bd80      	pop	{r7, pc}
 800fe6c:	2000016c 	.word	0x2000016c
 800fe70:	20000b84 	.word	0x20000b84
 800fe74:	20000054 	.word	0x20000054
 800fe78:	20000158 	.word	0x20000158

0800fe7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fe80:	2200      	movs	r2, #0
 800fe82:	4905      	ldr	r1, [pc, #20]	@ (800fe98 <CDC_Init_FS+0x1c>)
 800fe84:	4805      	ldr	r0, [pc, #20]	@ (800fe9c <CDC_Init_FS+0x20>)
 800fe86:	f7fe fe18 	bl	800eaba <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fe8a:	4905      	ldr	r1, [pc, #20]	@ (800fea0 <CDC_Init_FS+0x24>)
 800fe8c:	4803      	ldr	r0, [pc, #12]	@ (800fe9c <CDC_Init_FS+0x20>)
 800fe8e:	f7fe fe32 	bl	800eaf6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fe92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	bd80      	pop	{r7, pc}
 800fe98:	20001654 	.word	0x20001654
 800fe9c:	20000b84 	.word	0x20000b84
 800fea0:	20000e54 	.word	0x20000e54

0800fea4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fea4:	b480      	push	{r7}
 800fea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fea8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800feaa:	4618      	mov	r0, r3
 800feac:	46bd      	mov	sp, r7
 800feae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb2:	4770      	bx	lr

0800feb4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800feb4:	b480      	push	{r7}
 800feb6:	b083      	sub	sp, #12
 800feb8:	af00      	add	r7, sp, #0
 800feba:	4603      	mov	r3, r0
 800febc:	6039      	str	r1, [r7, #0]
 800febe:	71fb      	strb	r3, [r7, #7]
 800fec0:	4613      	mov	r3, r2
 800fec2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fec4:	79fb      	ldrb	r3, [r7, #7]
 800fec6:	2b23      	cmp	r3, #35	@ 0x23
 800fec8:	d84a      	bhi.n	800ff60 <CDC_Control_FS+0xac>
 800feca:	a201      	add	r2, pc, #4	@ (adr r2, 800fed0 <CDC_Control_FS+0x1c>)
 800fecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fed0:	0800ff61 	.word	0x0800ff61
 800fed4:	0800ff61 	.word	0x0800ff61
 800fed8:	0800ff61 	.word	0x0800ff61
 800fedc:	0800ff61 	.word	0x0800ff61
 800fee0:	0800ff61 	.word	0x0800ff61
 800fee4:	0800ff61 	.word	0x0800ff61
 800fee8:	0800ff61 	.word	0x0800ff61
 800feec:	0800ff61 	.word	0x0800ff61
 800fef0:	0800ff61 	.word	0x0800ff61
 800fef4:	0800ff61 	.word	0x0800ff61
 800fef8:	0800ff61 	.word	0x0800ff61
 800fefc:	0800ff61 	.word	0x0800ff61
 800ff00:	0800ff61 	.word	0x0800ff61
 800ff04:	0800ff61 	.word	0x0800ff61
 800ff08:	0800ff61 	.word	0x0800ff61
 800ff0c:	0800ff61 	.word	0x0800ff61
 800ff10:	0800ff61 	.word	0x0800ff61
 800ff14:	0800ff61 	.word	0x0800ff61
 800ff18:	0800ff61 	.word	0x0800ff61
 800ff1c:	0800ff61 	.word	0x0800ff61
 800ff20:	0800ff61 	.word	0x0800ff61
 800ff24:	0800ff61 	.word	0x0800ff61
 800ff28:	0800ff61 	.word	0x0800ff61
 800ff2c:	0800ff61 	.word	0x0800ff61
 800ff30:	0800ff61 	.word	0x0800ff61
 800ff34:	0800ff61 	.word	0x0800ff61
 800ff38:	0800ff61 	.word	0x0800ff61
 800ff3c:	0800ff61 	.word	0x0800ff61
 800ff40:	0800ff61 	.word	0x0800ff61
 800ff44:	0800ff61 	.word	0x0800ff61
 800ff48:	0800ff61 	.word	0x0800ff61
 800ff4c:	0800ff61 	.word	0x0800ff61
 800ff50:	0800ff61 	.word	0x0800ff61
 800ff54:	0800ff61 	.word	0x0800ff61
 800ff58:	0800ff61 	.word	0x0800ff61
 800ff5c:	0800ff61 	.word	0x0800ff61
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ff60:	bf00      	nop
  }

  return (USBD_OK);
 800ff62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	370c      	adds	r7, #12
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6e:	4770      	bx	lr

0800ff70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len > sizeof(USB_RX_Buffer)) {
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ff82:	d903      	bls.n	800ff8c <CDC_Receive_FS+0x1c>
	          *Len = sizeof(USB_RX_Buffer);  // Prevent buffer overflow
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ff8a:	601a      	str	r2, [r3, #0]
	      }
	      memcpy(USB_RX_Buffer, Buf, *Len);
 800ff8c:	683b      	ldr	r3, [r7, #0]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	461a      	mov	r2, r3
 800ff92:	6879      	ldr	r1, [r7, #4]
 800ff94:	4808      	ldr	r0, [pc, #32]	@ (800ffb8 <CDC_Receive_FS+0x48>)
 800ff96:	f001 fcb0 	bl	80118fa <memcpy>

	      dataReceivedFlag = 1;
 800ff9a:	4b08      	ldr	r3, [pc, #32]	@ (800ffbc <CDC_Receive_FS+0x4c>)
 800ff9c:	2201      	movs	r2, #1
 800ff9e:	601a      	str	r2, [r3, #0]

	      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ffa0:	6879      	ldr	r1, [r7, #4]
 800ffa2:	4807      	ldr	r0, [pc, #28]	@ (800ffc0 <CDC_Receive_FS+0x50>)
 800ffa4:	f7fe fda7 	bl	800eaf6 <USBD_CDC_SetRxBuffer>
	      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ffa8:	4805      	ldr	r0, [pc, #20]	@ (800ffc0 <CDC_Receive_FS+0x50>)
 800ffaa:	f7fe fded 	bl	800eb88 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ffae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	3708      	adds	r7, #8
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}
 800ffb8:	20000a98 	.word	0x20000a98
 800ffbc:	20000b58 	.word	0x20000b58
 800ffc0:	20000b84 	.word	0x20000b84

0800ffc4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b084      	sub	sp, #16
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	460b      	mov	r3, r1
 800ffce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ffd4:	4b0d      	ldr	r3, [pc, #52]	@ (801000c <CDC_Transmit_FS+0x48>)
 800ffd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ffda:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d001      	beq.n	800ffea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	e00b      	b.n	8010002 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ffea:	887b      	ldrh	r3, [r7, #2]
 800ffec:	461a      	mov	r2, r3
 800ffee:	6879      	ldr	r1, [r7, #4]
 800fff0:	4806      	ldr	r0, [pc, #24]	@ (801000c <CDC_Transmit_FS+0x48>)
 800fff2:	f7fe fd62 	bl	800eaba <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fff6:	4805      	ldr	r0, [pc, #20]	@ (801000c <CDC_Transmit_FS+0x48>)
 800fff8:	f7fe fd96 	bl	800eb28 <USBD_CDC_TransmitPacket>
 800fffc:	4603      	mov	r3, r0
 800fffe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010000:	7bfb      	ldrb	r3, [r7, #15]
}
 8010002:	4618      	mov	r0, r3
 8010004:	3710      	adds	r7, #16
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}
 801000a:	bf00      	nop
 801000c:	20000b84 	.word	0x20000b84

08010010 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010010:	b480      	push	{r7}
 8010012:	b087      	sub	sp, #28
 8010014:	af00      	add	r7, sp, #0
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	60b9      	str	r1, [r7, #8]
 801001a:	4613      	mov	r3, r2
 801001c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801001e:	2300      	movs	r3, #0
 8010020:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010022:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010026:	4618      	mov	r0, r3
 8010028:	371c      	adds	r7, #28
 801002a:	46bd      	mov	sp, r7
 801002c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010030:	4770      	bx	lr
	...

08010034 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010034:	b480      	push	{r7}
 8010036:	b083      	sub	sp, #12
 8010038:	af00      	add	r7, sp, #0
 801003a:	4603      	mov	r3, r0
 801003c:	6039      	str	r1, [r7, #0]
 801003e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	2212      	movs	r2, #18
 8010044:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8010046:	4b03      	ldr	r3, [pc, #12]	@ (8010054 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8010048:	4618      	mov	r0, r3
 801004a:	370c      	adds	r7, #12
 801004c:	46bd      	mov	sp, r7
 801004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010052:	4770      	bx	lr
 8010054:	2000018c 	.word	0x2000018c

08010058 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010058:	b480      	push	{r7}
 801005a:	b083      	sub	sp, #12
 801005c:	af00      	add	r7, sp, #0
 801005e:	4603      	mov	r3, r0
 8010060:	6039      	str	r1, [r7, #0]
 8010062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	2204      	movs	r2, #4
 8010068:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801006a:	4b03      	ldr	r3, [pc, #12]	@ (8010078 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801006c:	4618      	mov	r0, r3
 801006e:	370c      	adds	r7, #12
 8010070:	46bd      	mov	sp, r7
 8010072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010076:	4770      	bx	lr
 8010078:	200001a0 	.word	0x200001a0

0801007c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b082      	sub	sp, #8
 8010080:	af00      	add	r7, sp, #0
 8010082:	4603      	mov	r3, r0
 8010084:	6039      	str	r1, [r7, #0]
 8010086:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010088:	79fb      	ldrb	r3, [r7, #7]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d105      	bne.n	801009a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801008e:	683a      	ldr	r2, [r7, #0]
 8010090:	4907      	ldr	r1, [pc, #28]	@ (80100b0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8010092:	4808      	ldr	r0, [pc, #32]	@ (80100b4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010094:	f7ff fde1 	bl	800fc5a <USBD_GetString>
 8010098:	e004      	b.n	80100a4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801009a:	683a      	ldr	r2, [r7, #0]
 801009c:	4904      	ldr	r1, [pc, #16]	@ (80100b0 <USBD_CDC_ProductStrDescriptor+0x34>)
 801009e:	4805      	ldr	r0, [pc, #20]	@ (80100b4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80100a0:	f7ff fddb 	bl	800fc5a <USBD_GetString>
  }
  return USBD_StrDesc;
 80100a4:	4b02      	ldr	r3, [pc, #8]	@ (80100b0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	3708      	adds	r7, #8
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop
 80100b0:	20001e54 	.word	0x20001e54
 80100b4:	08016ef4 	.word	0x08016ef4

080100b8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b082      	sub	sp, #8
 80100bc:	af00      	add	r7, sp, #0
 80100be:	4603      	mov	r3, r0
 80100c0:	6039      	str	r1, [r7, #0]
 80100c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80100c4:	683a      	ldr	r2, [r7, #0]
 80100c6:	4904      	ldr	r1, [pc, #16]	@ (80100d8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80100c8:	4804      	ldr	r0, [pc, #16]	@ (80100dc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80100ca:	f7ff fdc6 	bl	800fc5a <USBD_GetString>
  return USBD_StrDesc;
 80100ce:	4b02      	ldr	r3, [pc, #8]	@ (80100d8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3708      	adds	r7, #8
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}
 80100d8:	20001e54 	.word	0x20001e54
 80100dc:	08016f0c 	.word	0x08016f0c

080100e0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b082      	sub	sp, #8
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	4603      	mov	r3, r0
 80100e8:	6039      	str	r1, [r7, #0]
 80100ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	221a      	movs	r2, #26
 80100f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80100f2:	f000 f843 	bl	801017c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80100f6:	4b02      	ldr	r3, [pc, #8]	@ (8010100 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	3708      	adds	r7, #8
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}
 8010100:	200001a4 	.word	0x200001a4

08010104 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	af00      	add	r7, sp, #0
 801010a:	4603      	mov	r3, r0
 801010c:	6039      	str	r1, [r7, #0]
 801010e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010110:	79fb      	ldrb	r3, [r7, #7]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d105      	bne.n	8010122 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010116:	683a      	ldr	r2, [r7, #0]
 8010118:	4907      	ldr	r1, [pc, #28]	@ (8010138 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801011a:	4808      	ldr	r0, [pc, #32]	@ (801013c <USBD_CDC_ConfigStrDescriptor+0x38>)
 801011c:	f7ff fd9d 	bl	800fc5a <USBD_GetString>
 8010120:	e004      	b.n	801012c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010122:	683a      	ldr	r2, [r7, #0]
 8010124:	4904      	ldr	r1, [pc, #16]	@ (8010138 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8010126:	4805      	ldr	r0, [pc, #20]	@ (801013c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010128:	f7ff fd97 	bl	800fc5a <USBD_GetString>
  }
  return USBD_StrDesc;
 801012c:	4b02      	ldr	r3, [pc, #8]	@ (8010138 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801012e:	4618      	mov	r0, r3
 8010130:	3708      	adds	r7, #8
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
 8010136:	bf00      	nop
 8010138:	20001e54 	.word	0x20001e54
 801013c:	08016f20 	.word	0x08016f20

08010140 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b082      	sub	sp, #8
 8010144:	af00      	add	r7, sp, #0
 8010146:	4603      	mov	r3, r0
 8010148:	6039      	str	r1, [r7, #0]
 801014a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801014c:	79fb      	ldrb	r3, [r7, #7]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d105      	bne.n	801015e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010152:	683a      	ldr	r2, [r7, #0]
 8010154:	4907      	ldr	r1, [pc, #28]	@ (8010174 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010156:	4808      	ldr	r0, [pc, #32]	@ (8010178 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010158:	f7ff fd7f 	bl	800fc5a <USBD_GetString>
 801015c:	e004      	b.n	8010168 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801015e:	683a      	ldr	r2, [r7, #0]
 8010160:	4904      	ldr	r1, [pc, #16]	@ (8010174 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010162:	4805      	ldr	r0, [pc, #20]	@ (8010178 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010164:	f7ff fd79 	bl	800fc5a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010168:	4b02      	ldr	r3, [pc, #8]	@ (8010174 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801016a:	4618      	mov	r0, r3
 801016c:	3708      	adds	r7, #8
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}
 8010172:	bf00      	nop
 8010174:	20001e54 	.word	0x20001e54
 8010178:	08016f2c 	.word	0x08016f2c

0801017c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b084      	sub	sp, #16
 8010180:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010182:	4b0f      	ldr	r3, [pc, #60]	@ (80101c0 <Get_SerialNum+0x44>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010188:	4b0e      	ldr	r3, [pc, #56]	@ (80101c4 <Get_SerialNum+0x48>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801018e:	4b0e      	ldr	r3, [pc, #56]	@ (80101c8 <Get_SerialNum+0x4c>)
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010194:	68fa      	ldr	r2, [r7, #12]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	4413      	add	r3, r2
 801019a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d009      	beq.n	80101b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80101a2:	2208      	movs	r2, #8
 80101a4:	4909      	ldr	r1, [pc, #36]	@ (80101cc <Get_SerialNum+0x50>)
 80101a6:	68f8      	ldr	r0, [r7, #12]
 80101a8:	f000 f814 	bl	80101d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80101ac:	2204      	movs	r2, #4
 80101ae:	4908      	ldr	r1, [pc, #32]	@ (80101d0 <Get_SerialNum+0x54>)
 80101b0:	68b8      	ldr	r0, [r7, #8]
 80101b2:	f000 f80f 	bl	80101d4 <IntToUnicode>
  }
}
 80101b6:	bf00      	nop
 80101b8:	3710      	adds	r7, #16
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop
 80101c0:	1fff7590 	.word	0x1fff7590
 80101c4:	1fff7594 	.word	0x1fff7594
 80101c8:	1fff7598 	.word	0x1fff7598
 80101cc:	200001a6 	.word	0x200001a6
 80101d0:	200001b6 	.word	0x200001b6

080101d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b087      	sub	sp, #28
 80101d8:	af00      	add	r7, sp, #0
 80101da:	60f8      	str	r0, [r7, #12]
 80101dc:	60b9      	str	r1, [r7, #8]
 80101de:	4613      	mov	r3, r2
 80101e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80101e2:	2300      	movs	r3, #0
 80101e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80101e6:	2300      	movs	r3, #0
 80101e8:	75fb      	strb	r3, [r7, #23]
 80101ea:	e027      	b.n	801023c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	0f1b      	lsrs	r3, r3, #28
 80101f0:	2b09      	cmp	r3, #9
 80101f2:	d80b      	bhi.n	801020c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	0f1b      	lsrs	r3, r3, #28
 80101f8:	b2da      	uxtb	r2, r3
 80101fa:	7dfb      	ldrb	r3, [r7, #23]
 80101fc:	005b      	lsls	r3, r3, #1
 80101fe:	4619      	mov	r1, r3
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	440b      	add	r3, r1
 8010204:	3230      	adds	r2, #48	@ 0x30
 8010206:	b2d2      	uxtb	r2, r2
 8010208:	701a      	strb	r2, [r3, #0]
 801020a:	e00a      	b.n	8010222 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	0f1b      	lsrs	r3, r3, #28
 8010210:	b2da      	uxtb	r2, r3
 8010212:	7dfb      	ldrb	r3, [r7, #23]
 8010214:	005b      	lsls	r3, r3, #1
 8010216:	4619      	mov	r1, r3
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	440b      	add	r3, r1
 801021c:	3237      	adds	r2, #55	@ 0x37
 801021e:	b2d2      	uxtb	r2, r2
 8010220:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	011b      	lsls	r3, r3, #4
 8010226:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010228:	7dfb      	ldrb	r3, [r7, #23]
 801022a:	005b      	lsls	r3, r3, #1
 801022c:	3301      	adds	r3, #1
 801022e:	68ba      	ldr	r2, [r7, #8]
 8010230:	4413      	add	r3, r2
 8010232:	2200      	movs	r2, #0
 8010234:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010236:	7dfb      	ldrb	r3, [r7, #23]
 8010238:	3301      	adds	r3, #1
 801023a:	75fb      	strb	r3, [r7, #23]
 801023c:	7dfa      	ldrb	r2, [r7, #23]
 801023e:	79fb      	ldrb	r3, [r7, #7]
 8010240:	429a      	cmp	r2, r3
 8010242:	d3d3      	bcc.n	80101ec <IntToUnicode+0x18>
  }
}
 8010244:	bf00      	nop
 8010246:	bf00      	nop
 8010248:	371c      	adds	r7, #28
 801024a:	46bd      	mov	sp, r7
 801024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010250:	4770      	bx	lr
	...

08010254 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b098      	sub	sp, #96	@ 0x60
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801025c:	f107 030c 	add.w	r3, r7, #12
 8010260:	2254      	movs	r2, #84	@ 0x54
 8010262:	2100      	movs	r1, #0
 8010264:	4618      	mov	r0, r3
 8010266:	f001 fab6 	bl	80117d6 <memset>
  if(pcdHandle->Instance==USB)
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	4a15      	ldr	r2, [pc, #84]	@ (80102c4 <HAL_PCD_MspInit+0x70>)
 8010270:	4293      	cmp	r3, r2
 8010272:	d122      	bne.n	80102ba <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010274:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010278:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801027a:	2300      	movs	r3, #0
 801027c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801027e:	f107 030c 	add.w	r3, r7, #12
 8010282:	4618      	mov	r0, r3
 8010284:	f7f9 f8c6 	bl	8009414 <HAL_RCCEx_PeriphCLKConfig>
 8010288:	4603      	mov	r3, r0
 801028a:	2b00      	cmp	r3, #0
 801028c:	d001      	beq.n	8010292 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 801028e:	f7f3 fa47 	bl	8003720 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010292:	4b0d      	ldr	r3, [pc, #52]	@ (80102c8 <HAL_PCD_MspInit+0x74>)
 8010294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010296:	4a0c      	ldr	r2, [pc, #48]	@ (80102c8 <HAL_PCD_MspInit+0x74>)
 8010298:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801029c:	6593      	str	r3, [r2, #88]	@ 0x58
 801029e:	4b0a      	ldr	r3, [pc, #40]	@ (80102c8 <HAL_PCD_MspInit+0x74>)
 80102a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80102a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80102a6:	60bb      	str	r3, [r7, #8]
 80102a8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80102aa:	2200      	movs	r2, #0
 80102ac:	2100      	movs	r1, #0
 80102ae:	2014      	movs	r0, #20
 80102b0:	f7f5 fe47 	bl	8005f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80102b4:	2014      	movs	r0, #20
 80102b6:	f7f5 fe5e 	bl	8005f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80102ba:	bf00      	nop
 80102bc:	3760      	adds	r7, #96	@ 0x60
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
 80102c2:	bf00      	nop
 80102c4:	40005c00 	.word	0x40005c00
 80102c8:	40021000 	.word	0x40021000

080102cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b082      	sub	sp, #8
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80102e0:	4619      	mov	r1, r3
 80102e2:	4610      	mov	r0, r2
 80102e4:	f7fe fd1c 	bl	800ed20 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80102e8:	bf00      	nop
 80102ea:	3708      	adds	r7, #8
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}

080102f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b082      	sub	sp, #8
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
 80102f8:	460b      	mov	r3, r1
 80102fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010302:	78fa      	ldrb	r2, [r7, #3]
 8010304:	6879      	ldr	r1, [r7, #4]
 8010306:	4613      	mov	r3, r2
 8010308:	009b      	lsls	r3, r3, #2
 801030a:	4413      	add	r3, r2
 801030c:	00db      	lsls	r3, r3, #3
 801030e:	440b      	add	r3, r1
 8010310:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	78fb      	ldrb	r3, [r7, #3]
 8010318:	4619      	mov	r1, r3
 801031a:	f7fe fd56 	bl	800edca <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801031e:	bf00      	nop
 8010320:	3708      	adds	r7, #8
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}

08010326 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010326:	b580      	push	{r7, lr}
 8010328:	b082      	sub	sp, #8
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
 801032e:	460b      	mov	r3, r1
 8010330:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010338:	78fa      	ldrb	r2, [r7, #3]
 801033a:	6879      	ldr	r1, [r7, #4]
 801033c:	4613      	mov	r3, r2
 801033e:	009b      	lsls	r3, r3, #2
 8010340:	4413      	add	r3, r2
 8010342:	00db      	lsls	r3, r3, #3
 8010344:	440b      	add	r3, r1
 8010346:	3324      	adds	r3, #36	@ 0x24
 8010348:	681a      	ldr	r2, [r3, #0]
 801034a:	78fb      	ldrb	r3, [r7, #3]
 801034c:	4619      	mov	r1, r3
 801034e:	f7fe fd9f 	bl	800ee90 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8010352:	bf00      	nop
 8010354:	3708      	adds	r7, #8
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}

0801035a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801035a:	b580      	push	{r7, lr}
 801035c:	b082      	sub	sp, #8
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010368:	4618      	mov	r0, r3
 801036a:	f7fe feb3 	bl	800f0d4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801036e:	bf00      	nop
 8010370:	3708      	adds	r7, #8
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}

08010376 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010376:	b580      	push	{r7, lr}
 8010378:	b084      	sub	sp, #16
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801037e:	2301      	movs	r3, #1
 8010380:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	795b      	ldrb	r3, [r3, #5]
 8010386:	2b02      	cmp	r3, #2
 8010388:	d001      	beq.n	801038e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801038a:	f7f3 f9c9 	bl	8003720 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010394:	7bfa      	ldrb	r2, [r7, #15]
 8010396:	4611      	mov	r1, r2
 8010398:	4618      	mov	r0, r3
 801039a:	f7fe fe5d 	bl	800f058 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7fe fe09 	bl	800efbc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80103aa:	bf00      	nop
 80103ac:	3710      	adds	r7, #16
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}
	...

080103b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b082      	sub	sp, #8
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80103c2:	4618      	mov	r0, r3
 80103c4:	f7fe fe58 	bl	800f078 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	7a5b      	ldrb	r3, [r3, #9]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d005      	beq.n	80103dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80103d0:	4b04      	ldr	r3, [pc, #16]	@ (80103e4 <HAL_PCD_SuspendCallback+0x30>)
 80103d2:	691b      	ldr	r3, [r3, #16]
 80103d4:	4a03      	ldr	r2, [pc, #12]	@ (80103e4 <HAL_PCD_SuspendCallback+0x30>)
 80103d6:	f043 0306 	orr.w	r3, r3, #6
 80103da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80103dc:	bf00      	nop
 80103de:	3708      	adds	r7, #8
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}
 80103e4:	e000ed00 	.word	0xe000ed00

080103e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b082      	sub	sp, #8
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	7a5b      	ldrb	r3, [r3, #9]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d007      	beq.n	8010408 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80103f8:	4b08      	ldr	r3, [pc, #32]	@ (801041c <HAL_PCD_ResumeCallback+0x34>)
 80103fa:	691b      	ldr	r3, [r3, #16]
 80103fc:	4a07      	ldr	r2, [pc, #28]	@ (801041c <HAL_PCD_ResumeCallback+0x34>)
 80103fe:	f023 0306 	bic.w	r3, r3, #6
 8010402:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010404:	f000 f9f8 	bl	80107f8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801040e:	4618      	mov	r0, r3
 8010410:	f7fe fe48 	bl	800f0a4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8010414:	bf00      	nop
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}
 801041c:	e000ed00 	.word	0xe000ed00

08010420 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b082      	sub	sp, #8
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010428:	4a2b      	ldr	r2, [pc, #172]	@ (80104d8 <USBD_LL_Init+0xb8>)
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	4a29      	ldr	r2, [pc, #164]	@ (80104d8 <USBD_LL_Init+0xb8>)
 8010434:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8010438:	4b27      	ldr	r3, [pc, #156]	@ (80104d8 <USBD_LL_Init+0xb8>)
 801043a:	4a28      	ldr	r2, [pc, #160]	@ (80104dc <USBD_LL_Init+0xbc>)
 801043c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801043e:	4b26      	ldr	r3, [pc, #152]	@ (80104d8 <USBD_LL_Init+0xb8>)
 8010440:	2208      	movs	r2, #8
 8010442:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010444:	4b24      	ldr	r3, [pc, #144]	@ (80104d8 <USBD_LL_Init+0xb8>)
 8010446:	2202      	movs	r2, #2
 8010448:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801044a:	4b23      	ldr	r3, [pc, #140]	@ (80104d8 <USBD_LL_Init+0xb8>)
 801044c:	2202      	movs	r2, #2
 801044e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010450:	4b21      	ldr	r3, [pc, #132]	@ (80104d8 <USBD_LL_Init+0xb8>)
 8010452:	2200      	movs	r2, #0
 8010454:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010456:	4b20      	ldr	r3, [pc, #128]	@ (80104d8 <USBD_LL_Init+0xb8>)
 8010458:	2200      	movs	r2, #0
 801045a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801045c:	4b1e      	ldr	r3, [pc, #120]	@ (80104d8 <USBD_LL_Init+0xb8>)
 801045e:	2200      	movs	r2, #0
 8010460:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010462:	4b1d      	ldr	r3, [pc, #116]	@ (80104d8 <USBD_LL_Init+0xb8>)
 8010464:	2200      	movs	r2, #0
 8010466:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010468:	481b      	ldr	r0, [pc, #108]	@ (80104d8 <USBD_LL_Init+0xb8>)
 801046a:	f7f6 fcbb 	bl	8006de4 <HAL_PCD_Init>
 801046e:	4603      	mov	r3, r0
 8010470:	2b00      	cmp	r3, #0
 8010472:	d001      	beq.n	8010478 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8010474:	f7f3 f954 	bl	8003720 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801047e:	2318      	movs	r3, #24
 8010480:	2200      	movs	r2, #0
 8010482:	2100      	movs	r1, #0
 8010484:	f7f8 f976 	bl	8008774 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801048e:	2358      	movs	r3, #88	@ 0x58
 8010490:	2200      	movs	r2, #0
 8010492:	2180      	movs	r1, #128	@ 0x80
 8010494:	f7f8 f96e 	bl	8008774 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801049e:	23c0      	movs	r3, #192	@ 0xc0
 80104a0:	2200      	movs	r2, #0
 80104a2:	2181      	movs	r1, #129	@ 0x81
 80104a4:	f7f8 f966 	bl	8008774 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80104ae:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80104b2:	2200      	movs	r2, #0
 80104b4:	2101      	movs	r1, #1
 80104b6:	f7f8 f95d 	bl	8008774 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80104c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80104c4:	2200      	movs	r2, #0
 80104c6:	2182      	movs	r1, #130	@ 0x82
 80104c8:	f7f8 f954 	bl	8008774 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80104cc:	2300      	movs	r3, #0
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3708      	adds	r7, #8
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}
 80104d6:	bf00      	nop
 80104d8:	20002054 	.word	0x20002054
 80104dc:	40005c00 	.word	0x40005c00

080104e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b084      	sub	sp, #16
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104e8:	2300      	movs	r3, #0
 80104ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104ec:	2300      	movs	r3, #0
 80104ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7f6 fd42 	bl	8006f80 <HAL_PCD_Start>
 80104fc:	4603      	mov	r3, r0
 80104fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010500:	7bfb      	ldrb	r3, [r7, #15]
 8010502:	4618      	mov	r0, r3
 8010504:	f000 f97e 	bl	8010804 <USBD_Get_USB_Status>
 8010508:	4603      	mov	r3, r0
 801050a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801050c:	7bbb      	ldrb	r3, [r7, #14]
}
 801050e:	4618      	mov	r0, r3
 8010510:	3710      	adds	r7, #16
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}

08010516 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010516:	b580      	push	{r7, lr}
 8010518:	b084      	sub	sp, #16
 801051a:	af00      	add	r7, sp, #0
 801051c:	6078      	str	r0, [r7, #4]
 801051e:	4608      	mov	r0, r1
 8010520:	4611      	mov	r1, r2
 8010522:	461a      	mov	r2, r3
 8010524:	4603      	mov	r3, r0
 8010526:	70fb      	strb	r3, [r7, #3]
 8010528:	460b      	mov	r3, r1
 801052a:	70bb      	strb	r3, [r7, #2]
 801052c:	4613      	mov	r3, r2
 801052e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010530:	2300      	movs	r3, #0
 8010532:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010534:	2300      	movs	r3, #0
 8010536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801053e:	78bb      	ldrb	r3, [r7, #2]
 8010540:	883a      	ldrh	r2, [r7, #0]
 8010542:	78f9      	ldrb	r1, [r7, #3]
 8010544:	f7f6 fe89 	bl	800725a <HAL_PCD_EP_Open>
 8010548:	4603      	mov	r3, r0
 801054a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801054c:	7bfb      	ldrb	r3, [r7, #15]
 801054e:	4618      	mov	r0, r3
 8010550:	f000 f958 	bl	8010804 <USBD_Get_USB_Status>
 8010554:	4603      	mov	r3, r0
 8010556:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010558:	7bbb      	ldrb	r3, [r7, #14]
}
 801055a:	4618      	mov	r0, r3
 801055c:	3710      	adds	r7, #16
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}

08010562 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010562:	b580      	push	{r7, lr}
 8010564:	b084      	sub	sp, #16
 8010566:	af00      	add	r7, sp, #0
 8010568:	6078      	str	r0, [r7, #4]
 801056a:	460b      	mov	r3, r1
 801056c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801056e:	2300      	movs	r3, #0
 8010570:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010572:	2300      	movs	r3, #0
 8010574:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801057c:	78fa      	ldrb	r2, [r7, #3]
 801057e:	4611      	mov	r1, r2
 8010580:	4618      	mov	r0, r3
 8010582:	f7f6 fec9 	bl	8007318 <HAL_PCD_EP_Close>
 8010586:	4603      	mov	r3, r0
 8010588:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801058a:	7bfb      	ldrb	r3, [r7, #15]
 801058c:	4618      	mov	r0, r3
 801058e:	f000 f939 	bl	8010804 <USBD_Get_USB_Status>
 8010592:	4603      	mov	r3, r0
 8010594:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010596:	7bbb      	ldrb	r3, [r7, #14]
}
 8010598:	4618      	mov	r0, r3
 801059a:	3710      	adds	r7, #16
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}

080105a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b084      	sub	sp, #16
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
 80105a8:	460b      	mov	r3, r1
 80105aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105ac:	2300      	movs	r3, #0
 80105ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105b0:	2300      	movs	r3, #0
 80105b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80105ba:	78fa      	ldrb	r2, [r7, #3]
 80105bc:	4611      	mov	r1, r2
 80105be:	4618      	mov	r0, r3
 80105c0:	f7f6 ff72 	bl	80074a8 <HAL_PCD_EP_SetStall>
 80105c4:	4603      	mov	r3, r0
 80105c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105c8:	7bfb      	ldrb	r3, [r7, #15]
 80105ca:	4618      	mov	r0, r3
 80105cc:	f000 f91a 	bl	8010804 <USBD_Get_USB_Status>
 80105d0:	4603      	mov	r3, r0
 80105d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	3710      	adds	r7, #16
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}

080105de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105de:	b580      	push	{r7, lr}
 80105e0:	b084      	sub	sp, #16
 80105e2:	af00      	add	r7, sp, #0
 80105e4:	6078      	str	r0, [r7, #4]
 80105e6:	460b      	mov	r3, r1
 80105e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105ea:	2300      	movs	r3, #0
 80105ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105ee:	2300      	movs	r3, #0
 80105f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80105f8:	78fa      	ldrb	r2, [r7, #3]
 80105fa:	4611      	mov	r1, r2
 80105fc:	4618      	mov	r0, r3
 80105fe:	f7f6 ffa5 	bl	800754c <HAL_PCD_EP_ClrStall>
 8010602:	4603      	mov	r3, r0
 8010604:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010606:	7bfb      	ldrb	r3, [r7, #15]
 8010608:	4618      	mov	r0, r3
 801060a:	f000 f8fb 	bl	8010804 <USBD_Get_USB_Status>
 801060e:	4603      	mov	r3, r0
 8010610:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010612:	7bbb      	ldrb	r3, [r7, #14]
}
 8010614:	4618      	mov	r0, r3
 8010616:	3710      	adds	r7, #16
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801061c:	b480      	push	{r7}
 801061e:	b085      	sub	sp, #20
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	460b      	mov	r3, r1
 8010626:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801062e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010630:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010634:	2b00      	cmp	r3, #0
 8010636:	da0b      	bge.n	8010650 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010638:	78fb      	ldrb	r3, [r7, #3]
 801063a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801063e:	68f9      	ldr	r1, [r7, #12]
 8010640:	4613      	mov	r3, r2
 8010642:	009b      	lsls	r3, r3, #2
 8010644:	4413      	add	r3, r2
 8010646:	00db      	lsls	r3, r3, #3
 8010648:	440b      	add	r3, r1
 801064a:	3312      	adds	r3, #18
 801064c:	781b      	ldrb	r3, [r3, #0]
 801064e:	e00b      	b.n	8010668 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010650:	78fb      	ldrb	r3, [r7, #3]
 8010652:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010656:	68f9      	ldr	r1, [r7, #12]
 8010658:	4613      	mov	r3, r2
 801065a:	009b      	lsls	r3, r3, #2
 801065c:	4413      	add	r3, r2
 801065e:	00db      	lsls	r3, r3, #3
 8010660:	440b      	add	r3, r1
 8010662:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8010666:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010668:	4618      	mov	r0, r3
 801066a:	3714      	adds	r7, #20
 801066c:	46bd      	mov	sp, r7
 801066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010672:	4770      	bx	lr

08010674 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b084      	sub	sp, #16
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
 801067c:	460b      	mov	r3, r1
 801067e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010680:	2300      	movs	r3, #0
 8010682:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010684:	2300      	movs	r3, #0
 8010686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801068e:	78fa      	ldrb	r2, [r7, #3]
 8010690:	4611      	mov	r1, r2
 8010692:	4618      	mov	r0, r3
 8010694:	f7f6 fdbd 	bl	8007212 <HAL_PCD_SetAddress>
 8010698:	4603      	mov	r3, r0
 801069a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801069c:	7bfb      	ldrb	r3, [r7, #15]
 801069e:	4618      	mov	r0, r3
 80106a0:	f000 f8b0 	bl	8010804 <USBD_Get_USB_Status>
 80106a4:	4603      	mov	r3, r0
 80106a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80106aa:	4618      	mov	r0, r3
 80106ac:	3710      	adds	r7, #16
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}

080106b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80106b2:	b580      	push	{r7, lr}
 80106b4:	b086      	sub	sp, #24
 80106b6:	af00      	add	r7, sp, #0
 80106b8:	60f8      	str	r0, [r7, #12]
 80106ba:	607a      	str	r2, [r7, #4]
 80106bc:	603b      	str	r3, [r7, #0]
 80106be:	460b      	mov	r3, r1
 80106c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106c2:	2300      	movs	r3, #0
 80106c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106c6:	2300      	movs	r3, #0
 80106c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80106d0:	7af9      	ldrb	r1, [r7, #11]
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	687a      	ldr	r2, [r7, #4]
 80106d6:	f7f6 feb0 	bl	800743a <HAL_PCD_EP_Transmit>
 80106da:	4603      	mov	r3, r0
 80106dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106de:	7dfb      	ldrb	r3, [r7, #23]
 80106e0:	4618      	mov	r0, r3
 80106e2:	f000 f88f 	bl	8010804 <USBD_Get_USB_Status>
 80106e6:	4603      	mov	r3, r0
 80106e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80106ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80106ec:	4618      	mov	r0, r3
 80106ee:	3718      	adds	r7, #24
 80106f0:	46bd      	mov	sp, r7
 80106f2:	bd80      	pop	{r7, pc}

080106f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b086      	sub	sp, #24
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	60f8      	str	r0, [r7, #12]
 80106fc:	607a      	str	r2, [r7, #4]
 80106fe:	603b      	str	r3, [r7, #0]
 8010700:	460b      	mov	r3, r1
 8010702:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010704:	2300      	movs	r3, #0
 8010706:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010708:	2300      	movs	r3, #0
 801070a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010712:	7af9      	ldrb	r1, [r7, #11]
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	687a      	ldr	r2, [r7, #4]
 8010718:	f7f6 fe46 	bl	80073a8 <HAL_PCD_EP_Receive>
 801071c:	4603      	mov	r3, r0
 801071e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010720:	7dfb      	ldrb	r3, [r7, #23]
 8010722:	4618      	mov	r0, r3
 8010724:	f000 f86e 	bl	8010804 <USBD_Get_USB_Status>
 8010728:	4603      	mov	r3, r0
 801072a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801072c:	7dbb      	ldrb	r3, [r7, #22]
}
 801072e:	4618      	mov	r0, r3
 8010730:	3718      	adds	r7, #24
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}

08010736 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010736:	b580      	push	{r7, lr}
 8010738:	b082      	sub	sp, #8
 801073a:	af00      	add	r7, sp, #0
 801073c:	6078      	str	r0, [r7, #4]
 801073e:	460b      	mov	r3, r1
 8010740:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010748:	78fa      	ldrb	r2, [r7, #3]
 801074a:	4611      	mov	r1, r2
 801074c:	4618      	mov	r0, r3
 801074e:	f7f6 fe5c 	bl	800740a <HAL_PCD_EP_GetRxCount>
 8010752:	4603      	mov	r3, r0
}
 8010754:	4618      	mov	r0, r3
 8010756:	3708      	adds	r7, #8
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}

0801075c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b082      	sub	sp, #8
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	460b      	mov	r3, r1
 8010766:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010768:	78fb      	ldrb	r3, [r7, #3]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d002      	beq.n	8010774 <HAL_PCDEx_LPM_Callback+0x18>
 801076e:	2b01      	cmp	r3, #1
 8010770:	d013      	beq.n	801079a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010772:	e023      	b.n	80107bc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	7a5b      	ldrb	r3, [r3, #9]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d007      	beq.n	801078c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801077c:	f000 f83c 	bl	80107f8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010780:	4b10      	ldr	r3, [pc, #64]	@ (80107c4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010782:	691b      	ldr	r3, [r3, #16]
 8010784:	4a0f      	ldr	r2, [pc, #60]	@ (80107c4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010786:	f023 0306 	bic.w	r3, r3, #6
 801078a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010792:	4618      	mov	r0, r3
 8010794:	f7fe fc86 	bl	800f0a4 <USBD_LL_Resume>
    break;
 8010798:	e010      	b.n	80107bc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80107a0:	4618      	mov	r0, r3
 80107a2:	f7fe fc69 	bl	800f078 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	7a5b      	ldrb	r3, [r3, #9]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d005      	beq.n	80107ba <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80107ae:	4b05      	ldr	r3, [pc, #20]	@ (80107c4 <HAL_PCDEx_LPM_Callback+0x68>)
 80107b0:	691b      	ldr	r3, [r3, #16]
 80107b2:	4a04      	ldr	r2, [pc, #16]	@ (80107c4 <HAL_PCDEx_LPM_Callback+0x68>)
 80107b4:	f043 0306 	orr.w	r3, r3, #6
 80107b8:	6113      	str	r3, [r2, #16]
    break;
 80107ba:	bf00      	nop
}
 80107bc:	bf00      	nop
 80107be:	3708      	adds	r7, #8
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}
 80107c4:	e000ed00 	.word	0xe000ed00

080107c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80107c8:	b480      	push	{r7}
 80107ca:	b083      	sub	sp, #12
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80107d0:	4b03      	ldr	r3, [pc, #12]	@ (80107e0 <USBD_static_malloc+0x18>)
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	370c      	adds	r7, #12
 80107d6:	46bd      	mov	sp, r7
 80107d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107dc:	4770      	bx	lr
 80107de:	bf00      	nop
 80107e0:	20002330 	.word	0x20002330

080107e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80107e4:	b480      	push	{r7}
 80107e6:	b083      	sub	sp, #12
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]

}
 80107ec:	bf00      	nop
 80107ee:	370c      	adds	r7, #12
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr

080107f8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80107fc:	f7f1 f890 	bl	8001920 <SystemClock_Config>
}
 8010800:	bf00      	nop
 8010802:	bd80      	pop	{r7, pc}

08010804 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010804:	b480      	push	{r7}
 8010806:	b085      	sub	sp, #20
 8010808:	af00      	add	r7, sp, #0
 801080a:	4603      	mov	r3, r0
 801080c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801080e:	2300      	movs	r3, #0
 8010810:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010812:	79fb      	ldrb	r3, [r7, #7]
 8010814:	2b03      	cmp	r3, #3
 8010816:	d817      	bhi.n	8010848 <USBD_Get_USB_Status+0x44>
 8010818:	a201      	add	r2, pc, #4	@ (adr r2, 8010820 <USBD_Get_USB_Status+0x1c>)
 801081a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801081e:	bf00      	nop
 8010820:	08010831 	.word	0x08010831
 8010824:	08010837 	.word	0x08010837
 8010828:	0801083d 	.word	0x0801083d
 801082c:	08010843 	.word	0x08010843
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010830:	2300      	movs	r3, #0
 8010832:	73fb      	strb	r3, [r7, #15]
    break;
 8010834:	e00b      	b.n	801084e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010836:	2303      	movs	r3, #3
 8010838:	73fb      	strb	r3, [r7, #15]
    break;
 801083a:	e008      	b.n	801084e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801083c:	2301      	movs	r3, #1
 801083e:	73fb      	strb	r3, [r7, #15]
    break;
 8010840:	e005      	b.n	801084e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010842:	2303      	movs	r3, #3
 8010844:	73fb      	strb	r3, [r7, #15]
    break;
 8010846:	e002      	b.n	801084e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010848:	2303      	movs	r3, #3
 801084a:	73fb      	strb	r3, [r7, #15]
    break;
 801084c:	bf00      	nop
  }
  return usb_status;
 801084e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010850:	4618      	mov	r0, r3
 8010852:	3714      	adds	r7, #20
 8010854:	46bd      	mov	sp, r7
 8010856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085a:	4770      	bx	lr

0801085c <__cvt>:
 801085c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010860:	ec57 6b10 	vmov	r6, r7, d0
 8010864:	2f00      	cmp	r7, #0
 8010866:	460c      	mov	r4, r1
 8010868:	4619      	mov	r1, r3
 801086a:	463b      	mov	r3, r7
 801086c:	bfbb      	ittet	lt
 801086e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010872:	461f      	movlt	r7, r3
 8010874:	2300      	movge	r3, #0
 8010876:	232d      	movlt	r3, #45	@ 0x2d
 8010878:	700b      	strb	r3, [r1, #0]
 801087a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801087c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010880:	4691      	mov	r9, r2
 8010882:	f023 0820 	bic.w	r8, r3, #32
 8010886:	bfbc      	itt	lt
 8010888:	4632      	movlt	r2, r6
 801088a:	4616      	movlt	r6, r2
 801088c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010890:	d005      	beq.n	801089e <__cvt+0x42>
 8010892:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010896:	d100      	bne.n	801089a <__cvt+0x3e>
 8010898:	3401      	adds	r4, #1
 801089a:	2102      	movs	r1, #2
 801089c:	e000      	b.n	80108a0 <__cvt+0x44>
 801089e:	2103      	movs	r1, #3
 80108a0:	ab03      	add	r3, sp, #12
 80108a2:	9301      	str	r3, [sp, #4]
 80108a4:	ab02      	add	r3, sp, #8
 80108a6:	9300      	str	r3, [sp, #0]
 80108a8:	ec47 6b10 	vmov	d0, r6, r7
 80108ac:	4653      	mov	r3, sl
 80108ae:	4622      	mov	r2, r4
 80108b0:	f001 f8c2 	bl	8011a38 <_dtoa_r>
 80108b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80108b8:	4605      	mov	r5, r0
 80108ba:	d119      	bne.n	80108f0 <__cvt+0x94>
 80108bc:	f019 0f01 	tst.w	r9, #1
 80108c0:	d00e      	beq.n	80108e0 <__cvt+0x84>
 80108c2:	eb00 0904 	add.w	r9, r0, r4
 80108c6:	2200      	movs	r2, #0
 80108c8:	2300      	movs	r3, #0
 80108ca:	4630      	mov	r0, r6
 80108cc:	4639      	mov	r1, r7
 80108ce:	f7f0 f923 	bl	8000b18 <__aeabi_dcmpeq>
 80108d2:	b108      	cbz	r0, 80108d8 <__cvt+0x7c>
 80108d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80108d8:	2230      	movs	r2, #48	@ 0x30
 80108da:	9b03      	ldr	r3, [sp, #12]
 80108dc:	454b      	cmp	r3, r9
 80108de:	d31e      	bcc.n	801091e <__cvt+0xc2>
 80108e0:	9b03      	ldr	r3, [sp, #12]
 80108e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80108e4:	1b5b      	subs	r3, r3, r5
 80108e6:	4628      	mov	r0, r5
 80108e8:	6013      	str	r3, [r2, #0]
 80108ea:	b004      	add	sp, #16
 80108ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80108f4:	eb00 0904 	add.w	r9, r0, r4
 80108f8:	d1e5      	bne.n	80108c6 <__cvt+0x6a>
 80108fa:	7803      	ldrb	r3, [r0, #0]
 80108fc:	2b30      	cmp	r3, #48	@ 0x30
 80108fe:	d10a      	bne.n	8010916 <__cvt+0xba>
 8010900:	2200      	movs	r2, #0
 8010902:	2300      	movs	r3, #0
 8010904:	4630      	mov	r0, r6
 8010906:	4639      	mov	r1, r7
 8010908:	f7f0 f906 	bl	8000b18 <__aeabi_dcmpeq>
 801090c:	b918      	cbnz	r0, 8010916 <__cvt+0xba>
 801090e:	f1c4 0401 	rsb	r4, r4, #1
 8010912:	f8ca 4000 	str.w	r4, [sl]
 8010916:	f8da 3000 	ldr.w	r3, [sl]
 801091a:	4499      	add	r9, r3
 801091c:	e7d3      	b.n	80108c6 <__cvt+0x6a>
 801091e:	1c59      	adds	r1, r3, #1
 8010920:	9103      	str	r1, [sp, #12]
 8010922:	701a      	strb	r2, [r3, #0]
 8010924:	e7d9      	b.n	80108da <__cvt+0x7e>

08010926 <__exponent>:
 8010926:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010928:	2900      	cmp	r1, #0
 801092a:	bfba      	itte	lt
 801092c:	4249      	neglt	r1, r1
 801092e:	232d      	movlt	r3, #45	@ 0x2d
 8010930:	232b      	movge	r3, #43	@ 0x2b
 8010932:	2909      	cmp	r1, #9
 8010934:	7002      	strb	r2, [r0, #0]
 8010936:	7043      	strb	r3, [r0, #1]
 8010938:	dd29      	ble.n	801098e <__exponent+0x68>
 801093a:	f10d 0307 	add.w	r3, sp, #7
 801093e:	461d      	mov	r5, r3
 8010940:	270a      	movs	r7, #10
 8010942:	461a      	mov	r2, r3
 8010944:	fbb1 f6f7 	udiv	r6, r1, r7
 8010948:	fb07 1416 	mls	r4, r7, r6, r1
 801094c:	3430      	adds	r4, #48	@ 0x30
 801094e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010952:	460c      	mov	r4, r1
 8010954:	2c63      	cmp	r4, #99	@ 0x63
 8010956:	f103 33ff 	add.w	r3, r3, #4294967295
 801095a:	4631      	mov	r1, r6
 801095c:	dcf1      	bgt.n	8010942 <__exponent+0x1c>
 801095e:	3130      	adds	r1, #48	@ 0x30
 8010960:	1e94      	subs	r4, r2, #2
 8010962:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010966:	1c41      	adds	r1, r0, #1
 8010968:	4623      	mov	r3, r4
 801096a:	42ab      	cmp	r3, r5
 801096c:	d30a      	bcc.n	8010984 <__exponent+0x5e>
 801096e:	f10d 0309 	add.w	r3, sp, #9
 8010972:	1a9b      	subs	r3, r3, r2
 8010974:	42ac      	cmp	r4, r5
 8010976:	bf88      	it	hi
 8010978:	2300      	movhi	r3, #0
 801097a:	3302      	adds	r3, #2
 801097c:	4403      	add	r3, r0
 801097e:	1a18      	subs	r0, r3, r0
 8010980:	b003      	add	sp, #12
 8010982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010984:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010988:	f801 6f01 	strb.w	r6, [r1, #1]!
 801098c:	e7ed      	b.n	801096a <__exponent+0x44>
 801098e:	2330      	movs	r3, #48	@ 0x30
 8010990:	3130      	adds	r1, #48	@ 0x30
 8010992:	7083      	strb	r3, [r0, #2]
 8010994:	70c1      	strb	r1, [r0, #3]
 8010996:	1d03      	adds	r3, r0, #4
 8010998:	e7f1      	b.n	801097e <__exponent+0x58>
	...

0801099c <_printf_float>:
 801099c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a0:	b08d      	sub	sp, #52	@ 0x34
 80109a2:	460c      	mov	r4, r1
 80109a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80109a8:	4616      	mov	r6, r2
 80109aa:	461f      	mov	r7, r3
 80109ac:	4605      	mov	r5, r0
 80109ae:	f000 ff2d 	bl	801180c <_localeconv_r>
 80109b2:	6803      	ldr	r3, [r0, #0]
 80109b4:	9304      	str	r3, [sp, #16]
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7ef fc82 	bl	80002c0 <strlen>
 80109bc:	2300      	movs	r3, #0
 80109be:	930a      	str	r3, [sp, #40]	@ 0x28
 80109c0:	f8d8 3000 	ldr.w	r3, [r8]
 80109c4:	9005      	str	r0, [sp, #20]
 80109c6:	3307      	adds	r3, #7
 80109c8:	f023 0307 	bic.w	r3, r3, #7
 80109cc:	f103 0208 	add.w	r2, r3, #8
 80109d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80109d4:	f8d4 b000 	ldr.w	fp, [r4]
 80109d8:	f8c8 2000 	str.w	r2, [r8]
 80109dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80109e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80109e4:	9307      	str	r3, [sp, #28]
 80109e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80109ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80109ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80109f2:	4b9c      	ldr	r3, [pc, #624]	@ (8010c64 <_printf_float+0x2c8>)
 80109f4:	f04f 32ff 	mov.w	r2, #4294967295
 80109f8:	f7f0 f8c0 	bl	8000b7c <__aeabi_dcmpun>
 80109fc:	bb70      	cbnz	r0, 8010a5c <_printf_float+0xc0>
 80109fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010a02:	4b98      	ldr	r3, [pc, #608]	@ (8010c64 <_printf_float+0x2c8>)
 8010a04:	f04f 32ff 	mov.w	r2, #4294967295
 8010a08:	f7f0 f89a 	bl	8000b40 <__aeabi_dcmple>
 8010a0c:	bb30      	cbnz	r0, 8010a5c <_printf_float+0xc0>
 8010a0e:	2200      	movs	r2, #0
 8010a10:	2300      	movs	r3, #0
 8010a12:	4640      	mov	r0, r8
 8010a14:	4649      	mov	r1, r9
 8010a16:	f7f0 f889 	bl	8000b2c <__aeabi_dcmplt>
 8010a1a:	b110      	cbz	r0, 8010a22 <_printf_float+0x86>
 8010a1c:	232d      	movs	r3, #45	@ 0x2d
 8010a1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a22:	4a91      	ldr	r2, [pc, #580]	@ (8010c68 <_printf_float+0x2cc>)
 8010a24:	4b91      	ldr	r3, [pc, #580]	@ (8010c6c <_printf_float+0x2d0>)
 8010a26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010a2a:	bf94      	ite	ls
 8010a2c:	4690      	movls	r8, r2
 8010a2e:	4698      	movhi	r8, r3
 8010a30:	2303      	movs	r3, #3
 8010a32:	6123      	str	r3, [r4, #16]
 8010a34:	f02b 0304 	bic.w	r3, fp, #4
 8010a38:	6023      	str	r3, [r4, #0]
 8010a3a:	f04f 0900 	mov.w	r9, #0
 8010a3e:	9700      	str	r7, [sp, #0]
 8010a40:	4633      	mov	r3, r6
 8010a42:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010a44:	4621      	mov	r1, r4
 8010a46:	4628      	mov	r0, r5
 8010a48:	f000 f9d2 	bl	8010df0 <_printf_common>
 8010a4c:	3001      	adds	r0, #1
 8010a4e:	f040 808d 	bne.w	8010b6c <_printf_float+0x1d0>
 8010a52:	f04f 30ff 	mov.w	r0, #4294967295
 8010a56:	b00d      	add	sp, #52	@ 0x34
 8010a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a5c:	4642      	mov	r2, r8
 8010a5e:	464b      	mov	r3, r9
 8010a60:	4640      	mov	r0, r8
 8010a62:	4649      	mov	r1, r9
 8010a64:	f7f0 f88a 	bl	8000b7c <__aeabi_dcmpun>
 8010a68:	b140      	cbz	r0, 8010a7c <_printf_float+0xe0>
 8010a6a:	464b      	mov	r3, r9
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	bfbc      	itt	lt
 8010a70:	232d      	movlt	r3, #45	@ 0x2d
 8010a72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010a76:	4a7e      	ldr	r2, [pc, #504]	@ (8010c70 <_printf_float+0x2d4>)
 8010a78:	4b7e      	ldr	r3, [pc, #504]	@ (8010c74 <_printf_float+0x2d8>)
 8010a7a:	e7d4      	b.n	8010a26 <_printf_float+0x8a>
 8010a7c:	6863      	ldr	r3, [r4, #4]
 8010a7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010a82:	9206      	str	r2, [sp, #24]
 8010a84:	1c5a      	adds	r2, r3, #1
 8010a86:	d13b      	bne.n	8010b00 <_printf_float+0x164>
 8010a88:	2306      	movs	r3, #6
 8010a8a:	6063      	str	r3, [r4, #4]
 8010a8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010a90:	2300      	movs	r3, #0
 8010a92:	6022      	str	r2, [r4, #0]
 8010a94:	9303      	str	r3, [sp, #12]
 8010a96:	ab0a      	add	r3, sp, #40	@ 0x28
 8010a98:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010a9c:	ab09      	add	r3, sp, #36	@ 0x24
 8010a9e:	9300      	str	r3, [sp, #0]
 8010aa0:	6861      	ldr	r1, [r4, #4]
 8010aa2:	ec49 8b10 	vmov	d0, r8, r9
 8010aa6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010aaa:	4628      	mov	r0, r5
 8010aac:	f7ff fed6 	bl	801085c <__cvt>
 8010ab0:	9b06      	ldr	r3, [sp, #24]
 8010ab2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010ab4:	2b47      	cmp	r3, #71	@ 0x47
 8010ab6:	4680      	mov	r8, r0
 8010ab8:	d129      	bne.n	8010b0e <_printf_float+0x172>
 8010aba:	1cc8      	adds	r0, r1, #3
 8010abc:	db02      	blt.n	8010ac4 <_printf_float+0x128>
 8010abe:	6863      	ldr	r3, [r4, #4]
 8010ac0:	4299      	cmp	r1, r3
 8010ac2:	dd41      	ble.n	8010b48 <_printf_float+0x1ac>
 8010ac4:	f1aa 0a02 	sub.w	sl, sl, #2
 8010ac8:	fa5f fa8a 	uxtb.w	sl, sl
 8010acc:	3901      	subs	r1, #1
 8010ace:	4652      	mov	r2, sl
 8010ad0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010ad4:	9109      	str	r1, [sp, #36]	@ 0x24
 8010ad6:	f7ff ff26 	bl	8010926 <__exponent>
 8010ada:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010adc:	1813      	adds	r3, r2, r0
 8010ade:	2a01      	cmp	r2, #1
 8010ae0:	4681      	mov	r9, r0
 8010ae2:	6123      	str	r3, [r4, #16]
 8010ae4:	dc02      	bgt.n	8010aec <_printf_float+0x150>
 8010ae6:	6822      	ldr	r2, [r4, #0]
 8010ae8:	07d2      	lsls	r2, r2, #31
 8010aea:	d501      	bpl.n	8010af0 <_printf_float+0x154>
 8010aec:	3301      	adds	r3, #1
 8010aee:	6123      	str	r3, [r4, #16]
 8010af0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d0a2      	beq.n	8010a3e <_printf_float+0xa2>
 8010af8:	232d      	movs	r3, #45	@ 0x2d
 8010afa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010afe:	e79e      	b.n	8010a3e <_printf_float+0xa2>
 8010b00:	9a06      	ldr	r2, [sp, #24]
 8010b02:	2a47      	cmp	r2, #71	@ 0x47
 8010b04:	d1c2      	bne.n	8010a8c <_printf_float+0xf0>
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d1c0      	bne.n	8010a8c <_printf_float+0xf0>
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	e7bd      	b.n	8010a8a <_printf_float+0xee>
 8010b0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010b12:	d9db      	bls.n	8010acc <_printf_float+0x130>
 8010b14:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010b18:	d118      	bne.n	8010b4c <_printf_float+0x1b0>
 8010b1a:	2900      	cmp	r1, #0
 8010b1c:	6863      	ldr	r3, [r4, #4]
 8010b1e:	dd0b      	ble.n	8010b38 <_printf_float+0x19c>
 8010b20:	6121      	str	r1, [r4, #16]
 8010b22:	b913      	cbnz	r3, 8010b2a <_printf_float+0x18e>
 8010b24:	6822      	ldr	r2, [r4, #0]
 8010b26:	07d0      	lsls	r0, r2, #31
 8010b28:	d502      	bpl.n	8010b30 <_printf_float+0x194>
 8010b2a:	3301      	adds	r3, #1
 8010b2c:	440b      	add	r3, r1
 8010b2e:	6123      	str	r3, [r4, #16]
 8010b30:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010b32:	f04f 0900 	mov.w	r9, #0
 8010b36:	e7db      	b.n	8010af0 <_printf_float+0x154>
 8010b38:	b913      	cbnz	r3, 8010b40 <_printf_float+0x1a4>
 8010b3a:	6822      	ldr	r2, [r4, #0]
 8010b3c:	07d2      	lsls	r2, r2, #31
 8010b3e:	d501      	bpl.n	8010b44 <_printf_float+0x1a8>
 8010b40:	3302      	adds	r3, #2
 8010b42:	e7f4      	b.n	8010b2e <_printf_float+0x192>
 8010b44:	2301      	movs	r3, #1
 8010b46:	e7f2      	b.n	8010b2e <_printf_float+0x192>
 8010b48:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010b4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b4e:	4299      	cmp	r1, r3
 8010b50:	db05      	blt.n	8010b5e <_printf_float+0x1c2>
 8010b52:	6823      	ldr	r3, [r4, #0]
 8010b54:	6121      	str	r1, [r4, #16]
 8010b56:	07d8      	lsls	r0, r3, #31
 8010b58:	d5ea      	bpl.n	8010b30 <_printf_float+0x194>
 8010b5a:	1c4b      	adds	r3, r1, #1
 8010b5c:	e7e7      	b.n	8010b2e <_printf_float+0x192>
 8010b5e:	2900      	cmp	r1, #0
 8010b60:	bfd4      	ite	le
 8010b62:	f1c1 0202 	rsble	r2, r1, #2
 8010b66:	2201      	movgt	r2, #1
 8010b68:	4413      	add	r3, r2
 8010b6a:	e7e0      	b.n	8010b2e <_printf_float+0x192>
 8010b6c:	6823      	ldr	r3, [r4, #0]
 8010b6e:	055a      	lsls	r2, r3, #21
 8010b70:	d407      	bmi.n	8010b82 <_printf_float+0x1e6>
 8010b72:	6923      	ldr	r3, [r4, #16]
 8010b74:	4642      	mov	r2, r8
 8010b76:	4631      	mov	r1, r6
 8010b78:	4628      	mov	r0, r5
 8010b7a:	47b8      	blx	r7
 8010b7c:	3001      	adds	r0, #1
 8010b7e:	d12b      	bne.n	8010bd8 <_printf_float+0x23c>
 8010b80:	e767      	b.n	8010a52 <_printf_float+0xb6>
 8010b82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010b86:	f240 80dd 	bls.w	8010d44 <_printf_float+0x3a8>
 8010b8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010b8e:	2200      	movs	r2, #0
 8010b90:	2300      	movs	r3, #0
 8010b92:	f7ef ffc1 	bl	8000b18 <__aeabi_dcmpeq>
 8010b96:	2800      	cmp	r0, #0
 8010b98:	d033      	beq.n	8010c02 <_printf_float+0x266>
 8010b9a:	4a37      	ldr	r2, [pc, #220]	@ (8010c78 <_printf_float+0x2dc>)
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	4631      	mov	r1, r6
 8010ba0:	4628      	mov	r0, r5
 8010ba2:	47b8      	blx	r7
 8010ba4:	3001      	adds	r0, #1
 8010ba6:	f43f af54 	beq.w	8010a52 <_printf_float+0xb6>
 8010baa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010bae:	4543      	cmp	r3, r8
 8010bb0:	db02      	blt.n	8010bb8 <_printf_float+0x21c>
 8010bb2:	6823      	ldr	r3, [r4, #0]
 8010bb4:	07d8      	lsls	r0, r3, #31
 8010bb6:	d50f      	bpl.n	8010bd8 <_printf_float+0x23c>
 8010bb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010bbc:	4631      	mov	r1, r6
 8010bbe:	4628      	mov	r0, r5
 8010bc0:	47b8      	blx	r7
 8010bc2:	3001      	adds	r0, #1
 8010bc4:	f43f af45 	beq.w	8010a52 <_printf_float+0xb6>
 8010bc8:	f04f 0900 	mov.w	r9, #0
 8010bcc:	f108 38ff 	add.w	r8, r8, #4294967295
 8010bd0:	f104 0a1a 	add.w	sl, r4, #26
 8010bd4:	45c8      	cmp	r8, r9
 8010bd6:	dc09      	bgt.n	8010bec <_printf_float+0x250>
 8010bd8:	6823      	ldr	r3, [r4, #0]
 8010bda:	079b      	lsls	r3, r3, #30
 8010bdc:	f100 8103 	bmi.w	8010de6 <_printf_float+0x44a>
 8010be0:	68e0      	ldr	r0, [r4, #12]
 8010be2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010be4:	4298      	cmp	r0, r3
 8010be6:	bfb8      	it	lt
 8010be8:	4618      	movlt	r0, r3
 8010bea:	e734      	b.n	8010a56 <_printf_float+0xba>
 8010bec:	2301      	movs	r3, #1
 8010bee:	4652      	mov	r2, sl
 8010bf0:	4631      	mov	r1, r6
 8010bf2:	4628      	mov	r0, r5
 8010bf4:	47b8      	blx	r7
 8010bf6:	3001      	adds	r0, #1
 8010bf8:	f43f af2b 	beq.w	8010a52 <_printf_float+0xb6>
 8010bfc:	f109 0901 	add.w	r9, r9, #1
 8010c00:	e7e8      	b.n	8010bd4 <_printf_float+0x238>
 8010c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	dc39      	bgt.n	8010c7c <_printf_float+0x2e0>
 8010c08:	4a1b      	ldr	r2, [pc, #108]	@ (8010c78 <_printf_float+0x2dc>)
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	4631      	mov	r1, r6
 8010c0e:	4628      	mov	r0, r5
 8010c10:	47b8      	blx	r7
 8010c12:	3001      	adds	r0, #1
 8010c14:	f43f af1d 	beq.w	8010a52 <_printf_float+0xb6>
 8010c18:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010c1c:	ea59 0303 	orrs.w	r3, r9, r3
 8010c20:	d102      	bne.n	8010c28 <_printf_float+0x28c>
 8010c22:	6823      	ldr	r3, [r4, #0]
 8010c24:	07d9      	lsls	r1, r3, #31
 8010c26:	d5d7      	bpl.n	8010bd8 <_printf_float+0x23c>
 8010c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c2c:	4631      	mov	r1, r6
 8010c2e:	4628      	mov	r0, r5
 8010c30:	47b8      	blx	r7
 8010c32:	3001      	adds	r0, #1
 8010c34:	f43f af0d 	beq.w	8010a52 <_printf_float+0xb6>
 8010c38:	f04f 0a00 	mov.w	sl, #0
 8010c3c:	f104 0b1a 	add.w	fp, r4, #26
 8010c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c42:	425b      	negs	r3, r3
 8010c44:	4553      	cmp	r3, sl
 8010c46:	dc01      	bgt.n	8010c4c <_printf_float+0x2b0>
 8010c48:	464b      	mov	r3, r9
 8010c4a:	e793      	b.n	8010b74 <_printf_float+0x1d8>
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	465a      	mov	r2, fp
 8010c50:	4631      	mov	r1, r6
 8010c52:	4628      	mov	r0, r5
 8010c54:	47b8      	blx	r7
 8010c56:	3001      	adds	r0, #1
 8010c58:	f43f aefb 	beq.w	8010a52 <_printf_float+0xb6>
 8010c5c:	f10a 0a01 	add.w	sl, sl, #1
 8010c60:	e7ee      	b.n	8010c40 <_printf_float+0x2a4>
 8010c62:	bf00      	nop
 8010c64:	7fefffff 	.word	0x7fefffff
 8010c68:	08016f88 	.word	0x08016f88
 8010c6c:	08016f8c 	.word	0x08016f8c
 8010c70:	08016f90 	.word	0x08016f90
 8010c74:	08016f94 	.word	0x08016f94
 8010c78:	08017328 	.word	0x08017328
 8010c7c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010c7e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010c82:	4553      	cmp	r3, sl
 8010c84:	bfa8      	it	ge
 8010c86:	4653      	movge	r3, sl
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	4699      	mov	r9, r3
 8010c8c:	dc36      	bgt.n	8010cfc <_printf_float+0x360>
 8010c8e:	f04f 0b00 	mov.w	fp, #0
 8010c92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010c96:	f104 021a 	add.w	r2, r4, #26
 8010c9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010c9c:	9306      	str	r3, [sp, #24]
 8010c9e:	eba3 0309 	sub.w	r3, r3, r9
 8010ca2:	455b      	cmp	r3, fp
 8010ca4:	dc31      	bgt.n	8010d0a <_printf_float+0x36e>
 8010ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ca8:	459a      	cmp	sl, r3
 8010caa:	dc3a      	bgt.n	8010d22 <_printf_float+0x386>
 8010cac:	6823      	ldr	r3, [r4, #0]
 8010cae:	07da      	lsls	r2, r3, #31
 8010cb0:	d437      	bmi.n	8010d22 <_printf_float+0x386>
 8010cb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cb4:	ebaa 0903 	sub.w	r9, sl, r3
 8010cb8:	9b06      	ldr	r3, [sp, #24]
 8010cba:	ebaa 0303 	sub.w	r3, sl, r3
 8010cbe:	4599      	cmp	r9, r3
 8010cc0:	bfa8      	it	ge
 8010cc2:	4699      	movge	r9, r3
 8010cc4:	f1b9 0f00 	cmp.w	r9, #0
 8010cc8:	dc33      	bgt.n	8010d32 <_printf_float+0x396>
 8010cca:	f04f 0800 	mov.w	r8, #0
 8010cce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010cd2:	f104 0b1a 	add.w	fp, r4, #26
 8010cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cd8:	ebaa 0303 	sub.w	r3, sl, r3
 8010cdc:	eba3 0309 	sub.w	r3, r3, r9
 8010ce0:	4543      	cmp	r3, r8
 8010ce2:	f77f af79 	ble.w	8010bd8 <_printf_float+0x23c>
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	465a      	mov	r2, fp
 8010cea:	4631      	mov	r1, r6
 8010cec:	4628      	mov	r0, r5
 8010cee:	47b8      	blx	r7
 8010cf0:	3001      	adds	r0, #1
 8010cf2:	f43f aeae 	beq.w	8010a52 <_printf_float+0xb6>
 8010cf6:	f108 0801 	add.w	r8, r8, #1
 8010cfa:	e7ec      	b.n	8010cd6 <_printf_float+0x33a>
 8010cfc:	4642      	mov	r2, r8
 8010cfe:	4631      	mov	r1, r6
 8010d00:	4628      	mov	r0, r5
 8010d02:	47b8      	blx	r7
 8010d04:	3001      	adds	r0, #1
 8010d06:	d1c2      	bne.n	8010c8e <_printf_float+0x2f2>
 8010d08:	e6a3      	b.n	8010a52 <_printf_float+0xb6>
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	4631      	mov	r1, r6
 8010d0e:	4628      	mov	r0, r5
 8010d10:	9206      	str	r2, [sp, #24]
 8010d12:	47b8      	blx	r7
 8010d14:	3001      	adds	r0, #1
 8010d16:	f43f ae9c 	beq.w	8010a52 <_printf_float+0xb6>
 8010d1a:	9a06      	ldr	r2, [sp, #24]
 8010d1c:	f10b 0b01 	add.w	fp, fp, #1
 8010d20:	e7bb      	b.n	8010c9a <_printf_float+0x2fe>
 8010d22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d26:	4631      	mov	r1, r6
 8010d28:	4628      	mov	r0, r5
 8010d2a:	47b8      	blx	r7
 8010d2c:	3001      	adds	r0, #1
 8010d2e:	d1c0      	bne.n	8010cb2 <_printf_float+0x316>
 8010d30:	e68f      	b.n	8010a52 <_printf_float+0xb6>
 8010d32:	9a06      	ldr	r2, [sp, #24]
 8010d34:	464b      	mov	r3, r9
 8010d36:	4442      	add	r2, r8
 8010d38:	4631      	mov	r1, r6
 8010d3a:	4628      	mov	r0, r5
 8010d3c:	47b8      	blx	r7
 8010d3e:	3001      	adds	r0, #1
 8010d40:	d1c3      	bne.n	8010cca <_printf_float+0x32e>
 8010d42:	e686      	b.n	8010a52 <_printf_float+0xb6>
 8010d44:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010d48:	f1ba 0f01 	cmp.w	sl, #1
 8010d4c:	dc01      	bgt.n	8010d52 <_printf_float+0x3b6>
 8010d4e:	07db      	lsls	r3, r3, #31
 8010d50:	d536      	bpl.n	8010dc0 <_printf_float+0x424>
 8010d52:	2301      	movs	r3, #1
 8010d54:	4642      	mov	r2, r8
 8010d56:	4631      	mov	r1, r6
 8010d58:	4628      	mov	r0, r5
 8010d5a:	47b8      	blx	r7
 8010d5c:	3001      	adds	r0, #1
 8010d5e:	f43f ae78 	beq.w	8010a52 <_printf_float+0xb6>
 8010d62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d66:	4631      	mov	r1, r6
 8010d68:	4628      	mov	r0, r5
 8010d6a:	47b8      	blx	r7
 8010d6c:	3001      	adds	r0, #1
 8010d6e:	f43f ae70 	beq.w	8010a52 <_printf_float+0xb6>
 8010d72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010d76:	2200      	movs	r2, #0
 8010d78:	2300      	movs	r3, #0
 8010d7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010d7e:	f7ef fecb 	bl	8000b18 <__aeabi_dcmpeq>
 8010d82:	b9c0      	cbnz	r0, 8010db6 <_printf_float+0x41a>
 8010d84:	4653      	mov	r3, sl
 8010d86:	f108 0201 	add.w	r2, r8, #1
 8010d8a:	4631      	mov	r1, r6
 8010d8c:	4628      	mov	r0, r5
 8010d8e:	47b8      	blx	r7
 8010d90:	3001      	adds	r0, #1
 8010d92:	d10c      	bne.n	8010dae <_printf_float+0x412>
 8010d94:	e65d      	b.n	8010a52 <_printf_float+0xb6>
 8010d96:	2301      	movs	r3, #1
 8010d98:	465a      	mov	r2, fp
 8010d9a:	4631      	mov	r1, r6
 8010d9c:	4628      	mov	r0, r5
 8010d9e:	47b8      	blx	r7
 8010da0:	3001      	adds	r0, #1
 8010da2:	f43f ae56 	beq.w	8010a52 <_printf_float+0xb6>
 8010da6:	f108 0801 	add.w	r8, r8, #1
 8010daa:	45d0      	cmp	r8, sl
 8010dac:	dbf3      	blt.n	8010d96 <_printf_float+0x3fa>
 8010dae:	464b      	mov	r3, r9
 8010db0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010db4:	e6df      	b.n	8010b76 <_printf_float+0x1da>
 8010db6:	f04f 0800 	mov.w	r8, #0
 8010dba:	f104 0b1a 	add.w	fp, r4, #26
 8010dbe:	e7f4      	b.n	8010daa <_printf_float+0x40e>
 8010dc0:	2301      	movs	r3, #1
 8010dc2:	4642      	mov	r2, r8
 8010dc4:	e7e1      	b.n	8010d8a <_printf_float+0x3ee>
 8010dc6:	2301      	movs	r3, #1
 8010dc8:	464a      	mov	r2, r9
 8010dca:	4631      	mov	r1, r6
 8010dcc:	4628      	mov	r0, r5
 8010dce:	47b8      	blx	r7
 8010dd0:	3001      	adds	r0, #1
 8010dd2:	f43f ae3e 	beq.w	8010a52 <_printf_float+0xb6>
 8010dd6:	f108 0801 	add.w	r8, r8, #1
 8010dda:	68e3      	ldr	r3, [r4, #12]
 8010ddc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010dde:	1a5b      	subs	r3, r3, r1
 8010de0:	4543      	cmp	r3, r8
 8010de2:	dcf0      	bgt.n	8010dc6 <_printf_float+0x42a>
 8010de4:	e6fc      	b.n	8010be0 <_printf_float+0x244>
 8010de6:	f04f 0800 	mov.w	r8, #0
 8010dea:	f104 0919 	add.w	r9, r4, #25
 8010dee:	e7f4      	b.n	8010dda <_printf_float+0x43e>

08010df0 <_printf_common>:
 8010df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010df4:	4616      	mov	r6, r2
 8010df6:	4698      	mov	r8, r3
 8010df8:	688a      	ldr	r2, [r1, #8]
 8010dfa:	690b      	ldr	r3, [r1, #16]
 8010dfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010e00:	4293      	cmp	r3, r2
 8010e02:	bfb8      	it	lt
 8010e04:	4613      	movlt	r3, r2
 8010e06:	6033      	str	r3, [r6, #0]
 8010e08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010e0c:	4607      	mov	r7, r0
 8010e0e:	460c      	mov	r4, r1
 8010e10:	b10a      	cbz	r2, 8010e16 <_printf_common+0x26>
 8010e12:	3301      	adds	r3, #1
 8010e14:	6033      	str	r3, [r6, #0]
 8010e16:	6823      	ldr	r3, [r4, #0]
 8010e18:	0699      	lsls	r1, r3, #26
 8010e1a:	bf42      	ittt	mi
 8010e1c:	6833      	ldrmi	r3, [r6, #0]
 8010e1e:	3302      	addmi	r3, #2
 8010e20:	6033      	strmi	r3, [r6, #0]
 8010e22:	6825      	ldr	r5, [r4, #0]
 8010e24:	f015 0506 	ands.w	r5, r5, #6
 8010e28:	d106      	bne.n	8010e38 <_printf_common+0x48>
 8010e2a:	f104 0a19 	add.w	sl, r4, #25
 8010e2e:	68e3      	ldr	r3, [r4, #12]
 8010e30:	6832      	ldr	r2, [r6, #0]
 8010e32:	1a9b      	subs	r3, r3, r2
 8010e34:	42ab      	cmp	r3, r5
 8010e36:	dc26      	bgt.n	8010e86 <_printf_common+0x96>
 8010e38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010e3c:	6822      	ldr	r2, [r4, #0]
 8010e3e:	3b00      	subs	r3, #0
 8010e40:	bf18      	it	ne
 8010e42:	2301      	movne	r3, #1
 8010e44:	0692      	lsls	r2, r2, #26
 8010e46:	d42b      	bmi.n	8010ea0 <_printf_common+0xb0>
 8010e48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010e4c:	4641      	mov	r1, r8
 8010e4e:	4638      	mov	r0, r7
 8010e50:	47c8      	blx	r9
 8010e52:	3001      	adds	r0, #1
 8010e54:	d01e      	beq.n	8010e94 <_printf_common+0xa4>
 8010e56:	6823      	ldr	r3, [r4, #0]
 8010e58:	6922      	ldr	r2, [r4, #16]
 8010e5a:	f003 0306 	and.w	r3, r3, #6
 8010e5e:	2b04      	cmp	r3, #4
 8010e60:	bf02      	ittt	eq
 8010e62:	68e5      	ldreq	r5, [r4, #12]
 8010e64:	6833      	ldreq	r3, [r6, #0]
 8010e66:	1aed      	subeq	r5, r5, r3
 8010e68:	68a3      	ldr	r3, [r4, #8]
 8010e6a:	bf0c      	ite	eq
 8010e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010e70:	2500      	movne	r5, #0
 8010e72:	4293      	cmp	r3, r2
 8010e74:	bfc4      	itt	gt
 8010e76:	1a9b      	subgt	r3, r3, r2
 8010e78:	18ed      	addgt	r5, r5, r3
 8010e7a:	2600      	movs	r6, #0
 8010e7c:	341a      	adds	r4, #26
 8010e7e:	42b5      	cmp	r5, r6
 8010e80:	d11a      	bne.n	8010eb8 <_printf_common+0xc8>
 8010e82:	2000      	movs	r0, #0
 8010e84:	e008      	b.n	8010e98 <_printf_common+0xa8>
 8010e86:	2301      	movs	r3, #1
 8010e88:	4652      	mov	r2, sl
 8010e8a:	4641      	mov	r1, r8
 8010e8c:	4638      	mov	r0, r7
 8010e8e:	47c8      	blx	r9
 8010e90:	3001      	adds	r0, #1
 8010e92:	d103      	bne.n	8010e9c <_printf_common+0xac>
 8010e94:	f04f 30ff 	mov.w	r0, #4294967295
 8010e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e9c:	3501      	adds	r5, #1
 8010e9e:	e7c6      	b.n	8010e2e <_printf_common+0x3e>
 8010ea0:	18e1      	adds	r1, r4, r3
 8010ea2:	1c5a      	adds	r2, r3, #1
 8010ea4:	2030      	movs	r0, #48	@ 0x30
 8010ea6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010eaa:	4422      	add	r2, r4
 8010eac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010eb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010eb4:	3302      	adds	r3, #2
 8010eb6:	e7c7      	b.n	8010e48 <_printf_common+0x58>
 8010eb8:	2301      	movs	r3, #1
 8010eba:	4622      	mov	r2, r4
 8010ebc:	4641      	mov	r1, r8
 8010ebe:	4638      	mov	r0, r7
 8010ec0:	47c8      	blx	r9
 8010ec2:	3001      	adds	r0, #1
 8010ec4:	d0e6      	beq.n	8010e94 <_printf_common+0xa4>
 8010ec6:	3601      	adds	r6, #1
 8010ec8:	e7d9      	b.n	8010e7e <_printf_common+0x8e>
	...

08010ecc <_printf_i>:
 8010ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ed0:	7e0f      	ldrb	r7, [r1, #24]
 8010ed2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010ed4:	2f78      	cmp	r7, #120	@ 0x78
 8010ed6:	4691      	mov	r9, r2
 8010ed8:	4680      	mov	r8, r0
 8010eda:	460c      	mov	r4, r1
 8010edc:	469a      	mov	sl, r3
 8010ede:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010ee2:	d807      	bhi.n	8010ef4 <_printf_i+0x28>
 8010ee4:	2f62      	cmp	r7, #98	@ 0x62
 8010ee6:	d80a      	bhi.n	8010efe <_printf_i+0x32>
 8010ee8:	2f00      	cmp	r7, #0
 8010eea:	f000 80d2 	beq.w	8011092 <_printf_i+0x1c6>
 8010eee:	2f58      	cmp	r7, #88	@ 0x58
 8010ef0:	f000 80b9 	beq.w	8011066 <_printf_i+0x19a>
 8010ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010ef8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010efc:	e03a      	b.n	8010f74 <_printf_i+0xa8>
 8010efe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010f02:	2b15      	cmp	r3, #21
 8010f04:	d8f6      	bhi.n	8010ef4 <_printf_i+0x28>
 8010f06:	a101      	add	r1, pc, #4	@ (adr r1, 8010f0c <_printf_i+0x40>)
 8010f08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010f0c:	08010f65 	.word	0x08010f65
 8010f10:	08010f79 	.word	0x08010f79
 8010f14:	08010ef5 	.word	0x08010ef5
 8010f18:	08010ef5 	.word	0x08010ef5
 8010f1c:	08010ef5 	.word	0x08010ef5
 8010f20:	08010ef5 	.word	0x08010ef5
 8010f24:	08010f79 	.word	0x08010f79
 8010f28:	08010ef5 	.word	0x08010ef5
 8010f2c:	08010ef5 	.word	0x08010ef5
 8010f30:	08010ef5 	.word	0x08010ef5
 8010f34:	08010ef5 	.word	0x08010ef5
 8010f38:	08011079 	.word	0x08011079
 8010f3c:	08010fa3 	.word	0x08010fa3
 8010f40:	08011033 	.word	0x08011033
 8010f44:	08010ef5 	.word	0x08010ef5
 8010f48:	08010ef5 	.word	0x08010ef5
 8010f4c:	0801109b 	.word	0x0801109b
 8010f50:	08010ef5 	.word	0x08010ef5
 8010f54:	08010fa3 	.word	0x08010fa3
 8010f58:	08010ef5 	.word	0x08010ef5
 8010f5c:	08010ef5 	.word	0x08010ef5
 8010f60:	0801103b 	.word	0x0801103b
 8010f64:	6833      	ldr	r3, [r6, #0]
 8010f66:	1d1a      	adds	r2, r3, #4
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	6032      	str	r2, [r6, #0]
 8010f6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010f70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010f74:	2301      	movs	r3, #1
 8010f76:	e09d      	b.n	80110b4 <_printf_i+0x1e8>
 8010f78:	6833      	ldr	r3, [r6, #0]
 8010f7a:	6820      	ldr	r0, [r4, #0]
 8010f7c:	1d19      	adds	r1, r3, #4
 8010f7e:	6031      	str	r1, [r6, #0]
 8010f80:	0606      	lsls	r6, r0, #24
 8010f82:	d501      	bpl.n	8010f88 <_printf_i+0xbc>
 8010f84:	681d      	ldr	r5, [r3, #0]
 8010f86:	e003      	b.n	8010f90 <_printf_i+0xc4>
 8010f88:	0645      	lsls	r5, r0, #25
 8010f8a:	d5fb      	bpl.n	8010f84 <_printf_i+0xb8>
 8010f8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010f90:	2d00      	cmp	r5, #0
 8010f92:	da03      	bge.n	8010f9c <_printf_i+0xd0>
 8010f94:	232d      	movs	r3, #45	@ 0x2d
 8010f96:	426d      	negs	r5, r5
 8010f98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f9c:	4859      	ldr	r0, [pc, #356]	@ (8011104 <_printf_i+0x238>)
 8010f9e:	230a      	movs	r3, #10
 8010fa0:	e011      	b.n	8010fc6 <_printf_i+0xfa>
 8010fa2:	6821      	ldr	r1, [r4, #0]
 8010fa4:	6833      	ldr	r3, [r6, #0]
 8010fa6:	0608      	lsls	r0, r1, #24
 8010fa8:	f853 5b04 	ldr.w	r5, [r3], #4
 8010fac:	d402      	bmi.n	8010fb4 <_printf_i+0xe8>
 8010fae:	0649      	lsls	r1, r1, #25
 8010fb0:	bf48      	it	mi
 8010fb2:	b2ad      	uxthmi	r5, r5
 8010fb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8010fb6:	4853      	ldr	r0, [pc, #332]	@ (8011104 <_printf_i+0x238>)
 8010fb8:	6033      	str	r3, [r6, #0]
 8010fba:	bf14      	ite	ne
 8010fbc:	230a      	movne	r3, #10
 8010fbe:	2308      	moveq	r3, #8
 8010fc0:	2100      	movs	r1, #0
 8010fc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010fc6:	6866      	ldr	r6, [r4, #4]
 8010fc8:	60a6      	str	r6, [r4, #8]
 8010fca:	2e00      	cmp	r6, #0
 8010fcc:	bfa2      	ittt	ge
 8010fce:	6821      	ldrge	r1, [r4, #0]
 8010fd0:	f021 0104 	bicge.w	r1, r1, #4
 8010fd4:	6021      	strge	r1, [r4, #0]
 8010fd6:	b90d      	cbnz	r5, 8010fdc <_printf_i+0x110>
 8010fd8:	2e00      	cmp	r6, #0
 8010fda:	d04b      	beq.n	8011074 <_printf_i+0x1a8>
 8010fdc:	4616      	mov	r6, r2
 8010fde:	fbb5 f1f3 	udiv	r1, r5, r3
 8010fe2:	fb03 5711 	mls	r7, r3, r1, r5
 8010fe6:	5dc7      	ldrb	r7, [r0, r7]
 8010fe8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010fec:	462f      	mov	r7, r5
 8010fee:	42bb      	cmp	r3, r7
 8010ff0:	460d      	mov	r5, r1
 8010ff2:	d9f4      	bls.n	8010fde <_printf_i+0x112>
 8010ff4:	2b08      	cmp	r3, #8
 8010ff6:	d10b      	bne.n	8011010 <_printf_i+0x144>
 8010ff8:	6823      	ldr	r3, [r4, #0]
 8010ffa:	07df      	lsls	r7, r3, #31
 8010ffc:	d508      	bpl.n	8011010 <_printf_i+0x144>
 8010ffe:	6923      	ldr	r3, [r4, #16]
 8011000:	6861      	ldr	r1, [r4, #4]
 8011002:	4299      	cmp	r1, r3
 8011004:	bfde      	ittt	le
 8011006:	2330      	movle	r3, #48	@ 0x30
 8011008:	f806 3c01 	strble.w	r3, [r6, #-1]
 801100c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011010:	1b92      	subs	r2, r2, r6
 8011012:	6122      	str	r2, [r4, #16]
 8011014:	f8cd a000 	str.w	sl, [sp]
 8011018:	464b      	mov	r3, r9
 801101a:	aa03      	add	r2, sp, #12
 801101c:	4621      	mov	r1, r4
 801101e:	4640      	mov	r0, r8
 8011020:	f7ff fee6 	bl	8010df0 <_printf_common>
 8011024:	3001      	adds	r0, #1
 8011026:	d14a      	bne.n	80110be <_printf_i+0x1f2>
 8011028:	f04f 30ff 	mov.w	r0, #4294967295
 801102c:	b004      	add	sp, #16
 801102e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011032:	6823      	ldr	r3, [r4, #0]
 8011034:	f043 0320 	orr.w	r3, r3, #32
 8011038:	6023      	str	r3, [r4, #0]
 801103a:	4833      	ldr	r0, [pc, #204]	@ (8011108 <_printf_i+0x23c>)
 801103c:	2778      	movs	r7, #120	@ 0x78
 801103e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011042:	6823      	ldr	r3, [r4, #0]
 8011044:	6831      	ldr	r1, [r6, #0]
 8011046:	061f      	lsls	r7, r3, #24
 8011048:	f851 5b04 	ldr.w	r5, [r1], #4
 801104c:	d402      	bmi.n	8011054 <_printf_i+0x188>
 801104e:	065f      	lsls	r7, r3, #25
 8011050:	bf48      	it	mi
 8011052:	b2ad      	uxthmi	r5, r5
 8011054:	6031      	str	r1, [r6, #0]
 8011056:	07d9      	lsls	r1, r3, #31
 8011058:	bf44      	itt	mi
 801105a:	f043 0320 	orrmi.w	r3, r3, #32
 801105e:	6023      	strmi	r3, [r4, #0]
 8011060:	b11d      	cbz	r5, 801106a <_printf_i+0x19e>
 8011062:	2310      	movs	r3, #16
 8011064:	e7ac      	b.n	8010fc0 <_printf_i+0xf4>
 8011066:	4827      	ldr	r0, [pc, #156]	@ (8011104 <_printf_i+0x238>)
 8011068:	e7e9      	b.n	801103e <_printf_i+0x172>
 801106a:	6823      	ldr	r3, [r4, #0]
 801106c:	f023 0320 	bic.w	r3, r3, #32
 8011070:	6023      	str	r3, [r4, #0]
 8011072:	e7f6      	b.n	8011062 <_printf_i+0x196>
 8011074:	4616      	mov	r6, r2
 8011076:	e7bd      	b.n	8010ff4 <_printf_i+0x128>
 8011078:	6833      	ldr	r3, [r6, #0]
 801107a:	6825      	ldr	r5, [r4, #0]
 801107c:	6961      	ldr	r1, [r4, #20]
 801107e:	1d18      	adds	r0, r3, #4
 8011080:	6030      	str	r0, [r6, #0]
 8011082:	062e      	lsls	r6, r5, #24
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	d501      	bpl.n	801108c <_printf_i+0x1c0>
 8011088:	6019      	str	r1, [r3, #0]
 801108a:	e002      	b.n	8011092 <_printf_i+0x1c6>
 801108c:	0668      	lsls	r0, r5, #25
 801108e:	d5fb      	bpl.n	8011088 <_printf_i+0x1bc>
 8011090:	8019      	strh	r1, [r3, #0]
 8011092:	2300      	movs	r3, #0
 8011094:	6123      	str	r3, [r4, #16]
 8011096:	4616      	mov	r6, r2
 8011098:	e7bc      	b.n	8011014 <_printf_i+0x148>
 801109a:	6833      	ldr	r3, [r6, #0]
 801109c:	1d1a      	adds	r2, r3, #4
 801109e:	6032      	str	r2, [r6, #0]
 80110a0:	681e      	ldr	r6, [r3, #0]
 80110a2:	6862      	ldr	r2, [r4, #4]
 80110a4:	2100      	movs	r1, #0
 80110a6:	4630      	mov	r0, r6
 80110a8:	f7ef f8ba 	bl	8000220 <memchr>
 80110ac:	b108      	cbz	r0, 80110b2 <_printf_i+0x1e6>
 80110ae:	1b80      	subs	r0, r0, r6
 80110b0:	6060      	str	r0, [r4, #4]
 80110b2:	6863      	ldr	r3, [r4, #4]
 80110b4:	6123      	str	r3, [r4, #16]
 80110b6:	2300      	movs	r3, #0
 80110b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80110bc:	e7aa      	b.n	8011014 <_printf_i+0x148>
 80110be:	6923      	ldr	r3, [r4, #16]
 80110c0:	4632      	mov	r2, r6
 80110c2:	4649      	mov	r1, r9
 80110c4:	4640      	mov	r0, r8
 80110c6:	47d0      	blx	sl
 80110c8:	3001      	adds	r0, #1
 80110ca:	d0ad      	beq.n	8011028 <_printf_i+0x15c>
 80110cc:	6823      	ldr	r3, [r4, #0]
 80110ce:	079b      	lsls	r3, r3, #30
 80110d0:	d413      	bmi.n	80110fa <_printf_i+0x22e>
 80110d2:	68e0      	ldr	r0, [r4, #12]
 80110d4:	9b03      	ldr	r3, [sp, #12]
 80110d6:	4298      	cmp	r0, r3
 80110d8:	bfb8      	it	lt
 80110da:	4618      	movlt	r0, r3
 80110dc:	e7a6      	b.n	801102c <_printf_i+0x160>
 80110de:	2301      	movs	r3, #1
 80110e0:	4632      	mov	r2, r6
 80110e2:	4649      	mov	r1, r9
 80110e4:	4640      	mov	r0, r8
 80110e6:	47d0      	blx	sl
 80110e8:	3001      	adds	r0, #1
 80110ea:	d09d      	beq.n	8011028 <_printf_i+0x15c>
 80110ec:	3501      	adds	r5, #1
 80110ee:	68e3      	ldr	r3, [r4, #12]
 80110f0:	9903      	ldr	r1, [sp, #12]
 80110f2:	1a5b      	subs	r3, r3, r1
 80110f4:	42ab      	cmp	r3, r5
 80110f6:	dcf2      	bgt.n	80110de <_printf_i+0x212>
 80110f8:	e7eb      	b.n	80110d2 <_printf_i+0x206>
 80110fa:	2500      	movs	r5, #0
 80110fc:	f104 0619 	add.w	r6, r4, #25
 8011100:	e7f5      	b.n	80110ee <_printf_i+0x222>
 8011102:	bf00      	nop
 8011104:	08016f98 	.word	0x08016f98
 8011108:	08016fa9 	.word	0x08016fa9

0801110c <_scanf_float>:
 801110c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011110:	b087      	sub	sp, #28
 8011112:	4617      	mov	r7, r2
 8011114:	9303      	str	r3, [sp, #12]
 8011116:	688b      	ldr	r3, [r1, #8]
 8011118:	1e5a      	subs	r2, r3, #1
 801111a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801111e:	bf81      	itttt	hi
 8011120:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011124:	eb03 0b05 	addhi.w	fp, r3, r5
 8011128:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801112c:	608b      	strhi	r3, [r1, #8]
 801112e:	680b      	ldr	r3, [r1, #0]
 8011130:	460a      	mov	r2, r1
 8011132:	f04f 0500 	mov.w	r5, #0
 8011136:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801113a:	f842 3b1c 	str.w	r3, [r2], #28
 801113e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011142:	4680      	mov	r8, r0
 8011144:	460c      	mov	r4, r1
 8011146:	bf98      	it	ls
 8011148:	f04f 0b00 	movls.w	fp, #0
 801114c:	9201      	str	r2, [sp, #4]
 801114e:	4616      	mov	r6, r2
 8011150:	46aa      	mov	sl, r5
 8011152:	46a9      	mov	r9, r5
 8011154:	9502      	str	r5, [sp, #8]
 8011156:	68a2      	ldr	r2, [r4, #8]
 8011158:	b152      	cbz	r2, 8011170 <_scanf_float+0x64>
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	781b      	ldrb	r3, [r3, #0]
 801115e:	2b4e      	cmp	r3, #78	@ 0x4e
 8011160:	d864      	bhi.n	801122c <_scanf_float+0x120>
 8011162:	2b40      	cmp	r3, #64	@ 0x40
 8011164:	d83c      	bhi.n	80111e0 <_scanf_float+0xd4>
 8011166:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801116a:	b2c8      	uxtb	r0, r1
 801116c:	280e      	cmp	r0, #14
 801116e:	d93a      	bls.n	80111e6 <_scanf_float+0xda>
 8011170:	f1b9 0f00 	cmp.w	r9, #0
 8011174:	d003      	beq.n	801117e <_scanf_float+0x72>
 8011176:	6823      	ldr	r3, [r4, #0]
 8011178:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801117c:	6023      	str	r3, [r4, #0]
 801117e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011182:	f1ba 0f01 	cmp.w	sl, #1
 8011186:	f200 8117 	bhi.w	80113b8 <_scanf_float+0x2ac>
 801118a:	9b01      	ldr	r3, [sp, #4]
 801118c:	429e      	cmp	r6, r3
 801118e:	f200 8108 	bhi.w	80113a2 <_scanf_float+0x296>
 8011192:	2001      	movs	r0, #1
 8011194:	b007      	add	sp, #28
 8011196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801119a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801119e:	2a0d      	cmp	r2, #13
 80111a0:	d8e6      	bhi.n	8011170 <_scanf_float+0x64>
 80111a2:	a101      	add	r1, pc, #4	@ (adr r1, 80111a8 <_scanf_float+0x9c>)
 80111a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80111a8:	080112ef 	.word	0x080112ef
 80111ac:	08011171 	.word	0x08011171
 80111b0:	08011171 	.word	0x08011171
 80111b4:	08011171 	.word	0x08011171
 80111b8:	0801134f 	.word	0x0801134f
 80111bc:	08011327 	.word	0x08011327
 80111c0:	08011171 	.word	0x08011171
 80111c4:	08011171 	.word	0x08011171
 80111c8:	080112fd 	.word	0x080112fd
 80111cc:	08011171 	.word	0x08011171
 80111d0:	08011171 	.word	0x08011171
 80111d4:	08011171 	.word	0x08011171
 80111d8:	08011171 	.word	0x08011171
 80111dc:	080112b5 	.word	0x080112b5
 80111e0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80111e4:	e7db      	b.n	801119e <_scanf_float+0x92>
 80111e6:	290e      	cmp	r1, #14
 80111e8:	d8c2      	bhi.n	8011170 <_scanf_float+0x64>
 80111ea:	a001      	add	r0, pc, #4	@ (adr r0, 80111f0 <_scanf_float+0xe4>)
 80111ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80111f0:	080112a5 	.word	0x080112a5
 80111f4:	08011171 	.word	0x08011171
 80111f8:	080112a5 	.word	0x080112a5
 80111fc:	0801133b 	.word	0x0801133b
 8011200:	08011171 	.word	0x08011171
 8011204:	0801124d 	.word	0x0801124d
 8011208:	0801128b 	.word	0x0801128b
 801120c:	0801128b 	.word	0x0801128b
 8011210:	0801128b 	.word	0x0801128b
 8011214:	0801128b 	.word	0x0801128b
 8011218:	0801128b 	.word	0x0801128b
 801121c:	0801128b 	.word	0x0801128b
 8011220:	0801128b 	.word	0x0801128b
 8011224:	0801128b 	.word	0x0801128b
 8011228:	0801128b 	.word	0x0801128b
 801122c:	2b6e      	cmp	r3, #110	@ 0x6e
 801122e:	d809      	bhi.n	8011244 <_scanf_float+0x138>
 8011230:	2b60      	cmp	r3, #96	@ 0x60
 8011232:	d8b2      	bhi.n	801119a <_scanf_float+0x8e>
 8011234:	2b54      	cmp	r3, #84	@ 0x54
 8011236:	d07b      	beq.n	8011330 <_scanf_float+0x224>
 8011238:	2b59      	cmp	r3, #89	@ 0x59
 801123a:	d199      	bne.n	8011170 <_scanf_float+0x64>
 801123c:	2d07      	cmp	r5, #7
 801123e:	d197      	bne.n	8011170 <_scanf_float+0x64>
 8011240:	2508      	movs	r5, #8
 8011242:	e02c      	b.n	801129e <_scanf_float+0x192>
 8011244:	2b74      	cmp	r3, #116	@ 0x74
 8011246:	d073      	beq.n	8011330 <_scanf_float+0x224>
 8011248:	2b79      	cmp	r3, #121	@ 0x79
 801124a:	e7f6      	b.n	801123a <_scanf_float+0x12e>
 801124c:	6821      	ldr	r1, [r4, #0]
 801124e:	05c8      	lsls	r0, r1, #23
 8011250:	d51b      	bpl.n	801128a <_scanf_float+0x17e>
 8011252:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8011256:	6021      	str	r1, [r4, #0]
 8011258:	f109 0901 	add.w	r9, r9, #1
 801125c:	f1bb 0f00 	cmp.w	fp, #0
 8011260:	d003      	beq.n	801126a <_scanf_float+0x15e>
 8011262:	3201      	adds	r2, #1
 8011264:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011268:	60a2      	str	r2, [r4, #8]
 801126a:	68a3      	ldr	r3, [r4, #8]
 801126c:	3b01      	subs	r3, #1
 801126e:	60a3      	str	r3, [r4, #8]
 8011270:	6923      	ldr	r3, [r4, #16]
 8011272:	3301      	adds	r3, #1
 8011274:	6123      	str	r3, [r4, #16]
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	3b01      	subs	r3, #1
 801127a:	2b00      	cmp	r3, #0
 801127c:	607b      	str	r3, [r7, #4]
 801127e:	f340 8087 	ble.w	8011390 <_scanf_float+0x284>
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	3301      	adds	r3, #1
 8011286:	603b      	str	r3, [r7, #0]
 8011288:	e765      	b.n	8011156 <_scanf_float+0x4a>
 801128a:	eb1a 0105 	adds.w	r1, sl, r5
 801128e:	f47f af6f 	bne.w	8011170 <_scanf_float+0x64>
 8011292:	6822      	ldr	r2, [r4, #0]
 8011294:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8011298:	6022      	str	r2, [r4, #0]
 801129a:	460d      	mov	r5, r1
 801129c:	468a      	mov	sl, r1
 801129e:	f806 3b01 	strb.w	r3, [r6], #1
 80112a2:	e7e2      	b.n	801126a <_scanf_float+0x15e>
 80112a4:	6822      	ldr	r2, [r4, #0]
 80112a6:	0610      	lsls	r0, r2, #24
 80112a8:	f57f af62 	bpl.w	8011170 <_scanf_float+0x64>
 80112ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80112b0:	6022      	str	r2, [r4, #0]
 80112b2:	e7f4      	b.n	801129e <_scanf_float+0x192>
 80112b4:	f1ba 0f00 	cmp.w	sl, #0
 80112b8:	d10e      	bne.n	80112d8 <_scanf_float+0x1cc>
 80112ba:	f1b9 0f00 	cmp.w	r9, #0
 80112be:	d10e      	bne.n	80112de <_scanf_float+0x1d2>
 80112c0:	6822      	ldr	r2, [r4, #0]
 80112c2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80112c6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80112ca:	d108      	bne.n	80112de <_scanf_float+0x1d2>
 80112cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80112d0:	6022      	str	r2, [r4, #0]
 80112d2:	f04f 0a01 	mov.w	sl, #1
 80112d6:	e7e2      	b.n	801129e <_scanf_float+0x192>
 80112d8:	f1ba 0f02 	cmp.w	sl, #2
 80112dc:	d055      	beq.n	801138a <_scanf_float+0x27e>
 80112de:	2d01      	cmp	r5, #1
 80112e0:	d002      	beq.n	80112e8 <_scanf_float+0x1dc>
 80112e2:	2d04      	cmp	r5, #4
 80112e4:	f47f af44 	bne.w	8011170 <_scanf_float+0x64>
 80112e8:	3501      	adds	r5, #1
 80112ea:	b2ed      	uxtb	r5, r5
 80112ec:	e7d7      	b.n	801129e <_scanf_float+0x192>
 80112ee:	f1ba 0f01 	cmp.w	sl, #1
 80112f2:	f47f af3d 	bne.w	8011170 <_scanf_float+0x64>
 80112f6:	f04f 0a02 	mov.w	sl, #2
 80112fa:	e7d0      	b.n	801129e <_scanf_float+0x192>
 80112fc:	b97d      	cbnz	r5, 801131e <_scanf_float+0x212>
 80112fe:	f1b9 0f00 	cmp.w	r9, #0
 8011302:	f47f af38 	bne.w	8011176 <_scanf_float+0x6a>
 8011306:	6822      	ldr	r2, [r4, #0]
 8011308:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801130c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011310:	f040 8108 	bne.w	8011524 <_scanf_float+0x418>
 8011314:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011318:	6022      	str	r2, [r4, #0]
 801131a:	2501      	movs	r5, #1
 801131c:	e7bf      	b.n	801129e <_scanf_float+0x192>
 801131e:	2d03      	cmp	r5, #3
 8011320:	d0e2      	beq.n	80112e8 <_scanf_float+0x1dc>
 8011322:	2d05      	cmp	r5, #5
 8011324:	e7de      	b.n	80112e4 <_scanf_float+0x1d8>
 8011326:	2d02      	cmp	r5, #2
 8011328:	f47f af22 	bne.w	8011170 <_scanf_float+0x64>
 801132c:	2503      	movs	r5, #3
 801132e:	e7b6      	b.n	801129e <_scanf_float+0x192>
 8011330:	2d06      	cmp	r5, #6
 8011332:	f47f af1d 	bne.w	8011170 <_scanf_float+0x64>
 8011336:	2507      	movs	r5, #7
 8011338:	e7b1      	b.n	801129e <_scanf_float+0x192>
 801133a:	6822      	ldr	r2, [r4, #0]
 801133c:	0591      	lsls	r1, r2, #22
 801133e:	f57f af17 	bpl.w	8011170 <_scanf_float+0x64>
 8011342:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8011346:	6022      	str	r2, [r4, #0]
 8011348:	f8cd 9008 	str.w	r9, [sp, #8]
 801134c:	e7a7      	b.n	801129e <_scanf_float+0x192>
 801134e:	6822      	ldr	r2, [r4, #0]
 8011350:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8011354:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011358:	d006      	beq.n	8011368 <_scanf_float+0x25c>
 801135a:	0550      	lsls	r0, r2, #21
 801135c:	f57f af08 	bpl.w	8011170 <_scanf_float+0x64>
 8011360:	f1b9 0f00 	cmp.w	r9, #0
 8011364:	f000 80de 	beq.w	8011524 <_scanf_float+0x418>
 8011368:	0591      	lsls	r1, r2, #22
 801136a:	bf58      	it	pl
 801136c:	9902      	ldrpl	r1, [sp, #8]
 801136e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011372:	bf58      	it	pl
 8011374:	eba9 0101 	subpl.w	r1, r9, r1
 8011378:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801137c:	bf58      	it	pl
 801137e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011382:	6022      	str	r2, [r4, #0]
 8011384:	f04f 0900 	mov.w	r9, #0
 8011388:	e789      	b.n	801129e <_scanf_float+0x192>
 801138a:	f04f 0a03 	mov.w	sl, #3
 801138e:	e786      	b.n	801129e <_scanf_float+0x192>
 8011390:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011394:	4639      	mov	r1, r7
 8011396:	4640      	mov	r0, r8
 8011398:	4798      	blx	r3
 801139a:	2800      	cmp	r0, #0
 801139c:	f43f aedb 	beq.w	8011156 <_scanf_float+0x4a>
 80113a0:	e6e6      	b.n	8011170 <_scanf_float+0x64>
 80113a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80113a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80113aa:	463a      	mov	r2, r7
 80113ac:	4640      	mov	r0, r8
 80113ae:	4798      	blx	r3
 80113b0:	6923      	ldr	r3, [r4, #16]
 80113b2:	3b01      	subs	r3, #1
 80113b4:	6123      	str	r3, [r4, #16]
 80113b6:	e6e8      	b.n	801118a <_scanf_float+0x7e>
 80113b8:	1e6b      	subs	r3, r5, #1
 80113ba:	2b06      	cmp	r3, #6
 80113bc:	d824      	bhi.n	8011408 <_scanf_float+0x2fc>
 80113be:	2d02      	cmp	r5, #2
 80113c0:	d836      	bhi.n	8011430 <_scanf_float+0x324>
 80113c2:	9b01      	ldr	r3, [sp, #4]
 80113c4:	429e      	cmp	r6, r3
 80113c6:	f67f aee4 	bls.w	8011192 <_scanf_float+0x86>
 80113ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80113ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80113d2:	463a      	mov	r2, r7
 80113d4:	4640      	mov	r0, r8
 80113d6:	4798      	blx	r3
 80113d8:	6923      	ldr	r3, [r4, #16]
 80113da:	3b01      	subs	r3, #1
 80113dc:	6123      	str	r3, [r4, #16]
 80113de:	e7f0      	b.n	80113c2 <_scanf_float+0x2b6>
 80113e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80113e4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80113e8:	463a      	mov	r2, r7
 80113ea:	4640      	mov	r0, r8
 80113ec:	4798      	blx	r3
 80113ee:	6923      	ldr	r3, [r4, #16]
 80113f0:	3b01      	subs	r3, #1
 80113f2:	6123      	str	r3, [r4, #16]
 80113f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80113f8:	fa5f fa8a 	uxtb.w	sl, sl
 80113fc:	f1ba 0f02 	cmp.w	sl, #2
 8011400:	d1ee      	bne.n	80113e0 <_scanf_float+0x2d4>
 8011402:	3d03      	subs	r5, #3
 8011404:	b2ed      	uxtb	r5, r5
 8011406:	1b76      	subs	r6, r6, r5
 8011408:	6823      	ldr	r3, [r4, #0]
 801140a:	05da      	lsls	r2, r3, #23
 801140c:	d530      	bpl.n	8011470 <_scanf_float+0x364>
 801140e:	055b      	lsls	r3, r3, #21
 8011410:	d511      	bpl.n	8011436 <_scanf_float+0x32a>
 8011412:	9b01      	ldr	r3, [sp, #4]
 8011414:	429e      	cmp	r6, r3
 8011416:	f67f aebc 	bls.w	8011192 <_scanf_float+0x86>
 801141a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801141e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011422:	463a      	mov	r2, r7
 8011424:	4640      	mov	r0, r8
 8011426:	4798      	blx	r3
 8011428:	6923      	ldr	r3, [r4, #16]
 801142a:	3b01      	subs	r3, #1
 801142c:	6123      	str	r3, [r4, #16]
 801142e:	e7f0      	b.n	8011412 <_scanf_float+0x306>
 8011430:	46aa      	mov	sl, r5
 8011432:	46b3      	mov	fp, r6
 8011434:	e7de      	b.n	80113f4 <_scanf_float+0x2e8>
 8011436:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801143a:	6923      	ldr	r3, [r4, #16]
 801143c:	2965      	cmp	r1, #101	@ 0x65
 801143e:	f103 33ff 	add.w	r3, r3, #4294967295
 8011442:	f106 35ff 	add.w	r5, r6, #4294967295
 8011446:	6123      	str	r3, [r4, #16]
 8011448:	d00c      	beq.n	8011464 <_scanf_float+0x358>
 801144a:	2945      	cmp	r1, #69	@ 0x45
 801144c:	d00a      	beq.n	8011464 <_scanf_float+0x358>
 801144e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011452:	463a      	mov	r2, r7
 8011454:	4640      	mov	r0, r8
 8011456:	4798      	blx	r3
 8011458:	6923      	ldr	r3, [r4, #16]
 801145a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801145e:	3b01      	subs	r3, #1
 8011460:	1eb5      	subs	r5, r6, #2
 8011462:	6123      	str	r3, [r4, #16]
 8011464:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011468:	463a      	mov	r2, r7
 801146a:	4640      	mov	r0, r8
 801146c:	4798      	blx	r3
 801146e:	462e      	mov	r6, r5
 8011470:	6822      	ldr	r2, [r4, #0]
 8011472:	f012 0210 	ands.w	r2, r2, #16
 8011476:	d001      	beq.n	801147c <_scanf_float+0x370>
 8011478:	2000      	movs	r0, #0
 801147a:	e68b      	b.n	8011194 <_scanf_float+0x88>
 801147c:	7032      	strb	r2, [r6, #0]
 801147e:	6823      	ldr	r3, [r4, #0]
 8011480:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8011484:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011488:	d11c      	bne.n	80114c4 <_scanf_float+0x3b8>
 801148a:	9b02      	ldr	r3, [sp, #8]
 801148c:	454b      	cmp	r3, r9
 801148e:	eba3 0209 	sub.w	r2, r3, r9
 8011492:	d123      	bne.n	80114dc <_scanf_float+0x3d0>
 8011494:	9901      	ldr	r1, [sp, #4]
 8011496:	2200      	movs	r2, #0
 8011498:	4640      	mov	r0, r8
 801149a:	f002 fc45 	bl	8013d28 <_strtod_r>
 801149e:	9b03      	ldr	r3, [sp, #12]
 80114a0:	6821      	ldr	r1, [r4, #0]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	f011 0f02 	tst.w	r1, #2
 80114a8:	ec57 6b10 	vmov	r6, r7, d0
 80114ac:	f103 0204 	add.w	r2, r3, #4
 80114b0:	d01f      	beq.n	80114f2 <_scanf_float+0x3e6>
 80114b2:	9903      	ldr	r1, [sp, #12]
 80114b4:	600a      	str	r2, [r1, #0]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	e9c3 6700 	strd	r6, r7, [r3]
 80114bc:	68e3      	ldr	r3, [r4, #12]
 80114be:	3301      	adds	r3, #1
 80114c0:	60e3      	str	r3, [r4, #12]
 80114c2:	e7d9      	b.n	8011478 <_scanf_float+0x36c>
 80114c4:	9b04      	ldr	r3, [sp, #16]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d0e4      	beq.n	8011494 <_scanf_float+0x388>
 80114ca:	9905      	ldr	r1, [sp, #20]
 80114cc:	230a      	movs	r3, #10
 80114ce:	3101      	adds	r1, #1
 80114d0:	4640      	mov	r0, r8
 80114d2:	f002 fca9 	bl	8013e28 <_strtol_r>
 80114d6:	9b04      	ldr	r3, [sp, #16]
 80114d8:	9e05      	ldr	r6, [sp, #20]
 80114da:	1ac2      	subs	r2, r0, r3
 80114dc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80114e0:	429e      	cmp	r6, r3
 80114e2:	bf28      	it	cs
 80114e4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80114e8:	4910      	ldr	r1, [pc, #64]	@ (801152c <_scanf_float+0x420>)
 80114ea:	4630      	mov	r0, r6
 80114ec:	f000 f8e4 	bl	80116b8 <siprintf>
 80114f0:	e7d0      	b.n	8011494 <_scanf_float+0x388>
 80114f2:	f011 0f04 	tst.w	r1, #4
 80114f6:	9903      	ldr	r1, [sp, #12]
 80114f8:	600a      	str	r2, [r1, #0]
 80114fa:	d1dc      	bne.n	80114b6 <_scanf_float+0x3aa>
 80114fc:	681d      	ldr	r5, [r3, #0]
 80114fe:	4632      	mov	r2, r6
 8011500:	463b      	mov	r3, r7
 8011502:	4630      	mov	r0, r6
 8011504:	4639      	mov	r1, r7
 8011506:	f7ef fb39 	bl	8000b7c <__aeabi_dcmpun>
 801150a:	b128      	cbz	r0, 8011518 <_scanf_float+0x40c>
 801150c:	4808      	ldr	r0, [pc, #32]	@ (8011530 <_scanf_float+0x424>)
 801150e:	f000 fa03 	bl	8011918 <nanf>
 8011512:	ed85 0a00 	vstr	s0, [r5]
 8011516:	e7d1      	b.n	80114bc <_scanf_float+0x3b0>
 8011518:	4630      	mov	r0, r6
 801151a:	4639      	mov	r1, r7
 801151c:	f7ef fb8c 	bl	8000c38 <__aeabi_d2f>
 8011520:	6028      	str	r0, [r5, #0]
 8011522:	e7cb      	b.n	80114bc <_scanf_float+0x3b0>
 8011524:	f04f 0900 	mov.w	r9, #0
 8011528:	e629      	b.n	801117e <_scanf_float+0x72>
 801152a:	bf00      	nop
 801152c:	08016fba 	.word	0x08016fba
 8011530:	08017370 	.word	0x08017370

08011534 <std>:
 8011534:	2300      	movs	r3, #0
 8011536:	b510      	push	{r4, lr}
 8011538:	4604      	mov	r4, r0
 801153a:	e9c0 3300 	strd	r3, r3, [r0]
 801153e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011542:	6083      	str	r3, [r0, #8]
 8011544:	8181      	strh	r1, [r0, #12]
 8011546:	6643      	str	r3, [r0, #100]	@ 0x64
 8011548:	81c2      	strh	r2, [r0, #14]
 801154a:	6183      	str	r3, [r0, #24]
 801154c:	4619      	mov	r1, r3
 801154e:	2208      	movs	r2, #8
 8011550:	305c      	adds	r0, #92	@ 0x5c
 8011552:	f000 f940 	bl	80117d6 <memset>
 8011556:	4b0d      	ldr	r3, [pc, #52]	@ (801158c <std+0x58>)
 8011558:	6263      	str	r3, [r4, #36]	@ 0x24
 801155a:	4b0d      	ldr	r3, [pc, #52]	@ (8011590 <std+0x5c>)
 801155c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801155e:	4b0d      	ldr	r3, [pc, #52]	@ (8011594 <std+0x60>)
 8011560:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011562:	4b0d      	ldr	r3, [pc, #52]	@ (8011598 <std+0x64>)
 8011564:	6323      	str	r3, [r4, #48]	@ 0x30
 8011566:	4b0d      	ldr	r3, [pc, #52]	@ (801159c <std+0x68>)
 8011568:	6224      	str	r4, [r4, #32]
 801156a:	429c      	cmp	r4, r3
 801156c:	d006      	beq.n	801157c <std+0x48>
 801156e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011572:	4294      	cmp	r4, r2
 8011574:	d002      	beq.n	801157c <std+0x48>
 8011576:	33d0      	adds	r3, #208	@ 0xd0
 8011578:	429c      	cmp	r4, r3
 801157a:	d105      	bne.n	8011588 <std+0x54>
 801157c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011584:	f000 b9b6 	b.w	80118f4 <__retarget_lock_init_recursive>
 8011588:	bd10      	pop	{r4, pc}
 801158a:	bf00      	nop
 801158c:	0801174d 	.word	0x0801174d
 8011590:	08011773 	.word	0x08011773
 8011594:	080117ab 	.word	0x080117ab
 8011598:	080117cf 	.word	0x080117cf
 801159c:	20002550 	.word	0x20002550

080115a0 <stdio_exit_handler>:
 80115a0:	4a02      	ldr	r2, [pc, #8]	@ (80115ac <stdio_exit_handler+0xc>)
 80115a2:	4903      	ldr	r1, [pc, #12]	@ (80115b0 <stdio_exit_handler+0x10>)
 80115a4:	4803      	ldr	r0, [pc, #12]	@ (80115b4 <stdio_exit_handler+0x14>)
 80115a6:	f000 b869 	b.w	801167c <_fwalk_sglue>
 80115aa:	bf00      	nop
 80115ac:	200001c0 	.word	0x200001c0
 80115b0:	08014819 	.word	0x08014819
 80115b4:	200001d0 	.word	0x200001d0

080115b8 <cleanup_stdio>:
 80115b8:	6841      	ldr	r1, [r0, #4]
 80115ba:	4b0c      	ldr	r3, [pc, #48]	@ (80115ec <cleanup_stdio+0x34>)
 80115bc:	4299      	cmp	r1, r3
 80115be:	b510      	push	{r4, lr}
 80115c0:	4604      	mov	r4, r0
 80115c2:	d001      	beq.n	80115c8 <cleanup_stdio+0x10>
 80115c4:	f003 f928 	bl	8014818 <_fflush_r>
 80115c8:	68a1      	ldr	r1, [r4, #8]
 80115ca:	4b09      	ldr	r3, [pc, #36]	@ (80115f0 <cleanup_stdio+0x38>)
 80115cc:	4299      	cmp	r1, r3
 80115ce:	d002      	beq.n	80115d6 <cleanup_stdio+0x1e>
 80115d0:	4620      	mov	r0, r4
 80115d2:	f003 f921 	bl	8014818 <_fflush_r>
 80115d6:	68e1      	ldr	r1, [r4, #12]
 80115d8:	4b06      	ldr	r3, [pc, #24]	@ (80115f4 <cleanup_stdio+0x3c>)
 80115da:	4299      	cmp	r1, r3
 80115dc:	d004      	beq.n	80115e8 <cleanup_stdio+0x30>
 80115de:	4620      	mov	r0, r4
 80115e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115e4:	f003 b918 	b.w	8014818 <_fflush_r>
 80115e8:	bd10      	pop	{r4, pc}
 80115ea:	bf00      	nop
 80115ec:	20002550 	.word	0x20002550
 80115f0:	200025b8 	.word	0x200025b8
 80115f4:	20002620 	.word	0x20002620

080115f8 <global_stdio_init.part.0>:
 80115f8:	b510      	push	{r4, lr}
 80115fa:	4b0b      	ldr	r3, [pc, #44]	@ (8011628 <global_stdio_init.part.0+0x30>)
 80115fc:	4c0b      	ldr	r4, [pc, #44]	@ (801162c <global_stdio_init.part.0+0x34>)
 80115fe:	4a0c      	ldr	r2, [pc, #48]	@ (8011630 <global_stdio_init.part.0+0x38>)
 8011600:	601a      	str	r2, [r3, #0]
 8011602:	4620      	mov	r0, r4
 8011604:	2200      	movs	r2, #0
 8011606:	2104      	movs	r1, #4
 8011608:	f7ff ff94 	bl	8011534 <std>
 801160c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011610:	2201      	movs	r2, #1
 8011612:	2109      	movs	r1, #9
 8011614:	f7ff ff8e 	bl	8011534 <std>
 8011618:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801161c:	2202      	movs	r2, #2
 801161e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011622:	2112      	movs	r1, #18
 8011624:	f7ff bf86 	b.w	8011534 <std>
 8011628:	20002688 	.word	0x20002688
 801162c:	20002550 	.word	0x20002550
 8011630:	080115a1 	.word	0x080115a1

08011634 <__sfp_lock_acquire>:
 8011634:	4801      	ldr	r0, [pc, #4]	@ (801163c <__sfp_lock_acquire+0x8>)
 8011636:	f000 b95e 	b.w	80118f6 <__retarget_lock_acquire_recursive>
 801163a:	bf00      	nop
 801163c:	20002691 	.word	0x20002691

08011640 <__sfp_lock_release>:
 8011640:	4801      	ldr	r0, [pc, #4]	@ (8011648 <__sfp_lock_release+0x8>)
 8011642:	f000 b959 	b.w	80118f8 <__retarget_lock_release_recursive>
 8011646:	bf00      	nop
 8011648:	20002691 	.word	0x20002691

0801164c <__sinit>:
 801164c:	b510      	push	{r4, lr}
 801164e:	4604      	mov	r4, r0
 8011650:	f7ff fff0 	bl	8011634 <__sfp_lock_acquire>
 8011654:	6a23      	ldr	r3, [r4, #32]
 8011656:	b11b      	cbz	r3, 8011660 <__sinit+0x14>
 8011658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801165c:	f7ff bff0 	b.w	8011640 <__sfp_lock_release>
 8011660:	4b04      	ldr	r3, [pc, #16]	@ (8011674 <__sinit+0x28>)
 8011662:	6223      	str	r3, [r4, #32]
 8011664:	4b04      	ldr	r3, [pc, #16]	@ (8011678 <__sinit+0x2c>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d1f5      	bne.n	8011658 <__sinit+0xc>
 801166c:	f7ff ffc4 	bl	80115f8 <global_stdio_init.part.0>
 8011670:	e7f2      	b.n	8011658 <__sinit+0xc>
 8011672:	bf00      	nop
 8011674:	080115b9 	.word	0x080115b9
 8011678:	20002688 	.word	0x20002688

0801167c <_fwalk_sglue>:
 801167c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011680:	4607      	mov	r7, r0
 8011682:	4688      	mov	r8, r1
 8011684:	4614      	mov	r4, r2
 8011686:	2600      	movs	r6, #0
 8011688:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801168c:	f1b9 0901 	subs.w	r9, r9, #1
 8011690:	d505      	bpl.n	801169e <_fwalk_sglue+0x22>
 8011692:	6824      	ldr	r4, [r4, #0]
 8011694:	2c00      	cmp	r4, #0
 8011696:	d1f7      	bne.n	8011688 <_fwalk_sglue+0xc>
 8011698:	4630      	mov	r0, r6
 801169a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801169e:	89ab      	ldrh	r3, [r5, #12]
 80116a0:	2b01      	cmp	r3, #1
 80116a2:	d907      	bls.n	80116b4 <_fwalk_sglue+0x38>
 80116a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80116a8:	3301      	adds	r3, #1
 80116aa:	d003      	beq.n	80116b4 <_fwalk_sglue+0x38>
 80116ac:	4629      	mov	r1, r5
 80116ae:	4638      	mov	r0, r7
 80116b0:	47c0      	blx	r8
 80116b2:	4306      	orrs	r6, r0
 80116b4:	3568      	adds	r5, #104	@ 0x68
 80116b6:	e7e9      	b.n	801168c <_fwalk_sglue+0x10>

080116b8 <siprintf>:
 80116b8:	b40e      	push	{r1, r2, r3}
 80116ba:	b500      	push	{lr}
 80116bc:	b09c      	sub	sp, #112	@ 0x70
 80116be:	ab1d      	add	r3, sp, #116	@ 0x74
 80116c0:	9002      	str	r0, [sp, #8]
 80116c2:	9006      	str	r0, [sp, #24]
 80116c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80116c8:	4809      	ldr	r0, [pc, #36]	@ (80116f0 <siprintf+0x38>)
 80116ca:	9107      	str	r1, [sp, #28]
 80116cc:	9104      	str	r1, [sp, #16]
 80116ce:	4909      	ldr	r1, [pc, #36]	@ (80116f4 <siprintf+0x3c>)
 80116d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80116d4:	9105      	str	r1, [sp, #20]
 80116d6:	6800      	ldr	r0, [r0, #0]
 80116d8:	9301      	str	r3, [sp, #4]
 80116da:	a902      	add	r1, sp, #8
 80116dc:	f002 fc02 	bl	8013ee4 <_svfiprintf_r>
 80116e0:	9b02      	ldr	r3, [sp, #8]
 80116e2:	2200      	movs	r2, #0
 80116e4:	701a      	strb	r2, [r3, #0]
 80116e6:	b01c      	add	sp, #112	@ 0x70
 80116e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80116ec:	b003      	add	sp, #12
 80116ee:	4770      	bx	lr
 80116f0:	200001cc 	.word	0x200001cc
 80116f4:	ffff0208 	.word	0xffff0208

080116f8 <siscanf>:
 80116f8:	b40e      	push	{r1, r2, r3}
 80116fa:	b530      	push	{r4, r5, lr}
 80116fc:	b09c      	sub	sp, #112	@ 0x70
 80116fe:	ac1f      	add	r4, sp, #124	@ 0x7c
 8011700:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011704:	f854 5b04 	ldr.w	r5, [r4], #4
 8011708:	f8ad 2014 	strh.w	r2, [sp, #20]
 801170c:	9002      	str	r0, [sp, #8]
 801170e:	9006      	str	r0, [sp, #24]
 8011710:	f7ee fdd6 	bl	80002c0 <strlen>
 8011714:	4b0b      	ldr	r3, [pc, #44]	@ (8011744 <siscanf+0x4c>)
 8011716:	9003      	str	r0, [sp, #12]
 8011718:	9007      	str	r0, [sp, #28]
 801171a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801171c:	480a      	ldr	r0, [pc, #40]	@ (8011748 <siscanf+0x50>)
 801171e:	9401      	str	r4, [sp, #4]
 8011720:	2300      	movs	r3, #0
 8011722:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011724:	9314      	str	r3, [sp, #80]	@ 0x50
 8011726:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801172a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801172e:	462a      	mov	r2, r5
 8011730:	4623      	mov	r3, r4
 8011732:	a902      	add	r1, sp, #8
 8011734:	6800      	ldr	r0, [r0, #0]
 8011736:	f002 fd29 	bl	801418c <__ssvfiscanf_r>
 801173a:	b01c      	add	sp, #112	@ 0x70
 801173c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011740:	b003      	add	sp, #12
 8011742:	4770      	bx	lr
 8011744:	0801176f 	.word	0x0801176f
 8011748:	200001cc 	.word	0x200001cc

0801174c <__sread>:
 801174c:	b510      	push	{r4, lr}
 801174e:	460c      	mov	r4, r1
 8011750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011754:	f000 f880 	bl	8011858 <_read_r>
 8011758:	2800      	cmp	r0, #0
 801175a:	bfab      	itete	ge
 801175c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801175e:	89a3      	ldrhlt	r3, [r4, #12]
 8011760:	181b      	addge	r3, r3, r0
 8011762:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011766:	bfac      	ite	ge
 8011768:	6563      	strge	r3, [r4, #84]	@ 0x54
 801176a:	81a3      	strhlt	r3, [r4, #12]
 801176c:	bd10      	pop	{r4, pc}

0801176e <__seofread>:
 801176e:	2000      	movs	r0, #0
 8011770:	4770      	bx	lr

08011772 <__swrite>:
 8011772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011776:	461f      	mov	r7, r3
 8011778:	898b      	ldrh	r3, [r1, #12]
 801177a:	05db      	lsls	r3, r3, #23
 801177c:	4605      	mov	r5, r0
 801177e:	460c      	mov	r4, r1
 8011780:	4616      	mov	r6, r2
 8011782:	d505      	bpl.n	8011790 <__swrite+0x1e>
 8011784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011788:	2302      	movs	r3, #2
 801178a:	2200      	movs	r2, #0
 801178c:	f000 f852 	bl	8011834 <_lseek_r>
 8011790:	89a3      	ldrh	r3, [r4, #12]
 8011792:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011796:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801179a:	81a3      	strh	r3, [r4, #12]
 801179c:	4632      	mov	r2, r6
 801179e:	463b      	mov	r3, r7
 80117a0:	4628      	mov	r0, r5
 80117a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117a6:	f000 b869 	b.w	801187c <_write_r>

080117aa <__sseek>:
 80117aa:	b510      	push	{r4, lr}
 80117ac:	460c      	mov	r4, r1
 80117ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117b2:	f000 f83f 	bl	8011834 <_lseek_r>
 80117b6:	1c43      	adds	r3, r0, #1
 80117b8:	89a3      	ldrh	r3, [r4, #12]
 80117ba:	bf15      	itete	ne
 80117bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80117be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80117c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80117c6:	81a3      	strheq	r3, [r4, #12]
 80117c8:	bf18      	it	ne
 80117ca:	81a3      	strhne	r3, [r4, #12]
 80117cc:	bd10      	pop	{r4, pc}

080117ce <__sclose>:
 80117ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117d2:	f000 b81f 	b.w	8011814 <_close_r>

080117d6 <memset>:
 80117d6:	4402      	add	r2, r0
 80117d8:	4603      	mov	r3, r0
 80117da:	4293      	cmp	r3, r2
 80117dc:	d100      	bne.n	80117e0 <memset+0xa>
 80117de:	4770      	bx	lr
 80117e0:	f803 1b01 	strb.w	r1, [r3], #1
 80117e4:	e7f9      	b.n	80117da <memset+0x4>

080117e6 <strncmp>:
 80117e6:	b510      	push	{r4, lr}
 80117e8:	b16a      	cbz	r2, 8011806 <strncmp+0x20>
 80117ea:	3901      	subs	r1, #1
 80117ec:	1884      	adds	r4, r0, r2
 80117ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117f2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80117f6:	429a      	cmp	r2, r3
 80117f8:	d103      	bne.n	8011802 <strncmp+0x1c>
 80117fa:	42a0      	cmp	r0, r4
 80117fc:	d001      	beq.n	8011802 <strncmp+0x1c>
 80117fe:	2a00      	cmp	r2, #0
 8011800:	d1f5      	bne.n	80117ee <strncmp+0x8>
 8011802:	1ad0      	subs	r0, r2, r3
 8011804:	bd10      	pop	{r4, pc}
 8011806:	4610      	mov	r0, r2
 8011808:	e7fc      	b.n	8011804 <strncmp+0x1e>
	...

0801180c <_localeconv_r>:
 801180c:	4800      	ldr	r0, [pc, #0]	@ (8011810 <_localeconv_r+0x4>)
 801180e:	4770      	bx	lr
 8011810:	2000030c 	.word	0x2000030c

08011814 <_close_r>:
 8011814:	b538      	push	{r3, r4, r5, lr}
 8011816:	4d06      	ldr	r5, [pc, #24]	@ (8011830 <_close_r+0x1c>)
 8011818:	2300      	movs	r3, #0
 801181a:	4604      	mov	r4, r0
 801181c:	4608      	mov	r0, r1
 801181e:	602b      	str	r3, [r5, #0]
 8011820:	f7f2 fcdc 	bl	80041dc <_close>
 8011824:	1c43      	adds	r3, r0, #1
 8011826:	d102      	bne.n	801182e <_close_r+0x1a>
 8011828:	682b      	ldr	r3, [r5, #0]
 801182a:	b103      	cbz	r3, 801182e <_close_r+0x1a>
 801182c:	6023      	str	r3, [r4, #0]
 801182e:	bd38      	pop	{r3, r4, r5, pc}
 8011830:	2000268c 	.word	0x2000268c

08011834 <_lseek_r>:
 8011834:	b538      	push	{r3, r4, r5, lr}
 8011836:	4d07      	ldr	r5, [pc, #28]	@ (8011854 <_lseek_r+0x20>)
 8011838:	4604      	mov	r4, r0
 801183a:	4608      	mov	r0, r1
 801183c:	4611      	mov	r1, r2
 801183e:	2200      	movs	r2, #0
 8011840:	602a      	str	r2, [r5, #0]
 8011842:	461a      	mov	r2, r3
 8011844:	f7f2 fcf1 	bl	800422a <_lseek>
 8011848:	1c43      	adds	r3, r0, #1
 801184a:	d102      	bne.n	8011852 <_lseek_r+0x1e>
 801184c:	682b      	ldr	r3, [r5, #0]
 801184e:	b103      	cbz	r3, 8011852 <_lseek_r+0x1e>
 8011850:	6023      	str	r3, [r4, #0]
 8011852:	bd38      	pop	{r3, r4, r5, pc}
 8011854:	2000268c 	.word	0x2000268c

08011858 <_read_r>:
 8011858:	b538      	push	{r3, r4, r5, lr}
 801185a:	4d07      	ldr	r5, [pc, #28]	@ (8011878 <_read_r+0x20>)
 801185c:	4604      	mov	r4, r0
 801185e:	4608      	mov	r0, r1
 8011860:	4611      	mov	r1, r2
 8011862:	2200      	movs	r2, #0
 8011864:	602a      	str	r2, [r5, #0]
 8011866:	461a      	mov	r2, r3
 8011868:	f7f2 fc7f 	bl	800416a <_read>
 801186c:	1c43      	adds	r3, r0, #1
 801186e:	d102      	bne.n	8011876 <_read_r+0x1e>
 8011870:	682b      	ldr	r3, [r5, #0]
 8011872:	b103      	cbz	r3, 8011876 <_read_r+0x1e>
 8011874:	6023      	str	r3, [r4, #0]
 8011876:	bd38      	pop	{r3, r4, r5, pc}
 8011878:	2000268c 	.word	0x2000268c

0801187c <_write_r>:
 801187c:	b538      	push	{r3, r4, r5, lr}
 801187e:	4d07      	ldr	r5, [pc, #28]	@ (801189c <_write_r+0x20>)
 8011880:	4604      	mov	r4, r0
 8011882:	4608      	mov	r0, r1
 8011884:	4611      	mov	r1, r2
 8011886:	2200      	movs	r2, #0
 8011888:	602a      	str	r2, [r5, #0]
 801188a:	461a      	mov	r2, r3
 801188c:	f7f2 fc8a 	bl	80041a4 <_write>
 8011890:	1c43      	adds	r3, r0, #1
 8011892:	d102      	bne.n	801189a <_write_r+0x1e>
 8011894:	682b      	ldr	r3, [r5, #0]
 8011896:	b103      	cbz	r3, 801189a <_write_r+0x1e>
 8011898:	6023      	str	r3, [r4, #0]
 801189a:	bd38      	pop	{r3, r4, r5, pc}
 801189c:	2000268c 	.word	0x2000268c

080118a0 <__errno>:
 80118a0:	4b01      	ldr	r3, [pc, #4]	@ (80118a8 <__errno+0x8>)
 80118a2:	6818      	ldr	r0, [r3, #0]
 80118a4:	4770      	bx	lr
 80118a6:	bf00      	nop
 80118a8:	200001cc 	.word	0x200001cc

080118ac <__libc_init_array>:
 80118ac:	b570      	push	{r4, r5, r6, lr}
 80118ae:	4d0d      	ldr	r5, [pc, #52]	@ (80118e4 <__libc_init_array+0x38>)
 80118b0:	4c0d      	ldr	r4, [pc, #52]	@ (80118e8 <__libc_init_array+0x3c>)
 80118b2:	1b64      	subs	r4, r4, r5
 80118b4:	10a4      	asrs	r4, r4, #2
 80118b6:	2600      	movs	r6, #0
 80118b8:	42a6      	cmp	r6, r4
 80118ba:	d109      	bne.n	80118d0 <__libc_init_array+0x24>
 80118bc:	4d0b      	ldr	r5, [pc, #44]	@ (80118ec <__libc_init_array+0x40>)
 80118be:	4c0c      	ldr	r4, [pc, #48]	@ (80118f0 <__libc_init_array+0x44>)
 80118c0:	f005 f97e 	bl	8016bc0 <_init>
 80118c4:	1b64      	subs	r4, r4, r5
 80118c6:	10a4      	asrs	r4, r4, #2
 80118c8:	2600      	movs	r6, #0
 80118ca:	42a6      	cmp	r6, r4
 80118cc:	d105      	bne.n	80118da <__libc_init_array+0x2e>
 80118ce:	bd70      	pop	{r4, r5, r6, pc}
 80118d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80118d4:	4798      	blx	r3
 80118d6:	3601      	adds	r6, #1
 80118d8:	e7ee      	b.n	80118b8 <__libc_init_array+0xc>
 80118da:	f855 3b04 	ldr.w	r3, [r5], #4
 80118de:	4798      	blx	r3
 80118e0:	3601      	adds	r6, #1
 80118e2:	e7f2      	b.n	80118ca <__libc_init_array+0x1e>
 80118e4:	08017410 	.word	0x08017410
 80118e8:	08017410 	.word	0x08017410
 80118ec:	08017410 	.word	0x08017410
 80118f0:	08017414 	.word	0x08017414

080118f4 <__retarget_lock_init_recursive>:
 80118f4:	4770      	bx	lr

080118f6 <__retarget_lock_acquire_recursive>:
 80118f6:	4770      	bx	lr

080118f8 <__retarget_lock_release_recursive>:
 80118f8:	4770      	bx	lr

080118fa <memcpy>:
 80118fa:	440a      	add	r2, r1
 80118fc:	4291      	cmp	r1, r2
 80118fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8011902:	d100      	bne.n	8011906 <memcpy+0xc>
 8011904:	4770      	bx	lr
 8011906:	b510      	push	{r4, lr}
 8011908:	f811 4b01 	ldrb.w	r4, [r1], #1
 801190c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011910:	4291      	cmp	r1, r2
 8011912:	d1f9      	bne.n	8011908 <memcpy+0xe>
 8011914:	bd10      	pop	{r4, pc}
	...

08011918 <nanf>:
 8011918:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011920 <nanf+0x8>
 801191c:	4770      	bx	lr
 801191e:	bf00      	nop
 8011920:	7fc00000 	.word	0x7fc00000

08011924 <quorem>:
 8011924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011928:	6903      	ldr	r3, [r0, #16]
 801192a:	690c      	ldr	r4, [r1, #16]
 801192c:	42a3      	cmp	r3, r4
 801192e:	4607      	mov	r7, r0
 8011930:	db7e      	blt.n	8011a30 <quorem+0x10c>
 8011932:	3c01      	subs	r4, #1
 8011934:	f101 0814 	add.w	r8, r1, #20
 8011938:	00a3      	lsls	r3, r4, #2
 801193a:	f100 0514 	add.w	r5, r0, #20
 801193e:	9300      	str	r3, [sp, #0]
 8011940:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011944:	9301      	str	r3, [sp, #4]
 8011946:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801194a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801194e:	3301      	adds	r3, #1
 8011950:	429a      	cmp	r2, r3
 8011952:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011956:	fbb2 f6f3 	udiv	r6, r2, r3
 801195a:	d32e      	bcc.n	80119ba <quorem+0x96>
 801195c:	f04f 0a00 	mov.w	sl, #0
 8011960:	46c4      	mov	ip, r8
 8011962:	46ae      	mov	lr, r5
 8011964:	46d3      	mov	fp, sl
 8011966:	f85c 3b04 	ldr.w	r3, [ip], #4
 801196a:	b298      	uxth	r0, r3
 801196c:	fb06 a000 	mla	r0, r6, r0, sl
 8011970:	0c02      	lsrs	r2, r0, #16
 8011972:	0c1b      	lsrs	r3, r3, #16
 8011974:	fb06 2303 	mla	r3, r6, r3, r2
 8011978:	f8de 2000 	ldr.w	r2, [lr]
 801197c:	b280      	uxth	r0, r0
 801197e:	b292      	uxth	r2, r2
 8011980:	1a12      	subs	r2, r2, r0
 8011982:	445a      	add	r2, fp
 8011984:	f8de 0000 	ldr.w	r0, [lr]
 8011988:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801198c:	b29b      	uxth	r3, r3
 801198e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011992:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011996:	b292      	uxth	r2, r2
 8011998:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801199c:	45e1      	cmp	r9, ip
 801199e:	f84e 2b04 	str.w	r2, [lr], #4
 80119a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80119a6:	d2de      	bcs.n	8011966 <quorem+0x42>
 80119a8:	9b00      	ldr	r3, [sp, #0]
 80119aa:	58eb      	ldr	r3, [r5, r3]
 80119ac:	b92b      	cbnz	r3, 80119ba <quorem+0x96>
 80119ae:	9b01      	ldr	r3, [sp, #4]
 80119b0:	3b04      	subs	r3, #4
 80119b2:	429d      	cmp	r5, r3
 80119b4:	461a      	mov	r2, r3
 80119b6:	d32f      	bcc.n	8011a18 <quorem+0xf4>
 80119b8:	613c      	str	r4, [r7, #16]
 80119ba:	4638      	mov	r0, r7
 80119bc:	f001 f9c4 	bl	8012d48 <__mcmp>
 80119c0:	2800      	cmp	r0, #0
 80119c2:	db25      	blt.n	8011a10 <quorem+0xec>
 80119c4:	4629      	mov	r1, r5
 80119c6:	2000      	movs	r0, #0
 80119c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80119cc:	f8d1 c000 	ldr.w	ip, [r1]
 80119d0:	fa1f fe82 	uxth.w	lr, r2
 80119d4:	fa1f f38c 	uxth.w	r3, ip
 80119d8:	eba3 030e 	sub.w	r3, r3, lr
 80119dc:	4403      	add	r3, r0
 80119de:	0c12      	lsrs	r2, r2, #16
 80119e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80119e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80119e8:	b29b      	uxth	r3, r3
 80119ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80119ee:	45c1      	cmp	r9, r8
 80119f0:	f841 3b04 	str.w	r3, [r1], #4
 80119f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80119f8:	d2e6      	bcs.n	80119c8 <quorem+0xa4>
 80119fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80119fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011a02:	b922      	cbnz	r2, 8011a0e <quorem+0xea>
 8011a04:	3b04      	subs	r3, #4
 8011a06:	429d      	cmp	r5, r3
 8011a08:	461a      	mov	r2, r3
 8011a0a:	d30b      	bcc.n	8011a24 <quorem+0x100>
 8011a0c:	613c      	str	r4, [r7, #16]
 8011a0e:	3601      	adds	r6, #1
 8011a10:	4630      	mov	r0, r6
 8011a12:	b003      	add	sp, #12
 8011a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a18:	6812      	ldr	r2, [r2, #0]
 8011a1a:	3b04      	subs	r3, #4
 8011a1c:	2a00      	cmp	r2, #0
 8011a1e:	d1cb      	bne.n	80119b8 <quorem+0x94>
 8011a20:	3c01      	subs	r4, #1
 8011a22:	e7c6      	b.n	80119b2 <quorem+0x8e>
 8011a24:	6812      	ldr	r2, [r2, #0]
 8011a26:	3b04      	subs	r3, #4
 8011a28:	2a00      	cmp	r2, #0
 8011a2a:	d1ef      	bne.n	8011a0c <quorem+0xe8>
 8011a2c:	3c01      	subs	r4, #1
 8011a2e:	e7ea      	b.n	8011a06 <quorem+0xe2>
 8011a30:	2000      	movs	r0, #0
 8011a32:	e7ee      	b.n	8011a12 <quorem+0xee>
 8011a34:	0000      	movs	r0, r0
	...

08011a38 <_dtoa_r>:
 8011a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a3c:	69c7      	ldr	r7, [r0, #28]
 8011a3e:	b099      	sub	sp, #100	@ 0x64
 8011a40:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011a44:	ec55 4b10 	vmov	r4, r5, d0
 8011a48:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011a4a:	9109      	str	r1, [sp, #36]	@ 0x24
 8011a4c:	4683      	mov	fp, r0
 8011a4e:	920e      	str	r2, [sp, #56]	@ 0x38
 8011a50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011a52:	b97f      	cbnz	r7, 8011a74 <_dtoa_r+0x3c>
 8011a54:	2010      	movs	r0, #16
 8011a56:	f000 fdfd 	bl	8012654 <malloc>
 8011a5a:	4602      	mov	r2, r0
 8011a5c:	f8cb 001c 	str.w	r0, [fp, #28]
 8011a60:	b920      	cbnz	r0, 8011a6c <_dtoa_r+0x34>
 8011a62:	4ba7      	ldr	r3, [pc, #668]	@ (8011d00 <_dtoa_r+0x2c8>)
 8011a64:	21ef      	movs	r1, #239	@ 0xef
 8011a66:	48a7      	ldr	r0, [pc, #668]	@ (8011d04 <_dtoa_r+0x2cc>)
 8011a68:	f002 ffa6 	bl	80149b8 <__assert_func>
 8011a6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011a70:	6007      	str	r7, [r0, #0]
 8011a72:	60c7      	str	r7, [r0, #12]
 8011a74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011a78:	6819      	ldr	r1, [r3, #0]
 8011a7a:	b159      	cbz	r1, 8011a94 <_dtoa_r+0x5c>
 8011a7c:	685a      	ldr	r2, [r3, #4]
 8011a7e:	604a      	str	r2, [r1, #4]
 8011a80:	2301      	movs	r3, #1
 8011a82:	4093      	lsls	r3, r2
 8011a84:	608b      	str	r3, [r1, #8]
 8011a86:	4658      	mov	r0, fp
 8011a88:	f000 feda 	bl	8012840 <_Bfree>
 8011a8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011a90:	2200      	movs	r2, #0
 8011a92:	601a      	str	r2, [r3, #0]
 8011a94:	1e2b      	subs	r3, r5, #0
 8011a96:	bfb9      	ittee	lt
 8011a98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011a9c:	9303      	strlt	r3, [sp, #12]
 8011a9e:	2300      	movge	r3, #0
 8011aa0:	6033      	strge	r3, [r6, #0]
 8011aa2:	9f03      	ldr	r7, [sp, #12]
 8011aa4:	4b98      	ldr	r3, [pc, #608]	@ (8011d08 <_dtoa_r+0x2d0>)
 8011aa6:	bfbc      	itt	lt
 8011aa8:	2201      	movlt	r2, #1
 8011aaa:	6032      	strlt	r2, [r6, #0]
 8011aac:	43bb      	bics	r3, r7
 8011aae:	d112      	bne.n	8011ad6 <_dtoa_r+0x9e>
 8011ab0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011ab2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011ab6:	6013      	str	r3, [r2, #0]
 8011ab8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011abc:	4323      	orrs	r3, r4
 8011abe:	f000 854d 	beq.w	801255c <_dtoa_r+0xb24>
 8011ac2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011ac4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011d1c <_dtoa_r+0x2e4>
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	f000 854f 	beq.w	801256c <_dtoa_r+0xb34>
 8011ace:	f10a 0303 	add.w	r3, sl, #3
 8011ad2:	f000 bd49 	b.w	8012568 <_dtoa_r+0xb30>
 8011ad6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011ada:	2200      	movs	r2, #0
 8011adc:	ec51 0b17 	vmov	r0, r1, d7
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8011ae6:	f7ef f817 	bl	8000b18 <__aeabi_dcmpeq>
 8011aea:	4680      	mov	r8, r0
 8011aec:	b158      	cbz	r0, 8011b06 <_dtoa_r+0xce>
 8011aee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011af0:	2301      	movs	r3, #1
 8011af2:	6013      	str	r3, [r2, #0]
 8011af4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011af6:	b113      	cbz	r3, 8011afe <_dtoa_r+0xc6>
 8011af8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011afa:	4b84      	ldr	r3, [pc, #528]	@ (8011d0c <_dtoa_r+0x2d4>)
 8011afc:	6013      	str	r3, [r2, #0]
 8011afe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011d20 <_dtoa_r+0x2e8>
 8011b02:	f000 bd33 	b.w	801256c <_dtoa_r+0xb34>
 8011b06:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011b0a:	aa16      	add	r2, sp, #88	@ 0x58
 8011b0c:	a917      	add	r1, sp, #92	@ 0x5c
 8011b0e:	4658      	mov	r0, fp
 8011b10:	f001 fa3a 	bl	8012f88 <__d2b>
 8011b14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011b18:	4681      	mov	r9, r0
 8011b1a:	2e00      	cmp	r6, #0
 8011b1c:	d077      	beq.n	8011c0e <_dtoa_r+0x1d6>
 8011b1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011b20:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8011b24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011b2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011b30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011b34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011b38:	4619      	mov	r1, r3
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	4b74      	ldr	r3, [pc, #464]	@ (8011d10 <_dtoa_r+0x2d8>)
 8011b3e:	f7ee fbcb 	bl	80002d8 <__aeabi_dsub>
 8011b42:	a369      	add	r3, pc, #420	@ (adr r3, 8011ce8 <_dtoa_r+0x2b0>)
 8011b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b48:	f7ee fd7e 	bl	8000648 <__aeabi_dmul>
 8011b4c:	a368      	add	r3, pc, #416	@ (adr r3, 8011cf0 <_dtoa_r+0x2b8>)
 8011b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b52:	f7ee fbc3 	bl	80002dc <__adddf3>
 8011b56:	4604      	mov	r4, r0
 8011b58:	4630      	mov	r0, r6
 8011b5a:	460d      	mov	r5, r1
 8011b5c:	f7ee fd0a 	bl	8000574 <__aeabi_i2d>
 8011b60:	a365      	add	r3, pc, #404	@ (adr r3, 8011cf8 <_dtoa_r+0x2c0>)
 8011b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b66:	f7ee fd6f 	bl	8000648 <__aeabi_dmul>
 8011b6a:	4602      	mov	r2, r0
 8011b6c:	460b      	mov	r3, r1
 8011b6e:	4620      	mov	r0, r4
 8011b70:	4629      	mov	r1, r5
 8011b72:	f7ee fbb3 	bl	80002dc <__adddf3>
 8011b76:	4604      	mov	r4, r0
 8011b78:	460d      	mov	r5, r1
 8011b7a:	f7ef f815 	bl	8000ba8 <__aeabi_d2iz>
 8011b7e:	2200      	movs	r2, #0
 8011b80:	4607      	mov	r7, r0
 8011b82:	2300      	movs	r3, #0
 8011b84:	4620      	mov	r0, r4
 8011b86:	4629      	mov	r1, r5
 8011b88:	f7ee ffd0 	bl	8000b2c <__aeabi_dcmplt>
 8011b8c:	b140      	cbz	r0, 8011ba0 <_dtoa_r+0x168>
 8011b8e:	4638      	mov	r0, r7
 8011b90:	f7ee fcf0 	bl	8000574 <__aeabi_i2d>
 8011b94:	4622      	mov	r2, r4
 8011b96:	462b      	mov	r3, r5
 8011b98:	f7ee ffbe 	bl	8000b18 <__aeabi_dcmpeq>
 8011b9c:	b900      	cbnz	r0, 8011ba0 <_dtoa_r+0x168>
 8011b9e:	3f01      	subs	r7, #1
 8011ba0:	2f16      	cmp	r7, #22
 8011ba2:	d851      	bhi.n	8011c48 <_dtoa_r+0x210>
 8011ba4:	4b5b      	ldr	r3, [pc, #364]	@ (8011d14 <_dtoa_r+0x2dc>)
 8011ba6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011bb2:	f7ee ffbb 	bl	8000b2c <__aeabi_dcmplt>
 8011bb6:	2800      	cmp	r0, #0
 8011bb8:	d048      	beq.n	8011c4c <_dtoa_r+0x214>
 8011bba:	3f01      	subs	r7, #1
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	9312      	str	r3, [sp, #72]	@ 0x48
 8011bc0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011bc2:	1b9b      	subs	r3, r3, r6
 8011bc4:	1e5a      	subs	r2, r3, #1
 8011bc6:	bf44      	itt	mi
 8011bc8:	f1c3 0801 	rsbmi	r8, r3, #1
 8011bcc:	2300      	movmi	r3, #0
 8011bce:	9208      	str	r2, [sp, #32]
 8011bd0:	bf54      	ite	pl
 8011bd2:	f04f 0800 	movpl.w	r8, #0
 8011bd6:	9308      	strmi	r3, [sp, #32]
 8011bd8:	2f00      	cmp	r7, #0
 8011bda:	db39      	blt.n	8011c50 <_dtoa_r+0x218>
 8011bdc:	9b08      	ldr	r3, [sp, #32]
 8011bde:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011be0:	443b      	add	r3, r7
 8011be2:	9308      	str	r3, [sp, #32]
 8011be4:	2300      	movs	r3, #0
 8011be6:	930a      	str	r3, [sp, #40]	@ 0x28
 8011be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011bea:	2b09      	cmp	r3, #9
 8011bec:	d864      	bhi.n	8011cb8 <_dtoa_r+0x280>
 8011bee:	2b05      	cmp	r3, #5
 8011bf0:	bfc4      	itt	gt
 8011bf2:	3b04      	subgt	r3, #4
 8011bf4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8011bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011bf8:	f1a3 0302 	sub.w	r3, r3, #2
 8011bfc:	bfcc      	ite	gt
 8011bfe:	2400      	movgt	r4, #0
 8011c00:	2401      	movle	r4, #1
 8011c02:	2b03      	cmp	r3, #3
 8011c04:	d863      	bhi.n	8011cce <_dtoa_r+0x296>
 8011c06:	e8df f003 	tbb	[pc, r3]
 8011c0a:	372a      	.short	0x372a
 8011c0c:	5535      	.short	0x5535
 8011c0e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011c12:	441e      	add	r6, r3
 8011c14:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011c18:	2b20      	cmp	r3, #32
 8011c1a:	bfc1      	itttt	gt
 8011c1c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011c20:	409f      	lslgt	r7, r3
 8011c22:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011c26:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011c2a:	bfd6      	itet	le
 8011c2c:	f1c3 0320 	rsble	r3, r3, #32
 8011c30:	ea47 0003 	orrgt.w	r0, r7, r3
 8011c34:	fa04 f003 	lslle.w	r0, r4, r3
 8011c38:	f7ee fc8c 	bl	8000554 <__aeabi_ui2d>
 8011c3c:	2201      	movs	r2, #1
 8011c3e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011c42:	3e01      	subs	r6, #1
 8011c44:	9214      	str	r2, [sp, #80]	@ 0x50
 8011c46:	e777      	b.n	8011b38 <_dtoa_r+0x100>
 8011c48:	2301      	movs	r3, #1
 8011c4a:	e7b8      	b.n	8011bbe <_dtoa_r+0x186>
 8011c4c:	9012      	str	r0, [sp, #72]	@ 0x48
 8011c4e:	e7b7      	b.n	8011bc0 <_dtoa_r+0x188>
 8011c50:	427b      	negs	r3, r7
 8011c52:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c54:	2300      	movs	r3, #0
 8011c56:	eba8 0807 	sub.w	r8, r8, r7
 8011c5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011c5c:	e7c4      	b.n	8011be8 <_dtoa_r+0x1b0>
 8011c5e:	2300      	movs	r3, #0
 8011c60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011c62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	dc35      	bgt.n	8011cd4 <_dtoa_r+0x29c>
 8011c68:	2301      	movs	r3, #1
 8011c6a:	9300      	str	r3, [sp, #0]
 8011c6c:	9307      	str	r3, [sp, #28]
 8011c6e:	461a      	mov	r2, r3
 8011c70:	920e      	str	r2, [sp, #56]	@ 0x38
 8011c72:	e00b      	b.n	8011c8c <_dtoa_r+0x254>
 8011c74:	2301      	movs	r3, #1
 8011c76:	e7f3      	b.n	8011c60 <_dtoa_r+0x228>
 8011c78:	2300      	movs	r3, #0
 8011c7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011c7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c7e:	18fb      	adds	r3, r7, r3
 8011c80:	9300      	str	r3, [sp, #0]
 8011c82:	3301      	adds	r3, #1
 8011c84:	2b01      	cmp	r3, #1
 8011c86:	9307      	str	r3, [sp, #28]
 8011c88:	bfb8      	it	lt
 8011c8a:	2301      	movlt	r3, #1
 8011c8c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011c90:	2100      	movs	r1, #0
 8011c92:	2204      	movs	r2, #4
 8011c94:	f102 0514 	add.w	r5, r2, #20
 8011c98:	429d      	cmp	r5, r3
 8011c9a:	d91f      	bls.n	8011cdc <_dtoa_r+0x2a4>
 8011c9c:	6041      	str	r1, [r0, #4]
 8011c9e:	4658      	mov	r0, fp
 8011ca0:	f000 fd8e 	bl	80127c0 <_Balloc>
 8011ca4:	4682      	mov	sl, r0
 8011ca6:	2800      	cmp	r0, #0
 8011ca8:	d13c      	bne.n	8011d24 <_dtoa_r+0x2ec>
 8011caa:	4b1b      	ldr	r3, [pc, #108]	@ (8011d18 <_dtoa_r+0x2e0>)
 8011cac:	4602      	mov	r2, r0
 8011cae:	f240 11af 	movw	r1, #431	@ 0x1af
 8011cb2:	e6d8      	b.n	8011a66 <_dtoa_r+0x2e>
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	e7e0      	b.n	8011c7a <_dtoa_r+0x242>
 8011cb8:	2401      	movs	r4, #1
 8011cba:	2300      	movs	r3, #0
 8011cbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cbe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8011cc4:	9300      	str	r3, [sp, #0]
 8011cc6:	9307      	str	r3, [sp, #28]
 8011cc8:	2200      	movs	r2, #0
 8011cca:	2312      	movs	r3, #18
 8011ccc:	e7d0      	b.n	8011c70 <_dtoa_r+0x238>
 8011cce:	2301      	movs	r3, #1
 8011cd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011cd2:	e7f5      	b.n	8011cc0 <_dtoa_r+0x288>
 8011cd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011cd6:	9300      	str	r3, [sp, #0]
 8011cd8:	9307      	str	r3, [sp, #28]
 8011cda:	e7d7      	b.n	8011c8c <_dtoa_r+0x254>
 8011cdc:	3101      	adds	r1, #1
 8011cde:	0052      	lsls	r2, r2, #1
 8011ce0:	e7d8      	b.n	8011c94 <_dtoa_r+0x25c>
 8011ce2:	bf00      	nop
 8011ce4:	f3af 8000 	nop.w
 8011ce8:	636f4361 	.word	0x636f4361
 8011cec:	3fd287a7 	.word	0x3fd287a7
 8011cf0:	8b60c8b3 	.word	0x8b60c8b3
 8011cf4:	3fc68a28 	.word	0x3fc68a28
 8011cf8:	509f79fb 	.word	0x509f79fb
 8011cfc:	3fd34413 	.word	0x3fd34413
 8011d00:	08016fcc 	.word	0x08016fcc
 8011d04:	08016fe3 	.word	0x08016fe3
 8011d08:	7ff00000 	.word	0x7ff00000
 8011d0c:	08017329 	.word	0x08017329
 8011d10:	3ff80000 	.word	0x3ff80000
 8011d14:	080170e0 	.word	0x080170e0
 8011d18:	0801703b 	.word	0x0801703b
 8011d1c:	08016fc8 	.word	0x08016fc8
 8011d20:	08017328 	.word	0x08017328
 8011d24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011d28:	6018      	str	r0, [r3, #0]
 8011d2a:	9b07      	ldr	r3, [sp, #28]
 8011d2c:	2b0e      	cmp	r3, #14
 8011d2e:	f200 80a4 	bhi.w	8011e7a <_dtoa_r+0x442>
 8011d32:	2c00      	cmp	r4, #0
 8011d34:	f000 80a1 	beq.w	8011e7a <_dtoa_r+0x442>
 8011d38:	2f00      	cmp	r7, #0
 8011d3a:	dd33      	ble.n	8011da4 <_dtoa_r+0x36c>
 8011d3c:	4bad      	ldr	r3, [pc, #692]	@ (8011ff4 <_dtoa_r+0x5bc>)
 8011d3e:	f007 020f 	and.w	r2, r7, #15
 8011d42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011d46:	ed93 7b00 	vldr	d7, [r3]
 8011d4a:	05f8      	lsls	r0, r7, #23
 8011d4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011d50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011d54:	d516      	bpl.n	8011d84 <_dtoa_r+0x34c>
 8011d56:	4ba8      	ldr	r3, [pc, #672]	@ (8011ff8 <_dtoa_r+0x5c0>)
 8011d58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011d5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011d60:	f7ee fd9c 	bl	800089c <__aeabi_ddiv>
 8011d64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d68:	f004 040f 	and.w	r4, r4, #15
 8011d6c:	2603      	movs	r6, #3
 8011d6e:	4da2      	ldr	r5, [pc, #648]	@ (8011ff8 <_dtoa_r+0x5c0>)
 8011d70:	b954      	cbnz	r4, 8011d88 <_dtoa_r+0x350>
 8011d72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d7a:	f7ee fd8f 	bl	800089c <__aeabi_ddiv>
 8011d7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011d82:	e028      	b.n	8011dd6 <_dtoa_r+0x39e>
 8011d84:	2602      	movs	r6, #2
 8011d86:	e7f2      	b.n	8011d6e <_dtoa_r+0x336>
 8011d88:	07e1      	lsls	r1, r4, #31
 8011d8a:	d508      	bpl.n	8011d9e <_dtoa_r+0x366>
 8011d8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011d90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011d94:	f7ee fc58 	bl	8000648 <__aeabi_dmul>
 8011d98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011d9c:	3601      	adds	r6, #1
 8011d9e:	1064      	asrs	r4, r4, #1
 8011da0:	3508      	adds	r5, #8
 8011da2:	e7e5      	b.n	8011d70 <_dtoa_r+0x338>
 8011da4:	f000 80d2 	beq.w	8011f4c <_dtoa_r+0x514>
 8011da8:	427c      	negs	r4, r7
 8011daa:	4b92      	ldr	r3, [pc, #584]	@ (8011ff4 <_dtoa_r+0x5bc>)
 8011dac:	4d92      	ldr	r5, [pc, #584]	@ (8011ff8 <_dtoa_r+0x5c0>)
 8011dae:	f004 020f 	and.w	r2, r4, #15
 8011db2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011dbe:	f7ee fc43 	bl	8000648 <__aeabi_dmul>
 8011dc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011dc6:	1124      	asrs	r4, r4, #4
 8011dc8:	2300      	movs	r3, #0
 8011dca:	2602      	movs	r6, #2
 8011dcc:	2c00      	cmp	r4, #0
 8011dce:	f040 80b2 	bne.w	8011f36 <_dtoa_r+0x4fe>
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d1d3      	bne.n	8011d7e <_dtoa_r+0x346>
 8011dd6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011dd8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	f000 80b7 	beq.w	8011f50 <_dtoa_r+0x518>
 8011de2:	4b86      	ldr	r3, [pc, #536]	@ (8011ffc <_dtoa_r+0x5c4>)
 8011de4:	2200      	movs	r2, #0
 8011de6:	4620      	mov	r0, r4
 8011de8:	4629      	mov	r1, r5
 8011dea:	f7ee fe9f 	bl	8000b2c <__aeabi_dcmplt>
 8011dee:	2800      	cmp	r0, #0
 8011df0:	f000 80ae 	beq.w	8011f50 <_dtoa_r+0x518>
 8011df4:	9b07      	ldr	r3, [sp, #28]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	f000 80aa 	beq.w	8011f50 <_dtoa_r+0x518>
 8011dfc:	9b00      	ldr	r3, [sp, #0]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	dd37      	ble.n	8011e72 <_dtoa_r+0x43a>
 8011e02:	1e7b      	subs	r3, r7, #1
 8011e04:	9304      	str	r3, [sp, #16]
 8011e06:	4620      	mov	r0, r4
 8011e08:	4b7d      	ldr	r3, [pc, #500]	@ (8012000 <_dtoa_r+0x5c8>)
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	4629      	mov	r1, r5
 8011e0e:	f7ee fc1b 	bl	8000648 <__aeabi_dmul>
 8011e12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e16:	9c00      	ldr	r4, [sp, #0]
 8011e18:	3601      	adds	r6, #1
 8011e1a:	4630      	mov	r0, r6
 8011e1c:	f7ee fbaa 	bl	8000574 <__aeabi_i2d>
 8011e20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011e24:	f7ee fc10 	bl	8000648 <__aeabi_dmul>
 8011e28:	4b76      	ldr	r3, [pc, #472]	@ (8012004 <_dtoa_r+0x5cc>)
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	f7ee fa56 	bl	80002dc <__adddf3>
 8011e30:	4605      	mov	r5, r0
 8011e32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011e36:	2c00      	cmp	r4, #0
 8011e38:	f040 808d 	bne.w	8011f56 <_dtoa_r+0x51e>
 8011e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e40:	4b71      	ldr	r3, [pc, #452]	@ (8012008 <_dtoa_r+0x5d0>)
 8011e42:	2200      	movs	r2, #0
 8011e44:	f7ee fa48 	bl	80002d8 <__aeabi_dsub>
 8011e48:	4602      	mov	r2, r0
 8011e4a:	460b      	mov	r3, r1
 8011e4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011e50:	462a      	mov	r2, r5
 8011e52:	4633      	mov	r3, r6
 8011e54:	f7ee fe88 	bl	8000b68 <__aeabi_dcmpgt>
 8011e58:	2800      	cmp	r0, #0
 8011e5a:	f040 828b 	bne.w	8012374 <_dtoa_r+0x93c>
 8011e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e62:	462a      	mov	r2, r5
 8011e64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011e68:	f7ee fe60 	bl	8000b2c <__aeabi_dcmplt>
 8011e6c:	2800      	cmp	r0, #0
 8011e6e:	f040 8128 	bne.w	80120c2 <_dtoa_r+0x68a>
 8011e72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011e76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011e7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	f2c0 815a 	blt.w	8012136 <_dtoa_r+0x6fe>
 8011e82:	2f0e      	cmp	r7, #14
 8011e84:	f300 8157 	bgt.w	8012136 <_dtoa_r+0x6fe>
 8011e88:	4b5a      	ldr	r3, [pc, #360]	@ (8011ff4 <_dtoa_r+0x5bc>)
 8011e8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011e8e:	ed93 7b00 	vldr	d7, [r3]
 8011e92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	ed8d 7b00 	vstr	d7, [sp]
 8011e9a:	da03      	bge.n	8011ea4 <_dtoa_r+0x46c>
 8011e9c:	9b07      	ldr	r3, [sp, #28]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	f340 8101 	ble.w	80120a6 <_dtoa_r+0x66e>
 8011ea4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011ea8:	4656      	mov	r6, sl
 8011eaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011eae:	4620      	mov	r0, r4
 8011eb0:	4629      	mov	r1, r5
 8011eb2:	f7ee fcf3 	bl	800089c <__aeabi_ddiv>
 8011eb6:	f7ee fe77 	bl	8000ba8 <__aeabi_d2iz>
 8011eba:	4680      	mov	r8, r0
 8011ebc:	f7ee fb5a 	bl	8000574 <__aeabi_i2d>
 8011ec0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ec4:	f7ee fbc0 	bl	8000648 <__aeabi_dmul>
 8011ec8:	4602      	mov	r2, r0
 8011eca:	460b      	mov	r3, r1
 8011ecc:	4620      	mov	r0, r4
 8011ece:	4629      	mov	r1, r5
 8011ed0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011ed4:	f7ee fa00 	bl	80002d8 <__aeabi_dsub>
 8011ed8:	f806 4b01 	strb.w	r4, [r6], #1
 8011edc:	9d07      	ldr	r5, [sp, #28]
 8011ede:	eba6 040a 	sub.w	r4, r6, sl
 8011ee2:	42a5      	cmp	r5, r4
 8011ee4:	4602      	mov	r2, r0
 8011ee6:	460b      	mov	r3, r1
 8011ee8:	f040 8117 	bne.w	801211a <_dtoa_r+0x6e2>
 8011eec:	f7ee f9f6 	bl	80002dc <__adddf3>
 8011ef0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ef4:	4604      	mov	r4, r0
 8011ef6:	460d      	mov	r5, r1
 8011ef8:	f7ee fe36 	bl	8000b68 <__aeabi_dcmpgt>
 8011efc:	2800      	cmp	r0, #0
 8011efe:	f040 80f9 	bne.w	80120f4 <_dtoa_r+0x6bc>
 8011f02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011f06:	4620      	mov	r0, r4
 8011f08:	4629      	mov	r1, r5
 8011f0a:	f7ee fe05 	bl	8000b18 <__aeabi_dcmpeq>
 8011f0e:	b118      	cbz	r0, 8011f18 <_dtoa_r+0x4e0>
 8011f10:	f018 0f01 	tst.w	r8, #1
 8011f14:	f040 80ee 	bne.w	80120f4 <_dtoa_r+0x6bc>
 8011f18:	4649      	mov	r1, r9
 8011f1a:	4658      	mov	r0, fp
 8011f1c:	f000 fc90 	bl	8012840 <_Bfree>
 8011f20:	2300      	movs	r3, #0
 8011f22:	7033      	strb	r3, [r6, #0]
 8011f24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011f26:	3701      	adds	r7, #1
 8011f28:	601f      	str	r7, [r3, #0]
 8011f2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	f000 831d 	beq.w	801256c <_dtoa_r+0xb34>
 8011f32:	601e      	str	r6, [r3, #0]
 8011f34:	e31a      	b.n	801256c <_dtoa_r+0xb34>
 8011f36:	07e2      	lsls	r2, r4, #31
 8011f38:	d505      	bpl.n	8011f46 <_dtoa_r+0x50e>
 8011f3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011f3e:	f7ee fb83 	bl	8000648 <__aeabi_dmul>
 8011f42:	3601      	adds	r6, #1
 8011f44:	2301      	movs	r3, #1
 8011f46:	1064      	asrs	r4, r4, #1
 8011f48:	3508      	adds	r5, #8
 8011f4a:	e73f      	b.n	8011dcc <_dtoa_r+0x394>
 8011f4c:	2602      	movs	r6, #2
 8011f4e:	e742      	b.n	8011dd6 <_dtoa_r+0x39e>
 8011f50:	9c07      	ldr	r4, [sp, #28]
 8011f52:	9704      	str	r7, [sp, #16]
 8011f54:	e761      	b.n	8011e1a <_dtoa_r+0x3e2>
 8011f56:	4b27      	ldr	r3, [pc, #156]	@ (8011ff4 <_dtoa_r+0x5bc>)
 8011f58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011f5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011f5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011f62:	4454      	add	r4, sl
 8011f64:	2900      	cmp	r1, #0
 8011f66:	d053      	beq.n	8012010 <_dtoa_r+0x5d8>
 8011f68:	4928      	ldr	r1, [pc, #160]	@ (801200c <_dtoa_r+0x5d4>)
 8011f6a:	2000      	movs	r0, #0
 8011f6c:	f7ee fc96 	bl	800089c <__aeabi_ddiv>
 8011f70:	4633      	mov	r3, r6
 8011f72:	462a      	mov	r2, r5
 8011f74:	f7ee f9b0 	bl	80002d8 <__aeabi_dsub>
 8011f78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011f7c:	4656      	mov	r6, sl
 8011f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f82:	f7ee fe11 	bl	8000ba8 <__aeabi_d2iz>
 8011f86:	4605      	mov	r5, r0
 8011f88:	f7ee faf4 	bl	8000574 <__aeabi_i2d>
 8011f8c:	4602      	mov	r2, r0
 8011f8e:	460b      	mov	r3, r1
 8011f90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f94:	f7ee f9a0 	bl	80002d8 <__aeabi_dsub>
 8011f98:	3530      	adds	r5, #48	@ 0x30
 8011f9a:	4602      	mov	r2, r0
 8011f9c:	460b      	mov	r3, r1
 8011f9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011fa2:	f806 5b01 	strb.w	r5, [r6], #1
 8011fa6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011faa:	f7ee fdbf 	bl	8000b2c <__aeabi_dcmplt>
 8011fae:	2800      	cmp	r0, #0
 8011fb0:	d171      	bne.n	8012096 <_dtoa_r+0x65e>
 8011fb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011fb6:	4911      	ldr	r1, [pc, #68]	@ (8011ffc <_dtoa_r+0x5c4>)
 8011fb8:	2000      	movs	r0, #0
 8011fba:	f7ee f98d 	bl	80002d8 <__aeabi_dsub>
 8011fbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011fc2:	f7ee fdb3 	bl	8000b2c <__aeabi_dcmplt>
 8011fc6:	2800      	cmp	r0, #0
 8011fc8:	f040 8095 	bne.w	80120f6 <_dtoa_r+0x6be>
 8011fcc:	42a6      	cmp	r6, r4
 8011fce:	f43f af50 	beq.w	8011e72 <_dtoa_r+0x43a>
 8011fd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8012000 <_dtoa_r+0x5c8>)
 8011fd8:	2200      	movs	r2, #0
 8011fda:	f7ee fb35 	bl	8000648 <__aeabi_dmul>
 8011fde:	4b08      	ldr	r3, [pc, #32]	@ (8012000 <_dtoa_r+0x5c8>)
 8011fe0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fea:	f7ee fb2d 	bl	8000648 <__aeabi_dmul>
 8011fee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ff2:	e7c4      	b.n	8011f7e <_dtoa_r+0x546>
 8011ff4:	080170e0 	.word	0x080170e0
 8011ff8:	080170b8 	.word	0x080170b8
 8011ffc:	3ff00000 	.word	0x3ff00000
 8012000:	40240000 	.word	0x40240000
 8012004:	401c0000 	.word	0x401c0000
 8012008:	40140000 	.word	0x40140000
 801200c:	3fe00000 	.word	0x3fe00000
 8012010:	4631      	mov	r1, r6
 8012012:	4628      	mov	r0, r5
 8012014:	f7ee fb18 	bl	8000648 <__aeabi_dmul>
 8012018:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801201c:	9415      	str	r4, [sp, #84]	@ 0x54
 801201e:	4656      	mov	r6, sl
 8012020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012024:	f7ee fdc0 	bl	8000ba8 <__aeabi_d2iz>
 8012028:	4605      	mov	r5, r0
 801202a:	f7ee faa3 	bl	8000574 <__aeabi_i2d>
 801202e:	4602      	mov	r2, r0
 8012030:	460b      	mov	r3, r1
 8012032:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012036:	f7ee f94f 	bl	80002d8 <__aeabi_dsub>
 801203a:	3530      	adds	r5, #48	@ 0x30
 801203c:	f806 5b01 	strb.w	r5, [r6], #1
 8012040:	4602      	mov	r2, r0
 8012042:	460b      	mov	r3, r1
 8012044:	42a6      	cmp	r6, r4
 8012046:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801204a:	f04f 0200 	mov.w	r2, #0
 801204e:	d124      	bne.n	801209a <_dtoa_r+0x662>
 8012050:	4bac      	ldr	r3, [pc, #688]	@ (8012304 <_dtoa_r+0x8cc>)
 8012052:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012056:	f7ee f941 	bl	80002dc <__adddf3>
 801205a:	4602      	mov	r2, r0
 801205c:	460b      	mov	r3, r1
 801205e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012062:	f7ee fd81 	bl	8000b68 <__aeabi_dcmpgt>
 8012066:	2800      	cmp	r0, #0
 8012068:	d145      	bne.n	80120f6 <_dtoa_r+0x6be>
 801206a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801206e:	49a5      	ldr	r1, [pc, #660]	@ (8012304 <_dtoa_r+0x8cc>)
 8012070:	2000      	movs	r0, #0
 8012072:	f7ee f931 	bl	80002d8 <__aeabi_dsub>
 8012076:	4602      	mov	r2, r0
 8012078:	460b      	mov	r3, r1
 801207a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801207e:	f7ee fd55 	bl	8000b2c <__aeabi_dcmplt>
 8012082:	2800      	cmp	r0, #0
 8012084:	f43f aef5 	beq.w	8011e72 <_dtoa_r+0x43a>
 8012088:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801208a:	1e73      	subs	r3, r6, #1
 801208c:	9315      	str	r3, [sp, #84]	@ 0x54
 801208e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012092:	2b30      	cmp	r3, #48	@ 0x30
 8012094:	d0f8      	beq.n	8012088 <_dtoa_r+0x650>
 8012096:	9f04      	ldr	r7, [sp, #16]
 8012098:	e73e      	b.n	8011f18 <_dtoa_r+0x4e0>
 801209a:	4b9b      	ldr	r3, [pc, #620]	@ (8012308 <_dtoa_r+0x8d0>)
 801209c:	f7ee fad4 	bl	8000648 <__aeabi_dmul>
 80120a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80120a4:	e7bc      	b.n	8012020 <_dtoa_r+0x5e8>
 80120a6:	d10c      	bne.n	80120c2 <_dtoa_r+0x68a>
 80120a8:	4b98      	ldr	r3, [pc, #608]	@ (801230c <_dtoa_r+0x8d4>)
 80120aa:	2200      	movs	r2, #0
 80120ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80120b0:	f7ee faca 	bl	8000648 <__aeabi_dmul>
 80120b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80120b8:	f7ee fd4c 	bl	8000b54 <__aeabi_dcmpge>
 80120bc:	2800      	cmp	r0, #0
 80120be:	f000 8157 	beq.w	8012370 <_dtoa_r+0x938>
 80120c2:	2400      	movs	r4, #0
 80120c4:	4625      	mov	r5, r4
 80120c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80120c8:	43db      	mvns	r3, r3
 80120ca:	9304      	str	r3, [sp, #16]
 80120cc:	4656      	mov	r6, sl
 80120ce:	2700      	movs	r7, #0
 80120d0:	4621      	mov	r1, r4
 80120d2:	4658      	mov	r0, fp
 80120d4:	f000 fbb4 	bl	8012840 <_Bfree>
 80120d8:	2d00      	cmp	r5, #0
 80120da:	d0dc      	beq.n	8012096 <_dtoa_r+0x65e>
 80120dc:	b12f      	cbz	r7, 80120ea <_dtoa_r+0x6b2>
 80120de:	42af      	cmp	r7, r5
 80120e0:	d003      	beq.n	80120ea <_dtoa_r+0x6b2>
 80120e2:	4639      	mov	r1, r7
 80120e4:	4658      	mov	r0, fp
 80120e6:	f000 fbab 	bl	8012840 <_Bfree>
 80120ea:	4629      	mov	r1, r5
 80120ec:	4658      	mov	r0, fp
 80120ee:	f000 fba7 	bl	8012840 <_Bfree>
 80120f2:	e7d0      	b.n	8012096 <_dtoa_r+0x65e>
 80120f4:	9704      	str	r7, [sp, #16]
 80120f6:	4633      	mov	r3, r6
 80120f8:	461e      	mov	r6, r3
 80120fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80120fe:	2a39      	cmp	r2, #57	@ 0x39
 8012100:	d107      	bne.n	8012112 <_dtoa_r+0x6da>
 8012102:	459a      	cmp	sl, r3
 8012104:	d1f8      	bne.n	80120f8 <_dtoa_r+0x6c0>
 8012106:	9a04      	ldr	r2, [sp, #16]
 8012108:	3201      	adds	r2, #1
 801210a:	9204      	str	r2, [sp, #16]
 801210c:	2230      	movs	r2, #48	@ 0x30
 801210e:	f88a 2000 	strb.w	r2, [sl]
 8012112:	781a      	ldrb	r2, [r3, #0]
 8012114:	3201      	adds	r2, #1
 8012116:	701a      	strb	r2, [r3, #0]
 8012118:	e7bd      	b.n	8012096 <_dtoa_r+0x65e>
 801211a:	4b7b      	ldr	r3, [pc, #492]	@ (8012308 <_dtoa_r+0x8d0>)
 801211c:	2200      	movs	r2, #0
 801211e:	f7ee fa93 	bl	8000648 <__aeabi_dmul>
 8012122:	2200      	movs	r2, #0
 8012124:	2300      	movs	r3, #0
 8012126:	4604      	mov	r4, r0
 8012128:	460d      	mov	r5, r1
 801212a:	f7ee fcf5 	bl	8000b18 <__aeabi_dcmpeq>
 801212e:	2800      	cmp	r0, #0
 8012130:	f43f aebb 	beq.w	8011eaa <_dtoa_r+0x472>
 8012134:	e6f0      	b.n	8011f18 <_dtoa_r+0x4e0>
 8012136:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012138:	2a00      	cmp	r2, #0
 801213a:	f000 80db 	beq.w	80122f4 <_dtoa_r+0x8bc>
 801213e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012140:	2a01      	cmp	r2, #1
 8012142:	f300 80bf 	bgt.w	80122c4 <_dtoa_r+0x88c>
 8012146:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012148:	2a00      	cmp	r2, #0
 801214a:	f000 80b7 	beq.w	80122bc <_dtoa_r+0x884>
 801214e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012152:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012154:	4646      	mov	r6, r8
 8012156:	9a08      	ldr	r2, [sp, #32]
 8012158:	2101      	movs	r1, #1
 801215a:	441a      	add	r2, r3
 801215c:	4658      	mov	r0, fp
 801215e:	4498      	add	r8, r3
 8012160:	9208      	str	r2, [sp, #32]
 8012162:	f000 fc6b 	bl	8012a3c <__i2b>
 8012166:	4605      	mov	r5, r0
 8012168:	b15e      	cbz	r6, 8012182 <_dtoa_r+0x74a>
 801216a:	9b08      	ldr	r3, [sp, #32]
 801216c:	2b00      	cmp	r3, #0
 801216e:	dd08      	ble.n	8012182 <_dtoa_r+0x74a>
 8012170:	42b3      	cmp	r3, r6
 8012172:	9a08      	ldr	r2, [sp, #32]
 8012174:	bfa8      	it	ge
 8012176:	4633      	movge	r3, r6
 8012178:	eba8 0803 	sub.w	r8, r8, r3
 801217c:	1af6      	subs	r6, r6, r3
 801217e:	1ad3      	subs	r3, r2, r3
 8012180:	9308      	str	r3, [sp, #32]
 8012182:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012184:	b1f3      	cbz	r3, 80121c4 <_dtoa_r+0x78c>
 8012186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012188:	2b00      	cmp	r3, #0
 801218a:	f000 80b7 	beq.w	80122fc <_dtoa_r+0x8c4>
 801218e:	b18c      	cbz	r4, 80121b4 <_dtoa_r+0x77c>
 8012190:	4629      	mov	r1, r5
 8012192:	4622      	mov	r2, r4
 8012194:	4658      	mov	r0, fp
 8012196:	f000 fd11 	bl	8012bbc <__pow5mult>
 801219a:	464a      	mov	r2, r9
 801219c:	4601      	mov	r1, r0
 801219e:	4605      	mov	r5, r0
 80121a0:	4658      	mov	r0, fp
 80121a2:	f000 fc61 	bl	8012a68 <__multiply>
 80121a6:	4649      	mov	r1, r9
 80121a8:	9004      	str	r0, [sp, #16]
 80121aa:	4658      	mov	r0, fp
 80121ac:	f000 fb48 	bl	8012840 <_Bfree>
 80121b0:	9b04      	ldr	r3, [sp, #16]
 80121b2:	4699      	mov	r9, r3
 80121b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80121b6:	1b1a      	subs	r2, r3, r4
 80121b8:	d004      	beq.n	80121c4 <_dtoa_r+0x78c>
 80121ba:	4649      	mov	r1, r9
 80121bc:	4658      	mov	r0, fp
 80121be:	f000 fcfd 	bl	8012bbc <__pow5mult>
 80121c2:	4681      	mov	r9, r0
 80121c4:	2101      	movs	r1, #1
 80121c6:	4658      	mov	r0, fp
 80121c8:	f000 fc38 	bl	8012a3c <__i2b>
 80121cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80121ce:	4604      	mov	r4, r0
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	f000 81cf 	beq.w	8012574 <_dtoa_r+0xb3c>
 80121d6:	461a      	mov	r2, r3
 80121d8:	4601      	mov	r1, r0
 80121da:	4658      	mov	r0, fp
 80121dc:	f000 fcee 	bl	8012bbc <__pow5mult>
 80121e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121e2:	2b01      	cmp	r3, #1
 80121e4:	4604      	mov	r4, r0
 80121e6:	f300 8095 	bgt.w	8012314 <_dtoa_r+0x8dc>
 80121ea:	9b02      	ldr	r3, [sp, #8]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	f040 8087 	bne.w	8012300 <_dtoa_r+0x8c8>
 80121f2:	9b03      	ldr	r3, [sp, #12]
 80121f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	f040 8089 	bne.w	8012310 <_dtoa_r+0x8d8>
 80121fe:	9b03      	ldr	r3, [sp, #12]
 8012200:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012204:	0d1b      	lsrs	r3, r3, #20
 8012206:	051b      	lsls	r3, r3, #20
 8012208:	b12b      	cbz	r3, 8012216 <_dtoa_r+0x7de>
 801220a:	9b08      	ldr	r3, [sp, #32]
 801220c:	3301      	adds	r3, #1
 801220e:	9308      	str	r3, [sp, #32]
 8012210:	f108 0801 	add.w	r8, r8, #1
 8012214:	2301      	movs	r3, #1
 8012216:	930a      	str	r3, [sp, #40]	@ 0x28
 8012218:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801221a:	2b00      	cmp	r3, #0
 801221c:	f000 81b0 	beq.w	8012580 <_dtoa_r+0xb48>
 8012220:	6923      	ldr	r3, [r4, #16]
 8012222:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012226:	6918      	ldr	r0, [r3, #16]
 8012228:	f000 fbbc 	bl	80129a4 <__hi0bits>
 801222c:	f1c0 0020 	rsb	r0, r0, #32
 8012230:	9b08      	ldr	r3, [sp, #32]
 8012232:	4418      	add	r0, r3
 8012234:	f010 001f 	ands.w	r0, r0, #31
 8012238:	d077      	beq.n	801232a <_dtoa_r+0x8f2>
 801223a:	f1c0 0320 	rsb	r3, r0, #32
 801223e:	2b04      	cmp	r3, #4
 8012240:	dd6b      	ble.n	801231a <_dtoa_r+0x8e2>
 8012242:	9b08      	ldr	r3, [sp, #32]
 8012244:	f1c0 001c 	rsb	r0, r0, #28
 8012248:	4403      	add	r3, r0
 801224a:	4480      	add	r8, r0
 801224c:	4406      	add	r6, r0
 801224e:	9308      	str	r3, [sp, #32]
 8012250:	f1b8 0f00 	cmp.w	r8, #0
 8012254:	dd05      	ble.n	8012262 <_dtoa_r+0x82a>
 8012256:	4649      	mov	r1, r9
 8012258:	4642      	mov	r2, r8
 801225a:	4658      	mov	r0, fp
 801225c:	f000 fd08 	bl	8012c70 <__lshift>
 8012260:	4681      	mov	r9, r0
 8012262:	9b08      	ldr	r3, [sp, #32]
 8012264:	2b00      	cmp	r3, #0
 8012266:	dd05      	ble.n	8012274 <_dtoa_r+0x83c>
 8012268:	4621      	mov	r1, r4
 801226a:	461a      	mov	r2, r3
 801226c:	4658      	mov	r0, fp
 801226e:	f000 fcff 	bl	8012c70 <__lshift>
 8012272:	4604      	mov	r4, r0
 8012274:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012276:	2b00      	cmp	r3, #0
 8012278:	d059      	beq.n	801232e <_dtoa_r+0x8f6>
 801227a:	4621      	mov	r1, r4
 801227c:	4648      	mov	r0, r9
 801227e:	f000 fd63 	bl	8012d48 <__mcmp>
 8012282:	2800      	cmp	r0, #0
 8012284:	da53      	bge.n	801232e <_dtoa_r+0x8f6>
 8012286:	1e7b      	subs	r3, r7, #1
 8012288:	9304      	str	r3, [sp, #16]
 801228a:	4649      	mov	r1, r9
 801228c:	2300      	movs	r3, #0
 801228e:	220a      	movs	r2, #10
 8012290:	4658      	mov	r0, fp
 8012292:	f000 faf7 	bl	8012884 <__multadd>
 8012296:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012298:	4681      	mov	r9, r0
 801229a:	2b00      	cmp	r3, #0
 801229c:	f000 8172 	beq.w	8012584 <_dtoa_r+0xb4c>
 80122a0:	2300      	movs	r3, #0
 80122a2:	4629      	mov	r1, r5
 80122a4:	220a      	movs	r2, #10
 80122a6:	4658      	mov	r0, fp
 80122a8:	f000 faec 	bl	8012884 <__multadd>
 80122ac:	9b00      	ldr	r3, [sp, #0]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	4605      	mov	r5, r0
 80122b2:	dc67      	bgt.n	8012384 <_dtoa_r+0x94c>
 80122b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122b6:	2b02      	cmp	r3, #2
 80122b8:	dc41      	bgt.n	801233e <_dtoa_r+0x906>
 80122ba:	e063      	b.n	8012384 <_dtoa_r+0x94c>
 80122bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80122be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80122c2:	e746      	b.n	8012152 <_dtoa_r+0x71a>
 80122c4:	9b07      	ldr	r3, [sp, #28]
 80122c6:	1e5c      	subs	r4, r3, #1
 80122c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80122ca:	42a3      	cmp	r3, r4
 80122cc:	bfbf      	itttt	lt
 80122ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80122d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80122d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80122d4:	1ae3      	sublt	r3, r4, r3
 80122d6:	bfb4      	ite	lt
 80122d8:	18d2      	addlt	r2, r2, r3
 80122da:	1b1c      	subge	r4, r3, r4
 80122dc:	9b07      	ldr	r3, [sp, #28]
 80122de:	bfbc      	itt	lt
 80122e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80122e2:	2400      	movlt	r4, #0
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	bfb5      	itete	lt
 80122e8:	eba8 0603 	sublt.w	r6, r8, r3
 80122ec:	9b07      	ldrge	r3, [sp, #28]
 80122ee:	2300      	movlt	r3, #0
 80122f0:	4646      	movge	r6, r8
 80122f2:	e730      	b.n	8012156 <_dtoa_r+0x71e>
 80122f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80122f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80122f8:	4646      	mov	r6, r8
 80122fa:	e735      	b.n	8012168 <_dtoa_r+0x730>
 80122fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80122fe:	e75c      	b.n	80121ba <_dtoa_r+0x782>
 8012300:	2300      	movs	r3, #0
 8012302:	e788      	b.n	8012216 <_dtoa_r+0x7de>
 8012304:	3fe00000 	.word	0x3fe00000
 8012308:	40240000 	.word	0x40240000
 801230c:	40140000 	.word	0x40140000
 8012310:	9b02      	ldr	r3, [sp, #8]
 8012312:	e780      	b.n	8012216 <_dtoa_r+0x7de>
 8012314:	2300      	movs	r3, #0
 8012316:	930a      	str	r3, [sp, #40]	@ 0x28
 8012318:	e782      	b.n	8012220 <_dtoa_r+0x7e8>
 801231a:	d099      	beq.n	8012250 <_dtoa_r+0x818>
 801231c:	9a08      	ldr	r2, [sp, #32]
 801231e:	331c      	adds	r3, #28
 8012320:	441a      	add	r2, r3
 8012322:	4498      	add	r8, r3
 8012324:	441e      	add	r6, r3
 8012326:	9208      	str	r2, [sp, #32]
 8012328:	e792      	b.n	8012250 <_dtoa_r+0x818>
 801232a:	4603      	mov	r3, r0
 801232c:	e7f6      	b.n	801231c <_dtoa_r+0x8e4>
 801232e:	9b07      	ldr	r3, [sp, #28]
 8012330:	9704      	str	r7, [sp, #16]
 8012332:	2b00      	cmp	r3, #0
 8012334:	dc20      	bgt.n	8012378 <_dtoa_r+0x940>
 8012336:	9300      	str	r3, [sp, #0]
 8012338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801233a:	2b02      	cmp	r3, #2
 801233c:	dd1e      	ble.n	801237c <_dtoa_r+0x944>
 801233e:	9b00      	ldr	r3, [sp, #0]
 8012340:	2b00      	cmp	r3, #0
 8012342:	f47f aec0 	bne.w	80120c6 <_dtoa_r+0x68e>
 8012346:	4621      	mov	r1, r4
 8012348:	2205      	movs	r2, #5
 801234a:	4658      	mov	r0, fp
 801234c:	f000 fa9a 	bl	8012884 <__multadd>
 8012350:	4601      	mov	r1, r0
 8012352:	4604      	mov	r4, r0
 8012354:	4648      	mov	r0, r9
 8012356:	f000 fcf7 	bl	8012d48 <__mcmp>
 801235a:	2800      	cmp	r0, #0
 801235c:	f77f aeb3 	ble.w	80120c6 <_dtoa_r+0x68e>
 8012360:	4656      	mov	r6, sl
 8012362:	2331      	movs	r3, #49	@ 0x31
 8012364:	f806 3b01 	strb.w	r3, [r6], #1
 8012368:	9b04      	ldr	r3, [sp, #16]
 801236a:	3301      	adds	r3, #1
 801236c:	9304      	str	r3, [sp, #16]
 801236e:	e6ae      	b.n	80120ce <_dtoa_r+0x696>
 8012370:	9c07      	ldr	r4, [sp, #28]
 8012372:	9704      	str	r7, [sp, #16]
 8012374:	4625      	mov	r5, r4
 8012376:	e7f3      	b.n	8012360 <_dtoa_r+0x928>
 8012378:	9b07      	ldr	r3, [sp, #28]
 801237a:	9300      	str	r3, [sp, #0]
 801237c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801237e:	2b00      	cmp	r3, #0
 8012380:	f000 8104 	beq.w	801258c <_dtoa_r+0xb54>
 8012384:	2e00      	cmp	r6, #0
 8012386:	dd05      	ble.n	8012394 <_dtoa_r+0x95c>
 8012388:	4629      	mov	r1, r5
 801238a:	4632      	mov	r2, r6
 801238c:	4658      	mov	r0, fp
 801238e:	f000 fc6f 	bl	8012c70 <__lshift>
 8012392:	4605      	mov	r5, r0
 8012394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012396:	2b00      	cmp	r3, #0
 8012398:	d05a      	beq.n	8012450 <_dtoa_r+0xa18>
 801239a:	6869      	ldr	r1, [r5, #4]
 801239c:	4658      	mov	r0, fp
 801239e:	f000 fa0f 	bl	80127c0 <_Balloc>
 80123a2:	4606      	mov	r6, r0
 80123a4:	b928      	cbnz	r0, 80123b2 <_dtoa_r+0x97a>
 80123a6:	4b84      	ldr	r3, [pc, #528]	@ (80125b8 <_dtoa_r+0xb80>)
 80123a8:	4602      	mov	r2, r0
 80123aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80123ae:	f7ff bb5a 	b.w	8011a66 <_dtoa_r+0x2e>
 80123b2:	692a      	ldr	r2, [r5, #16]
 80123b4:	3202      	adds	r2, #2
 80123b6:	0092      	lsls	r2, r2, #2
 80123b8:	f105 010c 	add.w	r1, r5, #12
 80123bc:	300c      	adds	r0, #12
 80123be:	f7ff fa9c 	bl	80118fa <memcpy>
 80123c2:	2201      	movs	r2, #1
 80123c4:	4631      	mov	r1, r6
 80123c6:	4658      	mov	r0, fp
 80123c8:	f000 fc52 	bl	8012c70 <__lshift>
 80123cc:	f10a 0301 	add.w	r3, sl, #1
 80123d0:	9307      	str	r3, [sp, #28]
 80123d2:	9b00      	ldr	r3, [sp, #0]
 80123d4:	4453      	add	r3, sl
 80123d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80123d8:	9b02      	ldr	r3, [sp, #8]
 80123da:	f003 0301 	and.w	r3, r3, #1
 80123de:	462f      	mov	r7, r5
 80123e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80123e2:	4605      	mov	r5, r0
 80123e4:	9b07      	ldr	r3, [sp, #28]
 80123e6:	4621      	mov	r1, r4
 80123e8:	3b01      	subs	r3, #1
 80123ea:	4648      	mov	r0, r9
 80123ec:	9300      	str	r3, [sp, #0]
 80123ee:	f7ff fa99 	bl	8011924 <quorem>
 80123f2:	4639      	mov	r1, r7
 80123f4:	9002      	str	r0, [sp, #8]
 80123f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80123fa:	4648      	mov	r0, r9
 80123fc:	f000 fca4 	bl	8012d48 <__mcmp>
 8012400:	462a      	mov	r2, r5
 8012402:	9008      	str	r0, [sp, #32]
 8012404:	4621      	mov	r1, r4
 8012406:	4658      	mov	r0, fp
 8012408:	f000 fcba 	bl	8012d80 <__mdiff>
 801240c:	68c2      	ldr	r2, [r0, #12]
 801240e:	4606      	mov	r6, r0
 8012410:	bb02      	cbnz	r2, 8012454 <_dtoa_r+0xa1c>
 8012412:	4601      	mov	r1, r0
 8012414:	4648      	mov	r0, r9
 8012416:	f000 fc97 	bl	8012d48 <__mcmp>
 801241a:	4602      	mov	r2, r0
 801241c:	4631      	mov	r1, r6
 801241e:	4658      	mov	r0, fp
 8012420:	920e      	str	r2, [sp, #56]	@ 0x38
 8012422:	f000 fa0d 	bl	8012840 <_Bfree>
 8012426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012428:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801242a:	9e07      	ldr	r6, [sp, #28]
 801242c:	ea43 0102 	orr.w	r1, r3, r2
 8012430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012432:	4319      	orrs	r1, r3
 8012434:	d110      	bne.n	8012458 <_dtoa_r+0xa20>
 8012436:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801243a:	d029      	beq.n	8012490 <_dtoa_r+0xa58>
 801243c:	9b08      	ldr	r3, [sp, #32]
 801243e:	2b00      	cmp	r3, #0
 8012440:	dd02      	ble.n	8012448 <_dtoa_r+0xa10>
 8012442:	9b02      	ldr	r3, [sp, #8]
 8012444:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012448:	9b00      	ldr	r3, [sp, #0]
 801244a:	f883 8000 	strb.w	r8, [r3]
 801244e:	e63f      	b.n	80120d0 <_dtoa_r+0x698>
 8012450:	4628      	mov	r0, r5
 8012452:	e7bb      	b.n	80123cc <_dtoa_r+0x994>
 8012454:	2201      	movs	r2, #1
 8012456:	e7e1      	b.n	801241c <_dtoa_r+0x9e4>
 8012458:	9b08      	ldr	r3, [sp, #32]
 801245a:	2b00      	cmp	r3, #0
 801245c:	db04      	blt.n	8012468 <_dtoa_r+0xa30>
 801245e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012460:	430b      	orrs	r3, r1
 8012462:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012464:	430b      	orrs	r3, r1
 8012466:	d120      	bne.n	80124aa <_dtoa_r+0xa72>
 8012468:	2a00      	cmp	r2, #0
 801246a:	dded      	ble.n	8012448 <_dtoa_r+0xa10>
 801246c:	4649      	mov	r1, r9
 801246e:	2201      	movs	r2, #1
 8012470:	4658      	mov	r0, fp
 8012472:	f000 fbfd 	bl	8012c70 <__lshift>
 8012476:	4621      	mov	r1, r4
 8012478:	4681      	mov	r9, r0
 801247a:	f000 fc65 	bl	8012d48 <__mcmp>
 801247e:	2800      	cmp	r0, #0
 8012480:	dc03      	bgt.n	801248a <_dtoa_r+0xa52>
 8012482:	d1e1      	bne.n	8012448 <_dtoa_r+0xa10>
 8012484:	f018 0f01 	tst.w	r8, #1
 8012488:	d0de      	beq.n	8012448 <_dtoa_r+0xa10>
 801248a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801248e:	d1d8      	bne.n	8012442 <_dtoa_r+0xa0a>
 8012490:	9a00      	ldr	r2, [sp, #0]
 8012492:	2339      	movs	r3, #57	@ 0x39
 8012494:	7013      	strb	r3, [r2, #0]
 8012496:	4633      	mov	r3, r6
 8012498:	461e      	mov	r6, r3
 801249a:	3b01      	subs	r3, #1
 801249c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80124a0:	2a39      	cmp	r2, #57	@ 0x39
 80124a2:	d052      	beq.n	801254a <_dtoa_r+0xb12>
 80124a4:	3201      	adds	r2, #1
 80124a6:	701a      	strb	r2, [r3, #0]
 80124a8:	e612      	b.n	80120d0 <_dtoa_r+0x698>
 80124aa:	2a00      	cmp	r2, #0
 80124ac:	dd07      	ble.n	80124be <_dtoa_r+0xa86>
 80124ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80124b2:	d0ed      	beq.n	8012490 <_dtoa_r+0xa58>
 80124b4:	9a00      	ldr	r2, [sp, #0]
 80124b6:	f108 0301 	add.w	r3, r8, #1
 80124ba:	7013      	strb	r3, [r2, #0]
 80124bc:	e608      	b.n	80120d0 <_dtoa_r+0x698>
 80124be:	9b07      	ldr	r3, [sp, #28]
 80124c0:	9a07      	ldr	r2, [sp, #28]
 80124c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80124c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80124c8:	4293      	cmp	r3, r2
 80124ca:	d028      	beq.n	801251e <_dtoa_r+0xae6>
 80124cc:	4649      	mov	r1, r9
 80124ce:	2300      	movs	r3, #0
 80124d0:	220a      	movs	r2, #10
 80124d2:	4658      	mov	r0, fp
 80124d4:	f000 f9d6 	bl	8012884 <__multadd>
 80124d8:	42af      	cmp	r7, r5
 80124da:	4681      	mov	r9, r0
 80124dc:	f04f 0300 	mov.w	r3, #0
 80124e0:	f04f 020a 	mov.w	r2, #10
 80124e4:	4639      	mov	r1, r7
 80124e6:	4658      	mov	r0, fp
 80124e8:	d107      	bne.n	80124fa <_dtoa_r+0xac2>
 80124ea:	f000 f9cb 	bl	8012884 <__multadd>
 80124ee:	4607      	mov	r7, r0
 80124f0:	4605      	mov	r5, r0
 80124f2:	9b07      	ldr	r3, [sp, #28]
 80124f4:	3301      	adds	r3, #1
 80124f6:	9307      	str	r3, [sp, #28]
 80124f8:	e774      	b.n	80123e4 <_dtoa_r+0x9ac>
 80124fa:	f000 f9c3 	bl	8012884 <__multadd>
 80124fe:	4629      	mov	r1, r5
 8012500:	4607      	mov	r7, r0
 8012502:	2300      	movs	r3, #0
 8012504:	220a      	movs	r2, #10
 8012506:	4658      	mov	r0, fp
 8012508:	f000 f9bc 	bl	8012884 <__multadd>
 801250c:	4605      	mov	r5, r0
 801250e:	e7f0      	b.n	80124f2 <_dtoa_r+0xaba>
 8012510:	9b00      	ldr	r3, [sp, #0]
 8012512:	2b00      	cmp	r3, #0
 8012514:	bfcc      	ite	gt
 8012516:	461e      	movgt	r6, r3
 8012518:	2601      	movle	r6, #1
 801251a:	4456      	add	r6, sl
 801251c:	2700      	movs	r7, #0
 801251e:	4649      	mov	r1, r9
 8012520:	2201      	movs	r2, #1
 8012522:	4658      	mov	r0, fp
 8012524:	f000 fba4 	bl	8012c70 <__lshift>
 8012528:	4621      	mov	r1, r4
 801252a:	4681      	mov	r9, r0
 801252c:	f000 fc0c 	bl	8012d48 <__mcmp>
 8012530:	2800      	cmp	r0, #0
 8012532:	dcb0      	bgt.n	8012496 <_dtoa_r+0xa5e>
 8012534:	d102      	bne.n	801253c <_dtoa_r+0xb04>
 8012536:	f018 0f01 	tst.w	r8, #1
 801253a:	d1ac      	bne.n	8012496 <_dtoa_r+0xa5e>
 801253c:	4633      	mov	r3, r6
 801253e:	461e      	mov	r6, r3
 8012540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012544:	2a30      	cmp	r2, #48	@ 0x30
 8012546:	d0fa      	beq.n	801253e <_dtoa_r+0xb06>
 8012548:	e5c2      	b.n	80120d0 <_dtoa_r+0x698>
 801254a:	459a      	cmp	sl, r3
 801254c:	d1a4      	bne.n	8012498 <_dtoa_r+0xa60>
 801254e:	9b04      	ldr	r3, [sp, #16]
 8012550:	3301      	adds	r3, #1
 8012552:	9304      	str	r3, [sp, #16]
 8012554:	2331      	movs	r3, #49	@ 0x31
 8012556:	f88a 3000 	strb.w	r3, [sl]
 801255a:	e5b9      	b.n	80120d0 <_dtoa_r+0x698>
 801255c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801255e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80125bc <_dtoa_r+0xb84>
 8012562:	b11b      	cbz	r3, 801256c <_dtoa_r+0xb34>
 8012564:	f10a 0308 	add.w	r3, sl, #8
 8012568:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801256a:	6013      	str	r3, [r2, #0]
 801256c:	4650      	mov	r0, sl
 801256e:	b019      	add	sp, #100	@ 0x64
 8012570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012576:	2b01      	cmp	r3, #1
 8012578:	f77f ae37 	ble.w	80121ea <_dtoa_r+0x7b2>
 801257c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801257e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012580:	2001      	movs	r0, #1
 8012582:	e655      	b.n	8012230 <_dtoa_r+0x7f8>
 8012584:	9b00      	ldr	r3, [sp, #0]
 8012586:	2b00      	cmp	r3, #0
 8012588:	f77f aed6 	ble.w	8012338 <_dtoa_r+0x900>
 801258c:	4656      	mov	r6, sl
 801258e:	4621      	mov	r1, r4
 8012590:	4648      	mov	r0, r9
 8012592:	f7ff f9c7 	bl	8011924 <quorem>
 8012596:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801259a:	f806 8b01 	strb.w	r8, [r6], #1
 801259e:	9b00      	ldr	r3, [sp, #0]
 80125a0:	eba6 020a 	sub.w	r2, r6, sl
 80125a4:	4293      	cmp	r3, r2
 80125a6:	ddb3      	ble.n	8012510 <_dtoa_r+0xad8>
 80125a8:	4649      	mov	r1, r9
 80125aa:	2300      	movs	r3, #0
 80125ac:	220a      	movs	r2, #10
 80125ae:	4658      	mov	r0, fp
 80125b0:	f000 f968 	bl	8012884 <__multadd>
 80125b4:	4681      	mov	r9, r0
 80125b6:	e7ea      	b.n	801258e <_dtoa_r+0xb56>
 80125b8:	0801703b 	.word	0x0801703b
 80125bc:	08016fbf 	.word	0x08016fbf

080125c0 <_free_r>:
 80125c0:	b538      	push	{r3, r4, r5, lr}
 80125c2:	4605      	mov	r5, r0
 80125c4:	2900      	cmp	r1, #0
 80125c6:	d041      	beq.n	801264c <_free_r+0x8c>
 80125c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80125cc:	1f0c      	subs	r4, r1, #4
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	bfb8      	it	lt
 80125d2:	18e4      	addlt	r4, r4, r3
 80125d4:	f000 f8e8 	bl	80127a8 <__malloc_lock>
 80125d8:	4a1d      	ldr	r2, [pc, #116]	@ (8012650 <_free_r+0x90>)
 80125da:	6813      	ldr	r3, [r2, #0]
 80125dc:	b933      	cbnz	r3, 80125ec <_free_r+0x2c>
 80125de:	6063      	str	r3, [r4, #4]
 80125e0:	6014      	str	r4, [r2, #0]
 80125e2:	4628      	mov	r0, r5
 80125e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125e8:	f000 b8e4 	b.w	80127b4 <__malloc_unlock>
 80125ec:	42a3      	cmp	r3, r4
 80125ee:	d908      	bls.n	8012602 <_free_r+0x42>
 80125f0:	6820      	ldr	r0, [r4, #0]
 80125f2:	1821      	adds	r1, r4, r0
 80125f4:	428b      	cmp	r3, r1
 80125f6:	bf01      	itttt	eq
 80125f8:	6819      	ldreq	r1, [r3, #0]
 80125fa:	685b      	ldreq	r3, [r3, #4]
 80125fc:	1809      	addeq	r1, r1, r0
 80125fe:	6021      	streq	r1, [r4, #0]
 8012600:	e7ed      	b.n	80125de <_free_r+0x1e>
 8012602:	461a      	mov	r2, r3
 8012604:	685b      	ldr	r3, [r3, #4]
 8012606:	b10b      	cbz	r3, 801260c <_free_r+0x4c>
 8012608:	42a3      	cmp	r3, r4
 801260a:	d9fa      	bls.n	8012602 <_free_r+0x42>
 801260c:	6811      	ldr	r1, [r2, #0]
 801260e:	1850      	adds	r0, r2, r1
 8012610:	42a0      	cmp	r0, r4
 8012612:	d10b      	bne.n	801262c <_free_r+0x6c>
 8012614:	6820      	ldr	r0, [r4, #0]
 8012616:	4401      	add	r1, r0
 8012618:	1850      	adds	r0, r2, r1
 801261a:	4283      	cmp	r3, r0
 801261c:	6011      	str	r1, [r2, #0]
 801261e:	d1e0      	bne.n	80125e2 <_free_r+0x22>
 8012620:	6818      	ldr	r0, [r3, #0]
 8012622:	685b      	ldr	r3, [r3, #4]
 8012624:	6053      	str	r3, [r2, #4]
 8012626:	4408      	add	r0, r1
 8012628:	6010      	str	r0, [r2, #0]
 801262a:	e7da      	b.n	80125e2 <_free_r+0x22>
 801262c:	d902      	bls.n	8012634 <_free_r+0x74>
 801262e:	230c      	movs	r3, #12
 8012630:	602b      	str	r3, [r5, #0]
 8012632:	e7d6      	b.n	80125e2 <_free_r+0x22>
 8012634:	6820      	ldr	r0, [r4, #0]
 8012636:	1821      	adds	r1, r4, r0
 8012638:	428b      	cmp	r3, r1
 801263a:	bf04      	itt	eq
 801263c:	6819      	ldreq	r1, [r3, #0]
 801263e:	685b      	ldreq	r3, [r3, #4]
 8012640:	6063      	str	r3, [r4, #4]
 8012642:	bf04      	itt	eq
 8012644:	1809      	addeq	r1, r1, r0
 8012646:	6021      	streq	r1, [r4, #0]
 8012648:	6054      	str	r4, [r2, #4]
 801264a:	e7ca      	b.n	80125e2 <_free_r+0x22>
 801264c:	bd38      	pop	{r3, r4, r5, pc}
 801264e:	bf00      	nop
 8012650:	20002698 	.word	0x20002698

08012654 <malloc>:
 8012654:	4b02      	ldr	r3, [pc, #8]	@ (8012660 <malloc+0xc>)
 8012656:	4601      	mov	r1, r0
 8012658:	6818      	ldr	r0, [r3, #0]
 801265a:	f000 b825 	b.w	80126a8 <_malloc_r>
 801265e:	bf00      	nop
 8012660:	200001cc 	.word	0x200001cc

08012664 <sbrk_aligned>:
 8012664:	b570      	push	{r4, r5, r6, lr}
 8012666:	4e0f      	ldr	r6, [pc, #60]	@ (80126a4 <sbrk_aligned+0x40>)
 8012668:	460c      	mov	r4, r1
 801266a:	6831      	ldr	r1, [r6, #0]
 801266c:	4605      	mov	r5, r0
 801266e:	b911      	cbnz	r1, 8012676 <sbrk_aligned+0x12>
 8012670:	f002 f988 	bl	8014984 <_sbrk_r>
 8012674:	6030      	str	r0, [r6, #0]
 8012676:	4621      	mov	r1, r4
 8012678:	4628      	mov	r0, r5
 801267a:	f002 f983 	bl	8014984 <_sbrk_r>
 801267e:	1c43      	adds	r3, r0, #1
 8012680:	d103      	bne.n	801268a <sbrk_aligned+0x26>
 8012682:	f04f 34ff 	mov.w	r4, #4294967295
 8012686:	4620      	mov	r0, r4
 8012688:	bd70      	pop	{r4, r5, r6, pc}
 801268a:	1cc4      	adds	r4, r0, #3
 801268c:	f024 0403 	bic.w	r4, r4, #3
 8012690:	42a0      	cmp	r0, r4
 8012692:	d0f8      	beq.n	8012686 <sbrk_aligned+0x22>
 8012694:	1a21      	subs	r1, r4, r0
 8012696:	4628      	mov	r0, r5
 8012698:	f002 f974 	bl	8014984 <_sbrk_r>
 801269c:	3001      	adds	r0, #1
 801269e:	d1f2      	bne.n	8012686 <sbrk_aligned+0x22>
 80126a0:	e7ef      	b.n	8012682 <sbrk_aligned+0x1e>
 80126a2:	bf00      	nop
 80126a4:	20002694 	.word	0x20002694

080126a8 <_malloc_r>:
 80126a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126ac:	1ccd      	adds	r5, r1, #3
 80126ae:	f025 0503 	bic.w	r5, r5, #3
 80126b2:	3508      	adds	r5, #8
 80126b4:	2d0c      	cmp	r5, #12
 80126b6:	bf38      	it	cc
 80126b8:	250c      	movcc	r5, #12
 80126ba:	2d00      	cmp	r5, #0
 80126bc:	4606      	mov	r6, r0
 80126be:	db01      	blt.n	80126c4 <_malloc_r+0x1c>
 80126c0:	42a9      	cmp	r1, r5
 80126c2:	d904      	bls.n	80126ce <_malloc_r+0x26>
 80126c4:	230c      	movs	r3, #12
 80126c6:	6033      	str	r3, [r6, #0]
 80126c8:	2000      	movs	r0, #0
 80126ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80127a4 <_malloc_r+0xfc>
 80126d2:	f000 f869 	bl	80127a8 <__malloc_lock>
 80126d6:	f8d8 3000 	ldr.w	r3, [r8]
 80126da:	461c      	mov	r4, r3
 80126dc:	bb44      	cbnz	r4, 8012730 <_malloc_r+0x88>
 80126de:	4629      	mov	r1, r5
 80126e0:	4630      	mov	r0, r6
 80126e2:	f7ff ffbf 	bl	8012664 <sbrk_aligned>
 80126e6:	1c43      	adds	r3, r0, #1
 80126e8:	4604      	mov	r4, r0
 80126ea:	d158      	bne.n	801279e <_malloc_r+0xf6>
 80126ec:	f8d8 4000 	ldr.w	r4, [r8]
 80126f0:	4627      	mov	r7, r4
 80126f2:	2f00      	cmp	r7, #0
 80126f4:	d143      	bne.n	801277e <_malloc_r+0xd6>
 80126f6:	2c00      	cmp	r4, #0
 80126f8:	d04b      	beq.n	8012792 <_malloc_r+0xea>
 80126fa:	6823      	ldr	r3, [r4, #0]
 80126fc:	4639      	mov	r1, r7
 80126fe:	4630      	mov	r0, r6
 8012700:	eb04 0903 	add.w	r9, r4, r3
 8012704:	f002 f93e 	bl	8014984 <_sbrk_r>
 8012708:	4581      	cmp	r9, r0
 801270a:	d142      	bne.n	8012792 <_malloc_r+0xea>
 801270c:	6821      	ldr	r1, [r4, #0]
 801270e:	1a6d      	subs	r5, r5, r1
 8012710:	4629      	mov	r1, r5
 8012712:	4630      	mov	r0, r6
 8012714:	f7ff ffa6 	bl	8012664 <sbrk_aligned>
 8012718:	3001      	adds	r0, #1
 801271a:	d03a      	beq.n	8012792 <_malloc_r+0xea>
 801271c:	6823      	ldr	r3, [r4, #0]
 801271e:	442b      	add	r3, r5
 8012720:	6023      	str	r3, [r4, #0]
 8012722:	f8d8 3000 	ldr.w	r3, [r8]
 8012726:	685a      	ldr	r2, [r3, #4]
 8012728:	bb62      	cbnz	r2, 8012784 <_malloc_r+0xdc>
 801272a:	f8c8 7000 	str.w	r7, [r8]
 801272e:	e00f      	b.n	8012750 <_malloc_r+0xa8>
 8012730:	6822      	ldr	r2, [r4, #0]
 8012732:	1b52      	subs	r2, r2, r5
 8012734:	d420      	bmi.n	8012778 <_malloc_r+0xd0>
 8012736:	2a0b      	cmp	r2, #11
 8012738:	d917      	bls.n	801276a <_malloc_r+0xc2>
 801273a:	1961      	adds	r1, r4, r5
 801273c:	42a3      	cmp	r3, r4
 801273e:	6025      	str	r5, [r4, #0]
 8012740:	bf18      	it	ne
 8012742:	6059      	strne	r1, [r3, #4]
 8012744:	6863      	ldr	r3, [r4, #4]
 8012746:	bf08      	it	eq
 8012748:	f8c8 1000 	streq.w	r1, [r8]
 801274c:	5162      	str	r2, [r4, r5]
 801274e:	604b      	str	r3, [r1, #4]
 8012750:	4630      	mov	r0, r6
 8012752:	f000 f82f 	bl	80127b4 <__malloc_unlock>
 8012756:	f104 000b 	add.w	r0, r4, #11
 801275a:	1d23      	adds	r3, r4, #4
 801275c:	f020 0007 	bic.w	r0, r0, #7
 8012760:	1ac2      	subs	r2, r0, r3
 8012762:	bf1c      	itt	ne
 8012764:	1a1b      	subne	r3, r3, r0
 8012766:	50a3      	strne	r3, [r4, r2]
 8012768:	e7af      	b.n	80126ca <_malloc_r+0x22>
 801276a:	6862      	ldr	r2, [r4, #4]
 801276c:	42a3      	cmp	r3, r4
 801276e:	bf0c      	ite	eq
 8012770:	f8c8 2000 	streq.w	r2, [r8]
 8012774:	605a      	strne	r2, [r3, #4]
 8012776:	e7eb      	b.n	8012750 <_malloc_r+0xa8>
 8012778:	4623      	mov	r3, r4
 801277a:	6864      	ldr	r4, [r4, #4]
 801277c:	e7ae      	b.n	80126dc <_malloc_r+0x34>
 801277e:	463c      	mov	r4, r7
 8012780:	687f      	ldr	r7, [r7, #4]
 8012782:	e7b6      	b.n	80126f2 <_malloc_r+0x4a>
 8012784:	461a      	mov	r2, r3
 8012786:	685b      	ldr	r3, [r3, #4]
 8012788:	42a3      	cmp	r3, r4
 801278a:	d1fb      	bne.n	8012784 <_malloc_r+0xdc>
 801278c:	2300      	movs	r3, #0
 801278e:	6053      	str	r3, [r2, #4]
 8012790:	e7de      	b.n	8012750 <_malloc_r+0xa8>
 8012792:	230c      	movs	r3, #12
 8012794:	6033      	str	r3, [r6, #0]
 8012796:	4630      	mov	r0, r6
 8012798:	f000 f80c 	bl	80127b4 <__malloc_unlock>
 801279c:	e794      	b.n	80126c8 <_malloc_r+0x20>
 801279e:	6005      	str	r5, [r0, #0]
 80127a0:	e7d6      	b.n	8012750 <_malloc_r+0xa8>
 80127a2:	bf00      	nop
 80127a4:	20002698 	.word	0x20002698

080127a8 <__malloc_lock>:
 80127a8:	4801      	ldr	r0, [pc, #4]	@ (80127b0 <__malloc_lock+0x8>)
 80127aa:	f7ff b8a4 	b.w	80118f6 <__retarget_lock_acquire_recursive>
 80127ae:	bf00      	nop
 80127b0:	20002690 	.word	0x20002690

080127b4 <__malloc_unlock>:
 80127b4:	4801      	ldr	r0, [pc, #4]	@ (80127bc <__malloc_unlock+0x8>)
 80127b6:	f7ff b89f 	b.w	80118f8 <__retarget_lock_release_recursive>
 80127ba:	bf00      	nop
 80127bc:	20002690 	.word	0x20002690

080127c0 <_Balloc>:
 80127c0:	b570      	push	{r4, r5, r6, lr}
 80127c2:	69c6      	ldr	r6, [r0, #28]
 80127c4:	4604      	mov	r4, r0
 80127c6:	460d      	mov	r5, r1
 80127c8:	b976      	cbnz	r6, 80127e8 <_Balloc+0x28>
 80127ca:	2010      	movs	r0, #16
 80127cc:	f7ff ff42 	bl	8012654 <malloc>
 80127d0:	4602      	mov	r2, r0
 80127d2:	61e0      	str	r0, [r4, #28]
 80127d4:	b920      	cbnz	r0, 80127e0 <_Balloc+0x20>
 80127d6:	4b18      	ldr	r3, [pc, #96]	@ (8012838 <_Balloc+0x78>)
 80127d8:	4818      	ldr	r0, [pc, #96]	@ (801283c <_Balloc+0x7c>)
 80127da:	216b      	movs	r1, #107	@ 0x6b
 80127dc:	f002 f8ec 	bl	80149b8 <__assert_func>
 80127e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80127e4:	6006      	str	r6, [r0, #0]
 80127e6:	60c6      	str	r6, [r0, #12]
 80127e8:	69e6      	ldr	r6, [r4, #28]
 80127ea:	68f3      	ldr	r3, [r6, #12]
 80127ec:	b183      	cbz	r3, 8012810 <_Balloc+0x50>
 80127ee:	69e3      	ldr	r3, [r4, #28]
 80127f0:	68db      	ldr	r3, [r3, #12]
 80127f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80127f6:	b9b8      	cbnz	r0, 8012828 <_Balloc+0x68>
 80127f8:	2101      	movs	r1, #1
 80127fa:	fa01 f605 	lsl.w	r6, r1, r5
 80127fe:	1d72      	adds	r2, r6, #5
 8012800:	0092      	lsls	r2, r2, #2
 8012802:	4620      	mov	r0, r4
 8012804:	f002 f8f6 	bl	80149f4 <_calloc_r>
 8012808:	b160      	cbz	r0, 8012824 <_Balloc+0x64>
 801280a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801280e:	e00e      	b.n	801282e <_Balloc+0x6e>
 8012810:	2221      	movs	r2, #33	@ 0x21
 8012812:	2104      	movs	r1, #4
 8012814:	4620      	mov	r0, r4
 8012816:	f002 f8ed 	bl	80149f4 <_calloc_r>
 801281a:	69e3      	ldr	r3, [r4, #28]
 801281c:	60f0      	str	r0, [r6, #12]
 801281e:	68db      	ldr	r3, [r3, #12]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d1e4      	bne.n	80127ee <_Balloc+0x2e>
 8012824:	2000      	movs	r0, #0
 8012826:	bd70      	pop	{r4, r5, r6, pc}
 8012828:	6802      	ldr	r2, [r0, #0]
 801282a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801282e:	2300      	movs	r3, #0
 8012830:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012834:	e7f7      	b.n	8012826 <_Balloc+0x66>
 8012836:	bf00      	nop
 8012838:	08016fcc 	.word	0x08016fcc
 801283c:	0801704c 	.word	0x0801704c

08012840 <_Bfree>:
 8012840:	b570      	push	{r4, r5, r6, lr}
 8012842:	69c6      	ldr	r6, [r0, #28]
 8012844:	4605      	mov	r5, r0
 8012846:	460c      	mov	r4, r1
 8012848:	b976      	cbnz	r6, 8012868 <_Bfree+0x28>
 801284a:	2010      	movs	r0, #16
 801284c:	f7ff ff02 	bl	8012654 <malloc>
 8012850:	4602      	mov	r2, r0
 8012852:	61e8      	str	r0, [r5, #28]
 8012854:	b920      	cbnz	r0, 8012860 <_Bfree+0x20>
 8012856:	4b09      	ldr	r3, [pc, #36]	@ (801287c <_Bfree+0x3c>)
 8012858:	4809      	ldr	r0, [pc, #36]	@ (8012880 <_Bfree+0x40>)
 801285a:	218f      	movs	r1, #143	@ 0x8f
 801285c:	f002 f8ac 	bl	80149b8 <__assert_func>
 8012860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012864:	6006      	str	r6, [r0, #0]
 8012866:	60c6      	str	r6, [r0, #12]
 8012868:	b13c      	cbz	r4, 801287a <_Bfree+0x3a>
 801286a:	69eb      	ldr	r3, [r5, #28]
 801286c:	6862      	ldr	r2, [r4, #4]
 801286e:	68db      	ldr	r3, [r3, #12]
 8012870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012874:	6021      	str	r1, [r4, #0]
 8012876:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801287a:	bd70      	pop	{r4, r5, r6, pc}
 801287c:	08016fcc 	.word	0x08016fcc
 8012880:	0801704c 	.word	0x0801704c

08012884 <__multadd>:
 8012884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012888:	690d      	ldr	r5, [r1, #16]
 801288a:	4607      	mov	r7, r0
 801288c:	460c      	mov	r4, r1
 801288e:	461e      	mov	r6, r3
 8012890:	f101 0c14 	add.w	ip, r1, #20
 8012894:	2000      	movs	r0, #0
 8012896:	f8dc 3000 	ldr.w	r3, [ip]
 801289a:	b299      	uxth	r1, r3
 801289c:	fb02 6101 	mla	r1, r2, r1, r6
 80128a0:	0c1e      	lsrs	r6, r3, #16
 80128a2:	0c0b      	lsrs	r3, r1, #16
 80128a4:	fb02 3306 	mla	r3, r2, r6, r3
 80128a8:	b289      	uxth	r1, r1
 80128aa:	3001      	adds	r0, #1
 80128ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80128b0:	4285      	cmp	r5, r0
 80128b2:	f84c 1b04 	str.w	r1, [ip], #4
 80128b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80128ba:	dcec      	bgt.n	8012896 <__multadd+0x12>
 80128bc:	b30e      	cbz	r6, 8012902 <__multadd+0x7e>
 80128be:	68a3      	ldr	r3, [r4, #8]
 80128c0:	42ab      	cmp	r3, r5
 80128c2:	dc19      	bgt.n	80128f8 <__multadd+0x74>
 80128c4:	6861      	ldr	r1, [r4, #4]
 80128c6:	4638      	mov	r0, r7
 80128c8:	3101      	adds	r1, #1
 80128ca:	f7ff ff79 	bl	80127c0 <_Balloc>
 80128ce:	4680      	mov	r8, r0
 80128d0:	b928      	cbnz	r0, 80128de <__multadd+0x5a>
 80128d2:	4602      	mov	r2, r0
 80128d4:	4b0c      	ldr	r3, [pc, #48]	@ (8012908 <__multadd+0x84>)
 80128d6:	480d      	ldr	r0, [pc, #52]	@ (801290c <__multadd+0x88>)
 80128d8:	21ba      	movs	r1, #186	@ 0xba
 80128da:	f002 f86d 	bl	80149b8 <__assert_func>
 80128de:	6922      	ldr	r2, [r4, #16]
 80128e0:	3202      	adds	r2, #2
 80128e2:	f104 010c 	add.w	r1, r4, #12
 80128e6:	0092      	lsls	r2, r2, #2
 80128e8:	300c      	adds	r0, #12
 80128ea:	f7ff f806 	bl	80118fa <memcpy>
 80128ee:	4621      	mov	r1, r4
 80128f0:	4638      	mov	r0, r7
 80128f2:	f7ff ffa5 	bl	8012840 <_Bfree>
 80128f6:	4644      	mov	r4, r8
 80128f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80128fc:	3501      	adds	r5, #1
 80128fe:	615e      	str	r6, [r3, #20]
 8012900:	6125      	str	r5, [r4, #16]
 8012902:	4620      	mov	r0, r4
 8012904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012908:	0801703b 	.word	0x0801703b
 801290c:	0801704c 	.word	0x0801704c

08012910 <__s2b>:
 8012910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012914:	460c      	mov	r4, r1
 8012916:	4615      	mov	r5, r2
 8012918:	461f      	mov	r7, r3
 801291a:	2209      	movs	r2, #9
 801291c:	3308      	adds	r3, #8
 801291e:	4606      	mov	r6, r0
 8012920:	fb93 f3f2 	sdiv	r3, r3, r2
 8012924:	2100      	movs	r1, #0
 8012926:	2201      	movs	r2, #1
 8012928:	429a      	cmp	r2, r3
 801292a:	db09      	blt.n	8012940 <__s2b+0x30>
 801292c:	4630      	mov	r0, r6
 801292e:	f7ff ff47 	bl	80127c0 <_Balloc>
 8012932:	b940      	cbnz	r0, 8012946 <__s2b+0x36>
 8012934:	4602      	mov	r2, r0
 8012936:	4b19      	ldr	r3, [pc, #100]	@ (801299c <__s2b+0x8c>)
 8012938:	4819      	ldr	r0, [pc, #100]	@ (80129a0 <__s2b+0x90>)
 801293a:	21d3      	movs	r1, #211	@ 0xd3
 801293c:	f002 f83c 	bl	80149b8 <__assert_func>
 8012940:	0052      	lsls	r2, r2, #1
 8012942:	3101      	adds	r1, #1
 8012944:	e7f0      	b.n	8012928 <__s2b+0x18>
 8012946:	9b08      	ldr	r3, [sp, #32]
 8012948:	6143      	str	r3, [r0, #20]
 801294a:	2d09      	cmp	r5, #9
 801294c:	f04f 0301 	mov.w	r3, #1
 8012950:	6103      	str	r3, [r0, #16]
 8012952:	dd16      	ble.n	8012982 <__s2b+0x72>
 8012954:	f104 0909 	add.w	r9, r4, #9
 8012958:	46c8      	mov	r8, r9
 801295a:	442c      	add	r4, r5
 801295c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012960:	4601      	mov	r1, r0
 8012962:	3b30      	subs	r3, #48	@ 0x30
 8012964:	220a      	movs	r2, #10
 8012966:	4630      	mov	r0, r6
 8012968:	f7ff ff8c 	bl	8012884 <__multadd>
 801296c:	45a0      	cmp	r8, r4
 801296e:	d1f5      	bne.n	801295c <__s2b+0x4c>
 8012970:	f1a5 0408 	sub.w	r4, r5, #8
 8012974:	444c      	add	r4, r9
 8012976:	1b2d      	subs	r5, r5, r4
 8012978:	1963      	adds	r3, r4, r5
 801297a:	42bb      	cmp	r3, r7
 801297c:	db04      	blt.n	8012988 <__s2b+0x78>
 801297e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012982:	340a      	adds	r4, #10
 8012984:	2509      	movs	r5, #9
 8012986:	e7f6      	b.n	8012976 <__s2b+0x66>
 8012988:	f814 3b01 	ldrb.w	r3, [r4], #1
 801298c:	4601      	mov	r1, r0
 801298e:	3b30      	subs	r3, #48	@ 0x30
 8012990:	220a      	movs	r2, #10
 8012992:	4630      	mov	r0, r6
 8012994:	f7ff ff76 	bl	8012884 <__multadd>
 8012998:	e7ee      	b.n	8012978 <__s2b+0x68>
 801299a:	bf00      	nop
 801299c:	0801703b 	.word	0x0801703b
 80129a0:	0801704c 	.word	0x0801704c

080129a4 <__hi0bits>:
 80129a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80129a8:	4603      	mov	r3, r0
 80129aa:	bf36      	itet	cc
 80129ac:	0403      	lslcc	r3, r0, #16
 80129ae:	2000      	movcs	r0, #0
 80129b0:	2010      	movcc	r0, #16
 80129b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80129b6:	bf3c      	itt	cc
 80129b8:	021b      	lslcc	r3, r3, #8
 80129ba:	3008      	addcc	r0, #8
 80129bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80129c0:	bf3c      	itt	cc
 80129c2:	011b      	lslcc	r3, r3, #4
 80129c4:	3004      	addcc	r0, #4
 80129c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80129ca:	bf3c      	itt	cc
 80129cc:	009b      	lslcc	r3, r3, #2
 80129ce:	3002      	addcc	r0, #2
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	db05      	blt.n	80129e0 <__hi0bits+0x3c>
 80129d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80129d8:	f100 0001 	add.w	r0, r0, #1
 80129dc:	bf08      	it	eq
 80129de:	2020      	moveq	r0, #32
 80129e0:	4770      	bx	lr

080129e2 <__lo0bits>:
 80129e2:	6803      	ldr	r3, [r0, #0]
 80129e4:	4602      	mov	r2, r0
 80129e6:	f013 0007 	ands.w	r0, r3, #7
 80129ea:	d00b      	beq.n	8012a04 <__lo0bits+0x22>
 80129ec:	07d9      	lsls	r1, r3, #31
 80129ee:	d421      	bmi.n	8012a34 <__lo0bits+0x52>
 80129f0:	0798      	lsls	r0, r3, #30
 80129f2:	bf49      	itett	mi
 80129f4:	085b      	lsrmi	r3, r3, #1
 80129f6:	089b      	lsrpl	r3, r3, #2
 80129f8:	2001      	movmi	r0, #1
 80129fa:	6013      	strmi	r3, [r2, #0]
 80129fc:	bf5c      	itt	pl
 80129fe:	6013      	strpl	r3, [r2, #0]
 8012a00:	2002      	movpl	r0, #2
 8012a02:	4770      	bx	lr
 8012a04:	b299      	uxth	r1, r3
 8012a06:	b909      	cbnz	r1, 8012a0c <__lo0bits+0x2a>
 8012a08:	0c1b      	lsrs	r3, r3, #16
 8012a0a:	2010      	movs	r0, #16
 8012a0c:	b2d9      	uxtb	r1, r3
 8012a0e:	b909      	cbnz	r1, 8012a14 <__lo0bits+0x32>
 8012a10:	3008      	adds	r0, #8
 8012a12:	0a1b      	lsrs	r3, r3, #8
 8012a14:	0719      	lsls	r1, r3, #28
 8012a16:	bf04      	itt	eq
 8012a18:	091b      	lsreq	r3, r3, #4
 8012a1a:	3004      	addeq	r0, #4
 8012a1c:	0799      	lsls	r1, r3, #30
 8012a1e:	bf04      	itt	eq
 8012a20:	089b      	lsreq	r3, r3, #2
 8012a22:	3002      	addeq	r0, #2
 8012a24:	07d9      	lsls	r1, r3, #31
 8012a26:	d403      	bmi.n	8012a30 <__lo0bits+0x4e>
 8012a28:	085b      	lsrs	r3, r3, #1
 8012a2a:	f100 0001 	add.w	r0, r0, #1
 8012a2e:	d003      	beq.n	8012a38 <__lo0bits+0x56>
 8012a30:	6013      	str	r3, [r2, #0]
 8012a32:	4770      	bx	lr
 8012a34:	2000      	movs	r0, #0
 8012a36:	4770      	bx	lr
 8012a38:	2020      	movs	r0, #32
 8012a3a:	4770      	bx	lr

08012a3c <__i2b>:
 8012a3c:	b510      	push	{r4, lr}
 8012a3e:	460c      	mov	r4, r1
 8012a40:	2101      	movs	r1, #1
 8012a42:	f7ff febd 	bl	80127c0 <_Balloc>
 8012a46:	4602      	mov	r2, r0
 8012a48:	b928      	cbnz	r0, 8012a56 <__i2b+0x1a>
 8012a4a:	4b05      	ldr	r3, [pc, #20]	@ (8012a60 <__i2b+0x24>)
 8012a4c:	4805      	ldr	r0, [pc, #20]	@ (8012a64 <__i2b+0x28>)
 8012a4e:	f240 1145 	movw	r1, #325	@ 0x145
 8012a52:	f001 ffb1 	bl	80149b8 <__assert_func>
 8012a56:	2301      	movs	r3, #1
 8012a58:	6144      	str	r4, [r0, #20]
 8012a5a:	6103      	str	r3, [r0, #16]
 8012a5c:	bd10      	pop	{r4, pc}
 8012a5e:	bf00      	nop
 8012a60:	0801703b 	.word	0x0801703b
 8012a64:	0801704c 	.word	0x0801704c

08012a68 <__multiply>:
 8012a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a6c:	4614      	mov	r4, r2
 8012a6e:	690a      	ldr	r2, [r1, #16]
 8012a70:	6923      	ldr	r3, [r4, #16]
 8012a72:	429a      	cmp	r2, r3
 8012a74:	bfa8      	it	ge
 8012a76:	4623      	movge	r3, r4
 8012a78:	460f      	mov	r7, r1
 8012a7a:	bfa4      	itt	ge
 8012a7c:	460c      	movge	r4, r1
 8012a7e:	461f      	movge	r7, r3
 8012a80:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012a84:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012a88:	68a3      	ldr	r3, [r4, #8]
 8012a8a:	6861      	ldr	r1, [r4, #4]
 8012a8c:	eb0a 0609 	add.w	r6, sl, r9
 8012a90:	42b3      	cmp	r3, r6
 8012a92:	b085      	sub	sp, #20
 8012a94:	bfb8      	it	lt
 8012a96:	3101      	addlt	r1, #1
 8012a98:	f7ff fe92 	bl	80127c0 <_Balloc>
 8012a9c:	b930      	cbnz	r0, 8012aac <__multiply+0x44>
 8012a9e:	4602      	mov	r2, r0
 8012aa0:	4b44      	ldr	r3, [pc, #272]	@ (8012bb4 <__multiply+0x14c>)
 8012aa2:	4845      	ldr	r0, [pc, #276]	@ (8012bb8 <__multiply+0x150>)
 8012aa4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012aa8:	f001 ff86 	bl	80149b8 <__assert_func>
 8012aac:	f100 0514 	add.w	r5, r0, #20
 8012ab0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012ab4:	462b      	mov	r3, r5
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	4543      	cmp	r3, r8
 8012aba:	d321      	bcc.n	8012b00 <__multiply+0x98>
 8012abc:	f107 0114 	add.w	r1, r7, #20
 8012ac0:	f104 0214 	add.w	r2, r4, #20
 8012ac4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012ac8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012acc:	9302      	str	r3, [sp, #8]
 8012ace:	1b13      	subs	r3, r2, r4
 8012ad0:	3b15      	subs	r3, #21
 8012ad2:	f023 0303 	bic.w	r3, r3, #3
 8012ad6:	3304      	adds	r3, #4
 8012ad8:	f104 0715 	add.w	r7, r4, #21
 8012adc:	42ba      	cmp	r2, r7
 8012ade:	bf38      	it	cc
 8012ae0:	2304      	movcc	r3, #4
 8012ae2:	9301      	str	r3, [sp, #4]
 8012ae4:	9b02      	ldr	r3, [sp, #8]
 8012ae6:	9103      	str	r1, [sp, #12]
 8012ae8:	428b      	cmp	r3, r1
 8012aea:	d80c      	bhi.n	8012b06 <__multiply+0x9e>
 8012aec:	2e00      	cmp	r6, #0
 8012aee:	dd03      	ble.n	8012af8 <__multiply+0x90>
 8012af0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d05b      	beq.n	8012bb0 <__multiply+0x148>
 8012af8:	6106      	str	r6, [r0, #16]
 8012afa:	b005      	add	sp, #20
 8012afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b00:	f843 2b04 	str.w	r2, [r3], #4
 8012b04:	e7d8      	b.n	8012ab8 <__multiply+0x50>
 8012b06:	f8b1 a000 	ldrh.w	sl, [r1]
 8012b0a:	f1ba 0f00 	cmp.w	sl, #0
 8012b0e:	d024      	beq.n	8012b5a <__multiply+0xf2>
 8012b10:	f104 0e14 	add.w	lr, r4, #20
 8012b14:	46a9      	mov	r9, r5
 8012b16:	f04f 0c00 	mov.w	ip, #0
 8012b1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012b1e:	f8d9 3000 	ldr.w	r3, [r9]
 8012b22:	fa1f fb87 	uxth.w	fp, r7
 8012b26:	b29b      	uxth	r3, r3
 8012b28:	fb0a 330b 	mla	r3, sl, fp, r3
 8012b2c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012b30:	f8d9 7000 	ldr.w	r7, [r9]
 8012b34:	4463      	add	r3, ip
 8012b36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012b3a:	fb0a c70b 	mla	r7, sl, fp, ip
 8012b3e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012b42:	b29b      	uxth	r3, r3
 8012b44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012b48:	4572      	cmp	r2, lr
 8012b4a:	f849 3b04 	str.w	r3, [r9], #4
 8012b4e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012b52:	d8e2      	bhi.n	8012b1a <__multiply+0xb2>
 8012b54:	9b01      	ldr	r3, [sp, #4]
 8012b56:	f845 c003 	str.w	ip, [r5, r3]
 8012b5a:	9b03      	ldr	r3, [sp, #12]
 8012b5c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012b60:	3104      	adds	r1, #4
 8012b62:	f1b9 0f00 	cmp.w	r9, #0
 8012b66:	d021      	beq.n	8012bac <__multiply+0x144>
 8012b68:	682b      	ldr	r3, [r5, #0]
 8012b6a:	f104 0c14 	add.w	ip, r4, #20
 8012b6e:	46ae      	mov	lr, r5
 8012b70:	f04f 0a00 	mov.w	sl, #0
 8012b74:	f8bc b000 	ldrh.w	fp, [ip]
 8012b78:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012b7c:	fb09 770b 	mla	r7, r9, fp, r7
 8012b80:	4457      	add	r7, sl
 8012b82:	b29b      	uxth	r3, r3
 8012b84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012b88:	f84e 3b04 	str.w	r3, [lr], #4
 8012b8c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012b90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012b94:	f8be 3000 	ldrh.w	r3, [lr]
 8012b98:	fb09 330a 	mla	r3, r9, sl, r3
 8012b9c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012ba0:	4562      	cmp	r2, ip
 8012ba2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012ba6:	d8e5      	bhi.n	8012b74 <__multiply+0x10c>
 8012ba8:	9f01      	ldr	r7, [sp, #4]
 8012baa:	51eb      	str	r3, [r5, r7]
 8012bac:	3504      	adds	r5, #4
 8012bae:	e799      	b.n	8012ae4 <__multiply+0x7c>
 8012bb0:	3e01      	subs	r6, #1
 8012bb2:	e79b      	b.n	8012aec <__multiply+0x84>
 8012bb4:	0801703b 	.word	0x0801703b
 8012bb8:	0801704c 	.word	0x0801704c

08012bbc <__pow5mult>:
 8012bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012bc0:	4615      	mov	r5, r2
 8012bc2:	f012 0203 	ands.w	r2, r2, #3
 8012bc6:	4607      	mov	r7, r0
 8012bc8:	460e      	mov	r6, r1
 8012bca:	d007      	beq.n	8012bdc <__pow5mult+0x20>
 8012bcc:	4c25      	ldr	r4, [pc, #148]	@ (8012c64 <__pow5mult+0xa8>)
 8012bce:	3a01      	subs	r2, #1
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012bd6:	f7ff fe55 	bl	8012884 <__multadd>
 8012bda:	4606      	mov	r6, r0
 8012bdc:	10ad      	asrs	r5, r5, #2
 8012bde:	d03d      	beq.n	8012c5c <__pow5mult+0xa0>
 8012be0:	69fc      	ldr	r4, [r7, #28]
 8012be2:	b97c      	cbnz	r4, 8012c04 <__pow5mult+0x48>
 8012be4:	2010      	movs	r0, #16
 8012be6:	f7ff fd35 	bl	8012654 <malloc>
 8012bea:	4602      	mov	r2, r0
 8012bec:	61f8      	str	r0, [r7, #28]
 8012bee:	b928      	cbnz	r0, 8012bfc <__pow5mult+0x40>
 8012bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8012c68 <__pow5mult+0xac>)
 8012bf2:	481e      	ldr	r0, [pc, #120]	@ (8012c6c <__pow5mult+0xb0>)
 8012bf4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012bf8:	f001 fede 	bl	80149b8 <__assert_func>
 8012bfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012c00:	6004      	str	r4, [r0, #0]
 8012c02:	60c4      	str	r4, [r0, #12]
 8012c04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012c08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012c0c:	b94c      	cbnz	r4, 8012c22 <__pow5mult+0x66>
 8012c0e:	f240 2171 	movw	r1, #625	@ 0x271
 8012c12:	4638      	mov	r0, r7
 8012c14:	f7ff ff12 	bl	8012a3c <__i2b>
 8012c18:	2300      	movs	r3, #0
 8012c1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8012c1e:	4604      	mov	r4, r0
 8012c20:	6003      	str	r3, [r0, #0]
 8012c22:	f04f 0900 	mov.w	r9, #0
 8012c26:	07eb      	lsls	r3, r5, #31
 8012c28:	d50a      	bpl.n	8012c40 <__pow5mult+0x84>
 8012c2a:	4631      	mov	r1, r6
 8012c2c:	4622      	mov	r2, r4
 8012c2e:	4638      	mov	r0, r7
 8012c30:	f7ff ff1a 	bl	8012a68 <__multiply>
 8012c34:	4631      	mov	r1, r6
 8012c36:	4680      	mov	r8, r0
 8012c38:	4638      	mov	r0, r7
 8012c3a:	f7ff fe01 	bl	8012840 <_Bfree>
 8012c3e:	4646      	mov	r6, r8
 8012c40:	106d      	asrs	r5, r5, #1
 8012c42:	d00b      	beq.n	8012c5c <__pow5mult+0xa0>
 8012c44:	6820      	ldr	r0, [r4, #0]
 8012c46:	b938      	cbnz	r0, 8012c58 <__pow5mult+0x9c>
 8012c48:	4622      	mov	r2, r4
 8012c4a:	4621      	mov	r1, r4
 8012c4c:	4638      	mov	r0, r7
 8012c4e:	f7ff ff0b 	bl	8012a68 <__multiply>
 8012c52:	6020      	str	r0, [r4, #0]
 8012c54:	f8c0 9000 	str.w	r9, [r0]
 8012c58:	4604      	mov	r4, r0
 8012c5a:	e7e4      	b.n	8012c26 <__pow5mult+0x6a>
 8012c5c:	4630      	mov	r0, r6
 8012c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c62:	bf00      	nop
 8012c64:	080170a8 	.word	0x080170a8
 8012c68:	08016fcc 	.word	0x08016fcc
 8012c6c:	0801704c 	.word	0x0801704c

08012c70 <__lshift>:
 8012c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c74:	460c      	mov	r4, r1
 8012c76:	6849      	ldr	r1, [r1, #4]
 8012c78:	6923      	ldr	r3, [r4, #16]
 8012c7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012c7e:	68a3      	ldr	r3, [r4, #8]
 8012c80:	4607      	mov	r7, r0
 8012c82:	4691      	mov	r9, r2
 8012c84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012c88:	f108 0601 	add.w	r6, r8, #1
 8012c8c:	42b3      	cmp	r3, r6
 8012c8e:	db0b      	blt.n	8012ca8 <__lshift+0x38>
 8012c90:	4638      	mov	r0, r7
 8012c92:	f7ff fd95 	bl	80127c0 <_Balloc>
 8012c96:	4605      	mov	r5, r0
 8012c98:	b948      	cbnz	r0, 8012cae <__lshift+0x3e>
 8012c9a:	4602      	mov	r2, r0
 8012c9c:	4b28      	ldr	r3, [pc, #160]	@ (8012d40 <__lshift+0xd0>)
 8012c9e:	4829      	ldr	r0, [pc, #164]	@ (8012d44 <__lshift+0xd4>)
 8012ca0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012ca4:	f001 fe88 	bl	80149b8 <__assert_func>
 8012ca8:	3101      	adds	r1, #1
 8012caa:	005b      	lsls	r3, r3, #1
 8012cac:	e7ee      	b.n	8012c8c <__lshift+0x1c>
 8012cae:	2300      	movs	r3, #0
 8012cb0:	f100 0114 	add.w	r1, r0, #20
 8012cb4:	f100 0210 	add.w	r2, r0, #16
 8012cb8:	4618      	mov	r0, r3
 8012cba:	4553      	cmp	r3, sl
 8012cbc:	db33      	blt.n	8012d26 <__lshift+0xb6>
 8012cbe:	6920      	ldr	r0, [r4, #16]
 8012cc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012cc4:	f104 0314 	add.w	r3, r4, #20
 8012cc8:	f019 091f 	ands.w	r9, r9, #31
 8012ccc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012cd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012cd4:	d02b      	beq.n	8012d2e <__lshift+0xbe>
 8012cd6:	f1c9 0e20 	rsb	lr, r9, #32
 8012cda:	468a      	mov	sl, r1
 8012cdc:	2200      	movs	r2, #0
 8012cde:	6818      	ldr	r0, [r3, #0]
 8012ce0:	fa00 f009 	lsl.w	r0, r0, r9
 8012ce4:	4310      	orrs	r0, r2
 8012ce6:	f84a 0b04 	str.w	r0, [sl], #4
 8012cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cee:	459c      	cmp	ip, r3
 8012cf0:	fa22 f20e 	lsr.w	r2, r2, lr
 8012cf4:	d8f3      	bhi.n	8012cde <__lshift+0x6e>
 8012cf6:	ebac 0304 	sub.w	r3, ip, r4
 8012cfa:	3b15      	subs	r3, #21
 8012cfc:	f023 0303 	bic.w	r3, r3, #3
 8012d00:	3304      	adds	r3, #4
 8012d02:	f104 0015 	add.w	r0, r4, #21
 8012d06:	4584      	cmp	ip, r0
 8012d08:	bf38      	it	cc
 8012d0a:	2304      	movcc	r3, #4
 8012d0c:	50ca      	str	r2, [r1, r3]
 8012d0e:	b10a      	cbz	r2, 8012d14 <__lshift+0xa4>
 8012d10:	f108 0602 	add.w	r6, r8, #2
 8012d14:	3e01      	subs	r6, #1
 8012d16:	4638      	mov	r0, r7
 8012d18:	612e      	str	r6, [r5, #16]
 8012d1a:	4621      	mov	r1, r4
 8012d1c:	f7ff fd90 	bl	8012840 <_Bfree>
 8012d20:	4628      	mov	r0, r5
 8012d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d26:	f842 0f04 	str.w	r0, [r2, #4]!
 8012d2a:	3301      	adds	r3, #1
 8012d2c:	e7c5      	b.n	8012cba <__lshift+0x4a>
 8012d2e:	3904      	subs	r1, #4
 8012d30:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d34:	f841 2f04 	str.w	r2, [r1, #4]!
 8012d38:	459c      	cmp	ip, r3
 8012d3a:	d8f9      	bhi.n	8012d30 <__lshift+0xc0>
 8012d3c:	e7ea      	b.n	8012d14 <__lshift+0xa4>
 8012d3e:	bf00      	nop
 8012d40:	0801703b 	.word	0x0801703b
 8012d44:	0801704c 	.word	0x0801704c

08012d48 <__mcmp>:
 8012d48:	690a      	ldr	r2, [r1, #16]
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	6900      	ldr	r0, [r0, #16]
 8012d4e:	1a80      	subs	r0, r0, r2
 8012d50:	b530      	push	{r4, r5, lr}
 8012d52:	d10e      	bne.n	8012d72 <__mcmp+0x2a>
 8012d54:	3314      	adds	r3, #20
 8012d56:	3114      	adds	r1, #20
 8012d58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012d5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012d60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012d64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012d68:	4295      	cmp	r5, r2
 8012d6a:	d003      	beq.n	8012d74 <__mcmp+0x2c>
 8012d6c:	d205      	bcs.n	8012d7a <__mcmp+0x32>
 8012d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8012d72:	bd30      	pop	{r4, r5, pc}
 8012d74:	42a3      	cmp	r3, r4
 8012d76:	d3f3      	bcc.n	8012d60 <__mcmp+0x18>
 8012d78:	e7fb      	b.n	8012d72 <__mcmp+0x2a>
 8012d7a:	2001      	movs	r0, #1
 8012d7c:	e7f9      	b.n	8012d72 <__mcmp+0x2a>
	...

08012d80 <__mdiff>:
 8012d80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d84:	4689      	mov	r9, r1
 8012d86:	4606      	mov	r6, r0
 8012d88:	4611      	mov	r1, r2
 8012d8a:	4648      	mov	r0, r9
 8012d8c:	4614      	mov	r4, r2
 8012d8e:	f7ff ffdb 	bl	8012d48 <__mcmp>
 8012d92:	1e05      	subs	r5, r0, #0
 8012d94:	d112      	bne.n	8012dbc <__mdiff+0x3c>
 8012d96:	4629      	mov	r1, r5
 8012d98:	4630      	mov	r0, r6
 8012d9a:	f7ff fd11 	bl	80127c0 <_Balloc>
 8012d9e:	4602      	mov	r2, r0
 8012da0:	b928      	cbnz	r0, 8012dae <__mdiff+0x2e>
 8012da2:	4b3f      	ldr	r3, [pc, #252]	@ (8012ea0 <__mdiff+0x120>)
 8012da4:	f240 2137 	movw	r1, #567	@ 0x237
 8012da8:	483e      	ldr	r0, [pc, #248]	@ (8012ea4 <__mdiff+0x124>)
 8012daa:	f001 fe05 	bl	80149b8 <__assert_func>
 8012dae:	2301      	movs	r3, #1
 8012db0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012db4:	4610      	mov	r0, r2
 8012db6:	b003      	add	sp, #12
 8012db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dbc:	bfbc      	itt	lt
 8012dbe:	464b      	movlt	r3, r9
 8012dc0:	46a1      	movlt	r9, r4
 8012dc2:	4630      	mov	r0, r6
 8012dc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012dc8:	bfba      	itte	lt
 8012dca:	461c      	movlt	r4, r3
 8012dcc:	2501      	movlt	r5, #1
 8012dce:	2500      	movge	r5, #0
 8012dd0:	f7ff fcf6 	bl	80127c0 <_Balloc>
 8012dd4:	4602      	mov	r2, r0
 8012dd6:	b918      	cbnz	r0, 8012de0 <__mdiff+0x60>
 8012dd8:	4b31      	ldr	r3, [pc, #196]	@ (8012ea0 <__mdiff+0x120>)
 8012dda:	f240 2145 	movw	r1, #581	@ 0x245
 8012dde:	e7e3      	b.n	8012da8 <__mdiff+0x28>
 8012de0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012de4:	6926      	ldr	r6, [r4, #16]
 8012de6:	60c5      	str	r5, [r0, #12]
 8012de8:	f109 0310 	add.w	r3, r9, #16
 8012dec:	f109 0514 	add.w	r5, r9, #20
 8012df0:	f104 0e14 	add.w	lr, r4, #20
 8012df4:	f100 0b14 	add.w	fp, r0, #20
 8012df8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012dfc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012e00:	9301      	str	r3, [sp, #4]
 8012e02:	46d9      	mov	r9, fp
 8012e04:	f04f 0c00 	mov.w	ip, #0
 8012e08:	9b01      	ldr	r3, [sp, #4]
 8012e0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012e0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012e12:	9301      	str	r3, [sp, #4]
 8012e14:	fa1f f38a 	uxth.w	r3, sl
 8012e18:	4619      	mov	r1, r3
 8012e1a:	b283      	uxth	r3, r0
 8012e1c:	1acb      	subs	r3, r1, r3
 8012e1e:	0c00      	lsrs	r0, r0, #16
 8012e20:	4463      	add	r3, ip
 8012e22:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012e26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012e2a:	b29b      	uxth	r3, r3
 8012e2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012e30:	4576      	cmp	r6, lr
 8012e32:	f849 3b04 	str.w	r3, [r9], #4
 8012e36:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012e3a:	d8e5      	bhi.n	8012e08 <__mdiff+0x88>
 8012e3c:	1b33      	subs	r3, r6, r4
 8012e3e:	3b15      	subs	r3, #21
 8012e40:	f023 0303 	bic.w	r3, r3, #3
 8012e44:	3415      	adds	r4, #21
 8012e46:	3304      	adds	r3, #4
 8012e48:	42a6      	cmp	r6, r4
 8012e4a:	bf38      	it	cc
 8012e4c:	2304      	movcc	r3, #4
 8012e4e:	441d      	add	r5, r3
 8012e50:	445b      	add	r3, fp
 8012e52:	461e      	mov	r6, r3
 8012e54:	462c      	mov	r4, r5
 8012e56:	4544      	cmp	r4, r8
 8012e58:	d30e      	bcc.n	8012e78 <__mdiff+0xf8>
 8012e5a:	f108 0103 	add.w	r1, r8, #3
 8012e5e:	1b49      	subs	r1, r1, r5
 8012e60:	f021 0103 	bic.w	r1, r1, #3
 8012e64:	3d03      	subs	r5, #3
 8012e66:	45a8      	cmp	r8, r5
 8012e68:	bf38      	it	cc
 8012e6a:	2100      	movcc	r1, #0
 8012e6c:	440b      	add	r3, r1
 8012e6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012e72:	b191      	cbz	r1, 8012e9a <__mdiff+0x11a>
 8012e74:	6117      	str	r7, [r2, #16]
 8012e76:	e79d      	b.n	8012db4 <__mdiff+0x34>
 8012e78:	f854 1b04 	ldr.w	r1, [r4], #4
 8012e7c:	46e6      	mov	lr, ip
 8012e7e:	0c08      	lsrs	r0, r1, #16
 8012e80:	fa1c fc81 	uxtah	ip, ip, r1
 8012e84:	4471      	add	r1, lr
 8012e86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012e8a:	b289      	uxth	r1, r1
 8012e8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012e90:	f846 1b04 	str.w	r1, [r6], #4
 8012e94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012e98:	e7dd      	b.n	8012e56 <__mdiff+0xd6>
 8012e9a:	3f01      	subs	r7, #1
 8012e9c:	e7e7      	b.n	8012e6e <__mdiff+0xee>
 8012e9e:	bf00      	nop
 8012ea0:	0801703b 	.word	0x0801703b
 8012ea4:	0801704c 	.word	0x0801704c

08012ea8 <__ulp>:
 8012ea8:	b082      	sub	sp, #8
 8012eaa:	ed8d 0b00 	vstr	d0, [sp]
 8012eae:	9a01      	ldr	r2, [sp, #4]
 8012eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8012ef0 <__ulp+0x48>)
 8012eb2:	4013      	ands	r3, r2
 8012eb4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	dc08      	bgt.n	8012ece <__ulp+0x26>
 8012ebc:	425b      	negs	r3, r3
 8012ebe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012ec2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012ec6:	da04      	bge.n	8012ed2 <__ulp+0x2a>
 8012ec8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012ecc:	4113      	asrs	r3, r2
 8012ece:	2200      	movs	r2, #0
 8012ed0:	e008      	b.n	8012ee4 <__ulp+0x3c>
 8012ed2:	f1a2 0314 	sub.w	r3, r2, #20
 8012ed6:	2b1e      	cmp	r3, #30
 8012ed8:	bfda      	itte	le
 8012eda:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012ede:	40da      	lsrle	r2, r3
 8012ee0:	2201      	movgt	r2, #1
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	4619      	mov	r1, r3
 8012ee6:	4610      	mov	r0, r2
 8012ee8:	ec41 0b10 	vmov	d0, r0, r1
 8012eec:	b002      	add	sp, #8
 8012eee:	4770      	bx	lr
 8012ef0:	7ff00000 	.word	0x7ff00000

08012ef4 <__b2d>:
 8012ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ef8:	6906      	ldr	r6, [r0, #16]
 8012efa:	f100 0814 	add.w	r8, r0, #20
 8012efe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012f02:	1f37      	subs	r7, r6, #4
 8012f04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012f08:	4610      	mov	r0, r2
 8012f0a:	f7ff fd4b 	bl	80129a4 <__hi0bits>
 8012f0e:	f1c0 0320 	rsb	r3, r0, #32
 8012f12:	280a      	cmp	r0, #10
 8012f14:	600b      	str	r3, [r1, #0]
 8012f16:	491b      	ldr	r1, [pc, #108]	@ (8012f84 <__b2d+0x90>)
 8012f18:	dc15      	bgt.n	8012f46 <__b2d+0x52>
 8012f1a:	f1c0 0c0b 	rsb	ip, r0, #11
 8012f1e:	fa22 f30c 	lsr.w	r3, r2, ip
 8012f22:	45b8      	cmp	r8, r7
 8012f24:	ea43 0501 	orr.w	r5, r3, r1
 8012f28:	bf34      	ite	cc
 8012f2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012f2e:	2300      	movcs	r3, #0
 8012f30:	3015      	adds	r0, #21
 8012f32:	fa02 f000 	lsl.w	r0, r2, r0
 8012f36:	fa23 f30c 	lsr.w	r3, r3, ip
 8012f3a:	4303      	orrs	r3, r0
 8012f3c:	461c      	mov	r4, r3
 8012f3e:	ec45 4b10 	vmov	d0, r4, r5
 8012f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f46:	45b8      	cmp	r8, r7
 8012f48:	bf3a      	itte	cc
 8012f4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012f4e:	f1a6 0708 	subcc.w	r7, r6, #8
 8012f52:	2300      	movcs	r3, #0
 8012f54:	380b      	subs	r0, #11
 8012f56:	d012      	beq.n	8012f7e <__b2d+0x8a>
 8012f58:	f1c0 0120 	rsb	r1, r0, #32
 8012f5c:	fa23 f401 	lsr.w	r4, r3, r1
 8012f60:	4082      	lsls	r2, r0
 8012f62:	4322      	orrs	r2, r4
 8012f64:	4547      	cmp	r7, r8
 8012f66:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012f6a:	bf8c      	ite	hi
 8012f6c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012f70:	2200      	movls	r2, #0
 8012f72:	4083      	lsls	r3, r0
 8012f74:	40ca      	lsrs	r2, r1
 8012f76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012f7a:	4313      	orrs	r3, r2
 8012f7c:	e7de      	b.n	8012f3c <__b2d+0x48>
 8012f7e:	ea42 0501 	orr.w	r5, r2, r1
 8012f82:	e7db      	b.n	8012f3c <__b2d+0x48>
 8012f84:	3ff00000 	.word	0x3ff00000

08012f88 <__d2b>:
 8012f88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012f8c:	460f      	mov	r7, r1
 8012f8e:	2101      	movs	r1, #1
 8012f90:	ec59 8b10 	vmov	r8, r9, d0
 8012f94:	4616      	mov	r6, r2
 8012f96:	f7ff fc13 	bl	80127c0 <_Balloc>
 8012f9a:	4604      	mov	r4, r0
 8012f9c:	b930      	cbnz	r0, 8012fac <__d2b+0x24>
 8012f9e:	4602      	mov	r2, r0
 8012fa0:	4b23      	ldr	r3, [pc, #140]	@ (8013030 <__d2b+0xa8>)
 8012fa2:	4824      	ldr	r0, [pc, #144]	@ (8013034 <__d2b+0xac>)
 8012fa4:	f240 310f 	movw	r1, #783	@ 0x30f
 8012fa8:	f001 fd06 	bl	80149b8 <__assert_func>
 8012fac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012fb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012fb4:	b10d      	cbz	r5, 8012fba <__d2b+0x32>
 8012fb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012fba:	9301      	str	r3, [sp, #4]
 8012fbc:	f1b8 0300 	subs.w	r3, r8, #0
 8012fc0:	d023      	beq.n	801300a <__d2b+0x82>
 8012fc2:	4668      	mov	r0, sp
 8012fc4:	9300      	str	r3, [sp, #0]
 8012fc6:	f7ff fd0c 	bl	80129e2 <__lo0bits>
 8012fca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012fce:	b1d0      	cbz	r0, 8013006 <__d2b+0x7e>
 8012fd0:	f1c0 0320 	rsb	r3, r0, #32
 8012fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8012fd8:	430b      	orrs	r3, r1
 8012fda:	40c2      	lsrs	r2, r0
 8012fdc:	6163      	str	r3, [r4, #20]
 8012fde:	9201      	str	r2, [sp, #4]
 8012fe0:	9b01      	ldr	r3, [sp, #4]
 8012fe2:	61a3      	str	r3, [r4, #24]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	bf0c      	ite	eq
 8012fe8:	2201      	moveq	r2, #1
 8012fea:	2202      	movne	r2, #2
 8012fec:	6122      	str	r2, [r4, #16]
 8012fee:	b1a5      	cbz	r5, 801301a <__d2b+0x92>
 8012ff0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012ff4:	4405      	add	r5, r0
 8012ff6:	603d      	str	r5, [r7, #0]
 8012ff8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012ffc:	6030      	str	r0, [r6, #0]
 8012ffe:	4620      	mov	r0, r4
 8013000:	b003      	add	sp, #12
 8013002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013006:	6161      	str	r1, [r4, #20]
 8013008:	e7ea      	b.n	8012fe0 <__d2b+0x58>
 801300a:	a801      	add	r0, sp, #4
 801300c:	f7ff fce9 	bl	80129e2 <__lo0bits>
 8013010:	9b01      	ldr	r3, [sp, #4]
 8013012:	6163      	str	r3, [r4, #20]
 8013014:	3020      	adds	r0, #32
 8013016:	2201      	movs	r2, #1
 8013018:	e7e8      	b.n	8012fec <__d2b+0x64>
 801301a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801301e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013022:	6038      	str	r0, [r7, #0]
 8013024:	6918      	ldr	r0, [r3, #16]
 8013026:	f7ff fcbd 	bl	80129a4 <__hi0bits>
 801302a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801302e:	e7e5      	b.n	8012ffc <__d2b+0x74>
 8013030:	0801703b 	.word	0x0801703b
 8013034:	0801704c 	.word	0x0801704c

08013038 <__ratio>:
 8013038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801303c:	b085      	sub	sp, #20
 801303e:	e9cd 1000 	strd	r1, r0, [sp]
 8013042:	a902      	add	r1, sp, #8
 8013044:	f7ff ff56 	bl	8012ef4 <__b2d>
 8013048:	9800      	ldr	r0, [sp, #0]
 801304a:	a903      	add	r1, sp, #12
 801304c:	ec55 4b10 	vmov	r4, r5, d0
 8013050:	f7ff ff50 	bl	8012ef4 <__b2d>
 8013054:	9b01      	ldr	r3, [sp, #4]
 8013056:	6919      	ldr	r1, [r3, #16]
 8013058:	9b00      	ldr	r3, [sp, #0]
 801305a:	691b      	ldr	r3, [r3, #16]
 801305c:	1ac9      	subs	r1, r1, r3
 801305e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8013062:	1a9b      	subs	r3, r3, r2
 8013064:	ec5b ab10 	vmov	sl, fp, d0
 8013068:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801306c:	2b00      	cmp	r3, #0
 801306e:	bfce      	itee	gt
 8013070:	462a      	movgt	r2, r5
 8013072:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013076:	465a      	movle	r2, fp
 8013078:	462f      	mov	r7, r5
 801307a:	46d9      	mov	r9, fp
 801307c:	bfcc      	ite	gt
 801307e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013082:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8013086:	464b      	mov	r3, r9
 8013088:	4652      	mov	r2, sl
 801308a:	4620      	mov	r0, r4
 801308c:	4639      	mov	r1, r7
 801308e:	f7ed fc05 	bl	800089c <__aeabi_ddiv>
 8013092:	ec41 0b10 	vmov	d0, r0, r1
 8013096:	b005      	add	sp, #20
 8013098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801309c <__copybits>:
 801309c:	3901      	subs	r1, #1
 801309e:	b570      	push	{r4, r5, r6, lr}
 80130a0:	1149      	asrs	r1, r1, #5
 80130a2:	6914      	ldr	r4, [r2, #16]
 80130a4:	3101      	adds	r1, #1
 80130a6:	f102 0314 	add.w	r3, r2, #20
 80130aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80130ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80130b2:	1f05      	subs	r5, r0, #4
 80130b4:	42a3      	cmp	r3, r4
 80130b6:	d30c      	bcc.n	80130d2 <__copybits+0x36>
 80130b8:	1aa3      	subs	r3, r4, r2
 80130ba:	3b11      	subs	r3, #17
 80130bc:	f023 0303 	bic.w	r3, r3, #3
 80130c0:	3211      	adds	r2, #17
 80130c2:	42a2      	cmp	r2, r4
 80130c4:	bf88      	it	hi
 80130c6:	2300      	movhi	r3, #0
 80130c8:	4418      	add	r0, r3
 80130ca:	2300      	movs	r3, #0
 80130cc:	4288      	cmp	r0, r1
 80130ce:	d305      	bcc.n	80130dc <__copybits+0x40>
 80130d0:	bd70      	pop	{r4, r5, r6, pc}
 80130d2:	f853 6b04 	ldr.w	r6, [r3], #4
 80130d6:	f845 6f04 	str.w	r6, [r5, #4]!
 80130da:	e7eb      	b.n	80130b4 <__copybits+0x18>
 80130dc:	f840 3b04 	str.w	r3, [r0], #4
 80130e0:	e7f4      	b.n	80130cc <__copybits+0x30>

080130e2 <__any_on>:
 80130e2:	f100 0214 	add.w	r2, r0, #20
 80130e6:	6900      	ldr	r0, [r0, #16]
 80130e8:	114b      	asrs	r3, r1, #5
 80130ea:	4298      	cmp	r0, r3
 80130ec:	b510      	push	{r4, lr}
 80130ee:	db11      	blt.n	8013114 <__any_on+0x32>
 80130f0:	dd0a      	ble.n	8013108 <__any_on+0x26>
 80130f2:	f011 011f 	ands.w	r1, r1, #31
 80130f6:	d007      	beq.n	8013108 <__any_on+0x26>
 80130f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80130fc:	fa24 f001 	lsr.w	r0, r4, r1
 8013100:	fa00 f101 	lsl.w	r1, r0, r1
 8013104:	428c      	cmp	r4, r1
 8013106:	d10b      	bne.n	8013120 <__any_on+0x3e>
 8013108:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801310c:	4293      	cmp	r3, r2
 801310e:	d803      	bhi.n	8013118 <__any_on+0x36>
 8013110:	2000      	movs	r0, #0
 8013112:	bd10      	pop	{r4, pc}
 8013114:	4603      	mov	r3, r0
 8013116:	e7f7      	b.n	8013108 <__any_on+0x26>
 8013118:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801311c:	2900      	cmp	r1, #0
 801311e:	d0f5      	beq.n	801310c <__any_on+0x2a>
 8013120:	2001      	movs	r0, #1
 8013122:	e7f6      	b.n	8013112 <__any_on+0x30>

08013124 <sulp>:
 8013124:	b570      	push	{r4, r5, r6, lr}
 8013126:	4604      	mov	r4, r0
 8013128:	460d      	mov	r5, r1
 801312a:	ec45 4b10 	vmov	d0, r4, r5
 801312e:	4616      	mov	r6, r2
 8013130:	f7ff feba 	bl	8012ea8 <__ulp>
 8013134:	ec51 0b10 	vmov	r0, r1, d0
 8013138:	b17e      	cbz	r6, 801315a <sulp+0x36>
 801313a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801313e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013142:	2b00      	cmp	r3, #0
 8013144:	dd09      	ble.n	801315a <sulp+0x36>
 8013146:	051b      	lsls	r3, r3, #20
 8013148:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801314c:	2400      	movs	r4, #0
 801314e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8013152:	4622      	mov	r2, r4
 8013154:	462b      	mov	r3, r5
 8013156:	f7ed fa77 	bl	8000648 <__aeabi_dmul>
 801315a:	ec41 0b10 	vmov	d0, r0, r1
 801315e:	bd70      	pop	{r4, r5, r6, pc}

08013160 <_strtod_l>:
 8013160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013164:	b09f      	sub	sp, #124	@ 0x7c
 8013166:	460c      	mov	r4, r1
 8013168:	9217      	str	r2, [sp, #92]	@ 0x5c
 801316a:	2200      	movs	r2, #0
 801316c:	921a      	str	r2, [sp, #104]	@ 0x68
 801316e:	9005      	str	r0, [sp, #20]
 8013170:	f04f 0a00 	mov.w	sl, #0
 8013174:	f04f 0b00 	mov.w	fp, #0
 8013178:	460a      	mov	r2, r1
 801317a:	9219      	str	r2, [sp, #100]	@ 0x64
 801317c:	7811      	ldrb	r1, [r2, #0]
 801317e:	292b      	cmp	r1, #43	@ 0x2b
 8013180:	d04a      	beq.n	8013218 <_strtod_l+0xb8>
 8013182:	d838      	bhi.n	80131f6 <_strtod_l+0x96>
 8013184:	290d      	cmp	r1, #13
 8013186:	d832      	bhi.n	80131ee <_strtod_l+0x8e>
 8013188:	2908      	cmp	r1, #8
 801318a:	d832      	bhi.n	80131f2 <_strtod_l+0x92>
 801318c:	2900      	cmp	r1, #0
 801318e:	d03b      	beq.n	8013208 <_strtod_l+0xa8>
 8013190:	2200      	movs	r2, #0
 8013192:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013194:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8013196:	782a      	ldrb	r2, [r5, #0]
 8013198:	2a30      	cmp	r2, #48	@ 0x30
 801319a:	f040 80b3 	bne.w	8013304 <_strtod_l+0x1a4>
 801319e:	786a      	ldrb	r2, [r5, #1]
 80131a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80131a4:	2a58      	cmp	r2, #88	@ 0x58
 80131a6:	d16e      	bne.n	8013286 <_strtod_l+0x126>
 80131a8:	9302      	str	r3, [sp, #8]
 80131aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80131ac:	9301      	str	r3, [sp, #4]
 80131ae:	ab1a      	add	r3, sp, #104	@ 0x68
 80131b0:	9300      	str	r3, [sp, #0]
 80131b2:	4a8e      	ldr	r2, [pc, #568]	@ (80133ec <_strtod_l+0x28c>)
 80131b4:	9805      	ldr	r0, [sp, #20]
 80131b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80131b8:	a919      	add	r1, sp, #100	@ 0x64
 80131ba:	f001 fc97 	bl	8014aec <__gethex>
 80131be:	f010 060f 	ands.w	r6, r0, #15
 80131c2:	4604      	mov	r4, r0
 80131c4:	d005      	beq.n	80131d2 <_strtod_l+0x72>
 80131c6:	2e06      	cmp	r6, #6
 80131c8:	d128      	bne.n	801321c <_strtod_l+0xbc>
 80131ca:	3501      	adds	r5, #1
 80131cc:	2300      	movs	r3, #0
 80131ce:	9519      	str	r5, [sp, #100]	@ 0x64
 80131d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80131d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	f040 858e 	bne.w	8013cf6 <_strtod_l+0xb96>
 80131da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80131dc:	b1cb      	cbz	r3, 8013212 <_strtod_l+0xb2>
 80131de:	4652      	mov	r2, sl
 80131e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80131e4:	ec43 2b10 	vmov	d0, r2, r3
 80131e8:	b01f      	add	sp, #124	@ 0x7c
 80131ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ee:	2920      	cmp	r1, #32
 80131f0:	d1ce      	bne.n	8013190 <_strtod_l+0x30>
 80131f2:	3201      	adds	r2, #1
 80131f4:	e7c1      	b.n	801317a <_strtod_l+0x1a>
 80131f6:	292d      	cmp	r1, #45	@ 0x2d
 80131f8:	d1ca      	bne.n	8013190 <_strtod_l+0x30>
 80131fa:	2101      	movs	r1, #1
 80131fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80131fe:	1c51      	adds	r1, r2, #1
 8013200:	9119      	str	r1, [sp, #100]	@ 0x64
 8013202:	7852      	ldrb	r2, [r2, #1]
 8013204:	2a00      	cmp	r2, #0
 8013206:	d1c5      	bne.n	8013194 <_strtod_l+0x34>
 8013208:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801320a:	9419      	str	r4, [sp, #100]	@ 0x64
 801320c:	2b00      	cmp	r3, #0
 801320e:	f040 8570 	bne.w	8013cf2 <_strtod_l+0xb92>
 8013212:	4652      	mov	r2, sl
 8013214:	465b      	mov	r3, fp
 8013216:	e7e5      	b.n	80131e4 <_strtod_l+0x84>
 8013218:	2100      	movs	r1, #0
 801321a:	e7ef      	b.n	80131fc <_strtod_l+0x9c>
 801321c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801321e:	b13a      	cbz	r2, 8013230 <_strtod_l+0xd0>
 8013220:	2135      	movs	r1, #53	@ 0x35
 8013222:	a81c      	add	r0, sp, #112	@ 0x70
 8013224:	f7ff ff3a 	bl	801309c <__copybits>
 8013228:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801322a:	9805      	ldr	r0, [sp, #20]
 801322c:	f7ff fb08 	bl	8012840 <_Bfree>
 8013230:	3e01      	subs	r6, #1
 8013232:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8013234:	2e04      	cmp	r6, #4
 8013236:	d806      	bhi.n	8013246 <_strtod_l+0xe6>
 8013238:	e8df f006 	tbb	[pc, r6]
 801323c:	201d0314 	.word	0x201d0314
 8013240:	14          	.byte	0x14
 8013241:	00          	.byte	0x00
 8013242:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8013246:	05e1      	lsls	r1, r4, #23
 8013248:	bf48      	it	mi
 801324a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801324e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013252:	0d1b      	lsrs	r3, r3, #20
 8013254:	051b      	lsls	r3, r3, #20
 8013256:	2b00      	cmp	r3, #0
 8013258:	d1bb      	bne.n	80131d2 <_strtod_l+0x72>
 801325a:	f7fe fb21 	bl	80118a0 <__errno>
 801325e:	2322      	movs	r3, #34	@ 0x22
 8013260:	6003      	str	r3, [r0, #0]
 8013262:	e7b6      	b.n	80131d2 <_strtod_l+0x72>
 8013264:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013268:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801326c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013270:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013274:	e7e7      	b.n	8013246 <_strtod_l+0xe6>
 8013276:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80133f4 <_strtod_l+0x294>
 801327a:	e7e4      	b.n	8013246 <_strtod_l+0xe6>
 801327c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013280:	f04f 3aff 	mov.w	sl, #4294967295
 8013284:	e7df      	b.n	8013246 <_strtod_l+0xe6>
 8013286:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013288:	1c5a      	adds	r2, r3, #1
 801328a:	9219      	str	r2, [sp, #100]	@ 0x64
 801328c:	785b      	ldrb	r3, [r3, #1]
 801328e:	2b30      	cmp	r3, #48	@ 0x30
 8013290:	d0f9      	beq.n	8013286 <_strtod_l+0x126>
 8013292:	2b00      	cmp	r3, #0
 8013294:	d09d      	beq.n	80131d2 <_strtod_l+0x72>
 8013296:	2301      	movs	r3, #1
 8013298:	9309      	str	r3, [sp, #36]	@ 0x24
 801329a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801329c:	930c      	str	r3, [sp, #48]	@ 0x30
 801329e:	2300      	movs	r3, #0
 80132a0:	9308      	str	r3, [sp, #32]
 80132a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80132a4:	461f      	mov	r7, r3
 80132a6:	220a      	movs	r2, #10
 80132a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80132aa:	7805      	ldrb	r5, [r0, #0]
 80132ac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80132b0:	b2d9      	uxtb	r1, r3
 80132b2:	2909      	cmp	r1, #9
 80132b4:	d928      	bls.n	8013308 <_strtod_l+0x1a8>
 80132b6:	494e      	ldr	r1, [pc, #312]	@ (80133f0 <_strtod_l+0x290>)
 80132b8:	2201      	movs	r2, #1
 80132ba:	f7fe fa94 	bl	80117e6 <strncmp>
 80132be:	2800      	cmp	r0, #0
 80132c0:	d032      	beq.n	8013328 <_strtod_l+0x1c8>
 80132c2:	2000      	movs	r0, #0
 80132c4:	462a      	mov	r2, r5
 80132c6:	4681      	mov	r9, r0
 80132c8:	463d      	mov	r5, r7
 80132ca:	4603      	mov	r3, r0
 80132cc:	2a65      	cmp	r2, #101	@ 0x65
 80132ce:	d001      	beq.n	80132d4 <_strtod_l+0x174>
 80132d0:	2a45      	cmp	r2, #69	@ 0x45
 80132d2:	d114      	bne.n	80132fe <_strtod_l+0x19e>
 80132d4:	b91d      	cbnz	r5, 80132de <_strtod_l+0x17e>
 80132d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80132d8:	4302      	orrs	r2, r0
 80132da:	d095      	beq.n	8013208 <_strtod_l+0xa8>
 80132dc:	2500      	movs	r5, #0
 80132de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80132e0:	1c62      	adds	r2, r4, #1
 80132e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80132e4:	7862      	ldrb	r2, [r4, #1]
 80132e6:	2a2b      	cmp	r2, #43	@ 0x2b
 80132e8:	d077      	beq.n	80133da <_strtod_l+0x27a>
 80132ea:	2a2d      	cmp	r2, #45	@ 0x2d
 80132ec:	d07b      	beq.n	80133e6 <_strtod_l+0x286>
 80132ee:	f04f 0c00 	mov.w	ip, #0
 80132f2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80132f6:	2909      	cmp	r1, #9
 80132f8:	f240 8082 	bls.w	8013400 <_strtod_l+0x2a0>
 80132fc:	9419      	str	r4, [sp, #100]	@ 0x64
 80132fe:	f04f 0800 	mov.w	r8, #0
 8013302:	e0a2      	b.n	801344a <_strtod_l+0x2ea>
 8013304:	2300      	movs	r3, #0
 8013306:	e7c7      	b.n	8013298 <_strtod_l+0x138>
 8013308:	2f08      	cmp	r7, #8
 801330a:	bfd5      	itete	le
 801330c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801330e:	9908      	ldrgt	r1, [sp, #32]
 8013310:	fb02 3301 	mlale	r3, r2, r1, r3
 8013314:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013318:	f100 0001 	add.w	r0, r0, #1
 801331c:	bfd4      	ite	le
 801331e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8013320:	9308      	strgt	r3, [sp, #32]
 8013322:	3701      	adds	r7, #1
 8013324:	9019      	str	r0, [sp, #100]	@ 0x64
 8013326:	e7bf      	b.n	80132a8 <_strtod_l+0x148>
 8013328:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801332a:	1c5a      	adds	r2, r3, #1
 801332c:	9219      	str	r2, [sp, #100]	@ 0x64
 801332e:	785a      	ldrb	r2, [r3, #1]
 8013330:	b37f      	cbz	r7, 8013392 <_strtod_l+0x232>
 8013332:	4681      	mov	r9, r0
 8013334:	463d      	mov	r5, r7
 8013336:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801333a:	2b09      	cmp	r3, #9
 801333c:	d912      	bls.n	8013364 <_strtod_l+0x204>
 801333e:	2301      	movs	r3, #1
 8013340:	e7c4      	b.n	80132cc <_strtod_l+0x16c>
 8013342:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013344:	1c5a      	adds	r2, r3, #1
 8013346:	9219      	str	r2, [sp, #100]	@ 0x64
 8013348:	785a      	ldrb	r2, [r3, #1]
 801334a:	3001      	adds	r0, #1
 801334c:	2a30      	cmp	r2, #48	@ 0x30
 801334e:	d0f8      	beq.n	8013342 <_strtod_l+0x1e2>
 8013350:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013354:	2b08      	cmp	r3, #8
 8013356:	f200 84d3 	bhi.w	8013d00 <_strtod_l+0xba0>
 801335a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801335c:	930c      	str	r3, [sp, #48]	@ 0x30
 801335e:	4681      	mov	r9, r0
 8013360:	2000      	movs	r0, #0
 8013362:	4605      	mov	r5, r0
 8013364:	3a30      	subs	r2, #48	@ 0x30
 8013366:	f100 0301 	add.w	r3, r0, #1
 801336a:	d02a      	beq.n	80133c2 <_strtod_l+0x262>
 801336c:	4499      	add	r9, r3
 801336e:	eb00 0c05 	add.w	ip, r0, r5
 8013372:	462b      	mov	r3, r5
 8013374:	210a      	movs	r1, #10
 8013376:	4563      	cmp	r3, ip
 8013378:	d10d      	bne.n	8013396 <_strtod_l+0x236>
 801337a:	1c69      	adds	r1, r5, #1
 801337c:	4401      	add	r1, r0
 801337e:	4428      	add	r0, r5
 8013380:	2808      	cmp	r0, #8
 8013382:	dc16      	bgt.n	80133b2 <_strtod_l+0x252>
 8013384:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013386:	230a      	movs	r3, #10
 8013388:	fb03 2300 	mla	r3, r3, r0, r2
 801338c:	930a      	str	r3, [sp, #40]	@ 0x28
 801338e:	2300      	movs	r3, #0
 8013390:	e018      	b.n	80133c4 <_strtod_l+0x264>
 8013392:	4638      	mov	r0, r7
 8013394:	e7da      	b.n	801334c <_strtod_l+0x1ec>
 8013396:	2b08      	cmp	r3, #8
 8013398:	f103 0301 	add.w	r3, r3, #1
 801339c:	dc03      	bgt.n	80133a6 <_strtod_l+0x246>
 801339e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80133a0:	434e      	muls	r6, r1
 80133a2:	960a      	str	r6, [sp, #40]	@ 0x28
 80133a4:	e7e7      	b.n	8013376 <_strtod_l+0x216>
 80133a6:	2b10      	cmp	r3, #16
 80133a8:	bfde      	ittt	le
 80133aa:	9e08      	ldrle	r6, [sp, #32]
 80133ac:	434e      	mulle	r6, r1
 80133ae:	9608      	strle	r6, [sp, #32]
 80133b0:	e7e1      	b.n	8013376 <_strtod_l+0x216>
 80133b2:	280f      	cmp	r0, #15
 80133b4:	dceb      	bgt.n	801338e <_strtod_l+0x22e>
 80133b6:	9808      	ldr	r0, [sp, #32]
 80133b8:	230a      	movs	r3, #10
 80133ba:	fb03 2300 	mla	r3, r3, r0, r2
 80133be:	9308      	str	r3, [sp, #32]
 80133c0:	e7e5      	b.n	801338e <_strtod_l+0x22e>
 80133c2:	4629      	mov	r1, r5
 80133c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80133c6:	1c50      	adds	r0, r2, #1
 80133c8:	9019      	str	r0, [sp, #100]	@ 0x64
 80133ca:	7852      	ldrb	r2, [r2, #1]
 80133cc:	4618      	mov	r0, r3
 80133ce:	460d      	mov	r5, r1
 80133d0:	e7b1      	b.n	8013336 <_strtod_l+0x1d6>
 80133d2:	f04f 0900 	mov.w	r9, #0
 80133d6:	2301      	movs	r3, #1
 80133d8:	e77d      	b.n	80132d6 <_strtod_l+0x176>
 80133da:	f04f 0c00 	mov.w	ip, #0
 80133de:	1ca2      	adds	r2, r4, #2
 80133e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80133e2:	78a2      	ldrb	r2, [r4, #2]
 80133e4:	e785      	b.n	80132f2 <_strtod_l+0x192>
 80133e6:	f04f 0c01 	mov.w	ip, #1
 80133ea:	e7f8      	b.n	80133de <_strtod_l+0x27e>
 80133ec:	080171c0 	.word	0x080171c0
 80133f0:	080171a8 	.word	0x080171a8
 80133f4:	7ff00000 	.word	0x7ff00000
 80133f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80133fa:	1c51      	adds	r1, r2, #1
 80133fc:	9119      	str	r1, [sp, #100]	@ 0x64
 80133fe:	7852      	ldrb	r2, [r2, #1]
 8013400:	2a30      	cmp	r2, #48	@ 0x30
 8013402:	d0f9      	beq.n	80133f8 <_strtod_l+0x298>
 8013404:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8013408:	2908      	cmp	r1, #8
 801340a:	f63f af78 	bhi.w	80132fe <_strtod_l+0x19e>
 801340e:	3a30      	subs	r2, #48	@ 0x30
 8013410:	920e      	str	r2, [sp, #56]	@ 0x38
 8013412:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013414:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013416:	f04f 080a 	mov.w	r8, #10
 801341a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801341c:	1c56      	adds	r6, r2, #1
 801341e:	9619      	str	r6, [sp, #100]	@ 0x64
 8013420:	7852      	ldrb	r2, [r2, #1]
 8013422:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8013426:	f1be 0f09 	cmp.w	lr, #9
 801342a:	d939      	bls.n	80134a0 <_strtod_l+0x340>
 801342c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801342e:	1a76      	subs	r6, r6, r1
 8013430:	2e08      	cmp	r6, #8
 8013432:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8013436:	dc03      	bgt.n	8013440 <_strtod_l+0x2e0>
 8013438:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801343a:	4588      	cmp	r8, r1
 801343c:	bfa8      	it	ge
 801343e:	4688      	movge	r8, r1
 8013440:	f1bc 0f00 	cmp.w	ip, #0
 8013444:	d001      	beq.n	801344a <_strtod_l+0x2ea>
 8013446:	f1c8 0800 	rsb	r8, r8, #0
 801344a:	2d00      	cmp	r5, #0
 801344c:	d14e      	bne.n	80134ec <_strtod_l+0x38c>
 801344e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013450:	4308      	orrs	r0, r1
 8013452:	f47f aebe 	bne.w	80131d2 <_strtod_l+0x72>
 8013456:	2b00      	cmp	r3, #0
 8013458:	f47f aed6 	bne.w	8013208 <_strtod_l+0xa8>
 801345c:	2a69      	cmp	r2, #105	@ 0x69
 801345e:	d028      	beq.n	80134b2 <_strtod_l+0x352>
 8013460:	dc25      	bgt.n	80134ae <_strtod_l+0x34e>
 8013462:	2a49      	cmp	r2, #73	@ 0x49
 8013464:	d025      	beq.n	80134b2 <_strtod_l+0x352>
 8013466:	2a4e      	cmp	r2, #78	@ 0x4e
 8013468:	f47f aece 	bne.w	8013208 <_strtod_l+0xa8>
 801346c:	499b      	ldr	r1, [pc, #620]	@ (80136dc <_strtod_l+0x57c>)
 801346e:	a819      	add	r0, sp, #100	@ 0x64
 8013470:	f001 fd5e 	bl	8014f30 <__match>
 8013474:	2800      	cmp	r0, #0
 8013476:	f43f aec7 	beq.w	8013208 <_strtod_l+0xa8>
 801347a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801347c:	781b      	ldrb	r3, [r3, #0]
 801347e:	2b28      	cmp	r3, #40	@ 0x28
 8013480:	d12e      	bne.n	80134e0 <_strtod_l+0x380>
 8013482:	4997      	ldr	r1, [pc, #604]	@ (80136e0 <_strtod_l+0x580>)
 8013484:	aa1c      	add	r2, sp, #112	@ 0x70
 8013486:	a819      	add	r0, sp, #100	@ 0x64
 8013488:	f001 fd66 	bl	8014f58 <__hexnan>
 801348c:	2805      	cmp	r0, #5
 801348e:	d127      	bne.n	80134e0 <_strtod_l+0x380>
 8013490:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013492:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8013496:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801349a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801349e:	e698      	b.n	80131d2 <_strtod_l+0x72>
 80134a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80134a2:	fb08 2101 	mla	r1, r8, r1, r2
 80134a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80134aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80134ac:	e7b5      	b.n	801341a <_strtod_l+0x2ba>
 80134ae:	2a6e      	cmp	r2, #110	@ 0x6e
 80134b0:	e7da      	b.n	8013468 <_strtod_l+0x308>
 80134b2:	498c      	ldr	r1, [pc, #560]	@ (80136e4 <_strtod_l+0x584>)
 80134b4:	a819      	add	r0, sp, #100	@ 0x64
 80134b6:	f001 fd3b 	bl	8014f30 <__match>
 80134ba:	2800      	cmp	r0, #0
 80134bc:	f43f aea4 	beq.w	8013208 <_strtod_l+0xa8>
 80134c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80134c2:	4989      	ldr	r1, [pc, #548]	@ (80136e8 <_strtod_l+0x588>)
 80134c4:	3b01      	subs	r3, #1
 80134c6:	a819      	add	r0, sp, #100	@ 0x64
 80134c8:	9319      	str	r3, [sp, #100]	@ 0x64
 80134ca:	f001 fd31 	bl	8014f30 <__match>
 80134ce:	b910      	cbnz	r0, 80134d6 <_strtod_l+0x376>
 80134d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80134d2:	3301      	adds	r3, #1
 80134d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80134d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80136f8 <_strtod_l+0x598>
 80134da:	f04f 0a00 	mov.w	sl, #0
 80134de:	e678      	b.n	80131d2 <_strtod_l+0x72>
 80134e0:	4882      	ldr	r0, [pc, #520]	@ (80136ec <_strtod_l+0x58c>)
 80134e2:	f001 fa61 	bl	80149a8 <nan>
 80134e6:	ec5b ab10 	vmov	sl, fp, d0
 80134ea:	e672      	b.n	80131d2 <_strtod_l+0x72>
 80134ec:	eba8 0309 	sub.w	r3, r8, r9
 80134f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80134f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80134f4:	2f00      	cmp	r7, #0
 80134f6:	bf08      	it	eq
 80134f8:	462f      	moveq	r7, r5
 80134fa:	2d10      	cmp	r5, #16
 80134fc:	462c      	mov	r4, r5
 80134fe:	bfa8      	it	ge
 8013500:	2410      	movge	r4, #16
 8013502:	f7ed f827 	bl	8000554 <__aeabi_ui2d>
 8013506:	2d09      	cmp	r5, #9
 8013508:	4682      	mov	sl, r0
 801350a:	468b      	mov	fp, r1
 801350c:	dc13      	bgt.n	8013536 <_strtod_l+0x3d6>
 801350e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013510:	2b00      	cmp	r3, #0
 8013512:	f43f ae5e 	beq.w	80131d2 <_strtod_l+0x72>
 8013516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013518:	dd78      	ble.n	801360c <_strtod_l+0x4ac>
 801351a:	2b16      	cmp	r3, #22
 801351c:	dc5f      	bgt.n	80135de <_strtod_l+0x47e>
 801351e:	4974      	ldr	r1, [pc, #464]	@ (80136f0 <_strtod_l+0x590>)
 8013520:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013524:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013528:	4652      	mov	r2, sl
 801352a:	465b      	mov	r3, fp
 801352c:	f7ed f88c 	bl	8000648 <__aeabi_dmul>
 8013530:	4682      	mov	sl, r0
 8013532:	468b      	mov	fp, r1
 8013534:	e64d      	b.n	80131d2 <_strtod_l+0x72>
 8013536:	4b6e      	ldr	r3, [pc, #440]	@ (80136f0 <_strtod_l+0x590>)
 8013538:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801353c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8013540:	f7ed f882 	bl	8000648 <__aeabi_dmul>
 8013544:	4682      	mov	sl, r0
 8013546:	9808      	ldr	r0, [sp, #32]
 8013548:	468b      	mov	fp, r1
 801354a:	f7ed f803 	bl	8000554 <__aeabi_ui2d>
 801354e:	4602      	mov	r2, r0
 8013550:	460b      	mov	r3, r1
 8013552:	4650      	mov	r0, sl
 8013554:	4659      	mov	r1, fp
 8013556:	f7ec fec1 	bl	80002dc <__adddf3>
 801355a:	2d0f      	cmp	r5, #15
 801355c:	4682      	mov	sl, r0
 801355e:	468b      	mov	fp, r1
 8013560:	ddd5      	ble.n	801350e <_strtod_l+0x3ae>
 8013562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013564:	1b2c      	subs	r4, r5, r4
 8013566:	441c      	add	r4, r3
 8013568:	2c00      	cmp	r4, #0
 801356a:	f340 8096 	ble.w	801369a <_strtod_l+0x53a>
 801356e:	f014 030f 	ands.w	r3, r4, #15
 8013572:	d00a      	beq.n	801358a <_strtod_l+0x42a>
 8013574:	495e      	ldr	r1, [pc, #376]	@ (80136f0 <_strtod_l+0x590>)
 8013576:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801357a:	4652      	mov	r2, sl
 801357c:	465b      	mov	r3, fp
 801357e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013582:	f7ed f861 	bl	8000648 <__aeabi_dmul>
 8013586:	4682      	mov	sl, r0
 8013588:	468b      	mov	fp, r1
 801358a:	f034 040f 	bics.w	r4, r4, #15
 801358e:	d073      	beq.n	8013678 <_strtod_l+0x518>
 8013590:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8013594:	dd48      	ble.n	8013628 <_strtod_l+0x4c8>
 8013596:	2400      	movs	r4, #0
 8013598:	46a0      	mov	r8, r4
 801359a:	940a      	str	r4, [sp, #40]	@ 0x28
 801359c:	46a1      	mov	r9, r4
 801359e:	9a05      	ldr	r2, [sp, #20]
 80135a0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80136f8 <_strtod_l+0x598>
 80135a4:	2322      	movs	r3, #34	@ 0x22
 80135a6:	6013      	str	r3, [r2, #0]
 80135a8:	f04f 0a00 	mov.w	sl, #0
 80135ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	f43f ae0f 	beq.w	80131d2 <_strtod_l+0x72>
 80135b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80135b6:	9805      	ldr	r0, [sp, #20]
 80135b8:	f7ff f942 	bl	8012840 <_Bfree>
 80135bc:	9805      	ldr	r0, [sp, #20]
 80135be:	4649      	mov	r1, r9
 80135c0:	f7ff f93e 	bl	8012840 <_Bfree>
 80135c4:	9805      	ldr	r0, [sp, #20]
 80135c6:	4641      	mov	r1, r8
 80135c8:	f7ff f93a 	bl	8012840 <_Bfree>
 80135cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80135ce:	9805      	ldr	r0, [sp, #20]
 80135d0:	f7ff f936 	bl	8012840 <_Bfree>
 80135d4:	9805      	ldr	r0, [sp, #20]
 80135d6:	4621      	mov	r1, r4
 80135d8:	f7ff f932 	bl	8012840 <_Bfree>
 80135dc:	e5f9      	b.n	80131d2 <_strtod_l+0x72>
 80135de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80135e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80135e4:	4293      	cmp	r3, r2
 80135e6:	dbbc      	blt.n	8013562 <_strtod_l+0x402>
 80135e8:	4c41      	ldr	r4, [pc, #260]	@ (80136f0 <_strtod_l+0x590>)
 80135ea:	f1c5 050f 	rsb	r5, r5, #15
 80135ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80135f2:	4652      	mov	r2, sl
 80135f4:	465b      	mov	r3, fp
 80135f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135fa:	f7ed f825 	bl	8000648 <__aeabi_dmul>
 80135fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013600:	1b5d      	subs	r5, r3, r5
 8013602:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013606:	e9d4 2300 	ldrd	r2, r3, [r4]
 801360a:	e78f      	b.n	801352c <_strtod_l+0x3cc>
 801360c:	3316      	adds	r3, #22
 801360e:	dba8      	blt.n	8013562 <_strtod_l+0x402>
 8013610:	4b37      	ldr	r3, [pc, #220]	@ (80136f0 <_strtod_l+0x590>)
 8013612:	eba9 0808 	sub.w	r8, r9, r8
 8013616:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801361a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801361e:	4650      	mov	r0, sl
 8013620:	4659      	mov	r1, fp
 8013622:	f7ed f93b 	bl	800089c <__aeabi_ddiv>
 8013626:	e783      	b.n	8013530 <_strtod_l+0x3d0>
 8013628:	4b32      	ldr	r3, [pc, #200]	@ (80136f4 <_strtod_l+0x594>)
 801362a:	9308      	str	r3, [sp, #32]
 801362c:	2300      	movs	r3, #0
 801362e:	1124      	asrs	r4, r4, #4
 8013630:	4650      	mov	r0, sl
 8013632:	4659      	mov	r1, fp
 8013634:	461e      	mov	r6, r3
 8013636:	2c01      	cmp	r4, #1
 8013638:	dc21      	bgt.n	801367e <_strtod_l+0x51e>
 801363a:	b10b      	cbz	r3, 8013640 <_strtod_l+0x4e0>
 801363c:	4682      	mov	sl, r0
 801363e:	468b      	mov	fp, r1
 8013640:	492c      	ldr	r1, [pc, #176]	@ (80136f4 <_strtod_l+0x594>)
 8013642:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013646:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801364a:	4652      	mov	r2, sl
 801364c:	465b      	mov	r3, fp
 801364e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013652:	f7ec fff9 	bl	8000648 <__aeabi_dmul>
 8013656:	4b28      	ldr	r3, [pc, #160]	@ (80136f8 <_strtod_l+0x598>)
 8013658:	460a      	mov	r2, r1
 801365a:	400b      	ands	r3, r1
 801365c:	4927      	ldr	r1, [pc, #156]	@ (80136fc <_strtod_l+0x59c>)
 801365e:	428b      	cmp	r3, r1
 8013660:	4682      	mov	sl, r0
 8013662:	d898      	bhi.n	8013596 <_strtod_l+0x436>
 8013664:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013668:	428b      	cmp	r3, r1
 801366a:	bf86      	itte	hi
 801366c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8013700 <_strtod_l+0x5a0>
 8013670:	f04f 3aff 	movhi.w	sl, #4294967295
 8013674:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013678:	2300      	movs	r3, #0
 801367a:	9308      	str	r3, [sp, #32]
 801367c:	e07a      	b.n	8013774 <_strtod_l+0x614>
 801367e:	07e2      	lsls	r2, r4, #31
 8013680:	d505      	bpl.n	801368e <_strtod_l+0x52e>
 8013682:	9b08      	ldr	r3, [sp, #32]
 8013684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013688:	f7ec ffde 	bl	8000648 <__aeabi_dmul>
 801368c:	2301      	movs	r3, #1
 801368e:	9a08      	ldr	r2, [sp, #32]
 8013690:	3208      	adds	r2, #8
 8013692:	3601      	adds	r6, #1
 8013694:	1064      	asrs	r4, r4, #1
 8013696:	9208      	str	r2, [sp, #32]
 8013698:	e7cd      	b.n	8013636 <_strtod_l+0x4d6>
 801369a:	d0ed      	beq.n	8013678 <_strtod_l+0x518>
 801369c:	4264      	negs	r4, r4
 801369e:	f014 020f 	ands.w	r2, r4, #15
 80136a2:	d00a      	beq.n	80136ba <_strtod_l+0x55a>
 80136a4:	4b12      	ldr	r3, [pc, #72]	@ (80136f0 <_strtod_l+0x590>)
 80136a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80136aa:	4650      	mov	r0, sl
 80136ac:	4659      	mov	r1, fp
 80136ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136b2:	f7ed f8f3 	bl	800089c <__aeabi_ddiv>
 80136b6:	4682      	mov	sl, r0
 80136b8:	468b      	mov	fp, r1
 80136ba:	1124      	asrs	r4, r4, #4
 80136bc:	d0dc      	beq.n	8013678 <_strtod_l+0x518>
 80136be:	2c1f      	cmp	r4, #31
 80136c0:	dd20      	ble.n	8013704 <_strtod_l+0x5a4>
 80136c2:	2400      	movs	r4, #0
 80136c4:	46a0      	mov	r8, r4
 80136c6:	940a      	str	r4, [sp, #40]	@ 0x28
 80136c8:	46a1      	mov	r9, r4
 80136ca:	9a05      	ldr	r2, [sp, #20]
 80136cc:	2322      	movs	r3, #34	@ 0x22
 80136ce:	f04f 0a00 	mov.w	sl, #0
 80136d2:	f04f 0b00 	mov.w	fp, #0
 80136d6:	6013      	str	r3, [r2, #0]
 80136d8:	e768      	b.n	80135ac <_strtod_l+0x44c>
 80136da:	bf00      	nop
 80136dc:	08016f95 	.word	0x08016f95
 80136e0:	080171ac 	.word	0x080171ac
 80136e4:	08016f8d 	.word	0x08016f8d
 80136e8:	08016fc2 	.word	0x08016fc2
 80136ec:	08017370 	.word	0x08017370
 80136f0:	080170e0 	.word	0x080170e0
 80136f4:	080170b8 	.word	0x080170b8
 80136f8:	7ff00000 	.word	0x7ff00000
 80136fc:	7ca00000 	.word	0x7ca00000
 8013700:	7fefffff 	.word	0x7fefffff
 8013704:	f014 0310 	ands.w	r3, r4, #16
 8013708:	bf18      	it	ne
 801370a:	236a      	movne	r3, #106	@ 0x6a
 801370c:	4ea9      	ldr	r6, [pc, #676]	@ (80139b4 <_strtod_l+0x854>)
 801370e:	9308      	str	r3, [sp, #32]
 8013710:	4650      	mov	r0, sl
 8013712:	4659      	mov	r1, fp
 8013714:	2300      	movs	r3, #0
 8013716:	07e2      	lsls	r2, r4, #31
 8013718:	d504      	bpl.n	8013724 <_strtod_l+0x5c4>
 801371a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801371e:	f7ec ff93 	bl	8000648 <__aeabi_dmul>
 8013722:	2301      	movs	r3, #1
 8013724:	1064      	asrs	r4, r4, #1
 8013726:	f106 0608 	add.w	r6, r6, #8
 801372a:	d1f4      	bne.n	8013716 <_strtod_l+0x5b6>
 801372c:	b10b      	cbz	r3, 8013732 <_strtod_l+0x5d2>
 801372e:	4682      	mov	sl, r0
 8013730:	468b      	mov	fp, r1
 8013732:	9b08      	ldr	r3, [sp, #32]
 8013734:	b1b3      	cbz	r3, 8013764 <_strtod_l+0x604>
 8013736:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801373a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801373e:	2b00      	cmp	r3, #0
 8013740:	4659      	mov	r1, fp
 8013742:	dd0f      	ble.n	8013764 <_strtod_l+0x604>
 8013744:	2b1f      	cmp	r3, #31
 8013746:	dd55      	ble.n	80137f4 <_strtod_l+0x694>
 8013748:	2b34      	cmp	r3, #52	@ 0x34
 801374a:	bfde      	ittt	le
 801374c:	f04f 33ff 	movle.w	r3, #4294967295
 8013750:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8013754:	4093      	lslle	r3, r2
 8013756:	f04f 0a00 	mov.w	sl, #0
 801375a:	bfcc      	ite	gt
 801375c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013760:	ea03 0b01 	andle.w	fp, r3, r1
 8013764:	2200      	movs	r2, #0
 8013766:	2300      	movs	r3, #0
 8013768:	4650      	mov	r0, sl
 801376a:	4659      	mov	r1, fp
 801376c:	f7ed f9d4 	bl	8000b18 <__aeabi_dcmpeq>
 8013770:	2800      	cmp	r0, #0
 8013772:	d1a6      	bne.n	80136c2 <_strtod_l+0x562>
 8013774:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013776:	9300      	str	r3, [sp, #0]
 8013778:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801377a:	9805      	ldr	r0, [sp, #20]
 801377c:	462b      	mov	r3, r5
 801377e:	463a      	mov	r2, r7
 8013780:	f7ff f8c6 	bl	8012910 <__s2b>
 8013784:	900a      	str	r0, [sp, #40]	@ 0x28
 8013786:	2800      	cmp	r0, #0
 8013788:	f43f af05 	beq.w	8013596 <_strtod_l+0x436>
 801378c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801378e:	2a00      	cmp	r2, #0
 8013790:	eba9 0308 	sub.w	r3, r9, r8
 8013794:	bfa8      	it	ge
 8013796:	2300      	movge	r3, #0
 8013798:	9312      	str	r3, [sp, #72]	@ 0x48
 801379a:	2400      	movs	r4, #0
 801379c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80137a0:	9316      	str	r3, [sp, #88]	@ 0x58
 80137a2:	46a0      	mov	r8, r4
 80137a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80137a6:	9805      	ldr	r0, [sp, #20]
 80137a8:	6859      	ldr	r1, [r3, #4]
 80137aa:	f7ff f809 	bl	80127c0 <_Balloc>
 80137ae:	4681      	mov	r9, r0
 80137b0:	2800      	cmp	r0, #0
 80137b2:	f43f aef4 	beq.w	801359e <_strtod_l+0x43e>
 80137b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80137b8:	691a      	ldr	r2, [r3, #16]
 80137ba:	3202      	adds	r2, #2
 80137bc:	f103 010c 	add.w	r1, r3, #12
 80137c0:	0092      	lsls	r2, r2, #2
 80137c2:	300c      	adds	r0, #12
 80137c4:	f7fe f899 	bl	80118fa <memcpy>
 80137c8:	ec4b ab10 	vmov	d0, sl, fp
 80137cc:	9805      	ldr	r0, [sp, #20]
 80137ce:	aa1c      	add	r2, sp, #112	@ 0x70
 80137d0:	a91b      	add	r1, sp, #108	@ 0x6c
 80137d2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80137d6:	f7ff fbd7 	bl	8012f88 <__d2b>
 80137da:	901a      	str	r0, [sp, #104]	@ 0x68
 80137dc:	2800      	cmp	r0, #0
 80137de:	f43f aede 	beq.w	801359e <_strtod_l+0x43e>
 80137e2:	9805      	ldr	r0, [sp, #20]
 80137e4:	2101      	movs	r1, #1
 80137e6:	f7ff f929 	bl	8012a3c <__i2b>
 80137ea:	4680      	mov	r8, r0
 80137ec:	b948      	cbnz	r0, 8013802 <_strtod_l+0x6a2>
 80137ee:	f04f 0800 	mov.w	r8, #0
 80137f2:	e6d4      	b.n	801359e <_strtod_l+0x43e>
 80137f4:	f04f 32ff 	mov.w	r2, #4294967295
 80137f8:	fa02 f303 	lsl.w	r3, r2, r3
 80137fc:	ea03 0a0a 	and.w	sl, r3, sl
 8013800:	e7b0      	b.n	8013764 <_strtod_l+0x604>
 8013802:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013804:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013806:	2d00      	cmp	r5, #0
 8013808:	bfab      	itete	ge
 801380a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801380c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801380e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8013810:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8013812:	bfac      	ite	ge
 8013814:	18ef      	addge	r7, r5, r3
 8013816:	1b5e      	sublt	r6, r3, r5
 8013818:	9b08      	ldr	r3, [sp, #32]
 801381a:	1aed      	subs	r5, r5, r3
 801381c:	4415      	add	r5, r2
 801381e:	4b66      	ldr	r3, [pc, #408]	@ (80139b8 <_strtod_l+0x858>)
 8013820:	3d01      	subs	r5, #1
 8013822:	429d      	cmp	r5, r3
 8013824:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013828:	da50      	bge.n	80138cc <_strtod_l+0x76c>
 801382a:	1b5b      	subs	r3, r3, r5
 801382c:	2b1f      	cmp	r3, #31
 801382e:	eba2 0203 	sub.w	r2, r2, r3
 8013832:	f04f 0101 	mov.w	r1, #1
 8013836:	dc3d      	bgt.n	80138b4 <_strtod_l+0x754>
 8013838:	fa01 f303 	lsl.w	r3, r1, r3
 801383c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801383e:	2300      	movs	r3, #0
 8013840:	9310      	str	r3, [sp, #64]	@ 0x40
 8013842:	18bd      	adds	r5, r7, r2
 8013844:	9b08      	ldr	r3, [sp, #32]
 8013846:	42af      	cmp	r7, r5
 8013848:	4416      	add	r6, r2
 801384a:	441e      	add	r6, r3
 801384c:	463b      	mov	r3, r7
 801384e:	bfa8      	it	ge
 8013850:	462b      	movge	r3, r5
 8013852:	42b3      	cmp	r3, r6
 8013854:	bfa8      	it	ge
 8013856:	4633      	movge	r3, r6
 8013858:	2b00      	cmp	r3, #0
 801385a:	bfc2      	ittt	gt
 801385c:	1aed      	subgt	r5, r5, r3
 801385e:	1af6      	subgt	r6, r6, r3
 8013860:	1aff      	subgt	r7, r7, r3
 8013862:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013864:	2b00      	cmp	r3, #0
 8013866:	dd16      	ble.n	8013896 <_strtod_l+0x736>
 8013868:	4641      	mov	r1, r8
 801386a:	9805      	ldr	r0, [sp, #20]
 801386c:	461a      	mov	r2, r3
 801386e:	f7ff f9a5 	bl	8012bbc <__pow5mult>
 8013872:	4680      	mov	r8, r0
 8013874:	2800      	cmp	r0, #0
 8013876:	d0ba      	beq.n	80137ee <_strtod_l+0x68e>
 8013878:	4601      	mov	r1, r0
 801387a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801387c:	9805      	ldr	r0, [sp, #20]
 801387e:	f7ff f8f3 	bl	8012a68 <__multiply>
 8013882:	900e      	str	r0, [sp, #56]	@ 0x38
 8013884:	2800      	cmp	r0, #0
 8013886:	f43f ae8a 	beq.w	801359e <_strtod_l+0x43e>
 801388a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801388c:	9805      	ldr	r0, [sp, #20]
 801388e:	f7fe ffd7 	bl	8012840 <_Bfree>
 8013892:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013894:	931a      	str	r3, [sp, #104]	@ 0x68
 8013896:	2d00      	cmp	r5, #0
 8013898:	dc1d      	bgt.n	80138d6 <_strtod_l+0x776>
 801389a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801389c:	2b00      	cmp	r3, #0
 801389e:	dd23      	ble.n	80138e8 <_strtod_l+0x788>
 80138a0:	4649      	mov	r1, r9
 80138a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80138a4:	9805      	ldr	r0, [sp, #20]
 80138a6:	f7ff f989 	bl	8012bbc <__pow5mult>
 80138aa:	4681      	mov	r9, r0
 80138ac:	b9e0      	cbnz	r0, 80138e8 <_strtod_l+0x788>
 80138ae:	f04f 0900 	mov.w	r9, #0
 80138b2:	e674      	b.n	801359e <_strtod_l+0x43e>
 80138b4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80138b8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80138bc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80138c0:	35e2      	adds	r5, #226	@ 0xe2
 80138c2:	fa01 f305 	lsl.w	r3, r1, r5
 80138c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80138c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80138ca:	e7ba      	b.n	8013842 <_strtod_l+0x6e2>
 80138cc:	2300      	movs	r3, #0
 80138ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80138d0:	2301      	movs	r3, #1
 80138d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80138d4:	e7b5      	b.n	8013842 <_strtod_l+0x6e2>
 80138d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80138d8:	9805      	ldr	r0, [sp, #20]
 80138da:	462a      	mov	r2, r5
 80138dc:	f7ff f9c8 	bl	8012c70 <__lshift>
 80138e0:	901a      	str	r0, [sp, #104]	@ 0x68
 80138e2:	2800      	cmp	r0, #0
 80138e4:	d1d9      	bne.n	801389a <_strtod_l+0x73a>
 80138e6:	e65a      	b.n	801359e <_strtod_l+0x43e>
 80138e8:	2e00      	cmp	r6, #0
 80138ea:	dd07      	ble.n	80138fc <_strtod_l+0x79c>
 80138ec:	4649      	mov	r1, r9
 80138ee:	9805      	ldr	r0, [sp, #20]
 80138f0:	4632      	mov	r2, r6
 80138f2:	f7ff f9bd 	bl	8012c70 <__lshift>
 80138f6:	4681      	mov	r9, r0
 80138f8:	2800      	cmp	r0, #0
 80138fa:	d0d8      	beq.n	80138ae <_strtod_l+0x74e>
 80138fc:	2f00      	cmp	r7, #0
 80138fe:	dd08      	ble.n	8013912 <_strtod_l+0x7b2>
 8013900:	4641      	mov	r1, r8
 8013902:	9805      	ldr	r0, [sp, #20]
 8013904:	463a      	mov	r2, r7
 8013906:	f7ff f9b3 	bl	8012c70 <__lshift>
 801390a:	4680      	mov	r8, r0
 801390c:	2800      	cmp	r0, #0
 801390e:	f43f ae46 	beq.w	801359e <_strtod_l+0x43e>
 8013912:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013914:	9805      	ldr	r0, [sp, #20]
 8013916:	464a      	mov	r2, r9
 8013918:	f7ff fa32 	bl	8012d80 <__mdiff>
 801391c:	4604      	mov	r4, r0
 801391e:	2800      	cmp	r0, #0
 8013920:	f43f ae3d 	beq.w	801359e <_strtod_l+0x43e>
 8013924:	68c3      	ldr	r3, [r0, #12]
 8013926:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013928:	2300      	movs	r3, #0
 801392a:	60c3      	str	r3, [r0, #12]
 801392c:	4641      	mov	r1, r8
 801392e:	f7ff fa0b 	bl	8012d48 <__mcmp>
 8013932:	2800      	cmp	r0, #0
 8013934:	da46      	bge.n	80139c4 <_strtod_l+0x864>
 8013936:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013938:	ea53 030a 	orrs.w	r3, r3, sl
 801393c:	d16c      	bne.n	8013a18 <_strtod_l+0x8b8>
 801393e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013942:	2b00      	cmp	r3, #0
 8013944:	d168      	bne.n	8013a18 <_strtod_l+0x8b8>
 8013946:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801394a:	0d1b      	lsrs	r3, r3, #20
 801394c:	051b      	lsls	r3, r3, #20
 801394e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013952:	d961      	bls.n	8013a18 <_strtod_l+0x8b8>
 8013954:	6963      	ldr	r3, [r4, #20]
 8013956:	b913      	cbnz	r3, 801395e <_strtod_l+0x7fe>
 8013958:	6923      	ldr	r3, [r4, #16]
 801395a:	2b01      	cmp	r3, #1
 801395c:	dd5c      	ble.n	8013a18 <_strtod_l+0x8b8>
 801395e:	4621      	mov	r1, r4
 8013960:	2201      	movs	r2, #1
 8013962:	9805      	ldr	r0, [sp, #20]
 8013964:	f7ff f984 	bl	8012c70 <__lshift>
 8013968:	4641      	mov	r1, r8
 801396a:	4604      	mov	r4, r0
 801396c:	f7ff f9ec 	bl	8012d48 <__mcmp>
 8013970:	2800      	cmp	r0, #0
 8013972:	dd51      	ble.n	8013a18 <_strtod_l+0x8b8>
 8013974:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013978:	9a08      	ldr	r2, [sp, #32]
 801397a:	0d1b      	lsrs	r3, r3, #20
 801397c:	051b      	lsls	r3, r3, #20
 801397e:	2a00      	cmp	r2, #0
 8013980:	d06b      	beq.n	8013a5a <_strtod_l+0x8fa>
 8013982:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013986:	d868      	bhi.n	8013a5a <_strtod_l+0x8fa>
 8013988:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801398c:	f67f ae9d 	bls.w	80136ca <_strtod_l+0x56a>
 8013990:	4b0a      	ldr	r3, [pc, #40]	@ (80139bc <_strtod_l+0x85c>)
 8013992:	4650      	mov	r0, sl
 8013994:	4659      	mov	r1, fp
 8013996:	2200      	movs	r2, #0
 8013998:	f7ec fe56 	bl	8000648 <__aeabi_dmul>
 801399c:	4b08      	ldr	r3, [pc, #32]	@ (80139c0 <_strtod_l+0x860>)
 801399e:	400b      	ands	r3, r1
 80139a0:	4682      	mov	sl, r0
 80139a2:	468b      	mov	fp, r1
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	f47f ae05 	bne.w	80135b4 <_strtod_l+0x454>
 80139aa:	9a05      	ldr	r2, [sp, #20]
 80139ac:	2322      	movs	r3, #34	@ 0x22
 80139ae:	6013      	str	r3, [r2, #0]
 80139b0:	e600      	b.n	80135b4 <_strtod_l+0x454>
 80139b2:	bf00      	nop
 80139b4:	080171d8 	.word	0x080171d8
 80139b8:	fffffc02 	.word	0xfffffc02
 80139bc:	39500000 	.word	0x39500000
 80139c0:	7ff00000 	.word	0x7ff00000
 80139c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80139c8:	d165      	bne.n	8013a96 <_strtod_l+0x936>
 80139ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80139cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80139d0:	b35a      	cbz	r2, 8013a2a <_strtod_l+0x8ca>
 80139d2:	4a9f      	ldr	r2, [pc, #636]	@ (8013c50 <_strtod_l+0xaf0>)
 80139d4:	4293      	cmp	r3, r2
 80139d6:	d12b      	bne.n	8013a30 <_strtod_l+0x8d0>
 80139d8:	9b08      	ldr	r3, [sp, #32]
 80139da:	4651      	mov	r1, sl
 80139dc:	b303      	cbz	r3, 8013a20 <_strtod_l+0x8c0>
 80139de:	4b9d      	ldr	r3, [pc, #628]	@ (8013c54 <_strtod_l+0xaf4>)
 80139e0:	465a      	mov	r2, fp
 80139e2:	4013      	ands	r3, r2
 80139e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80139e8:	f04f 32ff 	mov.w	r2, #4294967295
 80139ec:	d81b      	bhi.n	8013a26 <_strtod_l+0x8c6>
 80139ee:	0d1b      	lsrs	r3, r3, #20
 80139f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80139f4:	fa02 f303 	lsl.w	r3, r2, r3
 80139f8:	4299      	cmp	r1, r3
 80139fa:	d119      	bne.n	8013a30 <_strtod_l+0x8d0>
 80139fc:	4b96      	ldr	r3, [pc, #600]	@ (8013c58 <_strtod_l+0xaf8>)
 80139fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013a00:	429a      	cmp	r2, r3
 8013a02:	d102      	bne.n	8013a0a <_strtod_l+0x8aa>
 8013a04:	3101      	adds	r1, #1
 8013a06:	f43f adca 	beq.w	801359e <_strtod_l+0x43e>
 8013a0a:	4b92      	ldr	r3, [pc, #584]	@ (8013c54 <_strtod_l+0xaf4>)
 8013a0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013a0e:	401a      	ands	r2, r3
 8013a10:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8013a14:	f04f 0a00 	mov.w	sl, #0
 8013a18:	9b08      	ldr	r3, [sp, #32]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d1b8      	bne.n	8013990 <_strtod_l+0x830>
 8013a1e:	e5c9      	b.n	80135b4 <_strtod_l+0x454>
 8013a20:	f04f 33ff 	mov.w	r3, #4294967295
 8013a24:	e7e8      	b.n	80139f8 <_strtod_l+0x898>
 8013a26:	4613      	mov	r3, r2
 8013a28:	e7e6      	b.n	80139f8 <_strtod_l+0x898>
 8013a2a:	ea53 030a 	orrs.w	r3, r3, sl
 8013a2e:	d0a1      	beq.n	8013974 <_strtod_l+0x814>
 8013a30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013a32:	b1db      	cbz	r3, 8013a6c <_strtod_l+0x90c>
 8013a34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013a36:	4213      	tst	r3, r2
 8013a38:	d0ee      	beq.n	8013a18 <_strtod_l+0x8b8>
 8013a3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a3c:	9a08      	ldr	r2, [sp, #32]
 8013a3e:	4650      	mov	r0, sl
 8013a40:	4659      	mov	r1, fp
 8013a42:	b1bb      	cbz	r3, 8013a74 <_strtod_l+0x914>
 8013a44:	f7ff fb6e 	bl	8013124 <sulp>
 8013a48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013a4c:	ec53 2b10 	vmov	r2, r3, d0
 8013a50:	f7ec fc44 	bl	80002dc <__adddf3>
 8013a54:	4682      	mov	sl, r0
 8013a56:	468b      	mov	fp, r1
 8013a58:	e7de      	b.n	8013a18 <_strtod_l+0x8b8>
 8013a5a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013a5e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013a62:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013a66:	f04f 3aff 	mov.w	sl, #4294967295
 8013a6a:	e7d5      	b.n	8013a18 <_strtod_l+0x8b8>
 8013a6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013a6e:	ea13 0f0a 	tst.w	r3, sl
 8013a72:	e7e1      	b.n	8013a38 <_strtod_l+0x8d8>
 8013a74:	f7ff fb56 	bl	8013124 <sulp>
 8013a78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013a7c:	ec53 2b10 	vmov	r2, r3, d0
 8013a80:	f7ec fc2a 	bl	80002d8 <__aeabi_dsub>
 8013a84:	2200      	movs	r2, #0
 8013a86:	2300      	movs	r3, #0
 8013a88:	4682      	mov	sl, r0
 8013a8a:	468b      	mov	fp, r1
 8013a8c:	f7ed f844 	bl	8000b18 <__aeabi_dcmpeq>
 8013a90:	2800      	cmp	r0, #0
 8013a92:	d0c1      	beq.n	8013a18 <_strtod_l+0x8b8>
 8013a94:	e619      	b.n	80136ca <_strtod_l+0x56a>
 8013a96:	4641      	mov	r1, r8
 8013a98:	4620      	mov	r0, r4
 8013a9a:	f7ff facd 	bl	8013038 <__ratio>
 8013a9e:	ec57 6b10 	vmov	r6, r7, d0
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013aa8:	4630      	mov	r0, r6
 8013aaa:	4639      	mov	r1, r7
 8013aac:	f7ed f848 	bl	8000b40 <__aeabi_dcmple>
 8013ab0:	2800      	cmp	r0, #0
 8013ab2:	d06f      	beq.n	8013b94 <_strtod_l+0xa34>
 8013ab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d17a      	bne.n	8013bb0 <_strtod_l+0xa50>
 8013aba:	f1ba 0f00 	cmp.w	sl, #0
 8013abe:	d158      	bne.n	8013b72 <_strtod_l+0xa12>
 8013ac0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ac2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d15a      	bne.n	8013b80 <_strtod_l+0xa20>
 8013aca:	4b64      	ldr	r3, [pc, #400]	@ (8013c5c <_strtod_l+0xafc>)
 8013acc:	2200      	movs	r2, #0
 8013ace:	4630      	mov	r0, r6
 8013ad0:	4639      	mov	r1, r7
 8013ad2:	f7ed f82b 	bl	8000b2c <__aeabi_dcmplt>
 8013ad6:	2800      	cmp	r0, #0
 8013ad8:	d159      	bne.n	8013b8e <_strtod_l+0xa2e>
 8013ada:	4630      	mov	r0, r6
 8013adc:	4639      	mov	r1, r7
 8013ade:	4b60      	ldr	r3, [pc, #384]	@ (8013c60 <_strtod_l+0xb00>)
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	f7ec fdb1 	bl	8000648 <__aeabi_dmul>
 8013ae6:	4606      	mov	r6, r0
 8013ae8:	460f      	mov	r7, r1
 8013aea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8013aee:	9606      	str	r6, [sp, #24]
 8013af0:	9307      	str	r3, [sp, #28]
 8013af2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013af6:	4d57      	ldr	r5, [pc, #348]	@ (8013c54 <_strtod_l+0xaf4>)
 8013af8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013afc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013afe:	401d      	ands	r5, r3
 8013b00:	4b58      	ldr	r3, [pc, #352]	@ (8013c64 <_strtod_l+0xb04>)
 8013b02:	429d      	cmp	r5, r3
 8013b04:	f040 80b2 	bne.w	8013c6c <_strtod_l+0xb0c>
 8013b08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b0a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8013b0e:	ec4b ab10 	vmov	d0, sl, fp
 8013b12:	f7ff f9c9 	bl	8012ea8 <__ulp>
 8013b16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013b1a:	ec51 0b10 	vmov	r0, r1, d0
 8013b1e:	f7ec fd93 	bl	8000648 <__aeabi_dmul>
 8013b22:	4652      	mov	r2, sl
 8013b24:	465b      	mov	r3, fp
 8013b26:	f7ec fbd9 	bl	80002dc <__adddf3>
 8013b2a:	460b      	mov	r3, r1
 8013b2c:	4949      	ldr	r1, [pc, #292]	@ (8013c54 <_strtod_l+0xaf4>)
 8013b2e:	4a4e      	ldr	r2, [pc, #312]	@ (8013c68 <_strtod_l+0xb08>)
 8013b30:	4019      	ands	r1, r3
 8013b32:	4291      	cmp	r1, r2
 8013b34:	4682      	mov	sl, r0
 8013b36:	d942      	bls.n	8013bbe <_strtod_l+0xa5e>
 8013b38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013b3a:	4b47      	ldr	r3, [pc, #284]	@ (8013c58 <_strtod_l+0xaf8>)
 8013b3c:	429a      	cmp	r2, r3
 8013b3e:	d103      	bne.n	8013b48 <_strtod_l+0x9e8>
 8013b40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013b42:	3301      	adds	r3, #1
 8013b44:	f43f ad2b 	beq.w	801359e <_strtod_l+0x43e>
 8013b48:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8013c58 <_strtod_l+0xaf8>
 8013b4c:	f04f 3aff 	mov.w	sl, #4294967295
 8013b50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013b52:	9805      	ldr	r0, [sp, #20]
 8013b54:	f7fe fe74 	bl	8012840 <_Bfree>
 8013b58:	9805      	ldr	r0, [sp, #20]
 8013b5a:	4649      	mov	r1, r9
 8013b5c:	f7fe fe70 	bl	8012840 <_Bfree>
 8013b60:	9805      	ldr	r0, [sp, #20]
 8013b62:	4641      	mov	r1, r8
 8013b64:	f7fe fe6c 	bl	8012840 <_Bfree>
 8013b68:	9805      	ldr	r0, [sp, #20]
 8013b6a:	4621      	mov	r1, r4
 8013b6c:	f7fe fe68 	bl	8012840 <_Bfree>
 8013b70:	e618      	b.n	80137a4 <_strtod_l+0x644>
 8013b72:	f1ba 0f01 	cmp.w	sl, #1
 8013b76:	d103      	bne.n	8013b80 <_strtod_l+0xa20>
 8013b78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	f43f ada5 	beq.w	80136ca <_strtod_l+0x56a>
 8013b80:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8013c30 <_strtod_l+0xad0>
 8013b84:	4f35      	ldr	r7, [pc, #212]	@ (8013c5c <_strtod_l+0xafc>)
 8013b86:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013b8a:	2600      	movs	r6, #0
 8013b8c:	e7b1      	b.n	8013af2 <_strtod_l+0x992>
 8013b8e:	4f34      	ldr	r7, [pc, #208]	@ (8013c60 <_strtod_l+0xb00>)
 8013b90:	2600      	movs	r6, #0
 8013b92:	e7aa      	b.n	8013aea <_strtod_l+0x98a>
 8013b94:	4b32      	ldr	r3, [pc, #200]	@ (8013c60 <_strtod_l+0xb00>)
 8013b96:	4630      	mov	r0, r6
 8013b98:	4639      	mov	r1, r7
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	f7ec fd54 	bl	8000648 <__aeabi_dmul>
 8013ba0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013ba2:	4606      	mov	r6, r0
 8013ba4:	460f      	mov	r7, r1
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d09f      	beq.n	8013aea <_strtod_l+0x98a>
 8013baa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8013bae:	e7a0      	b.n	8013af2 <_strtod_l+0x992>
 8013bb0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8013c38 <_strtod_l+0xad8>
 8013bb4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013bb8:	ec57 6b17 	vmov	r6, r7, d7
 8013bbc:	e799      	b.n	8013af2 <_strtod_l+0x992>
 8013bbe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8013bc2:	9b08      	ldr	r3, [sp, #32]
 8013bc4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d1c1      	bne.n	8013b50 <_strtod_l+0x9f0>
 8013bcc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013bd0:	0d1b      	lsrs	r3, r3, #20
 8013bd2:	051b      	lsls	r3, r3, #20
 8013bd4:	429d      	cmp	r5, r3
 8013bd6:	d1bb      	bne.n	8013b50 <_strtod_l+0x9f0>
 8013bd8:	4630      	mov	r0, r6
 8013bda:	4639      	mov	r1, r7
 8013bdc:	f7ed f894 	bl	8000d08 <__aeabi_d2lz>
 8013be0:	f7ec fd04 	bl	80005ec <__aeabi_l2d>
 8013be4:	4602      	mov	r2, r0
 8013be6:	460b      	mov	r3, r1
 8013be8:	4630      	mov	r0, r6
 8013bea:	4639      	mov	r1, r7
 8013bec:	f7ec fb74 	bl	80002d8 <__aeabi_dsub>
 8013bf0:	460b      	mov	r3, r1
 8013bf2:	4602      	mov	r2, r0
 8013bf4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8013bf8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8013bfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013bfe:	ea46 060a 	orr.w	r6, r6, sl
 8013c02:	431e      	orrs	r6, r3
 8013c04:	d06f      	beq.n	8013ce6 <_strtod_l+0xb86>
 8013c06:	a30e      	add	r3, pc, #56	@ (adr r3, 8013c40 <_strtod_l+0xae0>)
 8013c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c0c:	f7ec ff8e 	bl	8000b2c <__aeabi_dcmplt>
 8013c10:	2800      	cmp	r0, #0
 8013c12:	f47f accf 	bne.w	80135b4 <_strtod_l+0x454>
 8013c16:	a30c      	add	r3, pc, #48	@ (adr r3, 8013c48 <_strtod_l+0xae8>)
 8013c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013c20:	f7ec ffa2 	bl	8000b68 <__aeabi_dcmpgt>
 8013c24:	2800      	cmp	r0, #0
 8013c26:	d093      	beq.n	8013b50 <_strtod_l+0x9f0>
 8013c28:	e4c4      	b.n	80135b4 <_strtod_l+0x454>
 8013c2a:	bf00      	nop
 8013c2c:	f3af 8000 	nop.w
 8013c30:	00000000 	.word	0x00000000
 8013c34:	bff00000 	.word	0xbff00000
 8013c38:	00000000 	.word	0x00000000
 8013c3c:	3ff00000 	.word	0x3ff00000
 8013c40:	94a03595 	.word	0x94a03595
 8013c44:	3fdfffff 	.word	0x3fdfffff
 8013c48:	35afe535 	.word	0x35afe535
 8013c4c:	3fe00000 	.word	0x3fe00000
 8013c50:	000fffff 	.word	0x000fffff
 8013c54:	7ff00000 	.word	0x7ff00000
 8013c58:	7fefffff 	.word	0x7fefffff
 8013c5c:	3ff00000 	.word	0x3ff00000
 8013c60:	3fe00000 	.word	0x3fe00000
 8013c64:	7fe00000 	.word	0x7fe00000
 8013c68:	7c9fffff 	.word	0x7c9fffff
 8013c6c:	9b08      	ldr	r3, [sp, #32]
 8013c6e:	b323      	cbz	r3, 8013cba <_strtod_l+0xb5a>
 8013c70:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8013c74:	d821      	bhi.n	8013cba <_strtod_l+0xb5a>
 8013c76:	a328      	add	r3, pc, #160	@ (adr r3, 8013d18 <_strtod_l+0xbb8>)
 8013c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c7c:	4630      	mov	r0, r6
 8013c7e:	4639      	mov	r1, r7
 8013c80:	f7ec ff5e 	bl	8000b40 <__aeabi_dcmple>
 8013c84:	b1a0      	cbz	r0, 8013cb0 <_strtod_l+0xb50>
 8013c86:	4639      	mov	r1, r7
 8013c88:	4630      	mov	r0, r6
 8013c8a:	f7ec ffb5 	bl	8000bf8 <__aeabi_d2uiz>
 8013c8e:	2801      	cmp	r0, #1
 8013c90:	bf38      	it	cc
 8013c92:	2001      	movcc	r0, #1
 8013c94:	f7ec fc5e 	bl	8000554 <__aeabi_ui2d>
 8013c98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c9a:	4606      	mov	r6, r0
 8013c9c:	460f      	mov	r7, r1
 8013c9e:	b9fb      	cbnz	r3, 8013ce0 <_strtod_l+0xb80>
 8013ca0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013ca4:	9014      	str	r0, [sp, #80]	@ 0x50
 8013ca6:	9315      	str	r3, [sp, #84]	@ 0x54
 8013ca8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8013cac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013cb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013cb2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8013cb6:	1b5b      	subs	r3, r3, r5
 8013cb8:	9311      	str	r3, [sp, #68]	@ 0x44
 8013cba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013cbe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8013cc2:	f7ff f8f1 	bl	8012ea8 <__ulp>
 8013cc6:	4650      	mov	r0, sl
 8013cc8:	ec53 2b10 	vmov	r2, r3, d0
 8013ccc:	4659      	mov	r1, fp
 8013cce:	f7ec fcbb 	bl	8000648 <__aeabi_dmul>
 8013cd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013cd6:	f7ec fb01 	bl	80002dc <__adddf3>
 8013cda:	4682      	mov	sl, r0
 8013cdc:	468b      	mov	fp, r1
 8013cde:	e770      	b.n	8013bc2 <_strtod_l+0xa62>
 8013ce0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8013ce4:	e7e0      	b.n	8013ca8 <_strtod_l+0xb48>
 8013ce6:	a30e      	add	r3, pc, #56	@ (adr r3, 8013d20 <_strtod_l+0xbc0>)
 8013ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cec:	f7ec ff1e 	bl	8000b2c <__aeabi_dcmplt>
 8013cf0:	e798      	b.n	8013c24 <_strtod_l+0xac4>
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013cf6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013cf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013cfa:	6013      	str	r3, [r2, #0]
 8013cfc:	f7ff ba6d 	b.w	80131da <_strtod_l+0x7a>
 8013d00:	2a65      	cmp	r2, #101	@ 0x65
 8013d02:	f43f ab66 	beq.w	80133d2 <_strtod_l+0x272>
 8013d06:	2a45      	cmp	r2, #69	@ 0x45
 8013d08:	f43f ab63 	beq.w	80133d2 <_strtod_l+0x272>
 8013d0c:	2301      	movs	r3, #1
 8013d0e:	f7ff bb9e 	b.w	801344e <_strtod_l+0x2ee>
 8013d12:	bf00      	nop
 8013d14:	f3af 8000 	nop.w
 8013d18:	ffc00000 	.word	0xffc00000
 8013d1c:	41dfffff 	.word	0x41dfffff
 8013d20:	94a03595 	.word	0x94a03595
 8013d24:	3fcfffff 	.word	0x3fcfffff

08013d28 <_strtod_r>:
 8013d28:	4b01      	ldr	r3, [pc, #4]	@ (8013d30 <_strtod_r+0x8>)
 8013d2a:	f7ff ba19 	b.w	8013160 <_strtod_l>
 8013d2e:	bf00      	nop
 8013d30:	2000021c 	.word	0x2000021c

08013d34 <_strtol_l.constprop.0>:
 8013d34:	2b24      	cmp	r3, #36	@ 0x24
 8013d36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d3a:	4686      	mov	lr, r0
 8013d3c:	4690      	mov	r8, r2
 8013d3e:	d801      	bhi.n	8013d44 <_strtol_l.constprop.0+0x10>
 8013d40:	2b01      	cmp	r3, #1
 8013d42:	d106      	bne.n	8013d52 <_strtol_l.constprop.0+0x1e>
 8013d44:	f7fd fdac 	bl	80118a0 <__errno>
 8013d48:	2316      	movs	r3, #22
 8013d4a:	6003      	str	r3, [r0, #0]
 8013d4c:	2000      	movs	r0, #0
 8013d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d52:	4834      	ldr	r0, [pc, #208]	@ (8013e24 <_strtol_l.constprop.0+0xf0>)
 8013d54:	460d      	mov	r5, r1
 8013d56:	462a      	mov	r2, r5
 8013d58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013d5c:	5d06      	ldrb	r6, [r0, r4]
 8013d5e:	f016 0608 	ands.w	r6, r6, #8
 8013d62:	d1f8      	bne.n	8013d56 <_strtol_l.constprop.0+0x22>
 8013d64:	2c2d      	cmp	r4, #45	@ 0x2d
 8013d66:	d12d      	bne.n	8013dc4 <_strtol_l.constprop.0+0x90>
 8013d68:	782c      	ldrb	r4, [r5, #0]
 8013d6a:	2601      	movs	r6, #1
 8013d6c:	1c95      	adds	r5, r2, #2
 8013d6e:	f033 0210 	bics.w	r2, r3, #16
 8013d72:	d109      	bne.n	8013d88 <_strtol_l.constprop.0+0x54>
 8013d74:	2c30      	cmp	r4, #48	@ 0x30
 8013d76:	d12a      	bne.n	8013dce <_strtol_l.constprop.0+0x9a>
 8013d78:	782a      	ldrb	r2, [r5, #0]
 8013d7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013d7e:	2a58      	cmp	r2, #88	@ 0x58
 8013d80:	d125      	bne.n	8013dce <_strtol_l.constprop.0+0x9a>
 8013d82:	786c      	ldrb	r4, [r5, #1]
 8013d84:	2310      	movs	r3, #16
 8013d86:	3502      	adds	r5, #2
 8013d88:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013d8c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013d90:	2200      	movs	r2, #0
 8013d92:	fbbc f9f3 	udiv	r9, ip, r3
 8013d96:	4610      	mov	r0, r2
 8013d98:	fb03 ca19 	mls	sl, r3, r9, ip
 8013d9c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013da0:	2f09      	cmp	r7, #9
 8013da2:	d81b      	bhi.n	8013ddc <_strtol_l.constprop.0+0xa8>
 8013da4:	463c      	mov	r4, r7
 8013da6:	42a3      	cmp	r3, r4
 8013da8:	dd27      	ble.n	8013dfa <_strtol_l.constprop.0+0xc6>
 8013daa:	1c57      	adds	r7, r2, #1
 8013dac:	d007      	beq.n	8013dbe <_strtol_l.constprop.0+0x8a>
 8013dae:	4581      	cmp	r9, r0
 8013db0:	d320      	bcc.n	8013df4 <_strtol_l.constprop.0+0xc0>
 8013db2:	d101      	bne.n	8013db8 <_strtol_l.constprop.0+0x84>
 8013db4:	45a2      	cmp	sl, r4
 8013db6:	db1d      	blt.n	8013df4 <_strtol_l.constprop.0+0xc0>
 8013db8:	fb00 4003 	mla	r0, r0, r3, r4
 8013dbc:	2201      	movs	r2, #1
 8013dbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013dc2:	e7eb      	b.n	8013d9c <_strtol_l.constprop.0+0x68>
 8013dc4:	2c2b      	cmp	r4, #43	@ 0x2b
 8013dc6:	bf04      	itt	eq
 8013dc8:	782c      	ldrbeq	r4, [r5, #0]
 8013dca:	1c95      	addeq	r5, r2, #2
 8013dcc:	e7cf      	b.n	8013d6e <_strtol_l.constprop.0+0x3a>
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d1da      	bne.n	8013d88 <_strtol_l.constprop.0+0x54>
 8013dd2:	2c30      	cmp	r4, #48	@ 0x30
 8013dd4:	bf0c      	ite	eq
 8013dd6:	2308      	moveq	r3, #8
 8013dd8:	230a      	movne	r3, #10
 8013dda:	e7d5      	b.n	8013d88 <_strtol_l.constprop.0+0x54>
 8013ddc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013de0:	2f19      	cmp	r7, #25
 8013de2:	d801      	bhi.n	8013de8 <_strtol_l.constprop.0+0xb4>
 8013de4:	3c37      	subs	r4, #55	@ 0x37
 8013de6:	e7de      	b.n	8013da6 <_strtol_l.constprop.0+0x72>
 8013de8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013dec:	2f19      	cmp	r7, #25
 8013dee:	d804      	bhi.n	8013dfa <_strtol_l.constprop.0+0xc6>
 8013df0:	3c57      	subs	r4, #87	@ 0x57
 8013df2:	e7d8      	b.n	8013da6 <_strtol_l.constprop.0+0x72>
 8013df4:	f04f 32ff 	mov.w	r2, #4294967295
 8013df8:	e7e1      	b.n	8013dbe <_strtol_l.constprop.0+0x8a>
 8013dfa:	1c53      	adds	r3, r2, #1
 8013dfc:	d108      	bne.n	8013e10 <_strtol_l.constprop.0+0xdc>
 8013dfe:	2322      	movs	r3, #34	@ 0x22
 8013e00:	f8ce 3000 	str.w	r3, [lr]
 8013e04:	4660      	mov	r0, ip
 8013e06:	f1b8 0f00 	cmp.w	r8, #0
 8013e0a:	d0a0      	beq.n	8013d4e <_strtol_l.constprop.0+0x1a>
 8013e0c:	1e69      	subs	r1, r5, #1
 8013e0e:	e006      	b.n	8013e1e <_strtol_l.constprop.0+0xea>
 8013e10:	b106      	cbz	r6, 8013e14 <_strtol_l.constprop.0+0xe0>
 8013e12:	4240      	negs	r0, r0
 8013e14:	f1b8 0f00 	cmp.w	r8, #0
 8013e18:	d099      	beq.n	8013d4e <_strtol_l.constprop.0+0x1a>
 8013e1a:	2a00      	cmp	r2, #0
 8013e1c:	d1f6      	bne.n	8013e0c <_strtol_l.constprop.0+0xd8>
 8013e1e:	f8c8 1000 	str.w	r1, [r8]
 8013e22:	e794      	b.n	8013d4e <_strtol_l.constprop.0+0x1a>
 8013e24:	08017201 	.word	0x08017201

08013e28 <_strtol_r>:
 8013e28:	f7ff bf84 	b.w	8013d34 <_strtol_l.constprop.0>

08013e2c <__ssputs_r>:
 8013e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e30:	688e      	ldr	r6, [r1, #8]
 8013e32:	461f      	mov	r7, r3
 8013e34:	42be      	cmp	r6, r7
 8013e36:	680b      	ldr	r3, [r1, #0]
 8013e38:	4682      	mov	sl, r0
 8013e3a:	460c      	mov	r4, r1
 8013e3c:	4690      	mov	r8, r2
 8013e3e:	d82d      	bhi.n	8013e9c <__ssputs_r+0x70>
 8013e40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013e44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013e48:	d026      	beq.n	8013e98 <__ssputs_r+0x6c>
 8013e4a:	6965      	ldr	r5, [r4, #20]
 8013e4c:	6909      	ldr	r1, [r1, #16]
 8013e4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013e52:	eba3 0901 	sub.w	r9, r3, r1
 8013e56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013e5a:	1c7b      	adds	r3, r7, #1
 8013e5c:	444b      	add	r3, r9
 8013e5e:	106d      	asrs	r5, r5, #1
 8013e60:	429d      	cmp	r5, r3
 8013e62:	bf38      	it	cc
 8013e64:	461d      	movcc	r5, r3
 8013e66:	0553      	lsls	r3, r2, #21
 8013e68:	d527      	bpl.n	8013eba <__ssputs_r+0x8e>
 8013e6a:	4629      	mov	r1, r5
 8013e6c:	f7fe fc1c 	bl	80126a8 <_malloc_r>
 8013e70:	4606      	mov	r6, r0
 8013e72:	b360      	cbz	r0, 8013ece <__ssputs_r+0xa2>
 8013e74:	6921      	ldr	r1, [r4, #16]
 8013e76:	464a      	mov	r2, r9
 8013e78:	f7fd fd3f 	bl	80118fa <memcpy>
 8013e7c:	89a3      	ldrh	r3, [r4, #12]
 8013e7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013e86:	81a3      	strh	r3, [r4, #12]
 8013e88:	6126      	str	r6, [r4, #16]
 8013e8a:	6165      	str	r5, [r4, #20]
 8013e8c:	444e      	add	r6, r9
 8013e8e:	eba5 0509 	sub.w	r5, r5, r9
 8013e92:	6026      	str	r6, [r4, #0]
 8013e94:	60a5      	str	r5, [r4, #8]
 8013e96:	463e      	mov	r6, r7
 8013e98:	42be      	cmp	r6, r7
 8013e9a:	d900      	bls.n	8013e9e <__ssputs_r+0x72>
 8013e9c:	463e      	mov	r6, r7
 8013e9e:	6820      	ldr	r0, [r4, #0]
 8013ea0:	4632      	mov	r2, r6
 8013ea2:	4641      	mov	r1, r8
 8013ea4:	f000 fd53 	bl	801494e <memmove>
 8013ea8:	68a3      	ldr	r3, [r4, #8]
 8013eaa:	1b9b      	subs	r3, r3, r6
 8013eac:	60a3      	str	r3, [r4, #8]
 8013eae:	6823      	ldr	r3, [r4, #0]
 8013eb0:	4433      	add	r3, r6
 8013eb2:	6023      	str	r3, [r4, #0]
 8013eb4:	2000      	movs	r0, #0
 8013eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013eba:	462a      	mov	r2, r5
 8013ebc:	f001 f8f9 	bl	80150b2 <_realloc_r>
 8013ec0:	4606      	mov	r6, r0
 8013ec2:	2800      	cmp	r0, #0
 8013ec4:	d1e0      	bne.n	8013e88 <__ssputs_r+0x5c>
 8013ec6:	6921      	ldr	r1, [r4, #16]
 8013ec8:	4650      	mov	r0, sl
 8013eca:	f7fe fb79 	bl	80125c0 <_free_r>
 8013ece:	230c      	movs	r3, #12
 8013ed0:	f8ca 3000 	str.w	r3, [sl]
 8013ed4:	89a3      	ldrh	r3, [r4, #12]
 8013ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013eda:	81a3      	strh	r3, [r4, #12]
 8013edc:	f04f 30ff 	mov.w	r0, #4294967295
 8013ee0:	e7e9      	b.n	8013eb6 <__ssputs_r+0x8a>
	...

08013ee4 <_svfiprintf_r>:
 8013ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ee8:	4698      	mov	r8, r3
 8013eea:	898b      	ldrh	r3, [r1, #12]
 8013eec:	061b      	lsls	r3, r3, #24
 8013eee:	b09d      	sub	sp, #116	@ 0x74
 8013ef0:	4607      	mov	r7, r0
 8013ef2:	460d      	mov	r5, r1
 8013ef4:	4614      	mov	r4, r2
 8013ef6:	d510      	bpl.n	8013f1a <_svfiprintf_r+0x36>
 8013ef8:	690b      	ldr	r3, [r1, #16]
 8013efa:	b973      	cbnz	r3, 8013f1a <_svfiprintf_r+0x36>
 8013efc:	2140      	movs	r1, #64	@ 0x40
 8013efe:	f7fe fbd3 	bl	80126a8 <_malloc_r>
 8013f02:	6028      	str	r0, [r5, #0]
 8013f04:	6128      	str	r0, [r5, #16]
 8013f06:	b930      	cbnz	r0, 8013f16 <_svfiprintf_r+0x32>
 8013f08:	230c      	movs	r3, #12
 8013f0a:	603b      	str	r3, [r7, #0]
 8013f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8013f10:	b01d      	add	sp, #116	@ 0x74
 8013f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f16:	2340      	movs	r3, #64	@ 0x40
 8013f18:	616b      	str	r3, [r5, #20]
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f1e:	2320      	movs	r3, #32
 8013f20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013f24:	f8cd 800c 	str.w	r8, [sp, #12]
 8013f28:	2330      	movs	r3, #48	@ 0x30
 8013f2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80140c8 <_svfiprintf_r+0x1e4>
 8013f2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013f32:	f04f 0901 	mov.w	r9, #1
 8013f36:	4623      	mov	r3, r4
 8013f38:	469a      	mov	sl, r3
 8013f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f3e:	b10a      	cbz	r2, 8013f44 <_svfiprintf_r+0x60>
 8013f40:	2a25      	cmp	r2, #37	@ 0x25
 8013f42:	d1f9      	bne.n	8013f38 <_svfiprintf_r+0x54>
 8013f44:	ebba 0b04 	subs.w	fp, sl, r4
 8013f48:	d00b      	beq.n	8013f62 <_svfiprintf_r+0x7e>
 8013f4a:	465b      	mov	r3, fp
 8013f4c:	4622      	mov	r2, r4
 8013f4e:	4629      	mov	r1, r5
 8013f50:	4638      	mov	r0, r7
 8013f52:	f7ff ff6b 	bl	8013e2c <__ssputs_r>
 8013f56:	3001      	adds	r0, #1
 8013f58:	f000 80a7 	beq.w	80140aa <_svfiprintf_r+0x1c6>
 8013f5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013f5e:	445a      	add	r2, fp
 8013f60:	9209      	str	r2, [sp, #36]	@ 0x24
 8013f62:	f89a 3000 	ldrb.w	r3, [sl]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	f000 809f 	beq.w	80140aa <_svfiprintf_r+0x1c6>
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8013f72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f76:	f10a 0a01 	add.w	sl, sl, #1
 8013f7a:	9304      	str	r3, [sp, #16]
 8013f7c:	9307      	str	r3, [sp, #28]
 8013f7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013f82:	931a      	str	r3, [sp, #104]	@ 0x68
 8013f84:	4654      	mov	r4, sl
 8013f86:	2205      	movs	r2, #5
 8013f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f8c:	484e      	ldr	r0, [pc, #312]	@ (80140c8 <_svfiprintf_r+0x1e4>)
 8013f8e:	f7ec f947 	bl	8000220 <memchr>
 8013f92:	9a04      	ldr	r2, [sp, #16]
 8013f94:	b9d8      	cbnz	r0, 8013fce <_svfiprintf_r+0xea>
 8013f96:	06d0      	lsls	r0, r2, #27
 8013f98:	bf44      	itt	mi
 8013f9a:	2320      	movmi	r3, #32
 8013f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013fa0:	0711      	lsls	r1, r2, #28
 8013fa2:	bf44      	itt	mi
 8013fa4:	232b      	movmi	r3, #43	@ 0x2b
 8013fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013faa:	f89a 3000 	ldrb.w	r3, [sl]
 8013fae:	2b2a      	cmp	r3, #42	@ 0x2a
 8013fb0:	d015      	beq.n	8013fde <_svfiprintf_r+0xfa>
 8013fb2:	9a07      	ldr	r2, [sp, #28]
 8013fb4:	4654      	mov	r4, sl
 8013fb6:	2000      	movs	r0, #0
 8013fb8:	f04f 0c0a 	mov.w	ip, #10
 8013fbc:	4621      	mov	r1, r4
 8013fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013fc2:	3b30      	subs	r3, #48	@ 0x30
 8013fc4:	2b09      	cmp	r3, #9
 8013fc6:	d94b      	bls.n	8014060 <_svfiprintf_r+0x17c>
 8013fc8:	b1b0      	cbz	r0, 8013ff8 <_svfiprintf_r+0x114>
 8013fca:	9207      	str	r2, [sp, #28]
 8013fcc:	e014      	b.n	8013ff8 <_svfiprintf_r+0x114>
 8013fce:	eba0 0308 	sub.w	r3, r0, r8
 8013fd2:	fa09 f303 	lsl.w	r3, r9, r3
 8013fd6:	4313      	orrs	r3, r2
 8013fd8:	9304      	str	r3, [sp, #16]
 8013fda:	46a2      	mov	sl, r4
 8013fdc:	e7d2      	b.n	8013f84 <_svfiprintf_r+0xa0>
 8013fde:	9b03      	ldr	r3, [sp, #12]
 8013fe0:	1d19      	adds	r1, r3, #4
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	9103      	str	r1, [sp, #12]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	bfbb      	ittet	lt
 8013fea:	425b      	neglt	r3, r3
 8013fec:	f042 0202 	orrlt.w	r2, r2, #2
 8013ff0:	9307      	strge	r3, [sp, #28]
 8013ff2:	9307      	strlt	r3, [sp, #28]
 8013ff4:	bfb8      	it	lt
 8013ff6:	9204      	strlt	r2, [sp, #16]
 8013ff8:	7823      	ldrb	r3, [r4, #0]
 8013ffa:	2b2e      	cmp	r3, #46	@ 0x2e
 8013ffc:	d10a      	bne.n	8014014 <_svfiprintf_r+0x130>
 8013ffe:	7863      	ldrb	r3, [r4, #1]
 8014000:	2b2a      	cmp	r3, #42	@ 0x2a
 8014002:	d132      	bne.n	801406a <_svfiprintf_r+0x186>
 8014004:	9b03      	ldr	r3, [sp, #12]
 8014006:	1d1a      	adds	r2, r3, #4
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	9203      	str	r2, [sp, #12]
 801400c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014010:	3402      	adds	r4, #2
 8014012:	9305      	str	r3, [sp, #20]
 8014014:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80140d8 <_svfiprintf_r+0x1f4>
 8014018:	7821      	ldrb	r1, [r4, #0]
 801401a:	2203      	movs	r2, #3
 801401c:	4650      	mov	r0, sl
 801401e:	f7ec f8ff 	bl	8000220 <memchr>
 8014022:	b138      	cbz	r0, 8014034 <_svfiprintf_r+0x150>
 8014024:	9b04      	ldr	r3, [sp, #16]
 8014026:	eba0 000a 	sub.w	r0, r0, sl
 801402a:	2240      	movs	r2, #64	@ 0x40
 801402c:	4082      	lsls	r2, r0
 801402e:	4313      	orrs	r3, r2
 8014030:	3401      	adds	r4, #1
 8014032:	9304      	str	r3, [sp, #16]
 8014034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014038:	4824      	ldr	r0, [pc, #144]	@ (80140cc <_svfiprintf_r+0x1e8>)
 801403a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801403e:	2206      	movs	r2, #6
 8014040:	f7ec f8ee 	bl	8000220 <memchr>
 8014044:	2800      	cmp	r0, #0
 8014046:	d036      	beq.n	80140b6 <_svfiprintf_r+0x1d2>
 8014048:	4b21      	ldr	r3, [pc, #132]	@ (80140d0 <_svfiprintf_r+0x1ec>)
 801404a:	bb1b      	cbnz	r3, 8014094 <_svfiprintf_r+0x1b0>
 801404c:	9b03      	ldr	r3, [sp, #12]
 801404e:	3307      	adds	r3, #7
 8014050:	f023 0307 	bic.w	r3, r3, #7
 8014054:	3308      	adds	r3, #8
 8014056:	9303      	str	r3, [sp, #12]
 8014058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801405a:	4433      	add	r3, r6
 801405c:	9309      	str	r3, [sp, #36]	@ 0x24
 801405e:	e76a      	b.n	8013f36 <_svfiprintf_r+0x52>
 8014060:	fb0c 3202 	mla	r2, ip, r2, r3
 8014064:	460c      	mov	r4, r1
 8014066:	2001      	movs	r0, #1
 8014068:	e7a8      	b.n	8013fbc <_svfiprintf_r+0xd8>
 801406a:	2300      	movs	r3, #0
 801406c:	3401      	adds	r4, #1
 801406e:	9305      	str	r3, [sp, #20]
 8014070:	4619      	mov	r1, r3
 8014072:	f04f 0c0a 	mov.w	ip, #10
 8014076:	4620      	mov	r0, r4
 8014078:	f810 2b01 	ldrb.w	r2, [r0], #1
 801407c:	3a30      	subs	r2, #48	@ 0x30
 801407e:	2a09      	cmp	r2, #9
 8014080:	d903      	bls.n	801408a <_svfiprintf_r+0x1a6>
 8014082:	2b00      	cmp	r3, #0
 8014084:	d0c6      	beq.n	8014014 <_svfiprintf_r+0x130>
 8014086:	9105      	str	r1, [sp, #20]
 8014088:	e7c4      	b.n	8014014 <_svfiprintf_r+0x130>
 801408a:	fb0c 2101 	mla	r1, ip, r1, r2
 801408e:	4604      	mov	r4, r0
 8014090:	2301      	movs	r3, #1
 8014092:	e7f0      	b.n	8014076 <_svfiprintf_r+0x192>
 8014094:	ab03      	add	r3, sp, #12
 8014096:	9300      	str	r3, [sp, #0]
 8014098:	462a      	mov	r2, r5
 801409a:	4b0e      	ldr	r3, [pc, #56]	@ (80140d4 <_svfiprintf_r+0x1f0>)
 801409c:	a904      	add	r1, sp, #16
 801409e:	4638      	mov	r0, r7
 80140a0:	f7fc fc7c 	bl	801099c <_printf_float>
 80140a4:	1c42      	adds	r2, r0, #1
 80140a6:	4606      	mov	r6, r0
 80140a8:	d1d6      	bne.n	8014058 <_svfiprintf_r+0x174>
 80140aa:	89ab      	ldrh	r3, [r5, #12]
 80140ac:	065b      	lsls	r3, r3, #25
 80140ae:	f53f af2d 	bmi.w	8013f0c <_svfiprintf_r+0x28>
 80140b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80140b4:	e72c      	b.n	8013f10 <_svfiprintf_r+0x2c>
 80140b6:	ab03      	add	r3, sp, #12
 80140b8:	9300      	str	r3, [sp, #0]
 80140ba:	462a      	mov	r2, r5
 80140bc:	4b05      	ldr	r3, [pc, #20]	@ (80140d4 <_svfiprintf_r+0x1f0>)
 80140be:	a904      	add	r1, sp, #16
 80140c0:	4638      	mov	r0, r7
 80140c2:	f7fc ff03 	bl	8010ecc <_printf_i>
 80140c6:	e7ed      	b.n	80140a4 <_svfiprintf_r+0x1c0>
 80140c8:	08017301 	.word	0x08017301
 80140cc:	0801730b 	.word	0x0801730b
 80140d0:	0801099d 	.word	0x0801099d
 80140d4:	08013e2d 	.word	0x08013e2d
 80140d8:	08017307 	.word	0x08017307

080140dc <_sungetc_r>:
 80140dc:	b538      	push	{r3, r4, r5, lr}
 80140de:	1c4b      	adds	r3, r1, #1
 80140e0:	4614      	mov	r4, r2
 80140e2:	d103      	bne.n	80140ec <_sungetc_r+0x10>
 80140e4:	f04f 35ff 	mov.w	r5, #4294967295
 80140e8:	4628      	mov	r0, r5
 80140ea:	bd38      	pop	{r3, r4, r5, pc}
 80140ec:	8993      	ldrh	r3, [r2, #12]
 80140ee:	f023 0320 	bic.w	r3, r3, #32
 80140f2:	8193      	strh	r3, [r2, #12]
 80140f4:	6853      	ldr	r3, [r2, #4]
 80140f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80140f8:	b2cd      	uxtb	r5, r1
 80140fa:	b18a      	cbz	r2, 8014120 <_sungetc_r+0x44>
 80140fc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80140fe:	429a      	cmp	r2, r3
 8014100:	dd08      	ble.n	8014114 <_sungetc_r+0x38>
 8014102:	6823      	ldr	r3, [r4, #0]
 8014104:	1e5a      	subs	r2, r3, #1
 8014106:	6022      	str	r2, [r4, #0]
 8014108:	f803 5c01 	strb.w	r5, [r3, #-1]
 801410c:	6863      	ldr	r3, [r4, #4]
 801410e:	3301      	adds	r3, #1
 8014110:	6063      	str	r3, [r4, #4]
 8014112:	e7e9      	b.n	80140e8 <_sungetc_r+0xc>
 8014114:	4621      	mov	r1, r4
 8014116:	f000 fbe0 	bl	80148da <__submore>
 801411a:	2800      	cmp	r0, #0
 801411c:	d0f1      	beq.n	8014102 <_sungetc_r+0x26>
 801411e:	e7e1      	b.n	80140e4 <_sungetc_r+0x8>
 8014120:	6921      	ldr	r1, [r4, #16]
 8014122:	6822      	ldr	r2, [r4, #0]
 8014124:	b141      	cbz	r1, 8014138 <_sungetc_r+0x5c>
 8014126:	4291      	cmp	r1, r2
 8014128:	d206      	bcs.n	8014138 <_sungetc_r+0x5c>
 801412a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801412e:	42a9      	cmp	r1, r5
 8014130:	d102      	bne.n	8014138 <_sungetc_r+0x5c>
 8014132:	3a01      	subs	r2, #1
 8014134:	6022      	str	r2, [r4, #0]
 8014136:	e7ea      	b.n	801410e <_sungetc_r+0x32>
 8014138:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 801413c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014140:	6363      	str	r3, [r4, #52]	@ 0x34
 8014142:	2303      	movs	r3, #3
 8014144:	63a3      	str	r3, [r4, #56]	@ 0x38
 8014146:	4623      	mov	r3, r4
 8014148:	f803 5f46 	strb.w	r5, [r3, #70]!
 801414c:	6023      	str	r3, [r4, #0]
 801414e:	2301      	movs	r3, #1
 8014150:	e7de      	b.n	8014110 <_sungetc_r+0x34>

08014152 <__ssrefill_r>:
 8014152:	b510      	push	{r4, lr}
 8014154:	460c      	mov	r4, r1
 8014156:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8014158:	b169      	cbz	r1, 8014176 <__ssrefill_r+0x24>
 801415a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801415e:	4299      	cmp	r1, r3
 8014160:	d001      	beq.n	8014166 <__ssrefill_r+0x14>
 8014162:	f7fe fa2d 	bl	80125c0 <_free_r>
 8014166:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014168:	6063      	str	r3, [r4, #4]
 801416a:	2000      	movs	r0, #0
 801416c:	6360      	str	r0, [r4, #52]	@ 0x34
 801416e:	b113      	cbz	r3, 8014176 <__ssrefill_r+0x24>
 8014170:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8014172:	6023      	str	r3, [r4, #0]
 8014174:	bd10      	pop	{r4, pc}
 8014176:	6923      	ldr	r3, [r4, #16]
 8014178:	6023      	str	r3, [r4, #0]
 801417a:	2300      	movs	r3, #0
 801417c:	6063      	str	r3, [r4, #4]
 801417e:	89a3      	ldrh	r3, [r4, #12]
 8014180:	f043 0320 	orr.w	r3, r3, #32
 8014184:	81a3      	strh	r3, [r4, #12]
 8014186:	f04f 30ff 	mov.w	r0, #4294967295
 801418a:	e7f3      	b.n	8014174 <__ssrefill_r+0x22>

0801418c <__ssvfiscanf_r>:
 801418c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014190:	460c      	mov	r4, r1
 8014192:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8014196:	2100      	movs	r1, #0
 8014198:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801419c:	49a5      	ldr	r1, [pc, #660]	@ (8014434 <__ssvfiscanf_r+0x2a8>)
 801419e:	91a0      	str	r1, [sp, #640]	@ 0x280
 80141a0:	f10d 0804 	add.w	r8, sp, #4
 80141a4:	49a4      	ldr	r1, [pc, #656]	@ (8014438 <__ssvfiscanf_r+0x2ac>)
 80141a6:	4fa5      	ldr	r7, [pc, #660]	@ (801443c <__ssvfiscanf_r+0x2b0>)
 80141a8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80141ac:	4606      	mov	r6, r0
 80141ae:	91a1      	str	r1, [sp, #644]	@ 0x284
 80141b0:	9300      	str	r3, [sp, #0]
 80141b2:	7813      	ldrb	r3, [r2, #0]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	f000 8158 	beq.w	801446a <__ssvfiscanf_r+0x2de>
 80141ba:	5cf9      	ldrb	r1, [r7, r3]
 80141bc:	f011 0108 	ands.w	r1, r1, #8
 80141c0:	f102 0501 	add.w	r5, r2, #1
 80141c4:	d019      	beq.n	80141fa <__ssvfiscanf_r+0x6e>
 80141c6:	6863      	ldr	r3, [r4, #4]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	dd0f      	ble.n	80141ec <__ssvfiscanf_r+0x60>
 80141cc:	6823      	ldr	r3, [r4, #0]
 80141ce:	781a      	ldrb	r2, [r3, #0]
 80141d0:	5cba      	ldrb	r2, [r7, r2]
 80141d2:	0712      	lsls	r2, r2, #28
 80141d4:	d401      	bmi.n	80141da <__ssvfiscanf_r+0x4e>
 80141d6:	462a      	mov	r2, r5
 80141d8:	e7eb      	b.n	80141b2 <__ssvfiscanf_r+0x26>
 80141da:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80141dc:	3201      	adds	r2, #1
 80141de:	9245      	str	r2, [sp, #276]	@ 0x114
 80141e0:	6862      	ldr	r2, [r4, #4]
 80141e2:	3301      	adds	r3, #1
 80141e4:	3a01      	subs	r2, #1
 80141e6:	6062      	str	r2, [r4, #4]
 80141e8:	6023      	str	r3, [r4, #0]
 80141ea:	e7ec      	b.n	80141c6 <__ssvfiscanf_r+0x3a>
 80141ec:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80141ee:	4621      	mov	r1, r4
 80141f0:	4630      	mov	r0, r6
 80141f2:	4798      	blx	r3
 80141f4:	2800      	cmp	r0, #0
 80141f6:	d0e9      	beq.n	80141cc <__ssvfiscanf_r+0x40>
 80141f8:	e7ed      	b.n	80141d6 <__ssvfiscanf_r+0x4a>
 80141fa:	2b25      	cmp	r3, #37	@ 0x25
 80141fc:	d012      	beq.n	8014224 <__ssvfiscanf_r+0x98>
 80141fe:	4699      	mov	r9, r3
 8014200:	6863      	ldr	r3, [r4, #4]
 8014202:	2b00      	cmp	r3, #0
 8014204:	f340 8093 	ble.w	801432e <__ssvfiscanf_r+0x1a2>
 8014208:	6822      	ldr	r2, [r4, #0]
 801420a:	7813      	ldrb	r3, [r2, #0]
 801420c:	454b      	cmp	r3, r9
 801420e:	f040 812c 	bne.w	801446a <__ssvfiscanf_r+0x2de>
 8014212:	6863      	ldr	r3, [r4, #4]
 8014214:	3b01      	subs	r3, #1
 8014216:	6063      	str	r3, [r4, #4]
 8014218:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801421a:	3201      	adds	r2, #1
 801421c:	3301      	adds	r3, #1
 801421e:	6022      	str	r2, [r4, #0]
 8014220:	9345      	str	r3, [sp, #276]	@ 0x114
 8014222:	e7d8      	b.n	80141d6 <__ssvfiscanf_r+0x4a>
 8014224:	9141      	str	r1, [sp, #260]	@ 0x104
 8014226:	9143      	str	r1, [sp, #268]	@ 0x10c
 8014228:	7853      	ldrb	r3, [r2, #1]
 801422a:	2b2a      	cmp	r3, #42	@ 0x2a
 801422c:	bf02      	ittt	eq
 801422e:	2310      	moveq	r3, #16
 8014230:	1c95      	addeq	r5, r2, #2
 8014232:	9341      	streq	r3, [sp, #260]	@ 0x104
 8014234:	220a      	movs	r2, #10
 8014236:	46a9      	mov	r9, r5
 8014238:	f819 1b01 	ldrb.w	r1, [r9], #1
 801423c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8014240:	2b09      	cmp	r3, #9
 8014242:	d91e      	bls.n	8014282 <__ssvfiscanf_r+0xf6>
 8014244:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8014440 <__ssvfiscanf_r+0x2b4>
 8014248:	2203      	movs	r2, #3
 801424a:	4650      	mov	r0, sl
 801424c:	f7eb ffe8 	bl	8000220 <memchr>
 8014250:	b138      	cbz	r0, 8014262 <__ssvfiscanf_r+0xd6>
 8014252:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014254:	eba0 000a 	sub.w	r0, r0, sl
 8014258:	2301      	movs	r3, #1
 801425a:	4083      	lsls	r3, r0
 801425c:	4313      	orrs	r3, r2
 801425e:	9341      	str	r3, [sp, #260]	@ 0x104
 8014260:	464d      	mov	r5, r9
 8014262:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014266:	2b78      	cmp	r3, #120	@ 0x78
 8014268:	d806      	bhi.n	8014278 <__ssvfiscanf_r+0xec>
 801426a:	2b57      	cmp	r3, #87	@ 0x57
 801426c:	d810      	bhi.n	8014290 <__ssvfiscanf_r+0x104>
 801426e:	2b25      	cmp	r3, #37	@ 0x25
 8014270:	d0c5      	beq.n	80141fe <__ssvfiscanf_r+0x72>
 8014272:	d857      	bhi.n	8014324 <__ssvfiscanf_r+0x198>
 8014274:	2b00      	cmp	r3, #0
 8014276:	d065      	beq.n	8014344 <__ssvfiscanf_r+0x1b8>
 8014278:	2303      	movs	r3, #3
 801427a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801427c:	230a      	movs	r3, #10
 801427e:	9342      	str	r3, [sp, #264]	@ 0x108
 8014280:	e078      	b.n	8014374 <__ssvfiscanf_r+0x1e8>
 8014282:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8014284:	fb02 1103 	mla	r1, r2, r3, r1
 8014288:	3930      	subs	r1, #48	@ 0x30
 801428a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801428c:	464d      	mov	r5, r9
 801428e:	e7d2      	b.n	8014236 <__ssvfiscanf_r+0xaa>
 8014290:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8014294:	2a20      	cmp	r2, #32
 8014296:	d8ef      	bhi.n	8014278 <__ssvfiscanf_r+0xec>
 8014298:	a101      	add	r1, pc, #4	@ (adr r1, 80142a0 <__ssvfiscanf_r+0x114>)
 801429a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801429e:	bf00      	nop
 80142a0:	08014353 	.word	0x08014353
 80142a4:	08014279 	.word	0x08014279
 80142a8:	08014279 	.word	0x08014279
 80142ac:	080143ad 	.word	0x080143ad
 80142b0:	08014279 	.word	0x08014279
 80142b4:	08014279 	.word	0x08014279
 80142b8:	08014279 	.word	0x08014279
 80142bc:	08014279 	.word	0x08014279
 80142c0:	08014279 	.word	0x08014279
 80142c4:	08014279 	.word	0x08014279
 80142c8:	08014279 	.word	0x08014279
 80142cc:	080143c3 	.word	0x080143c3
 80142d0:	080143a9 	.word	0x080143a9
 80142d4:	0801432b 	.word	0x0801432b
 80142d8:	0801432b 	.word	0x0801432b
 80142dc:	0801432b 	.word	0x0801432b
 80142e0:	08014279 	.word	0x08014279
 80142e4:	08014365 	.word	0x08014365
 80142e8:	08014279 	.word	0x08014279
 80142ec:	08014279 	.word	0x08014279
 80142f0:	08014279 	.word	0x08014279
 80142f4:	08014279 	.word	0x08014279
 80142f8:	080143d3 	.word	0x080143d3
 80142fc:	0801436d 	.word	0x0801436d
 8014300:	0801434b 	.word	0x0801434b
 8014304:	08014279 	.word	0x08014279
 8014308:	08014279 	.word	0x08014279
 801430c:	080143cf 	.word	0x080143cf
 8014310:	08014279 	.word	0x08014279
 8014314:	080143a9 	.word	0x080143a9
 8014318:	08014279 	.word	0x08014279
 801431c:	08014279 	.word	0x08014279
 8014320:	08014353 	.word	0x08014353
 8014324:	3b45      	subs	r3, #69	@ 0x45
 8014326:	2b02      	cmp	r3, #2
 8014328:	d8a6      	bhi.n	8014278 <__ssvfiscanf_r+0xec>
 801432a:	2305      	movs	r3, #5
 801432c:	e021      	b.n	8014372 <__ssvfiscanf_r+0x1e6>
 801432e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014330:	4621      	mov	r1, r4
 8014332:	4630      	mov	r0, r6
 8014334:	4798      	blx	r3
 8014336:	2800      	cmp	r0, #0
 8014338:	f43f af66 	beq.w	8014208 <__ssvfiscanf_r+0x7c>
 801433c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801433e:	2800      	cmp	r0, #0
 8014340:	f040 808b 	bne.w	801445a <__ssvfiscanf_r+0x2ce>
 8014344:	f04f 30ff 	mov.w	r0, #4294967295
 8014348:	e08b      	b.n	8014462 <__ssvfiscanf_r+0x2d6>
 801434a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801434c:	f042 0220 	orr.w	r2, r2, #32
 8014350:	9241      	str	r2, [sp, #260]	@ 0x104
 8014352:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014354:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014358:	9241      	str	r2, [sp, #260]	@ 0x104
 801435a:	2210      	movs	r2, #16
 801435c:	2b6e      	cmp	r3, #110	@ 0x6e
 801435e:	9242      	str	r2, [sp, #264]	@ 0x108
 8014360:	d902      	bls.n	8014368 <__ssvfiscanf_r+0x1dc>
 8014362:	e005      	b.n	8014370 <__ssvfiscanf_r+0x1e4>
 8014364:	2300      	movs	r3, #0
 8014366:	9342      	str	r3, [sp, #264]	@ 0x108
 8014368:	2303      	movs	r3, #3
 801436a:	e002      	b.n	8014372 <__ssvfiscanf_r+0x1e6>
 801436c:	2308      	movs	r3, #8
 801436e:	9342      	str	r3, [sp, #264]	@ 0x108
 8014370:	2304      	movs	r3, #4
 8014372:	9347      	str	r3, [sp, #284]	@ 0x11c
 8014374:	6863      	ldr	r3, [r4, #4]
 8014376:	2b00      	cmp	r3, #0
 8014378:	dd39      	ble.n	80143ee <__ssvfiscanf_r+0x262>
 801437a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801437c:	0659      	lsls	r1, r3, #25
 801437e:	d404      	bmi.n	801438a <__ssvfiscanf_r+0x1fe>
 8014380:	6823      	ldr	r3, [r4, #0]
 8014382:	781a      	ldrb	r2, [r3, #0]
 8014384:	5cba      	ldrb	r2, [r7, r2]
 8014386:	0712      	lsls	r2, r2, #28
 8014388:	d438      	bmi.n	80143fc <__ssvfiscanf_r+0x270>
 801438a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801438c:	2b02      	cmp	r3, #2
 801438e:	dc47      	bgt.n	8014420 <__ssvfiscanf_r+0x294>
 8014390:	466b      	mov	r3, sp
 8014392:	4622      	mov	r2, r4
 8014394:	a941      	add	r1, sp, #260	@ 0x104
 8014396:	4630      	mov	r0, r6
 8014398:	f000 f86c 	bl	8014474 <_scanf_chars>
 801439c:	2801      	cmp	r0, #1
 801439e:	d064      	beq.n	801446a <__ssvfiscanf_r+0x2de>
 80143a0:	2802      	cmp	r0, #2
 80143a2:	f47f af18 	bne.w	80141d6 <__ssvfiscanf_r+0x4a>
 80143a6:	e7c9      	b.n	801433c <__ssvfiscanf_r+0x1b0>
 80143a8:	220a      	movs	r2, #10
 80143aa:	e7d7      	b.n	801435c <__ssvfiscanf_r+0x1d0>
 80143ac:	4629      	mov	r1, r5
 80143ae:	4640      	mov	r0, r8
 80143b0:	f000 fa5a 	bl	8014868 <__sccl>
 80143b4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80143b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80143ba:	9341      	str	r3, [sp, #260]	@ 0x104
 80143bc:	4605      	mov	r5, r0
 80143be:	2301      	movs	r3, #1
 80143c0:	e7d7      	b.n	8014372 <__ssvfiscanf_r+0x1e6>
 80143c2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80143c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80143c8:	9341      	str	r3, [sp, #260]	@ 0x104
 80143ca:	2300      	movs	r3, #0
 80143cc:	e7d1      	b.n	8014372 <__ssvfiscanf_r+0x1e6>
 80143ce:	2302      	movs	r3, #2
 80143d0:	e7cf      	b.n	8014372 <__ssvfiscanf_r+0x1e6>
 80143d2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80143d4:	06c3      	lsls	r3, r0, #27
 80143d6:	f53f aefe 	bmi.w	80141d6 <__ssvfiscanf_r+0x4a>
 80143da:	9b00      	ldr	r3, [sp, #0]
 80143dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80143de:	1d19      	adds	r1, r3, #4
 80143e0:	9100      	str	r1, [sp, #0]
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	07c0      	lsls	r0, r0, #31
 80143e6:	bf4c      	ite	mi
 80143e8:	801a      	strhmi	r2, [r3, #0]
 80143ea:	601a      	strpl	r2, [r3, #0]
 80143ec:	e6f3      	b.n	80141d6 <__ssvfiscanf_r+0x4a>
 80143ee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80143f0:	4621      	mov	r1, r4
 80143f2:	4630      	mov	r0, r6
 80143f4:	4798      	blx	r3
 80143f6:	2800      	cmp	r0, #0
 80143f8:	d0bf      	beq.n	801437a <__ssvfiscanf_r+0x1ee>
 80143fa:	e79f      	b.n	801433c <__ssvfiscanf_r+0x1b0>
 80143fc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80143fe:	3201      	adds	r2, #1
 8014400:	9245      	str	r2, [sp, #276]	@ 0x114
 8014402:	6862      	ldr	r2, [r4, #4]
 8014404:	3a01      	subs	r2, #1
 8014406:	2a00      	cmp	r2, #0
 8014408:	6062      	str	r2, [r4, #4]
 801440a:	dd02      	ble.n	8014412 <__ssvfiscanf_r+0x286>
 801440c:	3301      	adds	r3, #1
 801440e:	6023      	str	r3, [r4, #0]
 8014410:	e7b6      	b.n	8014380 <__ssvfiscanf_r+0x1f4>
 8014412:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014414:	4621      	mov	r1, r4
 8014416:	4630      	mov	r0, r6
 8014418:	4798      	blx	r3
 801441a:	2800      	cmp	r0, #0
 801441c:	d0b0      	beq.n	8014380 <__ssvfiscanf_r+0x1f4>
 801441e:	e78d      	b.n	801433c <__ssvfiscanf_r+0x1b0>
 8014420:	2b04      	cmp	r3, #4
 8014422:	dc0f      	bgt.n	8014444 <__ssvfiscanf_r+0x2b8>
 8014424:	466b      	mov	r3, sp
 8014426:	4622      	mov	r2, r4
 8014428:	a941      	add	r1, sp, #260	@ 0x104
 801442a:	4630      	mov	r0, r6
 801442c:	f000 f87c 	bl	8014528 <_scanf_i>
 8014430:	e7b4      	b.n	801439c <__ssvfiscanf_r+0x210>
 8014432:	bf00      	nop
 8014434:	080140dd 	.word	0x080140dd
 8014438:	08014153 	.word	0x08014153
 801443c:	08017201 	.word	0x08017201
 8014440:	08017307 	.word	0x08017307
 8014444:	4b0a      	ldr	r3, [pc, #40]	@ (8014470 <__ssvfiscanf_r+0x2e4>)
 8014446:	2b00      	cmp	r3, #0
 8014448:	f43f aec5 	beq.w	80141d6 <__ssvfiscanf_r+0x4a>
 801444c:	466b      	mov	r3, sp
 801444e:	4622      	mov	r2, r4
 8014450:	a941      	add	r1, sp, #260	@ 0x104
 8014452:	4630      	mov	r0, r6
 8014454:	f7fc fe5a 	bl	801110c <_scanf_float>
 8014458:	e7a0      	b.n	801439c <__ssvfiscanf_r+0x210>
 801445a:	89a3      	ldrh	r3, [r4, #12]
 801445c:	065b      	lsls	r3, r3, #25
 801445e:	f53f af71 	bmi.w	8014344 <__ssvfiscanf_r+0x1b8>
 8014462:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8014466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801446a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801446c:	e7f9      	b.n	8014462 <__ssvfiscanf_r+0x2d6>
 801446e:	bf00      	nop
 8014470:	0801110d 	.word	0x0801110d

08014474 <_scanf_chars>:
 8014474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014478:	4615      	mov	r5, r2
 801447a:	688a      	ldr	r2, [r1, #8]
 801447c:	4680      	mov	r8, r0
 801447e:	460c      	mov	r4, r1
 8014480:	b932      	cbnz	r2, 8014490 <_scanf_chars+0x1c>
 8014482:	698a      	ldr	r2, [r1, #24]
 8014484:	2a00      	cmp	r2, #0
 8014486:	bf14      	ite	ne
 8014488:	f04f 32ff 	movne.w	r2, #4294967295
 801448c:	2201      	moveq	r2, #1
 801448e:	608a      	str	r2, [r1, #8]
 8014490:	6822      	ldr	r2, [r4, #0]
 8014492:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8014524 <_scanf_chars+0xb0>
 8014496:	06d1      	lsls	r1, r2, #27
 8014498:	bf5f      	itttt	pl
 801449a:	681a      	ldrpl	r2, [r3, #0]
 801449c:	1d11      	addpl	r1, r2, #4
 801449e:	6019      	strpl	r1, [r3, #0]
 80144a0:	6816      	ldrpl	r6, [r2, #0]
 80144a2:	2700      	movs	r7, #0
 80144a4:	69a0      	ldr	r0, [r4, #24]
 80144a6:	b188      	cbz	r0, 80144cc <_scanf_chars+0x58>
 80144a8:	2801      	cmp	r0, #1
 80144aa:	d107      	bne.n	80144bc <_scanf_chars+0x48>
 80144ac:	682b      	ldr	r3, [r5, #0]
 80144ae:	781a      	ldrb	r2, [r3, #0]
 80144b0:	6963      	ldr	r3, [r4, #20]
 80144b2:	5c9b      	ldrb	r3, [r3, r2]
 80144b4:	b953      	cbnz	r3, 80144cc <_scanf_chars+0x58>
 80144b6:	2f00      	cmp	r7, #0
 80144b8:	d031      	beq.n	801451e <_scanf_chars+0xaa>
 80144ba:	e022      	b.n	8014502 <_scanf_chars+0x8e>
 80144bc:	2802      	cmp	r0, #2
 80144be:	d120      	bne.n	8014502 <_scanf_chars+0x8e>
 80144c0:	682b      	ldr	r3, [r5, #0]
 80144c2:	781b      	ldrb	r3, [r3, #0]
 80144c4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80144c8:	071b      	lsls	r3, r3, #28
 80144ca:	d41a      	bmi.n	8014502 <_scanf_chars+0x8e>
 80144cc:	6823      	ldr	r3, [r4, #0]
 80144ce:	06da      	lsls	r2, r3, #27
 80144d0:	bf5e      	ittt	pl
 80144d2:	682b      	ldrpl	r3, [r5, #0]
 80144d4:	781b      	ldrbpl	r3, [r3, #0]
 80144d6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80144da:	682a      	ldr	r2, [r5, #0]
 80144dc:	686b      	ldr	r3, [r5, #4]
 80144de:	3201      	adds	r2, #1
 80144e0:	602a      	str	r2, [r5, #0]
 80144e2:	68a2      	ldr	r2, [r4, #8]
 80144e4:	3b01      	subs	r3, #1
 80144e6:	3a01      	subs	r2, #1
 80144e8:	606b      	str	r3, [r5, #4]
 80144ea:	3701      	adds	r7, #1
 80144ec:	60a2      	str	r2, [r4, #8]
 80144ee:	b142      	cbz	r2, 8014502 <_scanf_chars+0x8e>
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	dcd7      	bgt.n	80144a4 <_scanf_chars+0x30>
 80144f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80144f8:	4629      	mov	r1, r5
 80144fa:	4640      	mov	r0, r8
 80144fc:	4798      	blx	r3
 80144fe:	2800      	cmp	r0, #0
 8014500:	d0d0      	beq.n	80144a4 <_scanf_chars+0x30>
 8014502:	6823      	ldr	r3, [r4, #0]
 8014504:	f013 0310 	ands.w	r3, r3, #16
 8014508:	d105      	bne.n	8014516 <_scanf_chars+0xa2>
 801450a:	68e2      	ldr	r2, [r4, #12]
 801450c:	3201      	adds	r2, #1
 801450e:	60e2      	str	r2, [r4, #12]
 8014510:	69a2      	ldr	r2, [r4, #24]
 8014512:	b102      	cbz	r2, 8014516 <_scanf_chars+0xa2>
 8014514:	7033      	strb	r3, [r6, #0]
 8014516:	6923      	ldr	r3, [r4, #16]
 8014518:	443b      	add	r3, r7
 801451a:	6123      	str	r3, [r4, #16]
 801451c:	2000      	movs	r0, #0
 801451e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014522:	bf00      	nop
 8014524:	08017201 	.word	0x08017201

08014528 <_scanf_i>:
 8014528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801452c:	4698      	mov	r8, r3
 801452e:	4b74      	ldr	r3, [pc, #464]	@ (8014700 <_scanf_i+0x1d8>)
 8014530:	460c      	mov	r4, r1
 8014532:	4682      	mov	sl, r0
 8014534:	4616      	mov	r6, r2
 8014536:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801453a:	b087      	sub	sp, #28
 801453c:	ab03      	add	r3, sp, #12
 801453e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014542:	4b70      	ldr	r3, [pc, #448]	@ (8014704 <_scanf_i+0x1dc>)
 8014544:	69a1      	ldr	r1, [r4, #24]
 8014546:	4a70      	ldr	r2, [pc, #448]	@ (8014708 <_scanf_i+0x1e0>)
 8014548:	2903      	cmp	r1, #3
 801454a:	bf08      	it	eq
 801454c:	461a      	moveq	r2, r3
 801454e:	68a3      	ldr	r3, [r4, #8]
 8014550:	9201      	str	r2, [sp, #4]
 8014552:	1e5a      	subs	r2, r3, #1
 8014554:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014558:	bf88      	it	hi
 801455a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801455e:	4627      	mov	r7, r4
 8014560:	bf82      	ittt	hi
 8014562:	eb03 0905 	addhi.w	r9, r3, r5
 8014566:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801456a:	60a3      	strhi	r3, [r4, #8]
 801456c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014570:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8014574:	bf98      	it	ls
 8014576:	f04f 0900 	movls.w	r9, #0
 801457a:	6023      	str	r3, [r4, #0]
 801457c:	463d      	mov	r5, r7
 801457e:	f04f 0b00 	mov.w	fp, #0
 8014582:	6831      	ldr	r1, [r6, #0]
 8014584:	ab03      	add	r3, sp, #12
 8014586:	7809      	ldrb	r1, [r1, #0]
 8014588:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801458c:	2202      	movs	r2, #2
 801458e:	f7eb fe47 	bl	8000220 <memchr>
 8014592:	b328      	cbz	r0, 80145e0 <_scanf_i+0xb8>
 8014594:	f1bb 0f01 	cmp.w	fp, #1
 8014598:	d159      	bne.n	801464e <_scanf_i+0x126>
 801459a:	6862      	ldr	r2, [r4, #4]
 801459c:	b92a      	cbnz	r2, 80145aa <_scanf_i+0x82>
 801459e:	6822      	ldr	r2, [r4, #0]
 80145a0:	2108      	movs	r1, #8
 80145a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80145a6:	6061      	str	r1, [r4, #4]
 80145a8:	6022      	str	r2, [r4, #0]
 80145aa:	6822      	ldr	r2, [r4, #0]
 80145ac:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80145b0:	6022      	str	r2, [r4, #0]
 80145b2:	68a2      	ldr	r2, [r4, #8]
 80145b4:	1e51      	subs	r1, r2, #1
 80145b6:	60a1      	str	r1, [r4, #8]
 80145b8:	b192      	cbz	r2, 80145e0 <_scanf_i+0xb8>
 80145ba:	6832      	ldr	r2, [r6, #0]
 80145bc:	1c51      	adds	r1, r2, #1
 80145be:	6031      	str	r1, [r6, #0]
 80145c0:	7812      	ldrb	r2, [r2, #0]
 80145c2:	f805 2b01 	strb.w	r2, [r5], #1
 80145c6:	6872      	ldr	r2, [r6, #4]
 80145c8:	3a01      	subs	r2, #1
 80145ca:	2a00      	cmp	r2, #0
 80145cc:	6072      	str	r2, [r6, #4]
 80145ce:	dc07      	bgt.n	80145e0 <_scanf_i+0xb8>
 80145d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80145d4:	4631      	mov	r1, r6
 80145d6:	4650      	mov	r0, sl
 80145d8:	4790      	blx	r2
 80145da:	2800      	cmp	r0, #0
 80145dc:	f040 8085 	bne.w	80146ea <_scanf_i+0x1c2>
 80145e0:	f10b 0b01 	add.w	fp, fp, #1
 80145e4:	f1bb 0f03 	cmp.w	fp, #3
 80145e8:	d1cb      	bne.n	8014582 <_scanf_i+0x5a>
 80145ea:	6863      	ldr	r3, [r4, #4]
 80145ec:	b90b      	cbnz	r3, 80145f2 <_scanf_i+0xca>
 80145ee:	230a      	movs	r3, #10
 80145f0:	6063      	str	r3, [r4, #4]
 80145f2:	6863      	ldr	r3, [r4, #4]
 80145f4:	4945      	ldr	r1, [pc, #276]	@ (801470c <_scanf_i+0x1e4>)
 80145f6:	6960      	ldr	r0, [r4, #20]
 80145f8:	1ac9      	subs	r1, r1, r3
 80145fa:	f000 f935 	bl	8014868 <__sccl>
 80145fe:	f04f 0b00 	mov.w	fp, #0
 8014602:	68a3      	ldr	r3, [r4, #8]
 8014604:	6822      	ldr	r2, [r4, #0]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d03d      	beq.n	8014686 <_scanf_i+0x15e>
 801460a:	6831      	ldr	r1, [r6, #0]
 801460c:	6960      	ldr	r0, [r4, #20]
 801460e:	f891 c000 	ldrb.w	ip, [r1]
 8014612:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014616:	2800      	cmp	r0, #0
 8014618:	d035      	beq.n	8014686 <_scanf_i+0x15e>
 801461a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801461e:	d124      	bne.n	801466a <_scanf_i+0x142>
 8014620:	0510      	lsls	r0, r2, #20
 8014622:	d522      	bpl.n	801466a <_scanf_i+0x142>
 8014624:	f10b 0b01 	add.w	fp, fp, #1
 8014628:	f1b9 0f00 	cmp.w	r9, #0
 801462c:	d003      	beq.n	8014636 <_scanf_i+0x10e>
 801462e:	3301      	adds	r3, #1
 8014630:	f109 39ff 	add.w	r9, r9, #4294967295
 8014634:	60a3      	str	r3, [r4, #8]
 8014636:	6873      	ldr	r3, [r6, #4]
 8014638:	3b01      	subs	r3, #1
 801463a:	2b00      	cmp	r3, #0
 801463c:	6073      	str	r3, [r6, #4]
 801463e:	dd1b      	ble.n	8014678 <_scanf_i+0x150>
 8014640:	6833      	ldr	r3, [r6, #0]
 8014642:	3301      	adds	r3, #1
 8014644:	6033      	str	r3, [r6, #0]
 8014646:	68a3      	ldr	r3, [r4, #8]
 8014648:	3b01      	subs	r3, #1
 801464a:	60a3      	str	r3, [r4, #8]
 801464c:	e7d9      	b.n	8014602 <_scanf_i+0xda>
 801464e:	f1bb 0f02 	cmp.w	fp, #2
 8014652:	d1ae      	bne.n	80145b2 <_scanf_i+0x8a>
 8014654:	6822      	ldr	r2, [r4, #0]
 8014656:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801465a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801465e:	d1bf      	bne.n	80145e0 <_scanf_i+0xb8>
 8014660:	2110      	movs	r1, #16
 8014662:	6061      	str	r1, [r4, #4]
 8014664:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8014668:	e7a2      	b.n	80145b0 <_scanf_i+0x88>
 801466a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801466e:	6022      	str	r2, [r4, #0]
 8014670:	780b      	ldrb	r3, [r1, #0]
 8014672:	f805 3b01 	strb.w	r3, [r5], #1
 8014676:	e7de      	b.n	8014636 <_scanf_i+0x10e>
 8014678:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801467c:	4631      	mov	r1, r6
 801467e:	4650      	mov	r0, sl
 8014680:	4798      	blx	r3
 8014682:	2800      	cmp	r0, #0
 8014684:	d0df      	beq.n	8014646 <_scanf_i+0x11e>
 8014686:	6823      	ldr	r3, [r4, #0]
 8014688:	05d9      	lsls	r1, r3, #23
 801468a:	d50d      	bpl.n	80146a8 <_scanf_i+0x180>
 801468c:	42bd      	cmp	r5, r7
 801468e:	d909      	bls.n	80146a4 <_scanf_i+0x17c>
 8014690:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014694:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014698:	4632      	mov	r2, r6
 801469a:	4650      	mov	r0, sl
 801469c:	4798      	blx	r3
 801469e:	f105 39ff 	add.w	r9, r5, #4294967295
 80146a2:	464d      	mov	r5, r9
 80146a4:	42bd      	cmp	r5, r7
 80146a6:	d028      	beq.n	80146fa <_scanf_i+0x1d2>
 80146a8:	6822      	ldr	r2, [r4, #0]
 80146aa:	f012 0210 	ands.w	r2, r2, #16
 80146ae:	d113      	bne.n	80146d8 <_scanf_i+0x1b0>
 80146b0:	702a      	strb	r2, [r5, #0]
 80146b2:	6863      	ldr	r3, [r4, #4]
 80146b4:	9e01      	ldr	r6, [sp, #4]
 80146b6:	4639      	mov	r1, r7
 80146b8:	4650      	mov	r0, sl
 80146ba:	47b0      	blx	r6
 80146bc:	f8d8 3000 	ldr.w	r3, [r8]
 80146c0:	6821      	ldr	r1, [r4, #0]
 80146c2:	1d1a      	adds	r2, r3, #4
 80146c4:	f8c8 2000 	str.w	r2, [r8]
 80146c8:	f011 0f20 	tst.w	r1, #32
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	d00f      	beq.n	80146f0 <_scanf_i+0x1c8>
 80146d0:	6018      	str	r0, [r3, #0]
 80146d2:	68e3      	ldr	r3, [r4, #12]
 80146d4:	3301      	adds	r3, #1
 80146d6:	60e3      	str	r3, [r4, #12]
 80146d8:	6923      	ldr	r3, [r4, #16]
 80146da:	1bed      	subs	r5, r5, r7
 80146dc:	445d      	add	r5, fp
 80146de:	442b      	add	r3, r5
 80146e0:	6123      	str	r3, [r4, #16]
 80146e2:	2000      	movs	r0, #0
 80146e4:	b007      	add	sp, #28
 80146e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146ea:	f04f 0b00 	mov.w	fp, #0
 80146ee:	e7ca      	b.n	8014686 <_scanf_i+0x15e>
 80146f0:	07ca      	lsls	r2, r1, #31
 80146f2:	bf4c      	ite	mi
 80146f4:	8018      	strhmi	r0, [r3, #0]
 80146f6:	6018      	strpl	r0, [r3, #0]
 80146f8:	e7eb      	b.n	80146d2 <_scanf_i+0x1aa>
 80146fa:	2001      	movs	r0, #1
 80146fc:	e7f2      	b.n	80146e4 <_scanf_i+0x1bc>
 80146fe:	bf00      	nop
 8014700:	08016f3c 	.word	0x08016f3c
 8014704:	08013e29 	.word	0x08013e29
 8014708:	080151ed 	.word	0x080151ed
 801470c:	08017322 	.word	0x08017322

08014710 <__sflush_r>:
 8014710:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014718:	0716      	lsls	r6, r2, #28
 801471a:	4605      	mov	r5, r0
 801471c:	460c      	mov	r4, r1
 801471e:	d454      	bmi.n	80147ca <__sflush_r+0xba>
 8014720:	684b      	ldr	r3, [r1, #4]
 8014722:	2b00      	cmp	r3, #0
 8014724:	dc02      	bgt.n	801472c <__sflush_r+0x1c>
 8014726:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014728:	2b00      	cmp	r3, #0
 801472a:	dd48      	ble.n	80147be <__sflush_r+0xae>
 801472c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801472e:	2e00      	cmp	r6, #0
 8014730:	d045      	beq.n	80147be <__sflush_r+0xae>
 8014732:	2300      	movs	r3, #0
 8014734:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014738:	682f      	ldr	r7, [r5, #0]
 801473a:	6a21      	ldr	r1, [r4, #32]
 801473c:	602b      	str	r3, [r5, #0]
 801473e:	d030      	beq.n	80147a2 <__sflush_r+0x92>
 8014740:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014742:	89a3      	ldrh	r3, [r4, #12]
 8014744:	0759      	lsls	r1, r3, #29
 8014746:	d505      	bpl.n	8014754 <__sflush_r+0x44>
 8014748:	6863      	ldr	r3, [r4, #4]
 801474a:	1ad2      	subs	r2, r2, r3
 801474c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801474e:	b10b      	cbz	r3, 8014754 <__sflush_r+0x44>
 8014750:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014752:	1ad2      	subs	r2, r2, r3
 8014754:	2300      	movs	r3, #0
 8014756:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014758:	6a21      	ldr	r1, [r4, #32]
 801475a:	4628      	mov	r0, r5
 801475c:	47b0      	blx	r6
 801475e:	1c43      	adds	r3, r0, #1
 8014760:	89a3      	ldrh	r3, [r4, #12]
 8014762:	d106      	bne.n	8014772 <__sflush_r+0x62>
 8014764:	6829      	ldr	r1, [r5, #0]
 8014766:	291d      	cmp	r1, #29
 8014768:	d82b      	bhi.n	80147c2 <__sflush_r+0xb2>
 801476a:	4a2a      	ldr	r2, [pc, #168]	@ (8014814 <__sflush_r+0x104>)
 801476c:	410a      	asrs	r2, r1
 801476e:	07d6      	lsls	r6, r2, #31
 8014770:	d427      	bmi.n	80147c2 <__sflush_r+0xb2>
 8014772:	2200      	movs	r2, #0
 8014774:	6062      	str	r2, [r4, #4]
 8014776:	04d9      	lsls	r1, r3, #19
 8014778:	6922      	ldr	r2, [r4, #16]
 801477a:	6022      	str	r2, [r4, #0]
 801477c:	d504      	bpl.n	8014788 <__sflush_r+0x78>
 801477e:	1c42      	adds	r2, r0, #1
 8014780:	d101      	bne.n	8014786 <__sflush_r+0x76>
 8014782:	682b      	ldr	r3, [r5, #0]
 8014784:	b903      	cbnz	r3, 8014788 <__sflush_r+0x78>
 8014786:	6560      	str	r0, [r4, #84]	@ 0x54
 8014788:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801478a:	602f      	str	r7, [r5, #0]
 801478c:	b1b9      	cbz	r1, 80147be <__sflush_r+0xae>
 801478e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014792:	4299      	cmp	r1, r3
 8014794:	d002      	beq.n	801479c <__sflush_r+0x8c>
 8014796:	4628      	mov	r0, r5
 8014798:	f7fd ff12 	bl	80125c0 <_free_r>
 801479c:	2300      	movs	r3, #0
 801479e:	6363      	str	r3, [r4, #52]	@ 0x34
 80147a0:	e00d      	b.n	80147be <__sflush_r+0xae>
 80147a2:	2301      	movs	r3, #1
 80147a4:	4628      	mov	r0, r5
 80147a6:	47b0      	blx	r6
 80147a8:	4602      	mov	r2, r0
 80147aa:	1c50      	adds	r0, r2, #1
 80147ac:	d1c9      	bne.n	8014742 <__sflush_r+0x32>
 80147ae:	682b      	ldr	r3, [r5, #0]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d0c6      	beq.n	8014742 <__sflush_r+0x32>
 80147b4:	2b1d      	cmp	r3, #29
 80147b6:	d001      	beq.n	80147bc <__sflush_r+0xac>
 80147b8:	2b16      	cmp	r3, #22
 80147ba:	d11e      	bne.n	80147fa <__sflush_r+0xea>
 80147bc:	602f      	str	r7, [r5, #0]
 80147be:	2000      	movs	r0, #0
 80147c0:	e022      	b.n	8014808 <__sflush_r+0xf8>
 80147c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80147c6:	b21b      	sxth	r3, r3
 80147c8:	e01b      	b.n	8014802 <__sflush_r+0xf2>
 80147ca:	690f      	ldr	r7, [r1, #16]
 80147cc:	2f00      	cmp	r7, #0
 80147ce:	d0f6      	beq.n	80147be <__sflush_r+0xae>
 80147d0:	0793      	lsls	r3, r2, #30
 80147d2:	680e      	ldr	r6, [r1, #0]
 80147d4:	bf08      	it	eq
 80147d6:	694b      	ldreq	r3, [r1, #20]
 80147d8:	600f      	str	r7, [r1, #0]
 80147da:	bf18      	it	ne
 80147dc:	2300      	movne	r3, #0
 80147de:	eba6 0807 	sub.w	r8, r6, r7
 80147e2:	608b      	str	r3, [r1, #8]
 80147e4:	f1b8 0f00 	cmp.w	r8, #0
 80147e8:	dde9      	ble.n	80147be <__sflush_r+0xae>
 80147ea:	6a21      	ldr	r1, [r4, #32]
 80147ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80147ee:	4643      	mov	r3, r8
 80147f0:	463a      	mov	r2, r7
 80147f2:	4628      	mov	r0, r5
 80147f4:	47b0      	blx	r6
 80147f6:	2800      	cmp	r0, #0
 80147f8:	dc08      	bgt.n	801480c <__sflush_r+0xfc>
 80147fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014802:	81a3      	strh	r3, [r4, #12]
 8014804:	f04f 30ff 	mov.w	r0, #4294967295
 8014808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801480c:	4407      	add	r7, r0
 801480e:	eba8 0800 	sub.w	r8, r8, r0
 8014812:	e7e7      	b.n	80147e4 <__sflush_r+0xd4>
 8014814:	dfbffffe 	.word	0xdfbffffe

08014818 <_fflush_r>:
 8014818:	b538      	push	{r3, r4, r5, lr}
 801481a:	690b      	ldr	r3, [r1, #16]
 801481c:	4605      	mov	r5, r0
 801481e:	460c      	mov	r4, r1
 8014820:	b913      	cbnz	r3, 8014828 <_fflush_r+0x10>
 8014822:	2500      	movs	r5, #0
 8014824:	4628      	mov	r0, r5
 8014826:	bd38      	pop	{r3, r4, r5, pc}
 8014828:	b118      	cbz	r0, 8014832 <_fflush_r+0x1a>
 801482a:	6a03      	ldr	r3, [r0, #32]
 801482c:	b90b      	cbnz	r3, 8014832 <_fflush_r+0x1a>
 801482e:	f7fc ff0d 	bl	801164c <__sinit>
 8014832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d0f3      	beq.n	8014822 <_fflush_r+0xa>
 801483a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801483c:	07d0      	lsls	r0, r2, #31
 801483e:	d404      	bmi.n	801484a <_fflush_r+0x32>
 8014840:	0599      	lsls	r1, r3, #22
 8014842:	d402      	bmi.n	801484a <_fflush_r+0x32>
 8014844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014846:	f7fd f856 	bl	80118f6 <__retarget_lock_acquire_recursive>
 801484a:	4628      	mov	r0, r5
 801484c:	4621      	mov	r1, r4
 801484e:	f7ff ff5f 	bl	8014710 <__sflush_r>
 8014852:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014854:	07da      	lsls	r2, r3, #31
 8014856:	4605      	mov	r5, r0
 8014858:	d4e4      	bmi.n	8014824 <_fflush_r+0xc>
 801485a:	89a3      	ldrh	r3, [r4, #12]
 801485c:	059b      	lsls	r3, r3, #22
 801485e:	d4e1      	bmi.n	8014824 <_fflush_r+0xc>
 8014860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014862:	f7fd f849 	bl	80118f8 <__retarget_lock_release_recursive>
 8014866:	e7dd      	b.n	8014824 <_fflush_r+0xc>

08014868 <__sccl>:
 8014868:	b570      	push	{r4, r5, r6, lr}
 801486a:	780b      	ldrb	r3, [r1, #0]
 801486c:	4604      	mov	r4, r0
 801486e:	2b5e      	cmp	r3, #94	@ 0x5e
 8014870:	bf0b      	itete	eq
 8014872:	784b      	ldrbeq	r3, [r1, #1]
 8014874:	1c4a      	addne	r2, r1, #1
 8014876:	1c8a      	addeq	r2, r1, #2
 8014878:	2100      	movne	r1, #0
 801487a:	bf08      	it	eq
 801487c:	2101      	moveq	r1, #1
 801487e:	3801      	subs	r0, #1
 8014880:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8014884:	f800 1f01 	strb.w	r1, [r0, #1]!
 8014888:	42a8      	cmp	r0, r5
 801488a:	d1fb      	bne.n	8014884 <__sccl+0x1c>
 801488c:	b90b      	cbnz	r3, 8014892 <__sccl+0x2a>
 801488e:	1e50      	subs	r0, r2, #1
 8014890:	bd70      	pop	{r4, r5, r6, pc}
 8014892:	f081 0101 	eor.w	r1, r1, #1
 8014896:	54e1      	strb	r1, [r4, r3]
 8014898:	4610      	mov	r0, r2
 801489a:	4602      	mov	r2, r0
 801489c:	f812 5b01 	ldrb.w	r5, [r2], #1
 80148a0:	2d2d      	cmp	r5, #45	@ 0x2d
 80148a2:	d005      	beq.n	80148b0 <__sccl+0x48>
 80148a4:	2d5d      	cmp	r5, #93	@ 0x5d
 80148a6:	d016      	beq.n	80148d6 <__sccl+0x6e>
 80148a8:	2d00      	cmp	r5, #0
 80148aa:	d0f1      	beq.n	8014890 <__sccl+0x28>
 80148ac:	462b      	mov	r3, r5
 80148ae:	e7f2      	b.n	8014896 <__sccl+0x2e>
 80148b0:	7846      	ldrb	r6, [r0, #1]
 80148b2:	2e5d      	cmp	r6, #93	@ 0x5d
 80148b4:	d0fa      	beq.n	80148ac <__sccl+0x44>
 80148b6:	42b3      	cmp	r3, r6
 80148b8:	dcf8      	bgt.n	80148ac <__sccl+0x44>
 80148ba:	3002      	adds	r0, #2
 80148bc:	461a      	mov	r2, r3
 80148be:	3201      	adds	r2, #1
 80148c0:	4296      	cmp	r6, r2
 80148c2:	54a1      	strb	r1, [r4, r2]
 80148c4:	dcfb      	bgt.n	80148be <__sccl+0x56>
 80148c6:	1af2      	subs	r2, r6, r3
 80148c8:	3a01      	subs	r2, #1
 80148ca:	1c5d      	adds	r5, r3, #1
 80148cc:	42b3      	cmp	r3, r6
 80148ce:	bfa8      	it	ge
 80148d0:	2200      	movge	r2, #0
 80148d2:	18ab      	adds	r3, r5, r2
 80148d4:	e7e1      	b.n	801489a <__sccl+0x32>
 80148d6:	4610      	mov	r0, r2
 80148d8:	e7da      	b.n	8014890 <__sccl+0x28>

080148da <__submore>:
 80148da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148de:	460c      	mov	r4, r1
 80148e0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80148e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80148e6:	4299      	cmp	r1, r3
 80148e8:	d11d      	bne.n	8014926 <__submore+0x4c>
 80148ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80148ee:	f7fd fedb 	bl	80126a8 <_malloc_r>
 80148f2:	b918      	cbnz	r0, 80148fc <__submore+0x22>
 80148f4:	f04f 30ff 	mov.w	r0, #4294967295
 80148f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014900:	63a3      	str	r3, [r4, #56]	@ 0x38
 8014902:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8014906:	6360      	str	r0, [r4, #52]	@ 0x34
 8014908:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801490c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8014910:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8014914:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014918:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801491c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8014920:	6020      	str	r0, [r4, #0]
 8014922:	2000      	movs	r0, #0
 8014924:	e7e8      	b.n	80148f8 <__submore+0x1e>
 8014926:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8014928:	0077      	lsls	r7, r6, #1
 801492a:	463a      	mov	r2, r7
 801492c:	f000 fbc1 	bl	80150b2 <_realloc_r>
 8014930:	4605      	mov	r5, r0
 8014932:	2800      	cmp	r0, #0
 8014934:	d0de      	beq.n	80148f4 <__submore+0x1a>
 8014936:	eb00 0806 	add.w	r8, r0, r6
 801493a:	4601      	mov	r1, r0
 801493c:	4632      	mov	r2, r6
 801493e:	4640      	mov	r0, r8
 8014940:	f7fc ffdb 	bl	80118fa <memcpy>
 8014944:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8014948:	f8c4 8000 	str.w	r8, [r4]
 801494c:	e7e9      	b.n	8014922 <__submore+0x48>

0801494e <memmove>:
 801494e:	4288      	cmp	r0, r1
 8014950:	b510      	push	{r4, lr}
 8014952:	eb01 0402 	add.w	r4, r1, r2
 8014956:	d902      	bls.n	801495e <memmove+0x10>
 8014958:	4284      	cmp	r4, r0
 801495a:	4623      	mov	r3, r4
 801495c:	d807      	bhi.n	801496e <memmove+0x20>
 801495e:	1e43      	subs	r3, r0, #1
 8014960:	42a1      	cmp	r1, r4
 8014962:	d008      	beq.n	8014976 <memmove+0x28>
 8014964:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014968:	f803 2f01 	strb.w	r2, [r3, #1]!
 801496c:	e7f8      	b.n	8014960 <memmove+0x12>
 801496e:	4402      	add	r2, r0
 8014970:	4601      	mov	r1, r0
 8014972:	428a      	cmp	r2, r1
 8014974:	d100      	bne.n	8014978 <memmove+0x2a>
 8014976:	bd10      	pop	{r4, pc}
 8014978:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801497c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014980:	e7f7      	b.n	8014972 <memmove+0x24>
	...

08014984 <_sbrk_r>:
 8014984:	b538      	push	{r3, r4, r5, lr}
 8014986:	4d06      	ldr	r5, [pc, #24]	@ (80149a0 <_sbrk_r+0x1c>)
 8014988:	2300      	movs	r3, #0
 801498a:	4604      	mov	r4, r0
 801498c:	4608      	mov	r0, r1
 801498e:	602b      	str	r3, [r5, #0]
 8014990:	f7ef fc58 	bl	8004244 <_sbrk>
 8014994:	1c43      	adds	r3, r0, #1
 8014996:	d102      	bne.n	801499e <_sbrk_r+0x1a>
 8014998:	682b      	ldr	r3, [r5, #0]
 801499a:	b103      	cbz	r3, 801499e <_sbrk_r+0x1a>
 801499c:	6023      	str	r3, [r4, #0]
 801499e:	bd38      	pop	{r3, r4, r5, pc}
 80149a0:	2000268c 	.word	0x2000268c
 80149a4:	00000000 	.word	0x00000000

080149a8 <nan>:
 80149a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80149b0 <nan+0x8>
 80149ac:	4770      	bx	lr
 80149ae:	bf00      	nop
 80149b0:	00000000 	.word	0x00000000
 80149b4:	7ff80000 	.word	0x7ff80000

080149b8 <__assert_func>:
 80149b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80149ba:	4614      	mov	r4, r2
 80149bc:	461a      	mov	r2, r3
 80149be:	4b09      	ldr	r3, [pc, #36]	@ (80149e4 <__assert_func+0x2c>)
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	4605      	mov	r5, r0
 80149c4:	68d8      	ldr	r0, [r3, #12]
 80149c6:	b954      	cbnz	r4, 80149de <__assert_func+0x26>
 80149c8:	4b07      	ldr	r3, [pc, #28]	@ (80149e8 <__assert_func+0x30>)
 80149ca:	461c      	mov	r4, r3
 80149cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80149d0:	9100      	str	r1, [sp, #0]
 80149d2:	462b      	mov	r3, r5
 80149d4:	4905      	ldr	r1, [pc, #20]	@ (80149ec <__assert_func+0x34>)
 80149d6:	f000 fc19 	bl	801520c <fiprintf>
 80149da:	f000 fc29 	bl	8015230 <abort>
 80149de:	4b04      	ldr	r3, [pc, #16]	@ (80149f0 <__assert_func+0x38>)
 80149e0:	e7f4      	b.n	80149cc <__assert_func+0x14>
 80149e2:	bf00      	nop
 80149e4:	200001cc 	.word	0x200001cc
 80149e8:	08017370 	.word	0x08017370
 80149ec:	08017342 	.word	0x08017342
 80149f0:	08017335 	.word	0x08017335

080149f4 <_calloc_r>:
 80149f4:	b570      	push	{r4, r5, r6, lr}
 80149f6:	fba1 5402 	umull	r5, r4, r1, r2
 80149fa:	b93c      	cbnz	r4, 8014a0c <_calloc_r+0x18>
 80149fc:	4629      	mov	r1, r5
 80149fe:	f7fd fe53 	bl	80126a8 <_malloc_r>
 8014a02:	4606      	mov	r6, r0
 8014a04:	b928      	cbnz	r0, 8014a12 <_calloc_r+0x1e>
 8014a06:	2600      	movs	r6, #0
 8014a08:	4630      	mov	r0, r6
 8014a0a:	bd70      	pop	{r4, r5, r6, pc}
 8014a0c:	220c      	movs	r2, #12
 8014a0e:	6002      	str	r2, [r0, #0]
 8014a10:	e7f9      	b.n	8014a06 <_calloc_r+0x12>
 8014a12:	462a      	mov	r2, r5
 8014a14:	4621      	mov	r1, r4
 8014a16:	f7fc fede 	bl	80117d6 <memset>
 8014a1a:	e7f5      	b.n	8014a08 <_calloc_r+0x14>

08014a1c <rshift>:
 8014a1c:	6903      	ldr	r3, [r0, #16]
 8014a1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014a22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a26:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014a2a:	f100 0414 	add.w	r4, r0, #20
 8014a2e:	dd45      	ble.n	8014abc <rshift+0xa0>
 8014a30:	f011 011f 	ands.w	r1, r1, #31
 8014a34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014a38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014a3c:	d10c      	bne.n	8014a58 <rshift+0x3c>
 8014a3e:	f100 0710 	add.w	r7, r0, #16
 8014a42:	4629      	mov	r1, r5
 8014a44:	42b1      	cmp	r1, r6
 8014a46:	d334      	bcc.n	8014ab2 <rshift+0x96>
 8014a48:	1a9b      	subs	r3, r3, r2
 8014a4a:	009b      	lsls	r3, r3, #2
 8014a4c:	1eea      	subs	r2, r5, #3
 8014a4e:	4296      	cmp	r6, r2
 8014a50:	bf38      	it	cc
 8014a52:	2300      	movcc	r3, #0
 8014a54:	4423      	add	r3, r4
 8014a56:	e015      	b.n	8014a84 <rshift+0x68>
 8014a58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014a5c:	f1c1 0820 	rsb	r8, r1, #32
 8014a60:	40cf      	lsrs	r7, r1
 8014a62:	f105 0e04 	add.w	lr, r5, #4
 8014a66:	46a1      	mov	r9, r4
 8014a68:	4576      	cmp	r6, lr
 8014a6a:	46f4      	mov	ip, lr
 8014a6c:	d815      	bhi.n	8014a9a <rshift+0x7e>
 8014a6e:	1a9a      	subs	r2, r3, r2
 8014a70:	0092      	lsls	r2, r2, #2
 8014a72:	3a04      	subs	r2, #4
 8014a74:	3501      	adds	r5, #1
 8014a76:	42ae      	cmp	r6, r5
 8014a78:	bf38      	it	cc
 8014a7a:	2200      	movcc	r2, #0
 8014a7c:	18a3      	adds	r3, r4, r2
 8014a7e:	50a7      	str	r7, [r4, r2]
 8014a80:	b107      	cbz	r7, 8014a84 <rshift+0x68>
 8014a82:	3304      	adds	r3, #4
 8014a84:	1b1a      	subs	r2, r3, r4
 8014a86:	42a3      	cmp	r3, r4
 8014a88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014a8c:	bf08      	it	eq
 8014a8e:	2300      	moveq	r3, #0
 8014a90:	6102      	str	r2, [r0, #16]
 8014a92:	bf08      	it	eq
 8014a94:	6143      	streq	r3, [r0, #20]
 8014a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a9a:	f8dc c000 	ldr.w	ip, [ip]
 8014a9e:	fa0c fc08 	lsl.w	ip, ip, r8
 8014aa2:	ea4c 0707 	orr.w	r7, ip, r7
 8014aa6:	f849 7b04 	str.w	r7, [r9], #4
 8014aaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014aae:	40cf      	lsrs	r7, r1
 8014ab0:	e7da      	b.n	8014a68 <rshift+0x4c>
 8014ab2:	f851 cb04 	ldr.w	ip, [r1], #4
 8014ab6:	f847 cf04 	str.w	ip, [r7, #4]!
 8014aba:	e7c3      	b.n	8014a44 <rshift+0x28>
 8014abc:	4623      	mov	r3, r4
 8014abe:	e7e1      	b.n	8014a84 <rshift+0x68>

08014ac0 <__hexdig_fun>:
 8014ac0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014ac4:	2b09      	cmp	r3, #9
 8014ac6:	d802      	bhi.n	8014ace <__hexdig_fun+0xe>
 8014ac8:	3820      	subs	r0, #32
 8014aca:	b2c0      	uxtb	r0, r0
 8014acc:	4770      	bx	lr
 8014ace:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014ad2:	2b05      	cmp	r3, #5
 8014ad4:	d801      	bhi.n	8014ada <__hexdig_fun+0x1a>
 8014ad6:	3847      	subs	r0, #71	@ 0x47
 8014ad8:	e7f7      	b.n	8014aca <__hexdig_fun+0xa>
 8014ada:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8014ade:	2b05      	cmp	r3, #5
 8014ae0:	d801      	bhi.n	8014ae6 <__hexdig_fun+0x26>
 8014ae2:	3827      	subs	r0, #39	@ 0x27
 8014ae4:	e7f1      	b.n	8014aca <__hexdig_fun+0xa>
 8014ae6:	2000      	movs	r0, #0
 8014ae8:	4770      	bx	lr
	...

08014aec <__gethex>:
 8014aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014af0:	b085      	sub	sp, #20
 8014af2:	468a      	mov	sl, r1
 8014af4:	9302      	str	r3, [sp, #8]
 8014af6:	680b      	ldr	r3, [r1, #0]
 8014af8:	9001      	str	r0, [sp, #4]
 8014afa:	4690      	mov	r8, r2
 8014afc:	1c9c      	adds	r4, r3, #2
 8014afe:	46a1      	mov	r9, r4
 8014b00:	f814 0b01 	ldrb.w	r0, [r4], #1
 8014b04:	2830      	cmp	r0, #48	@ 0x30
 8014b06:	d0fa      	beq.n	8014afe <__gethex+0x12>
 8014b08:	eba9 0303 	sub.w	r3, r9, r3
 8014b0c:	f1a3 0b02 	sub.w	fp, r3, #2
 8014b10:	f7ff ffd6 	bl	8014ac0 <__hexdig_fun>
 8014b14:	4605      	mov	r5, r0
 8014b16:	2800      	cmp	r0, #0
 8014b18:	d168      	bne.n	8014bec <__gethex+0x100>
 8014b1a:	49a0      	ldr	r1, [pc, #640]	@ (8014d9c <__gethex+0x2b0>)
 8014b1c:	2201      	movs	r2, #1
 8014b1e:	4648      	mov	r0, r9
 8014b20:	f7fc fe61 	bl	80117e6 <strncmp>
 8014b24:	4607      	mov	r7, r0
 8014b26:	2800      	cmp	r0, #0
 8014b28:	d167      	bne.n	8014bfa <__gethex+0x10e>
 8014b2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8014b2e:	4626      	mov	r6, r4
 8014b30:	f7ff ffc6 	bl	8014ac0 <__hexdig_fun>
 8014b34:	2800      	cmp	r0, #0
 8014b36:	d062      	beq.n	8014bfe <__gethex+0x112>
 8014b38:	4623      	mov	r3, r4
 8014b3a:	7818      	ldrb	r0, [r3, #0]
 8014b3c:	2830      	cmp	r0, #48	@ 0x30
 8014b3e:	4699      	mov	r9, r3
 8014b40:	f103 0301 	add.w	r3, r3, #1
 8014b44:	d0f9      	beq.n	8014b3a <__gethex+0x4e>
 8014b46:	f7ff ffbb 	bl	8014ac0 <__hexdig_fun>
 8014b4a:	fab0 f580 	clz	r5, r0
 8014b4e:	096d      	lsrs	r5, r5, #5
 8014b50:	f04f 0b01 	mov.w	fp, #1
 8014b54:	464a      	mov	r2, r9
 8014b56:	4616      	mov	r6, r2
 8014b58:	3201      	adds	r2, #1
 8014b5a:	7830      	ldrb	r0, [r6, #0]
 8014b5c:	f7ff ffb0 	bl	8014ac0 <__hexdig_fun>
 8014b60:	2800      	cmp	r0, #0
 8014b62:	d1f8      	bne.n	8014b56 <__gethex+0x6a>
 8014b64:	498d      	ldr	r1, [pc, #564]	@ (8014d9c <__gethex+0x2b0>)
 8014b66:	2201      	movs	r2, #1
 8014b68:	4630      	mov	r0, r6
 8014b6a:	f7fc fe3c 	bl	80117e6 <strncmp>
 8014b6e:	2800      	cmp	r0, #0
 8014b70:	d13f      	bne.n	8014bf2 <__gethex+0x106>
 8014b72:	b944      	cbnz	r4, 8014b86 <__gethex+0x9a>
 8014b74:	1c74      	adds	r4, r6, #1
 8014b76:	4622      	mov	r2, r4
 8014b78:	4616      	mov	r6, r2
 8014b7a:	3201      	adds	r2, #1
 8014b7c:	7830      	ldrb	r0, [r6, #0]
 8014b7e:	f7ff ff9f 	bl	8014ac0 <__hexdig_fun>
 8014b82:	2800      	cmp	r0, #0
 8014b84:	d1f8      	bne.n	8014b78 <__gethex+0x8c>
 8014b86:	1ba4      	subs	r4, r4, r6
 8014b88:	00a7      	lsls	r7, r4, #2
 8014b8a:	7833      	ldrb	r3, [r6, #0]
 8014b8c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8014b90:	2b50      	cmp	r3, #80	@ 0x50
 8014b92:	d13e      	bne.n	8014c12 <__gethex+0x126>
 8014b94:	7873      	ldrb	r3, [r6, #1]
 8014b96:	2b2b      	cmp	r3, #43	@ 0x2b
 8014b98:	d033      	beq.n	8014c02 <__gethex+0x116>
 8014b9a:	2b2d      	cmp	r3, #45	@ 0x2d
 8014b9c:	d034      	beq.n	8014c08 <__gethex+0x11c>
 8014b9e:	1c71      	adds	r1, r6, #1
 8014ba0:	2400      	movs	r4, #0
 8014ba2:	7808      	ldrb	r0, [r1, #0]
 8014ba4:	f7ff ff8c 	bl	8014ac0 <__hexdig_fun>
 8014ba8:	1e43      	subs	r3, r0, #1
 8014baa:	b2db      	uxtb	r3, r3
 8014bac:	2b18      	cmp	r3, #24
 8014bae:	d830      	bhi.n	8014c12 <__gethex+0x126>
 8014bb0:	f1a0 0210 	sub.w	r2, r0, #16
 8014bb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014bb8:	f7ff ff82 	bl	8014ac0 <__hexdig_fun>
 8014bbc:	f100 3cff 	add.w	ip, r0, #4294967295
 8014bc0:	fa5f fc8c 	uxtb.w	ip, ip
 8014bc4:	f1bc 0f18 	cmp.w	ip, #24
 8014bc8:	f04f 030a 	mov.w	r3, #10
 8014bcc:	d91e      	bls.n	8014c0c <__gethex+0x120>
 8014bce:	b104      	cbz	r4, 8014bd2 <__gethex+0xe6>
 8014bd0:	4252      	negs	r2, r2
 8014bd2:	4417      	add	r7, r2
 8014bd4:	f8ca 1000 	str.w	r1, [sl]
 8014bd8:	b1ed      	cbz	r5, 8014c16 <__gethex+0x12a>
 8014bda:	f1bb 0f00 	cmp.w	fp, #0
 8014bde:	bf0c      	ite	eq
 8014be0:	2506      	moveq	r5, #6
 8014be2:	2500      	movne	r5, #0
 8014be4:	4628      	mov	r0, r5
 8014be6:	b005      	add	sp, #20
 8014be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bec:	2500      	movs	r5, #0
 8014bee:	462c      	mov	r4, r5
 8014bf0:	e7b0      	b.n	8014b54 <__gethex+0x68>
 8014bf2:	2c00      	cmp	r4, #0
 8014bf4:	d1c7      	bne.n	8014b86 <__gethex+0x9a>
 8014bf6:	4627      	mov	r7, r4
 8014bf8:	e7c7      	b.n	8014b8a <__gethex+0x9e>
 8014bfa:	464e      	mov	r6, r9
 8014bfc:	462f      	mov	r7, r5
 8014bfe:	2501      	movs	r5, #1
 8014c00:	e7c3      	b.n	8014b8a <__gethex+0x9e>
 8014c02:	2400      	movs	r4, #0
 8014c04:	1cb1      	adds	r1, r6, #2
 8014c06:	e7cc      	b.n	8014ba2 <__gethex+0xb6>
 8014c08:	2401      	movs	r4, #1
 8014c0a:	e7fb      	b.n	8014c04 <__gethex+0x118>
 8014c0c:	fb03 0002 	mla	r0, r3, r2, r0
 8014c10:	e7ce      	b.n	8014bb0 <__gethex+0xc4>
 8014c12:	4631      	mov	r1, r6
 8014c14:	e7de      	b.n	8014bd4 <__gethex+0xe8>
 8014c16:	eba6 0309 	sub.w	r3, r6, r9
 8014c1a:	3b01      	subs	r3, #1
 8014c1c:	4629      	mov	r1, r5
 8014c1e:	2b07      	cmp	r3, #7
 8014c20:	dc0a      	bgt.n	8014c38 <__gethex+0x14c>
 8014c22:	9801      	ldr	r0, [sp, #4]
 8014c24:	f7fd fdcc 	bl	80127c0 <_Balloc>
 8014c28:	4604      	mov	r4, r0
 8014c2a:	b940      	cbnz	r0, 8014c3e <__gethex+0x152>
 8014c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8014da0 <__gethex+0x2b4>)
 8014c2e:	4602      	mov	r2, r0
 8014c30:	21e4      	movs	r1, #228	@ 0xe4
 8014c32:	485c      	ldr	r0, [pc, #368]	@ (8014da4 <__gethex+0x2b8>)
 8014c34:	f7ff fec0 	bl	80149b8 <__assert_func>
 8014c38:	3101      	adds	r1, #1
 8014c3a:	105b      	asrs	r3, r3, #1
 8014c3c:	e7ef      	b.n	8014c1e <__gethex+0x132>
 8014c3e:	f100 0a14 	add.w	sl, r0, #20
 8014c42:	2300      	movs	r3, #0
 8014c44:	4655      	mov	r5, sl
 8014c46:	469b      	mov	fp, r3
 8014c48:	45b1      	cmp	r9, r6
 8014c4a:	d337      	bcc.n	8014cbc <__gethex+0x1d0>
 8014c4c:	f845 bb04 	str.w	fp, [r5], #4
 8014c50:	eba5 050a 	sub.w	r5, r5, sl
 8014c54:	10ad      	asrs	r5, r5, #2
 8014c56:	6125      	str	r5, [r4, #16]
 8014c58:	4658      	mov	r0, fp
 8014c5a:	f7fd fea3 	bl	80129a4 <__hi0bits>
 8014c5e:	016d      	lsls	r5, r5, #5
 8014c60:	f8d8 6000 	ldr.w	r6, [r8]
 8014c64:	1a2d      	subs	r5, r5, r0
 8014c66:	42b5      	cmp	r5, r6
 8014c68:	dd54      	ble.n	8014d14 <__gethex+0x228>
 8014c6a:	1bad      	subs	r5, r5, r6
 8014c6c:	4629      	mov	r1, r5
 8014c6e:	4620      	mov	r0, r4
 8014c70:	f7fe fa37 	bl	80130e2 <__any_on>
 8014c74:	4681      	mov	r9, r0
 8014c76:	b178      	cbz	r0, 8014c98 <__gethex+0x1ac>
 8014c78:	1e6b      	subs	r3, r5, #1
 8014c7a:	1159      	asrs	r1, r3, #5
 8014c7c:	f003 021f 	and.w	r2, r3, #31
 8014c80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014c84:	f04f 0901 	mov.w	r9, #1
 8014c88:	fa09 f202 	lsl.w	r2, r9, r2
 8014c8c:	420a      	tst	r2, r1
 8014c8e:	d003      	beq.n	8014c98 <__gethex+0x1ac>
 8014c90:	454b      	cmp	r3, r9
 8014c92:	dc36      	bgt.n	8014d02 <__gethex+0x216>
 8014c94:	f04f 0902 	mov.w	r9, #2
 8014c98:	4629      	mov	r1, r5
 8014c9a:	4620      	mov	r0, r4
 8014c9c:	f7ff febe 	bl	8014a1c <rshift>
 8014ca0:	442f      	add	r7, r5
 8014ca2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014ca6:	42bb      	cmp	r3, r7
 8014ca8:	da42      	bge.n	8014d30 <__gethex+0x244>
 8014caa:	9801      	ldr	r0, [sp, #4]
 8014cac:	4621      	mov	r1, r4
 8014cae:	f7fd fdc7 	bl	8012840 <_Bfree>
 8014cb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014cb4:	2300      	movs	r3, #0
 8014cb6:	6013      	str	r3, [r2, #0]
 8014cb8:	25a3      	movs	r5, #163	@ 0xa3
 8014cba:	e793      	b.n	8014be4 <__gethex+0xf8>
 8014cbc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014cc0:	2a2e      	cmp	r2, #46	@ 0x2e
 8014cc2:	d012      	beq.n	8014cea <__gethex+0x1fe>
 8014cc4:	2b20      	cmp	r3, #32
 8014cc6:	d104      	bne.n	8014cd2 <__gethex+0x1e6>
 8014cc8:	f845 bb04 	str.w	fp, [r5], #4
 8014ccc:	f04f 0b00 	mov.w	fp, #0
 8014cd0:	465b      	mov	r3, fp
 8014cd2:	7830      	ldrb	r0, [r6, #0]
 8014cd4:	9303      	str	r3, [sp, #12]
 8014cd6:	f7ff fef3 	bl	8014ac0 <__hexdig_fun>
 8014cda:	9b03      	ldr	r3, [sp, #12]
 8014cdc:	f000 000f 	and.w	r0, r0, #15
 8014ce0:	4098      	lsls	r0, r3
 8014ce2:	ea4b 0b00 	orr.w	fp, fp, r0
 8014ce6:	3304      	adds	r3, #4
 8014ce8:	e7ae      	b.n	8014c48 <__gethex+0x15c>
 8014cea:	45b1      	cmp	r9, r6
 8014cec:	d8ea      	bhi.n	8014cc4 <__gethex+0x1d8>
 8014cee:	492b      	ldr	r1, [pc, #172]	@ (8014d9c <__gethex+0x2b0>)
 8014cf0:	9303      	str	r3, [sp, #12]
 8014cf2:	2201      	movs	r2, #1
 8014cf4:	4630      	mov	r0, r6
 8014cf6:	f7fc fd76 	bl	80117e6 <strncmp>
 8014cfa:	9b03      	ldr	r3, [sp, #12]
 8014cfc:	2800      	cmp	r0, #0
 8014cfe:	d1e1      	bne.n	8014cc4 <__gethex+0x1d8>
 8014d00:	e7a2      	b.n	8014c48 <__gethex+0x15c>
 8014d02:	1ea9      	subs	r1, r5, #2
 8014d04:	4620      	mov	r0, r4
 8014d06:	f7fe f9ec 	bl	80130e2 <__any_on>
 8014d0a:	2800      	cmp	r0, #0
 8014d0c:	d0c2      	beq.n	8014c94 <__gethex+0x1a8>
 8014d0e:	f04f 0903 	mov.w	r9, #3
 8014d12:	e7c1      	b.n	8014c98 <__gethex+0x1ac>
 8014d14:	da09      	bge.n	8014d2a <__gethex+0x23e>
 8014d16:	1b75      	subs	r5, r6, r5
 8014d18:	4621      	mov	r1, r4
 8014d1a:	9801      	ldr	r0, [sp, #4]
 8014d1c:	462a      	mov	r2, r5
 8014d1e:	f7fd ffa7 	bl	8012c70 <__lshift>
 8014d22:	1b7f      	subs	r7, r7, r5
 8014d24:	4604      	mov	r4, r0
 8014d26:	f100 0a14 	add.w	sl, r0, #20
 8014d2a:	f04f 0900 	mov.w	r9, #0
 8014d2e:	e7b8      	b.n	8014ca2 <__gethex+0x1b6>
 8014d30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014d34:	42bd      	cmp	r5, r7
 8014d36:	dd6f      	ble.n	8014e18 <__gethex+0x32c>
 8014d38:	1bed      	subs	r5, r5, r7
 8014d3a:	42ae      	cmp	r6, r5
 8014d3c:	dc34      	bgt.n	8014da8 <__gethex+0x2bc>
 8014d3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014d42:	2b02      	cmp	r3, #2
 8014d44:	d022      	beq.n	8014d8c <__gethex+0x2a0>
 8014d46:	2b03      	cmp	r3, #3
 8014d48:	d024      	beq.n	8014d94 <__gethex+0x2a8>
 8014d4a:	2b01      	cmp	r3, #1
 8014d4c:	d115      	bne.n	8014d7a <__gethex+0x28e>
 8014d4e:	42ae      	cmp	r6, r5
 8014d50:	d113      	bne.n	8014d7a <__gethex+0x28e>
 8014d52:	2e01      	cmp	r6, #1
 8014d54:	d10b      	bne.n	8014d6e <__gethex+0x282>
 8014d56:	9a02      	ldr	r2, [sp, #8]
 8014d58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014d5c:	6013      	str	r3, [r2, #0]
 8014d5e:	2301      	movs	r3, #1
 8014d60:	6123      	str	r3, [r4, #16]
 8014d62:	f8ca 3000 	str.w	r3, [sl]
 8014d66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014d68:	2562      	movs	r5, #98	@ 0x62
 8014d6a:	601c      	str	r4, [r3, #0]
 8014d6c:	e73a      	b.n	8014be4 <__gethex+0xf8>
 8014d6e:	1e71      	subs	r1, r6, #1
 8014d70:	4620      	mov	r0, r4
 8014d72:	f7fe f9b6 	bl	80130e2 <__any_on>
 8014d76:	2800      	cmp	r0, #0
 8014d78:	d1ed      	bne.n	8014d56 <__gethex+0x26a>
 8014d7a:	9801      	ldr	r0, [sp, #4]
 8014d7c:	4621      	mov	r1, r4
 8014d7e:	f7fd fd5f 	bl	8012840 <_Bfree>
 8014d82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014d84:	2300      	movs	r3, #0
 8014d86:	6013      	str	r3, [r2, #0]
 8014d88:	2550      	movs	r5, #80	@ 0x50
 8014d8a:	e72b      	b.n	8014be4 <__gethex+0xf8>
 8014d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d1f3      	bne.n	8014d7a <__gethex+0x28e>
 8014d92:	e7e0      	b.n	8014d56 <__gethex+0x26a>
 8014d94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d1dd      	bne.n	8014d56 <__gethex+0x26a>
 8014d9a:	e7ee      	b.n	8014d7a <__gethex+0x28e>
 8014d9c:	080171a8 	.word	0x080171a8
 8014da0:	0801703b 	.word	0x0801703b
 8014da4:	08017371 	.word	0x08017371
 8014da8:	1e6f      	subs	r7, r5, #1
 8014daa:	f1b9 0f00 	cmp.w	r9, #0
 8014dae:	d130      	bne.n	8014e12 <__gethex+0x326>
 8014db0:	b127      	cbz	r7, 8014dbc <__gethex+0x2d0>
 8014db2:	4639      	mov	r1, r7
 8014db4:	4620      	mov	r0, r4
 8014db6:	f7fe f994 	bl	80130e2 <__any_on>
 8014dba:	4681      	mov	r9, r0
 8014dbc:	117a      	asrs	r2, r7, #5
 8014dbe:	2301      	movs	r3, #1
 8014dc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014dc4:	f007 071f 	and.w	r7, r7, #31
 8014dc8:	40bb      	lsls	r3, r7
 8014dca:	4213      	tst	r3, r2
 8014dcc:	4629      	mov	r1, r5
 8014dce:	4620      	mov	r0, r4
 8014dd0:	bf18      	it	ne
 8014dd2:	f049 0902 	orrne.w	r9, r9, #2
 8014dd6:	f7ff fe21 	bl	8014a1c <rshift>
 8014dda:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014dde:	1b76      	subs	r6, r6, r5
 8014de0:	2502      	movs	r5, #2
 8014de2:	f1b9 0f00 	cmp.w	r9, #0
 8014de6:	d047      	beq.n	8014e78 <__gethex+0x38c>
 8014de8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014dec:	2b02      	cmp	r3, #2
 8014dee:	d015      	beq.n	8014e1c <__gethex+0x330>
 8014df0:	2b03      	cmp	r3, #3
 8014df2:	d017      	beq.n	8014e24 <__gethex+0x338>
 8014df4:	2b01      	cmp	r3, #1
 8014df6:	d109      	bne.n	8014e0c <__gethex+0x320>
 8014df8:	f019 0f02 	tst.w	r9, #2
 8014dfc:	d006      	beq.n	8014e0c <__gethex+0x320>
 8014dfe:	f8da 3000 	ldr.w	r3, [sl]
 8014e02:	ea49 0903 	orr.w	r9, r9, r3
 8014e06:	f019 0f01 	tst.w	r9, #1
 8014e0a:	d10e      	bne.n	8014e2a <__gethex+0x33e>
 8014e0c:	f045 0510 	orr.w	r5, r5, #16
 8014e10:	e032      	b.n	8014e78 <__gethex+0x38c>
 8014e12:	f04f 0901 	mov.w	r9, #1
 8014e16:	e7d1      	b.n	8014dbc <__gethex+0x2d0>
 8014e18:	2501      	movs	r5, #1
 8014e1a:	e7e2      	b.n	8014de2 <__gethex+0x2f6>
 8014e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014e1e:	f1c3 0301 	rsb	r3, r3, #1
 8014e22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d0f0      	beq.n	8014e0c <__gethex+0x320>
 8014e2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014e2e:	f104 0314 	add.w	r3, r4, #20
 8014e32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014e36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014e3a:	f04f 0c00 	mov.w	ip, #0
 8014e3e:	4618      	mov	r0, r3
 8014e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e44:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014e48:	d01b      	beq.n	8014e82 <__gethex+0x396>
 8014e4a:	3201      	adds	r2, #1
 8014e4c:	6002      	str	r2, [r0, #0]
 8014e4e:	2d02      	cmp	r5, #2
 8014e50:	f104 0314 	add.w	r3, r4, #20
 8014e54:	d13c      	bne.n	8014ed0 <__gethex+0x3e4>
 8014e56:	f8d8 2000 	ldr.w	r2, [r8]
 8014e5a:	3a01      	subs	r2, #1
 8014e5c:	42b2      	cmp	r2, r6
 8014e5e:	d109      	bne.n	8014e74 <__gethex+0x388>
 8014e60:	1171      	asrs	r1, r6, #5
 8014e62:	2201      	movs	r2, #1
 8014e64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014e68:	f006 061f 	and.w	r6, r6, #31
 8014e6c:	fa02 f606 	lsl.w	r6, r2, r6
 8014e70:	421e      	tst	r6, r3
 8014e72:	d13a      	bne.n	8014eea <__gethex+0x3fe>
 8014e74:	f045 0520 	orr.w	r5, r5, #32
 8014e78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e7a:	601c      	str	r4, [r3, #0]
 8014e7c:	9b02      	ldr	r3, [sp, #8]
 8014e7e:	601f      	str	r7, [r3, #0]
 8014e80:	e6b0      	b.n	8014be4 <__gethex+0xf8>
 8014e82:	4299      	cmp	r1, r3
 8014e84:	f843 cc04 	str.w	ip, [r3, #-4]
 8014e88:	d8d9      	bhi.n	8014e3e <__gethex+0x352>
 8014e8a:	68a3      	ldr	r3, [r4, #8]
 8014e8c:	459b      	cmp	fp, r3
 8014e8e:	db17      	blt.n	8014ec0 <__gethex+0x3d4>
 8014e90:	6861      	ldr	r1, [r4, #4]
 8014e92:	9801      	ldr	r0, [sp, #4]
 8014e94:	3101      	adds	r1, #1
 8014e96:	f7fd fc93 	bl	80127c0 <_Balloc>
 8014e9a:	4681      	mov	r9, r0
 8014e9c:	b918      	cbnz	r0, 8014ea6 <__gethex+0x3ba>
 8014e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8014f08 <__gethex+0x41c>)
 8014ea0:	4602      	mov	r2, r0
 8014ea2:	2184      	movs	r1, #132	@ 0x84
 8014ea4:	e6c5      	b.n	8014c32 <__gethex+0x146>
 8014ea6:	6922      	ldr	r2, [r4, #16]
 8014ea8:	3202      	adds	r2, #2
 8014eaa:	f104 010c 	add.w	r1, r4, #12
 8014eae:	0092      	lsls	r2, r2, #2
 8014eb0:	300c      	adds	r0, #12
 8014eb2:	f7fc fd22 	bl	80118fa <memcpy>
 8014eb6:	4621      	mov	r1, r4
 8014eb8:	9801      	ldr	r0, [sp, #4]
 8014eba:	f7fd fcc1 	bl	8012840 <_Bfree>
 8014ebe:	464c      	mov	r4, r9
 8014ec0:	6923      	ldr	r3, [r4, #16]
 8014ec2:	1c5a      	adds	r2, r3, #1
 8014ec4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014ec8:	6122      	str	r2, [r4, #16]
 8014eca:	2201      	movs	r2, #1
 8014ecc:	615a      	str	r2, [r3, #20]
 8014ece:	e7be      	b.n	8014e4e <__gethex+0x362>
 8014ed0:	6922      	ldr	r2, [r4, #16]
 8014ed2:	455a      	cmp	r2, fp
 8014ed4:	dd0b      	ble.n	8014eee <__gethex+0x402>
 8014ed6:	2101      	movs	r1, #1
 8014ed8:	4620      	mov	r0, r4
 8014eda:	f7ff fd9f 	bl	8014a1c <rshift>
 8014ede:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014ee2:	3701      	adds	r7, #1
 8014ee4:	42bb      	cmp	r3, r7
 8014ee6:	f6ff aee0 	blt.w	8014caa <__gethex+0x1be>
 8014eea:	2501      	movs	r5, #1
 8014eec:	e7c2      	b.n	8014e74 <__gethex+0x388>
 8014eee:	f016 061f 	ands.w	r6, r6, #31
 8014ef2:	d0fa      	beq.n	8014eea <__gethex+0x3fe>
 8014ef4:	4453      	add	r3, sl
 8014ef6:	f1c6 0620 	rsb	r6, r6, #32
 8014efa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014efe:	f7fd fd51 	bl	80129a4 <__hi0bits>
 8014f02:	42b0      	cmp	r0, r6
 8014f04:	dbe7      	blt.n	8014ed6 <__gethex+0x3ea>
 8014f06:	e7f0      	b.n	8014eea <__gethex+0x3fe>
 8014f08:	0801703b 	.word	0x0801703b

08014f0c <L_shift>:
 8014f0c:	f1c2 0208 	rsb	r2, r2, #8
 8014f10:	0092      	lsls	r2, r2, #2
 8014f12:	b570      	push	{r4, r5, r6, lr}
 8014f14:	f1c2 0620 	rsb	r6, r2, #32
 8014f18:	6843      	ldr	r3, [r0, #4]
 8014f1a:	6804      	ldr	r4, [r0, #0]
 8014f1c:	fa03 f506 	lsl.w	r5, r3, r6
 8014f20:	432c      	orrs	r4, r5
 8014f22:	40d3      	lsrs	r3, r2
 8014f24:	6004      	str	r4, [r0, #0]
 8014f26:	f840 3f04 	str.w	r3, [r0, #4]!
 8014f2a:	4288      	cmp	r0, r1
 8014f2c:	d3f4      	bcc.n	8014f18 <L_shift+0xc>
 8014f2e:	bd70      	pop	{r4, r5, r6, pc}

08014f30 <__match>:
 8014f30:	b530      	push	{r4, r5, lr}
 8014f32:	6803      	ldr	r3, [r0, #0]
 8014f34:	3301      	adds	r3, #1
 8014f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014f3a:	b914      	cbnz	r4, 8014f42 <__match+0x12>
 8014f3c:	6003      	str	r3, [r0, #0]
 8014f3e:	2001      	movs	r0, #1
 8014f40:	bd30      	pop	{r4, r5, pc}
 8014f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8014f4a:	2d19      	cmp	r5, #25
 8014f4c:	bf98      	it	ls
 8014f4e:	3220      	addls	r2, #32
 8014f50:	42a2      	cmp	r2, r4
 8014f52:	d0f0      	beq.n	8014f36 <__match+0x6>
 8014f54:	2000      	movs	r0, #0
 8014f56:	e7f3      	b.n	8014f40 <__match+0x10>

08014f58 <__hexnan>:
 8014f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f5c:	680b      	ldr	r3, [r1, #0]
 8014f5e:	6801      	ldr	r1, [r0, #0]
 8014f60:	115e      	asrs	r6, r3, #5
 8014f62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014f66:	f013 031f 	ands.w	r3, r3, #31
 8014f6a:	b087      	sub	sp, #28
 8014f6c:	bf18      	it	ne
 8014f6e:	3604      	addne	r6, #4
 8014f70:	2500      	movs	r5, #0
 8014f72:	1f37      	subs	r7, r6, #4
 8014f74:	4682      	mov	sl, r0
 8014f76:	4690      	mov	r8, r2
 8014f78:	9301      	str	r3, [sp, #4]
 8014f7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8014f7e:	46b9      	mov	r9, r7
 8014f80:	463c      	mov	r4, r7
 8014f82:	9502      	str	r5, [sp, #8]
 8014f84:	46ab      	mov	fp, r5
 8014f86:	784a      	ldrb	r2, [r1, #1]
 8014f88:	1c4b      	adds	r3, r1, #1
 8014f8a:	9303      	str	r3, [sp, #12]
 8014f8c:	b342      	cbz	r2, 8014fe0 <__hexnan+0x88>
 8014f8e:	4610      	mov	r0, r2
 8014f90:	9105      	str	r1, [sp, #20]
 8014f92:	9204      	str	r2, [sp, #16]
 8014f94:	f7ff fd94 	bl	8014ac0 <__hexdig_fun>
 8014f98:	2800      	cmp	r0, #0
 8014f9a:	d151      	bne.n	8015040 <__hexnan+0xe8>
 8014f9c:	9a04      	ldr	r2, [sp, #16]
 8014f9e:	9905      	ldr	r1, [sp, #20]
 8014fa0:	2a20      	cmp	r2, #32
 8014fa2:	d818      	bhi.n	8014fd6 <__hexnan+0x7e>
 8014fa4:	9b02      	ldr	r3, [sp, #8]
 8014fa6:	459b      	cmp	fp, r3
 8014fa8:	dd13      	ble.n	8014fd2 <__hexnan+0x7a>
 8014faa:	454c      	cmp	r4, r9
 8014fac:	d206      	bcs.n	8014fbc <__hexnan+0x64>
 8014fae:	2d07      	cmp	r5, #7
 8014fb0:	dc04      	bgt.n	8014fbc <__hexnan+0x64>
 8014fb2:	462a      	mov	r2, r5
 8014fb4:	4649      	mov	r1, r9
 8014fb6:	4620      	mov	r0, r4
 8014fb8:	f7ff ffa8 	bl	8014f0c <L_shift>
 8014fbc:	4544      	cmp	r4, r8
 8014fbe:	d952      	bls.n	8015066 <__hexnan+0x10e>
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	f1a4 0904 	sub.w	r9, r4, #4
 8014fc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8014fca:	f8cd b008 	str.w	fp, [sp, #8]
 8014fce:	464c      	mov	r4, r9
 8014fd0:	461d      	mov	r5, r3
 8014fd2:	9903      	ldr	r1, [sp, #12]
 8014fd4:	e7d7      	b.n	8014f86 <__hexnan+0x2e>
 8014fd6:	2a29      	cmp	r2, #41	@ 0x29
 8014fd8:	d157      	bne.n	801508a <__hexnan+0x132>
 8014fda:	3102      	adds	r1, #2
 8014fdc:	f8ca 1000 	str.w	r1, [sl]
 8014fe0:	f1bb 0f00 	cmp.w	fp, #0
 8014fe4:	d051      	beq.n	801508a <__hexnan+0x132>
 8014fe6:	454c      	cmp	r4, r9
 8014fe8:	d206      	bcs.n	8014ff8 <__hexnan+0xa0>
 8014fea:	2d07      	cmp	r5, #7
 8014fec:	dc04      	bgt.n	8014ff8 <__hexnan+0xa0>
 8014fee:	462a      	mov	r2, r5
 8014ff0:	4649      	mov	r1, r9
 8014ff2:	4620      	mov	r0, r4
 8014ff4:	f7ff ff8a 	bl	8014f0c <L_shift>
 8014ff8:	4544      	cmp	r4, r8
 8014ffa:	d936      	bls.n	801506a <__hexnan+0x112>
 8014ffc:	f1a8 0204 	sub.w	r2, r8, #4
 8015000:	4623      	mov	r3, r4
 8015002:	f853 1b04 	ldr.w	r1, [r3], #4
 8015006:	f842 1f04 	str.w	r1, [r2, #4]!
 801500a:	429f      	cmp	r7, r3
 801500c:	d2f9      	bcs.n	8015002 <__hexnan+0xaa>
 801500e:	1b3b      	subs	r3, r7, r4
 8015010:	f023 0303 	bic.w	r3, r3, #3
 8015014:	3304      	adds	r3, #4
 8015016:	3401      	adds	r4, #1
 8015018:	3e03      	subs	r6, #3
 801501a:	42b4      	cmp	r4, r6
 801501c:	bf88      	it	hi
 801501e:	2304      	movhi	r3, #4
 8015020:	4443      	add	r3, r8
 8015022:	2200      	movs	r2, #0
 8015024:	f843 2b04 	str.w	r2, [r3], #4
 8015028:	429f      	cmp	r7, r3
 801502a:	d2fb      	bcs.n	8015024 <__hexnan+0xcc>
 801502c:	683b      	ldr	r3, [r7, #0]
 801502e:	b91b      	cbnz	r3, 8015038 <__hexnan+0xe0>
 8015030:	4547      	cmp	r7, r8
 8015032:	d128      	bne.n	8015086 <__hexnan+0x12e>
 8015034:	2301      	movs	r3, #1
 8015036:	603b      	str	r3, [r7, #0]
 8015038:	2005      	movs	r0, #5
 801503a:	b007      	add	sp, #28
 801503c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015040:	3501      	adds	r5, #1
 8015042:	2d08      	cmp	r5, #8
 8015044:	f10b 0b01 	add.w	fp, fp, #1
 8015048:	dd06      	ble.n	8015058 <__hexnan+0x100>
 801504a:	4544      	cmp	r4, r8
 801504c:	d9c1      	bls.n	8014fd2 <__hexnan+0x7a>
 801504e:	2300      	movs	r3, #0
 8015050:	f844 3c04 	str.w	r3, [r4, #-4]
 8015054:	2501      	movs	r5, #1
 8015056:	3c04      	subs	r4, #4
 8015058:	6822      	ldr	r2, [r4, #0]
 801505a:	f000 000f 	and.w	r0, r0, #15
 801505e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015062:	6020      	str	r0, [r4, #0]
 8015064:	e7b5      	b.n	8014fd2 <__hexnan+0x7a>
 8015066:	2508      	movs	r5, #8
 8015068:	e7b3      	b.n	8014fd2 <__hexnan+0x7a>
 801506a:	9b01      	ldr	r3, [sp, #4]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d0dd      	beq.n	801502c <__hexnan+0xd4>
 8015070:	f1c3 0320 	rsb	r3, r3, #32
 8015074:	f04f 32ff 	mov.w	r2, #4294967295
 8015078:	40da      	lsrs	r2, r3
 801507a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801507e:	4013      	ands	r3, r2
 8015080:	f846 3c04 	str.w	r3, [r6, #-4]
 8015084:	e7d2      	b.n	801502c <__hexnan+0xd4>
 8015086:	3f04      	subs	r7, #4
 8015088:	e7d0      	b.n	801502c <__hexnan+0xd4>
 801508a:	2004      	movs	r0, #4
 801508c:	e7d5      	b.n	801503a <__hexnan+0xe2>

0801508e <__ascii_mbtowc>:
 801508e:	b082      	sub	sp, #8
 8015090:	b901      	cbnz	r1, 8015094 <__ascii_mbtowc+0x6>
 8015092:	a901      	add	r1, sp, #4
 8015094:	b142      	cbz	r2, 80150a8 <__ascii_mbtowc+0x1a>
 8015096:	b14b      	cbz	r3, 80150ac <__ascii_mbtowc+0x1e>
 8015098:	7813      	ldrb	r3, [r2, #0]
 801509a:	600b      	str	r3, [r1, #0]
 801509c:	7812      	ldrb	r2, [r2, #0]
 801509e:	1e10      	subs	r0, r2, #0
 80150a0:	bf18      	it	ne
 80150a2:	2001      	movne	r0, #1
 80150a4:	b002      	add	sp, #8
 80150a6:	4770      	bx	lr
 80150a8:	4610      	mov	r0, r2
 80150aa:	e7fb      	b.n	80150a4 <__ascii_mbtowc+0x16>
 80150ac:	f06f 0001 	mvn.w	r0, #1
 80150b0:	e7f8      	b.n	80150a4 <__ascii_mbtowc+0x16>

080150b2 <_realloc_r>:
 80150b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150b6:	4680      	mov	r8, r0
 80150b8:	4615      	mov	r5, r2
 80150ba:	460c      	mov	r4, r1
 80150bc:	b921      	cbnz	r1, 80150c8 <_realloc_r+0x16>
 80150be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150c2:	4611      	mov	r1, r2
 80150c4:	f7fd baf0 	b.w	80126a8 <_malloc_r>
 80150c8:	b92a      	cbnz	r2, 80150d6 <_realloc_r+0x24>
 80150ca:	f7fd fa79 	bl	80125c0 <_free_r>
 80150ce:	2400      	movs	r4, #0
 80150d0:	4620      	mov	r0, r4
 80150d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150d6:	f000 f8b2 	bl	801523e <_malloc_usable_size_r>
 80150da:	4285      	cmp	r5, r0
 80150dc:	4606      	mov	r6, r0
 80150de:	d802      	bhi.n	80150e6 <_realloc_r+0x34>
 80150e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80150e4:	d8f4      	bhi.n	80150d0 <_realloc_r+0x1e>
 80150e6:	4629      	mov	r1, r5
 80150e8:	4640      	mov	r0, r8
 80150ea:	f7fd fadd 	bl	80126a8 <_malloc_r>
 80150ee:	4607      	mov	r7, r0
 80150f0:	2800      	cmp	r0, #0
 80150f2:	d0ec      	beq.n	80150ce <_realloc_r+0x1c>
 80150f4:	42b5      	cmp	r5, r6
 80150f6:	462a      	mov	r2, r5
 80150f8:	4621      	mov	r1, r4
 80150fa:	bf28      	it	cs
 80150fc:	4632      	movcs	r2, r6
 80150fe:	f7fc fbfc 	bl	80118fa <memcpy>
 8015102:	4621      	mov	r1, r4
 8015104:	4640      	mov	r0, r8
 8015106:	f7fd fa5b 	bl	80125c0 <_free_r>
 801510a:	463c      	mov	r4, r7
 801510c:	e7e0      	b.n	80150d0 <_realloc_r+0x1e>
	...

08015110 <_strtoul_l.constprop.0>:
 8015110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015114:	4e34      	ldr	r6, [pc, #208]	@ (80151e8 <_strtoul_l.constprop.0+0xd8>)
 8015116:	4686      	mov	lr, r0
 8015118:	460d      	mov	r5, r1
 801511a:	4628      	mov	r0, r5
 801511c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015120:	5d37      	ldrb	r7, [r6, r4]
 8015122:	f017 0708 	ands.w	r7, r7, #8
 8015126:	d1f8      	bne.n	801511a <_strtoul_l.constprop.0+0xa>
 8015128:	2c2d      	cmp	r4, #45	@ 0x2d
 801512a:	d12f      	bne.n	801518c <_strtoul_l.constprop.0+0x7c>
 801512c:	782c      	ldrb	r4, [r5, #0]
 801512e:	2701      	movs	r7, #1
 8015130:	1c85      	adds	r5, r0, #2
 8015132:	f033 0010 	bics.w	r0, r3, #16
 8015136:	d109      	bne.n	801514c <_strtoul_l.constprop.0+0x3c>
 8015138:	2c30      	cmp	r4, #48	@ 0x30
 801513a:	d12c      	bne.n	8015196 <_strtoul_l.constprop.0+0x86>
 801513c:	7828      	ldrb	r0, [r5, #0]
 801513e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8015142:	2858      	cmp	r0, #88	@ 0x58
 8015144:	d127      	bne.n	8015196 <_strtoul_l.constprop.0+0x86>
 8015146:	786c      	ldrb	r4, [r5, #1]
 8015148:	2310      	movs	r3, #16
 801514a:	3502      	adds	r5, #2
 801514c:	f04f 38ff 	mov.w	r8, #4294967295
 8015150:	2600      	movs	r6, #0
 8015152:	fbb8 f8f3 	udiv	r8, r8, r3
 8015156:	fb03 f908 	mul.w	r9, r3, r8
 801515a:	ea6f 0909 	mvn.w	r9, r9
 801515e:	4630      	mov	r0, r6
 8015160:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8015164:	f1bc 0f09 	cmp.w	ip, #9
 8015168:	d81c      	bhi.n	80151a4 <_strtoul_l.constprop.0+0x94>
 801516a:	4664      	mov	r4, ip
 801516c:	42a3      	cmp	r3, r4
 801516e:	dd2a      	ble.n	80151c6 <_strtoul_l.constprop.0+0xb6>
 8015170:	f1b6 3fff 	cmp.w	r6, #4294967295
 8015174:	d007      	beq.n	8015186 <_strtoul_l.constprop.0+0x76>
 8015176:	4580      	cmp	r8, r0
 8015178:	d322      	bcc.n	80151c0 <_strtoul_l.constprop.0+0xb0>
 801517a:	d101      	bne.n	8015180 <_strtoul_l.constprop.0+0x70>
 801517c:	45a1      	cmp	r9, r4
 801517e:	db1f      	blt.n	80151c0 <_strtoul_l.constprop.0+0xb0>
 8015180:	fb00 4003 	mla	r0, r0, r3, r4
 8015184:	2601      	movs	r6, #1
 8015186:	f815 4b01 	ldrb.w	r4, [r5], #1
 801518a:	e7e9      	b.n	8015160 <_strtoul_l.constprop.0+0x50>
 801518c:	2c2b      	cmp	r4, #43	@ 0x2b
 801518e:	bf04      	itt	eq
 8015190:	782c      	ldrbeq	r4, [r5, #0]
 8015192:	1c85      	addeq	r5, r0, #2
 8015194:	e7cd      	b.n	8015132 <_strtoul_l.constprop.0+0x22>
 8015196:	2b00      	cmp	r3, #0
 8015198:	d1d8      	bne.n	801514c <_strtoul_l.constprop.0+0x3c>
 801519a:	2c30      	cmp	r4, #48	@ 0x30
 801519c:	bf0c      	ite	eq
 801519e:	2308      	moveq	r3, #8
 80151a0:	230a      	movne	r3, #10
 80151a2:	e7d3      	b.n	801514c <_strtoul_l.constprop.0+0x3c>
 80151a4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80151a8:	f1bc 0f19 	cmp.w	ip, #25
 80151ac:	d801      	bhi.n	80151b2 <_strtoul_l.constprop.0+0xa2>
 80151ae:	3c37      	subs	r4, #55	@ 0x37
 80151b0:	e7dc      	b.n	801516c <_strtoul_l.constprop.0+0x5c>
 80151b2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80151b6:	f1bc 0f19 	cmp.w	ip, #25
 80151ba:	d804      	bhi.n	80151c6 <_strtoul_l.constprop.0+0xb6>
 80151bc:	3c57      	subs	r4, #87	@ 0x57
 80151be:	e7d5      	b.n	801516c <_strtoul_l.constprop.0+0x5c>
 80151c0:	f04f 36ff 	mov.w	r6, #4294967295
 80151c4:	e7df      	b.n	8015186 <_strtoul_l.constprop.0+0x76>
 80151c6:	1c73      	adds	r3, r6, #1
 80151c8:	d106      	bne.n	80151d8 <_strtoul_l.constprop.0+0xc8>
 80151ca:	2322      	movs	r3, #34	@ 0x22
 80151cc:	f8ce 3000 	str.w	r3, [lr]
 80151d0:	4630      	mov	r0, r6
 80151d2:	b932      	cbnz	r2, 80151e2 <_strtoul_l.constprop.0+0xd2>
 80151d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151d8:	b107      	cbz	r7, 80151dc <_strtoul_l.constprop.0+0xcc>
 80151da:	4240      	negs	r0, r0
 80151dc:	2a00      	cmp	r2, #0
 80151de:	d0f9      	beq.n	80151d4 <_strtoul_l.constprop.0+0xc4>
 80151e0:	b106      	cbz	r6, 80151e4 <_strtoul_l.constprop.0+0xd4>
 80151e2:	1e69      	subs	r1, r5, #1
 80151e4:	6011      	str	r1, [r2, #0]
 80151e6:	e7f5      	b.n	80151d4 <_strtoul_l.constprop.0+0xc4>
 80151e8:	08017201 	.word	0x08017201

080151ec <_strtoul_r>:
 80151ec:	f7ff bf90 	b.w	8015110 <_strtoul_l.constprop.0>

080151f0 <__ascii_wctomb>:
 80151f0:	4603      	mov	r3, r0
 80151f2:	4608      	mov	r0, r1
 80151f4:	b141      	cbz	r1, 8015208 <__ascii_wctomb+0x18>
 80151f6:	2aff      	cmp	r2, #255	@ 0xff
 80151f8:	d904      	bls.n	8015204 <__ascii_wctomb+0x14>
 80151fa:	228a      	movs	r2, #138	@ 0x8a
 80151fc:	601a      	str	r2, [r3, #0]
 80151fe:	f04f 30ff 	mov.w	r0, #4294967295
 8015202:	4770      	bx	lr
 8015204:	700a      	strb	r2, [r1, #0]
 8015206:	2001      	movs	r0, #1
 8015208:	4770      	bx	lr
	...

0801520c <fiprintf>:
 801520c:	b40e      	push	{r1, r2, r3}
 801520e:	b503      	push	{r0, r1, lr}
 8015210:	4601      	mov	r1, r0
 8015212:	ab03      	add	r3, sp, #12
 8015214:	4805      	ldr	r0, [pc, #20]	@ (801522c <fiprintf+0x20>)
 8015216:	f853 2b04 	ldr.w	r2, [r3], #4
 801521a:	6800      	ldr	r0, [r0, #0]
 801521c:	9301      	str	r3, [sp, #4]
 801521e:	f000 f83f 	bl	80152a0 <_vfiprintf_r>
 8015222:	b002      	add	sp, #8
 8015224:	f85d eb04 	ldr.w	lr, [sp], #4
 8015228:	b003      	add	sp, #12
 801522a:	4770      	bx	lr
 801522c:	200001cc 	.word	0x200001cc

08015230 <abort>:
 8015230:	b508      	push	{r3, lr}
 8015232:	2006      	movs	r0, #6
 8015234:	f000 fa08 	bl	8015648 <raise>
 8015238:	2001      	movs	r0, #1
 801523a:	f7ee ff8b 	bl	8004154 <_exit>

0801523e <_malloc_usable_size_r>:
 801523e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015242:	1f18      	subs	r0, r3, #4
 8015244:	2b00      	cmp	r3, #0
 8015246:	bfbc      	itt	lt
 8015248:	580b      	ldrlt	r3, [r1, r0]
 801524a:	18c0      	addlt	r0, r0, r3
 801524c:	4770      	bx	lr

0801524e <__sfputc_r>:
 801524e:	6893      	ldr	r3, [r2, #8]
 8015250:	3b01      	subs	r3, #1
 8015252:	2b00      	cmp	r3, #0
 8015254:	b410      	push	{r4}
 8015256:	6093      	str	r3, [r2, #8]
 8015258:	da08      	bge.n	801526c <__sfputc_r+0x1e>
 801525a:	6994      	ldr	r4, [r2, #24]
 801525c:	42a3      	cmp	r3, r4
 801525e:	db01      	blt.n	8015264 <__sfputc_r+0x16>
 8015260:	290a      	cmp	r1, #10
 8015262:	d103      	bne.n	801526c <__sfputc_r+0x1e>
 8015264:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015268:	f000 b932 	b.w	80154d0 <__swbuf_r>
 801526c:	6813      	ldr	r3, [r2, #0]
 801526e:	1c58      	adds	r0, r3, #1
 8015270:	6010      	str	r0, [r2, #0]
 8015272:	7019      	strb	r1, [r3, #0]
 8015274:	4608      	mov	r0, r1
 8015276:	f85d 4b04 	ldr.w	r4, [sp], #4
 801527a:	4770      	bx	lr

0801527c <__sfputs_r>:
 801527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801527e:	4606      	mov	r6, r0
 8015280:	460f      	mov	r7, r1
 8015282:	4614      	mov	r4, r2
 8015284:	18d5      	adds	r5, r2, r3
 8015286:	42ac      	cmp	r4, r5
 8015288:	d101      	bne.n	801528e <__sfputs_r+0x12>
 801528a:	2000      	movs	r0, #0
 801528c:	e007      	b.n	801529e <__sfputs_r+0x22>
 801528e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015292:	463a      	mov	r2, r7
 8015294:	4630      	mov	r0, r6
 8015296:	f7ff ffda 	bl	801524e <__sfputc_r>
 801529a:	1c43      	adds	r3, r0, #1
 801529c:	d1f3      	bne.n	8015286 <__sfputs_r+0xa>
 801529e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080152a0 <_vfiprintf_r>:
 80152a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152a4:	460d      	mov	r5, r1
 80152a6:	b09d      	sub	sp, #116	@ 0x74
 80152a8:	4614      	mov	r4, r2
 80152aa:	4698      	mov	r8, r3
 80152ac:	4606      	mov	r6, r0
 80152ae:	b118      	cbz	r0, 80152b8 <_vfiprintf_r+0x18>
 80152b0:	6a03      	ldr	r3, [r0, #32]
 80152b2:	b90b      	cbnz	r3, 80152b8 <_vfiprintf_r+0x18>
 80152b4:	f7fc f9ca 	bl	801164c <__sinit>
 80152b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80152ba:	07d9      	lsls	r1, r3, #31
 80152bc:	d405      	bmi.n	80152ca <_vfiprintf_r+0x2a>
 80152be:	89ab      	ldrh	r3, [r5, #12]
 80152c0:	059a      	lsls	r2, r3, #22
 80152c2:	d402      	bmi.n	80152ca <_vfiprintf_r+0x2a>
 80152c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80152c6:	f7fc fb16 	bl	80118f6 <__retarget_lock_acquire_recursive>
 80152ca:	89ab      	ldrh	r3, [r5, #12]
 80152cc:	071b      	lsls	r3, r3, #28
 80152ce:	d501      	bpl.n	80152d4 <_vfiprintf_r+0x34>
 80152d0:	692b      	ldr	r3, [r5, #16]
 80152d2:	b99b      	cbnz	r3, 80152fc <_vfiprintf_r+0x5c>
 80152d4:	4629      	mov	r1, r5
 80152d6:	4630      	mov	r0, r6
 80152d8:	f000 f938 	bl	801554c <__swsetup_r>
 80152dc:	b170      	cbz	r0, 80152fc <_vfiprintf_r+0x5c>
 80152de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80152e0:	07dc      	lsls	r4, r3, #31
 80152e2:	d504      	bpl.n	80152ee <_vfiprintf_r+0x4e>
 80152e4:	f04f 30ff 	mov.w	r0, #4294967295
 80152e8:	b01d      	add	sp, #116	@ 0x74
 80152ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ee:	89ab      	ldrh	r3, [r5, #12]
 80152f0:	0598      	lsls	r0, r3, #22
 80152f2:	d4f7      	bmi.n	80152e4 <_vfiprintf_r+0x44>
 80152f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80152f6:	f7fc faff 	bl	80118f8 <__retarget_lock_release_recursive>
 80152fa:	e7f3      	b.n	80152e4 <_vfiprintf_r+0x44>
 80152fc:	2300      	movs	r3, #0
 80152fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8015300:	2320      	movs	r3, #32
 8015302:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015306:	f8cd 800c 	str.w	r8, [sp, #12]
 801530a:	2330      	movs	r3, #48	@ 0x30
 801530c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80154bc <_vfiprintf_r+0x21c>
 8015310:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015314:	f04f 0901 	mov.w	r9, #1
 8015318:	4623      	mov	r3, r4
 801531a:	469a      	mov	sl, r3
 801531c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015320:	b10a      	cbz	r2, 8015326 <_vfiprintf_r+0x86>
 8015322:	2a25      	cmp	r2, #37	@ 0x25
 8015324:	d1f9      	bne.n	801531a <_vfiprintf_r+0x7a>
 8015326:	ebba 0b04 	subs.w	fp, sl, r4
 801532a:	d00b      	beq.n	8015344 <_vfiprintf_r+0xa4>
 801532c:	465b      	mov	r3, fp
 801532e:	4622      	mov	r2, r4
 8015330:	4629      	mov	r1, r5
 8015332:	4630      	mov	r0, r6
 8015334:	f7ff ffa2 	bl	801527c <__sfputs_r>
 8015338:	3001      	adds	r0, #1
 801533a:	f000 80a7 	beq.w	801548c <_vfiprintf_r+0x1ec>
 801533e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015340:	445a      	add	r2, fp
 8015342:	9209      	str	r2, [sp, #36]	@ 0x24
 8015344:	f89a 3000 	ldrb.w	r3, [sl]
 8015348:	2b00      	cmp	r3, #0
 801534a:	f000 809f 	beq.w	801548c <_vfiprintf_r+0x1ec>
 801534e:	2300      	movs	r3, #0
 8015350:	f04f 32ff 	mov.w	r2, #4294967295
 8015354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015358:	f10a 0a01 	add.w	sl, sl, #1
 801535c:	9304      	str	r3, [sp, #16]
 801535e:	9307      	str	r3, [sp, #28]
 8015360:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015364:	931a      	str	r3, [sp, #104]	@ 0x68
 8015366:	4654      	mov	r4, sl
 8015368:	2205      	movs	r2, #5
 801536a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801536e:	4853      	ldr	r0, [pc, #332]	@ (80154bc <_vfiprintf_r+0x21c>)
 8015370:	f7ea ff56 	bl	8000220 <memchr>
 8015374:	9a04      	ldr	r2, [sp, #16]
 8015376:	b9d8      	cbnz	r0, 80153b0 <_vfiprintf_r+0x110>
 8015378:	06d1      	lsls	r1, r2, #27
 801537a:	bf44      	itt	mi
 801537c:	2320      	movmi	r3, #32
 801537e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015382:	0713      	lsls	r3, r2, #28
 8015384:	bf44      	itt	mi
 8015386:	232b      	movmi	r3, #43	@ 0x2b
 8015388:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801538c:	f89a 3000 	ldrb.w	r3, [sl]
 8015390:	2b2a      	cmp	r3, #42	@ 0x2a
 8015392:	d015      	beq.n	80153c0 <_vfiprintf_r+0x120>
 8015394:	9a07      	ldr	r2, [sp, #28]
 8015396:	4654      	mov	r4, sl
 8015398:	2000      	movs	r0, #0
 801539a:	f04f 0c0a 	mov.w	ip, #10
 801539e:	4621      	mov	r1, r4
 80153a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80153a4:	3b30      	subs	r3, #48	@ 0x30
 80153a6:	2b09      	cmp	r3, #9
 80153a8:	d94b      	bls.n	8015442 <_vfiprintf_r+0x1a2>
 80153aa:	b1b0      	cbz	r0, 80153da <_vfiprintf_r+0x13a>
 80153ac:	9207      	str	r2, [sp, #28]
 80153ae:	e014      	b.n	80153da <_vfiprintf_r+0x13a>
 80153b0:	eba0 0308 	sub.w	r3, r0, r8
 80153b4:	fa09 f303 	lsl.w	r3, r9, r3
 80153b8:	4313      	orrs	r3, r2
 80153ba:	9304      	str	r3, [sp, #16]
 80153bc:	46a2      	mov	sl, r4
 80153be:	e7d2      	b.n	8015366 <_vfiprintf_r+0xc6>
 80153c0:	9b03      	ldr	r3, [sp, #12]
 80153c2:	1d19      	adds	r1, r3, #4
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	9103      	str	r1, [sp, #12]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	bfbb      	ittet	lt
 80153cc:	425b      	neglt	r3, r3
 80153ce:	f042 0202 	orrlt.w	r2, r2, #2
 80153d2:	9307      	strge	r3, [sp, #28]
 80153d4:	9307      	strlt	r3, [sp, #28]
 80153d6:	bfb8      	it	lt
 80153d8:	9204      	strlt	r2, [sp, #16]
 80153da:	7823      	ldrb	r3, [r4, #0]
 80153dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80153de:	d10a      	bne.n	80153f6 <_vfiprintf_r+0x156>
 80153e0:	7863      	ldrb	r3, [r4, #1]
 80153e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80153e4:	d132      	bne.n	801544c <_vfiprintf_r+0x1ac>
 80153e6:	9b03      	ldr	r3, [sp, #12]
 80153e8:	1d1a      	adds	r2, r3, #4
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	9203      	str	r2, [sp, #12]
 80153ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80153f2:	3402      	adds	r4, #2
 80153f4:	9305      	str	r3, [sp, #20]
 80153f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80154cc <_vfiprintf_r+0x22c>
 80153fa:	7821      	ldrb	r1, [r4, #0]
 80153fc:	2203      	movs	r2, #3
 80153fe:	4650      	mov	r0, sl
 8015400:	f7ea ff0e 	bl	8000220 <memchr>
 8015404:	b138      	cbz	r0, 8015416 <_vfiprintf_r+0x176>
 8015406:	9b04      	ldr	r3, [sp, #16]
 8015408:	eba0 000a 	sub.w	r0, r0, sl
 801540c:	2240      	movs	r2, #64	@ 0x40
 801540e:	4082      	lsls	r2, r0
 8015410:	4313      	orrs	r3, r2
 8015412:	3401      	adds	r4, #1
 8015414:	9304      	str	r3, [sp, #16]
 8015416:	f814 1b01 	ldrb.w	r1, [r4], #1
 801541a:	4829      	ldr	r0, [pc, #164]	@ (80154c0 <_vfiprintf_r+0x220>)
 801541c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015420:	2206      	movs	r2, #6
 8015422:	f7ea fefd 	bl	8000220 <memchr>
 8015426:	2800      	cmp	r0, #0
 8015428:	d03f      	beq.n	80154aa <_vfiprintf_r+0x20a>
 801542a:	4b26      	ldr	r3, [pc, #152]	@ (80154c4 <_vfiprintf_r+0x224>)
 801542c:	bb1b      	cbnz	r3, 8015476 <_vfiprintf_r+0x1d6>
 801542e:	9b03      	ldr	r3, [sp, #12]
 8015430:	3307      	adds	r3, #7
 8015432:	f023 0307 	bic.w	r3, r3, #7
 8015436:	3308      	adds	r3, #8
 8015438:	9303      	str	r3, [sp, #12]
 801543a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801543c:	443b      	add	r3, r7
 801543e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015440:	e76a      	b.n	8015318 <_vfiprintf_r+0x78>
 8015442:	fb0c 3202 	mla	r2, ip, r2, r3
 8015446:	460c      	mov	r4, r1
 8015448:	2001      	movs	r0, #1
 801544a:	e7a8      	b.n	801539e <_vfiprintf_r+0xfe>
 801544c:	2300      	movs	r3, #0
 801544e:	3401      	adds	r4, #1
 8015450:	9305      	str	r3, [sp, #20]
 8015452:	4619      	mov	r1, r3
 8015454:	f04f 0c0a 	mov.w	ip, #10
 8015458:	4620      	mov	r0, r4
 801545a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801545e:	3a30      	subs	r2, #48	@ 0x30
 8015460:	2a09      	cmp	r2, #9
 8015462:	d903      	bls.n	801546c <_vfiprintf_r+0x1cc>
 8015464:	2b00      	cmp	r3, #0
 8015466:	d0c6      	beq.n	80153f6 <_vfiprintf_r+0x156>
 8015468:	9105      	str	r1, [sp, #20]
 801546a:	e7c4      	b.n	80153f6 <_vfiprintf_r+0x156>
 801546c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015470:	4604      	mov	r4, r0
 8015472:	2301      	movs	r3, #1
 8015474:	e7f0      	b.n	8015458 <_vfiprintf_r+0x1b8>
 8015476:	ab03      	add	r3, sp, #12
 8015478:	9300      	str	r3, [sp, #0]
 801547a:	462a      	mov	r2, r5
 801547c:	4b12      	ldr	r3, [pc, #72]	@ (80154c8 <_vfiprintf_r+0x228>)
 801547e:	a904      	add	r1, sp, #16
 8015480:	4630      	mov	r0, r6
 8015482:	f7fb fa8b 	bl	801099c <_printf_float>
 8015486:	4607      	mov	r7, r0
 8015488:	1c78      	adds	r0, r7, #1
 801548a:	d1d6      	bne.n	801543a <_vfiprintf_r+0x19a>
 801548c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801548e:	07d9      	lsls	r1, r3, #31
 8015490:	d405      	bmi.n	801549e <_vfiprintf_r+0x1fe>
 8015492:	89ab      	ldrh	r3, [r5, #12]
 8015494:	059a      	lsls	r2, r3, #22
 8015496:	d402      	bmi.n	801549e <_vfiprintf_r+0x1fe>
 8015498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801549a:	f7fc fa2d 	bl	80118f8 <__retarget_lock_release_recursive>
 801549e:	89ab      	ldrh	r3, [r5, #12]
 80154a0:	065b      	lsls	r3, r3, #25
 80154a2:	f53f af1f 	bmi.w	80152e4 <_vfiprintf_r+0x44>
 80154a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80154a8:	e71e      	b.n	80152e8 <_vfiprintf_r+0x48>
 80154aa:	ab03      	add	r3, sp, #12
 80154ac:	9300      	str	r3, [sp, #0]
 80154ae:	462a      	mov	r2, r5
 80154b0:	4b05      	ldr	r3, [pc, #20]	@ (80154c8 <_vfiprintf_r+0x228>)
 80154b2:	a904      	add	r1, sp, #16
 80154b4:	4630      	mov	r0, r6
 80154b6:	f7fb fd09 	bl	8010ecc <_printf_i>
 80154ba:	e7e4      	b.n	8015486 <_vfiprintf_r+0x1e6>
 80154bc:	08017301 	.word	0x08017301
 80154c0:	0801730b 	.word	0x0801730b
 80154c4:	0801099d 	.word	0x0801099d
 80154c8:	0801527d 	.word	0x0801527d
 80154cc:	08017307 	.word	0x08017307

080154d0 <__swbuf_r>:
 80154d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154d2:	460e      	mov	r6, r1
 80154d4:	4614      	mov	r4, r2
 80154d6:	4605      	mov	r5, r0
 80154d8:	b118      	cbz	r0, 80154e2 <__swbuf_r+0x12>
 80154da:	6a03      	ldr	r3, [r0, #32]
 80154dc:	b90b      	cbnz	r3, 80154e2 <__swbuf_r+0x12>
 80154de:	f7fc f8b5 	bl	801164c <__sinit>
 80154e2:	69a3      	ldr	r3, [r4, #24]
 80154e4:	60a3      	str	r3, [r4, #8]
 80154e6:	89a3      	ldrh	r3, [r4, #12]
 80154e8:	071a      	lsls	r2, r3, #28
 80154ea:	d501      	bpl.n	80154f0 <__swbuf_r+0x20>
 80154ec:	6923      	ldr	r3, [r4, #16]
 80154ee:	b943      	cbnz	r3, 8015502 <__swbuf_r+0x32>
 80154f0:	4621      	mov	r1, r4
 80154f2:	4628      	mov	r0, r5
 80154f4:	f000 f82a 	bl	801554c <__swsetup_r>
 80154f8:	b118      	cbz	r0, 8015502 <__swbuf_r+0x32>
 80154fa:	f04f 37ff 	mov.w	r7, #4294967295
 80154fe:	4638      	mov	r0, r7
 8015500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015502:	6823      	ldr	r3, [r4, #0]
 8015504:	6922      	ldr	r2, [r4, #16]
 8015506:	1a98      	subs	r0, r3, r2
 8015508:	6963      	ldr	r3, [r4, #20]
 801550a:	b2f6      	uxtb	r6, r6
 801550c:	4283      	cmp	r3, r0
 801550e:	4637      	mov	r7, r6
 8015510:	dc05      	bgt.n	801551e <__swbuf_r+0x4e>
 8015512:	4621      	mov	r1, r4
 8015514:	4628      	mov	r0, r5
 8015516:	f7ff f97f 	bl	8014818 <_fflush_r>
 801551a:	2800      	cmp	r0, #0
 801551c:	d1ed      	bne.n	80154fa <__swbuf_r+0x2a>
 801551e:	68a3      	ldr	r3, [r4, #8]
 8015520:	3b01      	subs	r3, #1
 8015522:	60a3      	str	r3, [r4, #8]
 8015524:	6823      	ldr	r3, [r4, #0]
 8015526:	1c5a      	adds	r2, r3, #1
 8015528:	6022      	str	r2, [r4, #0]
 801552a:	701e      	strb	r6, [r3, #0]
 801552c:	6962      	ldr	r2, [r4, #20]
 801552e:	1c43      	adds	r3, r0, #1
 8015530:	429a      	cmp	r2, r3
 8015532:	d004      	beq.n	801553e <__swbuf_r+0x6e>
 8015534:	89a3      	ldrh	r3, [r4, #12]
 8015536:	07db      	lsls	r3, r3, #31
 8015538:	d5e1      	bpl.n	80154fe <__swbuf_r+0x2e>
 801553a:	2e0a      	cmp	r6, #10
 801553c:	d1df      	bne.n	80154fe <__swbuf_r+0x2e>
 801553e:	4621      	mov	r1, r4
 8015540:	4628      	mov	r0, r5
 8015542:	f7ff f969 	bl	8014818 <_fflush_r>
 8015546:	2800      	cmp	r0, #0
 8015548:	d0d9      	beq.n	80154fe <__swbuf_r+0x2e>
 801554a:	e7d6      	b.n	80154fa <__swbuf_r+0x2a>

0801554c <__swsetup_r>:
 801554c:	b538      	push	{r3, r4, r5, lr}
 801554e:	4b29      	ldr	r3, [pc, #164]	@ (80155f4 <__swsetup_r+0xa8>)
 8015550:	4605      	mov	r5, r0
 8015552:	6818      	ldr	r0, [r3, #0]
 8015554:	460c      	mov	r4, r1
 8015556:	b118      	cbz	r0, 8015560 <__swsetup_r+0x14>
 8015558:	6a03      	ldr	r3, [r0, #32]
 801555a:	b90b      	cbnz	r3, 8015560 <__swsetup_r+0x14>
 801555c:	f7fc f876 	bl	801164c <__sinit>
 8015560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015564:	0719      	lsls	r1, r3, #28
 8015566:	d422      	bmi.n	80155ae <__swsetup_r+0x62>
 8015568:	06da      	lsls	r2, r3, #27
 801556a:	d407      	bmi.n	801557c <__swsetup_r+0x30>
 801556c:	2209      	movs	r2, #9
 801556e:	602a      	str	r2, [r5, #0]
 8015570:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015574:	81a3      	strh	r3, [r4, #12]
 8015576:	f04f 30ff 	mov.w	r0, #4294967295
 801557a:	e033      	b.n	80155e4 <__swsetup_r+0x98>
 801557c:	0758      	lsls	r0, r3, #29
 801557e:	d512      	bpl.n	80155a6 <__swsetup_r+0x5a>
 8015580:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015582:	b141      	cbz	r1, 8015596 <__swsetup_r+0x4a>
 8015584:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015588:	4299      	cmp	r1, r3
 801558a:	d002      	beq.n	8015592 <__swsetup_r+0x46>
 801558c:	4628      	mov	r0, r5
 801558e:	f7fd f817 	bl	80125c0 <_free_r>
 8015592:	2300      	movs	r3, #0
 8015594:	6363      	str	r3, [r4, #52]	@ 0x34
 8015596:	89a3      	ldrh	r3, [r4, #12]
 8015598:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801559c:	81a3      	strh	r3, [r4, #12]
 801559e:	2300      	movs	r3, #0
 80155a0:	6063      	str	r3, [r4, #4]
 80155a2:	6923      	ldr	r3, [r4, #16]
 80155a4:	6023      	str	r3, [r4, #0]
 80155a6:	89a3      	ldrh	r3, [r4, #12]
 80155a8:	f043 0308 	orr.w	r3, r3, #8
 80155ac:	81a3      	strh	r3, [r4, #12]
 80155ae:	6923      	ldr	r3, [r4, #16]
 80155b0:	b94b      	cbnz	r3, 80155c6 <__swsetup_r+0x7a>
 80155b2:	89a3      	ldrh	r3, [r4, #12]
 80155b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80155b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80155bc:	d003      	beq.n	80155c6 <__swsetup_r+0x7a>
 80155be:	4621      	mov	r1, r4
 80155c0:	4628      	mov	r0, r5
 80155c2:	f000 f883 	bl	80156cc <__smakebuf_r>
 80155c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80155ca:	f013 0201 	ands.w	r2, r3, #1
 80155ce:	d00a      	beq.n	80155e6 <__swsetup_r+0x9a>
 80155d0:	2200      	movs	r2, #0
 80155d2:	60a2      	str	r2, [r4, #8]
 80155d4:	6962      	ldr	r2, [r4, #20]
 80155d6:	4252      	negs	r2, r2
 80155d8:	61a2      	str	r2, [r4, #24]
 80155da:	6922      	ldr	r2, [r4, #16]
 80155dc:	b942      	cbnz	r2, 80155f0 <__swsetup_r+0xa4>
 80155de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80155e2:	d1c5      	bne.n	8015570 <__swsetup_r+0x24>
 80155e4:	bd38      	pop	{r3, r4, r5, pc}
 80155e6:	0799      	lsls	r1, r3, #30
 80155e8:	bf58      	it	pl
 80155ea:	6962      	ldrpl	r2, [r4, #20]
 80155ec:	60a2      	str	r2, [r4, #8]
 80155ee:	e7f4      	b.n	80155da <__swsetup_r+0x8e>
 80155f0:	2000      	movs	r0, #0
 80155f2:	e7f7      	b.n	80155e4 <__swsetup_r+0x98>
 80155f4:	200001cc 	.word	0x200001cc

080155f8 <_raise_r>:
 80155f8:	291f      	cmp	r1, #31
 80155fa:	b538      	push	{r3, r4, r5, lr}
 80155fc:	4605      	mov	r5, r0
 80155fe:	460c      	mov	r4, r1
 8015600:	d904      	bls.n	801560c <_raise_r+0x14>
 8015602:	2316      	movs	r3, #22
 8015604:	6003      	str	r3, [r0, #0]
 8015606:	f04f 30ff 	mov.w	r0, #4294967295
 801560a:	bd38      	pop	{r3, r4, r5, pc}
 801560c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801560e:	b112      	cbz	r2, 8015616 <_raise_r+0x1e>
 8015610:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015614:	b94b      	cbnz	r3, 801562a <_raise_r+0x32>
 8015616:	4628      	mov	r0, r5
 8015618:	f000 f830 	bl	801567c <_getpid_r>
 801561c:	4622      	mov	r2, r4
 801561e:	4601      	mov	r1, r0
 8015620:	4628      	mov	r0, r5
 8015622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015626:	f000 b817 	b.w	8015658 <_kill_r>
 801562a:	2b01      	cmp	r3, #1
 801562c:	d00a      	beq.n	8015644 <_raise_r+0x4c>
 801562e:	1c59      	adds	r1, r3, #1
 8015630:	d103      	bne.n	801563a <_raise_r+0x42>
 8015632:	2316      	movs	r3, #22
 8015634:	6003      	str	r3, [r0, #0]
 8015636:	2001      	movs	r0, #1
 8015638:	e7e7      	b.n	801560a <_raise_r+0x12>
 801563a:	2100      	movs	r1, #0
 801563c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015640:	4620      	mov	r0, r4
 8015642:	4798      	blx	r3
 8015644:	2000      	movs	r0, #0
 8015646:	e7e0      	b.n	801560a <_raise_r+0x12>

08015648 <raise>:
 8015648:	4b02      	ldr	r3, [pc, #8]	@ (8015654 <raise+0xc>)
 801564a:	4601      	mov	r1, r0
 801564c:	6818      	ldr	r0, [r3, #0]
 801564e:	f7ff bfd3 	b.w	80155f8 <_raise_r>
 8015652:	bf00      	nop
 8015654:	200001cc 	.word	0x200001cc

08015658 <_kill_r>:
 8015658:	b538      	push	{r3, r4, r5, lr}
 801565a:	4d07      	ldr	r5, [pc, #28]	@ (8015678 <_kill_r+0x20>)
 801565c:	2300      	movs	r3, #0
 801565e:	4604      	mov	r4, r0
 8015660:	4608      	mov	r0, r1
 8015662:	4611      	mov	r1, r2
 8015664:	602b      	str	r3, [r5, #0]
 8015666:	f7ee fd65 	bl	8004134 <_kill>
 801566a:	1c43      	adds	r3, r0, #1
 801566c:	d102      	bne.n	8015674 <_kill_r+0x1c>
 801566e:	682b      	ldr	r3, [r5, #0]
 8015670:	b103      	cbz	r3, 8015674 <_kill_r+0x1c>
 8015672:	6023      	str	r3, [r4, #0]
 8015674:	bd38      	pop	{r3, r4, r5, pc}
 8015676:	bf00      	nop
 8015678:	2000268c 	.word	0x2000268c

0801567c <_getpid_r>:
 801567c:	f7ee bd52 	b.w	8004124 <_getpid>

08015680 <__swhatbuf_r>:
 8015680:	b570      	push	{r4, r5, r6, lr}
 8015682:	460c      	mov	r4, r1
 8015684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015688:	2900      	cmp	r1, #0
 801568a:	b096      	sub	sp, #88	@ 0x58
 801568c:	4615      	mov	r5, r2
 801568e:	461e      	mov	r6, r3
 8015690:	da0d      	bge.n	80156ae <__swhatbuf_r+0x2e>
 8015692:	89a3      	ldrh	r3, [r4, #12]
 8015694:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015698:	f04f 0100 	mov.w	r1, #0
 801569c:	bf14      	ite	ne
 801569e:	2340      	movne	r3, #64	@ 0x40
 80156a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80156a4:	2000      	movs	r0, #0
 80156a6:	6031      	str	r1, [r6, #0]
 80156a8:	602b      	str	r3, [r5, #0]
 80156aa:	b016      	add	sp, #88	@ 0x58
 80156ac:	bd70      	pop	{r4, r5, r6, pc}
 80156ae:	466a      	mov	r2, sp
 80156b0:	f000 f848 	bl	8015744 <_fstat_r>
 80156b4:	2800      	cmp	r0, #0
 80156b6:	dbec      	blt.n	8015692 <__swhatbuf_r+0x12>
 80156b8:	9901      	ldr	r1, [sp, #4]
 80156ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80156be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80156c2:	4259      	negs	r1, r3
 80156c4:	4159      	adcs	r1, r3
 80156c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80156ca:	e7eb      	b.n	80156a4 <__swhatbuf_r+0x24>

080156cc <__smakebuf_r>:
 80156cc:	898b      	ldrh	r3, [r1, #12]
 80156ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80156d0:	079d      	lsls	r5, r3, #30
 80156d2:	4606      	mov	r6, r0
 80156d4:	460c      	mov	r4, r1
 80156d6:	d507      	bpl.n	80156e8 <__smakebuf_r+0x1c>
 80156d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80156dc:	6023      	str	r3, [r4, #0]
 80156de:	6123      	str	r3, [r4, #16]
 80156e0:	2301      	movs	r3, #1
 80156e2:	6163      	str	r3, [r4, #20]
 80156e4:	b003      	add	sp, #12
 80156e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156e8:	ab01      	add	r3, sp, #4
 80156ea:	466a      	mov	r2, sp
 80156ec:	f7ff ffc8 	bl	8015680 <__swhatbuf_r>
 80156f0:	9f00      	ldr	r7, [sp, #0]
 80156f2:	4605      	mov	r5, r0
 80156f4:	4639      	mov	r1, r7
 80156f6:	4630      	mov	r0, r6
 80156f8:	f7fc ffd6 	bl	80126a8 <_malloc_r>
 80156fc:	b948      	cbnz	r0, 8015712 <__smakebuf_r+0x46>
 80156fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015702:	059a      	lsls	r2, r3, #22
 8015704:	d4ee      	bmi.n	80156e4 <__smakebuf_r+0x18>
 8015706:	f023 0303 	bic.w	r3, r3, #3
 801570a:	f043 0302 	orr.w	r3, r3, #2
 801570e:	81a3      	strh	r3, [r4, #12]
 8015710:	e7e2      	b.n	80156d8 <__smakebuf_r+0xc>
 8015712:	89a3      	ldrh	r3, [r4, #12]
 8015714:	6020      	str	r0, [r4, #0]
 8015716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801571a:	81a3      	strh	r3, [r4, #12]
 801571c:	9b01      	ldr	r3, [sp, #4]
 801571e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015722:	b15b      	cbz	r3, 801573c <__smakebuf_r+0x70>
 8015724:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015728:	4630      	mov	r0, r6
 801572a:	f000 f81d 	bl	8015768 <_isatty_r>
 801572e:	b128      	cbz	r0, 801573c <__smakebuf_r+0x70>
 8015730:	89a3      	ldrh	r3, [r4, #12]
 8015732:	f023 0303 	bic.w	r3, r3, #3
 8015736:	f043 0301 	orr.w	r3, r3, #1
 801573a:	81a3      	strh	r3, [r4, #12]
 801573c:	89a3      	ldrh	r3, [r4, #12]
 801573e:	431d      	orrs	r5, r3
 8015740:	81a5      	strh	r5, [r4, #12]
 8015742:	e7cf      	b.n	80156e4 <__smakebuf_r+0x18>

08015744 <_fstat_r>:
 8015744:	b538      	push	{r3, r4, r5, lr}
 8015746:	4d07      	ldr	r5, [pc, #28]	@ (8015764 <_fstat_r+0x20>)
 8015748:	2300      	movs	r3, #0
 801574a:	4604      	mov	r4, r0
 801574c:	4608      	mov	r0, r1
 801574e:	4611      	mov	r1, r2
 8015750:	602b      	str	r3, [r5, #0]
 8015752:	f7ee fd4f 	bl	80041f4 <_fstat>
 8015756:	1c43      	adds	r3, r0, #1
 8015758:	d102      	bne.n	8015760 <_fstat_r+0x1c>
 801575a:	682b      	ldr	r3, [r5, #0]
 801575c:	b103      	cbz	r3, 8015760 <_fstat_r+0x1c>
 801575e:	6023      	str	r3, [r4, #0]
 8015760:	bd38      	pop	{r3, r4, r5, pc}
 8015762:	bf00      	nop
 8015764:	2000268c 	.word	0x2000268c

08015768 <_isatty_r>:
 8015768:	b538      	push	{r3, r4, r5, lr}
 801576a:	4d06      	ldr	r5, [pc, #24]	@ (8015784 <_isatty_r+0x1c>)
 801576c:	2300      	movs	r3, #0
 801576e:	4604      	mov	r4, r0
 8015770:	4608      	mov	r0, r1
 8015772:	602b      	str	r3, [r5, #0]
 8015774:	f7ee fd4e 	bl	8004214 <_isatty>
 8015778:	1c43      	adds	r3, r0, #1
 801577a:	d102      	bne.n	8015782 <_isatty_r+0x1a>
 801577c:	682b      	ldr	r3, [r5, #0]
 801577e:	b103      	cbz	r3, 8015782 <_isatty_r+0x1a>
 8015780:	6023      	str	r3, [r4, #0]
 8015782:	bd38      	pop	{r3, r4, r5, pc}
 8015784:	2000268c 	.word	0x2000268c

08015788 <acos>:
 8015788:	b538      	push	{r3, r4, r5, lr}
 801578a:	ed2d 8b02 	vpush	{d8}
 801578e:	ec55 4b10 	vmov	r4, r5, d0
 8015792:	f000 f9b9 	bl	8015b08 <__ieee754_acos>
 8015796:	4622      	mov	r2, r4
 8015798:	462b      	mov	r3, r5
 801579a:	4620      	mov	r0, r4
 801579c:	4629      	mov	r1, r5
 801579e:	eeb0 8a40 	vmov.f32	s16, s0
 80157a2:	eef0 8a60 	vmov.f32	s17, s1
 80157a6:	f7eb f9e9 	bl	8000b7c <__aeabi_dcmpun>
 80157aa:	b9a8      	cbnz	r0, 80157d8 <acos+0x50>
 80157ac:	ec45 4b10 	vmov	d0, r4, r5
 80157b0:	f000 f8ba 	bl	8015928 <fabs>
 80157b4:	4b0c      	ldr	r3, [pc, #48]	@ (80157e8 <acos+0x60>)
 80157b6:	ec51 0b10 	vmov	r0, r1, d0
 80157ba:	2200      	movs	r2, #0
 80157bc:	f7eb f9d4 	bl	8000b68 <__aeabi_dcmpgt>
 80157c0:	b150      	cbz	r0, 80157d8 <acos+0x50>
 80157c2:	f7fc f86d 	bl	80118a0 <__errno>
 80157c6:	ecbd 8b02 	vpop	{d8}
 80157ca:	2321      	movs	r3, #33	@ 0x21
 80157cc:	6003      	str	r3, [r0, #0]
 80157ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80157d2:	4806      	ldr	r0, [pc, #24]	@ (80157ec <acos+0x64>)
 80157d4:	f7ff b8e8 	b.w	80149a8 <nan>
 80157d8:	eeb0 0a48 	vmov.f32	s0, s16
 80157dc:	eef0 0a68 	vmov.f32	s1, s17
 80157e0:	ecbd 8b02 	vpop	{d8}
 80157e4:	bd38      	pop	{r3, r4, r5, pc}
 80157e6:	bf00      	nop
 80157e8:	3ff00000 	.word	0x3ff00000
 80157ec:	08017370 	.word	0x08017370

080157f0 <pow>:
 80157f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157f2:	ed2d 8b02 	vpush	{d8}
 80157f6:	eeb0 8a40 	vmov.f32	s16, s0
 80157fa:	eef0 8a60 	vmov.f32	s17, s1
 80157fe:	ec55 4b11 	vmov	r4, r5, d1
 8015802:	f000 fbdd 	bl	8015fc0 <__ieee754_pow>
 8015806:	4622      	mov	r2, r4
 8015808:	462b      	mov	r3, r5
 801580a:	4620      	mov	r0, r4
 801580c:	4629      	mov	r1, r5
 801580e:	ec57 6b10 	vmov	r6, r7, d0
 8015812:	f7eb f9b3 	bl	8000b7c <__aeabi_dcmpun>
 8015816:	2800      	cmp	r0, #0
 8015818:	d13b      	bne.n	8015892 <pow+0xa2>
 801581a:	ec51 0b18 	vmov	r0, r1, d8
 801581e:	2200      	movs	r2, #0
 8015820:	2300      	movs	r3, #0
 8015822:	f7eb f979 	bl	8000b18 <__aeabi_dcmpeq>
 8015826:	b1b8      	cbz	r0, 8015858 <pow+0x68>
 8015828:	2200      	movs	r2, #0
 801582a:	2300      	movs	r3, #0
 801582c:	4620      	mov	r0, r4
 801582e:	4629      	mov	r1, r5
 8015830:	f7eb f972 	bl	8000b18 <__aeabi_dcmpeq>
 8015834:	2800      	cmp	r0, #0
 8015836:	d146      	bne.n	80158c6 <pow+0xd6>
 8015838:	ec45 4b10 	vmov	d0, r4, r5
 801583c:	f000 f87c 	bl	8015938 <finite>
 8015840:	b338      	cbz	r0, 8015892 <pow+0xa2>
 8015842:	2200      	movs	r2, #0
 8015844:	2300      	movs	r3, #0
 8015846:	4620      	mov	r0, r4
 8015848:	4629      	mov	r1, r5
 801584a:	f7eb f96f 	bl	8000b2c <__aeabi_dcmplt>
 801584e:	b300      	cbz	r0, 8015892 <pow+0xa2>
 8015850:	f7fc f826 	bl	80118a0 <__errno>
 8015854:	2322      	movs	r3, #34	@ 0x22
 8015856:	e01b      	b.n	8015890 <pow+0xa0>
 8015858:	ec47 6b10 	vmov	d0, r6, r7
 801585c:	f000 f86c 	bl	8015938 <finite>
 8015860:	b9e0      	cbnz	r0, 801589c <pow+0xac>
 8015862:	eeb0 0a48 	vmov.f32	s0, s16
 8015866:	eef0 0a68 	vmov.f32	s1, s17
 801586a:	f000 f865 	bl	8015938 <finite>
 801586e:	b1a8      	cbz	r0, 801589c <pow+0xac>
 8015870:	ec45 4b10 	vmov	d0, r4, r5
 8015874:	f000 f860 	bl	8015938 <finite>
 8015878:	b180      	cbz	r0, 801589c <pow+0xac>
 801587a:	4632      	mov	r2, r6
 801587c:	463b      	mov	r3, r7
 801587e:	4630      	mov	r0, r6
 8015880:	4639      	mov	r1, r7
 8015882:	f7eb f97b 	bl	8000b7c <__aeabi_dcmpun>
 8015886:	2800      	cmp	r0, #0
 8015888:	d0e2      	beq.n	8015850 <pow+0x60>
 801588a:	f7fc f809 	bl	80118a0 <__errno>
 801588e:	2321      	movs	r3, #33	@ 0x21
 8015890:	6003      	str	r3, [r0, #0]
 8015892:	ecbd 8b02 	vpop	{d8}
 8015896:	ec47 6b10 	vmov	d0, r6, r7
 801589a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801589c:	2200      	movs	r2, #0
 801589e:	2300      	movs	r3, #0
 80158a0:	4630      	mov	r0, r6
 80158a2:	4639      	mov	r1, r7
 80158a4:	f7eb f938 	bl	8000b18 <__aeabi_dcmpeq>
 80158a8:	2800      	cmp	r0, #0
 80158aa:	d0f2      	beq.n	8015892 <pow+0xa2>
 80158ac:	eeb0 0a48 	vmov.f32	s0, s16
 80158b0:	eef0 0a68 	vmov.f32	s1, s17
 80158b4:	f000 f840 	bl	8015938 <finite>
 80158b8:	2800      	cmp	r0, #0
 80158ba:	d0ea      	beq.n	8015892 <pow+0xa2>
 80158bc:	ec45 4b10 	vmov	d0, r4, r5
 80158c0:	f000 f83a 	bl	8015938 <finite>
 80158c4:	e7c3      	b.n	801584e <pow+0x5e>
 80158c6:	4f01      	ldr	r7, [pc, #4]	@ (80158cc <pow+0xdc>)
 80158c8:	2600      	movs	r6, #0
 80158ca:	e7e2      	b.n	8015892 <pow+0xa2>
 80158cc:	3ff00000 	.word	0x3ff00000

080158d0 <sqrt>:
 80158d0:	b538      	push	{r3, r4, r5, lr}
 80158d2:	ed2d 8b02 	vpush	{d8}
 80158d6:	ec55 4b10 	vmov	r4, r5, d0
 80158da:	f000 f839 	bl	8015950 <__ieee754_sqrt>
 80158de:	4622      	mov	r2, r4
 80158e0:	462b      	mov	r3, r5
 80158e2:	4620      	mov	r0, r4
 80158e4:	4629      	mov	r1, r5
 80158e6:	eeb0 8a40 	vmov.f32	s16, s0
 80158ea:	eef0 8a60 	vmov.f32	s17, s1
 80158ee:	f7eb f945 	bl	8000b7c <__aeabi_dcmpun>
 80158f2:	b990      	cbnz	r0, 801591a <sqrt+0x4a>
 80158f4:	2200      	movs	r2, #0
 80158f6:	2300      	movs	r3, #0
 80158f8:	4620      	mov	r0, r4
 80158fa:	4629      	mov	r1, r5
 80158fc:	f7eb f916 	bl	8000b2c <__aeabi_dcmplt>
 8015900:	b158      	cbz	r0, 801591a <sqrt+0x4a>
 8015902:	f7fb ffcd 	bl	80118a0 <__errno>
 8015906:	2321      	movs	r3, #33	@ 0x21
 8015908:	6003      	str	r3, [r0, #0]
 801590a:	2200      	movs	r2, #0
 801590c:	2300      	movs	r3, #0
 801590e:	4610      	mov	r0, r2
 8015910:	4619      	mov	r1, r3
 8015912:	f7ea ffc3 	bl	800089c <__aeabi_ddiv>
 8015916:	ec41 0b18 	vmov	d8, r0, r1
 801591a:	eeb0 0a48 	vmov.f32	s0, s16
 801591e:	eef0 0a68 	vmov.f32	s1, s17
 8015922:	ecbd 8b02 	vpop	{d8}
 8015926:	bd38      	pop	{r3, r4, r5, pc}

08015928 <fabs>:
 8015928:	ec51 0b10 	vmov	r0, r1, d0
 801592c:	4602      	mov	r2, r0
 801592e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015932:	ec43 2b10 	vmov	d0, r2, r3
 8015936:	4770      	bx	lr

08015938 <finite>:
 8015938:	b082      	sub	sp, #8
 801593a:	ed8d 0b00 	vstr	d0, [sp]
 801593e:	9801      	ldr	r0, [sp, #4]
 8015940:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8015944:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8015948:	0fc0      	lsrs	r0, r0, #31
 801594a:	b002      	add	sp, #8
 801594c:	4770      	bx	lr
	...

08015950 <__ieee754_sqrt>:
 8015950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015954:	4a68      	ldr	r2, [pc, #416]	@ (8015af8 <__ieee754_sqrt+0x1a8>)
 8015956:	ec55 4b10 	vmov	r4, r5, d0
 801595a:	43aa      	bics	r2, r5
 801595c:	462b      	mov	r3, r5
 801595e:	4621      	mov	r1, r4
 8015960:	d110      	bne.n	8015984 <__ieee754_sqrt+0x34>
 8015962:	4622      	mov	r2, r4
 8015964:	4620      	mov	r0, r4
 8015966:	4629      	mov	r1, r5
 8015968:	f7ea fe6e 	bl	8000648 <__aeabi_dmul>
 801596c:	4602      	mov	r2, r0
 801596e:	460b      	mov	r3, r1
 8015970:	4620      	mov	r0, r4
 8015972:	4629      	mov	r1, r5
 8015974:	f7ea fcb2 	bl	80002dc <__adddf3>
 8015978:	4604      	mov	r4, r0
 801597a:	460d      	mov	r5, r1
 801597c:	ec45 4b10 	vmov	d0, r4, r5
 8015980:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015984:	2d00      	cmp	r5, #0
 8015986:	dc0e      	bgt.n	80159a6 <__ieee754_sqrt+0x56>
 8015988:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801598c:	4322      	orrs	r2, r4
 801598e:	d0f5      	beq.n	801597c <__ieee754_sqrt+0x2c>
 8015990:	b19d      	cbz	r5, 80159ba <__ieee754_sqrt+0x6a>
 8015992:	4622      	mov	r2, r4
 8015994:	4620      	mov	r0, r4
 8015996:	4629      	mov	r1, r5
 8015998:	f7ea fc9e 	bl	80002d8 <__aeabi_dsub>
 801599c:	4602      	mov	r2, r0
 801599e:	460b      	mov	r3, r1
 80159a0:	f7ea ff7c 	bl	800089c <__aeabi_ddiv>
 80159a4:	e7e8      	b.n	8015978 <__ieee754_sqrt+0x28>
 80159a6:	152a      	asrs	r2, r5, #20
 80159a8:	d115      	bne.n	80159d6 <__ieee754_sqrt+0x86>
 80159aa:	2000      	movs	r0, #0
 80159ac:	e009      	b.n	80159c2 <__ieee754_sqrt+0x72>
 80159ae:	0acb      	lsrs	r3, r1, #11
 80159b0:	3a15      	subs	r2, #21
 80159b2:	0549      	lsls	r1, r1, #21
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d0fa      	beq.n	80159ae <__ieee754_sqrt+0x5e>
 80159b8:	e7f7      	b.n	80159aa <__ieee754_sqrt+0x5a>
 80159ba:	462a      	mov	r2, r5
 80159bc:	e7fa      	b.n	80159b4 <__ieee754_sqrt+0x64>
 80159be:	005b      	lsls	r3, r3, #1
 80159c0:	3001      	adds	r0, #1
 80159c2:	02dc      	lsls	r4, r3, #11
 80159c4:	d5fb      	bpl.n	80159be <__ieee754_sqrt+0x6e>
 80159c6:	1e44      	subs	r4, r0, #1
 80159c8:	1b12      	subs	r2, r2, r4
 80159ca:	f1c0 0420 	rsb	r4, r0, #32
 80159ce:	fa21 f404 	lsr.w	r4, r1, r4
 80159d2:	4323      	orrs	r3, r4
 80159d4:	4081      	lsls	r1, r0
 80159d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80159da:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80159de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80159e2:	07d2      	lsls	r2, r2, #31
 80159e4:	bf5c      	itt	pl
 80159e6:	005b      	lslpl	r3, r3, #1
 80159e8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80159ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80159f0:	bf58      	it	pl
 80159f2:	0049      	lslpl	r1, r1, #1
 80159f4:	2600      	movs	r6, #0
 80159f6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80159fa:	106d      	asrs	r5, r5, #1
 80159fc:	0049      	lsls	r1, r1, #1
 80159fe:	2016      	movs	r0, #22
 8015a00:	4632      	mov	r2, r6
 8015a02:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8015a06:	1917      	adds	r7, r2, r4
 8015a08:	429f      	cmp	r7, r3
 8015a0a:	bfde      	ittt	le
 8015a0c:	193a      	addle	r2, r7, r4
 8015a0e:	1bdb      	suble	r3, r3, r7
 8015a10:	1936      	addle	r6, r6, r4
 8015a12:	0fcf      	lsrs	r7, r1, #31
 8015a14:	3801      	subs	r0, #1
 8015a16:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8015a1a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015a1e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015a22:	d1f0      	bne.n	8015a06 <__ieee754_sqrt+0xb6>
 8015a24:	4604      	mov	r4, r0
 8015a26:	2720      	movs	r7, #32
 8015a28:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8015a2c:	429a      	cmp	r2, r3
 8015a2e:	eb00 0e0c 	add.w	lr, r0, ip
 8015a32:	db02      	blt.n	8015a3a <__ieee754_sqrt+0xea>
 8015a34:	d113      	bne.n	8015a5e <__ieee754_sqrt+0x10e>
 8015a36:	458e      	cmp	lr, r1
 8015a38:	d811      	bhi.n	8015a5e <__ieee754_sqrt+0x10e>
 8015a3a:	f1be 0f00 	cmp.w	lr, #0
 8015a3e:	eb0e 000c 	add.w	r0, lr, ip
 8015a42:	da42      	bge.n	8015aca <__ieee754_sqrt+0x17a>
 8015a44:	2800      	cmp	r0, #0
 8015a46:	db40      	blt.n	8015aca <__ieee754_sqrt+0x17a>
 8015a48:	f102 0801 	add.w	r8, r2, #1
 8015a4c:	1a9b      	subs	r3, r3, r2
 8015a4e:	458e      	cmp	lr, r1
 8015a50:	bf88      	it	hi
 8015a52:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8015a56:	eba1 010e 	sub.w	r1, r1, lr
 8015a5a:	4464      	add	r4, ip
 8015a5c:	4642      	mov	r2, r8
 8015a5e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8015a62:	3f01      	subs	r7, #1
 8015a64:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8015a68:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015a6c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8015a70:	d1dc      	bne.n	8015a2c <__ieee754_sqrt+0xdc>
 8015a72:	4319      	orrs	r1, r3
 8015a74:	d01b      	beq.n	8015aae <__ieee754_sqrt+0x15e>
 8015a76:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8015afc <__ieee754_sqrt+0x1ac>
 8015a7a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8015b00 <__ieee754_sqrt+0x1b0>
 8015a7e:	e9da 0100 	ldrd	r0, r1, [sl]
 8015a82:	e9db 2300 	ldrd	r2, r3, [fp]
 8015a86:	f7ea fc27 	bl	80002d8 <__aeabi_dsub>
 8015a8a:	e9da 8900 	ldrd	r8, r9, [sl]
 8015a8e:	4602      	mov	r2, r0
 8015a90:	460b      	mov	r3, r1
 8015a92:	4640      	mov	r0, r8
 8015a94:	4649      	mov	r1, r9
 8015a96:	f7eb f853 	bl	8000b40 <__aeabi_dcmple>
 8015a9a:	b140      	cbz	r0, 8015aae <__ieee754_sqrt+0x15e>
 8015a9c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8015aa0:	e9da 0100 	ldrd	r0, r1, [sl]
 8015aa4:	e9db 2300 	ldrd	r2, r3, [fp]
 8015aa8:	d111      	bne.n	8015ace <__ieee754_sqrt+0x17e>
 8015aaa:	3601      	adds	r6, #1
 8015aac:	463c      	mov	r4, r7
 8015aae:	1072      	asrs	r2, r6, #1
 8015ab0:	0863      	lsrs	r3, r4, #1
 8015ab2:	07f1      	lsls	r1, r6, #31
 8015ab4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8015ab8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8015abc:	bf48      	it	mi
 8015abe:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8015ac2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	e756      	b.n	8015978 <__ieee754_sqrt+0x28>
 8015aca:	4690      	mov	r8, r2
 8015acc:	e7be      	b.n	8015a4c <__ieee754_sqrt+0xfc>
 8015ace:	f7ea fc05 	bl	80002dc <__adddf3>
 8015ad2:	e9da 8900 	ldrd	r8, r9, [sl]
 8015ad6:	4602      	mov	r2, r0
 8015ad8:	460b      	mov	r3, r1
 8015ada:	4640      	mov	r0, r8
 8015adc:	4649      	mov	r1, r9
 8015ade:	f7eb f825 	bl	8000b2c <__aeabi_dcmplt>
 8015ae2:	b120      	cbz	r0, 8015aee <__ieee754_sqrt+0x19e>
 8015ae4:	1ca0      	adds	r0, r4, #2
 8015ae6:	bf08      	it	eq
 8015ae8:	3601      	addeq	r6, #1
 8015aea:	3402      	adds	r4, #2
 8015aec:	e7df      	b.n	8015aae <__ieee754_sqrt+0x15e>
 8015aee:	1c63      	adds	r3, r4, #1
 8015af0:	f023 0401 	bic.w	r4, r3, #1
 8015af4:	e7db      	b.n	8015aae <__ieee754_sqrt+0x15e>
 8015af6:	bf00      	nop
 8015af8:	7ff00000 	.word	0x7ff00000
 8015afc:	20000390 	.word	0x20000390
 8015b00:	20000388 	.word	0x20000388
 8015b04:	00000000 	.word	0x00000000

08015b08 <__ieee754_acos>:
 8015b08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b0c:	ec55 4b10 	vmov	r4, r5, d0
 8015b10:	49b7      	ldr	r1, [pc, #732]	@ (8015df0 <__ieee754_acos+0x2e8>)
 8015b12:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8015b16:	428b      	cmp	r3, r1
 8015b18:	d919      	bls.n	8015b4e <__ieee754_acos+0x46>
 8015b1a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8015b1e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8015b22:	4323      	orrs	r3, r4
 8015b24:	d106      	bne.n	8015b34 <__ieee754_acos+0x2c>
 8015b26:	2d00      	cmp	r5, #0
 8015b28:	f340 8210 	ble.w	8015f4c <__ieee754_acos+0x444>
 8015b2c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8015d80 <__ieee754_acos+0x278>
 8015b30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b34:	4622      	mov	r2, r4
 8015b36:	462b      	mov	r3, r5
 8015b38:	4620      	mov	r0, r4
 8015b3a:	4629      	mov	r1, r5
 8015b3c:	f7ea fbcc 	bl	80002d8 <__aeabi_dsub>
 8015b40:	4602      	mov	r2, r0
 8015b42:	460b      	mov	r3, r1
 8015b44:	f7ea feaa 	bl	800089c <__aeabi_ddiv>
 8015b48:	ec41 0b10 	vmov	d0, r0, r1
 8015b4c:	e7f0      	b.n	8015b30 <__ieee754_acos+0x28>
 8015b4e:	49a9      	ldr	r1, [pc, #676]	@ (8015df4 <__ieee754_acos+0x2ec>)
 8015b50:	428b      	cmp	r3, r1
 8015b52:	f200 8085 	bhi.w	8015c60 <__ieee754_acos+0x158>
 8015b56:	4aa8      	ldr	r2, [pc, #672]	@ (8015df8 <__ieee754_acos+0x2f0>)
 8015b58:	4293      	cmp	r3, r2
 8015b5a:	f240 81fa 	bls.w	8015f52 <__ieee754_acos+0x44a>
 8015b5e:	4622      	mov	r2, r4
 8015b60:	462b      	mov	r3, r5
 8015b62:	4620      	mov	r0, r4
 8015b64:	4629      	mov	r1, r5
 8015b66:	f7ea fd6f 	bl	8000648 <__aeabi_dmul>
 8015b6a:	a387      	add	r3, pc, #540	@ (adr r3, 8015d88 <__ieee754_acos+0x280>)
 8015b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b70:	4606      	mov	r6, r0
 8015b72:	460f      	mov	r7, r1
 8015b74:	f7ea fd68 	bl	8000648 <__aeabi_dmul>
 8015b78:	a385      	add	r3, pc, #532	@ (adr r3, 8015d90 <__ieee754_acos+0x288>)
 8015b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b7e:	f7ea fbad 	bl	80002dc <__adddf3>
 8015b82:	4632      	mov	r2, r6
 8015b84:	463b      	mov	r3, r7
 8015b86:	f7ea fd5f 	bl	8000648 <__aeabi_dmul>
 8015b8a:	a383      	add	r3, pc, #524	@ (adr r3, 8015d98 <__ieee754_acos+0x290>)
 8015b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b90:	f7ea fba2 	bl	80002d8 <__aeabi_dsub>
 8015b94:	4632      	mov	r2, r6
 8015b96:	463b      	mov	r3, r7
 8015b98:	f7ea fd56 	bl	8000648 <__aeabi_dmul>
 8015b9c:	a380      	add	r3, pc, #512	@ (adr r3, 8015da0 <__ieee754_acos+0x298>)
 8015b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ba2:	f7ea fb9b 	bl	80002dc <__adddf3>
 8015ba6:	4632      	mov	r2, r6
 8015ba8:	463b      	mov	r3, r7
 8015baa:	f7ea fd4d 	bl	8000648 <__aeabi_dmul>
 8015bae:	a37e      	add	r3, pc, #504	@ (adr r3, 8015da8 <__ieee754_acos+0x2a0>)
 8015bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bb4:	f7ea fb90 	bl	80002d8 <__aeabi_dsub>
 8015bb8:	4632      	mov	r2, r6
 8015bba:	463b      	mov	r3, r7
 8015bbc:	f7ea fd44 	bl	8000648 <__aeabi_dmul>
 8015bc0:	a37b      	add	r3, pc, #492	@ (adr r3, 8015db0 <__ieee754_acos+0x2a8>)
 8015bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bc6:	f7ea fb89 	bl	80002dc <__adddf3>
 8015bca:	4632      	mov	r2, r6
 8015bcc:	463b      	mov	r3, r7
 8015bce:	f7ea fd3b 	bl	8000648 <__aeabi_dmul>
 8015bd2:	a379      	add	r3, pc, #484	@ (adr r3, 8015db8 <__ieee754_acos+0x2b0>)
 8015bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bd8:	4680      	mov	r8, r0
 8015bda:	4689      	mov	r9, r1
 8015bdc:	4630      	mov	r0, r6
 8015bde:	4639      	mov	r1, r7
 8015be0:	f7ea fd32 	bl	8000648 <__aeabi_dmul>
 8015be4:	a376      	add	r3, pc, #472	@ (adr r3, 8015dc0 <__ieee754_acos+0x2b8>)
 8015be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bea:	f7ea fb75 	bl	80002d8 <__aeabi_dsub>
 8015bee:	4632      	mov	r2, r6
 8015bf0:	463b      	mov	r3, r7
 8015bf2:	f7ea fd29 	bl	8000648 <__aeabi_dmul>
 8015bf6:	a374      	add	r3, pc, #464	@ (adr r3, 8015dc8 <__ieee754_acos+0x2c0>)
 8015bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bfc:	f7ea fb6e 	bl	80002dc <__adddf3>
 8015c00:	4632      	mov	r2, r6
 8015c02:	463b      	mov	r3, r7
 8015c04:	f7ea fd20 	bl	8000648 <__aeabi_dmul>
 8015c08:	a371      	add	r3, pc, #452	@ (adr r3, 8015dd0 <__ieee754_acos+0x2c8>)
 8015c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c0e:	f7ea fb63 	bl	80002d8 <__aeabi_dsub>
 8015c12:	4632      	mov	r2, r6
 8015c14:	463b      	mov	r3, r7
 8015c16:	f7ea fd17 	bl	8000648 <__aeabi_dmul>
 8015c1a:	4b78      	ldr	r3, [pc, #480]	@ (8015dfc <__ieee754_acos+0x2f4>)
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	f7ea fb5d 	bl	80002dc <__adddf3>
 8015c22:	4602      	mov	r2, r0
 8015c24:	460b      	mov	r3, r1
 8015c26:	4640      	mov	r0, r8
 8015c28:	4649      	mov	r1, r9
 8015c2a:	f7ea fe37 	bl	800089c <__aeabi_ddiv>
 8015c2e:	4622      	mov	r2, r4
 8015c30:	462b      	mov	r3, r5
 8015c32:	f7ea fd09 	bl	8000648 <__aeabi_dmul>
 8015c36:	4602      	mov	r2, r0
 8015c38:	460b      	mov	r3, r1
 8015c3a:	a167      	add	r1, pc, #412	@ (adr r1, 8015dd8 <__ieee754_acos+0x2d0>)
 8015c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c40:	f7ea fb4a 	bl	80002d8 <__aeabi_dsub>
 8015c44:	4602      	mov	r2, r0
 8015c46:	460b      	mov	r3, r1
 8015c48:	4620      	mov	r0, r4
 8015c4a:	4629      	mov	r1, r5
 8015c4c:	f7ea fb44 	bl	80002d8 <__aeabi_dsub>
 8015c50:	4602      	mov	r2, r0
 8015c52:	460b      	mov	r3, r1
 8015c54:	a162      	add	r1, pc, #392	@ (adr r1, 8015de0 <__ieee754_acos+0x2d8>)
 8015c56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c5a:	f7ea fb3d 	bl	80002d8 <__aeabi_dsub>
 8015c5e:	e773      	b.n	8015b48 <__ieee754_acos+0x40>
 8015c60:	2d00      	cmp	r5, #0
 8015c62:	f280 80cf 	bge.w	8015e04 <__ieee754_acos+0x2fc>
 8015c66:	4b65      	ldr	r3, [pc, #404]	@ (8015dfc <__ieee754_acos+0x2f4>)
 8015c68:	2200      	movs	r2, #0
 8015c6a:	4620      	mov	r0, r4
 8015c6c:	4629      	mov	r1, r5
 8015c6e:	f7ea fb35 	bl	80002dc <__adddf3>
 8015c72:	4b63      	ldr	r3, [pc, #396]	@ (8015e00 <__ieee754_acos+0x2f8>)
 8015c74:	2200      	movs	r2, #0
 8015c76:	f7ea fce7 	bl	8000648 <__aeabi_dmul>
 8015c7a:	a343      	add	r3, pc, #268	@ (adr r3, 8015d88 <__ieee754_acos+0x280>)
 8015c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c80:	4604      	mov	r4, r0
 8015c82:	460d      	mov	r5, r1
 8015c84:	f7ea fce0 	bl	8000648 <__aeabi_dmul>
 8015c88:	a341      	add	r3, pc, #260	@ (adr r3, 8015d90 <__ieee754_acos+0x288>)
 8015c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c8e:	f7ea fb25 	bl	80002dc <__adddf3>
 8015c92:	4622      	mov	r2, r4
 8015c94:	462b      	mov	r3, r5
 8015c96:	f7ea fcd7 	bl	8000648 <__aeabi_dmul>
 8015c9a:	a33f      	add	r3, pc, #252	@ (adr r3, 8015d98 <__ieee754_acos+0x290>)
 8015c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ca0:	f7ea fb1a 	bl	80002d8 <__aeabi_dsub>
 8015ca4:	4622      	mov	r2, r4
 8015ca6:	462b      	mov	r3, r5
 8015ca8:	f7ea fcce 	bl	8000648 <__aeabi_dmul>
 8015cac:	a33c      	add	r3, pc, #240	@ (adr r3, 8015da0 <__ieee754_acos+0x298>)
 8015cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cb2:	f7ea fb13 	bl	80002dc <__adddf3>
 8015cb6:	4622      	mov	r2, r4
 8015cb8:	462b      	mov	r3, r5
 8015cba:	f7ea fcc5 	bl	8000648 <__aeabi_dmul>
 8015cbe:	a33a      	add	r3, pc, #232	@ (adr r3, 8015da8 <__ieee754_acos+0x2a0>)
 8015cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cc4:	f7ea fb08 	bl	80002d8 <__aeabi_dsub>
 8015cc8:	4622      	mov	r2, r4
 8015cca:	462b      	mov	r3, r5
 8015ccc:	f7ea fcbc 	bl	8000648 <__aeabi_dmul>
 8015cd0:	a337      	add	r3, pc, #220	@ (adr r3, 8015db0 <__ieee754_acos+0x2a8>)
 8015cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cd6:	f7ea fb01 	bl	80002dc <__adddf3>
 8015cda:	4622      	mov	r2, r4
 8015cdc:	462b      	mov	r3, r5
 8015cde:	f7ea fcb3 	bl	8000648 <__aeabi_dmul>
 8015ce2:	a335      	add	r3, pc, #212	@ (adr r3, 8015db8 <__ieee754_acos+0x2b0>)
 8015ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ce8:	4606      	mov	r6, r0
 8015cea:	460f      	mov	r7, r1
 8015cec:	4620      	mov	r0, r4
 8015cee:	4629      	mov	r1, r5
 8015cf0:	f7ea fcaa 	bl	8000648 <__aeabi_dmul>
 8015cf4:	a332      	add	r3, pc, #200	@ (adr r3, 8015dc0 <__ieee754_acos+0x2b8>)
 8015cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cfa:	f7ea faed 	bl	80002d8 <__aeabi_dsub>
 8015cfe:	4622      	mov	r2, r4
 8015d00:	462b      	mov	r3, r5
 8015d02:	f7ea fca1 	bl	8000648 <__aeabi_dmul>
 8015d06:	a330      	add	r3, pc, #192	@ (adr r3, 8015dc8 <__ieee754_acos+0x2c0>)
 8015d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d0c:	f7ea fae6 	bl	80002dc <__adddf3>
 8015d10:	4622      	mov	r2, r4
 8015d12:	462b      	mov	r3, r5
 8015d14:	f7ea fc98 	bl	8000648 <__aeabi_dmul>
 8015d18:	a32d      	add	r3, pc, #180	@ (adr r3, 8015dd0 <__ieee754_acos+0x2c8>)
 8015d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d1e:	f7ea fadb 	bl	80002d8 <__aeabi_dsub>
 8015d22:	4622      	mov	r2, r4
 8015d24:	462b      	mov	r3, r5
 8015d26:	f7ea fc8f 	bl	8000648 <__aeabi_dmul>
 8015d2a:	4b34      	ldr	r3, [pc, #208]	@ (8015dfc <__ieee754_acos+0x2f4>)
 8015d2c:	2200      	movs	r2, #0
 8015d2e:	f7ea fad5 	bl	80002dc <__adddf3>
 8015d32:	ec45 4b10 	vmov	d0, r4, r5
 8015d36:	4680      	mov	r8, r0
 8015d38:	4689      	mov	r9, r1
 8015d3a:	f7ff fe09 	bl	8015950 <__ieee754_sqrt>
 8015d3e:	ec55 4b10 	vmov	r4, r5, d0
 8015d42:	4642      	mov	r2, r8
 8015d44:	464b      	mov	r3, r9
 8015d46:	4630      	mov	r0, r6
 8015d48:	4639      	mov	r1, r7
 8015d4a:	f7ea fda7 	bl	800089c <__aeabi_ddiv>
 8015d4e:	4622      	mov	r2, r4
 8015d50:	462b      	mov	r3, r5
 8015d52:	f7ea fc79 	bl	8000648 <__aeabi_dmul>
 8015d56:	a320      	add	r3, pc, #128	@ (adr r3, 8015dd8 <__ieee754_acos+0x2d0>)
 8015d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d5c:	f7ea fabc 	bl	80002d8 <__aeabi_dsub>
 8015d60:	4622      	mov	r2, r4
 8015d62:	462b      	mov	r3, r5
 8015d64:	f7ea faba 	bl	80002dc <__adddf3>
 8015d68:	4602      	mov	r2, r0
 8015d6a:	460b      	mov	r3, r1
 8015d6c:	f7ea fab6 	bl	80002dc <__adddf3>
 8015d70:	4602      	mov	r2, r0
 8015d72:	460b      	mov	r3, r1
 8015d74:	a11c      	add	r1, pc, #112	@ (adr r1, 8015de8 <__ieee754_acos+0x2e0>)
 8015d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015d7a:	e76e      	b.n	8015c5a <__ieee754_acos+0x152>
 8015d7c:	f3af 8000 	nop.w
	...
 8015d88:	0dfdf709 	.word	0x0dfdf709
 8015d8c:	3f023de1 	.word	0x3f023de1
 8015d90:	7501b288 	.word	0x7501b288
 8015d94:	3f49efe0 	.word	0x3f49efe0
 8015d98:	b5688f3b 	.word	0xb5688f3b
 8015d9c:	3fa48228 	.word	0x3fa48228
 8015da0:	0e884455 	.word	0x0e884455
 8015da4:	3fc9c155 	.word	0x3fc9c155
 8015da8:	03eb6f7d 	.word	0x03eb6f7d
 8015dac:	3fd4d612 	.word	0x3fd4d612
 8015db0:	55555555 	.word	0x55555555
 8015db4:	3fc55555 	.word	0x3fc55555
 8015db8:	b12e9282 	.word	0xb12e9282
 8015dbc:	3fb3b8c5 	.word	0x3fb3b8c5
 8015dc0:	1b8d0159 	.word	0x1b8d0159
 8015dc4:	3fe6066c 	.word	0x3fe6066c
 8015dc8:	9c598ac8 	.word	0x9c598ac8
 8015dcc:	40002ae5 	.word	0x40002ae5
 8015dd0:	1c8a2d4b 	.word	0x1c8a2d4b
 8015dd4:	40033a27 	.word	0x40033a27
 8015dd8:	33145c07 	.word	0x33145c07
 8015ddc:	3c91a626 	.word	0x3c91a626
 8015de0:	54442d18 	.word	0x54442d18
 8015de4:	3ff921fb 	.word	0x3ff921fb
 8015de8:	54442d18 	.word	0x54442d18
 8015dec:	400921fb 	.word	0x400921fb
 8015df0:	3fefffff 	.word	0x3fefffff
 8015df4:	3fdfffff 	.word	0x3fdfffff
 8015df8:	3c600000 	.word	0x3c600000
 8015dfc:	3ff00000 	.word	0x3ff00000
 8015e00:	3fe00000 	.word	0x3fe00000
 8015e04:	4622      	mov	r2, r4
 8015e06:	462b      	mov	r3, r5
 8015e08:	496b      	ldr	r1, [pc, #428]	@ (8015fb8 <__ieee754_acos+0x4b0>)
 8015e0a:	2000      	movs	r0, #0
 8015e0c:	f7ea fa64 	bl	80002d8 <__aeabi_dsub>
 8015e10:	4b6a      	ldr	r3, [pc, #424]	@ (8015fbc <__ieee754_acos+0x4b4>)
 8015e12:	2200      	movs	r2, #0
 8015e14:	f7ea fc18 	bl	8000648 <__aeabi_dmul>
 8015e18:	4604      	mov	r4, r0
 8015e1a:	460d      	mov	r5, r1
 8015e1c:	ec45 4b10 	vmov	d0, r4, r5
 8015e20:	f7ff fd96 	bl	8015950 <__ieee754_sqrt>
 8015e24:	a34c      	add	r3, pc, #304	@ (adr r3, 8015f58 <__ieee754_acos+0x450>)
 8015e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e2a:	4620      	mov	r0, r4
 8015e2c:	4629      	mov	r1, r5
 8015e2e:	ec59 8b10 	vmov	r8, r9, d0
 8015e32:	f7ea fc09 	bl	8000648 <__aeabi_dmul>
 8015e36:	a34a      	add	r3, pc, #296	@ (adr r3, 8015f60 <__ieee754_acos+0x458>)
 8015e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e3c:	f7ea fa4e 	bl	80002dc <__adddf3>
 8015e40:	4622      	mov	r2, r4
 8015e42:	462b      	mov	r3, r5
 8015e44:	f7ea fc00 	bl	8000648 <__aeabi_dmul>
 8015e48:	a347      	add	r3, pc, #284	@ (adr r3, 8015f68 <__ieee754_acos+0x460>)
 8015e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e4e:	f7ea fa43 	bl	80002d8 <__aeabi_dsub>
 8015e52:	4622      	mov	r2, r4
 8015e54:	462b      	mov	r3, r5
 8015e56:	f7ea fbf7 	bl	8000648 <__aeabi_dmul>
 8015e5a:	a345      	add	r3, pc, #276	@ (adr r3, 8015f70 <__ieee754_acos+0x468>)
 8015e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e60:	f7ea fa3c 	bl	80002dc <__adddf3>
 8015e64:	4622      	mov	r2, r4
 8015e66:	462b      	mov	r3, r5
 8015e68:	f7ea fbee 	bl	8000648 <__aeabi_dmul>
 8015e6c:	a342      	add	r3, pc, #264	@ (adr r3, 8015f78 <__ieee754_acos+0x470>)
 8015e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e72:	f7ea fa31 	bl	80002d8 <__aeabi_dsub>
 8015e76:	4622      	mov	r2, r4
 8015e78:	462b      	mov	r3, r5
 8015e7a:	f7ea fbe5 	bl	8000648 <__aeabi_dmul>
 8015e7e:	a340      	add	r3, pc, #256	@ (adr r3, 8015f80 <__ieee754_acos+0x478>)
 8015e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e84:	f7ea fa2a 	bl	80002dc <__adddf3>
 8015e88:	4622      	mov	r2, r4
 8015e8a:	462b      	mov	r3, r5
 8015e8c:	f7ea fbdc 	bl	8000648 <__aeabi_dmul>
 8015e90:	a33d      	add	r3, pc, #244	@ (adr r3, 8015f88 <__ieee754_acos+0x480>)
 8015e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e96:	4682      	mov	sl, r0
 8015e98:	468b      	mov	fp, r1
 8015e9a:	4620      	mov	r0, r4
 8015e9c:	4629      	mov	r1, r5
 8015e9e:	f7ea fbd3 	bl	8000648 <__aeabi_dmul>
 8015ea2:	a33b      	add	r3, pc, #236	@ (adr r3, 8015f90 <__ieee754_acos+0x488>)
 8015ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ea8:	f7ea fa16 	bl	80002d8 <__aeabi_dsub>
 8015eac:	4622      	mov	r2, r4
 8015eae:	462b      	mov	r3, r5
 8015eb0:	f7ea fbca 	bl	8000648 <__aeabi_dmul>
 8015eb4:	a338      	add	r3, pc, #224	@ (adr r3, 8015f98 <__ieee754_acos+0x490>)
 8015eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eba:	f7ea fa0f 	bl	80002dc <__adddf3>
 8015ebe:	4622      	mov	r2, r4
 8015ec0:	462b      	mov	r3, r5
 8015ec2:	f7ea fbc1 	bl	8000648 <__aeabi_dmul>
 8015ec6:	a336      	add	r3, pc, #216	@ (adr r3, 8015fa0 <__ieee754_acos+0x498>)
 8015ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ecc:	f7ea fa04 	bl	80002d8 <__aeabi_dsub>
 8015ed0:	4622      	mov	r2, r4
 8015ed2:	462b      	mov	r3, r5
 8015ed4:	f7ea fbb8 	bl	8000648 <__aeabi_dmul>
 8015ed8:	4b37      	ldr	r3, [pc, #220]	@ (8015fb8 <__ieee754_acos+0x4b0>)
 8015eda:	2200      	movs	r2, #0
 8015edc:	f7ea f9fe 	bl	80002dc <__adddf3>
 8015ee0:	4602      	mov	r2, r0
 8015ee2:	460b      	mov	r3, r1
 8015ee4:	4650      	mov	r0, sl
 8015ee6:	4659      	mov	r1, fp
 8015ee8:	f7ea fcd8 	bl	800089c <__aeabi_ddiv>
 8015eec:	4642      	mov	r2, r8
 8015eee:	464b      	mov	r3, r9
 8015ef0:	f7ea fbaa 	bl	8000648 <__aeabi_dmul>
 8015ef4:	2600      	movs	r6, #0
 8015ef6:	4682      	mov	sl, r0
 8015ef8:	468b      	mov	fp, r1
 8015efa:	4632      	mov	r2, r6
 8015efc:	464b      	mov	r3, r9
 8015efe:	4630      	mov	r0, r6
 8015f00:	4649      	mov	r1, r9
 8015f02:	f7ea fba1 	bl	8000648 <__aeabi_dmul>
 8015f06:	4602      	mov	r2, r0
 8015f08:	460b      	mov	r3, r1
 8015f0a:	4620      	mov	r0, r4
 8015f0c:	4629      	mov	r1, r5
 8015f0e:	f7ea f9e3 	bl	80002d8 <__aeabi_dsub>
 8015f12:	4632      	mov	r2, r6
 8015f14:	4604      	mov	r4, r0
 8015f16:	460d      	mov	r5, r1
 8015f18:	464b      	mov	r3, r9
 8015f1a:	4640      	mov	r0, r8
 8015f1c:	4649      	mov	r1, r9
 8015f1e:	f7ea f9dd 	bl	80002dc <__adddf3>
 8015f22:	4602      	mov	r2, r0
 8015f24:	460b      	mov	r3, r1
 8015f26:	4620      	mov	r0, r4
 8015f28:	4629      	mov	r1, r5
 8015f2a:	f7ea fcb7 	bl	800089c <__aeabi_ddiv>
 8015f2e:	4602      	mov	r2, r0
 8015f30:	460b      	mov	r3, r1
 8015f32:	4650      	mov	r0, sl
 8015f34:	4659      	mov	r1, fp
 8015f36:	f7ea f9d1 	bl	80002dc <__adddf3>
 8015f3a:	4632      	mov	r2, r6
 8015f3c:	464b      	mov	r3, r9
 8015f3e:	f7ea f9cd 	bl	80002dc <__adddf3>
 8015f42:	4602      	mov	r2, r0
 8015f44:	460b      	mov	r3, r1
 8015f46:	f7ea f9c9 	bl	80002dc <__adddf3>
 8015f4a:	e5fd      	b.n	8015b48 <__ieee754_acos+0x40>
 8015f4c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8015fa8 <__ieee754_acos+0x4a0>
 8015f50:	e5ee      	b.n	8015b30 <__ieee754_acos+0x28>
 8015f52:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8015fb0 <__ieee754_acos+0x4a8>
 8015f56:	e5eb      	b.n	8015b30 <__ieee754_acos+0x28>
 8015f58:	0dfdf709 	.word	0x0dfdf709
 8015f5c:	3f023de1 	.word	0x3f023de1
 8015f60:	7501b288 	.word	0x7501b288
 8015f64:	3f49efe0 	.word	0x3f49efe0
 8015f68:	b5688f3b 	.word	0xb5688f3b
 8015f6c:	3fa48228 	.word	0x3fa48228
 8015f70:	0e884455 	.word	0x0e884455
 8015f74:	3fc9c155 	.word	0x3fc9c155
 8015f78:	03eb6f7d 	.word	0x03eb6f7d
 8015f7c:	3fd4d612 	.word	0x3fd4d612
 8015f80:	55555555 	.word	0x55555555
 8015f84:	3fc55555 	.word	0x3fc55555
 8015f88:	b12e9282 	.word	0xb12e9282
 8015f8c:	3fb3b8c5 	.word	0x3fb3b8c5
 8015f90:	1b8d0159 	.word	0x1b8d0159
 8015f94:	3fe6066c 	.word	0x3fe6066c
 8015f98:	9c598ac8 	.word	0x9c598ac8
 8015f9c:	40002ae5 	.word	0x40002ae5
 8015fa0:	1c8a2d4b 	.word	0x1c8a2d4b
 8015fa4:	40033a27 	.word	0x40033a27
 8015fa8:	54442d18 	.word	0x54442d18
 8015fac:	400921fb 	.word	0x400921fb
 8015fb0:	54442d18 	.word	0x54442d18
 8015fb4:	3ff921fb 	.word	0x3ff921fb
 8015fb8:	3ff00000 	.word	0x3ff00000
 8015fbc:	3fe00000 	.word	0x3fe00000

08015fc0 <__ieee754_pow>:
 8015fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fc4:	b091      	sub	sp, #68	@ 0x44
 8015fc6:	ed8d 1b00 	vstr	d1, [sp]
 8015fca:	e9dd 1900 	ldrd	r1, r9, [sp]
 8015fce:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8015fd2:	ea5a 0001 	orrs.w	r0, sl, r1
 8015fd6:	ec57 6b10 	vmov	r6, r7, d0
 8015fda:	d113      	bne.n	8016004 <__ieee754_pow+0x44>
 8015fdc:	19b3      	adds	r3, r6, r6
 8015fde:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8015fe2:	4152      	adcs	r2, r2
 8015fe4:	4298      	cmp	r0, r3
 8015fe6:	4b98      	ldr	r3, [pc, #608]	@ (8016248 <__ieee754_pow+0x288>)
 8015fe8:	4193      	sbcs	r3, r2
 8015fea:	f080 84ea 	bcs.w	80169c2 <__ieee754_pow+0xa02>
 8015fee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015ff2:	4630      	mov	r0, r6
 8015ff4:	4639      	mov	r1, r7
 8015ff6:	f7ea f971 	bl	80002dc <__adddf3>
 8015ffa:	ec41 0b10 	vmov	d0, r0, r1
 8015ffe:	b011      	add	sp, #68	@ 0x44
 8016000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016004:	4a91      	ldr	r2, [pc, #580]	@ (801624c <__ieee754_pow+0x28c>)
 8016006:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801600a:	4590      	cmp	r8, r2
 801600c:	463d      	mov	r5, r7
 801600e:	4633      	mov	r3, r6
 8016010:	d806      	bhi.n	8016020 <__ieee754_pow+0x60>
 8016012:	d101      	bne.n	8016018 <__ieee754_pow+0x58>
 8016014:	2e00      	cmp	r6, #0
 8016016:	d1ea      	bne.n	8015fee <__ieee754_pow+0x2e>
 8016018:	4592      	cmp	sl, r2
 801601a:	d801      	bhi.n	8016020 <__ieee754_pow+0x60>
 801601c:	d10e      	bne.n	801603c <__ieee754_pow+0x7c>
 801601e:	b169      	cbz	r1, 801603c <__ieee754_pow+0x7c>
 8016020:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8016024:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8016028:	431d      	orrs	r5, r3
 801602a:	d1e0      	bne.n	8015fee <__ieee754_pow+0x2e>
 801602c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016030:	18db      	adds	r3, r3, r3
 8016032:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8016036:	4152      	adcs	r2, r2
 8016038:	429d      	cmp	r5, r3
 801603a:	e7d4      	b.n	8015fe6 <__ieee754_pow+0x26>
 801603c:	2d00      	cmp	r5, #0
 801603e:	46c3      	mov	fp, r8
 8016040:	da3a      	bge.n	80160b8 <__ieee754_pow+0xf8>
 8016042:	4a83      	ldr	r2, [pc, #524]	@ (8016250 <__ieee754_pow+0x290>)
 8016044:	4592      	cmp	sl, r2
 8016046:	d84d      	bhi.n	80160e4 <__ieee754_pow+0x124>
 8016048:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801604c:	4592      	cmp	sl, r2
 801604e:	f240 84c7 	bls.w	80169e0 <__ieee754_pow+0xa20>
 8016052:	ea4f 522a 	mov.w	r2, sl, asr #20
 8016056:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801605a:	2a14      	cmp	r2, #20
 801605c:	dd0f      	ble.n	801607e <__ieee754_pow+0xbe>
 801605e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8016062:	fa21 f402 	lsr.w	r4, r1, r2
 8016066:	fa04 f202 	lsl.w	r2, r4, r2
 801606a:	428a      	cmp	r2, r1
 801606c:	f040 84b8 	bne.w	80169e0 <__ieee754_pow+0xa20>
 8016070:	f004 0401 	and.w	r4, r4, #1
 8016074:	f1c4 0402 	rsb	r4, r4, #2
 8016078:	2900      	cmp	r1, #0
 801607a:	d158      	bne.n	801612e <__ieee754_pow+0x16e>
 801607c:	e00e      	b.n	801609c <__ieee754_pow+0xdc>
 801607e:	2900      	cmp	r1, #0
 8016080:	d154      	bne.n	801612c <__ieee754_pow+0x16c>
 8016082:	f1c2 0214 	rsb	r2, r2, #20
 8016086:	fa4a f402 	asr.w	r4, sl, r2
 801608a:	fa04 f202 	lsl.w	r2, r4, r2
 801608e:	4552      	cmp	r2, sl
 8016090:	f040 84a3 	bne.w	80169da <__ieee754_pow+0xa1a>
 8016094:	f004 0401 	and.w	r4, r4, #1
 8016098:	f1c4 0402 	rsb	r4, r4, #2
 801609c:	4a6d      	ldr	r2, [pc, #436]	@ (8016254 <__ieee754_pow+0x294>)
 801609e:	4592      	cmp	sl, r2
 80160a0:	d12e      	bne.n	8016100 <__ieee754_pow+0x140>
 80160a2:	f1b9 0f00 	cmp.w	r9, #0
 80160a6:	f280 8494 	bge.w	80169d2 <__ieee754_pow+0xa12>
 80160aa:	496a      	ldr	r1, [pc, #424]	@ (8016254 <__ieee754_pow+0x294>)
 80160ac:	4632      	mov	r2, r6
 80160ae:	463b      	mov	r3, r7
 80160b0:	2000      	movs	r0, #0
 80160b2:	f7ea fbf3 	bl	800089c <__aeabi_ddiv>
 80160b6:	e7a0      	b.n	8015ffa <__ieee754_pow+0x3a>
 80160b8:	2400      	movs	r4, #0
 80160ba:	bbc1      	cbnz	r1, 801612e <__ieee754_pow+0x16e>
 80160bc:	4a63      	ldr	r2, [pc, #396]	@ (801624c <__ieee754_pow+0x28c>)
 80160be:	4592      	cmp	sl, r2
 80160c0:	d1ec      	bne.n	801609c <__ieee754_pow+0xdc>
 80160c2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80160c6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80160ca:	431a      	orrs	r2, r3
 80160cc:	f000 8479 	beq.w	80169c2 <__ieee754_pow+0xa02>
 80160d0:	4b61      	ldr	r3, [pc, #388]	@ (8016258 <__ieee754_pow+0x298>)
 80160d2:	4598      	cmp	r8, r3
 80160d4:	d908      	bls.n	80160e8 <__ieee754_pow+0x128>
 80160d6:	f1b9 0f00 	cmp.w	r9, #0
 80160da:	f2c0 8476 	blt.w	80169ca <__ieee754_pow+0xa0a>
 80160de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80160e2:	e78a      	b.n	8015ffa <__ieee754_pow+0x3a>
 80160e4:	2402      	movs	r4, #2
 80160e6:	e7e8      	b.n	80160ba <__ieee754_pow+0xfa>
 80160e8:	f1b9 0f00 	cmp.w	r9, #0
 80160ec:	f04f 0000 	mov.w	r0, #0
 80160f0:	f04f 0100 	mov.w	r1, #0
 80160f4:	da81      	bge.n	8015ffa <__ieee754_pow+0x3a>
 80160f6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80160fa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80160fe:	e77c      	b.n	8015ffa <__ieee754_pow+0x3a>
 8016100:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8016104:	d106      	bne.n	8016114 <__ieee754_pow+0x154>
 8016106:	4632      	mov	r2, r6
 8016108:	463b      	mov	r3, r7
 801610a:	4630      	mov	r0, r6
 801610c:	4639      	mov	r1, r7
 801610e:	f7ea fa9b 	bl	8000648 <__aeabi_dmul>
 8016112:	e772      	b.n	8015ffa <__ieee754_pow+0x3a>
 8016114:	4a51      	ldr	r2, [pc, #324]	@ (801625c <__ieee754_pow+0x29c>)
 8016116:	4591      	cmp	r9, r2
 8016118:	d109      	bne.n	801612e <__ieee754_pow+0x16e>
 801611a:	2d00      	cmp	r5, #0
 801611c:	db07      	blt.n	801612e <__ieee754_pow+0x16e>
 801611e:	ec47 6b10 	vmov	d0, r6, r7
 8016122:	b011      	add	sp, #68	@ 0x44
 8016124:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016128:	f7ff bc12 	b.w	8015950 <__ieee754_sqrt>
 801612c:	2400      	movs	r4, #0
 801612e:	ec47 6b10 	vmov	d0, r6, r7
 8016132:	9302      	str	r3, [sp, #8]
 8016134:	f7ff fbf8 	bl	8015928 <fabs>
 8016138:	9b02      	ldr	r3, [sp, #8]
 801613a:	ec51 0b10 	vmov	r0, r1, d0
 801613e:	bb53      	cbnz	r3, 8016196 <__ieee754_pow+0x1d6>
 8016140:	4b44      	ldr	r3, [pc, #272]	@ (8016254 <__ieee754_pow+0x294>)
 8016142:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8016146:	429a      	cmp	r2, r3
 8016148:	d002      	beq.n	8016150 <__ieee754_pow+0x190>
 801614a:	f1b8 0f00 	cmp.w	r8, #0
 801614e:	d122      	bne.n	8016196 <__ieee754_pow+0x1d6>
 8016150:	f1b9 0f00 	cmp.w	r9, #0
 8016154:	da05      	bge.n	8016162 <__ieee754_pow+0x1a2>
 8016156:	4602      	mov	r2, r0
 8016158:	460b      	mov	r3, r1
 801615a:	2000      	movs	r0, #0
 801615c:	493d      	ldr	r1, [pc, #244]	@ (8016254 <__ieee754_pow+0x294>)
 801615e:	f7ea fb9d 	bl	800089c <__aeabi_ddiv>
 8016162:	2d00      	cmp	r5, #0
 8016164:	f6bf af49 	bge.w	8015ffa <__ieee754_pow+0x3a>
 8016168:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801616c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8016170:	ea58 0804 	orrs.w	r8, r8, r4
 8016174:	d108      	bne.n	8016188 <__ieee754_pow+0x1c8>
 8016176:	4602      	mov	r2, r0
 8016178:	460b      	mov	r3, r1
 801617a:	4610      	mov	r0, r2
 801617c:	4619      	mov	r1, r3
 801617e:	f7ea f8ab 	bl	80002d8 <__aeabi_dsub>
 8016182:	4602      	mov	r2, r0
 8016184:	460b      	mov	r3, r1
 8016186:	e794      	b.n	80160b2 <__ieee754_pow+0xf2>
 8016188:	2c01      	cmp	r4, #1
 801618a:	f47f af36 	bne.w	8015ffa <__ieee754_pow+0x3a>
 801618e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016192:	4619      	mov	r1, r3
 8016194:	e731      	b.n	8015ffa <__ieee754_pow+0x3a>
 8016196:	0feb      	lsrs	r3, r5, #31
 8016198:	3b01      	subs	r3, #1
 801619a:	ea53 0204 	orrs.w	r2, r3, r4
 801619e:	d102      	bne.n	80161a6 <__ieee754_pow+0x1e6>
 80161a0:	4632      	mov	r2, r6
 80161a2:	463b      	mov	r3, r7
 80161a4:	e7e9      	b.n	801617a <__ieee754_pow+0x1ba>
 80161a6:	3c01      	subs	r4, #1
 80161a8:	431c      	orrs	r4, r3
 80161aa:	d016      	beq.n	80161da <__ieee754_pow+0x21a>
 80161ac:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8016238 <__ieee754_pow+0x278>
 80161b0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80161b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80161b8:	f240 8112 	bls.w	80163e0 <__ieee754_pow+0x420>
 80161bc:	4b28      	ldr	r3, [pc, #160]	@ (8016260 <__ieee754_pow+0x2a0>)
 80161be:	459a      	cmp	sl, r3
 80161c0:	4b25      	ldr	r3, [pc, #148]	@ (8016258 <__ieee754_pow+0x298>)
 80161c2:	d916      	bls.n	80161f2 <__ieee754_pow+0x232>
 80161c4:	4598      	cmp	r8, r3
 80161c6:	d80b      	bhi.n	80161e0 <__ieee754_pow+0x220>
 80161c8:	f1b9 0f00 	cmp.w	r9, #0
 80161cc:	da0b      	bge.n	80161e6 <__ieee754_pow+0x226>
 80161ce:	2000      	movs	r0, #0
 80161d0:	b011      	add	sp, #68	@ 0x44
 80161d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161d6:	f000 bceb 	b.w	8016bb0 <__math_oflow>
 80161da:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8016240 <__ieee754_pow+0x280>
 80161de:	e7e7      	b.n	80161b0 <__ieee754_pow+0x1f0>
 80161e0:	f1b9 0f00 	cmp.w	r9, #0
 80161e4:	dcf3      	bgt.n	80161ce <__ieee754_pow+0x20e>
 80161e6:	2000      	movs	r0, #0
 80161e8:	b011      	add	sp, #68	@ 0x44
 80161ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161ee:	f000 bcd7 	b.w	8016ba0 <__math_uflow>
 80161f2:	4598      	cmp	r8, r3
 80161f4:	d20c      	bcs.n	8016210 <__ieee754_pow+0x250>
 80161f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80161fa:	2200      	movs	r2, #0
 80161fc:	2300      	movs	r3, #0
 80161fe:	f7ea fc95 	bl	8000b2c <__aeabi_dcmplt>
 8016202:	3800      	subs	r0, #0
 8016204:	bf18      	it	ne
 8016206:	2001      	movne	r0, #1
 8016208:	f1b9 0f00 	cmp.w	r9, #0
 801620c:	daec      	bge.n	80161e8 <__ieee754_pow+0x228>
 801620e:	e7df      	b.n	80161d0 <__ieee754_pow+0x210>
 8016210:	4b10      	ldr	r3, [pc, #64]	@ (8016254 <__ieee754_pow+0x294>)
 8016212:	4598      	cmp	r8, r3
 8016214:	f04f 0200 	mov.w	r2, #0
 8016218:	d924      	bls.n	8016264 <__ieee754_pow+0x2a4>
 801621a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801621e:	2300      	movs	r3, #0
 8016220:	f7ea fc84 	bl	8000b2c <__aeabi_dcmplt>
 8016224:	3800      	subs	r0, #0
 8016226:	bf18      	it	ne
 8016228:	2001      	movne	r0, #1
 801622a:	f1b9 0f00 	cmp.w	r9, #0
 801622e:	dccf      	bgt.n	80161d0 <__ieee754_pow+0x210>
 8016230:	e7da      	b.n	80161e8 <__ieee754_pow+0x228>
 8016232:	bf00      	nop
 8016234:	f3af 8000 	nop.w
 8016238:	00000000 	.word	0x00000000
 801623c:	3ff00000 	.word	0x3ff00000
 8016240:	00000000 	.word	0x00000000
 8016244:	bff00000 	.word	0xbff00000
 8016248:	fff00000 	.word	0xfff00000
 801624c:	7ff00000 	.word	0x7ff00000
 8016250:	433fffff 	.word	0x433fffff
 8016254:	3ff00000 	.word	0x3ff00000
 8016258:	3fefffff 	.word	0x3fefffff
 801625c:	3fe00000 	.word	0x3fe00000
 8016260:	43f00000 	.word	0x43f00000
 8016264:	4b5a      	ldr	r3, [pc, #360]	@ (80163d0 <__ieee754_pow+0x410>)
 8016266:	f7ea f837 	bl	80002d8 <__aeabi_dsub>
 801626a:	a351      	add	r3, pc, #324	@ (adr r3, 80163b0 <__ieee754_pow+0x3f0>)
 801626c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016270:	4604      	mov	r4, r0
 8016272:	460d      	mov	r5, r1
 8016274:	f7ea f9e8 	bl	8000648 <__aeabi_dmul>
 8016278:	a34f      	add	r3, pc, #316	@ (adr r3, 80163b8 <__ieee754_pow+0x3f8>)
 801627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801627e:	4606      	mov	r6, r0
 8016280:	460f      	mov	r7, r1
 8016282:	4620      	mov	r0, r4
 8016284:	4629      	mov	r1, r5
 8016286:	f7ea f9df 	bl	8000648 <__aeabi_dmul>
 801628a:	4b52      	ldr	r3, [pc, #328]	@ (80163d4 <__ieee754_pow+0x414>)
 801628c:	4682      	mov	sl, r0
 801628e:	468b      	mov	fp, r1
 8016290:	2200      	movs	r2, #0
 8016292:	4620      	mov	r0, r4
 8016294:	4629      	mov	r1, r5
 8016296:	f7ea f9d7 	bl	8000648 <__aeabi_dmul>
 801629a:	4602      	mov	r2, r0
 801629c:	460b      	mov	r3, r1
 801629e:	a148      	add	r1, pc, #288	@ (adr r1, 80163c0 <__ieee754_pow+0x400>)
 80162a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162a4:	f7ea f818 	bl	80002d8 <__aeabi_dsub>
 80162a8:	4622      	mov	r2, r4
 80162aa:	462b      	mov	r3, r5
 80162ac:	f7ea f9cc 	bl	8000648 <__aeabi_dmul>
 80162b0:	4602      	mov	r2, r0
 80162b2:	460b      	mov	r3, r1
 80162b4:	2000      	movs	r0, #0
 80162b6:	4948      	ldr	r1, [pc, #288]	@ (80163d8 <__ieee754_pow+0x418>)
 80162b8:	f7ea f80e 	bl	80002d8 <__aeabi_dsub>
 80162bc:	4622      	mov	r2, r4
 80162be:	4680      	mov	r8, r0
 80162c0:	4689      	mov	r9, r1
 80162c2:	462b      	mov	r3, r5
 80162c4:	4620      	mov	r0, r4
 80162c6:	4629      	mov	r1, r5
 80162c8:	f7ea f9be 	bl	8000648 <__aeabi_dmul>
 80162cc:	4602      	mov	r2, r0
 80162ce:	460b      	mov	r3, r1
 80162d0:	4640      	mov	r0, r8
 80162d2:	4649      	mov	r1, r9
 80162d4:	f7ea f9b8 	bl	8000648 <__aeabi_dmul>
 80162d8:	a33b      	add	r3, pc, #236	@ (adr r3, 80163c8 <__ieee754_pow+0x408>)
 80162da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162de:	f7ea f9b3 	bl	8000648 <__aeabi_dmul>
 80162e2:	4602      	mov	r2, r0
 80162e4:	460b      	mov	r3, r1
 80162e6:	4650      	mov	r0, sl
 80162e8:	4659      	mov	r1, fp
 80162ea:	f7e9 fff5 	bl	80002d8 <__aeabi_dsub>
 80162ee:	4602      	mov	r2, r0
 80162f0:	460b      	mov	r3, r1
 80162f2:	4680      	mov	r8, r0
 80162f4:	4689      	mov	r9, r1
 80162f6:	4630      	mov	r0, r6
 80162f8:	4639      	mov	r1, r7
 80162fa:	f7e9 ffef 	bl	80002dc <__adddf3>
 80162fe:	2400      	movs	r4, #0
 8016300:	4632      	mov	r2, r6
 8016302:	463b      	mov	r3, r7
 8016304:	4620      	mov	r0, r4
 8016306:	460d      	mov	r5, r1
 8016308:	f7e9 ffe6 	bl	80002d8 <__aeabi_dsub>
 801630c:	4602      	mov	r2, r0
 801630e:	460b      	mov	r3, r1
 8016310:	4640      	mov	r0, r8
 8016312:	4649      	mov	r1, r9
 8016314:	f7e9 ffe0 	bl	80002d8 <__aeabi_dsub>
 8016318:	e9dd 2300 	ldrd	r2, r3, [sp]
 801631c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016320:	2300      	movs	r3, #0
 8016322:	9304      	str	r3, [sp, #16]
 8016324:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016328:	4606      	mov	r6, r0
 801632a:	460f      	mov	r7, r1
 801632c:	4652      	mov	r2, sl
 801632e:	465b      	mov	r3, fp
 8016330:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016334:	f7e9 ffd0 	bl	80002d8 <__aeabi_dsub>
 8016338:	4622      	mov	r2, r4
 801633a:	462b      	mov	r3, r5
 801633c:	f7ea f984 	bl	8000648 <__aeabi_dmul>
 8016340:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016344:	4680      	mov	r8, r0
 8016346:	4689      	mov	r9, r1
 8016348:	4630      	mov	r0, r6
 801634a:	4639      	mov	r1, r7
 801634c:	f7ea f97c 	bl	8000648 <__aeabi_dmul>
 8016350:	4602      	mov	r2, r0
 8016352:	460b      	mov	r3, r1
 8016354:	4640      	mov	r0, r8
 8016356:	4649      	mov	r1, r9
 8016358:	f7e9 ffc0 	bl	80002dc <__adddf3>
 801635c:	4652      	mov	r2, sl
 801635e:	465b      	mov	r3, fp
 8016360:	4606      	mov	r6, r0
 8016362:	460f      	mov	r7, r1
 8016364:	4620      	mov	r0, r4
 8016366:	4629      	mov	r1, r5
 8016368:	f7ea f96e 	bl	8000648 <__aeabi_dmul>
 801636c:	460b      	mov	r3, r1
 801636e:	4602      	mov	r2, r0
 8016370:	4680      	mov	r8, r0
 8016372:	4689      	mov	r9, r1
 8016374:	4630      	mov	r0, r6
 8016376:	4639      	mov	r1, r7
 8016378:	f7e9 ffb0 	bl	80002dc <__adddf3>
 801637c:	4b17      	ldr	r3, [pc, #92]	@ (80163dc <__ieee754_pow+0x41c>)
 801637e:	4299      	cmp	r1, r3
 8016380:	4604      	mov	r4, r0
 8016382:	460d      	mov	r5, r1
 8016384:	468a      	mov	sl, r1
 8016386:	468b      	mov	fp, r1
 8016388:	f340 82ef 	ble.w	801696a <__ieee754_pow+0x9aa>
 801638c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8016390:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8016394:	4303      	orrs	r3, r0
 8016396:	f000 81e8 	beq.w	801676a <__ieee754_pow+0x7aa>
 801639a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801639e:	2200      	movs	r2, #0
 80163a0:	2300      	movs	r3, #0
 80163a2:	f7ea fbc3 	bl	8000b2c <__aeabi_dcmplt>
 80163a6:	3800      	subs	r0, #0
 80163a8:	bf18      	it	ne
 80163aa:	2001      	movne	r0, #1
 80163ac:	e710      	b.n	80161d0 <__ieee754_pow+0x210>
 80163ae:	bf00      	nop
 80163b0:	60000000 	.word	0x60000000
 80163b4:	3ff71547 	.word	0x3ff71547
 80163b8:	f85ddf44 	.word	0xf85ddf44
 80163bc:	3e54ae0b 	.word	0x3e54ae0b
 80163c0:	55555555 	.word	0x55555555
 80163c4:	3fd55555 	.word	0x3fd55555
 80163c8:	652b82fe 	.word	0x652b82fe
 80163cc:	3ff71547 	.word	0x3ff71547
 80163d0:	3ff00000 	.word	0x3ff00000
 80163d4:	3fd00000 	.word	0x3fd00000
 80163d8:	3fe00000 	.word	0x3fe00000
 80163dc:	408fffff 	.word	0x408fffff
 80163e0:	4bd5      	ldr	r3, [pc, #852]	@ (8016738 <__ieee754_pow+0x778>)
 80163e2:	402b      	ands	r3, r5
 80163e4:	2200      	movs	r2, #0
 80163e6:	b92b      	cbnz	r3, 80163f4 <__ieee754_pow+0x434>
 80163e8:	4bd4      	ldr	r3, [pc, #848]	@ (801673c <__ieee754_pow+0x77c>)
 80163ea:	f7ea f92d 	bl	8000648 <__aeabi_dmul>
 80163ee:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80163f2:	468b      	mov	fp, r1
 80163f4:	ea4f 532b 	mov.w	r3, fp, asr #20
 80163f8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80163fc:	4413      	add	r3, r2
 80163fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8016400:	4bcf      	ldr	r3, [pc, #828]	@ (8016740 <__ieee754_pow+0x780>)
 8016402:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8016406:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801640a:	459b      	cmp	fp, r3
 801640c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016410:	dd08      	ble.n	8016424 <__ieee754_pow+0x464>
 8016412:	4bcc      	ldr	r3, [pc, #816]	@ (8016744 <__ieee754_pow+0x784>)
 8016414:	459b      	cmp	fp, r3
 8016416:	f340 81a5 	ble.w	8016764 <__ieee754_pow+0x7a4>
 801641a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801641c:	3301      	adds	r3, #1
 801641e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016420:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8016424:	f04f 0a00 	mov.w	sl, #0
 8016428:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801642c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801642e:	4bc6      	ldr	r3, [pc, #792]	@ (8016748 <__ieee754_pow+0x788>)
 8016430:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016434:	ed93 7b00 	vldr	d7, [r3]
 8016438:	4629      	mov	r1, r5
 801643a:	ec53 2b17 	vmov	r2, r3, d7
 801643e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016442:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016446:	f7e9 ff47 	bl	80002d8 <__aeabi_dsub>
 801644a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801644e:	4606      	mov	r6, r0
 8016450:	460f      	mov	r7, r1
 8016452:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016456:	f7e9 ff41 	bl	80002dc <__adddf3>
 801645a:	4602      	mov	r2, r0
 801645c:	460b      	mov	r3, r1
 801645e:	2000      	movs	r0, #0
 8016460:	49ba      	ldr	r1, [pc, #744]	@ (801674c <__ieee754_pow+0x78c>)
 8016462:	f7ea fa1b 	bl	800089c <__aeabi_ddiv>
 8016466:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801646a:	4602      	mov	r2, r0
 801646c:	460b      	mov	r3, r1
 801646e:	4630      	mov	r0, r6
 8016470:	4639      	mov	r1, r7
 8016472:	f7ea f8e9 	bl	8000648 <__aeabi_dmul>
 8016476:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801647a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801647e:	106d      	asrs	r5, r5, #1
 8016480:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8016484:	f04f 0b00 	mov.w	fp, #0
 8016488:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801648c:	4661      	mov	r1, ip
 801648e:	2200      	movs	r2, #0
 8016490:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8016494:	4658      	mov	r0, fp
 8016496:	46e1      	mov	r9, ip
 8016498:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801649c:	4614      	mov	r4, r2
 801649e:	461d      	mov	r5, r3
 80164a0:	f7ea f8d2 	bl	8000648 <__aeabi_dmul>
 80164a4:	4602      	mov	r2, r0
 80164a6:	460b      	mov	r3, r1
 80164a8:	4630      	mov	r0, r6
 80164aa:	4639      	mov	r1, r7
 80164ac:	f7e9 ff14 	bl	80002d8 <__aeabi_dsub>
 80164b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80164b4:	4606      	mov	r6, r0
 80164b6:	460f      	mov	r7, r1
 80164b8:	4620      	mov	r0, r4
 80164ba:	4629      	mov	r1, r5
 80164bc:	f7e9 ff0c 	bl	80002d8 <__aeabi_dsub>
 80164c0:	4602      	mov	r2, r0
 80164c2:	460b      	mov	r3, r1
 80164c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80164c8:	f7e9 ff06 	bl	80002d8 <__aeabi_dsub>
 80164cc:	465a      	mov	r2, fp
 80164ce:	464b      	mov	r3, r9
 80164d0:	f7ea f8ba 	bl	8000648 <__aeabi_dmul>
 80164d4:	4602      	mov	r2, r0
 80164d6:	460b      	mov	r3, r1
 80164d8:	4630      	mov	r0, r6
 80164da:	4639      	mov	r1, r7
 80164dc:	f7e9 fefc 	bl	80002d8 <__aeabi_dsub>
 80164e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80164e4:	f7ea f8b0 	bl	8000648 <__aeabi_dmul>
 80164e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80164ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80164f0:	4610      	mov	r0, r2
 80164f2:	4619      	mov	r1, r3
 80164f4:	f7ea f8a8 	bl	8000648 <__aeabi_dmul>
 80164f8:	a37d      	add	r3, pc, #500	@ (adr r3, 80166f0 <__ieee754_pow+0x730>)
 80164fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164fe:	4604      	mov	r4, r0
 8016500:	460d      	mov	r5, r1
 8016502:	f7ea f8a1 	bl	8000648 <__aeabi_dmul>
 8016506:	a37c      	add	r3, pc, #496	@ (adr r3, 80166f8 <__ieee754_pow+0x738>)
 8016508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801650c:	f7e9 fee6 	bl	80002dc <__adddf3>
 8016510:	4622      	mov	r2, r4
 8016512:	462b      	mov	r3, r5
 8016514:	f7ea f898 	bl	8000648 <__aeabi_dmul>
 8016518:	a379      	add	r3, pc, #484	@ (adr r3, 8016700 <__ieee754_pow+0x740>)
 801651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801651e:	f7e9 fedd 	bl	80002dc <__adddf3>
 8016522:	4622      	mov	r2, r4
 8016524:	462b      	mov	r3, r5
 8016526:	f7ea f88f 	bl	8000648 <__aeabi_dmul>
 801652a:	a377      	add	r3, pc, #476	@ (adr r3, 8016708 <__ieee754_pow+0x748>)
 801652c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016530:	f7e9 fed4 	bl	80002dc <__adddf3>
 8016534:	4622      	mov	r2, r4
 8016536:	462b      	mov	r3, r5
 8016538:	f7ea f886 	bl	8000648 <__aeabi_dmul>
 801653c:	a374      	add	r3, pc, #464	@ (adr r3, 8016710 <__ieee754_pow+0x750>)
 801653e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016542:	f7e9 fecb 	bl	80002dc <__adddf3>
 8016546:	4622      	mov	r2, r4
 8016548:	462b      	mov	r3, r5
 801654a:	f7ea f87d 	bl	8000648 <__aeabi_dmul>
 801654e:	a372      	add	r3, pc, #456	@ (adr r3, 8016718 <__ieee754_pow+0x758>)
 8016550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016554:	f7e9 fec2 	bl	80002dc <__adddf3>
 8016558:	4622      	mov	r2, r4
 801655a:	4606      	mov	r6, r0
 801655c:	460f      	mov	r7, r1
 801655e:	462b      	mov	r3, r5
 8016560:	4620      	mov	r0, r4
 8016562:	4629      	mov	r1, r5
 8016564:	f7ea f870 	bl	8000648 <__aeabi_dmul>
 8016568:	4602      	mov	r2, r0
 801656a:	460b      	mov	r3, r1
 801656c:	4630      	mov	r0, r6
 801656e:	4639      	mov	r1, r7
 8016570:	f7ea f86a 	bl	8000648 <__aeabi_dmul>
 8016574:	465a      	mov	r2, fp
 8016576:	4604      	mov	r4, r0
 8016578:	460d      	mov	r5, r1
 801657a:	464b      	mov	r3, r9
 801657c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016580:	f7e9 feac 	bl	80002dc <__adddf3>
 8016584:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016588:	f7ea f85e 	bl	8000648 <__aeabi_dmul>
 801658c:	4622      	mov	r2, r4
 801658e:	462b      	mov	r3, r5
 8016590:	f7e9 fea4 	bl	80002dc <__adddf3>
 8016594:	465a      	mov	r2, fp
 8016596:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801659a:	464b      	mov	r3, r9
 801659c:	4658      	mov	r0, fp
 801659e:	4649      	mov	r1, r9
 80165a0:	f7ea f852 	bl	8000648 <__aeabi_dmul>
 80165a4:	4b6a      	ldr	r3, [pc, #424]	@ (8016750 <__ieee754_pow+0x790>)
 80165a6:	2200      	movs	r2, #0
 80165a8:	4606      	mov	r6, r0
 80165aa:	460f      	mov	r7, r1
 80165ac:	f7e9 fe96 	bl	80002dc <__adddf3>
 80165b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80165b4:	f7e9 fe92 	bl	80002dc <__adddf3>
 80165b8:	46d8      	mov	r8, fp
 80165ba:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80165be:	460d      	mov	r5, r1
 80165c0:	465a      	mov	r2, fp
 80165c2:	460b      	mov	r3, r1
 80165c4:	4640      	mov	r0, r8
 80165c6:	4649      	mov	r1, r9
 80165c8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80165cc:	f7ea f83c 	bl	8000648 <__aeabi_dmul>
 80165d0:	465c      	mov	r4, fp
 80165d2:	4680      	mov	r8, r0
 80165d4:	4689      	mov	r9, r1
 80165d6:	4b5e      	ldr	r3, [pc, #376]	@ (8016750 <__ieee754_pow+0x790>)
 80165d8:	2200      	movs	r2, #0
 80165da:	4620      	mov	r0, r4
 80165dc:	4629      	mov	r1, r5
 80165de:	f7e9 fe7b 	bl	80002d8 <__aeabi_dsub>
 80165e2:	4632      	mov	r2, r6
 80165e4:	463b      	mov	r3, r7
 80165e6:	f7e9 fe77 	bl	80002d8 <__aeabi_dsub>
 80165ea:	4602      	mov	r2, r0
 80165ec:	460b      	mov	r3, r1
 80165ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80165f2:	f7e9 fe71 	bl	80002d8 <__aeabi_dsub>
 80165f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80165fa:	f7ea f825 	bl	8000648 <__aeabi_dmul>
 80165fe:	4622      	mov	r2, r4
 8016600:	4606      	mov	r6, r0
 8016602:	460f      	mov	r7, r1
 8016604:	462b      	mov	r3, r5
 8016606:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801660a:	f7ea f81d 	bl	8000648 <__aeabi_dmul>
 801660e:	4602      	mov	r2, r0
 8016610:	460b      	mov	r3, r1
 8016612:	4630      	mov	r0, r6
 8016614:	4639      	mov	r1, r7
 8016616:	f7e9 fe61 	bl	80002dc <__adddf3>
 801661a:	4606      	mov	r6, r0
 801661c:	460f      	mov	r7, r1
 801661e:	4602      	mov	r2, r0
 8016620:	460b      	mov	r3, r1
 8016622:	4640      	mov	r0, r8
 8016624:	4649      	mov	r1, r9
 8016626:	f7e9 fe59 	bl	80002dc <__adddf3>
 801662a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801662e:	a33c      	add	r3, pc, #240	@ (adr r3, 8016720 <__ieee754_pow+0x760>)
 8016630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016634:	4658      	mov	r0, fp
 8016636:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801663a:	460d      	mov	r5, r1
 801663c:	f7ea f804 	bl	8000648 <__aeabi_dmul>
 8016640:	465c      	mov	r4, fp
 8016642:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016646:	4642      	mov	r2, r8
 8016648:	464b      	mov	r3, r9
 801664a:	4620      	mov	r0, r4
 801664c:	4629      	mov	r1, r5
 801664e:	f7e9 fe43 	bl	80002d8 <__aeabi_dsub>
 8016652:	4602      	mov	r2, r0
 8016654:	460b      	mov	r3, r1
 8016656:	4630      	mov	r0, r6
 8016658:	4639      	mov	r1, r7
 801665a:	f7e9 fe3d 	bl	80002d8 <__aeabi_dsub>
 801665e:	a332      	add	r3, pc, #200	@ (adr r3, 8016728 <__ieee754_pow+0x768>)
 8016660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016664:	f7e9 fff0 	bl	8000648 <__aeabi_dmul>
 8016668:	a331      	add	r3, pc, #196	@ (adr r3, 8016730 <__ieee754_pow+0x770>)
 801666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801666e:	4606      	mov	r6, r0
 8016670:	460f      	mov	r7, r1
 8016672:	4620      	mov	r0, r4
 8016674:	4629      	mov	r1, r5
 8016676:	f7e9 ffe7 	bl	8000648 <__aeabi_dmul>
 801667a:	4602      	mov	r2, r0
 801667c:	460b      	mov	r3, r1
 801667e:	4630      	mov	r0, r6
 8016680:	4639      	mov	r1, r7
 8016682:	f7e9 fe2b 	bl	80002dc <__adddf3>
 8016686:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016688:	4b32      	ldr	r3, [pc, #200]	@ (8016754 <__ieee754_pow+0x794>)
 801668a:	4413      	add	r3, r2
 801668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016690:	f7e9 fe24 	bl	80002dc <__adddf3>
 8016694:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016698:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801669a:	f7e9 ff6b 	bl	8000574 <__aeabi_i2d>
 801669e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80166a0:	4b2d      	ldr	r3, [pc, #180]	@ (8016758 <__ieee754_pow+0x798>)
 80166a2:	4413      	add	r3, r2
 80166a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80166a8:	4606      	mov	r6, r0
 80166aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80166ae:	460f      	mov	r7, r1
 80166b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80166b4:	f7e9 fe12 	bl	80002dc <__adddf3>
 80166b8:	4642      	mov	r2, r8
 80166ba:	464b      	mov	r3, r9
 80166bc:	f7e9 fe0e 	bl	80002dc <__adddf3>
 80166c0:	4632      	mov	r2, r6
 80166c2:	463b      	mov	r3, r7
 80166c4:	f7e9 fe0a 	bl	80002dc <__adddf3>
 80166c8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80166cc:	4632      	mov	r2, r6
 80166ce:	463b      	mov	r3, r7
 80166d0:	4658      	mov	r0, fp
 80166d2:	460d      	mov	r5, r1
 80166d4:	f7e9 fe00 	bl	80002d8 <__aeabi_dsub>
 80166d8:	4642      	mov	r2, r8
 80166da:	464b      	mov	r3, r9
 80166dc:	f7e9 fdfc 	bl	80002d8 <__aeabi_dsub>
 80166e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80166e4:	f7e9 fdf8 	bl	80002d8 <__aeabi_dsub>
 80166e8:	465c      	mov	r4, fp
 80166ea:	4602      	mov	r2, r0
 80166ec:	e036      	b.n	801675c <__ieee754_pow+0x79c>
 80166ee:	bf00      	nop
 80166f0:	4a454eef 	.word	0x4a454eef
 80166f4:	3fca7e28 	.word	0x3fca7e28
 80166f8:	93c9db65 	.word	0x93c9db65
 80166fc:	3fcd864a 	.word	0x3fcd864a
 8016700:	a91d4101 	.word	0xa91d4101
 8016704:	3fd17460 	.word	0x3fd17460
 8016708:	518f264d 	.word	0x518f264d
 801670c:	3fd55555 	.word	0x3fd55555
 8016710:	db6fabff 	.word	0xdb6fabff
 8016714:	3fdb6db6 	.word	0x3fdb6db6
 8016718:	33333303 	.word	0x33333303
 801671c:	3fe33333 	.word	0x3fe33333
 8016720:	e0000000 	.word	0xe0000000
 8016724:	3feec709 	.word	0x3feec709
 8016728:	dc3a03fd 	.word	0xdc3a03fd
 801672c:	3feec709 	.word	0x3feec709
 8016730:	145b01f5 	.word	0x145b01f5
 8016734:	be3e2fe0 	.word	0xbe3e2fe0
 8016738:	7ff00000 	.word	0x7ff00000
 801673c:	43400000 	.word	0x43400000
 8016740:	0003988e 	.word	0x0003988e
 8016744:	000bb679 	.word	0x000bb679
 8016748:	080173f8 	.word	0x080173f8
 801674c:	3ff00000 	.word	0x3ff00000
 8016750:	40080000 	.word	0x40080000
 8016754:	080173d8 	.word	0x080173d8
 8016758:	080173e8 	.word	0x080173e8
 801675c:	460b      	mov	r3, r1
 801675e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016762:	e5d7      	b.n	8016314 <__ieee754_pow+0x354>
 8016764:	f04f 0a01 	mov.w	sl, #1
 8016768:	e65e      	b.n	8016428 <__ieee754_pow+0x468>
 801676a:	a3b4      	add	r3, pc, #720	@ (adr r3, 8016a3c <__ieee754_pow+0xa7c>)
 801676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016770:	4630      	mov	r0, r6
 8016772:	4639      	mov	r1, r7
 8016774:	f7e9 fdb2 	bl	80002dc <__adddf3>
 8016778:	4642      	mov	r2, r8
 801677a:	e9cd 0100 	strd	r0, r1, [sp]
 801677e:	464b      	mov	r3, r9
 8016780:	4620      	mov	r0, r4
 8016782:	4629      	mov	r1, r5
 8016784:	f7e9 fda8 	bl	80002d8 <__aeabi_dsub>
 8016788:	4602      	mov	r2, r0
 801678a:	460b      	mov	r3, r1
 801678c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016790:	f7ea f9ea 	bl	8000b68 <__aeabi_dcmpgt>
 8016794:	2800      	cmp	r0, #0
 8016796:	f47f ae00 	bne.w	801639a <__ieee754_pow+0x3da>
 801679a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801679e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80167a2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80167a6:	fa43 fa0a 	asr.w	sl, r3, sl
 80167aa:	44da      	add	sl, fp
 80167ac:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80167b0:	489d      	ldr	r0, [pc, #628]	@ (8016a28 <__ieee754_pow+0xa68>)
 80167b2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80167b6:	4108      	asrs	r0, r1
 80167b8:	ea00 030a 	and.w	r3, r0, sl
 80167bc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80167c0:	f1c1 0114 	rsb	r1, r1, #20
 80167c4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80167c8:	fa4a fa01 	asr.w	sl, sl, r1
 80167cc:	f1bb 0f00 	cmp.w	fp, #0
 80167d0:	4640      	mov	r0, r8
 80167d2:	4649      	mov	r1, r9
 80167d4:	f04f 0200 	mov.w	r2, #0
 80167d8:	bfb8      	it	lt
 80167da:	f1ca 0a00 	rsblt	sl, sl, #0
 80167de:	f7e9 fd7b 	bl	80002d8 <__aeabi_dsub>
 80167e2:	4680      	mov	r8, r0
 80167e4:	4689      	mov	r9, r1
 80167e6:	4632      	mov	r2, r6
 80167e8:	463b      	mov	r3, r7
 80167ea:	4640      	mov	r0, r8
 80167ec:	4649      	mov	r1, r9
 80167ee:	f7e9 fd75 	bl	80002dc <__adddf3>
 80167f2:	2400      	movs	r4, #0
 80167f4:	a37c      	add	r3, pc, #496	@ (adr r3, 80169e8 <__ieee754_pow+0xa28>)
 80167f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167fa:	4620      	mov	r0, r4
 80167fc:	460d      	mov	r5, r1
 80167fe:	f7e9 ff23 	bl	8000648 <__aeabi_dmul>
 8016802:	4642      	mov	r2, r8
 8016804:	e9cd 0100 	strd	r0, r1, [sp]
 8016808:	464b      	mov	r3, r9
 801680a:	4620      	mov	r0, r4
 801680c:	4629      	mov	r1, r5
 801680e:	f7e9 fd63 	bl	80002d8 <__aeabi_dsub>
 8016812:	4602      	mov	r2, r0
 8016814:	460b      	mov	r3, r1
 8016816:	4630      	mov	r0, r6
 8016818:	4639      	mov	r1, r7
 801681a:	f7e9 fd5d 	bl	80002d8 <__aeabi_dsub>
 801681e:	a374      	add	r3, pc, #464	@ (adr r3, 80169f0 <__ieee754_pow+0xa30>)
 8016820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016824:	f7e9 ff10 	bl	8000648 <__aeabi_dmul>
 8016828:	a373      	add	r3, pc, #460	@ (adr r3, 80169f8 <__ieee754_pow+0xa38>)
 801682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801682e:	4680      	mov	r8, r0
 8016830:	4689      	mov	r9, r1
 8016832:	4620      	mov	r0, r4
 8016834:	4629      	mov	r1, r5
 8016836:	f7e9 ff07 	bl	8000648 <__aeabi_dmul>
 801683a:	4602      	mov	r2, r0
 801683c:	460b      	mov	r3, r1
 801683e:	4640      	mov	r0, r8
 8016840:	4649      	mov	r1, r9
 8016842:	f7e9 fd4b 	bl	80002dc <__adddf3>
 8016846:	4604      	mov	r4, r0
 8016848:	460d      	mov	r5, r1
 801684a:	4602      	mov	r2, r0
 801684c:	460b      	mov	r3, r1
 801684e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016852:	f7e9 fd43 	bl	80002dc <__adddf3>
 8016856:	e9dd 2300 	ldrd	r2, r3, [sp]
 801685a:	4680      	mov	r8, r0
 801685c:	4689      	mov	r9, r1
 801685e:	f7e9 fd3b 	bl	80002d8 <__aeabi_dsub>
 8016862:	4602      	mov	r2, r0
 8016864:	460b      	mov	r3, r1
 8016866:	4620      	mov	r0, r4
 8016868:	4629      	mov	r1, r5
 801686a:	f7e9 fd35 	bl	80002d8 <__aeabi_dsub>
 801686e:	4642      	mov	r2, r8
 8016870:	4606      	mov	r6, r0
 8016872:	460f      	mov	r7, r1
 8016874:	464b      	mov	r3, r9
 8016876:	4640      	mov	r0, r8
 8016878:	4649      	mov	r1, r9
 801687a:	f7e9 fee5 	bl	8000648 <__aeabi_dmul>
 801687e:	a360      	add	r3, pc, #384	@ (adr r3, 8016a00 <__ieee754_pow+0xa40>)
 8016880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016884:	4604      	mov	r4, r0
 8016886:	460d      	mov	r5, r1
 8016888:	f7e9 fede 	bl	8000648 <__aeabi_dmul>
 801688c:	a35e      	add	r3, pc, #376	@ (adr r3, 8016a08 <__ieee754_pow+0xa48>)
 801688e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016892:	f7e9 fd21 	bl	80002d8 <__aeabi_dsub>
 8016896:	4622      	mov	r2, r4
 8016898:	462b      	mov	r3, r5
 801689a:	f7e9 fed5 	bl	8000648 <__aeabi_dmul>
 801689e:	a35c      	add	r3, pc, #368	@ (adr r3, 8016a10 <__ieee754_pow+0xa50>)
 80168a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168a4:	f7e9 fd1a 	bl	80002dc <__adddf3>
 80168a8:	4622      	mov	r2, r4
 80168aa:	462b      	mov	r3, r5
 80168ac:	f7e9 fecc 	bl	8000648 <__aeabi_dmul>
 80168b0:	a359      	add	r3, pc, #356	@ (adr r3, 8016a18 <__ieee754_pow+0xa58>)
 80168b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168b6:	f7e9 fd0f 	bl	80002d8 <__aeabi_dsub>
 80168ba:	4622      	mov	r2, r4
 80168bc:	462b      	mov	r3, r5
 80168be:	f7e9 fec3 	bl	8000648 <__aeabi_dmul>
 80168c2:	a357      	add	r3, pc, #348	@ (adr r3, 8016a20 <__ieee754_pow+0xa60>)
 80168c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168c8:	f7e9 fd08 	bl	80002dc <__adddf3>
 80168cc:	4622      	mov	r2, r4
 80168ce:	462b      	mov	r3, r5
 80168d0:	f7e9 feba 	bl	8000648 <__aeabi_dmul>
 80168d4:	4602      	mov	r2, r0
 80168d6:	460b      	mov	r3, r1
 80168d8:	4640      	mov	r0, r8
 80168da:	4649      	mov	r1, r9
 80168dc:	f7e9 fcfc 	bl	80002d8 <__aeabi_dsub>
 80168e0:	4604      	mov	r4, r0
 80168e2:	460d      	mov	r5, r1
 80168e4:	4602      	mov	r2, r0
 80168e6:	460b      	mov	r3, r1
 80168e8:	4640      	mov	r0, r8
 80168ea:	4649      	mov	r1, r9
 80168ec:	f7e9 feac 	bl	8000648 <__aeabi_dmul>
 80168f0:	2200      	movs	r2, #0
 80168f2:	e9cd 0100 	strd	r0, r1, [sp]
 80168f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80168fa:	4620      	mov	r0, r4
 80168fc:	4629      	mov	r1, r5
 80168fe:	f7e9 fceb 	bl	80002d8 <__aeabi_dsub>
 8016902:	4602      	mov	r2, r0
 8016904:	460b      	mov	r3, r1
 8016906:	e9dd 0100 	ldrd	r0, r1, [sp]
 801690a:	f7e9 ffc7 	bl	800089c <__aeabi_ddiv>
 801690e:	4632      	mov	r2, r6
 8016910:	4604      	mov	r4, r0
 8016912:	460d      	mov	r5, r1
 8016914:	463b      	mov	r3, r7
 8016916:	4640      	mov	r0, r8
 8016918:	4649      	mov	r1, r9
 801691a:	f7e9 fe95 	bl	8000648 <__aeabi_dmul>
 801691e:	4632      	mov	r2, r6
 8016920:	463b      	mov	r3, r7
 8016922:	f7e9 fcdb 	bl	80002dc <__adddf3>
 8016926:	4602      	mov	r2, r0
 8016928:	460b      	mov	r3, r1
 801692a:	4620      	mov	r0, r4
 801692c:	4629      	mov	r1, r5
 801692e:	f7e9 fcd3 	bl	80002d8 <__aeabi_dsub>
 8016932:	4642      	mov	r2, r8
 8016934:	464b      	mov	r3, r9
 8016936:	f7e9 fccf 	bl	80002d8 <__aeabi_dsub>
 801693a:	460b      	mov	r3, r1
 801693c:	4602      	mov	r2, r0
 801693e:	493b      	ldr	r1, [pc, #236]	@ (8016a2c <__ieee754_pow+0xa6c>)
 8016940:	2000      	movs	r0, #0
 8016942:	f7e9 fcc9 	bl	80002d8 <__aeabi_dsub>
 8016946:	ec41 0b10 	vmov	d0, r0, r1
 801694a:	ee10 3a90 	vmov	r3, s1
 801694e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8016952:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016956:	da30      	bge.n	80169ba <__ieee754_pow+0x9fa>
 8016958:	4650      	mov	r0, sl
 801695a:	f000 f875 	bl	8016a48 <scalbn>
 801695e:	ec51 0b10 	vmov	r0, r1, d0
 8016962:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016966:	f7ff bbd2 	b.w	801610e <__ieee754_pow+0x14e>
 801696a:	4c31      	ldr	r4, [pc, #196]	@ (8016a30 <__ieee754_pow+0xa70>)
 801696c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8016970:	42a3      	cmp	r3, r4
 8016972:	d91a      	bls.n	80169aa <__ieee754_pow+0x9ea>
 8016974:	4b2f      	ldr	r3, [pc, #188]	@ (8016a34 <__ieee754_pow+0xa74>)
 8016976:	440b      	add	r3, r1
 8016978:	4303      	orrs	r3, r0
 801697a:	d009      	beq.n	8016990 <__ieee754_pow+0x9d0>
 801697c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016980:	2200      	movs	r2, #0
 8016982:	2300      	movs	r3, #0
 8016984:	f7ea f8d2 	bl	8000b2c <__aeabi_dcmplt>
 8016988:	3800      	subs	r0, #0
 801698a:	bf18      	it	ne
 801698c:	2001      	movne	r0, #1
 801698e:	e42b      	b.n	80161e8 <__ieee754_pow+0x228>
 8016990:	4642      	mov	r2, r8
 8016992:	464b      	mov	r3, r9
 8016994:	f7e9 fca0 	bl	80002d8 <__aeabi_dsub>
 8016998:	4632      	mov	r2, r6
 801699a:	463b      	mov	r3, r7
 801699c:	f7ea f8da 	bl	8000b54 <__aeabi_dcmpge>
 80169a0:	2800      	cmp	r0, #0
 80169a2:	d1eb      	bne.n	801697c <__ieee754_pow+0x9bc>
 80169a4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8016a44 <__ieee754_pow+0xa84>
 80169a8:	e6f7      	b.n	801679a <__ieee754_pow+0x7da>
 80169aa:	469a      	mov	sl, r3
 80169ac:	4b22      	ldr	r3, [pc, #136]	@ (8016a38 <__ieee754_pow+0xa78>)
 80169ae:	459a      	cmp	sl, r3
 80169b0:	f63f aef3 	bhi.w	801679a <__ieee754_pow+0x7da>
 80169b4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80169b8:	e715      	b.n	80167e6 <__ieee754_pow+0x826>
 80169ba:	ec51 0b10 	vmov	r0, r1, d0
 80169be:	4619      	mov	r1, r3
 80169c0:	e7cf      	b.n	8016962 <__ieee754_pow+0x9a2>
 80169c2:	491a      	ldr	r1, [pc, #104]	@ (8016a2c <__ieee754_pow+0xa6c>)
 80169c4:	2000      	movs	r0, #0
 80169c6:	f7ff bb18 	b.w	8015ffa <__ieee754_pow+0x3a>
 80169ca:	2000      	movs	r0, #0
 80169cc:	2100      	movs	r1, #0
 80169ce:	f7ff bb14 	b.w	8015ffa <__ieee754_pow+0x3a>
 80169d2:	4630      	mov	r0, r6
 80169d4:	4639      	mov	r1, r7
 80169d6:	f7ff bb10 	b.w	8015ffa <__ieee754_pow+0x3a>
 80169da:	460c      	mov	r4, r1
 80169dc:	f7ff bb5e 	b.w	801609c <__ieee754_pow+0xdc>
 80169e0:	2400      	movs	r4, #0
 80169e2:	f7ff bb49 	b.w	8016078 <__ieee754_pow+0xb8>
 80169e6:	bf00      	nop
 80169e8:	00000000 	.word	0x00000000
 80169ec:	3fe62e43 	.word	0x3fe62e43
 80169f0:	fefa39ef 	.word	0xfefa39ef
 80169f4:	3fe62e42 	.word	0x3fe62e42
 80169f8:	0ca86c39 	.word	0x0ca86c39
 80169fc:	be205c61 	.word	0xbe205c61
 8016a00:	72bea4d0 	.word	0x72bea4d0
 8016a04:	3e663769 	.word	0x3e663769
 8016a08:	c5d26bf1 	.word	0xc5d26bf1
 8016a0c:	3ebbbd41 	.word	0x3ebbbd41
 8016a10:	af25de2c 	.word	0xaf25de2c
 8016a14:	3f11566a 	.word	0x3f11566a
 8016a18:	16bebd93 	.word	0x16bebd93
 8016a1c:	3f66c16c 	.word	0x3f66c16c
 8016a20:	5555553e 	.word	0x5555553e
 8016a24:	3fc55555 	.word	0x3fc55555
 8016a28:	fff00000 	.word	0xfff00000
 8016a2c:	3ff00000 	.word	0x3ff00000
 8016a30:	4090cbff 	.word	0x4090cbff
 8016a34:	3f6f3400 	.word	0x3f6f3400
 8016a38:	3fe00000 	.word	0x3fe00000
 8016a3c:	652b82fe 	.word	0x652b82fe
 8016a40:	3c971547 	.word	0x3c971547
 8016a44:	4090cc00 	.word	0x4090cc00

08016a48 <scalbn>:
 8016a48:	b570      	push	{r4, r5, r6, lr}
 8016a4a:	ec55 4b10 	vmov	r4, r5, d0
 8016a4e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8016a52:	4606      	mov	r6, r0
 8016a54:	462b      	mov	r3, r5
 8016a56:	b991      	cbnz	r1, 8016a7e <scalbn+0x36>
 8016a58:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8016a5c:	4323      	orrs	r3, r4
 8016a5e:	d03d      	beq.n	8016adc <scalbn+0x94>
 8016a60:	4b35      	ldr	r3, [pc, #212]	@ (8016b38 <scalbn+0xf0>)
 8016a62:	4620      	mov	r0, r4
 8016a64:	4629      	mov	r1, r5
 8016a66:	2200      	movs	r2, #0
 8016a68:	f7e9 fdee 	bl	8000648 <__aeabi_dmul>
 8016a6c:	4b33      	ldr	r3, [pc, #204]	@ (8016b3c <scalbn+0xf4>)
 8016a6e:	429e      	cmp	r6, r3
 8016a70:	4604      	mov	r4, r0
 8016a72:	460d      	mov	r5, r1
 8016a74:	da0f      	bge.n	8016a96 <scalbn+0x4e>
 8016a76:	a328      	add	r3, pc, #160	@ (adr r3, 8016b18 <scalbn+0xd0>)
 8016a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a7c:	e01e      	b.n	8016abc <scalbn+0x74>
 8016a7e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8016a82:	4291      	cmp	r1, r2
 8016a84:	d10b      	bne.n	8016a9e <scalbn+0x56>
 8016a86:	4622      	mov	r2, r4
 8016a88:	4620      	mov	r0, r4
 8016a8a:	4629      	mov	r1, r5
 8016a8c:	f7e9 fc26 	bl	80002dc <__adddf3>
 8016a90:	4604      	mov	r4, r0
 8016a92:	460d      	mov	r5, r1
 8016a94:	e022      	b.n	8016adc <scalbn+0x94>
 8016a96:	460b      	mov	r3, r1
 8016a98:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8016a9c:	3936      	subs	r1, #54	@ 0x36
 8016a9e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8016aa2:	4296      	cmp	r6, r2
 8016aa4:	dd0d      	ble.n	8016ac2 <scalbn+0x7a>
 8016aa6:	2d00      	cmp	r5, #0
 8016aa8:	a11d      	add	r1, pc, #116	@ (adr r1, 8016b20 <scalbn+0xd8>)
 8016aaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016aae:	da02      	bge.n	8016ab6 <scalbn+0x6e>
 8016ab0:	a11d      	add	r1, pc, #116	@ (adr r1, 8016b28 <scalbn+0xe0>)
 8016ab2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ab6:	a31a      	add	r3, pc, #104	@ (adr r3, 8016b20 <scalbn+0xd8>)
 8016ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016abc:	f7e9 fdc4 	bl	8000648 <__aeabi_dmul>
 8016ac0:	e7e6      	b.n	8016a90 <scalbn+0x48>
 8016ac2:	1872      	adds	r2, r6, r1
 8016ac4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8016ac8:	428a      	cmp	r2, r1
 8016aca:	dcec      	bgt.n	8016aa6 <scalbn+0x5e>
 8016acc:	2a00      	cmp	r2, #0
 8016ace:	dd08      	ble.n	8016ae2 <scalbn+0x9a>
 8016ad0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016ad4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8016ad8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016adc:	ec45 4b10 	vmov	d0, r4, r5
 8016ae0:	bd70      	pop	{r4, r5, r6, pc}
 8016ae2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8016ae6:	da08      	bge.n	8016afa <scalbn+0xb2>
 8016ae8:	2d00      	cmp	r5, #0
 8016aea:	a10b      	add	r1, pc, #44	@ (adr r1, 8016b18 <scalbn+0xd0>)
 8016aec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016af0:	dac1      	bge.n	8016a76 <scalbn+0x2e>
 8016af2:	a10f      	add	r1, pc, #60	@ (adr r1, 8016b30 <scalbn+0xe8>)
 8016af4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016af8:	e7bd      	b.n	8016a76 <scalbn+0x2e>
 8016afa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016afe:	3236      	adds	r2, #54	@ 0x36
 8016b00:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8016b04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016b08:	4620      	mov	r0, r4
 8016b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8016b40 <scalbn+0xf8>)
 8016b0c:	4629      	mov	r1, r5
 8016b0e:	2200      	movs	r2, #0
 8016b10:	e7d4      	b.n	8016abc <scalbn+0x74>
 8016b12:	bf00      	nop
 8016b14:	f3af 8000 	nop.w
 8016b18:	c2f8f359 	.word	0xc2f8f359
 8016b1c:	01a56e1f 	.word	0x01a56e1f
 8016b20:	8800759c 	.word	0x8800759c
 8016b24:	7e37e43c 	.word	0x7e37e43c
 8016b28:	8800759c 	.word	0x8800759c
 8016b2c:	fe37e43c 	.word	0xfe37e43c
 8016b30:	c2f8f359 	.word	0xc2f8f359
 8016b34:	81a56e1f 	.word	0x81a56e1f
 8016b38:	43500000 	.word	0x43500000
 8016b3c:	ffff3cb0 	.word	0xffff3cb0
 8016b40:	3c900000 	.word	0x3c900000

08016b44 <with_errno>:
 8016b44:	b510      	push	{r4, lr}
 8016b46:	ed2d 8b02 	vpush	{d8}
 8016b4a:	eeb0 8a40 	vmov.f32	s16, s0
 8016b4e:	eef0 8a60 	vmov.f32	s17, s1
 8016b52:	4604      	mov	r4, r0
 8016b54:	f7fa fea4 	bl	80118a0 <__errno>
 8016b58:	eeb0 0a48 	vmov.f32	s0, s16
 8016b5c:	eef0 0a68 	vmov.f32	s1, s17
 8016b60:	ecbd 8b02 	vpop	{d8}
 8016b64:	6004      	str	r4, [r0, #0]
 8016b66:	bd10      	pop	{r4, pc}

08016b68 <xflow>:
 8016b68:	4603      	mov	r3, r0
 8016b6a:	b507      	push	{r0, r1, r2, lr}
 8016b6c:	ec51 0b10 	vmov	r0, r1, d0
 8016b70:	b183      	cbz	r3, 8016b94 <xflow+0x2c>
 8016b72:	4602      	mov	r2, r0
 8016b74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016b78:	e9cd 2300 	strd	r2, r3, [sp]
 8016b7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016b80:	f7e9 fd62 	bl	8000648 <__aeabi_dmul>
 8016b84:	ec41 0b10 	vmov	d0, r0, r1
 8016b88:	2022      	movs	r0, #34	@ 0x22
 8016b8a:	b003      	add	sp, #12
 8016b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016b90:	f7ff bfd8 	b.w	8016b44 <with_errno>
 8016b94:	4602      	mov	r2, r0
 8016b96:	460b      	mov	r3, r1
 8016b98:	e7ee      	b.n	8016b78 <xflow+0x10>
 8016b9a:	0000      	movs	r0, r0
 8016b9c:	0000      	movs	r0, r0
	...

08016ba0 <__math_uflow>:
 8016ba0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016ba8 <__math_uflow+0x8>
 8016ba4:	f7ff bfe0 	b.w	8016b68 <xflow>
 8016ba8:	00000000 	.word	0x00000000
 8016bac:	10000000 	.word	0x10000000

08016bb0 <__math_oflow>:
 8016bb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016bb8 <__math_oflow+0x8>
 8016bb4:	f7ff bfd8 	b.w	8016b68 <xflow>
 8016bb8:	00000000 	.word	0x00000000
 8016bbc:	70000000 	.word	0x70000000

08016bc0 <_init>:
 8016bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bc2:	bf00      	nop
 8016bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016bc6:	bc08      	pop	{r3}
 8016bc8:	469e      	mov	lr, r3
 8016bca:	4770      	bx	lr

08016bcc <_fini>:
 8016bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bce:	bf00      	nop
 8016bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016bd2:	bc08      	pop	{r3}
 8016bd4:	469e      	mov	lr, r3
 8016bd6:	4770      	bx	lr
