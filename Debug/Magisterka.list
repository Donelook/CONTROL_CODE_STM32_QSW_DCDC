
Magisterka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016858  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  08016a38  08016a38  00017a38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017268  08017268  00019380  2**0
                  CONTENTS
  4 .ARM          00000008  08017268  08017268  00018268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017270  08017270  00019380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017270  08017270  00018270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017274  08017274  00018274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000380  20000000  08017278  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002300  20000380  080175f8  00019380  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002680  080175f8  00019680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019380  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025665  00000000  00000000  000193b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ec3  00000000  00000000  0003ea15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f20  00000000  00000000  000438d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017f9  00000000  00000000  000457f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d55c  00000000  00000000  00046ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000265ee  00000000  00000000  0007454d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f016  00000000  00000000  0009ab3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b9b51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fa8  00000000  00000000  001b9b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001c3b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000380 	.word	0x20000380
 80001fc:	00000000 	.word	0x00000000
 8000200:	08016a20 	.word	0x08016a20

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000384 	.word	0x20000384
 800021c:	08016a20 	.word	0x08016a20

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int once = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103e:	f002 fffe 	bl	800403e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001042:	f000 f987 	bl	8001354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001046:	f000 ffa9 	bl	8001f9c <MX_GPIO_Init>
  MX_DMA_Init();
 800104a:	f000 ff5d 	bl	8001f08 <MX_DMA_Init>
  MX_ADC3_Init();
 800104e:	f000 fa47 	bl	80014e0 <MX_ADC3_Init>
  MX_ADC4_Init();
 8001052:	f000 fb11 	bl	8001678 <MX_ADC4_Init>
  MX_ADC5_Init();
 8001056:	f000 fb75 	bl	8001744 <MX_ADC5_Init>
  MX_DAC1_Init();
 800105a:	f000 fbf9 	bl	8001850 <MX_DAC1_Init>
  MX_DAC2_Init();
 800105e:	f000 fc43 	bl	80018e8 <MX_DAC2_Init>
  MX_TIM1_Init();
 8001062:	f000 fc7b 	bl	800195c <MX_TIM1_Init>
  MX_TIM8_Init();
 8001066:	f000 fdf9 	bl	8001c5c <MX_TIM8_Init>
  MX_UART4_Init();
 800106a:	f000 ff01 	bl	8001e70 <MX_UART4_Init>
  MX_ADC1_Init();
 800106e:	f000 f9bf 	bl	80013f0 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001072:	f000 fd05 	bl	8001a80 <MX_TIM4_Init>
  MX_USB_Device_Init();
 8001076:	f00e fe01 	bl	800fc7c <MX_USB_Device_Init>
  MX_TIM15_Init();
 800107a:	f000 fe81 	bl	8001d80 <MX_TIM15_Init>
  MX_TIM16_Init();
 800107e:	f000 fed1 	bl	8001e24 <MX_TIM16_Init>
  MX_TIM7_Init();
 8001082:	f000 fdb5 	bl	8001bf0 <MX_TIM7_Init>
  MX_TIM6_Init();
 8001086:	f000 fd73 	bl	8001b70 <MX_TIM6_Init>
  MX_CORDIC_Init();
 800108a:	f000 fbcd 	bl	8001828 <MX_CORDIC_Init>


  while (1)
  {

	  checkfaults = Check_Faults();
 800108e:	f001 f9f1 	bl	8002474 <Check_Faults>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	4b93      	ldr	r3, [pc, #588]	@ (80012e4 <main+0x2b0>)
 8001098:	701a      	strb	r2, [r3, #0]
	  checkreads = Check_Ready();
 800109a:	f001 fa25 	bl	80024e8 <Check_Ready>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b91      	ldr	r3, [pc, #580]	@ (80012e8 <main+0x2b4>)
 80010a4:	701a      	strb	r2, [r3, #0]
	  	  	  	  if (dataReceivedFlag) {
 80010a6:	4b91      	ldr	r3, [pc, #580]	@ (80012ec <main+0x2b8>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d004      	beq.n	80010ba <main+0x86>
	  	  	  	      // Process the data
	  	  	  	      ParseUSBCommand();  // Function to handle the received command
 80010b0:	f001 fefc 	bl	8002eac <ParseUSBCommand>

	  	  	  	      // Clear the flag after processing
	  	  	  	      dataReceivedFlag = 0;
 80010b4:	4b8d      	ldr	r3, [pc, #564]	@ (80012ec <main+0x2b8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
	  	  	  	  }

	  	  	  	  uint8_t interlock = HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin);
 80010ba:	2104      	movs	r1, #4
 80010bc:	488c      	ldr	r0, [pc, #560]	@ (80012f0 <main+0x2bc>)
 80010be:	f005 fd77 	bl	8006bb0 <HAL_GPIO_ReadPin>
 80010c2:	4603      	mov	r3, r0
 80010c4:	70fb      	strb	r3, [r7, #3]
	  	          if (interlock &&  start_program && !(Check_Faults())   && Check_Ready()/* start_program condition */) {
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d011      	beq.n	80010f0 <main+0xbc>
 80010cc:	4b89      	ldr	r3, [pc, #548]	@ (80012f4 <main+0x2c0>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00d      	beq.n	80010f0 <main+0xbc>
 80010d4:	f001 f9ce 	bl	8002474 <Check_Faults>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d108      	bne.n	80010f0 <main+0xbc>
 80010de:	f001 fa03 	bl	80024e8 <Check_Ready>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <main+0xbc>
	  	        	//USB_SendString("State: EVENT start_program \r\n");
	  	              event = EVENT_START;
 80010e8:	4b83      	ldr	r3, [pc, #524]	@ (80012f8 <main+0x2c4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	e00f      	b.n	8001110 <main+0xdc>
	  	          } else if (/*HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin)*/Check_Faults() /* fault condition */) {
 80010f0:	f001 f9c0 	bl	8002474 <Check_Faults>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <main+0xce>
	  	              event = EVENT_FAULT;
 80010fa:	4b7f      	ldr	r3, [pc, #508]	@ (80012f8 <main+0x2c4>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
 8001100:	e006      	b.n	8001110 <main+0xdc>
	  	          } else if (clear_fault) {
 8001102:	4b7e      	ldr	r3, [pc, #504]	@ (80012fc <main+0x2c8>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d002      	beq.n	8001110 <main+0xdc>
	  	        	  /* clear fault condition */
	  	              event = EVENT_CLEAR_FAULT;
 800110a:	4b7b      	ldr	r3, [pc, #492]	@ (80012f8 <main+0x2c4>)
 800110c:	2202      	movs	r2, #2
 800110e:	701a      	strb	r2, [r3, #0]
	  	          } else if (0/* shutdown condition */) {
	  	              event = EVENT_SHUTDOWN;
	  	          }

	  	          // Handle the event and update the state
	  	          currentState = handle_event(currentState, event);
 8001110:	4b7b      	ldr	r3, [pc, #492]	@ (8001300 <main+0x2cc>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4a78      	ldr	r2, [pc, #480]	@ (80012f8 <main+0x2c4>)
 8001116:	7812      	ldrb	r2, [r2, #0]
 8001118:	4611      	mov	r1, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f001 f88a 	bl	8002234 <handle_event>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b76      	ldr	r3, [pc, #472]	@ (8001300 <main+0x2cc>)
 8001126:	701a      	strb	r2, [r3, #0]

	  	          // Perform actions based on the current state
	  	          switch (currentState) {
 8001128:	4b75      	ldr	r3, [pc, #468]	@ (8001300 <main+0x2cc>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b05      	cmp	r3, #5
 800112e:	f200 80d2 	bhi.w	80012d6 <main+0x2a2>
 8001132:	a201      	add	r2, pc, #4	@ (adr r2, 8001138 <main+0x104>)
 8001134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001138:	08001151 	.word	0x08001151
 800113c:	0800120f 	.word	0x0800120f
 8001140:	08001233 	.word	0x08001233
 8001144:	080012d7 	.word	0x080012d7
 8001148:	0800125f 	.word	0x0800125f
 800114c:	080012d7 	.word	0x080012d7
	  	              {
	  	            	//GPIOs
	  	            	//CUrrent Sensors OCD pin needed to go low in reset condition after fault event
	  	            	//HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_SET);
	  	            	//HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 8001150:	2201      	movs	r2, #1
 8001152:	2104      	movs	r1, #4
 8001154:	486b      	ldr	r0, [pc, #428]	@ (8001304 <main+0x2d0>)
 8001156:	f005 fd43 	bl	8006be0 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP
 800115a:	2200      	movs	r2, #0
 800115c:	2120      	movs	r1, #32
 800115e:	4864      	ldr	r0, [pc, #400]	@ (80012f0 <main+0x2bc>)
 8001160:	f005 fd3e 	bl	8006be0 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 8001164:	2201      	movs	r2, #1
 8001166:	2120      	movs	r1, #32
 8001168:	4867      	ldr	r0, [pc, #412]	@ (8001308 <main+0x2d4>)
 800116a:	f005 fd39 	bl	8006be0 <HAL_GPIO_WritePin>
	  	            	HAL_Delay(1000);
 800116e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001172:	f002 ffd5 	bl	8004120 <HAL_Delay>
	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	2120      	movs	r1, #32
 800117a:	4863      	ldr	r0, [pc, #396]	@ (8001308 <main+0x2d4>)
 800117c:	f005 fd30 	bl	8006be0 <HAL_GPIO_WritePin>
	  	            	  // Start PWM for delay time transfer to FPGA
	  	            	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001180:	2100      	movs	r1, #0
 8001182:	4862      	ldr	r0, [pc, #392]	@ (800130c <main+0x2d8>)
 8001184:	f008 fc8a 	bl	8009a9c <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001188:	2104      	movs	r1, #4
 800118a:	4861      	ldr	r0, [pc, #388]	@ (8001310 <main+0x2dc>)
 800118c:	f008 fc86 	bl	8009a9c <HAL_TIM_PWM_Start>

	  	            	  //DAC for  current reference
	  	            	  ///DAC1_OUT1 	- MAX1
	  	            	  //DAC1_OUT2 	- MAX2
	  	            	  //DAC2_OUT1	- MIN
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_1);
 8001190:	2100      	movs	r1, #0
 8001192:	4860      	ldr	r0, [pc, #384]	@ (8001314 <main+0x2e0>)
 8001194:	f004 fe5c 	bl	8005e50 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_2);
 8001198:	2110      	movs	r1, #16
 800119a:	485e      	ldr	r0, [pc, #376]	@ (8001314 <main+0x2e0>)
 800119c:	f004 fe58 	bl	8005e50 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac2,DAC2_CHANNEL_1);
 80011a0:	2100      	movs	r1, #0
 80011a2:	485d      	ldr	r0, [pc, #372]	@ (8001318 <main+0x2e4>)
 80011a4:	f004 fe54 	bl	8005e50 <HAL_DAC_Start>

	  	            	//if( HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, BUFFER_SIZE, DAC_ALIGN_12B_R)!= HAL_OK) printf("error");
	  	            	//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);

	  	            	  // FAN PWM and 5s timer6 for check temperature and change duty cycle
	  	            	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80011a8:	2100      	movs	r1, #0
 80011aa:	485c      	ldr	r0, [pc, #368]	@ (800131c <main+0x2e8>)
 80011ac:	f008 fc76 	bl	8009a9c <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_Base_Start_IT(&htim6);
 80011b0:	485b      	ldr	r0, [pc, #364]	@ (8001320 <main+0x2ec>)
 80011b2:	f008 fb75 	bl	80098a0 <HAL_TIM_Base_Start_IT>

	  	            	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 80011b6:	217f      	movs	r1, #127	@ 0x7f
 80011b8:	485a      	ldr	r0, [pc, #360]	@ (8001324 <main+0x2f0>)
 80011ba:	f004 fad7 	bl	800576c <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 80011be:	217f      	movs	r1, #127	@ 0x7f
 80011c0:	4859      	ldr	r0, [pc, #356]	@ (8001328 <main+0x2f4>)
 80011c2:	f004 fad3 	bl	800576c <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 80011c6:	217f      	movs	r1, #127	@ 0x7f
 80011c8:	4858      	ldr	r0, [pc, #352]	@ (800132c <main+0x2f8>)
 80011ca:	f004 facf 	bl	800576c <HAL_ADCEx_Calibration_Start>

	  	            	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_dma_buffer, 5);
 80011ce:	2205      	movs	r2, #5
 80011d0:	4957      	ldr	r1, [pc, #348]	@ (8001330 <main+0x2fc>)
 80011d2:	4854      	ldr	r0, [pc, #336]	@ (8001324 <main+0x2f0>)
 80011d4:	f003 fbc6 	bl	8004964 <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4_dma_buffer, 2);
 80011d8:	2202      	movs	r2, #2
 80011da:	4956      	ldr	r1, [pc, #344]	@ (8001334 <main+0x300>)
 80011dc:	4852      	ldr	r0, [pc, #328]	@ (8001328 <main+0x2f4>)
 80011de:	f003 fbc1 	bl	8004964 <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adc5_dma_buffer, 10);
 80011e2:	220a      	movs	r2, #10
 80011e4:	4954      	ldr	r1, [pc, #336]	@ (8001338 <main+0x304>)
 80011e6:	4851      	ldr	r0, [pc, #324]	@ (800132c <main+0x2f8>)
 80011e8:	f003 fbbc 	bl	8004964 <HAL_ADC_Start_DMA>

	  	            	Set_PWM_DutyCycle(20);
 80011ec:	2014      	movs	r0, #20
 80011ee:	f001 f875 	bl	80022dc <Set_PWM_DutyCycle>

	  	            	current_sensor1_vref = adc3_dma_buffer[0];// reference for imax imin
 80011f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001330 <main+0x2fc>)
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b50      	ldr	r3, [pc, #320]	@ (800133c <main+0x308>)
 80011fa:	801a      	strh	r2, [r3, #0]
	  	            	current_sensor2_vref = adc3_dma_buffer[1];// reference for imax imin
 80011fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001330 <main+0x2fc>)
 80011fe:	885b      	ldrh	r3, [r3, #2]
 8001200:	b29a      	uxth	r2, r3
 8001202:	4b4f      	ldr	r3, [pc, #316]	@ (8001340 <main+0x30c>)
 8001204:	801a      	strh	r2, [r3, #0]

	  	            	currentState = STATE_STANDBY;
 8001206:	4b3e      	ldr	r3, [pc, #248]	@ (8001300 <main+0x2cc>)
 8001208:	2201      	movs	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 800120c:	e068      	b.n	80012e0 <main+0x2ac>
	  	              case STATE_STANDBY:
	  	                  // Wait for start_program signal
	  	              {
	  	            	  if(start_program && /*HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin)*/   !(Check_Faults())   && Check_Ready()){
 800120e:	4b39      	ldr	r3, [pc, #228]	@ (80012f4 <main+0x2c0>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d061      	beq.n	80012da <main+0x2a6>
 8001216:	f001 f92d 	bl	8002474 <Check_Faults>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d15c      	bne.n	80012da <main+0x2a6>
 8001220:	f001 f962 	bl	80024e8 <Check_Ready>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d057      	beq.n	80012da <main+0x2a6>
	  	            		  currentState = STATE_SOFT_START;
 800122a:	4b35      	ldr	r3, [pc, #212]	@ (8001300 <main+0x2cc>)
 800122c:	2202      	movs	r2, #2
 800122e:	701a      	strb	r2, [r3, #0]
	  	            	  }

	  	              }
	  	                  break;
 8001230:	e053      	b.n	80012da <main+0x2a6>
	  	              case STATE_SOFT_START:
	  	                  // Gradually ramp up the output
	  	              {
	  	            	  if(once == 0){
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10c      	bne.n	8001252 <main+0x21e>
	  	            	  //Start timer that start_program ramp and pi regulation
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
 8001238:	2200      	movs	r2, #0
 800123a:	2104      	movs	r1, #4
 800123c:	4831      	ldr	r0, [pc, #196]	@ (8001304 <main+0x2d0>)
 800123e:	f005 fccf 	bl	8006be0 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
 8001242:	2201      	movs	r2, #1
 8001244:	2120      	movs	r1, #32
 8001246:	482a      	ldr	r0, [pc, #168]	@ (80012f0 <main+0x2bc>)
 8001248:	f005 fcca 	bl	8006be0 <HAL_GPIO_WritePin>
	  	            	HAL_TIM_Base_Start_IT(&htim15); // START TIM15 THATS IS MAIN CONTROL LOOP
 800124c:	483d      	ldr	r0, [pc, #244]	@ (8001344 <main+0x310>)
 800124e:	f008 fb27 	bl	80098a0 <HAL_TIM_Base_Start_IT>
	  	            	  }

	  	            	if(once==0) once = 1;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d142      	bne.n	80012de <main+0x2aa>
 8001258:	2301      	movs	r3, #1
 800125a:	607b      	str	r3, [r7, #4]
	  	              }
	  	                  break;
 800125c:	e03f      	b.n	80012de <main+0x2aa>
	  	                  break;
	  	              case STATE_FAULT:
	  	                  // Handle fault condition
	  	            	  // Turn off all gate drivers and stop FPGA
	  	              {
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 800125e:	2201      	movs	r2, #1
 8001260:	2104      	movs	r1, #4
 8001262:	4828      	ldr	r0, [pc, #160]	@ (8001304 <main+0x2d0>)
 8001264:	f005 fcbc 	bl	8006be0 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	2120      	movs	r1, #32
 800126c:	4820      	ldr	r0, [pc, #128]	@ (80012f0 <main+0x2bc>)
 800126e:	f005 fcb7 	bl	8006be0 <HAL_GPIO_WritePin>
	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 8001272:	4834      	ldr	r0, [pc, #208]	@ (8001344 <main+0x310>)
 8001274:	f008 fb8c 	bl	8009990 <HAL_TIM_Base_Stop_IT>

	  	            	HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port,NOT_RST_1_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	4832      	ldr	r0, [pc, #200]	@ (8001348 <main+0x314>)
 800127e:	f005 fcaf 	bl	8006be0 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_2_GPIO_Port,NOT_RST_2_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001288:	481f      	ldr	r0, [pc, #124]	@ (8001308 <main+0x2d4>)
 800128a:	f005 fca9 	bl	8006be0 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port,NOT_RST_3_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	2101      	movs	r1, #1
 8001292:	482e      	ldr	r0, [pc, #184]	@ (800134c <main+0x318>)
 8001294:	f005 fca4 	bl	8006be0 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port,NOT_RST_4_Pin, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	2140      	movs	r1, #64	@ 0x40
 800129c:	4814      	ldr	r0, [pc, #80]	@ (80012f0 <main+0x2bc>)
 800129e:	f005 fc9f 	bl	8006be0 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2102      	movs	r1, #2
 80012a6:	4818      	ldr	r0, [pc, #96]	@ (8001308 <main+0x2d4>)
 80012a8:	f005 fc9a 	bl	8006be0 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012b2:	4814      	ldr	r0, [pc, #80]	@ (8001304 <main+0x2d0>)
 80012b4:	f005 fc94 	bl	8006be0 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	2120      	movs	r1, #32
 80012bc:	4812      	ldr	r0, [pc, #72]	@ (8001308 <main+0x2d4>)
 80012be:	f005 fc8f 	bl	8006be0 <HAL_GPIO_WritePin>

	  	            	HAL_TIM_Base_Start(&htim7); // timer for reset OCD and INTERLOCK reset turn off
 80012c2:	4823      	ldr	r0, [pc, #140]	@ (8001350 <main+0x31c>)
 80012c4:	f008 fa7c 	bl	80097c0 <HAL_TIM_Base_Start>



	  	            	start_program = 0;
 80012c8:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <main+0x2c0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
	  	            	currentState = STATE_STANDBY;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <main+0x2cc>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 80012d4:	e004      	b.n	80012e0 <main+0x2ac>
	  	            	//HAL_TIM_Base_Stop_IT(&htim15);
	  	              }

	  	                  break;
	  	              default:
	  	                  break;
 80012d6:	bf00      	nop
 80012d8:	e6d9      	b.n	800108e <main+0x5a>
	  	                  break;
 80012da:	bf00      	nop
 80012dc:	e6d7      	b.n	800108e <main+0x5a>
	  	                  break;
 80012de:	bf00      	nop
  {
 80012e0:	e6d5      	b.n	800108e <main+0x5a>
 80012e2:	bf00      	nop
 80012e4:	20000b53 	.word	0x20000b53
 80012e8:	20000b54 	.word	0x20000b54
 80012ec:	20000b40 	.word	0x20000b40
 80012f0:	48000800 	.word	0x48000800
 80012f4:	20000b50 	.word	0x20000b50
 80012f8:	20000014 	.word	0x20000014
 80012fc:	20000b51 	.word	0x20000b51
 8001300:	20000b52 	.word	0x20000b52
 8001304:	48001400 	.word	0x48001400
 8001308:	48001000 	.word	0x48001000
 800130c:	2000077c 	.word	0x2000077c
 8001310:	200008ac 	.word	0x200008ac
 8001314:	20000694 	.word	0x20000694
 8001318:	200006a8 	.word	0x200006a8
 800131c:	200007c8 	.word	0x200007c8
 8001320:	20000814 	.word	0x20000814
 8001324:	20000408 	.word	0x20000408
 8001328:	20000474 	.word	0x20000474
 800132c:	200004e0 	.word	0x200004e0
 8001330:	20000a40 	.word	0x20000a40
 8001334:	20000a54 	.word	0x20000a54
 8001338:	20000a68 	.word	0x20000a68
 800133c:	20000a24 	.word	0x20000a24
 8001340:	20000a26 	.word	0x20000a26
 8001344:	200008f8 	.word	0x200008f8
 8001348:	48000400 	.word	0x48000400
 800134c:	48000c00 	.word	0x48000c00
 8001350:	20000860 	.word	0x20000860

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b094      	sub	sp, #80	@ 0x50
 8001358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135a:	f107 0318 	add.w	r3, r7, #24
 800135e:	2238      	movs	r2, #56	@ 0x38
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f010 f967 	bl	8011636 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001376:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800137a:	f007 f999 	bl	80086b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800137e:	2322      	movs	r3, #34	@ 0x22
 8001380:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001382:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001386:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001388:	2340      	movs	r3, #64	@ 0x40
 800138a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800138c:	2301      	movs	r3, #1
 800138e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001390:	2302      	movs	r3, #2
 8001392:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001394:	2302      	movs	r3, #2
 8001396:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001398:	2304      	movs	r3, #4
 800139a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 800139c:	234b      	movs	r3, #75	@ 0x4b
 800139e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013a0:	2302      	movs	r3, #2
 80013a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013a4:	2302      	movs	r3, #2
 80013a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013a8:	2302      	movs	r3, #2
 80013aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ac:	f107 0318 	add.w	r3, r7, #24
 80013b0:	4618      	mov	r0, r3
 80013b2:	f007 fa31 	bl	8008818 <HAL_RCC_OscConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80013bc:	f002 f82c 	bl	8003418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c0:	230f      	movs	r3, #15
 80013c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c4:	2303      	movs	r3, #3
 80013c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2104      	movs	r1, #4
 80013d8:	4618      	mov	r0, r3
 80013da:	f007 fd2f 	bl	8008e3c <HAL_RCC_ClockConfig>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013e4:	f002 f818 	bl	8003418 <Error_Handler>
  }
}
 80013e8:	bf00      	nop
 80013ea:	3750      	adds	r7, #80	@ 0x50
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08c      	sub	sp, #48	@ 0x30
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2220      	movs	r2, #32
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f010 f914 	bl	8011636 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800140e:	4b32      	ldr	r3, [pc, #200]	@ (80014d8 <MX_ADC1_Init+0xe8>)
 8001410:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001414:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001416:	4b30      	ldr	r3, [pc, #192]	@ (80014d8 <MX_ADC1_Init+0xe8>)
 8001418:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800141c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800141e:	4b2e      	ldr	r3, [pc, #184]	@ (80014d8 <MX_ADC1_Init+0xe8>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001424:	4b2c      	ldr	r3, [pc, #176]	@ (80014d8 <MX_ADC1_Init+0xe8>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800142a:	4b2b      	ldr	r3, [pc, #172]	@ (80014d8 <MX_ADC1_Init+0xe8>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001430:	4b29      	ldr	r3, [pc, #164]	@ (80014d8 <MX_ADC1_Init+0xe8>)
 8001432:	2200      	movs	r2, #0
 8001434:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001436:	4b28      	ldr	r3, [pc, #160]	@ (80014d8 <MX_ADC1_Init+0xe8>)
 8001438:	2204      	movs	r2, #4
 800143a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800143c:	4b26      	ldr	r3, [pc, #152]	@ (80014d8 <MX_ADC1_Init+0xe8>)
 800143e:	2200      	movs	r2, #0
 8001440:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001442:	4b25      	ldr	r3, [pc, #148]	@ (80014d8 <MX_ADC1_Init+0xe8>)
 8001444:	2200      	movs	r2, #0
 8001446:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001448:	4b23      	ldr	r3, [pc, #140]	@ (80014d8 <MX_ADC1_Init+0xe8>)
 800144a:	2201      	movs	r2, #1
 800144c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800144e:	4b22      	ldr	r3, [pc, #136]	@ (80014d8 <MX_ADC1_Init+0xe8>)
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001456:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <MX_ADC1_Init+0xe8>)
 8001458:	2200      	movs	r2, #0
 800145a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800145c:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <MX_ADC1_Init+0xe8>)
 800145e:	2200      	movs	r2, #0
 8001460:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001462:	4b1d      	ldr	r3, [pc, #116]	@ (80014d8 <MX_ADC1_Init+0xe8>)
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800146a:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <MX_ADC1_Init+0xe8>)
 800146c:	2200      	movs	r2, #0
 800146e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001470:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <MX_ADC1_Init+0xe8>)
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001478:	4817      	ldr	r0, [pc, #92]	@ (80014d8 <MX_ADC1_Init+0xe8>)
 800147a:	f003 f8b7 	bl	80045ec <HAL_ADC_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001484:	f001 ffc8 	bl	8003418 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800148c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001490:	4619      	mov	r1, r3
 8001492:	4811      	ldr	r0, [pc, #68]	@ (80014d8 <MX_ADC1_Init+0xe8>)
 8001494:	f004 f9cc 	bl	8005830 <HAL_ADCEx_MultiModeConfigChannel>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800149e:	f001 ffbb 	bl	8003418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <MX_ADC1_Init+0xec>)
 80014a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014a6:	2306      	movs	r3, #6
 80014a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80014aa:	2307      	movs	r3, #7
 80014ac:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014ae:	237f      	movs	r3, #127	@ 0x7f
 80014b0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014b2:	2304      	movs	r3, #4
 80014b4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	4619      	mov	r1, r3
 80014be:	4806      	ldr	r0, [pc, #24]	@ (80014d8 <MX_ADC1_Init+0xe8>)
 80014c0:	f003 fb38 	bl	8004b34 <HAL_ADC_ConfigChannel>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80014ca:	f001 ffa5 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	3730      	adds	r7, #48	@ 0x30
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2000039c 	.word	0x2000039c
 80014dc:	cb840000 	.word	0xcb840000

080014e0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08c      	sub	sp, #48	@ 0x30
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2220      	movs	r2, #32
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f010 f89c 	bl	8011636 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014fe:	4b57      	ldr	r3, [pc, #348]	@ (800165c <MX_ADC3_Init+0x17c>)
 8001500:	4a57      	ldr	r2, [pc, #348]	@ (8001660 <MX_ADC3_Init+0x180>)
 8001502:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001504:	4b55      	ldr	r3, [pc, #340]	@ (800165c <MX_ADC3_Init+0x17c>)
 8001506:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 800150a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800150c:	4b53      	ldr	r3, [pc, #332]	@ (800165c <MX_ADC3_Init+0x17c>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001512:	4b52      	ldr	r3, [pc, #328]	@ (800165c <MX_ADC3_Init+0x17c>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001518:	4b50      	ldr	r3, [pc, #320]	@ (800165c <MX_ADC3_Init+0x17c>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800151e:	4b4f      	ldr	r3, [pc, #316]	@ (800165c <MX_ADC3_Init+0x17c>)
 8001520:	2201      	movs	r2, #1
 8001522:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001524:	4b4d      	ldr	r3, [pc, #308]	@ (800165c <MX_ADC3_Init+0x17c>)
 8001526:	2204      	movs	r2, #4
 8001528:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800152a:	4b4c      	ldr	r3, [pc, #304]	@ (800165c <MX_ADC3_Init+0x17c>)
 800152c:	2200      	movs	r2, #0
 800152e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001530:	4b4a      	ldr	r3, [pc, #296]	@ (800165c <MX_ADC3_Init+0x17c>)
 8001532:	2201      	movs	r2, #1
 8001534:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 5;
 8001536:	4b49      	ldr	r3, [pc, #292]	@ (800165c <MX_ADC3_Init+0x17c>)
 8001538:	2205      	movs	r2, #5
 800153a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800153c:	4b47      	ldr	r3, [pc, #284]	@ (800165c <MX_ADC3_Init+0x17c>)
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001544:	4b45      	ldr	r3, [pc, #276]	@ (800165c <MX_ADC3_Init+0x17c>)
 8001546:	2200      	movs	r2, #0
 8001548:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800154a:	4b44      	ldr	r3, [pc, #272]	@ (800165c <MX_ADC3_Init+0x17c>)
 800154c:	2200      	movs	r2, #0
 800154e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001550:	4b42      	ldr	r3, [pc, #264]	@ (800165c <MX_ADC3_Init+0x17c>)
 8001552:	2201      	movs	r2, #1
 8001554:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001558:	4b40      	ldr	r3, [pc, #256]	@ (800165c <MX_ADC3_Init+0x17c>)
 800155a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800155e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001560:	4b3e      	ldr	r3, [pc, #248]	@ (800165c <MX_ADC3_Init+0x17c>)
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001568:	483c      	ldr	r0, [pc, #240]	@ (800165c <MX_ADC3_Init+0x17c>)
 800156a:	f003 f83f 	bl	80045ec <HAL_ADC_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 8001574:	f001 ff50 	bl	8003418 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800157c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001580:	4619      	mov	r1, r3
 8001582:	4836      	ldr	r0, [pc, #216]	@ (800165c <MX_ADC3_Init+0x17c>)
 8001584:	f004 f954 	bl	8005830 <HAL_ADCEx_MultiModeConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800158e:	f001 ff43 	bl	8003418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001592:	4b34      	ldr	r3, [pc, #208]	@ (8001664 <MX_ADC3_Init+0x184>)
 8001594:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001596:	2306      	movs	r3, #6
 8001598:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800159e:	237f      	movs	r3, #127	@ 0x7f
 80015a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 38;
 80015a6:	2326      	movs	r3, #38	@ 0x26
 80015a8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 80015aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015ae:	61fb      	str	r3, [r7, #28]
  sConfig.OffsetSaturation = DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	4619      	mov	r1, r3
 80015ba:	4828      	ldr	r0, [pc, #160]	@ (800165c <MX_ADC3_Init+0x17c>)
 80015bc:	f003 faba 	bl	8004b34 <HAL_ADC_ConfigChannel>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80015c6:	f001 ff27 	bl	8003418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015ca:	4b27      	ldr	r3, [pc, #156]	@ (8001668 <MX_ADC3_Init+0x188>)
 80015cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015ce:	230c      	movs	r3, #12
 80015d0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_2;
 80015d2:	2301      	movs	r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 37;
 80015d6:	2325      	movs	r3, #37	@ 0x25
 80015d8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	4619      	mov	r1, r3
 80015de:	481f      	ldr	r0, [pc, #124]	@ (800165c <MX_ADC3_Init+0x17c>)
 80015e0:	f003 faa8 	bl	8004b34 <HAL_ADC_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_ADC3_Init+0x10e>
  {
    Error_Handler();
 80015ea:	f001 ff15 	bl	8003418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80015ee:	4b1f      	ldr	r3, [pc, #124]	@ (800166c <MX_ADC3_Init+0x18c>)
 80015f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015f2:	2312      	movs	r3, #18
 80015f4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_3;
 80015f6:	2302      	movs	r3, #2
 80015f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 8;
 80015fa:	2308      	movs	r3, #8
 80015fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	4619      	mov	r1, r3
 8001602:	4816      	ldr	r0, [pc, #88]	@ (800165c <MX_ADC3_Init+0x17c>)
 8001604:	f003 fa96 	bl	8004b34 <HAL_ADC_ConfigChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_ADC3_Init+0x132>
  {
    Error_Handler();
 800160e:	f001 ff03 	bl	8003418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001612:	4b17      	ldr	r3, [pc, #92]	@ (8001670 <MX_ADC3_Init+0x190>)
 8001614:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001616:	2318      	movs	r3, #24
 8001618:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800161a:	2304      	movs	r3, #4
 800161c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	4619      	mov	r1, r3
 8001626:	480d      	ldr	r0, [pc, #52]	@ (800165c <MX_ADC3_Init+0x17c>)
 8001628:	f003 fa84 	bl	8004b34 <HAL_ADC_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 8001632:	f001 fef1 	bl	8003418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001636:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <MX_ADC3_Init+0x194>)
 8001638:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800163a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800163e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	@ (800165c <MX_ADC3_Init+0x17c>)
 8001646:	f003 fa75 	bl	8004b34 <HAL_ADC_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 8001650:	f001 fee2 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	3730      	adds	r7, #48	@ 0x30
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000408 	.word	0x20000408
 8001660:	50000400 	.word	0x50000400
 8001664:	04300002 	.word	0x04300002
 8001668:	08600004 	.word	0x08600004
 800166c:	0c900008 	.word	0x0c900008
 8001670:	10c00010 	.word	0x10c00010
 8001674:	14f00020 	.word	0x14f00020

08001678 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800167e:	463b      	mov	r3, r7
 8001680:	2220      	movs	r2, #32
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f00f ffd6 	bl	8011636 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800168a:	4b2b      	ldr	r3, [pc, #172]	@ (8001738 <MX_ADC4_Init+0xc0>)
 800168c:	4a2b      	ldr	r2, [pc, #172]	@ (800173c <MX_ADC4_Init+0xc4>)
 800168e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001690:	4b29      	ldr	r3, [pc, #164]	@ (8001738 <MX_ADC4_Init+0xc0>)
 8001692:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001696:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001698:	4b27      	ldr	r3, [pc, #156]	@ (8001738 <MX_ADC4_Init+0xc0>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800169e:	4b26      	ldr	r3, [pc, #152]	@ (8001738 <MX_ADC4_Init+0xc0>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80016a4:	4b24      	ldr	r3, [pc, #144]	@ (8001738 <MX_ADC4_Init+0xc0>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016aa:	4b23      	ldr	r3, [pc, #140]	@ (8001738 <MX_ADC4_Init+0xc0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016b0:	4b21      	ldr	r3, [pc, #132]	@ (8001738 <MX_ADC4_Init+0xc0>)
 80016b2:	2204      	movs	r2, #4
 80016b4:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80016b6:	4b20      	ldr	r3, [pc, #128]	@ (8001738 <MX_ADC4_Init+0xc0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80016bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001738 <MX_ADC4_Init+0xc0>)
 80016be:	2201      	movs	r2, #1
 80016c0:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80016c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001738 <MX_ADC4_Init+0xc0>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <MX_ADC4_Init+0xc0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016d0:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <MX_ADC4_Init+0xc0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016d6:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <MX_ADC4_Init+0xc0>)
 80016d8:	2200      	movs	r2, #0
 80016da:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80016dc:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <MX_ADC4_Init+0xc0>)
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80016e4:	4b14      	ldr	r3, [pc, #80]	@ (8001738 <MX_ADC4_Init+0xc0>)
 80016e6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80016ec:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <MX_ADC4_Init+0xc0>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80016f4:	4810      	ldr	r0, [pc, #64]	@ (8001738 <MX_ADC4_Init+0xc0>)
 80016f6:	f002 ff79 	bl	80045ec <HAL_ADC_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8001700:	f001 fe8a 	bl	8003418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001704:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <MX_ADC4_Init+0xc8>)
 8001706:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001708:	2306      	movs	r3, #6
 800170a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800170c:	2307      	movs	r3, #7
 800170e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001710:	237f      	movs	r3, #127	@ 0x7f
 8001712:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001714:	2304      	movs	r3, #4
 8001716:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800171c:	463b      	mov	r3, r7
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	@ (8001738 <MX_ADC4_Init+0xc0>)
 8001722:	f003 fa07 	bl	8004b34 <HAL_ADC_ConfigChannel>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 800172c:	f001 fe74 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	3720      	adds	r7, #32
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000474 	.word	0x20000474
 800173c:	50000500 	.word	0x50000500
 8001740:	04300002 	.word	0x04300002

08001744 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800174a:	463b      	mov	r3, r7
 800174c:	2220      	movs	r2, #32
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f00f ff70 	bl	8011636 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001756:	4b31      	ldr	r3, [pc, #196]	@ (800181c <MX_ADC5_Init+0xd8>)
 8001758:	4a31      	ldr	r2, [pc, #196]	@ (8001820 <MX_ADC5_Init+0xdc>)
 800175a:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 800175c:	4b2f      	ldr	r3, [pc, #188]	@ (800181c <MX_ADC5_Init+0xd8>)
 800175e:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001762:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001764:	4b2d      	ldr	r3, [pc, #180]	@ (800181c <MX_ADC5_Init+0xd8>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800176a:	4b2c      	ldr	r3, [pc, #176]	@ (800181c <MX_ADC5_Init+0xd8>)
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001770:	4b2a      	ldr	r3, [pc, #168]	@ (800181c <MX_ADC5_Init+0xd8>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001776:	4b29      	ldr	r3, [pc, #164]	@ (800181c <MX_ADC5_Init+0xd8>)
 8001778:	2200      	movs	r2, #0
 800177a:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800177c:	4b27      	ldr	r3, [pc, #156]	@ (800181c <MX_ADC5_Init+0xd8>)
 800177e:	2204      	movs	r2, #4
 8001780:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001782:	4b26      	ldr	r3, [pc, #152]	@ (800181c <MX_ADC5_Init+0xd8>)
 8001784:	2200      	movs	r2, #0
 8001786:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8001788:	4b24      	ldr	r3, [pc, #144]	@ (800181c <MX_ADC5_Init+0xd8>)
 800178a:	2201      	movs	r2, #1
 800178c:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800178e:	4b23      	ldr	r3, [pc, #140]	@ (800181c <MX_ADC5_Init+0xd8>)
 8001790:	2201      	movs	r2, #1
 8001792:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001794:	4b21      	ldr	r3, [pc, #132]	@ (800181c <MX_ADC5_Init+0xd8>)
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800179c:	4b1f      	ldr	r3, [pc, #124]	@ (800181c <MX_ADC5_Init+0xd8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017a2:	4b1e      	ldr	r3, [pc, #120]	@ (800181c <MX_ADC5_Init+0xd8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 80017a8:	4b1c      	ldr	r3, [pc, #112]	@ (800181c <MX_ADC5_Init+0xd8>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017b0:	4b1a      	ldr	r3, [pc, #104]	@ (800181c <MX_ADC5_Init+0xd8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 80017b6:	4b19      	ldr	r3, [pc, #100]	@ (800181c <MX_ADC5_Init+0xd8>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 80017be:	4b17      	ldr	r3, [pc, #92]	@ (800181c <MX_ADC5_Init+0xd8>)
 80017c0:	221c      	movs	r2, #28
 80017c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 80017c4:	4b15      	ldr	r3, [pc, #84]	@ (800181c <MX_ADC5_Init+0xd8>)
 80017c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017ca:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80017cc:	4b13      	ldr	r3, [pc, #76]	@ (800181c <MX_ADC5_Init+0xd8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80017d2:	4b12      	ldr	r3, [pc, #72]	@ (800181c <MX_ADC5_Init+0xd8>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80017d8:	4810      	ldr	r0, [pc, #64]	@ (800181c <MX_ADC5_Init+0xd8>)
 80017da:	f002 ff07 	bl	80045ec <HAL_ADC_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_ADC5_Init+0xa4>
  {
    Error_Handler();
 80017e4:	f001 fe18 	bl	8003418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <MX_ADC5_Init+0xe0>)
 80017ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017ec:	2306      	movs	r3, #6
 80017ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017f4:	237f      	movs	r3, #127	@ 0x7f
 80017f6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017f8:	2304      	movs	r3, #4
 80017fa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001800:	463b      	mov	r3, r7
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	@ (800181c <MX_ADC5_Init+0xd8>)
 8001806:	f003 f995 	bl	8004b34 <HAL_ADC_ConfigChannel>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_ADC5_Init+0xd0>
  {
    Error_Handler();
 8001810:	f001 fe02 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200004e0 	.word	0x200004e0
 8001820:	50000600 	.word	0x50000600
 8001824:	04300002 	.word	0x04300002

08001828 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <MX_CORDIC_Init+0x20>)
 800182e:	4a07      	ldr	r2, [pc, #28]	@ (800184c <MX_CORDIC_Init+0x24>)
 8001830:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001832:	4805      	ldr	r0, [pc, #20]	@ (8001848 <MX_CORDIC_Init+0x20>)
 8001834:	f004 f904 	bl	8005a40 <HAL_CORDIC_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800183e:	f001 fdeb 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	2000066c 	.word	0x2000066c
 800184c:	40020c00 	.word	0x40020c00

08001850 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	@ 0x30
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001856:	463b      	mov	r3, r7
 8001858:	2230      	movs	r2, #48	@ 0x30
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f00f feea 	bl	8011636 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001862:	4b1e      	ldr	r3, [pc, #120]	@ (80018dc <MX_DAC1_Init+0x8c>)
 8001864:	4a1e      	ldr	r2, [pc, #120]	@ (80018e0 <MX_DAC1_Init+0x90>)
 8001866:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001868:	481c      	ldr	r0, [pc, #112]	@ (80018dc <MX_DAC1_Init+0x8c>)
 800186a:	f004 face 	bl	8005e0a <HAL_DAC_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001874:	f001 fdd0 	bl	8003418 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001878:	2302      	movs	r3, #2
 800187a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800188c:	2300      	movs	r3, #0
 800188e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001894:	2301      	movs	r3, #1
 8001896:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800189c:	463b      	mov	r3, r7
 800189e:	2200      	movs	r2, #0
 80018a0:	4619      	mov	r1, r3
 80018a2:	480e      	ldr	r0, [pc, #56]	@ (80018dc <MX_DAC1_Init+0x8c>)
 80018a4:	f004 fbce 	bl	8006044 <HAL_DAC_ConfigChannel>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80018ae:	f001 fdb3 	bl	8003418 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80018b2:	463b      	mov	r3, r7
 80018b4:	2210      	movs	r2, #16
 80018b6:	4619      	mov	r1, r3
 80018b8:	4808      	ldr	r0, [pc, #32]	@ (80018dc <MX_DAC1_Init+0x8c>)
 80018ba:	f004 fbc3 	bl	8006044 <HAL_DAC_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 80018c4:	f001 fda8 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  __HAL_LINKDMA(&hdac1, DMA_Handle1, hdma_dac1_ch1);
 80018c8:	4b04      	ldr	r3, [pc, #16]	@ (80018dc <MX_DAC1_Init+0x8c>)
 80018ca:	4a06      	ldr	r2, [pc, #24]	@ (80018e4 <MX_DAC1_Init+0x94>)
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <MX_DAC1_Init+0x94>)
 80018d0:	4a02      	ldr	r2, [pc, #8]	@ (80018dc <MX_DAC1_Init+0x8c>)
 80018d2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END DAC1_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	3730      	adds	r7, #48	@ 0x30
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000694 	.word	0x20000694
 80018e0:	50000800 	.word	0x50000800
 80018e4:	200006bc 	.word	0x200006bc

080018e8 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	@ 0x30
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80018ee:	463b      	mov	r3, r7
 80018f0:	2230      	movs	r2, #48	@ 0x30
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f00f fe9e 	bl	8011636 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 80018fa:	4b16      	ldr	r3, [pc, #88]	@ (8001954 <MX_DAC2_Init+0x6c>)
 80018fc:	4a16      	ldr	r2, [pc, #88]	@ (8001958 <MX_DAC2_Init+0x70>)
 80018fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001900:	4814      	ldr	r0, [pc, #80]	@ (8001954 <MX_DAC2_Init+0x6c>)
 8001902:	f004 fa82 	bl	8005e0a <HAL_DAC_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 800190c:	f001 fd84 	bl	8003418 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001910:	2302      	movs	r3, #2
 8001912:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001924:	2300      	movs	r3, #0
 8001926:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800192c:	2301      	movs	r3, #1
 800192e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001934:	463b      	mov	r3, r7
 8001936:	2200      	movs	r2, #0
 8001938:	4619      	mov	r1, r3
 800193a:	4806      	ldr	r0, [pc, #24]	@ (8001954 <MX_DAC2_Init+0x6c>)
 800193c:	f004 fb82 	bl	8006044 <HAL_DAC_ConfigChannel>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8001946:	f001 fd67 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	3730      	adds	r7, #48	@ 0x30
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200006a8 	.word	0x200006a8
 8001958:	50000c00 	.word	0x50000c00

0800195c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b098      	sub	sp, #96	@ 0x60
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001962:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800196e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]
 800197e:	615a      	str	r2, [r3, #20]
 8001980:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2234      	movs	r2, #52	@ 0x34
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f00f fe54 	bl	8011636 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800198e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a78 <MX_TIM1_Init+0x11c>)
 8001990:	4a3a      	ldr	r2, [pc, #232]	@ (8001a7c <MX_TIM1_Init+0x120>)
 8001992:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001994:	4b38      	ldr	r3, [pc, #224]	@ (8001a78 <MX_TIM1_Init+0x11c>)
 8001996:	2200      	movs	r2, #0
 8001998:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199a:	4b37      	ldr	r3, [pc, #220]	@ (8001a78 <MX_TIM1_Init+0x11c>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210;
 80019a0:	4b35      	ldr	r3, [pc, #212]	@ (8001a78 <MX_TIM1_Init+0x11c>)
 80019a2:	22d2      	movs	r2, #210	@ 0xd2
 80019a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a6:	4b34      	ldr	r3, [pc, #208]	@ (8001a78 <MX_TIM1_Init+0x11c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019ac:	4b32      	ldr	r3, [pc, #200]	@ (8001a78 <MX_TIM1_Init+0x11c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b2:	4b31      	ldr	r3, [pc, #196]	@ (8001a78 <MX_TIM1_Init+0x11c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019b8:	482f      	ldr	r0, [pc, #188]	@ (8001a78 <MX_TIM1_Init+0x11c>)
 80019ba:	f008 f818 	bl	80099ee <HAL_TIM_PWM_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80019c4:	f001 fd28 	bl	8003418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c8:	2300      	movs	r3, #0
 80019ca:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019cc:	2300      	movs	r3, #0
 80019ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019d8:	4619      	mov	r1, r3
 80019da:	4827      	ldr	r0, [pc, #156]	@ (8001a78 <MX_TIM1_Init+0x11c>)
 80019dc:	f009 f9b2 	bl	800ad44 <HAL_TIMEx_MasterConfigSynchronization>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80019e6:	f001 fd17 	bl	8003418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ea:	2360      	movs	r3, #96	@ 0x60
 80019ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f2:	2300      	movs	r3, #0
 80019f4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019f6:	2300      	movs	r3, #0
 80019f8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019fe:	2300      	movs	r3, #0
 8001a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a02:	2300      	movs	r3, #0
 8001a04:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	481a      	ldr	r0, [pc, #104]	@ (8001a78 <MX_TIM1_Init+0x11c>)
 8001a10:	f008 faa6 	bl	8009f60 <HAL_TIM_PWM_ConfigChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001a1a:	f001 fcfd 	bl	8003418 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4807      	ldr	r0, [pc, #28]	@ (8001a78 <MX_TIM1_Init+0x11c>)
 8001a5c:	f009 fa08 	bl	800ae70 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001a66:	f001 fcd7 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a6a:	4803      	ldr	r0, [pc, #12]	@ (8001a78 <MX_TIM1_Init+0x11c>)
 8001a6c:	f002 f878 	bl	8003b60 <HAL_TIM_MspPostInit>

}
 8001a70:	bf00      	nop
 8001a72:	3760      	adds	r7, #96	@ 0x60
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	2000077c 	.word	0x2000077c
 8001a7c:	40012c00 	.word	0x40012c00

08001a80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08e      	sub	sp, #56	@ 0x38
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aa0:	463b      	mov	r3, r7
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
 8001aac:	611a      	str	r2, [r3, #16]
 8001aae:	615a      	str	r2, [r3, #20]
 8001ab0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8001b68 <MX_TIM4_Init+0xe8>)
 8001ab4:	4a2d      	ldr	r2, [pc, #180]	@ (8001b6c <MX_TIM4_Init+0xec>)
 8001ab6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b68 <MX_TIM4_Init+0xe8>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abe:	4b2a      	ldr	r3, [pc, #168]	@ (8001b68 <MX_TIM4_Init+0xe8>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 679;
 8001ac4:	4b28      	ldr	r3, [pc, #160]	@ (8001b68 <MX_TIM4_Init+0xe8>)
 8001ac6:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8001aca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001acc:	4b26      	ldr	r3, [pc, #152]	@ (8001b68 <MX_TIM4_Init+0xe8>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad2:	4b25      	ldr	r3, [pc, #148]	@ (8001b68 <MX_TIM4_Init+0xe8>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ad8:	4823      	ldr	r0, [pc, #140]	@ (8001b68 <MX_TIM4_Init+0xe8>)
 8001ada:	f007 fe19 	bl	8009710 <HAL_TIM_Base_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001ae4:	f001 fc98 	bl	8003418 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001aee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001af2:	4619      	mov	r1, r3
 8001af4:	481c      	ldr	r0, [pc, #112]	@ (8001b68 <MX_TIM4_Init+0xe8>)
 8001af6:	f008 fb47 	bl	800a188 <HAL_TIM_ConfigClockSource>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001b00:	f001 fc8a 	bl	8003418 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b04:	4818      	ldr	r0, [pc, #96]	@ (8001b68 <MX_TIM4_Init+0xe8>)
 8001b06:	f007 ff72 	bl	80099ee <HAL_TIM_PWM_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001b10:	f001 fc82 	bl	8003418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4619      	mov	r1, r3
 8001b22:	4811      	ldr	r0, [pc, #68]	@ (8001b68 <MX_TIM4_Init+0xe8>)
 8001b24:	f009 f90e 	bl	800ad44 <HAL_TIMEx_MasterConfigSynchronization>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001b2e:	f001 fc73 	bl	8003418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b32:	2360      	movs	r3, #96	@ 0x60
 8001b34:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b42:	463b      	mov	r3, r7
 8001b44:	2200      	movs	r2, #0
 8001b46:	4619      	mov	r1, r3
 8001b48:	4807      	ldr	r0, [pc, #28]	@ (8001b68 <MX_TIM4_Init+0xe8>)
 8001b4a:	f008 fa09 	bl	8009f60 <HAL_TIM_PWM_ConfigChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001b54:	f001 fc60 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b58:	4803      	ldr	r0, [pc, #12]	@ (8001b68 <MX_TIM4_Init+0xe8>)
 8001b5a:	f002 f801 	bl	8003b60 <HAL_TIM_MspPostInit>

}
 8001b5e:	bf00      	nop
 8001b60:	3738      	adds	r7, #56	@ 0x38
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200007c8 	.word	0x200007c8
 8001b6c:	40000800 	.word	0x40000800

08001b70 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b80:	4b19      	ldr	r3, [pc, #100]	@ (8001be8 <MX_TIM6_Init+0x78>)
 8001b82:	4a1a      	ldr	r2, [pc, #104]	@ (8001bec <MX_TIM6_Init+0x7c>)
 8001b84:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11549;
 8001b86:	4b18      	ldr	r3, [pc, #96]	@ (8001be8 <MX_TIM6_Init+0x78>)
 8001b88:	f642 521d 	movw	r2, #11549	@ 0x2d1d
 8001b8c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8e:	4b16      	ldr	r3, [pc, #88]	@ (8001be8 <MX_TIM6_Init+0x78>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64934;
 8001b94:	4b14      	ldr	r3, [pc, #80]	@ (8001be8 <MX_TIM6_Init+0x78>)
 8001b96:	f64f 52a6 	movw	r2, #64934	@ 0xfda6
 8001b9a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9c:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <MX_TIM6_Init+0x78>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ba2:	4811      	ldr	r0, [pc, #68]	@ (8001be8 <MX_TIM6_Init+0x78>)
 8001ba4:	f007 fdb4 	bl	8009710 <HAL_TIM_Base_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001bae:	f001 fc33 	bl	8003418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	480a      	ldr	r0, [pc, #40]	@ (8001be8 <MX_TIM6_Init+0x78>)
 8001bc0:	f009 f8c0 	bl	800ad44 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001bca:	f001 fc25 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	2036      	movs	r0, #54	@ 0x36
 8001bd4:	f004 f8e5 	bl	8005da2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bd8:	2036      	movs	r0, #54	@ 0x36
 8001bda:	f004 f8fc 	bl	8005dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM6_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000814 	.word	0x20000814
 8001bec:	40001000 	.word	0x40001000

08001bf0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c00:	4b14      	ldr	r3, [pc, #80]	@ (8001c54 <MX_TIM7_Init+0x64>)
 8001c02:	4a15      	ldr	r2, [pc, #84]	@ (8001c58 <MX_TIM7_Init+0x68>)
 8001c04:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 14999;
 8001c06:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <MX_TIM7_Init+0x64>)
 8001c08:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8001c0c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0e:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <MX_TIM7_Init+0x64>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <MX_TIM7_Init+0x64>)
 8001c16:	2209      	movs	r2, #9
 8001c18:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c54 <MX_TIM7_Init+0x64>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c20:	480c      	ldr	r0, [pc, #48]	@ (8001c54 <MX_TIM7_Init+0x64>)
 8001c22:	f007 fd75 	bl	8009710 <HAL_TIM_Base_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001c2c:	f001 fbf4 	bl	8003418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c30:	2300      	movs	r3, #0
 8001c32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4805      	ldr	r0, [pc, #20]	@ (8001c54 <MX_TIM7_Init+0x64>)
 8001c3e:	f009 f881 	bl	800ad44 <HAL_TIMEx_MasterConfigSynchronization>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001c48:	f001 fbe6 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c4c:	bf00      	nop
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000860 	.word	0x20000860
 8001c58:	40001400 	.word	0x40001400

08001c5c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b098      	sub	sp, #96	@ 0x60
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c62:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c6e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	611a      	str	r2, [r3, #16]
 8001c7e:	615a      	str	r2, [r3, #20]
 8001c80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	2234      	movs	r2, #52	@ 0x34
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f00f fcd4 	bl	8011636 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c8e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d78 <MX_TIM8_Init+0x11c>)
 8001c90:	4a3a      	ldr	r2, [pc, #232]	@ (8001d7c <MX_TIM8_Init+0x120>)
 8001c92:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001c94:	4b38      	ldr	r3, [pc, #224]	@ (8001d78 <MX_TIM8_Init+0x11c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9a:	4b37      	ldr	r3, [pc, #220]	@ (8001d78 <MX_TIM8_Init+0x11c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 210;
 8001ca0:	4b35      	ldr	r3, [pc, #212]	@ (8001d78 <MX_TIM8_Init+0x11c>)
 8001ca2:	22d2      	movs	r2, #210	@ 0xd2
 8001ca4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca6:	4b34      	ldr	r3, [pc, #208]	@ (8001d78 <MX_TIM8_Init+0x11c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001cac:	4b32      	ldr	r3, [pc, #200]	@ (8001d78 <MX_TIM8_Init+0x11c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb2:	4b31      	ldr	r3, [pc, #196]	@ (8001d78 <MX_TIM8_Init+0x11c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001cb8:	482f      	ldr	r0, [pc, #188]	@ (8001d78 <MX_TIM8_Init+0x11c>)
 8001cba:	f007 fe98 	bl	80099ee <HAL_TIM_PWM_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001cc4:	f001 fba8 	bl	8003418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001cd4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4827      	ldr	r0, [pc, #156]	@ (8001d78 <MX_TIM8_Init+0x11c>)
 8001cdc:	f009 f832 	bl	800ad44 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8001ce6:	f001 fb97 	bl	8003418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cea:	2360      	movs	r3, #96	@ 0x60
 8001cec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	481a      	ldr	r0, [pc, #104]	@ (8001d78 <MX_TIM8_Init+0x11c>)
 8001d10:	f008 f926 	bl	8009f60 <HAL_TIM_PWM_ConfigChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001d1a:	f001 fb7d 	bl	8003418 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4807      	ldr	r0, [pc, #28]	@ (8001d78 <MX_TIM8_Init+0x11c>)
 8001d5c:	f009 f888 	bl	800ae70 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001d66:	f001 fb57 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001d6a:	4803      	ldr	r0, [pc, #12]	@ (8001d78 <MX_TIM8_Init+0x11c>)
 8001d6c:	f001 fef8 	bl	8003b60 <HAL_TIM_MspPostInit>

}
 8001d70:	bf00      	nop
 8001d72:	3760      	adds	r7, #96	@ 0x60
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200008ac 	.word	0x200008ac
 8001d7c:	40013400 	.word	0x40013400

08001d80 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d86:	f107 0310 	add.w	r3, r7, #16
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001d9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e1c <MX_TIM15_Init+0x9c>)
 8001da0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e20 <MX_TIM15_Init+0xa0>)
 8001da2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1499;
 8001da4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e1c <MX_TIM15_Init+0x9c>)
 8001da6:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001daa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dac:	4b1b      	ldr	r3, [pc, #108]	@ (8001e1c <MX_TIM15_Init+0x9c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 4;
 8001db2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e1c <MX_TIM15_Init+0x9c>)
 8001db4:	2204      	movs	r2, #4
 8001db6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db8:	4b18      	ldr	r3, [pc, #96]	@ (8001e1c <MX_TIM15_Init+0x9c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001dbe:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <MX_TIM15_Init+0x9c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc4:	4b15      	ldr	r3, [pc, #84]	@ (8001e1c <MX_TIM15_Init+0x9c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001dca:	4814      	ldr	r0, [pc, #80]	@ (8001e1c <MX_TIM15_Init+0x9c>)
 8001dcc:	f007 fca0 	bl	8009710 <HAL_TIM_Base_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001dd6:	f001 fb1f 	bl	8003418 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001de0:	f107 0310 	add.w	r3, r7, #16
 8001de4:	4619      	mov	r1, r3
 8001de6:	480d      	ldr	r0, [pc, #52]	@ (8001e1c <MX_TIM15_Init+0x9c>)
 8001de8:	f008 f9ce 	bl	800a188 <HAL_TIM_ConfigClockSource>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001df2:	f001 fb11 	bl	8003418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	4619      	mov	r1, r3
 8001e02:	4806      	ldr	r0, [pc, #24]	@ (8001e1c <MX_TIM15_Init+0x9c>)
 8001e04:	f008 ff9e 	bl	800ad44 <HAL_TIMEx_MasterConfigSynchronization>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001e0e:	f001 fb03 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	3720      	adds	r7, #32
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200008f8 	.word	0x200008f8
 8001e20:	40014000 	.word	0x40014000

08001e24 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001e28:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <MX_TIM16_Init+0x44>)
 8001e2a:	4a10      	ldr	r2, [pc, #64]	@ (8001e6c <MX_TIM16_Init+0x48>)
 8001e2c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 14999;
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e68 <MX_TIM16_Init+0x44>)
 8001e30:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8001e34:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e36:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <MX_TIM16_Init+0x44>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e68 <MX_TIM16_Init+0x44>)
 8001e3e:	2209      	movs	r2, #9
 8001e40:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e42:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <MX_TIM16_Init+0x44>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001e48:	4b07      	ldr	r3, [pc, #28]	@ (8001e68 <MX_TIM16_Init+0x44>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e4e:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <MX_TIM16_Init+0x44>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e54:	4804      	ldr	r0, [pc, #16]	@ (8001e68 <MX_TIM16_Init+0x44>)
 8001e56:	f007 fc5b 	bl	8009710 <HAL_TIM_Base_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001e60:	f001 fada 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000944 	.word	0x20000944
 8001e6c:	40014400 	.word	0x40014400

08001e70 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e74:	4b22      	ldr	r3, [pc, #136]	@ (8001f00 <MX_UART4_Init+0x90>)
 8001e76:	4a23      	ldr	r2, [pc, #140]	@ (8001f04 <MX_UART4_Init+0x94>)
 8001e78:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e7a:	4b21      	ldr	r3, [pc, #132]	@ (8001f00 <MX_UART4_Init+0x90>)
 8001e7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e80:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e82:	4b1f      	ldr	r3, [pc, #124]	@ (8001f00 <MX_UART4_Init+0x90>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e88:	4b1d      	ldr	r3, [pc, #116]	@ (8001f00 <MX_UART4_Init+0x90>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f00 <MX_UART4_Init+0x90>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <MX_UART4_Init+0x90>)
 8001e96:	220c      	movs	r2, #12
 8001e98:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9a:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <MX_UART4_Init+0x90>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea0:	4b17      	ldr	r3, [pc, #92]	@ (8001f00 <MX_UART4_Init+0x90>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ea6:	4b16      	ldr	r3, [pc, #88]	@ (8001f00 <MX_UART4_Init+0x90>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001eac:	4b14      	ldr	r3, [pc, #80]	@ (8001f00 <MX_UART4_Init+0x90>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <MX_UART4_Init+0x90>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001eb8:	4811      	ldr	r0, [pc, #68]	@ (8001f00 <MX_UART4_Init+0x90>)
 8001eba:	f009 f8b3 	bl	800b024 <HAL_UART_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001ec4:	f001 faa8 	bl	8003418 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ec8:	2100      	movs	r1, #0
 8001eca:	480d      	ldr	r0, [pc, #52]	@ (8001f00 <MX_UART4_Init+0x90>)
 8001ecc:	f009 fe4e 	bl	800bb6c <HAL_UARTEx_SetTxFifoThreshold>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001ed6:	f001 fa9f 	bl	8003418 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eda:	2100      	movs	r1, #0
 8001edc:	4808      	ldr	r0, [pc, #32]	@ (8001f00 <MX_UART4_Init+0x90>)
 8001ede:	f009 fe83 	bl	800bbe8 <HAL_UARTEx_SetRxFifoThreshold>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001ee8:	f001 fa96 	bl	8003418 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001eec:	4804      	ldr	r0, [pc, #16]	@ (8001f00 <MX_UART4_Init+0x90>)
 8001eee:	f009 fe04 	bl	800bafa <HAL_UARTEx_DisableFifoMode>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001ef8:	f001 fa8e 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000990 	.word	0x20000990
 8001f04:	40004c00 	.word	0x40004c00

08001f08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001f0e:	4b22      	ldr	r3, [pc, #136]	@ (8001f98 <MX_DMA_Init+0x90>)
 8001f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f12:	4a21      	ldr	r2, [pc, #132]	@ (8001f98 <MX_DMA_Init+0x90>)
 8001f14:	f043 0304 	orr.w	r3, r3, #4
 8001f18:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f98 <MX_DMA_Init+0x90>)
 8001f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f26:	4b1c      	ldr	r3, [pc, #112]	@ (8001f98 <MX_DMA_Init+0x90>)
 8001f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001f98 <MX_DMA_Init+0x90>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f32:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <MX_DMA_Init+0x90>)
 8001f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	200b      	movs	r0, #11
 8001f44:	f003 ff2d 	bl	8005da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f48:	200b      	movs	r0, #11
 8001f4a:	f003 ff44 	bl	8005dd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	200c      	movs	r0, #12
 8001f54:	f003 ff25 	bl	8005da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001f58:	200c      	movs	r0, #12
 8001f5a:	f003 ff3c 	bl	8005dd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2100      	movs	r1, #0
 8001f62:	200d      	movs	r0, #13
 8001f64:	f003 ff1d 	bl	8005da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001f68:	200d      	movs	r0, #13
 8001f6a:	f003 ff34 	bl	8005dd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	200e      	movs	r0, #14
 8001f74:	f003 ff15 	bl	8005da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001f78:	200e      	movs	r0, #14
 8001f7a:	f003 ff2c 	bl	8005dd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2100      	movs	r1, #0
 8001f82:	200f      	movs	r0, #15
 8001f84:	f003 ff0d 	bl	8005da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001f88:	200f      	movs	r0, #15
 8001f8a:	f003 ff24 	bl	8005dd6 <HAL_NVIC_EnableIRQ>

}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000

08001f9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08c      	sub	sp, #48	@ 0x30
 8001fa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa2:	f107 031c 	add.w	r3, r7, #28
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
 8001fb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fb2:	4b9a      	ldr	r3, [pc, #616]	@ (800221c <MX_GPIO_Init+0x280>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb6:	4a99      	ldr	r2, [pc, #612]	@ (800221c <MX_GPIO_Init+0x280>)
 8001fb8:	f043 0310 	orr.w	r3, r3, #16
 8001fbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fbe:	4b97      	ldr	r3, [pc, #604]	@ (800221c <MX_GPIO_Init+0x280>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fca:	4b94      	ldr	r3, [pc, #592]	@ (800221c <MX_GPIO_Init+0x280>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fce:	4a93      	ldr	r2, [pc, #588]	@ (800221c <MX_GPIO_Init+0x280>)
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fd6:	4b91      	ldr	r3, [pc, #580]	@ (800221c <MX_GPIO_Init+0x280>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fe2:	4b8e      	ldr	r3, [pc, #568]	@ (800221c <MX_GPIO_Init+0x280>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe6:	4a8d      	ldr	r2, [pc, #564]	@ (800221c <MX_GPIO_Init+0x280>)
 8001fe8:	f043 0320 	orr.w	r3, r3, #32
 8001fec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fee:	4b8b      	ldr	r3, [pc, #556]	@ (800221c <MX_GPIO_Init+0x280>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	4b88      	ldr	r3, [pc, #544]	@ (800221c <MX_GPIO_Init+0x280>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffe:	4a87      	ldr	r2, [pc, #540]	@ (800221c <MX_GPIO_Init+0x280>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002006:	4b85      	ldr	r3, [pc, #532]	@ (800221c <MX_GPIO_Init+0x280>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	4b82      	ldr	r3, [pc, #520]	@ (800221c <MX_GPIO_Init+0x280>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002016:	4a81      	ldr	r2, [pc, #516]	@ (800221c <MX_GPIO_Init+0x280>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800201e:	4b7f      	ldr	r3, [pc, #508]	@ (800221c <MX_GPIO_Init+0x280>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800202a:	4b7c      	ldr	r3, [pc, #496]	@ (800221c <MX_GPIO_Init+0x280>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202e:	4a7b      	ldr	r2, [pc, #492]	@ (800221c <MX_GPIO_Init+0x280>)
 8002030:	f043 0308 	orr.w	r3, r3, #8
 8002034:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002036:	4b79      	ldr	r3, [pc, #484]	@ (800221c <MX_GPIO_Init+0x280>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 8002042:	2200      	movs	r2, #0
 8002044:	2120      	movs	r1, #32
 8002046:	4876      	ldr	r0, [pc, #472]	@ (8002220 <MX_GPIO_Init+0x284>)
 8002048:	f004 fdca 	bl	8006be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
 800204c:	2201      	movs	r2, #1
 800204e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002052:	4874      	ldr	r0, [pc, #464]	@ (8002224 <MX_GPIO_Init+0x288>)
 8002054:	f004 fdc4 	bl	8006be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, GPIO_PIN_RESET);
 8002058:	2200      	movs	r2, #0
 800205a:	2104      	movs	r1, #4
 800205c:	4871      	ldr	r0, [pc, #452]	@ (8002224 <MX_GPIO_Init+0x288>)
 800205e:	f004 fdbf 	bl	8006be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 8002062:	2200      	movs	r2, #0
 8002064:	2120      	movs	r1, #32
 8002066:	4870      	ldr	r0, [pc, #448]	@ (8002228 <MX_GPIO_Init+0x28c>)
 8002068:	f004 fdba 	bl	8006be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, NOT_RST_2_Pin|CS_OCD_1_Pin, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002072:	486b      	ldr	r0, [pc, #428]	@ (8002220 <MX_GPIO_Init+0x284>)
 8002074:	f004 fdb4 	bl	8006be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port, NOT_RST_4_Pin, GPIO_PIN_SET);
 8002078:	2201      	movs	r2, #1
 800207a:	2140      	movs	r1, #64	@ 0x40
 800207c:	486a      	ldr	r0, [pc, #424]	@ (8002228 <MX_GPIO_Init+0x28c>)
 800207e:	f004 fdaf 	bl	8006be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port, NOT_RST_3_Pin, GPIO_PIN_SET);
 8002082:	2201      	movs	r2, #1
 8002084:	2101      	movs	r1, #1
 8002086:	4869      	ldr	r0, [pc, #420]	@ (800222c <MX_GPIO_Init+0x290>)
 8002088:	f004 fdaa 	bl	8006be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port, NOT_RST_1_Pin, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	2180      	movs	r1, #128	@ 0x80
 8002090:	4867      	ldr	r0, [pc, #412]	@ (8002230 <MX_GPIO_Init+0x294>)
 8002092:	f004 fda5 	bl	8006be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NOT_FAULT_1_Pin CS_FAULT_2_Pin NOT_FAULT_2_Pin CS_FAULT_1_Pin */
  GPIO_InitStruct.Pin = NOT_FAULT_1_Pin|CS_FAULT_2_Pin|NOT_FAULT_2_Pin|CS_FAULT_1_Pin;
 8002096:	f640 0315 	movw	r3, #2069	@ 0x815
 800209a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020a4:	f107 031c 	add.w	r3, r7, #28
 80020a8:	4619      	mov	r1, r3
 80020aa:	485d      	ldr	r0, [pc, #372]	@ (8002220 <MX_GPIO_Init+0x284>)
 80020ac:	f004 fbfe 	bl	80068ac <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_INTERLOCK_Pin */
  GPIO_InitStruct.Pin = RESET_INTERLOCK_Pin;
 80020b0:	2320      	movs	r3, #32
 80020b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b4:	2301      	movs	r3, #1
 80020b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_INTERLOCK_GPIO_Port, &GPIO_InitStruct);
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	4619      	mov	r1, r3
 80020c6:	4856      	ldr	r0, [pc, #344]	@ (8002220 <MX_GPIO_Init+0x284>)
 80020c8:	f004 fbf0 	bl	80068ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_OCD_2_Pin */
  GPIO_InitStruct.Pin = CS_OCD_2_Pin;
 80020cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80020d2:	2311      	movs	r3, #17
 80020d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_OCD_2_GPIO_Port, &GPIO_InitStruct);
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	4619      	mov	r1, r3
 80020e4:	484f      	ldr	r0, [pc, #316]	@ (8002224 <MX_GPIO_Init+0x288>)
 80020e6:	f004 fbe1 	bl	80068ac <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_3_Pin */
  GPIO_InitStruct.Pin = READY_3_Pin;
 80020ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f0:	2300      	movs	r3, #0
 80020f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_3_GPIO_Port, &GPIO_InitStruct);
 80020f8:	f107 031c 	add.w	r3, r7, #28
 80020fc:	4619      	mov	r1, r3
 80020fe:	4849      	ldr	r0, [pc, #292]	@ (8002224 <MX_GPIO_Init+0x288>)
 8002100:	f004 fbd4 	bl	80068ac <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERLOCK_Pin NOT_FAULT_4_Pin */
  GPIO_InitStruct.Pin = INTERLOCK_Pin|NOT_FAULT_4_Pin;
 8002104:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002112:	f107 031c 	add.w	r3, r7, #28
 8002116:	4619      	mov	r1, r3
 8002118:	4843      	ldr	r0, [pc, #268]	@ (8002228 <MX_GPIO_Init+0x28c>)
 800211a:	f004 fbc7 	bl	80068ac <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_FPGA_Pin */
  GPIO_InitStruct.Pin = RESET_FPGA_Pin;
 800211e:	2304      	movs	r3, #4
 8002120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002122:	2301      	movs	r3, #1
 8002124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_FPGA_GPIO_Port, &GPIO_InitStruct);
 800212e:	f107 031c 	add.w	r3, r7, #28
 8002132:	4619      	mov	r1, r3
 8002134:	483b      	ldr	r0, [pc, #236]	@ (8002224 <MX_GPIO_Init+0x288>)
 8002136:	f004 fbb9 	bl	80068ac <HAL_GPIO_Init>

  /*Configure GPIO pin : START_STOP_FPGA_Pin */
  GPIO_InitStruct.Pin = START_STOP_FPGA_Pin;
 800213a:	2320      	movs	r3, #32
 800213c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213e:	2301      	movs	r3, #1
 8002140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2300      	movs	r3, #0
 8002148:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(START_STOP_FPGA_GPIO_Port, &GPIO_InitStruct);
 800214a:	f107 031c 	add.w	r3, r7, #28
 800214e:	4619      	mov	r1, r3
 8002150:	4835      	ldr	r0, [pc, #212]	@ (8002228 <MX_GPIO_Init+0x28c>)
 8002152:	f004 fbab 	bl	80068ac <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_2_Pin */
  GPIO_InitStruct.Pin = READY_2_Pin;
 8002156:	2301      	movs	r3, #1
 8002158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_2_GPIO_Port, &GPIO_InitStruct);
 8002162:	f107 031c 	add.w	r3, r7, #28
 8002166:	4619      	mov	r1, r3
 8002168:	4831      	ldr	r0, [pc, #196]	@ (8002230 <MX_GPIO_Init+0x294>)
 800216a:	f004 fb9f 	bl	80068ac <HAL_GPIO_Init>

  /*Configure GPIO pins : NOT_RST_2_Pin CS_OCD_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_2_Pin|CS_OCD_1_Pin;
 800216e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002174:	2311      	movs	r3, #17
 8002176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2300      	movs	r3, #0
 800217e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002180:	f107 031c 	add.w	r3, r7, #28
 8002184:	4619      	mov	r1, r3
 8002186:	4826      	ldr	r0, [pc, #152]	@ (8002220 <MX_GPIO_Init+0x284>)
 8002188:	f004 fb90 	bl	80068ac <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_4_Pin */
  GPIO_InitStruct.Pin = NOT_RST_4_Pin;
 800218c:	2340      	movs	r3, #64	@ 0x40
 800218e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002190:	2311      	movs	r3, #17
 8002192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_4_GPIO_Port, &GPIO_InitStruct);
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	4619      	mov	r1, r3
 80021a2:	4821      	ldr	r0, [pc, #132]	@ (8002228 <MX_GPIO_Init+0x28c>)
 80021a4:	f004 fb82 	bl	80068ac <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_4_Pin */
  GPIO_InitStruct.Pin = READY_4_Pin;
 80021a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ae:	2300      	movs	r3, #0
 80021b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_4_GPIO_Port, &GPIO_InitStruct);
 80021b6:	f107 031c 	add.w	r3, r7, #28
 80021ba:	4619      	mov	r1, r3
 80021bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021c0:	f004 fb74 	bl	80068ac <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_3_Pin */
  GPIO_InitStruct.Pin = NOT_RST_3_Pin;
 80021c4:	2301      	movs	r3, #1
 80021c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80021c8:	2311      	movs	r3, #17
 80021ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_3_GPIO_Port, &GPIO_InitStruct);
 80021d4:	f107 031c 	add.w	r3, r7, #28
 80021d8:	4619      	mov	r1, r3
 80021da:	4814      	ldr	r0, [pc, #80]	@ (800222c <MX_GPIO_Init+0x290>)
 80021dc:	f004 fb66 	bl	80068ac <HAL_GPIO_Init>

  /*Configure GPIO pins : READY_1_Pin PD5 NOT_FAULT_3_Pin */
  GPIO_InitStruct.Pin = READY_1_Pin|GPIO_PIN_5|NOT_FAULT_3_Pin;
 80021e0:	2370      	movs	r3, #112	@ 0x70
 80021e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e4:	2300      	movs	r3, #0
 80021e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ec:	f107 031c 	add.w	r3, r7, #28
 80021f0:	4619      	mov	r1, r3
 80021f2:	480e      	ldr	r0, [pc, #56]	@ (800222c <MX_GPIO_Init+0x290>)
 80021f4:	f004 fb5a 	bl	80068ac <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_1_Pin;
 80021f8:	2380      	movs	r3, #128	@ 0x80
 80021fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80021fc:	2311      	movs	r3, #17
 80021fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	2300      	movs	r3, #0
 8002206:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_1_GPIO_Port, &GPIO_InitStruct);
 8002208:	f107 031c 	add.w	r3, r7, #28
 800220c:	4619      	mov	r1, r3
 800220e:	4808      	ldr	r0, [pc, #32]	@ (8002230 <MX_GPIO_Init+0x294>)
 8002210:	f004 fb4c 	bl	80068ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002214:	bf00      	nop
 8002216:	3730      	adds	r7, #48	@ 0x30
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40021000 	.word	0x40021000
 8002220:	48001000 	.word	0x48001000
 8002224:	48001400 	.word	0x48001400
 8002228:	48000800 	.word	0x48000800
 800222c:	48000c00 	.word	0x48000c00
 8002230:	48000400 	.word	0x48000400

08002234 <handle_event>:

/* USER CODE BEGIN 4 */

ConverterState handle_event(ConverterState currentState, ConverterEvent event) {
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	460a      	mov	r2, r1
 800223e:	71fb      	strb	r3, [r7, #7]
 8002240:	4613      	mov	r3, r2
 8002242:	71bb      	strb	r3, [r7, #6]
    switch (currentState) {
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	2b05      	cmp	r3, #5
 8002248:	d834      	bhi.n	80022b4 <handle_event+0x80>
 800224a:	a201      	add	r2, pc, #4	@ (adr r2, 8002250 <handle_event+0x1c>)
 800224c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002250:	08002269 	.word	0x08002269
 8002254:	08002273 	.word	0x08002273
 8002258:	0800227d 	.word	0x0800227d
 800225c:	08002293 	.word	0x08002293
 8002260:	080022a7 	.word	0x080022a7
 8002264:	080022b1 	.word	0x080022b1
        case STATE_INIT:
            if (event == EVENT_START)
 8002268:	79bb      	ldrb	r3, [r7, #6]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d124      	bne.n	80022b8 <handle_event+0x84>
            {
                return STATE_SOFT_START;
 800226e:	2302      	movs	r3, #2
 8002270:	e02c      	b.n	80022cc <handle_event+0x98>
            }
            break;
        case STATE_STANDBY:
            if (event == EVENT_START)
 8002272:	79bb      	ldrb	r3, [r7, #6]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d121      	bne.n	80022bc <handle_event+0x88>
            {
                return STATE_SOFT_START;
 8002278:	2302      	movs	r3, #2
 800227a:	e027      	b.n	80022cc <handle_event+0x98>
            }
            break;
        case STATE_SOFT_START:
            if (event == EVENT_FAULT)
 800227c:	79bb      	ldrb	r3, [r7, #6]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <handle_event+0x52>
            {
                return STATE_FAULT;
 8002282:	2304      	movs	r3, #4
 8002284:	e022      	b.n	80022cc <handle_event+0x98>
            } else if (RAMP_FINISHED) {
 8002286:	4b14      	ldr	r3, [pc, #80]	@ (80022d8 <handle_event+0xa4>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d018      	beq.n	80022c0 <handle_event+0x8c>
                return STATE_REGULATION;
 800228e:	2303      	movs	r3, #3
 8002290:	e01c      	b.n	80022cc <handle_event+0x98>
            }
            break;
        case STATE_REGULATION:
        	//USB_SendString("State: INIT -> RUNNING\r\n");
            if (event == EVENT_FAULT)
 8002292:	79bb      	ldrb	r3, [r7, #6]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <handle_event+0x68>
            {
                return STATE_FAULT;
 8002298:	2304      	movs	r3, #4
 800229a:	e017      	b.n	80022cc <handle_event+0x98>
            } else if (event == EVENT_SHUTDOWN)
 800229c:	79bb      	ldrb	r3, [r7, #6]
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d110      	bne.n	80022c4 <handle_event+0x90>
            {
                return STATE_SHUTDOWN;
 80022a2:	2305      	movs	r3, #5
 80022a4:	e012      	b.n	80022cc <handle_event+0x98>
            }

            break;
        case STATE_FAULT:
            if (event == EVENT_CLEAR_FAULT)
 80022a6:	79bb      	ldrb	r3, [r7, #6]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d10d      	bne.n	80022c8 <handle_event+0x94>
            {
                return STATE_STANDBY;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e00d      	b.n	80022cc <handle_event+0x98>
            }
            break;
        case STATE_SHUTDOWN:
            if (1)
            {
                return STATE_STANDBY;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e00b      	b.n	80022cc <handle_event+0x98>
            }
            break;
        default:
            break;
 80022b4:	bf00      	nop
 80022b6:	e008      	b.n	80022ca <handle_event+0x96>
            break;
 80022b8:	bf00      	nop
 80022ba:	e006      	b.n	80022ca <handle_event+0x96>
            break;
 80022bc:	bf00      	nop
 80022be:	e004      	b.n	80022ca <handle_event+0x96>
            break;
 80022c0:	bf00      	nop
 80022c2:	e002      	b.n	80022ca <handle_event+0x96>
            break;
 80022c4:	bf00      	nop
 80022c6:	e000      	b.n	80022ca <handle_event+0x96>
            break;
 80022c8:	bf00      	nop
    }
    return currentState; // No state change
 80022ca:	79fb      	ldrb	r3, [r7, #7]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	20000a58 	.word	0x20000a58

080022dc <Set_PWM_DutyCycle>:
       // float TEMPERATURE_AFTER_CONVERSION_FROM_ADC = (((adc_value/4096.0f)*3.3f) - 0.4f)/0.0195f;
       // return TEMPERATURE_AFTER_CONVERSION_FROM_ADC;

}

void Set_PWM_DutyCycle(uint32_t dutyCycle) { // dutycyle for FAN SPEED CONTROl
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
    if (dutyCycle > 100) dutyCycle = 100;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b64      	cmp	r3, #100	@ 0x64
 80022e8:	d901      	bls.n	80022ee <Set_PWM_DutyCycle+0x12>
 80022ea:	2364      	movs	r3, #100	@ 0x64
 80022ec:	607b      	str	r3, [r7, #4]
    uint32_t pulse = (htim4.Init.Period + 1) * dutyCycle / 100 - 1;
 80022ee:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <Set_PWM_DutyCycle+0x40>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	3301      	adds	r3, #1
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	fb02 f303 	mul.w	r3, r2, r3
 80022fa:	4a09      	ldr	r2, [pc, #36]	@ (8002320 <Set_PWM_DutyCycle+0x44>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	3b01      	subs	r3, #1
 8002304:	60fb      	str	r3, [r7, #12]
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 8002306:	4b05      	ldr	r3, [pc, #20]	@ (800231c <Set_PWM_DutyCycle+0x40>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800230e:	bf00      	nop
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	200007c8 	.word	0x200007c8
 8002320:	51eb851f 	.word	0x51eb851f

08002324 <HAL_ADC_ConvCpltCallback>:
//ADC save to array and moving average
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC5)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a14      	ldr	r2, [pc, #80]	@ (8002384 <HAL_ADC_ConvCpltCallback+0x60>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d120      	bne.n	8002378 <HAL_ADC_ConvCpltCallback+0x54>
		    {
		        uint32_t sum = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	e00b      	b.n	8002358 <HAL_ADC_ConvCpltCallback+0x34>
		        {
		            sum += adc5_dma_buffer[i];
 8002340:	4a11      	ldr	r2, [pc, #68]	@ (8002388 <HAL_ADC_ConvCpltCallback+0x64>)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002348:	b29b      	uxth	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	3301      	adds	r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b09      	cmp	r3, #9
 800235c:	ddf0      	ble.n	8002340 <HAL_ADC_ConvCpltCallback+0x1c>
		        }
		        adc_moving_average = ((sum / MA_WINDOW_SIZE)*3300)/4096;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <HAL_ADC_ConvCpltCallback+0x68>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	08db      	lsrs	r3, r3, #3
 8002368:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800236c:	fb02 f303 	mul.w	r3, r2, r3
 8002370:	0b1b      	lsrs	r3, r3, #12
 8002372:	b29a      	uxth	r2, r3
 8002374:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002376:	801a      	strh	r2, [r3, #0]
		        // Restart the DMA transfer
		       // HAL_ADC_Start_DMA(hadc, (uint32_t*)adc5_dma_buffer, MA_WINDOW_SIZE);
		    }


}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	50000600 	.word	0x50000600
 8002388:	20000a68 	.word	0x20000a68
 800238c:	cccccccd 	.word	0xcccccccd
 8002390:	20000a7c 	.word	0x20000a7c

08002394 <Update_PWM_Frequency>:
        }
    }
}

void Update_PWM_Frequency(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t frequency)
{
 8002394:	b480      	push	{r7}
 8002396:	b089      	sub	sp, #36	@ 0x24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
	 uint32_t timer_clock = 150000000;  // Assuming a 150 MHz timer clock
 80023a0:	4b33      	ldr	r3, [pc, #204]	@ (8002470 <Update_PWM_Frequency+0xdc>)
 80023a2:	61bb      	str	r3, [r7, #24]
	    uint32_t prescaler = htim->Init.Prescaler + 1;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	3301      	adds	r3, #1
 80023aa:	617b      	str	r3, [r7, #20]
	    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	fb02 f303 	mul.w	r3, r2, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	61fb      	str	r3, [r7, #28]

	    // Ensure period is within valid range
	    if (period > 65535) {
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023c4:	d314      	bcc.n	80023f0 <Update_PWM_Frequency+0x5c>
	        // Adjust prescaler to bring period within range
	        prescaler = (prescaler * (period / 65536)) + 1;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	0c1b      	lsrs	r3, r3, #16
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	fb02 f303 	mul.w	r3, r2, r3
 80023d0:	3301      	adds	r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
	        period = (timer_clock / (prescaler * frequency)) - 1;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e2:	3b01      	subs	r3, #1
 80023e4:	61fb      	str	r3, [r7, #28]
	        __HAL_TIM_SET_PRESCALER(htim, prescaler - 1);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	3a01      	subs	r2, #1
 80023ee:	629a      	str	r2, [r3, #40]	@ 0x28
	    }

	    // Update the period register (ARR) with double buffering
	    __HAL_TIM_SET_AUTORELOAD(htim, period);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	60da      	str	r2, [r3, #12]

	    // Set the duty cycle to approximately 50%
	    uint32_t pulse = period / 2;
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	085b      	lsrs	r3, r3, #1
 8002402:	613b      	str	r3, [r7, #16]
	    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d104      	bne.n	8002414 <Update_PWM_Frequency+0x80>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	635a      	str	r2, [r3, #52]	@ 0x34
 8002412:	e023      	b.n	800245c <Update_PWM_Frequency+0xc8>
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b04      	cmp	r3, #4
 8002418:	d104      	bne.n	8002424 <Update_PWM_Frequency+0x90>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	6393      	str	r3, [r2, #56]	@ 0x38
 8002422:	e01b      	b.n	800245c <Update_PWM_Frequency+0xc8>
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b08      	cmp	r3, #8
 8002428:	d104      	bne.n	8002434 <Update_PWM_Frequency+0xa0>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002432:	e013      	b.n	800245c <Update_PWM_Frequency+0xc8>
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d104      	bne.n	8002444 <Update_PWM_Frequency+0xb0>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	6413      	str	r3, [r2, #64]	@ 0x40
 8002442:	e00b      	b.n	800245c <Update_PWM_Frequency+0xc8>
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b10      	cmp	r3, #16
 8002448:	d104      	bne.n	8002454 <Update_PWM_Frequency+0xc0>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	6493      	str	r3, [r2, #72]	@ 0x48
 8002452:	e003      	b.n	800245c <Update_PWM_Frequency+0xc8>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	64d3      	str	r3, [r2, #76]	@ 0x4c

	    // Manually generate an update event by setting the UG bit in the EGR register
	    htim->Instance->EGR = TIM_EGR_UG;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2201      	movs	r2, #1
 8002462:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_AUTORELOAD(htim, period);

    // Restart the timer PWM generation
    HAL_TIM_PWM_Stop(htim, channel);
    HAL_TIM_PWM_Start(htim, channel);*/
}
 8002464:	bf00      	nop
 8002466:	3724      	adds	r7, #36	@ 0x24
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	08f0d180 	.word	0x08f0d180

08002474 <Check_Faults>:
	        dac_buffer[i] = (((1/3.3)*res12_b) + ((0.5/3.3)*res12_b) * sin(2 * M_PI * i/BUFFER_SIZE));
	    }
}

uint8_t Check_Faults()
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
	// Faults pins are from gate driver and they are active pull down
	// 4 fault pins from 4 gate driver + 2 fault pins from  2 currents sensors  = 6 pins
	if(HAL_GPIO_ReadPin(CS_FAULT_1_GPIO_Port, CS_FAULT_1_Pin) && HAL_GPIO_ReadPin(CS_FAULT_2_GPIO_Port, CS_FAULT_2_Pin)
 8002478:	2101      	movs	r1, #1
 800247a:	4818      	ldr	r0, [pc, #96]	@ (80024dc <Check_Faults+0x68>)
 800247c:	f004 fb98 	bl	8006bb0 <HAL_GPIO_ReadPin>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d026      	beq.n	80024d4 <Check_Faults+0x60>
 8002486:	2110      	movs	r1, #16
 8002488:	4814      	ldr	r0, [pc, #80]	@ (80024dc <Check_Faults+0x68>)
 800248a:	f004 fb91 	bl	8006bb0 <HAL_GPIO_ReadPin>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01f      	beq.n	80024d4 <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_1_GPIO_Port, NOT_FAULT_1_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_2_GPIO_Port, NOT_FAULT_2_Pin)
 8002494:	2104      	movs	r1, #4
 8002496:	4811      	ldr	r0, [pc, #68]	@ (80024dc <Check_Faults+0x68>)
 8002498:	f004 fb8a 	bl	8006bb0 <HAL_GPIO_ReadPin>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d018      	beq.n	80024d4 <Check_Faults+0x60>
 80024a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024a6:	480d      	ldr	r0, [pc, #52]	@ (80024dc <Check_Faults+0x68>)
 80024a8:	f004 fb82 	bl	8006bb0 <HAL_GPIO_ReadPin>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d010      	beq.n	80024d4 <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_3_GPIO_Port, NOT_FAULT_3_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_4_GPIO_Port, NOT_FAULT_4_Pin) )
 80024b2:	2140      	movs	r1, #64	@ 0x40
 80024b4:	480a      	ldr	r0, [pc, #40]	@ (80024e0 <Check_Faults+0x6c>)
 80024b6:	f004 fb7b 	bl	8006bb0 <HAL_GPIO_ReadPin>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d009      	beq.n	80024d4 <Check_Faults+0x60>
 80024c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024c4:	4807      	ldr	r0, [pc, #28]	@ (80024e4 <Check_Faults+0x70>)
 80024c6:	f004 fb73 	bl	8006bb0 <HAL_GPIO_ReadPin>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <Check_Faults+0x60>
		return 0; // if all pins is 1 then all is ready, there is not faults then return 0
 80024d0:	2300      	movs	r3, #0
 80024d2:	e000      	b.n	80024d6 <Check_Faults+0x62>

	return 1;
 80024d4:	2301      	movs	r3, #1
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	48001000 	.word	0x48001000
 80024e0:	48000c00 	.word	0x48000c00
 80024e4:	48000800 	.word	0x48000800

080024e8 <Check_Ready>:

uint8_t Check_Ready()
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
	// Ready pins are from gate driver and they are active pull up
	// 4 ready pins from 4 gate drivers
	if(HAL_GPIO_ReadPin(READY_1_GPIO_Port, READY_1_Pin) && HAL_GPIO_ReadPin(READY_2_GPIO_Port, READY_2_Pin)
 80024ec:	2110      	movs	r1, #16
 80024ee:	4811      	ldr	r0, [pc, #68]	@ (8002534 <Check_Ready+0x4c>)
 80024f0:	f004 fb5e 	bl	8006bb0 <HAL_GPIO_ReadPin>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d019      	beq.n	800252e <Check_Ready+0x46>
 80024fa:	2101      	movs	r1, #1
 80024fc:	480e      	ldr	r0, [pc, #56]	@ (8002538 <Check_Ready+0x50>)
 80024fe:	f004 fb57 	bl	8006bb0 <HAL_GPIO_ReadPin>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d012      	beq.n	800252e <Check_Ready+0x46>
			&& HAL_GPIO_ReadPin(READY_3_GPIO_Port, READY_3_Pin) && HAL_GPIO_ReadPin(READY_4_GPIO_Port, READY_4_Pin) )
 8002508:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800250c:	480b      	ldr	r0, [pc, #44]	@ (800253c <Check_Ready+0x54>)
 800250e:	f004 fb4f 	bl	8006bb0 <HAL_GPIO_ReadPin>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <Check_Ready+0x46>
 8002518:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800251c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002520:	f004 fb46 	bl	8006bb0 <HAL_GPIO_ReadPin>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <Check_Ready+0x46>
			return 1; // return 1 when is gate drivers ready
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <Check_Ready+0x48>

		return 0;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	bd80      	pop	{r7, pc}
 8002534:	48000c00 	.word	0x48000c00
 8002538:	48000400 	.word	0x48000400
 800253c:	48001400 	.word	0x48001400

08002540 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002540:	b5b0      	push	{r4, r5, r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	// SOFT start_program RAMP REALISATION
	//  Ts 20khz
	if(htim->Instance == TIM15)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a7c      	ldr	r2, [pc, #496]	@ (8002740 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800254e:	4293      	cmp	r3, r2
 8002550:	f040 8254 	bne.w	80029fc <HAL_TIM_PeriodElapsedCallback+0x4bc>
	{
		if(currentState == STATE_SOFT_START || currentState == STATE_REGULATION )
 8002554:	4b7b      	ldr	r3, [pc, #492]	@ (8002744 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d004      	beq.n	8002566 <HAL_TIM_PeriodElapsedCallback+0x26>
 800255c:	4b79      	ldr	r3, [pc, #484]	@ (8002744 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b03      	cmp	r3, #3
 8002562:	f040 824b 	bne.w	80029fc <HAL_TIM_PeriodElapsedCallback+0x4bc>
		{
		//current_sensor1_vref = adc3_dma_buffer[0]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[0], pcb_temp)/4096)*3.3;
		//current_sensor2_vref = adc3_dma_buffer[1]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[1], pcb_temp)/4096)*3.3;

		input_voltage = (int)((((adc3_dma_buffer[2])*3300)/4096-200)*18.81);//[mV]		((Low_pass_filter(adc3_dma_buffer[2], input_voltage)/4096)*3.3-0.2)*27.1;
 8002566:	4b78      	ldr	r3, [pc, #480]	@ (8002748 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002568:	889b      	ldrh	r3, [r3, #4]
 800256a:	b29b      	uxth	r3, r3
 800256c:	461a      	mov	r2, r3
 800256e:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002572:	fb02 f303 	mul.w	r3, r2, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	da01      	bge.n	800257e <HAL_TIM_PeriodElapsedCallback+0x3e>
 800257a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800257e:	131b      	asrs	r3, r3, #12
 8002580:	3bc8      	subs	r3, #200	@ 0xc8
 8002582:	4618      	mov	r0, r3
 8002584:	f7fd fff6 	bl	8000574 <__aeabi_i2d>
 8002588:	a365      	add	r3, pc, #404	@ (adr r3, 8002720 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258e:	f7fe f85b 	bl	8000648 <__aeabi_dmul>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4610      	mov	r0, r2
 8002598:	4619      	mov	r1, r3
 800259a:	f7fe fb05 	bl	8000ba8 <__aeabi_d2iz>
 800259e:	4603      	mov	r3, r0
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b6a      	ldr	r3, [pc, #424]	@ (800274c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80025a4:	601a      	str	r2, [r3, #0]
		output_voltage = (int)((((adc4_dma_buffer[1])*3300)/4096-200)*18.81);//[mV] 		((Low_pass_filter(adc4_dma_buffer, output_voltage)/4096)*3.3-0.2)*27.1;
 80025a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002750 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80025a8:	885b      	ldrh	r3, [r3, #2]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80025b2:	fb02 f303 	mul.w	r3, r2, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	da01      	bge.n	80025be <HAL_TIM_PeriodElapsedCallback+0x7e>
 80025ba:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80025be:	131b      	asrs	r3, r3, #12
 80025c0:	3bc8      	subs	r3, #200	@ 0xc8
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fd ffd6 	bl	8000574 <__aeabi_i2d>
 80025c8:	a355      	add	r3, pc, #340	@ (adr r3, 8002720 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80025ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ce:	f7fe f83b 	bl	8000648 <__aeabi_dmul>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	f7fe fae5 	bl	8000ba8 <__aeabi_d2iz>
 80025de:	4603      	mov	r3, r0
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002754 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80025e4:	601a      	str	r2, [r3, #0]

		imax2_sum = (adc_moving_average-1450)*0.384; //[mA] 0.20V - -0.5A || 1.45v - 0A || 2.77V - 0.5A		0.384 A/V
 80025e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002758 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	f2a3 53aa 	subw	r3, r3, #1450	@ 0x5aa
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fd ffc0 	bl	8000574 <__aeabi_i2d>
 80025f4:	a34c      	add	r3, pc, #304	@ (adr r3, 8002728 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80025f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fa:	f7fe f825 	bl	8000648 <__aeabi_dmul>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4610      	mov	r0, r2
 8002604:	4619      	mov	r1, r3
 8002606:	f7fe faf7 	bl	8000bf8 <__aeabi_d2uiz>
 800260a:	4603      	mov	r3, r0
 800260c:	4a53      	ldr	r2, [pc, #332]	@ (800275c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800260e:	6013      	str	r3, [r2, #0]
		Gv = (float)output_voltage/(float)input_voltage;//output_voltage/input_voltage;
 8002610:	4b50      	ldr	r3, [pc, #320]	@ (8002754 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	ee07 3a90 	vmov	s15, r3
 8002618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800261c:	4b4b      	ldr	r3, [pc, #300]	@ (800274c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	ee07 3a90 	vmov	s15, r3
 8002624:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800262c:	4b4c      	ldr	r3, [pc, #304]	@ (8002760 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800262e:	edc3 7a00 	vstr	s15, [r3]

		if(Gv<2) //CZARY
 8002632:	4b4b      	ldr	r3, [pc, #300]	@ (8002760 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002634:	edd3 7a00 	vldr	s15, [r3]
 8002638:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800263c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002644:	f140 8094 	bpl.w	8002770 <HAL_TIM_PeriodElapsedCallback+0x230>
		{
			delay_tr = acos(1-Gv)/wr;
 8002648:	4b45      	ldr	r3, [pc, #276]	@ (8002760 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800264a:	edd3 7a00 	vldr	s15, [r3]
 800264e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002656:	ee17 0a90 	vmov	r0, s15
 800265a:	f7fd ff9d 	bl	8000598 <__aeabi_f2d>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	ec43 2b10 	vmov	d0, r2, r3
 8002666:	f012 ffbf 	bl	80155e8 <acos>
 800266a:	ec51 0b10 	vmov	r0, r1, d0
 800266e:	a330      	add	r3, pc, #192	@ (adr r3, 8002730 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002674:	f7fe f912 	bl	800089c <__aeabi_ddiv>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	f7fe fada 	bl	8000c38 <__aeabi_d2f>
 8002684:	4603      	mov	r3, r0
 8002686:	4a37      	ldr	r2, [pc, #220]	@ (8002764 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002688:	6013      	str	r3, [r2, #0]
			imin = (int)(Imin_Factor*output_voltage*sqrt((2-Gv)/Gv)/Z); //[mA] Negative current needed to Zero voltage switching in resonance
 800268a:	4b32      	ldr	r3, [pc, #200]	@ (8002754 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	ee07 3a90 	vmov	s15, r3
 8002692:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002696:	4b34      	ldr	r3, [pc, #208]	@ (8002768 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002698:	edd3 7a00 	vldr	s15, [r3]
 800269c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a0:	ee17 0a90 	vmov	r0, s15
 80026a4:	f7fd ff78 	bl	8000598 <__aeabi_f2d>
 80026a8:	4604      	mov	r4, r0
 80026aa:	460d      	mov	r5, r1
 80026ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002760 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80026ae:	edd3 7a00 	vldr	s15, [r3]
 80026b2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80026b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026ba:	4b29      	ldr	r3, [pc, #164]	@ (8002760 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80026bc:	edd3 7a00 	vldr	s15, [r3]
 80026c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80026c4:	ee16 0a90 	vmov	r0, s13
 80026c8:	f7fd ff66 	bl	8000598 <__aeabi_f2d>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	ec43 2b10 	vmov	d0, r2, r3
 80026d4:	f013 f82c 	bl	8015730 <sqrt>
 80026d8:	ec53 2b10 	vmov	r2, r3, d0
 80026dc:	4620      	mov	r0, r4
 80026de:	4629      	mov	r1, r5
 80026e0:	f7fd ffb2 	bl	8000648 <__aeabi_dmul>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	a312      	add	r3, pc, #72	@ (adr r3, 8002738 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80026ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f2:	f7fe f8d3 	bl	800089c <__aeabi_ddiv>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	f7fe fa53 	bl	8000ba8 <__aeabi_d2iz>
 8002702:	4603      	mov	r3, r0
 8002704:	461a      	mov	r2, r3
 8002706:	4b19      	ldr	r3, [pc, #100]	@ (800276c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002708:	601a      	str	r2, [r3, #0]
			if(imin<500) imin = 500;
 800270a:	4b18      	ldr	r3, [pc, #96]	@ (800276c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002712:	d268      	bcs.n	80027e6 <HAL_TIM_PeriodElapsedCallback+0x2a6>
 8002714:	4b15      	ldr	r3, [pc, #84]	@ (800276c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002716:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	e063      	b.n	80027e6 <HAL_TIM_PeriodElapsedCallback+0x2a6>
 800271e:	bf00      	nop
 8002720:	28f5c28f 	.word	0x28f5c28f
 8002724:	4032cf5c 	.word	0x4032cf5c
 8002728:	bc6a7efa 	.word	0xbc6a7efa
 800272c:	3fd89374 	.word	0x3fd89374
 8002730:	78000000 	.word	0x78000000
 8002734:	4190942a 	.word	0x4190942a
 8002738:	9374bc6a 	.word	0x9374bc6a
 800273c:	40624418 	.word	0x40624418
 8002740:	40014000 	.word	0x40014000
 8002744:	20000b52 	.word	0x20000b52
 8002748:	20000a40 	.word	0x20000a40
 800274c:	20000a34 	.word	0x20000a34
 8002750:	20000a54 	.word	0x20000a54
 8002754:	20000a4c 	.word	0x20000a4c
 8002758:	20000a7c 	.word	0x20000a7c
 800275c:	20000a64 	.word	0x20000a64
 8002760:	20000004 	.word	0x20000004
 8002764:	20000a5c 	.word	0x20000a5c
 8002768:	2000001c 	.word	0x2000001c
 800276c:	20000a30 	.word	0x20000a30
		} else if(Gv>=2)
 8002770:	4bbd      	ldr	r3, [pc, #756]	@ (8002a68 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8002772:	edd3 7a00 	vldr	s15, [r3]
 8002776:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800277a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800277e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002782:	db30      	blt.n	80027e6 <HAL_TIM_PeriodElapsedCallback+0x2a6>
		{
			delay_tr = (M_PI-acos(1/(Gv-1)))/wr;
 8002784:	4bb8      	ldr	r3, [pc, #736]	@ (8002a68 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8002786:	edd3 7a00 	vldr	s15, [r3]
 800278a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800278e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002792:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002796:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800279a:	ee16 0a90 	vmov	r0, s13
 800279e:	f7fd fefb 	bl	8000598 <__aeabi_f2d>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	ec43 2b10 	vmov	d0, r2, r3
 80027aa:	f012 ff1d 	bl	80155e8 <acos>
 80027ae:	ec53 2b10 	vmov	r2, r3, d0
 80027b2:	a1a3      	add	r1, pc, #652	@ (adr r1, 8002a40 <HAL_TIM_PeriodElapsedCallback+0x500>)
 80027b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027b8:	f7fd fd8e 	bl	80002d8 <__aeabi_dsub>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4610      	mov	r0, r2
 80027c2:	4619      	mov	r1, r3
 80027c4:	a3a0      	add	r3, pc, #640	@ (adr r3, 8002a48 <HAL_TIM_PeriodElapsedCallback+0x508>)
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	f7fe f867 	bl	800089c <__aeabi_ddiv>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4610      	mov	r0, r2
 80027d4:	4619      	mov	r1, r3
 80027d6:	f7fe fa2f 	bl	8000c38 <__aeabi_d2f>
 80027da:	4603      	mov	r3, r0
 80027dc:	4aa3      	ldr	r2, [pc, #652]	@ (8002a6c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 80027de:	6013      	str	r3, [r2, #0]
			imin = 0;
 80027e0:	4ba3      	ldr	r3, [pc, #652]	@ (8002a70 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
		}
		if(delay_tr<0.01){
 80027e6:	4ba1      	ldr	r3, [pc, #644]	@ (8002a6c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fd fed4 	bl	8000598 <__aeabi_f2d>
 80027f0:	a397      	add	r3, pc, #604	@ (adr r3, 8002a50 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	f7fe f999 	bl	8000b2c <__aeabi_dcmplt>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d017      	beq.n	8002830 <HAL_TIM_PeriodElapsedCallback+0x2f0>
		int delay_tr_freq = (int)(1/delay_tr);
 8002800:	4b9a      	ldr	r3, [pc, #616]	@ (8002a6c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8002802:	ed93 7a00 	vldr	s14, [r3]
 8002806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800280a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800280e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002812:	ee17 3a90 	vmov	r3, s15
 8002816:	60fb      	str	r3, [r7, #12]
		if(delay_tr_freq>20000000) delay_tr_freq = 15000000;//10Mhz
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4a96      	ldr	r2, [pc, #600]	@ (8002a74 <HAL_TIM_PeriodElapsedCallback+0x534>)
 800281c:	4293      	cmp	r3, r2
 800281e:	dd01      	ble.n	8002824 <HAL_TIM_PeriodElapsedCallback+0x2e4>
 8002820:	4b95      	ldr	r3, [pc, #596]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8002822:	60fb      	str	r3, [r7, #12]
		Update_PWM_Frequency(&htim1, TIM_CHANNEL_1, delay_tr_freq); // Set TIM1 CH1 to freq that is delay tr and send to fpga
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	461a      	mov	r2, r3
 8002828:	2100      	movs	r1, #0
 800282a:	4894      	ldr	r0, [pc, #592]	@ (8002a7c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 800282c:	f7ff fdb2 	bl	8002394 <Update_PWM_Frequency>
		}

		if(currentState == STATE_SOFT_START) RAMP(); // Adding to Vramp stepping voltage to create starting ramp
 8002830:	4b93      	ldr	r3, [pc, #588]	@ (8002a80 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d101      	bne.n	800283c <HAL_TIM_PeriodElapsedCallback+0x2fc>
 8002838:	f000 f952 	bl	8002ae0 <RAMP>

		regulatorPI(&imax1, &Integral_I, output_voltage, Vramp, LIM_PEAK_POS, LIM_PEAK_NEG, Kp, Ti, Ts);
 800283c:	4b91      	ldr	r3, [pc, #580]	@ (8002a84 <HAL_TIM_PeriodElapsedCallback+0x544>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002848:	4b8f      	ldr	r3, [pc, #572]	@ (8002a88 <HAL_TIM_PeriodElapsedCallback+0x548>)
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	ee07 3a10 	vmov	s14, r3
 8002850:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002854:	4b8d      	ldr	r3, [pc, #564]	@ (8002a8c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	ee06 3a90 	vmov	s13, r3
 800285c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002860:	4b8b      	ldr	r3, [pc, #556]	@ (8002a90 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	ee06 3a10 	vmov	s12, r3
 8002868:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800286c:	4b89      	ldr	r3, [pc, #548]	@ (8002a94 <HAL_TIM_PeriodElapsedCallback+0x554>)
 800286e:	edd3 5a00 	vldr	s11, [r3]
 8002872:	4b89      	ldr	r3, [pc, #548]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8002874:	ed93 5a00 	vldr	s10, [r3]
 8002878:	ed9f 3a88 	vldr	s6, [pc, #544]	@ 8002a9c <HAL_TIM_PeriodElapsedCallback+0x55c>
 800287c:	eef0 2a45 	vmov.f32	s5, s10
 8002880:	eeb0 2a65 	vmov.f32	s4, s11
 8002884:	eef0 1a46 	vmov.f32	s3, s12
 8002888:	eeb0 1a66 	vmov.f32	s2, s13
 800288c:	eef0 0a47 	vmov.f32	s1, s14
 8002890:	eeb0 0a67 	vmov.f32	s0, s15
 8002894:	4982      	ldr	r1, [pc, #520]	@ (8002aa0 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002896:	4883      	ldr	r0, [pc, #524]	@ (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002898:	f000 f97c 	bl	8002b94 <regulatorPI>

		if(output_voltage>19000)
 800289c:	4b79      	ldr	r3, [pc, #484]	@ (8002a84 <HAL_TIM_PeriodElapsedCallback+0x544>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f644 2238 	movw	r2, #19000	@ 0x4a38
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d939      	bls.n	800291c <HAL_TIM_PeriodElapsedCallback+0x3dc>
		{
		delay_hc = (2*C_CAP*output_voltage)/imax1;
 80028a8:	4b76      	ldr	r3, [pc, #472]	@ (8002a84 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fd fe51 	bl	8000554 <__aeabi_ui2d>
 80028b2:	a369      	add	r3, pc, #420	@ (adr r3, 8002a58 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80028b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b8:	f7fd fec6 	bl	8000648 <__aeabi_dmul>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4614      	mov	r4, r2
 80028c2:	461d      	mov	r5, r3
 80028c4:	4b77      	ldr	r3, [pc, #476]	@ (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fd fe43 	bl	8000554 <__aeabi_ui2d>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4620      	mov	r0, r4
 80028d4:	4629      	mov	r1, r5
 80028d6:	f7fd ffe1 	bl	800089c <__aeabi_ddiv>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	f7fe f9a9 	bl	8000c38 <__aeabi_d2f>
 80028e6:	4603      	mov	r3, r0
 80028e8:	4a6f      	ldr	r2, [pc, #444]	@ (8002aa8 <HAL_TIM_PeriodElapsedCallback+0x568>)
 80028ea:	6013      	str	r3, [r2, #0]
		int delay_hc_freq = (int)(1/delay_hc);
 80028ec:	4b6e      	ldr	r3, [pc, #440]	@ (8002aa8 <HAL_TIM_PeriodElapsedCallback+0x568>)
 80028ee:	ed93 7a00 	vldr	s14, [r3]
 80028f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028fe:	ee17 3a90 	vmov	r3, s15
 8002902:	60bb      	str	r3, [r7, #8]
		if(delay_hc_freq>20000000) delay_hc_freq = 15000000;//10Mhz jakis problem
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	4a5b      	ldr	r2, [pc, #364]	@ (8002a74 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002908:	4293      	cmp	r3, r2
 800290a:	dd01      	ble.n	8002910 <HAL_TIM_PeriodElapsedCallback+0x3d0>
 800290c:	4b5a      	ldr	r3, [pc, #360]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x538>)
 800290e:	60bb      	str	r3, [r7, #8]
		Update_PWM_Frequency(&htim8, TIM_CHANNEL_2, delay_hc_freq); // Set TIM8 CH1 o freq that is delay hc and send to fpga
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	461a      	mov	r2, r3
 8002914:	2104      	movs	r1, #4
 8002916:	4865      	ldr	r0, [pc, #404]	@ (8002aac <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002918:	f7ff fd3c 	bl	8002394 <Update_PWM_Frequency>
		}

		imax2 = imax1 + imax2_sum; // imax2_sum signal from FPGA
 800291c:	4b61      	ldr	r3, [pc, #388]	@ (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b63      	ldr	r3, [pc, #396]	@ (8002ab0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4413      	add	r3, r2
 8002926:	4a63      	ldr	r2, [pc, #396]	@ (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002928:	6013      	str	r3, [r2, #0]
		// imax1,2 each for branches to make 180 degree shift
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref+((int)imax1*0.025)); // imax1  1.5V is 0A;  1A is 20mV; 1 bit is 0.8mV; imax[mA]*0.02 [V/A]/0.8[mV] = Value for DAC
 800292a:	4b63      	ldr	r3, [pc, #396]	@ (8002ab8 <HAL_TIM_PeriodElapsedCallback+0x578>)
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fd fe20 	bl	8000574 <__aeabi_i2d>
 8002934:	4604      	mov	r4, r0
 8002936:	460d      	mov	r5, r1
 8002938:	4b5a      	ldr	r3, [pc, #360]	@ (8002aa4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd fe19 	bl	8000574 <__aeabi_i2d>
 8002942:	a347      	add	r3, pc, #284	@ (adr r3, 8002a60 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002948:	f7fd fe7e 	bl	8000648 <__aeabi_dmul>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4620      	mov	r0, r4
 8002952:	4629      	mov	r1, r5
 8002954:	f7fd fcc2 	bl	80002dc <__adddf3>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4610      	mov	r0, r2
 800295e:	4619      	mov	r1, r3
 8002960:	f7fe f94a 	bl	8000bf8 <__aeabi_d2uiz>
 8002964:	4603      	mov	r3, r0
 8002966:	2200      	movs	r2, #0
 8002968:	2100      	movs	r1, #0
 800296a:	4854      	ldr	r0, [pc, #336]	@ (8002abc <HAL_TIM_PeriodElapsedCallback+0x57c>)
 800296c:	f003 fb32 	bl	8005fd4 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, current_sensor2_vref+((int)imax2*0.025)); // imax2
 8002970:	4b53      	ldr	r3, [pc, #332]	@ (8002ac0 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7fd fdfd 	bl	8000574 <__aeabi_i2d>
 800297a:	4604      	mov	r4, r0
 800297c:	460d      	mov	r5, r1
 800297e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fdf6 	bl	8000574 <__aeabi_i2d>
 8002988:	a335      	add	r3, pc, #212	@ (adr r3, 8002a60 <HAL_TIM_PeriodElapsedCallback+0x520>)
 800298a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298e:	f7fd fe5b 	bl	8000648 <__aeabi_dmul>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4620      	mov	r0, r4
 8002998:	4629      	mov	r1, r5
 800299a:	f7fd fc9f 	bl	80002dc <__adddf3>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	4610      	mov	r0, r2
 80029a4:	4619      	mov	r1, r3
 80029a6:	f7fe f927 	bl	8000bf8 <__aeabi_d2uiz>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2200      	movs	r2, #0
 80029ae:	2110      	movs	r1, #16
 80029b0:	4842      	ldr	r0, [pc, #264]	@ (8002abc <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80029b2:	f003 fb0f 	bl	8005fd4 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref-((int)imin*0.25)); // imin uzyto tutaj wzmacniacza 10x dla sygnalu z sensora pradu wiec ma wzmocnienie 200mv/A a nie 20mv/a
 80029b6:	4b40      	ldr	r3, [pc, #256]	@ (8002ab8 <HAL_TIM_PeriodElapsedCallback+0x578>)
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fd fdda 	bl	8000574 <__aeabi_i2d>
 80029c0:	4604      	mov	r4, r0
 80029c2:	460d      	mov	r5, r1
 80029c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002a70 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fd fdd3 	bl	8000574 <__aeabi_i2d>
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ac4 <HAL_TIM_PeriodElapsedCallback+0x584>)
 80029d4:	f7fd fe38 	bl	8000648 <__aeabi_dmul>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4620      	mov	r0, r4
 80029de:	4629      	mov	r1, r5
 80029e0:	f7fd fc7a 	bl	80002d8 <__aeabi_dsub>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	f7fe f904 	bl	8000bf8 <__aeabi_d2uiz>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2200      	movs	r2, #0
 80029f4:	2100      	movs	r1, #0
 80029f6:	4834      	ldr	r0, [pc, #208]	@ (8002ac8 <HAL_TIM_PeriodElapsedCallback+0x588>)
 80029f8:	f003 faec 	bl	8005fd4 <HAL_DAC_SetValue>

		}
		//HAL_TIM_Base_Stop_IT(&htim15);
	}

	if (htim->Instance == TIM6) // 5 sec period
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a32      	ldr	r2, [pc, #200]	@ (8002acc <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d101      	bne.n	8002a0a <HAL_TIM_PeriodElapsedCallback+0x4ca>
		    {
		//if(currentState == STATE_SOFT_START || currentState == STATE_REGULATION )
				//{
				FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
 8002a06:	f000 f98f 	bl	8002d28 <FAN_Drive>
				//}
		    }


	if (htim->Instance == TIM7)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a30      	ldr	r2, [pc, #192]	@ (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d110      	bne.n	8002a36 <HAL_TIM_PeriodElapsedCallback+0x4f6>
	    {
	        // Turn off OCD pins of currents sensors to reset current sensor 1us

	        HAL_GPIO_TogglePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin);
 8002a14:	2102      	movs	r1, #2
 8002a16:	482f      	ldr	r0, [pc, #188]	@ (8002ad4 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002a18:	f004 f8fa 	bl	8006c10 <HAL_GPIO_TogglePin>
	        HAL_GPIO_TogglePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin);
 8002a1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a20:	482d      	ldr	r0, [pc, #180]	@ (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002a22:	f004 f8f5 	bl	8006c10 <HAL_GPIO_TogglePin>
	        HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2120      	movs	r1, #32
 8002a2a:	482a      	ldr	r0, [pc, #168]	@ (8002ad4 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002a2c:	f004 f8d8 	bl	8006be0 <HAL_GPIO_WritePin>
	        // Stop the timer
	        HAL_TIM_Base_Stop_IT(&htim7);
 8002a30:	482a      	ldr	r0, [pc, #168]	@ (8002adc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8002a32:	f006 ffad 	bl	8009990 <HAL_TIM_Base_Stop_IT>
	    }


}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	54442d18 	.word	0x54442d18
 8002a44:	400921fb 	.word	0x400921fb
 8002a48:	78000000 	.word	0x78000000
 8002a4c:	4190942a 	.word	0x4190942a
 8002a50:	47ae147b 	.word	0x47ae147b
 8002a54:	3f847ae1 	.word	0x3f847ae1
 8002a58:	e5c45270 	.word	0xe5c45270
 8002a5c:	3e32e5d9 	.word	0x3e32e5d9
 8002a60:	9999999a 	.word	0x9999999a
 8002a64:	3f999999 	.word	0x3f999999
 8002a68:	20000004 	.word	0x20000004
 8002a6c:	20000a5c 	.word	0x20000a5c
 8002a70:	20000a30 	.word	0x20000a30
 8002a74:	01312d00 	.word	0x01312d00
 8002a78:	00e4e1c0 	.word	0x00e4e1c0
 8002a7c:	2000077c 	.word	0x2000077c
 8002a80:	20000b52 	.word	0x20000b52
 8002a84:	20000a4c 	.word	0x20000a4c
 8002a88:	20000a50 	.word	0x20000a50
 8002a8c:	20000010 	.word	0x20000010
 8002a90:	20000b44 	.word	0x20000b44
 8002a94:	20000008 	.word	0x20000008
 8002a98:	2000000c 	.word	0x2000000c
 8002a9c:	3851b717 	.word	0x3851b717
 8002aa0:	20000b48 	.word	0x20000b48
 8002aa4:	20000a28 	.word	0x20000a28
 8002aa8:	20000a60 	.word	0x20000a60
 8002aac:	200008ac 	.word	0x200008ac
 8002ab0:	20000a64 	.word	0x20000a64
 8002ab4:	20000a2c 	.word	0x20000a2c
 8002ab8:	20000a24 	.word	0x20000a24
 8002abc:	20000694 	.word	0x20000694
 8002ac0:	20000a26 	.word	0x20000a26
 8002ac4:	3fd00000 	.word	0x3fd00000
 8002ac8:	200006a8 	.word	0x200006a8
 8002acc:	40001000 	.word	0x40001000
 8002ad0:	40001400 	.word	0x40001400
 8002ad4:	48001000 	.word	0x48001000
 8002ad8:	48001400 	.word	0x48001400
 8002adc:	20000860 	.word	0x20000860

08002ae0 <RAMP>:

void RAMP()
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
	// RAMP Voltage to soft-start
				if((vref-output_voltage)>100)
 8002ae4:	4b26      	ldr	r3, [pc, #152]	@ (8002b80 <RAMP+0xa0>)
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4b26      	ldr	r3, [pc, #152]	@ (8002b84 <RAMP+0xa4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b64      	cmp	r3, #100	@ 0x64
 8002af2:	d917      	bls.n	8002b24 <RAMP+0x44>
				{
					Vramp = output_voltage+4000000*Ts; // 200mV step per loop period
 8002af4:	4b23      	ldr	r3, [pc, #140]	@ (8002b84 <RAMP+0xa4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fd fd2b 	bl	8000554 <__aeabi_ui2d>
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	4b21      	ldr	r3, [pc, #132]	@ (8002b88 <RAMP+0xa8>)
 8002b04:	f7fd fbea 	bl	80002dc <__adddf3>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f7fe f872 	bl	8000bf8 <__aeabi_d2uiz>
 8002b14:	4603      	mov	r3, r0
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	4b1c      	ldr	r3, [pc, #112]	@ (8002b8c <RAMP+0xac>)
 8002b1a:	801a      	strh	r2, [r3, #0]
					RAMP_FINISHED = 0;
 8002b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002b90 <RAMP+0xb0>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
					Vramp = 48000; // 48V
					RAMP_FINISHED = 1;
				}


}
 8002b22:	e02a      	b.n	8002b7a <RAMP+0x9a>
				else if((vref-output_voltage)<-100)
 8002b24:	4b16      	ldr	r3, [pc, #88]	@ (8002b80 <RAMP+0xa0>)
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4b16      	ldr	r3, [pc, #88]	@ (8002b84 <RAMP+0xa4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	f113 0f65 	cmn.w	r3, #101	@ 0x65
 8002b34:	d814      	bhi.n	8002b60 <RAMP+0x80>
					Vramp = output_voltage-4000000*Ts;
 8002b36:	4b13      	ldr	r3, [pc, #76]	@ (8002b84 <RAMP+0xa4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd fd0a 	bl	8000554 <__aeabi_ui2d>
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	4b10      	ldr	r3, [pc, #64]	@ (8002b88 <RAMP+0xa8>)
 8002b46:	f7fd fbc7 	bl	80002d8 <__aeabi_dsub>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	f7fe f851 	bl	8000bf8 <__aeabi_d2uiz>
 8002b56:	4603      	mov	r3, r0
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b8c <RAMP+0xac>)
 8002b5c:	801a      	strh	r2, [r3, #0]
}
 8002b5e:	e00c      	b.n	8002b7a <RAMP+0x9a>
				else if(Vramp==48000)
 8002b60:	4b0a      	ldr	r3, [pc, #40]	@ (8002b8c <RAMP+0xac>)
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d106      	bne.n	8002b7a <RAMP+0x9a>
					Vramp = 48000; // 48V
 8002b6c:	4b07      	ldr	r3, [pc, #28]	@ (8002b8c <RAMP+0xac>)
 8002b6e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002b72:	801a      	strh	r2, [r3, #0]
					RAMP_FINISHED = 1;
 8002b74:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <RAMP+0xb0>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	701a      	strb	r2, [r3, #0]
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000000 	.word	0x20000000
 8002b84:	20000a4c 	.word	0x20000a4c
 8002b88:	40690000 	.word	0x40690000
 8002b8c:	20000a50 	.word	0x20000a50
 8002b90:	20000a58 	.word	0x20000a58

08002b94 <regulatorPI>:

void regulatorPI(uint32_t *out, uint32_t *integral, float in, float in_zad, float limp, float limn, float kp, float ti, float Ts1)
{
 8002b94:	b5b0      	push	{r4, r5, r7, lr}
 8002b96:	b08c      	sub	sp, #48	@ 0x30
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6278      	str	r0, [r7, #36]	@ 0x24
 8002b9c:	6239      	str	r1, [r7, #32]
 8002b9e:	ed87 0a07 	vstr	s0, [r7, #28]
 8002ba2:	edc7 0a06 	vstr	s1, [r7, #24]
 8002ba6:	ed87 1a05 	vstr	s2, [r7, #20]
 8002baa:	edc7 1a04 	vstr	s3, [r7, #16]
 8002bae:	ed87 2a03 	vstr	s4, [r7, #12]
 8002bb2:	edc7 2a02 	vstr	s5, [r7, #8]
 8002bb6:	ed87 3a01 	vstr	s6, [r7, #4]
	// Tustin transfrom of PI regulator s -> 2/T * (Z-1)/(Z+1)
    float delta;

    delta = in_zad - in; // error
 8002bba:	ed97 7a06 	vldr	s14, [r7, #24]
 8002bbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bc6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    *integral = *integral + (delta + prev_delta) * (kp / ti) * Ts1 * 0.5 ; // I part
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fd fcc0 	bl	8000554 <__aeabi_ui2d>
 8002bd4:	4604      	mov	r4, r0
 8002bd6:	460d      	mov	r5, r1
 8002bd8:	4b51      	ldr	r3, [pc, #324]	@ (8002d20 <regulatorPI+0x18c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	ee07 3a90 	vmov	s15, r3
 8002be0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002be4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bec:	ed97 6a03 	vldr	s12, [r7, #12]
 8002bf0:	edd7 6a02 	vldr	s13, [r7, #8]
 8002bf4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c04:	ee17 0a90 	vmov	r0, s15
 8002c08:	f7fd fcc6 	bl	8000598 <__aeabi_f2d>
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	4b44      	ldr	r3, [pc, #272]	@ (8002d24 <regulatorPI+0x190>)
 8002c12:	f7fd fd19 	bl	8000648 <__aeabi_dmul>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	f7fd fb5d 	bl	80002dc <__adddf3>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f7fd ffe5 	bl	8000bf8 <__aeabi_d2uiz>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	601a      	str	r2, [r3, #0]
    prev_delta = delta;
 8002c34:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c3c:	ee17 2a90 	vmov	r2, s15
 8002c40:	4b37      	ldr	r3, [pc, #220]	@ (8002d20 <regulatorPI+0x18c>)
 8002c42:	601a      	str	r2, [r3, #0]
    if (*integral >= limp) // limit peak positive
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	ee07 3a90 	vmov	s15, r3
 8002c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c50:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5c:	d807      	bhi.n	8002c6e <regulatorPI+0xda>
    {
        *integral = limp;
 8002c5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c66:	ee17 2a90 	vmov	r2, s15
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	601a      	str	r2, [r3, #0]
    }
    if (*integral <= limn)// limit peak negative
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	ee07 3a90 	vmov	s15, r3
 8002c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7a:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c86:	db07      	blt.n	8002c98 <regulatorPI+0x104>
    {
        *integral = limn;
 8002c88:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c90:	ee17 2a90 	vmov	r2, s15
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	601a      	str	r2, [r3, #0]
    }
    *out = (delta * kp + *integral); // Sum of P and I
 8002c98:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002c9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ca0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	ee07 3a90 	vmov	s15, r3
 8002cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cb8:	ee17 2a90 	vmov	r2, s15
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	601a      	str	r2, [r3, #0]
    if (*out >= limp) // limit peak positive
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	ee07 3a90 	vmov	s15, r3
 8002cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ccc:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd8:	d807      	bhi.n	8002cea <regulatorPI+0x156>
    {
        *out = limp;
 8002cda:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ce2:	ee17 2a90 	vmov	r2, s15
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	601a      	str	r2, [r3, #0]
    }
    if (*out <= limn)// limit peak negative
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	ee07 3a90 	vmov	s15, r3
 8002cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf6:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d02:	da00      	bge.n	8002d06 <regulatorPI+0x172>
    {
        *out = limn;
    }
}
 8002d04:	e007      	b.n	8002d16 <regulatorPI+0x182>
        *out = limn;
 8002d06:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d0e:	ee17 2a90 	vmov	r2, s15
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	601a      	str	r2, [r3, #0]
}
 8002d16:	bf00      	nop
 8002d18:	3730      	adds	r7, #48	@ 0x30
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000b4c 	.word	0x20000b4c
 8002d24:	3fe00000 	.word	0x3fe00000

08002d28 <FAN_Drive>:

	return Low_passed_sample;

}
void FAN_Drive()
{ //@ToDo poprawic ogarnac zeby a intach bylo
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
		pcb_temp = (adc3_dma_buffer[3]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[3], pcb_temp)/4096)*3.3;
 8002d2e:	4b44      	ldr	r3, [pc, #272]	@ (8002e40 <FAN_Drive+0x118>)
 8002d30:	88db      	ldrh	r3, [r3, #6]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	461a      	mov	r2, r3
 8002d36:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	da01      	bge.n	8002d46 <FAN_Drive+0x1e>
 8002d42:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002d46:	131b      	asrs	r3, r3, #12
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e44 <FAN_Drive+0x11c>)
 8002d4c:	601a      	str	r2, [r3, #0]
		heat_sink_temp = (adc3_dma_buffer[4]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[4], heat_sink_temp)/4096)*3.3;
 8002d4e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e40 <FAN_Drive+0x118>)
 8002d50:	891b      	ldrh	r3, [r3, #8]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002d5a:	fb02 f303 	mul.w	r3, r2, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	da01      	bge.n	8002d66 <FAN_Drive+0x3e>
 8002d62:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002d66:	131b      	asrs	r3, r3, #12
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b37      	ldr	r3, [pc, #220]	@ (8002e48 <FAN_Drive+0x120>)
 8002d6c:	601a      	str	r2, [r3, #0]

		uint32_t temperature = 20;
 8002d6e:	2314      	movs	r3, #20
 8002d70:	603b      	str	r3, [r7, #0]

		pcb_temp = (pcb_temp-400)/20;
 8002d72:	4b34      	ldr	r3, [pc, #208]	@ (8002e44 <FAN_Drive+0x11c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002d7a:	4a34      	ldr	r2, [pc, #208]	@ (8002e4c <FAN_Drive+0x124>)
 8002d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	4a30      	ldr	r2, [pc, #192]	@ (8002e44 <FAN_Drive+0x11c>)
 8002d84:	6013      	str	r3, [r2, #0]
		heat_sink_temp = (heat_sink_temp-500)/10;
 8002d86:	4b30      	ldr	r3, [pc, #192]	@ (8002e48 <FAN_Drive+0x120>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002d8e:	4a2f      	ldr	r2, [pc, #188]	@ (8002e4c <FAN_Drive+0x124>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	08db      	lsrs	r3, r3, #3
 8002d96:	4a2c      	ldr	r2, [pc, #176]	@ (8002e48 <FAN_Drive+0x120>)
 8002d98:	6013      	str	r3, [r2, #0]
		// Choose the higher of the two temperatures
		temperature = (pcb_temp > heat_sink_temp) ? pcb_temp : heat_sink_temp;
 8002d9a:	4b2b      	ldr	r3, [pc, #172]	@ (8002e48 <FAN_Drive+0x120>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	4b29      	ldr	r3, [pc, #164]	@ (8002e44 <FAN_Drive+0x11c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4293      	cmp	r3, r2
 8002da4:	bf38      	it	cc
 8002da6:	4613      	movcc	r3, r2
 8002da8:	603b      	str	r3, [r7, #0]
		// Apply a non-linear (exponential) scaling for the fan speed
		// This scales the temperature to a value between 0 and 1, then applies an exponential curve
		uint32_t normalized_temp = ((temperature - 20) *100)/ 80;  // Normalizing between 0 (20°C) and 1000 (100°C)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2264      	movs	r2, #100	@ 0x64
 8002dae:	fb02 f303 	mul.w	r3, r2, r3
 8002db2:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8002db6:	4a25      	ldr	r2, [pc, #148]	@ (8002e4c <FAN_Drive+0x124>)
 8002db8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbc:	099b      	lsrs	r3, r3, #6
 8002dbe:	607b      	str	r3, [r7, #4]
		if (normalized_temp > 100) normalized_temp = 100;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b64      	cmp	r3, #100	@ 0x64
 8002dc4:	d901      	bls.n	8002dca <FAN_Drive+0xa2>
 8002dc6:	2364      	movs	r3, #100	@ 0x64
 8002dc8:	607b      	str	r3, [r7, #4]
		if (normalized_temp < 0) normalized_temp = 0;

		duty_cycle = 20 + ((int)(pow(normalized_temp, 3) * 79))/1000000;  // Cubic curve for fan speed control
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fd fbc2 	bl	8000554 <__aeabi_ui2d>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8002e30 <FAN_Drive+0x108>
 8002dd8:	ec43 2b10 	vmov	d0, r2, r3
 8002ddc:	f012 fc38 	bl	8015650 <pow>
 8002de0:	ec51 0b10 	vmov	r0, r1, d0
 8002de4:	a314      	add	r3, pc, #80	@ (adr r3, 8002e38 <FAN_Drive+0x110>)
 8002de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dea:	f7fd fc2d 	bl	8000648 <__aeabi_dmul>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	f7fd fed7 	bl	8000ba8 <__aeabi_d2iz>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4a14      	ldr	r2, [pc, #80]	@ (8002e50 <FAN_Drive+0x128>)
 8002dfe:	fb82 1203 	smull	r1, r2, r2, r3
 8002e02:	1492      	asrs	r2, r2, #18
 8002e04:	17db      	asrs	r3, r3, #31
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	3314      	adds	r3, #20
 8002e0a:	4a12      	ldr	r2, [pc, #72]	@ (8002e54 <FAN_Drive+0x12c>)
 8002e0c:	6013      	str	r3, [r2, #0]

		// Enforce minimum and maximum duty cycles
		if (temperature < 20) {
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b13      	cmp	r3, #19
 8002e12:	d803      	bhi.n	8002e1c <FAN_Drive+0xf4>
		        duty_cycle = 20;
 8002e14:	4b0f      	ldr	r3, [pc, #60]	@ (8002e54 <FAN_Drive+0x12c>)
 8002e16:	2214      	movs	r2, #20
 8002e18:	601a      	str	r2, [r3, #0]
		    	duty_cycle = 99;
		}

		//Set_PWM_DutyCycle(duty_cycle);

}
 8002e1a:	e005      	b.n	8002e28 <FAN_Drive+0x100>
		} else if (temperature > 100) {
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b64      	cmp	r3, #100	@ 0x64
 8002e20:	d902      	bls.n	8002e28 <FAN_Drive+0x100>
		    	duty_cycle = 99;
 8002e22:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <FAN_Drive+0x12c>)
 8002e24:	2263      	movs	r2, #99	@ 0x63
 8002e26:	601a      	str	r2, [r3, #0]
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	00000000 	.word	0x00000000
 8002e34:	40080000 	.word	0x40080000
 8002e38:	00000000 	.word	0x00000000
 8002e3c:	4053c000 	.word	0x4053c000
 8002e40:	20000a40 	.word	0x20000a40
 8002e44:	20000a38 	.word	0x20000a38
 8002e48:	20000a3c 	.word	0x20000a3c
 8002e4c:	cccccccd 	.word	0xcccccccd
 8002e50:	431bde83 	.word	0x431bde83
 8002e54:	20000018 	.word	0x20000018

08002e58 <SendUSBMessage>:



void SendUSBMessage(const char* message) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(message);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7fd fa2d 	bl	80002c0 <strlen>
 8002e66:	4603      	mov	r3, r0
 8002e68:	81fb      	strh	r3, [r7, #14]
    if (len > 127) len = 127;  // Limit to buffer size
 8002e6a:	89fb      	ldrh	r3, [r7, #14]
 8002e6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e6e:	d901      	bls.n	8002e74 <SendUSBMessage+0x1c>
 8002e70:	237f      	movs	r3, #127	@ 0x7f
 8002e72:	81fb      	strh	r3, [r7, #14]
    memcpy(USB_TX_Buffer, message, len);
 8002e74:	89fb      	ldrh	r3, [r7, #14]
 8002e76:	461a      	mov	r2, r3
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	480b      	ldr	r0, [pc, #44]	@ (8002ea8 <SendUSBMessage+0x50>)
 8002e7c:	f00e fc6d 	bl	801175a <memcpy>
    USB_TX_Buffer[len] = '\0';  // Ensure null-terminated string
 8002e80:	89fb      	ldrh	r3, [r7, #14]
 8002e82:	4a09      	ldr	r2, [pc, #36]	@ (8002ea8 <SendUSBMessage+0x50>)
 8002e84:	2100      	movs	r1, #0
 8002e86:	54d1      	strb	r1, [r2, r3]
            break;
        }
      // HAL_Delay(10);  // Small delay before retrying
    } while (retry_count-- > 0);*/
    do {
            result = CDC_Transmit_FS((uint8_t*)message, len);
 8002e88:	89fb      	ldrh	r3, [r7, #14]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f00c ffc9 	bl	800fe24 <CDC_Transmit_FS>
 8002e92:	4603      	mov	r3, r0
 8002e94:	737b      	strb	r3, [r7, #13]
        } while (result == USBD_BUSY); // Retry while USB is busy
 8002e96:	7b7b      	ldrb	r3, [r7, #13]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d0f5      	beq.n	8002e88 <SendUSBMessage+0x30>


}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000ac0 	.word	0x20000ac0

08002eac <ParseUSBCommand>:

void ParseUSBCommand(void) {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
	 if (dataReceivedFlag) {
 8002eb0:	4ba6      	ldr	r3, [pc, #664]	@ (800314c <ParseUSBCommand+0x2a0>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 8146 	beq.w	8003148 <ParseUSBCommand+0x29c>
	        if (strncmp((char*)USB_RX_Buffer, "SET_KP", 6) == 0) {
 8002ebc:	2206      	movs	r2, #6
 8002ebe:	49a4      	ldr	r1, [pc, #656]	@ (8003150 <ParseUSBCommand+0x2a4>)
 8002ec0:	48a4      	ldr	r0, [pc, #656]	@ (8003154 <ParseUSBCommand+0x2a8>)
 8002ec2:	f00e fbc0 	bl	8011646 <strncmp>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d108      	bne.n	8002ede <ParseUSBCommand+0x32>
	            sscanf((char*)USB_RX_Buffer, "SET_KP %f", &Kp);
 8002ecc:	4aa2      	ldr	r2, [pc, #648]	@ (8003158 <ParseUSBCommand+0x2ac>)
 8002ece:	49a3      	ldr	r1, [pc, #652]	@ (800315c <ParseUSBCommand+0x2b0>)
 8002ed0:	48a0      	ldr	r0, [pc, #640]	@ (8003154 <ParseUSBCommand+0x2a8>)
 8002ed2:	f00e fb41 	bl	8011558 <siscanf>
	            SendUSBMessage("KP Updated\n");
 8002ed6:	48a2      	ldr	r0, [pc, #648]	@ (8003160 <ParseUSBCommand+0x2b4>)
 8002ed8:	f7ff ffbe 	bl	8002e58 <SendUSBMessage>
 8002edc:	e12c      	b.n	8003138 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_Ti", 6) == 0) {
 8002ede:	2206      	movs	r2, #6
 8002ee0:	49a0      	ldr	r1, [pc, #640]	@ (8003164 <ParseUSBCommand+0x2b8>)
 8002ee2:	489c      	ldr	r0, [pc, #624]	@ (8003154 <ParseUSBCommand+0x2a8>)
 8002ee4:	f00e fbaf 	bl	8011646 <strncmp>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d108      	bne.n	8002f00 <ParseUSBCommand+0x54>
	            sscanf((char*)USB_RX_Buffer, "SET_Ti %f", &Ti);
 8002eee:	4a9e      	ldr	r2, [pc, #632]	@ (8003168 <ParseUSBCommand+0x2bc>)
 8002ef0:	499e      	ldr	r1, [pc, #632]	@ (800316c <ParseUSBCommand+0x2c0>)
 8002ef2:	4898      	ldr	r0, [pc, #608]	@ (8003154 <ParseUSBCommand+0x2a8>)
 8002ef4:	f00e fb30 	bl	8011558 <siscanf>
	            SendUSBMessage("Ti Updated\n");
 8002ef8:	489d      	ldr	r0, [pc, #628]	@ (8003170 <ParseUSBCommand+0x2c4>)
 8002efa:	f7ff ffad 	bl	8002e58 <SendUSBMessage>
 8002efe:	e11b      	b.n	8003138 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_VREF", 8) == 0) {
 8002f00:	2208      	movs	r2, #8
 8002f02:	499c      	ldr	r1, [pc, #624]	@ (8003174 <ParseUSBCommand+0x2c8>)
 8002f04:	4893      	ldr	r0, [pc, #588]	@ (8003154 <ParseUSBCommand+0x2a8>)
 8002f06:	f00e fb9e 	bl	8011646 <strncmp>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d108      	bne.n	8002f22 <ParseUSBCommand+0x76>
	            sscanf((char*)USB_RX_Buffer, "SET_VREF %hu", &vref);
 8002f10:	4a99      	ldr	r2, [pc, #612]	@ (8003178 <ParseUSBCommand+0x2cc>)
 8002f12:	499a      	ldr	r1, [pc, #616]	@ (800317c <ParseUSBCommand+0x2d0>)
 8002f14:	488f      	ldr	r0, [pc, #572]	@ (8003154 <ParseUSBCommand+0x2a8>)
 8002f16:	f00e fb1f 	bl	8011558 <siscanf>
	            SendUSBMessage("vref Updated\n");
 8002f1a:	4899      	ldr	r0, [pc, #612]	@ (8003180 <ParseUSBCommand+0x2d4>)
 8002f1c:	f7ff ff9c 	bl	8002e58 <SendUSBMessage>
 8002f20:	e10a      	b.n	8003138 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS1_VREF", 12) == 0) {
 8002f22:	220c      	movs	r2, #12
 8002f24:	4997      	ldr	r1, [pc, #604]	@ (8003184 <ParseUSBCommand+0x2d8>)
 8002f26:	488b      	ldr	r0, [pc, #556]	@ (8003154 <ParseUSBCommand+0x2a8>)
 8002f28:	f00e fb8d 	bl	8011646 <strncmp>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d108      	bne.n	8002f44 <ParseUSBCommand+0x98>
	            sscanf((char*)USB_RX_Buffer, "SET_CS1_VREF %d", &current_sensor1_vref);
 8002f32:	4a95      	ldr	r2, [pc, #596]	@ (8003188 <ParseUSBCommand+0x2dc>)
 8002f34:	4995      	ldr	r1, [pc, #596]	@ (800318c <ParseUSBCommand+0x2e0>)
 8002f36:	4887      	ldr	r0, [pc, #540]	@ (8003154 <ParseUSBCommand+0x2a8>)
 8002f38:	f00e fb0e 	bl	8011558 <siscanf>
	            SendUSBMessage("current_sensor1_vref Updated\n");
 8002f3c:	4894      	ldr	r0, [pc, #592]	@ (8003190 <ParseUSBCommand+0x2e4>)
 8002f3e:	f7ff ff8b 	bl	8002e58 <SendUSBMessage>
 8002f42:	e0f9      	b.n	8003138 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS2_VREF", 12) == 0) {
 8002f44:	220c      	movs	r2, #12
 8002f46:	4993      	ldr	r1, [pc, #588]	@ (8003194 <ParseUSBCommand+0x2e8>)
 8002f48:	4882      	ldr	r0, [pc, #520]	@ (8003154 <ParseUSBCommand+0x2a8>)
 8002f4a:	f00e fb7c 	bl	8011646 <strncmp>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d108      	bne.n	8002f66 <ParseUSBCommand+0xba>
	            sscanf((char*)USB_RX_Buffer, "SET_CS2_VREF %d", &current_sensor2_vref);
 8002f54:	4a90      	ldr	r2, [pc, #576]	@ (8003198 <ParseUSBCommand+0x2ec>)
 8002f56:	4991      	ldr	r1, [pc, #580]	@ (800319c <ParseUSBCommand+0x2f0>)
 8002f58:	487e      	ldr	r0, [pc, #504]	@ (8003154 <ParseUSBCommand+0x2a8>)
 8002f5a:	f00e fafd 	bl	8011558 <siscanf>
	            SendUSBMessage("current_sensor2_vref Updated\n");
 8002f5e:	4890      	ldr	r0, [pc, #576]	@ (80031a0 <ParseUSBCommand+0x2f4>)
 8002f60:	f7ff ff7a 	bl	8002e58 <SendUSBMessage>
 8002f64:	e0e8      	b.n	8003138 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_IMAX2_SUM", 13) == 0) {
 8002f66:	220d      	movs	r2, #13
 8002f68:	498e      	ldr	r1, [pc, #568]	@ (80031a4 <ParseUSBCommand+0x2f8>)
 8002f6a:	487a      	ldr	r0, [pc, #488]	@ (8003154 <ParseUSBCommand+0x2a8>)
 8002f6c:	f00e fb6b 	bl	8011646 <strncmp>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d108      	bne.n	8002f88 <ParseUSBCommand+0xdc>
	            sscanf((char*)USB_RX_Buffer, "SET_IMAX2_SUM %d", &imax2_sum);
 8002f76:	4a8c      	ldr	r2, [pc, #560]	@ (80031a8 <ParseUSBCommand+0x2fc>)
 8002f78:	498c      	ldr	r1, [pc, #560]	@ (80031ac <ParseUSBCommand+0x300>)
 8002f7a:	4876      	ldr	r0, [pc, #472]	@ (8003154 <ParseUSBCommand+0x2a8>)
 8002f7c:	f00e faec 	bl	8011558 <siscanf>
	            SendUSBMessage("imax2_sum Updated\n");
 8002f80:	488b      	ldr	r0, [pc, #556]	@ (80031b0 <ParseUSBCommand+0x304>)
 8002f82:	f7ff ff69 	bl	8002e58 <SendUSBMessage>
 8002f86:	e0d7      	b.n	8003138 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_TR", 12) == 0) {
 8002f88:	220c      	movs	r2, #12
 8002f8a:	498a      	ldr	r1, [pc, #552]	@ (80031b4 <ParseUSBCommand+0x308>)
 8002f8c:	4871      	ldr	r0, [pc, #452]	@ (8003154 <ParseUSBCommand+0x2a8>)
 8002f8e:	f00e fb5a 	bl	8011646 <strncmp>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d108      	bne.n	8002faa <ParseUSBCommand+0xfe>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_TR %f", &delay_tr);
 8002f98:	4a87      	ldr	r2, [pc, #540]	@ (80031b8 <ParseUSBCommand+0x30c>)
 8002f9a:	4988      	ldr	r1, [pc, #544]	@ (80031bc <ParseUSBCommand+0x310>)
 8002f9c:	486d      	ldr	r0, [pc, #436]	@ (8003154 <ParseUSBCommand+0x2a8>)
 8002f9e:	f00e fadb 	bl	8011558 <siscanf>
	            SendUSBMessage("delay_tr Updated\n");
 8002fa2:	4887      	ldr	r0, [pc, #540]	@ (80031c0 <ParseUSBCommand+0x314>)
 8002fa4:	f7ff ff58 	bl	8002e58 <SendUSBMessage>
 8002fa8:	e0c6      	b.n	8003138 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_HC", 12) == 0) {
 8002faa:	220c      	movs	r2, #12
 8002fac:	4985      	ldr	r1, [pc, #532]	@ (80031c4 <ParseUSBCommand+0x318>)
 8002fae:	4869      	ldr	r0, [pc, #420]	@ (8003154 <ParseUSBCommand+0x2a8>)
 8002fb0:	f00e fb49 	bl	8011646 <strncmp>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d108      	bne.n	8002fcc <ParseUSBCommand+0x120>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_HC %f", &delay_hc);
 8002fba:	4a83      	ldr	r2, [pc, #524]	@ (80031c8 <ParseUSBCommand+0x31c>)
 8002fbc:	4983      	ldr	r1, [pc, #524]	@ (80031cc <ParseUSBCommand+0x320>)
 8002fbe:	4865      	ldr	r0, [pc, #404]	@ (8003154 <ParseUSBCommand+0x2a8>)
 8002fc0:	f00e faca 	bl	8011558 <siscanf>
	            SendUSBMessage("delay_hc Updated\n");
 8002fc4:	4882      	ldr	r0, [pc, #520]	@ (80031d0 <ParseUSBCommand+0x324>)
 8002fc6:	f7ff ff47 	bl	8002e58 <SendUSBMessage>
 8002fca:	e0b5      	b.n	8003138 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_KP", 6) == 0) {
 8002fcc:	2206      	movs	r2, #6
 8002fce:	4981      	ldr	r1, [pc, #516]	@ (80031d4 <ParseUSBCommand+0x328>)
 8002fd0:	4860      	ldr	r0, [pc, #384]	@ (8003154 <ParseUSBCommand+0x2a8>)
 8002fd2:	f00e fb38 	bl	8011646 <strncmp>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10e      	bne.n	8002ffa <ParseUSBCommand+0x14e>
	            sprintf((char*)USB_TX_Buffer, "KP = %f\n", Kp);
 8002fdc:	4b5e      	ldr	r3, [pc, #376]	@ (8003158 <ParseUSBCommand+0x2ac>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fd fad9 	bl	8000598 <__aeabi_f2d>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	497b      	ldr	r1, [pc, #492]	@ (80031d8 <ParseUSBCommand+0x32c>)
 8002fec:	487b      	ldr	r0, [pc, #492]	@ (80031dc <ParseUSBCommand+0x330>)
 8002fee:	f00e fa93 	bl	8011518 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8002ff2:	487a      	ldr	r0, [pc, #488]	@ (80031dc <ParseUSBCommand+0x330>)
 8002ff4:	f7ff ff30 	bl	8002e58 <SendUSBMessage>
 8002ff8:	e09e      	b.n	8003138 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_Ti", 6) == 0) {
 8002ffa:	2206      	movs	r2, #6
 8002ffc:	4978      	ldr	r1, [pc, #480]	@ (80031e0 <ParseUSBCommand+0x334>)
 8002ffe:	4855      	ldr	r0, [pc, #340]	@ (8003154 <ParseUSBCommand+0x2a8>)
 8003000:	f00e fb21 	bl	8011646 <strncmp>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10e      	bne.n	8003028 <ParseUSBCommand+0x17c>
	            sprintf((char*)USB_TX_Buffer, "Ti = %f\n", Ti);
 800300a:	4b57      	ldr	r3, [pc, #348]	@ (8003168 <ParseUSBCommand+0x2bc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd fac2 	bl	8000598 <__aeabi_f2d>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4972      	ldr	r1, [pc, #456]	@ (80031e4 <ParseUSBCommand+0x338>)
 800301a:	4870      	ldr	r0, [pc, #448]	@ (80031dc <ParseUSBCommand+0x330>)
 800301c:	f00e fa7c 	bl	8011518 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003020:	486e      	ldr	r0, [pc, #440]	@ (80031dc <ParseUSBCommand+0x330>)
 8003022:	f7ff ff19 	bl	8002e58 <SendUSBMessage>
 8003026:	e087      	b.n	8003138 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_VREF", 8) == 0) {
 8003028:	2208      	movs	r2, #8
 800302a:	496f      	ldr	r1, [pc, #444]	@ (80031e8 <ParseUSBCommand+0x33c>)
 800302c:	4849      	ldr	r0, [pc, #292]	@ (8003154 <ParseUSBCommand+0x2a8>)
 800302e:	f00e fb0a 	bl	8011646 <strncmp>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10a      	bne.n	800304e <ParseUSBCommand+0x1a2>
	            sprintf((char*)USB_TX_Buffer, "vref = %hu\n", vref);
 8003038:	4b4f      	ldr	r3, [pc, #316]	@ (8003178 <ParseUSBCommand+0x2cc>)
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	496b      	ldr	r1, [pc, #428]	@ (80031ec <ParseUSBCommand+0x340>)
 8003040:	4866      	ldr	r0, [pc, #408]	@ (80031dc <ParseUSBCommand+0x330>)
 8003042:	f00e fa69 	bl	8011518 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003046:	4865      	ldr	r0, [pc, #404]	@ (80031dc <ParseUSBCommand+0x330>)
 8003048:	f7ff ff06 	bl	8002e58 <SendUSBMessage>
 800304c:	e074      	b.n	8003138 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS1_VREF", 12) == 0) {
 800304e:	220c      	movs	r2, #12
 8003050:	4967      	ldr	r1, [pc, #412]	@ (80031f0 <ParseUSBCommand+0x344>)
 8003052:	4840      	ldr	r0, [pc, #256]	@ (8003154 <ParseUSBCommand+0x2a8>)
 8003054:	f00e faf7 	bl	8011646 <strncmp>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10a      	bne.n	8003074 <ParseUSBCommand+0x1c8>
	            sprintf((char*)USB_TX_Buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 800305e:	4b4a      	ldr	r3, [pc, #296]	@ (8003188 <ParseUSBCommand+0x2dc>)
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	4963      	ldr	r1, [pc, #396]	@ (80031f4 <ParseUSBCommand+0x348>)
 8003066:	485d      	ldr	r0, [pc, #372]	@ (80031dc <ParseUSBCommand+0x330>)
 8003068:	f00e fa56 	bl	8011518 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800306c:	485b      	ldr	r0, [pc, #364]	@ (80031dc <ParseUSBCommand+0x330>)
 800306e:	f7ff fef3 	bl	8002e58 <SendUSBMessage>
 8003072:	e061      	b.n	8003138 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS2_VREF", 12) == 0) {
 8003074:	220c      	movs	r2, #12
 8003076:	4960      	ldr	r1, [pc, #384]	@ (80031f8 <ParseUSBCommand+0x34c>)
 8003078:	4836      	ldr	r0, [pc, #216]	@ (8003154 <ParseUSBCommand+0x2a8>)
 800307a:	f00e fae4 	bl	8011646 <strncmp>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <ParseUSBCommand+0x1ee>
	            sprintf((char*)USB_TX_Buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 8003084:	4b44      	ldr	r3, [pc, #272]	@ (8003198 <ParseUSBCommand+0x2ec>)
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	495c      	ldr	r1, [pc, #368]	@ (80031fc <ParseUSBCommand+0x350>)
 800308c:	4853      	ldr	r0, [pc, #332]	@ (80031dc <ParseUSBCommand+0x330>)
 800308e:	f00e fa43 	bl	8011518 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003092:	4852      	ldr	r0, [pc, #328]	@ (80031dc <ParseUSBCommand+0x330>)
 8003094:	f7ff fee0 	bl	8002e58 <SendUSBMessage>
 8003098:	e04e      	b.n	8003138 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_IMAX2_SUM", 13) == 0) {
 800309a:	220d      	movs	r2, #13
 800309c:	4958      	ldr	r1, [pc, #352]	@ (8003200 <ParseUSBCommand+0x354>)
 800309e:	482d      	ldr	r0, [pc, #180]	@ (8003154 <ParseUSBCommand+0x2a8>)
 80030a0:	f00e fad1 	bl	8011646 <strncmp>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10a      	bne.n	80030c0 <ParseUSBCommand+0x214>
	            sprintf((char*)USB_TX_Buffer, "imax2_sum = %f\n", imax2_sum);
 80030aa:	4b3f      	ldr	r3, [pc, #252]	@ (80031a8 <ParseUSBCommand+0x2fc>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	4954      	ldr	r1, [pc, #336]	@ (8003204 <ParseUSBCommand+0x358>)
 80030b2:	484a      	ldr	r0, [pc, #296]	@ (80031dc <ParseUSBCommand+0x330>)
 80030b4:	f00e fa30 	bl	8011518 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80030b8:	4848      	ldr	r0, [pc, #288]	@ (80031dc <ParseUSBCommand+0x330>)
 80030ba:	f7ff fecd 	bl	8002e58 <SendUSBMessage>
 80030be:	e03b      	b.n	8003138 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_TR", 12) == 0) {
 80030c0:	220c      	movs	r2, #12
 80030c2:	4951      	ldr	r1, [pc, #324]	@ (8003208 <ParseUSBCommand+0x35c>)
 80030c4:	4823      	ldr	r0, [pc, #140]	@ (8003154 <ParseUSBCommand+0x2a8>)
 80030c6:	f00e fabe 	bl	8011646 <strncmp>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10e      	bne.n	80030ee <ParseUSBCommand+0x242>
	            sprintf((char*)USB_TX_Buffer, "delay_tr = %f\n", delay_tr);
 80030d0:	4b39      	ldr	r3, [pc, #228]	@ (80031b8 <ParseUSBCommand+0x30c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fd fa5f 	bl	8000598 <__aeabi_f2d>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	494b      	ldr	r1, [pc, #300]	@ (800320c <ParseUSBCommand+0x360>)
 80030e0:	483e      	ldr	r0, [pc, #248]	@ (80031dc <ParseUSBCommand+0x330>)
 80030e2:	f00e fa19 	bl	8011518 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80030e6:	483d      	ldr	r0, [pc, #244]	@ (80031dc <ParseUSBCommand+0x330>)
 80030e8:	f7ff feb6 	bl	8002e58 <SendUSBMessage>
 80030ec:	e024      	b.n	8003138 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_HC", 12) == 0) {
 80030ee:	220c      	movs	r2, #12
 80030f0:	4947      	ldr	r1, [pc, #284]	@ (8003210 <ParseUSBCommand+0x364>)
 80030f2:	4818      	ldr	r0, [pc, #96]	@ (8003154 <ParseUSBCommand+0x2a8>)
 80030f4:	f00e faa7 	bl	8011646 <strncmp>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10e      	bne.n	800311c <ParseUSBCommand+0x270>
	            sprintf((char*)USB_TX_Buffer, "delay_hc = %f\n", delay_hc);
 80030fe:	4b32      	ldr	r3, [pc, #200]	@ (80031c8 <ParseUSBCommand+0x31c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd fa48 	bl	8000598 <__aeabi_f2d>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4941      	ldr	r1, [pc, #260]	@ (8003214 <ParseUSBCommand+0x368>)
 800310e:	4833      	ldr	r0, [pc, #204]	@ (80031dc <ParseUSBCommand+0x330>)
 8003110:	f00e fa02 	bl	8011518 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003114:	4831      	ldr	r0, [pc, #196]	@ (80031dc <ParseUSBCommand+0x330>)
 8003116:	f7ff fe9f 	bl	8002e58 <SendUSBMessage>
 800311a:	e00d      	b.n	8003138 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "DISPLAY_ALL", 11) == 0) {
 800311c:	220b      	movs	r2, #11
 800311e:	493e      	ldr	r1, [pc, #248]	@ (8003218 <ParseUSBCommand+0x36c>)
 8003120:	480c      	ldr	r0, [pc, #48]	@ (8003154 <ParseUSBCommand+0x2a8>)
 8003122:	f00e fa90 	bl	8011646 <strncmp>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d102      	bne.n	8003132 <ParseUSBCommand+0x286>
	            DisplayAllVariables();
 800312c:	f000 f878 	bl	8003220 <DisplayAllVariables>
 8003130:	e002      	b.n	8003138 <ParseUSBCommand+0x28c>

	        } else {
	            SendUSBMessage("Unknown Command\n");
 8003132:	483a      	ldr	r0, [pc, #232]	@ (800321c <ParseUSBCommand+0x370>)
 8003134:	f7ff fe90 	bl	8002e58 <SendUSBMessage>
	        }
	        memset(USB_RX_Buffer, 0, sizeof(USB_RX_Buffer));  // Clear buffer
 8003138:	2240      	movs	r2, #64	@ 0x40
 800313a:	2100      	movs	r1, #0
 800313c:	4805      	ldr	r0, [pc, #20]	@ (8003154 <ParseUSBCommand+0x2a8>)
 800313e:	f00e fa7a 	bl	8011636 <memset>
	        dataReceivedFlag = 0;
 8003142:	4b02      	ldr	r3, [pc, #8]	@ (800314c <ParseUSBCommand+0x2a0>)
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
	    }
}
 8003148:	bf00      	nop
 800314a:	bd80      	pop	{r7, pc}
 800314c:	20000b40 	.word	0x20000b40
 8003150:	08016a38 	.word	0x08016a38
 8003154:	20000a80 	.word	0x20000a80
 8003158:	20000008 	.word	0x20000008
 800315c:	08016a40 	.word	0x08016a40
 8003160:	08016a4c 	.word	0x08016a4c
 8003164:	08016a58 	.word	0x08016a58
 8003168:	2000000c 	.word	0x2000000c
 800316c:	08016a60 	.word	0x08016a60
 8003170:	08016a6c 	.word	0x08016a6c
 8003174:	08016a78 	.word	0x08016a78
 8003178:	20000000 	.word	0x20000000
 800317c:	08016a84 	.word	0x08016a84
 8003180:	08016a94 	.word	0x08016a94
 8003184:	08016aa4 	.word	0x08016aa4
 8003188:	20000a24 	.word	0x20000a24
 800318c:	08016ab4 	.word	0x08016ab4
 8003190:	08016ac4 	.word	0x08016ac4
 8003194:	08016ae4 	.word	0x08016ae4
 8003198:	20000a26 	.word	0x20000a26
 800319c:	08016af4 	.word	0x08016af4
 80031a0:	08016b04 	.word	0x08016b04
 80031a4:	08016b24 	.word	0x08016b24
 80031a8:	20000a64 	.word	0x20000a64
 80031ac:	08016b34 	.word	0x08016b34
 80031b0:	08016b48 	.word	0x08016b48
 80031b4:	08016b5c 	.word	0x08016b5c
 80031b8:	20000a5c 	.word	0x20000a5c
 80031bc:	08016b6c 	.word	0x08016b6c
 80031c0:	08016b7c 	.word	0x08016b7c
 80031c4:	08016b90 	.word	0x08016b90
 80031c8:	20000a60 	.word	0x20000a60
 80031cc:	08016ba0 	.word	0x08016ba0
 80031d0:	08016bb0 	.word	0x08016bb0
 80031d4:	08016bc4 	.word	0x08016bc4
 80031d8:	08016bcc 	.word	0x08016bcc
 80031dc:	20000ac0 	.word	0x20000ac0
 80031e0:	08016bd8 	.word	0x08016bd8
 80031e4:	08016be0 	.word	0x08016be0
 80031e8:	08016bec 	.word	0x08016bec
 80031ec:	08016bf8 	.word	0x08016bf8
 80031f0:	08016c04 	.word	0x08016c04
 80031f4:	08016c14 	.word	0x08016c14
 80031f8:	08016c30 	.word	0x08016c30
 80031fc:	08016c40 	.word	0x08016c40
 8003200:	08016c5c 	.word	0x08016c5c
 8003204:	08016c6c 	.word	0x08016c6c
 8003208:	08016c7c 	.word	0x08016c7c
 800320c:	08016c8c 	.word	0x08016c8c
 8003210:	08016c9c 	.word	0x08016c9c
 8003214:	08016cac 	.word	0x08016cac
 8003218:	08016cbc 	.word	0x08016cbc
 800321c:	08016cc8 	.word	0x08016cc8

08003220 <DisplayAllVariables>:

void DisplayAllVariables(void) {
 8003220:	b580      	push	{r7, lr}
 8003222:	b0a0      	sub	sp, #128	@ 0x80
 8003224:	af00      	add	r7, sp, #0
    char buffer[128];

    sprintf(buffer, "KP = %f\n", Kp);
 8003226:	4b5e      	ldr	r3, [pc, #376]	@ (80033a0 <DisplayAllVariables+0x180>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd f9b4 	bl	8000598 <__aeabi_f2d>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4638      	mov	r0, r7
 8003236:	495b      	ldr	r1, [pc, #364]	@ (80033a4 <DisplayAllVariables+0x184>)
 8003238:	f00e f96e 	bl	8011518 <siprintf>
        SendUSBMessage(buffer);
 800323c:	463b      	mov	r3, r7
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fe0a 	bl	8002e58 <SendUSBMessage>

        sprintf(buffer, "Ti = %f\n", Ti);
 8003244:	4b58      	ldr	r3, [pc, #352]	@ (80033a8 <DisplayAllVariables+0x188>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd f9a5 	bl	8000598 <__aeabi_f2d>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4638      	mov	r0, r7
 8003254:	4955      	ldr	r1, [pc, #340]	@ (80033ac <DisplayAllVariables+0x18c>)
 8003256:	f00e f95f 	bl	8011518 <siprintf>
        SendUSBMessage(buffer);
 800325a:	463b      	mov	r3, r7
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fdfb 	bl	8002e58 <SendUSBMessage>

        sprintf(buffer, "vref = %hu\n", vref);
 8003262:	4b53      	ldr	r3, [pc, #332]	@ (80033b0 <DisplayAllVariables+0x190>)
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	463b      	mov	r3, r7
 800326a:	4952      	ldr	r1, [pc, #328]	@ (80033b4 <DisplayAllVariables+0x194>)
 800326c:	4618      	mov	r0, r3
 800326e:	f00e f953 	bl	8011518 <siprintf>
        SendUSBMessage(buffer);
 8003272:	463b      	mov	r3, r7
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fdef 	bl	8002e58 <SendUSBMessage>

        sprintf(buffer, "imax1 = %f\n", imax1);
 800327a:	4b4f      	ldr	r3, [pc, #316]	@ (80033b8 <DisplayAllVariables+0x198>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	463b      	mov	r3, r7
 8003280:	494e      	ldr	r1, [pc, #312]	@ (80033bc <DisplayAllVariables+0x19c>)
 8003282:	4618      	mov	r0, r3
 8003284:	f00e f948 	bl	8011518 <siprintf>
        SendUSBMessage(buffer);
 8003288:	463b      	mov	r3, r7
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fde4 	bl	8002e58 <SendUSBMessage>

        sprintf(buffer, "imax2 = %f\n", imax2);
 8003290:	4b4b      	ldr	r3, [pc, #300]	@ (80033c0 <DisplayAllVariables+0x1a0>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	463b      	mov	r3, r7
 8003296:	494b      	ldr	r1, [pc, #300]	@ (80033c4 <DisplayAllVariables+0x1a4>)
 8003298:	4618      	mov	r0, r3
 800329a:	f00e f93d 	bl	8011518 <siprintf>
        SendUSBMessage(buffer);
 800329e:	463b      	mov	r3, r7
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fdd9 	bl	8002e58 <SendUSBMessage>

        sprintf(buffer, "imin = %f\n", imin);
 80032a6:	4b48      	ldr	r3, [pc, #288]	@ (80033c8 <DisplayAllVariables+0x1a8>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	463b      	mov	r3, r7
 80032ac:	4947      	ldr	r1, [pc, #284]	@ (80033cc <DisplayAllVariables+0x1ac>)
 80032ae:	4618      	mov	r0, r3
 80032b0:	f00e f932 	bl	8011518 <siprintf>
        SendUSBMessage(buffer);
 80032b4:	463b      	mov	r3, r7
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fdce 	bl	8002e58 <SendUSBMessage>

        sprintf(buffer, "input_voltage = %f\n", input_voltage);
 80032bc:	4b44      	ldr	r3, [pc, #272]	@ (80033d0 <DisplayAllVariables+0x1b0>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	463b      	mov	r3, r7
 80032c2:	4944      	ldr	r1, [pc, #272]	@ (80033d4 <DisplayAllVariables+0x1b4>)
 80032c4:	4618      	mov	r0, r3
 80032c6:	f00e f927 	bl	8011518 <siprintf>
        SendUSBMessage(buffer);
 80032ca:	463b      	mov	r3, r7
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fdc3 	bl	8002e58 <SendUSBMessage>

        sprintf(buffer, "output_voltage = %f\n", output_voltage);
 80032d2:	4b41      	ldr	r3, [pc, #260]	@ (80033d8 <DisplayAllVariables+0x1b8>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	463b      	mov	r3, r7
 80032d8:	4940      	ldr	r1, [pc, #256]	@ (80033dc <DisplayAllVariables+0x1bc>)
 80032da:	4618      	mov	r0, r3
 80032dc:	f00e f91c 	bl	8011518 <siprintf>
        SendUSBMessage(buffer);
 80032e0:	463b      	mov	r3, r7
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff fdb8 	bl	8002e58 <SendUSBMessage>

        sprintf(buffer, "pcb_temp = %f\n", pcb_temp);
 80032e8:	4b3d      	ldr	r3, [pc, #244]	@ (80033e0 <DisplayAllVariables+0x1c0>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	463b      	mov	r3, r7
 80032ee:	493d      	ldr	r1, [pc, #244]	@ (80033e4 <DisplayAllVariables+0x1c4>)
 80032f0:	4618      	mov	r0, r3
 80032f2:	f00e f911 	bl	8011518 <siprintf>
        SendUSBMessage(buffer);
 80032f6:	463b      	mov	r3, r7
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff fdad 	bl	8002e58 <SendUSBMessage>

        sprintf(buffer, "heat_sink_temp = %f\n", heat_sink_temp);
 80032fe:	4b3a      	ldr	r3, [pc, #232]	@ (80033e8 <DisplayAllVariables+0x1c8>)
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	463b      	mov	r3, r7
 8003304:	4939      	ldr	r1, [pc, #228]	@ (80033ec <DisplayAllVariables+0x1cc>)
 8003306:	4618      	mov	r0, r3
 8003308:	f00e f906 	bl	8011518 <siprintf>
        SendUSBMessage(buffer);
 800330c:	463b      	mov	r3, r7
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff fda2 	bl	8002e58 <SendUSBMessage>

        sprintf(buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 8003314:	4b36      	ldr	r3, [pc, #216]	@ (80033f0 <DisplayAllVariables+0x1d0>)
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	463b      	mov	r3, r7
 800331c:	4935      	ldr	r1, [pc, #212]	@ (80033f4 <DisplayAllVariables+0x1d4>)
 800331e:	4618      	mov	r0, r3
 8003320:	f00e f8fa 	bl	8011518 <siprintf>
        SendUSBMessage(buffer);
 8003324:	463b      	mov	r3, r7
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fd96 	bl	8002e58 <SendUSBMessage>

        sprintf(buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 800332c:	4b32      	ldr	r3, [pc, #200]	@ (80033f8 <DisplayAllVariables+0x1d8>)
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	463b      	mov	r3, r7
 8003334:	4931      	ldr	r1, [pc, #196]	@ (80033fc <DisplayAllVariables+0x1dc>)
 8003336:	4618      	mov	r0, r3
 8003338:	f00e f8ee 	bl	8011518 <siprintf>
        SendUSBMessage(buffer);
 800333c:	463b      	mov	r3, r7
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff fd8a 	bl	8002e58 <SendUSBMessage>

        sprintf(buffer, "imax2_sum = %f\n", imax2_sum);
 8003344:	4b2e      	ldr	r3, [pc, #184]	@ (8003400 <DisplayAllVariables+0x1e0>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	463b      	mov	r3, r7
 800334a:	492e      	ldr	r1, [pc, #184]	@ (8003404 <DisplayAllVariables+0x1e4>)
 800334c:	4618      	mov	r0, r3
 800334e:	f00e f8e3 	bl	8011518 <siprintf>
        SendUSBMessage(buffer);
 8003352:	463b      	mov	r3, r7
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff fd7f 	bl	8002e58 <SendUSBMessage>

        sprintf(buffer, "delay_tr = %f\n", delay_tr);
 800335a:	4b2b      	ldr	r3, [pc, #172]	@ (8003408 <DisplayAllVariables+0x1e8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fd f91a 	bl	8000598 <__aeabi_f2d>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4638      	mov	r0, r7
 800336a:	4928      	ldr	r1, [pc, #160]	@ (800340c <DisplayAllVariables+0x1ec>)
 800336c:	f00e f8d4 	bl	8011518 <siprintf>
        SendUSBMessage(buffer);
 8003370:	463b      	mov	r3, r7
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fd70 	bl	8002e58 <SendUSBMessage>

        sprintf(buffer, "delay_hc = %f\n", delay_hc);
 8003378:	4b25      	ldr	r3, [pc, #148]	@ (8003410 <DisplayAllVariables+0x1f0>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7fd f90b 	bl	8000598 <__aeabi_f2d>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	4638      	mov	r0, r7
 8003388:	4922      	ldr	r1, [pc, #136]	@ (8003414 <DisplayAllVariables+0x1f4>)
 800338a:	f00e f8c5 	bl	8011518 <siprintf>
        SendUSBMessage(buffer);
 800338e:	463b      	mov	r3, r7
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fd61 	bl	8002e58 <SendUSBMessage>
}
 8003396:	bf00      	nop
 8003398:	3780      	adds	r7, #128	@ 0x80
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000008 	.word	0x20000008
 80033a4:	08016bcc 	.word	0x08016bcc
 80033a8:	2000000c 	.word	0x2000000c
 80033ac:	08016be0 	.word	0x08016be0
 80033b0:	20000000 	.word	0x20000000
 80033b4:	08016bf8 	.word	0x08016bf8
 80033b8:	20000a28 	.word	0x20000a28
 80033bc:	08016cdc 	.word	0x08016cdc
 80033c0:	20000a2c 	.word	0x20000a2c
 80033c4:	08016ce8 	.word	0x08016ce8
 80033c8:	20000a30 	.word	0x20000a30
 80033cc:	08016cf4 	.word	0x08016cf4
 80033d0:	20000a34 	.word	0x20000a34
 80033d4:	08016d00 	.word	0x08016d00
 80033d8:	20000a4c 	.word	0x20000a4c
 80033dc:	08016d14 	.word	0x08016d14
 80033e0:	20000a38 	.word	0x20000a38
 80033e4:	08016d2c 	.word	0x08016d2c
 80033e8:	20000a3c 	.word	0x20000a3c
 80033ec:	08016d3c 	.word	0x08016d3c
 80033f0:	20000a24 	.word	0x20000a24
 80033f4:	08016c14 	.word	0x08016c14
 80033f8:	20000a26 	.word	0x20000a26
 80033fc:	08016c40 	.word	0x08016c40
 8003400:	20000a64 	.word	0x20000a64
 8003404:	08016c6c 	.word	0x08016c6c
 8003408:	20000a5c 	.word	0x20000a5c
 800340c:	08016c8c 	.word	0x08016c8c
 8003410:	20000a60 	.word	0x20000a60
 8003414:	08016cac 	.word	0x08016cac

08003418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800341c:	b672      	cpsid	i
}
 800341e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003420:	bf00      	nop
 8003422:	e7fd      	b.n	8003420 <Error_Handler+0x8>

08003424 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342a:	4b0f      	ldr	r3, [pc, #60]	@ (8003468 <HAL_MspInit+0x44>)
 800342c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800342e:	4a0e      	ldr	r2, [pc, #56]	@ (8003468 <HAL_MspInit+0x44>)
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	6613      	str	r3, [r2, #96]	@ 0x60
 8003436:	4b0c      	ldr	r3, [pc, #48]	@ (8003468 <HAL_MspInit+0x44>)
 8003438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	607b      	str	r3, [r7, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003442:	4b09      	ldr	r3, [pc, #36]	@ (8003468 <HAL_MspInit+0x44>)
 8003444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003446:	4a08      	ldr	r2, [pc, #32]	@ (8003468 <HAL_MspInit+0x44>)
 8003448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800344c:	6593      	str	r3, [r2, #88]	@ 0x58
 800344e:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <HAL_MspInit+0x44>)
 8003450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800345a:	f005 f9cd 	bl	80087f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000

0800346c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b0a4      	sub	sp, #144	@ 0x90
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003484:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003488:	2254      	movs	r2, #84	@ 0x54
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f00e f8d2 	bl	8011636 <memset>
  if(hadc->Instance==ADC1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800349a:	d11c      	bne.n	80034d6 <HAL_ADC_MspInit+0x6a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800349c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80034a2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80034a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80034ac:	4618      	mov	r0, r3
 80034ae:	f005 fee1 	bl	8009274 <HAL_RCCEx_PeriphCLKConfig>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80034b8:	f7ff ffae 	bl	8003418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80034bc:	4b85      	ldr	r3, [pc, #532]	@ (80036d4 <HAL_ADC_MspInit+0x268>)
 80034be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c0:	4a84      	ldr	r2, [pc, #528]	@ (80036d4 <HAL_ADC_MspInit+0x268>)
 80034c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80034c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034c8:	4b82      	ldr	r3, [pc, #520]	@ (80036d4 <HAL_ADC_MspInit+0x268>)
 80034ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80034d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 80034d4:	e183      	b.n	80037de <HAL_ADC_MspInit+0x372>
  else if(hadc->Instance==ADC3)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a7f      	ldr	r2, [pc, #508]	@ (80036d8 <HAL_ADC_MspInit+0x26c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	f040 8087 	bne.w	80035f0 <HAL_ADC_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80034e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80034e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80034e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80034ec:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80034f2:	4618      	mov	r0, r3
 80034f4:	f005 febe 	bl	8009274 <HAL_RCCEx_PeriphCLKConfig>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <HAL_ADC_MspInit+0x96>
      Error_Handler();
 80034fe:	f7ff ff8b 	bl	8003418 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003502:	4b76      	ldr	r3, [pc, #472]	@ (80036dc <HAL_ADC_MspInit+0x270>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3301      	adds	r3, #1
 8003508:	4a74      	ldr	r2, [pc, #464]	@ (80036dc <HAL_ADC_MspInit+0x270>)
 800350a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800350c:	4b73      	ldr	r3, [pc, #460]	@ (80036dc <HAL_ADC_MspInit+0x270>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d10b      	bne.n	800352c <HAL_ADC_MspInit+0xc0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003514:	4b6f      	ldr	r3, [pc, #444]	@ (80036d4 <HAL_ADC_MspInit+0x268>)
 8003516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003518:	4a6e      	ldr	r2, [pc, #440]	@ (80036d4 <HAL_ADC_MspInit+0x268>)
 800351a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800351e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003520:	4b6c      	ldr	r3, [pc, #432]	@ (80036d4 <HAL_ADC_MspInit+0x268>)
 8003522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003528:	623b      	str	r3, [r7, #32]
 800352a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800352c:	4b69      	ldr	r3, [pc, #420]	@ (80036d4 <HAL_ADC_MspInit+0x268>)
 800352e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003530:	4a68      	ldr	r2, [pc, #416]	@ (80036d4 <HAL_ADC_MspInit+0x268>)
 8003532:	f043 0302 	orr.w	r3, r3, #2
 8003536:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003538:	4b66      	ldr	r3, [pc, #408]	@ (80036d4 <HAL_ADC_MspInit+0x268>)
 800353a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003544:	4b63      	ldr	r3, [pc, #396]	@ (80036d4 <HAL_ADC_MspInit+0x268>)
 8003546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003548:	4a62      	ldr	r2, [pc, #392]	@ (80036d4 <HAL_ADC_MspInit+0x268>)
 800354a:	f043 0310 	orr.w	r3, r3, #16
 800354e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003550:	4b60      	ldr	r3, [pc, #384]	@ (80036d4 <HAL_ADC_MspInit+0x268>)
 8003552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	61bb      	str	r3, [r7, #24]
 800355a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = CS_VREF_1_Pin|HEATSINK_TEMP_Pin;
 800355c:	f242 0302 	movw	r3, #8194	@ 0x2002
 8003560:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003562:	2303      	movs	r3, #3
 8003564:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	2300      	movs	r3, #0
 800356a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800356e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003572:	4619      	mov	r1, r3
 8003574:	485a      	ldr	r0, [pc, #360]	@ (80036e0 <HAL_ADC_MspInit+0x274>)
 8003576:	f003 f999 	bl	80068ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PCB_TEMP_Pin|CS_VREF_2_Pin|INPUT_V_ADC_Pin;
 800357a:	f44f 530a 	mov.w	r3, #8832	@ 0x2280
 800357e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003580:	2303      	movs	r3, #3
 8003582:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003586:	2300      	movs	r3, #0
 8003588:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800358c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003590:	4619      	mov	r1, r3
 8003592:	4854      	ldr	r0, [pc, #336]	@ (80036e4 <HAL_ADC_MspInit+0x278>)
 8003594:	f003 f98a 	bl	80068ac <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel1;
 8003598:	4b53      	ldr	r3, [pc, #332]	@ (80036e8 <HAL_ADC_MspInit+0x27c>)
 800359a:	4a54      	ldr	r2, [pc, #336]	@ (80036ec <HAL_ADC_MspInit+0x280>)
 800359c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800359e:	4b52      	ldr	r3, [pc, #328]	@ (80036e8 <HAL_ADC_MspInit+0x27c>)
 80035a0:	2225      	movs	r2, #37	@ 0x25
 80035a2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035a4:	4b50      	ldr	r3, [pc, #320]	@ (80036e8 <HAL_ADC_MspInit+0x27c>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80035aa:	4b4f      	ldr	r3, [pc, #316]	@ (80036e8 <HAL_ADC_MspInit+0x27c>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80035b0:	4b4d      	ldr	r3, [pc, #308]	@ (80036e8 <HAL_ADC_MspInit+0x27c>)
 80035b2:	2280      	movs	r2, #128	@ 0x80
 80035b4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035b6:	4b4c      	ldr	r3, [pc, #304]	@ (80036e8 <HAL_ADC_MspInit+0x27c>)
 80035b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035bc:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035be:	4b4a      	ldr	r3, [pc, #296]	@ (80036e8 <HAL_ADC_MspInit+0x27c>)
 80035c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035c4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80035c6:	4b48      	ldr	r3, [pc, #288]	@ (80036e8 <HAL_ADC_MspInit+0x27c>)
 80035c8:	2220      	movs	r2, #32
 80035ca:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80035cc:	4b46      	ldr	r3, [pc, #280]	@ (80036e8 <HAL_ADC_MspInit+0x27c>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80035d2:	4845      	ldr	r0, [pc, #276]	@ (80036e8 <HAL_ADC_MspInit+0x27c>)
 80035d4:	f002 fef8 	bl	80063c8 <HAL_DMA_Init>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_ADC_MspInit+0x176>
      Error_Handler();
 80035de:	f7ff ff1b 	bl	8003418 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a40      	ldr	r2, [pc, #256]	@ (80036e8 <HAL_ADC_MspInit+0x27c>)
 80035e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80035e8:	4a3f      	ldr	r2, [pc, #252]	@ (80036e8 <HAL_ADC_MspInit+0x27c>)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80035ee:	e0f6      	b.n	80037de <HAL_ADC_MspInit+0x372>
  else if(hadc->Instance==ADC4)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a3e      	ldr	r2, [pc, #248]	@ (80036f0 <HAL_ADC_MspInit+0x284>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	f040 8080 	bne.w	80036fc <HAL_ADC_MspInit+0x290>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80035fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003600:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003602:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003606:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003608:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800360c:	4618      	mov	r0, r3
 800360e:	f005 fe31 	bl	8009274 <HAL_RCCEx_PeriphCLKConfig>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_ADC_MspInit+0x1b0>
      Error_Handler();
 8003618:	f7ff fefe 	bl	8003418 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800361c:	4b2f      	ldr	r3, [pc, #188]	@ (80036dc <HAL_ADC_MspInit+0x270>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	4a2e      	ldr	r2, [pc, #184]	@ (80036dc <HAL_ADC_MspInit+0x270>)
 8003624:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003626:	4b2d      	ldr	r3, [pc, #180]	@ (80036dc <HAL_ADC_MspInit+0x270>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d10b      	bne.n	8003646 <HAL_ADC_MspInit+0x1da>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800362e:	4b29      	ldr	r3, [pc, #164]	@ (80036d4 <HAL_ADC_MspInit+0x268>)
 8003630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003632:	4a28      	ldr	r2, [pc, #160]	@ (80036d4 <HAL_ADC_MspInit+0x268>)
 8003634:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003638:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800363a:	4b26      	ldr	r3, [pc, #152]	@ (80036d4 <HAL_ADC_MspInit+0x268>)
 800363c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003646:	4b23      	ldr	r3, [pc, #140]	@ (80036d4 <HAL_ADC_MspInit+0x268>)
 8003648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800364a:	4a22      	ldr	r2, [pc, #136]	@ (80036d4 <HAL_ADC_MspInit+0x268>)
 800364c:	f043 0310 	orr.w	r3, r3, #16
 8003650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003652:	4b20      	ldr	r3, [pc, #128]	@ (80036d4 <HAL_ADC_MspInit+0x268>)
 8003654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003656:	f003 0310 	and.w	r3, r3, #16
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT_V_ADC_Pin;
 800365e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003662:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003664:	2303      	movs	r3, #3
 8003666:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	2300      	movs	r3, #0
 800366c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(OUTPUT_V_ADC_GPIO_Port, &GPIO_InitStruct);
 8003670:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003674:	4619      	mov	r1, r3
 8003676:	481b      	ldr	r0, [pc, #108]	@ (80036e4 <HAL_ADC_MspInit+0x278>)
 8003678:	f003 f918 	bl	80068ac <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel2;
 800367c:	4b1d      	ldr	r3, [pc, #116]	@ (80036f4 <HAL_ADC_MspInit+0x288>)
 800367e:	4a1e      	ldr	r2, [pc, #120]	@ (80036f8 <HAL_ADC_MspInit+0x28c>)
 8003680:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8003682:	4b1c      	ldr	r3, [pc, #112]	@ (80036f4 <HAL_ADC_MspInit+0x288>)
 8003684:	2226      	movs	r2, #38	@ 0x26
 8003686:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003688:	4b1a      	ldr	r3, [pc, #104]	@ (80036f4 <HAL_ADC_MspInit+0x288>)
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 800368e:	4b19      	ldr	r3, [pc, #100]	@ (80036f4 <HAL_ADC_MspInit+0x288>)
 8003690:	2200      	movs	r2, #0
 8003692:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8003694:	4b17      	ldr	r3, [pc, #92]	@ (80036f4 <HAL_ADC_MspInit+0x288>)
 8003696:	2280      	movs	r2, #128	@ 0x80
 8003698:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800369a:	4b16      	ldr	r3, [pc, #88]	@ (80036f4 <HAL_ADC_MspInit+0x288>)
 800369c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036a0:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036a2:	4b14      	ldr	r3, [pc, #80]	@ (80036f4 <HAL_ADC_MspInit+0x288>)
 80036a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036a8:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80036aa:	4b12      	ldr	r3, [pc, #72]	@ (80036f4 <HAL_ADC_MspInit+0x288>)
 80036ac:	2220      	movs	r2, #32
 80036ae:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80036b0:	4b10      	ldr	r3, [pc, #64]	@ (80036f4 <HAL_ADC_MspInit+0x288>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80036b6:	480f      	ldr	r0, [pc, #60]	@ (80036f4 <HAL_ADC_MspInit+0x288>)
 80036b8:	f002 fe86 	bl	80063c8 <HAL_DMA_Init>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_ADC_MspInit+0x25a>
      Error_Handler();
 80036c2:	f7ff fea9 	bl	8003418 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a0a      	ldr	r2, [pc, #40]	@ (80036f4 <HAL_ADC_MspInit+0x288>)
 80036ca:	655a      	str	r2, [r3, #84]	@ 0x54
 80036cc:	4a09      	ldr	r2, [pc, #36]	@ (80036f4 <HAL_ADC_MspInit+0x288>)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80036d2:	e084      	b.n	80037de <HAL_ADC_MspInit+0x372>
 80036d4:	40021000 	.word	0x40021000
 80036d8:	50000400 	.word	0x50000400
 80036dc:	20000b58 	.word	0x20000b58
 80036e0:	48000400 	.word	0x48000400
 80036e4:	48001000 	.word	0x48001000
 80036e8:	2000054c 	.word	0x2000054c
 80036ec:	40020008 	.word	0x40020008
 80036f0:	50000500 	.word	0x50000500
 80036f4:	200005ac 	.word	0x200005ac
 80036f8:	4002001c 	.word	0x4002001c
  else if(hadc->Instance==ADC5)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a39      	ldr	r2, [pc, #228]	@ (80037e8 <HAL_ADC_MspInit+0x37c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d16b      	bne.n	80037de <HAL_ADC_MspInit+0x372>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003706:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800370a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 800370c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003710:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003712:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003716:	4618      	mov	r0, r3
 8003718:	f005 fdac 	bl	8009274 <HAL_RCCEx_PeriphCLKConfig>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_ADC_MspInit+0x2ba>
      Error_Handler();
 8003722:	f7ff fe79 	bl	8003418 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003726:	4b31      	ldr	r3, [pc, #196]	@ (80037ec <HAL_ADC_MspInit+0x380>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3301      	adds	r3, #1
 800372c:	4a2f      	ldr	r2, [pc, #188]	@ (80037ec <HAL_ADC_MspInit+0x380>)
 800372e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003730:	4b2e      	ldr	r3, [pc, #184]	@ (80037ec <HAL_ADC_MspInit+0x380>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d10b      	bne.n	8003750 <HAL_ADC_MspInit+0x2e4>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003738:	4b2d      	ldr	r3, [pc, #180]	@ (80037f0 <HAL_ADC_MspInit+0x384>)
 800373a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373c:	4a2c      	ldr	r2, [pc, #176]	@ (80037f0 <HAL_ADC_MspInit+0x384>)
 800373e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003742:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003744:	4b2a      	ldr	r3, [pc, #168]	@ (80037f0 <HAL_ADC_MspInit+0x384>)
 8003746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003748:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003750:	4b27      	ldr	r3, [pc, #156]	@ (80037f0 <HAL_ADC_MspInit+0x384>)
 8003752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003754:	4a26      	ldr	r2, [pc, #152]	@ (80037f0 <HAL_ADC_MspInit+0x384>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800375c:	4b24      	ldr	r3, [pc, #144]	@ (80037f0 <HAL_ADC_MspInit+0x384>)
 800375e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMAX2_SUM_Pin;
 8003768:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800376c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800376e:	2303      	movs	r3, #3
 8003770:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(IMAX2_SUM_GPIO_Port, &GPIO_InitStruct);
 800377a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800377e:	4619      	mov	r1, r3
 8003780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003784:	f003 f892 	bl	80068ac <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel3;
 8003788:	4b1a      	ldr	r3, [pc, #104]	@ (80037f4 <HAL_ADC_MspInit+0x388>)
 800378a:	4a1b      	ldr	r2, [pc, #108]	@ (80037f8 <HAL_ADC_MspInit+0x38c>)
 800378c:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 800378e:	4b19      	ldr	r3, [pc, #100]	@ (80037f4 <HAL_ADC_MspInit+0x388>)
 8003790:	2227      	movs	r2, #39	@ 0x27
 8003792:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003794:	4b17      	ldr	r3, [pc, #92]	@ (80037f4 <HAL_ADC_MspInit+0x388>)
 8003796:	2200      	movs	r2, #0
 8003798:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 800379a:	4b16      	ldr	r3, [pc, #88]	@ (80037f4 <HAL_ADC_MspInit+0x388>)
 800379c:	2200      	movs	r2, #0
 800379e:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 80037a0:	4b14      	ldr	r3, [pc, #80]	@ (80037f4 <HAL_ADC_MspInit+0x388>)
 80037a2:	2280      	movs	r2, #128	@ 0x80
 80037a4:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037a6:	4b13      	ldr	r3, [pc, #76]	@ (80037f4 <HAL_ADC_MspInit+0x388>)
 80037a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037ac:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037ae:	4b11      	ldr	r3, [pc, #68]	@ (80037f4 <HAL_ADC_MspInit+0x388>)
 80037b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037b4:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80037b6:	4b0f      	ldr	r3, [pc, #60]	@ (80037f4 <HAL_ADC_MspInit+0x388>)
 80037b8:	2220      	movs	r2, #32
 80037ba:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80037bc:	4b0d      	ldr	r3, [pc, #52]	@ (80037f4 <HAL_ADC_MspInit+0x388>)
 80037be:	2200      	movs	r2, #0
 80037c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80037c2:	480c      	ldr	r0, [pc, #48]	@ (80037f4 <HAL_ADC_MspInit+0x388>)
 80037c4:	f002 fe00 	bl	80063c8 <HAL_DMA_Init>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_ADC_MspInit+0x366>
      Error_Handler();
 80037ce:	f7ff fe23 	bl	8003418 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a07      	ldr	r2, [pc, #28]	@ (80037f4 <HAL_ADC_MspInit+0x388>)
 80037d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80037d8:	4a06      	ldr	r2, [pc, #24]	@ (80037f4 <HAL_ADC_MspInit+0x388>)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80037de:	bf00      	nop
 80037e0:	3790      	adds	r7, #144	@ 0x90
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	50000600 	.word	0x50000600
 80037ec:	20000b58 	.word	0x20000b58
 80037f0:	40021000 	.word	0x40021000
 80037f4:	2000060c 	.word	0x2000060c
 80037f8:	40020030 	.word	0x40020030

080037fc <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a0d      	ldr	r2, [pc, #52]	@ (8003840 <HAL_CORDIC_MspInit+0x44>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d113      	bne.n	8003836 <HAL_CORDIC_MspInit+0x3a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800380e:	4b0d      	ldr	r3, [pc, #52]	@ (8003844 <HAL_CORDIC_MspInit+0x48>)
 8003810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003812:	4a0c      	ldr	r2, [pc, #48]	@ (8003844 <HAL_CORDIC_MspInit+0x48>)
 8003814:	f043 0308 	orr.w	r3, r3, #8
 8003818:	6493      	str	r3, [r2, #72]	@ 0x48
 800381a:	4b0a      	ldr	r3, [pc, #40]	@ (8003844 <HAL_CORDIC_MspInit+0x48>)
 800381c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]
    /* CORDIC interrupt Init */
    HAL_NVIC_SetPriority(CORDIC_IRQn, 0, 0);
 8003826:	2200      	movs	r2, #0
 8003828:	2100      	movs	r1, #0
 800382a:	2064      	movs	r0, #100	@ 0x64
 800382c:	f002 fab9 	bl	8005da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CORDIC_IRQn);
 8003830:	2064      	movs	r0, #100	@ 0x64
 8003832:	f002 fad0 	bl	8005dd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8003836:	bf00      	nop
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40020c00 	.word	0x40020c00
 8003844:	40021000 	.word	0x40021000

08003848 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08c      	sub	sp, #48	@ 0x30
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003850:	f107 031c 	add.w	r3, r7, #28
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	60da      	str	r2, [r3, #12]
 800385e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a5b      	ldr	r2, [pc, #364]	@ (80039d4 <HAL_DAC_MspInit+0x18c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d159      	bne.n	800391e <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800386a:	4b5b      	ldr	r3, [pc, #364]	@ (80039d8 <HAL_DAC_MspInit+0x190>)
 800386c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800386e:	4a5a      	ldr	r2, [pc, #360]	@ (80039d8 <HAL_DAC_MspInit+0x190>)
 8003870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003876:	4b58      	ldr	r3, [pc, #352]	@ (80039d8 <HAL_DAC_MspInit+0x190>)
 8003878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003882:	4b55      	ldr	r3, [pc, #340]	@ (80039d8 <HAL_DAC_MspInit+0x190>)
 8003884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003886:	4a54      	ldr	r2, [pc, #336]	@ (80039d8 <HAL_DAC_MspInit+0x190>)
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800388e:	4b52      	ldr	r3, [pc, #328]	@ (80039d8 <HAL_DAC_MspInit+0x190>)
 8003890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = IMAX_Pin|IMAX2_Pin;
 800389a:	2330      	movs	r3, #48	@ 0x30
 800389c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800389e:	2303      	movs	r3, #3
 80038a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a6:	f107 031c 	add.w	r3, r7, #28
 80038aa:	4619      	mov	r1, r3
 80038ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038b0:	f002 fffc 	bl	80068ac <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel4;
 80038b4:	4b49      	ldr	r3, [pc, #292]	@ (80039dc <HAL_DAC_MspInit+0x194>)
 80038b6:	4a4a      	ldr	r2, [pc, #296]	@ (80039e0 <HAL_DAC_MspInit+0x198>)
 80038b8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80038ba:	4b48      	ldr	r3, [pc, #288]	@ (80039dc <HAL_DAC_MspInit+0x194>)
 80038bc:	2206      	movs	r2, #6
 80038be:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038c0:	4b46      	ldr	r3, [pc, #280]	@ (80039dc <HAL_DAC_MspInit+0x194>)
 80038c2:	2210      	movs	r2, #16
 80038c4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80038c6:	4b45      	ldr	r3, [pc, #276]	@ (80039dc <HAL_DAC_MspInit+0x194>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80038cc:	4b43      	ldr	r3, [pc, #268]	@ (80039dc <HAL_DAC_MspInit+0x194>)
 80038ce:	2280      	movs	r2, #128	@ 0x80
 80038d0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038d2:	4b42      	ldr	r3, [pc, #264]	@ (80039dc <HAL_DAC_MspInit+0x194>)
 80038d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038d8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80038da:	4b40      	ldr	r3, [pc, #256]	@ (80039dc <HAL_DAC_MspInit+0x194>)
 80038dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038e0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80038e2:	4b3e      	ldr	r3, [pc, #248]	@ (80039dc <HAL_DAC_MspInit+0x194>)
 80038e4:	2220      	movs	r2, #32
 80038e6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80038e8:	4b3c      	ldr	r3, [pc, #240]	@ (80039dc <HAL_DAC_MspInit+0x194>)
 80038ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80038ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80038f0:	483a      	ldr	r0, [pc, #232]	@ (80039dc <HAL_DAC_MspInit+0x194>)
 80038f2:	f002 fd69 	bl	80063c8 <HAL_DMA_Init>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80038fc:	f7ff fd8c 	bl	8003418 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a36      	ldr	r2, [pc, #216]	@ (80039dc <HAL_DAC_MspInit+0x194>)
 8003904:	609a      	str	r2, [r3, #8]
 8003906:	4a35      	ldr	r2, [pc, #212]	@ (80039dc <HAL_DAC_MspInit+0x194>)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800390c:	2200      	movs	r2, #0
 800390e:	2100      	movs	r1, #0
 8003910:	2036      	movs	r0, #54	@ 0x36
 8003912:	f002 fa46 	bl	8005da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003916:	2036      	movs	r0, #54	@ 0x36
 8003918:	f002 fa5d 	bl	8005dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 800391c:	e055      	b.n	80039ca <HAL_DAC_MspInit+0x182>
  else if(hdac->Instance==DAC2)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a30      	ldr	r2, [pc, #192]	@ (80039e4 <HAL_DAC_MspInit+0x19c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d150      	bne.n	80039ca <HAL_DAC_MspInit+0x182>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8003928:	4b2b      	ldr	r3, [pc, #172]	@ (80039d8 <HAL_DAC_MspInit+0x190>)
 800392a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800392c:	4a2a      	ldr	r2, [pc, #168]	@ (80039d8 <HAL_DAC_MspInit+0x190>)
 800392e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003932:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003934:	4b28      	ldr	r3, [pc, #160]	@ (80039d8 <HAL_DAC_MspInit+0x190>)
 8003936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003940:	4b25      	ldr	r3, [pc, #148]	@ (80039d8 <HAL_DAC_MspInit+0x190>)
 8003942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003944:	4a24      	ldr	r2, [pc, #144]	@ (80039d8 <HAL_DAC_MspInit+0x190>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800394c:	4b22      	ldr	r3, [pc, #136]	@ (80039d8 <HAL_DAC_MspInit+0x190>)
 800394e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMIN_Pin;
 8003958:	2340      	movs	r3, #64	@ 0x40
 800395a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800395c:	2303      	movs	r3, #3
 800395e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	2300      	movs	r3, #0
 8003962:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMIN_GPIO_Port, &GPIO_InitStruct);
 8003964:	f107 031c 	add.w	r3, r7, #28
 8003968:	4619      	mov	r1, r3
 800396a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800396e:	f002 ff9d 	bl	80068ac <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel5;
 8003972:	4b1d      	ldr	r3, [pc, #116]	@ (80039e8 <HAL_DAC_MspInit+0x1a0>)
 8003974:	4a1d      	ldr	r2, [pc, #116]	@ (80039ec <HAL_DAC_MspInit+0x1a4>)
 8003976:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8003978:	4b1b      	ldr	r3, [pc, #108]	@ (80039e8 <HAL_DAC_MspInit+0x1a0>)
 800397a:	2229      	movs	r2, #41	@ 0x29
 800397c:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800397e:	4b1a      	ldr	r3, [pc, #104]	@ (80039e8 <HAL_DAC_MspInit+0x1a0>)
 8003980:	2210      	movs	r2, #16
 8003982:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003984:	4b18      	ldr	r3, [pc, #96]	@ (80039e8 <HAL_DAC_MspInit+0x1a0>)
 8003986:	2200      	movs	r2, #0
 8003988:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800398a:	4b17      	ldr	r3, [pc, #92]	@ (80039e8 <HAL_DAC_MspInit+0x1a0>)
 800398c:	2280      	movs	r2, #128	@ 0x80
 800398e:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003990:	4b15      	ldr	r3, [pc, #84]	@ (80039e8 <HAL_DAC_MspInit+0x1a0>)
 8003992:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003996:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003998:	4b13      	ldr	r3, [pc, #76]	@ (80039e8 <HAL_DAC_MspInit+0x1a0>)
 800399a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800399e:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80039a0:	4b11      	ldr	r3, [pc, #68]	@ (80039e8 <HAL_DAC_MspInit+0x1a0>)
 80039a2:	2220      	movs	r2, #32
 80039a4:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80039a6:	4b10      	ldr	r3, [pc, #64]	@ (80039e8 <HAL_DAC_MspInit+0x1a0>)
 80039a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80039ae:	480e      	ldr	r0, [pc, #56]	@ (80039e8 <HAL_DAC_MspInit+0x1a0>)
 80039b0:	f002 fd0a 	bl	80063c8 <HAL_DMA_Init>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_DAC_MspInit+0x176>
      Error_Handler();
 80039ba:	f7ff fd2d 	bl	8003418 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a09      	ldr	r2, [pc, #36]	@ (80039e8 <HAL_DAC_MspInit+0x1a0>)
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	4a08      	ldr	r2, [pc, #32]	@ (80039e8 <HAL_DAC_MspInit+0x1a0>)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80039ca:	bf00      	nop
 80039cc:	3730      	adds	r7, #48	@ 0x30
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	50000800 	.word	0x50000800
 80039d8:	40021000 	.word	0x40021000
 80039dc:	200006bc 	.word	0x200006bc
 80039e0:	40020044 	.word	0x40020044
 80039e4:	50000c00 	.word	0x50000c00
 80039e8:	2000071c 	.word	0x2000071c
 80039ec:	40020058 	.word	0x40020058

080039f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a16      	ldr	r2, [pc, #88]	@ (8003a58 <HAL_TIM_PWM_MspInit+0x68>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d114      	bne.n	8003a2c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a02:	4b16      	ldr	r3, [pc, #88]	@ (8003a5c <HAL_TIM_PWM_MspInit+0x6c>)
 8003a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a06:	4a15      	ldr	r2, [pc, #84]	@ (8003a5c <HAL_TIM_PWM_MspInit+0x6c>)
 8003a08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a0e:	4b13      	ldr	r3, [pc, #76]	@ (8003a5c <HAL_TIM_PWM_MspInit+0x6c>)
 8003a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	2018      	movs	r0, #24
 8003a20:	f002 f9bf 	bl	8005da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003a24:	2018      	movs	r0, #24
 8003a26:	f002 f9d6 	bl	8005dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003a2a:	e010      	b.n	8003a4e <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM8)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a0b      	ldr	r2, [pc, #44]	@ (8003a60 <HAL_TIM_PWM_MspInit+0x70>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d10b      	bne.n	8003a4e <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003a36:	4b09      	ldr	r3, [pc, #36]	@ (8003a5c <HAL_TIM_PWM_MspInit+0x6c>)
 8003a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a3a:	4a08      	ldr	r2, [pc, #32]	@ (8003a5c <HAL_TIM_PWM_MspInit+0x6c>)
 8003a3c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003a40:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a42:	4b06      	ldr	r3, [pc, #24]	@ (8003a5c <HAL_TIM_PWM_MspInit+0x6c>)
 8003a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a4a:	60bb      	str	r3, [r7, #8]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
}
 8003a4e:	bf00      	nop
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40012c00 	.word	0x40012c00
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	40013400 	.word	0x40013400

08003a64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a35      	ldr	r2, [pc, #212]	@ (8003b48 <HAL_TIM_Base_MspInit+0xe4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d10c      	bne.n	8003a90 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a76:	4b35      	ldr	r3, [pc, #212]	@ (8003b4c <HAL_TIM_Base_MspInit+0xe8>)
 8003a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7a:	4a34      	ldr	r2, [pc, #208]	@ (8003b4c <HAL_TIM_Base_MspInit+0xe8>)
 8003a7c:	f043 0304 	orr.w	r3, r3, #4
 8003a80:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a82:	4b32      	ldr	r3, [pc, #200]	@ (8003b4c <HAL_TIM_Base_MspInit+0xe8>)
 8003a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	61fb      	str	r3, [r7, #28]
 8003a8c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003a8e:	e056      	b.n	8003b3e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a2e      	ldr	r2, [pc, #184]	@ (8003b50 <HAL_TIM_Base_MspInit+0xec>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d114      	bne.n	8003ac4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a9a:	4b2c      	ldr	r3, [pc, #176]	@ (8003b4c <HAL_TIM_Base_MspInit+0xe8>)
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9e:	4a2b      	ldr	r2, [pc, #172]	@ (8003b4c <HAL_TIM_Base_MspInit+0xe8>)
 8003aa0:	f043 0310 	orr.w	r3, r3, #16
 8003aa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aa6:	4b29      	ldr	r3, [pc, #164]	@ (8003b4c <HAL_TIM_Base_MspInit+0xe8>)
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	2036      	movs	r0, #54	@ 0x36
 8003ab8:	f002 f973 	bl	8005da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003abc:	2036      	movs	r0, #54	@ 0x36
 8003abe:	f002 f98a 	bl	8005dd6 <HAL_NVIC_EnableIRQ>
}
 8003ac2:	e03c      	b.n	8003b3e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM7)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a22      	ldr	r2, [pc, #136]	@ (8003b54 <HAL_TIM_Base_MspInit+0xf0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d10c      	bne.n	8003ae8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003ace:	4b1f      	ldr	r3, [pc, #124]	@ (8003b4c <HAL_TIM_Base_MspInit+0xe8>)
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8003b4c <HAL_TIM_Base_MspInit+0xe8>)
 8003ad4:	f043 0320 	orr.w	r3, r3, #32
 8003ad8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ada:	4b1c      	ldr	r3, [pc, #112]	@ (8003b4c <HAL_TIM_Base_MspInit+0xe8>)
 8003adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	697b      	ldr	r3, [r7, #20]
}
 8003ae6:	e02a      	b.n	8003b3e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM15)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1a      	ldr	r2, [pc, #104]	@ (8003b58 <HAL_TIM_Base_MspInit+0xf4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d114      	bne.n	8003b1c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003af2:	4b16      	ldr	r3, [pc, #88]	@ (8003b4c <HAL_TIM_Base_MspInit+0xe8>)
 8003af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af6:	4a15      	ldr	r2, [pc, #84]	@ (8003b4c <HAL_TIM_Base_MspInit+0xe8>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003afc:	6613      	str	r3, [r2, #96]	@ 0x60
 8003afe:	4b13      	ldr	r3, [pc, #76]	@ (8003b4c <HAL_TIM_Base_MspInit+0xe8>)
 8003b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	2018      	movs	r0, #24
 8003b10:	f002 f947 	bl	8005da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003b14:	2018      	movs	r0, #24
 8003b16:	f002 f95e 	bl	8005dd6 <HAL_NVIC_EnableIRQ>
}
 8003b1a:	e010      	b.n	8003b3e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM16)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a0e      	ldr	r2, [pc, #56]	@ (8003b5c <HAL_TIM_Base_MspInit+0xf8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d10b      	bne.n	8003b3e <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003b26:	4b09      	ldr	r3, [pc, #36]	@ (8003b4c <HAL_TIM_Base_MspInit+0xe8>)
 8003b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b2a:	4a08      	ldr	r2, [pc, #32]	@ (8003b4c <HAL_TIM_Base_MspInit+0xe8>)
 8003b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b30:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b32:	4b06      	ldr	r3, [pc, #24]	@ (8003b4c <HAL_TIM_Base_MspInit+0xe8>)
 8003b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
}
 8003b3e:	bf00      	nop
 8003b40:	3720      	adds	r7, #32
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40000800 	.word	0x40000800
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	40001000 	.word	0x40001000
 8003b54:	40001400 	.word	0x40001400
 8003b58:	40014000 	.word	0x40014000
 8003b5c:	40014400 	.word	0x40014400

08003b60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08a      	sub	sp, #40	@ 0x28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b68:	f107 0314 	add.w	r3, r7, #20
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	60da      	str	r2, [r3, #12]
 8003b76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a33      	ldr	r2, [pc, #204]	@ (8003c4c <HAL_TIM_MspPostInit+0xec>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d11c      	bne.n	8003bbc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b82:	4b33      	ldr	r3, [pc, #204]	@ (8003c50 <HAL_TIM_MspPostInit+0xf0>)
 8003b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b86:	4a32      	ldr	r2, [pc, #200]	@ (8003c50 <HAL_TIM_MspPostInit+0xf0>)
 8003b88:	f043 0304 	orr.w	r3, r3, #4
 8003b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b8e:	4b30      	ldr	r3, [pc, #192]	@ (8003c50 <HAL_TIM_MspPostInit+0xf0>)
 8003b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	613b      	str	r3, [r7, #16]
 8003b98:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DEADTIME_TR_Pin;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003baa:	2302      	movs	r3, #2
 8003bac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_TR_GPIO_Port, &GPIO_InitStruct);
 8003bae:	f107 0314 	add.w	r3, r7, #20
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4827      	ldr	r0, [pc, #156]	@ (8003c54 <HAL_TIM_MspPostInit+0xf4>)
 8003bb6:	f002 fe79 	bl	80068ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003bba:	e043      	b.n	8003c44 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a25      	ldr	r2, [pc, #148]	@ (8003c58 <HAL_TIM_MspPostInit+0xf8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d11d      	bne.n	8003c02 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bc6:	4b22      	ldr	r3, [pc, #136]	@ (8003c50 <HAL_TIM_MspPostInit+0xf0>)
 8003bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bca:	4a21      	ldr	r2, [pc, #132]	@ (8003c50 <HAL_TIM_MspPostInit+0xf0>)
 8003bcc:	f043 0308 	orr.w	r3, r3, #8
 8003bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8003c50 <HAL_TIM_MspPostInit+0xf0>)
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8003bde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be4:	2302      	movs	r3, #2
 8003be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bec:	2300      	movs	r3, #0
 8003bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8003bf4:	f107 0314 	add.w	r3, r7, #20
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4818      	ldr	r0, [pc, #96]	@ (8003c5c <HAL_TIM_MspPostInit+0xfc>)
 8003bfc:	f002 fe56 	bl	80068ac <HAL_GPIO_Init>
}
 8003c00:	e020      	b.n	8003c44 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a16      	ldr	r2, [pc, #88]	@ (8003c60 <HAL_TIM_MspPostInit+0x100>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d11b      	bne.n	8003c44 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c0c:	4b10      	ldr	r3, [pc, #64]	@ (8003c50 <HAL_TIM_MspPostInit+0xf0>)
 8003c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c10:	4a0f      	ldr	r2, [pc, #60]	@ (8003c50 <HAL_TIM_MspPostInit+0xf0>)
 8003c12:	f043 0304 	orr.w	r3, r3, #4
 8003c16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c18:	4b0d      	ldr	r3, [pc, #52]	@ (8003c50 <HAL_TIM_MspPostInit+0xf0>)
 8003c1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEADTIME_HC_Pin;
 8003c24:	2380      	movs	r3, #128	@ 0x80
 8003c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c28:	2302      	movs	r3, #2
 8003c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c30:	2300      	movs	r3, #0
 8003c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003c34:	2304      	movs	r3, #4
 8003c36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_HC_GPIO_Port, &GPIO_InitStruct);
 8003c38:	f107 0314 	add.w	r3, r7, #20
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4805      	ldr	r0, [pc, #20]	@ (8003c54 <HAL_TIM_MspPostInit+0xf4>)
 8003c40:	f002 fe34 	bl	80068ac <HAL_GPIO_Init>
}
 8003c44:	bf00      	nop
 8003c46:	3728      	adds	r7, #40	@ 0x28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40012c00 	.word	0x40012c00
 8003c50:	40021000 	.word	0x40021000
 8003c54:	48000800 	.word	0x48000800
 8003c58:	40000800 	.word	0x40000800
 8003c5c:	48000c00 	.word	0x48000c00
 8003c60:	40013400 	.word	0x40013400

08003c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b09e      	sub	sp, #120	@ 0x78
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c6c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	609a      	str	r2, [r3, #8]
 8003c78:	60da      	str	r2, [r3, #12]
 8003c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c7c:	f107 0310 	add.w	r3, r7, #16
 8003c80:	2254      	movs	r2, #84	@ 0x54
 8003c82:	2100      	movs	r1, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f00d fcd6 	bl	8011636 <memset>
  if(huart->Instance==UART4)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8003d0c <HAL_UART_MspInit+0xa8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d136      	bne.n	8003d02 <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003c94:	2308      	movs	r3, #8
 8003c96:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_HSI;
 8003c98:	2380      	movs	r3, #128	@ 0x80
 8003c9a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c9c:	f107 0310 	add.w	r3, r7, #16
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f005 fae7 	bl	8009274 <HAL_RCCEx_PeriphCLKConfig>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003cac:	f7ff fbb4 	bl	8003418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003cb0:	4b17      	ldr	r3, [pc, #92]	@ (8003d10 <HAL_UART_MspInit+0xac>)
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb4:	4a16      	ldr	r2, [pc, #88]	@ (8003d10 <HAL_UART_MspInit+0xac>)
 8003cb6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003cba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cbc:	4b14      	ldr	r3, [pc, #80]	@ (8003d10 <HAL_UART_MspInit+0xac>)
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cc8:	4b11      	ldr	r3, [pc, #68]	@ (8003d10 <HAL_UART_MspInit+0xac>)
 8003cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ccc:	4a10      	ldr	r2, [pc, #64]	@ (8003d10 <HAL_UART_MspInit+0xac>)
 8003cce:	f043 0304 	orr.w	r3, r3, #4
 8003cd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8003d10 <HAL_UART_MspInit+0xac>)
 8003cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003ce0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003ce4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003cf2:	2305      	movs	r3, #5
 8003cf4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cf6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4805      	ldr	r0, [pc, #20]	@ (8003d14 <HAL_UART_MspInit+0xb0>)
 8003cfe:	f002 fdd5 	bl	80068ac <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8003d02:	bf00      	nop
 8003d04:	3778      	adds	r7, #120	@ 0x78
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40004c00 	.word	0x40004c00
 8003d10:	40021000 	.word	0x40021000
 8003d14:	48000800 	.word	0x48000800

08003d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d1c:	bf00      	nop
 8003d1e:	e7fd      	b.n	8003d1c <NMI_Handler+0x4>

08003d20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d24:	bf00      	nop
 8003d26:	e7fd      	b.n	8003d24 <HardFault_Handler+0x4>

08003d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d2c:	bf00      	nop
 8003d2e:	e7fd      	b.n	8003d2c <MemManage_Handler+0x4>

08003d30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d34:	bf00      	nop
 8003d36:	e7fd      	b.n	8003d34 <BusFault_Handler+0x4>

08003d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d3c:	bf00      	nop
 8003d3e:	e7fd      	b.n	8003d3c <UsageFault_Handler+0x4>

08003d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d6e:	f000 f9b9 	bl	80040e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003d7c:	4802      	ldr	r0, [pc, #8]	@ (8003d88 <DMA1_Channel1_IRQHandler+0x10>)
 8003d7e:	f002 fc46 	bl	800660e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	2000054c 	.word	0x2000054c

08003d8c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8003d90:	4802      	ldr	r0, [pc, #8]	@ (8003d9c <DMA1_Channel2_IRQHandler+0x10>)
 8003d92:	f002 fc3c 	bl	800660e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	200005ac 	.word	0x200005ac

08003da0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8003da4:	4802      	ldr	r0, [pc, #8]	@ (8003db0 <DMA1_Channel3_IRQHandler+0x10>)
 8003da6:	f002 fc32 	bl	800660e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	2000060c 	.word	0x2000060c

08003db4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003db8:	4802      	ldr	r0, [pc, #8]	@ (8003dc4 <DMA1_Channel4_IRQHandler+0x10>)
 8003dba:	f002 fc28 	bl	800660e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003dbe:	bf00      	nop
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	200006bc 	.word	0x200006bc

08003dc8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8003dcc:	4802      	ldr	r0, [pc, #8]	@ (8003dd8 <DMA1_Channel5_IRQHandler+0x10>)
 8003dce:	f002 fc1e 	bl	800660e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	2000071c 	.word	0x2000071c

08003ddc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003de0:	4802      	ldr	r0, [pc, #8]	@ (8003dec <USB_LP_IRQHandler+0x10>)
 8003de2:	f003 f81f 	bl	8006e24 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003de6:	bf00      	nop
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20002038 	.word	0x20002038

08003df0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003df4:	4803      	ldr	r0, [pc, #12]	@ (8003e04 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8003df6:	f005 ff63 	bl	8009cc0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8003dfa:	4803      	ldr	r0, [pc, #12]	@ (8003e08 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8003dfc:	f005 ff60 	bl	8009cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003e00:	bf00      	nop
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	2000077c 	.word	0x2000077c
 8003e08:	200008f8 	.word	0x200008f8

08003e0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
					HEAT_SINK_TEMP = (ADC3_DMA_BUFFER[4]/4096)*3.3;//(Low_pass_filter(ADC3_DMA_BUFFER[4], HEAT_SINK_TEMP)/4096)*3.3;
					FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
					}*/

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e10:	4803      	ldr	r0, [pc, #12]	@ (8003e20 <TIM6_DAC_IRQHandler+0x14>)
 8003e12:	f005 ff55 	bl	8009cc0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8003e16:	4803      	ldr	r0, [pc, #12]	@ (8003e24 <TIM6_DAC_IRQHandler+0x18>)
 8003e18:	f002 f886 	bl	8005f28 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e1c:	bf00      	nop
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	20000814 	.word	0x20000814
 8003e24:	20000694 	.word	0x20000694

08003e28 <CORDIC_IRQHandler>:

/**
  * @brief This function handles CORDIC interrupt.
  */
void CORDIC_IRQHandler(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CORDIC_IRQn 0 */

  /* USER CODE END CORDIC_IRQn 0 */
  HAL_CORDIC_IRQHandler(&hcordic);
 8003e2c:	4802      	ldr	r0, [pc, #8]	@ (8003e38 <CORDIC_IRQHandler+0x10>)
 8003e2e:	f001 fe42 	bl	8005ab6 <HAL_CORDIC_IRQHandler>
  /* USER CODE BEGIN CORDIC_IRQn 1 */

  /* USER CODE END CORDIC_IRQn 1 */
}
 8003e32:	bf00      	nop
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	2000066c 	.word	0x2000066c

08003e3c <_getpid>:
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	2301      	movs	r3, #1
 8003e42:	4618      	mov	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <_kill>:
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
 8003e56:	f00d fc53 	bl	8011700 <__errno>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2216      	movs	r2, #22
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	f04f 33ff 	mov.w	r3, #4294967295
 8003e64:	4618      	mov	r0, r3
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <_exit>:
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	f04f 31ff 	mov.w	r1, #4294967295
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff ffe7 	bl	8003e4c <_kill>
 8003e7e:	bf00      	nop
 8003e80:	e7fd      	b.n	8003e7e <_exit+0x12>

08003e82 <_read>:
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b086      	sub	sp, #24
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
 8003e92:	e00a      	b.n	8003eaa <_read+0x28>
 8003e94:	f3af 8000 	nop.w
 8003e98:	4601      	mov	r1, r0
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	60ba      	str	r2, [r7, #8]
 8003ea0:	b2ca      	uxtb	r2, r1
 8003ea2:	701a      	strb	r2, [r3, #0]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	dbf0      	blt.n	8003e94 <_read+0x12>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <_write>:
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	e009      	b.n	8003ee2 <_write+0x26>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	60ba      	str	r2, [r7, #8]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f3af 8000 	nop.w
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	dbf1      	blt.n	8003ece <_write+0x12>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <_close>:
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	f04f 33ff 	mov.w	r3, #4294967295
 8003f00:	4618      	mov	r0, r3
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <_fstat>:
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f1c:	605a      	str	r2, [r3, #4]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <_isatty>:
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	2301      	movs	r3, #1
 8003f36:	4618      	mov	r0, r3
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <_lseek>:
 8003f42:	b480      	push	{r7}
 8003f44:	b085      	sub	sp, #20
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	607a      	str	r2, [r7, #4]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	4618      	mov	r0, r3
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <_sbrk>:
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	4a14      	ldr	r2, [pc, #80]	@ (8003fb8 <_sbrk+0x5c>)
 8003f66:	4b15      	ldr	r3, [pc, #84]	@ (8003fbc <_sbrk+0x60>)
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	613b      	str	r3, [r7, #16]
 8003f70:	4b13      	ldr	r3, [pc, #76]	@ (8003fc0 <_sbrk+0x64>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d102      	bne.n	8003f7e <_sbrk+0x22>
 8003f78:	4b11      	ldr	r3, [pc, #68]	@ (8003fc0 <_sbrk+0x64>)
 8003f7a:	4a12      	ldr	r2, [pc, #72]	@ (8003fc4 <_sbrk+0x68>)
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	4b10      	ldr	r3, [pc, #64]	@ (8003fc0 <_sbrk+0x64>)
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4413      	add	r3, r2
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d207      	bcs.n	8003f9c <_sbrk+0x40>
 8003f8c:	f00d fbb8 	bl	8011700 <__errno>
 8003f90:	4603      	mov	r3, r0
 8003f92:	220c      	movs	r2, #12
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9a:	e009      	b.n	8003fb0 <_sbrk+0x54>
 8003f9c:	4b08      	ldr	r3, [pc, #32]	@ (8003fc0 <_sbrk+0x64>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	4b07      	ldr	r3, [pc, #28]	@ (8003fc0 <_sbrk+0x64>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4413      	add	r3, r2
 8003faa:	4a05      	ldr	r2, [pc, #20]	@ (8003fc0 <_sbrk+0x64>)
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	20020000 	.word	0x20020000
 8003fbc:	00000400 	.word	0x00000400
 8003fc0:	20000b5c 	.word	0x20000b5c
 8003fc4:	20002680 	.word	0x20002680

08003fc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003fcc:	4b06      	ldr	r3, [pc, #24]	@ (8003fe8 <SystemInit+0x20>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd2:	4a05      	ldr	r2, [pc, #20]	@ (8003fe8 <SystemInit+0x20>)
 8003fd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003fd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fdc:	bf00      	nop
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	e000ed00 	.word	0xe000ed00

08003fec <Reset_Handler>:
 8003fec:	480d      	ldr	r0, [pc, #52]	@ (8004024 <LoopForever+0x2>)
 8003fee:	4685      	mov	sp, r0
 8003ff0:	f7ff ffea 	bl	8003fc8 <SystemInit>
 8003ff4:	480c      	ldr	r0, [pc, #48]	@ (8004028 <LoopForever+0x6>)
 8003ff6:	490d      	ldr	r1, [pc, #52]	@ (800402c <LoopForever+0xa>)
 8003ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8004030 <LoopForever+0xe>)
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e002      	b.n	8004004 <LoopCopyDataInit>

08003ffe <CopyDataInit>:
 8003ffe:	58d4      	ldr	r4, [r2, r3]
 8004000:	50c4      	str	r4, [r0, r3]
 8004002:	3304      	adds	r3, #4

08004004 <LoopCopyDataInit>:
 8004004:	18c4      	adds	r4, r0, r3
 8004006:	428c      	cmp	r4, r1
 8004008:	d3f9      	bcc.n	8003ffe <CopyDataInit>
 800400a:	4a0a      	ldr	r2, [pc, #40]	@ (8004034 <LoopForever+0x12>)
 800400c:	4c0a      	ldr	r4, [pc, #40]	@ (8004038 <LoopForever+0x16>)
 800400e:	2300      	movs	r3, #0
 8004010:	e001      	b.n	8004016 <LoopFillZerobss>

08004012 <FillZerobss>:
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	3204      	adds	r2, #4

08004016 <LoopFillZerobss>:
 8004016:	42a2      	cmp	r2, r4
 8004018:	d3fb      	bcc.n	8004012 <FillZerobss>
 800401a:	f00d fb77 	bl	801170c <__libc_init_array>
 800401e:	f7fd f809 	bl	8001034 <main>

08004022 <LoopForever>:
 8004022:	e7fe      	b.n	8004022 <LoopForever>
 8004024:	20020000 	.word	0x20020000
 8004028:	20000000 	.word	0x20000000
 800402c:	20000380 	.word	0x20000380
 8004030:	08017278 	.word	0x08017278
 8004034:	20000380 	.word	0x20000380
 8004038:	20002680 	.word	0x20002680

0800403c <ADC1_2_IRQHandler>:
 800403c:	e7fe      	b.n	800403c <ADC1_2_IRQHandler>

0800403e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b082      	sub	sp, #8
 8004042:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004048:	2003      	movs	r0, #3
 800404a:	f001 fe9f 	bl	8005d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800404e:	200f      	movs	r0, #15
 8004050:	f000 f80e 	bl	8004070 <HAL_InitTick>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	71fb      	strb	r3, [r7, #7]
 800405e:	e001      	b.n	8004064 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004060:	f7ff f9e0 	bl	8003424 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004064:	79fb      	ldrb	r3, [r7, #7]

}
 8004066:	4618      	mov	r0, r3
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800407c:	4b16      	ldr	r3, [pc, #88]	@ (80040d8 <HAL_InitTick+0x68>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d022      	beq.n	80040ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004084:	4b15      	ldr	r3, [pc, #84]	@ (80040dc <HAL_InitTick+0x6c>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	4b13      	ldr	r3, [pc, #76]	@ (80040d8 <HAL_InitTick+0x68>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004090:	fbb1 f3f3 	udiv	r3, r1, r3
 8004094:	fbb2 f3f3 	udiv	r3, r2, r3
 8004098:	4618      	mov	r0, r3
 800409a:	f001 feaa 	bl	8005df2 <HAL_SYSTICK_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10f      	bne.n	80040c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b0f      	cmp	r3, #15
 80040a8:	d809      	bhi.n	80040be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040aa:	2200      	movs	r2, #0
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	f04f 30ff 	mov.w	r0, #4294967295
 80040b2:	f001 fe76 	bl	8005da2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80040b6:	4a0a      	ldr	r2, [pc, #40]	@ (80040e0 <HAL_InitTick+0x70>)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	e007      	b.n	80040ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
 80040c2:	e004      	b.n	80040ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	73fb      	strb	r3, [r7, #15]
 80040c8:	e001      	b.n	80040ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20000028 	.word	0x20000028
 80040dc:	20000020 	.word	0x20000020
 80040e0:	20000024 	.word	0x20000024

080040e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040e8:	4b05      	ldr	r3, [pc, #20]	@ (8004100 <HAL_IncTick+0x1c>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	4b05      	ldr	r3, [pc, #20]	@ (8004104 <HAL_IncTick+0x20>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4413      	add	r3, r2
 80040f2:	4a03      	ldr	r2, [pc, #12]	@ (8004100 <HAL_IncTick+0x1c>)
 80040f4:	6013      	str	r3, [r2, #0]
}
 80040f6:	bf00      	nop
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	20000b60 	.word	0x20000b60
 8004104:	20000028 	.word	0x20000028

08004108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  return uwTick;
 800410c:	4b03      	ldr	r3, [pc, #12]	@ (800411c <HAL_GetTick+0x14>)
 800410e:	681b      	ldr	r3, [r3, #0]
}
 8004110:	4618      	mov	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	20000b60 	.word	0x20000b60

08004120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004128:	f7ff ffee 	bl	8004108 <HAL_GetTick>
 800412c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004138:	d004      	beq.n	8004144 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800413a:	4b09      	ldr	r3, [pc, #36]	@ (8004160 <HAL_Delay+0x40>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4413      	add	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004144:	bf00      	nop
 8004146:	f7ff ffdf 	bl	8004108 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	429a      	cmp	r2, r3
 8004154:	d8f7      	bhi.n	8004146 <HAL_Delay+0x26>
  {
  }
}
 8004156:	bf00      	nop
 8004158:	bf00      	nop
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20000028 	.word	0x20000028

08004164 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	609a      	str	r2, [r3, #8]
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	609a      	str	r2, [r3, #8]
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3360      	adds	r3, #96	@ 0x60
 80041de:	461a      	mov	r2, r3
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4b08      	ldr	r3, [pc, #32]	@ (8004210 <LL_ADC_SetOffset+0x44>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004204:	bf00      	nop
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	03fff000 	.word	0x03fff000

08004214 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3360      	adds	r3, #96	@ 0x60
 8004222:	461a      	mov	r2, r3
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3360      	adds	r3, #96	@ 0x60
 8004250:	461a      	mov	r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	431a      	orrs	r2, r3
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004276:	b480      	push	{r7}
 8004278:	b087      	sub	sp, #28
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3360      	adds	r3, #96	@ 0x60
 8004286:	461a      	mov	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	431a      	orrs	r2, r3
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80042a0:	bf00      	nop
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3360      	adds	r3, #96	@ 0x60
 80042bc:	461a      	mov	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	431a      	orrs	r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	615a      	str	r2, [r3, #20]
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800432e:	b480      	push	{r7}
 8004330:	b087      	sub	sp, #28
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3330      	adds	r3, #48	@ 0x30
 800433e:	461a      	mov	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	0a1b      	lsrs	r3, r3, #8
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	f003 030c 	and.w	r3, r3, #12
 800434a:	4413      	add	r3, r2
 800434c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	211f      	movs	r1, #31
 800435a:	fa01 f303 	lsl.w	r3, r1, r3
 800435e:	43db      	mvns	r3, r3
 8004360:	401a      	ands	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	0e9b      	lsrs	r3, r3, #26
 8004366:	f003 011f 	and.w	r1, r3, #31
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	fa01 f303 	lsl.w	r3, r1, r3
 8004374:	431a      	orrs	r2, r3
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800437a:	bf00      	nop
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004386:	b480      	push	{r7}
 8004388:	b087      	sub	sp, #28
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3314      	adds	r3, #20
 8004396:	461a      	mov	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	0e5b      	lsrs	r3, r3, #25
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	4413      	add	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	0d1b      	lsrs	r3, r3, #20
 80043ae:	f003 031f 	and.w	r3, r3, #31
 80043b2:	2107      	movs	r1, #7
 80043b4:	fa01 f303 	lsl.w	r3, r1, r3
 80043b8:	43db      	mvns	r3, r3
 80043ba:	401a      	ands	r2, r3
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	0d1b      	lsrs	r3, r3, #20
 80043c0:	f003 031f 	and.w	r3, r3, #31
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ca:	431a      	orrs	r2, r3
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f4:	43db      	mvns	r3, r3
 80043f6:	401a      	ands	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f003 0318 	and.w	r3, r3, #24
 80043fe:	4908      	ldr	r1, [pc, #32]	@ (8004420 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004400:	40d9      	lsrs	r1, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	400b      	ands	r3, r1
 8004406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800440a:	431a      	orrs	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004412:	bf00      	nop
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	0007ffff 	.word	0x0007ffff

08004424 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 031f 	and.w	r3, r3, #31
}
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004450:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6093      	str	r3, [r2, #8]
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004474:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004478:	d101      	bne.n	800447e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800449c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80044a0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044c8:	d101      	bne.n	80044ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80044f0:	f043 0201 	orr.w	r2, r3, #1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004514:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004518:	f043 0202 	orr.w	r2, r3, #2
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <LL_ADC_IsEnabled+0x18>
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <LL_ADC_IsEnabled+0x1a>
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b02      	cmp	r3, #2
 8004564:	d101      	bne.n	800456a <LL_ADC_IsDisableOngoing+0x18>
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <LL_ADC_IsDisableOngoing+0x1a>
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004588:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800458c:	f043 0204 	orr.w	r2, r3, #4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d101      	bne.n	80045b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d101      	bne.n	80045de <LL_ADC_INJ_IsConversionOngoing+0x18>
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b089      	sub	sp, #36	@ 0x24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e1a9      	b.n	800495a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7fe ff29 	bl	800346c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff ff19 	bl	8004464 <LL_ADC_IsDeepPowerDownEnabled>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d004      	beq.n	8004642 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff feff 	bl	8004440 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff ff34 	bl	80044b4 <LL_ADC_IsInternalRegulatorEnabled>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d115      	bne.n	800467e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff ff18 	bl	800448c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800465c:	4b9c      	ldr	r3, [pc, #624]	@ (80048d0 <HAL_ADC_Init+0x2e4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	099b      	lsrs	r3, r3, #6
 8004662:	4a9c      	ldr	r2, [pc, #624]	@ (80048d4 <HAL_ADC_Init+0x2e8>)
 8004664:	fba2 2303 	umull	r2, r3, r2, r3
 8004668:	099b      	lsrs	r3, r3, #6
 800466a:	3301      	adds	r3, #1
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004670:	e002      	b.n	8004678 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	3b01      	subs	r3, #1
 8004676:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f9      	bne.n	8004672 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff ff16 	bl	80044b4 <LL_ADC_IsInternalRegulatorEnabled>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10d      	bne.n	80046aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004692:	f043 0210 	orr.w	r2, r3, #16
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800469e:	f043 0201 	orr.w	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff ff76 	bl	80045a0 <LL_ADC_REG_IsConversionOngoing>
 80046b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f040 8142 	bne.w	8004948 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f040 813e 	bne.w	8004948 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80046d4:	f043 0202 	orr.w	r2, r3, #2
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff ff23 	bl	800452c <LL_ADC_IsEnabled>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d141      	bne.n	8004770 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046f4:	d004      	beq.n	8004700 <HAL_ADC_Init+0x114>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a77      	ldr	r2, [pc, #476]	@ (80048d8 <HAL_ADC_Init+0x2ec>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d10f      	bne.n	8004720 <HAL_ADC_Init+0x134>
 8004700:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004704:	f7ff ff12 	bl	800452c <LL_ADC_IsEnabled>
 8004708:	4604      	mov	r4, r0
 800470a:	4873      	ldr	r0, [pc, #460]	@ (80048d8 <HAL_ADC_Init+0x2ec>)
 800470c:	f7ff ff0e 	bl	800452c <LL_ADC_IsEnabled>
 8004710:	4603      	mov	r3, r0
 8004712:	4323      	orrs	r3, r4
 8004714:	2b00      	cmp	r3, #0
 8004716:	bf0c      	ite	eq
 8004718:	2301      	moveq	r3, #1
 800471a:	2300      	movne	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	e012      	b.n	8004746 <HAL_ADC_Init+0x15a>
 8004720:	486e      	ldr	r0, [pc, #440]	@ (80048dc <HAL_ADC_Init+0x2f0>)
 8004722:	f7ff ff03 	bl	800452c <LL_ADC_IsEnabled>
 8004726:	4604      	mov	r4, r0
 8004728:	486d      	ldr	r0, [pc, #436]	@ (80048e0 <HAL_ADC_Init+0x2f4>)
 800472a:	f7ff feff 	bl	800452c <LL_ADC_IsEnabled>
 800472e:	4603      	mov	r3, r0
 8004730:	431c      	orrs	r4, r3
 8004732:	486c      	ldr	r0, [pc, #432]	@ (80048e4 <HAL_ADC_Init+0x2f8>)
 8004734:	f7ff fefa 	bl	800452c <LL_ADC_IsEnabled>
 8004738:	4603      	mov	r3, r0
 800473a:	4323      	orrs	r3, r4
 800473c:	2b00      	cmp	r3, #0
 800473e:	bf0c      	ite	eq
 8004740:	2301      	moveq	r3, #1
 8004742:	2300      	movne	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d012      	beq.n	8004770 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004752:	d004      	beq.n	800475e <HAL_ADC_Init+0x172>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a5f      	ldr	r2, [pc, #380]	@ (80048d8 <HAL_ADC_Init+0x2ec>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d101      	bne.n	8004762 <HAL_ADC_Init+0x176>
 800475e:	4a62      	ldr	r2, [pc, #392]	@ (80048e8 <HAL_ADC_Init+0x2fc>)
 8004760:	e000      	b.n	8004764 <HAL_ADC_Init+0x178>
 8004762:	4a62      	ldr	r2, [pc, #392]	@ (80048ec <HAL_ADC_Init+0x300>)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f7ff fcfa 	bl	8004164 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	7f5b      	ldrb	r3, [r3, #29]
 8004774:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800477a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004780:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004786:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800478e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004790:	4313      	orrs	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800479a:	2b01      	cmp	r3, #1
 800479c:	d106      	bne.n	80047ac <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a2:	3b01      	subs	r3, #1
 80047a4:	045b      	lsls	r3, r3, #17
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d009      	beq.n	80047c8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	4b48      	ldr	r3, [pc, #288]	@ (80048f0 <HAL_ADC_Init+0x304>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6812      	ldr	r2, [r2, #0]
 80047d6:	69b9      	ldr	r1, [r7, #24]
 80047d8:	430b      	orrs	r3, r1
 80047da:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff fee5 	bl	80045c6 <LL_ADC_INJ_IsConversionOngoing>
 80047fc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d17f      	bne.n	8004904 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d17c      	bne.n	8004904 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800480e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004816:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004818:	4313      	orrs	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004826:	f023 0302 	bic.w	r3, r3, #2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	69b9      	ldr	r1, [r7, #24]
 8004830:	430b      	orrs	r3, r1
 8004832:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d017      	beq.n	800486c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800484a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004854:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004858:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6911      	ldr	r1, [r2, #16]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	430b      	orrs	r3, r1
 8004866:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800486a:	e013      	b.n	8004894 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691a      	ldr	r2, [r3, #16]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800487a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6812      	ldr	r2, [r2, #0]
 8004888:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800488c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004890:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800489a:	2b01      	cmp	r3, #1
 800489c:	d12a      	bne.n	80048f4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80048a8:	f023 0304 	bic.w	r3, r3, #4
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80048b4:	4311      	orrs	r1, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80048ba:	4311      	orrs	r1, r2
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048c0:	430a      	orrs	r2, r1
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f042 0201 	orr.w	r2, r2, #1
 80048cc:	611a      	str	r2, [r3, #16]
 80048ce:	e019      	b.n	8004904 <HAL_ADC_Init+0x318>
 80048d0:	20000020 	.word	0x20000020
 80048d4:	053e2d63 	.word	0x053e2d63
 80048d8:	50000100 	.word	0x50000100
 80048dc:	50000400 	.word	0x50000400
 80048e0:	50000500 	.word	0x50000500
 80048e4:	50000600 	.word	0x50000600
 80048e8:	50000300 	.word	0x50000300
 80048ec:	50000700 	.word	0x50000700
 80048f0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0201 	bic.w	r2, r2, #1
 8004902:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d10c      	bne.n	8004926 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004912:	f023 010f 	bic.w	r1, r3, #15
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	1e5a      	subs	r2, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	631a      	str	r2, [r3, #48]	@ 0x30
 8004924:	e007      	b.n	8004936 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 020f 	bic.w	r2, r2, #15
 8004934:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800493a:	f023 0303 	bic.w	r3, r3, #3
 800493e:	f043 0201 	orr.w	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004946:	e007      	b.n	8004958 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800494c:	f043 0210 	orr.w	r2, r3, #16
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004958:	7ffb      	ldrb	r3, [r7, #31]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3724      	adds	r7, #36	@ 0x24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd90      	pop	{r4, r7, pc}
 8004962:	bf00      	nop

08004964 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004978:	d004      	beq.n	8004984 <HAL_ADC_Start_DMA+0x20>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a5a      	ldr	r2, [pc, #360]	@ (8004ae8 <HAL_ADC_Start_DMA+0x184>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d101      	bne.n	8004988 <HAL_ADC_Start_DMA+0x24>
 8004984:	4b59      	ldr	r3, [pc, #356]	@ (8004aec <HAL_ADC_Start_DMA+0x188>)
 8004986:	e000      	b.n	800498a <HAL_ADC_Start_DMA+0x26>
 8004988:	4b59      	ldr	r3, [pc, #356]	@ (8004af0 <HAL_ADC_Start_DMA+0x18c>)
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff fd4a 	bl	8004424 <LL_ADC_GetMultimode>
 8004990:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f7ff fe02 	bl	80045a0 <LL_ADC_REG_IsConversionOngoing>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f040 809b 	bne.w	8004ada <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_ADC_Start_DMA+0x4e>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e096      	b.n	8004ae0 <HAL_ADC_Start_DMA+0x17c>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a4d      	ldr	r2, [pc, #308]	@ (8004af4 <HAL_ADC_Start_DMA+0x190>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d008      	beq.n	80049d6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d005      	beq.n	80049d6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	2b05      	cmp	r3, #5
 80049ce:	d002      	beq.n	80049d6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2b09      	cmp	r3, #9
 80049d4:	d17a      	bne.n	8004acc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 fcec 	bl	80053b4 <ADC_Enable>
 80049dc:	4603      	mov	r3, r0
 80049de:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80049e0:	7dfb      	ldrb	r3, [r7, #23]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d16d      	bne.n	8004ac2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049ee:	f023 0301 	bic.w	r3, r3, #1
 80049f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a3a      	ldr	r2, [pc, #232]	@ (8004ae8 <HAL_ADC_Start_DMA+0x184>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d009      	beq.n	8004a18 <HAL_ADC_Start_DMA+0xb4>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a3b      	ldr	r2, [pc, #236]	@ (8004af8 <HAL_ADC_Start_DMA+0x194>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d002      	beq.n	8004a14 <HAL_ADC_Start_DMA+0xb0>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	e003      	b.n	8004a1c <HAL_ADC_Start_DMA+0xb8>
 8004a14:	4b39      	ldr	r3, [pc, #228]	@ (8004afc <HAL_ADC_Start_DMA+0x198>)
 8004a16:	e001      	b.n	8004a1c <HAL_ADC_Start_DMA+0xb8>
 8004a18:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	6812      	ldr	r2, [r2, #0]
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d002      	beq.n	8004a2a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d105      	bne.n	8004a36 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d006      	beq.n	8004a50 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a46:	f023 0206 	bic.w	r2, r3, #6
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	661a      	str	r2, [r3, #96]	@ 0x60
 8004a4e:	e002      	b.n	8004a56 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5a:	4a29      	ldr	r2, [pc, #164]	@ (8004b00 <HAL_ADC_Start_DMA+0x19c>)
 8004a5c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a62:	4a28      	ldr	r2, [pc, #160]	@ (8004b04 <HAL_ADC_Start_DMA+0x1a0>)
 8004a64:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6a:	4a27      	ldr	r2, [pc, #156]	@ (8004b08 <HAL_ADC_Start_DMA+0x1a4>)
 8004a6c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	221c      	movs	r2, #28
 8004a74:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0210 	orr.w	r2, r2, #16
 8004a8c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0201 	orr.w	r2, r2, #1
 8004a9c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3340      	adds	r3, #64	@ 0x40
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f001 fd33 	bl	8006518 <HAL_DMA_Start_IT>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff fd5c 	bl	8004578 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004ac0:	e00d      	b.n	8004ade <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004aca:	e008      	b.n	8004ade <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004ad8:	e001      	b.n	8004ade <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004ada:	2302      	movs	r3, #2
 8004adc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	50000100 	.word	0x50000100
 8004aec:	50000300 	.word	0x50000300
 8004af0:	50000700 	.word	0x50000700
 8004af4:	50000600 	.word	0x50000600
 8004af8:	50000500 	.word	0x50000500
 8004afc:	50000400 	.word	0x50000400
 8004b00:	0800559f 	.word	0x0800559f
 8004b04:	08005677 	.word	0x08005677
 8004b08:	08005693 	.word	0x08005693

08004b0c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b0b6      	sub	sp, #216	@ 0xd8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d102      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x24>
 8004b52:	2302      	movs	r3, #2
 8004b54:	f000 bc13 	b.w	800537e <HAL_ADC_ConfigChannel+0x84a>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff fd1b 	bl	80045a0 <LL_ADC_REG_IsConversionOngoing>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f040 83f3 	bne.w	8005358 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6859      	ldr	r1, [r3, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f7ff fbd5 	bl	800432e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff fd09 	bl	80045a0 <LL_ADC_REG_IsConversionOngoing>
 8004b8e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff fd15 	bl	80045c6 <LL_ADC_INJ_IsConversionOngoing>
 8004b9c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ba0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f040 81d9 	bne.w	8004f5c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004baa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f040 81d4 	bne.w	8004f5c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bbc:	d10f      	bne.n	8004bde <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	4619      	mov	r1, r3
 8004bca:	f7ff fbdc 	bl	8004386 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff fb83 	bl	80042e2 <LL_ADC_SetSamplingTimeCommonConfig>
 8004bdc:	e00e      	b.n	8004bfc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6819      	ldr	r1, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	461a      	mov	r2, r3
 8004bec:	f7ff fbcb 	bl	8004386 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7ff fb73 	bl	80042e2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	695a      	ldr	r2, [r3, #20]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	08db      	lsrs	r3, r3, #3
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d022      	beq.n	8004c64 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	6919      	ldr	r1, [r3, #16]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c2e:	f7ff facd 	bl	80041cc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6818      	ldr	r0, [r3, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	6919      	ldr	r1, [r3, #16]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f7ff fb19 	bl	8004276 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6818      	ldr	r0, [r3, #0]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d102      	bne.n	8004c5a <HAL_ADC_ConfigChannel+0x126>
 8004c54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c58:	e000      	b.n	8004c5c <HAL_ADC_ConfigChannel+0x128>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	f7ff fb25 	bl	80042ac <LL_ADC_SetOffsetSaturation>
 8004c62:	e17b      	b.n	8004f5c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2100      	movs	r1, #0
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff fad2 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10a      	bne.n	8004c90 <HAL_ADC_ConfigChannel+0x15c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2100      	movs	r1, #0
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff fac7 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004c86:	4603      	mov	r3, r0
 8004c88:	0e9b      	lsrs	r3, r3, #26
 8004c8a:	f003 021f 	and.w	r2, r3, #31
 8004c8e:	e01e      	b.n	8004cce <HAL_ADC_ConfigChannel+0x19a>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2100      	movs	r1, #0
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7ff fabc 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004ca6:	fa93 f3a3 	rbit	r3, r3
 8004caa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004cae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004cb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004cb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004cbe:	2320      	movs	r3, #32
 8004cc0:	e004      	b.n	8004ccc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004cc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004cc6:	fab3 f383 	clz	r3, r3
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d105      	bne.n	8004ce6 <HAL_ADC_ConfigChannel+0x1b2>
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	0e9b      	lsrs	r3, r3, #26
 8004ce0:	f003 031f 	and.w	r3, r3, #31
 8004ce4:	e018      	b.n	8004d18 <HAL_ADC_ConfigChannel+0x1e4>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004cf2:	fa93 f3a3 	rbit	r3, r3
 8004cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004cfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004d02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004d0a:	2320      	movs	r3, #32
 8004d0c:	e004      	b.n	8004d18 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004d0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d12:	fab3 f383 	clz	r3, r3
 8004d16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d106      	bne.n	8004d2a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2200      	movs	r2, #0
 8004d22:	2100      	movs	r1, #0
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff fa8b 	bl	8004240 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2101      	movs	r1, #1
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff fa6f 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10a      	bne.n	8004d56 <HAL_ADC_ConfigChannel+0x222>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2101      	movs	r1, #1
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff fa64 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	0e9b      	lsrs	r3, r3, #26
 8004d50:	f003 021f 	and.w	r2, r3, #31
 8004d54:	e01e      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x260>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff fa59 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d6c:	fa93 f3a3 	rbit	r3, r3
 8004d70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004d74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004d7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004d84:	2320      	movs	r3, #32
 8004d86:	e004      	b.n	8004d92 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004d88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d8c:	fab3 f383 	clz	r3, r3
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d105      	bne.n	8004dac <HAL_ADC_ConfigChannel+0x278>
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	0e9b      	lsrs	r3, r3, #26
 8004da6:	f003 031f 	and.w	r3, r3, #31
 8004daa:	e018      	b.n	8004dde <HAL_ADC_ConfigChannel+0x2aa>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004db8:	fa93 f3a3 	rbit	r3, r3
 8004dbc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004dc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004dc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004dd0:	2320      	movs	r3, #32
 8004dd2:	e004      	b.n	8004dde <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004dd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004dd8:	fab3 f383 	clz	r3, r3
 8004ddc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d106      	bne.n	8004df0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2200      	movs	r2, #0
 8004de8:	2101      	movs	r1, #1
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7ff fa28 	bl	8004240 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2102      	movs	r1, #2
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff fa0c 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10a      	bne.n	8004e1c <HAL_ADC_ConfigChannel+0x2e8>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2102      	movs	r1, #2
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7ff fa01 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004e12:	4603      	mov	r3, r0
 8004e14:	0e9b      	lsrs	r3, r3, #26
 8004e16:	f003 021f 	and.w	r2, r3, #31
 8004e1a:	e01e      	b.n	8004e5a <HAL_ADC_ConfigChannel+0x326>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2102      	movs	r1, #2
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff f9f6 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e32:	fa93 f3a3 	rbit	r3, r3
 8004e36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004e3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004e42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004e4a:	2320      	movs	r3, #32
 8004e4c:	e004      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004e4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004e52:	fab3 f383 	clz	r3, r3
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d105      	bne.n	8004e72 <HAL_ADC_ConfigChannel+0x33e>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	0e9b      	lsrs	r3, r3, #26
 8004e6c:	f003 031f 	and.w	r3, r3, #31
 8004e70:	e016      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x36c>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e7e:	fa93 f3a3 	rbit	r3, r3
 8004e82:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004e84:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004e8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004e92:	2320      	movs	r3, #32
 8004e94:	e004      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004e96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e9a:	fab3 f383 	clz	r3, r3
 8004e9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d106      	bne.n	8004eb2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	2102      	movs	r1, #2
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff f9c7 	bl	8004240 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2103      	movs	r1, #3
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff f9ab 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10a      	bne.n	8004ede <HAL_ADC_ConfigChannel+0x3aa>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2103      	movs	r1, #3
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7ff f9a0 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	0e9b      	lsrs	r3, r3, #26
 8004ed8:	f003 021f 	and.w	r2, r3, #31
 8004edc:	e017      	b.n	8004f0e <HAL_ADC_ConfigChannel+0x3da>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2103      	movs	r1, #3
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff f995 	bl	8004214 <LL_ADC_GetOffsetChannel>
 8004eea:	4603      	mov	r3, r0
 8004eec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ef0:	fa93 f3a3 	rbit	r3, r3
 8004ef4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004ef6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ef8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004efa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004f00:	2320      	movs	r3, #32
 8004f02:	e003      	b.n	8004f0c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004f04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f06:	fab3 f383 	clz	r3, r3
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d105      	bne.n	8004f26 <HAL_ADC_ConfigChannel+0x3f2>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	0e9b      	lsrs	r3, r3, #26
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	e011      	b.n	8004f4a <HAL_ADC_ConfigChannel+0x416>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f2e:	fa93 f3a3 	rbit	r3, r3
 8004f32:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004f34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f36:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004f3e:	2320      	movs	r3, #32
 8004f40:	e003      	b.n	8004f4a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004f42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f44:	fab3 f383 	clz	r3, r3
 8004f48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d106      	bne.n	8004f5c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2200      	movs	r2, #0
 8004f54:	2103      	movs	r1, #3
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff f972 	bl	8004240 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff fae3 	bl	800452c <LL_ADC_IsEnabled>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f040 813d 	bne.w	80051e8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6818      	ldr	r0, [r3, #0]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	6819      	ldr	r1, [r3, #0]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	f7ff fa2e 	bl	80043dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4aa2      	ldr	r2, [pc, #648]	@ (8005210 <HAL_ADC_ConfigChannel+0x6dc>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	f040 812e 	bne.w	80051e8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10b      	bne.n	8004fb4 <HAL_ADC_ConfigChannel+0x480>
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	0e9b      	lsrs	r3, r3, #26
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	f003 031f 	and.w	r3, r3, #31
 8004fa8:	2b09      	cmp	r3, #9
 8004faa:	bf94      	ite	ls
 8004fac:	2301      	movls	r3, #1
 8004fae:	2300      	movhi	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	e019      	b.n	8004fe8 <HAL_ADC_ConfigChannel+0x4b4>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fbc:	fa93 f3a3 	rbit	r3, r3
 8004fc0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004fc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fc4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004fc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004fcc:	2320      	movs	r3, #32
 8004fce:	e003      	b.n	8004fd8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004fd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fd2:	fab3 f383 	clz	r3, r3
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	3301      	adds	r3, #1
 8004fda:	f003 031f 	and.w	r3, r3, #31
 8004fde:	2b09      	cmp	r3, #9
 8004fe0:	bf94      	ite	ls
 8004fe2:	2301      	movls	r3, #1
 8004fe4:	2300      	movhi	r3, #0
 8004fe6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d079      	beq.n	80050e0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d107      	bne.n	8005008 <HAL_ADC_ConfigChannel+0x4d4>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	0e9b      	lsrs	r3, r3, #26
 8004ffe:	3301      	adds	r3, #1
 8005000:	069b      	lsls	r3, r3, #26
 8005002:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005006:	e015      	b.n	8005034 <HAL_ADC_ConfigChannel+0x500>
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005010:	fa93 f3a3 	rbit	r3, r3
 8005014:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005018:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800501a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005020:	2320      	movs	r3, #32
 8005022:	e003      	b.n	800502c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005026:	fab3 f383 	clz	r3, r3
 800502a:	b2db      	uxtb	r3, r3
 800502c:	3301      	adds	r3, #1
 800502e:	069b      	lsls	r3, r3, #26
 8005030:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800503c:	2b00      	cmp	r3, #0
 800503e:	d109      	bne.n	8005054 <HAL_ADC_ConfigChannel+0x520>
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	0e9b      	lsrs	r3, r3, #26
 8005046:	3301      	adds	r3, #1
 8005048:	f003 031f 	and.w	r3, r3, #31
 800504c:	2101      	movs	r1, #1
 800504e:	fa01 f303 	lsl.w	r3, r1, r3
 8005052:	e017      	b.n	8005084 <HAL_ADC_ConfigChannel+0x550>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800505c:	fa93 f3a3 	rbit	r3, r3
 8005060:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005062:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005064:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005066:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800506c:	2320      	movs	r3, #32
 800506e:	e003      	b.n	8005078 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005070:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005072:	fab3 f383 	clz	r3, r3
 8005076:	b2db      	uxtb	r3, r3
 8005078:	3301      	adds	r3, #1
 800507a:	f003 031f 	and.w	r3, r3, #31
 800507e:	2101      	movs	r1, #1
 8005080:	fa01 f303 	lsl.w	r3, r1, r3
 8005084:	ea42 0103 	orr.w	r1, r2, r3
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10a      	bne.n	80050aa <HAL_ADC_ConfigChannel+0x576>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	0e9b      	lsrs	r3, r3, #26
 800509a:	3301      	adds	r3, #1
 800509c:	f003 021f 	and.w	r2, r3, #31
 80050a0:	4613      	mov	r3, r2
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	4413      	add	r3, r2
 80050a6:	051b      	lsls	r3, r3, #20
 80050a8:	e018      	b.n	80050dc <HAL_ADC_ConfigChannel+0x5a8>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b2:	fa93 f3a3 	rbit	r3, r3
 80050b6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80050b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80050bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80050c2:	2320      	movs	r3, #32
 80050c4:	e003      	b.n	80050ce <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80050c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050c8:	fab3 f383 	clz	r3, r3
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	3301      	adds	r3, #1
 80050d0:	f003 021f 	and.w	r2, r3, #31
 80050d4:	4613      	mov	r3, r2
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	4413      	add	r3, r2
 80050da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050dc:	430b      	orrs	r3, r1
 80050de:	e07e      	b.n	80051de <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d107      	bne.n	80050fc <HAL_ADC_ConfigChannel+0x5c8>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	0e9b      	lsrs	r3, r3, #26
 80050f2:	3301      	adds	r3, #1
 80050f4:	069b      	lsls	r3, r3, #26
 80050f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050fa:	e015      	b.n	8005128 <HAL_ADC_ConfigChannel+0x5f4>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005104:	fa93 f3a3 	rbit	r3, r3
 8005108:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800510a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800510e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005114:	2320      	movs	r3, #32
 8005116:	e003      	b.n	8005120 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511a:	fab3 f383 	clz	r3, r3
 800511e:	b2db      	uxtb	r3, r3
 8005120:	3301      	adds	r3, #1
 8005122:	069b      	lsls	r3, r3, #26
 8005124:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005130:	2b00      	cmp	r3, #0
 8005132:	d109      	bne.n	8005148 <HAL_ADC_ConfigChannel+0x614>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	0e9b      	lsrs	r3, r3, #26
 800513a:	3301      	adds	r3, #1
 800513c:	f003 031f 	and.w	r3, r3, #31
 8005140:	2101      	movs	r1, #1
 8005142:	fa01 f303 	lsl.w	r3, r1, r3
 8005146:	e017      	b.n	8005178 <HAL_ADC_ConfigChannel+0x644>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	fa93 f3a3 	rbit	r3, r3
 8005154:	61fb      	str	r3, [r7, #28]
  return result;
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005160:	2320      	movs	r3, #32
 8005162:	e003      	b.n	800516c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	fab3 f383 	clz	r3, r3
 800516a:	b2db      	uxtb	r3, r3
 800516c:	3301      	adds	r3, #1
 800516e:	f003 031f 	and.w	r3, r3, #31
 8005172:	2101      	movs	r1, #1
 8005174:	fa01 f303 	lsl.w	r3, r1, r3
 8005178:	ea42 0103 	orr.w	r1, r2, r3
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10d      	bne.n	80051a4 <HAL_ADC_ConfigChannel+0x670>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	0e9b      	lsrs	r3, r3, #26
 800518e:	3301      	adds	r3, #1
 8005190:	f003 021f 	and.w	r2, r3, #31
 8005194:	4613      	mov	r3, r2
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	4413      	add	r3, r2
 800519a:	3b1e      	subs	r3, #30
 800519c:	051b      	lsls	r3, r3, #20
 800519e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80051a2:	e01b      	b.n	80051dc <HAL_ADC_ConfigChannel+0x6a8>
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	fa93 f3a3 	rbit	r3, r3
 80051b0:	613b      	str	r3, [r7, #16]
  return result;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80051bc:	2320      	movs	r3, #32
 80051be:	e003      	b.n	80051c8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	fab3 f383 	clz	r3, r3
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	3301      	adds	r3, #1
 80051ca:	f003 021f 	and.w	r2, r3, #31
 80051ce:	4613      	mov	r3, r2
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	4413      	add	r3, r2
 80051d4:	3b1e      	subs	r3, #30
 80051d6:	051b      	lsls	r3, r3, #20
 80051d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051dc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051e2:	4619      	mov	r1, r3
 80051e4:	f7ff f8cf 	bl	8004386 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	4b09      	ldr	r3, [pc, #36]	@ (8005214 <HAL_ADC_ConfigChannel+0x6e0>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80be 	beq.w	8005372 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051fe:	d004      	beq.n	800520a <HAL_ADC_ConfigChannel+0x6d6>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a04      	ldr	r2, [pc, #16]	@ (8005218 <HAL_ADC_ConfigChannel+0x6e4>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d10a      	bne.n	8005220 <HAL_ADC_ConfigChannel+0x6ec>
 800520a:	4b04      	ldr	r3, [pc, #16]	@ (800521c <HAL_ADC_ConfigChannel+0x6e8>)
 800520c:	e009      	b.n	8005222 <HAL_ADC_ConfigChannel+0x6ee>
 800520e:	bf00      	nop
 8005210:	407f0000 	.word	0x407f0000
 8005214:	80080000 	.word	0x80080000
 8005218:	50000100 	.word	0x50000100
 800521c:	50000300 	.word	0x50000300
 8005220:	4b59      	ldr	r3, [pc, #356]	@ (8005388 <HAL_ADC_ConfigChannel+0x854>)
 8005222:	4618      	mov	r0, r3
 8005224:	f7fe ffc4 	bl	80041b0 <LL_ADC_GetCommonPathInternalCh>
 8005228:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a56      	ldr	r2, [pc, #344]	@ (800538c <HAL_ADC_ConfigChannel+0x858>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d004      	beq.n	8005240 <HAL_ADC_ConfigChannel+0x70c>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a55      	ldr	r2, [pc, #340]	@ (8005390 <HAL_ADC_ConfigChannel+0x85c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d13a      	bne.n	80052b6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005240:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005244:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d134      	bne.n	80052b6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005254:	d005      	beq.n	8005262 <HAL_ADC_ConfigChannel+0x72e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a4e      	ldr	r2, [pc, #312]	@ (8005394 <HAL_ADC_ConfigChannel+0x860>)
 800525c:	4293      	cmp	r3, r2
 800525e:	f040 8085 	bne.w	800536c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800526a:	d004      	beq.n	8005276 <HAL_ADC_ConfigChannel+0x742>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a49      	ldr	r2, [pc, #292]	@ (8005398 <HAL_ADC_ConfigChannel+0x864>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d101      	bne.n	800527a <HAL_ADC_ConfigChannel+0x746>
 8005276:	4a49      	ldr	r2, [pc, #292]	@ (800539c <HAL_ADC_ConfigChannel+0x868>)
 8005278:	e000      	b.n	800527c <HAL_ADC_ConfigChannel+0x748>
 800527a:	4a43      	ldr	r2, [pc, #268]	@ (8005388 <HAL_ADC_ConfigChannel+0x854>)
 800527c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005280:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005284:	4619      	mov	r1, r3
 8005286:	4610      	mov	r0, r2
 8005288:	f7fe ff7f 	bl	800418a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800528c:	4b44      	ldr	r3, [pc, #272]	@ (80053a0 <HAL_ADC_ConfigChannel+0x86c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	099b      	lsrs	r3, r3, #6
 8005292:	4a44      	ldr	r2, [pc, #272]	@ (80053a4 <HAL_ADC_ConfigChannel+0x870>)
 8005294:	fba2 2303 	umull	r2, r3, r2, r3
 8005298:	099b      	lsrs	r3, r3, #6
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	4613      	mov	r3, r2
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80052a6:	e002      	b.n	80052ae <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1f9      	bne.n	80052a8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052b4:	e05a      	b.n	800536c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a3b      	ldr	r2, [pc, #236]	@ (80053a8 <HAL_ADC_ConfigChannel+0x874>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d125      	bne.n	800530c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80052c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d11f      	bne.n	800530c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a31      	ldr	r2, [pc, #196]	@ (8005398 <HAL_ADC_ConfigChannel+0x864>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d104      	bne.n	80052e0 <HAL_ADC_ConfigChannel+0x7ac>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a34      	ldr	r2, [pc, #208]	@ (80053ac <HAL_ADC_ConfigChannel+0x878>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d047      	beq.n	8005370 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052e8:	d004      	beq.n	80052f4 <HAL_ADC_ConfigChannel+0x7c0>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005398 <HAL_ADC_ConfigChannel+0x864>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d101      	bne.n	80052f8 <HAL_ADC_ConfigChannel+0x7c4>
 80052f4:	4a29      	ldr	r2, [pc, #164]	@ (800539c <HAL_ADC_ConfigChannel+0x868>)
 80052f6:	e000      	b.n	80052fa <HAL_ADC_ConfigChannel+0x7c6>
 80052f8:	4a23      	ldr	r2, [pc, #140]	@ (8005388 <HAL_ADC_ConfigChannel+0x854>)
 80052fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005302:	4619      	mov	r1, r3
 8005304:	4610      	mov	r0, r2
 8005306:	f7fe ff40 	bl	800418a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800530a:	e031      	b.n	8005370 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a27      	ldr	r2, [pc, #156]	@ (80053b0 <HAL_ADC_ConfigChannel+0x87c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d12d      	bne.n	8005372 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005316:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800531a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d127      	bne.n	8005372 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a1c      	ldr	r2, [pc, #112]	@ (8005398 <HAL_ADC_ConfigChannel+0x864>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d022      	beq.n	8005372 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005334:	d004      	beq.n	8005340 <HAL_ADC_ConfigChannel+0x80c>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a17      	ldr	r2, [pc, #92]	@ (8005398 <HAL_ADC_ConfigChannel+0x864>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d101      	bne.n	8005344 <HAL_ADC_ConfigChannel+0x810>
 8005340:	4a16      	ldr	r2, [pc, #88]	@ (800539c <HAL_ADC_ConfigChannel+0x868>)
 8005342:	e000      	b.n	8005346 <HAL_ADC_ConfigChannel+0x812>
 8005344:	4a10      	ldr	r2, [pc, #64]	@ (8005388 <HAL_ADC_ConfigChannel+0x854>)
 8005346:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800534a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800534e:	4619      	mov	r1, r3
 8005350:	4610      	mov	r0, r2
 8005352:	f7fe ff1a 	bl	800418a <LL_ADC_SetCommonPathInternalCh>
 8005356:	e00c      	b.n	8005372 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800535c:	f043 0220 	orr.w	r2, r3, #32
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800536a:	e002      	b.n	8005372 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800536c:	bf00      	nop
 800536e:	e000      	b.n	8005372 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005370:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800537a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800537e:	4618      	mov	r0, r3
 8005380:	37d8      	adds	r7, #216	@ 0xd8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	50000700 	.word	0x50000700
 800538c:	c3210000 	.word	0xc3210000
 8005390:	90c00010 	.word	0x90c00010
 8005394:	50000600 	.word	0x50000600
 8005398:	50000100 	.word	0x50000100
 800539c:	50000300 	.word	0x50000300
 80053a0:	20000020 	.word	0x20000020
 80053a4:	053e2d63 	.word	0x053e2d63
 80053a8:	c7520000 	.word	0xc7520000
 80053ac:	50000500 	.word	0x50000500
 80053b0:	cb840000 	.word	0xcb840000

080053b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80053bc:	2300      	movs	r3, #0
 80053be:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7ff f8b1 	bl	800452c <LL_ADC_IsEnabled>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d176      	bne.n	80054be <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	4b3c      	ldr	r3, [pc, #240]	@ (80054c8 <ADC_Enable+0x114>)
 80053d8:	4013      	ands	r3, r2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00d      	beq.n	80053fa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e2:	f043 0210 	orr.w	r2, r3, #16
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ee:	f043 0201 	orr.w	r2, r3, #1
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e062      	b.n	80054c0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff f86c 	bl	80044dc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800540c:	d004      	beq.n	8005418 <ADC_Enable+0x64>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a2e      	ldr	r2, [pc, #184]	@ (80054cc <ADC_Enable+0x118>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d101      	bne.n	800541c <ADC_Enable+0x68>
 8005418:	4b2d      	ldr	r3, [pc, #180]	@ (80054d0 <ADC_Enable+0x11c>)
 800541a:	e000      	b.n	800541e <ADC_Enable+0x6a>
 800541c:	4b2d      	ldr	r3, [pc, #180]	@ (80054d4 <ADC_Enable+0x120>)
 800541e:	4618      	mov	r0, r3
 8005420:	f7fe fec6 	bl	80041b0 <LL_ADC_GetCommonPathInternalCh>
 8005424:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005426:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800542a:	2b00      	cmp	r3, #0
 800542c:	d013      	beq.n	8005456 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800542e:	4b2a      	ldr	r3, [pc, #168]	@ (80054d8 <ADC_Enable+0x124>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	099b      	lsrs	r3, r3, #6
 8005434:	4a29      	ldr	r2, [pc, #164]	@ (80054dc <ADC_Enable+0x128>)
 8005436:	fba2 2303 	umull	r2, r3, r2, r3
 800543a:	099b      	lsrs	r3, r3, #6
 800543c:	1c5a      	adds	r2, r3, #1
 800543e:	4613      	mov	r3, r2
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	4413      	add	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005448:	e002      	b.n	8005450 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	3b01      	subs	r3, #1
 800544e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f9      	bne.n	800544a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005456:	f7fe fe57 	bl	8004108 <HAL_GetTick>
 800545a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800545c:	e028      	b.n	80054b0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff f862 	bl	800452c <LL_ADC_IsEnabled>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d104      	bne.n	8005478 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff f832 	bl	80044dc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005478:	f7fe fe46 	bl	8004108 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d914      	bls.n	80054b0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b01      	cmp	r3, #1
 8005492:	d00d      	beq.n	80054b0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005498:	f043 0210 	orr.w	r2, r3, #16
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054a4:	f043 0201 	orr.w	r2, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e007      	b.n	80054c0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d1cf      	bne.n	800545e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	8000003f 	.word	0x8000003f
 80054cc:	50000100 	.word	0x50000100
 80054d0:	50000300 	.word	0x50000300
 80054d4:	50000700 	.word	0x50000700
 80054d8:	20000020 	.word	0x20000020
 80054dc:	053e2d63 	.word	0x053e2d63

080054e0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff f830 	bl	8004552 <LL_ADC_IsDisableOngoing>
 80054f2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7ff f817 	bl	800452c <LL_ADC_IsEnabled>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d047      	beq.n	8005594 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d144      	bne.n	8005594 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f003 030d 	and.w	r3, r3, #13
 8005514:	2b01      	cmp	r3, #1
 8005516:	d10c      	bne.n	8005532 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4618      	mov	r0, r3
 800551e:	f7fe fff1 	bl	8004504 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2203      	movs	r2, #3
 8005528:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800552a:	f7fe fded 	bl	8004108 <HAL_GetTick>
 800552e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005530:	e029      	b.n	8005586 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005536:	f043 0210 	orr.w	r2, r3, #16
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005542:	f043 0201 	orr.w	r2, r3, #1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e023      	b.n	8005596 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800554e:	f7fe fddb 	bl	8004108 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d914      	bls.n	8005586 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00d      	beq.n	8005586 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800556e:	f043 0210 	orr.w	r2, r3, #16
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800557a:	f043 0201 	orr.w	r2, r3, #1
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e007      	b.n	8005596 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1dc      	bne.n	800554e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b084      	sub	sp, #16
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d14b      	bne.n	8005650 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0308 	and.w	r3, r3, #8
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d021      	beq.n	8005616 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fe fe96 	bl	8004308 <LL_ADC_REG_IsTriggerSourceSWStart>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d032      	beq.n	8005648 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d12b      	bne.n	8005648 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005600:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d11f      	bne.n	8005648 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800560c:	f043 0201 	orr.w	r2, r3, #1
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005614:	e018      	b.n	8005648 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d111      	bne.n	8005648 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005628:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005634:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d105      	bne.n	8005648 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005640:	f043 0201 	orr.w	r2, r3, #1
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f7fc fe6b 	bl	8002324 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800564e:	e00e      	b.n	800566e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005654:	f003 0310 	and.w	r3, r3, #16
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f7ff fa5f 	bl	8004b20 <HAL_ADC_ErrorCallback>
}
 8005662:	e004      	b.n	800566e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	4798      	blx	r3
}
 800566e:	bf00      	nop
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b084      	sub	sp, #16
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005682:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f7ff fa41 	bl	8004b0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800568a:	bf00      	nop
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056a4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056b0:	f043 0204 	orr.w	r2, r3, #4
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f7ff fa31 	bl	8004b20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80056be:	bf00      	nop
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <LL_ADC_IsEnabled>:
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d101      	bne.n	80056de <LL_ADC_IsEnabled+0x18>
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <LL_ADC_IsEnabled+0x1a>
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <LL_ADC_StartCalibration>:
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80056fe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005708:	4313      	orrs	r3, r2
 800570a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	609a      	str	r2, [r3, #8]
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <LL_ADC_IsCalibrationOnGoing>:
{
 800571e:	b480      	push	{r7}
 8005720:	b083      	sub	sp, #12
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800572e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005732:	d101      	bne.n	8005738 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005734:	2301      	movs	r3, #1
 8005736:	e000      	b.n	800573a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <LL_ADC_REG_IsConversionOngoing>:
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	2b04      	cmp	r3, #4
 8005758:	d101      	bne.n	800575e <LL_ADC_REG_IsConversionOngoing+0x18>
 800575a:	2301      	movs	r3, #1
 800575c:	e000      	b.n	8005760 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005776:	2300      	movs	r3, #0
 8005778:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005780:	2b01      	cmp	r3, #1
 8005782:	d101      	bne.n	8005788 <HAL_ADCEx_Calibration_Start+0x1c>
 8005784:	2302      	movs	r3, #2
 8005786:	e04d      	b.n	8005824 <HAL_ADCEx_Calibration_Start+0xb8>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff fea5 	bl	80054e0 <ADC_Disable>
 8005796:	4603      	mov	r3, r0
 8005798:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800579a:	7bfb      	ldrb	r3, [r7, #15]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d136      	bne.n	800580e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80057a8:	f023 0302 	bic.w	r3, r3, #2
 80057ac:	f043 0202 	orr.w	r2, r3, #2
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6839      	ldr	r1, [r7, #0]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7ff ff96 	bl	80056ec <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80057c0:	e014      	b.n	80057ec <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	3301      	adds	r3, #1
 80057c6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4a18      	ldr	r2, [pc, #96]	@ (800582c <HAL_ADCEx_Calibration_Start+0xc0>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d90d      	bls.n	80057ec <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d4:	f023 0312 	bic.w	r3, r3, #18
 80057d8:	f043 0210 	orr.w	r2, r3, #16
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e01b      	b.n	8005824 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff ff94 	bl	800571e <LL_ADC_IsCalibrationOnGoing>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1e2      	bne.n	80057c2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005800:	f023 0303 	bic.w	r3, r3, #3
 8005804:	f043 0201 	orr.w	r2, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800580c:	e005      	b.n	800581a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005812:	f043 0210 	orr.w	r2, r3, #16
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005822:	7bfb      	ldrb	r3, [r7, #15]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	0004de01 	.word	0x0004de01

08005830 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005830:	b590      	push	{r4, r7, lr}
 8005832:	b0a1      	sub	sp, #132	@ 0x84
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005846:	2b01      	cmp	r3, #1
 8005848:	d101      	bne.n	800584e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800584a:	2302      	movs	r3, #2
 800584c:	e0e7      	b.n	8005a1e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005856:	2300      	movs	r3, #0
 8005858:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800585a:	2300      	movs	r3, #0
 800585c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005866:	d102      	bne.n	800586e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005868:	4b6f      	ldr	r3, [pc, #444]	@ (8005a28 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800586a:	60bb      	str	r3, [r7, #8]
 800586c:	e009      	b.n	8005882 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a6e      	ldr	r2, [pc, #440]	@ (8005a2c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d102      	bne.n	800587e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005878:	4b6d      	ldr	r3, [pc, #436]	@ (8005a30 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800587a:	60bb      	str	r3, [r7, #8]
 800587c:	e001      	b.n	8005882 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800587e:	2300      	movs	r3, #0
 8005880:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10b      	bne.n	80058a0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800588c:	f043 0220 	orr.w	r2, r3, #32
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e0be      	b.n	8005a1e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff ff4f 	bl	8005746 <LL_ADC_REG_IsConversionOngoing>
 80058a8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7ff ff49 	bl	8005746 <LL_ADC_REG_IsConversionOngoing>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f040 80a0 	bne.w	80059fc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80058bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f040 809c 	bne.w	80059fc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058cc:	d004      	beq.n	80058d8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a55      	ldr	r2, [pc, #340]	@ (8005a28 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d101      	bne.n	80058dc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80058d8:	4b56      	ldr	r3, [pc, #344]	@ (8005a34 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80058da:	e000      	b.n	80058de <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80058dc:	4b56      	ldr	r3, [pc, #344]	@ (8005a38 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80058de:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d04b      	beq.n	8005980 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80058e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	6859      	ldr	r1, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80058fa:	035b      	lsls	r3, r3, #13
 80058fc:	430b      	orrs	r3, r1
 80058fe:	431a      	orrs	r2, r3
 8005900:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005902:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800590c:	d004      	beq.n	8005918 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a45      	ldr	r2, [pc, #276]	@ (8005a28 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d10f      	bne.n	8005938 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005918:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800591c:	f7ff fed3 	bl	80056c6 <LL_ADC_IsEnabled>
 8005920:	4604      	mov	r4, r0
 8005922:	4841      	ldr	r0, [pc, #260]	@ (8005a28 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005924:	f7ff fecf 	bl	80056c6 <LL_ADC_IsEnabled>
 8005928:	4603      	mov	r3, r0
 800592a:	4323      	orrs	r3, r4
 800592c:	2b00      	cmp	r3, #0
 800592e:	bf0c      	ite	eq
 8005930:	2301      	moveq	r3, #1
 8005932:	2300      	movne	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	e012      	b.n	800595e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005938:	483c      	ldr	r0, [pc, #240]	@ (8005a2c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800593a:	f7ff fec4 	bl	80056c6 <LL_ADC_IsEnabled>
 800593e:	4604      	mov	r4, r0
 8005940:	483b      	ldr	r0, [pc, #236]	@ (8005a30 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005942:	f7ff fec0 	bl	80056c6 <LL_ADC_IsEnabled>
 8005946:	4603      	mov	r3, r0
 8005948:	431c      	orrs	r4, r3
 800594a:	483c      	ldr	r0, [pc, #240]	@ (8005a3c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800594c:	f7ff febb 	bl	80056c6 <LL_ADC_IsEnabled>
 8005950:	4603      	mov	r3, r0
 8005952:	4323      	orrs	r3, r4
 8005954:	2b00      	cmp	r3, #0
 8005956:	bf0c      	ite	eq
 8005958:	2301      	moveq	r3, #1
 800595a:	2300      	movne	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d056      	beq.n	8005a10 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005962:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800596a:	f023 030f 	bic.w	r3, r3, #15
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	6811      	ldr	r1, [r2, #0]
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	6892      	ldr	r2, [r2, #8]
 8005976:	430a      	orrs	r2, r1
 8005978:	431a      	orrs	r2, r3
 800597a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800597c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800597e:	e047      	b.n	8005a10 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005980:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005988:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800598a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005994:	d004      	beq.n	80059a0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a23      	ldr	r2, [pc, #140]	@ (8005a28 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d10f      	bne.n	80059c0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80059a0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80059a4:	f7ff fe8f 	bl	80056c6 <LL_ADC_IsEnabled>
 80059a8:	4604      	mov	r4, r0
 80059aa:	481f      	ldr	r0, [pc, #124]	@ (8005a28 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80059ac:	f7ff fe8b 	bl	80056c6 <LL_ADC_IsEnabled>
 80059b0:	4603      	mov	r3, r0
 80059b2:	4323      	orrs	r3, r4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	bf0c      	ite	eq
 80059b8:	2301      	moveq	r3, #1
 80059ba:	2300      	movne	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	e012      	b.n	80059e6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80059c0:	481a      	ldr	r0, [pc, #104]	@ (8005a2c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80059c2:	f7ff fe80 	bl	80056c6 <LL_ADC_IsEnabled>
 80059c6:	4604      	mov	r4, r0
 80059c8:	4819      	ldr	r0, [pc, #100]	@ (8005a30 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80059ca:	f7ff fe7c 	bl	80056c6 <LL_ADC_IsEnabled>
 80059ce:	4603      	mov	r3, r0
 80059d0:	431c      	orrs	r4, r3
 80059d2:	481a      	ldr	r0, [pc, #104]	@ (8005a3c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80059d4:	f7ff fe77 	bl	80056c6 <LL_ADC_IsEnabled>
 80059d8:	4603      	mov	r3, r0
 80059da:	4323      	orrs	r3, r4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	bf0c      	ite	eq
 80059e0:	2301      	moveq	r3, #1
 80059e2:	2300      	movne	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d012      	beq.n	8005a10 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80059ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80059f2:	f023 030f 	bic.w	r3, r3, #15
 80059f6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80059f8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80059fa:	e009      	b.n	8005a10 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a00:	f043 0220 	orr.w	r2, r3, #32
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005a0e:	e000      	b.n	8005a12 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005a10:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005a1a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3784      	adds	r7, #132	@ 0x84
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd90      	pop	{r4, r7, pc}
 8005a26:	bf00      	nop
 8005a28:	50000100 	.word	0x50000100
 8005a2c:	50000400 	.word	0x50000400
 8005a30:	50000500 	.word	0x50000500
 8005a34:	50000300 	.word	0x50000300
 8005a38:	50000700 	.word	0x50000700
 8005a3c:	50000600 	.word	0x50000600

08005a40 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e023      	b.n	8005a9a <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d106      	bne.n	8005a6c <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7fd fec8 	bl	80037fc <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <HAL_CORDIC_CalculateCpltCallback>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
__weak void HAL_CORDIC_CalculateCpltCallback(CORDIC_HandleTypeDef *hcordic)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  UNUSED(hcordic);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CORDIC_CalculateCpltCallback can be implemented in the user file
   */
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <HAL_CORDIC_IRQHandler>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
void HAL_CORDIC_IRQHandler(CORDIC_HandleTypeDef *hcordic)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b082      	sub	sp, #8
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  /* Check if calculation complete interrupt is enabled and if result ready
     flag is raised */
  if (__HAL_CORDIC_GET_IT_SOURCE(hcordic, CORDIC_IT_IEN) != 0U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d039      	beq.n	8005b40 <HAL_CORDIC_IRQHandler+0x8a>
  {
    if (__HAL_CORDIC_GET_FLAG(hcordic, CORDIC_FLAG_RRDY) != 0U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ada:	d101      	bne.n	8005ae0 <HAL_CORDIC_IRQHandler+0x2a>
 8005adc:	2301      	movs	r3, #1
 8005ade:	e000      	b.n	8005ae2 <HAL_CORDIC_IRQHandler+0x2c>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d02c      	beq.n	8005b40 <HAL_CORDIC_IRQHandler+0x8a>
    {
      /* Decrement number of calculations to get */
      hcordic->NbCalcToGet--;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	1e5a      	subs	r2, r3, #1
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	611a      	str	r2, [r3, #16]

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &(hcordic->pOutBuff));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3308      	adds	r3, #8
 8005af4:	4619      	mov	r1, r3
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f84f 	bl	8005b9a <CORDIC_ReadOutDataIncrementPtr>

      /* Check if calculations are still to be ordered */
      if (hcordic->NbCalcToOrder > 0U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00a      	beq.n	8005b1a <HAL_CORDIC_IRQHandler+0x64>
      {
        /* Decrement number of calculations to order */
        hcordic->NbCalcToOrder--;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	1e5a      	subs	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	60da      	str	r2, [r3, #12]

        /* Continue the processing by providing another write of input data
           in the Write Data register, and increment input buffer pointer */
        CORDIC_WriteInDataIncrementPtr(hcordic, &(hcordic->pInBuff));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	3304      	adds	r3, #4
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f817 	bl	8005b48 <CORDIC_WriteInDataIncrementPtr>
      }

      /* Check if all calculations results are got */
      if (hcordic->NbCalcToGet == 0U)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10e      	bne.n	8005b40 <HAL_CORDIC_IRQHandler+0x8a>
      {
        /* Disable Result Ready Interrupt */
        __HAL_CORDIC_DISABLE_IT(hcordic, CORDIC_IT_IEN);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005b30:	601a      	str	r2, [r3, #0]

        /* Change the CORDIC state */
        hcordic->State = HAL_CORDIC_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
#if USE_HAL_CORDIC_REGISTER_CALLBACKS == 1
        /*Call registered callback*/
        hcordic->CalculateCpltCallback(hcordic);
#else
        /*Call legacy weak callback*/
        HAL_CORDIC_CalculateCpltCallback(hcordic);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7ff ffb1 	bl	8005aa2 <HAL_CORDIC_CalculateCpltCallback>
#endif /* USE_HAL_CORDIC_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005b40:	bf00      	nop
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, const int32_t **ppInBuff)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	1d1a      	adds	r2, r3, #4
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b76:	d10a      	bne.n	8005b8e <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	1d1a      	adds	r2, r3, #4
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	601a      	str	r2, [r3, #0]
  }
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	1d1a      	adds	r2, r3, #4
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bc4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005bc8:	d10a      	bne.n	8005be0 <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	1d1a      	adds	r2, r3, #4
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	601a      	str	r2, [r3, #0]
  }
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f003 0307 	and.w	r3, r3, #7
 8005bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8005c30 <__NVIC_SetPriorityGrouping+0x44>)
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005c08:	4013      	ands	r3, r2
 8005c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c1e:	4a04      	ldr	r2, [pc, #16]	@ (8005c30 <__NVIC_SetPriorityGrouping+0x44>)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	60d3      	str	r3, [r2, #12]
}
 8005c24:	bf00      	nop
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	e000ed00 	.word	0xe000ed00

08005c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c38:	4b04      	ldr	r3, [pc, #16]	@ (8005c4c <__NVIC_GetPriorityGrouping+0x18>)
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	0a1b      	lsrs	r3, r3, #8
 8005c3e:	f003 0307 	and.w	r3, r3, #7
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	e000ed00 	.word	0xe000ed00

08005c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	4603      	mov	r3, r0
 8005c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	db0b      	blt.n	8005c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	f003 021f 	and.w	r2, r3, #31
 8005c68:	4907      	ldr	r1, [pc, #28]	@ (8005c88 <__NVIC_EnableIRQ+0x38>)
 8005c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c6e:	095b      	lsrs	r3, r3, #5
 8005c70:	2001      	movs	r0, #1
 8005c72:	fa00 f202 	lsl.w	r2, r0, r2
 8005c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	e000e100 	.word	0xe000e100

08005c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	4603      	mov	r3, r0
 8005c94:	6039      	str	r1, [r7, #0]
 8005c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	db0a      	blt.n	8005cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	490c      	ldr	r1, [pc, #48]	@ (8005cd8 <__NVIC_SetPriority+0x4c>)
 8005ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005caa:	0112      	lsls	r2, r2, #4
 8005cac:	b2d2      	uxtb	r2, r2
 8005cae:	440b      	add	r3, r1
 8005cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005cb4:	e00a      	b.n	8005ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	4908      	ldr	r1, [pc, #32]	@ (8005cdc <__NVIC_SetPriority+0x50>)
 8005cbc:	79fb      	ldrb	r3, [r7, #7]
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	3b04      	subs	r3, #4
 8005cc4:	0112      	lsls	r2, r2, #4
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	440b      	add	r3, r1
 8005cca:	761a      	strb	r2, [r3, #24]
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	e000e100 	.word	0xe000e100
 8005cdc:	e000ed00 	.word	0xe000ed00

08005ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b089      	sub	sp, #36	@ 0x24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f1c3 0307 	rsb	r3, r3, #7
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	bf28      	it	cs
 8005cfe:	2304      	movcs	r3, #4
 8005d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	3304      	adds	r3, #4
 8005d06:	2b06      	cmp	r3, #6
 8005d08:	d902      	bls.n	8005d10 <NVIC_EncodePriority+0x30>
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	3b03      	subs	r3, #3
 8005d0e:	e000      	b.n	8005d12 <NVIC_EncodePriority+0x32>
 8005d10:	2300      	movs	r3, #0
 8005d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d14:	f04f 32ff 	mov.w	r2, #4294967295
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1e:	43da      	mvns	r2, r3
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	401a      	ands	r2, r3
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d28:	f04f 31ff 	mov.w	r1, #4294967295
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d32:	43d9      	mvns	r1, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d38:	4313      	orrs	r3, r2
         );
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3724      	adds	r7, #36	@ 0x24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
	...

08005d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d58:	d301      	bcc.n	8005d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e00f      	b.n	8005d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8005d88 <SysTick_Config+0x40>)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3b01      	subs	r3, #1
 8005d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d66:	210f      	movs	r1, #15
 8005d68:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6c:	f7ff ff8e 	bl	8005c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d70:	4b05      	ldr	r3, [pc, #20]	@ (8005d88 <SysTick_Config+0x40>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d76:	4b04      	ldr	r3, [pc, #16]	@ (8005d88 <SysTick_Config+0x40>)
 8005d78:	2207      	movs	r2, #7
 8005d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	e000e010 	.word	0xe000e010

08005d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7ff ff29 	bl	8005bec <__NVIC_SetPriorityGrouping>
}
 8005d9a:	bf00      	nop
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b086      	sub	sp, #24
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	4603      	mov	r3, r0
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	607a      	str	r2, [r7, #4]
 8005dae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005db0:	f7ff ff40 	bl	8005c34 <__NVIC_GetPriorityGrouping>
 8005db4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	6978      	ldr	r0, [r7, #20]
 8005dbc:	f7ff ff90 	bl	8005ce0 <NVIC_EncodePriority>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff ff5f 	bl	8005c8c <__NVIC_SetPriority>
}
 8005dce:	bf00      	nop
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b082      	sub	sp, #8
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	4603      	mov	r3, r0
 8005dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7ff ff33 	bl	8005c50 <__NVIC_EnableIRQ>
}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b082      	sub	sp, #8
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7ff ffa4 	bl	8005d48 <SysTick_Config>
 8005e00:	4603      	mov	r3, r0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b082      	sub	sp, #8
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e014      	b.n	8005e46 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	791b      	ldrb	r3, [r3, #4]
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d105      	bne.n	8005e32 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7fd fd0b 	bl	8003848 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2202      	movs	r2, #2
 8005e36:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
	...

08005e50 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e056      	b.n	8005f12 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	795b      	ldrb	r3, [r3, #5]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d101      	bne.n	8005e70 <HAL_DAC_Start+0x20>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e050      	b.n	8005f12 <HAL_DAC_Start+0xc2>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2202      	movs	r2, #2
 8005e7a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6819      	ldr	r1, [r3, #0]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	f003 0310 	and.w	r3, r3, #16
 8005e88:	2201      	movs	r2, #1
 8005e8a:	409a      	lsls	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e94:	4b22      	ldr	r3, [pc, #136]	@ (8005f20 <HAL_DAC_Start+0xd0>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	099b      	lsrs	r3, r3, #6
 8005e9a:	4a22      	ldr	r2, [pc, #136]	@ (8005f24 <HAL_DAC_Start+0xd4>)
 8005e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea0:	099b      	lsrs	r3, r3, #6
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005ea6:	e002      	b.n	8005eae <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1f9      	bne.n	8005ea8 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10f      	bne.n	8005eda <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d11d      	bne.n	8005f04 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0201 	orr.w	r2, r2, #1
 8005ed6:	605a      	str	r2, [r3, #4]
 8005ed8:	e014      	b.n	8005f04 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	f003 0310 	and.w	r3, r3, #16
 8005eea:	2102      	movs	r1, #2
 8005eec:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d107      	bne.n	8005f04 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0202 	orr.w	r2, r2, #2
 8005f02:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	20000020 	.word	0x20000020
 8005f24:	053e2d63 	.word	0x053e2d63

08005f28 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f3e:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01d      	beq.n	8005f86 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d018      	beq.n	8005f86 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2204      	movs	r2, #4
 8005f58:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f043 0201 	orr.w	r2, r3, #1
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005f6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005f7e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f854 	bl	800602e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d01d      	beq.n	8005fcc <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d018      	beq.n	8005fcc <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2204      	movs	r2, #4
 8005f9e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	f043 0202 	orr.w	r2, r3, #2
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005fb4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005fc4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f9f4 	bl	80063b4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
 8005fe0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e018      	b.n	8006022 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d105      	bne.n	800600e <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4413      	add	r3, r2
 8006008:	3308      	adds	r3, #8
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	e004      	b.n	8006018 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4413      	add	r3, r2
 8006014:	3314      	adds	r3, #20
 8006016:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	461a      	mov	r2, r3
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	371c      	adds	r7, #28
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
	...

08006044 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08a      	sub	sp, #40	@ 0x28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <HAL_DAC_ConfigChannel+0x1c>
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e19e      	b.n	80063a2 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	795b      	ldrb	r3, [r3, #5]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d101      	bne.n	8006070 <HAL_DAC_ConfigChannel+0x2c>
 800606c:	2302      	movs	r3, #2
 800606e:	e198      	b.n	80063a2 <HAL_DAC_ConfigChannel+0x35e>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2201      	movs	r2, #1
 8006074:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2202      	movs	r2, #2
 800607a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	2b04      	cmp	r3, #4
 8006082:	d17a      	bne.n	800617a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006084:	f7fe f840 	bl	8004108 <HAL_GetTick>
 8006088:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d13d      	bne.n	800610c <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006090:	e018      	b.n	80060c4 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006092:	f7fe f839 	bl	8004108 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b01      	cmp	r3, #1
 800609e:	d911      	bls.n	80060c4 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00a      	beq.n	80060c4 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	f043 0208 	orr.w	r2, r3, #8
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2203      	movs	r2, #3
 80060be:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e16e      	b.n	80063a2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1df      	bne.n	8006092 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80060da:	641a      	str	r2, [r3, #64]	@ 0x40
 80060dc:	e020      	b.n	8006120 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80060de:	f7fe f813 	bl	8004108 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d90f      	bls.n	800610c <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	da0a      	bge.n	800610c <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	f043 0208 	orr.w	r2, r3, #8
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2203      	movs	r2, #3
 8006106:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e14a      	b.n	80063a2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006112:	2b00      	cmp	r3, #0
 8006114:	dbe3      	blt.n	80060de <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800611e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8006130:	fa01 f303 	lsl.w	r3, r1, r3
 8006134:	43db      	mvns	r3, r3
 8006136:	ea02 0103 	and.w	r1, r2, r3
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f003 0310 	and.w	r3, r3, #16
 8006144:	409a      	lsls	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f003 0310 	and.w	r3, r3, #16
 800615a:	21ff      	movs	r1, #255	@ 0xff
 800615c:	fa01 f303 	lsl.w	r3, r1, r3
 8006160:	43db      	mvns	r3, r3
 8006162:	ea02 0103 	and.w	r1, r2, r3
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f003 0310 	and.w	r3, r3, #16
 8006170:	409a      	lsls	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d11d      	bne.n	80061be <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006188:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f003 0310 	and.w	r3, r3, #16
 8006190:	221f      	movs	r2, #31
 8006192:	fa02 f303 	lsl.w	r3, r2, r3
 8006196:	43db      	mvns	r3, r3
 8006198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800619a:	4013      	ands	r3, r2
 800619c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f003 0310 	and.w	r3, r3, #16
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	fa02 f303 	lsl.w	r3, r2, r3
 80061b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061b2:	4313      	orrs	r3, r2
 80061b4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061c4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f003 0310 	and.w	r3, r3, #16
 80061cc:	2207      	movs	r2, #7
 80061ce:	fa02 f303 	lsl.w	r3, r2, r3
 80061d2:	43db      	mvns	r3, r3
 80061d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061d6:	4013      	ands	r3, r2
 80061d8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d102      	bne.n	80061e8 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	623b      	str	r3, [r7, #32]
 80061e6:	e00f      	b.n	8006208 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d102      	bne.n	80061f6 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80061f0:	2301      	movs	r3, #1
 80061f2:	623b      	str	r3, [r7, #32]
 80061f4:	e008      	b.n	8006208 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d102      	bne.n	8006204 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80061fe:	2301      	movs	r3, #1
 8006200:	623b      	str	r3, [r7, #32]
 8006202:	e001      	b.n	8006208 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006204:	2300      	movs	r3, #0
 8006206:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	4313      	orrs	r3, r2
 8006212:	6a3a      	ldr	r2, [r7, #32]
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f003 0310 	and.w	r3, r3, #16
 800621e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006222:	fa02 f303 	lsl.w	r3, r2, r3
 8006226:	43db      	mvns	r3, r3
 8006228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800622a:	4013      	ands	r3, r2
 800622c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	791b      	ldrb	r3, [r3, #4]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d102      	bne.n	800623c <HAL_DAC_ConfigChannel+0x1f8>
 8006236:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800623a:	e000      	b.n	800623e <HAL_DAC_ConfigChannel+0x1fa>
 800623c:	2300      	movs	r3, #0
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	4313      	orrs	r3, r2
 8006242:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f003 0310 	and.w	r3, r3, #16
 800624a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800624e:	fa02 f303 	lsl.w	r3, r2, r3
 8006252:	43db      	mvns	r3, r3
 8006254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006256:	4013      	ands	r3, r2
 8006258:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	795b      	ldrb	r3, [r3, #5]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d102      	bne.n	8006268 <HAL_DAC_ConfigChannel+0x224>
 8006262:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006266:	e000      	b.n	800626a <HAL_DAC_ConfigChannel+0x226>
 8006268:	2300      	movs	r3, #0
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006272:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006276:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b02      	cmp	r3, #2
 800627e:	d114      	bne.n	80062aa <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006280:	f002 ff7a 	bl	8009178 <HAL_RCC_GetHCLKFreq>
 8006284:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	4a48      	ldr	r2, [pc, #288]	@ (80063ac <HAL_DAC_ConfigChannel+0x368>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d904      	bls.n	8006298 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006290:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006294:	627b      	str	r3, [r7, #36]	@ 0x24
 8006296:	e00f      	b.n	80062b8 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	4a45      	ldr	r2, [pc, #276]	@ (80063b0 <HAL_DAC_ConfigChannel+0x36c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d90a      	bls.n	80062b6 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80062a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80062a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80062a8:	e006      	b.n	80062b8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062b0:	4313      	orrs	r3, r2
 80062b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80062b4:	e000      	b.n	80062b8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80062b6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f003 0310 	and.w	r3, r3, #16
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	fa02 f303 	lsl.w	r3, r2, r3
 80062c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062c6:	4313      	orrs	r3, r2
 80062c8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6819      	ldr	r1, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f003 0310 	and.w	r3, r3, #16
 80062de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80062e2:	fa02 f303 	lsl.w	r3, r2, r3
 80062e6:	43da      	mvns	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	400a      	ands	r2, r1
 80062ee:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f003 0310 	and.w	r3, r3, #16
 80062fe:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8006302:	fa02 f303 	lsl.w	r3, r2, r3
 8006306:	43db      	mvns	r3, r3
 8006308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800630a:	4013      	ands	r3, r2
 800630c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f003 0310 	and.w	r3, r3, #16
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	fa02 f303 	lsl.w	r3, r2, r3
 8006320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006322:	4313      	orrs	r3, r2
 8006324:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800632c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6819      	ldr	r1, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f003 0310 	and.w	r3, r3, #16
 800633a:	22c0      	movs	r2, #192	@ 0xc0
 800633c:	fa02 f303 	lsl.w	r3, r2, r3
 8006340:	43da      	mvns	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	400a      	ands	r2, r1
 8006348:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	089b      	lsrs	r3, r3, #2
 8006350:	f003 030f 	and.w	r3, r3, #15
 8006354:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	089b      	lsrs	r3, r3, #2
 800635c:	021b      	lsls	r3, r3, #8
 800635e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	4313      	orrs	r3, r2
 8006366:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f003 0310 	and.w	r3, r3, #16
 8006374:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8006378:	fa01 f303 	lsl.w	r3, r1, r3
 800637c:	43db      	mvns	r3, r3
 800637e:	ea02 0103 	and.w	r1, r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f003 0310 	and.w	r3, r3, #16
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	409a      	lsls	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80063a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3728      	adds	r7, #40	@ 0x28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	09896800 	.word	0x09896800
 80063b0:	04c4b400 	.word	0x04c4b400

080063b4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e08d      	b.n	80064f6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	461a      	mov	r2, r3
 80063e0:	4b47      	ldr	r3, [pc, #284]	@ (8006500 <HAL_DMA_Init+0x138>)
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d80f      	bhi.n	8006406 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	4b45      	ldr	r3, [pc, #276]	@ (8006504 <HAL_DMA_Init+0x13c>)
 80063ee:	4413      	add	r3, r2
 80063f0:	4a45      	ldr	r2, [pc, #276]	@ (8006508 <HAL_DMA_Init+0x140>)
 80063f2:	fba2 2303 	umull	r2, r3, r2, r3
 80063f6:	091b      	lsrs	r3, r3, #4
 80063f8:	009a      	lsls	r2, r3, #2
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a42      	ldr	r2, [pc, #264]	@ (800650c <HAL_DMA_Init+0x144>)
 8006402:	641a      	str	r2, [r3, #64]	@ 0x40
 8006404:	e00e      	b.n	8006424 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	4b40      	ldr	r3, [pc, #256]	@ (8006510 <HAL_DMA_Init+0x148>)
 800640e:	4413      	add	r3, r2
 8006410:	4a3d      	ldr	r2, [pc, #244]	@ (8006508 <HAL_DMA_Init+0x140>)
 8006412:	fba2 2303 	umull	r2, r3, r2, r3
 8006416:	091b      	lsrs	r3, r3, #4
 8006418:	009a      	lsls	r2, r3, #2
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a3c      	ldr	r2, [pc, #240]	@ (8006514 <HAL_DMA_Init+0x14c>)
 8006422:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800643a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800643e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006448:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006454:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006460:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f9b6 	bl	80067e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006484:	d102      	bne.n	800648c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80064a0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d010      	beq.n	80064cc <HAL_DMA_Init+0x104>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	d80c      	bhi.n	80064cc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f9d6 	bl	8006864 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064bc:	2200      	movs	r2, #0
 80064be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80064c8:	605a      	str	r2, [r3, #4]
 80064ca:	e008      	b.n	80064de <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	40020407 	.word	0x40020407
 8006504:	bffdfff8 	.word	0xbffdfff8
 8006508:	cccccccd 	.word	0xcccccccd
 800650c:	40020000 	.word	0x40020000
 8006510:	bffdfbf8 	.word	0xbffdfbf8
 8006514:	40020400 	.word	0x40020400

08006518 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
 8006524:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_DMA_Start_IT+0x20>
 8006534:	2302      	movs	r3, #2
 8006536:	e066      	b.n	8006606 <HAL_DMA_Start_IT+0xee>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b01      	cmp	r3, #1
 800654a:	d155      	bne.n	80065f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 0201 	bic.w	r2, r2, #1
 8006568:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	68b9      	ldr	r1, [r7, #8]
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 f8fb 	bl	800676c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657a:	2b00      	cmp	r3, #0
 800657c:	d008      	beq.n	8006590 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 020e 	orr.w	r2, r2, #14
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	e00f      	b.n	80065b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 0204 	bic.w	r2, r2, #4
 800659e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 020a 	orr.w	r2, r2, #10
 80065ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d007      	beq.n	80065ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d007      	beq.n	80065e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f042 0201 	orr.w	r2, r2, #1
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	e005      	b.n	8006604 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006600:	2302      	movs	r3, #2
 8006602:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006604:	7dfb      	ldrb	r3, [r7, #23]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b084      	sub	sp, #16
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800662a:	f003 031f 	and.w	r3, r3, #31
 800662e:	2204      	movs	r2, #4
 8006630:	409a      	lsls	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4013      	ands	r3, r2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d026      	beq.n	8006688 <HAL_DMA_IRQHandler+0x7a>
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d021      	beq.n	8006688 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b00      	cmp	r3, #0
 8006650:	d107      	bne.n	8006662 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0204 	bic.w	r2, r2, #4
 8006660:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006666:	f003 021f 	and.w	r2, r3, #31
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666e:	2104      	movs	r1, #4
 8006670:	fa01 f202 	lsl.w	r2, r1, r2
 8006674:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667a:	2b00      	cmp	r3, #0
 800667c:	d071      	beq.n	8006762 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006686:	e06c      	b.n	8006762 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800668c:	f003 031f 	and.w	r3, r3, #31
 8006690:	2202      	movs	r2, #2
 8006692:	409a      	lsls	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	4013      	ands	r3, r2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d02e      	beq.n	80066fa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d029      	beq.n	80066fa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0320 	and.w	r3, r3, #32
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10b      	bne.n	80066cc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 020a 	bic.w	r2, r2, #10
 80066c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066d0:	f003 021f 	and.w	r2, r3, #31
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d8:	2102      	movs	r1, #2
 80066da:	fa01 f202 	lsl.w	r2, r1, r2
 80066de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d038      	beq.n	8006762 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80066f8:	e033      	b.n	8006762 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066fe:	f003 031f 	and.w	r3, r3, #31
 8006702:	2208      	movs	r2, #8
 8006704:	409a      	lsls	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4013      	ands	r3, r2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d02a      	beq.n	8006764 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b00      	cmp	r3, #0
 8006716:	d025      	beq.n	8006764 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 020e 	bic.w	r2, r2, #14
 8006726:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800672c:	f003 021f 	and.w	r2, r3, #31
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006734:	2101      	movs	r1, #1
 8006736:	fa01 f202 	lsl.w	r2, r1, r2
 800673a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006756:	2b00      	cmp	r3, #0
 8006758:	d004      	beq.n	8006764 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006762:	bf00      	nop
 8006764:	bf00      	nop
}
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006782:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006788:	2b00      	cmp	r3, #0
 800678a:	d004      	beq.n	8006796 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006794:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800679a:	f003 021f 	and.w	r2, r3, #31
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a2:	2101      	movs	r1, #1
 80067a4:	fa01 f202 	lsl.w	r2, r1, r2
 80067a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	2b10      	cmp	r3, #16
 80067b8:	d108      	bne.n	80067cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80067ca:	e007      	b.n	80067dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	60da      	str	r2, [r3, #12]
}
 80067dc:	bf00      	nop
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	461a      	mov	r2, r3
 80067f6:	4b16      	ldr	r3, [pc, #88]	@ (8006850 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d802      	bhi.n	8006802 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80067fc:	4b15      	ldr	r3, [pc, #84]	@ (8006854 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	e001      	b.n	8006806 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006802:	4b15      	ldr	r3, [pc, #84]	@ (8006858 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006804:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	b2db      	uxtb	r3, r3
 8006810:	3b08      	subs	r3, #8
 8006812:	4a12      	ldr	r2, [pc, #72]	@ (800685c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006814:	fba2 2303 	umull	r2, r3, r2, r3
 8006818:	091b      	lsrs	r3, r3, #4
 800681a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006820:	089b      	lsrs	r3, r3, #2
 8006822:	009a      	lsls	r2, r3, #2
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	4413      	add	r3, r2
 8006828:	461a      	mov	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a0b      	ldr	r2, [pc, #44]	@ (8006860 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006832:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f003 031f 	and.w	r3, r3, #31
 800683a:	2201      	movs	r2, #1
 800683c:	409a      	lsls	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006842:	bf00      	nop
 8006844:	371c      	adds	r7, #28
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40020407 	.word	0x40020407
 8006854:	40020800 	.word	0x40020800
 8006858:	40020820 	.word	0x40020820
 800685c:	cccccccd 	.word	0xcccccccd
 8006860:	40020880 	.word	0x40020880

08006864 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	b2db      	uxtb	r3, r3
 8006872:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	4b0b      	ldr	r3, [pc, #44]	@ (80068a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006878:	4413      	add	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	461a      	mov	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a08      	ldr	r2, [pc, #32]	@ (80068a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006886:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3b01      	subs	r3, #1
 800688c:	f003 031f 	and.w	r3, r3, #31
 8006890:	2201      	movs	r2, #1
 8006892:	409a      	lsls	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006898:	bf00      	nop
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	1000823f 	.word	0x1000823f
 80068a8:	40020940 	.word	0x40020940

080068ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80068b6:	2300      	movs	r3, #0
 80068b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80068ba:	e15a      	b.n	8006b72 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	2101      	movs	r1, #1
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	fa01 f303 	lsl.w	r3, r1, r3
 80068c8:	4013      	ands	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 814c 	beq.w	8006b6c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f003 0303 	and.w	r3, r3, #3
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d005      	beq.n	80068ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d130      	bne.n	800694e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	2203      	movs	r2, #3
 80068f8:	fa02 f303 	lsl.w	r3, r2, r3
 80068fc:	43db      	mvns	r3, r3
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	4013      	ands	r3, r2
 8006902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	005b      	lsls	r3, r3, #1
 800690c:	fa02 f303 	lsl.w	r3, r2, r3
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	4313      	orrs	r3, r2
 8006914:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006922:	2201      	movs	r2, #1
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	fa02 f303 	lsl.w	r3, r2, r3
 800692a:	43db      	mvns	r3, r3
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	4013      	ands	r3, r2
 8006930:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	091b      	lsrs	r3, r3, #4
 8006938:	f003 0201 	and.w	r2, r3, #1
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	fa02 f303 	lsl.w	r3, r2, r3
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	4313      	orrs	r3, r2
 8006946:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f003 0303 	and.w	r3, r3, #3
 8006956:	2b03      	cmp	r3, #3
 8006958:	d017      	beq.n	800698a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	005b      	lsls	r3, r3, #1
 8006964:	2203      	movs	r2, #3
 8006966:	fa02 f303 	lsl.w	r3, r2, r3
 800696a:	43db      	mvns	r3, r3
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	4013      	ands	r3, r2
 8006970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	fa02 f303 	lsl.w	r3, r2, r3
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	2b02      	cmp	r3, #2
 8006994:	d123      	bne.n	80069de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	08da      	lsrs	r2, r3, #3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3208      	adds	r2, #8
 800699e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f003 0307 	and.w	r3, r3, #7
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	220f      	movs	r2, #15
 80069ae:	fa02 f303 	lsl.w	r3, r2, r3
 80069b2:	43db      	mvns	r3, r3
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	4013      	ands	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	691a      	ldr	r2, [r3, #16]
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	08da      	lsrs	r2, r3, #3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3208      	adds	r2, #8
 80069d8:	6939      	ldr	r1, [r7, #16]
 80069da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	005b      	lsls	r3, r3, #1
 80069e8:	2203      	movs	r2, #3
 80069ea:	fa02 f303 	lsl.w	r3, r2, r3
 80069ee:	43db      	mvns	r3, r3
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	4013      	ands	r3, r2
 80069f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f003 0203 	and.w	r2, r3, #3
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	fa02 f303 	lsl.w	r3, r2, r3
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 80a6 	beq.w	8006b6c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a20:	4b5b      	ldr	r3, [pc, #364]	@ (8006b90 <HAL_GPIO_Init+0x2e4>)
 8006a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a24:	4a5a      	ldr	r2, [pc, #360]	@ (8006b90 <HAL_GPIO_Init+0x2e4>)
 8006a26:	f043 0301 	orr.w	r3, r3, #1
 8006a2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8006a2c:	4b58      	ldr	r3, [pc, #352]	@ (8006b90 <HAL_GPIO_Init+0x2e4>)
 8006a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	60bb      	str	r3, [r7, #8]
 8006a36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a38:	4a56      	ldr	r2, [pc, #344]	@ (8006b94 <HAL_GPIO_Init+0x2e8>)
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	089b      	lsrs	r3, r3, #2
 8006a3e:	3302      	adds	r3, #2
 8006a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f003 0303 	and.w	r3, r3, #3
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	220f      	movs	r2, #15
 8006a50:	fa02 f303 	lsl.w	r3, r2, r3
 8006a54:	43db      	mvns	r3, r3
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4013      	ands	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006a62:	d01f      	beq.n	8006aa4 <HAL_GPIO_Init+0x1f8>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a4c      	ldr	r2, [pc, #304]	@ (8006b98 <HAL_GPIO_Init+0x2ec>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d019      	beq.n	8006aa0 <HAL_GPIO_Init+0x1f4>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a4b      	ldr	r2, [pc, #300]	@ (8006b9c <HAL_GPIO_Init+0x2f0>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d013      	beq.n	8006a9c <HAL_GPIO_Init+0x1f0>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a4a      	ldr	r2, [pc, #296]	@ (8006ba0 <HAL_GPIO_Init+0x2f4>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d00d      	beq.n	8006a98 <HAL_GPIO_Init+0x1ec>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a49      	ldr	r2, [pc, #292]	@ (8006ba4 <HAL_GPIO_Init+0x2f8>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d007      	beq.n	8006a94 <HAL_GPIO_Init+0x1e8>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a48      	ldr	r2, [pc, #288]	@ (8006ba8 <HAL_GPIO_Init+0x2fc>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d101      	bne.n	8006a90 <HAL_GPIO_Init+0x1e4>
 8006a8c:	2305      	movs	r3, #5
 8006a8e:	e00a      	b.n	8006aa6 <HAL_GPIO_Init+0x1fa>
 8006a90:	2306      	movs	r3, #6
 8006a92:	e008      	b.n	8006aa6 <HAL_GPIO_Init+0x1fa>
 8006a94:	2304      	movs	r3, #4
 8006a96:	e006      	b.n	8006aa6 <HAL_GPIO_Init+0x1fa>
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e004      	b.n	8006aa6 <HAL_GPIO_Init+0x1fa>
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	e002      	b.n	8006aa6 <HAL_GPIO_Init+0x1fa>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e000      	b.n	8006aa6 <HAL_GPIO_Init+0x1fa>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	f002 0203 	and.w	r2, r2, #3
 8006aac:	0092      	lsls	r2, r2, #2
 8006aae:	4093      	lsls	r3, r2
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ab6:	4937      	ldr	r1, [pc, #220]	@ (8006b94 <HAL_GPIO_Init+0x2e8>)
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	089b      	lsrs	r3, r3, #2
 8006abc:	3302      	adds	r3, #2
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006ac4:	4b39      	ldr	r3, [pc, #228]	@ (8006bac <HAL_GPIO_Init+0x300>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	43db      	mvns	r3, r3
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d003      	beq.n	8006ae8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006ae8:	4a30      	ldr	r2, [pc, #192]	@ (8006bac <HAL_GPIO_Init+0x300>)
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006aee:	4b2f      	ldr	r3, [pc, #188]	@ (8006bac <HAL_GPIO_Init+0x300>)
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	43db      	mvns	r3, r3
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	4013      	ands	r3, r2
 8006afc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006b12:	4a26      	ldr	r2, [pc, #152]	@ (8006bac <HAL_GPIO_Init+0x300>)
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006b18:	4b24      	ldr	r3, [pc, #144]	@ (8006bac <HAL_GPIO_Init+0x300>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	43db      	mvns	r3, r3
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	4013      	ands	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8006bac <HAL_GPIO_Init+0x300>)
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006b42:	4b1a      	ldr	r3, [pc, #104]	@ (8006bac <HAL_GPIO_Init+0x300>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	43db      	mvns	r3, r3
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006b66:	4a11      	ldr	r2, [pc, #68]	@ (8006bac <HAL_GPIO_Init+0x300>)
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f47f ae9d 	bne.w	80068bc <HAL_GPIO_Init+0x10>
  }
}
 8006b82:	bf00      	nop
 8006b84:	bf00      	nop
 8006b86:	371c      	adds	r7, #28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	40021000 	.word	0x40021000
 8006b94:	40010000 	.word	0x40010000
 8006b98:	48000400 	.word	0x48000400
 8006b9c:	48000800 	.word	0x48000800
 8006ba0:	48000c00 	.word	0x48000c00
 8006ba4:	48001000 	.word	0x48001000
 8006ba8:	48001400 	.word	0x48001400
 8006bac:	40010400 	.word	0x40010400

08006bb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	460b      	mov	r3, r1
 8006bba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	691a      	ldr	r2, [r3, #16]
 8006bc0:	887b      	ldrh	r3, [r7, #2]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d002      	beq.n	8006bce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	73fb      	strb	r3, [r7, #15]
 8006bcc:	e001      	b.n	8006bd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	807b      	strh	r3, [r7, #2]
 8006bec:	4613      	mov	r3, r2
 8006bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006bf0:	787b      	ldrb	r3, [r7, #1]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006bf6:	887a      	ldrh	r2, [r7, #2]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006bfc:	e002      	b.n	8006c04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006bfe:	887a      	ldrh	r2, [r7, #2]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006c22:	887a      	ldrh	r2, [r7, #2]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4013      	ands	r3, r2
 8006c28:	041a      	lsls	r2, r3, #16
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	43d9      	mvns	r1, r3
 8006c2e:	887b      	ldrh	r3, [r7, #2]
 8006c30:	400b      	ands	r3, r1
 8006c32:	431a      	orrs	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	619a      	str	r2, [r3, #24]
}
 8006c38:	bf00      	nop
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e0c0      	b.n	8006dd8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d106      	bne.n	8006c70 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f009 fa22 	bl	80100b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2203      	movs	r2, #3
 8006c74:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f005 f856 	bl	800bd2e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c82:	2300      	movs	r3, #0
 8006c84:	73fb      	strb	r3, [r7, #15]
 8006c86:	e03e      	b.n	8006d06 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006c88:	7bfa      	ldrb	r2, [r7, #15]
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	00db      	lsls	r3, r3, #3
 8006c94:	440b      	add	r3, r1
 8006c96:	3311      	adds	r3, #17
 8006c98:	2201      	movs	r2, #1
 8006c9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c9c:	7bfa      	ldrb	r2, [r7, #15]
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	440b      	add	r3, r1
 8006caa:	3310      	adds	r3, #16
 8006cac:	7bfa      	ldrb	r2, [r7, #15]
 8006cae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006cb0:	7bfa      	ldrb	r2, [r7, #15]
 8006cb2:	6879      	ldr	r1, [r7, #4]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4413      	add	r3, r2
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	440b      	add	r3, r1
 8006cbe:	3313      	adds	r3, #19
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006cc4:	7bfa      	ldrb	r2, [r7, #15]
 8006cc6:	6879      	ldr	r1, [r7, #4]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	440b      	add	r3, r1
 8006cd2:	3320      	adds	r3, #32
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006cd8:	7bfa      	ldrb	r2, [r7, #15]
 8006cda:	6879      	ldr	r1, [r7, #4]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	440b      	add	r3, r1
 8006ce6:	3324      	adds	r3, #36	@ 0x24
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	1c5a      	adds	r2, r3, #1
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	440b      	add	r3, r1
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	3301      	adds	r3, #1
 8006d04:	73fb      	strb	r3, [r7, #15]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	791b      	ldrb	r3, [r3, #4]
 8006d0a:	7bfa      	ldrb	r2, [r7, #15]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d3bb      	bcc.n	8006c88 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d10:	2300      	movs	r3, #0
 8006d12:	73fb      	strb	r3, [r7, #15]
 8006d14:	e044      	b.n	8006da0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006d16:	7bfa      	ldrb	r2, [r7, #15]
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	440b      	add	r3, r1
 8006d24:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006d28:	2200      	movs	r2, #0
 8006d2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006d2c:	7bfa      	ldrb	r2, [r7, #15]
 8006d2e:	6879      	ldr	r1, [r7, #4]
 8006d30:	4613      	mov	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	440b      	add	r3, r1
 8006d3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d3e:	7bfa      	ldrb	r2, [r7, #15]
 8006d40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006d42:	7bfa      	ldrb	r2, [r7, #15]
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	4613      	mov	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	440b      	add	r3, r1
 8006d50:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006d54:	2200      	movs	r2, #0
 8006d56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006d58:	7bfa      	ldrb	r2, [r7, #15]
 8006d5a:	6879      	ldr	r1, [r7, #4]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	00db      	lsls	r3, r3, #3
 8006d64:	440b      	add	r3, r1
 8006d66:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006d6e:	7bfa      	ldrb	r2, [r7, #15]
 8006d70:	6879      	ldr	r1, [r7, #4]
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	00db      	lsls	r3, r3, #3
 8006d7a:	440b      	add	r3, r1
 8006d7c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d84:	7bfa      	ldrb	r2, [r7, #15]
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	440b      	add	r3, r1
 8006d92:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d9a:	7bfb      	ldrb	r3, [r7, #15]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	73fb      	strb	r3, [r7, #15]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	791b      	ldrb	r3, [r3, #4]
 8006da4:	7bfa      	ldrb	r2, [r7, #15]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d3b5      	bcc.n	8006d16 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6818      	ldr	r0, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3304      	adds	r3, #4
 8006db2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006db6:	f004 ffd5 	bl	800bd64 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	7a9b      	ldrb	r3, [r3, #10]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d102      	bne.n	8006dd6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f001 fc42 	bl	800865a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d101      	bne.n	8006df6 <HAL_PCD_Start+0x16>
 8006df2:	2302      	movs	r3, #2
 8006df4:	e012      	b.n	8006e1c <HAL_PCD_Start+0x3c>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f004 ff7c 	bl	800bd00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f007 fa3d 	bl	800e28c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f007 fa42 	bl	800e2ba <USB_ReadInterrupts>
 8006e36:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fb06 	bl	8007454 <PCD_EP_ISR_Handler>

    return;
 8006e48:	e110      	b.n	800706c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d013      	beq.n	8006e7c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e66:	b292      	uxth	r2, r2
 8006e68:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f009 f9b2 	bl	80101d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006e72:	2100      	movs	r1, #0
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f8fc 	bl	8007072 <HAL_PCD_SetAddress>

    return;
 8006e7a:	e0f7      	b.n	800706c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00c      	beq.n	8006ea0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006e98:	b292      	uxth	r2, r2
 8006e9a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006e9e:	e0e5      	b.n	800706c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00c      	beq.n	8006ec4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ebc:	b292      	uxth	r2, r2
 8006ebe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006ec2:	e0d3      	b.n	800706c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d034      	beq.n	8006f38 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 0204 	bic.w	r2, r2, #4
 8006ee0:	b292      	uxth	r2, r2
 8006ee2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f022 0208 	bic.w	r2, r2, #8
 8006ef8:	b292      	uxth	r2, r2
 8006efa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d107      	bne.n	8006f18 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006f10:	2100      	movs	r1, #0
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f009 fb52 	bl	80105bc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f009 f995 	bl	8010248 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f30:	b292      	uxth	r2, r2
 8006f32:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006f36:	e099      	b.n	800706c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d027      	beq.n	8006f92 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f042 0208 	orr.w	r2, r2, #8
 8006f54:	b292      	uxth	r2, r2
 8006f56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f6c:	b292      	uxth	r2, r2
 8006f6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f042 0204 	orr.w	r2, r2, #4
 8006f84:	b292      	uxth	r2, r2
 8006f86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f009 f942 	bl	8010214 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006f90:	e06c      	b.n	800706c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d040      	beq.n	800701e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006fae:	b292      	uxth	r2, r2
 8006fb0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d12b      	bne.n	8007016 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f042 0204 	orr.w	r2, r2, #4
 8006fd0:	b292      	uxth	r2, r2
 8006fd2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f042 0208 	orr.w	r2, r2, #8
 8006fe8:	b292      	uxth	r2, r2
 8006fea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	089b      	lsrs	r3, r3, #2
 8007002:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800700c:	2101      	movs	r1, #1
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f009 fad4 	bl	80105bc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8007014:	e02a      	b.n	800706c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f009 f8fc 	bl	8010214 <HAL_PCD_SuspendCallback>
    return;
 800701c:	e026      	b.n	800706c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00f      	beq.n	8007048 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007030:	b29a      	uxth	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800703a:	b292      	uxth	r2, r2
 800703c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f009 f8ba 	bl	80101ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007046:	e011      	b.n	800706c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00c      	beq.n	800706c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800705a:	b29a      	uxth	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007064:	b292      	uxth	r2, r2
 8007066:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800706a:	bf00      	nop
  }
}
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b082      	sub	sp, #8
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	460b      	mov	r3, r1
 800707c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_PCD_SetAddress+0x1a>
 8007088:	2302      	movs	r3, #2
 800708a:	e012      	b.n	80070b2 <HAL_PCD_SetAddress+0x40>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	78fa      	ldrb	r2, [r7, #3]
 8007098:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	78fa      	ldrb	r2, [r7, #3]
 80070a0:	4611      	mov	r1, r2
 80070a2:	4618      	mov	r0, r3
 80070a4:	f007 f8de 	bl	800e264 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	4608      	mov	r0, r1
 80070c4:	4611      	mov	r1, r2
 80070c6:	461a      	mov	r2, r3
 80070c8:	4603      	mov	r3, r0
 80070ca:	70fb      	strb	r3, [r7, #3]
 80070cc:	460b      	mov	r3, r1
 80070ce:	803b      	strh	r3, [r7, #0]
 80070d0:	4613      	mov	r3, r2
 80070d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80070d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	da0e      	bge.n	80070fe <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070e0:	78fb      	ldrb	r3, [r7, #3]
 80070e2:	f003 0207 	and.w	r2, r3, #7
 80070e6:	4613      	mov	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	00db      	lsls	r3, r3, #3
 80070ee:	3310      	adds	r3, #16
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	4413      	add	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2201      	movs	r2, #1
 80070fa:	705a      	strb	r2, [r3, #1]
 80070fc:	e00e      	b.n	800711c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070fe:	78fb      	ldrb	r3, [r7, #3]
 8007100:	f003 0207 	and.w	r2, r3, #7
 8007104:	4613      	mov	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	4413      	add	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800711c:	78fb      	ldrb	r3, [r7, #3]
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	b2da      	uxtb	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007128:	883b      	ldrh	r3, [r7, #0]
 800712a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	78ba      	ldrb	r2, [r7, #2]
 8007136:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007138:	78bb      	ldrb	r3, [r7, #2]
 800713a:	2b02      	cmp	r3, #2
 800713c:	d102      	bne.n	8007144 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800714a:	2b01      	cmp	r3, #1
 800714c:	d101      	bne.n	8007152 <HAL_PCD_EP_Open+0x98>
 800714e:	2302      	movs	r3, #2
 8007150:	e00e      	b.n	8007170 <HAL_PCD_EP_Open+0xb6>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68f9      	ldr	r1, [r7, #12]
 8007160:	4618      	mov	r0, r3
 8007162:	f004 fe1d 	bl	800bda0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800716e:	7afb      	ldrb	r3, [r7, #11]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007184:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007188:	2b00      	cmp	r3, #0
 800718a:	da0e      	bge.n	80071aa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	f003 0207 	and.w	r2, r3, #7
 8007192:	4613      	mov	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	00db      	lsls	r3, r3, #3
 800719a:	3310      	adds	r3, #16
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	4413      	add	r3, r2
 80071a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2201      	movs	r2, #1
 80071a6:	705a      	strb	r2, [r3, #1]
 80071a8:	e00e      	b.n	80071c8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071aa:	78fb      	ldrb	r3, [r7, #3]
 80071ac:	f003 0207 	and.w	r2, r3, #7
 80071b0:	4613      	mov	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	00db      	lsls	r3, r3, #3
 80071b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	4413      	add	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80071c8:	78fb      	ldrb	r3, [r7, #3]
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d101      	bne.n	80071e2 <HAL_PCD_EP_Close+0x6a>
 80071de:	2302      	movs	r3, #2
 80071e0:	e00e      	b.n	8007200 <HAL_PCD_EP_Close+0x88>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68f9      	ldr	r1, [r7, #12]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f005 f999 	bl	800c528 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	607a      	str	r2, [r7, #4]
 8007212:	603b      	str	r3, [r7, #0]
 8007214:	460b      	mov	r3, r1
 8007216:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007218:	7afb      	ldrb	r3, [r7, #11]
 800721a:	f003 0207 	and.w	r2, r3, #7
 800721e:	4613      	mov	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	00db      	lsls	r3, r3, #3
 8007226:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	4413      	add	r3, r2
 800722e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	2200      	movs	r2, #0
 8007240:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2200      	movs	r2, #0
 8007246:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007248:	7afb      	ldrb	r3, [r7, #11]
 800724a:	f003 0307 	and.w	r3, r3, #7
 800724e:	b2da      	uxtb	r2, r3
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6979      	ldr	r1, [r7, #20]
 800725a:	4618      	mov	r0, r3
 800725c:	f005 fb51 	bl	800c902 <USB_EPStartXfer>

  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800726a:	b480      	push	{r7}
 800726c:	b083      	sub	sp, #12
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	460b      	mov	r3, r1
 8007274:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007276:	78fb      	ldrb	r3, [r7, #3]
 8007278:	f003 0207 	and.w	r2, r3, #7
 800727c:	6879      	ldr	r1, [r7, #4]
 800727e:	4613      	mov	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	00db      	lsls	r3, r3, #3
 8007286:	440b      	add	r3, r1
 8007288:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800728c:	681b      	ldr	r3, [r3, #0]
}
 800728e:	4618      	mov	r0, r3
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b086      	sub	sp, #24
 800729e:	af00      	add	r7, sp, #0
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	607a      	str	r2, [r7, #4]
 80072a4:	603b      	str	r3, [r7, #0]
 80072a6:	460b      	mov	r3, r1
 80072a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072aa:	7afb      	ldrb	r3, [r7, #11]
 80072ac:	f003 0207 	and.w	r2, r3, #7
 80072b0:	4613      	mov	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	00db      	lsls	r3, r3, #3
 80072b8:	3310      	adds	r3, #16
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	4413      	add	r3, r2
 80072be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2200      	movs	r2, #0
 80072de:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2201      	movs	r2, #1
 80072e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072e6:	7afb      	ldrb	r3, [r7, #11]
 80072e8:	f003 0307 	and.w	r3, r3, #7
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6979      	ldr	r1, [r7, #20]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f005 fb02 	bl	800c902 <USB_EPStartXfer>

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3718      	adds	r7, #24
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007314:	78fb      	ldrb	r3, [r7, #3]
 8007316:	f003 0307 	and.w	r3, r3, #7
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	7912      	ldrb	r2, [r2, #4]
 800731e:	4293      	cmp	r3, r2
 8007320:	d901      	bls.n	8007326 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e03e      	b.n	80073a4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007326:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800732a:	2b00      	cmp	r3, #0
 800732c:	da0e      	bge.n	800734c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800732e:	78fb      	ldrb	r3, [r7, #3]
 8007330:	f003 0207 	and.w	r2, r3, #7
 8007334:	4613      	mov	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	00db      	lsls	r3, r3, #3
 800733c:	3310      	adds	r3, #16
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	4413      	add	r3, r2
 8007342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2201      	movs	r2, #1
 8007348:	705a      	strb	r2, [r3, #1]
 800734a:	e00c      	b.n	8007366 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800734c:	78fa      	ldrb	r2, [r7, #3]
 800734e:	4613      	mov	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	00db      	lsls	r3, r3, #3
 8007356:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	4413      	add	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2201      	movs	r2, #1
 800736a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800736c:	78fb      	ldrb	r3, [r7, #3]
 800736e:	f003 0307 	and.w	r3, r3, #7
 8007372:	b2da      	uxtb	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800737e:	2b01      	cmp	r3, #1
 8007380:	d101      	bne.n	8007386 <HAL_PCD_EP_SetStall+0x7e>
 8007382:	2302      	movs	r3, #2
 8007384:	e00e      	b.n	80073a4 <HAL_PCD_EP_SetStall+0x9c>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68f9      	ldr	r1, [r7, #12]
 8007394:	4618      	mov	r0, r3
 8007396:	f006 fe66 	bl	800e066 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80073b8:	78fb      	ldrb	r3, [r7, #3]
 80073ba:	f003 030f 	and.w	r3, r3, #15
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	7912      	ldrb	r2, [r2, #4]
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d901      	bls.n	80073ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e040      	b.n	800744c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80073ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	da0e      	bge.n	80073f0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073d2:	78fb      	ldrb	r3, [r7, #3]
 80073d4:	f003 0207 	and.w	r2, r3, #7
 80073d8:	4613      	mov	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	00db      	lsls	r3, r3, #3
 80073e0:	3310      	adds	r3, #16
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	4413      	add	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2201      	movs	r2, #1
 80073ec:	705a      	strb	r2, [r3, #1]
 80073ee:	e00e      	b.n	800740e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80073f0:	78fb      	ldrb	r3, [r7, #3]
 80073f2:	f003 0207 	and.w	r2, r3, #7
 80073f6:	4613      	mov	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	00db      	lsls	r3, r3, #3
 80073fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	4413      	add	r3, r2
 8007406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007414:	78fb      	ldrb	r3, [r7, #3]
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	b2da      	uxtb	r2, r3
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007426:	2b01      	cmp	r3, #1
 8007428:	d101      	bne.n	800742e <HAL_PCD_EP_ClrStall+0x82>
 800742a:	2302      	movs	r3, #2
 800742c:	e00e      	b.n	800744c <HAL_PCD_EP_ClrStall+0xa0>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68f9      	ldr	r1, [r7, #12]
 800743c:	4618      	mov	r0, r3
 800743e:	f006 fe63 	bl	800e108 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b096      	sub	sp, #88	@ 0x58
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800745c:	e3ad      	b.n	8007bba <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007466:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800746a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800746e:	b2db      	uxtb	r3, r3
 8007470:	f003 030f 	and.w	r3, r3, #15
 8007474:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8007478:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800747c:	2b00      	cmp	r3, #0
 800747e:	f040 816f 	bne.w	8007760 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007482:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007486:	f003 0310 	and.w	r3, r3, #16
 800748a:	2b00      	cmp	r3, #0
 800748c:	d14c      	bne.n	8007528 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800749a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800749e:	81fb      	strh	r3, [r7, #14]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	89fb      	ldrh	r3, [r7, #14]
 80074a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3310      	adds	r3, #16
 80074b6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	461a      	mov	r2, r3
 80074c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	00db      	lsls	r3, r3, #3
 80074ca:	4413      	add	r3, r2
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	6812      	ldr	r2, [r2, #0]
 80074d0:	4413      	add	r3, r2
 80074d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80074d6:	881b      	ldrh	r3, [r3, #0]
 80074d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80074dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80074e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074e2:	695a      	ldr	r2, [r3, #20]
 80074e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074e6:	69db      	ldr	r3, [r3, #28]
 80074e8:	441a      	add	r2, r3
 80074ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074ec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80074ee:	2100      	movs	r1, #0
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f008 fe48 	bl	8010186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	7b1b      	ldrb	r3, [r3, #12]
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 835c 	beq.w	8007bba <PCD_EP_ISR_Handler+0x766>
 8007502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	2b00      	cmp	r3, #0
 8007508:	f040 8357 	bne.w	8007bba <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	7b1b      	ldrb	r3, [r3, #12]
 8007510:	b2db      	uxtb	r3, r3
 8007512:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007516:	b2da      	uxtb	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	731a      	strb	r2, [r3, #12]
 8007526:	e348      	b.n	8007bba <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800752e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800753a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800753e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007542:	2b00      	cmp	r3, #0
 8007544:	d032      	beq.n	80075ac <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800754e:	b29b      	uxth	r3, r3
 8007550:	461a      	mov	r2, r3
 8007552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	00db      	lsls	r3, r3, #3
 8007558:	4413      	add	r3, r2
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	6812      	ldr	r2, [r2, #0]
 800755e:	4413      	add	r3, r2
 8007560:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007564:	881b      	ldrh	r3, [r3, #0]
 8007566:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800756a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800756c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6818      	ldr	r0, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8007578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800757a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800757c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800757e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007580:	b29b      	uxth	r3, r3
 8007582:	f006 feec 	bl	800e35e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	b29a      	uxth	r2, r3
 800758e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007592:	4013      	ands	r3, r2
 8007594:	823b      	strh	r3, [r7, #16]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	8a3a      	ldrh	r2, [r7, #16]
 800759c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80075a0:	b292      	uxth	r2, r2
 80075a2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f008 fdc1 	bl	801012c <HAL_PCD_SetupStageCallback>
 80075aa:	e306      	b.n	8007bba <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80075ac:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f280 8302 	bge.w	8007bba <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	b29a      	uxth	r2, r3
 80075be:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80075c2:	4013      	ands	r3, r2
 80075c4:	83fb      	strh	r3, [r7, #30]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	8bfa      	ldrh	r2, [r7, #30]
 80075cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80075d0:	b292      	uxth	r2, r2
 80075d2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075dc:	b29b      	uxth	r3, r3
 80075de:	461a      	mov	r2, r3
 80075e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	00db      	lsls	r3, r3, #3
 80075e6:	4413      	add	r3, r2
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	6812      	ldr	r2, [r2, #0]
 80075ec:	4413      	add	r3, r2
 80075ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80075f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075fa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80075fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d019      	beq.n	8007638 <PCD_EP_ISR_Handler+0x1e4>
 8007604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d015      	beq.n	8007638 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6818      	ldr	r0, [r3, #0]
 8007610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007612:	6959      	ldr	r1, [r3, #20]
 8007614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007616:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800761a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800761c:	b29b      	uxth	r3, r3
 800761e:	f006 fe9e 	bl	800e35e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007624:	695a      	ldr	r2, [r3, #20]
 8007626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007628:	69db      	ldr	r3, [r3, #28]
 800762a:	441a      	add	r2, r3
 800762c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800762e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007630:	2100      	movs	r1, #0
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f008 fd8c 	bl	8010150 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007642:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007646:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800764a:	2b00      	cmp	r3, #0
 800764c:	f040 82b5 	bne.w	8007bba <PCD_EP_ISR_Handler+0x766>
 8007650:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007654:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007658:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800765c:	f000 82ad 	beq.w	8007bba <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	61bb      	str	r3, [r7, #24]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800766e:	b29b      	uxth	r3, r3
 8007670:	461a      	mov	r2, r3
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	4413      	add	r3, r2
 8007676:	61bb      	str	r3, [r7, #24]
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800767e:	617b      	str	r3, [r7, #20]
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	b29b      	uxth	r3, r3
 8007686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800768a:	b29a      	uxth	r2, r3
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	801a      	strh	r2, [r3, #0]
 8007690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10a      	bne.n	80076ae <PCD_EP_ISR_Handler+0x25a>
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	b29b      	uxth	r3, r3
 800769e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	801a      	strh	r2, [r3, #0]
 80076ac:	e039      	b.n	8007722 <PCD_EP_ISR_Handler+0x2ce>
 80076ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80076b4:	d818      	bhi.n	80076e8 <PCD_EP_ISR_Handler+0x294>
 80076b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	085b      	lsrs	r3, r3, #1
 80076bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80076be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <PCD_EP_ISR_Handler+0x27c>
 80076ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076cc:	3301      	adds	r3, #1
 80076ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076d8:	b29b      	uxth	r3, r3
 80076da:	029b      	lsls	r3, r3, #10
 80076dc:	b29b      	uxth	r3, r3
 80076de:	4313      	orrs	r3, r2
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	801a      	strh	r2, [r3, #0]
 80076e6:	e01c      	b.n	8007722 <PCD_EP_ISR_Handler+0x2ce>
 80076e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	095b      	lsrs	r3, r3, #5
 80076ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80076f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	f003 031f 	and.w	r3, r3, #31
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d102      	bne.n	8007702 <PCD_EP_ISR_Handler+0x2ae>
 80076fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076fe:	3b01      	subs	r3, #1
 8007700:	647b      	str	r3, [r7, #68]	@ 0x44
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	b29a      	uxth	r2, r3
 8007708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800770a:	b29b      	uxth	r3, r3
 800770c:	029b      	lsls	r3, r3, #10
 800770e:	b29b      	uxth	r3, r3
 8007710:	4313      	orrs	r3, r2
 8007712:	b29b      	uxth	r3, r3
 8007714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800771c:	b29a      	uxth	r2, r3
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	b29b      	uxth	r3, r3
 800772a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800772e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007732:	827b      	strh	r3, [r7, #18]
 8007734:	8a7b      	ldrh	r3, [r7, #18]
 8007736:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800773a:	827b      	strh	r3, [r7, #18]
 800773c:	8a7b      	ldrh	r3, [r7, #18]
 800773e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007742:	827b      	strh	r3, [r7, #18]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	8a7b      	ldrh	r3, [r7, #18]
 800774a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800774e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800775a:	b29b      	uxth	r3, r3
 800775c:	8013      	strh	r3, [r2, #0]
 800775e:	e22c      	b.n	8007bba <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	461a      	mov	r2, r3
 8007766:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007774:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007778:	2b00      	cmp	r3, #0
 800777a:	f280 80f6 	bge.w	800796a <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	881b      	ldrh	r3, [r3, #0]
 800778e:	b29a      	uxth	r2, r3
 8007790:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007794:	4013      	ands	r3, r2
 8007796:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	461a      	mov	r2, r3
 80077a0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80077ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80077b0:	b292      	uxth	r2, r2
 80077b2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80077b4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80077b8:	4613      	mov	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	4413      	add	r3, r2
 80077c8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80077ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077cc:	7b1b      	ldrb	r3, [r3, #12]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d123      	bne.n	800781a <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077da:	b29b      	uxth	r3, r3
 80077dc:	461a      	mov	r2, r3
 80077de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	00db      	lsls	r3, r3, #3
 80077e4:	4413      	add	r3, r2
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	6812      	ldr	r2, [r2, #0]
 80077ea:	4413      	add	r3, r2
 80077ec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077f6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80077fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 808e 	beq.w	8007920 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6818      	ldr	r0, [r3, #0]
 8007808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800780a:	6959      	ldr	r1, [r3, #20]
 800780c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800780e:	88da      	ldrh	r2, [r3, #6]
 8007810:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007814:	f006 fda3 	bl	800e35e <USB_ReadPMA>
 8007818:	e082      	b.n	8007920 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800781a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800781c:	78db      	ldrb	r3, [r3, #3]
 800781e:	2b02      	cmp	r3, #2
 8007820:	d10a      	bne.n	8007838 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007822:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007826:	461a      	mov	r2, r3
 8007828:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f9d3 	bl	8007bd6 <HAL_PCD_EP_DB_Receive>
 8007830:	4603      	mov	r3, r0
 8007832:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8007836:	e073      	b.n	8007920 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
 800783e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	b29b      	uxth	r3, r3
 800784a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800784e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007852:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	461a      	mov	r2, r3
 800785c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	441a      	add	r2, r3
 8007864:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8007868:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800786c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007870:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007874:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007878:	b29b      	uxth	r3, r3
 800787a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	461a      	mov	r2, r3
 8007882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	881b      	ldrh	r3, [r3, #0]
 800788c:	b29b      	uxth	r3, r3
 800788e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d022      	beq.n	80078dc <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800789e:	b29b      	uxth	r3, r3
 80078a0:	461a      	mov	r2, r3
 80078a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	00db      	lsls	r3, r3, #3
 80078a8:	4413      	add	r3, r2
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	6812      	ldr	r2, [r2, #0]
 80078ae:	4413      	add	r3, r2
 80078b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80078b4:	881b      	ldrh	r3, [r3, #0]
 80078b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078ba:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80078be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d02c      	beq.n	8007920 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6818      	ldr	r0, [r3, #0]
 80078ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078cc:	6959      	ldr	r1, [r3, #20]
 80078ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078d0:	891a      	ldrh	r2, [r3, #8]
 80078d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80078d6:	f006 fd42 	bl	800e35e <USB_ReadPMA>
 80078da:	e021      	b.n	8007920 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	461a      	mov	r2, r3
 80078e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	00db      	lsls	r3, r3, #3
 80078ee:	4413      	add	r3, r2
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	6812      	ldr	r2, [r2, #0]
 80078f4:	4413      	add	r3, r2
 80078f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007900:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8007904:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007908:	2b00      	cmp	r3, #0
 800790a:	d009      	beq.n	8007920 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6818      	ldr	r0, [r3, #0]
 8007910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007912:	6959      	ldr	r1, [r3, #20]
 8007914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007916:	895a      	ldrh	r2, [r3, #10]
 8007918:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800791c:	f006 fd1f 	bl	800e35e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007922:	69da      	ldr	r2, [r3, #28]
 8007924:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007928:	441a      	add	r2, r3
 800792a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800792c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800792e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007930:	695a      	ldr	r2, [r3, #20]
 8007932:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007936:	441a      	add	r2, r3
 8007938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800793a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800793c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d005      	beq.n	8007950 <PCD_EP_ISR_Handler+0x4fc>
 8007944:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8007948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	429a      	cmp	r2, r3
 800794e:	d206      	bcs.n	800795e <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	4619      	mov	r1, r3
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f008 fbfa 	bl	8010150 <HAL_PCD_DataOutStageCallback>
 800795c:	e005      	b.n	800796a <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007964:	4618      	mov	r0, r3
 8007966:	f004 ffcc 	bl	800c902 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800796a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800796e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007972:	2b00      	cmp	r3, #0
 8007974:	f000 8121 	beq.w	8007bba <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8007978:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800797c:	4613      	mov	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	00db      	lsls	r3, r3, #3
 8007984:	3310      	adds	r3, #16
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	4413      	add	r3, r2
 800798a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	461a      	mov	r2, r3
 8007992:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4413      	add	r3, r2
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	b29b      	uxth	r3, r3
 800799e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80079a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079a6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	441a      	add	r2, r3
 80079b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80079bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80079c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079ca:	78db      	ldrb	r3, [r3, #3]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	f040 80a2 	bne.w	8007b16 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80079d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079d4:	2200      	movs	r2, #0
 80079d6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80079d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079da:	7b1b      	ldrb	r3, [r3, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 8093 	beq.w	8007b08 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80079e2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80079e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d046      	beq.n	8007a7c <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80079ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079f0:	785b      	ldrb	r3, [r3, #1]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d126      	bne.n	8007a44 <PCD_EP_ISR_Handler+0x5f0>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	461a      	mov	r2, r3
 8007a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0a:	4413      	add	r3, r2
 8007a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	00da      	lsls	r2, r3, #3
 8007a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a16:	4413      	add	r3, r2
 8007a18:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a1c:	623b      	str	r3, [r7, #32]
 8007a1e:	6a3b      	ldr	r3, [r7, #32]
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	801a      	strh	r2, [r3, #0]
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	881b      	ldrh	r3, [r3, #0]
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	6a3b      	ldr	r3, [r7, #32]
 8007a40:	801a      	strh	r2, [r3, #0]
 8007a42:	e061      	b.n	8007b08 <PCD_EP_ISR_Handler+0x6b4>
 8007a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a46:	785b      	ldrb	r3, [r3, #1]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d15d      	bne.n	8007b08 <PCD_EP_ISR_Handler+0x6b4>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a60:	4413      	add	r3, r2
 8007a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	00da      	lsls	r2, r3, #3
 8007a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a76:	2200      	movs	r2, #0
 8007a78:	801a      	strh	r2, [r3, #0]
 8007a7a:	e045      	b.n	8007b08 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a84:	785b      	ldrb	r3, [r3, #1]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d126      	bne.n	8007ad8 <PCD_EP_ISR_Handler+0x684>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a9e:	4413      	add	r3, r2
 8007aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	00da      	lsls	r2, r3, #3
 8007aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aaa:	4413      	add	r3, r2
 8007aac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ab0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab4:	881b      	ldrh	r3, [r3, #0]
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac0:	801a      	strh	r2, [r3, #0]
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad4:	801a      	strh	r2, [r3, #0]
 8007ad6:	e017      	b.n	8007b08 <PCD_EP_ISR_Handler+0x6b4>
 8007ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ada:	785b      	ldrb	r3, [r3, #1]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d113      	bne.n	8007b08 <PCD_EP_ISR_Handler+0x6b4>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	461a      	mov	r2, r3
 8007aec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aee:	4413      	add	r3, r2
 8007af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	00da      	lsls	r2, r3, #3
 8007af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007afa:	4413      	add	r3, r2
 8007afc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b04:	2200      	movs	r2, #0
 8007b06:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f008 fb39 	bl	8010186 <HAL_PCD_DataInStageCallback>
 8007b14:	e051      	b.n	8007bba <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007b16:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d144      	bne.n	8007bac <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	00db      	lsls	r3, r3, #3
 8007b34:	4413      	add	r3, r2
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	6812      	ldr	r2, [r2, #0]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b46:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8007b4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b4c:	699a      	ldr	r2, [r3, #24]
 8007b4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d907      	bls.n	8007b66 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8007b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b58:	699a      	ldr	r2, [r3, #24]
 8007b5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007b5e:	1ad2      	subs	r2, r2, r3
 8007b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b62:	619a      	str	r2, [r3, #24]
 8007b64:	e002      	b.n	8007b6c <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8007b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b68:	2200      	movs	r2, #0
 8007b6a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d106      	bne.n	8007b82 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f008 fb03 	bl	8010186 <HAL_PCD_DataInStageCallback>
 8007b80:	e01b      	b.n	8007bba <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b84:	695a      	ldr	r2, [r3, #20]
 8007b86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007b8a:	441a      	add	r2, r3
 8007b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b8e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007b90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b92:	69da      	ldr	r2, [r3, #28]
 8007b94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007b98:	441a      	add	r2, r3
 8007b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b9c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f004 feac 	bl	800c902 <USB_EPStartXfer>
 8007baa:	e006      	b.n	8007bba <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007bac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f917 	bl	8007de8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	b21b      	sxth	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f6ff ac49 	blt.w	800745e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3758      	adds	r7, #88	@ 0x58
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b088      	sub	sp, #32
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	60f8      	str	r0, [r7, #12]
 8007bde:	60b9      	str	r1, [r7, #8]
 8007be0:	4613      	mov	r3, r2
 8007be2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007be4:	88fb      	ldrh	r3, [r7, #6]
 8007be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d07c      	beq.n	8007ce8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	00db      	lsls	r3, r3, #3
 8007c00:	4413      	add	r3, r2
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	6812      	ldr	r2, [r2, #0]
 8007c06:	4413      	add	r3, r2
 8007c08:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c12:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	699a      	ldr	r2, [r3, #24]
 8007c18:	8b7b      	ldrh	r3, [r7, #26]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d306      	bcc.n	8007c2c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	699a      	ldr	r2, [r3, #24]
 8007c22:	8b7b      	ldrh	r3, [r7, #26]
 8007c24:	1ad2      	subs	r2, r2, r3
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	619a      	str	r2, [r3, #24]
 8007c2a:	e002      	b.n	8007c32 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d123      	bne.n	8007c82 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	881b      	ldrh	r3, [r3, #0]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c54:	833b      	strh	r3, [r7, #24]
 8007c56:	8b3b      	ldrh	r3, [r7, #24]
 8007c58:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c5c:	833b      	strh	r3, [r7, #24]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	461a      	mov	r2, r3
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	441a      	add	r2, r3
 8007c6c:	8b3b      	ldrh	r3, [r7, #24]
 8007c6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007c82:	88fb      	ldrh	r3, [r7, #6]
 8007c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d01f      	beq.n	8007ccc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	461a      	mov	r2, r3
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ca6:	82fb      	strh	r3, [r7, #22]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	461a      	mov	r2, r3
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	441a      	add	r2, r3
 8007cb6:	8afb      	ldrh	r3, [r7, #22]
 8007cb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cc4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007ccc:	8b7b      	ldrh	r3, [r7, #26]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f000 8085 	beq.w	8007dde <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6818      	ldr	r0, [r3, #0]
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	6959      	ldr	r1, [r3, #20]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	891a      	ldrh	r2, [r3, #8]
 8007ce0:	8b7b      	ldrh	r3, [r7, #26]
 8007ce2:	f006 fb3c 	bl	800e35e <USB_ReadPMA>
 8007ce6:	e07a      	b.n	8007dde <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	00db      	lsls	r3, r3, #3
 8007cfa:	4413      	add	r3, r2
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	6812      	ldr	r2, [r2, #0]
 8007d00:	4413      	add	r3, r2
 8007d02:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d0c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	699a      	ldr	r2, [r3, #24]
 8007d12:	8b7b      	ldrh	r3, [r7, #26]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d306      	bcc.n	8007d26 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	699a      	ldr	r2, [r3, #24]
 8007d1c:	8b7b      	ldrh	r3, [r7, #26]
 8007d1e:	1ad2      	subs	r2, r2, r3
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	619a      	str	r2, [r3, #24]
 8007d24:	e002      	b.n	8007d2c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d123      	bne.n	8007d7c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	461a      	mov	r2, r3
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d4e:	83fb      	strh	r3, [r7, #30]
 8007d50:	8bfb      	ldrh	r3, [r7, #30]
 8007d52:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007d56:	83fb      	strh	r3, [r7, #30]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	441a      	add	r2, r3
 8007d66:	8bfb      	ldrh	r3, [r7, #30]
 8007d68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007d7c:	88fb      	ldrh	r3, [r7, #6]
 8007d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d11f      	bne.n	8007dc6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007da0:	83bb      	strh	r3, [r7, #28]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	441a      	add	r2, r3
 8007db0:	8bbb      	ldrh	r3, [r7, #28]
 8007db2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007db6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dbe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007dc6:	8b7b      	ldrh	r3, [r7, #26]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d008      	beq.n	8007dde <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6818      	ldr	r0, [r3, #0]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	6959      	ldr	r1, [r3, #20]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	895a      	ldrh	r2, [r3, #10]
 8007dd8:	8b7b      	ldrh	r3, [r7, #26]
 8007dda:	f006 fac0 	bl	800e35e <USB_ReadPMA>
    }
  }

  return count;
 8007dde:	8b7b      	ldrh	r3, [r7, #26]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3720      	adds	r7, #32
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b0a4      	sub	sp, #144	@ 0x90
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	4613      	mov	r3, r2
 8007df4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007df6:	88fb      	ldrh	r3, [r7, #6]
 8007df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 81db 	beq.w	80081b8 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	00db      	lsls	r3, r3, #3
 8007e14:	4413      	add	r3, r2
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	6812      	ldr	r2, [r2, #0]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e20:	881b      	ldrh	r3, [r3, #0]
 8007e22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e26:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	699a      	ldr	r2, [r3, #24]
 8007e2e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d907      	bls.n	8007e46 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	699a      	ldr	r2, [r3, #24]
 8007e3a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007e3e:	1ad2      	subs	r2, r2, r3
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	619a      	str	r2, [r3, #24]
 8007e44:	e002      	b.n	8007e4c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f040 80b9 	bne.w	8007fc8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	785b      	ldrb	r3, [r3, #1]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d126      	bne.n	8007eac <HAL_PCD_EP_DB_Transmit+0xc4>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	461a      	mov	r2, r3
 8007e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e72:	4413      	add	r3, r2
 8007e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	00da      	lsls	r2, r3, #3
 8007e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e7e:	4413      	add	r3, r2
 8007e80:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e88:	881b      	ldrh	r3, [r3, #0]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e94:	801a      	strh	r2, [r3, #0]
 8007e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ea0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea8:	801a      	strh	r2, [r3, #0]
 8007eaa:	e01a      	b.n	8007ee2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	785b      	ldrb	r3, [r3, #1]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d116      	bne.n	8007ee2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ec8:	4413      	add	r3, r2
 8007eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	00da      	lsls	r2, r3, #3
 8007ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007eda:	633b      	str	r3, [r7, #48]	@ 0x30
 8007edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ede:	2200      	movs	r2, #0
 8007ee0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	785b      	ldrb	r3, [r3, #1]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d126      	bne.n	8007f3e <HAL_PCD_EP_DB_Transmit+0x156>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	61fb      	str	r3, [r7, #28]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	461a      	mov	r2, r3
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	4413      	add	r3, r2
 8007f06:	61fb      	str	r3, [r7, #28]
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	00da      	lsls	r2, r3, #3
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	4413      	add	r3, r2
 8007f12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f16:	61bb      	str	r3, [r7, #24]
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	801a      	strh	r2, [r3, #0]
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	881b      	ldrh	r3, [r3, #0]
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	801a      	strh	r2, [r3, #0]
 8007f3c:	e017      	b.n	8007f6e <HAL_PCD_EP_DB_Transmit+0x186>
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	785b      	ldrb	r3, [r3, #1]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d113      	bne.n	8007f6e <HAL_PCD_EP_DB_Transmit+0x186>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	461a      	mov	r2, r3
 8007f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f54:	4413      	add	r3, r2
 8007f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	00da      	lsls	r2, r3, #3
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f60:	4413      	add	r3, r2
 8007f62:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f66:	623b      	str	r3, [r7, #32]
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	4619      	mov	r1, r3
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f008 f906 	bl	8010186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007f7a:	88fb      	ldrh	r3, [r7, #6]
 8007f7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 82fa 	beq.w	800857a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4413      	add	r3, r2
 8007f94:	881b      	ldrh	r3, [r3, #0]
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fa0:	82fb      	strh	r3, [r7, #22]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	441a      	add	r2, r3
 8007fb0:	8afb      	ldrh	r3, [r7, #22]
 8007fb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	8013      	strh	r3, [r2, #0]
 8007fc6:	e2d8      	b.n	800857a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007fc8:	88fb      	ldrh	r3, [r7, #6]
 8007fca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d021      	beq.n	8008016 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	881b      	ldrh	r3, [r3, #0]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fe8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	441a      	add	r2, r3
 8007ffe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008002:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008006:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800800a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800800e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008012:	b29b      	uxth	r3, r3
 8008014:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800801c:	2b01      	cmp	r3, #1
 800801e:	f040 82ac 	bne.w	800857a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	695a      	ldr	r2, [r3, #20]
 8008026:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800802a:	441a      	add	r2, r3
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	69da      	ldr	r2, [r3, #28]
 8008034:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008038:	441a      	add	r2, r3
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	6a1a      	ldr	r2, [r3, #32]
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	429a      	cmp	r2, r3
 8008048:	d30b      	bcc.n	8008062 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	6a1a      	ldr	r2, [r3, #32]
 8008056:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800805a:	1ad2      	subs	r2, r2, r3
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	621a      	str	r2, [r3, #32]
 8008060:	e017      	b.n	8008092 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d108      	bne.n	800807c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800806a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800806e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800807a:	e00a      	b.n	8008092 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	6a1b      	ldr	r3, [r3, #32]
 8008088:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2200      	movs	r2, #0
 8008090:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	785b      	ldrb	r3, [r3, #1]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d165      	bne.n	8008166 <HAL_PCD_EP_DB_Transmit+0x37e>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	461a      	mov	r2, r3
 80080ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ae:	4413      	add	r3, r2
 80080b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	00da      	lsls	r2, r3, #3
 80080b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ba:	4413      	add	r3, r2
 80080bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80080c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d0:	801a      	strh	r2, [r3, #0]
 80080d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10a      	bne.n	80080f0 <HAL_PCD_EP_DB_Transmit+0x308>
 80080da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080dc:	881b      	ldrh	r3, [r3, #0]
 80080de:	b29b      	uxth	r3, r3
 80080e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ec:	801a      	strh	r2, [r3, #0]
 80080ee:	e057      	b.n	80081a0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80080f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80080f6:	d818      	bhi.n	800812a <HAL_PCD_EP_DB_Transmit+0x342>
 80080f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080fc:	085b      	lsrs	r3, r3, #1
 80080fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008100:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	d002      	beq.n	8008112 <HAL_PCD_EP_DB_Transmit+0x32a>
 800810c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800810e:	3301      	adds	r3, #1
 8008110:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	b29a      	uxth	r2, r3
 8008118:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800811a:	b29b      	uxth	r3, r3
 800811c:	029b      	lsls	r3, r3, #10
 800811e:	b29b      	uxth	r3, r3
 8008120:	4313      	orrs	r3, r2
 8008122:	b29a      	uxth	r2, r3
 8008124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008126:	801a      	strh	r2, [r3, #0]
 8008128:	e03a      	b.n	80081a0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800812a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800812e:	095b      	lsrs	r3, r3, #5
 8008130:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008132:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008136:	f003 031f 	and.w	r3, r3, #31
 800813a:	2b00      	cmp	r3, #0
 800813c:	d102      	bne.n	8008144 <HAL_PCD_EP_DB_Transmit+0x35c>
 800813e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008140:	3b01      	subs	r3, #1
 8008142:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	b29a      	uxth	r2, r3
 800814a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800814c:	b29b      	uxth	r3, r3
 800814e:	029b      	lsls	r3, r3, #10
 8008150:	b29b      	uxth	r3, r3
 8008152:	4313      	orrs	r3, r2
 8008154:	b29b      	uxth	r3, r3
 8008156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800815a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800815e:	b29a      	uxth	r2, r3
 8008160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008162:	801a      	strh	r2, [r3, #0]
 8008164:	e01c      	b.n	80081a0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	785b      	ldrb	r3, [r3, #1]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d118      	bne.n	80081a0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	647b      	str	r3, [r7, #68]	@ 0x44
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800817c:	b29b      	uxth	r3, r3
 800817e:	461a      	mov	r2, r3
 8008180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008182:	4413      	add	r3, r2
 8008184:	647b      	str	r3, [r7, #68]	@ 0x44
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	00da      	lsls	r2, r3, #3
 800818c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800818e:	4413      	add	r3, r2
 8008190:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008194:	643b      	str	r3, [r7, #64]	@ 0x40
 8008196:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800819a:	b29a      	uxth	r2, r3
 800819c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800819e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6818      	ldr	r0, [r3, #0]
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	6959      	ldr	r1, [r3, #20]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	891a      	ldrh	r2, [r3, #8]
 80081ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	f006 f892 	bl	800e2da <USB_WritePMA>
 80081b6:	e1e0      	b.n	800857a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	461a      	mov	r2, r3
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	00db      	lsls	r3, r3, #3
 80081ca:	4413      	add	r3, r2
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	6812      	ldr	r2, [r2, #0]
 80081d0:	4413      	add	r3, r2
 80081d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80081d6:	881b      	ldrh	r3, [r3, #0]
 80081d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081dc:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	699a      	ldr	r2, [r3, #24]
 80081e4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d307      	bcc.n	80081fc <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	699a      	ldr	r2, [r3, #24]
 80081f0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80081f4:	1ad2      	subs	r2, r2, r3
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	619a      	str	r2, [r3, #24]
 80081fa:	e002      	b.n	8008202 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2200      	movs	r2, #0
 8008200:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	2b00      	cmp	r3, #0
 8008208:	f040 80c0 	bne.w	800838c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	785b      	ldrb	r3, [r3, #1]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d126      	bne.n	8008262 <HAL_PCD_EP_DB_Transmit+0x47a>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008222:	b29b      	uxth	r3, r3
 8008224:	461a      	mov	r2, r3
 8008226:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008228:	4413      	add	r3, r2
 800822a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	00da      	lsls	r2, r3, #3
 8008232:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008234:	4413      	add	r3, r2
 8008236:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800823a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800823c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	b29b      	uxth	r3, r3
 8008242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008246:	b29a      	uxth	r2, r3
 8008248:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800824a:	801a      	strh	r2, [r3, #0]
 800824c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800824e:	881b      	ldrh	r3, [r3, #0]
 8008250:	b29b      	uxth	r3, r3
 8008252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800825a:	b29a      	uxth	r2, r3
 800825c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800825e:	801a      	strh	r2, [r3, #0]
 8008260:	e01a      	b.n	8008298 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	785b      	ldrb	r3, [r3, #1]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d116      	bne.n	8008298 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008278:	b29b      	uxth	r3, r3
 800827a:	461a      	mov	r2, r3
 800827c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800827e:	4413      	add	r3, r2
 8008280:	667b      	str	r3, [r7, #100]	@ 0x64
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	00da      	lsls	r2, r3, #3
 8008288:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800828a:	4413      	add	r3, r2
 800828c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008290:	663b      	str	r3, [r7, #96]	@ 0x60
 8008292:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008294:	2200      	movs	r2, #0
 8008296:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	677b      	str	r3, [r7, #116]	@ 0x74
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	785b      	ldrb	r3, [r3, #1]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d12b      	bne.n	80082fe <HAL_PCD_EP_DB_Transmit+0x516>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	461a      	mov	r2, r3
 80082b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082ba:	4413      	add	r3, r2
 80082bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	00da      	lsls	r2, r3, #3
 80082c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082c6:	4413      	add	r3, r2
 80082c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80082cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082d4:	881b      	ldrh	r3, [r3, #0]
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082dc:	b29a      	uxth	r2, r3
 80082de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082e2:	801a      	strh	r2, [r3, #0]
 80082e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082e8:	881b      	ldrh	r3, [r3, #0]
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082fa:	801a      	strh	r2, [r3, #0]
 80082fc:	e017      	b.n	800832e <HAL_PCD_EP_DB_Transmit+0x546>
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	785b      	ldrb	r3, [r3, #1]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d113      	bne.n	800832e <HAL_PCD_EP_DB_Transmit+0x546>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800830e:	b29b      	uxth	r3, r3
 8008310:	461a      	mov	r2, r3
 8008312:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008314:	4413      	add	r3, r2
 8008316:	677b      	str	r3, [r7, #116]	@ 0x74
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	00da      	lsls	r2, r3, #3
 800831e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008320:	4413      	add	r3, r2
 8008322:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008326:	673b      	str	r3, [r7, #112]	@ 0x70
 8008328:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800832a:	2200      	movs	r2, #0
 800832c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	4619      	mov	r1, r3
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f007 ff26 	bl	8010186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800833a:	88fb      	ldrh	r3, [r7, #6]
 800833c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008340:	2b00      	cmp	r3, #0
 8008342:	f040 811a 	bne.w	800857a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	461a      	mov	r2, r3
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4413      	add	r3, r2
 8008354:	881b      	ldrh	r3, [r3, #0]
 8008356:	b29b      	uxth	r3, r3
 8008358:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800835c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008360:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	461a      	mov	r2, r3
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	441a      	add	r2, r3
 8008372:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8008376:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800837a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800837e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008386:	b29b      	uxth	r3, r3
 8008388:	8013      	strh	r3, [r2, #0]
 800838a:	e0f6      	b.n	800857a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800838c:	88fb      	ldrh	r3, [r7, #6]
 800838e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d121      	bne.n	80083da <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	881b      	ldrh	r3, [r3, #0]
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083b0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	461a      	mov	r2, r3
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	441a      	add	r2, r3
 80083c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80083c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80083d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	f040 80ca 	bne.w	800857a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	695a      	ldr	r2, [r3, #20]
 80083ea:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80083ee:	441a      	add	r2, r3
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	69da      	ldr	r2, [r3, #28]
 80083f8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80083fc:	441a      	add	r2, r3
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	6a1a      	ldr	r2, [r3, #32]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	429a      	cmp	r2, r3
 800840c:	d30b      	bcc.n	8008426 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	6a1a      	ldr	r2, [r3, #32]
 800841a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800841e:	1ad2      	subs	r2, r2, r3
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	621a      	str	r2, [r3, #32]
 8008424:	e017      	b.n	8008456 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d108      	bne.n	8008440 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800842e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008432:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800843e:	e00a      	b.n	8008456 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	6a1b      	ldr	r3, [r3, #32]
 8008444:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2200      	movs	r2, #0
 800844c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	657b      	str	r3, [r7, #84]	@ 0x54
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	785b      	ldrb	r3, [r3, #1]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d165      	bne.n	8008530 <HAL_PCD_EP_DB_Transmit+0x748>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008472:	b29b      	uxth	r3, r3
 8008474:	461a      	mov	r2, r3
 8008476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008478:	4413      	add	r3, r2
 800847a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	00da      	lsls	r2, r3, #3
 8008482:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008484:	4413      	add	r3, r2
 8008486:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800848a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800848c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	b29b      	uxth	r3, r3
 8008492:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008496:	b29a      	uxth	r2, r3
 8008498:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800849a:	801a      	strh	r2, [r3, #0]
 800849c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10a      	bne.n	80084ba <HAL_PCD_EP_DB_Transmit+0x6d2>
 80084a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084a6:	881b      	ldrh	r3, [r3, #0]
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084b6:	801a      	strh	r2, [r3, #0]
 80084b8:	e054      	b.n	8008564 <HAL_PCD_EP_DB_Transmit+0x77c>
 80084ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084be:	2b3e      	cmp	r3, #62	@ 0x3e
 80084c0:	d818      	bhi.n	80084f4 <HAL_PCD_EP_DB_Transmit+0x70c>
 80084c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084c6:	085b      	lsrs	r3, r3, #1
 80084c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d002      	beq.n	80084dc <HAL_PCD_EP_DB_Transmit+0x6f4>
 80084d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80084d8:	3301      	adds	r3, #1
 80084da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084de:	881b      	ldrh	r3, [r3, #0]
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	029b      	lsls	r3, r3, #10
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	4313      	orrs	r3, r2
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084f0:	801a      	strh	r2, [r3, #0]
 80084f2:	e037      	b.n	8008564 <HAL_PCD_EP_DB_Transmit+0x77c>
 80084f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084f8:	095b      	lsrs	r3, r3, #5
 80084fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008500:	f003 031f 	and.w	r3, r3, #31
 8008504:	2b00      	cmp	r3, #0
 8008506:	d102      	bne.n	800850e <HAL_PCD_EP_DB_Transmit+0x726>
 8008508:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800850a:	3b01      	subs	r3, #1
 800850c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800850e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	b29a      	uxth	r2, r3
 8008514:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008516:	b29b      	uxth	r3, r3
 8008518:	029b      	lsls	r3, r3, #10
 800851a:	b29b      	uxth	r3, r3
 800851c:	4313      	orrs	r3, r2
 800851e:	b29b      	uxth	r3, r3
 8008520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008528:	b29a      	uxth	r2, r3
 800852a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800852c:	801a      	strh	r2, [r3, #0]
 800852e:	e019      	b.n	8008564 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	785b      	ldrb	r3, [r3, #1]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d115      	bne.n	8008564 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008540:	b29b      	uxth	r3, r3
 8008542:	461a      	mov	r2, r3
 8008544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008546:	4413      	add	r3, r2
 8008548:	657b      	str	r3, [r7, #84]	@ 0x54
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	00da      	lsls	r2, r3, #3
 8008550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008552:	4413      	add	r3, r2
 8008554:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008558:	653b      	str	r3, [r7, #80]	@ 0x50
 800855a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800855e:	b29a      	uxth	r2, r3
 8008560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008562:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6818      	ldr	r0, [r3, #0]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	6959      	ldr	r1, [r3, #20]
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	895a      	ldrh	r2, [r3, #10]
 8008570:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008574:	b29b      	uxth	r3, r3
 8008576:	f005 feb0 	bl	800e2da <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	461a      	mov	r2, r3
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4413      	add	r3, r2
 8008588:	881b      	ldrh	r3, [r3, #0]
 800858a:	b29b      	uxth	r3, r3
 800858c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008590:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008594:	82bb      	strh	r3, [r7, #20]
 8008596:	8abb      	ldrh	r3, [r7, #20]
 8008598:	f083 0310 	eor.w	r3, r3, #16
 800859c:	82bb      	strh	r3, [r7, #20]
 800859e:	8abb      	ldrh	r3, [r7, #20]
 80085a0:	f083 0320 	eor.w	r3, r3, #32
 80085a4:	82bb      	strh	r3, [r7, #20]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	461a      	mov	r2, r3
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	441a      	add	r2, r3
 80085b4:	8abb      	ldrh	r3, [r7, #20]
 80085b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3790      	adds	r7, #144	@ 0x90
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b087      	sub	sp, #28
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	607b      	str	r3, [r7, #4]
 80085de:	460b      	mov	r3, r1
 80085e0:	817b      	strh	r3, [r7, #10]
 80085e2:	4613      	mov	r3, r2
 80085e4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80085e6:	897b      	ldrh	r3, [r7, #10]
 80085e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00b      	beq.n	800860a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80085f2:	897b      	ldrh	r3, [r7, #10]
 80085f4:	f003 0207 	and.w	r2, r3, #7
 80085f8:	4613      	mov	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	3310      	adds	r3, #16
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	4413      	add	r3, r2
 8008606:	617b      	str	r3, [r7, #20]
 8008608:	e009      	b.n	800861e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800860a:	897a      	ldrh	r2, [r7, #10]
 800860c:	4613      	mov	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	4413      	add	r3, r2
 800861c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800861e:	893b      	ldrh	r3, [r7, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d107      	bne.n	8008634 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	2200      	movs	r2, #0
 8008628:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	b29a      	uxth	r2, r3
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	80da      	strh	r2, [r3, #6]
 8008632:	e00b      	b.n	800864c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	2201      	movs	r2, #1
 8008638:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	b29a      	uxth	r2, r3
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	0c1b      	lsrs	r3, r3, #16
 8008646:	b29a      	uxth	r2, r3
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	371c      	adds	r7, #28
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800865a:	b480      	push	{r7}
 800865c:	b085      	sub	sp, #20
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800867e:	b29b      	uxth	r3, r3
 8008680:	f043 0301 	orr.w	r3, r3, #1
 8008684:	b29a      	uxth	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008692:	b29b      	uxth	r3, r3
 8008694:	f043 0302 	orr.w	r3, r3, #2
 8008698:	b29a      	uxth	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
	...

080086b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d141      	bne.n	8008742 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80086be:	4b4b      	ldr	r3, [pc, #300]	@ (80087ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80086c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086ca:	d131      	bne.n	8008730 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80086cc:	4b47      	ldr	r3, [pc, #284]	@ (80087ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086d2:	4a46      	ldr	r2, [pc, #280]	@ (80087ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80086dc:	4b43      	ldr	r3, [pc, #268]	@ (80087ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80086e4:	4a41      	ldr	r2, [pc, #260]	@ (80087ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80086ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80086ec:	4b40      	ldr	r3, [pc, #256]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2232      	movs	r2, #50	@ 0x32
 80086f2:	fb02 f303 	mul.w	r3, r2, r3
 80086f6:	4a3f      	ldr	r2, [pc, #252]	@ (80087f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80086f8:	fba2 2303 	umull	r2, r3, r2, r3
 80086fc:	0c9b      	lsrs	r3, r3, #18
 80086fe:	3301      	adds	r3, #1
 8008700:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008702:	e002      	b.n	800870a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	3b01      	subs	r3, #1
 8008708:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800870a:	4b38      	ldr	r3, [pc, #224]	@ (80087ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008716:	d102      	bne.n	800871e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1f2      	bne.n	8008704 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800871e:	4b33      	ldr	r3, [pc, #204]	@ (80087ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800872a:	d158      	bne.n	80087de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	e057      	b.n	80087e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008730:	4b2e      	ldr	r3, [pc, #184]	@ (80087ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008736:	4a2d      	ldr	r2, [pc, #180]	@ (80087ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008738:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800873c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008740:	e04d      	b.n	80087de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008748:	d141      	bne.n	80087ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800874a:	4b28      	ldr	r3, [pc, #160]	@ (80087ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008756:	d131      	bne.n	80087bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008758:	4b24      	ldr	r3, [pc, #144]	@ (80087ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800875a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800875e:	4a23      	ldr	r2, [pc, #140]	@ (80087ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008764:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008768:	4b20      	ldr	r3, [pc, #128]	@ (80087ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008770:	4a1e      	ldr	r2, [pc, #120]	@ (80087ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008772:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008776:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008778:	4b1d      	ldr	r3, [pc, #116]	@ (80087f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2232      	movs	r2, #50	@ 0x32
 800877e:	fb02 f303 	mul.w	r3, r2, r3
 8008782:	4a1c      	ldr	r2, [pc, #112]	@ (80087f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008784:	fba2 2303 	umull	r2, r3, r2, r3
 8008788:	0c9b      	lsrs	r3, r3, #18
 800878a:	3301      	adds	r3, #1
 800878c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800878e:	e002      	b.n	8008796 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	3b01      	subs	r3, #1
 8008794:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008796:	4b15      	ldr	r3, [pc, #84]	@ (80087ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800879e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087a2:	d102      	bne.n	80087aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1f2      	bne.n	8008790 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80087aa:	4b10      	ldr	r3, [pc, #64]	@ (80087ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087b6:	d112      	bne.n	80087de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e011      	b.n	80087e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087bc:	4b0b      	ldr	r3, [pc, #44]	@ (80087ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087c2:	4a0a      	ldr	r2, [pc, #40]	@ (80087ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80087cc:	e007      	b.n	80087de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80087ce:	4b07      	ldr	r3, [pc, #28]	@ (80087ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80087d6:	4a05      	ldr	r2, [pc, #20]	@ (80087ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80087dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3714      	adds	r7, #20
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	40007000 	.word	0x40007000
 80087f0:	20000020 	.word	0x20000020
 80087f4:	431bde83 	.word	0x431bde83

080087f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80087f8:	b480      	push	{r7}
 80087fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80087fc:	4b05      	ldr	r3, [pc, #20]	@ (8008814 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	4a04      	ldr	r2, [pc, #16]	@ (8008814 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008802:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008806:	6093      	str	r3, [r2, #8]
}
 8008808:	bf00      	nop
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	40007000 	.word	0x40007000

08008818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b088      	sub	sp, #32
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e2fe      	b.n	8008e28 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d075      	beq.n	8008922 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008836:	4b97      	ldr	r3, [pc, #604]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f003 030c 	and.w	r3, r3, #12
 800883e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008840:	4b94      	ldr	r3, [pc, #592]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f003 0303 	and.w	r3, r3, #3
 8008848:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	2b0c      	cmp	r3, #12
 800884e:	d102      	bne.n	8008856 <HAL_RCC_OscConfig+0x3e>
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	2b03      	cmp	r3, #3
 8008854:	d002      	beq.n	800885c <HAL_RCC_OscConfig+0x44>
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	2b08      	cmp	r3, #8
 800885a:	d10b      	bne.n	8008874 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800885c:	4b8d      	ldr	r3, [pc, #564]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d05b      	beq.n	8008920 <HAL_RCC_OscConfig+0x108>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d157      	bne.n	8008920 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e2d9      	b.n	8008e28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800887c:	d106      	bne.n	800888c <HAL_RCC_OscConfig+0x74>
 800887e:	4b85      	ldr	r3, [pc, #532]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a84      	ldr	r2, [pc, #528]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 8008884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008888:	6013      	str	r3, [r2, #0]
 800888a:	e01d      	b.n	80088c8 <HAL_RCC_OscConfig+0xb0>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008894:	d10c      	bne.n	80088b0 <HAL_RCC_OscConfig+0x98>
 8008896:	4b7f      	ldr	r3, [pc, #508]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a7e      	ldr	r2, [pc, #504]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 800889c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80088a0:	6013      	str	r3, [r2, #0]
 80088a2:	4b7c      	ldr	r3, [pc, #496]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a7b      	ldr	r2, [pc, #492]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 80088a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	e00b      	b.n	80088c8 <HAL_RCC_OscConfig+0xb0>
 80088b0:	4b78      	ldr	r3, [pc, #480]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a77      	ldr	r2, [pc, #476]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 80088b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088ba:	6013      	str	r3, [r2, #0]
 80088bc:	4b75      	ldr	r3, [pc, #468]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a74      	ldr	r2, [pc, #464]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 80088c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80088c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d013      	beq.n	80088f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088d0:	f7fb fc1a 	bl	8004108 <HAL_GetTick>
 80088d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80088d6:	e008      	b.n	80088ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088d8:	f7fb fc16 	bl	8004108 <HAL_GetTick>
 80088dc:	4602      	mov	r2, r0
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	2b64      	cmp	r3, #100	@ 0x64
 80088e4:	d901      	bls.n	80088ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80088e6:	2303      	movs	r3, #3
 80088e8:	e29e      	b.n	8008e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80088ea:	4b6a      	ldr	r3, [pc, #424]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d0f0      	beq.n	80088d8 <HAL_RCC_OscConfig+0xc0>
 80088f6:	e014      	b.n	8008922 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088f8:	f7fb fc06 	bl	8004108 <HAL_GetTick>
 80088fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80088fe:	e008      	b.n	8008912 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008900:	f7fb fc02 	bl	8004108 <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	2b64      	cmp	r3, #100	@ 0x64
 800890c:	d901      	bls.n	8008912 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e28a      	b.n	8008e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008912:	4b60      	ldr	r3, [pc, #384]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1f0      	bne.n	8008900 <HAL_RCC_OscConfig+0xe8>
 800891e:	e000      	b.n	8008922 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 0302 	and.w	r3, r3, #2
 800892a:	2b00      	cmp	r3, #0
 800892c:	d075      	beq.n	8008a1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800892e:	4b59      	ldr	r3, [pc, #356]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	f003 030c 	and.w	r3, r3, #12
 8008936:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008938:	4b56      	ldr	r3, [pc, #344]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	f003 0303 	and.w	r3, r3, #3
 8008940:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	2b0c      	cmp	r3, #12
 8008946:	d102      	bne.n	800894e <HAL_RCC_OscConfig+0x136>
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	2b02      	cmp	r3, #2
 800894c:	d002      	beq.n	8008954 <HAL_RCC_OscConfig+0x13c>
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	2b04      	cmp	r3, #4
 8008952:	d11f      	bne.n	8008994 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008954:	4b4f      	ldr	r3, [pc, #316]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800895c:	2b00      	cmp	r3, #0
 800895e:	d005      	beq.n	800896c <HAL_RCC_OscConfig+0x154>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d101      	bne.n	800896c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e25d      	b.n	8008e28 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800896c:	4b49      	ldr	r3, [pc, #292]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	061b      	lsls	r3, r3, #24
 800897a:	4946      	ldr	r1, [pc, #280]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 800897c:	4313      	orrs	r3, r2
 800897e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008980:	4b45      	ldr	r3, [pc, #276]	@ (8008a98 <HAL_RCC_OscConfig+0x280>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4618      	mov	r0, r3
 8008986:	f7fb fb73 	bl	8004070 <HAL_InitTick>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d043      	beq.n	8008a18 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e249      	b.n	8008e28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d023      	beq.n	80089e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800899c:	4b3d      	ldr	r3, [pc, #244]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a3c      	ldr	r2, [pc, #240]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 80089a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089a8:	f7fb fbae 	bl	8004108 <HAL_GetTick>
 80089ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089ae:	e008      	b.n	80089c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089b0:	f7fb fbaa 	bl	8004108 <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d901      	bls.n	80089c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80089be:	2303      	movs	r3, #3
 80089c0:	e232      	b.n	8008e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089c2:	4b34      	ldr	r3, [pc, #208]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d0f0      	beq.n	80089b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089ce:	4b31      	ldr	r3, [pc, #196]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	061b      	lsls	r3, r3, #24
 80089dc:	492d      	ldr	r1, [pc, #180]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	604b      	str	r3, [r1, #4]
 80089e2:	e01a      	b.n	8008a1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089e4:	4b2b      	ldr	r3, [pc, #172]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a2a      	ldr	r2, [pc, #168]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 80089ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f0:	f7fb fb8a 	bl	8004108 <HAL_GetTick>
 80089f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80089f6:	e008      	b.n	8008a0a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089f8:	f7fb fb86 	bl	8004108 <HAL_GetTick>
 80089fc:	4602      	mov	r2, r0
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d901      	bls.n	8008a0a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e20e      	b.n	8008e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a0a:	4b22      	ldr	r3, [pc, #136]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1f0      	bne.n	80089f8 <HAL_RCC_OscConfig+0x1e0>
 8008a16:	e000      	b.n	8008a1a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0308 	and.w	r3, r3, #8
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d041      	beq.n	8008aaa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d01c      	beq.n	8008a68 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a2e:	4b19      	ldr	r3, [pc, #100]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 8008a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a34:	4a17      	ldr	r2, [pc, #92]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 8008a36:	f043 0301 	orr.w	r3, r3, #1
 8008a3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a3e:	f7fb fb63 	bl	8004108 <HAL_GetTick>
 8008a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a44:	e008      	b.n	8008a58 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a46:	f7fb fb5f 	bl	8004108 <HAL_GetTick>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d901      	bls.n	8008a58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e1e7      	b.n	8008e28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a58:	4b0e      	ldr	r3, [pc, #56]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 8008a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a5e:	f003 0302 	and.w	r3, r3, #2
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d0ef      	beq.n	8008a46 <HAL_RCC_OscConfig+0x22e>
 8008a66:	e020      	b.n	8008aaa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a68:	4b0a      	ldr	r3, [pc, #40]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 8008a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a6e:	4a09      	ldr	r2, [pc, #36]	@ (8008a94 <HAL_RCC_OscConfig+0x27c>)
 8008a70:	f023 0301 	bic.w	r3, r3, #1
 8008a74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a78:	f7fb fb46 	bl	8004108 <HAL_GetTick>
 8008a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008a7e:	e00d      	b.n	8008a9c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a80:	f7fb fb42 	bl	8004108 <HAL_GetTick>
 8008a84:	4602      	mov	r2, r0
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d906      	bls.n	8008a9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e1ca      	b.n	8008e28 <HAL_RCC_OscConfig+0x610>
 8008a92:	bf00      	nop
 8008a94:	40021000 	.word	0x40021000
 8008a98:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008a9c:	4b8c      	ldr	r3, [pc, #560]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008aa2:	f003 0302 	and.w	r3, r3, #2
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1ea      	bne.n	8008a80 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 0304 	and.w	r3, r3, #4
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f000 80a6 	beq.w	8008c04 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008abc:	4b84      	ldr	r3, [pc, #528]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ac0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d101      	bne.n	8008acc <HAL_RCC_OscConfig+0x2b4>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e000      	b.n	8008ace <HAL_RCC_OscConfig+0x2b6>
 8008acc:	2300      	movs	r3, #0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00d      	beq.n	8008aee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ad2:	4b7f      	ldr	r3, [pc, #508]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ad6:	4a7e      	ldr	r2, [pc, #504]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008adc:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ade:	4b7c      	ldr	r3, [pc, #496]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ae6:	60fb      	str	r3, [r7, #12]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008aea:	2301      	movs	r3, #1
 8008aec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008aee:	4b79      	ldr	r3, [pc, #484]	@ (8008cd4 <HAL_RCC_OscConfig+0x4bc>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d118      	bne.n	8008b2c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008afa:	4b76      	ldr	r3, [pc, #472]	@ (8008cd4 <HAL_RCC_OscConfig+0x4bc>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a75      	ldr	r2, [pc, #468]	@ (8008cd4 <HAL_RCC_OscConfig+0x4bc>)
 8008b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b06:	f7fb faff 	bl	8004108 <HAL_GetTick>
 8008b0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b0c:	e008      	b.n	8008b20 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b0e:	f7fb fafb 	bl	8004108 <HAL_GetTick>
 8008b12:	4602      	mov	r2, r0
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d901      	bls.n	8008b20 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e183      	b.n	8008e28 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b20:	4b6c      	ldr	r3, [pc, #432]	@ (8008cd4 <HAL_RCC_OscConfig+0x4bc>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d0f0      	beq.n	8008b0e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d108      	bne.n	8008b46 <HAL_RCC_OscConfig+0x32e>
 8008b34:	4b66      	ldr	r3, [pc, #408]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b3a:	4a65      	ldr	r2, [pc, #404]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008b3c:	f043 0301 	orr.w	r3, r3, #1
 8008b40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008b44:	e024      	b.n	8008b90 <HAL_RCC_OscConfig+0x378>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	2b05      	cmp	r3, #5
 8008b4c:	d110      	bne.n	8008b70 <HAL_RCC_OscConfig+0x358>
 8008b4e:	4b60      	ldr	r3, [pc, #384]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b54:	4a5e      	ldr	r2, [pc, #376]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008b56:	f043 0304 	orr.w	r3, r3, #4
 8008b5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008b5e:	4b5c      	ldr	r3, [pc, #368]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b64:	4a5a      	ldr	r2, [pc, #360]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008b66:	f043 0301 	orr.w	r3, r3, #1
 8008b6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008b6e:	e00f      	b.n	8008b90 <HAL_RCC_OscConfig+0x378>
 8008b70:	4b57      	ldr	r3, [pc, #348]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b76:	4a56      	ldr	r2, [pc, #344]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008b78:	f023 0301 	bic.w	r3, r3, #1
 8008b7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008b80:	4b53      	ldr	r3, [pc, #332]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b86:	4a52      	ldr	r2, [pc, #328]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008b88:	f023 0304 	bic.w	r3, r3, #4
 8008b8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d016      	beq.n	8008bc6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b98:	f7fb fab6 	bl	8004108 <HAL_GetTick>
 8008b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b9e:	e00a      	b.n	8008bb6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ba0:	f7fb fab2 	bl	8004108 <HAL_GetTick>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d901      	bls.n	8008bb6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e138      	b.n	8008e28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008bb6:	4b46      	ldr	r3, [pc, #280]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bbc:	f003 0302 	and.w	r3, r3, #2
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d0ed      	beq.n	8008ba0 <HAL_RCC_OscConfig+0x388>
 8008bc4:	e015      	b.n	8008bf2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bc6:	f7fb fa9f 	bl	8004108 <HAL_GetTick>
 8008bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008bcc:	e00a      	b.n	8008be4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bce:	f7fb fa9b 	bl	8004108 <HAL_GetTick>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d901      	bls.n	8008be4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e121      	b.n	8008e28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008be4:	4b3a      	ldr	r3, [pc, #232]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bea:	f003 0302 	and.w	r3, r3, #2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1ed      	bne.n	8008bce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008bf2:	7ffb      	ldrb	r3, [r7, #31]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d105      	bne.n	8008c04 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bf8:	4b35      	ldr	r3, [pc, #212]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bfc:	4a34      	ldr	r2, [pc, #208]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008bfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c02:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 0320 	and.w	r3, r3, #32
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d03c      	beq.n	8008c8a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d01c      	beq.n	8008c52 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008c18:	4b2d      	ldr	r3, [pc, #180]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008c1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c1e:	4a2c      	ldr	r2, [pc, #176]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008c20:	f043 0301 	orr.w	r3, r3, #1
 8008c24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c28:	f7fb fa6e 	bl	8004108 <HAL_GetTick>
 8008c2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008c2e:	e008      	b.n	8008c42 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c30:	f7fb fa6a 	bl	8004108 <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d901      	bls.n	8008c42 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e0f2      	b.n	8008e28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008c42:	4b23      	ldr	r3, [pc, #140]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008c44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c48:	f003 0302 	and.w	r3, r3, #2
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d0ef      	beq.n	8008c30 <HAL_RCC_OscConfig+0x418>
 8008c50:	e01b      	b.n	8008c8a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c52:	4b1f      	ldr	r3, [pc, #124]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008c54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c58:	4a1d      	ldr	r2, [pc, #116]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008c5a:	f023 0301 	bic.w	r3, r3, #1
 8008c5e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c62:	f7fb fa51 	bl	8004108 <HAL_GetTick>
 8008c66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008c68:	e008      	b.n	8008c7c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c6a:	f7fb fa4d 	bl	8004108 <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d901      	bls.n	8008c7c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e0d5      	b.n	8008e28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008c7c:	4b14      	ldr	r3, [pc, #80]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c82:	f003 0302 	and.w	r3, r3, #2
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1ef      	bne.n	8008c6a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f000 80c9 	beq.w	8008e26 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008c94:	4b0e      	ldr	r3, [pc, #56]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f003 030c 	and.w	r3, r3, #12
 8008c9c:	2b0c      	cmp	r3, #12
 8008c9e:	f000 8083 	beq.w	8008da8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d15e      	bne.n	8008d68 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008caa:	4b09      	ldr	r3, [pc, #36]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a08      	ldr	r2, [pc, #32]	@ (8008cd0 <HAL_RCC_OscConfig+0x4b8>)
 8008cb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cb6:	f7fb fa27 	bl	8004108 <HAL_GetTick>
 8008cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008cbc:	e00c      	b.n	8008cd8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cbe:	f7fb fa23 	bl	8004108 <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d905      	bls.n	8008cd8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	e0ab      	b.n	8008e28 <HAL_RCC_OscConfig+0x610>
 8008cd0:	40021000 	.word	0x40021000
 8008cd4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008cd8:	4b55      	ldr	r3, [pc, #340]	@ (8008e30 <HAL_RCC_OscConfig+0x618>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1ec      	bne.n	8008cbe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ce4:	4b52      	ldr	r3, [pc, #328]	@ (8008e30 <HAL_RCC_OscConfig+0x618>)
 8008ce6:	68da      	ldr	r2, [r3, #12]
 8008ce8:	4b52      	ldr	r3, [pc, #328]	@ (8008e34 <HAL_RCC_OscConfig+0x61c>)
 8008cea:	4013      	ands	r3, r2
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	6a11      	ldr	r1, [r2, #32]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008cf4:	3a01      	subs	r2, #1
 8008cf6:	0112      	lsls	r2, r2, #4
 8008cf8:	4311      	orrs	r1, r2
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008cfe:	0212      	lsls	r2, r2, #8
 8008d00:	4311      	orrs	r1, r2
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008d06:	0852      	lsrs	r2, r2, #1
 8008d08:	3a01      	subs	r2, #1
 8008d0a:	0552      	lsls	r2, r2, #21
 8008d0c:	4311      	orrs	r1, r2
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008d12:	0852      	lsrs	r2, r2, #1
 8008d14:	3a01      	subs	r2, #1
 8008d16:	0652      	lsls	r2, r2, #25
 8008d18:	4311      	orrs	r1, r2
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008d1e:	06d2      	lsls	r2, r2, #27
 8008d20:	430a      	orrs	r2, r1
 8008d22:	4943      	ldr	r1, [pc, #268]	@ (8008e30 <HAL_RCC_OscConfig+0x618>)
 8008d24:	4313      	orrs	r3, r2
 8008d26:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d28:	4b41      	ldr	r3, [pc, #260]	@ (8008e30 <HAL_RCC_OscConfig+0x618>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a40      	ldr	r2, [pc, #256]	@ (8008e30 <HAL_RCC_OscConfig+0x618>)
 8008d2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d32:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008d34:	4b3e      	ldr	r3, [pc, #248]	@ (8008e30 <HAL_RCC_OscConfig+0x618>)
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	4a3d      	ldr	r2, [pc, #244]	@ (8008e30 <HAL_RCC_OscConfig+0x618>)
 8008d3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d40:	f7fb f9e2 	bl	8004108 <HAL_GetTick>
 8008d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d46:	e008      	b.n	8008d5a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d48:	f7fb f9de 	bl	8004108 <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d901      	bls.n	8008d5a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e066      	b.n	8008e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d5a:	4b35      	ldr	r3, [pc, #212]	@ (8008e30 <HAL_RCC_OscConfig+0x618>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d0f0      	beq.n	8008d48 <HAL_RCC_OscConfig+0x530>
 8008d66:	e05e      	b.n	8008e26 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d68:	4b31      	ldr	r3, [pc, #196]	@ (8008e30 <HAL_RCC_OscConfig+0x618>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a30      	ldr	r2, [pc, #192]	@ (8008e30 <HAL_RCC_OscConfig+0x618>)
 8008d6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d74:	f7fb f9c8 	bl	8004108 <HAL_GetTick>
 8008d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d7a:	e008      	b.n	8008d8e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d7c:	f7fb f9c4 	bl	8004108 <HAL_GetTick>
 8008d80:	4602      	mov	r2, r0
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d901      	bls.n	8008d8e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	e04c      	b.n	8008e28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d8e:	4b28      	ldr	r3, [pc, #160]	@ (8008e30 <HAL_RCC_OscConfig+0x618>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1f0      	bne.n	8008d7c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008d9a:	4b25      	ldr	r3, [pc, #148]	@ (8008e30 <HAL_RCC_OscConfig+0x618>)
 8008d9c:	68da      	ldr	r2, [r3, #12]
 8008d9e:	4924      	ldr	r1, [pc, #144]	@ (8008e30 <HAL_RCC_OscConfig+0x618>)
 8008da0:	4b25      	ldr	r3, [pc, #148]	@ (8008e38 <HAL_RCC_OscConfig+0x620>)
 8008da2:	4013      	ands	r3, r2
 8008da4:	60cb      	str	r3, [r1, #12]
 8008da6:	e03e      	b.n	8008e26 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	69db      	ldr	r3, [r3, #28]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d101      	bne.n	8008db4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e039      	b.n	8008e28 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008db4:	4b1e      	ldr	r3, [pc, #120]	@ (8008e30 <HAL_RCC_OscConfig+0x618>)
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	f003 0203 	and.w	r2, r3, #3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a1b      	ldr	r3, [r3, #32]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d12c      	bne.n	8008e22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d123      	bne.n	8008e22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d11b      	bne.n	8008e22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d113      	bne.n	8008e22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e04:	085b      	lsrs	r3, r3, #1
 8008e06:	3b01      	subs	r3, #1
 8008e08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d109      	bne.n	8008e22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e18:	085b      	lsrs	r3, r3, #1
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d001      	beq.n	8008e26 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e000      	b.n	8008e28 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3720      	adds	r7, #32
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	40021000 	.word	0x40021000
 8008e34:	019f800c 	.word	0x019f800c
 8008e38:	feeefffc 	.word	0xfeeefffc

08008e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b086      	sub	sp, #24
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008e46:	2300      	movs	r3, #0
 8008e48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e11e      	b.n	8009092 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e54:	4b91      	ldr	r3, [pc, #580]	@ (800909c <HAL_RCC_ClockConfig+0x260>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 030f 	and.w	r3, r3, #15
 8008e5c:	683a      	ldr	r2, [r7, #0]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d910      	bls.n	8008e84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e62:	4b8e      	ldr	r3, [pc, #568]	@ (800909c <HAL_RCC_ClockConfig+0x260>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f023 020f 	bic.w	r2, r3, #15
 8008e6a:	498c      	ldr	r1, [pc, #560]	@ (800909c <HAL_RCC_ClockConfig+0x260>)
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e72:	4b8a      	ldr	r3, [pc, #552]	@ (800909c <HAL_RCC_ClockConfig+0x260>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 030f 	and.w	r3, r3, #15
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d001      	beq.n	8008e84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e106      	b.n	8009092 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 0301 	and.w	r3, r3, #1
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d073      	beq.n	8008f78 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	2b03      	cmp	r3, #3
 8008e96:	d129      	bne.n	8008eec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e98:	4b81      	ldr	r3, [pc, #516]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d101      	bne.n	8008ea8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e0f4      	b.n	8009092 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008ea8:	f000 f99e 	bl	80091e8 <RCC_GetSysClockFreqFromPLLSource>
 8008eac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	4a7c      	ldr	r2, [pc, #496]	@ (80090a4 <HAL_RCC_ClockConfig+0x268>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d93f      	bls.n	8008f36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008eb6:	4b7a      	ldr	r3, [pc, #488]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d009      	beq.n	8008ed6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d033      	beq.n	8008f36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d12f      	bne.n	8008f36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008ed6:	4b72      	ldr	r3, [pc, #456]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ede:	4a70      	ldr	r2, [pc, #448]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8008ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ee4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008ee6:	2380      	movs	r3, #128	@ 0x80
 8008ee8:	617b      	str	r3, [r7, #20]
 8008eea:	e024      	b.n	8008f36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d107      	bne.n	8008f04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ef4:	4b6a      	ldr	r3, [pc, #424]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d109      	bne.n	8008f14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e0c6      	b.n	8009092 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f04:	4b66      	ldr	r3, [pc, #408]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d101      	bne.n	8008f14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	e0be      	b.n	8009092 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008f14:	f000 f8ce 	bl	80090b4 <HAL_RCC_GetSysClockFreq>
 8008f18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	4a61      	ldr	r2, [pc, #388]	@ (80090a4 <HAL_RCC_ClockConfig+0x268>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d909      	bls.n	8008f36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008f22:	4b5f      	ldr	r3, [pc, #380]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f2a:	4a5d      	ldr	r2, [pc, #372]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8008f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008f32:	2380      	movs	r3, #128	@ 0x80
 8008f34:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f36:	4b5a      	ldr	r3, [pc, #360]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	f023 0203 	bic.w	r2, r3, #3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	4957      	ldr	r1, [pc, #348]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8008f44:	4313      	orrs	r3, r2
 8008f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f48:	f7fb f8de 	bl	8004108 <HAL_GetTick>
 8008f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f4e:	e00a      	b.n	8008f66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f50:	f7fb f8da 	bl	8004108 <HAL_GetTick>
 8008f54:	4602      	mov	r2, r0
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d901      	bls.n	8008f66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008f62:	2303      	movs	r3, #3
 8008f64:	e095      	b.n	8009092 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f66:	4b4e      	ldr	r3, [pc, #312]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	f003 020c 	and.w	r2, r3, #12
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d1eb      	bne.n	8008f50 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 0302 	and.w	r3, r3, #2
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d023      	beq.n	8008fcc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0304 	and.w	r3, r3, #4
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d005      	beq.n	8008f9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f90:	4b43      	ldr	r3, [pc, #268]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	4a42      	ldr	r2, [pc, #264]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8008f96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008f9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0308 	and.w	r3, r3, #8
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d007      	beq.n	8008fb8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008fa8:	4b3d      	ldr	r3, [pc, #244]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008fb0:	4a3b      	ldr	r2, [pc, #236]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8008fb2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008fb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fb8:	4b39      	ldr	r3, [pc, #228]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	4936      	ldr	r1, [pc, #216]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	608b      	str	r3, [r1, #8]
 8008fca:	e008      	b.n	8008fde <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	2b80      	cmp	r3, #128	@ 0x80
 8008fd0:	d105      	bne.n	8008fde <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008fd2:	4b33      	ldr	r3, [pc, #204]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	4a32      	ldr	r2, [pc, #200]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8008fd8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008fdc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008fde:	4b2f      	ldr	r3, [pc, #188]	@ (800909c <HAL_RCC_ClockConfig+0x260>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 030f 	and.w	r3, r3, #15
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d21d      	bcs.n	8009028 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fec:	4b2b      	ldr	r3, [pc, #172]	@ (800909c <HAL_RCC_ClockConfig+0x260>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f023 020f 	bic.w	r2, r3, #15
 8008ff4:	4929      	ldr	r1, [pc, #164]	@ (800909c <HAL_RCC_ClockConfig+0x260>)
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008ffc:	f7fb f884 	bl	8004108 <HAL_GetTick>
 8009000:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009002:	e00a      	b.n	800901a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009004:	f7fb f880 	bl	8004108 <HAL_GetTick>
 8009008:	4602      	mov	r2, r0
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	1ad3      	subs	r3, r2, r3
 800900e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009012:	4293      	cmp	r3, r2
 8009014:	d901      	bls.n	800901a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e03b      	b.n	8009092 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800901a:	4b20      	ldr	r3, [pc, #128]	@ (800909c <HAL_RCC_ClockConfig+0x260>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 030f 	and.w	r3, r3, #15
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	429a      	cmp	r2, r3
 8009026:	d1ed      	bne.n	8009004 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0304 	and.w	r3, r3, #4
 8009030:	2b00      	cmp	r3, #0
 8009032:	d008      	beq.n	8009046 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009034:	4b1a      	ldr	r3, [pc, #104]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	4917      	ldr	r1, [pc, #92]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8009042:	4313      	orrs	r3, r2
 8009044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0308 	and.w	r3, r3, #8
 800904e:	2b00      	cmp	r3, #0
 8009050:	d009      	beq.n	8009066 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009052:	4b13      	ldr	r3, [pc, #76]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	00db      	lsls	r3, r3, #3
 8009060:	490f      	ldr	r1, [pc, #60]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 8009062:	4313      	orrs	r3, r2
 8009064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009066:	f000 f825 	bl	80090b4 <HAL_RCC_GetSysClockFreq>
 800906a:	4602      	mov	r2, r0
 800906c:	4b0c      	ldr	r3, [pc, #48]	@ (80090a0 <HAL_RCC_ClockConfig+0x264>)
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	091b      	lsrs	r3, r3, #4
 8009072:	f003 030f 	and.w	r3, r3, #15
 8009076:	490c      	ldr	r1, [pc, #48]	@ (80090a8 <HAL_RCC_ClockConfig+0x26c>)
 8009078:	5ccb      	ldrb	r3, [r1, r3]
 800907a:	f003 031f 	and.w	r3, r3, #31
 800907e:	fa22 f303 	lsr.w	r3, r2, r3
 8009082:	4a0a      	ldr	r2, [pc, #40]	@ (80090ac <HAL_RCC_ClockConfig+0x270>)
 8009084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009086:	4b0a      	ldr	r3, [pc, #40]	@ (80090b0 <HAL_RCC_ClockConfig+0x274>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4618      	mov	r0, r3
 800908c:	f7fa fff0 	bl	8004070 <HAL_InitTick>
 8009090:	4603      	mov	r3, r0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	40022000 	.word	0x40022000
 80090a0:	40021000 	.word	0x40021000
 80090a4:	04c4b400 	.word	0x04c4b400
 80090a8:	08016da8 	.word	0x08016da8
 80090ac:	20000020 	.word	0x20000020
 80090b0:	20000024 	.word	0x20000024

080090b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80090ba:	4b2c      	ldr	r3, [pc, #176]	@ (800916c <HAL_RCC_GetSysClockFreq+0xb8>)
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f003 030c 	and.w	r3, r3, #12
 80090c2:	2b04      	cmp	r3, #4
 80090c4:	d102      	bne.n	80090cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80090c6:	4b2a      	ldr	r3, [pc, #168]	@ (8009170 <HAL_RCC_GetSysClockFreq+0xbc>)
 80090c8:	613b      	str	r3, [r7, #16]
 80090ca:	e047      	b.n	800915c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80090cc:	4b27      	ldr	r3, [pc, #156]	@ (800916c <HAL_RCC_GetSysClockFreq+0xb8>)
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f003 030c 	and.w	r3, r3, #12
 80090d4:	2b08      	cmp	r3, #8
 80090d6:	d102      	bne.n	80090de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80090d8:	4b26      	ldr	r3, [pc, #152]	@ (8009174 <HAL_RCC_GetSysClockFreq+0xc0>)
 80090da:	613b      	str	r3, [r7, #16]
 80090dc:	e03e      	b.n	800915c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80090de:	4b23      	ldr	r3, [pc, #140]	@ (800916c <HAL_RCC_GetSysClockFreq+0xb8>)
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	f003 030c 	and.w	r3, r3, #12
 80090e6:	2b0c      	cmp	r3, #12
 80090e8:	d136      	bne.n	8009158 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80090ea:	4b20      	ldr	r3, [pc, #128]	@ (800916c <HAL_RCC_GetSysClockFreq+0xb8>)
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	f003 0303 	and.w	r3, r3, #3
 80090f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80090f4:	4b1d      	ldr	r3, [pc, #116]	@ (800916c <HAL_RCC_GetSysClockFreq+0xb8>)
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	091b      	lsrs	r3, r3, #4
 80090fa:	f003 030f 	and.w	r3, r3, #15
 80090fe:	3301      	adds	r3, #1
 8009100:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2b03      	cmp	r3, #3
 8009106:	d10c      	bne.n	8009122 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009108:	4a1a      	ldr	r2, [pc, #104]	@ (8009174 <HAL_RCC_GetSysClockFreq+0xc0>)
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009110:	4a16      	ldr	r2, [pc, #88]	@ (800916c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009112:	68d2      	ldr	r2, [r2, #12]
 8009114:	0a12      	lsrs	r2, r2, #8
 8009116:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800911a:	fb02 f303 	mul.w	r3, r2, r3
 800911e:	617b      	str	r3, [r7, #20]
      break;
 8009120:	e00c      	b.n	800913c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009122:	4a13      	ldr	r2, [pc, #76]	@ (8009170 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	fbb2 f3f3 	udiv	r3, r2, r3
 800912a:	4a10      	ldr	r2, [pc, #64]	@ (800916c <HAL_RCC_GetSysClockFreq+0xb8>)
 800912c:	68d2      	ldr	r2, [r2, #12]
 800912e:	0a12      	lsrs	r2, r2, #8
 8009130:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009134:	fb02 f303 	mul.w	r3, r2, r3
 8009138:	617b      	str	r3, [r7, #20]
      break;
 800913a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800913c:	4b0b      	ldr	r3, [pc, #44]	@ (800916c <HAL_RCC_GetSysClockFreq+0xb8>)
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	0e5b      	lsrs	r3, r3, #25
 8009142:	f003 0303 	and.w	r3, r3, #3
 8009146:	3301      	adds	r3, #1
 8009148:	005b      	lsls	r3, r3, #1
 800914a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800914c:	697a      	ldr	r2, [r7, #20]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	fbb2 f3f3 	udiv	r3, r2, r3
 8009154:	613b      	str	r3, [r7, #16]
 8009156:	e001      	b.n	800915c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009158:	2300      	movs	r3, #0
 800915a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800915c:	693b      	ldr	r3, [r7, #16]
}
 800915e:	4618      	mov	r0, r3
 8009160:	371c      	adds	r7, #28
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	40021000 	.word	0x40021000
 8009170:	00f42400 	.word	0x00f42400
 8009174:	016e3600 	.word	0x016e3600

08009178 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009178:	b480      	push	{r7}
 800917a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800917c:	4b03      	ldr	r3, [pc, #12]	@ (800918c <HAL_RCC_GetHCLKFreq+0x14>)
 800917e:	681b      	ldr	r3, [r3, #0]
}
 8009180:	4618      	mov	r0, r3
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	20000020 	.word	0x20000020

08009190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009194:	f7ff fff0 	bl	8009178 <HAL_RCC_GetHCLKFreq>
 8009198:	4602      	mov	r2, r0
 800919a:	4b06      	ldr	r3, [pc, #24]	@ (80091b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	0a1b      	lsrs	r3, r3, #8
 80091a0:	f003 0307 	and.w	r3, r3, #7
 80091a4:	4904      	ldr	r1, [pc, #16]	@ (80091b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80091a6:	5ccb      	ldrb	r3, [r1, r3]
 80091a8:	f003 031f 	and.w	r3, r3, #31
 80091ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	40021000 	.word	0x40021000
 80091b8:	08016db8 	.word	0x08016db8

080091bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80091c0:	f7ff ffda 	bl	8009178 <HAL_RCC_GetHCLKFreq>
 80091c4:	4602      	mov	r2, r0
 80091c6:	4b06      	ldr	r3, [pc, #24]	@ (80091e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	0adb      	lsrs	r3, r3, #11
 80091cc:	f003 0307 	and.w	r3, r3, #7
 80091d0:	4904      	ldr	r1, [pc, #16]	@ (80091e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80091d2:	5ccb      	ldrb	r3, [r1, r3]
 80091d4:	f003 031f 	and.w	r3, r3, #31
 80091d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091dc:	4618      	mov	r0, r3
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	40021000 	.word	0x40021000
 80091e4:	08016db8 	.word	0x08016db8

080091e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b087      	sub	sp, #28
 80091ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80091ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	f003 0303 	and.w	r3, r3, #3
 80091f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80091f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	091b      	lsrs	r3, r3, #4
 80091fe:	f003 030f 	and.w	r3, r3, #15
 8009202:	3301      	adds	r3, #1
 8009204:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	2b03      	cmp	r3, #3
 800920a:	d10c      	bne.n	8009226 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800920c:	4a17      	ldr	r2, [pc, #92]	@ (800926c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	fbb2 f3f3 	udiv	r3, r2, r3
 8009214:	4a14      	ldr	r2, [pc, #80]	@ (8009268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009216:	68d2      	ldr	r2, [r2, #12]
 8009218:	0a12      	lsrs	r2, r2, #8
 800921a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800921e:	fb02 f303 	mul.w	r3, r2, r3
 8009222:	617b      	str	r3, [r7, #20]
    break;
 8009224:	e00c      	b.n	8009240 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009226:	4a12      	ldr	r2, [pc, #72]	@ (8009270 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	fbb2 f3f3 	udiv	r3, r2, r3
 800922e:	4a0e      	ldr	r2, [pc, #56]	@ (8009268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009230:	68d2      	ldr	r2, [r2, #12]
 8009232:	0a12      	lsrs	r2, r2, #8
 8009234:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009238:	fb02 f303 	mul.w	r3, r2, r3
 800923c:	617b      	str	r3, [r7, #20]
    break;
 800923e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009240:	4b09      	ldr	r3, [pc, #36]	@ (8009268 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	0e5b      	lsrs	r3, r3, #25
 8009246:	f003 0303 	and.w	r3, r3, #3
 800924a:	3301      	adds	r3, #1
 800924c:	005b      	lsls	r3, r3, #1
 800924e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009250:	697a      	ldr	r2, [r7, #20]
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	fbb2 f3f3 	udiv	r3, r2, r3
 8009258:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800925a:	687b      	ldr	r3, [r7, #4]
}
 800925c:	4618      	mov	r0, r3
 800925e:	371c      	adds	r7, #28
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	40021000 	.word	0x40021000
 800926c:	016e3600 	.word	0x016e3600
 8009270:	00f42400 	.word	0x00f42400

08009274 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b086      	sub	sp, #24
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800927c:	2300      	movs	r3, #0
 800927e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009280:	2300      	movs	r3, #0
 8009282:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 8098 	beq.w	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009292:	2300      	movs	r3, #0
 8009294:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009296:	4b43      	ldr	r3, [pc, #268]	@ (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800929a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d10d      	bne.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092a2:	4b40      	ldr	r3, [pc, #256]	@ (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092a6:	4a3f      	ldr	r2, [pc, #252]	@ (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80092ae:	4b3d      	ldr	r3, [pc, #244]	@ (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092b6:	60bb      	str	r3, [r7, #8]
 80092b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092ba:	2301      	movs	r3, #1
 80092bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092be:	4b3a      	ldr	r3, [pc, #232]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a39      	ldr	r2, [pc, #228]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80092c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092ca:	f7fa ff1d 	bl	8004108 <HAL_GetTick>
 80092ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092d0:	e009      	b.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092d2:	f7fa ff19 	bl	8004108 <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d902      	bls.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80092e0:	2303      	movs	r3, #3
 80092e2:	74fb      	strb	r3, [r7, #19]
        break;
 80092e4:	e005      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092e6:	4b30      	ldr	r3, [pc, #192]	@ (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d0ef      	beq.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80092f2:	7cfb      	ldrb	r3, [r7, #19]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d159      	bne.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80092f8:	4b2a      	ldr	r3, [pc, #168]	@ (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009302:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d01e      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800930e:	697a      	ldr	r2, [r7, #20]
 8009310:	429a      	cmp	r2, r3
 8009312:	d019      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009314:	4b23      	ldr	r3, [pc, #140]	@ (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800931a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800931e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009320:	4b20      	ldr	r3, [pc, #128]	@ (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009326:	4a1f      	ldr	r2, [pc, #124]	@ (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800932c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009330:	4b1c      	ldr	r3, [pc, #112]	@ (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009336:	4a1b      	ldr	r2, [pc, #108]	@ (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009338:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800933c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009340:	4a18      	ldr	r2, [pc, #96]	@ (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	f003 0301 	and.w	r3, r3, #1
 800934e:	2b00      	cmp	r3, #0
 8009350:	d016      	beq.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009352:	f7fa fed9 	bl	8004108 <HAL_GetTick>
 8009356:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009358:	e00b      	b.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800935a:	f7fa fed5 	bl	8004108 <HAL_GetTick>
 800935e:	4602      	mov	r2, r0
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009368:	4293      	cmp	r3, r2
 800936a:	d902      	bls.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800936c:	2303      	movs	r3, #3
 800936e:	74fb      	strb	r3, [r7, #19]
            break;
 8009370:	e006      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009372:	4b0c      	ldr	r3, [pc, #48]	@ (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009378:	f003 0302 	and.w	r3, r3, #2
 800937c:	2b00      	cmp	r3, #0
 800937e:	d0ec      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009380:	7cfb      	ldrb	r3, [r7, #19]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10b      	bne.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009386:	4b07      	ldr	r3, [pc, #28]	@ (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800938c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009394:	4903      	ldr	r1, [pc, #12]	@ (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009396:	4313      	orrs	r3, r2
 8009398:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800939c:	e008      	b.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800939e:	7cfb      	ldrb	r3, [r7, #19]
 80093a0:	74bb      	strb	r3, [r7, #18]
 80093a2:	e005      	b.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80093a4:	40021000 	.word	0x40021000
 80093a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ac:	7cfb      	ldrb	r3, [r7, #19]
 80093ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80093b0:	7c7b      	ldrb	r3, [r7, #17]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d105      	bne.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093b6:	4ba7      	ldr	r3, [pc, #668]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093ba:	4aa6      	ldr	r2, [pc, #664]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00a      	beq.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80093ce:	4ba1      	ldr	r3, [pc, #644]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093d4:	f023 0203 	bic.w	r2, r3, #3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	499d      	ldr	r1, [pc, #628]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093de:	4313      	orrs	r3, r2
 80093e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f003 0302 	and.w	r3, r3, #2
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00a      	beq.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80093f0:	4b98      	ldr	r3, [pc, #608]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093f6:	f023 020c 	bic.w	r2, r3, #12
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	4995      	ldr	r1, [pc, #596]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009400:	4313      	orrs	r3, r2
 8009402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f003 0304 	and.w	r3, r3, #4
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00a      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009412:	4b90      	ldr	r3, [pc, #576]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009418:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	498c      	ldr	r1, [pc, #560]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009422:	4313      	orrs	r3, r2
 8009424:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 0308 	and.w	r3, r3, #8
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00a      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009434:	4b87      	ldr	r3, [pc, #540]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800943a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	4984      	ldr	r1, [pc, #528]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009444:	4313      	orrs	r3, r2
 8009446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 0310 	and.w	r3, r3, #16
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00a      	beq.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009456:	4b7f      	ldr	r3, [pc, #508]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800945c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	695b      	ldr	r3, [r3, #20]
 8009464:	497b      	ldr	r1, [pc, #492]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009466:	4313      	orrs	r3, r2
 8009468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 0320 	and.w	r3, r3, #32
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00a      	beq.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009478:	4b76      	ldr	r3, [pc, #472]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800947a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800947e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	699b      	ldr	r3, [r3, #24]
 8009486:	4973      	ldr	r1, [pc, #460]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009488:	4313      	orrs	r3, r2
 800948a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00a      	beq.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800949a:	4b6e      	ldr	r3, [pc, #440]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800949c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	69db      	ldr	r3, [r3, #28]
 80094a8:	496a      	ldr	r1, [pc, #424]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094aa:	4313      	orrs	r3, r2
 80094ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00a      	beq.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80094bc:	4b65      	ldr	r3, [pc, #404]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a1b      	ldr	r3, [r3, #32]
 80094ca:	4962      	ldr	r1, [pc, #392]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094cc:	4313      	orrs	r3, r2
 80094ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00a      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80094de:	4b5d      	ldr	r3, [pc, #372]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ec:	4959      	ldr	r1, [pc, #356]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00a      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009500:	4b54      	ldr	r3, [pc, #336]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009502:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009506:	f023 0203 	bic.w	r2, r3, #3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800950e:	4951      	ldr	r1, [pc, #324]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009510:	4313      	orrs	r3, r2
 8009512:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00a      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009522:	4b4c      	ldr	r3, [pc, #304]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009528:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009530:	4948      	ldr	r1, [pc, #288]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009532:	4313      	orrs	r3, r2
 8009534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009540:	2b00      	cmp	r3, #0
 8009542:	d015      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009544:	4b43      	ldr	r3, [pc, #268]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800954a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009552:	4940      	ldr	r1, [pc, #256]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009554:	4313      	orrs	r3, r2
 8009556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800955e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009562:	d105      	bne.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009564:	4b3b      	ldr	r3, [pc, #236]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	4a3a      	ldr	r2, [pc, #232]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800956a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800956e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009578:	2b00      	cmp	r3, #0
 800957a:	d015      	beq.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800957c:	4b35      	ldr	r3, [pc, #212]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800957e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009582:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800958a:	4932      	ldr	r1, [pc, #200]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800958c:	4313      	orrs	r3, r2
 800958e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009596:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800959a:	d105      	bne.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800959c:	4b2d      	ldr	r3, [pc, #180]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	4a2c      	ldr	r2, [pc, #176]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095a6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d015      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80095b4:	4b27      	ldr	r3, [pc, #156]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095c2:	4924      	ldr	r1, [pc, #144]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095c4:	4313      	orrs	r3, r2
 80095c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095d2:	d105      	bne.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095d4:	4b1f      	ldr	r3, [pc, #124]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	4a1e      	ldr	r2, [pc, #120]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d015      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80095ec:	4b19      	ldr	r3, [pc, #100]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095fa:	4916      	ldr	r1, [pc, #88]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095fc:	4313      	orrs	r3, r2
 80095fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009606:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800960a:	d105      	bne.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800960c:	4b11      	ldr	r3, [pc, #68]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	4a10      	ldr	r2, [pc, #64]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009612:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009616:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009620:	2b00      	cmp	r3, #0
 8009622:	d019      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009624:	4b0b      	ldr	r3, [pc, #44]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800962a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009632:	4908      	ldr	r1, [pc, #32]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009634:	4313      	orrs	r3, r2
 8009636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800963e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009642:	d109      	bne.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009644:	4b03      	ldr	r3, [pc, #12]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	4a02      	ldr	r2, [pc, #8]	@ (8009654 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800964a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800964e:	60d3      	str	r3, [r2, #12]
 8009650:	e002      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009652:	bf00      	nop
 8009654:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009660:	2b00      	cmp	r3, #0
 8009662:	d015      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009664:	4b29      	ldr	r3, [pc, #164]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800966a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009672:	4926      	ldr	r1, [pc, #152]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009674:	4313      	orrs	r3, r2
 8009676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800967e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009682:	d105      	bne.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009684:	4b21      	ldr	r3, [pc, #132]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	4a20      	ldr	r2, [pc, #128]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800968a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800968e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d015      	beq.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800969c:	4b1b      	ldr	r3, [pc, #108]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800969e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096a2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096aa:	4918      	ldr	r1, [pc, #96]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096ac:	4313      	orrs	r3, r2
 80096ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096ba:	d105      	bne.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80096bc:	4b13      	ldr	r3, [pc, #76]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	4a12      	ldr	r2, [pc, #72]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096c6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d015      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80096d4:	4b0d      	ldr	r3, [pc, #52]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80096da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096e2:	490a      	ldr	r1, [pc, #40]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096e4:	4313      	orrs	r3, r2
 80096e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80096f2:	d105      	bne.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096f4:	4b05      	ldr	r3, [pc, #20]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	4a04      	ldr	r2, [pc, #16]	@ (800970c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009700:	7cbb      	ldrb	r3, [r7, #18]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3718      	adds	r7, #24
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	40021000 	.word	0x40021000

08009710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d101      	bne.n	8009722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e049      	b.n	80097b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b00      	cmp	r3, #0
 800972c:	d106      	bne.n	800973c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f7fa f994 	bl	8003a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2202      	movs	r2, #2
 8009740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	3304      	adds	r3, #4
 800974c:	4619      	mov	r1, r3
 800974e:	4610      	mov	r0, r2
 8009750:	f000 fe58 	bl	800a404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
	...

080097c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d001      	beq.n	80097d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	e04c      	b.n	8009872 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2202      	movs	r2, #2
 80097dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a26      	ldr	r2, [pc, #152]	@ (8009880 <HAL_TIM_Base_Start+0xc0>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d022      	beq.n	8009830 <HAL_TIM_Base_Start+0x70>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097f2:	d01d      	beq.n	8009830 <HAL_TIM_Base_Start+0x70>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a22      	ldr	r2, [pc, #136]	@ (8009884 <HAL_TIM_Base_Start+0xc4>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d018      	beq.n	8009830 <HAL_TIM_Base_Start+0x70>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a21      	ldr	r2, [pc, #132]	@ (8009888 <HAL_TIM_Base_Start+0xc8>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d013      	beq.n	8009830 <HAL_TIM_Base_Start+0x70>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a1f      	ldr	r2, [pc, #124]	@ (800988c <HAL_TIM_Base_Start+0xcc>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d00e      	beq.n	8009830 <HAL_TIM_Base_Start+0x70>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a1e      	ldr	r2, [pc, #120]	@ (8009890 <HAL_TIM_Base_Start+0xd0>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d009      	beq.n	8009830 <HAL_TIM_Base_Start+0x70>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a1c      	ldr	r2, [pc, #112]	@ (8009894 <HAL_TIM_Base_Start+0xd4>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d004      	beq.n	8009830 <HAL_TIM_Base_Start+0x70>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a1b      	ldr	r2, [pc, #108]	@ (8009898 <HAL_TIM_Base_Start+0xd8>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d115      	bne.n	800985c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	689a      	ldr	r2, [r3, #8]
 8009836:	4b19      	ldr	r3, [pc, #100]	@ (800989c <HAL_TIM_Base_Start+0xdc>)
 8009838:	4013      	ands	r3, r2
 800983a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2b06      	cmp	r3, #6
 8009840:	d015      	beq.n	800986e <HAL_TIM_Base_Start+0xae>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009848:	d011      	beq.n	800986e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f042 0201 	orr.w	r2, r2, #1
 8009858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800985a:	e008      	b.n	800986e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f042 0201 	orr.w	r2, r2, #1
 800986a:	601a      	str	r2, [r3, #0]
 800986c:	e000      	b.n	8009870 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800986e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3714      	adds	r7, #20
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	40012c00 	.word	0x40012c00
 8009884:	40000400 	.word	0x40000400
 8009888:	40000800 	.word	0x40000800
 800988c:	40000c00 	.word	0x40000c00
 8009890:	40013400 	.word	0x40013400
 8009894:	40014000 	.word	0x40014000
 8009898:	40015000 	.word	0x40015000
 800989c:	00010007 	.word	0x00010007

080098a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d001      	beq.n	80098b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	e054      	b.n	8009962 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2202      	movs	r2, #2
 80098bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68da      	ldr	r2, [r3, #12]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f042 0201 	orr.w	r2, r2, #1
 80098ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a26      	ldr	r2, [pc, #152]	@ (8009970 <HAL_TIM_Base_Start_IT+0xd0>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d022      	beq.n	8009920 <HAL_TIM_Base_Start_IT+0x80>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098e2:	d01d      	beq.n	8009920 <HAL_TIM_Base_Start_IT+0x80>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a22      	ldr	r2, [pc, #136]	@ (8009974 <HAL_TIM_Base_Start_IT+0xd4>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d018      	beq.n	8009920 <HAL_TIM_Base_Start_IT+0x80>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a21      	ldr	r2, [pc, #132]	@ (8009978 <HAL_TIM_Base_Start_IT+0xd8>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d013      	beq.n	8009920 <HAL_TIM_Base_Start_IT+0x80>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a1f      	ldr	r2, [pc, #124]	@ (800997c <HAL_TIM_Base_Start_IT+0xdc>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d00e      	beq.n	8009920 <HAL_TIM_Base_Start_IT+0x80>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a1e      	ldr	r2, [pc, #120]	@ (8009980 <HAL_TIM_Base_Start_IT+0xe0>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d009      	beq.n	8009920 <HAL_TIM_Base_Start_IT+0x80>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a1c      	ldr	r2, [pc, #112]	@ (8009984 <HAL_TIM_Base_Start_IT+0xe4>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d004      	beq.n	8009920 <HAL_TIM_Base_Start_IT+0x80>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a1b      	ldr	r2, [pc, #108]	@ (8009988 <HAL_TIM_Base_Start_IT+0xe8>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d115      	bne.n	800994c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	689a      	ldr	r2, [r3, #8]
 8009926:	4b19      	ldr	r3, [pc, #100]	@ (800998c <HAL_TIM_Base_Start_IT+0xec>)
 8009928:	4013      	ands	r3, r2
 800992a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2b06      	cmp	r3, #6
 8009930:	d015      	beq.n	800995e <HAL_TIM_Base_Start_IT+0xbe>
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009938:	d011      	beq.n	800995e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f042 0201 	orr.w	r2, r2, #1
 8009948:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800994a:	e008      	b.n	800995e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f042 0201 	orr.w	r2, r2, #1
 800995a:	601a      	str	r2, [r3, #0]
 800995c:	e000      	b.n	8009960 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800995e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	40012c00 	.word	0x40012c00
 8009974:	40000400 	.word	0x40000400
 8009978:	40000800 	.word	0x40000800
 800997c:	40000c00 	.word	0x40000c00
 8009980:	40013400 	.word	0x40013400
 8009984:	40014000 	.word	0x40014000
 8009988:	40015000 	.word	0x40015000
 800998c:	00010007 	.word	0x00010007

08009990 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68da      	ldr	r2, [r3, #12]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f022 0201 	bic.w	r2, r2, #1
 80099a6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6a1a      	ldr	r2, [r3, #32]
 80099ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80099b2:	4013      	ands	r3, r2
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10f      	bne.n	80099d8 <HAL_TIM_Base_Stop_IT+0x48>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6a1a      	ldr	r2, [r3, #32]
 80099be:	f244 4344 	movw	r3, #17476	@ 0x4444
 80099c2:	4013      	ands	r3, r2
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d107      	bne.n	80099d8 <HAL_TIM_Base_Stop_IT+0x48>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f022 0201 	bic.w	r2, r2, #1
 80099d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	370c      	adds	r7, #12
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b082      	sub	sp, #8
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d101      	bne.n	8009a00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e049      	b.n	8009a94 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d106      	bne.n	8009a1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7f9 ffeb 	bl	80039f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	3304      	adds	r3, #4
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	4610      	mov	r0, r2
 8009a2e:	f000 fce9 	bl	800a404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2201      	movs	r2, #1
 8009a36:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2201      	movs	r2, #1
 8009a46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2201      	movs	r2, #1
 8009a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2201      	movs	r2, #1
 8009a66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2201      	movs	r2, #1
 8009a76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2201      	movs	r2, #1
 8009a86:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d109      	bne.n	8009ac0 <HAL_TIM_PWM_Start+0x24>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	bf14      	ite	ne
 8009ab8:	2301      	movne	r3, #1
 8009aba:	2300      	moveq	r3, #0
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	e03c      	b.n	8009b3a <HAL_TIM_PWM_Start+0x9e>
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	2b04      	cmp	r3, #4
 8009ac4:	d109      	bne.n	8009ada <HAL_TIM_PWM_Start+0x3e>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	bf14      	ite	ne
 8009ad2:	2301      	movne	r3, #1
 8009ad4:	2300      	moveq	r3, #0
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	e02f      	b.n	8009b3a <HAL_TIM_PWM_Start+0x9e>
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	2b08      	cmp	r3, #8
 8009ade:	d109      	bne.n	8009af4 <HAL_TIM_PWM_Start+0x58>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	bf14      	ite	ne
 8009aec:	2301      	movne	r3, #1
 8009aee:	2300      	moveq	r3, #0
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	e022      	b.n	8009b3a <HAL_TIM_PWM_Start+0x9e>
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	2b0c      	cmp	r3, #12
 8009af8:	d109      	bne.n	8009b0e <HAL_TIM_PWM_Start+0x72>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	bf14      	ite	ne
 8009b06:	2301      	movne	r3, #1
 8009b08:	2300      	moveq	r3, #0
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	e015      	b.n	8009b3a <HAL_TIM_PWM_Start+0x9e>
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	2b10      	cmp	r3, #16
 8009b12:	d109      	bne.n	8009b28 <HAL_TIM_PWM_Start+0x8c>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	bf14      	ite	ne
 8009b20:	2301      	movne	r3, #1
 8009b22:	2300      	moveq	r3, #0
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	e008      	b.n	8009b3a <HAL_TIM_PWM_Start+0x9e>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	bf14      	ite	ne
 8009b34:	2301      	movne	r3, #1
 8009b36:	2300      	moveq	r3, #0
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d001      	beq.n	8009b42 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e0a6      	b.n	8009c90 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d104      	bne.n	8009b52 <HAL_TIM_PWM_Start+0xb6>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b50:	e023      	b.n	8009b9a <HAL_TIM_PWM_Start+0xfe>
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	2b04      	cmp	r3, #4
 8009b56:	d104      	bne.n	8009b62 <HAL_TIM_PWM_Start+0xc6>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b60:	e01b      	b.n	8009b9a <HAL_TIM_PWM_Start+0xfe>
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	2b08      	cmp	r3, #8
 8009b66:	d104      	bne.n	8009b72 <HAL_TIM_PWM_Start+0xd6>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b70:	e013      	b.n	8009b9a <HAL_TIM_PWM_Start+0xfe>
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	2b0c      	cmp	r3, #12
 8009b76:	d104      	bne.n	8009b82 <HAL_TIM_PWM_Start+0xe6>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009b80:	e00b      	b.n	8009b9a <HAL_TIM_PWM_Start+0xfe>
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	2b10      	cmp	r3, #16
 8009b86:	d104      	bne.n	8009b92 <HAL_TIM_PWM_Start+0xf6>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b90:	e003      	b.n	8009b9a <HAL_TIM_PWM_Start+0xfe>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2202      	movs	r2, #2
 8009b96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f001 f8a8 	bl	800acf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a3a      	ldr	r2, [pc, #232]	@ (8009c98 <HAL_TIM_PWM_Start+0x1fc>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d018      	beq.n	8009be4 <HAL_TIM_PWM_Start+0x148>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a39      	ldr	r2, [pc, #228]	@ (8009c9c <HAL_TIM_PWM_Start+0x200>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d013      	beq.n	8009be4 <HAL_TIM_PWM_Start+0x148>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a37      	ldr	r2, [pc, #220]	@ (8009ca0 <HAL_TIM_PWM_Start+0x204>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d00e      	beq.n	8009be4 <HAL_TIM_PWM_Start+0x148>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a36      	ldr	r2, [pc, #216]	@ (8009ca4 <HAL_TIM_PWM_Start+0x208>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d009      	beq.n	8009be4 <HAL_TIM_PWM_Start+0x148>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a34      	ldr	r2, [pc, #208]	@ (8009ca8 <HAL_TIM_PWM_Start+0x20c>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d004      	beq.n	8009be4 <HAL_TIM_PWM_Start+0x148>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a33      	ldr	r2, [pc, #204]	@ (8009cac <HAL_TIM_PWM_Start+0x210>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d101      	bne.n	8009be8 <HAL_TIM_PWM_Start+0x14c>
 8009be4:	2301      	movs	r3, #1
 8009be6:	e000      	b.n	8009bea <HAL_TIM_PWM_Start+0x14e>
 8009be8:	2300      	movs	r3, #0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d007      	beq.n	8009bfe <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009bfc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a25      	ldr	r2, [pc, #148]	@ (8009c98 <HAL_TIM_PWM_Start+0x1fc>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d022      	beq.n	8009c4e <HAL_TIM_PWM_Start+0x1b2>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c10:	d01d      	beq.n	8009c4e <HAL_TIM_PWM_Start+0x1b2>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a26      	ldr	r2, [pc, #152]	@ (8009cb0 <HAL_TIM_PWM_Start+0x214>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d018      	beq.n	8009c4e <HAL_TIM_PWM_Start+0x1b2>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a24      	ldr	r2, [pc, #144]	@ (8009cb4 <HAL_TIM_PWM_Start+0x218>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d013      	beq.n	8009c4e <HAL_TIM_PWM_Start+0x1b2>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a23      	ldr	r2, [pc, #140]	@ (8009cb8 <HAL_TIM_PWM_Start+0x21c>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d00e      	beq.n	8009c4e <HAL_TIM_PWM_Start+0x1b2>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a19      	ldr	r2, [pc, #100]	@ (8009c9c <HAL_TIM_PWM_Start+0x200>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d009      	beq.n	8009c4e <HAL_TIM_PWM_Start+0x1b2>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a18      	ldr	r2, [pc, #96]	@ (8009ca0 <HAL_TIM_PWM_Start+0x204>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d004      	beq.n	8009c4e <HAL_TIM_PWM_Start+0x1b2>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a18      	ldr	r2, [pc, #96]	@ (8009cac <HAL_TIM_PWM_Start+0x210>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d115      	bne.n	8009c7a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	689a      	ldr	r2, [r3, #8]
 8009c54:	4b19      	ldr	r3, [pc, #100]	@ (8009cbc <HAL_TIM_PWM_Start+0x220>)
 8009c56:	4013      	ands	r3, r2
 8009c58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2b06      	cmp	r3, #6
 8009c5e:	d015      	beq.n	8009c8c <HAL_TIM_PWM_Start+0x1f0>
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c66:	d011      	beq.n	8009c8c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f042 0201 	orr.w	r2, r2, #1
 8009c76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c78:	e008      	b.n	8009c8c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f042 0201 	orr.w	r2, r2, #1
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	e000      	b.n	8009c8e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	40012c00 	.word	0x40012c00
 8009c9c:	40013400 	.word	0x40013400
 8009ca0:	40014000 	.word	0x40014000
 8009ca4:	40014400 	.word	0x40014400
 8009ca8:	40014800 	.word	0x40014800
 8009cac:	40015000 	.word	0x40015000
 8009cb0:	40000400 	.word	0x40000400
 8009cb4:	40000800 	.word	0x40000800
 8009cb8:	40000c00 	.word	0x40000c00
 8009cbc:	00010007 	.word	0x00010007

08009cc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f003 0302 	and.w	r3, r3, #2
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d020      	beq.n	8009d24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f003 0302 	and.w	r3, r3, #2
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d01b      	beq.n	8009d24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f06f 0202 	mvn.w	r2, #2
 8009cf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	f003 0303 	and.w	r3, r3, #3
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d003      	beq.n	8009d12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 fb5c 	bl	800a3c8 <HAL_TIM_IC_CaptureCallback>
 8009d10:	e005      	b.n	8009d1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 fb4e 	bl	800a3b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fb5f 	bl	800a3dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	f003 0304 	and.w	r3, r3, #4
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d020      	beq.n	8009d70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f003 0304 	and.w	r3, r3, #4
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d01b      	beq.n	8009d70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f06f 0204 	mvn.w	r2, #4
 8009d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2202      	movs	r2, #2
 8009d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	699b      	ldr	r3, [r3, #24]
 8009d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d003      	beq.n	8009d5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 fb36 	bl	800a3c8 <HAL_TIM_IC_CaptureCallback>
 8009d5c:	e005      	b.n	8009d6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fb28 	bl	800a3b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 fb39 	bl	800a3dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	f003 0308 	and.w	r3, r3, #8
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d020      	beq.n	8009dbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f003 0308 	and.w	r3, r3, #8
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d01b      	beq.n	8009dbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f06f 0208 	mvn.w	r2, #8
 8009d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2204      	movs	r2, #4
 8009d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	69db      	ldr	r3, [r3, #28]
 8009d9a:	f003 0303 	and.w	r3, r3, #3
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d003      	beq.n	8009daa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 fb10 	bl	800a3c8 <HAL_TIM_IC_CaptureCallback>
 8009da8:	e005      	b.n	8009db6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fb02 	bl	800a3b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 fb13 	bl	800a3dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	f003 0310 	and.w	r3, r3, #16
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d020      	beq.n	8009e08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f003 0310 	and.w	r3, r3, #16
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d01b      	beq.n	8009e08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f06f 0210 	mvn.w	r2, #16
 8009dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2208      	movs	r2, #8
 8009dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	69db      	ldr	r3, [r3, #28]
 8009de6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d003      	beq.n	8009df6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 faea 	bl	800a3c8 <HAL_TIM_IC_CaptureCallback>
 8009df4:	e005      	b.n	8009e02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 fadc 	bl	800a3b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 faed 	bl	800a3dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00c      	beq.n	8009e2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f003 0301 	and.w	r3, r3, #1
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d007      	beq.n	8009e2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f06f 0201 	mvn.w	r2, #1
 8009e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f7f8 fb8a 	bl	8002540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d104      	bne.n	8009e40 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00c      	beq.n	8009e5a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d007      	beq.n	8009e5a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f001 f8a9 	bl	800afac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00c      	beq.n	8009e7e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d007      	beq.n	8009e7e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f001 f8a1 	bl	800afc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00c      	beq.n	8009ea2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d007      	beq.n	8009ea2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 faa7 	bl	800a3f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	f003 0320 	and.w	r3, r3, #32
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00c      	beq.n	8009ec6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f003 0320 	and.w	r3, r3, #32
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d007      	beq.n	8009ec6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f06f 0220 	mvn.w	r2, #32
 8009ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f001 f869 	bl	800af98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00c      	beq.n	8009eea <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d007      	beq.n	8009eea <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f001 f875 	bl	800afd4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00c      	beq.n	8009f0e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d007      	beq.n	8009f0e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f001 f86d 	bl	800afe8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00c      	beq.n	8009f32 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d007      	beq.n	8009f32 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f001 f865 	bl	800affc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00c      	beq.n	8009f56 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d007      	beq.n	8009f56 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f001 f85d 	bl	800b010 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f56:	bf00      	nop
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
	...

08009f60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d101      	bne.n	8009f7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	e0ff      	b.n	800a17e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2b14      	cmp	r3, #20
 8009f8a:	f200 80f0 	bhi.w	800a16e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f94:	08009fe9 	.word	0x08009fe9
 8009f98:	0800a16f 	.word	0x0800a16f
 8009f9c:	0800a16f 	.word	0x0800a16f
 8009fa0:	0800a16f 	.word	0x0800a16f
 8009fa4:	0800a029 	.word	0x0800a029
 8009fa8:	0800a16f 	.word	0x0800a16f
 8009fac:	0800a16f 	.word	0x0800a16f
 8009fb0:	0800a16f 	.word	0x0800a16f
 8009fb4:	0800a06b 	.word	0x0800a06b
 8009fb8:	0800a16f 	.word	0x0800a16f
 8009fbc:	0800a16f 	.word	0x0800a16f
 8009fc0:	0800a16f 	.word	0x0800a16f
 8009fc4:	0800a0ab 	.word	0x0800a0ab
 8009fc8:	0800a16f 	.word	0x0800a16f
 8009fcc:	0800a16f 	.word	0x0800a16f
 8009fd0:	0800a16f 	.word	0x0800a16f
 8009fd4:	0800a0ed 	.word	0x0800a0ed
 8009fd8:	0800a16f 	.word	0x0800a16f
 8009fdc:	0800a16f 	.word	0x0800a16f
 8009fe0:	0800a16f 	.word	0x0800a16f
 8009fe4:	0800a12d 	.word	0x0800a12d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68b9      	ldr	r1, [r7, #8]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 fabc 	bl	800a56c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	699a      	ldr	r2, [r3, #24]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f042 0208 	orr.w	r2, r2, #8
 800a002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	699a      	ldr	r2, [r3, #24]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f022 0204 	bic.w	r2, r2, #4
 800a012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	6999      	ldr	r1, [r3, #24]
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	691a      	ldr	r2, [r3, #16]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	430a      	orrs	r2, r1
 800a024:	619a      	str	r2, [r3, #24]
      break;
 800a026:	e0a5      	b.n	800a174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	68b9      	ldr	r1, [r7, #8]
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 fb36 	bl	800a6a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	699a      	ldr	r2, [r3, #24]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	699a      	ldr	r2, [r3, #24]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	6999      	ldr	r1, [r3, #24]
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	021a      	lsls	r2, r3, #8
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	430a      	orrs	r2, r1
 800a066:	619a      	str	r2, [r3, #24]
      break;
 800a068:	e084      	b.n	800a174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	68b9      	ldr	r1, [r7, #8]
 800a070:	4618      	mov	r0, r3
 800a072:	f000 fba9 	bl	800a7c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	69da      	ldr	r2, [r3, #28]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f042 0208 	orr.w	r2, r2, #8
 800a084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	69da      	ldr	r2, [r3, #28]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f022 0204 	bic.w	r2, r2, #4
 800a094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	69d9      	ldr	r1, [r3, #28]
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	691a      	ldr	r2, [r3, #16]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	430a      	orrs	r2, r1
 800a0a6:	61da      	str	r2, [r3, #28]
      break;
 800a0a8:	e064      	b.n	800a174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	68b9      	ldr	r1, [r7, #8]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 fc1b 	bl	800a8ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	69da      	ldr	r2, [r3, #28]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a0c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	69da      	ldr	r2, [r3, #28]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	69d9      	ldr	r1, [r3, #28]
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	021a      	lsls	r2, r3, #8
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	430a      	orrs	r2, r1
 800a0e8:	61da      	str	r2, [r3, #28]
      break;
 800a0ea:	e043      	b.n	800a174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68b9      	ldr	r1, [r7, #8]
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f000 fc8e 	bl	800aa14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f042 0208 	orr.w	r2, r2, #8
 800a106:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f022 0204 	bic.w	r2, r2, #4
 800a116:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	691a      	ldr	r2, [r3, #16]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	430a      	orrs	r2, r1
 800a128:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a12a:	e023      	b.n	800a174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	68b9      	ldr	r1, [r7, #8]
 800a132:	4618      	mov	r0, r3
 800a134:	f000 fcd8 	bl	800aae8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a146:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a156:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	691b      	ldr	r3, [r3, #16]
 800a162:	021a      	lsls	r2, r3, #8
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	430a      	orrs	r2, r1
 800a16a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a16c:	e002      	b.n	800a174 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	75fb      	strb	r3, [r7, #23]
      break;
 800a172:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2200      	movs	r2, #0
 800a178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a17c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3718      	adds	r7, #24
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop

0800a188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d101      	bne.n	800a1a4 <HAL_TIM_ConfigClockSource+0x1c>
 800a1a0:	2302      	movs	r3, #2
 800a1a2:	e0f6      	b.n	800a392 <HAL_TIM_ConfigClockSource+0x20a>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a1c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a1c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a1ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a6f      	ldr	r2, [pc, #444]	@ (800a39c <HAL_TIM_ConfigClockSource+0x214>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	f000 80c1 	beq.w	800a366 <HAL_TIM_ConfigClockSource+0x1de>
 800a1e4:	4a6d      	ldr	r2, [pc, #436]	@ (800a39c <HAL_TIM_ConfigClockSource+0x214>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	f200 80c6 	bhi.w	800a378 <HAL_TIM_ConfigClockSource+0x1f0>
 800a1ec:	4a6c      	ldr	r2, [pc, #432]	@ (800a3a0 <HAL_TIM_ConfigClockSource+0x218>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	f000 80b9 	beq.w	800a366 <HAL_TIM_ConfigClockSource+0x1de>
 800a1f4:	4a6a      	ldr	r2, [pc, #424]	@ (800a3a0 <HAL_TIM_ConfigClockSource+0x218>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	f200 80be 	bhi.w	800a378 <HAL_TIM_ConfigClockSource+0x1f0>
 800a1fc:	4a69      	ldr	r2, [pc, #420]	@ (800a3a4 <HAL_TIM_ConfigClockSource+0x21c>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	f000 80b1 	beq.w	800a366 <HAL_TIM_ConfigClockSource+0x1de>
 800a204:	4a67      	ldr	r2, [pc, #412]	@ (800a3a4 <HAL_TIM_ConfigClockSource+0x21c>)
 800a206:	4293      	cmp	r3, r2
 800a208:	f200 80b6 	bhi.w	800a378 <HAL_TIM_ConfigClockSource+0x1f0>
 800a20c:	4a66      	ldr	r2, [pc, #408]	@ (800a3a8 <HAL_TIM_ConfigClockSource+0x220>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	f000 80a9 	beq.w	800a366 <HAL_TIM_ConfigClockSource+0x1de>
 800a214:	4a64      	ldr	r2, [pc, #400]	@ (800a3a8 <HAL_TIM_ConfigClockSource+0x220>)
 800a216:	4293      	cmp	r3, r2
 800a218:	f200 80ae 	bhi.w	800a378 <HAL_TIM_ConfigClockSource+0x1f0>
 800a21c:	4a63      	ldr	r2, [pc, #396]	@ (800a3ac <HAL_TIM_ConfigClockSource+0x224>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	f000 80a1 	beq.w	800a366 <HAL_TIM_ConfigClockSource+0x1de>
 800a224:	4a61      	ldr	r2, [pc, #388]	@ (800a3ac <HAL_TIM_ConfigClockSource+0x224>)
 800a226:	4293      	cmp	r3, r2
 800a228:	f200 80a6 	bhi.w	800a378 <HAL_TIM_ConfigClockSource+0x1f0>
 800a22c:	4a60      	ldr	r2, [pc, #384]	@ (800a3b0 <HAL_TIM_ConfigClockSource+0x228>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	f000 8099 	beq.w	800a366 <HAL_TIM_ConfigClockSource+0x1de>
 800a234:	4a5e      	ldr	r2, [pc, #376]	@ (800a3b0 <HAL_TIM_ConfigClockSource+0x228>)
 800a236:	4293      	cmp	r3, r2
 800a238:	f200 809e 	bhi.w	800a378 <HAL_TIM_ConfigClockSource+0x1f0>
 800a23c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a240:	f000 8091 	beq.w	800a366 <HAL_TIM_ConfigClockSource+0x1de>
 800a244:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a248:	f200 8096 	bhi.w	800a378 <HAL_TIM_ConfigClockSource+0x1f0>
 800a24c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a250:	f000 8089 	beq.w	800a366 <HAL_TIM_ConfigClockSource+0x1de>
 800a254:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a258:	f200 808e 	bhi.w	800a378 <HAL_TIM_ConfigClockSource+0x1f0>
 800a25c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a260:	d03e      	beq.n	800a2e0 <HAL_TIM_ConfigClockSource+0x158>
 800a262:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a266:	f200 8087 	bhi.w	800a378 <HAL_TIM_ConfigClockSource+0x1f0>
 800a26a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a26e:	f000 8086 	beq.w	800a37e <HAL_TIM_ConfigClockSource+0x1f6>
 800a272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a276:	d87f      	bhi.n	800a378 <HAL_TIM_ConfigClockSource+0x1f0>
 800a278:	2b70      	cmp	r3, #112	@ 0x70
 800a27a:	d01a      	beq.n	800a2b2 <HAL_TIM_ConfigClockSource+0x12a>
 800a27c:	2b70      	cmp	r3, #112	@ 0x70
 800a27e:	d87b      	bhi.n	800a378 <HAL_TIM_ConfigClockSource+0x1f0>
 800a280:	2b60      	cmp	r3, #96	@ 0x60
 800a282:	d050      	beq.n	800a326 <HAL_TIM_ConfigClockSource+0x19e>
 800a284:	2b60      	cmp	r3, #96	@ 0x60
 800a286:	d877      	bhi.n	800a378 <HAL_TIM_ConfigClockSource+0x1f0>
 800a288:	2b50      	cmp	r3, #80	@ 0x50
 800a28a:	d03c      	beq.n	800a306 <HAL_TIM_ConfigClockSource+0x17e>
 800a28c:	2b50      	cmp	r3, #80	@ 0x50
 800a28e:	d873      	bhi.n	800a378 <HAL_TIM_ConfigClockSource+0x1f0>
 800a290:	2b40      	cmp	r3, #64	@ 0x40
 800a292:	d058      	beq.n	800a346 <HAL_TIM_ConfigClockSource+0x1be>
 800a294:	2b40      	cmp	r3, #64	@ 0x40
 800a296:	d86f      	bhi.n	800a378 <HAL_TIM_ConfigClockSource+0x1f0>
 800a298:	2b30      	cmp	r3, #48	@ 0x30
 800a29a:	d064      	beq.n	800a366 <HAL_TIM_ConfigClockSource+0x1de>
 800a29c:	2b30      	cmp	r3, #48	@ 0x30
 800a29e:	d86b      	bhi.n	800a378 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2a0:	2b20      	cmp	r3, #32
 800a2a2:	d060      	beq.n	800a366 <HAL_TIM_ConfigClockSource+0x1de>
 800a2a4:	2b20      	cmp	r3, #32
 800a2a6:	d867      	bhi.n	800a378 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d05c      	beq.n	800a366 <HAL_TIM_ConfigClockSource+0x1de>
 800a2ac:	2b10      	cmp	r3, #16
 800a2ae:	d05a      	beq.n	800a366 <HAL_TIM_ConfigClockSource+0x1de>
 800a2b0:	e062      	b.n	800a378 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a2c2:	f000 fcf9 	bl	800acb8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a2d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	609a      	str	r2, [r3, #8]
      break;
 800a2de:	e04f      	b.n	800a380 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a2f0:	f000 fce2 	bl	800acb8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	689a      	ldr	r2, [r3, #8]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a302:	609a      	str	r2, [r3, #8]
      break;
 800a304:	e03c      	b.n	800a380 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a312:	461a      	mov	r2, r3
 800a314:	f000 fc54 	bl	800abc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2150      	movs	r1, #80	@ 0x50
 800a31e:	4618      	mov	r0, r3
 800a320:	f000 fcad 	bl	800ac7e <TIM_ITRx_SetConfig>
      break;
 800a324:	e02c      	b.n	800a380 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a332:	461a      	mov	r2, r3
 800a334:	f000 fc73 	bl	800ac1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2160      	movs	r1, #96	@ 0x60
 800a33e:	4618      	mov	r0, r3
 800a340:	f000 fc9d 	bl	800ac7e <TIM_ITRx_SetConfig>
      break;
 800a344:	e01c      	b.n	800a380 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a352:	461a      	mov	r2, r3
 800a354:	f000 fc34 	bl	800abc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2140      	movs	r1, #64	@ 0x40
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 fc8d 	bl	800ac7e <TIM_ITRx_SetConfig>
      break;
 800a364:	e00c      	b.n	800a380 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4619      	mov	r1, r3
 800a370:	4610      	mov	r0, r2
 800a372:	f000 fc84 	bl	800ac7e <TIM_ITRx_SetConfig>
      break;
 800a376:	e003      	b.n	800a380 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800a378:	2301      	movs	r3, #1
 800a37a:	73fb      	strb	r3, [r7, #15]
      break;
 800a37c:	e000      	b.n	800a380 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800a37e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a390:	7bfb      	ldrb	r3, [r7, #15]
}
 800a392:	4618      	mov	r0, r3
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	00100070 	.word	0x00100070
 800a3a0:	00100060 	.word	0x00100060
 800a3a4:	00100050 	.word	0x00100050
 800a3a8:	00100040 	.word	0x00100040
 800a3ac:	00100030 	.word	0x00100030
 800a3b0:	00100020 	.word	0x00100020

0800a3b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a3bc:	bf00      	nop
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a3d0:	bf00      	nop
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3e4:	bf00      	nop
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	4a4c      	ldr	r2, [pc, #304]	@ (800a548 <TIM_Base_SetConfig+0x144>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d017      	beq.n	800a44c <TIM_Base_SetConfig+0x48>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a422:	d013      	beq.n	800a44c <TIM_Base_SetConfig+0x48>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a49      	ldr	r2, [pc, #292]	@ (800a54c <TIM_Base_SetConfig+0x148>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d00f      	beq.n	800a44c <TIM_Base_SetConfig+0x48>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a48      	ldr	r2, [pc, #288]	@ (800a550 <TIM_Base_SetConfig+0x14c>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d00b      	beq.n	800a44c <TIM_Base_SetConfig+0x48>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a47      	ldr	r2, [pc, #284]	@ (800a554 <TIM_Base_SetConfig+0x150>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d007      	beq.n	800a44c <TIM_Base_SetConfig+0x48>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a46      	ldr	r2, [pc, #280]	@ (800a558 <TIM_Base_SetConfig+0x154>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d003      	beq.n	800a44c <TIM_Base_SetConfig+0x48>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a45      	ldr	r2, [pc, #276]	@ (800a55c <TIM_Base_SetConfig+0x158>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d108      	bne.n	800a45e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4a39      	ldr	r2, [pc, #228]	@ (800a548 <TIM_Base_SetConfig+0x144>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d023      	beq.n	800a4ae <TIM_Base_SetConfig+0xaa>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a46c:	d01f      	beq.n	800a4ae <TIM_Base_SetConfig+0xaa>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4a36      	ldr	r2, [pc, #216]	@ (800a54c <TIM_Base_SetConfig+0x148>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d01b      	beq.n	800a4ae <TIM_Base_SetConfig+0xaa>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	4a35      	ldr	r2, [pc, #212]	@ (800a550 <TIM_Base_SetConfig+0x14c>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d017      	beq.n	800a4ae <TIM_Base_SetConfig+0xaa>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4a34      	ldr	r2, [pc, #208]	@ (800a554 <TIM_Base_SetConfig+0x150>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d013      	beq.n	800a4ae <TIM_Base_SetConfig+0xaa>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4a33      	ldr	r2, [pc, #204]	@ (800a558 <TIM_Base_SetConfig+0x154>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d00f      	beq.n	800a4ae <TIM_Base_SetConfig+0xaa>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4a33      	ldr	r2, [pc, #204]	@ (800a560 <TIM_Base_SetConfig+0x15c>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d00b      	beq.n	800a4ae <TIM_Base_SetConfig+0xaa>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4a32      	ldr	r2, [pc, #200]	@ (800a564 <TIM_Base_SetConfig+0x160>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d007      	beq.n	800a4ae <TIM_Base_SetConfig+0xaa>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a31      	ldr	r2, [pc, #196]	@ (800a568 <TIM_Base_SetConfig+0x164>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d003      	beq.n	800a4ae <TIM_Base_SetConfig+0xaa>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4a2c      	ldr	r2, [pc, #176]	@ (800a55c <TIM_Base_SetConfig+0x158>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d108      	bne.n	800a4c0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	68fa      	ldr	r2, [r7, #12]
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	695b      	ldr	r3, [r3, #20]
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	689a      	ldr	r2, [r3, #8]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	4a18      	ldr	r2, [pc, #96]	@ (800a548 <TIM_Base_SetConfig+0x144>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d013      	beq.n	800a514 <TIM_Base_SetConfig+0x110>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4a1a      	ldr	r2, [pc, #104]	@ (800a558 <TIM_Base_SetConfig+0x154>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d00f      	beq.n	800a514 <TIM_Base_SetConfig+0x110>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4a1a      	ldr	r2, [pc, #104]	@ (800a560 <TIM_Base_SetConfig+0x15c>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d00b      	beq.n	800a514 <TIM_Base_SetConfig+0x110>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4a19      	ldr	r2, [pc, #100]	@ (800a564 <TIM_Base_SetConfig+0x160>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d007      	beq.n	800a514 <TIM_Base_SetConfig+0x110>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4a18      	ldr	r2, [pc, #96]	@ (800a568 <TIM_Base_SetConfig+0x164>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d003      	beq.n	800a514 <TIM_Base_SetConfig+0x110>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a13      	ldr	r2, [pc, #76]	@ (800a55c <TIM_Base_SetConfig+0x158>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d103      	bne.n	800a51c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	691a      	ldr	r2, [r3, #16]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	691b      	ldr	r3, [r3, #16]
 800a526:	f003 0301 	and.w	r3, r3, #1
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d105      	bne.n	800a53a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	f023 0201 	bic.w	r2, r3, #1
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	611a      	str	r2, [r3, #16]
  }
}
 800a53a:	bf00      	nop
 800a53c:	3714      	adds	r7, #20
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	40012c00 	.word	0x40012c00
 800a54c:	40000400 	.word	0x40000400
 800a550:	40000800 	.word	0x40000800
 800a554:	40000c00 	.word	0x40000c00
 800a558:	40013400 	.word	0x40013400
 800a55c:	40015000 	.word	0x40015000
 800a560:	40014000 	.word	0x40014000
 800a564:	40014400 	.word	0x40014400
 800a568:	40014800 	.word	0x40014800

0800a56c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b087      	sub	sp, #28
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a1b      	ldr	r3, [r3, #32]
 800a57a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a1b      	ldr	r3, [r3, #32]
 800a580:	f023 0201 	bic.w	r2, r3, #1
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a59a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a59e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f023 0303 	bic.w	r3, r3, #3
 800a5a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	f023 0302 	bic.w	r3, r3, #2
 800a5b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a30      	ldr	r2, [pc, #192]	@ (800a688 <TIM_OC1_SetConfig+0x11c>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d013      	beq.n	800a5f4 <TIM_OC1_SetConfig+0x88>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4a2f      	ldr	r2, [pc, #188]	@ (800a68c <TIM_OC1_SetConfig+0x120>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d00f      	beq.n	800a5f4 <TIM_OC1_SetConfig+0x88>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a2e      	ldr	r2, [pc, #184]	@ (800a690 <TIM_OC1_SetConfig+0x124>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d00b      	beq.n	800a5f4 <TIM_OC1_SetConfig+0x88>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a2d      	ldr	r2, [pc, #180]	@ (800a694 <TIM_OC1_SetConfig+0x128>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d007      	beq.n	800a5f4 <TIM_OC1_SetConfig+0x88>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a2c      	ldr	r2, [pc, #176]	@ (800a698 <TIM_OC1_SetConfig+0x12c>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d003      	beq.n	800a5f4 <TIM_OC1_SetConfig+0x88>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a2b      	ldr	r2, [pc, #172]	@ (800a69c <TIM_OC1_SetConfig+0x130>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d10c      	bne.n	800a60e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	f023 0308 	bic.w	r3, r3, #8
 800a5fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	697a      	ldr	r2, [r7, #20]
 800a602:	4313      	orrs	r3, r2
 800a604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	f023 0304 	bic.w	r3, r3, #4
 800a60c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4a1d      	ldr	r2, [pc, #116]	@ (800a688 <TIM_OC1_SetConfig+0x11c>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d013      	beq.n	800a63e <TIM_OC1_SetConfig+0xd2>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a1c      	ldr	r2, [pc, #112]	@ (800a68c <TIM_OC1_SetConfig+0x120>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d00f      	beq.n	800a63e <TIM_OC1_SetConfig+0xd2>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a1b      	ldr	r2, [pc, #108]	@ (800a690 <TIM_OC1_SetConfig+0x124>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d00b      	beq.n	800a63e <TIM_OC1_SetConfig+0xd2>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a1a      	ldr	r2, [pc, #104]	@ (800a694 <TIM_OC1_SetConfig+0x128>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d007      	beq.n	800a63e <TIM_OC1_SetConfig+0xd2>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a19      	ldr	r2, [pc, #100]	@ (800a698 <TIM_OC1_SetConfig+0x12c>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d003      	beq.n	800a63e <TIM_OC1_SetConfig+0xd2>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a18      	ldr	r2, [pc, #96]	@ (800a69c <TIM_OC1_SetConfig+0x130>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d111      	bne.n	800a662 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a64c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	695b      	ldr	r3, [r3, #20]
 800a652:	693a      	ldr	r2, [r7, #16]
 800a654:	4313      	orrs	r3, r2
 800a656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	699b      	ldr	r3, [r3, #24]
 800a65c:	693a      	ldr	r2, [r7, #16]
 800a65e:	4313      	orrs	r3, r2
 800a660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	693a      	ldr	r2, [r7, #16]
 800a666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	685a      	ldr	r2, [r3, #4]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	697a      	ldr	r2, [r7, #20]
 800a67a:	621a      	str	r2, [r3, #32]
}
 800a67c:	bf00      	nop
 800a67e:	371c      	adds	r7, #28
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr
 800a688:	40012c00 	.word	0x40012c00
 800a68c:	40013400 	.word	0x40013400
 800a690:	40014000 	.word	0x40014000
 800a694:	40014400 	.word	0x40014400
 800a698:	40014800 	.word	0x40014800
 800a69c:	40015000 	.word	0x40015000

0800a6a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b087      	sub	sp, #28
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a1b      	ldr	r3, [r3, #32]
 800a6ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a1b      	ldr	r3, [r3, #32]
 800a6b4:	f023 0210 	bic.w	r2, r3, #16
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	699b      	ldr	r3, [r3, #24]
 800a6c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a6ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a6da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	021b      	lsls	r3, r3, #8
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	f023 0320 	bic.w	r3, r3, #32
 800a6ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	011b      	lsls	r3, r3, #4
 800a6f6:	697a      	ldr	r2, [r7, #20]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4a2c      	ldr	r2, [pc, #176]	@ (800a7b0 <TIM_OC2_SetConfig+0x110>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d007      	beq.n	800a714 <TIM_OC2_SetConfig+0x74>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4a2b      	ldr	r2, [pc, #172]	@ (800a7b4 <TIM_OC2_SetConfig+0x114>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d003      	beq.n	800a714 <TIM_OC2_SetConfig+0x74>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	4a2a      	ldr	r2, [pc, #168]	@ (800a7b8 <TIM_OC2_SetConfig+0x118>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d10d      	bne.n	800a730 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a71a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	011b      	lsls	r3, r3, #4
 800a722:	697a      	ldr	r2, [r7, #20]
 800a724:	4313      	orrs	r3, r2
 800a726:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a72e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a1f      	ldr	r2, [pc, #124]	@ (800a7b0 <TIM_OC2_SetConfig+0x110>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d013      	beq.n	800a760 <TIM_OC2_SetConfig+0xc0>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a1e      	ldr	r2, [pc, #120]	@ (800a7b4 <TIM_OC2_SetConfig+0x114>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d00f      	beq.n	800a760 <TIM_OC2_SetConfig+0xc0>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a1e      	ldr	r2, [pc, #120]	@ (800a7bc <TIM_OC2_SetConfig+0x11c>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d00b      	beq.n	800a760 <TIM_OC2_SetConfig+0xc0>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a1d      	ldr	r2, [pc, #116]	@ (800a7c0 <TIM_OC2_SetConfig+0x120>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d007      	beq.n	800a760 <TIM_OC2_SetConfig+0xc0>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a1c      	ldr	r2, [pc, #112]	@ (800a7c4 <TIM_OC2_SetConfig+0x124>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d003      	beq.n	800a760 <TIM_OC2_SetConfig+0xc0>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a17      	ldr	r2, [pc, #92]	@ (800a7b8 <TIM_OC2_SetConfig+0x118>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d113      	bne.n	800a788 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a766:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a76e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	695b      	ldr	r3, [r3, #20]
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	693a      	ldr	r2, [r7, #16]
 800a778:	4313      	orrs	r3, r2
 800a77a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	699b      	ldr	r3, [r3, #24]
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	693a      	ldr	r2, [r7, #16]
 800a784:	4313      	orrs	r3, r2
 800a786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	693a      	ldr	r2, [r7, #16]
 800a78c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	685a      	ldr	r2, [r3, #4]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	697a      	ldr	r2, [r7, #20]
 800a7a0:	621a      	str	r2, [r3, #32]
}
 800a7a2:	bf00      	nop
 800a7a4:	371c      	adds	r7, #28
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	40012c00 	.word	0x40012c00
 800a7b4:	40013400 	.word	0x40013400
 800a7b8:	40015000 	.word	0x40015000
 800a7bc:	40014000 	.word	0x40014000
 800a7c0:	40014400 	.word	0x40014400
 800a7c4:	40014800 	.word	0x40014800

0800a7c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b087      	sub	sp, #28
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a1b      	ldr	r3, [r3, #32]
 800a7d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6a1b      	ldr	r3, [r3, #32]
 800a7dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	69db      	ldr	r3, [r3, #28]
 800a7ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a7f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f023 0303 	bic.w	r3, r3, #3
 800a802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	689b      	ldr	r3, [r3, #8]
 800a81a:	021b      	lsls	r3, r3, #8
 800a81c:	697a      	ldr	r2, [r7, #20]
 800a81e:	4313      	orrs	r3, r2
 800a820:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a2b      	ldr	r2, [pc, #172]	@ (800a8d4 <TIM_OC3_SetConfig+0x10c>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d007      	beq.n	800a83a <TIM_OC3_SetConfig+0x72>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a2a      	ldr	r2, [pc, #168]	@ (800a8d8 <TIM_OC3_SetConfig+0x110>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d003      	beq.n	800a83a <TIM_OC3_SetConfig+0x72>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a29      	ldr	r2, [pc, #164]	@ (800a8dc <TIM_OC3_SetConfig+0x114>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d10d      	bne.n	800a856 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a840:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	021b      	lsls	r3, r3, #8
 800a848:	697a      	ldr	r2, [r7, #20]
 800a84a:	4313      	orrs	r3, r2
 800a84c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	4a1e      	ldr	r2, [pc, #120]	@ (800a8d4 <TIM_OC3_SetConfig+0x10c>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d013      	beq.n	800a886 <TIM_OC3_SetConfig+0xbe>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4a1d      	ldr	r2, [pc, #116]	@ (800a8d8 <TIM_OC3_SetConfig+0x110>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d00f      	beq.n	800a886 <TIM_OC3_SetConfig+0xbe>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a1d      	ldr	r2, [pc, #116]	@ (800a8e0 <TIM_OC3_SetConfig+0x118>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d00b      	beq.n	800a886 <TIM_OC3_SetConfig+0xbe>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4a1c      	ldr	r2, [pc, #112]	@ (800a8e4 <TIM_OC3_SetConfig+0x11c>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d007      	beq.n	800a886 <TIM_OC3_SetConfig+0xbe>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4a1b      	ldr	r2, [pc, #108]	@ (800a8e8 <TIM_OC3_SetConfig+0x120>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d003      	beq.n	800a886 <TIM_OC3_SetConfig+0xbe>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4a16      	ldr	r2, [pc, #88]	@ (800a8dc <TIM_OC3_SetConfig+0x114>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d113      	bne.n	800a8ae <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a88c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	695b      	ldr	r3, [r3, #20]
 800a89a:	011b      	lsls	r3, r3, #4
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	011b      	lsls	r3, r3, #4
 800a8a8:	693a      	ldr	r2, [r7, #16]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	693a      	ldr	r2, [r7, #16]
 800a8b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	685a      	ldr	r2, [r3, #4]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	697a      	ldr	r2, [r7, #20]
 800a8c6:	621a      	str	r2, [r3, #32]
}
 800a8c8:	bf00      	nop
 800a8ca:	371c      	adds	r7, #28
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr
 800a8d4:	40012c00 	.word	0x40012c00
 800a8d8:	40013400 	.word	0x40013400
 800a8dc:	40015000 	.word	0x40015000
 800a8e0:	40014000 	.word	0x40014000
 800a8e4:	40014400 	.word	0x40014400
 800a8e8:	40014800 	.word	0x40014800

0800a8ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b087      	sub	sp, #28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6a1b      	ldr	r3, [r3, #32]
 800a8fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a1b      	ldr	r3, [r3, #32]
 800a900:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	69db      	ldr	r3, [r3, #28]
 800a912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a91a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a91e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	021b      	lsls	r3, r3, #8
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	4313      	orrs	r3, r2
 800a932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a93a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	031b      	lsls	r3, r3, #12
 800a942:	697a      	ldr	r2, [r7, #20]
 800a944:	4313      	orrs	r3, r2
 800a946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a2c      	ldr	r2, [pc, #176]	@ (800a9fc <TIM_OC4_SetConfig+0x110>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d007      	beq.n	800a960 <TIM_OC4_SetConfig+0x74>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4a2b      	ldr	r2, [pc, #172]	@ (800aa00 <TIM_OC4_SetConfig+0x114>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d003      	beq.n	800a960 <TIM_OC4_SetConfig+0x74>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a2a      	ldr	r2, [pc, #168]	@ (800aa04 <TIM_OC4_SetConfig+0x118>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d10d      	bne.n	800a97c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	031b      	lsls	r3, r3, #12
 800a96e:	697a      	ldr	r2, [r7, #20]
 800a970:	4313      	orrs	r3, r2
 800a972:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a97a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a1f      	ldr	r2, [pc, #124]	@ (800a9fc <TIM_OC4_SetConfig+0x110>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d013      	beq.n	800a9ac <TIM_OC4_SetConfig+0xc0>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a1e      	ldr	r2, [pc, #120]	@ (800aa00 <TIM_OC4_SetConfig+0x114>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d00f      	beq.n	800a9ac <TIM_OC4_SetConfig+0xc0>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a1e      	ldr	r2, [pc, #120]	@ (800aa08 <TIM_OC4_SetConfig+0x11c>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d00b      	beq.n	800a9ac <TIM_OC4_SetConfig+0xc0>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a1d      	ldr	r2, [pc, #116]	@ (800aa0c <TIM_OC4_SetConfig+0x120>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d007      	beq.n	800a9ac <TIM_OC4_SetConfig+0xc0>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a1c      	ldr	r2, [pc, #112]	@ (800aa10 <TIM_OC4_SetConfig+0x124>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d003      	beq.n	800a9ac <TIM_OC4_SetConfig+0xc0>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a17      	ldr	r2, [pc, #92]	@ (800aa04 <TIM_OC4_SetConfig+0x118>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d113      	bne.n	800a9d4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a9b2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a9ba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	695b      	ldr	r3, [r3, #20]
 800a9c0:	019b      	lsls	r3, r3, #6
 800a9c2:	693a      	ldr	r2, [r7, #16]
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	699b      	ldr	r3, [r3, #24]
 800a9cc:	019b      	lsls	r3, r3, #6
 800a9ce:	693a      	ldr	r2, [r7, #16]
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	693a      	ldr	r2, [r7, #16]
 800a9d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	685a      	ldr	r2, [r3, #4]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	621a      	str	r2, [r3, #32]
}
 800a9ee:	bf00      	nop
 800a9f0:	371c      	adds	r7, #28
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop
 800a9fc:	40012c00 	.word	0x40012c00
 800aa00:	40013400 	.word	0x40013400
 800aa04:	40015000 	.word	0x40015000
 800aa08:	40014000 	.word	0x40014000
 800aa0c:	40014400 	.word	0x40014400
 800aa10:	40014800 	.word	0x40014800

0800aa14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b087      	sub	sp, #28
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6a1b      	ldr	r3, [r3, #32]
 800aa22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a1b      	ldr	r3, [r3, #32]
 800aa28:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800aa58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	041b      	lsls	r3, r3, #16
 800aa60:	693a      	ldr	r2, [r7, #16]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a19      	ldr	r2, [pc, #100]	@ (800aad0 <TIM_OC5_SetConfig+0xbc>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d013      	beq.n	800aa96 <TIM_OC5_SetConfig+0x82>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a18      	ldr	r2, [pc, #96]	@ (800aad4 <TIM_OC5_SetConfig+0xc0>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d00f      	beq.n	800aa96 <TIM_OC5_SetConfig+0x82>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a17      	ldr	r2, [pc, #92]	@ (800aad8 <TIM_OC5_SetConfig+0xc4>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d00b      	beq.n	800aa96 <TIM_OC5_SetConfig+0x82>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a16      	ldr	r2, [pc, #88]	@ (800aadc <TIM_OC5_SetConfig+0xc8>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d007      	beq.n	800aa96 <TIM_OC5_SetConfig+0x82>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a15      	ldr	r2, [pc, #84]	@ (800aae0 <TIM_OC5_SetConfig+0xcc>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d003      	beq.n	800aa96 <TIM_OC5_SetConfig+0x82>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a14      	ldr	r2, [pc, #80]	@ (800aae4 <TIM_OC5_SetConfig+0xd0>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d109      	bne.n	800aaaa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	695b      	ldr	r3, [r3, #20]
 800aaa2:	021b      	lsls	r3, r3, #8
 800aaa4:	697a      	ldr	r2, [r7, #20]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	697a      	ldr	r2, [r7, #20]
 800aaae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	685a      	ldr	r2, [r3, #4]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	693a      	ldr	r2, [r7, #16]
 800aac2:	621a      	str	r2, [r3, #32]
}
 800aac4:	bf00      	nop
 800aac6:	371c      	adds	r7, #28
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr
 800aad0:	40012c00 	.word	0x40012c00
 800aad4:	40013400 	.word	0x40013400
 800aad8:	40014000 	.word	0x40014000
 800aadc:	40014400 	.word	0x40014400
 800aae0:	40014800 	.word	0x40014800
 800aae4:	40015000 	.word	0x40015000

0800aae8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b087      	sub	sp, #28
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a1b      	ldr	r3, [r3, #32]
 800aaf6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6a1b      	ldr	r3, [r3, #32]
 800aafc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ab16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	021b      	lsls	r3, r3, #8
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	4313      	orrs	r3, r2
 800ab26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ab2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	051b      	lsls	r3, r3, #20
 800ab36:	693a      	ldr	r2, [r7, #16]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a1a      	ldr	r2, [pc, #104]	@ (800aba8 <TIM_OC6_SetConfig+0xc0>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d013      	beq.n	800ab6c <TIM_OC6_SetConfig+0x84>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a19      	ldr	r2, [pc, #100]	@ (800abac <TIM_OC6_SetConfig+0xc4>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d00f      	beq.n	800ab6c <TIM_OC6_SetConfig+0x84>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a18      	ldr	r2, [pc, #96]	@ (800abb0 <TIM_OC6_SetConfig+0xc8>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d00b      	beq.n	800ab6c <TIM_OC6_SetConfig+0x84>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a17      	ldr	r2, [pc, #92]	@ (800abb4 <TIM_OC6_SetConfig+0xcc>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d007      	beq.n	800ab6c <TIM_OC6_SetConfig+0x84>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a16      	ldr	r2, [pc, #88]	@ (800abb8 <TIM_OC6_SetConfig+0xd0>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d003      	beq.n	800ab6c <TIM_OC6_SetConfig+0x84>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a15      	ldr	r2, [pc, #84]	@ (800abbc <TIM_OC6_SetConfig+0xd4>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d109      	bne.n	800ab80 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	695b      	ldr	r3, [r3, #20]
 800ab78:	029b      	lsls	r3, r3, #10
 800ab7a:	697a      	ldr	r2, [r7, #20]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	697a      	ldr	r2, [r7, #20]
 800ab84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	685a      	ldr	r2, [r3, #4]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	693a      	ldr	r2, [r7, #16]
 800ab98:	621a      	str	r2, [r3, #32]
}
 800ab9a:	bf00      	nop
 800ab9c:	371c      	adds	r7, #28
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	40012c00 	.word	0x40012c00
 800abac:	40013400 	.word	0x40013400
 800abb0:	40014000 	.word	0x40014000
 800abb4:	40014400 	.word	0x40014400
 800abb8:	40014800 	.word	0x40014800
 800abbc:	40015000 	.word	0x40015000

0800abc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b087      	sub	sp, #28
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6a1b      	ldr	r3, [r3, #32]
 800abd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6a1b      	ldr	r3, [r3, #32]
 800abd6:	f023 0201 	bic.w	r2, r3, #1
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	699b      	ldr	r3, [r3, #24]
 800abe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800abea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	011b      	lsls	r3, r3, #4
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	f023 030a 	bic.w	r3, r3, #10
 800abfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800abfe:	697a      	ldr	r2, [r7, #20]
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	4313      	orrs	r3, r2
 800ac04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	693a      	ldr	r2, [r7, #16]
 800ac0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	697a      	ldr	r2, [r7, #20]
 800ac10:	621a      	str	r2, [r3, #32]
}
 800ac12:	bf00      	nop
 800ac14:	371c      	adds	r7, #28
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac1e:	b480      	push	{r7}
 800ac20:	b087      	sub	sp, #28
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	60f8      	str	r0, [r7, #12]
 800ac26:	60b9      	str	r1, [r7, #8]
 800ac28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6a1b      	ldr	r3, [r3, #32]
 800ac2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6a1b      	ldr	r3, [r3, #32]
 800ac34:	f023 0210 	bic.w	r2, r3, #16
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	699b      	ldr	r3, [r3, #24]
 800ac40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ac48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	031b      	lsls	r3, r3, #12
 800ac4e:	693a      	ldr	r2, [r7, #16]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ac5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	011b      	lsls	r3, r3, #4
 800ac60:	697a      	ldr	r2, [r7, #20]
 800ac62:	4313      	orrs	r3, r2
 800ac64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	697a      	ldr	r2, [r7, #20]
 800ac70:	621a      	str	r2, [r3, #32]
}
 800ac72:	bf00      	nop
 800ac74:	371c      	adds	r7, #28
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr

0800ac7e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac7e:	b480      	push	{r7}
 800ac80:	b085      	sub	sp, #20
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ac94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac9a:	683a      	ldr	r2, [r7, #0]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	f043 0307 	orr.w	r3, r3, #7
 800aca4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	609a      	str	r2, [r3, #8]
}
 800acac:	bf00      	nop
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800acb8:	b480      	push	{r7}
 800acba:	b087      	sub	sp, #28
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	607a      	str	r2, [r7, #4]
 800acc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800acd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	021a      	lsls	r2, r3, #8
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	431a      	orrs	r2, r3
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	4313      	orrs	r3, r2
 800ace0:	697a      	ldr	r2, [r7, #20]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	697a      	ldr	r2, [r7, #20]
 800acea:	609a      	str	r2, [r3, #8]
}
 800acec:	bf00      	nop
 800acee:	371c      	adds	r7, #28
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b087      	sub	sp, #28
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	f003 031f 	and.w	r3, r3, #31
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6a1a      	ldr	r2, [r3, #32]
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	43db      	mvns	r3, r3
 800ad1a:	401a      	ands	r2, r3
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6a1a      	ldr	r2, [r3, #32]
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	f003 031f 	and.w	r3, r3, #31
 800ad2a:	6879      	ldr	r1, [r7, #4]
 800ad2c:	fa01 f303 	lsl.w	r3, r1, r3
 800ad30:	431a      	orrs	r2, r3
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	621a      	str	r2, [r3, #32]
}
 800ad36:	bf00      	nop
 800ad38:	371c      	adds	r7, #28
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr
	...

0800ad44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b085      	sub	sp, #20
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d101      	bne.n	800ad5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad58:	2302      	movs	r3, #2
 800ad5a:	e074      	b.n	800ae46 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2202      	movs	r2, #2
 800ad68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a34      	ldr	r2, [pc, #208]	@ (800ae54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d009      	beq.n	800ad9a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a33      	ldr	r2, [pc, #204]	@ (800ae58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d004      	beq.n	800ad9a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a31      	ldr	r2, [pc, #196]	@ (800ae5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d108      	bne.n	800adac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ada0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	68fa      	ldr	r2, [r7, #12]
 800ada8:	4313      	orrs	r3, r2
 800adaa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800adb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68fa      	ldr	r2, [r7, #12]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a21      	ldr	r2, [pc, #132]	@ (800ae54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d022      	beq.n	800ae1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800addc:	d01d      	beq.n	800ae1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a1f      	ldr	r2, [pc, #124]	@ (800ae60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d018      	beq.n	800ae1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a1d      	ldr	r2, [pc, #116]	@ (800ae64 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d013      	beq.n	800ae1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a1c      	ldr	r2, [pc, #112]	@ (800ae68 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d00e      	beq.n	800ae1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a15      	ldr	r2, [pc, #84]	@ (800ae58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d009      	beq.n	800ae1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a18      	ldr	r2, [pc, #96]	@ (800ae6c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d004      	beq.n	800ae1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a11      	ldr	r2, [pc, #68]	@ (800ae5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d10c      	bne.n	800ae34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	68ba      	ldr	r2, [r7, #8]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2201      	movs	r2, #1
 800ae38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ae44:	2300      	movs	r3, #0
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3714      	adds	r7, #20
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	40012c00 	.word	0x40012c00
 800ae58:	40013400 	.word	0x40013400
 800ae5c:	40015000 	.word	0x40015000
 800ae60:	40000400 	.word	0x40000400
 800ae64:	40000800 	.word	0x40000800
 800ae68:	40000c00 	.word	0x40000c00
 800ae6c:	40014000 	.word	0x40014000

0800ae70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b085      	sub	sp, #20
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d101      	bne.n	800ae8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ae88:	2302      	movs	r3, #2
 800ae8a:	e078      	b.n	800af7e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	4313      	orrs	r3, r2
 800aeae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	4313      	orrs	r3, r2
 800aebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	691b      	ldr	r3, [r3, #16]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	695b      	ldr	r3, [r3, #20]
 800aee4:	4313      	orrs	r3, r2
 800aee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aef2:	4313      	orrs	r3, r2
 800aef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	699b      	ldr	r3, [r3, #24]
 800af00:	041b      	lsls	r3, r3, #16
 800af02:	4313      	orrs	r3, r2
 800af04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	69db      	ldr	r3, [r3, #28]
 800af10:	4313      	orrs	r3, r2
 800af12:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a1c      	ldr	r2, [pc, #112]	@ (800af8c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d009      	beq.n	800af32 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a1b      	ldr	r2, [pc, #108]	@ (800af90 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d004      	beq.n	800af32 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a19      	ldr	r2, [pc, #100]	@ (800af94 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d11c      	bne.n	800af6c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af3c:	051b      	lsls	r3, r3, #20
 800af3e:	4313      	orrs	r3, r2
 800af40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	6a1b      	ldr	r3, [r3, #32]
 800af4c:	4313      	orrs	r3, r2
 800af4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af5a:	4313      	orrs	r3, r2
 800af5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af68:	4313      	orrs	r3, r2
 800af6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af7c:	2300      	movs	r3, #0
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3714      	adds	r7, #20
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	40012c00 	.word	0x40012c00
 800af90:	40013400 	.word	0x40013400
 800af94:	40015000 	.word	0x40015000

0800af98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afb4:	bf00      	nop
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800afc8:	bf00      	nop
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800afdc:	bf00      	nop
 800afde:	370c      	adds	r7, #12
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800aff0:	bf00      	nop
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b004:	bf00      	nop
 800b006:	370c      	adds	r7, #12
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b010:	b480      	push	{r7}
 800b012:	b083      	sub	sp, #12
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b018:	bf00      	nop
 800b01a:	370c      	adds	r7, #12
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d101      	bne.n	800b036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	e042      	b.n	800b0bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d106      	bne.n	800b04e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f7f8 fe0b 	bl	8003c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2224      	movs	r2, #36	@ 0x24
 800b052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f022 0201 	bic.w	r2, r2, #1
 800b064:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d002      	beq.n	800b074 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fb24 	bl	800b6bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 f825 	bl	800b0c4 <UART_SetConfig>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d101      	bne.n	800b084 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	e01b      	b.n	800b0bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	685a      	ldr	r2, [r3, #4]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b092:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	689a      	ldr	r2, [r3, #8]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b0a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f042 0201 	orr.w	r2, r2, #1
 800b0b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 fba3 	bl	800b800 <UART_CheckIdleState>
 800b0ba:	4603      	mov	r3, r0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3708      	adds	r7, #8
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b0c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0c8:	b08c      	sub	sp, #48	@ 0x30
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	689a      	ldr	r2, [r3, #8]
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	691b      	ldr	r3, [r3, #16]
 800b0dc:	431a      	orrs	r2, r3
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	695b      	ldr	r3, [r3, #20]
 800b0e2:	431a      	orrs	r2, r3
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	69db      	ldr	r3, [r3, #28]
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	4baa      	ldr	r3, [pc, #680]	@ (800b39c <UART_SetConfig+0x2d8>)
 800b0f4:	4013      	ands	r3, r2
 800b0f6:	697a      	ldr	r2, [r7, #20]
 800b0f8:	6812      	ldr	r2, [r2, #0]
 800b0fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0fc:	430b      	orrs	r3, r1
 800b0fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	68da      	ldr	r2, [r3, #12]
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	430a      	orrs	r2, r1
 800b114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	699b      	ldr	r3, [r3, #24]
 800b11a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a9f      	ldr	r2, [pc, #636]	@ (800b3a0 <UART_SetConfig+0x2dc>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d004      	beq.n	800b130 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	6a1b      	ldr	r3, [r3, #32]
 800b12a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b12c:	4313      	orrs	r3, r2
 800b12e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b13a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b13e:	697a      	ldr	r2, [r7, #20]
 800b140:	6812      	ldr	r2, [r2, #0]
 800b142:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b144:	430b      	orrs	r3, r1
 800b146:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b14e:	f023 010f 	bic.w	r1, r3, #15
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	430a      	orrs	r2, r1
 800b15c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a90      	ldr	r2, [pc, #576]	@ (800b3a4 <UART_SetConfig+0x2e0>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d125      	bne.n	800b1b4 <UART_SetConfig+0xf0>
 800b168:	4b8f      	ldr	r3, [pc, #572]	@ (800b3a8 <UART_SetConfig+0x2e4>)
 800b16a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b16e:	f003 0303 	and.w	r3, r3, #3
 800b172:	2b03      	cmp	r3, #3
 800b174:	d81a      	bhi.n	800b1ac <UART_SetConfig+0xe8>
 800b176:	a201      	add	r2, pc, #4	@ (adr r2, 800b17c <UART_SetConfig+0xb8>)
 800b178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b17c:	0800b18d 	.word	0x0800b18d
 800b180:	0800b19d 	.word	0x0800b19d
 800b184:	0800b195 	.word	0x0800b195
 800b188:	0800b1a5 	.word	0x0800b1a5
 800b18c:	2301      	movs	r3, #1
 800b18e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b192:	e116      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b194:	2302      	movs	r3, #2
 800b196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b19a:	e112      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b19c:	2304      	movs	r3, #4
 800b19e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1a2:	e10e      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b1a4:	2308      	movs	r3, #8
 800b1a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1aa:	e10a      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b1ac:	2310      	movs	r3, #16
 800b1ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1b2:	e106      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a7c      	ldr	r2, [pc, #496]	@ (800b3ac <UART_SetConfig+0x2e8>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d138      	bne.n	800b230 <UART_SetConfig+0x16c>
 800b1be:	4b7a      	ldr	r3, [pc, #488]	@ (800b3a8 <UART_SetConfig+0x2e4>)
 800b1c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1c4:	f003 030c 	and.w	r3, r3, #12
 800b1c8:	2b0c      	cmp	r3, #12
 800b1ca:	d82d      	bhi.n	800b228 <UART_SetConfig+0x164>
 800b1cc:	a201      	add	r2, pc, #4	@ (adr r2, 800b1d4 <UART_SetConfig+0x110>)
 800b1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d2:	bf00      	nop
 800b1d4:	0800b209 	.word	0x0800b209
 800b1d8:	0800b229 	.word	0x0800b229
 800b1dc:	0800b229 	.word	0x0800b229
 800b1e0:	0800b229 	.word	0x0800b229
 800b1e4:	0800b219 	.word	0x0800b219
 800b1e8:	0800b229 	.word	0x0800b229
 800b1ec:	0800b229 	.word	0x0800b229
 800b1f0:	0800b229 	.word	0x0800b229
 800b1f4:	0800b211 	.word	0x0800b211
 800b1f8:	0800b229 	.word	0x0800b229
 800b1fc:	0800b229 	.word	0x0800b229
 800b200:	0800b229 	.word	0x0800b229
 800b204:	0800b221 	.word	0x0800b221
 800b208:	2300      	movs	r3, #0
 800b20a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b20e:	e0d8      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b210:	2302      	movs	r3, #2
 800b212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b216:	e0d4      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b218:	2304      	movs	r3, #4
 800b21a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b21e:	e0d0      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b220:	2308      	movs	r3, #8
 800b222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b226:	e0cc      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b228:	2310      	movs	r3, #16
 800b22a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b22e:	e0c8      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a5e      	ldr	r2, [pc, #376]	@ (800b3b0 <UART_SetConfig+0x2ec>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d125      	bne.n	800b286 <UART_SetConfig+0x1c2>
 800b23a:	4b5b      	ldr	r3, [pc, #364]	@ (800b3a8 <UART_SetConfig+0x2e4>)
 800b23c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b240:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b244:	2b30      	cmp	r3, #48	@ 0x30
 800b246:	d016      	beq.n	800b276 <UART_SetConfig+0x1b2>
 800b248:	2b30      	cmp	r3, #48	@ 0x30
 800b24a:	d818      	bhi.n	800b27e <UART_SetConfig+0x1ba>
 800b24c:	2b20      	cmp	r3, #32
 800b24e:	d00a      	beq.n	800b266 <UART_SetConfig+0x1a2>
 800b250:	2b20      	cmp	r3, #32
 800b252:	d814      	bhi.n	800b27e <UART_SetConfig+0x1ba>
 800b254:	2b00      	cmp	r3, #0
 800b256:	d002      	beq.n	800b25e <UART_SetConfig+0x19a>
 800b258:	2b10      	cmp	r3, #16
 800b25a:	d008      	beq.n	800b26e <UART_SetConfig+0x1aa>
 800b25c:	e00f      	b.n	800b27e <UART_SetConfig+0x1ba>
 800b25e:	2300      	movs	r3, #0
 800b260:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b264:	e0ad      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b266:	2302      	movs	r3, #2
 800b268:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b26c:	e0a9      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b26e:	2304      	movs	r3, #4
 800b270:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b274:	e0a5      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b276:	2308      	movs	r3, #8
 800b278:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b27c:	e0a1      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b27e:	2310      	movs	r3, #16
 800b280:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b284:	e09d      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a4a      	ldr	r2, [pc, #296]	@ (800b3b4 <UART_SetConfig+0x2f0>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d125      	bne.n	800b2dc <UART_SetConfig+0x218>
 800b290:	4b45      	ldr	r3, [pc, #276]	@ (800b3a8 <UART_SetConfig+0x2e4>)
 800b292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b296:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b29a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b29c:	d016      	beq.n	800b2cc <UART_SetConfig+0x208>
 800b29e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b2a0:	d818      	bhi.n	800b2d4 <UART_SetConfig+0x210>
 800b2a2:	2b80      	cmp	r3, #128	@ 0x80
 800b2a4:	d00a      	beq.n	800b2bc <UART_SetConfig+0x1f8>
 800b2a6:	2b80      	cmp	r3, #128	@ 0x80
 800b2a8:	d814      	bhi.n	800b2d4 <UART_SetConfig+0x210>
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d002      	beq.n	800b2b4 <UART_SetConfig+0x1f0>
 800b2ae:	2b40      	cmp	r3, #64	@ 0x40
 800b2b0:	d008      	beq.n	800b2c4 <UART_SetConfig+0x200>
 800b2b2:	e00f      	b.n	800b2d4 <UART_SetConfig+0x210>
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2ba:	e082      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b2bc:	2302      	movs	r3, #2
 800b2be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2c2:	e07e      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b2c4:	2304      	movs	r3, #4
 800b2c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2ca:	e07a      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b2cc:	2308      	movs	r3, #8
 800b2ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2d2:	e076      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b2d4:	2310      	movs	r3, #16
 800b2d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2da:	e072      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a35      	ldr	r2, [pc, #212]	@ (800b3b8 <UART_SetConfig+0x2f4>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d12a      	bne.n	800b33c <UART_SetConfig+0x278>
 800b2e6:	4b30      	ldr	r3, [pc, #192]	@ (800b3a8 <UART_SetConfig+0x2e4>)
 800b2e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b2f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2f4:	d01a      	beq.n	800b32c <UART_SetConfig+0x268>
 800b2f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2fa:	d81b      	bhi.n	800b334 <UART_SetConfig+0x270>
 800b2fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b300:	d00c      	beq.n	800b31c <UART_SetConfig+0x258>
 800b302:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b306:	d815      	bhi.n	800b334 <UART_SetConfig+0x270>
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d003      	beq.n	800b314 <UART_SetConfig+0x250>
 800b30c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b310:	d008      	beq.n	800b324 <UART_SetConfig+0x260>
 800b312:	e00f      	b.n	800b334 <UART_SetConfig+0x270>
 800b314:	2300      	movs	r3, #0
 800b316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b31a:	e052      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b31c:	2302      	movs	r3, #2
 800b31e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b322:	e04e      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b324:	2304      	movs	r3, #4
 800b326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b32a:	e04a      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b32c:	2308      	movs	r3, #8
 800b32e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b332:	e046      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b334:	2310      	movs	r3, #16
 800b336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b33a:	e042      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a17      	ldr	r2, [pc, #92]	@ (800b3a0 <UART_SetConfig+0x2dc>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d13a      	bne.n	800b3bc <UART_SetConfig+0x2f8>
 800b346:	4b18      	ldr	r3, [pc, #96]	@ (800b3a8 <UART_SetConfig+0x2e4>)
 800b348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b34c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b350:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b354:	d01a      	beq.n	800b38c <UART_SetConfig+0x2c8>
 800b356:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b35a:	d81b      	bhi.n	800b394 <UART_SetConfig+0x2d0>
 800b35c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b360:	d00c      	beq.n	800b37c <UART_SetConfig+0x2b8>
 800b362:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b366:	d815      	bhi.n	800b394 <UART_SetConfig+0x2d0>
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d003      	beq.n	800b374 <UART_SetConfig+0x2b0>
 800b36c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b370:	d008      	beq.n	800b384 <UART_SetConfig+0x2c0>
 800b372:	e00f      	b.n	800b394 <UART_SetConfig+0x2d0>
 800b374:	2300      	movs	r3, #0
 800b376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b37a:	e022      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b37c:	2302      	movs	r3, #2
 800b37e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b382:	e01e      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b384:	2304      	movs	r3, #4
 800b386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b38a:	e01a      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b38c:	2308      	movs	r3, #8
 800b38e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b392:	e016      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b394:	2310      	movs	r3, #16
 800b396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b39a:	e012      	b.n	800b3c2 <UART_SetConfig+0x2fe>
 800b39c:	cfff69f3 	.word	0xcfff69f3
 800b3a0:	40008000 	.word	0x40008000
 800b3a4:	40013800 	.word	0x40013800
 800b3a8:	40021000 	.word	0x40021000
 800b3ac:	40004400 	.word	0x40004400
 800b3b0:	40004800 	.word	0x40004800
 800b3b4:	40004c00 	.word	0x40004c00
 800b3b8:	40005000 	.word	0x40005000
 800b3bc:	2310      	movs	r3, #16
 800b3be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4aae      	ldr	r2, [pc, #696]	@ (800b680 <UART_SetConfig+0x5bc>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	f040 8097 	bne.w	800b4fc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b3ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b3d2:	2b08      	cmp	r3, #8
 800b3d4:	d823      	bhi.n	800b41e <UART_SetConfig+0x35a>
 800b3d6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3dc <UART_SetConfig+0x318>)
 800b3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3dc:	0800b401 	.word	0x0800b401
 800b3e0:	0800b41f 	.word	0x0800b41f
 800b3e4:	0800b409 	.word	0x0800b409
 800b3e8:	0800b41f 	.word	0x0800b41f
 800b3ec:	0800b40f 	.word	0x0800b40f
 800b3f0:	0800b41f 	.word	0x0800b41f
 800b3f4:	0800b41f 	.word	0x0800b41f
 800b3f8:	0800b41f 	.word	0x0800b41f
 800b3fc:	0800b417 	.word	0x0800b417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b400:	f7fd fec6 	bl	8009190 <HAL_RCC_GetPCLK1Freq>
 800b404:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b406:	e010      	b.n	800b42a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b408:	4b9e      	ldr	r3, [pc, #632]	@ (800b684 <UART_SetConfig+0x5c0>)
 800b40a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b40c:	e00d      	b.n	800b42a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b40e:	f7fd fe51 	bl	80090b4 <HAL_RCC_GetSysClockFreq>
 800b412:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b414:	e009      	b.n	800b42a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b416:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b41a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b41c:	e005      	b.n	800b42a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b41e:	2300      	movs	r3, #0
 800b420:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b422:	2301      	movs	r3, #1
 800b424:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b428:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f000 8130 	beq.w	800b692 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b436:	4a94      	ldr	r2, [pc, #592]	@ (800b688 <UART_SetConfig+0x5c4>)
 800b438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b43c:	461a      	mov	r2, r3
 800b43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b440:	fbb3 f3f2 	udiv	r3, r3, r2
 800b444:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	685a      	ldr	r2, [r3, #4]
 800b44a:	4613      	mov	r3, r2
 800b44c:	005b      	lsls	r3, r3, #1
 800b44e:	4413      	add	r3, r2
 800b450:	69ba      	ldr	r2, [r7, #24]
 800b452:	429a      	cmp	r2, r3
 800b454:	d305      	bcc.n	800b462 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b45c:	69ba      	ldr	r2, [r7, #24]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d903      	bls.n	800b46a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b462:	2301      	movs	r3, #1
 800b464:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b468:	e113      	b.n	800b692 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b46c:	2200      	movs	r2, #0
 800b46e:	60bb      	str	r3, [r7, #8]
 800b470:	60fa      	str	r2, [r7, #12]
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b476:	4a84      	ldr	r2, [pc, #528]	@ (800b688 <UART_SetConfig+0x5c4>)
 800b478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	2200      	movs	r2, #0
 800b480:	603b      	str	r3, [r7, #0]
 800b482:	607a      	str	r2, [r7, #4]
 800b484:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b488:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b48c:	f7f5 fc24 	bl	8000cd8 <__aeabi_uldivmod>
 800b490:	4602      	mov	r2, r0
 800b492:	460b      	mov	r3, r1
 800b494:	4610      	mov	r0, r2
 800b496:	4619      	mov	r1, r3
 800b498:	f04f 0200 	mov.w	r2, #0
 800b49c:	f04f 0300 	mov.w	r3, #0
 800b4a0:	020b      	lsls	r3, r1, #8
 800b4a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b4a6:	0202      	lsls	r2, r0, #8
 800b4a8:	6979      	ldr	r1, [r7, #20]
 800b4aa:	6849      	ldr	r1, [r1, #4]
 800b4ac:	0849      	lsrs	r1, r1, #1
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	460c      	mov	r4, r1
 800b4b2:	4605      	mov	r5, r0
 800b4b4:	eb12 0804 	adds.w	r8, r2, r4
 800b4b8:	eb43 0905 	adc.w	r9, r3, r5
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	469a      	mov	sl, r3
 800b4c4:	4693      	mov	fp, r2
 800b4c6:	4652      	mov	r2, sl
 800b4c8:	465b      	mov	r3, fp
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	4649      	mov	r1, r9
 800b4ce:	f7f5 fc03 	bl	8000cd8 <__aeabi_uldivmod>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b4da:	6a3b      	ldr	r3, [r7, #32]
 800b4dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b4e0:	d308      	bcc.n	800b4f4 <UART_SetConfig+0x430>
 800b4e2:	6a3b      	ldr	r3, [r7, #32]
 800b4e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4e8:	d204      	bcs.n	800b4f4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	6a3a      	ldr	r2, [r7, #32]
 800b4f0:	60da      	str	r2, [r3, #12]
 800b4f2:	e0ce      	b.n	800b692 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b4fa:	e0ca      	b.n	800b692 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	69db      	ldr	r3, [r3, #28]
 800b500:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b504:	d166      	bne.n	800b5d4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b506:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b50a:	2b08      	cmp	r3, #8
 800b50c:	d827      	bhi.n	800b55e <UART_SetConfig+0x49a>
 800b50e:	a201      	add	r2, pc, #4	@ (adr r2, 800b514 <UART_SetConfig+0x450>)
 800b510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b514:	0800b539 	.word	0x0800b539
 800b518:	0800b541 	.word	0x0800b541
 800b51c:	0800b549 	.word	0x0800b549
 800b520:	0800b55f 	.word	0x0800b55f
 800b524:	0800b54f 	.word	0x0800b54f
 800b528:	0800b55f 	.word	0x0800b55f
 800b52c:	0800b55f 	.word	0x0800b55f
 800b530:	0800b55f 	.word	0x0800b55f
 800b534:	0800b557 	.word	0x0800b557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b538:	f7fd fe2a 	bl	8009190 <HAL_RCC_GetPCLK1Freq>
 800b53c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b53e:	e014      	b.n	800b56a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b540:	f7fd fe3c 	bl	80091bc <HAL_RCC_GetPCLK2Freq>
 800b544:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b546:	e010      	b.n	800b56a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b548:	4b4e      	ldr	r3, [pc, #312]	@ (800b684 <UART_SetConfig+0x5c0>)
 800b54a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b54c:	e00d      	b.n	800b56a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b54e:	f7fd fdb1 	bl	80090b4 <HAL_RCC_GetSysClockFreq>
 800b552:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b554:	e009      	b.n	800b56a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b55a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b55c:	e005      	b.n	800b56a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b55e:	2300      	movs	r3, #0
 800b560:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b562:	2301      	movs	r3, #1
 800b564:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b568:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f000 8090 	beq.w	800b692 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b576:	4a44      	ldr	r2, [pc, #272]	@ (800b688 <UART_SetConfig+0x5c4>)
 800b578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b57c:	461a      	mov	r2, r3
 800b57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b580:	fbb3 f3f2 	udiv	r3, r3, r2
 800b584:	005a      	lsls	r2, r3, #1
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	085b      	lsrs	r3, r3, #1
 800b58c:	441a      	add	r2, r3
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	fbb2 f3f3 	udiv	r3, r2, r3
 800b596:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b598:	6a3b      	ldr	r3, [r7, #32]
 800b59a:	2b0f      	cmp	r3, #15
 800b59c:	d916      	bls.n	800b5cc <UART_SetConfig+0x508>
 800b59e:	6a3b      	ldr	r3, [r7, #32]
 800b5a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5a4:	d212      	bcs.n	800b5cc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b5a6:	6a3b      	ldr	r3, [r7, #32]
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	f023 030f 	bic.w	r3, r3, #15
 800b5ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b5b0:	6a3b      	ldr	r3, [r7, #32]
 800b5b2:	085b      	lsrs	r3, r3, #1
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	f003 0307 	and.w	r3, r3, #7
 800b5ba:	b29a      	uxth	r2, r3
 800b5bc:	8bfb      	ldrh	r3, [r7, #30]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	8bfa      	ldrh	r2, [r7, #30]
 800b5c8:	60da      	str	r2, [r3, #12]
 800b5ca:	e062      	b.n	800b692 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b5d2:	e05e      	b.n	800b692 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b5d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b5d8:	2b08      	cmp	r3, #8
 800b5da:	d828      	bhi.n	800b62e <UART_SetConfig+0x56a>
 800b5dc:	a201      	add	r2, pc, #4	@ (adr r2, 800b5e4 <UART_SetConfig+0x520>)
 800b5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e2:	bf00      	nop
 800b5e4:	0800b609 	.word	0x0800b609
 800b5e8:	0800b611 	.word	0x0800b611
 800b5ec:	0800b619 	.word	0x0800b619
 800b5f0:	0800b62f 	.word	0x0800b62f
 800b5f4:	0800b61f 	.word	0x0800b61f
 800b5f8:	0800b62f 	.word	0x0800b62f
 800b5fc:	0800b62f 	.word	0x0800b62f
 800b600:	0800b62f 	.word	0x0800b62f
 800b604:	0800b627 	.word	0x0800b627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b608:	f7fd fdc2 	bl	8009190 <HAL_RCC_GetPCLK1Freq>
 800b60c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b60e:	e014      	b.n	800b63a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b610:	f7fd fdd4 	bl	80091bc <HAL_RCC_GetPCLK2Freq>
 800b614:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b616:	e010      	b.n	800b63a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b618:	4b1a      	ldr	r3, [pc, #104]	@ (800b684 <UART_SetConfig+0x5c0>)
 800b61a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b61c:	e00d      	b.n	800b63a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b61e:	f7fd fd49 	bl	80090b4 <HAL_RCC_GetSysClockFreq>
 800b622:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b624:	e009      	b.n	800b63a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b62a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b62c:	e005      	b.n	800b63a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b62e:	2300      	movs	r3, #0
 800b630:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b638:	bf00      	nop
    }

    if (pclk != 0U)
 800b63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d028      	beq.n	800b692 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b644:	4a10      	ldr	r2, [pc, #64]	@ (800b688 <UART_SetConfig+0x5c4>)
 800b646:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b64a:	461a      	mov	r2, r3
 800b64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	085b      	lsrs	r3, r3, #1
 800b658:	441a      	add	r2, r3
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b662:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b664:	6a3b      	ldr	r3, [r7, #32]
 800b666:	2b0f      	cmp	r3, #15
 800b668:	d910      	bls.n	800b68c <UART_SetConfig+0x5c8>
 800b66a:	6a3b      	ldr	r3, [r7, #32]
 800b66c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b670:	d20c      	bcs.n	800b68c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b672:	6a3b      	ldr	r3, [r7, #32]
 800b674:	b29a      	uxth	r2, r3
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	60da      	str	r2, [r3, #12]
 800b67c:	e009      	b.n	800b692 <UART_SetConfig+0x5ce>
 800b67e:	bf00      	nop
 800b680:	40008000 	.word	0x40008000
 800b684:	00f42400 	.word	0x00f42400
 800b688:	08016dc0 	.word	0x08016dc0
      }
      else
      {
        ret = HAL_ERROR;
 800b68c:	2301      	movs	r3, #1
 800b68e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	2201      	movs	r2, #1
 800b696:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	2201      	movs	r2, #1
 800b69e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b6ae:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3730      	adds	r7, #48	@ 0x30
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b6bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6c8:	f003 0308 	and.w	r3, r3, #8
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d00a      	beq.n	800b6e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	430a      	orrs	r2, r1
 800b6e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ea:	f003 0301 	and.w	r3, r3, #1
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d00a      	beq.n	800b708 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	430a      	orrs	r2, r1
 800b706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b70c:	f003 0302 	and.w	r3, r3, #2
 800b710:	2b00      	cmp	r3, #0
 800b712:	d00a      	beq.n	800b72a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	430a      	orrs	r2, r1
 800b728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b72e:	f003 0304 	and.w	r3, r3, #4
 800b732:	2b00      	cmp	r3, #0
 800b734:	d00a      	beq.n	800b74c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	430a      	orrs	r2, r1
 800b74a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b750:	f003 0310 	and.w	r3, r3, #16
 800b754:	2b00      	cmp	r3, #0
 800b756:	d00a      	beq.n	800b76e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	430a      	orrs	r2, r1
 800b76c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b772:	f003 0320 	and.w	r3, r3, #32
 800b776:	2b00      	cmp	r3, #0
 800b778:	d00a      	beq.n	800b790 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	430a      	orrs	r2, r1
 800b78e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d01a      	beq.n	800b7d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	430a      	orrs	r2, r1
 800b7b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7ba:	d10a      	bne.n	800b7d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	430a      	orrs	r2, r1
 800b7d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00a      	beq.n	800b7f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	430a      	orrs	r2, r1
 800b7f2:	605a      	str	r2, [r3, #4]
  }
}
 800b7f4:	bf00      	nop
 800b7f6:	370c      	adds	r7, #12
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b098      	sub	sp, #96	@ 0x60
 800b804:	af02      	add	r7, sp, #8
 800b806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2200      	movs	r2, #0
 800b80c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b810:	f7f8 fc7a 	bl	8004108 <HAL_GetTick>
 800b814:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f003 0308 	and.w	r3, r3, #8
 800b820:	2b08      	cmp	r3, #8
 800b822:	d12f      	bne.n	800b884 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b824:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b82c:	2200      	movs	r2, #0
 800b82e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 f88e 	bl	800b954 <UART_WaitOnFlagUntilTimeout>
 800b838:	4603      	mov	r3, r0
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d022      	beq.n	800b884 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b846:	e853 3f00 	ldrex	r3, [r3]
 800b84a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b84c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b84e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b852:	653b      	str	r3, [r7, #80]	@ 0x50
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	461a      	mov	r2, r3
 800b85a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b85c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b85e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b860:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b862:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b864:	e841 2300 	strex	r3, r2, [r1]
 800b868:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b86a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d1e6      	bne.n	800b83e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2220      	movs	r2, #32
 800b874:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b880:	2303      	movs	r3, #3
 800b882:	e063      	b.n	800b94c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f003 0304 	and.w	r3, r3, #4
 800b88e:	2b04      	cmp	r3, #4
 800b890:	d149      	bne.n	800b926 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b892:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b89a:	2200      	movs	r2, #0
 800b89c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 f857 	bl	800b954 <UART_WaitOnFlagUntilTimeout>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d03c      	beq.n	800b926 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b4:	e853 3f00 	ldrex	r3, [r3]
 800b8b8:	623b      	str	r3, [r7, #32]
   return(result);
 800b8ba:	6a3b      	ldr	r3, [r7, #32]
 800b8bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8d2:	e841 2300 	strex	r3, r2, [r1]
 800b8d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b8d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1e6      	bne.n	800b8ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	3308      	adds	r3, #8
 800b8e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	e853 3f00 	ldrex	r3, [r3]
 800b8ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f023 0301 	bic.w	r3, r3, #1
 800b8f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	3308      	adds	r3, #8
 800b8fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8fe:	61fa      	str	r2, [r7, #28]
 800b900:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b902:	69b9      	ldr	r1, [r7, #24]
 800b904:	69fa      	ldr	r2, [r7, #28]
 800b906:	e841 2300 	strex	r3, r2, [r1]
 800b90a:	617b      	str	r3, [r7, #20]
   return(result);
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d1e5      	bne.n	800b8de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2220      	movs	r2, #32
 800b916:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b922:	2303      	movs	r3, #3
 800b924:	e012      	b.n	800b94c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2220      	movs	r2, #32
 800b92a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2220      	movs	r2, #32
 800b932:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2200      	movs	r2, #0
 800b940:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2200      	movs	r2, #0
 800b946:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b94a:	2300      	movs	r3, #0
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3758      	adds	r7, #88	@ 0x58
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	603b      	str	r3, [r7, #0]
 800b960:	4613      	mov	r3, r2
 800b962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b964:	e04f      	b.n	800ba06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b96c:	d04b      	beq.n	800ba06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b96e:	f7f8 fbcb 	bl	8004108 <HAL_GetTick>
 800b972:	4602      	mov	r2, r0
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	1ad3      	subs	r3, r2, r3
 800b978:	69ba      	ldr	r2, [r7, #24]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d302      	bcc.n	800b984 <UART_WaitOnFlagUntilTimeout+0x30>
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d101      	bne.n	800b988 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b984:	2303      	movs	r3, #3
 800b986:	e04e      	b.n	800ba26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f003 0304 	and.w	r3, r3, #4
 800b992:	2b00      	cmp	r3, #0
 800b994:	d037      	beq.n	800ba06 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	2b80      	cmp	r3, #128	@ 0x80
 800b99a:	d034      	beq.n	800ba06 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	2b40      	cmp	r3, #64	@ 0x40
 800b9a0:	d031      	beq.n	800ba06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	69db      	ldr	r3, [r3, #28]
 800b9a8:	f003 0308 	and.w	r3, r3, #8
 800b9ac:	2b08      	cmp	r3, #8
 800b9ae:	d110      	bne.n	800b9d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2208      	movs	r2, #8
 800b9b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b9b8:	68f8      	ldr	r0, [r7, #12]
 800b9ba:	f000 f838 	bl	800ba2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2208      	movs	r2, #8
 800b9c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e029      	b.n	800ba26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	69db      	ldr	r3, [r3, #28]
 800b9d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b9dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b9e0:	d111      	bne.n	800ba06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b9ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f000 f81e 	bl	800ba2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2220      	movs	r2, #32
 800b9f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ba02:	2303      	movs	r3, #3
 800ba04:	e00f      	b.n	800ba26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	69da      	ldr	r2, [r3, #28]
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	4013      	ands	r3, r2
 800ba10:	68ba      	ldr	r2, [r7, #8]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	bf0c      	ite	eq
 800ba16:	2301      	moveq	r3, #1
 800ba18:	2300      	movne	r3, #0
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	79fb      	ldrb	r3, [r7, #7]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d0a0      	beq.n	800b966 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba24:	2300      	movs	r3, #0
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba2e:	b480      	push	{r7}
 800ba30:	b095      	sub	sp, #84	@ 0x54
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba3e:	e853 3f00 	ldrex	r3, [r3]
 800ba42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ba44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	461a      	mov	r2, r3
 800ba52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba54:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba56:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba5c:	e841 2300 	strex	r3, r2, [r1]
 800ba60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d1e6      	bne.n	800ba36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	3308      	adds	r3, #8
 800ba6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba70:	6a3b      	ldr	r3, [r7, #32]
 800ba72:	e853 3f00 	ldrex	r3, [r3]
 800ba76:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba78:	69fb      	ldr	r3, [r7, #28]
 800ba7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba7e:	f023 0301 	bic.w	r3, r3, #1
 800ba82:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	3308      	adds	r3, #8
 800ba8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba94:	e841 2300 	strex	r3, r2, [r1]
 800ba98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d1e3      	bne.n	800ba68 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d118      	bne.n	800bada <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	e853 3f00 	ldrex	r3, [r3]
 800bab4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	f023 0310 	bic.w	r3, r3, #16
 800babc:	647b      	str	r3, [r7, #68]	@ 0x44
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	461a      	mov	r2, r3
 800bac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bac6:	61bb      	str	r3, [r7, #24]
 800bac8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baca:	6979      	ldr	r1, [r7, #20]
 800bacc:	69ba      	ldr	r2, [r7, #24]
 800bace:	e841 2300 	strex	r3, r2, [r1]
 800bad2:	613b      	str	r3, [r7, #16]
   return(result);
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d1e6      	bne.n	800baa8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2220      	movs	r2, #32
 800bade:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800baee:	bf00      	nop
 800baf0:	3754      	adds	r7, #84	@ 0x54
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr

0800bafa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bafa:	b480      	push	{r7}
 800bafc:	b085      	sub	sp, #20
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d101      	bne.n	800bb10 <HAL_UARTEx_DisableFifoMode+0x16>
 800bb0c:	2302      	movs	r3, #2
 800bb0e:	e027      	b.n	800bb60 <HAL_UARTEx_DisableFifoMode+0x66>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2201      	movs	r2, #1
 800bb14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2224      	movs	r2, #36	@ 0x24
 800bb1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	681a      	ldr	r2, [r3, #0]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f022 0201 	bic.w	r2, r2, #1
 800bb36:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bb3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2200      	movs	r2, #0
 800bb44:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2220      	movs	r2, #32
 800bb52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb5e:	2300      	movs	r3, #0
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3714      	adds	r7, #20
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr

0800bb6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d101      	bne.n	800bb84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb80:	2302      	movs	r3, #2
 800bb82:	e02d      	b.n	800bbe0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2224      	movs	r2, #36	@ 0x24
 800bb90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	681a      	ldr	r2, [r3, #0]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f022 0201 	bic.w	r2, r2, #1
 800bbaa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	689b      	ldr	r3, [r3, #8]
 800bbb2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	683a      	ldr	r2, [r7, #0]
 800bbbc:	430a      	orrs	r2, r1
 800bbbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 f84f 	bl	800bc64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	68fa      	ldr	r2, [r7, #12]
 800bbcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2220      	movs	r2, #32
 800bbd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbde:	2300      	movs	r3, #0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3710      	adds	r7, #16
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d101      	bne.n	800bc00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	e02d      	b.n	800bc5c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2224      	movs	r2, #36	@ 0x24
 800bc0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f022 0201 	bic.w	r2, r2, #1
 800bc26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	689b      	ldr	r3, [r3, #8]
 800bc2e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	683a      	ldr	r2, [r7, #0]
 800bc38:	430a      	orrs	r2, r1
 800bc3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 f811 	bl	800bc64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	68fa      	ldr	r2, [r7, #12]
 800bc48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2220      	movs	r2, #32
 800bc4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2200      	movs	r2, #0
 800bc56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3710      	adds	r7, #16
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d108      	bne.n	800bc86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc84:	e031      	b.n	800bcea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc86:	2308      	movs	r3, #8
 800bc88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc8a:	2308      	movs	r3, #8
 800bc8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	0e5b      	lsrs	r3, r3, #25
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	f003 0307 	and.w	r3, r3, #7
 800bc9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	0f5b      	lsrs	r3, r3, #29
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	f003 0307 	and.w	r3, r3, #7
 800bcac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcae:	7bbb      	ldrb	r3, [r7, #14]
 800bcb0:	7b3a      	ldrb	r2, [r7, #12]
 800bcb2:	4911      	ldr	r1, [pc, #68]	@ (800bcf8 <UARTEx_SetNbDataToProcess+0x94>)
 800bcb4:	5c8a      	ldrb	r2, [r1, r2]
 800bcb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bcba:	7b3a      	ldrb	r2, [r7, #12]
 800bcbc:	490f      	ldr	r1, [pc, #60]	@ (800bcfc <UARTEx_SetNbDataToProcess+0x98>)
 800bcbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcc0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcc4:	b29a      	uxth	r2, r3
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bccc:	7bfb      	ldrb	r3, [r7, #15]
 800bcce:	7b7a      	ldrb	r2, [r7, #13]
 800bcd0:	4909      	ldr	r1, [pc, #36]	@ (800bcf8 <UARTEx_SetNbDataToProcess+0x94>)
 800bcd2:	5c8a      	ldrb	r2, [r1, r2]
 800bcd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bcd8:	7b7a      	ldrb	r2, [r7, #13]
 800bcda:	4908      	ldr	r1, [pc, #32]	@ (800bcfc <UARTEx_SetNbDataToProcess+0x98>)
 800bcdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bcde:	fb93 f3f2 	sdiv	r3, r3, r2
 800bce2:	b29a      	uxth	r2, r3
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bcea:	bf00      	nop
 800bcec:	3714      	adds	r7, #20
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop
 800bcf8:	08016dd8 	.word	0x08016dd8
 800bcfc:	08016de0 	.word	0x08016de0

0800bd00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b085      	sub	sp, #20
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bd10:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bd14:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	b29a      	uxth	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bd20:	2300      	movs	r3, #0
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3714      	adds	r7, #20
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr

0800bd2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800bd2e:	b480      	push	{r7}
 800bd30:	b085      	sub	sp, #20
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bd36:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bd3a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800bd42:	b29a      	uxth	r2, r3
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	43db      	mvns	r3, r3
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	4013      	ands	r3, r2
 800bd4e:	b29a      	uxth	r2, r3
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bd56:	2300      	movs	r3, #0
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3714      	adds	r7, #20
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	1d3b      	adds	r3, r7, #4
 800bd6e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2201      	movs	r2, #1
 800bd76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2200      	movs	r2, #0
 800bd86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3714      	adds	r7, #20
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b09d      	sub	sp, #116	@ 0x74
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	009b      	lsls	r3, r3, #2
 800bdb8:	4413      	add	r3, r2
 800bdba:	881b      	ldrh	r3, [r3, #0]
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800bdc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bdc6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	78db      	ldrb	r3, [r3, #3]
 800bdce:	2b03      	cmp	r3, #3
 800bdd0:	d81f      	bhi.n	800be12 <USB_ActivateEndpoint+0x72>
 800bdd2:	a201      	add	r2, pc, #4	@ (adr r2, 800bdd8 <USB_ActivateEndpoint+0x38>)
 800bdd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd8:	0800bde9 	.word	0x0800bde9
 800bddc:	0800be05 	.word	0x0800be05
 800bde0:	0800be1b 	.word	0x0800be1b
 800bde4:	0800bdf7 	.word	0x0800bdf7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bde8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bdec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bdf0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bdf4:	e012      	b.n	800be1c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bdf6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bdfa:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800bdfe:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800be02:	e00b      	b.n	800be1c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800be04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800be08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800be0c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800be10:	e004      	b.n	800be1c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800be12:	2301      	movs	r3, #1
 800be14:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800be18:	e000      	b.n	800be1c <USB_ActivateEndpoint+0x7c>
      break;
 800be1a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	441a      	add	r2, r3
 800be26:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800be2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	4413      	add	r3, r2
 800be48:	881b      	ldrh	r3, [r3, #0]
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	b21b      	sxth	r3, r3
 800be4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be56:	b21a      	sxth	r2, r3
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	b21b      	sxth	r3, r3
 800be5e:	4313      	orrs	r3, r2
 800be60:	b21b      	sxth	r3, r3
 800be62:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	441a      	add	r2, r3
 800be70:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800be74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be84:	b29b      	uxth	r3, r3
 800be86:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	7b1b      	ldrb	r3, [r3, #12]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	f040 8178 	bne.w	800c182 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	785b      	ldrb	r3, [r3, #1]
 800be96:	2b00      	cmp	r3, #0
 800be98:	f000 8084 	beq.w	800bfa4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	61bb      	str	r3, [r7, #24]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	461a      	mov	r2, r3
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	4413      	add	r3, r2
 800beae:	61bb      	str	r3, [r7, #24]
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	00da      	lsls	r2, r3, #3
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	4413      	add	r3, r2
 800beba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bebe:	617b      	str	r3, [r7, #20]
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	88db      	ldrh	r3, [r3, #6]
 800bec4:	085b      	lsrs	r3, r3, #1
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	005b      	lsls	r3, r3, #1
 800beca:	b29a      	uxth	r2, r3
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	4413      	add	r3, r2
 800beda:	881b      	ldrh	r3, [r3, #0]
 800bedc:	827b      	strh	r3, [r7, #18]
 800bede:	8a7b      	ldrh	r3, [r7, #18]
 800bee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d01b      	beq.n	800bf20 <USB_ActivateEndpoint+0x180>
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	4413      	add	r3, r2
 800bef2:	881b      	ldrh	r3, [r3, #0]
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800befa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800befe:	823b      	strh	r3, [r7, #16]
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	441a      	add	r2, r3
 800bf0a:	8a3b      	ldrh	r3, [r7, #16]
 800bf0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf18:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	78db      	ldrb	r3, [r3, #3]
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d020      	beq.n	800bf6a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	4413      	add	r3, r2
 800bf32:	881b      	ldrh	r3, [r3, #0]
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf3e:	81bb      	strh	r3, [r7, #12]
 800bf40:	89bb      	ldrh	r3, [r7, #12]
 800bf42:	f083 0320 	eor.w	r3, r3, #32
 800bf46:	81bb      	strh	r3, [r7, #12]
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	009b      	lsls	r3, r3, #2
 800bf50:	441a      	add	r2, r3
 800bf52:	89bb      	ldrh	r3, [r7, #12]
 800bf54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	8013      	strh	r3, [r2, #0]
 800bf68:	e2d5      	b.n	800c516 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	4413      	add	r3, r2
 800bf74:	881b      	ldrh	r3, [r3, #0]
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf80:	81fb      	strh	r3, [r7, #14]
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	009b      	lsls	r3, r3, #2
 800bf8a:	441a      	add	r2, r3
 800bf8c:	89fb      	ldrh	r3, [r7, #14]
 800bf8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf9e:	b29b      	uxth	r3, r3
 800bfa0:	8013      	strh	r3, [r2, #0]
 800bfa2:	e2b8      	b.n	800c516 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb4:	4413      	add	r3, r2
 800bfb6:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	00da      	lsls	r2, r3, #3
 800bfbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfc0:	4413      	add	r3, r2
 800bfc2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bfc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	88db      	ldrh	r3, [r3, #6]
 800bfcc:	085b      	lsrs	r3, r3, #1
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	005b      	lsls	r3, r3, #1
 800bfd2:	b29a      	uxth	r2, r3
 800bfd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfd6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe8:	4413      	add	r3, r2
 800bfea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	00da      	lsls	r2, r3, #3
 800bff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff4:	4413      	add	r3, r2
 800bff6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bffa:	627b      	str	r3, [r7, #36]	@ 0x24
 800bffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bffe:	881b      	ldrh	r3, [r3, #0]
 800c000:	b29b      	uxth	r3, r3
 800c002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c006:	b29a      	uxth	r2, r3
 800c008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c00a:	801a      	strh	r2, [r3, #0]
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	691b      	ldr	r3, [r3, #16]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d10a      	bne.n	800c02a <USB_ActivateEndpoint+0x28a>
 800c014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c016:	881b      	ldrh	r3, [r3, #0]
 800c018:	b29b      	uxth	r3, r3
 800c01a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c01e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c022:	b29a      	uxth	r2, r3
 800c024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c026:	801a      	strh	r2, [r3, #0]
 800c028:	e039      	b.n	800c09e <USB_ActivateEndpoint+0x2fe>
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	691b      	ldr	r3, [r3, #16]
 800c02e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c030:	d818      	bhi.n	800c064 <USB_ActivateEndpoint+0x2c4>
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	691b      	ldr	r3, [r3, #16]
 800c036:	085b      	lsrs	r3, r3, #1
 800c038:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	691b      	ldr	r3, [r3, #16]
 800c03e:	f003 0301 	and.w	r3, r3, #1
 800c042:	2b00      	cmp	r3, #0
 800c044:	d002      	beq.n	800c04c <USB_ActivateEndpoint+0x2ac>
 800c046:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c048:	3301      	adds	r3, #1
 800c04a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c04e:	881b      	ldrh	r3, [r3, #0]
 800c050:	b29a      	uxth	r2, r3
 800c052:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c054:	b29b      	uxth	r3, r3
 800c056:	029b      	lsls	r3, r3, #10
 800c058:	b29b      	uxth	r3, r3
 800c05a:	4313      	orrs	r3, r2
 800c05c:	b29a      	uxth	r2, r3
 800c05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c060:	801a      	strh	r2, [r3, #0]
 800c062:	e01c      	b.n	800c09e <USB_ActivateEndpoint+0x2fe>
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	691b      	ldr	r3, [r3, #16]
 800c068:	095b      	lsrs	r3, r3, #5
 800c06a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	691b      	ldr	r3, [r3, #16]
 800c070:	f003 031f 	and.w	r3, r3, #31
 800c074:	2b00      	cmp	r3, #0
 800c076:	d102      	bne.n	800c07e <USB_ActivateEndpoint+0x2de>
 800c078:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c07a:	3b01      	subs	r3, #1
 800c07c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c080:	881b      	ldrh	r3, [r3, #0]
 800c082:	b29a      	uxth	r2, r3
 800c084:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c086:	b29b      	uxth	r3, r3
 800c088:	029b      	lsls	r3, r3, #10
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	4313      	orrs	r3, r2
 800c08e:	b29b      	uxth	r3, r3
 800c090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c098:	b29a      	uxth	r2, r3
 800c09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c09c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	4413      	add	r3, r2
 800c0a8:	881b      	ldrh	r3, [r3, #0]
 800c0aa:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c0ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c0ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d01b      	beq.n	800c0ee <USB_ActivateEndpoint+0x34e>
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	4413      	add	r3, r2
 800c0c0:	881b      	ldrh	r3, [r3, #0]
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0cc:	843b      	strh	r3, [r7, #32]
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	009b      	lsls	r3, r3, #2
 800c0d6:	441a      	add	r2, r3
 800c0d8:	8c3b      	ldrh	r3, [r7, #32]
 800c0da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c0e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d124      	bne.n	800c140 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	4413      	add	r3, r2
 800c100:	881b      	ldrh	r3, [r3, #0]
 800c102:	b29b      	uxth	r3, r3
 800c104:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c108:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c10c:	83bb      	strh	r3, [r7, #28]
 800c10e:	8bbb      	ldrh	r3, [r7, #28]
 800c110:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c114:	83bb      	strh	r3, [r7, #28]
 800c116:	8bbb      	ldrh	r3, [r7, #28]
 800c118:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c11c:	83bb      	strh	r3, [r7, #28]
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	441a      	add	r2, r3
 800c128:	8bbb      	ldrh	r3, [r7, #28]
 800c12a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c12e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	8013      	strh	r3, [r2, #0]
 800c13e:	e1ea      	b.n	800c516 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	4413      	add	r3, r2
 800c14a:	881b      	ldrh	r3, [r3, #0]
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c156:	83fb      	strh	r3, [r7, #30]
 800c158:	8bfb      	ldrh	r3, [r7, #30]
 800c15a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c15e:	83fb      	strh	r3, [r7, #30]
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	441a      	add	r2, r3
 800c16a:	8bfb      	ldrh	r3, [r7, #30]
 800c16c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c170:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c174:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c178:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c17c:	b29b      	uxth	r3, r3
 800c17e:	8013      	strh	r3, [r2, #0]
 800c180:	e1c9      	b.n	800c516 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	78db      	ldrb	r3, [r3, #3]
 800c186:	2b02      	cmp	r3, #2
 800c188:	d11e      	bne.n	800c1c8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4413      	add	r3, r2
 800c194:	881b      	ldrh	r3, [r3, #0]
 800c196:	b29b      	uxth	r3, r3
 800c198:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c19c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1a0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	441a      	add	r2, r3
 800c1ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c1b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1ba:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c1be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1c2:	b29b      	uxth	r3, r3
 800c1c4:	8013      	strh	r3, [r2, #0]
 800c1c6:	e01d      	b.n	800c204 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	4413      	add	r3, r2
 800c1d2:	881b      	ldrh	r3, [r3, #0]
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c1da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1de:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	441a      	add	r2, r3
 800c1ec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c1f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c200:	b29b      	uxth	r3, r3
 800c202:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c20e:	b29b      	uxth	r3, r3
 800c210:	461a      	mov	r2, r3
 800c212:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c214:	4413      	add	r3, r2
 800c216:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	00da      	lsls	r2, r3, #3
 800c21e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c220:	4413      	add	r3, r2
 800c222:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c226:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	891b      	ldrh	r3, [r3, #8]
 800c22c:	085b      	lsrs	r3, r3, #1
 800c22e:	b29b      	uxth	r3, r3
 800c230:	005b      	lsls	r3, r3, #1
 800c232:	b29a      	uxth	r2, r3
 800c234:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c236:	801a      	strh	r2, [r3, #0]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c242:	b29b      	uxth	r3, r3
 800c244:	461a      	mov	r2, r3
 800c246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c248:	4413      	add	r3, r2
 800c24a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	00da      	lsls	r2, r3, #3
 800c252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c254:	4413      	add	r3, r2
 800c256:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c25a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	895b      	ldrh	r3, [r3, #10]
 800c260:	085b      	lsrs	r3, r3, #1
 800c262:	b29b      	uxth	r3, r3
 800c264:	005b      	lsls	r3, r3, #1
 800c266:	b29a      	uxth	r2, r3
 800c268:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c26a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	785b      	ldrb	r3, [r3, #1]
 800c270:	2b00      	cmp	r3, #0
 800c272:	f040 8093 	bne.w	800c39c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	4413      	add	r3, r2
 800c280:	881b      	ldrh	r3, [r3, #0]
 800c282:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c286:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c28a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d01b      	beq.n	800c2ca <USB_ActivateEndpoint+0x52a>
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	4413      	add	r3, r2
 800c29c:	881b      	ldrh	r3, [r3, #0]
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	441a      	add	r2, r3
 800c2b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c2b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c2c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	4413      	add	r3, r2
 800c2d4:	881b      	ldrh	r3, [r3, #0]
 800c2d6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c2d8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c2da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d01b      	beq.n	800c31a <USB_ActivateEndpoint+0x57a>
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	4413      	add	r3, r2
 800c2ec:	881b      	ldrh	r3, [r3, #0]
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2f8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	441a      	add	r2, r3
 800c304:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c306:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c30a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c30e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c312:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c316:	b29b      	uxth	r3, r3
 800c318:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	4413      	add	r3, r2
 800c324:	881b      	ldrh	r3, [r3, #0]
 800c326:	b29b      	uxth	r3, r3
 800c328:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c32c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c330:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c332:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c334:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c338:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c33a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c33c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c340:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	441a      	add	r2, r3
 800c34c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c34e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c352:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c35a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c35e:	b29b      	uxth	r3, r3
 800c360:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	4413      	add	r3, r2
 800c36c:	881b      	ldrh	r3, [r3, #0]
 800c36e:	b29b      	uxth	r3, r3
 800c370:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c374:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c378:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	441a      	add	r2, r3
 800c384:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c386:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c38a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c38e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c396:	b29b      	uxth	r3, r3
 800c398:	8013      	strh	r3, [r2, #0]
 800c39a:	e0bc      	b.n	800c516 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	4413      	add	r3, r2
 800c3a6:	881b      	ldrh	r3, [r3, #0]
 800c3a8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800c3ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c3b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d01d      	beq.n	800c3f4 <USB_ActivateEndpoint+0x654>
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	009b      	lsls	r3, r3, #2
 800c3c0:	4413      	add	r3, r2
 800c3c2:	881b      	ldrh	r3, [r3, #0]
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c3ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3ce:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	441a      	add	r2, r3
 800c3dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800c3e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c3ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	4413      	add	r3, r2
 800c3fe:	881b      	ldrh	r3, [r3, #0]
 800c400:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800c404:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d01d      	beq.n	800c44c <USB_ActivateEndpoint+0x6ac>
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	4413      	add	r3, r2
 800c41a:	881b      	ldrh	r3, [r3, #0]
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c426:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	441a      	add	r2, r3
 800c434:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800c438:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c43c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c440:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c444:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c448:	b29b      	uxth	r3, r3
 800c44a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	78db      	ldrb	r3, [r3, #3]
 800c450:	2b01      	cmp	r3, #1
 800c452:	d024      	beq.n	800c49e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	4413      	add	r3, r2
 800c45e:	881b      	ldrh	r3, [r3, #0]
 800c460:	b29b      	uxth	r3, r3
 800c462:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c466:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c46a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c46e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c472:	f083 0320 	eor.w	r3, r3, #32
 800c476:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	781b      	ldrb	r3, [r3, #0]
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	441a      	add	r2, r3
 800c484:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c488:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c48c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c490:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c498:	b29b      	uxth	r3, r3
 800c49a:	8013      	strh	r3, [r2, #0]
 800c49c:	e01d      	b.n	800c4da <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	4413      	add	r3, r2
 800c4a8:	881b      	ldrh	r3, [r3, #0]
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4b4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	441a      	add	r2, r3
 800c4c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c4c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	4413      	add	r3, r2
 800c4e4:	881b      	ldrh	r3, [r3, #0]
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c4ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4f0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	441a      	add	r2, r3
 800c4fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c502:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c506:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c50a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c50e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c512:	b29b      	uxth	r3, r3
 800c514:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c516:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3774      	adds	r7, #116	@ 0x74
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr
 800c526:	bf00      	nop

0800c528 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c528:	b480      	push	{r7}
 800c52a:	b08d      	sub	sp, #52	@ 0x34
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	7b1b      	ldrb	r3, [r3, #12]
 800c536:	2b00      	cmp	r3, #0
 800c538:	f040 808e 	bne.w	800c658 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	785b      	ldrb	r3, [r3, #1]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d044      	beq.n	800c5ce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	009b      	lsls	r3, r3, #2
 800c54c:	4413      	add	r3, r2
 800c54e:	881b      	ldrh	r3, [r3, #0]
 800c550:	81bb      	strh	r3, [r7, #12]
 800c552:	89bb      	ldrh	r3, [r7, #12]
 800c554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d01b      	beq.n	800c594 <USB_DeactivateEndpoint+0x6c>
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	4413      	add	r3, r2
 800c566:	881b      	ldrh	r3, [r3, #0]
 800c568:	b29b      	uxth	r3, r3
 800c56a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c56e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c572:	817b      	strh	r3, [r7, #10]
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	441a      	add	r2, r3
 800c57e:	897b      	ldrh	r3, [r7, #10]
 800c580:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c584:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c588:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c58c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c590:	b29b      	uxth	r3, r3
 800c592:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	009b      	lsls	r3, r3, #2
 800c59c:	4413      	add	r3, r2
 800c59e:	881b      	ldrh	r3, [r3, #0]
 800c5a0:	b29b      	uxth	r3, r3
 800c5a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5aa:	813b      	strh	r3, [r7, #8]
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	441a      	add	r2, r3
 800c5b6:	893b      	ldrh	r3, [r7, #8]
 800c5b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	8013      	strh	r3, [r2, #0]
 800c5cc:	e192      	b.n	800c8f4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	4413      	add	r3, r2
 800c5d8:	881b      	ldrh	r3, [r3, #0]
 800c5da:	827b      	strh	r3, [r7, #18]
 800c5dc:	8a7b      	ldrh	r3, [r7, #18]
 800c5de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d01b      	beq.n	800c61e <USB_DeactivateEndpoint+0xf6>
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	009b      	lsls	r3, r3, #2
 800c5ee:	4413      	add	r3, r2
 800c5f0:	881b      	ldrh	r3, [r3, #0]
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5fc:	823b      	strh	r3, [r7, #16]
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	441a      	add	r2, r3
 800c608:	8a3b      	ldrh	r3, [r7, #16]
 800c60a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c60e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c612:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	4413      	add	r3, r2
 800c628:	881b      	ldrh	r3, [r3, #0]
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c630:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c634:	81fb      	strh	r3, [r7, #14]
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	009b      	lsls	r3, r3, #2
 800c63e:	441a      	add	r2, r3
 800c640:	89fb      	ldrh	r3, [r7, #14]
 800c642:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c646:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c64a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c64e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c652:	b29b      	uxth	r3, r3
 800c654:	8013      	strh	r3, [r2, #0]
 800c656:	e14d      	b.n	800c8f4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	785b      	ldrb	r3, [r3, #1]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	f040 80a5 	bne.w	800c7ac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	4413      	add	r3, r2
 800c66c:	881b      	ldrh	r3, [r3, #0]
 800c66e:	843b      	strh	r3, [r7, #32]
 800c670:	8c3b      	ldrh	r3, [r7, #32]
 800c672:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c676:	2b00      	cmp	r3, #0
 800c678:	d01b      	beq.n	800c6b2 <USB_DeactivateEndpoint+0x18a>
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	4413      	add	r3, r2
 800c684:	881b      	ldrh	r3, [r3, #0]
 800c686:	b29b      	uxth	r3, r3
 800c688:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c68c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c690:	83fb      	strh	r3, [r7, #30]
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	009b      	lsls	r3, r3, #2
 800c69a:	441a      	add	r2, r3
 800c69c:	8bfb      	ldrh	r3, [r7, #30]
 800c69e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c6aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	4413      	add	r3, r2
 800c6bc:	881b      	ldrh	r3, [r3, #0]
 800c6be:	83bb      	strh	r3, [r7, #28]
 800c6c0:	8bbb      	ldrh	r3, [r7, #28]
 800c6c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d01b      	beq.n	800c702 <USB_DeactivateEndpoint+0x1da>
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	4413      	add	r3, r2
 800c6d4:	881b      	ldrh	r3, [r3, #0]
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6e0:	837b      	strh	r3, [r7, #26]
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	441a      	add	r2, r3
 800c6ec:	8b7b      	ldrh	r3, [r7, #26]
 800c6ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c702:	687a      	ldr	r2, [r7, #4]
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	009b      	lsls	r3, r3, #2
 800c70a:	4413      	add	r3, r2
 800c70c:	881b      	ldrh	r3, [r3, #0]
 800c70e:	b29b      	uxth	r3, r3
 800c710:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c718:	833b      	strh	r3, [r7, #24]
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	009b      	lsls	r3, r3, #2
 800c722:	441a      	add	r2, r3
 800c724:	8b3b      	ldrh	r3, [r7, #24]
 800c726:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c72a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c72e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c732:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c736:	b29b      	uxth	r3, r3
 800c738:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	4413      	add	r3, r2
 800c744:	881b      	ldrh	r3, [r3, #0]
 800c746:	b29b      	uxth	r3, r3
 800c748:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c74c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c750:	82fb      	strh	r3, [r7, #22]
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	009b      	lsls	r3, r3, #2
 800c75a:	441a      	add	r2, r3
 800c75c:	8afb      	ldrh	r3, [r7, #22]
 800c75e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c762:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c76a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c76e:	b29b      	uxth	r3, r3
 800c770:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	4413      	add	r3, r2
 800c77c:	881b      	ldrh	r3, [r3, #0]
 800c77e:	b29b      	uxth	r3, r3
 800c780:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c784:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c788:	82bb      	strh	r3, [r7, #20]
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	441a      	add	r2, r3
 800c794:	8abb      	ldrh	r3, [r7, #20]
 800c796:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c79a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c79e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	8013      	strh	r3, [r2, #0]
 800c7aa:	e0a3      	b.n	800c8f4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	009b      	lsls	r3, r3, #2
 800c7b4:	4413      	add	r3, r2
 800c7b6:	881b      	ldrh	r3, [r3, #0]
 800c7b8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c7ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c7bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d01b      	beq.n	800c7fc <USB_DeactivateEndpoint+0x2d4>
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	4413      	add	r3, r2
 800c7ce:	881b      	ldrh	r3, [r3, #0]
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7da:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	009b      	lsls	r3, r3, #2
 800c7e4:	441a      	add	r2, r3
 800c7e6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c7e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c7f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	009b      	lsls	r3, r3, #2
 800c804:	4413      	add	r3, r2
 800c806:	881b      	ldrh	r3, [r3, #0]
 800c808:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800c80a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c80c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c810:	2b00      	cmp	r3, #0
 800c812:	d01b      	beq.n	800c84c <USB_DeactivateEndpoint+0x324>
 800c814:	687a      	ldr	r2, [r7, #4]
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	009b      	lsls	r3, r3, #2
 800c81c:	4413      	add	r3, r2
 800c81e:	881b      	ldrh	r3, [r3, #0]
 800c820:	b29b      	uxth	r3, r3
 800c822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c82a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c82c:	687a      	ldr	r2, [r7, #4]
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	441a      	add	r2, r3
 800c836:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c838:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c83c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c840:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c844:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c848:	b29b      	uxth	r3, r3
 800c84a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	009b      	lsls	r3, r3, #2
 800c854:	4413      	add	r3, r2
 800c856:	881b      	ldrh	r3, [r3, #0]
 800c858:	b29b      	uxth	r3, r3
 800c85a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c85e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c862:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	441a      	add	r2, r3
 800c86e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c870:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c874:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c878:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c87c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c880:	b29b      	uxth	r3, r3
 800c882:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	009b      	lsls	r3, r3, #2
 800c88c:	4413      	add	r3, r2
 800c88e:	881b      	ldrh	r3, [r3, #0]
 800c890:	b29b      	uxth	r3, r3
 800c892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c896:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c89a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	009b      	lsls	r3, r3, #2
 800c8a4:	441a      	add	r2, r3
 800c8a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	4413      	add	r3, r2
 800c8c6:	881b      	ldrh	r3, [r3, #0]
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c8ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8d2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	009b      	lsls	r3, r3, #2
 800c8dc:	441a      	add	r2, r3
 800c8de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c8e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c8f4:	2300      	movs	r3, #0
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3734      	adds	r7, #52	@ 0x34
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr

0800c902 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c902:	b580      	push	{r7, lr}
 800c904:	b0c2      	sub	sp, #264	@ 0x108
 800c906:	af00      	add	r7, sp, #0
 800c908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c90c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c910:	6018      	str	r0, [r3, #0]
 800c912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c916:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c91a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c91c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	785b      	ldrb	r3, [r3, #1]
 800c928:	2b01      	cmp	r3, #1
 800c92a:	f040 86b7 	bne.w	800d69c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c92e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	699a      	ldr	r2, [r3, #24]
 800c93a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c93e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	691b      	ldr	r3, [r3, #16]
 800c946:	429a      	cmp	r2, r3
 800c948:	d908      	bls.n	800c95c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800c94a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c94e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	691b      	ldr	r3, [r3, #16]
 800c956:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800c95a:	e007      	b.n	800c96c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800c95c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	699b      	ldr	r3, [r3, #24]
 800c968:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c96c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c970:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	7b1b      	ldrb	r3, [r3, #12]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d13a      	bne.n	800c9f2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c97c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	6959      	ldr	r1, [r3, #20]
 800c988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c98c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	88da      	ldrh	r2, [r3, #6]
 800c994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c998:	b29b      	uxth	r3, r3
 800c99a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c99e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c9a2:	6800      	ldr	r0, [r0, #0]
 800c9a4:	f001 fc99 	bl	800e2da <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c9a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	613b      	str	r3, [r7, #16]
 800c9b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	4413      	add	r3, r2
 800c9ca:	613b      	str	r3, [r7, #16]
 800c9cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	00da      	lsls	r2, r3, #3
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	4413      	add	r3, r2
 800c9de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c9e2:	60fb      	str	r3, [r7, #12]
 800c9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9e8:	b29a      	uxth	r2, r3
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	801a      	strh	r2, [r3, #0]
 800c9ee:	f000 be1f 	b.w	800d630 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c9f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	78db      	ldrb	r3, [r3, #3]
 800c9fe:	2b02      	cmp	r3, #2
 800ca00:	f040 8462 	bne.w	800d2c8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ca04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	6a1a      	ldr	r2, [r3, #32]
 800ca10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	691b      	ldr	r3, [r3, #16]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	f240 83df 	bls.w	800d1e0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ca22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	009b      	lsls	r3, r3, #2
 800ca3a:	4413      	add	r3, r2
 800ca3c:	881b      	ldrh	r3, [r3, #0]
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca48:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ca4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca54:	681a      	ldr	r2, [r3, #0]
 800ca56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	441a      	add	r2, r3
 800ca66:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ca6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca72:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ca76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ca7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	6a1a      	ldr	r2, [r3, #32]
 800ca8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca8e:	1ad2      	subs	r2, r2, r3
 800ca90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ca9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caa0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	4413      	add	r3, r2
 800cab6:	881b      	ldrh	r3, [r3, #0]
 800cab8:	b29b      	uxth	r3, r3
 800caba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	f000 81c7 	beq.w	800ce52 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cac8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	633b      	str	r3, [r7, #48]	@ 0x30
 800cad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	785b      	ldrb	r3, [r3, #1]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d177      	bne.n	800cbd0 <USB_EPStartXfer+0x2ce>
 800cae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cae4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800caec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	461a      	mov	r2, r3
 800cafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb00:	4413      	add	r3, r2
 800cb02:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cb04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	00da      	lsls	r2, r3, #3
 800cb12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb14:	4413      	add	r3, r2
 800cb16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cb1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb1e:	881b      	ldrh	r3, [r3, #0]
 800cb20:	b29b      	uxth	r3, r3
 800cb22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb26:	b29a      	uxth	r2, r3
 800cb28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2a:	801a      	strh	r2, [r3, #0]
 800cb2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d10a      	bne.n	800cb4a <USB_EPStartXfer+0x248>
 800cb34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb36:	881b      	ldrh	r3, [r3, #0]
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb42:	b29a      	uxth	r2, r3
 800cb44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb46:	801a      	strh	r2, [r3, #0]
 800cb48:	e067      	b.n	800cc1a <USB_EPStartXfer+0x318>
 800cb4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb4e:	2b3e      	cmp	r3, #62	@ 0x3e
 800cb50:	d81c      	bhi.n	800cb8c <USB_EPStartXfer+0x28a>
 800cb52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb56:	085b      	lsrs	r3, r3, #1
 800cb58:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cb5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb60:	f003 0301 	and.w	r3, r3, #1
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d004      	beq.n	800cb72 <USB_EPStartXfer+0x270>
 800cb68:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cb72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb74:	881b      	ldrh	r3, [r3, #0]
 800cb76:	b29a      	uxth	r2, r3
 800cb78:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	029b      	lsls	r3, r3, #10
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	4313      	orrs	r3, r2
 800cb84:	b29a      	uxth	r2, r3
 800cb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb88:	801a      	strh	r2, [r3, #0]
 800cb8a:	e046      	b.n	800cc1a <USB_EPStartXfer+0x318>
 800cb8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb90:	095b      	lsrs	r3, r3, #5
 800cb92:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cb96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb9a:	f003 031f 	and.w	r3, r3, #31
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d104      	bne.n	800cbac <USB_EPStartXfer+0x2aa>
 800cba2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cba6:	3b01      	subs	r3, #1
 800cba8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbae:	881b      	ldrh	r3, [r3, #0]
 800cbb0:	b29a      	uxth	r2, r3
 800cbb2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	029b      	lsls	r3, r3, #10
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbc8:	b29a      	uxth	r2, r3
 800cbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbcc:	801a      	strh	r2, [r3, #0]
 800cbce:	e024      	b.n	800cc1a <USB_EPStartXfer+0x318>
 800cbd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	785b      	ldrb	r3, [r3, #1]
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	d11c      	bne.n	800cc1a <USB_EPStartXfer+0x318>
 800cbe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbe4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf4:	4413      	add	r3, r2
 800cbf6:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	00da      	lsls	r2, r3, #3
 800cc06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc08:	4413      	add	r3, r2
 800cc0a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cc0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc18:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cc1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	895b      	ldrh	r3, [r3, #10]
 800cc26:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cc2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	6959      	ldr	r1, [r3, #20]
 800cc36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc3a:	b29b      	uxth	r3, r3
 800cc3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cc40:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cc44:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cc48:	6800      	ldr	r0, [r0, #0]
 800cc4a:	f001 fb46 	bl	800e2da <USB_WritePMA>
            ep->xfer_buff += len;
 800cc4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	695a      	ldr	r2, [r3, #20]
 800cc5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc5e:	441a      	add	r2, r3
 800cc60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cc6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	6a1a      	ldr	r2, [r3, #32]
 800cc78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	691b      	ldr	r3, [r3, #16]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d90f      	bls.n	800cca8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800cc88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	6a1a      	ldr	r2, [r3, #32]
 800cc94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc98:	1ad2      	subs	r2, r2, r3
 800cc9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	621a      	str	r2, [r3, #32]
 800cca6:	e00e      	b.n	800ccc6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800cca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	6a1b      	ldr	r3, [r3, #32]
 800ccb4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800ccb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ccc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	785b      	ldrb	r3, [r3, #1]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d177      	bne.n	800cdc6 <USB_EPStartXfer+0x4c4>
 800ccd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	61bb      	str	r3, [r7, #24]
 800cce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cce6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	69bb      	ldr	r3, [r7, #24]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	61bb      	str	r3, [r7, #24]
 800ccfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	00da      	lsls	r2, r3, #3
 800cd08:	69bb      	ldr	r3, [r7, #24]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd10:	617b      	str	r3, [r7, #20]
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	881b      	ldrh	r3, [r3, #0]
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	801a      	strh	r2, [r3, #0]
 800cd22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d10a      	bne.n	800cd40 <USB_EPStartXfer+0x43e>
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	881b      	ldrh	r3, [r3, #0]
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd38:	b29a      	uxth	r2, r3
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	801a      	strh	r2, [r3, #0]
 800cd3e:	e06d      	b.n	800ce1c <USB_EPStartXfer+0x51a>
 800cd40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd44:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd46:	d81c      	bhi.n	800cd82 <USB_EPStartXfer+0x480>
 800cd48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd4c:	085b      	lsrs	r3, r3, #1
 800cd4e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cd52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd56:	f003 0301 	and.w	r3, r3, #1
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d004      	beq.n	800cd68 <USB_EPStartXfer+0x466>
 800cd5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cd62:	3301      	adds	r3, #1
 800cd64:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	881b      	ldrh	r3, [r3, #0]
 800cd6c:	b29a      	uxth	r2, r3
 800cd6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	029b      	lsls	r3, r3, #10
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	801a      	strh	r2, [r3, #0]
 800cd80:	e04c      	b.n	800ce1c <USB_EPStartXfer+0x51a>
 800cd82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd86:	095b      	lsrs	r3, r3, #5
 800cd88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cd8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd90:	f003 031f 	and.w	r3, r3, #31
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d104      	bne.n	800cda2 <USB_EPStartXfer+0x4a0>
 800cd98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cd9c:	3b01      	subs	r3, #1
 800cd9e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	881b      	ldrh	r3, [r3, #0]
 800cda6:	b29a      	uxth	r2, r3
 800cda8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	029b      	lsls	r3, r3, #10
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdbe:	b29a      	uxth	r2, r3
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	801a      	strh	r2, [r3, #0]
 800cdc4:	e02a      	b.n	800ce1c <USB_EPStartXfer+0x51a>
 800cdc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	785b      	ldrb	r3, [r3, #1]
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d122      	bne.n	800ce1c <USB_EPStartXfer+0x51a>
 800cdd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	623b      	str	r3, [r7, #32]
 800cde2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cde6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cdf0:	b29b      	uxth	r3, r3
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	6a3b      	ldr	r3, [r7, #32]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	623b      	str	r3, [r7, #32]
 800cdfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	00da      	lsls	r2, r3, #3
 800ce08:	6a3b      	ldr	r3, [r7, #32]
 800ce0a:	4413      	add	r3, r2
 800ce0c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ce10:	61fb      	str	r3, [r7, #28]
 800ce12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce16:	b29a      	uxth	r2, r3
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ce1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	891b      	ldrh	r3, [r3, #8]
 800ce28:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ce2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	6959      	ldr	r1, [r3, #20]
 800ce38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ce42:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ce46:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ce4a:	6800      	ldr	r0, [r0, #0]
 800ce4c:	f001 fa45 	bl	800e2da <USB_WritePMA>
 800ce50:	e3ee      	b.n	800d630 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ce52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	785b      	ldrb	r3, [r3, #1]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d177      	bne.n	800cf52 <USB_EPStartXfer+0x650>
 800ce62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	461a      	mov	r2, r3
 800ce80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce82:	4413      	add	r3, r2
 800ce84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	00da      	lsls	r2, r3, #3
 800ce94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce96:	4413      	add	r3, r2
 800ce98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ce9c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cea0:	881b      	ldrh	r3, [r3, #0]
 800cea2:	b29b      	uxth	r3, r3
 800cea4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cea8:	b29a      	uxth	r2, r3
 800ceaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ceac:	801a      	strh	r2, [r3, #0]
 800ceae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d10a      	bne.n	800cecc <USB_EPStartXfer+0x5ca>
 800ceb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ceb8:	881b      	ldrh	r3, [r3, #0]
 800ceba:	b29b      	uxth	r3, r3
 800cebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cec4:	b29a      	uxth	r2, r3
 800cec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cec8:	801a      	strh	r2, [r3, #0]
 800ceca:	e06d      	b.n	800cfa8 <USB_EPStartXfer+0x6a6>
 800cecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ced0:	2b3e      	cmp	r3, #62	@ 0x3e
 800ced2:	d81c      	bhi.n	800cf0e <USB_EPStartXfer+0x60c>
 800ced4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ced8:	085b      	lsrs	r3, r3, #1
 800ceda:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cee2:	f003 0301 	and.w	r3, r3, #1
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d004      	beq.n	800cef4 <USB_EPStartXfer+0x5f2>
 800ceea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ceee:	3301      	adds	r3, #1
 800cef0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cef4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cef6:	881b      	ldrh	r3, [r3, #0]
 800cef8:	b29a      	uxth	r2, r3
 800cefa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	029b      	lsls	r3, r3, #10
 800cf02:	b29b      	uxth	r3, r3
 800cf04:	4313      	orrs	r3, r2
 800cf06:	b29a      	uxth	r2, r3
 800cf08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf0a:	801a      	strh	r2, [r3, #0]
 800cf0c:	e04c      	b.n	800cfa8 <USB_EPStartXfer+0x6a6>
 800cf0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf12:	095b      	lsrs	r3, r3, #5
 800cf14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cf18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf1c:	f003 031f 	and.w	r3, r3, #31
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d104      	bne.n	800cf2e <USB_EPStartXfer+0x62c>
 800cf24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cf28:	3b01      	subs	r3, #1
 800cf2a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cf2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf30:	881b      	ldrh	r3, [r3, #0]
 800cf32:	b29a      	uxth	r2, r3
 800cf34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cf38:	b29b      	uxth	r3, r3
 800cf3a:	029b      	lsls	r3, r3, #10
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf4a:	b29a      	uxth	r2, r3
 800cf4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf4e:	801a      	strh	r2, [r3, #0]
 800cf50:	e02a      	b.n	800cfa8 <USB_EPStartXfer+0x6a6>
 800cf52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	785b      	ldrb	r3, [r3, #1]
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d122      	bne.n	800cfa8 <USB_EPStartXfer+0x6a6>
 800cf62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf7c:	b29b      	uxth	r3, r3
 800cf7e:	461a      	mov	r2, r3
 800cf80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf82:	4413      	add	r3, r2
 800cf84:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	00da      	lsls	r2, r3, #3
 800cf94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf96:	4413      	add	r3, r2
 800cf98:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cf9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfa2:	b29a      	uxth	r2, r3
 800cfa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfa6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cfa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	891b      	ldrh	r3, [r3, #8]
 800cfb4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cfb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	6959      	ldr	r1, [r3, #20]
 800cfc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cfce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cfd2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cfd6:	6800      	ldr	r0, [r0, #0]
 800cfd8:	f001 f97f 	bl	800e2da <USB_WritePMA>
            ep->xfer_buff += len;
 800cfdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	695a      	ldr	r2, [r3, #20]
 800cfe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfec:	441a      	add	r2, r3
 800cfee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	6a1a      	ldr	r2, [r3, #32]
 800d006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d00a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	691b      	ldr	r3, [r3, #16]
 800d012:	429a      	cmp	r2, r3
 800d014:	d90f      	bls.n	800d036 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d01a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	6a1a      	ldr	r2, [r3, #32]
 800d022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d026:	1ad2      	subs	r2, r2, r3
 800d028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d02c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	621a      	str	r2, [r3, #32]
 800d034:	e00e      	b.n	800d054 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d03a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	6a1b      	ldr	r3, [r3, #32]
 800d042:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d04a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	2200      	movs	r2, #0
 800d052:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d058:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	785b      	ldrb	r3, [r3, #1]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d177      	bne.n	800d160 <USB_EPStartXfer+0x85e>
 800d070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d074:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d07c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d080:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	461a      	mov	r2, r3
 800d08e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d090:	4413      	add	r3, r2
 800d092:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	00da      	lsls	r2, r3, #3
 800d0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0a4:	4413      	add	r3, r2
 800d0a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d0aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0ae:	881b      	ldrh	r3, [r3, #0]
 800d0b0:	b29b      	uxth	r3, r3
 800d0b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d0b6:	b29a      	uxth	r2, r3
 800d0b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0ba:	801a      	strh	r2, [r3, #0]
 800d0bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10a      	bne.n	800d0da <USB_EPStartXfer+0x7d8>
 800d0c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0c6:	881b      	ldrh	r3, [r3, #0]
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0d2:	b29a      	uxth	r2, r3
 800d0d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0d6:	801a      	strh	r2, [r3, #0]
 800d0d8:	e067      	b.n	800d1aa <USB_EPStartXfer+0x8a8>
 800d0da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0de:	2b3e      	cmp	r3, #62	@ 0x3e
 800d0e0:	d81c      	bhi.n	800d11c <USB_EPStartXfer+0x81a>
 800d0e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0e6:	085b      	lsrs	r3, r3, #1
 800d0e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d0ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0f0:	f003 0301 	and.w	r3, r3, #1
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d004      	beq.n	800d102 <USB_EPStartXfer+0x800>
 800d0f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d104:	881b      	ldrh	r3, [r3, #0]
 800d106:	b29a      	uxth	r2, r3
 800d108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	029b      	lsls	r3, r3, #10
 800d110:	b29b      	uxth	r3, r3
 800d112:	4313      	orrs	r3, r2
 800d114:	b29a      	uxth	r2, r3
 800d116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d118:	801a      	strh	r2, [r3, #0]
 800d11a:	e046      	b.n	800d1aa <USB_EPStartXfer+0x8a8>
 800d11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d120:	095b      	lsrs	r3, r3, #5
 800d122:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d12a:	f003 031f 	and.w	r3, r3, #31
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d104      	bne.n	800d13c <USB_EPStartXfer+0x83a>
 800d132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d136:	3b01      	subs	r3, #1
 800d138:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d13c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d13e:	881b      	ldrh	r3, [r3, #0]
 800d140:	b29a      	uxth	r2, r3
 800d142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d146:	b29b      	uxth	r3, r3
 800d148:	029b      	lsls	r3, r3, #10
 800d14a:	b29b      	uxth	r3, r3
 800d14c:	4313      	orrs	r3, r2
 800d14e:	b29b      	uxth	r3, r3
 800d150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d158:	b29a      	uxth	r2, r3
 800d15a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d15c:	801a      	strh	r2, [r3, #0]
 800d15e:	e024      	b.n	800d1aa <USB_EPStartXfer+0x8a8>
 800d160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	785b      	ldrb	r3, [r3, #1]
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d11c      	bne.n	800d1aa <USB_EPStartXfer+0x8a8>
 800d170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d174:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d17e:	b29b      	uxth	r3, r3
 800d180:	461a      	mov	r2, r3
 800d182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d184:	4413      	add	r3, r2
 800d186:	643b      	str	r3, [r7, #64]	@ 0x40
 800d188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d18c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	781b      	ldrb	r3, [r3, #0]
 800d194:	00da      	lsls	r2, r3, #3
 800d196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d198:	4413      	add	r3, r2
 800d19a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1a4:	b29a      	uxth	r2, r3
 800d1a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d1aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	895b      	ldrh	r3, [r3, #10]
 800d1b6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d1ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	6959      	ldr	r1, [r3, #20]
 800d1c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d1d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d1d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d1d8:	6800      	ldr	r0, [r0, #0]
 800d1da:	f001 f87e 	bl	800e2da <USB_WritePMA>
 800d1de:	e227      	b.n	800d630 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d1e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	6a1b      	ldr	r3, [r3, #32]
 800d1ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d1f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	009b      	lsls	r3, r3, #2
 800d208:	4413      	add	r3, r2
 800d20a:	881b      	ldrh	r3, [r3, #0]
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d216:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d21a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d21e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	441a      	add	r2, r3
 800d234:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d238:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d23c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d240:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d248:	b29b      	uxth	r3, r3
 800d24a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d24c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d250:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d25c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d266:	b29b      	uxth	r3, r3
 800d268:	461a      	mov	r2, r3
 800d26a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d26c:	4413      	add	r3, r2
 800d26e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	00da      	lsls	r2, r3, #3
 800d27e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d280:	4413      	add	r3, r2
 800d282:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d286:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d28c:	b29a      	uxth	r2, r3
 800d28e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d290:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	891b      	ldrh	r3, [r3, #8]
 800d29e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d2a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	6959      	ldr	r1, [r3, #20]
 800d2ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d2b8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d2bc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d2c0:	6800      	ldr	r0, [r0, #0]
 800d2c2:	f001 f80a 	bl	800e2da <USB_WritePMA>
 800d2c6:	e1b3      	b.n	800d630 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d2c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	6a1a      	ldr	r2, [r3, #32]
 800d2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2d8:	1ad2      	subs	r2, r2, r3
 800d2da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d2e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	009b      	lsls	r3, r3, #2
 800d2fe:	4413      	add	r3, r2
 800d300:	881b      	ldrh	r3, [r3, #0]
 800d302:	b29b      	uxth	r3, r3
 800d304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d308:	2b00      	cmp	r3, #0
 800d30a:	f000 80c6 	beq.w	800d49a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d30e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d312:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	673b      	str	r3, [r7, #112]	@ 0x70
 800d31a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d31e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	785b      	ldrb	r3, [r3, #1]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d177      	bne.n	800d41a <USB_EPStartXfer+0xb18>
 800d32a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d32e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d33a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d344:	b29b      	uxth	r3, r3
 800d346:	461a      	mov	r2, r3
 800d348:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d34a:	4413      	add	r3, r2
 800d34c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d34e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d352:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	00da      	lsls	r2, r3, #3
 800d35c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d35e:	4413      	add	r3, r2
 800d360:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d364:	667b      	str	r3, [r7, #100]	@ 0x64
 800d366:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d368:	881b      	ldrh	r3, [r3, #0]
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d370:	b29a      	uxth	r2, r3
 800d372:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d374:	801a      	strh	r2, [r3, #0]
 800d376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d10a      	bne.n	800d394 <USB_EPStartXfer+0xa92>
 800d37e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d380:	881b      	ldrh	r3, [r3, #0]
 800d382:	b29b      	uxth	r3, r3
 800d384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d38c:	b29a      	uxth	r2, r3
 800d38e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d390:	801a      	strh	r2, [r3, #0]
 800d392:	e067      	b.n	800d464 <USB_EPStartXfer+0xb62>
 800d394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d398:	2b3e      	cmp	r3, #62	@ 0x3e
 800d39a:	d81c      	bhi.n	800d3d6 <USB_EPStartXfer+0xad4>
 800d39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3a0:	085b      	lsrs	r3, r3, #1
 800d3a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3aa:	f003 0301 	and.w	r3, r3, #1
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d004      	beq.n	800d3bc <USB_EPStartXfer+0xaba>
 800d3b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d3bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3be:	881b      	ldrh	r3, [r3, #0]
 800d3c0:	b29a      	uxth	r2, r3
 800d3c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	029b      	lsls	r3, r3, #10
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	b29a      	uxth	r2, r3
 800d3d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3d2:	801a      	strh	r2, [r3, #0]
 800d3d4:	e046      	b.n	800d464 <USB_EPStartXfer+0xb62>
 800d3d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3da:	095b      	lsrs	r3, r3, #5
 800d3dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d3e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3e4:	f003 031f 	and.w	r3, r3, #31
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d104      	bne.n	800d3f6 <USB_EPStartXfer+0xaf4>
 800d3ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d3f0:	3b01      	subs	r3, #1
 800d3f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d3f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3f8:	881b      	ldrh	r3, [r3, #0]
 800d3fa:	b29a      	uxth	r2, r3
 800d3fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d400:	b29b      	uxth	r3, r3
 800d402:	029b      	lsls	r3, r3, #10
 800d404:	b29b      	uxth	r3, r3
 800d406:	4313      	orrs	r3, r2
 800d408:	b29b      	uxth	r3, r3
 800d40a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d40e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d412:	b29a      	uxth	r2, r3
 800d414:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d416:	801a      	strh	r2, [r3, #0]
 800d418:	e024      	b.n	800d464 <USB_EPStartXfer+0xb62>
 800d41a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d41e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	785b      	ldrb	r3, [r3, #1]
 800d426:	2b01      	cmp	r3, #1
 800d428:	d11c      	bne.n	800d464 <USB_EPStartXfer+0xb62>
 800d42a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d42e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d438:	b29b      	uxth	r3, r3
 800d43a:	461a      	mov	r2, r3
 800d43c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d43e:	4413      	add	r3, r2
 800d440:	673b      	str	r3, [r7, #112]	@ 0x70
 800d442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	00da      	lsls	r2, r3, #3
 800d450:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d452:	4413      	add	r3, r2
 800d454:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d458:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d45e:	b29a      	uxth	r2, r3
 800d460:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d462:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	895b      	ldrh	r3, [r3, #10]
 800d470:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	6959      	ldr	r1, [r3, #20]
 800d480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d484:	b29b      	uxth	r3, r3
 800d486:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d48a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d48e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d492:	6800      	ldr	r0, [r0, #0]
 800d494:	f000 ff21 	bl	800e2da <USB_WritePMA>
 800d498:	e0ca      	b.n	800d630 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d49a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d49e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	785b      	ldrb	r3, [r3, #1]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d177      	bne.n	800d59a <USB_EPStartXfer+0xc98>
 800d4aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d4b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d4ca:	4413      	add	r3, r2
 800d4cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d4ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	00da      	lsls	r2, r3, #3
 800d4dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d4de:	4413      	add	r3, r2
 800d4e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d4e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d4e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d4e8:	881b      	ldrh	r3, [r3, #0]
 800d4ea:	b29b      	uxth	r3, r3
 800d4ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d4f4:	801a      	strh	r2, [r3, #0]
 800d4f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d10a      	bne.n	800d514 <USB_EPStartXfer+0xc12>
 800d4fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d500:	881b      	ldrh	r3, [r3, #0]
 800d502:	b29b      	uxth	r3, r3
 800d504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d50c:	b29a      	uxth	r2, r3
 800d50e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d510:	801a      	strh	r2, [r3, #0]
 800d512:	e073      	b.n	800d5fc <USB_EPStartXfer+0xcfa>
 800d514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d518:	2b3e      	cmp	r3, #62	@ 0x3e
 800d51a:	d81c      	bhi.n	800d556 <USB_EPStartXfer+0xc54>
 800d51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d520:	085b      	lsrs	r3, r3, #1
 800d522:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d52a:	f003 0301 	and.w	r3, r3, #1
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d004      	beq.n	800d53c <USB_EPStartXfer+0xc3a>
 800d532:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d536:	3301      	adds	r3, #1
 800d538:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d53c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d53e:	881b      	ldrh	r3, [r3, #0]
 800d540:	b29a      	uxth	r2, r3
 800d542:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d546:	b29b      	uxth	r3, r3
 800d548:	029b      	lsls	r3, r3, #10
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	4313      	orrs	r3, r2
 800d54e:	b29a      	uxth	r2, r3
 800d550:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d552:	801a      	strh	r2, [r3, #0]
 800d554:	e052      	b.n	800d5fc <USB_EPStartXfer+0xcfa>
 800d556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d55a:	095b      	lsrs	r3, r3, #5
 800d55c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d564:	f003 031f 	and.w	r3, r3, #31
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d104      	bne.n	800d576 <USB_EPStartXfer+0xc74>
 800d56c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d570:	3b01      	subs	r3, #1
 800d572:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d576:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d578:	881b      	ldrh	r3, [r3, #0]
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d580:	b29b      	uxth	r3, r3
 800d582:	029b      	lsls	r3, r3, #10
 800d584:	b29b      	uxth	r3, r3
 800d586:	4313      	orrs	r3, r2
 800d588:	b29b      	uxth	r3, r3
 800d58a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d58e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d592:	b29a      	uxth	r2, r3
 800d594:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d596:	801a      	strh	r2, [r3, #0]
 800d598:	e030      	b.n	800d5fc <USB_EPStartXfer+0xcfa>
 800d59a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d59e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	785b      	ldrb	r3, [r3, #1]
 800d5a6:	2b01      	cmp	r3, #1
 800d5a8:	d128      	bne.n	800d5fc <USB_EPStartXfer+0xcfa>
 800d5aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d5b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d5ce:	4413      	add	r3, r2
 800d5d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d5d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	00da      	lsls	r2, r3, #3
 800d5e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d5e6:	4413      	add	r3, r2
 800d5e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d5ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d5f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5f4:	b29a      	uxth	r2, r3
 800d5f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d5fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d5fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d600:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	891b      	ldrh	r3, [r3, #8]
 800d608:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d60c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	6959      	ldr	r1, [r3, #20]
 800d618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d622:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d626:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d62a:	6800      	ldr	r0, [r0, #0]
 800d62c:	f000 fe55 	bl	800e2da <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d634:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d63e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	4413      	add	r3, r2
 800d64a:	881b      	ldrh	r3, [r3, #0]
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d652:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d656:	817b      	strh	r3, [r7, #10]
 800d658:	897b      	ldrh	r3, [r7, #10]
 800d65a:	f083 0310 	eor.w	r3, r3, #16
 800d65e:	817b      	strh	r3, [r7, #10]
 800d660:	897b      	ldrh	r3, [r7, #10]
 800d662:	f083 0320 	eor.w	r3, r3, #32
 800d666:	817b      	strh	r3, [r7, #10]
 800d668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d66c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d676:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	441a      	add	r2, r3
 800d682:	897b      	ldrh	r3, [r7, #10]
 800d684:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d688:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d68c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d694:	b29b      	uxth	r3, r3
 800d696:	8013      	strh	r3, [r2, #0]
 800d698:	f000 bcdf 	b.w	800e05a <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d69c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	7b1b      	ldrb	r3, [r3, #12]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	f040 80bc 	bne.w	800d826 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d6ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	699a      	ldr	r2, [r3, #24]
 800d6ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	691b      	ldr	r3, [r3, #16]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d917      	bls.n	800d6fa <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800d6ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	691b      	ldr	r3, [r3, #16]
 800d6d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800d6da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	699a      	ldr	r2, [r3, #24]
 800d6e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6ea:	1ad2      	subs	r2, r2, r3
 800d6ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	619a      	str	r2, [r3, #24]
 800d6f8:	e00e      	b.n	800d718 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800d6fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	699b      	ldr	r3, [r3, #24]
 800d706:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800d70a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d70e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	2200      	movs	r2, #0
 800d716:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d71c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d72a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d734:	b29b      	uxth	r3, r3
 800d736:	461a      	mov	r2, r3
 800d738:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d73c:	4413      	add	r3, r2
 800d73e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	00da      	lsls	r2, r3, #3
 800d750:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d754:	4413      	add	r3, r2
 800d756:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d75a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d75e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d762:	881b      	ldrh	r3, [r3, #0]
 800d764:	b29b      	uxth	r3, r3
 800d766:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d76a:	b29a      	uxth	r2, r3
 800d76c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d770:	801a      	strh	r2, [r3, #0]
 800d772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d776:	2b00      	cmp	r3, #0
 800d778:	d10d      	bne.n	800d796 <USB_EPStartXfer+0xe94>
 800d77a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d77e:	881b      	ldrh	r3, [r3, #0]
 800d780:	b29b      	uxth	r3, r3
 800d782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d78a:	b29a      	uxth	r2, r3
 800d78c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d790:	801a      	strh	r2, [r3, #0]
 800d792:	f000 bc28 	b.w	800dfe6 <USB_EPStartXfer+0x16e4>
 800d796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d79a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d79c:	d81f      	bhi.n	800d7de <USB_EPStartXfer+0xedc>
 800d79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7a2:	085b      	lsrs	r3, r3, #1
 800d7a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7ac:	f003 0301 	and.w	r3, r3, #1
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d004      	beq.n	800d7be <USB_EPStartXfer+0xebc>
 800d7b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d7be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7c2:	881b      	ldrh	r3, [r3, #0]
 800d7c4:	b29a      	uxth	r2, r3
 800d7c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	029b      	lsls	r3, r3, #10
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	4313      	orrs	r3, r2
 800d7d2:	b29a      	uxth	r2, r3
 800d7d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7d8:	801a      	strh	r2, [r3, #0]
 800d7da:	f000 bc04 	b.w	800dfe6 <USB_EPStartXfer+0x16e4>
 800d7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7e2:	095b      	lsrs	r3, r3, #5
 800d7e4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d7e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7ec:	f003 031f 	and.w	r3, r3, #31
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d104      	bne.n	800d7fe <USB_EPStartXfer+0xefc>
 800d7f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d7f8:	3b01      	subs	r3, #1
 800d7fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d7fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d802:	881b      	ldrh	r3, [r3, #0]
 800d804:	b29a      	uxth	r2, r3
 800d806:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	029b      	lsls	r3, r3, #10
 800d80e:	b29b      	uxth	r3, r3
 800d810:	4313      	orrs	r3, r2
 800d812:	b29b      	uxth	r3, r3
 800d814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d81c:	b29a      	uxth	r2, r3
 800d81e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d822:	801a      	strh	r2, [r3, #0]
 800d824:	e3df      	b.n	800dfe6 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d82a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	78db      	ldrb	r3, [r3, #3]
 800d832:	2b02      	cmp	r3, #2
 800d834:	f040 8218 	bne.w	800dc68 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d83c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	785b      	ldrb	r3, [r3, #1]
 800d844:	2b00      	cmp	r3, #0
 800d846:	f040 809d 	bne.w	800d984 <USB_EPStartXfer+0x1082>
 800d84a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d84e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d85c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d866:	b29b      	uxth	r3, r3
 800d868:	461a      	mov	r2, r3
 800d86a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d86e:	4413      	add	r3, r2
 800d870:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d878:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	00da      	lsls	r2, r3, #3
 800d882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d886:	4413      	add	r3, r2
 800d888:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d88c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d890:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d894:	881b      	ldrh	r3, [r3, #0]
 800d896:	b29b      	uxth	r3, r3
 800d898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d8a2:	801a      	strh	r2, [r3, #0]
 800d8a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	691b      	ldr	r3, [r3, #16]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d10c      	bne.n	800d8ce <USB_EPStartXfer+0xfcc>
 800d8b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d8b8:	881b      	ldrh	r3, [r3, #0]
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8c4:	b29a      	uxth	r2, r3
 800d8c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d8ca:	801a      	strh	r2, [r3, #0]
 800d8cc:	e08f      	b.n	800d9ee <USB_EPStartXfer+0x10ec>
 800d8ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	691b      	ldr	r3, [r3, #16]
 800d8da:	2b3e      	cmp	r3, #62	@ 0x3e
 800d8dc:	d826      	bhi.n	800d92c <USB_EPStartXfer+0x102a>
 800d8de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	691b      	ldr	r3, [r3, #16]
 800d8ea:	085b      	lsrs	r3, r3, #1
 800d8ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d8f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	691b      	ldr	r3, [r3, #16]
 800d8fc:	f003 0301 	and.w	r3, r3, #1
 800d900:	2b00      	cmp	r3, #0
 800d902:	d004      	beq.n	800d90e <USB_EPStartXfer+0x100c>
 800d904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d908:	3301      	adds	r3, #1
 800d90a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d90e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d912:	881b      	ldrh	r3, [r3, #0]
 800d914:	b29a      	uxth	r2, r3
 800d916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d91a:	b29b      	uxth	r3, r3
 800d91c:	029b      	lsls	r3, r3, #10
 800d91e:	b29b      	uxth	r3, r3
 800d920:	4313      	orrs	r3, r2
 800d922:	b29a      	uxth	r2, r3
 800d924:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d928:	801a      	strh	r2, [r3, #0]
 800d92a:	e060      	b.n	800d9ee <USB_EPStartXfer+0x10ec>
 800d92c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	691b      	ldr	r3, [r3, #16]
 800d938:	095b      	lsrs	r3, r3, #5
 800d93a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d93e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	691b      	ldr	r3, [r3, #16]
 800d94a:	f003 031f 	and.w	r3, r3, #31
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d104      	bne.n	800d95c <USB_EPStartXfer+0x105a>
 800d952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d956:	3b01      	subs	r3, #1
 800d958:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d95c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d960:	881b      	ldrh	r3, [r3, #0]
 800d962:	b29a      	uxth	r2, r3
 800d964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d968:	b29b      	uxth	r3, r3
 800d96a:	029b      	lsls	r3, r3, #10
 800d96c:	b29b      	uxth	r3, r3
 800d96e:	4313      	orrs	r3, r2
 800d970:	b29b      	uxth	r3, r3
 800d972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d980:	801a      	strh	r2, [r3, #0]
 800d982:	e034      	b.n	800d9ee <USB_EPStartXfer+0x10ec>
 800d984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	785b      	ldrb	r3, [r3, #1]
 800d990:	2b01      	cmp	r3, #1
 800d992:	d12c      	bne.n	800d9ee <USB_EPStartXfer+0x10ec>
 800d994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d998:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d9a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d9b8:	4413      	add	r3, r2
 800d9ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d9be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	00da      	lsls	r2, r3, #3
 800d9cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d9d0:	4413      	add	r3, r2
 800d9d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d9d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d9da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	691b      	ldr	r3, [r3, #16]
 800d9e6:	b29a      	uxth	r2, r3
 800d9e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d9ec:	801a      	strh	r2, [r3, #0]
 800d9ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d9fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	785b      	ldrb	r3, [r3, #1]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	f040 809d 	bne.w	800db48 <USB_EPStartXfer+0x1246>
 800da0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800da1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da2a:	b29b      	uxth	r3, r3
 800da2c:	461a      	mov	r2, r3
 800da2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800da32:	4413      	add	r3, r2
 800da34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800da38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	00da      	lsls	r2, r3, #3
 800da46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800da4a:	4413      	add	r3, r2
 800da4c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800da50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800da54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da58:	881b      	ldrh	r3, [r3, #0]
 800da5a:	b29b      	uxth	r3, r3
 800da5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da60:	b29a      	uxth	r2, r3
 800da62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da66:	801a      	strh	r2, [r3, #0]
 800da68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	691b      	ldr	r3, [r3, #16]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d10c      	bne.n	800da92 <USB_EPStartXfer+0x1190>
 800da78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da7c:	881b      	ldrh	r3, [r3, #0]
 800da7e:	b29b      	uxth	r3, r3
 800da80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da88:	b29a      	uxth	r2, r3
 800da8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da8e:	801a      	strh	r2, [r3, #0]
 800da90:	e088      	b.n	800dba4 <USB_EPStartXfer+0x12a2>
 800da92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	691b      	ldr	r3, [r3, #16]
 800da9e:	2b3e      	cmp	r3, #62	@ 0x3e
 800daa0:	d826      	bhi.n	800daf0 <USB_EPStartXfer+0x11ee>
 800daa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	691b      	ldr	r3, [r3, #16]
 800daae:	085b      	lsrs	r3, r3, #1
 800dab0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	691b      	ldr	r3, [r3, #16]
 800dac0:	f003 0301 	and.w	r3, r3, #1
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d004      	beq.n	800dad2 <USB_EPStartXfer+0x11d0>
 800dac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dacc:	3301      	adds	r3, #1
 800dace:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dad2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dad6:	881b      	ldrh	r3, [r3, #0]
 800dad8:	b29a      	uxth	r2, r3
 800dada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dade:	b29b      	uxth	r3, r3
 800dae0:	029b      	lsls	r3, r3, #10
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	4313      	orrs	r3, r2
 800dae6:	b29a      	uxth	r2, r3
 800dae8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800daec:	801a      	strh	r2, [r3, #0]
 800daee:	e059      	b.n	800dba4 <USB_EPStartXfer+0x12a2>
 800daf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	691b      	ldr	r3, [r3, #16]
 800dafc:	095b      	lsrs	r3, r3, #5
 800dafe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800db02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	691b      	ldr	r3, [r3, #16]
 800db0e:	f003 031f 	and.w	r3, r3, #31
 800db12:	2b00      	cmp	r3, #0
 800db14:	d104      	bne.n	800db20 <USB_EPStartXfer+0x121e>
 800db16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db1a:	3b01      	subs	r3, #1
 800db1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800db20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db24:	881b      	ldrh	r3, [r3, #0]
 800db26:	b29a      	uxth	r2, r3
 800db28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	029b      	lsls	r3, r3, #10
 800db30:	b29b      	uxth	r3, r3
 800db32:	4313      	orrs	r3, r2
 800db34:	b29b      	uxth	r3, r3
 800db36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db3e:	b29a      	uxth	r2, r3
 800db40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db44:	801a      	strh	r2, [r3, #0]
 800db46:	e02d      	b.n	800dba4 <USB_EPStartXfer+0x12a2>
 800db48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	785b      	ldrb	r3, [r3, #1]
 800db54:	2b01      	cmp	r3, #1
 800db56:	d125      	bne.n	800dba4 <USB_EPStartXfer+0x12a2>
 800db58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db66:	b29b      	uxth	r3, r3
 800db68:	461a      	mov	r2, r3
 800db6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800db6e:	4413      	add	r3, r2
 800db70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800db74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	781b      	ldrb	r3, [r3, #0]
 800db80:	00da      	lsls	r2, r3, #3
 800db82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800db86:	4413      	add	r3, r2
 800db88:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800db8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800db90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	691b      	ldr	r3, [r3, #16]
 800db9c:	b29a      	uxth	r2, r3
 800db9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dba2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800dba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	69db      	ldr	r3, [r3, #28]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	f000 8218 	beq.w	800dfe6 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800dbb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbbe:	681a      	ldr	r2, [r3, #0]
 800dbc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	009b      	lsls	r3, r3, #2
 800dbce:	4413      	add	r3, r2
 800dbd0:	881b      	ldrh	r3, [r3, #0]
 800dbd2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dbd6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dbda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d005      	beq.n	800dbee <USB_EPStartXfer+0x12ec>
 800dbe2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dbe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d10d      	bne.n	800dc0a <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dbee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dbf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f040 81f5 	bne.w	800dfe6 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dbfc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dc00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	f040 81ee 	bne.w	800dfe6 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800dc0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc12:	681a      	ldr	r2, [r3, #0]
 800dc14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	009b      	lsls	r3, r3, #2
 800dc22:	4413      	add	r3, r2
 800dc24:	881b      	ldrh	r3, [r3, #0]
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dc2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc30:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800dc34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc3c:	681a      	ldr	r2, [r3, #0]
 800dc3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	441a      	add	r2, r3
 800dc4e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800dc52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dc56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dc5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dc5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	8013      	strh	r3, [r2, #0]
 800dc66:	e1be      	b.n	800dfe6 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800dc68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	78db      	ldrb	r3, [r3, #3]
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	f040 81b4 	bne.w	800dfe2 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800dc7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	699a      	ldr	r2, [r3, #24]
 800dc86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	691b      	ldr	r3, [r3, #16]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d917      	bls.n	800dcc6 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800dc96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	691b      	ldr	r3, [r3, #16]
 800dca2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800dca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	699a      	ldr	r2, [r3, #24]
 800dcb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcb6:	1ad2      	subs	r2, r2, r3
 800dcb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	619a      	str	r2, [r3, #24]
 800dcc4:	e00e      	b.n	800dce4 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800dcc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	699b      	ldr	r3, [r3, #24]
 800dcd2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800dcd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2200      	movs	r2, #0
 800dce2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800dce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	785b      	ldrb	r3, [r3, #1]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	f040 8085 	bne.w	800de00 <USB_EPStartXfer+0x14fe>
 800dcf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dd04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd12:	b29b      	uxth	r3, r3
 800dd14:	461a      	mov	r2, r3
 800dd16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800dd1a:	4413      	add	r3, r2
 800dd1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dd20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	00da      	lsls	r2, r3, #3
 800dd2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800dd32:	4413      	add	r3, r2
 800dd34:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dd38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dd3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd40:	881b      	ldrh	r3, [r3, #0]
 800dd42:	b29b      	uxth	r3, r3
 800dd44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd48:	b29a      	uxth	r2, r3
 800dd4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd4e:	801a      	strh	r2, [r3, #0]
 800dd50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d10c      	bne.n	800dd72 <USB_EPStartXfer+0x1470>
 800dd58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd5c:	881b      	ldrh	r3, [r3, #0]
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd68:	b29a      	uxth	r2, r3
 800dd6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd6e:	801a      	strh	r2, [r3, #0]
 800dd70:	e077      	b.n	800de62 <USB_EPStartXfer+0x1560>
 800dd72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd76:	2b3e      	cmp	r3, #62	@ 0x3e
 800dd78:	d81e      	bhi.n	800ddb8 <USB_EPStartXfer+0x14b6>
 800dd7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd7e:	085b      	lsrs	r3, r3, #1
 800dd80:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dd84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd88:	f003 0301 	and.w	r3, r3, #1
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d004      	beq.n	800dd9a <USB_EPStartXfer+0x1498>
 800dd90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd94:	3301      	adds	r3, #1
 800dd96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dd9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd9e:	881b      	ldrh	r3, [r3, #0]
 800dda0:	b29a      	uxth	r2, r3
 800dda2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	029b      	lsls	r3, r3, #10
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	4313      	orrs	r3, r2
 800ddae:	b29a      	uxth	r2, r3
 800ddb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ddb4:	801a      	strh	r2, [r3, #0]
 800ddb6:	e054      	b.n	800de62 <USB_EPStartXfer+0x1560>
 800ddb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddbc:	095b      	lsrs	r3, r3, #5
 800ddbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ddc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddc6:	f003 031f 	and.w	r3, r3, #31
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d104      	bne.n	800ddd8 <USB_EPStartXfer+0x14d6>
 800ddce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ddd2:	3b01      	subs	r3, #1
 800ddd4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ddd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dddc:	881b      	ldrh	r3, [r3, #0]
 800ddde:	b29a      	uxth	r2, r3
 800dde0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dde4:	b29b      	uxth	r3, r3
 800dde6:	029b      	lsls	r3, r3, #10
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	4313      	orrs	r3, r2
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ddf6:	b29a      	uxth	r2, r3
 800ddf8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ddfc:	801a      	strh	r2, [r3, #0]
 800ddfe:	e030      	b.n	800de62 <USB_EPStartXfer+0x1560>
 800de00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	785b      	ldrb	r3, [r3, #1]
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d128      	bne.n	800de62 <USB_EPStartXfer+0x1560>
 800de10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800de1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	461a      	mov	r2, r3
 800de30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de34:	4413      	add	r3, r2
 800de36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800de3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	00da      	lsls	r2, r3, #3
 800de48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de4c:	4413      	add	r3, r2
 800de4e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800de52:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800de56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de5a:	b29a      	uxth	r2, r3
 800de5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800de60:	801a      	strh	r2, [r3, #0]
 800de62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800de70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	785b      	ldrb	r3, [r3, #1]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	f040 8085 	bne.w	800df8c <USB_EPStartXfer+0x168a>
 800de82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800de90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de9e:	b29b      	uxth	r3, r3
 800dea0:	461a      	mov	r2, r3
 800dea2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800dea6:	4413      	add	r3, r2
 800dea8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800deac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800deb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	00da      	lsls	r2, r3, #3
 800deba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800debe:	4413      	add	r3, r2
 800dec0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dec4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800dec8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800decc:	881b      	ldrh	r3, [r3, #0]
 800dece:	b29b      	uxth	r3, r3
 800ded0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ded4:	b29a      	uxth	r2, r3
 800ded6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800deda:	801a      	strh	r2, [r3, #0]
 800dedc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d10c      	bne.n	800defe <USB_EPStartXfer+0x15fc>
 800dee4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dee8:	881b      	ldrh	r3, [r3, #0]
 800deea:	b29b      	uxth	r3, r3
 800deec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800def0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800def4:	b29a      	uxth	r2, r3
 800def6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800defa:	801a      	strh	r2, [r3, #0]
 800defc:	e073      	b.n	800dfe6 <USB_EPStartXfer+0x16e4>
 800defe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df02:	2b3e      	cmp	r3, #62	@ 0x3e
 800df04:	d81e      	bhi.n	800df44 <USB_EPStartXfer+0x1642>
 800df06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df0a:	085b      	lsrs	r3, r3, #1
 800df0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800df10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df14:	f003 0301 	and.w	r3, r3, #1
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d004      	beq.n	800df26 <USB_EPStartXfer+0x1624>
 800df1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800df20:	3301      	adds	r3, #1
 800df22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800df26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df2a:	881b      	ldrh	r3, [r3, #0]
 800df2c:	b29a      	uxth	r2, r3
 800df2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800df32:	b29b      	uxth	r3, r3
 800df34:	029b      	lsls	r3, r3, #10
 800df36:	b29b      	uxth	r3, r3
 800df38:	4313      	orrs	r3, r2
 800df3a:	b29a      	uxth	r2, r3
 800df3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df40:	801a      	strh	r2, [r3, #0]
 800df42:	e050      	b.n	800dfe6 <USB_EPStartXfer+0x16e4>
 800df44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df48:	095b      	lsrs	r3, r3, #5
 800df4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800df4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df52:	f003 031f 	and.w	r3, r3, #31
 800df56:	2b00      	cmp	r3, #0
 800df58:	d104      	bne.n	800df64 <USB_EPStartXfer+0x1662>
 800df5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800df5e:	3b01      	subs	r3, #1
 800df60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800df64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df68:	881b      	ldrh	r3, [r3, #0]
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800df70:	b29b      	uxth	r3, r3
 800df72:	029b      	lsls	r3, r3, #10
 800df74:	b29b      	uxth	r3, r3
 800df76:	4313      	orrs	r3, r2
 800df78:	b29b      	uxth	r3, r3
 800df7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df82:	b29a      	uxth	r2, r3
 800df84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df88:	801a      	strh	r2, [r3, #0]
 800df8a:	e02c      	b.n	800dfe6 <USB_EPStartXfer+0x16e4>
 800df8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	785b      	ldrb	r3, [r3, #1]
 800df98:	2b01      	cmp	r3, #1
 800df9a:	d124      	bne.n	800dfe6 <USB_EPStartXfer+0x16e4>
 800df9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfa0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	461a      	mov	r2, r3
 800dfae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800dfb2:	4413      	add	r3, r2
 800dfb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dfb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	00da      	lsls	r2, r3, #3
 800dfc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800dfca:	4413      	add	r3, r2
 800dfcc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dfd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800dfd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfd8:	b29a      	uxth	r2, r3
 800dfda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800dfde:	801a      	strh	r2, [r3, #0]
 800dfe0:	e001      	b.n	800dfe6 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	e03a      	b.n	800e05c <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dfe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfee:	681a      	ldr	r2, [r3, #0]
 800dff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	009b      	lsls	r3, r3, #2
 800dffe:	4413      	add	r3, r2
 800e000:	881b      	ldrh	r3, [r3, #0]
 800e002:	b29b      	uxth	r3, r3
 800e004:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e008:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e00c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e010:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e014:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e018:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e01c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e020:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e024:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e02c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	009b      	lsls	r3, r3, #2
 800e040:	441a      	add	r2, r3
 800e042:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e046:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e04a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e04e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e056:	b29b      	uxth	r3, r3
 800e058:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e05a:	2300      	movs	r3, #0
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}

0800e066 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e066:	b480      	push	{r7}
 800e068:	b085      	sub	sp, #20
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	6078      	str	r0, [r7, #4]
 800e06e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	785b      	ldrb	r3, [r3, #1]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d020      	beq.n	800e0ba <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	009b      	lsls	r3, r3, #2
 800e080:	4413      	add	r3, r2
 800e082:	881b      	ldrh	r3, [r3, #0]
 800e084:	b29b      	uxth	r3, r3
 800e086:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e08a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e08e:	81bb      	strh	r3, [r7, #12]
 800e090:	89bb      	ldrh	r3, [r7, #12]
 800e092:	f083 0310 	eor.w	r3, r3, #16
 800e096:	81bb      	strh	r3, [r7, #12]
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	009b      	lsls	r3, r3, #2
 800e0a0:	441a      	add	r2, r3
 800e0a2:	89bb      	ldrh	r3, [r7, #12]
 800e0a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e0a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e0ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e0b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	8013      	strh	r3, [r2, #0]
 800e0b8:	e01f      	b.n	800e0fa <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e0ba:	687a      	ldr	r2, [r7, #4]
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	009b      	lsls	r3, r3, #2
 800e0c2:	4413      	add	r3, r2
 800e0c4:	881b      	ldrh	r3, [r3, #0]
 800e0c6:	b29b      	uxth	r3, r3
 800e0c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e0cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e0d0:	81fb      	strh	r3, [r7, #14]
 800e0d2:	89fb      	ldrh	r3, [r7, #14]
 800e0d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e0d8:	81fb      	strh	r3, [r7, #14]
 800e0da:	687a      	ldr	r2, [r7, #4]
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	781b      	ldrb	r3, [r3, #0]
 800e0e0:	009b      	lsls	r3, r3, #2
 800e0e2:	441a      	add	r2, r3
 800e0e4:	89fb      	ldrh	r3, [r7, #14]
 800e0e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e0ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e0ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e0f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0f6:	b29b      	uxth	r3, r3
 800e0f8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e0fa:	2300      	movs	r3, #0
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3714      	adds	r7, #20
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr

0800e108 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e108:	b480      	push	{r7}
 800e10a:	b087      	sub	sp, #28
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	7b1b      	ldrb	r3, [r3, #12]
 800e116:	2b00      	cmp	r3, #0
 800e118:	f040 809d 	bne.w	800e256 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	785b      	ldrb	r3, [r3, #1]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d04c      	beq.n	800e1be <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	4413      	add	r3, r2
 800e12e:	881b      	ldrh	r3, [r3, #0]
 800e130:	823b      	strh	r3, [r7, #16]
 800e132:	8a3b      	ldrh	r3, [r7, #16]
 800e134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d01b      	beq.n	800e174 <USB_EPClearStall+0x6c>
 800e13c:	687a      	ldr	r2, [r7, #4]
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	009b      	lsls	r3, r3, #2
 800e144:	4413      	add	r3, r2
 800e146:	881b      	ldrh	r3, [r3, #0]
 800e148:	b29b      	uxth	r3, r3
 800e14a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e14e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e152:	81fb      	strh	r3, [r7, #14]
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	009b      	lsls	r3, r3, #2
 800e15c:	441a      	add	r2, r3
 800e15e:	89fb      	ldrh	r3, [r7, #14]
 800e160:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e164:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e168:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e16c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e170:	b29b      	uxth	r3, r3
 800e172:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	78db      	ldrb	r3, [r3, #3]
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d06c      	beq.n	800e256 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e17c:	687a      	ldr	r2, [r7, #4]
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	009b      	lsls	r3, r3, #2
 800e184:	4413      	add	r3, r2
 800e186:	881b      	ldrh	r3, [r3, #0]
 800e188:	b29b      	uxth	r3, r3
 800e18a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e18e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e192:	81bb      	strh	r3, [r7, #12]
 800e194:	89bb      	ldrh	r3, [r7, #12]
 800e196:	f083 0320 	eor.w	r3, r3, #32
 800e19a:	81bb      	strh	r3, [r7, #12]
 800e19c:	687a      	ldr	r2, [r7, #4]
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	009b      	lsls	r3, r3, #2
 800e1a4:	441a      	add	r2, r3
 800e1a6:	89bb      	ldrh	r3, [r7, #12]
 800e1a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e1ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e1b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	8013      	strh	r3, [r2, #0]
 800e1bc:	e04b      	b.n	800e256 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	009b      	lsls	r3, r3, #2
 800e1c6:	4413      	add	r3, r2
 800e1c8:	881b      	ldrh	r3, [r3, #0]
 800e1ca:	82fb      	strh	r3, [r7, #22]
 800e1cc:	8afb      	ldrh	r3, [r7, #22]
 800e1ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d01b      	beq.n	800e20e <USB_EPClearStall+0x106>
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	4413      	add	r3, r2
 800e1e0:	881b      	ldrh	r3, [r3, #0]
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e1e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e1ec:	82bb      	strh	r3, [r7, #20]
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	009b      	lsls	r3, r3, #2
 800e1f6:	441a      	add	r2, r3
 800e1f8:	8abb      	ldrh	r3, [r7, #20]
 800e1fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e1fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e202:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	009b      	lsls	r3, r3, #2
 800e216:	4413      	add	r3, r2
 800e218:	881b      	ldrh	r3, [r3, #0]
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e224:	827b      	strh	r3, [r7, #18]
 800e226:	8a7b      	ldrh	r3, [r7, #18]
 800e228:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e22c:	827b      	strh	r3, [r7, #18]
 800e22e:	8a7b      	ldrh	r3, [r7, #18]
 800e230:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e234:	827b      	strh	r3, [r7, #18]
 800e236:	687a      	ldr	r2, [r7, #4]
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	009b      	lsls	r3, r3, #2
 800e23e:	441a      	add	r2, r3
 800e240:	8a7b      	ldrh	r3, [r7, #18]
 800e242:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e246:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e24a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e24e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e252:	b29b      	uxth	r3, r3
 800e254:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e256:	2300      	movs	r3, #0
}
 800e258:	4618      	mov	r0, r3
 800e25a:	371c      	adds	r7, #28
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr

0800e264 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e264:	b480      	push	{r7}
 800e266:	b083      	sub	sp, #12
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	460b      	mov	r3, r1
 800e26e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e270:	78fb      	ldrb	r3, [r7, #3]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d103      	bne.n	800e27e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2280      	movs	r2, #128	@ 0x80
 800e27a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e27e:	2300      	movs	r3, #0
}
 800e280:	4618      	mov	r0, r3
 800e282:	370c      	adds	r7, #12
 800e284:	46bd      	mov	sp, r7
 800e286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28a:	4770      	bx	lr

0800e28c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b083      	sub	sp, #12
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e29a:	b29b      	uxth	r3, r3
 800e29c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e2a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e2a4:	b29a      	uxth	r2, r3
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e2ac:	2300      	movs	r3, #0
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	370c      	adds	r7, #12
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b8:	4770      	bx	lr

0800e2ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e2ba:	b480      	push	{r7}
 800e2bc:	b085      	sub	sp, #20
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3714      	adds	r7, #20
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d8:	4770      	bx	lr

0800e2da <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e2da:	b480      	push	{r7}
 800e2dc:	b08b      	sub	sp, #44	@ 0x2c
 800e2de:	af00      	add	r7, sp, #0
 800e2e0:	60f8      	str	r0, [r7, #12]
 800e2e2:	60b9      	str	r1, [r7, #8]
 800e2e4:	4611      	mov	r1, r2
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	80fb      	strh	r3, [r7, #6]
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e2f0:	88bb      	ldrh	r3, [r7, #4]
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	085b      	lsrs	r3, r3, #1
 800e2f6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e300:	88fa      	ldrh	r2, [r7, #6]
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	4413      	add	r3, r2
 800e306:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e30a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e30c:	69bb      	ldr	r3, [r7, #24]
 800e30e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e310:	e01b      	b.n	800e34a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800e312:	69fb      	ldr	r3, [r7, #28]
 800e314:	781b      	ldrb	r3, [r3, #0]
 800e316:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	3301      	adds	r3, #1
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	021b      	lsls	r3, r3, #8
 800e320:	b21a      	sxth	r2, r3
 800e322:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e326:	4313      	orrs	r3, r2
 800e328:	b21b      	sxth	r3, r3
 800e32a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e32c:	6a3b      	ldr	r3, [r7, #32]
 800e32e:	8a7a      	ldrh	r2, [r7, #18]
 800e330:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e332:	6a3b      	ldr	r3, [r7, #32]
 800e334:	3302      	adds	r3, #2
 800e336:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e338:	69fb      	ldr	r3, [r7, #28]
 800e33a:	3301      	adds	r3, #1
 800e33c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e33e:	69fb      	ldr	r3, [r7, #28]
 800e340:	3301      	adds	r3, #1
 800e342:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e346:	3b01      	subs	r3, #1
 800e348:	627b      	str	r3, [r7, #36]	@ 0x24
 800e34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d1e0      	bne.n	800e312 <USB_WritePMA+0x38>
  }
}
 800e350:	bf00      	nop
 800e352:	bf00      	nop
 800e354:	372c      	adds	r7, #44	@ 0x2c
 800e356:	46bd      	mov	sp, r7
 800e358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35c:	4770      	bx	lr

0800e35e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e35e:	b480      	push	{r7}
 800e360:	b08b      	sub	sp, #44	@ 0x2c
 800e362:	af00      	add	r7, sp, #0
 800e364:	60f8      	str	r0, [r7, #12]
 800e366:	60b9      	str	r1, [r7, #8]
 800e368:	4611      	mov	r1, r2
 800e36a:	461a      	mov	r2, r3
 800e36c:	460b      	mov	r3, r1
 800e36e:	80fb      	strh	r3, [r7, #6]
 800e370:	4613      	mov	r3, r2
 800e372:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e374:	88bb      	ldrh	r3, [r7, #4]
 800e376:	085b      	lsrs	r3, r3, #1
 800e378:	b29b      	uxth	r3, r3
 800e37a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e384:	88fa      	ldrh	r2, [r7, #6]
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	4413      	add	r3, r2
 800e38a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e38e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e390:	69bb      	ldr	r3, [r7, #24]
 800e392:	627b      	str	r3, [r7, #36]	@ 0x24
 800e394:	e018      	b.n	800e3c8 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e396:	6a3b      	ldr	r3, [r7, #32]
 800e398:	881b      	ldrh	r3, [r3, #0]
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e39e:	6a3b      	ldr	r3, [r7, #32]
 800e3a0:	3302      	adds	r3, #2
 800e3a2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	b2da      	uxtb	r2, r3
 800e3a8:	69fb      	ldr	r3, [r7, #28]
 800e3aa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e3ac:	69fb      	ldr	r3, [r7, #28]
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	0a1b      	lsrs	r3, r3, #8
 800e3b6:	b2da      	uxtb	r2, r3
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	3301      	adds	r3, #1
 800e3c0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3c4:	3b01      	subs	r3, #1
 800e3c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d1e3      	bne.n	800e396 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e3ce:	88bb      	ldrh	r3, [r7, #4]
 800e3d0:	f003 0301 	and.w	r3, r3, #1
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d007      	beq.n	800e3ea <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e3da:	6a3b      	ldr	r3, [r7, #32]
 800e3dc:	881b      	ldrh	r3, [r3, #0]
 800e3de:	b29b      	uxth	r3, r3
 800e3e0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	b2da      	uxtb	r2, r3
 800e3e6:	69fb      	ldr	r3, [r7, #28]
 800e3e8:	701a      	strb	r2, [r3, #0]
  }
}
 800e3ea:	bf00      	nop
 800e3ec:	372c      	adds	r7, #44	@ 0x2c
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f4:	4770      	bx	lr

0800e3f6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e3f6:	b580      	push	{r7, lr}
 800e3f8:	b084      	sub	sp, #16
 800e3fa:	af00      	add	r7, sp, #0
 800e3fc:	6078      	str	r0, [r7, #4]
 800e3fe:	460b      	mov	r3, r1
 800e400:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e402:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e406:	f002 f90f 	bl	8010628 <USBD_static_malloc>
 800e40a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d105      	bne.n	800e41e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2200      	movs	r2, #0
 800e416:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800e41a:	2302      	movs	r3, #2
 800e41c:	e066      	b.n	800e4ec <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	68fa      	ldr	r2, [r7, #12]
 800e422:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	7c1b      	ldrb	r3, [r3, #16]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d119      	bne.n	800e462 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e42e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e432:	2202      	movs	r2, #2
 800e434:	2181      	movs	r1, #129	@ 0x81
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f001 ff9d 	bl	8010376 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2201      	movs	r2, #1
 800e440:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e442:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e446:	2202      	movs	r2, #2
 800e448:	2101      	movs	r1, #1
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f001 ff93 	bl	8010376 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2201      	movs	r2, #1
 800e454:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2210      	movs	r2, #16
 800e45c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800e460:	e016      	b.n	800e490 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e462:	2340      	movs	r3, #64	@ 0x40
 800e464:	2202      	movs	r2, #2
 800e466:	2181      	movs	r1, #129	@ 0x81
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f001 ff84 	bl	8010376 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2201      	movs	r2, #1
 800e472:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e474:	2340      	movs	r3, #64	@ 0x40
 800e476:	2202      	movs	r2, #2
 800e478:	2101      	movs	r1, #1
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f001 ff7b 	bl	8010376 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2201      	movs	r2, #1
 800e484:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2210      	movs	r2, #16
 800e48c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e490:	2308      	movs	r3, #8
 800e492:	2203      	movs	r2, #3
 800e494:	2182      	movs	r1, #130	@ 0x82
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f001 ff6d 	bl	8010376 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2201      	movs	r2, #1
 800e4a0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	7c1b      	ldrb	r3, [r3, #16]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d109      	bne.n	800e4da <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e4cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e4d0:	2101      	movs	r1, #1
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f002 f83e 	bl	8010554 <USBD_LL_PrepareReceive>
 800e4d8:	e007      	b.n	800e4ea <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e4e0:	2340      	movs	r3, #64	@ 0x40
 800e4e2:	2101      	movs	r1, #1
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f002 f835 	bl	8010554 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e4ea:	2300      	movs	r3, #0
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3710      	adds	r7, #16
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}

0800e4f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b082      	sub	sp, #8
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e500:	2181      	movs	r1, #129	@ 0x81
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f001 ff5d 	bl	80103c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2200      	movs	r2, #0
 800e50c:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e50e:	2101      	movs	r1, #1
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f001 ff56 	bl	80103c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2200      	movs	r2, #0
 800e51a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e51e:	2182      	movs	r1, #130	@ 0x82
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f001 ff4e 	bl	80103c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2200      	movs	r2, #0
 800e52a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2200      	movs	r2, #0
 800e532:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d00e      	beq.n	800e55e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e550:	4618      	mov	r0, r3
 800e552:	f002 f877 	bl	8010644 <USBD_static_free>
    pdev->pClassData = NULL;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2200      	movs	r2, #0
 800e55a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e55e:	2300      	movs	r3, #0
}
 800e560:	4618      	mov	r0, r3
 800e562:	3708      	adds	r7, #8
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b086      	sub	sp, #24
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e578:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e57a:	2300      	movs	r3, #0
 800e57c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e57e:	2300      	movs	r3, #0
 800e580:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e582:	2300      	movs	r3, #0
 800e584:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d101      	bne.n	800e590 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e58c:	2303      	movs	r3, #3
 800e58e:	e0af      	b.n	800e6f0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d03f      	beq.n	800e61c <USBD_CDC_Setup+0xb4>
 800e59c:	2b20      	cmp	r3, #32
 800e59e:	f040 809f 	bne.w	800e6e0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	88db      	ldrh	r3, [r3, #6]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d02e      	beq.n	800e608 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	781b      	ldrb	r3, [r3, #0]
 800e5ae:	b25b      	sxtb	r3, r3
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	da16      	bge.n	800e5e2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e5ba:	689b      	ldr	r3, [r3, #8]
 800e5bc:	683a      	ldr	r2, [r7, #0]
 800e5be:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e5c0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e5c2:	683a      	ldr	r2, [r7, #0]
 800e5c4:	88d2      	ldrh	r2, [r2, #6]
 800e5c6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	88db      	ldrh	r3, [r3, #6]
 800e5cc:	2b07      	cmp	r3, #7
 800e5ce:	bf28      	it	cs
 800e5d0:	2307      	movcs	r3, #7
 800e5d2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	89fa      	ldrh	r2, [r7, #14]
 800e5d8:	4619      	mov	r1, r3
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f001 facd 	bl	800fb7a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e5e0:	e085      	b.n	800e6ee <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	785a      	ldrb	r2, [r3, #1]
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	88db      	ldrh	r3, [r3, #6]
 800e5f0:	b2da      	uxtb	r2, r3
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e5f8:	6939      	ldr	r1, [r7, #16]
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	88db      	ldrh	r3, [r3, #6]
 800e5fe:	461a      	mov	r2, r3
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f001 fae6 	bl	800fbd2 <USBD_CtlPrepareRx>
      break;
 800e606:	e072      	b.n	800e6ee <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e60e:	689b      	ldr	r3, [r3, #8]
 800e610:	683a      	ldr	r2, [r7, #0]
 800e612:	7850      	ldrb	r0, [r2, #1]
 800e614:	2200      	movs	r2, #0
 800e616:	6839      	ldr	r1, [r7, #0]
 800e618:	4798      	blx	r3
      break;
 800e61a:	e068      	b.n	800e6ee <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	785b      	ldrb	r3, [r3, #1]
 800e620:	2b0b      	cmp	r3, #11
 800e622:	d852      	bhi.n	800e6ca <USBD_CDC_Setup+0x162>
 800e624:	a201      	add	r2, pc, #4	@ (adr r2, 800e62c <USBD_CDC_Setup+0xc4>)
 800e626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e62a:	bf00      	nop
 800e62c:	0800e65d 	.word	0x0800e65d
 800e630:	0800e6d9 	.word	0x0800e6d9
 800e634:	0800e6cb 	.word	0x0800e6cb
 800e638:	0800e6cb 	.word	0x0800e6cb
 800e63c:	0800e6cb 	.word	0x0800e6cb
 800e640:	0800e6cb 	.word	0x0800e6cb
 800e644:	0800e6cb 	.word	0x0800e6cb
 800e648:	0800e6cb 	.word	0x0800e6cb
 800e64c:	0800e6cb 	.word	0x0800e6cb
 800e650:	0800e6cb 	.word	0x0800e6cb
 800e654:	0800e687 	.word	0x0800e687
 800e658:	0800e6b1 	.word	0x0800e6b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e662:	b2db      	uxtb	r3, r3
 800e664:	2b03      	cmp	r3, #3
 800e666:	d107      	bne.n	800e678 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e668:	f107 030a 	add.w	r3, r7, #10
 800e66c:	2202      	movs	r2, #2
 800e66e:	4619      	mov	r1, r3
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f001 fa82 	bl	800fb7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e676:	e032      	b.n	800e6de <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e678:	6839      	ldr	r1, [r7, #0]
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f001 fa0c 	bl	800fa98 <USBD_CtlError>
            ret = USBD_FAIL;
 800e680:	2303      	movs	r3, #3
 800e682:	75fb      	strb	r3, [r7, #23]
          break;
 800e684:	e02b      	b.n	800e6de <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e68c:	b2db      	uxtb	r3, r3
 800e68e:	2b03      	cmp	r3, #3
 800e690:	d107      	bne.n	800e6a2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e692:	f107 030d 	add.w	r3, r7, #13
 800e696:	2201      	movs	r2, #1
 800e698:	4619      	mov	r1, r3
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f001 fa6d 	bl	800fb7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e6a0:	e01d      	b.n	800e6de <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e6a2:	6839      	ldr	r1, [r7, #0]
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f001 f9f7 	bl	800fa98 <USBD_CtlError>
            ret = USBD_FAIL;
 800e6aa:	2303      	movs	r3, #3
 800e6ac:	75fb      	strb	r3, [r7, #23]
          break;
 800e6ae:	e016      	b.n	800e6de <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	2b03      	cmp	r3, #3
 800e6ba:	d00f      	beq.n	800e6dc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e6bc:	6839      	ldr	r1, [r7, #0]
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f001 f9ea 	bl	800fa98 <USBD_CtlError>
            ret = USBD_FAIL;
 800e6c4:	2303      	movs	r3, #3
 800e6c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e6c8:	e008      	b.n	800e6dc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e6ca:	6839      	ldr	r1, [r7, #0]
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f001 f9e3 	bl	800fa98 <USBD_CtlError>
          ret = USBD_FAIL;
 800e6d2:	2303      	movs	r3, #3
 800e6d4:	75fb      	strb	r3, [r7, #23]
          break;
 800e6d6:	e002      	b.n	800e6de <USBD_CDC_Setup+0x176>
          break;
 800e6d8:	bf00      	nop
 800e6da:	e008      	b.n	800e6ee <USBD_CDC_Setup+0x186>
          break;
 800e6dc:	bf00      	nop
      }
      break;
 800e6de:	e006      	b.n	800e6ee <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e6e0:	6839      	ldr	r1, [r7, #0]
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f001 f9d8 	bl	800fa98 <USBD_CtlError>
      ret = USBD_FAIL;
 800e6e8:	2303      	movs	r3, #3
 800e6ea:	75fb      	strb	r3, [r7, #23]
      break;
 800e6ec:	bf00      	nop
  }

  return (uint8_t)ret;
 800e6ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3718      	adds	r7, #24
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	460b      	mov	r3, r1
 800e702:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e70a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e712:	2b00      	cmp	r3, #0
 800e714:	d101      	bne.n	800e71a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e716:	2303      	movs	r3, #3
 800e718:	e04f      	b.n	800e7ba <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e720:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e722:	78fa      	ldrb	r2, [r7, #3]
 800e724:	6879      	ldr	r1, [r7, #4]
 800e726:	4613      	mov	r3, r2
 800e728:	009b      	lsls	r3, r3, #2
 800e72a:	4413      	add	r3, r2
 800e72c:	009b      	lsls	r3, r3, #2
 800e72e:	440b      	add	r3, r1
 800e730:	3318      	adds	r3, #24
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d029      	beq.n	800e78c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e738:	78fa      	ldrb	r2, [r7, #3]
 800e73a:	6879      	ldr	r1, [r7, #4]
 800e73c:	4613      	mov	r3, r2
 800e73e:	009b      	lsls	r3, r3, #2
 800e740:	4413      	add	r3, r2
 800e742:	009b      	lsls	r3, r3, #2
 800e744:	440b      	add	r3, r1
 800e746:	3318      	adds	r3, #24
 800e748:	681a      	ldr	r2, [r3, #0]
 800e74a:	78f9      	ldrb	r1, [r7, #3]
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	460b      	mov	r3, r1
 800e750:	009b      	lsls	r3, r3, #2
 800e752:	440b      	add	r3, r1
 800e754:	00db      	lsls	r3, r3, #3
 800e756:	4403      	add	r3, r0
 800e758:	3320      	adds	r3, #32
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	fbb2 f1f3 	udiv	r1, r2, r3
 800e760:	fb01 f303 	mul.w	r3, r1, r3
 800e764:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e766:	2b00      	cmp	r3, #0
 800e768:	d110      	bne.n	800e78c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e76a:	78fa      	ldrb	r2, [r7, #3]
 800e76c:	6879      	ldr	r1, [r7, #4]
 800e76e:	4613      	mov	r3, r2
 800e770:	009b      	lsls	r3, r3, #2
 800e772:	4413      	add	r3, r2
 800e774:	009b      	lsls	r3, r3, #2
 800e776:	440b      	add	r3, r1
 800e778:	3318      	adds	r3, #24
 800e77a:	2200      	movs	r2, #0
 800e77c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e77e:	78f9      	ldrb	r1, [r7, #3]
 800e780:	2300      	movs	r3, #0
 800e782:	2200      	movs	r2, #0
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f001 fec4 	bl	8010512 <USBD_LL_Transmit>
 800e78a:	e015      	b.n	800e7b8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	2200      	movs	r2, #0
 800e790:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e79a:	691b      	ldr	r3, [r3, #16]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d00b      	beq.n	800e7b8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e7a6:	691b      	ldr	r3, [r3, #16]
 800e7a8:	68ba      	ldr	r2, [r7, #8]
 800e7aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e7ae:	68ba      	ldr	r2, [r7, #8]
 800e7b0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e7b4:	78fa      	ldrb	r2, [r7, #3]
 800e7b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e7b8:	2300      	movs	r3, #0
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3710      	adds	r7, #16
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}

0800e7c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b084      	sub	sp, #16
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e7d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d101      	bne.n	800e7e4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e7e0:	2303      	movs	r3, #3
 800e7e2:	e015      	b.n	800e810 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e7e4:	78fb      	ldrb	r3, [r7, #3]
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f001 fed4 	bl	8010596 <USBD_LL_GetRxDataSize>
 800e7ee:	4602      	mov	r2, r0
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e7fc:	68db      	ldr	r3, [r3, #12]
 800e7fe:	68fa      	ldr	r2, [r7, #12]
 800e800:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e804:	68fa      	ldr	r2, [r7, #12]
 800e806:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e80a:	4611      	mov	r1, r2
 800e80c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e80e:	2300      	movs	r3, #0
}
 800e810:	4618      	mov	r0, r3
 800e812:	3710      	adds	r7, #16
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b084      	sub	sp, #16
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e826:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d101      	bne.n	800e832 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e82e:	2303      	movs	r3, #3
 800e830:	e01a      	b.n	800e868 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d014      	beq.n	800e866 <USBD_CDC_EP0_RxReady+0x4e>
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e842:	2bff      	cmp	r3, #255	@ 0xff
 800e844:	d00f      	beq.n	800e866 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e84c:	689b      	ldr	r3, [r3, #8]
 800e84e:	68fa      	ldr	r2, [r7, #12]
 800e850:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800e854:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e856:	68fa      	ldr	r2, [r7, #12]
 800e858:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e85c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	22ff      	movs	r2, #255	@ 0xff
 800e862:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e866:	2300      	movs	r3, #0
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3710      	adds	r7, #16
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e870:	b480      	push	{r7}
 800e872:	b083      	sub	sp, #12
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2243      	movs	r2, #67	@ 0x43
 800e87c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e87e:	4b03      	ldr	r3, [pc, #12]	@ (800e88c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e880:	4618      	mov	r0, r3
 800e882:	370c      	adds	r7, #12
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr
 800e88c:	200000b4 	.word	0x200000b4

0800e890 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e890:	b480      	push	{r7}
 800e892:	b083      	sub	sp, #12
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2243      	movs	r2, #67	@ 0x43
 800e89c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e89e:	4b03      	ldr	r3, [pc, #12]	@ (800e8ac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	370c      	adds	r7, #12
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr
 800e8ac:	20000070 	.word	0x20000070

0800e8b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b083      	sub	sp, #12
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2243      	movs	r2, #67	@ 0x43
 800e8bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e8be:	4b03      	ldr	r3, [pc, #12]	@ (800e8cc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	370c      	adds	r7, #12
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr
 800e8cc:	200000f8 	.word	0x200000f8

0800e8d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b083      	sub	sp, #12
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	220a      	movs	r2, #10
 800e8dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e8de:	4b03      	ldr	r3, [pc, #12]	@ (800e8ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	370c      	adds	r7, #12
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr
 800e8ec:	2000002c 	.word	0x2000002c

0800e8f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	b083      	sub	sp, #12
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d101      	bne.n	800e904 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e900:	2303      	movs	r3, #3
 800e902:	e004      	b.n	800e90e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	683a      	ldr	r2, [r7, #0]
 800e908:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800e90c:	2300      	movs	r3, #0
}
 800e90e:	4618      	mov	r0, r3
 800e910:	370c      	adds	r7, #12
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr

0800e91a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e91a:	b480      	push	{r7}
 800e91c:	b087      	sub	sp, #28
 800e91e:	af00      	add	r7, sp, #0
 800e920:	60f8      	str	r0, [r7, #12]
 800e922:	60b9      	str	r1, [r7, #8]
 800e924:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e92c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d101      	bne.n	800e938 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e934:	2303      	movs	r3, #3
 800e936:	e008      	b.n	800e94a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	68ba      	ldr	r2, [r7, #8]
 800e93c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e948:	2300      	movs	r3, #0
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	371c      	adds	r7, #28
 800e94e:	46bd      	mov	sp, r7
 800e950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e954:	4770      	bx	lr

0800e956 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e956:	b480      	push	{r7}
 800e958:	b085      	sub	sp, #20
 800e95a:	af00      	add	r7, sp, #0
 800e95c:	6078      	str	r0, [r7, #4]
 800e95e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e966:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d101      	bne.n	800e972 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e96e:	2303      	movs	r3, #3
 800e970:	e004      	b.n	800e97c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	683a      	ldr	r2, [r7, #0]
 800e976:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e97a:	2300      	movs	r3, #0
}
 800e97c:	4618      	mov	r0, r3
 800e97e:	3714      	adds	r7, #20
 800e980:	46bd      	mov	sp, r7
 800e982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e986:	4770      	bx	lr

0800e988 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b084      	sub	sp, #16
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e996:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e998:	2301      	movs	r3, #1
 800e99a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d101      	bne.n	800e9aa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e9a6:	2303      	movs	r3, #3
 800e9a8:	e01a      	b.n	800e9e0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d114      	bne.n	800e9de <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	2201      	movs	r2, #1
 800e9b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e9d2:	2181      	movs	r1, #129	@ 0x81
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f001 fd9c 	bl	8010512 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3710      	adds	r7, #16
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e9f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d101      	bne.n	800ea06 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ea02:	2303      	movs	r3, #3
 800ea04:	e016      	b.n	800ea34 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	7c1b      	ldrb	r3, [r3, #16]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d109      	bne.n	800ea22 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ea14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ea18:	2101      	movs	r1, #1
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f001 fd9a 	bl	8010554 <USBD_LL_PrepareReceive>
 800ea20:	e007      	b.n	800ea32 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ea28:	2340      	movs	r3, #64	@ 0x40
 800ea2a:	2101      	movs	r1, #1
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f001 fd91 	bl	8010554 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ea32:	2300      	movs	r3, #0
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3710      	adds	r7, #16
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b086      	sub	sp, #24
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	60b9      	str	r1, [r7, #8]
 800ea46:	4613      	mov	r3, r2
 800ea48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d101      	bne.n	800ea54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ea50:	2303      	movs	r3, #3
 800ea52:	e01f      	b.n	800ea94 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2200      	movs	r2, #0
 800ea58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	2200      	movs	r2, #0
 800ea68:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d003      	beq.n	800ea7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	68ba      	ldr	r2, [r7, #8]
 800ea76:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	2201      	movs	r2, #1
 800ea7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	79fa      	ldrb	r2, [r7, #7]
 800ea86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ea88:	68f8      	ldr	r0, [r7, #12]
 800ea8a:	f001 fbf9 	bl	8010280 <USBD_LL_Init>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ea92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3718      	adds	r7, #24
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b084      	sub	sp, #16
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d101      	bne.n	800eab4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800eab0:	2303      	movs	r3, #3
 800eab2:	e016      	b.n	800eae2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	683a      	ldr	r2, [r7, #0]
 800eab8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d00b      	beq.n	800eae0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ead0:	f107 020e 	add.w	r2, r7, #14
 800ead4:	4610      	mov	r0, r2
 800ead6:	4798      	blx	r3
 800ead8:	4602      	mov	r2, r0
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800eae0:	2300      	movs	r3, #0
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3710      	adds	r7, #16
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}

0800eaea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800eaea:	b580      	push	{r7, lr}
 800eaec:	b082      	sub	sp, #8
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f001 fc24 	bl	8010340 <USBD_LL_Start>
 800eaf8:	4603      	mov	r3, r0
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3708      	adds	r7, #8
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}

0800eb02 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800eb02:	b480      	push	{r7}
 800eb04:	b083      	sub	sp, #12
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eb0a:	2300      	movs	r3, #0
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	370c      	adds	r7, #12
 800eb10:	46bd      	mov	sp, r7
 800eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb16:	4770      	bx	lr

0800eb18 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	460b      	mov	r3, r1
 800eb22:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800eb24:	2303      	movs	r3, #3
 800eb26:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d009      	beq.n	800eb46 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	78fa      	ldrb	r2, [r7, #3]
 800eb3c:	4611      	mov	r1, r2
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	4798      	blx	r3
 800eb42:	4603      	mov	r3, r0
 800eb44:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800eb46:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3710      	adds	r7, #16
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	460b      	mov	r3, r1
 800eb5a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d007      	beq.n	800eb76 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	78fa      	ldrb	r2, [r7, #3]
 800eb70:	4611      	mov	r1, r2
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	4798      	blx	r3
  }

  return USBD_OK;
 800eb76:	2300      	movs	r3, #0
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3708      	adds	r7, #8
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b084      	sub	sp, #16
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eb90:	6839      	ldr	r1, [r7, #0]
 800eb92:	4618      	mov	r0, r3
 800eb94:	f000 ff46 	bl	800fa24 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2201      	movs	r2, #1
 800eb9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800eba6:	461a      	mov	r2, r3
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ebb4:	f003 031f 	and.w	r3, r3, #31
 800ebb8:	2b02      	cmp	r3, #2
 800ebba:	d01a      	beq.n	800ebf2 <USBD_LL_SetupStage+0x72>
 800ebbc:	2b02      	cmp	r3, #2
 800ebbe:	d822      	bhi.n	800ec06 <USBD_LL_SetupStage+0x86>
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d002      	beq.n	800ebca <USBD_LL_SetupStage+0x4a>
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d00a      	beq.n	800ebde <USBD_LL_SetupStage+0x5e>
 800ebc8:	e01d      	b.n	800ec06 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f000 f9ee 	bl	800efb4 <USBD_StdDevReq>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	73fb      	strb	r3, [r7, #15]
      break;
 800ebdc:	e020      	b.n	800ec20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ebe4:	4619      	mov	r1, r3
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 fa52 	bl	800f090 <USBD_StdItfReq>
 800ebec:	4603      	mov	r3, r0
 800ebee:	73fb      	strb	r3, [r7, #15]
      break;
 800ebf0:	e016      	b.n	800ec20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f000 fa91 	bl	800f122 <USBD_StdEPReq>
 800ec00:	4603      	mov	r3, r0
 800ec02:	73fb      	strb	r3, [r7, #15]
      break;
 800ec04:	e00c      	b.n	800ec20 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ec0c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ec10:	b2db      	uxtb	r3, r3
 800ec12:	4619      	mov	r1, r3
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f001 fbf3 	bl	8010400 <USBD_LL_StallEP>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	73fb      	strb	r3, [r7, #15]
      break;
 800ec1e:	bf00      	nop
  }

  return ret;
 800ec20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3710      	adds	r7, #16
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}

0800ec2a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ec2a:	b580      	push	{r7, lr}
 800ec2c:	b086      	sub	sp, #24
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	60f8      	str	r0, [r7, #12]
 800ec32:	460b      	mov	r3, r1
 800ec34:	607a      	str	r2, [r7, #4]
 800ec36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ec38:	7afb      	ldrb	r3, [r7, #11]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d138      	bne.n	800ecb0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ec44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ec4c:	2b03      	cmp	r3, #3
 800ec4e:	d14a      	bne.n	800ece6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	689a      	ldr	r2, [r3, #8]
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	68db      	ldr	r3, [r3, #12]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d913      	bls.n	800ec84 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	689a      	ldr	r2, [r3, #8]
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	68db      	ldr	r3, [r3, #12]
 800ec64:	1ad2      	subs	r2, r2, r3
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	68da      	ldr	r2, [r3, #12]
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	689b      	ldr	r3, [r3, #8]
 800ec72:	4293      	cmp	r3, r2
 800ec74:	bf28      	it	cs
 800ec76:	4613      	movcs	r3, r2
 800ec78:	461a      	mov	r2, r3
 800ec7a:	6879      	ldr	r1, [r7, #4]
 800ec7c:	68f8      	ldr	r0, [r7, #12]
 800ec7e:	f000 ffc5 	bl	800fc0c <USBD_CtlContinueRx>
 800ec82:	e030      	b.n	800ece6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec8a:	b2db      	uxtb	r3, r3
 800ec8c:	2b03      	cmp	r3, #3
 800ec8e:	d10b      	bne.n	800eca8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec96:	691b      	ldr	r3, [r3, #16]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d005      	beq.n	800eca8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eca2:	691b      	ldr	r3, [r3, #16]
 800eca4:	68f8      	ldr	r0, [r7, #12]
 800eca6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800eca8:	68f8      	ldr	r0, [r7, #12]
 800ecaa:	f000 ffc0 	bl	800fc2e <USBD_CtlSendStatus>
 800ecae:	e01a      	b.n	800ece6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ecb6:	b2db      	uxtb	r3, r3
 800ecb8:	2b03      	cmp	r3, #3
 800ecba:	d114      	bne.n	800ece6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ecc2:	699b      	ldr	r3, [r3, #24]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d00e      	beq.n	800ece6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ecce:	699b      	ldr	r3, [r3, #24]
 800ecd0:	7afa      	ldrb	r2, [r7, #11]
 800ecd2:	4611      	mov	r1, r2
 800ecd4:	68f8      	ldr	r0, [r7, #12]
 800ecd6:	4798      	blx	r3
 800ecd8:	4603      	mov	r3, r0
 800ecda:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ecdc:	7dfb      	ldrb	r3, [r7, #23]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d001      	beq.n	800ece6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ece2:	7dfb      	ldrb	r3, [r7, #23]
 800ece4:	e000      	b.n	800ece8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ece6:	2300      	movs	r3, #0
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	3718      	adds	r7, #24
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b086      	sub	sp, #24
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	607a      	str	r2, [r7, #4]
 800ecfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ecfe:	7afb      	ldrb	r3, [r7, #11]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d16b      	bne.n	800eddc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	3314      	adds	r3, #20
 800ed08:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ed10:	2b02      	cmp	r3, #2
 800ed12:	d156      	bne.n	800edc2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ed14:	693b      	ldr	r3, [r7, #16]
 800ed16:	689a      	ldr	r2, [r3, #8]
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	68db      	ldr	r3, [r3, #12]
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	d914      	bls.n	800ed4a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	689a      	ldr	r2, [r3, #8]
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	1ad2      	subs	r2, r2, r3
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	689b      	ldr	r3, [r3, #8]
 800ed32:	461a      	mov	r2, r3
 800ed34:	6879      	ldr	r1, [r7, #4]
 800ed36:	68f8      	ldr	r0, [r7, #12]
 800ed38:	f000 ff3a 	bl	800fbb0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	2200      	movs	r2, #0
 800ed40:	2100      	movs	r1, #0
 800ed42:	68f8      	ldr	r0, [r7, #12]
 800ed44:	f001 fc06 	bl	8010554 <USBD_LL_PrepareReceive>
 800ed48:	e03b      	b.n	800edc2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	68da      	ldr	r2, [r3, #12]
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	689b      	ldr	r3, [r3, #8]
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d11c      	bne.n	800ed90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ed56:	693b      	ldr	r3, [r7, #16]
 800ed58:	685a      	ldr	r2, [r3, #4]
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d316      	bcc.n	800ed90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	685a      	ldr	r2, [r3, #4]
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d20f      	bcs.n	800ed90 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ed70:	2200      	movs	r2, #0
 800ed72:	2100      	movs	r1, #0
 800ed74:	68f8      	ldr	r0, [r7, #12]
 800ed76:	f000 ff1b 	bl	800fbb0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ed82:	2300      	movs	r3, #0
 800ed84:	2200      	movs	r2, #0
 800ed86:	2100      	movs	r1, #0
 800ed88:	68f8      	ldr	r0, [r7, #12]
 800ed8a:	f001 fbe3 	bl	8010554 <USBD_LL_PrepareReceive>
 800ed8e:	e018      	b.n	800edc2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed96:	b2db      	uxtb	r3, r3
 800ed98:	2b03      	cmp	r3, #3
 800ed9a:	d10b      	bne.n	800edb4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eda2:	68db      	ldr	r3, [r3, #12]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d005      	beq.n	800edb4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edae:	68db      	ldr	r3, [r3, #12]
 800edb0:	68f8      	ldr	r0, [r7, #12]
 800edb2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800edb4:	2180      	movs	r1, #128	@ 0x80
 800edb6:	68f8      	ldr	r0, [r7, #12]
 800edb8:	f001 fb22 	bl	8010400 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800edbc:	68f8      	ldr	r0, [r7, #12]
 800edbe:	f000 ff49 	bl	800fc54 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800edc8:	2b01      	cmp	r3, #1
 800edca:	d122      	bne.n	800ee12 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800edcc:	68f8      	ldr	r0, [r7, #12]
 800edce:	f7ff fe98 	bl	800eb02 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	2200      	movs	r2, #0
 800edd6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800edda:	e01a      	b.n	800ee12 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ede2:	b2db      	uxtb	r3, r3
 800ede4:	2b03      	cmp	r3, #3
 800ede6:	d114      	bne.n	800ee12 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edee:	695b      	ldr	r3, [r3, #20]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d00e      	beq.n	800ee12 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edfa:	695b      	ldr	r3, [r3, #20]
 800edfc:	7afa      	ldrb	r2, [r7, #11]
 800edfe:	4611      	mov	r1, r2
 800ee00:	68f8      	ldr	r0, [r7, #12]
 800ee02:	4798      	blx	r3
 800ee04:	4603      	mov	r3, r0
 800ee06:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ee08:	7dfb      	ldrb	r3, [r7, #23]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d001      	beq.n	800ee12 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ee0e:	7dfb      	ldrb	r3, [r7, #23]
 800ee10:	e000      	b.n	800ee14 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ee12:	2300      	movs	r3, #0
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3718      	adds	r7, #24
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}

0800ee1c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b082      	sub	sp, #8
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2201      	movs	r2, #1
 800ee28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2200      	movs	r2, #0
 800ee38:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d101      	bne.n	800ee50 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ee4c:	2303      	movs	r3, #3
 800ee4e:	e02f      	b.n	800eeb0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d00f      	beq.n	800ee7a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d009      	beq.n	800ee7a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee6c:	685b      	ldr	r3, [r3, #4]
 800ee6e:	687a      	ldr	r2, [r7, #4]
 800ee70:	6852      	ldr	r2, [r2, #4]
 800ee72:	b2d2      	uxtb	r2, r2
 800ee74:	4611      	mov	r1, r2
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ee7a:	2340      	movs	r3, #64	@ 0x40
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	2100      	movs	r1, #0
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f001 fa78 	bl	8010376 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2201      	movs	r2, #1
 800ee8a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2240      	movs	r2, #64	@ 0x40
 800ee92:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ee96:	2340      	movs	r3, #64	@ 0x40
 800ee98:	2200      	movs	r2, #0
 800ee9a:	2180      	movs	r1, #128	@ 0x80
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f001 fa6a 	bl	8010376 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2201      	movs	r2, #1
 800eea6:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2240      	movs	r2, #64	@ 0x40
 800eeac:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800eeae:	2300      	movs	r3, #0
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3708      	adds	r7, #8
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b083      	sub	sp, #12
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	460b      	mov	r3, r1
 800eec2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	78fa      	ldrb	r2, [r7, #3]
 800eec8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eeca:	2300      	movs	r3, #0
}
 800eecc:	4618      	mov	r0, r3
 800eece:	370c      	adds	r7, #12
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr

0800eed8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b083      	sub	sp, #12
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eee6:	b2da      	uxtb	r2, r3
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2204      	movs	r2, #4
 800eef2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800eef6:	2300      	movs	r3, #0
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	370c      	adds	r7, #12
 800eefc:	46bd      	mov	sp, r7
 800eefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef02:	4770      	bx	lr

0800ef04 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ef04:	b480      	push	{r7}
 800ef06:	b083      	sub	sp, #12
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef12:	b2db      	uxtb	r3, r3
 800ef14:	2b04      	cmp	r3, #4
 800ef16:	d106      	bne.n	800ef26 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ef1e:	b2da      	uxtb	r2, r3
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ef26:	2300      	movs	r3, #0
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	370c      	adds	r7, #12
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr

0800ef34 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b082      	sub	sp, #8
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d101      	bne.n	800ef4a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ef46:	2303      	movs	r3, #3
 800ef48:	e012      	b.n	800ef70 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef50:	b2db      	uxtb	r3, r3
 800ef52:	2b03      	cmp	r3, #3
 800ef54:	d10b      	bne.n	800ef6e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef5c:	69db      	ldr	r3, [r3, #28]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d005      	beq.n	800ef6e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef68:	69db      	ldr	r3, [r3, #28]
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ef6e:	2300      	movs	r3, #0
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3708      	adds	r7, #8
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b087      	sub	sp, #28
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	3301      	adds	r3, #1
 800ef8e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	781b      	ldrb	r3, [r3, #0]
 800ef94:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ef96:	8a3b      	ldrh	r3, [r7, #16]
 800ef98:	021b      	lsls	r3, r3, #8
 800ef9a:	b21a      	sxth	r2, r3
 800ef9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800efa0:	4313      	orrs	r3, r2
 800efa2:	b21b      	sxth	r3, r3
 800efa4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800efa6:	89fb      	ldrh	r3, [r7, #14]
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	371c      	adds	r7, #28
 800efac:	46bd      	mov	sp, r7
 800efae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb2:	4770      	bx	lr

0800efb4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b084      	sub	sp, #16
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800efbe:	2300      	movs	r3, #0
 800efc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800efca:	2b40      	cmp	r3, #64	@ 0x40
 800efcc:	d005      	beq.n	800efda <USBD_StdDevReq+0x26>
 800efce:	2b40      	cmp	r3, #64	@ 0x40
 800efd0:	d853      	bhi.n	800f07a <USBD_StdDevReq+0xc6>
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d00b      	beq.n	800efee <USBD_StdDevReq+0x3a>
 800efd6:	2b20      	cmp	r3, #32
 800efd8:	d14f      	bne.n	800f07a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800efe0:	689b      	ldr	r3, [r3, #8]
 800efe2:	6839      	ldr	r1, [r7, #0]
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	4798      	blx	r3
 800efe8:	4603      	mov	r3, r0
 800efea:	73fb      	strb	r3, [r7, #15]
      break;
 800efec:	e04a      	b.n	800f084 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	785b      	ldrb	r3, [r3, #1]
 800eff2:	2b09      	cmp	r3, #9
 800eff4:	d83b      	bhi.n	800f06e <USBD_StdDevReq+0xba>
 800eff6:	a201      	add	r2, pc, #4	@ (adr r2, 800effc <USBD_StdDevReq+0x48>)
 800eff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800effc:	0800f051 	.word	0x0800f051
 800f000:	0800f065 	.word	0x0800f065
 800f004:	0800f06f 	.word	0x0800f06f
 800f008:	0800f05b 	.word	0x0800f05b
 800f00c:	0800f06f 	.word	0x0800f06f
 800f010:	0800f02f 	.word	0x0800f02f
 800f014:	0800f025 	.word	0x0800f025
 800f018:	0800f06f 	.word	0x0800f06f
 800f01c:	0800f047 	.word	0x0800f047
 800f020:	0800f039 	.word	0x0800f039
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f024:	6839      	ldr	r1, [r7, #0]
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f000 f9de 	bl	800f3e8 <USBD_GetDescriptor>
          break;
 800f02c:	e024      	b.n	800f078 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f02e:	6839      	ldr	r1, [r7, #0]
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f000 fb6d 	bl	800f710 <USBD_SetAddress>
          break;
 800f036:	e01f      	b.n	800f078 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f038:	6839      	ldr	r1, [r7, #0]
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f000 fbac 	bl	800f798 <USBD_SetConfig>
 800f040:	4603      	mov	r3, r0
 800f042:	73fb      	strb	r3, [r7, #15]
          break;
 800f044:	e018      	b.n	800f078 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f046:	6839      	ldr	r1, [r7, #0]
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f000 fc4b 	bl	800f8e4 <USBD_GetConfig>
          break;
 800f04e:	e013      	b.n	800f078 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f050:	6839      	ldr	r1, [r7, #0]
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f000 fc7c 	bl	800f950 <USBD_GetStatus>
          break;
 800f058:	e00e      	b.n	800f078 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f05a:	6839      	ldr	r1, [r7, #0]
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f000 fcab 	bl	800f9b8 <USBD_SetFeature>
          break;
 800f062:	e009      	b.n	800f078 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f064:	6839      	ldr	r1, [r7, #0]
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f000 fcba 	bl	800f9e0 <USBD_ClrFeature>
          break;
 800f06c:	e004      	b.n	800f078 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f06e:	6839      	ldr	r1, [r7, #0]
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f000 fd11 	bl	800fa98 <USBD_CtlError>
          break;
 800f076:	bf00      	nop
      }
      break;
 800f078:	e004      	b.n	800f084 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f07a:	6839      	ldr	r1, [r7, #0]
 800f07c:	6878      	ldr	r0, [r7, #4]
 800f07e:	f000 fd0b 	bl	800fa98 <USBD_CtlError>
      break;
 800f082:	bf00      	nop
  }

  return ret;
 800f084:	7bfb      	ldrb	r3, [r7, #15]
}
 800f086:	4618      	mov	r0, r3
 800f088:	3710      	adds	r7, #16
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
 800f08e:	bf00      	nop

0800f090 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f09a:	2300      	movs	r3, #0
 800f09c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f0a6:	2b40      	cmp	r3, #64	@ 0x40
 800f0a8:	d005      	beq.n	800f0b6 <USBD_StdItfReq+0x26>
 800f0aa:	2b40      	cmp	r3, #64	@ 0x40
 800f0ac:	d82f      	bhi.n	800f10e <USBD_StdItfReq+0x7e>
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d001      	beq.n	800f0b6 <USBD_StdItfReq+0x26>
 800f0b2:	2b20      	cmp	r3, #32
 800f0b4:	d12b      	bne.n	800f10e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0bc:	b2db      	uxtb	r3, r3
 800f0be:	3b01      	subs	r3, #1
 800f0c0:	2b02      	cmp	r3, #2
 800f0c2:	d81d      	bhi.n	800f100 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	889b      	ldrh	r3, [r3, #4]
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	2b01      	cmp	r3, #1
 800f0cc:	d813      	bhi.n	800f0f6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0d4:	689b      	ldr	r3, [r3, #8]
 800f0d6:	6839      	ldr	r1, [r7, #0]
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	4798      	blx	r3
 800f0dc:	4603      	mov	r3, r0
 800f0de:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	88db      	ldrh	r3, [r3, #6]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d110      	bne.n	800f10a <USBD_StdItfReq+0x7a>
 800f0e8:	7bfb      	ldrb	r3, [r7, #15]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d10d      	bne.n	800f10a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f000 fd9d 	bl	800fc2e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f0f4:	e009      	b.n	800f10a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f0f6:	6839      	ldr	r1, [r7, #0]
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f000 fccd 	bl	800fa98 <USBD_CtlError>
          break;
 800f0fe:	e004      	b.n	800f10a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f100:	6839      	ldr	r1, [r7, #0]
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f000 fcc8 	bl	800fa98 <USBD_CtlError>
          break;
 800f108:	e000      	b.n	800f10c <USBD_StdItfReq+0x7c>
          break;
 800f10a:	bf00      	nop
      }
      break;
 800f10c:	e004      	b.n	800f118 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f10e:	6839      	ldr	r1, [r7, #0]
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f000 fcc1 	bl	800fa98 <USBD_CtlError>
      break;
 800f116:	bf00      	nop
  }

  return ret;
 800f118:	7bfb      	ldrb	r3, [r7, #15]
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3710      	adds	r7, #16
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}

0800f122 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f122:	b580      	push	{r7, lr}
 800f124:	b084      	sub	sp, #16
 800f126:	af00      	add	r7, sp, #0
 800f128:	6078      	str	r0, [r7, #4]
 800f12a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f12c:	2300      	movs	r3, #0
 800f12e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	889b      	ldrh	r3, [r3, #4]
 800f134:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f13e:	2b40      	cmp	r3, #64	@ 0x40
 800f140:	d007      	beq.n	800f152 <USBD_StdEPReq+0x30>
 800f142:	2b40      	cmp	r3, #64	@ 0x40
 800f144:	f200 8145 	bhi.w	800f3d2 <USBD_StdEPReq+0x2b0>
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d00c      	beq.n	800f166 <USBD_StdEPReq+0x44>
 800f14c:	2b20      	cmp	r3, #32
 800f14e:	f040 8140 	bne.w	800f3d2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f158:	689b      	ldr	r3, [r3, #8]
 800f15a:	6839      	ldr	r1, [r7, #0]
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	4798      	blx	r3
 800f160:	4603      	mov	r3, r0
 800f162:	73fb      	strb	r3, [r7, #15]
      break;
 800f164:	e13a      	b.n	800f3dc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	785b      	ldrb	r3, [r3, #1]
 800f16a:	2b03      	cmp	r3, #3
 800f16c:	d007      	beq.n	800f17e <USBD_StdEPReq+0x5c>
 800f16e:	2b03      	cmp	r3, #3
 800f170:	f300 8129 	bgt.w	800f3c6 <USBD_StdEPReq+0x2a4>
 800f174:	2b00      	cmp	r3, #0
 800f176:	d07f      	beq.n	800f278 <USBD_StdEPReq+0x156>
 800f178:	2b01      	cmp	r3, #1
 800f17a:	d03c      	beq.n	800f1f6 <USBD_StdEPReq+0xd4>
 800f17c:	e123      	b.n	800f3c6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f184:	b2db      	uxtb	r3, r3
 800f186:	2b02      	cmp	r3, #2
 800f188:	d002      	beq.n	800f190 <USBD_StdEPReq+0x6e>
 800f18a:	2b03      	cmp	r3, #3
 800f18c:	d016      	beq.n	800f1bc <USBD_StdEPReq+0x9a>
 800f18e:	e02c      	b.n	800f1ea <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f190:	7bbb      	ldrb	r3, [r7, #14]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d00d      	beq.n	800f1b2 <USBD_StdEPReq+0x90>
 800f196:	7bbb      	ldrb	r3, [r7, #14]
 800f198:	2b80      	cmp	r3, #128	@ 0x80
 800f19a:	d00a      	beq.n	800f1b2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f19c:	7bbb      	ldrb	r3, [r7, #14]
 800f19e:	4619      	mov	r1, r3
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f001 f92d 	bl	8010400 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f1a6:	2180      	movs	r1, #128	@ 0x80
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f001 f929 	bl	8010400 <USBD_LL_StallEP>
 800f1ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f1b0:	e020      	b.n	800f1f4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f1b2:	6839      	ldr	r1, [r7, #0]
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f000 fc6f 	bl	800fa98 <USBD_CtlError>
              break;
 800f1ba:	e01b      	b.n	800f1f4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	885b      	ldrh	r3, [r3, #2]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d10e      	bne.n	800f1e2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f1c4:	7bbb      	ldrb	r3, [r7, #14]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d00b      	beq.n	800f1e2 <USBD_StdEPReq+0xc0>
 800f1ca:	7bbb      	ldrb	r3, [r7, #14]
 800f1cc:	2b80      	cmp	r3, #128	@ 0x80
 800f1ce:	d008      	beq.n	800f1e2 <USBD_StdEPReq+0xc0>
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	88db      	ldrh	r3, [r3, #6]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d104      	bne.n	800f1e2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f1d8:	7bbb      	ldrb	r3, [r7, #14]
 800f1da:	4619      	mov	r1, r3
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f001 f90f 	bl	8010400 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f000 fd23 	bl	800fc2e <USBD_CtlSendStatus>

              break;
 800f1e8:	e004      	b.n	800f1f4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f1ea:	6839      	ldr	r1, [r7, #0]
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f000 fc53 	bl	800fa98 <USBD_CtlError>
              break;
 800f1f2:	bf00      	nop
          }
          break;
 800f1f4:	e0ec      	b.n	800f3d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1fc:	b2db      	uxtb	r3, r3
 800f1fe:	2b02      	cmp	r3, #2
 800f200:	d002      	beq.n	800f208 <USBD_StdEPReq+0xe6>
 800f202:	2b03      	cmp	r3, #3
 800f204:	d016      	beq.n	800f234 <USBD_StdEPReq+0x112>
 800f206:	e030      	b.n	800f26a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f208:	7bbb      	ldrb	r3, [r7, #14]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d00d      	beq.n	800f22a <USBD_StdEPReq+0x108>
 800f20e:	7bbb      	ldrb	r3, [r7, #14]
 800f210:	2b80      	cmp	r3, #128	@ 0x80
 800f212:	d00a      	beq.n	800f22a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f214:	7bbb      	ldrb	r3, [r7, #14]
 800f216:	4619      	mov	r1, r3
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f001 f8f1 	bl	8010400 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f21e:	2180      	movs	r1, #128	@ 0x80
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f001 f8ed 	bl	8010400 <USBD_LL_StallEP>
 800f226:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f228:	e025      	b.n	800f276 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f22a:	6839      	ldr	r1, [r7, #0]
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f000 fc33 	bl	800fa98 <USBD_CtlError>
              break;
 800f232:	e020      	b.n	800f276 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	885b      	ldrh	r3, [r3, #2]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d11b      	bne.n	800f274 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f23c:	7bbb      	ldrb	r3, [r7, #14]
 800f23e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f242:	2b00      	cmp	r3, #0
 800f244:	d004      	beq.n	800f250 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f246:	7bbb      	ldrb	r3, [r7, #14]
 800f248:	4619      	mov	r1, r3
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f001 f8f7 	bl	801043e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f000 fcec 	bl	800fc2e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f25c:	689b      	ldr	r3, [r3, #8]
 800f25e:	6839      	ldr	r1, [r7, #0]
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	4798      	blx	r3
 800f264:	4603      	mov	r3, r0
 800f266:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f268:	e004      	b.n	800f274 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f26a:	6839      	ldr	r1, [r7, #0]
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f000 fc13 	bl	800fa98 <USBD_CtlError>
              break;
 800f272:	e000      	b.n	800f276 <USBD_StdEPReq+0x154>
              break;
 800f274:	bf00      	nop
          }
          break;
 800f276:	e0ab      	b.n	800f3d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f27e:	b2db      	uxtb	r3, r3
 800f280:	2b02      	cmp	r3, #2
 800f282:	d002      	beq.n	800f28a <USBD_StdEPReq+0x168>
 800f284:	2b03      	cmp	r3, #3
 800f286:	d032      	beq.n	800f2ee <USBD_StdEPReq+0x1cc>
 800f288:	e097      	b.n	800f3ba <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f28a:	7bbb      	ldrb	r3, [r7, #14]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d007      	beq.n	800f2a0 <USBD_StdEPReq+0x17e>
 800f290:	7bbb      	ldrb	r3, [r7, #14]
 800f292:	2b80      	cmp	r3, #128	@ 0x80
 800f294:	d004      	beq.n	800f2a0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f296:	6839      	ldr	r1, [r7, #0]
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f000 fbfd 	bl	800fa98 <USBD_CtlError>
                break;
 800f29e:	e091      	b.n	800f3c4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	da0b      	bge.n	800f2c0 <USBD_StdEPReq+0x19e>
 800f2a8:	7bbb      	ldrb	r3, [r7, #14]
 800f2aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f2ae:	4613      	mov	r3, r2
 800f2b0:	009b      	lsls	r3, r3, #2
 800f2b2:	4413      	add	r3, r2
 800f2b4:	009b      	lsls	r3, r3, #2
 800f2b6:	3310      	adds	r3, #16
 800f2b8:	687a      	ldr	r2, [r7, #4]
 800f2ba:	4413      	add	r3, r2
 800f2bc:	3304      	adds	r3, #4
 800f2be:	e00b      	b.n	800f2d8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f2c0:	7bbb      	ldrb	r3, [r7, #14]
 800f2c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2c6:	4613      	mov	r3, r2
 800f2c8:	009b      	lsls	r3, r3, #2
 800f2ca:	4413      	add	r3, r2
 800f2cc:	009b      	lsls	r3, r3, #2
 800f2ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	4413      	add	r3, r2
 800f2d6:	3304      	adds	r3, #4
 800f2d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	2200      	movs	r2, #0
 800f2de:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	2202      	movs	r2, #2
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f000 fc47 	bl	800fb7a <USBD_CtlSendData>
              break;
 800f2ec:	e06a      	b.n	800f3c4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f2ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	da11      	bge.n	800f31a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f2f6:	7bbb      	ldrb	r3, [r7, #14]
 800f2f8:	f003 020f 	and.w	r2, r3, #15
 800f2fc:	6879      	ldr	r1, [r7, #4]
 800f2fe:	4613      	mov	r3, r2
 800f300:	009b      	lsls	r3, r3, #2
 800f302:	4413      	add	r3, r2
 800f304:	009b      	lsls	r3, r3, #2
 800f306:	440b      	add	r3, r1
 800f308:	3324      	adds	r3, #36	@ 0x24
 800f30a:	881b      	ldrh	r3, [r3, #0]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d117      	bne.n	800f340 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f310:	6839      	ldr	r1, [r7, #0]
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f000 fbc0 	bl	800fa98 <USBD_CtlError>
                  break;
 800f318:	e054      	b.n	800f3c4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f31a:	7bbb      	ldrb	r3, [r7, #14]
 800f31c:	f003 020f 	and.w	r2, r3, #15
 800f320:	6879      	ldr	r1, [r7, #4]
 800f322:	4613      	mov	r3, r2
 800f324:	009b      	lsls	r3, r3, #2
 800f326:	4413      	add	r3, r2
 800f328:	009b      	lsls	r3, r3, #2
 800f32a:	440b      	add	r3, r1
 800f32c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f330:	881b      	ldrh	r3, [r3, #0]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d104      	bne.n	800f340 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f336:	6839      	ldr	r1, [r7, #0]
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f000 fbad 	bl	800fa98 <USBD_CtlError>
                  break;
 800f33e:	e041      	b.n	800f3c4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f344:	2b00      	cmp	r3, #0
 800f346:	da0b      	bge.n	800f360 <USBD_StdEPReq+0x23e>
 800f348:	7bbb      	ldrb	r3, [r7, #14]
 800f34a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f34e:	4613      	mov	r3, r2
 800f350:	009b      	lsls	r3, r3, #2
 800f352:	4413      	add	r3, r2
 800f354:	009b      	lsls	r3, r3, #2
 800f356:	3310      	adds	r3, #16
 800f358:	687a      	ldr	r2, [r7, #4]
 800f35a:	4413      	add	r3, r2
 800f35c:	3304      	adds	r3, #4
 800f35e:	e00b      	b.n	800f378 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f360:	7bbb      	ldrb	r3, [r7, #14]
 800f362:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f366:	4613      	mov	r3, r2
 800f368:	009b      	lsls	r3, r3, #2
 800f36a:	4413      	add	r3, r2
 800f36c:	009b      	lsls	r3, r3, #2
 800f36e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f372:	687a      	ldr	r2, [r7, #4]
 800f374:	4413      	add	r3, r2
 800f376:	3304      	adds	r3, #4
 800f378:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f37a:	7bbb      	ldrb	r3, [r7, #14]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d002      	beq.n	800f386 <USBD_StdEPReq+0x264>
 800f380:	7bbb      	ldrb	r3, [r7, #14]
 800f382:	2b80      	cmp	r3, #128	@ 0x80
 800f384:	d103      	bne.n	800f38e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	2200      	movs	r2, #0
 800f38a:	601a      	str	r2, [r3, #0]
 800f38c:	e00e      	b.n	800f3ac <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f38e:	7bbb      	ldrb	r3, [r7, #14]
 800f390:	4619      	mov	r1, r3
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f001 f872 	bl	801047c <USBD_LL_IsStallEP>
 800f398:	4603      	mov	r3, r0
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d003      	beq.n	800f3a6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	2201      	movs	r2, #1
 800f3a2:	601a      	str	r2, [r3, #0]
 800f3a4:	e002      	b.n	800f3ac <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	2202      	movs	r2, #2
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	f000 fbe1 	bl	800fb7a <USBD_CtlSendData>
              break;
 800f3b8:	e004      	b.n	800f3c4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f3ba:	6839      	ldr	r1, [r7, #0]
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f000 fb6b 	bl	800fa98 <USBD_CtlError>
              break;
 800f3c2:	bf00      	nop
          }
          break;
 800f3c4:	e004      	b.n	800f3d0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f3c6:	6839      	ldr	r1, [r7, #0]
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f000 fb65 	bl	800fa98 <USBD_CtlError>
          break;
 800f3ce:	bf00      	nop
      }
      break;
 800f3d0:	e004      	b.n	800f3dc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f3d2:	6839      	ldr	r1, [r7, #0]
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f000 fb5f 	bl	800fa98 <USBD_CtlError>
      break;
 800f3da:	bf00      	nop
  }

  return ret;
 800f3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3710      	adds	r7, #16
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
	...

0800f3e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b084      	sub	sp, #16
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
 800f3f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	885b      	ldrh	r3, [r3, #2]
 800f402:	0a1b      	lsrs	r3, r3, #8
 800f404:	b29b      	uxth	r3, r3
 800f406:	3b01      	subs	r3, #1
 800f408:	2b0e      	cmp	r3, #14
 800f40a:	f200 8152 	bhi.w	800f6b2 <USBD_GetDescriptor+0x2ca>
 800f40e:	a201      	add	r2, pc, #4	@ (adr r2, 800f414 <USBD_GetDescriptor+0x2c>)
 800f410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f414:	0800f485 	.word	0x0800f485
 800f418:	0800f49d 	.word	0x0800f49d
 800f41c:	0800f4dd 	.word	0x0800f4dd
 800f420:	0800f6b3 	.word	0x0800f6b3
 800f424:	0800f6b3 	.word	0x0800f6b3
 800f428:	0800f653 	.word	0x0800f653
 800f42c:	0800f67f 	.word	0x0800f67f
 800f430:	0800f6b3 	.word	0x0800f6b3
 800f434:	0800f6b3 	.word	0x0800f6b3
 800f438:	0800f6b3 	.word	0x0800f6b3
 800f43c:	0800f6b3 	.word	0x0800f6b3
 800f440:	0800f6b3 	.word	0x0800f6b3
 800f444:	0800f6b3 	.word	0x0800f6b3
 800f448:	0800f6b3 	.word	0x0800f6b3
 800f44c:	0800f451 	.word	0x0800f451
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f456:	69db      	ldr	r3, [r3, #28]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d00b      	beq.n	800f474 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f462:	69db      	ldr	r3, [r3, #28]
 800f464:	687a      	ldr	r2, [r7, #4]
 800f466:	7c12      	ldrb	r2, [r2, #16]
 800f468:	f107 0108 	add.w	r1, r7, #8
 800f46c:	4610      	mov	r0, r2
 800f46e:	4798      	blx	r3
 800f470:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f472:	e126      	b.n	800f6c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f474:	6839      	ldr	r1, [r7, #0]
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f000 fb0e 	bl	800fa98 <USBD_CtlError>
        err++;
 800f47c:	7afb      	ldrb	r3, [r7, #11]
 800f47e:	3301      	adds	r3, #1
 800f480:	72fb      	strb	r3, [r7, #11]
      break;
 800f482:	e11e      	b.n	800f6c2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	687a      	ldr	r2, [r7, #4]
 800f48e:	7c12      	ldrb	r2, [r2, #16]
 800f490:	f107 0108 	add.w	r1, r7, #8
 800f494:	4610      	mov	r0, r2
 800f496:	4798      	blx	r3
 800f498:	60f8      	str	r0, [r7, #12]
      break;
 800f49a:	e112      	b.n	800f6c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	7c1b      	ldrb	r3, [r3, #16]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d10d      	bne.n	800f4c0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4ac:	f107 0208 	add.w	r2, r7, #8
 800f4b0:	4610      	mov	r0, r2
 800f4b2:	4798      	blx	r3
 800f4b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	3301      	adds	r3, #1
 800f4ba:	2202      	movs	r2, #2
 800f4bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f4be:	e100      	b.n	800f6c2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4c8:	f107 0208 	add.w	r2, r7, #8
 800f4cc:	4610      	mov	r0, r2
 800f4ce:	4798      	blx	r3
 800f4d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	2202      	movs	r2, #2
 800f4d8:	701a      	strb	r2, [r3, #0]
      break;
 800f4da:	e0f2      	b.n	800f6c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	885b      	ldrh	r3, [r3, #2]
 800f4e0:	b2db      	uxtb	r3, r3
 800f4e2:	2b05      	cmp	r3, #5
 800f4e4:	f200 80ac 	bhi.w	800f640 <USBD_GetDescriptor+0x258>
 800f4e8:	a201      	add	r2, pc, #4	@ (adr r2, 800f4f0 <USBD_GetDescriptor+0x108>)
 800f4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4ee:	bf00      	nop
 800f4f0:	0800f509 	.word	0x0800f509
 800f4f4:	0800f53d 	.word	0x0800f53d
 800f4f8:	0800f571 	.word	0x0800f571
 800f4fc:	0800f5a5 	.word	0x0800f5a5
 800f500:	0800f5d9 	.word	0x0800f5d9
 800f504:	0800f60d 	.word	0x0800f60d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d00b      	beq.n	800f52c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f51a:	685b      	ldr	r3, [r3, #4]
 800f51c:	687a      	ldr	r2, [r7, #4]
 800f51e:	7c12      	ldrb	r2, [r2, #16]
 800f520:	f107 0108 	add.w	r1, r7, #8
 800f524:	4610      	mov	r0, r2
 800f526:	4798      	blx	r3
 800f528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f52a:	e091      	b.n	800f650 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f52c:	6839      	ldr	r1, [r7, #0]
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f000 fab2 	bl	800fa98 <USBD_CtlError>
            err++;
 800f534:	7afb      	ldrb	r3, [r7, #11]
 800f536:	3301      	adds	r3, #1
 800f538:	72fb      	strb	r3, [r7, #11]
          break;
 800f53a:	e089      	b.n	800f650 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f542:	689b      	ldr	r3, [r3, #8]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d00b      	beq.n	800f560 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f54e:	689b      	ldr	r3, [r3, #8]
 800f550:	687a      	ldr	r2, [r7, #4]
 800f552:	7c12      	ldrb	r2, [r2, #16]
 800f554:	f107 0108 	add.w	r1, r7, #8
 800f558:	4610      	mov	r0, r2
 800f55a:	4798      	blx	r3
 800f55c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f55e:	e077      	b.n	800f650 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f560:	6839      	ldr	r1, [r7, #0]
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f000 fa98 	bl	800fa98 <USBD_CtlError>
            err++;
 800f568:	7afb      	ldrb	r3, [r7, #11]
 800f56a:	3301      	adds	r3, #1
 800f56c:	72fb      	strb	r3, [r7, #11]
          break;
 800f56e:	e06f      	b.n	800f650 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f576:	68db      	ldr	r3, [r3, #12]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d00b      	beq.n	800f594 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f582:	68db      	ldr	r3, [r3, #12]
 800f584:	687a      	ldr	r2, [r7, #4]
 800f586:	7c12      	ldrb	r2, [r2, #16]
 800f588:	f107 0108 	add.w	r1, r7, #8
 800f58c:	4610      	mov	r0, r2
 800f58e:	4798      	blx	r3
 800f590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f592:	e05d      	b.n	800f650 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f594:	6839      	ldr	r1, [r7, #0]
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f000 fa7e 	bl	800fa98 <USBD_CtlError>
            err++;
 800f59c:	7afb      	ldrb	r3, [r7, #11]
 800f59e:	3301      	adds	r3, #1
 800f5a0:	72fb      	strb	r3, [r7, #11]
          break;
 800f5a2:	e055      	b.n	800f650 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5aa:	691b      	ldr	r3, [r3, #16]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d00b      	beq.n	800f5c8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5b6:	691b      	ldr	r3, [r3, #16]
 800f5b8:	687a      	ldr	r2, [r7, #4]
 800f5ba:	7c12      	ldrb	r2, [r2, #16]
 800f5bc:	f107 0108 	add.w	r1, r7, #8
 800f5c0:	4610      	mov	r0, r2
 800f5c2:	4798      	blx	r3
 800f5c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5c6:	e043      	b.n	800f650 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f5c8:	6839      	ldr	r1, [r7, #0]
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f000 fa64 	bl	800fa98 <USBD_CtlError>
            err++;
 800f5d0:	7afb      	ldrb	r3, [r7, #11]
 800f5d2:	3301      	adds	r3, #1
 800f5d4:	72fb      	strb	r3, [r7, #11]
          break;
 800f5d6:	e03b      	b.n	800f650 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5de:	695b      	ldr	r3, [r3, #20]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d00b      	beq.n	800f5fc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5ea:	695b      	ldr	r3, [r3, #20]
 800f5ec:	687a      	ldr	r2, [r7, #4]
 800f5ee:	7c12      	ldrb	r2, [r2, #16]
 800f5f0:	f107 0108 	add.w	r1, r7, #8
 800f5f4:	4610      	mov	r0, r2
 800f5f6:	4798      	blx	r3
 800f5f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5fa:	e029      	b.n	800f650 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f5fc:	6839      	ldr	r1, [r7, #0]
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f000 fa4a 	bl	800fa98 <USBD_CtlError>
            err++;
 800f604:	7afb      	ldrb	r3, [r7, #11]
 800f606:	3301      	adds	r3, #1
 800f608:	72fb      	strb	r3, [r7, #11]
          break;
 800f60a:	e021      	b.n	800f650 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f612:	699b      	ldr	r3, [r3, #24]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d00b      	beq.n	800f630 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f61e:	699b      	ldr	r3, [r3, #24]
 800f620:	687a      	ldr	r2, [r7, #4]
 800f622:	7c12      	ldrb	r2, [r2, #16]
 800f624:	f107 0108 	add.w	r1, r7, #8
 800f628:	4610      	mov	r0, r2
 800f62a:	4798      	blx	r3
 800f62c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f62e:	e00f      	b.n	800f650 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f630:	6839      	ldr	r1, [r7, #0]
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f000 fa30 	bl	800fa98 <USBD_CtlError>
            err++;
 800f638:	7afb      	ldrb	r3, [r7, #11]
 800f63a:	3301      	adds	r3, #1
 800f63c:	72fb      	strb	r3, [r7, #11]
          break;
 800f63e:	e007      	b.n	800f650 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f640:	6839      	ldr	r1, [r7, #0]
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f000 fa28 	bl	800fa98 <USBD_CtlError>
          err++;
 800f648:	7afb      	ldrb	r3, [r7, #11]
 800f64a:	3301      	adds	r3, #1
 800f64c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f64e:	bf00      	nop
      }
      break;
 800f650:	e037      	b.n	800f6c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	7c1b      	ldrb	r3, [r3, #16]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d109      	bne.n	800f66e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f662:	f107 0208 	add.w	r2, r7, #8
 800f666:	4610      	mov	r0, r2
 800f668:	4798      	blx	r3
 800f66a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f66c:	e029      	b.n	800f6c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f66e:	6839      	ldr	r1, [r7, #0]
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f000 fa11 	bl	800fa98 <USBD_CtlError>
        err++;
 800f676:	7afb      	ldrb	r3, [r7, #11]
 800f678:	3301      	adds	r3, #1
 800f67a:	72fb      	strb	r3, [r7, #11]
      break;
 800f67c:	e021      	b.n	800f6c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	7c1b      	ldrb	r3, [r3, #16]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d10d      	bne.n	800f6a2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f68c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f68e:	f107 0208 	add.w	r2, r7, #8
 800f692:	4610      	mov	r0, r2
 800f694:	4798      	blx	r3
 800f696:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	3301      	adds	r3, #1
 800f69c:	2207      	movs	r2, #7
 800f69e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f6a0:	e00f      	b.n	800f6c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f6a2:	6839      	ldr	r1, [r7, #0]
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f000 f9f7 	bl	800fa98 <USBD_CtlError>
        err++;
 800f6aa:	7afb      	ldrb	r3, [r7, #11]
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	72fb      	strb	r3, [r7, #11]
      break;
 800f6b0:	e007      	b.n	800f6c2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f6b2:	6839      	ldr	r1, [r7, #0]
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f000 f9ef 	bl	800fa98 <USBD_CtlError>
      err++;
 800f6ba:	7afb      	ldrb	r3, [r7, #11]
 800f6bc:	3301      	adds	r3, #1
 800f6be:	72fb      	strb	r3, [r7, #11]
      break;
 800f6c0:	bf00      	nop
  }

  if (err != 0U)
 800f6c2:	7afb      	ldrb	r3, [r7, #11]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d11e      	bne.n	800f706 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	88db      	ldrh	r3, [r3, #6]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d016      	beq.n	800f6fe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f6d0:	893b      	ldrh	r3, [r7, #8]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d00e      	beq.n	800f6f4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	88da      	ldrh	r2, [r3, #6]
 800f6da:	893b      	ldrh	r3, [r7, #8]
 800f6dc:	4293      	cmp	r3, r2
 800f6de:	bf28      	it	cs
 800f6e0:	4613      	movcs	r3, r2
 800f6e2:	b29b      	uxth	r3, r3
 800f6e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f6e6:	893b      	ldrh	r3, [r7, #8]
 800f6e8:	461a      	mov	r2, r3
 800f6ea:	68f9      	ldr	r1, [r7, #12]
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f000 fa44 	bl	800fb7a <USBD_CtlSendData>
 800f6f2:	e009      	b.n	800f708 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f6f4:	6839      	ldr	r1, [r7, #0]
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f000 f9ce 	bl	800fa98 <USBD_CtlError>
 800f6fc:	e004      	b.n	800f708 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f000 fa95 	bl	800fc2e <USBD_CtlSendStatus>
 800f704:	e000      	b.n	800f708 <USBD_GetDescriptor+0x320>
    return;
 800f706:	bf00      	nop
  }
}
 800f708:	3710      	adds	r7, #16
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}
 800f70e:	bf00      	nop

0800f710 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b084      	sub	sp, #16
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
 800f718:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	889b      	ldrh	r3, [r3, #4]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d131      	bne.n	800f786 <USBD_SetAddress+0x76>
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	88db      	ldrh	r3, [r3, #6]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d12d      	bne.n	800f786 <USBD_SetAddress+0x76>
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	885b      	ldrh	r3, [r3, #2]
 800f72e:	2b7f      	cmp	r3, #127	@ 0x7f
 800f730:	d829      	bhi.n	800f786 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	885b      	ldrh	r3, [r3, #2]
 800f736:	b2db      	uxtb	r3, r3
 800f738:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f73c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f744:	b2db      	uxtb	r3, r3
 800f746:	2b03      	cmp	r3, #3
 800f748:	d104      	bne.n	800f754 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f74a:	6839      	ldr	r1, [r7, #0]
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f000 f9a3 	bl	800fa98 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f752:	e01d      	b.n	800f790 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	7bfa      	ldrb	r2, [r7, #15]
 800f758:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f75c:	7bfb      	ldrb	r3, [r7, #15]
 800f75e:	4619      	mov	r1, r3
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f000 feb7 	bl	80104d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f766:	6878      	ldr	r0, [r7, #4]
 800f768:	f000 fa61 	bl	800fc2e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f76c:	7bfb      	ldrb	r3, [r7, #15]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d004      	beq.n	800f77c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2202      	movs	r2, #2
 800f776:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f77a:	e009      	b.n	800f790 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2201      	movs	r2, #1
 800f780:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f784:	e004      	b.n	800f790 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f786:	6839      	ldr	r1, [r7, #0]
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f000 f985 	bl	800fa98 <USBD_CtlError>
  }
}
 800f78e:	bf00      	nop
 800f790:	bf00      	nop
 800f792:	3710      	adds	r7, #16
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}

0800f798 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b084      	sub	sp, #16
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	885b      	ldrh	r3, [r3, #2]
 800f7aa:	b2da      	uxtb	r2, r3
 800f7ac:	4b4c      	ldr	r3, [pc, #304]	@ (800f8e0 <USBD_SetConfig+0x148>)
 800f7ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f7b0:	4b4b      	ldr	r3, [pc, #300]	@ (800f8e0 <USBD_SetConfig+0x148>)
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d905      	bls.n	800f7c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f7b8:	6839      	ldr	r1, [r7, #0]
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f000 f96c 	bl	800fa98 <USBD_CtlError>
    return USBD_FAIL;
 800f7c0:	2303      	movs	r3, #3
 800f7c2:	e088      	b.n	800f8d6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7ca:	b2db      	uxtb	r3, r3
 800f7cc:	2b02      	cmp	r3, #2
 800f7ce:	d002      	beq.n	800f7d6 <USBD_SetConfig+0x3e>
 800f7d0:	2b03      	cmp	r3, #3
 800f7d2:	d025      	beq.n	800f820 <USBD_SetConfig+0x88>
 800f7d4:	e071      	b.n	800f8ba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f7d6:	4b42      	ldr	r3, [pc, #264]	@ (800f8e0 <USBD_SetConfig+0x148>)
 800f7d8:	781b      	ldrb	r3, [r3, #0]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d01c      	beq.n	800f818 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f7de:	4b40      	ldr	r3, [pc, #256]	@ (800f8e0 <USBD_SetConfig+0x148>)
 800f7e0:	781b      	ldrb	r3, [r3, #0]
 800f7e2:	461a      	mov	r2, r3
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f7e8:	4b3d      	ldr	r3, [pc, #244]	@ (800f8e0 <USBD_SetConfig+0x148>)
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	f7ff f992 	bl	800eb18 <USBD_SetClassConfig>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f7f8:	7bfb      	ldrb	r3, [r7, #15]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d004      	beq.n	800f808 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f7fe:	6839      	ldr	r1, [r7, #0]
 800f800:	6878      	ldr	r0, [r7, #4]
 800f802:	f000 f949 	bl	800fa98 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f806:	e065      	b.n	800f8d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f000 fa10 	bl	800fc2e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2203      	movs	r2, #3
 800f812:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f816:	e05d      	b.n	800f8d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f000 fa08 	bl	800fc2e <USBD_CtlSendStatus>
      break;
 800f81e:	e059      	b.n	800f8d4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f820:	4b2f      	ldr	r3, [pc, #188]	@ (800f8e0 <USBD_SetConfig+0x148>)
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d112      	bne.n	800f84e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2202      	movs	r2, #2
 800f82c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f830:	4b2b      	ldr	r3, [pc, #172]	@ (800f8e0 <USBD_SetConfig+0x148>)
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	461a      	mov	r2, r3
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f83a:	4b29      	ldr	r3, [pc, #164]	@ (800f8e0 <USBD_SetConfig+0x148>)
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	4619      	mov	r1, r3
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f7ff f985 	bl	800eb50 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f000 f9f1 	bl	800fc2e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f84c:	e042      	b.n	800f8d4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f84e:	4b24      	ldr	r3, [pc, #144]	@ (800f8e0 <USBD_SetConfig+0x148>)
 800f850:	781b      	ldrb	r3, [r3, #0]
 800f852:	461a      	mov	r2, r3
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	685b      	ldr	r3, [r3, #4]
 800f858:	429a      	cmp	r2, r3
 800f85a:	d02a      	beq.n	800f8b2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	685b      	ldr	r3, [r3, #4]
 800f860:	b2db      	uxtb	r3, r3
 800f862:	4619      	mov	r1, r3
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f7ff f973 	bl	800eb50 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f86a:	4b1d      	ldr	r3, [pc, #116]	@ (800f8e0 <USBD_SetConfig+0x148>)
 800f86c:	781b      	ldrb	r3, [r3, #0]
 800f86e:	461a      	mov	r2, r3
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f874:	4b1a      	ldr	r3, [pc, #104]	@ (800f8e0 <USBD_SetConfig+0x148>)
 800f876:	781b      	ldrb	r3, [r3, #0]
 800f878:	4619      	mov	r1, r3
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f7ff f94c 	bl	800eb18 <USBD_SetClassConfig>
 800f880:	4603      	mov	r3, r0
 800f882:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f884:	7bfb      	ldrb	r3, [r7, #15]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d00f      	beq.n	800f8aa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f88a:	6839      	ldr	r1, [r7, #0]
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f000 f903 	bl	800fa98 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	685b      	ldr	r3, [r3, #4]
 800f896:	b2db      	uxtb	r3, r3
 800f898:	4619      	mov	r1, r3
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f7ff f958 	bl	800eb50 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2202      	movs	r2, #2
 800f8a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f8a8:	e014      	b.n	800f8d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f000 f9bf 	bl	800fc2e <USBD_CtlSendStatus>
      break;
 800f8b0:	e010      	b.n	800f8d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f000 f9bb 	bl	800fc2e <USBD_CtlSendStatus>
      break;
 800f8b8:	e00c      	b.n	800f8d4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f8ba:	6839      	ldr	r1, [r7, #0]
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f000 f8eb 	bl	800fa98 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f8c2:	4b07      	ldr	r3, [pc, #28]	@ (800f8e0 <USBD_SetConfig+0x148>)
 800f8c4:	781b      	ldrb	r3, [r3, #0]
 800f8c6:	4619      	mov	r1, r3
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f7ff f941 	bl	800eb50 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f8ce:	2303      	movs	r3, #3
 800f8d0:	73fb      	strb	r3, [r7, #15]
      break;
 800f8d2:	bf00      	nop
  }

  return ret;
 800f8d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3710      	adds	r7, #16
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}
 800f8de:	bf00      	nop
 800f8e0:	20000b64 	.word	0x20000b64

0800f8e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	88db      	ldrh	r3, [r3, #6]
 800f8f2:	2b01      	cmp	r3, #1
 800f8f4:	d004      	beq.n	800f900 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f8f6:	6839      	ldr	r1, [r7, #0]
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f000 f8cd 	bl	800fa98 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f8fe:	e023      	b.n	800f948 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f906:	b2db      	uxtb	r3, r3
 800f908:	2b02      	cmp	r3, #2
 800f90a:	dc02      	bgt.n	800f912 <USBD_GetConfig+0x2e>
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	dc03      	bgt.n	800f918 <USBD_GetConfig+0x34>
 800f910:	e015      	b.n	800f93e <USBD_GetConfig+0x5a>
 800f912:	2b03      	cmp	r3, #3
 800f914:	d00b      	beq.n	800f92e <USBD_GetConfig+0x4a>
 800f916:	e012      	b.n	800f93e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2200      	movs	r2, #0
 800f91c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	3308      	adds	r3, #8
 800f922:	2201      	movs	r2, #1
 800f924:	4619      	mov	r1, r3
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f000 f927 	bl	800fb7a <USBD_CtlSendData>
        break;
 800f92c:	e00c      	b.n	800f948 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	3304      	adds	r3, #4
 800f932:	2201      	movs	r2, #1
 800f934:	4619      	mov	r1, r3
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f000 f91f 	bl	800fb7a <USBD_CtlSendData>
        break;
 800f93c:	e004      	b.n	800f948 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f93e:	6839      	ldr	r1, [r7, #0]
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f000 f8a9 	bl	800fa98 <USBD_CtlError>
        break;
 800f946:	bf00      	nop
}
 800f948:	bf00      	nop
 800f94a:	3708      	adds	r7, #8
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}

0800f950 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f960:	b2db      	uxtb	r3, r3
 800f962:	3b01      	subs	r3, #1
 800f964:	2b02      	cmp	r3, #2
 800f966:	d81e      	bhi.n	800f9a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	88db      	ldrh	r3, [r3, #6]
 800f96c:	2b02      	cmp	r3, #2
 800f96e:	d004      	beq.n	800f97a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f970:	6839      	ldr	r1, [r7, #0]
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	f000 f890 	bl	800fa98 <USBD_CtlError>
        break;
 800f978:	e01a      	b.n	800f9b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2201      	movs	r2, #1
 800f97e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f986:	2b00      	cmp	r3, #0
 800f988:	d005      	beq.n	800f996 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	68db      	ldr	r3, [r3, #12]
 800f98e:	f043 0202 	orr.w	r2, r3, #2
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	330c      	adds	r3, #12
 800f99a:	2202      	movs	r2, #2
 800f99c:	4619      	mov	r1, r3
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f000 f8eb 	bl	800fb7a <USBD_CtlSendData>
      break;
 800f9a4:	e004      	b.n	800f9b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f9a6:	6839      	ldr	r1, [r7, #0]
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 f875 	bl	800fa98 <USBD_CtlError>
      break;
 800f9ae:	bf00      	nop
  }
}
 800f9b0:	bf00      	nop
 800f9b2:	3708      	adds	r7, #8
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	885b      	ldrh	r3, [r3, #2]
 800f9c6:	2b01      	cmp	r3, #1
 800f9c8:	d106      	bne.n	800f9d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2201      	movs	r2, #1
 800f9ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f000 f92b 	bl	800fc2e <USBD_CtlSendStatus>
  }
}
 800f9d8:	bf00      	nop
 800f9da:	3708      	adds	r7, #8
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}

0800f9e0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b082      	sub	sp, #8
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f9f0:	b2db      	uxtb	r3, r3
 800f9f2:	3b01      	subs	r3, #1
 800f9f4:	2b02      	cmp	r3, #2
 800f9f6:	d80b      	bhi.n	800fa10 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	885b      	ldrh	r3, [r3, #2]
 800f9fc:	2b01      	cmp	r3, #1
 800f9fe:	d10c      	bne.n	800fa1a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2200      	movs	r2, #0
 800fa04:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f000 f910 	bl	800fc2e <USBD_CtlSendStatus>
      }
      break;
 800fa0e:	e004      	b.n	800fa1a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fa10:	6839      	ldr	r1, [r7, #0]
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f000 f840 	bl	800fa98 <USBD_CtlError>
      break;
 800fa18:	e000      	b.n	800fa1c <USBD_ClrFeature+0x3c>
      break;
 800fa1a:	bf00      	nop
  }
}
 800fa1c:	bf00      	nop
 800fa1e:	3708      	adds	r7, #8
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}

0800fa24 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b084      	sub	sp, #16
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	781a      	ldrb	r2, [r3, #0]
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	781a      	ldrb	r2, [r3, #0]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	3301      	adds	r3, #1
 800fa4c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fa4e:	68f8      	ldr	r0, [r7, #12]
 800fa50:	f7ff fa92 	bl	800ef78 <SWAPBYTE>
 800fa54:	4603      	mov	r3, r0
 800fa56:	461a      	mov	r2, r3
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	3301      	adds	r3, #1
 800fa60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	3301      	adds	r3, #1
 800fa66:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fa68:	68f8      	ldr	r0, [r7, #12]
 800fa6a:	f7ff fa85 	bl	800ef78 <SWAPBYTE>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	461a      	mov	r2, r3
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	3301      	adds	r3, #1
 800fa7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	3301      	adds	r3, #1
 800fa80:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fa82:	68f8      	ldr	r0, [r7, #12]
 800fa84:	f7ff fa78 	bl	800ef78 <SWAPBYTE>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	80da      	strh	r2, [r3, #6]
}
 800fa90:	bf00      	nop
 800fa92:	3710      	adds	r7, #16
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}

0800fa98 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800faa2:	2180      	movs	r1, #128	@ 0x80
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f000 fcab 	bl	8010400 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800faaa:	2100      	movs	r1, #0
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	f000 fca7 	bl	8010400 <USBD_LL_StallEP>
}
 800fab2:	bf00      	nop
 800fab4:	3708      	adds	r7, #8
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}

0800faba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800faba:	b580      	push	{r7, lr}
 800fabc:	b086      	sub	sp, #24
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	60f8      	str	r0, [r7, #12]
 800fac2:	60b9      	str	r1, [r7, #8]
 800fac4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fac6:	2300      	movs	r3, #0
 800fac8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2b00      	cmp	r3, #0
 800face:	d036      	beq.n	800fb3e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fad4:	6938      	ldr	r0, [r7, #16]
 800fad6:	f000 f836 	bl	800fb46 <USBD_GetLen>
 800fada:	4603      	mov	r3, r0
 800fadc:	3301      	adds	r3, #1
 800fade:	b29b      	uxth	r3, r3
 800fae0:	005b      	lsls	r3, r3, #1
 800fae2:	b29a      	uxth	r2, r3
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fae8:	7dfb      	ldrb	r3, [r7, #23]
 800faea:	68ba      	ldr	r2, [r7, #8]
 800faec:	4413      	add	r3, r2
 800faee:	687a      	ldr	r2, [r7, #4]
 800faf0:	7812      	ldrb	r2, [r2, #0]
 800faf2:	701a      	strb	r2, [r3, #0]
  idx++;
 800faf4:	7dfb      	ldrb	r3, [r7, #23]
 800faf6:	3301      	adds	r3, #1
 800faf8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fafa:	7dfb      	ldrb	r3, [r7, #23]
 800fafc:	68ba      	ldr	r2, [r7, #8]
 800fafe:	4413      	add	r3, r2
 800fb00:	2203      	movs	r2, #3
 800fb02:	701a      	strb	r2, [r3, #0]
  idx++;
 800fb04:	7dfb      	ldrb	r3, [r7, #23]
 800fb06:	3301      	adds	r3, #1
 800fb08:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fb0a:	e013      	b.n	800fb34 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fb0c:	7dfb      	ldrb	r3, [r7, #23]
 800fb0e:	68ba      	ldr	r2, [r7, #8]
 800fb10:	4413      	add	r3, r2
 800fb12:	693a      	ldr	r2, [r7, #16]
 800fb14:	7812      	ldrb	r2, [r2, #0]
 800fb16:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	613b      	str	r3, [r7, #16]
    idx++;
 800fb1e:	7dfb      	ldrb	r3, [r7, #23]
 800fb20:	3301      	adds	r3, #1
 800fb22:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fb24:	7dfb      	ldrb	r3, [r7, #23]
 800fb26:	68ba      	ldr	r2, [r7, #8]
 800fb28:	4413      	add	r3, r2
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	701a      	strb	r2, [r3, #0]
    idx++;
 800fb2e:	7dfb      	ldrb	r3, [r7, #23]
 800fb30:	3301      	adds	r3, #1
 800fb32:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	781b      	ldrb	r3, [r3, #0]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d1e7      	bne.n	800fb0c <USBD_GetString+0x52>
 800fb3c:	e000      	b.n	800fb40 <USBD_GetString+0x86>
    return;
 800fb3e:	bf00      	nop
  }
}
 800fb40:	3718      	adds	r7, #24
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}

0800fb46 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fb46:	b480      	push	{r7}
 800fb48:	b085      	sub	sp, #20
 800fb4a:	af00      	add	r7, sp, #0
 800fb4c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fb56:	e005      	b.n	800fb64 <USBD_GetLen+0x1e>
  {
    len++;
 800fb58:	7bfb      	ldrb	r3, [r7, #15]
 800fb5a:	3301      	adds	r3, #1
 800fb5c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	3301      	adds	r3, #1
 800fb62:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	781b      	ldrb	r3, [r3, #0]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d1f5      	bne.n	800fb58 <USBD_GetLen+0x12>
  }

  return len;
 800fb6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3714      	adds	r7, #20
 800fb72:	46bd      	mov	sp, r7
 800fb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb78:	4770      	bx	lr

0800fb7a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fb7a:	b580      	push	{r7, lr}
 800fb7c:	b084      	sub	sp, #16
 800fb7e:	af00      	add	r7, sp, #0
 800fb80:	60f8      	str	r0, [r7, #12]
 800fb82:	60b9      	str	r1, [r7, #8]
 800fb84:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2202      	movs	r2, #2
 800fb8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	687a      	ldr	r2, [r7, #4]
 800fb92:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	687a      	ldr	r2, [r7, #4]
 800fb98:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	68ba      	ldr	r2, [r7, #8]
 800fb9e:	2100      	movs	r1, #0
 800fba0:	68f8      	ldr	r0, [r7, #12]
 800fba2:	f000 fcb6 	bl	8010512 <USBD_LL_Transmit>

  return USBD_OK;
 800fba6:	2300      	movs	r3, #0
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3710      	adds	r7, #16
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}

0800fbb0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b084      	sub	sp, #16
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	60f8      	str	r0, [r7, #12]
 800fbb8:	60b9      	str	r1, [r7, #8]
 800fbba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	68ba      	ldr	r2, [r7, #8]
 800fbc0:	2100      	movs	r1, #0
 800fbc2:	68f8      	ldr	r0, [r7, #12]
 800fbc4:	f000 fca5 	bl	8010512 <USBD_LL_Transmit>

  return USBD_OK;
 800fbc8:	2300      	movs	r3, #0
}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	3710      	adds	r7, #16
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}

0800fbd2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fbd2:	b580      	push	{r7, lr}
 800fbd4:	b084      	sub	sp, #16
 800fbd6:	af00      	add	r7, sp, #0
 800fbd8:	60f8      	str	r0, [r7, #12]
 800fbda:	60b9      	str	r1, [r7, #8]
 800fbdc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	2203      	movs	r2, #3
 800fbe2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	687a      	ldr	r2, [r7, #4]
 800fbea:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	687a      	ldr	r2, [r7, #4]
 800fbf2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	68ba      	ldr	r2, [r7, #8]
 800fbfa:	2100      	movs	r1, #0
 800fbfc:	68f8      	ldr	r0, [r7, #12]
 800fbfe:	f000 fca9 	bl	8010554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fc02:	2300      	movs	r3, #0
}
 800fc04:	4618      	mov	r0, r3
 800fc06:	3710      	adds	r7, #16
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}

0800fc0c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b084      	sub	sp, #16
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	60f8      	str	r0, [r7, #12]
 800fc14:	60b9      	str	r1, [r7, #8]
 800fc16:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	68ba      	ldr	r2, [r7, #8]
 800fc1c:	2100      	movs	r1, #0
 800fc1e:	68f8      	ldr	r0, [r7, #12]
 800fc20:	f000 fc98 	bl	8010554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fc24:	2300      	movs	r3, #0
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3710      	adds	r7, #16
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}

0800fc2e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fc2e:	b580      	push	{r7, lr}
 800fc30:	b082      	sub	sp, #8
 800fc32:	af00      	add	r7, sp, #0
 800fc34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2204      	movs	r2, #4
 800fc3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fc3e:	2300      	movs	r3, #0
 800fc40:	2200      	movs	r2, #0
 800fc42:	2100      	movs	r1, #0
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f000 fc64 	bl	8010512 <USBD_LL_Transmit>

  return USBD_OK;
 800fc4a:	2300      	movs	r3, #0
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3708      	adds	r7, #8
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b082      	sub	sp, #8
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2205      	movs	r2, #5
 800fc60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fc64:	2300      	movs	r3, #0
 800fc66:	2200      	movs	r2, #0
 800fc68:	2100      	movs	r1, #0
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f000 fc72 	bl	8010554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fc70:	2300      	movs	r3, #0
}
 800fc72:	4618      	mov	r0, r3
 800fc74:	3708      	adds	r7, #8
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}
	...

0800fc7c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800fc80:	2200      	movs	r2, #0
 800fc82:	4912      	ldr	r1, [pc, #72]	@ (800fccc <MX_USB_Device_Init+0x50>)
 800fc84:	4812      	ldr	r0, [pc, #72]	@ (800fcd0 <MX_USB_Device_Init+0x54>)
 800fc86:	f7fe fed9 	bl	800ea3c <USBD_Init>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d001      	beq.n	800fc94 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800fc90:	f7f3 fbc2 	bl	8003418 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800fc94:	490f      	ldr	r1, [pc, #60]	@ (800fcd4 <MX_USB_Device_Init+0x58>)
 800fc96:	480e      	ldr	r0, [pc, #56]	@ (800fcd0 <MX_USB_Device_Init+0x54>)
 800fc98:	f7fe ff00 	bl	800ea9c <USBD_RegisterClass>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d001      	beq.n	800fca6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800fca2:	f7f3 fbb9 	bl	8003418 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800fca6:	490c      	ldr	r1, [pc, #48]	@ (800fcd8 <MX_USB_Device_Init+0x5c>)
 800fca8:	4809      	ldr	r0, [pc, #36]	@ (800fcd0 <MX_USB_Device_Init+0x54>)
 800fcaa:	f7fe fe21 	bl	800e8f0 <USBD_CDC_RegisterInterface>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d001      	beq.n	800fcb8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800fcb4:	f7f3 fbb0 	bl	8003418 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800fcb8:	4805      	ldr	r0, [pc, #20]	@ (800fcd0 <MX_USB_Device_Init+0x54>)
 800fcba:	f7fe ff16 	bl	800eaea <USBD_Start>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d001      	beq.n	800fcc8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800fcc4:	f7f3 fba8 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800fcc8:	bf00      	nop
 800fcca:	bd80      	pop	{r7, pc}
 800fccc:	20000150 	.word	0x20000150
 800fcd0:	20000b68 	.word	0x20000b68
 800fcd4:	20000038 	.word	0x20000038
 800fcd8:	2000013c 	.word	0x2000013c

0800fcdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fce0:	2200      	movs	r2, #0
 800fce2:	4905      	ldr	r1, [pc, #20]	@ (800fcf8 <CDC_Init_FS+0x1c>)
 800fce4:	4805      	ldr	r0, [pc, #20]	@ (800fcfc <CDC_Init_FS+0x20>)
 800fce6:	f7fe fe18 	bl	800e91a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fcea:	4905      	ldr	r1, [pc, #20]	@ (800fd00 <CDC_Init_FS+0x24>)
 800fcec:	4803      	ldr	r0, [pc, #12]	@ (800fcfc <CDC_Init_FS+0x20>)
 800fcee:	f7fe fe32 	bl	800e956 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fcf2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	bd80      	pop	{r7, pc}
 800fcf8:	20001638 	.word	0x20001638
 800fcfc:	20000b68 	.word	0x20000b68
 800fd00:	20000e38 	.word	0x20000e38

0800fd04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fd04:	b480      	push	{r7}
 800fd06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fd08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd12:	4770      	bx	lr

0800fd14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fd14:	b480      	push	{r7}
 800fd16:	b083      	sub	sp, #12
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	6039      	str	r1, [r7, #0]
 800fd1e:	71fb      	strb	r3, [r7, #7]
 800fd20:	4613      	mov	r3, r2
 800fd22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fd24:	79fb      	ldrb	r3, [r7, #7]
 800fd26:	2b23      	cmp	r3, #35	@ 0x23
 800fd28:	d84a      	bhi.n	800fdc0 <CDC_Control_FS+0xac>
 800fd2a:	a201      	add	r2, pc, #4	@ (adr r2, 800fd30 <CDC_Control_FS+0x1c>)
 800fd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd30:	0800fdc1 	.word	0x0800fdc1
 800fd34:	0800fdc1 	.word	0x0800fdc1
 800fd38:	0800fdc1 	.word	0x0800fdc1
 800fd3c:	0800fdc1 	.word	0x0800fdc1
 800fd40:	0800fdc1 	.word	0x0800fdc1
 800fd44:	0800fdc1 	.word	0x0800fdc1
 800fd48:	0800fdc1 	.word	0x0800fdc1
 800fd4c:	0800fdc1 	.word	0x0800fdc1
 800fd50:	0800fdc1 	.word	0x0800fdc1
 800fd54:	0800fdc1 	.word	0x0800fdc1
 800fd58:	0800fdc1 	.word	0x0800fdc1
 800fd5c:	0800fdc1 	.word	0x0800fdc1
 800fd60:	0800fdc1 	.word	0x0800fdc1
 800fd64:	0800fdc1 	.word	0x0800fdc1
 800fd68:	0800fdc1 	.word	0x0800fdc1
 800fd6c:	0800fdc1 	.word	0x0800fdc1
 800fd70:	0800fdc1 	.word	0x0800fdc1
 800fd74:	0800fdc1 	.word	0x0800fdc1
 800fd78:	0800fdc1 	.word	0x0800fdc1
 800fd7c:	0800fdc1 	.word	0x0800fdc1
 800fd80:	0800fdc1 	.word	0x0800fdc1
 800fd84:	0800fdc1 	.word	0x0800fdc1
 800fd88:	0800fdc1 	.word	0x0800fdc1
 800fd8c:	0800fdc1 	.word	0x0800fdc1
 800fd90:	0800fdc1 	.word	0x0800fdc1
 800fd94:	0800fdc1 	.word	0x0800fdc1
 800fd98:	0800fdc1 	.word	0x0800fdc1
 800fd9c:	0800fdc1 	.word	0x0800fdc1
 800fda0:	0800fdc1 	.word	0x0800fdc1
 800fda4:	0800fdc1 	.word	0x0800fdc1
 800fda8:	0800fdc1 	.word	0x0800fdc1
 800fdac:	0800fdc1 	.word	0x0800fdc1
 800fdb0:	0800fdc1 	.word	0x0800fdc1
 800fdb4:	0800fdc1 	.word	0x0800fdc1
 800fdb8:	0800fdc1 	.word	0x0800fdc1
 800fdbc:	0800fdc1 	.word	0x0800fdc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fdc0:	bf00      	nop
  }

  return (USBD_OK);
 800fdc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	370c      	adds	r7, #12
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdce:	4770      	bx	lr

0800fdd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b082      	sub	sp, #8
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
 800fdd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len > sizeof(USB_RX_Buffer)) {
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fde2:	d903      	bls.n	800fdec <CDC_Receive_FS+0x1c>
	          *Len = sizeof(USB_RX_Buffer);  // Prevent buffer overflow
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fdea:	601a      	str	r2, [r3, #0]
	      }
	      memcpy(USB_RX_Buffer, Buf, *Len);
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	461a      	mov	r2, r3
 800fdf2:	6879      	ldr	r1, [r7, #4]
 800fdf4:	4808      	ldr	r0, [pc, #32]	@ (800fe18 <CDC_Receive_FS+0x48>)
 800fdf6:	f001 fcb0 	bl	801175a <memcpy>

	      dataReceivedFlag = 1;
 800fdfa:	4b08      	ldr	r3, [pc, #32]	@ (800fe1c <CDC_Receive_FS+0x4c>)
 800fdfc:	2201      	movs	r2, #1
 800fdfe:	601a      	str	r2, [r3, #0]

	      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fe00:	6879      	ldr	r1, [r7, #4]
 800fe02:	4807      	ldr	r0, [pc, #28]	@ (800fe20 <CDC_Receive_FS+0x50>)
 800fe04:	f7fe fda7 	bl	800e956 <USBD_CDC_SetRxBuffer>
	      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fe08:	4805      	ldr	r0, [pc, #20]	@ (800fe20 <CDC_Receive_FS+0x50>)
 800fe0a:	f7fe fded 	bl	800e9e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fe0e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	3708      	adds	r7, #8
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}
 800fe18:	20000a80 	.word	0x20000a80
 800fe1c:	20000b40 	.word	0x20000b40
 800fe20:	20000b68 	.word	0x20000b68

0800fe24 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b084      	sub	sp, #16
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
 800fe2c:	460b      	mov	r3, r1
 800fe2e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fe30:	2300      	movs	r3, #0
 800fe32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fe34:	4b0d      	ldr	r3, [pc, #52]	@ (800fe6c <CDC_Transmit_FS+0x48>)
 800fe36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fe3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d001      	beq.n	800fe4a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fe46:	2301      	movs	r3, #1
 800fe48:	e00b      	b.n	800fe62 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fe4a:	887b      	ldrh	r3, [r7, #2]
 800fe4c:	461a      	mov	r2, r3
 800fe4e:	6879      	ldr	r1, [r7, #4]
 800fe50:	4806      	ldr	r0, [pc, #24]	@ (800fe6c <CDC_Transmit_FS+0x48>)
 800fe52:	f7fe fd62 	bl	800e91a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fe56:	4805      	ldr	r0, [pc, #20]	@ (800fe6c <CDC_Transmit_FS+0x48>)
 800fe58:	f7fe fd96 	bl	800e988 <USBD_CDC_TransmitPacket>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fe60:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3710      	adds	r7, #16
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	20000b68 	.word	0x20000b68

0800fe70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fe70:	b480      	push	{r7}
 800fe72:	b087      	sub	sp, #28
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	60f8      	str	r0, [r7, #12]
 800fe78:	60b9      	str	r1, [r7, #8]
 800fe7a:	4613      	mov	r3, r2
 800fe7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fe82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	371c      	adds	r7, #28
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe90:	4770      	bx	lr
	...

0800fe94 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	6039      	str	r1, [r7, #0]
 800fe9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	2212      	movs	r2, #18
 800fea4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800fea6:	4b03      	ldr	r3, [pc, #12]	@ (800feb4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800fea8:	4618      	mov	r0, r3
 800feaa:	370c      	adds	r7, #12
 800feac:	46bd      	mov	sp, r7
 800feae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb2:	4770      	bx	lr
 800feb4:	20000170 	.word	0x20000170

0800feb8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800feb8:	b480      	push	{r7}
 800feba:	b083      	sub	sp, #12
 800febc:	af00      	add	r7, sp, #0
 800febe:	4603      	mov	r3, r0
 800fec0:	6039      	str	r1, [r7, #0]
 800fec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	2204      	movs	r2, #4
 800fec8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800feca:	4b03      	ldr	r3, [pc, #12]	@ (800fed8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800fecc:	4618      	mov	r0, r3
 800fece:	370c      	adds	r7, #12
 800fed0:	46bd      	mov	sp, r7
 800fed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed6:	4770      	bx	lr
 800fed8:	20000184 	.word	0x20000184

0800fedc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b082      	sub	sp, #8
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	4603      	mov	r3, r0
 800fee4:	6039      	str	r1, [r7, #0]
 800fee6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fee8:	79fb      	ldrb	r3, [r7, #7]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d105      	bne.n	800fefa <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800feee:	683a      	ldr	r2, [r7, #0]
 800fef0:	4907      	ldr	r1, [pc, #28]	@ (800ff10 <USBD_CDC_ProductStrDescriptor+0x34>)
 800fef2:	4808      	ldr	r0, [pc, #32]	@ (800ff14 <USBD_CDC_ProductStrDescriptor+0x38>)
 800fef4:	f7ff fde1 	bl	800faba <USBD_GetString>
 800fef8:	e004      	b.n	800ff04 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800fefa:	683a      	ldr	r2, [r7, #0]
 800fefc:	4904      	ldr	r1, [pc, #16]	@ (800ff10 <USBD_CDC_ProductStrDescriptor+0x34>)
 800fefe:	4805      	ldr	r0, [pc, #20]	@ (800ff14 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ff00:	f7ff fddb 	bl	800faba <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff04:	4b02      	ldr	r3, [pc, #8]	@ (800ff10 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ff06:	4618      	mov	r0, r3
 800ff08:	3708      	adds	r7, #8
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
 800ff0e:	bf00      	nop
 800ff10:	20001e38 	.word	0x20001e38
 800ff14:	08016d54 	.word	0x08016d54

0800ff18 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	4603      	mov	r3, r0
 800ff20:	6039      	str	r1, [r7, #0]
 800ff22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ff24:	683a      	ldr	r2, [r7, #0]
 800ff26:	4904      	ldr	r1, [pc, #16]	@ (800ff38 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ff28:	4804      	ldr	r0, [pc, #16]	@ (800ff3c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ff2a:	f7ff fdc6 	bl	800faba <USBD_GetString>
  return USBD_StrDesc;
 800ff2e:	4b02      	ldr	r3, [pc, #8]	@ (800ff38 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	3708      	adds	r7, #8
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}
 800ff38:	20001e38 	.word	0x20001e38
 800ff3c:	08016d6c 	.word	0x08016d6c

0800ff40 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b082      	sub	sp, #8
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	4603      	mov	r3, r0
 800ff48:	6039      	str	r1, [r7, #0]
 800ff4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	221a      	movs	r2, #26
 800ff50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ff52:	f000 f843 	bl	800ffdc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ff56:	4b02      	ldr	r3, [pc, #8]	@ (800ff60 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3708      	adds	r7, #8
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}
 800ff60:	20000188 	.word	0x20000188

0800ff64 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b082      	sub	sp, #8
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	6039      	str	r1, [r7, #0]
 800ff6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ff70:	79fb      	ldrb	r3, [r7, #7]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d105      	bne.n	800ff82 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ff76:	683a      	ldr	r2, [r7, #0]
 800ff78:	4907      	ldr	r1, [pc, #28]	@ (800ff98 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ff7a:	4808      	ldr	r0, [pc, #32]	@ (800ff9c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ff7c:	f7ff fd9d 	bl	800faba <USBD_GetString>
 800ff80:	e004      	b.n	800ff8c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ff82:	683a      	ldr	r2, [r7, #0]
 800ff84:	4904      	ldr	r1, [pc, #16]	@ (800ff98 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ff86:	4805      	ldr	r0, [pc, #20]	@ (800ff9c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ff88:	f7ff fd97 	bl	800faba <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff8c:	4b02      	ldr	r3, [pc, #8]	@ (800ff98 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	3708      	adds	r7, #8
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}
 800ff96:	bf00      	nop
 800ff98:	20001e38 	.word	0x20001e38
 800ff9c:	08016d80 	.word	0x08016d80

0800ffa0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b082      	sub	sp, #8
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	6039      	str	r1, [r7, #0]
 800ffaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ffac:	79fb      	ldrb	r3, [r7, #7]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d105      	bne.n	800ffbe <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ffb2:	683a      	ldr	r2, [r7, #0]
 800ffb4:	4907      	ldr	r1, [pc, #28]	@ (800ffd4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ffb6:	4808      	ldr	r0, [pc, #32]	@ (800ffd8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ffb8:	f7ff fd7f 	bl	800faba <USBD_GetString>
 800ffbc:	e004      	b.n	800ffc8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ffbe:	683a      	ldr	r2, [r7, #0]
 800ffc0:	4904      	ldr	r1, [pc, #16]	@ (800ffd4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ffc2:	4805      	ldr	r0, [pc, #20]	@ (800ffd8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ffc4:	f7ff fd79 	bl	800faba <USBD_GetString>
  }
  return USBD_StrDesc;
 800ffc8:	4b02      	ldr	r3, [pc, #8]	@ (800ffd4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3708      	adds	r7, #8
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}
 800ffd2:	bf00      	nop
 800ffd4:	20001e38 	.word	0x20001e38
 800ffd8:	08016d8c 	.word	0x08016d8c

0800ffdc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b084      	sub	sp, #16
 800ffe0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ffe2:	4b0f      	ldr	r3, [pc, #60]	@ (8010020 <Get_SerialNum+0x44>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ffe8:	4b0e      	ldr	r3, [pc, #56]	@ (8010024 <Get_SerialNum+0x48>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ffee:	4b0e      	ldr	r3, [pc, #56]	@ (8010028 <Get_SerialNum+0x4c>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fff4:	68fa      	ldr	r2, [r7, #12]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	4413      	add	r3, r2
 800fffa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d009      	beq.n	8010016 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010002:	2208      	movs	r2, #8
 8010004:	4909      	ldr	r1, [pc, #36]	@ (801002c <Get_SerialNum+0x50>)
 8010006:	68f8      	ldr	r0, [r7, #12]
 8010008:	f000 f814 	bl	8010034 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801000c:	2204      	movs	r2, #4
 801000e:	4908      	ldr	r1, [pc, #32]	@ (8010030 <Get_SerialNum+0x54>)
 8010010:	68b8      	ldr	r0, [r7, #8]
 8010012:	f000 f80f 	bl	8010034 <IntToUnicode>
  }
}
 8010016:	bf00      	nop
 8010018:	3710      	adds	r7, #16
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}
 801001e:	bf00      	nop
 8010020:	1fff7590 	.word	0x1fff7590
 8010024:	1fff7594 	.word	0x1fff7594
 8010028:	1fff7598 	.word	0x1fff7598
 801002c:	2000018a 	.word	0x2000018a
 8010030:	2000019a 	.word	0x2000019a

08010034 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010034:	b480      	push	{r7}
 8010036:	b087      	sub	sp, #28
 8010038:	af00      	add	r7, sp, #0
 801003a:	60f8      	str	r0, [r7, #12]
 801003c:	60b9      	str	r1, [r7, #8]
 801003e:	4613      	mov	r3, r2
 8010040:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010042:	2300      	movs	r3, #0
 8010044:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010046:	2300      	movs	r3, #0
 8010048:	75fb      	strb	r3, [r7, #23]
 801004a:	e027      	b.n	801009c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	0f1b      	lsrs	r3, r3, #28
 8010050:	2b09      	cmp	r3, #9
 8010052:	d80b      	bhi.n	801006c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	0f1b      	lsrs	r3, r3, #28
 8010058:	b2da      	uxtb	r2, r3
 801005a:	7dfb      	ldrb	r3, [r7, #23]
 801005c:	005b      	lsls	r3, r3, #1
 801005e:	4619      	mov	r1, r3
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	440b      	add	r3, r1
 8010064:	3230      	adds	r2, #48	@ 0x30
 8010066:	b2d2      	uxtb	r2, r2
 8010068:	701a      	strb	r2, [r3, #0]
 801006a:	e00a      	b.n	8010082 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	0f1b      	lsrs	r3, r3, #28
 8010070:	b2da      	uxtb	r2, r3
 8010072:	7dfb      	ldrb	r3, [r7, #23]
 8010074:	005b      	lsls	r3, r3, #1
 8010076:	4619      	mov	r1, r3
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	440b      	add	r3, r1
 801007c:	3237      	adds	r2, #55	@ 0x37
 801007e:	b2d2      	uxtb	r2, r2
 8010080:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	011b      	lsls	r3, r3, #4
 8010086:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010088:	7dfb      	ldrb	r3, [r7, #23]
 801008a:	005b      	lsls	r3, r3, #1
 801008c:	3301      	adds	r3, #1
 801008e:	68ba      	ldr	r2, [r7, #8]
 8010090:	4413      	add	r3, r2
 8010092:	2200      	movs	r2, #0
 8010094:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010096:	7dfb      	ldrb	r3, [r7, #23]
 8010098:	3301      	adds	r3, #1
 801009a:	75fb      	strb	r3, [r7, #23]
 801009c:	7dfa      	ldrb	r2, [r7, #23]
 801009e:	79fb      	ldrb	r3, [r7, #7]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d3d3      	bcc.n	801004c <IntToUnicode+0x18>
  }
}
 80100a4:	bf00      	nop
 80100a6:	bf00      	nop
 80100a8:	371c      	adds	r7, #28
 80100aa:	46bd      	mov	sp, r7
 80100ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b0:	4770      	bx	lr
	...

080100b4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b098      	sub	sp, #96	@ 0x60
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80100bc:	f107 030c 	add.w	r3, r7, #12
 80100c0:	2254      	movs	r2, #84	@ 0x54
 80100c2:	2100      	movs	r1, #0
 80100c4:	4618      	mov	r0, r3
 80100c6:	f001 fab6 	bl	8011636 <memset>
  if(pcdHandle->Instance==USB)
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	4a15      	ldr	r2, [pc, #84]	@ (8010124 <HAL_PCD_MspInit+0x70>)
 80100d0:	4293      	cmp	r3, r2
 80100d2:	d122      	bne.n	801011a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80100d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80100d8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80100da:	2300      	movs	r3, #0
 80100dc:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80100de:	f107 030c 	add.w	r3, r7, #12
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7f9 f8c6 	bl	8009274 <HAL_RCCEx_PeriphCLKConfig>
 80100e8:	4603      	mov	r3, r0
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d001      	beq.n	80100f2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80100ee:	f7f3 f993 	bl	8003418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80100f2:	4b0d      	ldr	r3, [pc, #52]	@ (8010128 <HAL_PCD_MspInit+0x74>)
 80100f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80100f6:	4a0c      	ldr	r2, [pc, #48]	@ (8010128 <HAL_PCD_MspInit+0x74>)
 80100f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80100fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80100fe:	4b0a      	ldr	r3, [pc, #40]	@ (8010128 <HAL_PCD_MspInit+0x74>)
 8010100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010102:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010106:	60bb      	str	r3, [r7, #8]
 8010108:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801010a:	2200      	movs	r2, #0
 801010c:	2100      	movs	r1, #0
 801010e:	2014      	movs	r0, #20
 8010110:	f7f5 fe47 	bl	8005da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8010114:	2014      	movs	r0, #20
 8010116:	f7f5 fe5e 	bl	8005dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801011a:	bf00      	nop
 801011c:	3760      	adds	r7, #96	@ 0x60
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}
 8010122:	bf00      	nop
 8010124:	40005c00 	.word	0x40005c00
 8010128:	40021000 	.word	0x40021000

0801012c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b082      	sub	sp, #8
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8010140:	4619      	mov	r1, r3
 8010142:	4610      	mov	r0, r2
 8010144:	f7fe fd1c 	bl	800eb80 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8010148:	bf00      	nop
 801014a:	3708      	adds	r7, #8
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}

08010150 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b082      	sub	sp, #8
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
 8010158:	460b      	mov	r3, r1
 801015a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010162:	78fa      	ldrb	r2, [r7, #3]
 8010164:	6879      	ldr	r1, [r7, #4]
 8010166:	4613      	mov	r3, r2
 8010168:	009b      	lsls	r3, r3, #2
 801016a:	4413      	add	r3, r2
 801016c:	00db      	lsls	r3, r3, #3
 801016e:	440b      	add	r3, r1
 8010170:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010174:	681a      	ldr	r2, [r3, #0]
 8010176:	78fb      	ldrb	r3, [r7, #3]
 8010178:	4619      	mov	r1, r3
 801017a:	f7fe fd56 	bl	800ec2a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801017e:	bf00      	nop
 8010180:	3708      	adds	r7, #8
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}

08010186 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010186:	b580      	push	{r7, lr}
 8010188:	b082      	sub	sp, #8
 801018a:	af00      	add	r7, sp, #0
 801018c:	6078      	str	r0, [r7, #4]
 801018e:	460b      	mov	r3, r1
 8010190:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010198:	78fa      	ldrb	r2, [r7, #3]
 801019a:	6879      	ldr	r1, [r7, #4]
 801019c:	4613      	mov	r3, r2
 801019e:	009b      	lsls	r3, r3, #2
 80101a0:	4413      	add	r3, r2
 80101a2:	00db      	lsls	r3, r3, #3
 80101a4:	440b      	add	r3, r1
 80101a6:	3324      	adds	r3, #36	@ 0x24
 80101a8:	681a      	ldr	r2, [r3, #0]
 80101aa:	78fb      	ldrb	r3, [r7, #3]
 80101ac:	4619      	mov	r1, r3
 80101ae:	f7fe fd9f 	bl	800ecf0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80101b2:	bf00      	nop
 80101b4:	3708      	adds	r7, #8
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}

080101ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101ba:	b580      	push	{r7, lr}
 80101bc:	b082      	sub	sp, #8
 80101be:	af00      	add	r7, sp, #0
 80101c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7fe feb3 	bl	800ef34 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80101ce:	bf00      	nop
 80101d0:	3708      	adds	r7, #8
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}

080101d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101d6:	b580      	push	{r7, lr}
 80101d8:	b084      	sub	sp, #16
 80101da:	af00      	add	r7, sp, #0
 80101dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80101de:	2301      	movs	r3, #1
 80101e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	795b      	ldrb	r3, [r3, #5]
 80101e6:	2b02      	cmp	r3, #2
 80101e8:	d001      	beq.n	80101ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80101ea:	f7f3 f915 	bl	8003418 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80101f4:	7bfa      	ldrb	r2, [r7, #15]
 80101f6:	4611      	mov	r1, r2
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7fe fe5d 	bl	800eeb8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010204:	4618      	mov	r0, r3
 8010206:	f7fe fe09 	bl	800ee1c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801020a:	bf00      	nop
 801020c:	3710      	adds	r7, #16
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}
	...

08010214 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010222:	4618      	mov	r0, r3
 8010224:	f7fe fe58 	bl	800eed8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	7a5b      	ldrb	r3, [r3, #9]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d005      	beq.n	801023c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010230:	4b04      	ldr	r3, [pc, #16]	@ (8010244 <HAL_PCD_SuspendCallback+0x30>)
 8010232:	691b      	ldr	r3, [r3, #16]
 8010234:	4a03      	ldr	r2, [pc, #12]	@ (8010244 <HAL_PCD_SuspendCallback+0x30>)
 8010236:	f043 0306 	orr.w	r3, r3, #6
 801023a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801023c:	bf00      	nop
 801023e:	3708      	adds	r7, #8
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}
 8010244:	e000ed00 	.word	0xe000ed00

08010248 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	7a5b      	ldrb	r3, [r3, #9]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d007      	beq.n	8010268 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010258:	4b08      	ldr	r3, [pc, #32]	@ (801027c <HAL_PCD_ResumeCallback+0x34>)
 801025a:	691b      	ldr	r3, [r3, #16]
 801025c:	4a07      	ldr	r2, [pc, #28]	@ (801027c <HAL_PCD_ResumeCallback+0x34>)
 801025e:	f023 0306 	bic.w	r3, r3, #6
 8010262:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010264:	f000 f9f8 	bl	8010658 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801026e:	4618      	mov	r0, r3
 8010270:	f7fe fe48 	bl	800ef04 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8010274:	bf00      	nop
 8010276:	3708      	adds	r7, #8
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}
 801027c:	e000ed00 	.word	0xe000ed00

08010280 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b082      	sub	sp, #8
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010288:	4a2b      	ldr	r2, [pc, #172]	@ (8010338 <USBD_LL_Init+0xb8>)
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	4a29      	ldr	r2, [pc, #164]	@ (8010338 <USBD_LL_Init+0xb8>)
 8010294:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8010298:	4b27      	ldr	r3, [pc, #156]	@ (8010338 <USBD_LL_Init+0xb8>)
 801029a:	4a28      	ldr	r2, [pc, #160]	@ (801033c <USBD_LL_Init+0xbc>)
 801029c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801029e:	4b26      	ldr	r3, [pc, #152]	@ (8010338 <USBD_LL_Init+0xb8>)
 80102a0:	2208      	movs	r2, #8
 80102a2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80102a4:	4b24      	ldr	r3, [pc, #144]	@ (8010338 <USBD_LL_Init+0xb8>)
 80102a6:	2202      	movs	r2, #2
 80102a8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80102aa:	4b23      	ldr	r3, [pc, #140]	@ (8010338 <USBD_LL_Init+0xb8>)
 80102ac:	2202      	movs	r2, #2
 80102ae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80102b0:	4b21      	ldr	r3, [pc, #132]	@ (8010338 <USBD_LL_Init+0xb8>)
 80102b2:	2200      	movs	r2, #0
 80102b4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80102b6:	4b20      	ldr	r3, [pc, #128]	@ (8010338 <USBD_LL_Init+0xb8>)
 80102b8:	2200      	movs	r2, #0
 80102ba:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80102bc:	4b1e      	ldr	r3, [pc, #120]	@ (8010338 <USBD_LL_Init+0xb8>)
 80102be:	2200      	movs	r2, #0
 80102c0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80102c2:	4b1d      	ldr	r3, [pc, #116]	@ (8010338 <USBD_LL_Init+0xb8>)
 80102c4:	2200      	movs	r2, #0
 80102c6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80102c8:	481b      	ldr	r0, [pc, #108]	@ (8010338 <USBD_LL_Init+0xb8>)
 80102ca:	f7f6 fcbb 	bl	8006c44 <HAL_PCD_Init>
 80102ce:	4603      	mov	r3, r0
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d001      	beq.n	80102d8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80102d4:	f7f3 f8a0 	bl	8003418 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80102de:	2318      	movs	r3, #24
 80102e0:	2200      	movs	r2, #0
 80102e2:	2100      	movs	r1, #0
 80102e4:	f7f8 f976 	bl	80085d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80102ee:	2358      	movs	r3, #88	@ 0x58
 80102f0:	2200      	movs	r2, #0
 80102f2:	2180      	movs	r1, #128	@ 0x80
 80102f4:	f7f8 f96e 	bl	80085d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80102fe:	23c0      	movs	r3, #192	@ 0xc0
 8010300:	2200      	movs	r2, #0
 8010302:	2181      	movs	r1, #129	@ 0x81
 8010304:	f7f8 f966 	bl	80085d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801030e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8010312:	2200      	movs	r2, #0
 8010314:	2101      	movs	r1, #1
 8010316:	f7f8 f95d 	bl	80085d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010320:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010324:	2200      	movs	r2, #0
 8010326:	2182      	movs	r1, #130	@ 0x82
 8010328:	f7f8 f954 	bl	80085d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801032c:	2300      	movs	r3, #0
}
 801032e:	4618      	mov	r0, r3
 8010330:	3708      	adds	r7, #8
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}
 8010336:	bf00      	nop
 8010338:	20002038 	.word	0x20002038
 801033c:	40005c00 	.word	0x40005c00

08010340 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b084      	sub	sp, #16
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010348:	2300      	movs	r3, #0
 801034a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801034c:	2300      	movs	r3, #0
 801034e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010356:	4618      	mov	r0, r3
 8010358:	f7f6 fd42 	bl	8006de0 <HAL_PCD_Start>
 801035c:	4603      	mov	r3, r0
 801035e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010360:	7bfb      	ldrb	r3, [r7, #15]
 8010362:	4618      	mov	r0, r3
 8010364:	f000 f97e 	bl	8010664 <USBD_Get_USB_Status>
 8010368:	4603      	mov	r3, r0
 801036a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801036c:	7bbb      	ldrb	r3, [r7, #14]
}
 801036e:	4618      	mov	r0, r3
 8010370:	3710      	adds	r7, #16
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}

08010376 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010376:	b580      	push	{r7, lr}
 8010378:	b084      	sub	sp, #16
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
 801037e:	4608      	mov	r0, r1
 8010380:	4611      	mov	r1, r2
 8010382:	461a      	mov	r2, r3
 8010384:	4603      	mov	r3, r0
 8010386:	70fb      	strb	r3, [r7, #3]
 8010388:	460b      	mov	r3, r1
 801038a:	70bb      	strb	r3, [r7, #2]
 801038c:	4613      	mov	r3, r2
 801038e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010390:	2300      	movs	r3, #0
 8010392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010394:	2300      	movs	r3, #0
 8010396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801039e:	78bb      	ldrb	r3, [r7, #2]
 80103a0:	883a      	ldrh	r2, [r7, #0]
 80103a2:	78f9      	ldrb	r1, [r7, #3]
 80103a4:	f7f6 fe89 	bl	80070ba <HAL_PCD_EP_Open>
 80103a8:	4603      	mov	r3, r0
 80103aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103ac:	7bfb      	ldrb	r3, [r7, #15]
 80103ae:	4618      	mov	r0, r3
 80103b0:	f000 f958 	bl	8010664 <USBD_Get_USB_Status>
 80103b4:	4603      	mov	r3, r0
 80103b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80103ba:	4618      	mov	r0, r3
 80103bc:	3710      	adds	r7, #16
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}

080103c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103c2:	b580      	push	{r7, lr}
 80103c4:	b084      	sub	sp, #16
 80103c6:	af00      	add	r7, sp, #0
 80103c8:	6078      	str	r0, [r7, #4]
 80103ca:	460b      	mov	r3, r1
 80103cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103ce:	2300      	movs	r3, #0
 80103d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103d2:	2300      	movs	r3, #0
 80103d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80103dc:	78fa      	ldrb	r2, [r7, #3]
 80103de:	4611      	mov	r1, r2
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7f6 fec9 	bl	8007178 <HAL_PCD_EP_Close>
 80103e6:	4603      	mov	r3, r0
 80103e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103ea:	7bfb      	ldrb	r3, [r7, #15]
 80103ec:	4618      	mov	r0, r3
 80103ee:	f000 f939 	bl	8010664 <USBD_Get_USB_Status>
 80103f2:	4603      	mov	r3, r0
 80103f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3710      	adds	r7, #16
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b084      	sub	sp, #16
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	460b      	mov	r3, r1
 801040a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801040c:	2300      	movs	r3, #0
 801040e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010410:	2300      	movs	r3, #0
 8010412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801041a:	78fa      	ldrb	r2, [r7, #3]
 801041c:	4611      	mov	r1, r2
 801041e:	4618      	mov	r0, r3
 8010420:	f7f6 ff72 	bl	8007308 <HAL_PCD_EP_SetStall>
 8010424:	4603      	mov	r3, r0
 8010426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010428:	7bfb      	ldrb	r3, [r7, #15]
 801042a:	4618      	mov	r0, r3
 801042c:	f000 f91a 	bl	8010664 <USBD_Get_USB_Status>
 8010430:	4603      	mov	r3, r0
 8010432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010434:	7bbb      	ldrb	r3, [r7, #14]
}
 8010436:	4618      	mov	r0, r3
 8010438:	3710      	adds	r7, #16
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}

0801043e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801043e:	b580      	push	{r7, lr}
 8010440:	b084      	sub	sp, #16
 8010442:	af00      	add	r7, sp, #0
 8010444:	6078      	str	r0, [r7, #4]
 8010446:	460b      	mov	r3, r1
 8010448:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801044a:	2300      	movs	r3, #0
 801044c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801044e:	2300      	movs	r3, #0
 8010450:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010458:	78fa      	ldrb	r2, [r7, #3]
 801045a:	4611      	mov	r1, r2
 801045c:	4618      	mov	r0, r3
 801045e:	f7f6 ffa5 	bl	80073ac <HAL_PCD_EP_ClrStall>
 8010462:	4603      	mov	r3, r0
 8010464:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010466:	7bfb      	ldrb	r3, [r7, #15]
 8010468:	4618      	mov	r0, r3
 801046a:	f000 f8fb 	bl	8010664 <USBD_Get_USB_Status>
 801046e:	4603      	mov	r3, r0
 8010470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010472:	7bbb      	ldrb	r3, [r7, #14]
}
 8010474:	4618      	mov	r0, r3
 8010476:	3710      	adds	r7, #16
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}

0801047c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801047c:	b480      	push	{r7}
 801047e:	b085      	sub	sp, #20
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	460b      	mov	r3, r1
 8010486:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801048e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010494:	2b00      	cmp	r3, #0
 8010496:	da0b      	bge.n	80104b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010498:	78fb      	ldrb	r3, [r7, #3]
 801049a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801049e:	68f9      	ldr	r1, [r7, #12]
 80104a0:	4613      	mov	r3, r2
 80104a2:	009b      	lsls	r3, r3, #2
 80104a4:	4413      	add	r3, r2
 80104a6:	00db      	lsls	r3, r3, #3
 80104a8:	440b      	add	r3, r1
 80104aa:	3312      	adds	r3, #18
 80104ac:	781b      	ldrb	r3, [r3, #0]
 80104ae:	e00b      	b.n	80104c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80104b0:	78fb      	ldrb	r3, [r7, #3]
 80104b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80104b6:	68f9      	ldr	r1, [r7, #12]
 80104b8:	4613      	mov	r3, r2
 80104ba:	009b      	lsls	r3, r3, #2
 80104bc:	4413      	add	r3, r2
 80104be:	00db      	lsls	r3, r3, #3
 80104c0:	440b      	add	r3, r1
 80104c2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80104c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3714      	adds	r7, #20
 80104cc:	46bd      	mov	sp, r7
 80104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d2:	4770      	bx	lr

080104d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b084      	sub	sp, #16
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
 80104dc:	460b      	mov	r3, r1
 80104de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104e0:	2300      	movs	r3, #0
 80104e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104e4:	2300      	movs	r3, #0
 80104e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80104ee:	78fa      	ldrb	r2, [r7, #3]
 80104f0:	4611      	mov	r1, r2
 80104f2:	4618      	mov	r0, r3
 80104f4:	f7f6 fdbd 	bl	8007072 <HAL_PCD_SetAddress>
 80104f8:	4603      	mov	r3, r0
 80104fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104fc:	7bfb      	ldrb	r3, [r7, #15]
 80104fe:	4618      	mov	r0, r3
 8010500:	f000 f8b0 	bl	8010664 <USBD_Get_USB_Status>
 8010504:	4603      	mov	r3, r0
 8010506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010508:	7bbb      	ldrb	r3, [r7, #14]
}
 801050a:	4618      	mov	r0, r3
 801050c:	3710      	adds	r7, #16
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}

08010512 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010512:	b580      	push	{r7, lr}
 8010514:	b086      	sub	sp, #24
 8010516:	af00      	add	r7, sp, #0
 8010518:	60f8      	str	r0, [r7, #12]
 801051a:	607a      	str	r2, [r7, #4]
 801051c:	603b      	str	r3, [r7, #0]
 801051e:	460b      	mov	r3, r1
 8010520:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010522:	2300      	movs	r3, #0
 8010524:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010526:	2300      	movs	r3, #0
 8010528:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010530:	7af9      	ldrb	r1, [r7, #11]
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	687a      	ldr	r2, [r7, #4]
 8010536:	f7f6 feb0 	bl	800729a <HAL_PCD_EP_Transmit>
 801053a:	4603      	mov	r3, r0
 801053c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801053e:	7dfb      	ldrb	r3, [r7, #23]
 8010540:	4618      	mov	r0, r3
 8010542:	f000 f88f 	bl	8010664 <USBD_Get_USB_Status>
 8010546:	4603      	mov	r3, r0
 8010548:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801054a:	7dbb      	ldrb	r3, [r7, #22]
}
 801054c:	4618      	mov	r0, r3
 801054e:	3718      	adds	r7, #24
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b086      	sub	sp, #24
 8010558:	af00      	add	r7, sp, #0
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	607a      	str	r2, [r7, #4]
 801055e:	603b      	str	r3, [r7, #0]
 8010560:	460b      	mov	r3, r1
 8010562:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010564:	2300      	movs	r3, #0
 8010566:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010568:	2300      	movs	r3, #0
 801056a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010572:	7af9      	ldrb	r1, [r7, #11]
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	687a      	ldr	r2, [r7, #4]
 8010578:	f7f6 fe46 	bl	8007208 <HAL_PCD_EP_Receive>
 801057c:	4603      	mov	r3, r0
 801057e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010580:	7dfb      	ldrb	r3, [r7, #23]
 8010582:	4618      	mov	r0, r3
 8010584:	f000 f86e 	bl	8010664 <USBD_Get_USB_Status>
 8010588:	4603      	mov	r3, r0
 801058a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801058c:	7dbb      	ldrb	r3, [r7, #22]
}
 801058e:	4618      	mov	r0, r3
 8010590:	3718      	adds	r7, #24
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}

08010596 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010596:	b580      	push	{r7, lr}
 8010598:	b082      	sub	sp, #8
 801059a:	af00      	add	r7, sp, #0
 801059c:	6078      	str	r0, [r7, #4]
 801059e:	460b      	mov	r3, r1
 80105a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80105a8:	78fa      	ldrb	r2, [r7, #3]
 80105aa:	4611      	mov	r1, r2
 80105ac:	4618      	mov	r0, r3
 80105ae:	f7f6 fe5c 	bl	800726a <HAL_PCD_EP_GetRxCount>
 80105b2:	4603      	mov	r3, r0
}
 80105b4:	4618      	mov	r0, r3
 80105b6:	3708      	adds	r7, #8
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bd80      	pop	{r7, pc}

080105bc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b082      	sub	sp, #8
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	460b      	mov	r3, r1
 80105c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80105c8:	78fb      	ldrb	r3, [r7, #3]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d002      	beq.n	80105d4 <HAL_PCDEx_LPM_Callback+0x18>
 80105ce:	2b01      	cmp	r3, #1
 80105d0:	d013      	beq.n	80105fa <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80105d2:	e023      	b.n	801061c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	7a5b      	ldrb	r3, [r3, #9]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d007      	beq.n	80105ec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80105dc:	f000 f83c 	bl	8010658 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80105e0:	4b10      	ldr	r3, [pc, #64]	@ (8010624 <HAL_PCDEx_LPM_Callback+0x68>)
 80105e2:	691b      	ldr	r3, [r3, #16]
 80105e4:	4a0f      	ldr	r2, [pc, #60]	@ (8010624 <HAL_PCDEx_LPM_Callback+0x68>)
 80105e6:	f023 0306 	bic.w	r3, r3, #6
 80105ea:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7fe fc86 	bl	800ef04 <USBD_LL_Resume>
    break;
 80105f8:	e010      	b.n	801061c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010600:	4618      	mov	r0, r3
 8010602:	f7fe fc69 	bl	800eed8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	7a5b      	ldrb	r3, [r3, #9]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d005      	beq.n	801061a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801060e:	4b05      	ldr	r3, [pc, #20]	@ (8010624 <HAL_PCDEx_LPM_Callback+0x68>)
 8010610:	691b      	ldr	r3, [r3, #16]
 8010612:	4a04      	ldr	r2, [pc, #16]	@ (8010624 <HAL_PCDEx_LPM_Callback+0x68>)
 8010614:	f043 0306 	orr.w	r3, r3, #6
 8010618:	6113      	str	r3, [r2, #16]
    break;
 801061a:	bf00      	nop
}
 801061c:	bf00      	nop
 801061e:	3708      	adds	r7, #8
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}
 8010624:	e000ed00 	.word	0xe000ed00

08010628 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010628:	b480      	push	{r7}
 801062a:	b083      	sub	sp, #12
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010630:	4b03      	ldr	r3, [pc, #12]	@ (8010640 <USBD_static_malloc+0x18>)
}
 8010632:	4618      	mov	r0, r3
 8010634:	370c      	adds	r7, #12
 8010636:	46bd      	mov	sp, r7
 8010638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063c:	4770      	bx	lr
 801063e:	bf00      	nop
 8010640:	20002314 	.word	0x20002314

08010644 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010644:	b480      	push	{r7}
 8010646:	b083      	sub	sp, #12
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]

}
 801064c:	bf00      	nop
 801064e:	370c      	adds	r7, #12
 8010650:	46bd      	mov	sp, r7
 8010652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010656:	4770      	bx	lr

08010658 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801065c:	f7f0 fe7a 	bl	8001354 <SystemClock_Config>
}
 8010660:	bf00      	nop
 8010662:	bd80      	pop	{r7, pc}

08010664 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010664:	b480      	push	{r7}
 8010666:	b085      	sub	sp, #20
 8010668:	af00      	add	r7, sp, #0
 801066a:	4603      	mov	r3, r0
 801066c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801066e:	2300      	movs	r3, #0
 8010670:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010672:	79fb      	ldrb	r3, [r7, #7]
 8010674:	2b03      	cmp	r3, #3
 8010676:	d817      	bhi.n	80106a8 <USBD_Get_USB_Status+0x44>
 8010678:	a201      	add	r2, pc, #4	@ (adr r2, 8010680 <USBD_Get_USB_Status+0x1c>)
 801067a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801067e:	bf00      	nop
 8010680:	08010691 	.word	0x08010691
 8010684:	08010697 	.word	0x08010697
 8010688:	0801069d 	.word	0x0801069d
 801068c:	080106a3 	.word	0x080106a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010690:	2300      	movs	r3, #0
 8010692:	73fb      	strb	r3, [r7, #15]
    break;
 8010694:	e00b      	b.n	80106ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010696:	2303      	movs	r3, #3
 8010698:	73fb      	strb	r3, [r7, #15]
    break;
 801069a:	e008      	b.n	80106ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801069c:	2301      	movs	r3, #1
 801069e:	73fb      	strb	r3, [r7, #15]
    break;
 80106a0:	e005      	b.n	80106ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80106a2:	2303      	movs	r3, #3
 80106a4:	73fb      	strb	r3, [r7, #15]
    break;
 80106a6:	e002      	b.n	80106ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80106a8:	2303      	movs	r3, #3
 80106aa:	73fb      	strb	r3, [r7, #15]
    break;
 80106ac:	bf00      	nop
  }
  return usb_status;
 80106ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3714      	adds	r7, #20
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr

080106bc <__cvt>:
 80106bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80106c0:	ec57 6b10 	vmov	r6, r7, d0
 80106c4:	2f00      	cmp	r7, #0
 80106c6:	460c      	mov	r4, r1
 80106c8:	4619      	mov	r1, r3
 80106ca:	463b      	mov	r3, r7
 80106cc:	bfbb      	ittet	lt
 80106ce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80106d2:	461f      	movlt	r7, r3
 80106d4:	2300      	movge	r3, #0
 80106d6:	232d      	movlt	r3, #45	@ 0x2d
 80106d8:	700b      	strb	r3, [r1, #0]
 80106da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80106dc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80106e0:	4691      	mov	r9, r2
 80106e2:	f023 0820 	bic.w	r8, r3, #32
 80106e6:	bfbc      	itt	lt
 80106e8:	4632      	movlt	r2, r6
 80106ea:	4616      	movlt	r6, r2
 80106ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80106f0:	d005      	beq.n	80106fe <__cvt+0x42>
 80106f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80106f6:	d100      	bne.n	80106fa <__cvt+0x3e>
 80106f8:	3401      	adds	r4, #1
 80106fa:	2102      	movs	r1, #2
 80106fc:	e000      	b.n	8010700 <__cvt+0x44>
 80106fe:	2103      	movs	r1, #3
 8010700:	ab03      	add	r3, sp, #12
 8010702:	9301      	str	r3, [sp, #4]
 8010704:	ab02      	add	r3, sp, #8
 8010706:	9300      	str	r3, [sp, #0]
 8010708:	ec47 6b10 	vmov	d0, r6, r7
 801070c:	4653      	mov	r3, sl
 801070e:	4622      	mov	r2, r4
 8010710:	f001 f8c2 	bl	8011898 <_dtoa_r>
 8010714:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010718:	4605      	mov	r5, r0
 801071a:	d119      	bne.n	8010750 <__cvt+0x94>
 801071c:	f019 0f01 	tst.w	r9, #1
 8010720:	d00e      	beq.n	8010740 <__cvt+0x84>
 8010722:	eb00 0904 	add.w	r9, r0, r4
 8010726:	2200      	movs	r2, #0
 8010728:	2300      	movs	r3, #0
 801072a:	4630      	mov	r0, r6
 801072c:	4639      	mov	r1, r7
 801072e:	f7f0 f9f3 	bl	8000b18 <__aeabi_dcmpeq>
 8010732:	b108      	cbz	r0, 8010738 <__cvt+0x7c>
 8010734:	f8cd 900c 	str.w	r9, [sp, #12]
 8010738:	2230      	movs	r2, #48	@ 0x30
 801073a:	9b03      	ldr	r3, [sp, #12]
 801073c:	454b      	cmp	r3, r9
 801073e:	d31e      	bcc.n	801077e <__cvt+0xc2>
 8010740:	9b03      	ldr	r3, [sp, #12]
 8010742:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010744:	1b5b      	subs	r3, r3, r5
 8010746:	4628      	mov	r0, r5
 8010748:	6013      	str	r3, [r2, #0]
 801074a:	b004      	add	sp, #16
 801074c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010750:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010754:	eb00 0904 	add.w	r9, r0, r4
 8010758:	d1e5      	bne.n	8010726 <__cvt+0x6a>
 801075a:	7803      	ldrb	r3, [r0, #0]
 801075c:	2b30      	cmp	r3, #48	@ 0x30
 801075e:	d10a      	bne.n	8010776 <__cvt+0xba>
 8010760:	2200      	movs	r2, #0
 8010762:	2300      	movs	r3, #0
 8010764:	4630      	mov	r0, r6
 8010766:	4639      	mov	r1, r7
 8010768:	f7f0 f9d6 	bl	8000b18 <__aeabi_dcmpeq>
 801076c:	b918      	cbnz	r0, 8010776 <__cvt+0xba>
 801076e:	f1c4 0401 	rsb	r4, r4, #1
 8010772:	f8ca 4000 	str.w	r4, [sl]
 8010776:	f8da 3000 	ldr.w	r3, [sl]
 801077a:	4499      	add	r9, r3
 801077c:	e7d3      	b.n	8010726 <__cvt+0x6a>
 801077e:	1c59      	adds	r1, r3, #1
 8010780:	9103      	str	r1, [sp, #12]
 8010782:	701a      	strb	r2, [r3, #0]
 8010784:	e7d9      	b.n	801073a <__cvt+0x7e>

08010786 <__exponent>:
 8010786:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010788:	2900      	cmp	r1, #0
 801078a:	bfba      	itte	lt
 801078c:	4249      	neglt	r1, r1
 801078e:	232d      	movlt	r3, #45	@ 0x2d
 8010790:	232b      	movge	r3, #43	@ 0x2b
 8010792:	2909      	cmp	r1, #9
 8010794:	7002      	strb	r2, [r0, #0]
 8010796:	7043      	strb	r3, [r0, #1]
 8010798:	dd29      	ble.n	80107ee <__exponent+0x68>
 801079a:	f10d 0307 	add.w	r3, sp, #7
 801079e:	461d      	mov	r5, r3
 80107a0:	270a      	movs	r7, #10
 80107a2:	461a      	mov	r2, r3
 80107a4:	fbb1 f6f7 	udiv	r6, r1, r7
 80107a8:	fb07 1416 	mls	r4, r7, r6, r1
 80107ac:	3430      	adds	r4, #48	@ 0x30
 80107ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 80107b2:	460c      	mov	r4, r1
 80107b4:	2c63      	cmp	r4, #99	@ 0x63
 80107b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80107ba:	4631      	mov	r1, r6
 80107bc:	dcf1      	bgt.n	80107a2 <__exponent+0x1c>
 80107be:	3130      	adds	r1, #48	@ 0x30
 80107c0:	1e94      	subs	r4, r2, #2
 80107c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80107c6:	1c41      	adds	r1, r0, #1
 80107c8:	4623      	mov	r3, r4
 80107ca:	42ab      	cmp	r3, r5
 80107cc:	d30a      	bcc.n	80107e4 <__exponent+0x5e>
 80107ce:	f10d 0309 	add.w	r3, sp, #9
 80107d2:	1a9b      	subs	r3, r3, r2
 80107d4:	42ac      	cmp	r4, r5
 80107d6:	bf88      	it	hi
 80107d8:	2300      	movhi	r3, #0
 80107da:	3302      	adds	r3, #2
 80107dc:	4403      	add	r3, r0
 80107de:	1a18      	subs	r0, r3, r0
 80107e0:	b003      	add	sp, #12
 80107e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107e4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80107e8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80107ec:	e7ed      	b.n	80107ca <__exponent+0x44>
 80107ee:	2330      	movs	r3, #48	@ 0x30
 80107f0:	3130      	adds	r1, #48	@ 0x30
 80107f2:	7083      	strb	r3, [r0, #2]
 80107f4:	70c1      	strb	r1, [r0, #3]
 80107f6:	1d03      	adds	r3, r0, #4
 80107f8:	e7f1      	b.n	80107de <__exponent+0x58>
	...

080107fc <_printf_float>:
 80107fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010800:	b08d      	sub	sp, #52	@ 0x34
 8010802:	460c      	mov	r4, r1
 8010804:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010808:	4616      	mov	r6, r2
 801080a:	461f      	mov	r7, r3
 801080c:	4605      	mov	r5, r0
 801080e:	f000 ff2d 	bl	801166c <_localeconv_r>
 8010812:	6803      	ldr	r3, [r0, #0]
 8010814:	9304      	str	r3, [sp, #16]
 8010816:	4618      	mov	r0, r3
 8010818:	f7ef fd52 	bl	80002c0 <strlen>
 801081c:	2300      	movs	r3, #0
 801081e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010820:	f8d8 3000 	ldr.w	r3, [r8]
 8010824:	9005      	str	r0, [sp, #20]
 8010826:	3307      	adds	r3, #7
 8010828:	f023 0307 	bic.w	r3, r3, #7
 801082c:	f103 0208 	add.w	r2, r3, #8
 8010830:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010834:	f8d4 b000 	ldr.w	fp, [r4]
 8010838:	f8c8 2000 	str.w	r2, [r8]
 801083c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010840:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010844:	9307      	str	r3, [sp, #28]
 8010846:	f8cd 8018 	str.w	r8, [sp, #24]
 801084a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801084e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010852:	4b9c      	ldr	r3, [pc, #624]	@ (8010ac4 <_printf_float+0x2c8>)
 8010854:	f04f 32ff 	mov.w	r2, #4294967295
 8010858:	f7f0 f990 	bl	8000b7c <__aeabi_dcmpun>
 801085c:	bb70      	cbnz	r0, 80108bc <_printf_float+0xc0>
 801085e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010862:	4b98      	ldr	r3, [pc, #608]	@ (8010ac4 <_printf_float+0x2c8>)
 8010864:	f04f 32ff 	mov.w	r2, #4294967295
 8010868:	f7f0 f96a 	bl	8000b40 <__aeabi_dcmple>
 801086c:	bb30      	cbnz	r0, 80108bc <_printf_float+0xc0>
 801086e:	2200      	movs	r2, #0
 8010870:	2300      	movs	r3, #0
 8010872:	4640      	mov	r0, r8
 8010874:	4649      	mov	r1, r9
 8010876:	f7f0 f959 	bl	8000b2c <__aeabi_dcmplt>
 801087a:	b110      	cbz	r0, 8010882 <_printf_float+0x86>
 801087c:	232d      	movs	r3, #45	@ 0x2d
 801087e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010882:	4a91      	ldr	r2, [pc, #580]	@ (8010ac8 <_printf_float+0x2cc>)
 8010884:	4b91      	ldr	r3, [pc, #580]	@ (8010acc <_printf_float+0x2d0>)
 8010886:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801088a:	bf94      	ite	ls
 801088c:	4690      	movls	r8, r2
 801088e:	4698      	movhi	r8, r3
 8010890:	2303      	movs	r3, #3
 8010892:	6123      	str	r3, [r4, #16]
 8010894:	f02b 0304 	bic.w	r3, fp, #4
 8010898:	6023      	str	r3, [r4, #0]
 801089a:	f04f 0900 	mov.w	r9, #0
 801089e:	9700      	str	r7, [sp, #0]
 80108a0:	4633      	mov	r3, r6
 80108a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80108a4:	4621      	mov	r1, r4
 80108a6:	4628      	mov	r0, r5
 80108a8:	f000 f9d2 	bl	8010c50 <_printf_common>
 80108ac:	3001      	adds	r0, #1
 80108ae:	f040 808d 	bne.w	80109cc <_printf_float+0x1d0>
 80108b2:	f04f 30ff 	mov.w	r0, #4294967295
 80108b6:	b00d      	add	sp, #52	@ 0x34
 80108b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108bc:	4642      	mov	r2, r8
 80108be:	464b      	mov	r3, r9
 80108c0:	4640      	mov	r0, r8
 80108c2:	4649      	mov	r1, r9
 80108c4:	f7f0 f95a 	bl	8000b7c <__aeabi_dcmpun>
 80108c8:	b140      	cbz	r0, 80108dc <_printf_float+0xe0>
 80108ca:	464b      	mov	r3, r9
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	bfbc      	itt	lt
 80108d0:	232d      	movlt	r3, #45	@ 0x2d
 80108d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80108d6:	4a7e      	ldr	r2, [pc, #504]	@ (8010ad0 <_printf_float+0x2d4>)
 80108d8:	4b7e      	ldr	r3, [pc, #504]	@ (8010ad4 <_printf_float+0x2d8>)
 80108da:	e7d4      	b.n	8010886 <_printf_float+0x8a>
 80108dc:	6863      	ldr	r3, [r4, #4]
 80108de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80108e2:	9206      	str	r2, [sp, #24]
 80108e4:	1c5a      	adds	r2, r3, #1
 80108e6:	d13b      	bne.n	8010960 <_printf_float+0x164>
 80108e8:	2306      	movs	r3, #6
 80108ea:	6063      	str	r3, [r4, #4]
 80108ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80108f0:	2300      	movs	r3, #0
 80108f2:	6022      	str	r2, [r4, #0]
 80108f4:	9303      	str	r3, [sp, #12]
 80108f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80108f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80108fc:	ab09      	add	r3, sp, #36	@ 0x24
 80108fe:	9300      	str	r3, [sp, #0]
 8010900:	6861      	ldr	r1, [r4, #4]
 8010902:	ec49 8b10 	vmov	d0, r8, r9
 8010906:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801090a:	4628      	mov	r0, r5
 801090c:	f7ff fed6 	bl	80106bc <__cvt>
 8010910:	9b06      	ldr	r3, [sp, #24]
 8010912:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010914:	2b47      	cmp	r3, #71	@ 0x47
 8010916:	4680      	mov	r8, r0
 8010918:	d129      	bne.n	801096e <_printf_float+0x172>
 801091a:	1cc8      	adds	r0, r1, #3
 801091c:	db02      	blt.n	8010924 <_printf_float+0x128>
 801091e:	6863      	ldr	r3, [r4, #4]
 8010920:	4299      	cmp	r1, r3
 8010922:	dd41      	ble.n	80109a8 <_printf_float+0x1ac>
 8010924:	f1aa 0a02 	sub.w	sl, sl, #2
 8010928:	fa5f fa8a 	uxtb.w	sl, sl
 801092c:	3901      	subs	r1, #1
 801092e:	4652      	mov	r2, sl
 8010930:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010934:	9109      	str	r1, [sp, #36]	@ 0x24
 8010936:	f7ff ff26 	bl	8010786 <__exponent>
 801093a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801093c:	1813      	adds	r3, r2, r0
 801093e:	2a01      	cmp	r2, #1
 8010940:	4681      	mov	r9, r0
 8010942:	6123      	str	r3, [r4, #16]
 8010944:	dc02      	bgt.n	801094c <_printf_float+0x150>
 8010946:	6822      	ldr	r2, [r4, #0]
 8010948:	07d2      	lsls	r2, r2, #31
 801094a:	d501      	bpl.n	8010950 <_printf_float+0x154>
 801094c:	3301      	adds	r3, #1
 801094e:	6123      	str	r3, [r4, #16]
 8010950:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010954:	2b00      	cmp	r3, #0
 8010956:	d0a2      	beq.n	801089e <_printf_float+0xa2>
 8010958:	232d      	movs	r3, #45	@ 0x2d
 801095a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801095e:	e79e      	b.n	801089e <_printf_float+0xa2>
 8010960:	9a06      	ldr	r2, [sp, #24]
 8010962:	2a47      	cmp	r2, #71	@ 0x47
 8010964:	d1c2      	bne.n	80108ec <_printf_float+0xf0>
 8010966:	2b00      	cmp	r3, #0
 8010968:	d1c0      	bne.n	80108ec <_printf_float+0xf0>
 801096a:	2301      	movs	r3, #1
 801096c:	e7bd      	b.n	80108ea <_printf_float+0xee>
 801096e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010972:	d9db      	bls.n	801092c <_printf_float+0x130>
 8010974:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010978:	d118      	bne.n	80109ac <_printf_float+0x1b0>
 801097a:	2900      	cmp	r1, #0
 801097c:	6863      	ldr	r3, [r4, #4]
 801097e:	dd0b      	ble.n	8010998 <_printf_float+0x19c>
 8010980:	6121      	str	r1, [r4, #16]
 8010982:	b913      	cbnz	r3, 801098a <_printf_float+0x18e>
 8010984:	6822      	ldr	r2, [r4, #0]
 8010986:	07d0      	lsls	r0, r2, #31
 8010988:	d502      	bpl.n	8010990 <_printf_float+0x194>
 801098a:	3301      	adds	r3, #1
 801098c:	440b      	add	r3, r1
 801098e:	6123      	str	r3, [r4, #16]
 8010990:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010992:	f04f 0900 	mov.w	r9, #0
 8010996:	e7db      	b.n	8010950 <_printf_float+0x154>
 8010998:	b913      	cbnz	r3, 80109a0 <_printf_float+0x1a4>
 801099a:	6822      	ldr	r2, [r4, #0]
 801099c:	07d2      	lsls	r2, r2, #31
 801099e:	d501      	bpl.n	80109a4 <_printf_float+0x1a8>
 80109a0:	3302      	adds	r3, #2
 80109a2:	e7f4      	b.n	801098e <_printf_float+0x192>
 80109a4:	2301      	movs	r3, #1
 80109a6:	e7f2      	b.n	801098e <_printf_float+0x192>
 80109a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80109ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80109ae:	4299      	cmp	r1, r3
 80109b0:	db05      	blt.n	80109be <_printf_float+0x1c2>
 80109b2:	6823      	ldr	r3, [r4, #0]
 80109b4:	6121      	str	r1, [r4, #16]
 80109b6:	07d8      	lsls	r0, r3, #31
 80109b8:	d5ea      	bpl.n	8010990 <_printf_float+0x194>
 80109ba:	1c4b      	adds	r3, r1, #1
 80109bc:	e7e7      	b.n	801098e <_printf_float+0x192>
 80109be:	2900      	cmp	r1, #0
 80109c0:	bfd4      	ite	le
 80109c2:	f1c1 0202 	rsble	r2, r1, #2
 80109c6:	2201      	movgt	r2, #1
 80109c8:	4413      	add	r3, r2
 80109ca:	e7e0      	b.n	801098e <_printf_float+0x192>
 80109cc:	6823      	ldr	r3, [r4, #0]
 80109ce:	055a      	lsls	r2, r3, #21
 80109d0:	d407      	bmi.n	80109e2 <_printf_float+0x1e6>
 80109d2:	6923      	ldr	r3, [r4, #16]
 80109d4:	4642      	mov	r2, r8
 80109d6:	4631      	mov	r1, r6
 80109d8:	4628      	mov	r0, r5
 80109da:	47b8      	blx	r7
 80109dc:	3001      	adds	r0, #1
 80109de:	d12b      	bne.n	8010a38 <_printf_float+0x23c>
 80109e0:	e767      	b.n	80108b2 <_printf_float+0xb6>
 80109e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80109e6:	f240 80dd 	bls.w	8010ba4 <_printf_float+0x3a8>
 80109ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80109ee:	2200      	movs	r2, #0
 80109f0:	2300      	movs	r3, #0
 80109f2:	f7f0 f891 	bl	8000b18 <__aeabi_dcmpeq>
 80109f6:	2800      	cmp	r0, #0
 80109f8:	d033      	beq.n	8010a62 <_printf_float+0x266>
 80109fa:	4a37      	ldr	r2, [pc, #220]	@ (8010ad8 <_printf_float+0x2dc>)
 80109fc:	2301      	movs	r3, #1
 80109fe:	4631      	mov	r1, r6
 8010a00:	4628      	mov	r0, r5
 8010a02:	47b8      	blx	r7
 8010a04:	3001      	adds	r0, #1
 8010a06:	f43f af54 	beq.w	80108b2 <_printf_float+0xb6>
 8010a0a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010a0e:	4543      	cmp	r3, r8
 8010a10:	db02      	blt.n	8010a18 <_printf_float+0x21c>
 8010a12:	6823      	ldr	r3, [r4, #0]
 8010a14:	07d8      	lsls	r0, r3, #31
 8010a16:	d50f      	bpl.n	8010a38 <_printf_float+0x23c>
 8010a18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a1c:	4631      	mov	r1, r6
 8010a1e:	4628      	mov	r0, r5
 8010a20:	47b8      	blx	r7
 8010a22:	3001      	adds	r0, #1
 8010a24:	f43f af45 	beq.w	80108b2 <_printf_float+0xb6>
 8010a28:	f04f 0900 	mov.w	r9, #0
 8010a2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8010a30:	f104 0a1a 	add.w	sl, r4, #26
 8010a34:	45c8      	cmp	r8, r9
 8010a36:	dc09      	bgt.n	8010a4c <_printf_float+0x250>
 8010a38:	6823      	ldr	r3, [r4, #0]
 8010a3a:	079b      	lsls	r3, r3, #30
 8010a3c:	f100 8103 	bmi.w	8010c46 <_printf_float+0x44a>
 8010a40:	68e0      	ldr	r0, [r4, #12]
 8010a42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a44:	4298      	cmp	r0, r3
 8010a46:	bfb8      	it	lt
 8010a48:	4618      	movlt	r0, r3
 8010a4a:	e734      	b.n	80108b6 <_printf_float+0xba>
 8010a4c:	2301      	movs	r3, #1
 8010a4e:	4652      	mov	r2, sl
 8010a50:	4631      	mov	r1, r6
 8010a52:	4628      	mov	r0, r5
 8010a54:	47b8      	blx	r7
 8010a56:	3001      	adds	r0, #1
 8010a58:	f43f af2b 	beq.w	80108b2 <_printf_float+0xb6>
 8010a5c:	f109 0901 	add.w	r9, r9, #1
 8010a60:	e7e8      	b.n	8010a34 <_printf_float+0x238>
 8010a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	dc39      	bgt.n	8010adc <_printf_float+0x2e0>
 8010a68:	4a1b      	ldr	r2, [pc, #108]	@ (8010ad8 <_printf_float+0x2dc>)
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	4631      	mov	r1, r6
 8010a6e:	4628      	mov	r0, r5
 8010a70:	47b8      	blx	r7
 8010a72:	3001      	adds	r0, #1
 8010a74:	f43f af1d 	beq.w	80108b2 <_printf_float+0xb6>
 8010a78:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010a7c:	ea59 0303 	orrs.w	r3, r9, r3
 8010a80:	d102      	bne.n	8010a88 <_printf_float+0x28c>
 8010a82:	6823      	ldr	r3, [r4, #0]
 8010a84:	07d9      	lsls	r1, r3, #31
 8010a86:	d5d7      	bpl.n	8010a38 <_printf_float+0x23c>
 8010a88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a8c:	4631      	mov	r1, r6
 8010a8e:	4628      	mov	r0, r5
 8010a90:	47b8      	blx	r7
 8010a92:	3001      	adds	r0, #1
 8010a94:	f43f af0d 	beq.w	80108b2 <_printf_float+0xb6>
 8010a98:	f04f 0a00 	mov.w	sl, #0
 8010a9c:	f104 0b1a 	add.w	fp, r4, #26
 8010aa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010aa2:	425b      	negs	r3, r3
 8010aa4:	4553      	cmp	r3, sl
 8010aa6:	dc01      	bgt.n	8010aac <_printf_float+0x2b0>
 8010aa8:	464b      	mov	r3, r9
 8010aaa:	e793      	b.n	80109d4 <_printf_float+0x1d8>
 8010aac:	2301      	movs	r3, #1
 8010aae:	465a      	mov	r2, fp
 8010ab0:	4631      	mov	r1, r6
 8010ab2:	4628      	mov	r0, r5
 8010ab4:	47b8      	blx	r7
 8010ab6:	3001      	adds	r0, #1
 8010ab8:	f43f aefb 	beq.w	80108b2 <_printf_float+0xb6>
 8010abc:	f10a 0a01 	add.w	sl, sl, #1
 8010ac0:	e7ee      	b.n	8010aa0 <_printf_float+0x2a4>
 8010ac2:	bf00      	nop
 8010ac4:	7fefffff 	.word	0x7fefffff
 8010ac8:	08016de8 	.word	0x08016de8
 8010acc:	08016dec 	.word	0x08016dec
 8010ad0:	08016df0 	.word	0x08016df0
 8010ad4:	08016df4 	.word	0x08016df4
 8010ad8:	08017188 	.word	0x08017188
 8010adc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010ade:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010ae2:	4553      	cmp	r3, sl
 8010ae4:	bfa8      	it	ge
 8010ae6:	4653      	movge	r3, sl
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	4699      	mov	r9, r3
 8010aec:	dc36      	bgt.n	8010b5c <_printf_float+0x360>
 8010aee:	f04f 0b00 	mov.w	fp, #0
 8010af2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010af6:	f104 021a 	add.w	r2, r4, #26
 8010afa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010afc:	9306      	str	r3, [sp, #24]
 8010afe:	eba3 0309 	sub.w	r3, r3, r9
 8010b02:	455b      	cmp	r3, fp
 8010b04:	dc31      	bgt.n	8010b6a <_printf_float+0x36e>
 8010b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b08:	459a      	cmp	sl, r3
 8010b0a:	dc3a      	bgt.n	8010b82 <_printf_float+0x386>
 8010b0c:	6823      	ldr	r3, [r4, #0]
 8010b0e:	07da      	lsls	r2, r3, #31
 8010b10:	d437      	bmi.n	8010b82 <_printf_float+0x386>
 8010b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b14:	ebaa 0903 	sub.w	r9, sl, r3
 8010b18:	9b06      	ldr	r3, [sp, #24]
 8010b1a:	ebaa 0303 	sub.w	r3, sl, r3
 8010b1e:	4599      	cmp	r9, r3
 8010b20:	bfa8      	it	ge
 8010b22:	4699      	movge	r9, r3
 8010b24:	f1b9 0f00 	cmp.w	r9, #0
 8010b28:	dc33      	bgt.n	8010b92 <_printf_float+0x396>
 8010b2a:	f04f 0800 	mov.w	r8, #0
 8010b2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010b32:	f104 0b1a 	add.w	fp, r4, #26
 8010b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b38:	ebaa 0303 	sub.w	r3, sl, r3
 8010b3c:	eba3 0309 	sub.w	r3, r3, r9
 8010b40:	4543      	cmp	r3, r8
 8010b42:	f77f af79 	ble.w	8010a38 <_printf_float+0x23c>
 8010b46:	2301      	movs	r3, #1
 8010b48:	465a      	mov	r2, fp
 8010b4a:	4631      	mov	r1, r6
 8010b4c:	4628      	mov	r0, r5
 8010b4e:	47b8      	blx	r7
 8010b50:	3001      	adds	r0, #1
 8010b52:	f43f aeae 	beq.w	80108b2 <_printf_float+0xb6>
 8010b56:	f108 0801 	add.w	r8, r8, #1
 8010b5a:	e7ec      	b.n	8010b36 <_printf_float+0x33a>
 8010b5c:	4642      	mov	r2, r8
 8010b5e:	4631      	mov	r1, r6
 8010b60:	4628      	mov	r0, r5
 8010b62:	47b8      	blx	r7
 8010b64:	3001      	adds	r0, #1
 8010b66:	d1c2      	bne.n	8010aee <_printf_float+0x2f2>
 8010b68:	e6a3      	b.n	80108b2 <_printf_float+0xb6>
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	4631      	mov	r1, r6
 8010b6e:	4628      	mov	r0, r5
 8010b70:	9206      	str	r2, [sp, #24]
 8010b72:	47b8      	blx	r7
 8010b74:	3001      	adds	r0, #1
 8010b76:	f43f ae9c 	beq.w	80108b2 <_printf_float+0xb6>
 8010b7a:	9a06      	ldr	r2, [sp, #24]
 8010b7c:	f10b 0b01 	add.w	fp, fp, #1
 8010b80:	e7bb      	b.n	8010afa <_printf_float+0x2fe>
 8010b82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b86:	4631      	mov	r1, r6
 8010b88:	4628      	mov	r0, r5
 8010b8a:	47b8      	blx	r7
 8010b8c:	3001      	adds	r0, #1
 8010b8e:	d1c0      	bne.n	8010b12 <_printf_float+0x316>
 8010b90:	e68f      	b.n	80108b2 <_printf_float+0xb6>
 8010b92:	9a06      	ldr	r2, [sp, #24]
 8010b94:	464b      	mov	r3, r9
 8010b96:	4442      	add	r2, r8
 8010b98:	4631      	mov	r1, r6
 8010b9a:	4628      	mov	r0, r5
 8010b9c:	47b8      	blx	r7
 8010b9e:	3001      	adds	r0, #1
 8010ba0:	d1c3      	bne.n	8010b2a <_printf_float+0x32e>
 8010ba2:	e686      	b.n	80108b2 <_printf_float+0xb6>
 8010ba4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010ba8:	f1ba 0f01 	cmp.w	sl, #1
 8010bac:	dc01      	bgt.n	8010bb2 <_printf_float+0x3b6>
 8010bae:	07db      	lsls	r3, r3, #31
 8010bb0:	d536      	bpl.n	8010c20 <_printf_float+0x424>
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	4642      	mov	r2, r8
 8010bb6:	4631      	mov	r1, r6
 8010bb8:	4628      	mov	r0, r5
 8010bba:	47b8      	blx	r7
 8010bbc:	3001      	adds	r0, #1
 8010bbe:	f43f ae78 	beq.w	80108b2 <_printf_float+0xb6>
 8010bc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010bc6:	4631      	mov	r1, r6
 8010bc8:	4628      	mov	r0, r5
 8010bca:	47b8      	blx	r7
 8010bcc:	3001      	adds	r0, #1
 8010bce:	f43f ae70 	beq.w	80108b2 <_printf_float+0xb6>
 8010bd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	2300      	movs	r3, #0
 8010bda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010bde:	f7ef ff9b 	bl	8000b18 <__aeabi_dcmpeq>
 8010be2:	b9c0      	cbnz	r0, 8010c16 <_printf_float+0x41a>
 8010be4:	4653      	mov	r3, sl
 8010be6:	f108 0201 	add.w	r2, r8, #1
 8010bea:	4631      	mov	r1, r6
 8010bec:	4628      	mov	r0, r5
 8010bee:	47b8      	blx	r7
 8010bf0:	3001      	adds	r0, #1
 8010bf2:	d10c      	bne.n	8010c0e <_printf_float+0x412>
 8010bf4:	e65d      	b.n	80108b2 <_printf_float+0xb6>
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	465a      	mov	r2, fp
 8010bfa:	4631      	mov	r1, r6
 8010bfc:	4628      	mov	r0, r5
 8010bfe:	47b8      	blx	r7
 8010c00:	3001      	adds	r0, #1
 8010c02:	f43f ae56 	beq.w	80108b2 <_printf_float+0xb6>
 8010c06:	f108 0801 	add.w	r8, r8, #1
 8010c0a:	45d0      	cmp	r8, sl
 8010c0c:	dbf3      	blt.n	8010bf6 <_printf_float+0x3fa>
 8010c0e:	464b      	mov	r3, r9
 8010c10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010c14:	e6df      	b.n	80109d6 <_printf_float+0x1da>
 8010c16:	f04f 0800 	mov.w	r8, #0
 8010c1a:	f104 0b1a 	add.w	fp, r4, #26
 8010c1e:	e7f4      	b.n	8010c0a <_printf_float+0x40e>
 8010c20:	2301      	movs	r3, #1
 8010c22:	4642      	mov	r2, r8
 8010c24:	e7e1      	b.n	8010bea <_printf_float+0x3ee>
 8010c26:	2301      	movs	r3, #1
 8010c28:	464a      	mov	r2, r9
 8010c2a:	4631      	mov	r1, r6
 8010c2c:	4628      	mov	r0, r5
 8010c2e:	47b8      	blx	r7
 8010c30:	3001      	adds	r0, #1
 8010c32:	f43f ae3e 	beq.w	80108b2 <_printf_float+0xb6>
 8010c36:	f108 0801 	add.w	r8, r8, #1
 8010c3a:	68e3      	ldr	r3, [r4, #12]
 8010c3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010c3e:	1a5b      	subs	r3, r3, r1
 8010c40:	4543      	cmp	r3, r8
 8010c42:	dcf0      	bgt.n	8010c26 <_printf_float+0x42a>
 8010c44:	e6fc      	b.n	8010a40 <_printf_float+0x244>
 8010c46:	f04f 0800 	mov.w	r8, #0
 8010c4a:	f104 0919 	add.w	r9, r4, #25
 8010c4e:	e7f4      	b.n	8010c3a <_printf_float+0x43e>

08010c50 <_printf_common>:
 8010c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c54:	4616      	mov	r6, r2
 8010c56:	4698      	mov	r8, r3
 8010c58:	688a      	ldr	r2, [r1, #8]
 8010c5a:	690b      	ldr	r3, [r1, #16]
 8010c5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010c60:	4293      	cmp	r3, r2
 8010c62:	bfb8      	it	lt
 8010c64:	4613      	movlt	r3, r2
 8010c66:	6033      	str	r3, [r6, #0]
 8010c68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010c6c:	4607      	mov	r7, r0
 8010c6e:	460c      	mov	r4, r1
 8010c70:	b10a      	cbz	r2, 8010c76 <_printf_common+0x26>
 8010c72:	3301      	adds	r3, #1
 8010c74:	6033      	str	r3, [r6, #0]
 8010c76:	6823      	ldr	r3, [r4, #0]
 8010c78:	0699      	lsls	r1, r3, #26
 8010c7a:	bf42      	ittt	mi
 8010c7c:	6833      	ldrmi	r3, [r6, #0]
 8010c7e:	3302      	addmi	r3, #2
 8010c80:	6033      	strmi	r3, [r6, #0]
 8010c82:	6825      	ldr	r5, [r4, #0]
 8010c84:	f015 0506 	ands.w	r5, r5, #6
 8010c88:	d106      	bne.n	8010c98 <_printf_common+0x48>
 8010c8a:	f104 0a19 	add.w	sl, r4, #25
 8010c8e:	68e3      	ldr	r3, [r4, #12]
 8010c90:	6832      	ldr	r2, [r6, #0]
 8010c92:	1a9b      	subs	r3, r3, r2
 8010c94:	42ab      	cmp	r3, r5
 8010c96:	dc26      	bgt.n	8010ce6 <_printf_common+0x96>
 8010c98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010c9c:	6822      	ldr	r2, [r4, #0]
 8010c9e:	3b00      	subs	r3, #0
 8010ca0:	bf18      	it	ne
 8010ca2:	2301      	movne	r3, #1
 8010ca4:	0692      	lsls	r2, r2, #26
 8010ca6:	d42b      	bmi.n	8010d00 <_printf_common+0xb0>
 8010ca8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010cac:	4641      	mov	r1, r8
 8010cae:	4638      	mov	r0, r7
 8010cb0:	47c8      	blx	r9
 8010cb2:	3001      	adds	r0, #1
 8010cb4:	d01e      	beq.n	8010cf4 <_printf_common+0xa4>
 8010cb6:	6823      	ldr	r3, [r4, #0]
 8010cb8:	6922      	ldr	r2, [r4, #16]
 8010cba:	f003 0306 	and.w	r3, r3, #6
 8010cbe:	2b04      	cmp	r3, #4
 8010cc0:	bf02      	ittt	eq
 8010cc2:	68e5      	ldreq	r5, [r4, #12]
 8010cc4:	6833      	ldreq	r3, [r6, #0]
 8010cc6:	1aed      	subeq	r5, r5, r3
 8010cc8:	68a3      	ldr	r3, [r4, #8]
 8010cca:	bf0c      	ite	eq
 8010ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010cd0:	2500      	movne	r5, #0
 8010cd2:	4293      	cmp	r3, r2
 8010cd4:	bfc4      	itt	gt
 8010cd6:	1a9b      	subgt	r3, r3, r2
 8010cd8:	18ed      	addgt	r5, r5, r3
 8010cda:	2600      	movs	r6, #0
 8010cdc:	341a      	adds	r4, #26
 8010cde:	42b5      	cmp	r5, r6
 8010ce0:	d11a      	bne.n	8010d18 <_printf_common+0xc8>
 8010ce2:	2000      	movs	r0, #0
 8010ce4:	e008      	b.n	8010cf8 <_printf_common+0xa8>
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	4652      	mov	r2, sl
 8010cea:	4641      	mov	r1, r8
 8010cec:	4638      	mov	r0, r7
 8010cee:	47c8      	blx	r9
 8010cf0:	3001      	adds	r0, #1
 8010cf2:	d103      	bne.n	8010cfc <_printf_common+0xac>
 8010cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8010cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cfc:	3501      	adds	r5, #1
 8010cfe:	e7c6      	b.n	8010c8e <_printf_common+0x3e>
 8010d00:	18e1      	adds	r1, r4, r3
 8010d02:	1c5a      	adds	r2, r3, #1
 8010d04:	2030      	movs	r0, #48	@ 0x30
 8010d06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010d0a:	4422      	add	r2, r4
 8010d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010d10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010d14:	3302      	adds	r3, #2
 8010d16:	e7c7      	b.n	8010ca8 <_printf_common+0x58>
 8010d18:	2301      	movs	r3, #1
 8010d1a:	4622      	mov	r2, r4
 8010d1c:	4641      	mov	r1, r8
 8010d1e:	4638      	mov	r0, r7
 8010d20:	47c8      	blx	r9
 8010d22:	3001      	adds	r0, #1
 8010d24:	d0e6      	beq.n	8010cf4 <_printf_common+0xa4>
 8010d26:	3601      	adds	r6, #1
 8010d28:	e7d9      	b.n	8010cde <_printf_common+0x8e>
	...

08010d2c <_printf_i>:
 8010d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d30:	7e0f      	ldrb	r7, [r1, #24]
 8010d32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010d34:	2f78      	cmp	r7, #120	@ 0x78
 8010d36:	4691      	mov	r9, r2
 8010d38:	4680      	mov	r8, r0
 8010d3a:	460c      	mov	r4, r1
 8010d3c:	469a      	mov	sl, r3
 8010d3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010d42:	d807      	bhi.n	8010d54 <_printf_i+0x28>
 8010d44:	2f62      	cmp	r7, #98	@ 0x62
 8010d46:	d80a      	bhi.n	8010d5e <_printf_i+0x32>
 8010d48:	2f00      	cmp	r7, #0
 8010d4a:	f000 80d2 	beq.w	8010ef2 <_printf_i+0x1c6>
 8010d4e:	2f58      	cmp	r7, #88	@ 0x58
 8010d50:	f000 80b9 	beq.w	8010ec6 <_printf_i+0x19a>
 8010d54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010d58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010d5c:	e03a      	b.n	8010dd4 <_printf_i+0xa8>
 8010d5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010d62:	2b15      	cmp	r3, #21
 8010d64:	d8f6      	bhi.n	8010d54 <_printf_i+0x28>
 8010d66:	a101      	add	r1, pc, #4	@ (adr r1, 8010d6c <_printf_i+0x40>)
 8010d68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010d6c:	08010dc5 	.word	0x08010dc5
 8010d70:	08010dd9 	.word	0x08010dd9
 8010d74:	08010d55 	.word	0x08010d55
 8010d78:	08010d55 	.word	0x08010d55
 8010d7c:	08010d55 	.word	0x08010d55
 8010d80:	08010d55 	.word	0x08010d55
 8010d84:	08010dd9 	.word	0x08010dd9
 8010d88:	08010d55 	.word	0x08010d55
 8010d8c:	08010d55 	.word	0x08010d55
 8010d90:	08010d55 	.word	0x08010d55
 8010d94:	08010d55 	.word	0x08010d55
 8010d98:	08010ed9 	.word	0x08010ed9
 8010d9c:	08010e03 	.word	0x08010e03
 8010da0:	08010e93 	.word	0x08010e93
 8010da4:	08010d55 	.word	0x08010d55
 8010da8:	08010d55 	.word	0x08010d55
 8010dac:	08010efb 	.word	0x08010efb
 8010db0:	08010d55 	.word	0x08010d55
 8010db4:	08010e03 	.word	0x08010e03
 8010db8:	08010d55 	.word	0x08010d55
 8010dbc:	08010d55 	.word	0x08010d55
 8010dc0:	08010e9b 	.word	0x08010e9b
 8010dc4:	6833      	ldr	r3, [r6, #0]
 8010dc6:	1d1a      	adds	r2, r3, #4
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	6032      	str	r2, [r6, #0]
 8010dcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010dd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	e09d      	b.n	8010f14 <_printf_i+0x1e8>
 8010dd8:	6833      	ldr	r3, [r6, #0]
 8010dda:	6820      	ldr	r0, [r4, #0]
 8010ddc:	1d19      	adds	r1, r3, #4
 8010dde:	6031      	str	r1, [r6, #0]
 8010de0:	0606      	lsls	r6, r0, #24
 8010de2:	d501      	bpl.n	8010de8 <_printf_i+0xbc>
 8010de4:	681d      	ldr	r5, [r3, #0]
 8010de6:	e003      	b.n	8010df0 <_printf_i+0xc4>
 8010de8:	0645      	lsls	r5, r0, #25
 8010dea:	d5fb      	bpl.n	8010de4 <_printf_i+0xb8>
 8010dec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010df0:	2d00      	cmp	r5, #0
 8010df2:	da03      	bge.n	8010dfc <_printf_i+0xd0>
 8010df4:	232d      	movs	r3, #45	@ 0x2d
 8010df6:	426d      	negs	r5, r5
 8010df8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010dfc:	4859      	ldr	r0, [pc, #356]	@ (8010f64 <_printf_i+0x238>)
 8010dfe:	230a      	movs	r3, #10
 8010e00:	e011      	b.n	8010e26 <_printf_i+0xfa>
 8010e02:	6821      	ldr	r1, [r4, #0]
 8010e04:	6833      	ldr	r3, [r6, #0]
 8010e06:	0608      	lsls	r0, r1, #24
 8010e08:	f853 5b04 	ldr.w	r5, [r3], #4
 8010e0c:	d402      	bmi.n	8010e14 <_printf_i+0xe8>
 8010e0e:	0649      	lsls	r1, r1, #25
 8010e10:	bf48      	it	mi
 8010e12:	b2ad      	uxthmi	r5, r5
 8010e14:	2f6f      	cmp	r7, #111	@ 0x6f
 8010e16:	4853      	ldr	r0, [pc, #332]	@ (8010f64 <_printf_i+0x238>)
 8010e18:	6033      	str	r3, [r6, #0]
 8010e1a:	bf14      	ite	ne
 8010e1c:	230a      	movne	r3, #10
 8010e1e:	2308      	moveq	r3, #8
 8010e20:	2100      	movs	r1, #0
 8010e22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010e26:	6866      	ldr	r6, [r4, #4]
 8010e28:	60a6      	str	r6, [r4, #8]
 8010e2a:	2e00      	cmp	r6, #0
 8010e2c:	bfa2      	ittt	ge
 8010e2e:	6821      	ldrge	r1, [r4, #0]
 8010e30:	f021 0104 	bicge.w	r1, r1, #4
 8010e34:	6021      	strge	r1, [r4, #0]
 8010e36:	b90d      	cbnz	r5, 8010e3c <_printf_i+0x110>
 8010e38:	2e00      	cmp	r6, #0
 8010e3a:	d04b      	beq.n	8010ed4 <_printf_i+0x1a8>
 8010e3c:	4616      	mov	r6, r2
 8010e3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010e42:	fb03 5711 	mls	r7, r3, r1, r5
 8010e46:	5dc7      	ldrb	r7, [r0, r7]
 8010e48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010e4c:	462f      	mov	r7, r5
 8010e4e:	42bb      	cmp	r3, r7
 8010e50:	460d      	mov	r5, r1
 8010e52:	d9f4      	bls.n	8010e3e <_printf_i+0x112>
 8010e54:	2b08      	cmp	r3, #8
 8010e56:	d10b      	bne.n	8010e70 <_printf_i+0x144>
 8010e58:	6823      	ldr	r3, [r4, #0]
 8010e5a:	07df      	lsls	r7, r3, #31
 8010e5c:	d508      	bpl.n	8010e70 <_printf_i+0x144>
 8010e5e:	6923      	ldr	r3, [r4, #16]
 8010e60:	6861      	ldr	r1, [r4, #4]
 8010e62:	4299      	cmp	r1, r3
 8010e64:	bfde      	ittt	le
 8010e66:	2330      	movle	r3, #48	@ 0x30
 8010e68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010e6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010e70:	1b92      	subs	r2, r2, r6
 8010e72:	6122      	str	r2, [r4, #16]
 8010e74:	f8cd a000 	str.w	sl, [sp]
 8010e78:	464b      	mov	r3, r9
 8010e7a:	aa03      	add	r2, sp, #12
 8010e7c:	4621      	mov	r1, r4
 8010e7e:	4640      	mov	r0, r8
 8010e80:	f7ff fee6 	bl	8010c50 <_printf_common>
 8010e84:	3001      	adds	r0, #1
 8010e86:	d14a      	bne.n	8010f1e <_printf_i+0x1f2>
 8010e88:	f04f 30ff 	mov.w	r0, #4294967295
 8010e8c:	b004      	add	sp, #16
 8010e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e92:	6823      	ldr	r3, [r4, #0]
 8010e94:	f043 0320 	orr.w	r3, r3, #32
 8010e98:	6023      	str	r3, [r4, #0]
 8010e9a:	4833      	ldr	r0, [pc, #204]	@ (8010f68 <_printf_i+0x23c>)
 8010e9c:	2778      	movs	r7, #120	@ 0x78
 8010e9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010ea2:	6823      	ldr	r3, [r4, #0]
 8010ea4:	6831      	ldr	r1, [r6, #0]
 8010ea6:	061f      	lsls	r7, r3, #24
 8010ea8:	f851 5b04 	ldr.w	r5, [r1], #4
 8010eac:	d402      	bmi.n	8010eb4 <_printf_i+0x188>
 8010eae:	065f      	lsls	r7, r3, #25
 8010eb0:	bf48      	it	mi
 8010eb2:	b2ad      	uxthmi	r5, r5
 8010eb4:	6031      	str	r1, [r6, #0]
 8010eb6:	07d9      	lsls	r1, r3, #31
 8010eb8:	bf44      	itt	mi
 8010eba:	f043 0320 	orrmi.w	r3, r3, #32
 8010ebe:	6023      	strmi	r3, [r4, #0]
 8010ec0:	b11d      	cbz	r5, 8010eca <_printf_i+0x19e>
 8010ec2:	2310      	movs	r3, #16
 8010ec4:	e7ac      	b.n	8010e20 <_printf_i+0xf4>
 8010ec6:	4827      	ldr	r0, [pc, #156]	@ (8010f64 <_printf_i+0x238>)
 8010ec8:	e7e9      	b.n	8010e9e <_printf_i+0x172>
 8010eca:	6823      	ldr	r3, [r4, #0]
 8010ecc:	f023 0320 	bic.w	r3, r3, #32
 8010ed0:	6023      	str	r3, [r4, #0]
 8010ed2:	e7f6      	b.n	8010ec2 <_printf_i+0x196>
 8010ed4:	4616      	mov	r6, r2
 8010ed6:	e7bd      	b.n	8010e54 <_printf_i+0x128>
 8010ed8:	6833      	ldr	r3, [r6, #0]
 8010eda:	6825      	ldr	r5, [r4, #0]
 8010edc:	6961      	ldr	r1, [r4, #20]
 8010ede:	1d18      	adds	r0, r3, #4
 8010ee0:	6030      	str	r0, [r6, #0]
 8010ee2:	062e      	lsls	r6, r5, #24
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	d501      	bpl.n	8010eec <_printf_i+0x1c0>
 8010ee8:	6019      	str	r1, [r3, #0]
 8010eea:	e002      	b.n	8010ef2 <_printf_i+0x1c6>
 8010eec:	0668      	lsls	r0, r5, #25
 8010eee:	d5fb      	bpl.n	8010ee8 <_printf_i+0x1bc>
 8010ef0:	8019      	strh	r1, [r3, #0]
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	6123      	str	r3, [r4, #16]
 8010ef6:	4616      	mov	r6, r2
 8010ef8:	e7bc      	b.n	8010e74 <_printf_i+0x148>
 8010efa:	6833      	ldr	r3, [r6, #0]
 8010efc:	1d1a      	adds	r2, r3, #4
 8010efe:	6032      	str	r2, [r6, #0]
 8010f00:	681e      	ldr	r6, [r3, #0]
 8010f02:	6862      	ldr	r2, [r4, #4]
 8010f04:	2100      	movs	r1, #0
 8010f06:	4630      	mov	r0, r6
 8010f08:	f7ef f98a 	bl	8000220 <memchr>
 8010f0c:	b108      	cbz	r0, 8010f12 <_printf_i+0x1e6>
 8010f0e:	1b80      	subs	r0, r0, r6
 8010f10:	6060      	str	r0, [r4, #4]
 8010f12:	6863      	ldr	r3, [r4, #4]
 8010f14:	6123      	str	r3, [r4, #16]
 8010f16:	2300      	movs	r3, #0
 8010f18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f1c:	e7aa      	b.n	8010e74 <_printf_i+0x148>
 8010f1e:	6923      	ldr	r3, [r4, #16]
 8010f20:	4632      	mov	r2, r6
 8010f22:	4649      	mov	r1, r9
 8010f24:	4640      	mov	r0, r8
 8010f26:	47d0      	blx	sl
 8010f28:	3001      	adds	r0, #1
 8010f2a:	d0ad      	beq.n	8010e88 <_printf_i+0x15c>
 8010f2c:	6823      	ldr	r3, [r4, #0]
 8010f2e:	079b      	lsls	r3, r3, #30
 8010f30:	d413      	bmi.n	8010f5a <_printf_i+0x22e>
 8010f32:	68e0      	ldr	r0, [r4, #12]
 8010f34:	9b03      	ldr	r3, [sp, #12]
 8010f36:	4298      	cmp	r0, r3
 8010f38:	bfb8      	it	lt
 8010f3a:	4618      	movlt	r0, r3
 8010f3c:	e7a6      	b.n	8010e8c <_printf_i+0x160>
 8010f3e:	2301      	movs	r3, #1
 8010f40:	4632      	mov	r2, r6
 8010f42:	4649      	mov	r1, r9
 8010f44:	4640      	mov	r0, r8
 8010f46:	47d0      	blx	sl
 8010f48:	3001      	adds	r0, #1
 8010f4a:	d09d      	beq.n	8010e88 <_printf_i+0x15c>
 8010f4c:	3501      	adds	r5, #1
 8010f4e:	68e3      	ldr	r3, [r4, #12]
 8010f50:	9903      	ldr	r1, [sp, #12]
 8010f52:	1a5b      	subs	r3, r3, r1
 8010f54:	42ab      	cmp	r3, r5
 8010f56:	dcf2      	bgt.n	8010f3e <_printf_i+0x212>
 8010f58:	e7eb      	b.n	8010f32 <_printf_i+0x206>
 8010f5a:	2500      	movs	r5, #0
 8010f5c:	f104 0619 	add.w	r6, r4, #25
 8010f60:	e7f5      	b.n	8010f4e <_printf_i+0x222>
 8010f62:	bf00      	nop
 8010f64:	08016df8 	.word	0x08016df8
 8010f68:	08016e09 	.word	0x08016e09

08010f6c <_scanf_float>:
 8010f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f70:	b087      	sub	sp, #28
 8010f72:	4617      	mov	r7, r2
 8010f74:	9303      	str	r3, [sp, #12]
 8010f76:	688b      	ldr	r3, [r1, #8]
 8010f78:	1e5a      	subs	r2, r3, #1
 8010f7a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010f7e:	bf81      	itttt	hi
 8010f80:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010f84:	eb03 0b05 	addhi.w	fp, r3, r5
 8010f88:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010f8c:	608b      	strhi	r3, [r1, #8]
 8010f8e:	680b      	ldr	r3, [r1, #0]
 8010f90:	460a      	mov	r2, r1
 8010f92:	f04f 0500 	mov.w	r5, #0
 8010f96:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8010f9a:	f842 3b1c 	str.w	r3, [r2], #28
 8010f9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010fa2:	4680      	mov	r8, r0
 8010fa4:	460c      	mov	r4, r1
 8010fa6:	bf98      	it	ls
 8010fa8:	f04f 0b00 	movls.w	fp, #0
 8010fac:	9201      	str	r2, [sp, #4]
 8010fae:	4616      	mov	r6, r2
 8010fb0:	46aa      	mov	sl, r5
 8010fb2:	46a9      	mov	r9, r5
 8010fb4:	9502      	str	r5, [sp, #8]
 8010fb6:	68a2      	ldr	r2, [r4, #8]
 8010fb8:	b152      	cbz	r2, 8010fd0 <_scanf_float+0x64>
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	781b      	ldrb	r3, [r3, #0]
 8010fbe:	2b4e      	cmp	r3, #78	@ 0x4e
 8010fc0:	d864      	bhi.n	801108c <_scanf_float+0x120>
 8010fc2:	2b40      	cmp	r3, #64	@ 0x40
 8010fc4:	d83c      	bhi.n	8011040 <_scanf_float+0xd4>
 8010fc6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8010fca:	b2c8      	uxtb	r0, r1
 8010fcc:	280e      	cmp	r0, #14
 8010fce:	d93a      	bls.n	8011046 <_scanf_float+0xda>
 8010fd0:	f1b9 0f00 	cmp.w	r9, #0
 8010fd4:	d003      	beq.n	8010fde <_scanf_float+0x72>
 8010fd6:	6823      	ldr	r3, [r4, #0]
 8010fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010fdc:	6023      	str	r3, [r4, #0]
 8010fde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010fe2:	f1ba 0f01 	cmp.w	sl, #1
 8010fe6:	f200 8117 	bhi.w	8011218 <_scanf_float+0x2ac>
 8010fea:	9b01      	ldr	r3, [sp, #4]
 8010fec:	429e      	cmp	r6, r3
 8010fee:	f200 8108 	bhi.w	8011202 <_scanf_float+0x296>
 8010ff2:	2001      	movs	r0, #1
 8010ff4:	b007      	add	sp, #28
 8010ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ffa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8010ffe:	2a0d      	cmp	r2, #13
 8011000:	d8e6      	bhi.n	8010fd0 <_scanf_float+0x64>
 8011002:	a101      	add	r1, pc, #4	@ (adr r1, 8011008 <_scanf_float+0x9c>)
 8011004:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011008:	0801114f 	.word	0x0801114f
 801100c:	08010fd1 	.word	0x08010fd1
 8011010:	08010fd1 	.word	0x08010fd1
 8011014:	08010fd1 	.word	0x08010fd1
 8011018:	080111af 	.word	0x080111af
 801101c:	08011187 	.word	0x08011187
 8011020:	08010fd1 	.word	0x08010fd1
 8011024:	08010fd1 	.word	0x08010fd1
 8011028:	0801115d 	.word	0x0801115d
 801102c:	08010fd1 	.word	0x08010fd1
 8011030:	08010fd1 	.word	0x08010fd1
 8011034:	08010fd1 	.word	0x08010fd1
 8011038:	08010fd1 	.word	0x08010fd1
 801103c:	08011115 	.word	0x08011115
 8011040:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8011044:	e7db      	b.n	8010ffe <_scanf_float+0x92>
 8011046:	290e      	cmp	r1, #14
 8011048:	d8c2      	bhi.n	8010fd0 <_scanf_float+0x64>
 801104a:	a001      	add	r0, pc, #4	@ (adr r0, 8011050 <_scanf_float+0xe4>)
 801104c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011050:	08011105 	.word	0x08011105
 8011054:	08010fd1 	.word	0x08010fd1
 8011058:	08011105 	.word	0x08011105
 801105c:	0801119b 	.word	0x0801119b
 8011060:	08010fd1 	.word	0x08010fd1
 8011064:	080110ad 	.word	0x080110ad
 8011068:	080110eb 	.word	0x080110eb
 801106c:	080110eb 	.word	0x080110eb
 8011070:	080110eb 	.word	0x080110eb
 8011074:	080110eb 	.word	0x080110eb
 8011078:	080110eb 	.word	0x080110eb
 801107c:	080110eb 	.word	0x080110eb
 8011080:	080110eb 	.word	0x080110eb
 8011084:	080110eb 	.word	0x080110eb
 8011088:	080110eb 	.word	0x080110eb
 801108c:	2b6e      	cmp	r3, #110	@ 0x6e
 801108e:	d809      	bhi.n	80110a4 <_scanf_float+0x138>
 8011090:	2b60      	cmp	r3, #96	@ 0x60
 8011092:	d8b2      	bhi.n	8010ffa <_scanf_float+0x8e>
 8011094:	2b54      	cmp	r3, #84	@ 0x54
 8011096:	d07b      	beq.n	8011190 <_scanf_float+0x224>
 8011098:	2b59      	cmp	r3, #89	@ 0x59
 801109a:	d199      	bne.n	8010fd0 <_scanf_float+0x64>
 801109c:	2d07      	cmp	r5, #7
 801109e:	d197      	bne.n	8010fd0 <_scanf_float+0x64>
 80110a0:	2508      	movs	r5, #8
 80110a2:	e02c      	b.n	80110fe <_scanf_float+0x192>
 80110a4:	2b74      	cmp	r3, #116	@ 0x74
 80110a6:	d073      	beq.n	8011190 <_scanf_float+0x224>
 80110a8:	2b79      	cmp	r3, #121	@ 0x79
 80110aa:	e7f6      	b.n	801109a <_scanf_float+0x12e>
 80110ac:	6821      	ldr	r1, [r4, #0]
 80110ae:	05c8      	lsls	r0, r1, #23
 80110b0:	d51b      	bpl.n	80110ea <_scanf_float+0x17e>
 80110b2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80110b6:	6021      	str	r1, [r4, #0]
 80110b8:	f109 0901 	add.w	r9, r9, #1
 80110bc:	f1bb 0f00 	cmp.w	fp, #0
 80110c0:	d003      	beq.n	80110ca <_scanf_float+0x15e>
 80110c2:	3201      	adds	r2, #1
 80110c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80110c8:	60a2      	str	r2, [r4, #8]
 80110ca:	68a3      	ldr	r3, [r4, #8]
 80110cc:	3b01      	subs	r3, #1
 80110ce:	60a3      	str	r3, [r4, #8]
 80110d0:	6923      	ldr	r3, [r4, #16]
 80110d2:	3301      	adds	r3, #1
 80110d4:	6123      	str	r3, [r4, #16]
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	3b01      	subs	r3, #1
 80110da:	2b00      	cmp	r3, #0
 80110dc:	607b      	str	r3, [r7, #4]
 80110de:	f340 8087 	ble.w	80111f0 <_scanf_float+0x284>
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	3301      	adds	r3, #1
 80110e6:	603b      	str	r3, [r7, #0]
 80110e8:	e765      	b.n	8010fb6 <_scanf_float+0x4a>
 80110ea:	eb1a 0105 	adds.w	r1, sl, r5
 80110ee:	f47f af6f 	bne.w	8010fd0 <_scanf_float+0x64>
 80110f2:	6822      	ldr	r2, [r4, #0]
 80110f4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80110f8:	6022      	str	r2, [r4, #0]
 80110fa:	460d      	mov	r5, r1
 80110fc:	468a      	mov	sl, r1
 80110fe:	f806 3b01 	strb.w	r3, [r6], #1
 8011102:	e7e2      	b.n	80110ca <_scanf_float+0x15e>
 8011104:	6822      	ldr	r2, [r4, #0]
 8011106:	0610      	lsls	r0, r2, #24
 8011108:	f57f af62 	bpl.w	8010fd0 <_scanf_float+0x64>
 801110c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011110:	6022      	str	r2, [r4, #0]
 8011112:	e7f4      	b.n	80110fe <_scanf_float+0x192>
 8011114:	f1ba 0f00 	cmp.w	sl, #0
 8011118:	d10e      	bne.n	8011138 <_scanf_float+0x1cc>
 801111a:	f1b9 0f00 	cmp.w	r9, #0
 801111e:	d10e      	bne.n	801113e <_scanf_float+0x1d2>
 8011120:	6822      	ldr	r2, [r4, #0]
 8011122:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011126:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801112a:	d108      	bne.n	801113e <_scanf_float+0x1d2>
 801112c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011130:	6022      	str	r2, [r4, #0]
 8011132:	f04f 0a01 	mov.w	sl, #1
 8011136:	e7e2      	b.n	80110fe <_scanf_float+0x192>
 8011138:	f1ba 0f02 	cmp.w	sl, #2
 801113c:	d055      	beq.n	80111ea <_scanf_float+0x27e>
 801113e:	2d01      	cmp	r5, #1
 8011140:	d002      	beq.n	8011148 <_scanf_float+0x1dc>
 8011142:	2d04      	cmp	r5, #4
 8011144:	f47f af44 	bne.w	8010fd0 <_scanf_float+0x64>
 8011148:	3501      	adds	r5, #1
 801114a:	b2ed      	uxtb	r5, r5
 801114c:	e7d7      	b.n	80110fe <_scanf_float+0x192>
 801114e:	f1ba 0f01 	cmp.w	sl, #1
 8011152:	f47f af3d 	bne.w	8010fd0 <_scanf_float+0x64>
 8011156:	f04f 0a02 	mov.w	sl, #2
 801115a:	e7d0      	b.n	80110fe <_scanf_float+0x192>
 801115c:	b97d      	cbnz	r5, 801117e <_scanf_float+0x212>
 801115e:	f1b9 0f00 	cmp.w	r9, #0
 8011162:	f47f af38 	bne.w	8010fd6 <_scanf_float+0x6a>
 8011166:	6822      	ldr	r2, [r4, #0]
 8011168:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801116c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011170:	f040 8108 	bne.w	8011384 <_scanf_float+0x418>
 8011174:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011178:	6022      	str	r2, [r4, #0]
 801117a:	2501      	movs	r5, #1
 801117c:	e7bf      	b.n	80110fe <_scanf_float+0x192>
 801117e:	2d03      	cmp	r5, #3
 8011180:	d0e2      	beq.n	8011148 <_scanf_float+0x1dc>
 8011182:	2d05      	cmp	r5, #5
 8011184:	e7de      	b.n	8011144 <_scanf_float+0x1d8>
 8011186:	2d02      	cmp	r5, #2
 8011188:	f47f af22 	bne.w	8010fd0 <_scanf_float+0x64>
 801118c:	2503      	movs	r5, #3
 801118e:	e7b6      	b.n	80110fe <_scanf_float+0x192>
 8011190:	2d06      	cmp	r5, #6
 8011192:	f47f af1d 	bne.w	8010fd0 <_scanf_float+0x64>
 8011196:	2507      	movs	r5, #7
 8011198:	e7b1      	b.n	80110fe <_scanf_float+0x192>
 801119a:	6822      	ldr	r2, [r4, #0]
 801119c:	0591      	lsls	r1, r2, #22
 801119e:	f57f af17 	bpl.w	8010fd0 <_scanf_float+0x64>
 80111a2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80111a6:	6022      	str	r2, [r4, #0]
 80111a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80111ac:	e7a7      	b.n	80110fe <_scanf_float+0x192>
 80111ae:	6822      	ldr	r2, [r4, #0]
 80111b0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80111b4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80111b8:	d006      	beq.n	80111c8 <_scanf_float+0x25c>
 80111ba:	0550      	lsls	r0, r2, #21
 80111bc:	f57f af08 	bpl.w	8010fd0 <_scanf_float+0x64>
 80111c0:	f1b9 0f00 	cmp.w	r9, #0
 80111c4:	f000 80de 	beq.w	8011384 <_scanf_float+0x418>
 80111c8:	0591      	lsls	r1, r2, #22
 80111ca:	bf58      	it	pl
 80111cc:	9902      	ldrpl	r1, [sp, #8]
 80111ce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80111d2:	bf58      	it	pl
 80111d4:	eba9 0101 	subpl.w	r1, r9, r1
 80111d8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80111dc:	bf58      	it	pl
 80111de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80111e2:	6022      	str	r2, [r4, #0]
 80111e4:	f04f 0900 	mov.w	r9, #0
 80111e8:	e789      	b.n	80110fe <_scanf_float+0x192>
 80111ea:	f04f 0a03 	mov.w	sl, #3
 80111ee:	e786      	b.n	80110fe <_scanf_float+0x192>
 80111f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80111f4:	4639      	mov	r1, r7
 80111f6:	4640      	mov	r0, r8
 80111f8:	4798      	blx	r3
 80111fa:	2800      	cmp	r0, #0
 80111fc:	f43f aedb 	beq.w	8010fb6 <_scanf_float+0x4a>
 8011200:	e6e6      	b.n	8010fd0 <_scanf_float+0x64>
 8011202:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011206:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801120a:	463a      	mov	r2, r7
 801120c:	4640      	mov	r0, r8
 801120e:	4798      	blx	r3
 8011210:	6923      	ldr	r3, [r4, #16]
 8011212:	3b01      	subs	r3, #1
 8011214:	6123      	str	r3, [r4, #16]
 8011216:	e6e8      	b.n	8010fea <_scanf_float+0x7e>
 8011218:	1e6b      	subs	r3, r5, #1
 801121a:	2b06      	cmp	r3, #6
 801121c:	d824      	bhi.n	8011268 <_scanf_float+0x2fc>
 801121e:	2d02      	cmp	r5, #2
 8011220:	d836      	bhi.n	8011290 <_scanf_float+0x324>
 8011222:	9b01      	ldr	r3, [sp, #4]
 8011224:	429e      	cmp	r6, r3
 8011226:	f67f aee4 	bls.w	8010ff2 <_scanf_float+0x86>
 801122a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801122e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011232:	463a      	mov	r2, r7
 8011234:	4640      	mov	r0, r8
 8011236:	4798      	blx	r3
 8011238:	6923      	ldr	r3, [r4, #16]
 801123a:	3b01      	subs	r3, #1
 801123c:	6123      	str	r3, [r4, #16]
 801123e:	e7f0      	b.n	8011222 <_scanf_float+0x2b6>
 8011240:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011244:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8011248:	463a      	mov	r2, r7
 801124a:	4640      	mov	r0, r8
 801124c:	4798      	blx	r3
 801124e:	6923      	ldr	r3, [r4, #16]
 8011250:	3b01      	subs	r3, #1
 8011252:	6123      	str	r3, [r4, #16]
 8011254:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011258:	fa5f fa8a 	uxtb.w	sl, sl
 801125c:	f1ba 0f02 	cmp.w	sl, #2
 8011260:	d1ee      	bne.n	8011240 <_scanf_float+0x2d4>
 8011262:	3d03      	subs	r5, #3
 8011264:	b2ed      	uxtb	r5, r5
 8011266:	1b76      	subs	r6, r6, r5
 8011268:	6823      	ldr	r3, [r4, #0]
 801126a:	05da      	lsls	r2, r3, #23
 801126c:	d530      	bpl.n	80112d0 <_scanf_float+0x364>
 801126e:	055b      	lsls	r3, r3, #21
 8011270:	d511      	bpl.n	8011296 <_scanf_float+0x32a>
 8011272:	9b01      	ldr	r3, [sp, #4]
 8011274:	429e      	cmp	r6, r3
 8011276:	f67f aebc 	bls.w	8010ff2 <_scanf_float+0x86>
 801127a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801127e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011282:	463a      	mov	r2, r7
 8011284:	4640      	mov	r0, r8
 8011286:	4798      	blx	r3
 8011288:	6923      	ldr	r3, [r4, #16]
 801128a:	3b01      	subs	r3, #1
 801128c:	6123      	str	r3, [r4, #16]
 801128e:	e7f0      	b.n	8011272 <_scanf_float+0x306>
 8011290:	46aa      	mov	sl, r5
 8011292:	46b3      	mov	fp, r6
 8011294:	e7de      	b.n	8011254 <_scanf_float+0x2e8>
 8011296:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801129a:	6923      	ldr	r3, [r4, #16]
 801129c:	2965      	cmp	r1, #101	@ 0x65
 801129e:	f103 33ff 	add.w	r3, r3, #4294967295
 80112a2:	f106 35ff 	add.w	r5, r6, #4294967295
 80112a6:	6123      	str	r3, [r4, #16]
 80112a8:	d00c      	beq.n	80112c4 <_scanf_float+0x358>
 80112aa:	2945      	cmp	r1, #69	@ 0x45
 80112ac:	d00a      	beq.n	80112c4 <_scanf_float+0x358>
 80112ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80112b2:	463a      	mov	r2, r7
 80112b4:	4640      	mov	r0, r8
 80112b6:	4798      	blx	r3
 80112b8:	6923      	ldr	r3, [r4, #16]
 80112ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80112be:	3b01      	subs	r3, #1
 80112c0:	1eb5      	subs	r5, r6, #2
 80112c2:	6123      	str	r3, [r4, #16]
 80112c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80112c8:	463a      	mov	r2, r7
 80112ca:	4640      	mov	r0, r8
 80112cc:	4798      	blx	r3
 80112ce:	462e      	mov	r6, r5
 80112d0:	6822      	ldr	r2, [r4, #0]
 80112d2:	f012 0210 	ands.w	r2, r2, #16
 80112d6:	d001      	beq.n	80112dc <_scanf_float+0x370>
 80112d8:	2000      	movs	r0, #0
 80112da:	e68b      	b.n	8010ff4 <_scanf_float+0x88>
 80112dc:	7032      	strb	r2, [r6, #0]
 80112de:	6823      	ldr	r3, [r4, #0]
 80112e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80112e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80112e8:	d11c      	bne.n	8011324 <_scanf_float+0x3b8>
 80112ea:	9b02      	ldr	r3, [sp, #8]
 80112ec:	454b      	cmp	r3, r9
 80112ee:	eba3 0209 	sub.w	r2, r3, r9
 80112f2:	d123      	bne.n	801133c <_scanf_float+0x3d0>
 80112f4:	9901      	ldr	r1, [sp, #4]
 80112f6:	2200      	movs	r2, #0
 80112f8:	4640      	mov	r0, r8
 80112fa:	f002 fc45 	bl	8013b88 <_strtod_r>
 80112fe:	9b03      	ldr	r3, [sp, #12]
 8011300:	6821      	ldr	r1, [r4, #0]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	f011 0f02 	tst.w	r1, #2
 8011308:	ec57 6b10 	vmov	r6, r7, d0
 801130c:	f103 0204 	add.w	r2, r3, #4
 8011310:	d01f      	beq.n	8011352 <_scanf_float+0x3e6>
 8011312:	9903      	ldr	r1, [sp, #12]
 8011314:	600a      	str	r2, [r1, #0]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	e9c3 6700 	strd	r6, r7, [r3]
 801131c:	68e3      	ldr	r3, [r4, #12]
 801131e:	3301      	adds	r3, #1
 8011320:	60e3      	str	r3, [r4, #12]
 8011322:	e7d9      	b.n	80112d8 <_scanf_float+0x36c>
 8011324:	9b04      	ldr	r3, [sp, #16]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d0e4      	beq.n	80112f4 <_scanf_float+0x388>
 801132a:	9905      	ldr	r1, [sp, #20]
 801132c:	230a      	movs	r3, #10
 801132e:	3101      	adds	r1, #1
 8011330:	4640      	mov	r0, r8
 8011332:	f002 fca9 	bl	8013c88 <_strtol_r>
 8011336:	9b04      	ldr	r3, [sp, #16]
 8011338:	9e05      	ldr	r6, [sp, #20]
 801133a:	1ac2      	subs	r2, r0, r3
 801133c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8011340:	429e      	cmp	r6, r3
 8011342:	bf28      	it	cs
 8011344:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011348:	4910      	ldr	r1, [pc, #64]	@ (801138c <_scanf_float+0x420>)
 801134a:	4630      	mov	r0, r6
 801134c:	f000 f8e4 	bl	8011518 <siprintf>
 8011350:	e7d0      	b.n	80112f4 <_scanf_float+0x388>
 8011352:	f011 0f04 	tst.w	r1, #4
 8011356:	9903      	ldr	r1, [sp, #12]
 8011358:	600a      	str	r2, [r1, #0]
 801135a:	d1dc      	bne.n	8011316 <_scanf_float+0x3aa>
 801135c:	681d      	ldr	r5, [r3, #0]
 801135e:	4632      	mov	r2, r6
 8011360:	463b      	mov	r3, r7
 8011362:	4630      	mov	r0, r6
 8011364:	4639      	mov	r1, r7
 8011366:	f7ef fc09 	bl	8000b7c <__aeabi_dcmpun>
 801136a:	b128      	cbz	r0, 8011378 <_scanf_float+0x40c>
 801136c:	4808      	ldr	r0, [pc, #32]	@ (8011390 <_scanf_float+0x424>)
 801136e:	f000 fa03 	bl	8011778 <nanf>
 8011372:	ed85 0a00 	vstr	s0, [r5]
 8011376:	e7d1      	b.n	801131c <_scanf_float+0x3b0>
 8011378:	4630      	mov	r0, r6
 801137a:	4639      	mov	r1, r7
 801137c:	f7ef fc5c 	bl	8000c38 <__aeabi_d2f>
 8011380:	6028      	str	r0, [r5, #0]
 8011382:	e7cb      	b.n	801131c <_scanf_float+0x3b0>
 8011384:	f04f 0900 	mov.w	r9, #0
 8011388:	e629      	b.n	8010fde <_scanf_float+0x72>
 801138a:	bf00      	nop
 801138c:	08016e1a 	.word	0x08016e1a
 8011390:	080171d0 	.word	0x080171d0

08011394 <std>:
 8011394:	2300      	movs	r3, #0
 8011396:	b510      	push	{r4, lr}
 8011398:	4604      	mov	r4, r0
 801139a:	e9c0 3300 	strd	r3, r3, [r0]
 801139e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80113a2:	6083      	str	r3, [r0, #8]
 80113a4:	8181      	strh	r1, [r0, #12]
 80113a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80113a8:	81c2      	strh	r2, [r0, #14]
 80113aa:	6183      	str	r3, [r0, #24]
 80113ac:	4619      	mov	r1, r3
 80113ae:	2208      	movs	r2, #8
 80113b0:	305c      	adds	r0, #92	@ 0x5c
 80113b2:	f000 f940 	bl	8011636 <memset>
 80113b6:	4b0d      	ldr	r3, [pc, #52]	@ (80113ec <std+0x58>)
 80113b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80113ba:	4b0d      	ldr	r3, [pc, #52]	@ (80113f0 <std+0x5c>)
 80113bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80113be:	4b0d      	ldr	r3, [pc, #52]	@ (80113f4 <std+0x60>)
 80113c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80113c2:	4b0d      	ldr	r3, [pc, #52]	@ (80113f8 <std+0x64>)
 80113c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80113c6:	4b0d      	ldr	r3, [pc, #52]	@ (80113fc <std+0x68>)
 80113c8:	6224      	str	r4, [r4, #32]
 80113ca:	429c      	cmp	r4, r3
 80113cc:	d006      	beq.n	80113dc <std+0x48>
 80113ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80113d2:	4294      	cmp	r4, r2
 80113d4:	d002      	beq.n	80113dc <std+0x48>
 80113d6:	33d0      	adds	r3, #208	@ 0xd0
 80113d8:	429c      	cmp	r4, r3
 80113da:	d105      	bne.n	80113e8 <std+0x54>
 80113dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80113e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113e4:	f000 b9b6 	b.w	8011754 <__retarget_lock_init_recursive>
 80113e8:	bd10      	pop	{r4, pc}
 80113ea:	bf00      	nop
 80113ec:	080115ad 	.word	0x080115ad
 80113f0:	080115d3 	.word	0x080115d3
 80113f4:	0801160b 	.word	0x0801160b
 80113f8:	0801162f 	.word	0x0801162f
 80113fc:	20002534 	.word	0x20002534

08011400 <stdio_exit_handler>:
 8011400:	4a02      	ldr	r2, [pc, #8]	@ (801140c <stdio_exit_handler+0xc>)
 8011402:	4903      	ldr	r1, [pc, #12]	@ (8011410 <stdio_exit_handler+0x10>)
 8011404:	4803      	ldr	r0, [pc, #12]	@ (8011414 <stdio_exit_handler+0x14>)
 8011406:	f000 b869 	b.w	80114dc <_fwalk_sglue>
 801140a:	bf00      	nop
 801140c:	200001a4 	.word	0x200001a4
 8011410:	08014679 	.word	0x08014679
 8011414:	200001b4 	.word	0x200001b4

08011418 <cleanup_stdio>:
 8011418:	6841      	ldr	r1, [r0, #4]
 801141a:	4b0c      	ldr	r3, [pc, #48]	@ (801144c <cleanup_stdio+0x34>)
 801141c:	4299      	cmp	r1, r3
 801141e:	b510      	push	{r4, lr}
 8011420:	4604      	mov	r4, r0
 8011422:	d001      	beq.n	8011428 <cleanup_stdio+0x10>
 8011424:	f003 f928 	bl	8014678 <_fflush_r>
 8011428:	68a1      	ldr	r1, [r4, #8]
 801142a:	4b09      	ldr	r3, [pc, #36]	@ (8011450 <cleanup_stdio+0x38>)
 801142c:	4299      	cmp	r1, r3
 801142e:	d002      	beq.n	8011436 <cleanup_stdio+0x1e>
 8011430:	4620      	mov	r0, r4
 8011432:	f003 f921 	bl	8014678 <_fflush_r>
 8011436:	68e1      	ldr	r1, [r4, #12]
 8011438:	4b06      	ldr	r3, [pc, #24]	@ (8011454 <cleanup_stdio+0x3c>)
 801143a:	4299      	cmp	r1, r3
 801143c:	d004      	beq.n	8011448 <cleanup_stdio+0x30>
 801143e:	4620      	mov	r0, r4
 8011440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011444:	f003 b918 	b.w	8014678 <_fflush_r>
 8011448:	bd10      	pop	{r4, pc}
 801144a:	bf00      	nop
 801144c:	20002534 	.word	0x20002534
 8011450:	2000259c 	.word	0x2000259c
 8011454:	20002604 	.word	0x20002604

08011458 <global_stdio_init.part.0>:
 8011458:	b510      	push	{r4, lr}
 801145a:	4b0b      	ldr	r3, [pc, #44]	@ (8011488 <global_stdio_init.part.0+0x30>)
 801145c:	4c0b      	ldr	r4, [pc, #44]	@ (801148c <global_stdio_init.part.0+0x34>)
 801145e:	4a0c      	ldr	r2, [pc, #48]	@ (8011490 <global_stdio_init.part.0+0x38>)
 8011460:	601a      	str	r2, [r3, #0]
 8011462:	4620      	mov	r0, r4
 8011464:	2200      	movs	r2, #0
 8011466:	2104      	movs	r1, #4
 8011468:	f7ff ff94 	bl	8011394 <std>
 801146c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011470:	2201      	movs	r2, #1
 8011472:	2109      	movs	r1, #9
 8011474:	f7ff ff8e 	bl	8011394 <std>
 8011478:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801147c:	2202      	movs	r2, #2
 801147e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011482:	2112      	movs	r1, #18
 8011484:	f7ff bf86 	b.w	8011394 <std>
 8011488:	2000266c 	.word	0x2000266c
 801148c:	20002534 	.word	0x20002534
 8011490:	08011401 	.word	0x08011401

08011494 <__sfp_lock_acquire>:
 8011494:	4801      	ldr	r0, [pc, #4]	@ (801149c <__sfp_lock_acquire+0x8>)
 8011496:	f000 b95e 	b.w	8011756 <__retarget_lock_acquire_recursive>
 801149a:	bf00      	nop
 801149c:	20002675 	.word	0x20002675

080114a0 <__sfp_lock_release>:
 80114a0:	4801      	ldr	r0, [pc, #4]	@ (80114a8 <__sfp_lock_release+0x8>)
 80114a2:	f000 b959 	b.w	8011758 <__retarget_lock_release_recursive>
 80114a6:	bf00      	nop
 80114a8:	20002675 	.word	0x20002675

080114ac <__sinit>:
 80114ac:	b510      	push	{r4, lr}
 80114ae:	4604      	mov	r4, r0
 80114b0:	f7ff fff0 	bl	8011494 <__sfp_lock_acquire>
 80114b4:	6a23      	ldr	r3, [r4, #32]
 80114b6:	b11b      	cbz	r3, 80114c0 <__sinit+0x14>
 80114b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114bc:	f7ff bff0 	b.w	80114a0 <__sfp_lock_release>
 80114c0:	4b04      	ldr	r3, [pc, #16]	@ (80114d4 <__sinit+0x28>)
 80114c2:	6223      	str	r3, [r4, #32]
 80114c4:	4b04      	ldr	r3, [pc, #16]	@ (80114d8 <__sinit+0x2c>)
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d1f5      	bne.n	80114b8 <__sinit+0xc>
 80114cc:	f7ff ffc4 	bl	8011458 <global_stdio_init.part.0>
 80114d0:	e7f2      	b.n	80114b8 <__sinit+0xc>
 80114d2:	bf00      	nop
 80114d4:	08011419 	.word	0x08011419
 80114d8:	2000266c 	.word	0x2000266c

080114dc <_fwalk_sglue>:
 80114dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114e0:	4607      	mov	r7, r0
 80114e2:	4688      	mov	r8, r1
 80114e4:	4614      	mov	r4, r2
 80114e6:	2600      	movs	r6, #0
 80114e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80114ec:	f1b9 0901 	subs.w	r9, r9, #1
 80114f0:	d505      	bpl.n	80114fe <_fwalk_sglue+0x22>
 80114f2:	6824      	ldr	r4, [r4, #0]
 80114f4:	2c00      	cmp	r4, #0
 80114f6:	d1f7      	bne.n	80114e8 <_fwalk_sglue+0xc>
 80114f8:	4630      	mov	r0, r6
 80114fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114fe:	89ab      	ldrh	r3, [r5, #12]
 8011500:	2b01      	cmp	r3, #1
 8011502:	d907      	bls.n	8011514 <_fwalk_sglue+0x38>
 8011504:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011508:	3301      	adds	r3, #1
 801150a:	d003      	beq.n	8011514 <_fwalk_sglue+0x38>
 801150c:	4629      	mov	r1, r5
 801150e:	4638      	mov	r0, r7
 8011510:	47c0      	blx	r8
 8011512:	4306      	orrs	r6, r0
 8011514:	3568      	adds	r5, #104	@ 0x68
 8011516:	e7e9      	b.n	80114ec <_fwalk_sglue+0x10>

08011518 <siprintf>:
 8011518:	b40e      	push	{r1, r2, r3}
 801151a:	b500      	push	{lr}
 801151c:	b09c      	sub	sp, #112	@ 0x70
 801151e:	ab1d      	add	r3, sp, #116	@ 0x74
 8011520:	9002      	str	r0, [sp, #8]
 8011522:	9006      	str	r0, [sp, #24]
 8011524:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011528:	4809      	ldr	r0, [pc, #36]	@ (8011550 <siprintf+0x38>)
 801152a:	9107      	str	r1, [sp, #28]
 801152c:	9104      	str	r1, [sp, #16]
 801152e:	4909      	ldr	r1, [pc, #36]	@ (8011554 <siprintf+0x3c>)
 8011530:	f853 2b04 	ldr.w	r2, [r3], #4
 8011534:	9105      	str	r1, [sp, #20]
 8011536:	6800      	ldr	r0, [r0, #0]
 8011538:	9301      	str	r3, [sp, #4]
 801153a:	a902      	add	r1, sp, #8
 801153c:	f002 fc02 	bl	8013d44 <_svfiprintf_r>
 8011540:	9b02      	ldr	r3, [sp, #8]
 8011542:	2200      	movs	r2, #0
 8011544:	701a      	strb	r2, [r3, #0]
 8011546:	b01c      	add	sp, #112	@ 0x70
 8011548:	f85d eb04 	ldr.w	lr, [sp], #4
 801154c:	b003      	add	sp, #12
 801154e:	4770      	bx	lr
 8011550:	200001b0 	.word	0x200001b0
 8011554:	ffff0208 	.word	0xffff0208

08011558 <siscanf>:
 8011558:	b40e      	push	{r1, r2, r3}
 801155a:	b530      	push	{r4, r5, lr}
 801155c:	b09c      	sub	sp, #112	@ 0x70
 801155e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8011560:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011564:	f854 5b04 	ldr.w	r5, [r4], #4
 8011568:	f8ad 2014 	strh.w	r2, [sp, #20]
 801156c:	9002      	str	r0, [sp, #8]
 801156e:	9006      	str	r0, [sp, #24]
 8011570:	f7ee fea6 	bl	80002c0 <strlen>
 8011574:	4b0b      	ldr	r3, [pc, #44]	@ (80115a4 <siscanf+0x4c>)
 8011576:	9003      	str	r0, [sp, #12]
 8011578:	9007      	str	r0, [sp, #28]
 801157a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801157c:	480a      	ldr	r0, [pc, #40]	@ (80115a8 <siscanf+0x50>)
 801157e:	9401      	str	r4, [sp, #4]
 8011580:	2300      	movs	r3, #0
 8011582:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011584:	9314      	str	r3, [sp, #80]	@ 0x50
 8011586:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801158a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801158e:	462a      	mov	r2, r5
 8011590:	4623      	mov	r3, r4
 8011592:	a902      	add	r1, sp, #8
 8011594:	6800      	ldr	r0, [r0, #0]
 8011596:	f002 fd29 	bl	8013fec <__ssvfiscanf_r>
 801159a:	b01c      	add	sp, #112	@ 0x70
 801159c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80115a0:	b003      	add	sp, #12
 80115a2:	4770      	bx	lr
 80115a4:	080115cf 	.word	0x080115cf
 80115a8:	200001b0 	.word	0x200001b0

080115ac <__sread>:
 80115ac:	b510      	push	{r4, lr}
 80115ae:	460c      	mov	r4, r1
 80115b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115b4:	f000 f880 	bl	80116b8 <_read_r>
 80115b8:	2800      	cmp	r0, #0
 80115ba:	bfab      	itete	ge
 80115bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80115be:	89a3      	ldrhlt	r3, [r4, #12]
 80115c0:	181b      	addge	r3, r3, r0
 80115c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80115c6:	bfac      	ite	ge
 80115c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80115ca:	81a3      	strhlt	r3, [r4, #12]
 80115cc:	bd10      	pop	{r4, pc}

080115ce <__seofread>:
 80115ce:	2000      	movs	r0, #0
 80115d0:	4770      	bx	lr

080115d2 <__swrite>:
 80115d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115d6:	461f      	mov	r7, r3
 80115d8:	898b      	ldrh	r3, [r1, #12]
 80115da:	05db      	lsls	r3, r3, #23
 80115dc:	4605      	mov	r5, r0
 80115de:	460c      	mov	r4, r1
 80115e0:	4616      	mov	r6, r2
 80115e2:	d505      	bpl.n	80115f0 <__swrite+0x1e>
 80115e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115e8:	2302      	movs	r3, #2
 80115ea:	2200      	movs	r2, #0
 80115ec:	f000 f852 	bl	8011694 <_lseek_r>
 80115f0:	89a3      	ldrh	r3, [r4, #12]
 80115f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80115fa:	81a3      	strh	r3, [r4, #12]
 80115fc:	4632      	mov	r2, r6
 80115fe:	463b      	mov	r3, r7
 8011600:	4628      	mov	r0, r5
 8011602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011606:	f000 b869 	b.w	80116dc <_write_r>

0801160a <__sseek>:
 801160a:	b510      	push	{r4, lr}
 801160c:	460c      	mov	r4, r1
 801160e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011612:	f000 f83f 	bl	8011694 <_lseek_r>
 8011616:	1c43      	adds	r3, r0, #1
 8011618:	89a3      	ldrh	r3, [r4, #12]
 801161a:	bf15      	itete	ne
 801161c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801161e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011622:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011626:	81a3      	strheq	r3, [r4, #12]
 8011628:	bf18      	it	ne
 801162a:	81a3      	strhne	r3, [r4, #12]
 801162c:	bd10      	pop	{r4, pc}

0801162e <__sclose>:
 801162e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011632:	f000 b81f 	b.w	8011674 <_close_r>

08011636 <memset>:
 8011636:	4402      	add	r2, r0
 8011638:	4603      	mov	r3, r0
 801163a:	4293      	cmp	r3, r2
 801163c:	d100      	bne.n	8011640 <memset+0xa>
 801163e:	4770      	bx	lr
 8011640:	f803 1b01 	strb.w	r1, [r3], #1
 8011644:	e7f9      	b.n	801163a <memset+0x4>

08011646 <strncmp>:
 8011646:	b510      	push	{r4, lr}
 8011648:	b16a      	cbz	r2, 8011666 <strncmp+0x20>
 801164a:	3901      	subs	r1, #1
 801164c:	1884      	adds	r4, r0, r2
 801164e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011652:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011656:	429a      	cmp	r2, r3
 8011658:	d103      	bne.n	8011662 <strncmp+0x1c>
 801165a:	42a0      	cmp	r0, r4
 801165c:	d001      	beq.n	8011662 <strncmp+0x1c>
 801165e:	2a00      	cmp	r2, #0
 8011660:	d1f5      	bne.n	801164e <strncmp+0x8>
 8011662:	1ad0      	subs	r0, r2, r3
 8011664:	bd10      	pop	{r4, pc}
 8011666:	4610      	mov	r0, r2
 8011668:	e7fc      	b.n	8011664 <strncmp+0x1e>
	...

0801166c <_localeconv_r>:
 801166c:	4800      	ldr	r0, [pc, #0]	@ (8011670 <_localeconv_r+0x4>)
 801166e:	4770      	bx	lr
 8011670:	200002f0 	.word	0x200002f0

08011674 <_close_r>:
 8011674:	b538      	push	{r3, r4, r5, lr}
 8011676:	4d06      	ldr	r5, [pc, #24]	@ (8011690 <_close_r+0x1c>)
 8011678:	2300      	movs	r3, #0
 801167a:	4604      	mov	r4, r0
 801167c:	4608      	mov	r0, r1
 801167e:	602b      	str	r3, [r5, #0]
 8011680:	f7f2 fc38 	bl	8003ef4 <_close>
 8011684:	1c43      	adds	r3, r0, #1
 8011686:	d102      	bne.n	801168e <_close_r+0x1a>
 8011688:	682b      	ldr	r3, [r5, #0]
 801168a:	b103      	cbz	r3, 801168e <_close_r+0x1a>
 801168c:	6023      	str	r3, [r4, #0]
 801168e:	bd38      	pop	{r3, r4, r5, pc}
 8011690:	20002670 	.word	0x20002670

08011694 <_lseek_r>:
 8011694:	b538      	push	{r3, r4, r5, lr}
 8011696:	4d07      	ldr	r5, [pc, #28]	@ (80116b4 <_lseek_r+0x20>)
 8011698:	4604      	mov	r4, r0
 801169a:	4608      	mov	r0, r1
 801169c:	4611      	mov	r1, r2
 801169e:	2200      	movs	r2, #0
 80116a0:	602a      	str	r2, [r5, #0]
 80116a2:	461a      	mov	r2, r3
 80116a4:	f7f2 fc4d 	bl	8003f42 <_lseek>
 80116a8:	1c43      	adds	r3, r0, #1
 80116aa:	d102      	bne.n	80116b2 <_lseek_r+0x1e>
 80116ac:	682b      	ldr	r3, [r5, #0]
 80116ae:	b103      	cbz	r3, 80116b2 <_lseek_r+0x1e>
 80116b0:	6023      	str	r3, [r4, #0]
 80116b2:	bd38      	pop	{r3, r4, r5, pc}
 80116b4:	20002670 	.word	0x20002670

080116b8 <_read_r>:
 80116b8:	b538      	push	{r3, r4, r5, lr}
 80116ba:	4d07      	ldr	r5, [pc, #28]	@ (80116d8 <_read_r+0x20>)
 80116bc:	4604      	mov	r4, r0
 80116be:	4608      	mov	r0, r1
 80116c0:	4611      	mov	r1, r2
 80116c2:	2200      	movs	r2, #0
 80116c4:	602a      	str	r2, [r5, #0]
 80116c6:	461a      	mov	r2, r3
 80116c8:	f7f2 fbdb 	bl	8003e82 <_read>
 80116cc:	1c43      	adds	r3, r0, #1
 80116ce:	d102      	bne.n	80116d6 <_read_r+0x1e>
 80116d0:	682b      	ldr	r3, [r5, #0]
 80116d2:	b103      	cbz	r3, 80116d6 <_read_r+0x1e>
 80116d4:	6023      	str	r3, [r4, #0]
 80116d6:	bd38      	pop	{r3, r4, r5, pc}
 80116d8:	20002670 	.word	0x20002670

080116dc <_write_r>:
 80116dc:	b538      	push	{r3, r4, r5, lr}
 80116de:	4d07      	ldr	r5, [pc, #28]	@ (80116fc <_write_r+0x20>)
 80116e0:	4604      	mov	r4, r0
 80116e2:	4608      	mov	r0, r1
 80116e4:	4611      	mov	r1, r2
 80116e6:	2200      	movs	r2, #0
 80116e8:	602a      	str	r2, [r5, #0]
 80116ea:	461a      	mov	r2, r3
 80116ec:	f7f2 fbe6 	bl	8003ebc <_write>
 80116f0:	1c43      	adds	r3, r0, #1
 80116f2:	d102      	bne.n	80116fa <_write_r+0x1e>
 80116f4:	682b      	ldr	r3, [r5, #0]
 80116f6:	b103      	cbz	r3, 80116fa <_write_r+0x1e>
 80116f8:	6023      	str	r3, [r4, #0]
 80116fa:	bd38      	pop	{r3, r4, r5, pc}
 80116fc:	20002670 	.word	0x20002670

08011700 <__errno>:
 8011700:	4b01      	ldr	r3, [pc, #4]	@ (8011708 <__errno+0x8>)
 8011702:	6818      	ldr	r0, [r3, #0]
 8011704:	4770      	bx	lr
 8011706:	bf00      	nop
 8011708:	200001b0 	.word	0x200001b0

0801170c <__libc_init_array>:
 801170c:	b570      	push	{r4, r5, r6, lr}
 801170e:	4d0d      	ldr	r5, [pc, #52]	@ (8011744 <__libc_init_array+0x38>)
 8011710:	4c0d      	ldr	r4, [pc, #52]	@ (8011748 <__libc_init_array+0x3c>)
 8011712:	1b64      	subs	r4, r4, r5
 8011714:	10a4      	asrs	r4, r4, #2
 8011716:	2600      	movs	r6, #0
 8011718:	42a6      	cmp	r6, r4
 801171a:	d109      	bne.n	8011730 <__libc_init_array+0x24>
 801171c:	4d0b      	ldr	r5, [pc, #44]	@ (801174c <__libc_init_array+0x40>)
 801171e:	4c0c      	ldr	r4, [pc, #48]	@ (8011750 <__libc_init_array+0x44>)
 8011720:	f005 f97e 	bl	8016a20 <_init>
 8011724:	1b64      	subs	r4, r4, r5
 8011726:	10a4      	asrs	r4, r4, #2
 8011728:	2600      	movs	r6, #0
 801172a:	42a6      	cmp	r6, r4
 801172c:	d105      	bne.n	801173a <__libc_init_array+0x2e>
 801172e:	bd70      	pop	{r4, r5, r6, pc}
 8011730:	f855 3b04 	ldr.w	r3, [r5], #4
 8011734:	4798      	blx	r3
 8011736:	3601      	adds	r6, #1
 8011738:	e7ee      	b.n	8011718 <__libc_init_array+0xc>
 801173a:	f855 3b04 	ldr.w	r3, [r5], #4
 801173e:	4798      	blx	r3
 8011740:	3601      	adds	r6, #1
 8011742:	e7f2      	b.n	801172a <__libc_init_array+0x1e>
 8011744:	08017270 	.word	0x08017270
 8011748:	08017270 	.word	0x08017270
 801174c:	08017270 	.word	0x08017270
 8011750:	08017274 	.word	0x08017274

08011754 <__retarget_lock_init_recursive>:
 8011754:	4770      	bx	lr

08011756 <__retarget_lock_acquire_recursive>:
 8011756:	4770      	bx	lr

08011758 <__retarget_lock_release_recursive>:
 8011758:	4770      	bx	lr

0801175a <memcpy>:
 801175a:	440a      	add	r2, r1
 801175c:	4291      	cmp	r1, r2
 801175e:	f100 33ff 	add.w	r3, r0, #4294967295
 8011762:	d100      	bne.n	8011766 <memcpy+0xc>
 8011764:	4770      	bx	lr
 8011766:	b510      	push	{r4, lr}
 8011768:	f811 4b01 	ldrb.w	r4, [r1], #1
 801176c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011770:	4291      	cmp	r1, r2
 8011772:	d1f9      	bne.n	8011768 <memcpy+0xe>
 8011774:	bd10      	pop	{r4, pc}
	...

08011778 <nanf>:
 8011778:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011780 <nanf+0x8>
 801177c:	4770      	bx	lr
 801177e:	bf00      	nop
 8011780:	7fc00000 	.word	0x7fc00000

08011784 <quorem>:
 8011784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011788:	6903      	ldr	r3, [r0, #16]
 801178a:	690c      	ldr	r4, [r1, #16]
 801178c:	42a3      	cmp	r3, r4
 801178e:	4607      	mov	r7, r0
 8011790:	db7e      	blt.n	8011890 <quorem+0x10c>
 8011792:	3c01      	subs	r4, #1
 8011794:	f101 0814 	add.w	r8, r1, #20
 8011798:	00a3      	lsls	r3, r4, #2
 801179a:	f100 0514 	add.w	r5, r0, #20
 801179e:	9300      	str	r3, [sp, #0]
 80117a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80117a4:	9301      	str	r3, [sp, #4]
 80117a6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80117aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80117ae:	3301      	adds	r3, #1
 80117b0:	429a      	cmp	r2, r3
 80117b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80117b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80117ba:	d32e      	bcc.n	801181a <quorem+0x96>
 80117bc:	f04f 0a00 	mov.w	sl, #0
 80117c0:	46c4      	mov	ip, r8
 80117c2:	46ae      	mov	lr, r5
 80117c4:	46d3      	mov	fp, sl
 80117c6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80117ca:	b298      	uxth	r0, r3
 80117cc:	fb06 a000 	mla	r0, r6, r0, sl
 80117d0:	0c02      	lsrs	r2, r0, #16
 80117d2:	0c1b      	lsrs	r3, r3, #16
 80117d4:	fb06 2303 	mla	r3, r6, r3, r2
 80117d8:	f8de 2000 	ldr.w	r2, [lr]
 80117dc:	b280      	uxth	r0, r0
 80117de:	b292      	uxth	r2, r2
 80117e0:	1a12      	subs	r2, r2, r0
 80117e2:	445a      	add	r2, fp
 80117e4:	f8de 0000 	ldr.w	r0, [lr]
 80117e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80117ec:	b29b      	uxth	r3, r3
 80117ee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80117f2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80117f6:	b292      	uxth	r2, r2
 80117f8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80117fc:	45e1      	cmp	r9, ip
 80117fe:	f84e 2b04 	str.w	r2, [lr], #4
 8011802:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011806:	d2de      	bcs.n	80117c6 <quorem+0x42>
 8011808:	9b00      	ldr	r3, [sp, #0]
 801180a:	58eb      	ldr	r3, [r5, r3]
 801180c:	b92b      	cbnz	r3, 801181a <quorem+0x96>
 801180e:	9b01      	ldr	r3, [sp, #4]
 8011810:	3b04      	subs	r3, #4
 8011812:	429d      	cmp	r5, r3
 8011814:	461a      	mov	r2, r3
 8011816:	d32f      	bcc.n	8011878 <quorem+0xf4>
 8011818:	613c      	str	r4, [r7, #16]
 801181a:	4638      	mov	r0, r7
 801181c:	f001 f9c4 	bl	8012ba8 <__mcmp>
 8011820:	2800      	cmp	r0, #0
 8011822:	db25      	blt.n	8011870 <quorem+0xec>
 8011824:	4629      	mov	r1, r5
 8011826:	2000      	movs	r0, #0
 8011828:	f858 2b04 	ldr.w	r2, [r8], #4
 801182c:	f8d1 c000 	ldr.w	ip, [r1]
 8011830:	fa1f fe82 	uxth.w	lr, r2
 8011834:	fa1f f38c 	uxth.w	r3, ip
 8011838:	eba3 030e 	sub.w	r3, r3, lr
 801183c:	4403      	add	r3, r0
 801183e:	0c12      	lsrs	r2, r2, #16
 8011840:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011844:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011848:	b29b      	uxth	r3, r3
 801184a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801184e:	45c1      	cmp	r9, r8
 8011850:	f841 3b04 	str.w	r3, [r1], #4
 8011854:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011858:	d2e6      	bcs.n	8011828 <quorem+0xa4>
 801185a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801185e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011862:	b922      	cbnz	r2, 801186e <quorem+0xea>
 8011864:	3b04      	subs	r3, #4
 8011866:	429d      	cmp	r5, r3
 8011868:	461a      	mov	r2, r3
 801186a:	d30b      	bcc.n	8011884 <quorem+0x100>
 801186c:	613c      	str	r4, [r7, #16]
 801186e:	3601      	adds	r6, #1
 8011870:	4630      	mov	r0, r6
 8011872:	b003      	add	sp, #12
 8011874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011878:	6812      	ldr	r2, [r2, #0]
 801187a:	3b04      	subs	r3, #4
 801187c:	2a00      	cmp	r2, #0
 801187e:	d1cb      	bne.n	8011818 <quorem+0x94>
 8011880:	3c01      	subs	r4, #1
 8011882:	e7c6      	b.n	8011812 <quorem+0x8e>
 8011884:	6812      	ldr	r2, [r2, #0]
 8011886:	3b04      	subs	r3, #4
 8011888:	2a00      	cmp	r2, #0
 801188a:	d1ef      	bne.n	801186c <quorem+0xe8>
 801188c:	3c01      	subs	r4, #1
 801188e:	e7ea      	b.n	8011866 <quorem+0xe2>
 8011890:	2000      	movs	r0, #0
 8011892:	e7ee      	b.n	8011872 <quorem+0xee>
 8011894:	0000      	movs	r0, r0
	...

08011898 <_dtoa_r>:
 8011898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801189c:	69c7      	ldr	r7, [r0, #28]
 801189e:	b099      	sub	sp, #100	@ 0x64
 80118a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80118a4:	ec55 4b10 	vmov	r4, r5, d0
 80118a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80118aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80118ac:	4683      	mov	fp, r0
 80118ae:	920e      	str	r2, [sp, #56]	@ 0x38
 80118b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80118b2:	b97f      	cbnz	r7, 80118d4 <_dtoa_r+0x3c>
 80118b4:	2010      	movs	r0, #16
 80118b6:	f000 fdfd 	bl	80124b4 <malloc>
 80118ba:	4602      	mov	r2, r0
 80118bc:	f8cb 001c 	str.w	r0, [fp, #28]
 80118c0:	b920      	cbnz	r0, 80118cc <_dtoa_r+0x34>
 80118c2:	4ba7      	ldr	r3, [pc, #668]	@ (8011b60 <_dtoa_r+0x2c8>)
 80118c4:	21ef      	movs	r1, #239	@ 0xef
 80118c6:	48a7      	ldr	r0, [pc, #668]	@ (8011b64 <_dtoa_r+0x2cc>)
 80118c8:	f002 ffa6 	bl	8014818 <__assert_func>
 80118cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80118d0:	6007      	str	r7, [r0, #0]
 80118d2:	60c7      	str	r7, [r0, #12]
 80118d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80118d8:	6819      	ldr	r1, [r3, #0]
 80118da:	b159      	cbz	r1, 80118f4 <_dtoa_r+0x5c>
 80118dc:	685a      	ldr	r2, [r3, #4]
 80118de:	604a      	str	r2, [r1, #4]
 80118e0:	2301      	movs	r3, #1
 80118e2:	4093      	lsls	r3, r2
 80118e4:	608b      	str	r3, [r1, #8]
 80118e6:	4658      	mov	r0, fp
 80118e8:	f000 feda 	bl	80126a0 <_Bfree>
 80118ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80118f0:	2200      	movs	r2, #0
 80118f2:	601a      	str	r2, [r3, #0]
 80118f4:	1e2b      	subs	r3, r5, #0
 80118f6:	bfb9      	ittee	lt
 80118f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80118fc:	9303      	strlt	r3, [sp, #12]
 80118fe:	2300      	movge	r3, #0
 8011900:	6033      	strge	r3, [r6, #0]
 8011902:	9f03      	ldr	r7, [sp, #12]
 8011904:	4b98      	ldr	r3, [pc, #608]	@ (8011b68 <_dtoa_r+0x2d0>)
 8011906:	bfbc      	itt	lt
 8011908:	2201      	movlt	r2, #1
 801190a:	6032      	strlt	r2, [r6, #0]
 801190c:	43bb      	bics	r3, r7
 801190e:	d112      	bne.n	8011936 <_dtoa_r+0x9e>
 8011910:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011912:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011916:	6013      	str	r3, [r2, #0]
 8011918:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801191c:	4323      	orrs	r3, r4
 801191e:	f000 854d 	beq.w	80123bc <_dtoa_r+0xb24>
 8011922:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011924:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011b7c <_dtoa_r+0x2e4>
 8011928:	2b00      	cmp	r3, #0
 801192a:	f000 854f 	beq.w	80123cc <_dtoa_r+0xb34>
 801192e:	f10a 0303 	add.w	r3, sl, #3
 8011932:	f000 bd49 	b.w	80123c8 <_dtoa_r+0xb30>
 8011936:	ed9d 7b02 	vldr	d7, [sp, #8]
 801193a:	2200      	movs	r2, #0
 801193c:	ec51 0b17 	vmov	r0, r1, d7
 8011940:	2300      	movs	r3, #0
 8011942:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8011946:	f7ef f8e7 	bl	8000b18 <__aeabi_dcmpeq>
 801194a:	4680      	mov	r8, r0
 801194c:	b158      	cbz	r0, 8011966 <_dtoa_r+0xce>
 801194e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011950:	2301      	movs	r3, #1
 8011952:	6013      	str	r3, [r2, #0]
 8011954:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011956:	b113      	cbz	r3, 801195e <_dtoa_r+0xc6>
 8011958:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801195a:	4b84      	ldr	r3, [pc, #528]	@ (8011b6c <_dtoa_r+0x2d4>)
 801195c:	6013      	str	r3, [r2, #0]
 801195e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011b80 <_dtoa_r+0x2e8>
 8011962:	f000 bd33 	b.w	80123cc <_dtoa_r+0xb34>
 8011966:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801196a:	aa16      	add	r2, sp, #88	@ 0x58
 801196c:	a917      	add	r1, sp, #92	@ 0x5c
 801196e:	4658      	mov	r0, fp
 8011970:	f001 fa3a 	bl	8012de8 <__d2b>
 8011974:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011978:	4681      	mov	r9, r0
 801197a:	2e00      	cmp	r6, #0
 801197c:	d077      	beq.n	8011a6e <_dtoa_r+0x1d6>
 801197e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011980:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8011984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011988:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801198c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011990:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011994:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011998:	4619      	mov	r1, r3
 801199a:	2200      	movs	r2, #0
 801199c:	4b74      	ldr	r3, [pc, #464]	@ (8011b70 <_dtoa_r+0x2d8>)
 801199e:	f7ee fc9b 	bl	80002d8 <__aeabi_dsub>
 80119a2:	a369      	add	r3, pc, #420	@ (adr r3, 8011b48 <_dtoa_r+0x2b0>)
 80119a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a8:	f7ee fe4e 	bl	8000648 <__aeabi_dmul>
 80119ac:	a368      	add	r3, pc, #416	@ (adr r3, 8011b50 <_dtoa_r+0x2b8>)
 80119ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b2:	f7ee fc93 	bl	80002dc <__adddf3>
 80119b6:	4604      	mov	r4, r0
 80119b8:	4630      	mov	r0, r6
 80119ba:	460d      	mov	r5, r1
 80119bc:	f7ee fdda 	bl	8000574 <__aeabi_i2d>
 80119c0:	a365      	add	r3, pc, #404	@ (adr r3, 8011b58 <_dtoa_r+0x2c0>)
 80119c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119c6:	f7ee fe3f 	bl	8000648 <__aeabi_dmul>
 80119ca:	4602      	mov	r2, r0
 80119cc:	460b      	mov	r3, r1
 80119ce:	4620      	mov	r0, r4
 80119d0:	4629      	mov	r1, r5
 80119d2:	f7ee fc83 	bl	80002dc <__adddf3>
 80119d6:	4604      	mov	r4, r0
 80119d8:	460d      	mov	r5, r1
 80119da:	f7ef f8e5 	bl	8000ba8 <__aeabi_d2iz>
 80119de:	2200      	movs	r2, #0
 80119e0:	4607      	mov	r7, r0
 80119e2:	2300      	movs	r3, #0
 80119e4:	4620      	mov	r0, r4
 80119e6:	4629      	mov	r1, r5
 80119e8:	f7ef f8a0 	bl	8000b2c <__aeabi_dcmplt>
 80119ec:	b140      	cbz	r0, 8011a00 <_dtoa_r+0x168>
 80119ee:	4638      	mov	r0, r7
 80119f0:	f7ee fdc0 	bl	8000574 <__aeabi_i2d>
 80119f4:	4622      	mov	r2, r4
 80119f6:	462b      	mov	r3, r5
 80119f8:	f7ef f88e 	bl	8000b18 <__aeabi_dcmpeq>
 80119fc:	b900      	cbnz	r0, 8011a00 <_dtoa_r+0x168>
 80119fe:	3f01      	subs	r7, #1
 8011a00:	2f16      	cmp	r7, #22
 8011a02:	d851      	bhi.n	8011aa8 <_dtoa_r+0x210>
 8011a04:	4b5b      	ldr	r3, [pc, #364]	@ (8011b74 <_dtoa_r+0x2dc>)
 8011a06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011a12:	f7ef f88b 	bl	8000b2c <__aeabi_dcmplt>
 8011a16:	2800      	cmp	r0, #0
 8011a18:	d048      	beq.n	8011aac <_dtoa_r+0x214>
 8011a1a:	3f01      	subs	r7, #1
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	9312      	str	r3, [sp, #72]	@ 0x48
 8011a20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011a22:	1b9b      	subs	r3, r3, r6
 8011a24:	1e5a      	subs	r2, r3, #1
 8011a26:	bf44      	itt	mi
 8011a28:	f1c3 0801 	rsbmi	r8, r3, #1
 8011a2c:	2300      	movmi	r3, #0
 8011a2e:	9208      	str	r2, [sp, #32]
 8011a30:	bf54      	ite	pl
 8011a32:	f04f 0800 	movpl.w	r8, #0
 8011a36:	9308      	strmi	r3, [sp, #32]
 8011a38:	2f00      	cmp	r7, #0
 8011a3a:	db39      	blt.n	8011ab0 <_dtoa_r+0x218>
 8011a3c:	9b08      	ldr	r3, [sp, #32]
 8011a3e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011a40:	443b      	add	r3, r7
 8011a42:	9308      	str	r3, [sp, #32]
 8011a44:	2300      	movs	r3, #0
 8011a46:	930a      	str	r3, [sp, #40]	@ 0x28
 8011a48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a4a:	2b09      	cmp	r3, #9
 8011a4c:	d864      	bhi.n	8011b18 <_dtoa_r+0x280>
 8011a4e:	2b05      	cmp	r3, #5
 8011a50:	bfc4      	itt	gt
 8011a52:	3b04      	subgt	r3, #4
 8011a54:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8011a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a58:	f1a3 0302 	sub.w	r3, r3, #2
 8011a5c:	bfcc      	ite	gt
 8011a5e:	2400      	movgt	r4, #0
 8011a60:	2401      	movle	r4, #1
 8011a62:	2b03      	cmp	r3, #3
 8011a64:	d863      	bhi.n	8011b2e <_dtoa_r+0x296>
 8011a66:	e8df f003 	tbb	[pc, r3]
 8011a6a:	372a      	.short	0x372a
 8011a6c:	5535      	.short	0x5535
 8011a6e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011a72:	441e      	add	r6, r3
 8011a74:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011a78:	2b20      	cmp	r3, #32
 8011a7a:	bfc1      	itttt	gt
 8011a7c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011a80:	409f      	lslgt	r7, r3
 8011a82:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011a86:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011a8a:	bfd6      	itet	le
 8011a8c:	f1c3 0320 	rsble	r3, r3, #32
 8011a90:	ea47 0003 	orrgt.w	r0, r7, r3
 8011a94:	fa04 f003 	lslle.w	r0, r4, r3
 8011a98:	f7ee fd5c 	bl	8000554 <__aeabi_ui2d>
 8011a9c:	2201      	movs	r2, #1
 8011a9e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011aa2:	3e01      	subs	r6, #1
 8011aa4:	9214      	str	r2, [sp, #80]	@ 0x50
 8011aa6:	e777      	b.n	8011998 <_dtoa_r+0x100>
 8011aa8:	2301      	movs	r3, #1
 8011aaa:	e7b8      	b.n	8011a1e <_dtoa_r+0x186>
 8011aac:	9012      	str	r0, [sp, #72]	@ 0x48
 8011aae:	e7b7      	b.n	8011a20 <_dtoa_r+0x188>
 8011ab0:	427b      	negs	r3, r7
 8011ab2:	930a      	str	r3, [sp, #40]	@ 0x28
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	eba8 0807 	sub.w	r8, r8, r7
 8011aba:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011abc:	e7c4      	b.n	8011a48 <_dtoa_r+0x1b0>
 8011abe:	2300      	movs	r3, #0
 8011ac0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011ac2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	dc35      	bgt.n	8011b34 <_dtoa_r+0x29c>
 8011ac8:	2301      	movs	r3, #1
 8011aca:	9300      	str	r3, [sp, #0]
 8011acc:	9307      	str	r3, [sp, #28]
 8011ace:	461a      	mov	r2, r3
 8011ad0:	920e      	str	r2, [sp, #56]	@ 0x38
 8011ad2:	e00b      	b.n	8011aec <_dtoa_r+0x254>
 8011ad4:	2301      	movs	r3, #1
 8011ad6:	e7f3      	b.n	8011ac0 <_dtoa_r+0x228>
 8011ad8:	2300      	movs	r3, #0
 8011ada:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011adc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ade:	18fb      	adds	r3, r7, r3
 8011ae0:	9300      	str	r3, [sp, #0]
 8011ae2:	3301      	adds	r3, #1
 8011ae4:	2b01      	cmp	r3, #1
 8011ae6:	9307      	str	r3, [sp, #28]
 8011ae8:	bfb8      	it	lt
 8011aea:	2301      	movlt	r3, #1
 8011aec:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011af0:	2100      	movs	r1, #0
 8011af2:	2204      	movs	r2, #4
 8011af4:	f102 0514 	add.w	r5, r2, #20
 8011af8:	429d      	cmp	r5, r3
 8011afa:	d91f      	bls.n	8011b3c <_dtoa_r+0x2a4>
 8011afc:	6041      	str	r1, [r0, #4]
 8011afe:	4658      	mov	r0, fp
 8011b00:	f000 fd8e 	bl	8012620 <_Balloc>
 8011b04:	4682      	mov	sl, r0
 8011b06:	2800      	cmp	r0, #0
 8011b08:	d13c      	bne.n	8011b84 <_dtoa_r+0x2ec>
 8011b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8011b78 <_dtoa_r+0x2e0>)
 8011b0c:	4602      	mov	r2, r0
 8011b0e:	f240 11af 	movw	r1, #431	@ 0x1af
 8011b12:	e6d8      	b.n	80118c6 <_dtoa_r+0x2e>
 8011b14:	2301      	movs	r3, #1
 8011b16:	e7e0      	b.n	8011ada <_dtoa_r+0x242>
 8011b18:	2401      	movs	r4, #1
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b1e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011b20:	f04f 33ff 	mov.w	r3, #4294967295
 8011b24:	9300      	str	r3, [sp, #0]
 8011b26:	9307      	str	r3, [sp, #28]
 8011b28:	2200      	movs	r2, #0
 8011b2a:	2312      	movs	r3, #18
 8011b2c:	e7d0      	b.n	8011ad0 <_dtoa_r+0x238>
 8011b2e:	2301      	movs	r3, #1
 8011b30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b32:	e7f5      	b.n	8011b20 <_dtoa_r+0x288>
 8011b34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b36:	9300      	str	r3, [sp, #0]
 8011b38:	9307      	str	r3, [sp, #28]
 8011b3a:	e7d7      	b.n	8011aec <_dtoa_r+0x254>
 8011b3c:	3101      	adds	r1, #1
 8011b3e:	0052      	lsls	r2, r2, #1
 8011b40:	e7d8      	b.n	8011af4 <_dtoa_r+0x25c>
 8011b42:	bf00      	nop
 8011b44:	f3af 8000 	nop.w
 8011b48:	636f4361 	.word	0x636f4361
 8011b4c:	3fd287a7 	.word	0x3fd287a7
 8011b50:	8b60c8b3 	.word	0x8b60c8b3
 8011b54:	3fc68a28 	.word	0x3fc68a28
 8011b58:	509f79fb 	.word	0x509f79fb
 8011b5c:	3fd34413 	.word	0x3fd34413
 8011b60:	08016e2c 	.word	0x08016e2c
 8011b64:	08016e43 	.word	0x08016e43
 8011b68:	7ff00000 	.word	0x7ff00000
 8011b6c:	08017189 	.word	0x08017189
 8011b70:	3ff80000 	.word	0x3ff80000
 8011b74:	08016f40 	.word	0x08016f40
 8011b78:	08016e9b 	.word	0x08016e9b
 8011b7c:	08016e28 	.word	0x08016e28
 8011b80:	08017188 	.word	0x08017188
 8011b84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011b88:	6018      	str	r0, [r3, #0]
 8011b8a:	9b07      	ldr	r3, [sp, #28]
 8011b8c:	2b0e      	cmp	r3, #14
 8011b8e:	f200 80a4 	bhi.w	8011cda <_dtoa_r+0x442>
 8011b92:	2c00      	cmp	r4, #0
 8011b94:	f000 80a1 	beq.w	8011cda <_dtoa_r+0x442>
 8011b98:	2f00      	cmp	r7, #0
 8011b9a:	dd33      	ble.n	8011c04 <_dtoa_r+0x36c>
 8011b9c:	4bad      	ldr	r3, [pc, #692]	@ (8011e54 <_dtoa_r+0x5bc>)
 8011b9e:	f007 020f 	and.w	r2, r7, #15
 8011ba2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011ba6:	ed93 7b00 	vldr	d7, [r3]
 8011baa:	05f8      	lsls	r0, r7, #23
 8011bac:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011bb0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011bb4:	d516      	bpl.n	8011be4 <_dtoa_r+0x34c>
 8011bb6:	4ba8      	ldr	r3, [pc, #672]	@ (8011e58 <_dtoa_r+0x5c0>)
 8011bb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011bbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011bc0:	f7ee fe6c 	bl	800089c <__aeabi_ddiv>
 8011bc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011bc8:	f004 040f 	and.w	r4, r4, #15
 8011bcc:	2603      	movs	r6, #3
 8011bce:	4da2      	ldr	r5, [pc, #648]	@ (8011e58 <_dtoa_r+0x5c0>)
 8011bd0:	b954      	cbnz	r4, 8011be8 <_dtoa_r+0x350>
 8011bd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011bda:	f7ee fe5f 	bl	800089c <__aeabi_ddiv>
 8011bde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011be2:	e028      	b.n	8011c36 <_dtoa_r+0x39e>
 8011be4:	2602      	movs	r6, #2
 8011be6:	e7f2      	b.n	8011bce <_dtoa_r+0x336>
 8011be8:	07e1      	lsls	r1, r4, #31
 8011bea:	d508      	bpl.n	8011bfe <_dtoa_r+0x366>
 8011bec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011bf0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011bf4:	f7ee fd28 	bl	8000648 <__aeabi_dmul>
 8011bf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011bfc:	3601      	adds	r6, #1
 8011bfe:	1064      	asrs	r4, r4, #1
 8011c00:	3508      	adds	r5, #8
 8011c02:	e7e5      	b.n	8011bd0 <_dtoa_r+0x338>
 8011c04:	f000 80d2 	beq.w	8011dac <_dtoa_r+0x514>
 8011c08:	427c      	negs	r4, r7
 8011c0a:	4b92      	ldr	r3, [pc, #584]	@ (8011e54 <_dtoa_r+0x5bc>)
 8011c0c:	4d92      	ldr	r5, [pc, #584]	@ (8011e58 <_dtoa_r+0x5c0>)
 8011c0e:	f004 020f 	and.w	r2, r4, #15
 8011c12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011c1e:	f7ee fd13 	bl	8000648 <__aeabi_dmul>
 8011c22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c26:	1124      	asrs	r4, r4, #4
 8011c28:	2300      	movs	r3, #0
 8011c2a:	2602      	movs	r6, #2
 8011c2c:	2c00      	cmp	r4, #0
 8011c2e:	f040 80b2 	bne.w	8011d96 <_dtoa_r+0x4fe>
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d1d3      	bne.n	8011bde <_dtoa_r+0x346>
 8011c36:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011c38:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	f000 80b7 	beq.w	8011db0 <_dtoa_r+0x518>
 8011c42:	4b86      	ldr	r3, [pc, #536]	@ (8011e5c <_dtoa_r+0x5c4>)
 8011c44:	2200      	movs	r2, #0
 8011c46:	4620      	mov	r0, r4
 8011c48:	4629      	mov	r1, r5
 8011c4a:	f7ee ff6f 	bl	8000b2c <__aeabi_dcmplt>
 8011c4e:	2800      	cmp	r0, #0
 8011c50:	f000 80ae 	beq.w	8011db0 <_dtoa_r+0x518>
 8011c54:	9b07      	ldr	r3, [sp, #28]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	f000 80aa 	beq.w	8011db0 <_dtoa_r+0x518>
 8011c5c:	9b00      	ldr	r3, [sp, #0]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	dd37      	ble.n	8011cd2 <_dtoa_r+0x43a>
 8011c62:	1e7b      	subs	r3, r7, #1
 8011c64:	9304      	str	r3, [sp, #16]
 8011c66:	4620      	mov	r0, r4
 8011c68:	4b7d      	ldr	r3, [pc, #500]	@ (8011e60 <_dtoa_r+0x5c8>)
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	4629      	mov	r1, r5
 8011c6e:	f7ee fceb 	bl	8000648 <__aeabi_dmul>
 8011c72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c76:	9c00      	ldr	r4, [sp, #0]
 8011c78:	3601      	adds	r6, #1
 8011c7a:	4630      	mov	r0, r6
 8011c7c:	f7ee fc7a 	bl	8000574 <__aeabi_i2d>
 8011c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011c84:	f7ee fce0 	bl	8000648 <__aeabi_dmul>
 8011c88:	4b76      	ldr	r3, [pc, #472]	@ (8011e64 <_dtoa_r+0x5cc>)
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	f7ee fb26 	bl	80002dc <__adddf3>
 8011c90:	4605      	mov	r5, r0
 8011c92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011c96:	2c00      	cmp	r4, #0
 8011c98:	f040 808d 	bne.w	8011db6 <_dtoa_r+0x51e>
 8011c9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ca0:	4b71      	ldr	r3, [pc, #452]	@ (8011e68 <_dtoa_r+0x5d0>)
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	f7ee fb18 	bl	80002d8 <__aeabi_dsub>
 8011ca8:	4602      	mov	r2, r0
 8011caa:	460b      	mov	r3, r1
 8011cac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011cb0:	462a      	mov	r2, r5
 8011cb2:	4633      	mov	r3, r6
 8011cb4:	f7ee ff58 	bl	8000b68 <__aeabi_dcmpgt>
 8011cb8:	2800      	cmp	r0, #0
 8011cba:	f040 828b 	bne.w	80121d4 <_dtoa_r+0x93c>
 8011cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011cc2:	462a      	mov	r2, r5
 8011cc4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011cc8:	f7ee ff30 	bl	8000b2c <__aeabi_dcmplt>
 8011ccc:	2800      	cmp	r0, #0
 8011cce:	f040 8128 	bne.w	8011f22 <_dtoa_r+0x68a>
 8011cd2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011cd6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011cda:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	f2c0 815a 	blt.w	8011f96 <_dtoa_r+0x6fe>
 8011ce2:	2f0e      	cmp	r7, #14
 8011ce4:	f300 8157 	bgt.w	8011f96 <_dtoa_r+0x6fe>
 8011ce8:	4b5a      	ldr	r3, [pc, #360]	@ (8011e54 <_dtoa_r+0x5bc>)
 8011cea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011cee:	ed93 7b00 	vldr	d7, [r3]
 8011cf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	ed8d 7b00 	vstr	d7, [sp]
 8011cfa:	da03      	bge.n	8011d04 <_dtoa_r+0x46c>
 8011cfc:	9b07      	ldr	r3, [sp, #28]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	f340 8101 	ble.w	8011f06 <_dtoa_r+0x66e>
 8011d04:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011d08:	4656      	mov	r6, sl
 8011d0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d0e:	4620      	mov	r0, r4
 8011d10:	4629      	mov	r1, r5
 8011d12:	f7ee fdc3 	bl	800089c <__aeabi_ddiv>
 8011d16:	f7ee ff47 	bl	8000ba8 <__aeabi_d2iz>
 8011d1a:	4680      	mov	r8, r0
 8011d1c:	f7ee fc2a 	bl	8000574 <__aeabi_i2d>
 8011d20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d24:	f7ee fc90 	bl	8000648 <__aeabi_dmul>
 8011d28:	4602      	mov	r2, r0
 8011d2a:	460b      	mov	r3, r1
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	4629      	mov	r1, r5
 8011d30:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011d34:	f7ee fad0 	bl	80002d8 <__aeabi_dsub>
 8011d38:	f806 4b01 	strb.w	r4, [r6], #1
 8011d3c:	9d07      	ldr	r5, [sp, #28]
 8011d3e:	eba6 040a 	sub.w	r4, r6, sl
 8011d42:	42a5      	cmp	r5, r4
 8011d44:	4602      	mov	r2, r0
 8011d46:	460b      	mov	r3, r1
 8011d48:	f040 8117 	bne.w	8011f7a <_dtoa_r+0x6e2>
 8011d4c:	f7ee fac6 	bl	80002dc <__adddf3>
 8011d50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d54:	4604      	mov	r4, r0
 8011d56:	460d      	mov	r5, r1
 8011d58:	f7ee ff06 	bl	8000b68 <__aeabi_dcmpgt>
 8011d5c:	2800      	cmp	r0, #0
 8011d5e:	f040 80f9 	bne.w	8011f54 <_dtoa_r+0x6bc>
 8011d62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d66:	4620      	mov	r0, r4
 8011d68:	4629      	mov	r1, r5
 8011d6a:	f7ee fed5 	bl	8000b18 <__aeabi_dcmpeq>
 8011d6e:	b118      	cbz	r0, 8011d78 <_dtoa_r+0x4e0>
 8011d70:	f018 0f01 	tst.w	r8, #1
 8011d74:	f040 80ee 	bne.w	8011f54 <_dtoa_r+0x6bc>
 8011d78:	4649      	mov	r1, r9
 8011d7a:	4658      	mov	r0, fp
 8011d7c:	f000 fc90 	bl	80126a0 <_Bfree>
 8011d80:	2300      	movs	r3, #0
 8011d82:	7033      	strb	r3, [r6, #0]
 8011d84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011d86:	3701      	adds	r7, #1
 8011d88:	601f      	str	r7, [r3, #0]
 8011d8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	f000 831d 	beq.w	80123cc <_dtoa_r+0xb34>
 8011d92:	601e      	str	r6, [r3, #0]
 8011d94:	e31a      	b.n	80123cc <_dtoa_r+0xb34>
 8011d96:	07e2      	lsls	r2, r4, #31
 8011d98:	d505      	bpl.n	8011da6 <_dtoa_r+0x50e>
 8011d9a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011d9e:	f7ee fc53 	bl	8000648 <__aeabi_dmul>
 8011da2:	3601      	adds	r6, #1
 8011da4:	2301      	movs	r3, #1
 8011da6:	1064      	asrs	r4, r4, #1
 8011da8:	3508      	adds	r5, #8
 8011daa:	e73f      	b.n	8011c2c <_dtoa_r+0x394>
 8011dac:	2602      	movs	r6, #2
 8011dae:	e742      	b.n	8011c36 <_dtoa_r+0x39e>
 8011db0:	9c07      	ldr	r4, [sp, #28]
 8011db2:	9704      	str	r7, [sp, #16]
 8011db4:	e761      	b.n	8011c7a <_dtoa_r+0x3e2>
 8011db6:	4b27      	ldr	r3, [pc, #156]	@ (8011e54 <_dtoa_r+0x5bc>)
 8011db8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011dba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011dbe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011dc2:	4454      	add	r4, sl
 8011dc4:	2900      	cmp	r1, #0
 8011dc6:	d053      	beq.n	8011e70 <_dtoa_r+0x5d8>
 8011dc8:	4928      	ldr	r1, [pc, #160]	@ (8011e6c <_dtoa_r+0x5d4>)
 8011dca:	2000      	movs	r0, #0
 8011dcc:	f7ee fd66 	bl	800089c <__aeabi_ddiv>
 8011dd0:	4633      	mov	r3, r6
 8011dd2:	462a      	mov	r2, r5
 8011dd4:	f7ee fa80 	bl	80002d8 <__aeabi_dsub>
 8011dd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011ddc:	4656      	mov	r6, sl
 8011dde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011de2:	f7ee fee1 	bl	8000ba8 <__aeabi_d2iz>
 8011de6:	4605      	mov	r5, r0
 8011de8:	f7ee fbc4 	bl	8000574 <__aeabi_i2d>
 8011dec:	4602      	mov	r2, r0
 8011dee:	460b      	mov	r3, r1
 8011df0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011df4:	f7ee fa70 	bl	80002d8 <__aeabi_dsub>
 8011df8:	3530      	adds	r5, #48	@ 0x30
 8011dfa:	4602      	mov	r2, r0
 8011dfc:	460b      	mov	r3, r1
 8011dfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011e02:	f806 5b01 	strb.w	r5, [r6], #1
 8011e06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011e0a:	f7ee fe8f 	bl	8000b2c <__aeabi_dcmplt>
 8011e0e:	2800      	cmp	r0, #0
 8011e10:	d171      	bne.n	8011ef6 <_dtoa_r+0x65e>
 8011e12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011e16:	4911      	ldr	r1, [pc, #68]	@ (8011e5c <_dtoa_r+0x5c4>)
 8011e18:	2000      	movs	r0, #0
 8011e1a:	f7ee fa5d 	bl	80002d8 <__aeabi_dsub>
 8011e1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011e22:	f7ee fe83 	bl	8000b2c <__aeabi_dcmplt>
 8011e26:	2800      	cmp	r0, #0
 8011e28:	f040 8095 	bne.w	8011f56 <_dtoa_r+0x6be>
 8011e2c:	42a6      	cmp	r6, r4
 8011e2e:	f43f af50 	beq.w	8011cd2 <_dtoa_r+0x43a>
 8011e32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011e36:	4b0a      	ldr	r3, [pc, #40]	@ (8011e60 <_dtoa_r+0x5c8>)
 8011e38:	2200      	movs	r2, #0
 8011e3a:	f7ee fc05 	bl	8000648 <__aeabi_dmul>
 8011e3e:	4b08      	ldr	r3, [pc, #32]	@ (8011e60 <_dtoa_r+0x5c8>)
 8011e40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011e44:	2200      	movs	r2, #0
 8011e46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e4a:	f7ee fbfd 	bl	8000648 <__aeabi_dmul>
 8011e4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e52:	e7c4      	b.n	8011dde <_dtoa_r+0x546>
 8011e54:	08016f40 	.word	0x08016f40
 8011e58:	08016f18 	.word	0x08016f18
 8011e5c:	3ff00000 	.word	0x3ff00000
 8011e60:	40240000 	.word	0x40240000
 8011e64:	401c0000 	.word	0x401c0000
 8011e68:	40140000 	.word	0x40140000
 8011e6c:	3fe00000 	.word	0x3fe00000
 8011e70:	4631      	mov	r1, r6
 8011e72:	4628      	mov	r0, r5
 8011e74:	f7ee fbe8 	bl	8000648 <__aeabi_dmul>
 8011e78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011e7c:	9415      	str	r4, [sp, #84]	@ 0x54
 8011e7e:	4656      	mov	r6, sl
 8011e80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e84:	f7ee fe90 	bl	8000ba8 <__aeabi_d2iz>
 8011e88:	4605      	mov	r5, r0
 8011e8a:	f7ee fb73 	bl	8000574 <__aeabi_i2d>
 8011e8e:	4602      	mov	r2, r0
 8011e90:	460b      	mov	r3, r1
 8011e92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e96:	f7ee fa1f 	bl	80002d8 <__aeabi_dsub>
 8011e9a:	3530      	adds	r5, #48	@ 0x30
 8011e9c:	f806 5b01 	strb.w	r5, [r6], #1
 8011ea0:	4602      	mov	r2, r0
 8011ea2:	460b      	mov	r3, r1
 8011ea4:	42a6      	cmp	r6, r4
 8011ea6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011eaa:	f04f 0200 	mov.w	r2, #0
 8011eae:	d124      	bne.n	8011efa <_dtoa_r+0x662>
 8011eb0:	4bac      	ldr	r3, [pc, #688]	@ (8012164 <_dtoa_r+0x8cc>)
 8011eb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011eb6:	f7ee fa11 	bl	80002dc <__adddf3>
 8011eba:	4602      	mov	r2, r0
 8011ebc:	460b      	mov	r3, r1
 8011ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ec2:	f7ee fe51 	bl	8000b68 <__aeabi_dcmpgt>
 8011ec6:	2800      	cmp	r0, #0
 8011ec8:	d145      	bne.n	8011f56 <_dtoa_r+0x6be>
 8011eca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011ece:	49a5      	ldr	r1, [pc, #660]	@ (8012164 <_dtoa_r+0x8cc>)
 8011ed0:	2000      	movs	r0, #0
 8011ed2:	f7ee fa01 	bl	80002d8 <__aeabi_dsub>
 8011ed6:	4602      	mov	r2, r0
 8011ed8:	460b      	mov	r3, r1
 8011eda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ede:	f7ee fe25 	bl	8000b2c <__aeabi_dcmplt>
 8011ee2:	2800      	cmp	r0, #0
 8011ee4:	f43f aef5 	beq.w	8011cd2 <_dtoa_r+0x43a>
 8011ee8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011eea:	1e73      	subs	r3, r6, #1
 8011eec:	9315      	str	r3, [sp, #84]	@ 0x54
 8011eee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011ef2:	2b30      	cmp	r3, #48	@ 0x30
 8011ef4:	d0f8      	beq.n	8011ee8 <_dtoa_r+0x650>
 8011ef6:	9f04      	ldr	r7, [sp, #16]
 8011ef8:	e73e      	b.n	8011d78 <_dtoa_r+0x4e0>
 8011efa:	4b9b      	ldr	r3, [pc, #620]	@ (8012168 <_dtoa_r+0x8d0>)
 8011efc:	f7ee fba4 	bl	8000648 <__aeabi_dmul>
 8011f00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f04:	e7bc      	b.n	8011e80 <_dtoa_r+0x5e8>
 8011f06:	d10c      	bne.n	8011f22 <_dtoa_r+0x68a>
 8011f08:	4b98      	ldr	r3, [pc, #608]	@ (801216c <_dtoa_r+0x8d4>)
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f10:	f7ee fb9a 	bl	8000648 <__aeabi_dmul>
 8011f14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011f18:	f7ee fe1c 	bl	8000b54 <__aeabi_dcmpge>
 8011f1c:	2800      	cmp	r0, #0
 8011f1e:	f000 8157 	beq.w	80121d0 <_dtoa_r+0x938>
 8011f22:	2400      	movs	r4, #0
 8011f24:	4625      	mov	r5, r4
 8011f26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f28:	43db      	mvns	r3, r3
 8011f2a:	9304      	str	r3, [sp, #16]
 8011f2c:	4656      	mov	r6, sl
 8011f2e:	2700      	movs	r7, #0
 8011f30:	4621      	mov	r1, r4
 8011f32:	4658      	mov	r0, fp
 8011f34:	f000 fbb4 	bl	80126a0 <_Bfree>
 8011f38:	2d00      	cmp	r5, #0
 8011f3a:	d0dc      	beq.n	8011ef6 <_dtoa_r+0x65e>
 8011f3c:	b12f      	cbz	r7, 8011f4a <_dtoa_r+0x6b2>
 8011f3e:	42af      	cmp	r7, r5
 8011f40:	d003      	beq.n	8011f4a <_dtoa_r+0x6b2>
 8011f42:	4639      	mov	r1, r7
 8011f44:	4658      	mov	r0, fp
 8011f46:	f000 fbab 	bl	80126a0 <_Bfree>
 8011f4a:	4629      	mov	r1, r5
 8011f4c:	4658      	mov	r0, fp
 8011f4e:	f000 fba7 	bl	80126a0 <_Bfree>
 8011f52:	e7d0      	b.n	8011ef6 <_dtoa_r+0x65e>
 8011f54:	9704      	str	r7, [sp, #16]
 8011f56:	4633      	mov	r3, r6
 8011f58:	461e      	mov	r6, r3
 8011f5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011f5e:	2a39      	cmp	r2, #57	@ 0x39
 8011f60:	d107      	bne.n	8011f72 <_dtoa_r+0x6da>
 8011f62:	459a      	cmp	sl, r3
 8011f64:	d1f8      	bne.n	8011f58 <_dtoa_r+0x6c0>
 8011f66:	9a04      	ldr	r2, [sp, #16]
 8011f68:	3201      	adds	r2, #1
 8011f6a:	9204      	str	r2, [sp, #16]
 8011f6c:	2230      	movs	r2, #48	@ 0x30
 8011f6e:	f88a 2000 	strb.w	r2, [sl]
 8011f72:	781a      	ldrb	r2, [r3, #0]
 8011f74:	3201      	adds	r2, #1
 8011f76:	701a      	strb	r2, [r3, #0]
 8011f78:	e7bd      	b.n	8011ef6 <_dtoa_r+0x65e>
 8011f7a:	4b7b      	ldr	r3, [pc, #492]	@ (8012168 <_dtoa_r+0x8d0>)
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	f7ee fb63 	bl	8000648 <__aeabi_dmul>
 8011f82:	2200      	movs	r2, #0
 8011f84:	2300      	movs	r3, #0
 8011f86:	4604      	mov	r4, r0
 8011f88:	460d      	mov	r5, r1
 8011f8a:	f7ee fdc5 	bl	8000b18 <__aeabi_dcmpeq>
 8011f8e:	2800      	cmp	r0, #0
 8011f90:	f43f aebb 	beq.w	8011d0a <_dtoa_r+0x472>
 8011f94:	e6f0      	b.n	8011d78 <_dtoa_r+0x4e0>
 8011f96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011f98:	2a00      	cmp	r2, #0
 8011f9a:	f000 80db 	beq.w	8012154 <_dtoa_r+0x8bc>
 8011f9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011fa0:	2a01      	cmp	r2, #1
 8011fa2:	f300 80bf 	bgt.w	8012124 <_dtoa_r+0x88c>
 8011fa6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011fa8:	2a00      	cmp	r2, #0
 8011faa:	f000 80b7 	beq.w	801211c <_dtoa_r+0x884>
 8011fae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011fb2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011fb4:	4646      	mov	r6, r8
 8011fb6:	9a08      	ldr	r2, [sp, #32]
 8011fb8:	2101      	movs	r1, #1
 8011fba:	441a      	add	r2, r3
 8011fbc:	4658      	mov	r0, fp
 8011fbe:	4498      	add	r8, r3
 8011fc0:	9208      	str	r2, [sp, #32]
 8011fc2:	f000 fc6b 	bl	801289c <__i2b>
 8011fc6:	4605      	mov	r5, r0
 8011fc8:	b15e      	cbz	r6, 8011fe2 <_dtoa_r+0x74a>
 8011fca:	9b08      	ldr	r3, [sp, #32]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	dd08      	ble.n	8011fe2 <_dtoa_r+0x74a>
 8011fd0:	42b3      	cmp	r3, r6
 8011fd2:	9a08      	ldr	r2, [sp, #32]
 8011fd4:	bfa8      	it	ge
 8011fd6:	4633      	movge	r3, r6
 8011fd8:	eba8 0803 	sub.w	r8, r8, r3
 8011fdc:	1af6      	subs	r6, r6, r3
 8011fde:	1ad3      	subs	r3, r2, r3
 8011fe0:	9308      	str	r3, [sp, #32]
 8011fe2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011fe4:	b1f3      	cbz	r3, 8012024 <_dtoa_r+0x78c>
 8011fe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	f000 80b7 	beq.w	801215c <_dtoa_r+0x8c4>
 8011fee:	b18c      	cbz	r4, 8012014 <_dtoa_r+0x77c>
 8011ff0:	4629      	mov	r1, r5
 8011ff2:	4622      	mov	r2, r4
 8011ff4:	4658      	mov	r0, fp
 8011ff6:	f000 fd11 	bl	8012a1c <__pow5mult>
 8011ffa:	464a      	mov	r2, r9
 8011ffc:	4601      	mov	r1, r0
 8011ffe:	4605      	mov	r5, r0
 8012000:	4658      	mov	r0, fp
 8012002:	f000 fc61 	bl	80128c8 <__multiply>
 8012006:	4649      	mov	r1, r9
 8012008:	9004      	str	r0, [sp, #16]
 801200a:	4658      	mov	r0, fp
 801200c:	f000 fb48 	bl	80126a0 <_Bfree>
 8012010:	9b04      	ldr	r3, [sp, #16]
 8012012:	4699      	mov	r9, r3
 8012014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012016:	1b1a      	subs	r2, r3, r4
 8012018:	d004      	beq.n	8012024 <_dtoa_r+0x78c>
 801201a:	4649      	mov	r1, r9
 801201c:	4658      	mov	r0, fp
 801201e:	f000 fcfd 	bl	8012a1c <__pow5mult>
 8012022:	4681      	mov	r9, r0
 8012024:	2101      	movs	r1, #1
 8012026:	4658      	mov	r0, fp
 8012028:	f000 fc38 	bl	801289c <__i2b>
 801202c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801202e:	4604      	mov	r4, r0
 8012030:	2b00      	cmp	r3, #0
 8012032:	f000 81cf 	beq.w	80123d4 <_dtoa_r+0xb3c>
 8012036:	461a      	mov	r2, r3
 8012038:	4601      	mov	r1, r0
 801203a:	4658      	mov	r0, fp
 801203c:	f000 fcee 	bl	8012a1c <__pow5mult>
 8012040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012042:	2b01      	cmp	r3, #1
 8012044:	4604      	mov	r4, r0
 8012046:	f300 8095 	bgt.w	8012174 <_dtoa_r+0x8dc>
 801204a:	9b02      	ldr	r3, [sp, #8]
 801204c:	2b00      	cmp	r3, #0
 801204e:	f040 8087 	bne.w	8012160 <_dtoa_r+0x8c8>
 8012052:	9b03      	ldr	r3, [sp, #12]
 8012054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012058:	2b00      	cmp	r3, #0
 801205a:	f040 8089 	bne.w	8012170 <_dtoa_r+0x8d8>
 801205e:	9b03      	ldr	r3, [sp, #12]
 8012060:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012064:	0d1b      	lsrs	r3, r3, #20
 8012066:	051b      	lsls	r3, r3, #20
 8012068:	b12b      	cbz	r3, 8012076 <_dtoa_r+0x7de>
 801206a:	9b08      	ldr	r3, [sp, #32]
 801206c:	3301      	adds	r3, #1
 801206e:	9308      	str	r3, [sp, #32]
 8012070:	f108 0801 	add.w	r8, r8, #1
 8012074:	2301      	movs	r3, #1
 8012076:	930a      	str	r3, [sp, #40]	@ 0x28
 8012078:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801207a:	2b00      	cmp	r3, #0
 801207c:	f000 81b0 	beq.w	80123e0 <_dtoa_r+0xb48>
 8012080:	6923      	ldr	r3, [r4, #16]
 8012082:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012086:	6918      	ldr	r0, [r3, #16]
 8012088:	f000 fbbc 	bl	8012804 <__hi0bits>
 801208c:	f1c0 0020 	rsb	r0, r0, #32
 8012090:	9b08      	ldr	r3, [sp, #32]
 8012092:	4418      	add	r0, r3
 8012094:	f010 001f 	ands.w	r0, r0, #31
 8012098:	d077      	beq.n	801218a <_dtoa_r+0x8f2>
 801209a:	f1c0 0320 	rsb	r3, r0, #32
 801209e:	2b04      	cmp	r3, #4
 80120a0:	dd6b      	ble.n	801217a <_dtoa_r+0x8e2>
 80120a2:	9b08      	ldr	r3, [sp, #32]
 80120a4:	f1c0 001c 	rsb	r0, r0, #28
 80120a8:	4403      	add	r3, r0
 80120aa:	4480      	add	r8, r0
 80120ac:	4406      	add	r6, r0
 80120ae:	9308      	str	r3, [sp, #32]
 80120b0:	f1b8 0f00 	cmp.w	r8, #0
 80120b4:	dd05      	ble.n	80120c2 <_dtoa_r+0x82a>
 80120b6:	4649      	mov	r1, r9
 80120b8:	4642      	mov	r2, r8
 80120ba:	4658      	mov	r0, fp
 80120bc:	f000 fd08 	bl	8012ad0 <__lshift>
 80120c0:	4681      	mov	r9, r0
 80120c2:	9b08      	ldr	r3, [sp, #32]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	dd05      	ble.n	80120d4 <_dtoa_r+0x83c>
 80120c8:	4621      	mov	r1, r4
 80120ca:	461a      	mov	r2, r3
 80120cc:	4658      	mov	r0, fp
 80120ce:	f000 fcff 	bl	8012ad0 <__lshift>
 80120d2:	4604      	mov	r4, r0
 80120d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d059      	beq.n	801218e <_dtoa_r+0x8f6>
 80120da:	4621      	mov	r1, r4
 80120dc:	4648      	mov	r0, r9
 80120de:	f000 fd63 	bl	8012ba8 <__mcmp>
 80120e2:	2800      	cmp	r0, #0
 80120e4:	da53      	bge.n	801218e <_dtoa_r+0x8f6>
 80120e6:	1e7b      	subs	r3, r7, #1
 80120e8:	9304      	str	r3, [sp, #16]
 80120ea:	4649      	mov	r1, r9
 80120ec:	2300      	movs	r3, #0
 80120ee:	220a      	movs	r2, #10
 80120f0:	4658      	mov	r0, fp
 80120f2:	f000 faf7 	bl	80126e4 <__multadd>
 80120f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80120f8:	4681      	mov	r9, r0
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	f000 8172 	beq.w	80123e4 <_dtoa_r+0xb4c>
 8012100:	2300      	movs	r3, #0
 8012102:	4629      	mov	r1, r5
 8012104:	220a      	movs	r2, #10
 8012106:	4658      	mov	r0, fp
 8012108:	f000 faec 	bl	80126e4 <__multadd>
 801210c:	9b00      	ldr	r3, [sp, #0]
 801210e:	2b00      	cmp	r3, #0
 8012110:	4605      	mov	r5, r0
 8012112:	dc67      	bgt.n	80121e4 <_dtoa_r+0x94c>
 8012114:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012116:	2b02      	cmp	r3, #2
 8012118:	dc41      	bgt.n	801219e <_dtoa_r+0x906>
 801211a:	e063      	b.n	80121e4 <_dtoa_r+0x94c>
 801211c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801211e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012122:	e746      	b.n	8011fb2 <_dtoa_r+0x71a>
 8012124:	9b07      	ldr	r3, [sp, #28]
 8012126:	1e5c      	subs	r4, r3, #1
 8012128:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801212a:	42a3      	cmp	r3, r4
 801212c:	bfbf      	itttt	lt
 801212e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012130:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8012132:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012134:	1ae3      	sublt	r3, r4, r3
 8012136:	bfb4      	ite	lt
 8012138:	18d2      	addlt	r2, r2, r3
 801213a:	1b1c      	subge	r4, r3, r4
 801213c:	9b07      	ldr	r3, [sp, #28]
 801213e:	bfbc      	itt	lt
 8012140:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8012142:	2400      	movlt	r4, #0
 8012144:	2b00      	cmp	r3, #0
 8012146:	bfb5      	itete	lt
 8012148:	eba8 0603 	sublt.w	r6, r8, r3
 801214c:	9b07      	ldrge	r3, [sp, #28]
 801214e:	2300      	movlt	r3, #0
 8012150:	4646      	movge	r6, r8
 8012152:	e730      	b.n	8011fb6 <_dtoa_r+0x71e>
 8012154:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012156:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012158:	4646      	mov	r6, r8
 801215a:	e735      	b.n	8011fc8 <_dtoa_r+0x730>
 801215c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801215e:	e75c      	b.n	801201a <_dtoa_r+0x782>
 8012160:	2300      	movs	r3, #0
 8012162:	e788      	b.n	8012076 <_dtoa_r+0x7de>
 8012164:	3fe00000 	.word	0x3fe00000
 8012168:	40240000 	.word	0x40240000
 801216c:	40140000 	.word	0x40140000
 8012170:	9b02      	ldr	r3, [sp, #8]
 8012172:	e780      	b.n	8012076 <_dtoa_r+0x7de>
 8012174:	2300      	movs	r3, #0
 8012176:	930a      	str	r3, [sp, #40]	@ 0x28
 8012178:	e782      	b.n	8012080 <_dtoa_r+0x7e8>
 801217a:	d099      	beq.n	80120b0 <_dtoa_r+0x818>
 801217c:	9a08      	ldr	r2, [sp, #32]
 801217e:	331c      	adds	r3, #28
 8012180:	441a      	add	r2, r3
 8012182:	4498      	add	r8, r3
 8012184:	441e      	add	r6, r3
 8012186:	9208      	str	r2, [sp, #32]
 8012188:	e792      	b.n	80120b0 <_dtoa_r+0x818>
 801218a:	4603      	mov	r3, r0
 801218c:	e7f6      	b.n	801217c <_dtoa_r+0x8e4>
 801218e:	9b07      	ldr	r3, [sp, #28]
 8012190:	9704      	str	r7, [sp, #16]
 8012192:	2b00      	cmp	r3, #0
 8012194:	dc20      	bgt.n	80121d8 <_dtoa_r+0x940>
 8012196:	9300      	str	r3, [sp, #0]
 8012198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801219a:	2b02      	cmp	r3, #2
 801219c:	dd1e      	ble.n	80121dc <_dtoa_r+0x944>
 801219e:	9b00      	ldr	r3, [sp, #0]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	f47f aec0 	bne.w	8011f26 <_dtoa_r+0x68e>
 80121a6:	4621      	mov	r1, r4
 80121a8:	2205      	movs	r2, #5
 80121aa:	4658      	mov	r0, fp
 80121ac:	f000 fa9a 	bl	80126e4 <__multadd>
 80121b0:	4601      	mov	r1, r0
 80121b2:	4604      	mov	r4, r0
 80121b4:	4648      	mov	r0, r9
 80121b6:	f000 fcf7 	bl	8012ba8 <__mcmp>
 80121ba:	2800      	cmp	r0, #0
 80121bc:	f77f aeb3 	ble.w	8011f26 <_dtoa_r+0x68e>
 80121c0:	4656      	mov	r6, sl
 80121c2:	2331      	movs	r3, #49	@ 0x31
 80121c4:	f806 3b01 	strb.w	r3, [r6], #1
 80121c8:	9b04      	ldr	r3, [sp, #16]
 80121ca:	3301      	adds	r3, #1
 80121cc:	9304      	str	r3, [sp, #16]
 80121ce:	e6ae      	b.n	8011f2e <_dtoa_r+0x696>
 80121d0:	9c07      	ldr	r4, [sp, #28]
 80121d2:	9704      	str	r7, [sp, #16]
 80121d4:	4625      	mov	r5, r4
 80121d6:	e7f3      	b.n	80121c0 <_dtoa_r+0x928>
 80121d8:	9b07      	ldr	r3, [sp, #28]
 80121da:	9300      	str	r3, [sp, #0]
 80121dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80121de:	2b00      	cmp	r3, #0
 80121e0:	f000 8104 	beq.w	80123ec <_dtoa_r+0xb54>
 80121e4:	2e00      	cmp	r6, #0
 80121e6:	dd05      	ble.n	80121f4 <_dtoa_r+0x95c>
 80121e8:	4629      	mov	r1, r5
 80121ea:	4632      	mov	r2, r6
 80121ec:	4658      	mov	r0, fp
 80121ee:	f000 fc6f 	bl	8012ad0 <__lshift>
 80121f2:	4605      	mov	r5, r0
 80121f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d05a      	beq.n	80122b0 <_dtoa_r+0xa18>
 80121fa:	6869      	ldr	r1, [r5, #4]
 80121fc:	4658      	mov	r0, fp
 80121fe:	f000 fa0f 	bl	8012620 <_Balloc>
 8012202:	4606      	mov	r6, r0
 8012204:	b928      	cbnz	r0, 8012212 <_dtoa_r+0x97a>
 8012206:	4b84      	ldr	r3, [pc, #528]	@ (8012418 <_dtoa_r+0xb80>)
 8012208:	4602      	mov	r2, r0
 801220a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801220e:	f7ff bb5a 	b.w	80118c6 <_dtoa_r+0x2e>
 8012212:	692a      	ldr	r2, [r5, #16]
 8012214:	3202      	adds	r2, #2
 8012216:	0092      	lsls	r2, r2, #2
 8012218:	f105 010c 	add.w	r1, r5, #12
 801221c:	300c      	adds	r0, #12
 801221e:	f7ff fa9c 	bl	801175a <memcpy>
 8012222:	2201      	movs	r2, #1
 8012224:	4631      	mov	r1, r6
 8012226:	4658      	mov	r0, fp
 8012228:	f000 fc52 	bl	8012ad0 <__lshift>
 801222c:	f10a 0301 	add.w	r3, sl, #1
 8012230:	9307      	str	r3, [sp, #28]
 8012232:	9b00      	ldr	r3, [sp, #0]
 8012234:	4453      	add	r3, sl
 8012236:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012238:	9b02      	ldr	r3, [sp, #8]
 801223a:	f003 0301 	and.w	r3, r3, #1
 801223e:	462f      	mov	r7, r5
 8012240:	930a      	str	r3, [sp, #40]	@ 0x28
 8012242:	4605      	mov	r5, r0
 8012244:	9b07      	ldr	r3, [sp, #28]
 8012246:	4621      	mov	r1, r4
 8012248:	3b01      	subs	r3, #1
 801224a:	4648      	mov	r0, r9
 801224c:	9300      	str	r3, [sp, #0]
 801224e:	f7ff fa99 	bl	8011784 <quorem>
 8012252:	4639      	mov	r1, r7
 8012254:	9002      	str	r0, [sp, #8]
 8012256:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801225a:	4648      	mov	r0, r9
 801225c:	f000 fca4 	bl	8012ba8 <__mcmp>
 8012260:	462a      	mov	r2, r5
 8012262:	9008      	str	r0, [sp, #32]
 8012264:	4621      	mov	r1, r4
 8012266:	4658      	mov	r0, fp
 8012268:	f000 fcba 	bl	8012be0 <__mdiff>
 801226c:	68c2      	ldr	r2, [r0, #12]
 801226e:	4606      	mov	r6, r0
 8012270:	bb02      	cbnz	r2, 80122b4 <_dtoa_r+0xa1c>
 8012272:	4601      	mov	r1, r0
 8012274:	4648      	mov	r0, r9
 8012276:	f000 fc97 	bl	8012ba8 <__mcmp>
 801227a:	4602      	mov	r2, r0
 801227c:	4631      	mov	r1, r6
 801227e:	4658      	mov	r0, fp
 8012280:	920e      	str	r2, [sp, #56]	@ 0x38
 8012282:	f000 fa0d 	bl	80126a0 <_Bfree>
 8012286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012288:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801228a:	9e07      	ldr	r6, [sp, #28]
 801228c:	ea43 0102 	orr.w	r1, r3, r2
 8012290:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012292:	4319      	orrs	r1, r3
 8012294:	d110      	bne.n	80122b8 <_dtoa_r+0xa20>
 8012296:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801229a:	d029      	beq.n	80122f0 <_dtoa_r+0xa58>
 801229c:	9b08      	ldr	r3, [sp, #32]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	dd02      	ble.n	80122a8 <_dtoa_r+0xa10>
 80122a2:	9b02      	ldr	r3, [sp, #8]
 80122a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80122a8:	9b00      	ldr	r3, [sp, #0]
 80122aa:	f883 8000 	strb.w	r8, [r3]
 80122ae:	e63f      	b.n	8011f30 <_dtoa_r+0x698>
 80122b0:	4628      	mov	r0, r5
 80122b2:	e7bb      	b.n	801222c <_dtoa_r+0x994>
 80122b4:	2201      	movs	r2, #1
 80122b6:	e7e1      	b.n	801227c <_dtoa_r+0x9e4>
 80122b8:	9b08      	ldr	r3, [sp, #32]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	db04      	blt.n	80122c8 <_dtoa_r+0xa30>
 80122be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80122c0:	430b      	orrs	r3, r1
 80122c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80122c4:	430b      	orrs	r3, r1
 80122c6:	d120      	bne.n	801230a <_dtoa_r+0xa72>
 80122c8:	2a00      	cmp	r2, #0
 80122ca:	dded      	ble.n	80122a8 <_dtoa_r+0xa10>
 80122cc:	4649      	mov	r1, r9
 80122ce:	2201      	movs	r2, #1
 80122d0:	4658      	mov	r0, fp
 80122d2:	f000 fbfd 	bl	8012ad0 <__lshift>
 80122d6:	4621      	mov	r1, r4
 80122d8:	4681      	mov	r9, r0
 80122da:	f000 fc65 	bl	8012ba8 <__mcmp>
 80122de:	2800      	cmp	r0, #0
 80122e0:	dc03      	bgt.n	80122ea <_dtoa_r+0xa52>
 80122e2:	d1e1      	bne.n	80122a8 <_dtoa_r+0xa10>
 80122e4:	f018 0f01 	tst.w	r8, #1
 80122e8:	d0de      	beq.n	80122a8 <_dtoa_r+0xa10>
 80122ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80122ee:	d1d8      	bne.n	80122a2 <_dtoa_r+0xa0a>
 80122f0:	9a00      	ldr	r2, [sp, #0]
 80122f2:	2339      	movs	r3, #57	@ 0x39
 80122f4:	7013      	strb	r3, [r2, #0]
 80122f6:	4633      	mov	r3, r6
 80122f8:	461e      	mov	r6, r3
 80122fa:	3b01      	subs	r3, #1
 80122fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012300:	2a39      	cmp	r2, #57	@ 0x39
 8012302:	d052      	beq.n	80123aa <_dtoa_r+0xb12>
 8012304:	3201      	adds	r2, #1
 8012306:	701a      	strb	r2, [r3, #0]
 8012308:	e612      	b.n	8011f30 <_dtoa_r+0x698>
 801230a:	2a00      	cmp	r2, #0
 801230c:	dd07      	ble.n	801231e <_dtoa_r+0xa86>
 801230e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012312:	d0ed      	beq.n	80122f0 <_dtoa_r+0xa58>
 8012314:	9a00      	ldr	r2, [sp, #0]
 8012316:	f108 0301 	add.w	r3, r8, #1
 801231a:	7013      	strb	r3, [r2, #0]
 801231c:	e608      	b.n	8011f30 <_dtoa_r+0x698>
 801231e:	9b07      	ldr	r3, [sp, #28]
 8012320:	9a07      	ldr	r2, [sp, #28]
 8012322:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012326:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012328:	4293      	cmp	r3, r2
 801232a:	d028      	beq.n	801237e <_dtoa_r+0xae6>
 801232c:	4649      	mov	r1, r9
 801232e:	2300      	movs	r3, #0
 8012330:	220a      	movs	r2, #10
 8012332:	4658      	mov	r0, fp
 8012334:	f000 f9d6 	bl	80126e4 <__multadd>
 8012338:	42af      	cmp	r7, r5
 801233a:	4681      	mov	r9, r0
 801233c:	f04f 0300 	mov.w	r3, #0
 8012340:	f04f 020a 	mov.w	r2, #10
 8012344:	4639      	mov	r1, r7
 8012346:	4658      	mov	r0, fp
 8012348:	d107      	bne.n	801235a <_dtoa_r+0xac2>
 801234a:	f000 f9cb 	bl	80126e4 <__multadd>
 801234e:	4607      	mov	r7, r0
 8012350:	4605      	mov	r5, r0
 8012352:	9b07      	ldr	r3, [sp, #28]
 8012354:	3301      	adds	r3, #1
 8012356:	9307      	str	r3, [sp, #28]
 8012358:	e774      	b.n	8012244 <_dtoa_r+0x9ac>
 801235a:	f000 f9c3 	bl	80126e4 <__multadd>
 801235e:	4629      	mov	r1, r5
 8012360:	4607      	mov	r7, r0
 8012362:	2300      	movs	r3, #0
 8012364:	220a      	movs	r2, #10
 8012366:	4658      	mov	r0, fp
 8012368:	f000 f9bc 	bl	80126e4 <__multadd>
 801236c:	4605      	mov	r5, r0
 801236e:	e7f0      	b.n	8012352 <_dtoa_r+0xaba>
 8012370:	9b00      	ldr	r3, [sp, #0]
 8012372:	2b00      	cmp	r3, #0
 8012374:	bfcc      	ite	gt
 8012376:	461e      	movgt	r6, r3
 8012378:	2601      	movle	r6, #1
 801237a:	4456      	add	r6, sl
 801237c:	2700      	movs	r7, #0
 801237e:	4649      	mov	r1, r9
 8012380:	2201      	movs	r2, #1
 8012382:	4658      	mov	r0, fp
 8012384:	f000 fba4 	bl	8012ad0 <__lshift>
 8012388:	4621      	mov	r1, r4
 801238a:	4681      	mov	r9, r0
 801238c:	f000 fc0c 	bl	8012ba8 <__mcmp>
 8012390:	2800      	cmp	r0, #0
 8012392:	dcb0      	bgt.n	80122f6 <_dtoa_r+0xa5e>
 8012394:	d102      	bne.n	801239c <_dtoa_r+0xb04>
 8012396:	f018 0f01 	tst.w	r8, #1
 801239a:	d1ac      	bne.n	80122f6 <_dtoa_r+0xa5e>
 801239c:	4633      	mov	r3, r6
 801239e:	461e      	mov	r6, r3
 80123a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80123a4:	2a30      	cmp	r2, #48	@ 0x30
 80123a6:	d0fa      	beq.n	801239e <_dtoa_r+0xb06>
 80123a8:	e5c2      	b.n	8011f30 <_dtoa_r+0x698>
 80123aa:	459a      	cmp	sl, r3
 80123ac:	d1a4      	bne.n	80122f8 <_dtoa_r+0xa60>
 80123ae:	9b04      	ldr	r3, [sp, #16]
 80123b0:	3301      	adds	r3, #1
 80123b2:	9304      	str	r3, [sp, #16]
 80123b4:	2331      	movs	r3, #49	@ 0x31
 80123b6:	f88a 3000 	strb.w	r3, [sl]
 80123ba:	e5b9      	b.n	8011f30 <_dtoa_r+0x698>
 80123bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80123be:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801241c <_dtoa_r+0xb84>
 80123c2:	b11b      	cbz	r3, 80123cc <_dtoa_r+0xb34>
 80123c4:	f10a 0308 	add.w	r3, sl, #8
 80123c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80123ca:	6013      	str	r3, [r2, #0]
 80123cc:	4650      	mov	r0, sl
 80123ce:	b019      	add	sp, #100	@ 0x64
 80123d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123d6:	2b01      	cmp	r3, #1
 80123d8:	f77f ae37 	ble.w	801204a <_dtoa_r+0x7b2>
 80123dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123de:	930a      	str	r3, [sp, #40]	@ 0x28
 80123e0:	2001      	movs	r0, #1
 80123e2:	e655      	b.n	8012090 <_dtoa_r+0x7f8>
 80123e4:	9b00      	ldr	r3, [sp, #0]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	f77f aed6 	ble.w	8012198 <_dtoa_r+0x900>
 80123ec:	4656      	mov	r6, sl
 80123ee:	4621      	mov	r1, r4
 80123f0:	4648      	mov	r0, r9
 80123f2:	f7ff f9c7 	bl	8011784 <quorem>
 80123f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80123fa:	f806 8b01 	strb.w	r8, [r6], #1
 80123fe:	9b00      	ldr	r3, [sp, #0]
 8012400:	eba6 020a 	sub.w	r2, r6, sl
 8012404:	4293      	cmp	r3, r2
 8012406:	ddb3      	ble.n	8012370 <_dtoa_r+0xad8>
 8012408:	4649      	mov	r1, r9
 801240a:	2300      	movs	r3, #0
 801240c:	220a      	movs	r2, #10
 801240e:	4658      	mov	r0, fp
 8012410:	f000 f968 	bl	80126e4 <__multadd>
 8012414:	4681      	mov	r9, r0
 8012416:	e7ea      	b.n	80123ee <_dtoa_r+0xb56>
 8012418:	08016e9b 	.word	0x08016e9b
 801241c:	08016e1f 	.word	0x08016e1f

08012420 <_free_r>:
 8012420:	b538      	push	{r3, r4, r5, lr}
 8012422:	4605      	mov	r5, r0
 8012424:	2900      	cmp	r1, #0
 8012426:	d041      	beq.n	80124ac <_free_r+0x8c>
 8012428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801242c:	1f0c      	subs	r4, r1, #4
 801242e:	2b00      	cmp	r3, #0
 8012430:	bfb8      	it	lt
 8012432:	18e4      	addlt	r4, r4, r3
 8012434:	f000 f8e8 	bl	8012608 <__malloc_lock>
 8012438:	4a1d      	ldr	r2, [pc, #116]	@ (80124b0 <_free_r+0x90>)
 801243a:	6813      	ldr	r3, [r2, #0]
 801243c:	b933      	cbnz	r3, 801244c <_free_r+0x2c>
 801243e:	6063      	str	r3, [r4, #4]
 8012440:	6014      	str	r4, [r2, #0]
 8012442:	4628      	mov	r0, r5
 8012444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012448:	f000 b8e4 	b.w	8012614 <__malloc_unlock>
 801244c:	42a3      	cmp	r3, r4
 801244e:	d908      	bls.n	8012462 <_free_r+0x42>
 8012450:	6820      	ldr	r0, [r4, #0]
 8012452:	1821      	adds	r1, r4, r0
 8012454:	428b      	cmp	r3, r1
 8012456:	bf01      	itttt	eq
 8012458:	6819      	ldreq	r1, [r3, #0]
 801245a:	685b      	ldreq	r3, [r3, #4]
 801245c:	1809      	addeq	r1, r1, r0
 801245e:	6021      	streq	r1, [r4, #0]
 8012460:	e7ed      	b.n	801243e <_free_r+0x1e>
 8012462:	461a      	mov	r2, r3
 8012464:	685b      	ldr	r3, [r3, #4]
 8012466:	b10b      	cbz	r3, 801246c <_free_r+0x4c>
 8012468:	42a3      	cmp	r3, r4
 801246a:	d9fa      	bls.n	8012462 <_free_r+0x42>
 801246c:	6811      	ldr	r1, [r2, #0]
 801246e:	1850      	adds	r0, r2, r1
 8012470:	42a0      	cmp	r0, r4
 8012472:	d10b      	bne.n	801248c <_free_r+0x6c>
 8012474:	6820      	ldr	r0, [r4, #0]
 8012476:	4401      	add	r1, r0
 8012478:	1850      	adds	r0, r2, r1
 801247a:	4283      	cmp	r3, r0
 801247c:	6011      	str	r1, [r2, #0]
 801247e:	d1e0      	bne.n	8012442 <_free_r+0x22>
 8012480:	6818      	ldr	r0, [r3, #0]
 8012482:	685b      	ldr	r3, [r3, #4]
 8012484:	6053      	str	r3, [r2, #4]
 8012486:	4408      	add	r0, r1
 8012488:	6010      	str	r0, [r2, #0]
 801248a:	e7da      	b.n	8012442 <_free_r+0x22>
 801248c:	d902      	bls.n	8012494 <_free_r+0x74>
 801248e:	230c      	movs	r3, #12
 8012490:	602b      	str	r3, [r5, #0]
 8012492:	e7d6      	b.n	8012442 <_free_r+0x22>
 8012494:	6820      	ldr	r0, [r4, #0]
 8012496:	1821      	adds	r1, r4, r0
 8012498:	428b      	cmp	r3, r1
 801249a:	bf04      	itt	eq
 801249c:	6819      	ldreq	r1, [r3, #0]
 801249e:	685b      	ldreq	r3, [r3, #4]
 80124a0:	6063      	str	r3, [r4, #4]
 80124a2:	bf04      	itt	eq
 80124a4:	1809      	addeq	r1, r1, r0
 80124a6:	6021      	streq	r1, [r4, #0]
 80124a8:	6054      	str	r4, [r2, #4]
 80124aa:	e7ca      	b.n	8012442 <_free_r+0x22>
 80124ac:	bd38      	pop	{r3, r4, r5, pc}
 80124ae:	bf00      	nop
 80124b0:	2000267c 	.word	0x2000267c

080124b4 <malloc>:
 80124b4:	4b02      	ldr	r3, [pc, #8]	@ (80124c0 <malloc+0xc>)
 80124b6:	4601      	mov	r1, r0
 80124b8:	6818      	ldr	r0, [r3, #0]
 80124ba:	f000 b825 	b.w	8012508 <_malloc_r>
 80124be:	bf00      	nop
 80124c0:	200001b0 	.word	0x200001b0

080124c4 <sbrk_aligned>:
 80124c4:	b570      	push	{r4, r5, r6, lr}
 80124c6:	4e0f      	ldr	r6, [pc, #60]	@ (8012504 <sbrk_aligned+0x40>)
 80124c8:	460c      	mov	r4, r1
 80124ca:	6831      	ldr	r1, [r6, #0]
 80124cc:	4605      	mov	r5, r0
 80124ce:	b911      	cbnz	r1, 80124d6 <sbrk_aligned+0x12>
 80124d0:	f002 f988 	bl	80147e4 <_sbrk_r>
 80124d4:	6030      	str	r0, [r6, #0]
 80124d6:	4621      	mov	r1, r4
 80124d8:	4628      	mov	r0, r5
 80124da:	f002 f983 	bl	80147e4 <_sbrk_r>
 80124de:	1c43      	adds	r3, r0, #1
 80124e0:	d103      	bne.n	80124ea <sbrk_aligned+0x26>
 80124e2:	f04f 34ff 	mov.w	r4, #4294967295
 80124e6:	4620      	mov	r0, r4
 80124e8:	bd70      	pop	{r4, r5, r6, pc}
 80124ea:	1cc4      	adds	r4, r0, #3
 80124ec:	f024 0403 	bic.w	r4, r4, #3
 80124f0:	42a0      	cmp	r0, r4
 80124f2:	d0f8      	beq.n	80124e6 <sbrk_aligned+0x22>
 80124f4:	1a21      	subs	r1, r4, r0
 80124f6:	4628      	mov	r0, r5
 80124f8:	f002 f974 	bl	80147e4 <_sbrk_r>
 80124fc:	3001      	adds	r0, #1
 80124fe:	d1f2      	bne.n	80124e6 <sbrk_aligned+0x22>
 8012500:	e7ef      	b.n	80124e2 <sbrk_aligned+0x1e>
 8012502:	bf00      	nop
 8012504:	20002678 	.word	0x20002678

08012508 <_malloc_r>:
 8012508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801250c:	1ccd      	adds	r5, r1, #3
 801250e:	f025 0503 	bic.w	r5, r5, #3
 8012512:	3508      	adds	r5, #8
 8012514:	2d0c      	cmp	r5, #12
 8012516:	bf38      	it	cc
 8012518:	250c      	movcc	r5, #12
 801251a:	2d00      	cmp	r5, #0
 801251c:	4606      	mov	r6, r0
 801251e:	db01      	blt.n	8012524 <_malloc_r+0x1c>
 8012520:	42a9      	cmp	r1, r5
 8012522:	d904      	bls.n	801252e <_malloc_r+0x26>
 8012524:	230c      	movs	r3, #12
 8012526:	6033      	str	r3, [r6, #0]
 8012528:	2000      	movs	r0, #0
 801252a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801252e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012604 <_malloc_r+0xfc>
 8012532:	f000 f869 	bl	8012608 <__malloc_lock>
 8012536:	f8d8 3000 	ldr.w	r3, [r8]
 801253a:	461c      	mov	r4, r3
 801253c:	bb44      	cbnz	r4, 8012590 <_malloc_r+0x88>
 801253e:	4629      	mov	r1, r5
 8012540:	4630      	mov	r0, r6
 8012542:	f7ff ffbf 	bl	80124c4 <sbrk_aligned>
 8012546:	1c43      	adds	r3, r0, #1
 8012548:	4604      	mov	r4, r0
 801254a:	d158      	bne.n	80125fe <_malloc_r+0xf6>
 801254c:	f8d8 4000 	ldr.w	r4, [r8]
 8012550:	4627      	mov	r7, r4
 8012552:	2f00      	cmp	r7, #0
 8012554:	d143      	bne.n	80125de <_malloc_r+0xd6>
 8012556:	2c00      	cmp	r4, #0
 8012558:	d04b      	beq.n	80125f2 <_malloc_r+0xea>
 801255a:	6823      	ldr	r3, [r4, #0]
 801255c:	4639      	mov	r1, r7
 801255e:	4630      	mov	r0, r6
 8012560:	eb04 0903 	add.w	r9, r4, r3
 8012564:	f002 f93e 	bl	80147e4 <_sbrk_r>
 8012568:	4581      	cmp	r9, r0
 801256a:	d142      	bne.n	80125f2 <_malloc_r+0xea>
 801256c:	6821      	ldr	r1, [r4, #0]
 801256e:	1a6d      	subs	r5, r5, r1
 8012570:	4629      	mov	r1, r5
 8012572:	4630      	mov	r0, r6
 8012574:	f7ff ffa6 	bl	80124c4 <sbrk_aligned>
 8012578:	3001      	adds	r0, #1
 801257a:	d03a      	beq.n	80125f2 <_malloc_r+0xea>
 801257c:	6823      	ldr	r3, [r4, #0]
 801257e:	442b      	add	r3, r5
 8012580:	6023      	str	r3, [r4, #0]
 8012582:	f8d8 3000 	ldr.w	r3, [r8]
 8012586:	685a      	ldr	r2, [r3, #4]
 8012588:	bb62      	cbnz	r2, 80125e4 <_malloc_r+0xdc>
 801258a:	f8c8 7000 	str.w	r7, [r8]
 801258e:	e00f      	b.n	80125b0 <_malloc_r+0xa8>
 8012590:	6822      	ldr	r2, [r4, #0]
 8012592:	1b52      	subs	r2, r2, r5
 8012594:	d420      	bmi.n	80125d8 <_malloc_r+0xd0>
 8012596:	2a0b      	cmp	r2, #11
 8012598:	d917      	bls.n	80125ca <_malloc_r+0xc2>
 801259a:	1961      	adds	r1, r4, r5
 801259c:	42a3      	cmp	r3, r4
 801259e:	6025      	str	r5, [r4, #0]
 80125a0:	bf18      	it	ne
 80125a2:	6059      	strne	r1, [r3, #4]
 80125a4:	6863      	ldr	r3, [r4, #4]
 80125a6:	bf08      	it	eq
 80125a8:	f8c8 1000 	streq.w	r1, [r8]
 80125ac:	5162      	str	r2, [r4, r5]
 80125ae:	604b      	str	r3, [r1, #4]
 80125b0:	4630      	mov	r0, r6
 80125b2:	f000 f82f 	bl	8012614 <__malloc_unlock>
 80125b6:	f104 000b 	add.w	r0, r4, #11
 80125ba:	1d23      	adds	r3, r4, #4
 80125bc:	f020 0007 	bic.w	r0, r0, #7
 80125c0:	1ac2      	subs	r2, r0, r3
 80125c2:	bf1c      	itt	ne
 80125c4:	1a1b      	subne	r3, r3, r0
 80125c6:	50a3      	strne	r3, [r4, r2]
 80125c8:	e7af      	b.n	801252a <_malloc_r+0x22>
 80125ca:	6862      	ldr	r2, [r4, #4]
 80125cc:	42a3      	cmp	r3, r4
 80125ce:	bf0c      	ite	eq
 80125d0:	f8c8 2000 	streq.w	r2, [r8]
 80125d4:	605a      	strne	r2, [r3, #4]
 80125d6:	e7eb      	b.n	80125b0 <_malloc_r+0xa8>
 80125d8:	4623      	mov	r3, r4
 80125da:	6864      	ldr	r4, [r4, #4]
 80125dc:	e7ae      	b.n	801253c <_malloc_r+0x34>
 80125de:	463c      	mov	r4, r7
 80125e0:	687f      	ldr	r7, [r7, #4]
 80125e2:	e7b6      	b.n	8012552 <_malloc_r+0x4a>
 80125e4:	461a      	mov	r2, r3
 80125e6:	685b      	ldr	r3, [r3, #4]
 80125e8:	42a3      	cmp	r3, r4
 80125ea:	d1fb      	bne.n	80125e4 <_malloc_r+0xdc>
 80125ec:	2300      	movs	r3, #0
 80125ee:	6053      	str	r3, [r2, #4]
 80125f0:	e7de      	b.n	80125b0 <_malloc_r+0xa8>
 80125f2:	230c      	movs	r3, #12
 80125f4:	6033      	str	r3, [r6, #0]
 80125f6:	4630      	mov	r0, r6
 80125f8:	f000 f80c 	bl	8012614 <__malloc_unlock>
 80125fc:	e794      	b.n	8012528 <_malloc_r+0x20>
 80125fe:	6005      	str	r5, [r0, #0]
 8012600:	e7d6      	b.n	80125b0 <_malloc_r+0xa8>
 8012602:	bf00      	nop
 8012604:	2000267c 	.word	0x2000267c

08012608 <__malloc_lock>:
 8012608:	4801      	ldr	r0, [pc, #4]	@ (8012610 <__malloc_lock+0x8>)
 801260a:	f7ff b8a4 	b.w	8011756 <__retarget_lock_acquire_recursive>
 801260e:	bf00      	nop
 8012610:	20002674 	.word	0x20002674

08012614 <__malloc_unlock>:
 8012614:	4801      	ldr	r0, [pc, #4]	@ (801261c <__malloc_unlock+0x8>)
 8012616:	f7ff b89f 	b.w	8011758 <__retarget_lock_release_recursive>
 801261a:	bf00      	nop
 801261c:	20002674 	.word	0x20002674

08012620 <_Balloc>:
 8012620:	b570      	push	{r4, r5, r6, lr}
 8012622:	69c6      	ldr	r6, [r0, #28]
 8012624:	4604      	mov	r4, r0
 8012626:	460d      	mov	r5, r1
 8012628:	b976      	cbnz	r6, 8012648 <_Balloc+0x28>
 801262a:	2010      	movs	r0, #16
 801262c:	f7ff ff42 	bl	80124b4 <malloc>
 8012630:	4602      	mov	r2, r0
 8012632:	61e0      	str	r0, [r4, #28]
 8012634:	b920      	cbnz	r0, 8012640 <_Balloc+0x20>
 8012636:	4b18      	ldr	r3, [pc, #96]	@ (8012698 <_Balloc+0x78>)
 8012638:	4818      	ldr	r0, [pc, #96]	@ (801269c <_Balloc+0x7c>)
 801263a:	216b      	movs	r1, #107	@ 0x6b
 801263c:	f002 f8ec 	bl	8014818 <__assert_func>
 8012640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012644:	6006      	str	r6, [r0, #0]
 8012646:	60c6      	str	r6, [r0, #12]
 8012648:	69e6      	ldr	r6, [r4, #28]
 801264a:	68f3      	ldr	r3, [r6, #12]
 801264c:	b183      	cbz	r3, 8012670 <_Balloc+0x50>
 801264e:	69e3      	ldr	r3, [r4, #28]
 8012650:	68db      	ldr	r3, [r3, #12]
 8012652:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012656:	b9b8      	cbnz	r0, 8012688 <_Balloc+0x68>
 8012658:	2101      	movs	r1, #1
 801265a:	fa01 f605 	lsl.w	r6, r1, r5
 801265e:	1d72      	adds	r2, r6, #5
 8012660:	0092      	lsls	r2, r2, #2
 8012662:	4620      	mov	r0, r4
 8012664:	f002 f8f6 	bl	8014854 <_calloc_r>
 8012668:	b160      	cbz	r0, 8012684 <_Balloc+0x64>
 801266a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801266e:	e00e      	b.n	801268e <_Balloc+0x6e>
 8012670:	2221      	movs	r2, #33	@ 0x21
 8012672:	2104      	movs	r1, #4
 8012674:	4620      	mov	r0, r4
 8012676:	f002 f8ed 	bl	8014854 <_calloc_r>
 801267a:	69e3      	ldr	r3, [r4, #28]
 801267c:	60f0      	str	r0, [r6, #12]
 801267e:	68db      	ldr	r3, [r3, #12]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d1e4      	bne.n	801264e <_Balloc+0x2e>
 8012684:	2000      	movs	r0, #0
 8012686:	bd70      	pop	{r4, r5, r6, pc}
 8012688:	6802      	ldr	r2, [r0, #0]
 801268a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801268e:	2300      	movs	r3, #0
 8012690:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012694:	e7f7      	b.n	8012686 <_Balloc+0x66>
 8012696:	bf00      	nop
 8012698:	08016e2c 	.word	0x08016e2c
 801269c:	08016eac 	.word	0x08016eac

080126a0 <_Bfree>:
 80126a0:	b570      	push	{r4, r5, r6, lr}
 80126a2:	69c6      	ldr	r6, [r0, #28]
 80126a4:	4605      	mov	r5, r0
 80126a6:	460c      	mov	r4, r1
 80126a8:	b976      	cbnz	r6, 80126c8 <_Bfree+0x28>
 80126aa:	2010      	movs	r0, #16
 80126ac:	f7ff ff02 	bl	80124b4 <malloc>
 80126b0:	4602      	mov	r2, r0
 80126b2:	61e8      	str	r0, [r5, #28]
 80126b4:	b920      	cbnz	r0, 80126c0 <_Bfree+0x20>
 80126b6:	4b09      	ldr	r3, [pc, #36]	@ (80126dc <_Bfree+0x3c>)
 80126b8:	4809      	ldr	r0, [pc, #36]	@ (80126e0 <_Bfree+0x40>)
 80126ba:	218f      	movs	r1, #143	@ 0x8f
 80126bc:	f002 f8ac 	bl	8014818 <__assert_func>
 80126c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80126c4:	6006      	str	r6, [r0, #0]
 80126c6:	60c6      	str	r6, [r0, #12]
 80126c8:	b13c      	cbz	r4, 80126da <_Bfree+0x3a>
 80126ca:	69eb      	ldr	r3, [r5, #28]
 80126cc:	6862      	ldr	r2, [r4, #4]
 80126ce:	68db      	ldr	r3, [r3, #12]
 80126d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80126d4:	6021      	str	r1, [r4, #0]
 80126d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80126da:	bd70      	pop	{r4, r5, r6, pc}
 80126dc:	08016e2c 	.word	0x08016e2c
 80126e0:	08016eac 	.word	0x08016eac

080126e4 <__multadd>:
 80126e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126e8:	690d      	ldr	r5, [r1, #16]
 80126ea:	4607      	mov	r7, r0
 80126ec:	460c      	mov	r4, r1
 80126ee:	461e      	mov	r6, r3
 80126f0:	f101 0c14 	add.w	ip, r1, #20
 80126f4:	2000      	movs	r0, #0
 80126f6:	f8dc 3000 	ldr.w	r3, [ip]
 80126fa:	b299      	uxth	r1, r3
 80126fc:	fb02 6101 	mla	r1, r2, r1, r6
 8012700:	0c1e      	lsrs	r6, r3, #16
 8012702:	0c0b      	lsrs	r3, r1, #16
 8012704:	fb02 3306 	mla	r3, r2, r6, r3
 8012708:	b289      	uxth	r1, r1
 801270a:	3001      	adds	r0, #1
 801270c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012710:	4285      	cmp	r5, r0
 8012712:	f84c 1b04 	str.w	r1, [ip], #4
 8012716:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801271a:	dcec      	bgt.n	80126f6 <__multadd+0x12>
 801271c:	b30e      	cbz	r6, 8012762 <__multadd+0x7e>
 801271e:	68a3      	ldr	r3, [r4, #8]
 8012720:	42ab      	cmp	r3, r5
 8012722:	dc19      	bgt.n	8012758 <__multadd+0x74>
 8012724:	6861      	ldr	r1, [r4, #4]
 8012726:	4638      	mov	r0, r7
 8012728:	3101      	adds	r1, #1
 801272a:	f7ff ff79 	bl	8012620 <_Balloc>
 801272e:	4680      	mov	r8, r0
 8012730:	b928      	cbnz	r0, 801273e <__multadd+0x5a>
 8012732:	4602      	mov	r2, r0
 8012734:	4b0c      	ldr	r3, [pc, #48]	@ (8012768 <__multadd+0x84>)
 8012736:	480d      	ldr	r0, [pc, #52]	@ (801276c <__multadd+0x88>)
 8012738:	21ba      	movs	r1, #186	@ 0xba
 801273a:	f002 f86d 	bl	8014818 <__assert_func>
 801273e:	6922      	ldr	r2, [r4, #16]
 8012740:	3202      	adds	r2, #2
 8012742:	f104 010c 	add.w	r1, r4, #12
 8012746:	0092      	lsls	r2, r2, #2
 8012748:	300c      	adds	r0, #12
 801274a:	f7ff f806 	bl	801175a <memcpy>
 801274e:	4621      	mov	r1, r4
 8012750:	4638      	mov	r0, r7
 8012752:	f7ff ffa5 	bl	80126a0 <_Bfree>
 8012756:	4644      	mov	r4, r8
 8012758:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801275c:	3501      	adds	r5, #1
 801275e:	615e      	str	r6, [r3, #20]
 8012760:	6125      	str	r5, [r4, #16]
 8012762:	4620      	mov	r0, r4
 8012764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012768:	08016e9b 	.word	0x08016e9b
 801276c:	08016eac 	.word	0x08016eac

08012770 <__s2b>:
 8012770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012774:	460c      	mov	r4, r1
 8012776:	4615      	mov	r5, r2
 8012778:	461f      	mov	r7, r3
 801277a:	2209      	movs	r2, #9
 801277c:	3308      	adds	r3, #8
 801277e:	4606      	mov	r6, r0
 8012780:	fb93 f3f2 	sdiv	r3, r3, r2
 8012784:	2100      	movs	r1, #0
 8012786:	2201      	movs	r2, #1
 8012788:	429a      	cmp	r2, r3
 801278a:	db09      	blt.n	80127a0 <__s2b+0x30>
 801278c:	4630      	mov	r0, r6
 801278e:	f7ff ff47 	bl	8012620 <_Balloc>
 8012792:	b940      	cbnz	r0, 80127a6 <__s2b+0x36>
 8012794:	4602      	mov	r2, r0
 8012796:	4b19      	ldr	r3, [pc, #100]	@ (80127fc <__s2b+0x8c>)
 8012798:	4819      	ldr	r0, [pc, #100]	@ (8012800 <__s2b+0x90>)
 801279a:	21d3      	movs	r1, #211	@ 0xd3
 801279c:	f002 f83c 	bl	8014818 <__assert_func>
 80127a0:	0052      	lsls	r2, r2, #1
 80127a2:	3101      	adds	r1, #1
 80127a4:	e7f0      	b.n	8012788 <__s2b+0x18>
 80127a6:	9b08      	ldr	r3, [sp, #32]
 80127a8:	6143      	str	r3, [r0, #20]
 80127aa:	2d09      	cmp	r5, #9
 80127ac:	f04f 0301 	mov.w	r3, #1
 80127b0:	6103      	str	r3, [r0, #16]
 80127b2:	dd16      	ble.n	80127e2 <__s2b+0x72>
 80127b4:	f104 0909 	add.w	r9, r4, #9
 80127b8:	46c8      	mov	r8, r9
 80127ba:	442c      	add	r4, r5
 80127bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80127c0:	4601      	mov	r1, r0
 80127c2:	3b30      	subs	r3, #48	@ 0x30
 80127c4:	220a      	movs	r2, #10
 80127c6:	4630      	mov	r0, r6
 80127c8:	f7ff ff8c 	bl	80126e4 <__multadd>
 80127cc:	45a0      	cmp	r8, r4
 80127ce:	d1f5      	bne.n	80127bc <__s2b+0x4c>
 80127d0:	f1a5 0408 	sub.w	r4, r5, #8
 80127d4:	444c      	add	r4, r9
 80127d6:	1b2d      	subs	r5, r5, r4
 80127d8:	1963      	adds	r3, r4, r5
 80127da:	42bb      	cmp	r3, r7
 80127dc:	db04      	blt.n	80127e8 <__s2b+0x78>
 80127de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127e2:	340a      	adds	r4, #10
 80127e4:	2509      	movs	r5, #9
 80127e6:	e7f6      	b.n	80127d6 <__s2b+0x66>
 80127e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80127ec:	4601      	mov	r1, r0
 80127ee:	3b30      	subs	r3, #48	@ 0x30
 80127f0:	220a      	movs	r2, #10
 80127f2:	4630      	mov	r0, r6
 80127f4:	f7ff ff76 	bl	80126e4 <__multadd>
 80127f8:	e7ee      	b.n	80127d8 <__s2b+0x68>
 80127fa:	bf00      	nop
 80127fc:	08016e9b 	.word	0x08016e9b
 8012800:	08016eac 	.word	0x08016eac

08012804 <__hi0bits>:
 8012804:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012808:	4603      	mov	r3, r0
 801280a:	bf36      	itet	cc
 801280c:	0403      	lslcc	r3, r0, #16
 801280e:	2000      	movcs	r0, #0
 8012810:	2010      	movcc	r0, #16
 8012812:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012816:	bf3c      	itt	cc
 8012818:	021b      	lslcc	r3, r3, #8
 801281a:	3008      	addcc	r0, #8
 801281c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012820:	bf3c      	itt	cc
 8012822:	011b      	lslcc	r3, r3, #4
 8012824:	3004      	addcc	r0, #4
 8012826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801282a:	bf3c      	itt	cc
 801282c:	009b      	lslcc	r3, r3, #2
 801282e:	3002      	addcc	r0, #2
 8012830:	2b00      	cmp	r3, #0
 8012832:	db05      	blt.n	8012840 <__hi0bits+0x3c>
 8012834:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012838:	f100 0001 	add.w	r0, r0, #1
 801283c:	bf08      	it	eq
 801283e:	2020      	moveq	r0, #32
 8012840:	4770      	bx	lr

08012842 <__lo0bits>:
 8012842:	6803      	ldr	r3, [r0, #0]
 8012844:	4602      	mov	r2, r0
 8012846:	f013 0007 	ands.w	r0, r3, #7
 801284a:	d00b      	beq.n	8012864 <__lo0bits+0x22>
 801284c:	07d9      	lsls	r1, r3, #31
 801284e:	d421      	bmi.n	8012894 <__lo0bits+0x52>
 8012850:	0798      	lsls	r0, r3, #30
 8012852:	bf49      	itett	mi
 8012854:	085b      	lsrmi	r3, r3, #1
 8012856:	089b      	lsrpl	r3, r3, #2
 8012858:	2001      	movmi	r0, #1
 801285a:	6013      	strmi	r3, [r2, #0]
 801285c:	bf5c      	itt	pl
 801285e:	6013      	strpl	r3, [r2, #0]
 8012860:	2002      	movpl	r0, #2
 8012862:	4770      	bx	lr
 8012864:	b299      	uxth	r1, r3
 8012866:	b909      	cbnz	r1, 801286c <__lo0bits+0x2a>
 8012868:	0c1b      	lsrs	r3, r3, #16
 801286a:	2010      	movs	r0, #16
 801286c:	b2d9      	uxtb	r1, r3
 801286e:	b909      	cbnz	r1, 8012874 <__lo0bits+0x32>
 8012870:	3008      	adds	r0, #8
 8012872:	0a1b      	lsrs	r3, r3, #8
 8012874:	0719      	lsls	r1, r3, #28
 8012876:	bf04      	itt	eq
 8012878:	091b      	lsreq	r3, r3, #4
 801287a:	3004      	addeq	r0, #4
 801287c:	0799      	lsls	r1, r3, #30
 801287e:	bf04      	itt	eq
 8012880:	089b      	lsreq	r3, r3, #2
 8012882:	3002      	addeq	r0, #2
 8012884:	07d9      	lsls	r1, r3, #31
 8012886:	d403      	bmi.n	8012890 <__lo0bits+0x4e>
 8012888:	085b      	lsrs	r3, r3, #1
 801288a:	f100 0001 	add.w	r0, r0, #1
 801288e:	d003      	beq.n	8012898 <__lo0bits+0x56>
 8012890:	6013      	str	r3, [r2, #0]
 8012892:	4770      	bx	lr
 8012894:	2000      	movs	r0, #0
 8012896:	4770      	bx	lr
 8012898:	2020      	movs	r0, #32
 801289a:	4770      	bx	lr

0801289c <__i2b>:
 801289c:	b510      	push	{r4, lr}
 801289e:	460c      	mov	r4, r1
 80128a0:	2101      	movs	r1, #1
 80128a2:	f7ff febd 	bl	8012620 <_Balloc>
 80128a6:	4602      	mov	r2, r0
 80128a8:	b928      	cbnz	r0, 80128b6 <__i2b+0x1a>
 80128aa:	4b05      	ldr	r3, [pc, #20]	@ (80128c0 <__i2b+0x24>)
 80128ac:	4805      	ldr	r0, [pc, #20]	@ (80128c4 <__i2b+0x28>)
 80128ae:	f240 1145 	movw	r1, #325	@ 0x145
 80128b2:	f001 ffb1 	bl	8014818 <__assert_func>
 80128b6:	2301      	movs	r3, #1
 80128b8:	6144      	str	r4, [r0, #20]
 80128ba:	6103      	str	r3, [r0, #16]
 80128bc:	bd10      	pop	{r4, pc}
 80128be:	bf00      	nop
 80128c0:	08016e9b 	.word	0x08016e9b
 80128c4:	08016eac 	.word	0x08016eac

080128c8 <__multiply>:
 80128c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128cc:	4614      	mov	r4, r2
 80128ce:	690a      	ldr	r2, [r1, #16]
 80128d0:	6923      	ldr	r3, [r4, #16]
 80128d2:	429a      	cmp	r2, r3
 80128d4:	bfa8      	it	ge
 80128d6:	4623      	movge	r3, r4
 80128d8:	460f      	mov	r7, r1
 80128da:	bfa4      	itt	ge
 80128dc:	460c      	movge	r4, r1
 80128de:	461f      	movge	r7, r3
 80128e0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80128e4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80128e8:	68a3      	ldr	r3, [r4, #8]
 80128ea:	6861      	ldr	r1, [r4, #4]
 80128ec:	eb0a 0609 	add.w	r6, sl, r9
 80128f0:	42b3      	cmp	r3, r6
 80128f2:	b085      	sub	sp, #20
 80128f4:	bfb8      	it	lt
 80128f6:	3101      	addlt	r1, #1
 80128f8:	f7ff fe92 	bl	8012620 <_Balloc>
 80128fc:	b930      	cbnz	r0, 801290c <__multiply+0x44>
 80128fe:	4602      	mov	r2, r0
 8012900:	4b44      	ldr	r3, [pc, #272]	@ (8012a14 <__multiply+0x14c>)
 8012902:	4845      	ldr	r0, [pc, #276]	@ (8012a18 <__multiply+0x150>)
 8012904:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012908:	f001 ff86 	bl	8014818 <__assert_func>
 801290c:	f100 0514 	add.w	r5, r0, #20
 8012910:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012914:	462b      	mov	r3, r5
 8012916:	2200      	movs	r2, #0
 8012918:	4543      	cmp	r3, r8
 801291a:	d321      	bcc.n	8012960 <__multiply+0x98>
 801291c:	f107 0114 	add.w	r1, r7, #20
 8012920:	f104 0214 	add.w	r2, r4, #20
 8012924:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012928:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801292c:	9302      	str	r3, [sp, #8]
 801292e:	1b13      	subs	r3, r2, r4
 8012930:	3b15      	subs	r3, #21
 8012932:	f023 0303 	bic.w	r3, r3, #3
 8012936:	3304      	adds	r3, #4
 8012938:	f104 0715 	add.w	r7, r4, #21
 801293c:	42ba      	cmp	r2, r7
 801293e:	bf38      	it	cc
 8012940:	2304      	movcc	r3, #4
 8012942:	9301      	str	r3, [sp, #4]
 8012944:	9b02      	ldr	r3, [sp, #8]
 8012946:	9103      	str	r1, [sp, #12]
 8012948:	428b      	cmp	r3, r1
 801294a:	d80c      	bhi.n	8012966 <__multiply+0x9e>
 801294c:	2e00      	cmp	r6, #0
 801294e:	dd03      	ble.n	8012958 <__multiply+0x90>
 8012950:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012954:	2b00      	cmp	r3, #0
 8012956:	d05b      	beq.n	8012a10 <__multiply+0x148>
 8012958:	6106      	str	r6, [r0, #16]
 801295a:	b005      	add	sp, #20
 801295c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012960:	f843 2b04 	str.w	r2, [r3], #4
 8012964:	e7d8      	b.n	8012918 <__multiply+0x50>
 8012966:	f8b1 a000 	ldrh.w	sl, [r1]
 801296a:	f1ba 0f00 	cmp.w	sl, #0
 801296e:	d024      	beq.n	80129ba <__multiply+0xf2>
 8012970:	f104 0e14 	add.w	lr, r4, #20
 8012974:	46a9      	mov	r9, r5
 8012976:	f04f 0c00 	mov.w	ip, #0
 801297a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801297e:	f8d9 3000 	ldr.w	r3, [r9]
 8012982:	fa1f fb87 	uxth.w	fp, r7
 8012986:	b29b      	uxth	r3, r3
 8012988:	fb0a 330b 	mla	r3, sl, fp, r3
 801298c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012990:	f8d9 7000 	ldr.w	r7, [r9]
 8012994:	4463      	add	r3, ip
 8012996:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801299a:	fb0a c70b 	mla	r7, sl, fp, ip
 801299e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80129a8:	4572      	cmp	r2, lr
 80129aa:	f849 3b04 	str.w	r3, [r9], #4
 80129ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80129b2:	d8e2      	bhi.n	801297a <__multiply+0xb2>
 80129b4:	9b01      	ldr	r3, [sp, #4]
 80129b6:	f845 c003 	str.w	ip, [r5, r3]
 80129ba:	9b03      	ldr	r3, [sp, #12]
 80129bc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80129c0:	3104      	adds	r1, #4
 80129c2:	f1b9 0f00 	cmp.w	r9, #0
 80129c6:	d021      	beq.n	8012a0c <__multiply+0x144>
 80129c8:	682b      	ldr	r3, [r5, #0]
 80129ca:	f104 0c14 	add.w	ip, r4, #20
 80129ce:	46ae      	mov	lr, r5
 80129d0:	f04f 0a00 	mov.w	sl, #0
 80129d4:	f8bc b000 	ldrh.w	fp, [ip]
 80129d8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80129dc:	fb09 770b 	mla	r7, r9, fp, r7
 80129e0:	4457      	add	r7, sl
 80129e2:	b29b      	uxth	r3, r3
 80129e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80129e8:	f84e 3b04 	str.w	r3, [lr], #4
 80129ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 80129f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80129f4:	f8be 3000 	ldrh.w	r3, [lr]
 80129f8:	fb09 330a 	mla	r3, r9, sl, r3
 80129fc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012a00:	4562      	cmp	r2, ip
 8012a02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012a06:	d8e5      	bhi.n	80129d4 <__multiply+0x10c>
 8012a08:	9f01      	ldr	r7, [sp, #4]
 8012a0a:	51eb      	str	r3, [r5, r7]
 8012a0c:	3504      	adds	r5, #4
 8012a0e:	e799      	b.n	8012944 <__multiply+0x7c>
 8012a10:	3e01      	subs	r6, #1
 8012a12:	e79b      	b.n	801294c <__multiply+0x84>
 8012a14:	08016e9b 	.word	0x08016e9b
 8012a18:	08016eac 	.word	0x08016eac

08012a1c <__pow5mult>:
 8012a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a20:	4615      	mov	r5, r2
 8012a22:	f012 0203 	ands.w	r2, r2, #3
 8012a26:	4607      	mov	r7, r0
 8012a28:	460e      	mov	r6, r1
 8012a2a:	d007      	beq.n	8012a3c <__pow5mult+0x20>
 8012a2c:	4c25      	ldr	r4, [pc, #148]	@ (8012ac4 <__pow5mult+0xa8>)
 8012a2e:	3a01      	subs	r2, #1
 8012a30:	2300      	movs	r3, #0
 8012a32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012a36:	f7ff fe55 	bl	80126e4 <__multadd>
 8012a3a:	4606      	mov	r6, r0
 8012a3c:	10ad      	asrs	r5, r5, #2
 8012a3e:	d03d      	beq.n	8012abc <__pow5mult+0xa0>
 8012a40:	69fc      	ldr	r4, [r7, #28]
 8012a42:	b97c      	cbnz	r4, 8012a64 <__pow5mult+0x48>
 8012a44:	2010      	movs	r0, #16
 8012a46:	f7ff fd35 	bl	80124b4 <malloc>
 8012a4a:	4602      	mov	r2, r0
 8012a4c:	61f8      	str	r0, [r7, #28]
 8012a4e:	b928      	cbnz	r0, 8012a5c <__pow5mult+0x40>
 8012a50:	4b1d      	ldr	r3, [pc, #116]	@ (8012ac8 <__pow5mult+0xac>)
 8012a52:	481e      	ldr	r0, [pc, #120]	@ (8012acc <__pow5mult+0xb0>)
 8012a54:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012a58:	f001 fede 	bl	8014818 <__assert_func>
 8012a5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012a60:	6004      	str	r4, [r0, #0]
 8012a62:	60c4      	str	r4, [r0, #12]
 8012a64:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012a68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012a6c:	b94c      	cbnz	r4, 8012a82 <__pow5mult+0x66>
 8012a6e:	f240 2171 	movw	r1, #625	@ 0x271
 8012a72:	4638      	mov	r0, r7
 8012a74:	f7ff ff12 	bl	801289c <__i2b>
 8012a78:	2300      	movs	r3, #0
 8012a7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8012a7e:	4604      	mov	r4, r0
 8012a80:	6003      	str	r3, [r0, #0]
 8012a82:	f04f 0900 	mov.w	r9, #0
 8012a86:	07eb      	lsls	r3, r5, #31
 8012a88:	d50a      	bpl.n	8012aa0 <__pow5mult+0x84>
 8012a8a:	4631      	mov	r1, r6
 8012a8c:	4622      	mov	r2, r4
 8012a8e:	4638      	mov	r0, r7
 8012a90:	f7ff ff1a 	bl	80128c8 <__multiply>
 8012a94:	4631      	mov	r1, r6
 8012a96:	4680      	mov	r8, r0
 8012a98:	4638      	mov	r0, r7
 8012a9a:	f7ff fe01 	bl	80126a0 <_Bfree>
 8012a9e:	4646      	mov	r6, r8
 8012aa0:	106d      	asrs	r5, r5, #1
 8012aa2:	d00b      	beq.n	8012abc <__pow5mult+0xa0>
 8012aa4:	6820      	ldr	r0, [r4, #0]
 8012aa6:	b938      	cbnz	r0, 8012ab8 <__pow5mult+0x9c>
 8012aa8:	4622      	mov	r2, r4
 8012aaa:	4621      	mov	r1, r4
 8012aac:	4638      	mov	r0, r7
 8012aae:	f7ff ff0b 	bl	80128c8 <__multiply>
 8012ab2:	6020      	str	r0, [r4, #0]
 8012ab4:	f8c0 9000 	str.w	r9, [r0]
 8012ab8:	4604      	mov	r4, r0
 8012aba:	e7e4      	b.n	8012a86 <__pow5mult+0x6a>
 8012abc:	4630      	mov	r0, r6
 8012abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ac2:	bf00      	nop
 8012ac4:	08016f08 	.word	0x08016f08
 8012ac8:	08016e2c 	.word	0x08016e2c
 8012acc:	08016eac 	.word	0x08016eac

08012ad0 <__lshift>:
 8012ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ad4:	460c      	mov	r4, r1
 8012ad6:	6849      	ldr	r1, [r1, #4]
 8012ad8:	6923      	ldr	r3, [r4, #16]
 8012ada:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012ade:	68a3      	ldr	r3, [r4, #8]
 8012ae0:	4607      	mov	r7, r0
 8012ae2:	4691      	mov	r9, r2
 8012ae4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012ae8:	f108 0601 	add.w	r6, r8, #1
 8012aec:	42b3      	cmp	r3, r6
 8012aee:	db0b      	blt.n	8012b08 <__lshift+0x38>
 8012af0:	4638      	mov	r0, r7
 8012af2:	f7ff fd95 	bl	8012620 <_Balloc>
 8012af6:	4605      	mov	r5, r0
 8012af8:	b948      	cbnz	r0, 8012b0e <__lshift+0x3e>
 8012afa:	4602      	mov	r2, r0
 8012afc:	4b28      	ldr	r3, [pc, #160]	@ (8012ba0 <__lshift+0xd0>)
 8012afe:	4829      	ldr	r0, [pc, #164]	@ (8012ba4 <__lshift+0xd4>)
 8012b00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012b04:	f001 fe88 	bl	8014818 <__assert_func>
 8012b08:	3101      	adds	r1, #1
 8012b0a:	005b      	lsls	r3, r3, #1
 8012b0c:	e7ee      	b.n	8012aec <__lshift+0x1c>
 8012b0e:	2300      	movs	r3, #0
 8012b10:	f100 0114 	add.w	r1, r0, #20
 8012b14:	f100 0210 	add.w	r2, r0, #16
 8012b18:	4618      	mov	r0, r3
 8012b1a:	4553      	cmp	r3, sl
 8012b1c:	db33      	blt.n	8012b86 <__lshift+0xb6>
 8012b1e:	6920      	ldr	r0, [r4, #16]
 8012b20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012b24:	f104 0314 	add.w	r3, r4, #20
 8012b28:	f019 091f 	ands.w	r9, r9, #31
 8012b2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012b30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012b34:	d02b      	beq.n	8012b8e <__lshift+0xbe>
 8012b36:	f1c9 0e20 	rsb	lr, r9, #32
 8012b3a:	468a      	mov	sl, r1
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	6818      	ldr	r0, [r3, #0]
 8012b40:	fa00 f009 	lsl.w	r0, r0, r9
 8012b44:	4310      	orrs	r0, r2
 8012b46:	f84a 0b04 	str.w	r0, [sl], #4
 8012b4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b4e:	459c      	cmp	ip, r3
 8012b50:	fa22 f20e 	lsr.w	r2, r2, lr
 8012b54:	d8f3      	bhi.n	8012b3e <__lshift+0x6e>
 8012b56:	ebac 0304 	sub.w	r3, ip, r4
 8012b5a:	3b15      	subs	r3, #21
 8012b5c:	f023 0303 	bic.w	r3, r3, #3
 8012b60:	3304      	adds	r3, #4
 8012b62:	f104 0015 	add.w	r0, r4, #21
 8012b66:	4584      	cmp	ip, r0
 8012b68:	bf38      	it	cc
 8012b6a:	2304      	movcc	r3, #4
 8012b6c:	50ca      	str	r2, [r1, r3]
 8012b6e:	b10a      	cbz	r2, 8012b74 <__lshift+0xa4>
 8012b70:	f108 0602 	add.w	r6, r8, #2
 8012b74:	3e01      	subs	r6, #1
 8012b76:	4638      	mov	r0, r7
 8012b78:	612e      	str	r6, [r5, #16]
 8012b7a:	4621      	mov	r1, r4
 8012b7c:	f7ff fd90 	bl	80126a0 <_Bfree>
 8012b80:	4628      	mov	r0, r5
 8012b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b86:	f842 0f04 	str.w	r0, [r2, #4]!
 8012b8a:	3301      	adds	r3, #1
 8012b8c:	e7c5      	b.n	8012b1a <__lshift+0x4a>
 8012b8e:	3904      	subs	r1, #4
 8012b90:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b94:	f841 2f04 	str.w	r2, [r1, #4]!
 8012b98:	459c      	cmp	ip, r3
 8012b9a:	d8f9      	bhi.n	8012b90 <__lshift+0xc0>
 8012b9c:	e7ea      	b.n	8012b74 <__lshift+0xa4>
 8012b9e:	bf00      	nop
 8012ba0:	08016e9b 	.word	0x08016e9b
 8012ba4:	08016eac 	.word	0x08016eac

08012ba8 <__mcmp>:
 8012ba8:	690a      	ldr	r2, [r1, #16]
 8012baa:	4603      	mov	r3, r0
 8012bac:	6900      	ldr	r0, [r0, #16]
 8012bae:	1a80      	subs	r0, r0, r2
 8012bb0:	b530      	push	{r4, r5, lr}
 8012bb2:	d10e      	bne.n	8012bd2 <__mcmp+0x2a>
 8012bb4:	3314      	adds	r3, #20
 8012bb6:	3114      	adds	r1, #20
 8012bb8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012bbc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012bc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012bc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012bc8:	4295      	cmp	r5, r2
 8012bca:	d003      	beq.n	8012bd4 <__mcmp+0x2c>
 8012bcc:	d205      	bcs.n	8012bda <__mcmp+0x32>
 8012bce:	f04f 30ff 	mov.w	r0, #4294967295
 8012bd2:	bd30      	pop	{r4, r5, pc}
 8012bd4:	42a3      	cmp	r3, r4
 8012bd6:	d3f3      	bcc.n	8012bc0 <__mcmp+0x18>
 8012bd8:	e7fb      	b.n	8012bd2 <__mcmp+0x2a>
 8012bda:	2001      	movs	r0, #1
 8012bdc:	e7f9      	b.n	8012bd2 <__mcmp+0x2a>
	...

08012be0 <__mdiff>:
 8012be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012be4:	4689      	mov	r9, r1
 8012be6:	4606      	mov	r6, r0
 8012be8:	4611      	mov	r1, r2
 8012bea:	4648      	mov	r0, r9
 8012bec:	4614      	mov	r4, r2
 8012bee:	f7ff ffdb 	bl	8012ba8 <__mcmp>
 8012bf2:	1e05      	subs	r5, r0, #0
 8012bf4:	d112      	bne.n	8012c1c <__mdiff+0x3c>
 8012bf6:	4629      	mov	r1, r5
 8012bf8:	4630      	mov	r0, r6
 8012bfa:	f7ff fd11 	bl	8012620 <_Balloc>
 8012bfe:	4602      	mov	r2, r0
 8012c00:	b928      	cbnz	r0, 8012c0e <__mdiff+0x2e>
 8012c02:	4b3f      	ldr	r3, [pc, #252]	@ (8012d00 <__mdiff+0x120>)
 8012c04:	f240 2137 	movw	r1, #567	@ 0x237
 8012c08:	483e      	ldr	r0, [pc, #248]	@ (8012d04 <__mdiff+0x124>)
 8012c0a:	f001 fe05 	bl	8014818 <__assert_func>
 8012c0e:	2301      	movs	r3, #1
 8012c10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012c14:	4610      	mov	r0, r2
 8012c16:	b003      	add	sp, #12
 8012c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c1c:	bfbc      	itt	lt
 8012c1e:	464b      	movlt	r3, r9
 8012c20:	46a1      	movlt	r9, r4
 8012c22:	4630      	mov	r0, r6
 8012c24:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012c28:	bfba      	itte	lt
 8012c2a:	461c      	movlt	r4, r3
 8012c2c:	2501      	movlt	r5, #1
 8012c2e:	2500      	movge	r5, #0
 8012c30:	f7ff fcf6 	bl	8012620 <_Balloc>
 8012c34:	4602      	mov	r2, r0
 8012c36:	b918      	cbnz	r0, 8012c40 <__mdiff+0x60>
 8012c38:	4b31      	ldr	r3, [pc, #196]	@ (8012d00 <__mdiff+0x120>)
 8012c3a:	f240 2145 	movw	r1, #581	@ 0x245
 8012c3e:	e7e3      	b.n	8012c08 <__mdiff+0x28>
 8012c40:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012c44:	6926      	ldr	r6, [r4, #16]
 8012c46:	60c5      	str	r5, [r0, #12]
 8012c48:	f109 0310 	add.w	r3, r9, #16
 8012c4c:	f109 0514 	add.w	r5, r9, #20
 8012c50:	f104 0e14 	add.w	lr, r4, #20
 8012c54:	f100 0b14 	add.w	fp, r0, #20
 8012c58:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012c5c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012c60:	9301      	str	r3, [sp, #4]
 8012c62:	46d9      	mov	r9, fp
 8012c64:	f04f 0c00 	mov.w	ip, #0
 8012c68:	9b01      	ldr	r3, [sp, #4]
 8012c6a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012c6e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012c72:	9301      	str	r3, [sp, #4]
 8012c74:	fa1f f38a 	uxth.w	r3, sl
 8012c78:	4619      	mov	r1, r3
 8012c7a:	b283      	uxth	r3, r0
 8012c7c:	1acb      	subs	r3, r1, r3
 8012c7e:	0c00      	lsrs	r0, r0, #16
 8012c80:	4463      	add	r3, ip
 8012c82:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012c86:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012c8a:	b29b      	uxth	r3, r3
 8012c8c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012c90:	4576      	cmp	r6, lr
 8012c92:	f849 3b04 	str.w	r3, [r9], #4
 8012c96:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012c9a:	d8e5      	bhi.n	8012c68 <__mdiff+0x88>
 8012c9c:	1b33      	subs	r3, r6, r4
 8012c9e:	3b15      	subs	r3, #21
 8012ca0:	f023 0303 	bic.w	r3, r3, #3
 8012ca4:	3415      	adds	r4, #21
 8012ca6:	3304      	adds	r3, #4
 8012ca8:	42a6      	cmp	r6, r4
 8012caa:	bf38      	it	cc
 8012cac:	2304      	movcc	r3, #4
 8012cae:	441d      	add	r5, r3
 8012cb0:	445b      	add	r3, fp
 8012cb2:	461e      	mov	r6, r3
 8012cb4:	462c      	mov	r4, r5
 8012cb6:	4544      	cmp	r4, r8
 8012cb8:	d30e      	bcc.n	8012cd8 <__mdiff+0xf8>
 8012cba:	f108 0103 	add.w	r1, r8, #3
 8012cbe:	1b49      	subs	r1, r1, r5
 8012cc0:	f021 0103 	bic.w	r1, r1, #3
 8012cc4:	3d03      	subs	r5, #3
 8012cc6:	45a8      	cmp	r8, r5
 8012cc8:	bf38      	it	cc
 8012cca:	2100      	movcc	r1, #0
 8012ccc:	440b      	add	r3, r1
 8012cce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012cd2:	b191      	cbz	r1, 8012cfa <__mdiff+0x11a>
 8012cd4:	6117      	str	r7, [r2, #16]
 8012cd6:	e79d      	b.n	8012c14 <__mdiff+0x34>
 8012cd8:	f854 1b04 	ldr.w	r1, [r4], #4
 8012cdc:	46e6      	mov	lr, ip
 8012cde:	0c08      	lsrs	r0, r1, #16
 8012ce0:	fa1c fc81 	uxtah	ip, ip, r1
 8012ce4:	4471      	add	r1, lr
 8012ce6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012cea:	b289      	uxth	r1, r1
 8012cec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012cf0:	f846 1b04 	str.w	r1, [r6], #4
 8012cf4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012cf8:	e7dd      	b.n	8012cb6 <__mdiff+0xd6>
 8012cfa:	3f01      	subs	r7, #1
 8012cfc:	e7e7      	b.n	8012cce <__mdiff+0xee>
 8012cfe:	bf00      	nop
 8012d00:	08016e9b 	.word	0x08016e9b
 8012d04:	08016eac 	.word	0x08016eac

08012d08 <__ulp>:
 8012d08:	b082      	sub	sp, #8
 8012d0a:	ed8d 0b00 	vstr	d0, [sp]
 8012d0e:	9a01      	ldr	r2, [sp, #4]
 8012d10:	4b0f      	ldr	r3, [pc, #60]	@ (8012d50 <__ulp+0x48>)
 8012d12:	4013      	ands	r3, r2
 8012d14:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	dc08      	bgt.n	8012d2e <__ulp+0x26>
 8012d1c:	425b      	negs	r3, r3
 8012d1e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012d22:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012d26:	da04      	bge.n	8012d32 <__ulp+0x2a>
 8012d28:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012d2c:	4113      	asrs	r3, r2
 8012d2e:	2200      	movs	r2, #0
 8012d30:	e008      	b.n	8012d44 <__ulp+0x3c>
 8012d32:	f1a2 0314 	sub.w	r3, r2, #20
 8012d36:	2b1e      	cmp	r3, #30
 8012d38:	bfda      	itte	le
 8012d3a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012d3e:	40da      	lsrle	r2, r3
 8012d40:	2201      	movgt	r2, #1
 8012d42:	2300      	movs	r3, #0
 8012d44:	4619      	mov	r1, r3
 8012d46:	4610      	mov	r0, r2
 8012d48:	ec41 0b10 	vmov	d0, r0, r1
 8012d4c:	b002      	add	sp, #8
 8012d4e:	4770      	bx	lr
 8012d50:	7ff00000 	.word	0x7ff00000

08012d54 <__b2d>:
 8012d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d58:	6906      	ldr	r6, [r0, #16]
 8012d5a:	f100 0814 	add.w	r8, r0, #20
 8012d5e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012d62:	1f37      	subs	r7, r6, #4
 8012d64:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012d68:	4610      	mov	r0, r2
 8012d6a:	f7ff fd4b 	bl	8012804 <__hi0bits>
 8012d6e:	f1c0 0320 	rsb	r3, r0, #32
 8012d72:	280a      	cmp	r0, #10
 8012d74:	600b      	str	r3, [r1, #0]
 8012d76:	491b      	ldr	r1, [pc, #108]	@ (8012de4 <__b2d+0x90>)
 8012d78:	dc15      	bgt.n	8012da6 <__b2d+0x52>
 8012d7a:	f1c0 0c0b 	rsb	ip, r0, #11
 8012d7e:	fa22 f30c 	lsr.w	r3, r2, ip
 8012d82:	45b8      	cmp	r8, r7
 8012d84:	ea43 0501 	orr.w	r5, r3, r1
 8012d88:	bf34      	ite	cc
 8012d8a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012d8e:	2300      	movcs	r3, #0
 8012d90:	3015      	adds	r0, #21
 8012d92:	fa02 f000 	lsl.w	r0, r2, r0
 8012d96:	fa23 f30c 	lsr.w	r3, r3, ip
 8012d9a:	4303      	orrs	r3, r0
 8012d9c:	461c      	mov	r4, r3
 8012d9e:	ec45 4b10 	vmov	d0, r4, r5
 8012da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012da6:	45b8      	cmp	r8, r7
 8012da8:	bf3a      	itte	cc
 8012daa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012dae:	f1a6 0708 	subcc.w	r7, r6, #8
 8012db2:	2300      	movcs	r3, #0
 8012db4:	380b      	subs	r0, #11
 8012db6:	d012      	beq.n	8012dde <__b2d+0x8a>
 8012db8:	f1c0 0120 	rsb	r1, r0, #32
 8012dbc:	fa23 f401 	lsr.w	r4, r3, r1
 8012dc0:	4082      	lsls	r2, r0
 8012dc2:	4322      	orrs	r2, r4
 8012dc4:	4547      	cmp	r7, r8
 8012dc6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012dca:	bf8c      	ite	hi
 8012dcc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012dd0:	2200      	movls	r2, #0
 8012dd2:	4083      	lsls	r3, r0
 8012dd4:	40ca      	lsrs	r2, r1
 8012dd6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012dda:	4313      	orrs	r3, r2
 8012ddc:	e7de      	b.n	8012d9c <__b2d+0x48>
 8012dde:	ea42 0501 	orr.w	r5, r2, r1
 8012de2:	e7db      	b.n	8012d9c <__b2d+0x48>
 8012de4:	3ff00000 	.word	0x3ff00000

08012de8 <__d2b>:
 8012de8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012dec:	460f      	mov	r7, r1
 8012dee:	2101      	movs	r1, #1
 8012df0:	ec59 8b10 	vmov	r8, r9, d0
 8012df4:	4616      	mov	r6, r2
 8012df6:	f7ff fc13 	bl	8012620 <_Balloc>
 8012dfa:	4604      	mov	r4, r0
 8012dfc:	b930      	cbnz	r0, 8012e0c <__d2b+0x24>
 8012dfe:	4602      	mov	r2, r0
 8012e00:	4b23      	ldr	r3, [pc, #140]	@ (8012e90 <__d2b+0xa8>)
 8012e02:	4824      	ldr	r0, [pc, #144]	@ (8012e94 <__d2b+0xac>)
 8012e04:	f240 310f 	movw	r1, #783	@ 0x30f
 8012e08:	f001 fd06 	bl	8014818 <__assert_func>
 8012e0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012e10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012e14:	b10d      	cbz	r5, 8012e1a <__d2b+0x32>
 8012e16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012e1a:	9301      	str	r3, [sp, #4]
 8012e1c:	f1b8 0300 	subs.w	r3, r8, #0
 8012e20:	d023      	beq.n	8012e6a <__d2b+0x82>
 8012e22:	4668      	mov	r0, sp
 8012e24:	9300      	str	r3, [sp, #0]
 8012e26:	f7ff fd0c 	bl	8012842 <__lo0bits>
 8012e2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012e2e:	b1d0      	cbz	r0, 8012e66 <__d2b+0x7e>
 8012e30:	f1c0 0320 	rsb	r3, r0, #32
 8012e34:	fa02 f303 	lsl.w	r3, r2, r3
 8012e38:	430b      	orrs	r3, r1
 8012e3a:	40c2      	lsrs	r2, r0
 8012e3c:	6163      	str	r3, [r4, #20]
 8012e3e:	9201      	str	r2, [sp, #4]
 8012e40:	9b01      	ldr	r3, [sp, #4]
 8012e42:	61a3      	str	r3, [r4, #24]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	bf0c      	ite	eq
 8012e48:	2201      	moveq	r2, #1
 8012e4a:	2202      	movne	r2, #2
 8012e4c:	6122      	str	r2, [r4, #16]
 8012e4e:	b1a5      	cbz	r5, 8012e7a <__d2b+0x92>
 8012e50:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012e54:	4405      	add	r5, r0
 8012e56:	603d      	str	r5, [r7, #0]
 8012e58:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012e5c:	6030      	str	r0, [r6, #0]
 8012e5e:	4620      	mov	r0, r4
 8012e60:	b003      	add	sp, #12
 8012e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e66:	6161      	str	r1, [r4, #20]
 8012e68:	e7ea      	b.n	8012e40 <__d2b+0x58>
 8012e6a:	a801      	add	r0, sp, #4
 8012e6c:	f7ff fce9 	bl	8012842 <__lo0bits>
 8012e70:	9b01      	ldr	r3, [sp, #4]
 8012e72:	6163      	str	r3, [r4, #20]
 8012e74:	3020      	adds	r0, #32
 8012e76:	2201      	movs	r2, #1
 8012e78:	e7e8      	b.n	8012e4c <__d2b+0x64>
 8012e7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012e7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012e82:	6038      	str	r0, [r7, #0]
 8012e84:	6918      	ldr	r0, [r3, #16]
 8012e86:	f7ff fcbd 	bl	8012804 <__hi0bits>
 8012e8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012e8e:	e7e5      	b.n	8012e5c <__d2b+0x74>
 8012e90:	08016e9b 	.word	0x08016e9b
 8012e94:	08016eac 	.word	0x08016eac

08012e98 <__ratio>:
 8012e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e9c:	b085      	sub	sp, #20
 8012e9e:	e9cd 1000 	strd	r1, r0, [sp]
 8012ea2:	a902      	add	r1, sp, #8
 8012ea4:	f7ff ff56 	bl	8012d54 <__b2d>
 8012ea8:	9800      	ldr	r0, [sp, #0]
 8012eaa:	a903      	add	r1, sp, #12
 8012eac:	ec55 4b10 	vmov	r4, r5, d0
 8012eb0:	f7ff ff50 	bl	8012d54 <__b2d>
 8012eb4:	9b01      	ldr	r3, [sp, #4]
 8012eb6:	6919      	ldr	r1, [r3, #16]
 8012eb8:	9b00      	ldr	r3, [sp, #0]
 8012eba:	691b      	ldr	r3, [r3, #16]
 8012ebc:	1ac9      	subs	r1, r1, r3
 8012ebe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012ec2:	1a9b      	subs	r3, r3, r2
 8012ec4:	ec5b ab10 	vmov	sl, fp, d0
 8012ec8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	bfce      	itee	gt
 8012ed0:	462a      	movgt	r2, r5
 8012ed2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012ed6:	465a      	movle	r2, fp
 8012ed8:	462f      	mov	r7, r5
 8012eda:	46d9      	mov	r9, fp
 8012edc:	bfcc      	ite	gt
 8012ede:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012ee2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012ee6:	464b      	mov	r3, r9
 8012ee8:	4652      	mov	r2, sl
 8012eea:	4620      	mov	r0, r4
 8012eec:	4639      	mov	r1, r7
 8012eee:	f7ed fcd5 	bl	800089c <__aeabi_ddiv>
 8012ef2:	ec41 0b10 	vmov	d0, r0, r1
 8012ef6:	b005      	add	sp, #20
 8012ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012efc <__copybits>:
 8012efc:	3901      	subs	r1, #1
 8012efe:	b570      	push	{r4, r5, r6, lr}
 8012f00:	1149      	asrs	r1, r1, #5
 8012f02:	6914      	ldr	r4, [r2, #16]
 8012f04:	3101      	adds	r1, #1
 8012f06:	f102 0314 	add.w	r3, r2, #20
 8012f0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012f0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012f12:	1f05      	subs	r5, r0, #4
 8012f14:	42a3      	cmp	r3, r4
 8012f16:	d30c      	bcc.n	8012f32 <__copybits+0x36>
 8012f18:	1aa3      	subs	r3, r4, r2
 8012f1a:	3b11      	subs	r3, #17
 8012f1c:	f023 0303 	bic.w	r3, r3, #3
 8012f20:	3211      	adds	r2, #17
 8012f22:	42a2      	cmp	r2, r4
 8012f24:	bf88      	it	hi
 8012f26:	2300      	movhi	r3, #0
 8012f28:	4418      	add	r0, r3
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	4288      	cmp	r0, r1
 8012f2e:	d305      	bcc.n	8012f3c <__copybits+0x40>
 8012f30:	bd70      	pop	{r4, r5, r6, pc}
 8012f32:	f853 6b04 	ldr.w	r6, [r3], #4
 8012f36:	f845 6f04 	str.w	r6, [r5, #4]!
 8012f3a:	e7eb      	b.n	8012f14 <__copybits+0x18>
 8012f3c:	f840 3b04 	str.w	r3, [r0], #4
 8012f40:	e7f4      	b.n	8012f2c <__copybits+0x30>

08012f42 <__any_on>:
 8012f42:	f100 0214 	add.w	r2, r0, #20
 8012f46:	6900      	ldr	r0, [r0, #16]
 8012f48:	114b      	asrs	r3, r1, #5
 8012f4a:	4298      	cmp	r0, r3
 8012f4c:	b510      	push	{r4, lr}
 8012f4e:	db11      	blt.n	8012f74 <__any_on+0x32>
 8012f50:	dd0a      	ble.n	8012f68 <__any_on+0x26>
 8012f52:	f011 011f 	ands.w	r1, r1, #31
 8012f56:	d007      	beq.n	8012f68 <__any_on+0x26>
 8012f58:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012f5c:	fa24 f001 	lsr.w	r0, r4, r1
 8012f60:	fa00 f101 	lsl.w	r1, r0, r1
 8012f64:	428c      	cmp	r4, r1
 8012f66:	d10b      	bne.n	8012f80 <__any_on+0x3e>
 8012f68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012f6c:	4293      	cmp	r3, r2
 8012f6e:	d803      	bhi.n	8012f78 <__any_on+0x36>
 8012f70:	2000      	movs	r0, #0
 8012f72:	bd10      	pop	{r4, pc}
 8012f74:	4603      	mov	r3, r0
 8012f76:	e7f7      	b.n	8012f68 <__any_on+0x26>
 8012f78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012f7c:	2900      	cmp	r1, #0
 8012f7e:	d0f5      	beq.n	8012f6c <__any_on+0x2a>
 8012f80:	2001      	movs	r0, #1
 8012f82:	e7f6      	b.n	8012f72 <__any_on+0x30>

08012f84 <sulp>:
 8012f84:	b570      	push	{r4, r5, r6, lr}
 8012f86:	4604      	mov	r4, r0
 8012f88:	460d      	mov	r5, r1
 8012f8a:	ec45 4b10 	vmov	d0, r4, r5
 8012f8e:	4616      	mov	r6, r2
 8012f90:	f7ff feba 	bl	8012d08 <__ulp>
 8012f94:	ec51 0b10 	vmov	r0, r1, d0
 8012f98:	b17e      	cbz	r6, 8012fba <sulp+0x36>
 8012f9a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012f9e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	dd09      	ble.n	8012fba <sulp+0x36>
 8012fa6:	051b      	lsls	r3, r3, #20
 8012fa8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8012fac:	2400      	movs	r4, #0
 8012fae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8012fb2:	4622      	mov	r2, r4
 8012fb4:	462b      	mov	r3, r5
 8012fb6:	f7ed fb47 	bl	8000648 <__aeabi_dmul>
 8012fba:	ec41 0b10 	vmov	d0, r0, r1
 8012fbe:	bd70      	pop	{r4, r5, r6, pc}

08012fc0 <_strtod_l>:
 8012fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fc4:	b09f      	sub	sp, #124	@ 0x7c
 8012fc6:	460c      	mov	r4, r1
 8012fc8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8012fca:	2200      	movs	r2, #0
 8012fcc:	921a      	str	r2, [sp, #104]	@ 0x68
 8012fce:	9005      	str	r0, [sp, #20]
 8012fd0:	f04f 0a00 	mov.w	sl, #0
 8012fd4:	f04f 0b00 	mov.w	fp, #0
 8012fd8:	460a      	mov	r2, r1
 8012fda:	9219      	str	r2, [sp, #100]	@ 0x64
 8012fdc:	7811      	ldrb	r1, [r2, #0]
 8012fde:	292b      	cmp	r1, #43	@ 0x2b
 8012fe0:	d04a      	beq.n	8013078 <_strtod_l+0xb8>
 8012fe2:	d838      	bhi.n	8013056 <_strtod_l+0x96>
 8012fe4:	290d      	cmp	r1, #13
 8012fe6:	d832      	bhi.n	801304e <_strtod_l+0x8e>
 8012fe8:	2908      	cmp	r1, #8
 8012fea:	d832      	bhi.n	8013052 <_strtod_l+0x92>
 8012fec:	2900      	cmp	r1, #0
 8012fee:	d03b      	beq.n	8013068 <_strtod_l+0xa8>
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012ff4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8012ff6:	782a      	ldrb	r2, [r5, #0]
 8012ff8:	2a30      	cmp	r2, #48	@ 0x30
 8012ffa:	f040 80b3 	bne.w	8013164 <_strtod_l+0x1a4>
 8012ffe:	786a      	ldrb	r2, [r5, #1]
 8013000:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013004:	2a58      	cmp	r2, #88	@ 0x58
 8013006:	d16e      	bne.n	80130e6 <_strtod_l+0x126>
 8013008:	9302      	str	r3, [sp, #8]
 801300a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801300c:	9301      	str	r3, [sp, #4]
 801300e:	ab1a      	add	r3, sp, #104	@ 0x68
 8013010:	9300      	str	r3, [sp, #0]
 8013012:	4a8e      	ldr	r2, [pc, #568]	@ (801324c <_strtod_l+0x28c>)
 8013014:	9805      	ldr	r0, [sp, #20]
 8013016:	ab1b      	add	r3, sp, #108	@ 0x6c
 8013018:	a919      	add	r1, sp, #100	@ 0x64
 801301a:	f001 fc97 	bl	801494c <__gethex>
 801301e:	f010 060f 	ands.w	r6, r0, #15
 8013022:	4604      	mov	r4, r0
 8013024:	d005      	beq.n	8013032 <_strtod_l+0x72>
 8013026:	2e06      	cmp	r6, #6
 8013028:	d128      	bne.n	801307c <_strtod_l+0xbc>
 801302a:	3501      	adds	r5, #1
 801302c:	2300      	movs	r3, #0
 801302e:	9519      	str	r5, [sp, #100]	@ 0x64
 8013030:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013032:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013034:	2b00      	cmp	r3, #0
 8013036:	f040 858e 	bne.w	8013b56 <_strtod_l+0xb96>
 801303a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801303c:	b1cb      	cbz	r3, 8013072 <_strtod_l+0xb2>
 801303e:	4652      	mov	r2, sl
 8013040:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8013044:	ec43 2b10 	vmov	d0, r2, r3
 8013048:	b01f      	add	sp, #124	@ 0x7c
 801304a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801304e:	2920      	cmp	r1, #32
 8013050:	d1ce      	bne.n	8012ff0 <_strtod_l+0x30>
 8013052:	3201      	adds	r2, #1
 8013054:	e7c1      	b.n	8012fda <_strtod_l+0x1a>
 8013056:	292d      	cmp	r1, #45	@ 0x2d
 8013058:	d1ca      	bne.n	8012ff0 <_strtod_l+0x30>
 801305a:	2101      	movs	r1, #1
 801305c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801305e:	1c51      	adds	r1, r2, #1
 8013060:	9119      	str	r1, [sp, #100]	@ 0x64
 8013062:	7852      	ldrb	r2, [r2, #1]
 8013064:	2a00      	cmp	r2, #0
 8013066:	d1c5      	bne.n	8012ff4 <_strtod_l+0x34>
 8013068:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801306a:	9419      	str	r4, [sp, #100]	@ 0x64
 801306c:	2b00      	cmp	r3, #0
 801306e:	f040 8570 	bne.w	8013b52 <_strtod_l+0xb92>
 8013072:	4652      	mov	r2, sl
 8013074:	465b      	mov	r3, fp
 8013076:	e7e5      	b.n	8013044 <_strtod_l+0x84>
 8013078:	2100      	movs	r1, #0
 801307a:	e7ef      	b.n	801305c <_strtod_l+0x9c>
 801307c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801307e:	b13a      	cbz	r2, 8013090 <_strtod_l+0xd0>
 8013080:	2135      	movs	r1, #53	@ 0x35
 8013082:	a81c      	add	r0, sp, #112	@ 0x70
 8013084:	f7ff ff3a 	bl	8012efc <__copybits>
 8013088:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801308a:	9805      	ldr	r0, [sp, #20]
 801308c:	f7ff fb08 	bl	80126a0 <_Bfree>
 8013090:	3e01      	subs	r6, #1
 8013092:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8013094:	2e04      	cmp	r6, #4
 8013096:	d806      	bhi.n	80130a6 <_strtod_l+0xe6>
 8013098:	e8df f006 	tbb	[pc, r6]
 801309c:	201d0314 	.word	0x201d0314
 80130a0:	14          	.byte	0x14
 80130a1:	00          	.byte	0x00
 80130a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80130a6:	05e1      	lsls	r1, r4, #23
 80130a8:	bf48      	it	mi
 80130aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80130ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80130b2:	0d1b      	lsrs	r3, r3, #20
 80130b4:	051b      	lsls	r3, r3, #20
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d1bb      	bne.n	8013032 <_strtod_l+0x72>
 80130ba:	f7fe fb21 	bl	8011700 <__errno>
 80130be:	2322      	movs	r3, #34	@ 0x22
 80130c0:	6003      	str	r3, [r0, #0]
 80130c2:	e7b6      	b.n	8013032 <_strtod_l+0x72>
 80130c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80130c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80130cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80130d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80130d4:	e7e7      	b.n	80130a6 <_strtod_l+0xe6>
 80130d6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8013254 <_strtod_l+0x294>
 80130da:	e7e4      	b.n	80130a6 <_strtod_l+0xe6>
 80130dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80130e0:	f04f 3aff 	mov.w	sl, #4294967295
 80130e4:	e7df      	b.n	80130a6 <_strtod_l+0xe6>
 80130e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80130e8:	1c5a      	adds	r2, r3, #1
 80130ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80130ec:	785b      	ldrb	r3, [r3, #1]
 80130ee:	2b30      	cmp	r3, #48	@ 0x30
 80130f0:	d0f9      	beq.n	80130e6 <_strtod_l+0x126>
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d09d      	beq.n	8013032 <_strtod_l+0x72>
 80130f6:	2301      	movs	r3, #1
 80130f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80130fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80130fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80130fe:	2300      	movs	r3, #0
 8013100:	9308      	str	r3, [sp, #32]
 8013102:	930a      	str	r3, [sp, #40]	@ 0x28
 8013104:	461f      	mov	r7, r3
 8013106:	220a      	movs	r2, #10
 8013108:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801310a:	7805      	ldrb	r5, [r0, #0]
 801310c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8013110:	b2d9      	uxtb	r1, r3
 8013112:	2909      	cmp	r1, #9
 8013114:	d928      	bls.n	8013168 <_strtod_l+0x1a8>
 8013116:	494e      	ldr	r1, [pc, #312]	@ (8013250 <_strtod_l+0x290>)
 8013118:	2201      	movs	r2, #1
 801311a:	f7fe fa94 	bl	8011646 <strncmp>
 801311e:	2800      	cmp	r0, #0
 8013120:	d032      	beq.n	8013188 <_strtod_l+0x1c8>
 8013122:	2000      	movs	r0, #0
 8013124:	462a      	mov	r2, r5
 8013126:	4681      	mov	r9, r0
 8013128:	463d      	mov	r5, r7
 801312a:	4603      	mov	r3, r0
 801312c:	2a65      	cmp	r2, #101	@ 0x65
 801312e:	d001      	beq.n	8013134 <_strtod_l+0x174>
 8013130:	2a45      	cmp	r2, #69	@ 0x45
 8013132:	d114      	bne.n	801315e <_strtod_l+0x19e>
 8013134:	b91d      	cbnz	r5, 801313e <_strtod_l+0x17e>
 8013136:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013138:	4302      	orrs	r2, r0
 801313a:	d095      	beq.n	8013068 <_strtod_l+0xa8>
 801313c:	2500      	movs	r5, #0
 801313e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8013140:	1c62      	adds	r2, r4, #1
 8013142:	9219      	str	r2, [sp, #100]	@ 0x64
 8013144:	7862      	ldrb	r2, [r4, #1]
 8013146:	2a2b      	cmp	r2, #43	@ 0x2b
 8013148:	d077      	beq.n	801323a <_strtod_l+0x27a>
 801314a:	2a2d      	cmp	r2, #45	@ 0x2d
 801314c:	d07b      	beq.n	8013246 <_strtod_l+0x286>
 801314e:	f04f 0c00 	mov.w	ip, #0
 8013152:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013156:	2909      	cmp	r1, #9
 8013158:	f240 8082 	bls.w	8013260 <_strtod_l+0x2a0>
 801315c:	9419      	str	r4, [sp, #100]	@ 0x64
 801315e:	f04f 0800 	mov.w	r8, #0
 8013162:	e0a2      	b.n	80132aa <_strtod_l+0x2ea>
 8013164:	2300      	movs	r3, #0
 8013166:	e7c7      	b.n	80130f8 <_strtod_l+0x138>
 8013168:	2f08      	cmp	r7, #8
 801316a:	bfd5      	itete	le
 801316c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801316e:	9908      	ldrgt	r1, [sp, #32]
 8013170:	fb02 3301 	mlale	r3, r2, r1, r3
 8013174:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013178:	f100 0001 	add.w	r0, r0, #1
 801317c:	bfd4      	ite	le
 801317e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8013180:	9308      	strgt	r3, [sp, #32]
 8013182:	3701      	adds	r7, #1
 8013184:	9019      	str	r0, [sp, #100]	@ 0x64
 8013186:	e7bf      	b.n	8013108 <_strtod_l+0x148>
 8013188:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801318a:	1c5a      	adds	r2, r3, #1
 801318c:	9219      	str	r2, [sp, #100]	@ 0x64
 801318e:	785a      	ldrb	r2, [r3, #1]
 8013190:	b37f      	cbz	r7, 80131f2 <_strtod_l+0x232>
 8013192:	4681      	mov	r9, r0
 8013194:	463d      	mov	r5, r7
 8013196:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801319a:	2b09      	cmp	r3, #9
 801319c:	d912      	bls.n	80131c4 <_strtod_l+0x204>
 801319e:	2301      	movs	r3, #1
 80131a0:	e7c4      	b.n	801312c <_strtod_l+0x16c>
 80131a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80131a4:	1c5a      	adds	r2, r3, #1
 80131a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80131a8:	785a      	ldrb	r2, [r3, #1]
 80131aa:	3001      	adds	r0, #1
 80131ac:	2a30      	cmp	r2, #48	@ 0x30
 80131ae:	d0f8      	beq.n	80131a2 <_strtod_l+0x1e2>
 80131b0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80131b4:	2b08      	cmp	r3, #8
 80131b6:	f200 84d3 	bhi.w	8013b60 <_strtod_l+0xba0>
 80131ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80131bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80131be:	4681      	mov	r9, r0
 80131c0:	2000      	movs	r0, #0
 80131c2:	4605      	mov	r5, r0
 80131c4:	3a30      	subs	r2, #48	@ 0x30
 80131c6:	f100 0301 	add.w	r3, r0, #1
 80131ca:	d02a      	beq.n	8013222 <_strtod_l+0x262>
 80131cc:	4499      	add	r9, r3
 80131ce:	eb00 0c05 	add.w	ip, r0, r5
 80131d2:	462b      	mov	r3, r5
 80131d4:	210a      	movs	r1, #10
 80131d6:	4563      	cmp	r3, ip
 80131d8:	d10d      	bne.n	80131f6 <_strtod_l+0x236>
 80131da:	1c69      	adds	r1, r5, #1
 80131dc:	4401      	add	r1, r0
 80131de:	4428      	add	r0, r5
 80131e0:	2808      	cmp	r0, #8
 80131e2:	dc16      	bgt.n	8013212 <_strtod_l+0x252>
 80131e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80131e6:	230a      	movs	r3, #10
 80131e8:	fb03 2300 	mla	r3, r3, r0, r2
 80131ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80131ee:	2300      	movs	r3, #0
 80131f0:	e018      	b.n	8013224 <_strtod_l+0x264>
 80131f2:	4638      	mov	r0, r7
 80131f4:	e7da      	b.n	80131ac <_strtod_l+0x1ec>
 80131f6:	2b08      	cmp	r3, #8
 80131f8:	f103 0301 	add.w	r3, r3, #1
 80131fc:	dc03      	bgt.n	8013206 <_strtod_l+0x246>
 80131fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013200:	434e      	muls	r6, r1
 8013202:	960a      	str	r6, [sp, #40]	@ 0x28
 8013204:	e7e7      	b.n	80131d6 <_strtod_l+0x216>
 8013206:	2b10      	cmp	r3, #16
 8013208:	bfde      	ittt	le
 801320a:	9e08      	ldrle	r6, [sp, #32]
 801320c:	434e      	mulle	r6, r1
 801320e:	9608      	strle	r6, [sp, #32]
 8013210:	e7e1      	b.n	80131d6 <_strtod_l+0x216>
 8013212:	280f      	cmp	r0, #15
 8013214:	dceb      	bgt.n	80131ee <_strtod_l+0x22e>
 8013216:	9808      	ldr	r0, [sp, #32]
 8013218:	230a      	movs	r3, #10
 801321a:	fb03 2300 	mla	r3, r3, r0, r2
 801321e:	9308      	str	r3, [sp, #32]
 8013220:	e7e5      	b.n	80131ee <_strtod_l+0x22e>
 8013222:	4629      	mov	r1, r5
 8013224:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013226:	1c50      	adds	r0, r2, #1
 8013228:	9019      	str	r0, [sp, #100]	@ 0x64
 801322a:	7852      	ldrb	r2, [r2, #1]
 801322c:	4618      	mov	r0, r3
 801322e:	460d      	mov	r5, r1
 8013230:	e7b1      	b.n	8013196 <_strtod_l+0x1d6>
 8013232:	f04f 0900 	mov.w	r9, #0
 8013236:	2301      	movs	r3, #1
 8013238:	e77d      	b.n	8013136 <_strtod_l+0x176>
 801323a:	f04f 0c00 	mov.w	ip, #0
 801323e:	1ca2      	adds	r2, r4, #2
 8013240:	9219      	str	r2, [sp, #100]	@ 0x64
 8013242:	78a2      	ldrb	r2, [r4, #2]
 8013244:	e785      	b.n	8013152 <_strtod_l+0x192>
 8013246:	f04f 0c01 	mov.w	ip, #1
 801324a:	e7f8      	b.n	801323e <_strtod_l+0x27e>
 801324c:	08017020 	.word	0x08017020
 8013250:	08017008 	.word	0x08017008
 8013254:	7ff00000 	.word	0x7ff00000
 8013258:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801325a:	1c51      	adds	r1, r2, #1
 801325c:	9119      	str	r1, [sp, #100]	@ 0x64
 801325e:	7852      	ldrb	r2, [r2, #1]
 8013260:	2a30      	cmp	r2, #48	@ 0x30
 8013262:	d0f9      	beq.n	8013258 <_strtod_l+0x298>
 8013264:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8013268:	2908      	cmp	r1, #8
 801326a:	f63f af78 	bhi.w	801315e <_strtod_l+0x19e>
 801326e:	3a30      	subs	r2, #48	@ 0x30
 8013270:	920e      	str	r2, [sp, #56]	@ 0x38
 8013272:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013274:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013276:	f04f 080a 	mov.w	r8, #10
 801327a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801327c:	1c56      	adds	r6, r2, #1
 801327e:	9619      	str	r6, [sp, #100]	@ 0x64
 8013280:	7852      	ldrb	r2, [r2, #1]
 8013282:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8013286:	f1be 0f09 	cmp.w	lr, #9
 801328a:	d939      	bls.n	8013300 <_strtod_l+0x340>
 801328c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801328e:	1a76      	subs	r6, r6, r1
 8013290:	2e08      	cmp	r6, #8
 8013292:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8013296:	dc03      	bgt.n	80132a0 <_strtod_l+0x2e0>
 8013298:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801329a:	4588      	cmp	r8, r1
 801329c:	bfa8      	it	ge
 801329e:	4688      	movge	r8, r1
 80132a0:	f1bc 0f00 	cmp.w	ip, #0
 80132a4:	d001      	beq.n	80132aa <_strtod_l+0x2ea>
 80132a6:	f1c8 0800 	rsb	r8, r8, #0
 80132aa:	2d00      	cmp	r5, #0
 80132ac:	d14e      	bne.n	801334c <_strtod_l+0x38c>
 80132ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80132b0:	4308      	orrs	r0, r1
 80132b2:	f47f aebe 	bne.w	8013032 <_strtod_l+0x72>
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	f47f aed6 	bne.w	8013068 <_strtod_l+0xa8>
 80132bc:	2a69      	cmp	r2, #105	@ 0x69
 80132be:	d028      	beq.n	8013312 <_strtod_l+0x352>
 80132c0:	dc25      	bgt.n	801330e <_strtod_l+0x34e>
 80132c2:	2a49      	cmp	r2, #73	@ 0x49
 80132c4:	d025      	beq.n	8013312 <_strtod_l+0x352>
 80132c6:	2a4e      	cmp	r2, #78	@ 0x4e
 80132c8:	f47f aece 	bne.w	8013068 <_strtod_l+0xa8>
 80132cc:	499b      	ldr	r1, [pc, #620]	@ (801353c <_strtod_l+0x57c>)
 80132ce:	a819      	add	r0, sp, #100	@ 0x64
 80132d0:	f001 fd5e 	bl	8014d90 <__match>
 80132d4:	2800      	cmp	r0, #0
 80132d6:	f43f aec7 	beq.w	8013068 <_strtod_l+0xa8>
 80132da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80132dc:	781b      	ldrb	r3, [r3, #0]
 80132de:	2b28      	cmp	r3, #40	@ 0x28
 80132e0:	d12e      	bne.n	8013340 <_strtod_l+0x380>
 80132e2:	4997      	ldr	r1, [pc, #604]	@ (8013540 <_strtod_l+0x580>)
 80132e4:	aa1c      	add	r2, sp, #112	@ 0x70
 80132e6:	a819      	add	r0, sp, #100	@ 0x64
 80132e8:	f001 fd66 	bl	8014db8 <__hexnan>
 80132ec:	2805      	cmp	r0, #5
 80132ee:	d127      	bne.n	8013340 <_strtod_l+0x380>
 80132f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80132f2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80132f6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80132fa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80132fe:	e698      	b.n	8013032 <_strtod_l+0x72>
 8013300:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013302:	fb08 2101 	mla	r1, r8, r1, r2
 8013306:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801330a:	920e      	str	r2, [sp, #56]	@ 0x38
 801330c:	e7b5      	b.n	801327a <_strtod_l+0x2ba>
 801330e:	2a6e      	cmp	r2, #110	@ 0x6e
 8013310:	e7da      	b.n	80132c8 <_strtod_l+0x308>
 8013312:	498c      	ldr	r1, [pc, #560]	@ (8013544 <_strtod_l+0x584>)
 8013314:	a819      	add	r0, sp, #100	@ 0x64
 8013316:	f001 fd3b 	bl	8014d90 <__match>
 801331a:	2800      	cmp	r0, #0
 801331c:	f43f aea4 	beq.w	8013068 <_strtod_l+0xa8>
 8013320:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013322:	4989      	ldr	r1, [pc, #548]	@ (8013548 <_strtod_l+0x588>)
 8013324:	3b01      	subs	r3, #1
 8013326:	a819      	add	r0, sp, #100	@ 0x64
 8013328:	9319      	str	r3, [sp, #100]	@ 0x64
 801332a:	f001 fd31 	bl	8014d90 <__match>
 801332e:	b910      	cbnz	r0, 8013336 <_strtod_l+0x376>
 8013330:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013332:	3301      	adds	r3, #1
 8013334:	9319      	str	r3, [sp, #100]	@ 0x64
 8013336:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8013558 <_strtod_l+0x598>
 801333a:	f04f 0a00 	mov.w	sl, #0
 801333e:	e678      	b.n	8013032 <_strtod_l+0x72>
 8013340:	4882      	ldr	r0, [pc, #520]	@ (801354c <_strtod_l+0x58c>)
 8013342:	f001 fa61 	bl	8014808 <nan>
 8013346:	ec5b ab10 	vmov	sl, fp, d0
 801334a:	e672      	b.n	8013032 <_strtod_l+0x72>
 801334c:	eba8 0309 	sub.w	r3, r8, r9
 8013350:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013352:	9309      	str	r3, [sp, #36]	@ 0x24
 8013354:	2f00      	cmp	r7, #0
 8013356:	bf08      	it	eq
 8013358:	462f      	moveq	r7, r5
 801335a:	2d10      	cmp	r5, #16
 801335c:	462c      	mov	r4, r5
 801335e:	bfa8      	it	ge
 8013360:	2410      	movge	r4, #16
 8013362:	f7ed f8f7 	bl	8000554 <__aeabi_ui2d>
 8013366:	2d09      	cmp	r5, #9
 8013368:	4682      	mov	sl, r0
 801336a:	468b      	mov	fp, r1
 801336c:	dc13      	bgt.n	8013396 <_strtod_l+0x3d6>
 801336e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013370:	2b00      	cmp	r3, #0
 8013372:	f43f ae5e 	beq.w	8013032 <_strtod_l+0x72>
 8013376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013378:	dd78      	ble.n	801346c <_strtod_l+0x4ac>
 801337a:	2b16      	cmp	r3, #22
 801337c:	dc5f      	bgt.n	801343e <_strtod_l+0x47e>
 801337e:	4974      	ldr	r1, [pc, #464]	@ (8013550 <_strtod_l+0x590>)
 8013380:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013384:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013388:	4652      	mov	r2, sl
 801338a:	465b      	mov	r3, fp
 801338c:	f7ed f95c 	bl	8000648 <__aeabi_dmul>
 8013390:	4682      	mov	sl, r0
 8013392:	468b      	mov	fp, r1
 8013394:	e64d      	b.n	8013032 <_strtod_l+0x72>
 8013396:	4b6e      	ldr	r3, [pc, #440]	@ (8013550 <_strtod_l+0x590>)
 8013398:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801339c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80133a0:	f7ed f952 	bl	8000648 <__aeabi_dmul>
 80133a4:	4682      	mov	sl, r0
 80133a6:	9808      	ldr	r0, [sp, #32]
 80133a8:	468b      	mov	fp, r1
 80133aa:	f7ed f8d3 	bl	8000554 <__aeabi_ui2d>
 80133ae:	4602      	mov	r2, r0
 80133b0:	460b      	mov	r3, r1
 80133b2:	4650      	mov	r0, sl
 80133b4:	4659      	mov	r1, fp
 80133b6:	f7ec ff91 	bl	80002dc <__adddf3>
 80133ba:	2d0f      	cmp	r5, #15
 80133bc:	4682      	mov	sl, r0
 80133be:	468b      	mov	fp, r1
 80133c0:	ddd5      	ble.n	801336e <_strtod_l+0x3ae>
 80133c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133c4:	1b2c      	subs	r4, r5, r4
 80133c6:	441c      	add	r4, r3
 80133c8:	2c00      	cmp	r4, #0
 80133ca:	f340 8096 	ble.w	80134fa <_strtod_l+0x53a>
 80133ce:	f014 030f 	ands.w	r3, r4, #15
 80133d2:	d00a      	beq.n	80133ea <_strtod_l+0x42a>
 80133d4:	495e      	ldr	r1, [pc, #376]	@ (8013550 <_strtod_l+0x590>)
 80133d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80133da:	4652      	mov	r2, sl
 80133dc:	465b      	mov	r3, fp
 80133de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133e2:	f7ed f931 	bl	8000648 <__aeabi_dmul>
 80133e6:	4682      	mov	sl, r0
 80133e8:	468b      	mov	fp, r1
 80133ea:	f034 040f 	bics.w	r4, r4, #15
 80133ee:	d073      	beq.n	80134d8 <_strtod_l+0x518>
 80133f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80133f4:	dd48      	ble.n	8013488 <_strtod_l+0x4c8>
 80133f6:	2400      	movs	r4, #0
 80133f8:	46a0      	mov	r8, r4
 80133fa:	940a      	str	r4, [sp, #40]	@ 0x28
 80133fc:	46a1      	mov	r9, r4
 80133fe:	9a05      	ldr	r2, [sp, #20]
 8013400:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013558 <_strtod_l+0x598>
 8013404:	2322      	movs	r3, #34	@ 0x22
 8013406:	6013      	str	r3, [r2, #0]
 8013408:	f04f 0a00 	mov.w	sl, #0
 801340c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801340e:	2b00      	cmp	r3, #0
 8013410:	f43f ae0f 	beq.w	8013032 <_strtod_l+0x72>
 8013414:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013416:	9805      	ldr	r0, [sp, #20]
 8013418:	f7ff f942 	bl	80126a0 <_Bfree>
 801341c:	9805      	ldr	r0, [sp, #20]
 801341e:	4649      	mov	r1, r9
 8013420:	f7ff f93e 	bl	80126a0 <_Bfree>
 8013424:	9805      	ldr	r0, [sp, #20]
 8013426:	4641      	mov	r1, r8
 8013428:	f7ff f93a 	bl	80126a0 <_Bfree>
 801342c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801342e:	9805      	ldr	r0, [sp, #20]
 8013430:	f7ff f936 	bl	80126a0 <_Bfree>
 8013434:	9805      	ldr	r0, [sp, #20]
 8013436:	4621      	mov	r1, r4
 8013438:	f7ff f932 	bl	80126a0 <_Bfree>
 801343c:	e5f9      	b.n	8013032 <_strtod_l+0x72>
 801343e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013440:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8013444:	4293      	cmp	r3, r2
 8013446:	dbbc      	blt.n	80133c2 <_strtod_l+0x402>
 8013448:	4c41      	ldr	r4, [pc, #260]	@ (8013550 <_strtod_l+0x590>)
 801344a:	f1c5 050f 	rsb	r5, r5, #15
 801344e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013452:	4652      	mov	r2, sl
 8013454:	465b      	mov	r3, fp
 8013456:	e9d1 0100 	ldrd	r0, r1, [r1]
 801345a:	f7ed f8f5 	bl	8000648 <__aeabi_dmul>
 801345e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013460:	1b5d      	subs	r5, r3, r5
 8013462:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013466:	e9d4 2300 	ldrd	r2, r3, [r4]
 801346a:	e78f      	b.n	801338c <_strtod_l+0x3cc>
 801346c:	3316      	adds	r3, #22
 801346e:	dba8      	blt.n	80133c2 <_strtod_l+0x402>
 8013470:	4b37      	ldr	r3, [pc, #220]	@ (8013550 <_strtod_l+0x590>)
 8013472:	eba9 0808 	sub.w	r8, r9, r8
 8013476:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801347a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801347e:	4650      	mov	r0, sl
 8013480:	4659      	mov	r1, fp
 8013482:	f7ed fa0b 	bl	800089c <__aeabi_ddiv>
 8013486:	e783      	b.n	8013390 <_strtod_l+0x3d0>
 8013488:	4b32      	ldr	r3, [pc, #200]	@ (8013554 <_strtod_l+0x594>)
 801348a:	9308      	str	r3, [sp, #32]
 801348c:	2300      	movs	r3, #0
 801348e:	1124      	asrs	r4, r4, #4
 8013490:	4650      	mov	r0, sl
 8013492:	4659      	mov	r1, fp
 8013494:	461e      	mov	r6, r3
 8013496:	2c01      	cmp	r4, #1
 8013498:	dc21      	bgt.n	80134de <_strtod_l+0x51e>
 801349a:	b10b      	cbz	r3, 80134a0 <_strtod_l+0x4e0>
 801349c:	4682      	mov	sl, r0
 801349e:	468b      	mov	fp, r1
 80134a0:	492c      	ldr	r1, [pc, #176]	@ (8013554 <_strtod_l+0x594>)
 80134a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80134a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80134aa:	4652      	mov	r2, sl
 80134ac:	465b      	mov	r3, fp
 80134ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80134b2:	f7ed f8c9 	bl	8000648 <__aeabi_dmul>
 80134b6:	4b28      	ldr	r3, [pc, #160]	@ (8013558 <_strtod_l+0x598>)
 80134b8:	460a      	mov	r2, r1
 80134ba:	400b      	ands	r3, r1
 80134bc:	4927      	ldr	r1, [pc, #156]	@ (801355c <_strtod_l+0x59c>)
 80134be:	428b      	cmp	r3, r1
 80134c0:	4682      	mov	sl, r0
 80134c2:	d898      	bhi.n	80133f6 <_strtod_l+0x436>
 80134c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80134c8:	428b      	cmp	r3, r1
 80134ca:	bf86      	itte	hi
 80134cc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8013560 <_strtod_l+0x5a0>
 80134d0:	f04f 3aff 	movhi.w	sl, #4294967295
 80134d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80134d8:	2300      	movs	r3, #0
 80134da:	9308      	str	r3, [sp, #32]
 80134dc:	e07a      	b.n	80135d4 <_strtod_l+0x614>
 80134de:	07e2      	lsls	r2, r4, #31
 80134e0:	d505      	bpl.n	80134ee <_strtod_l+0x52e>
 80134e2:	9b08      	ldr	r3, [sp, #32]
 80134e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134e8:	f7ed f8ae 	bl	8000648 <__aeabi_dmul>
 80134ec:	2301      	movs	r3, #1
 80134ee:	9a08      	ldr	r2, [sp, #32]
 80134f0:	3208      	adds	r2, #8
 80134f2:	3601      	adds	r6, #1
 80134f4:	1064      	asrs	r4, r4, #1
 80134f6:	9208      	str	r2, [sp, #32]
 80134f8:	e7cd      	b.n	8013496 <_strtod_l+0x4d6>
 80134fa:	d0ed      	beq.n	80134d8 <_strtod_l+0x518>
 80134fc:	4264      	negs	r4, r4
 80134fe:	f014 020f 	ands.w	r2, r4, #15
 8013502:	d00a      	beq.n	801351a <_strtod_l+0x55a>
 8013504:	4b12      	ldr	r3, [pc, #72]	@ (8013550 <_strtod_l+0x590>)
 8013506:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801350a:	4650      	mov	r0, sl
 801350c:	4659      	mov	r1, fp
 801350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013512:	f7ed f9c3 	bl	800089c <__aeabi_ddiv>
 8013516:	4682      	mov	sl, r0
 8013518:	468b      	mov	fp, r1
 801351a:	1124      	asrs	r4, r4, #4
 801351c:	d0dc      	beq.n	80134d8 <_strtod_l+0x518>
 801351e:	2c1f      	cmp	r4, #31
 8013520:	dd20      	ble.n	8013564 <_strtod_l+0x5a4>
 8013522:	2400      	movs	r4, #0
 8013524:	46a0      	mov	r8, r4
 8013526:	940a      	str	r4, [sp, #40]	@ 0x28
 8013528:	46a1      	mov	r9, r4
 801352a:	9a05      	ldr	r2, [sp, #20]
 801352c:	2322      	movs	r3, #34	@ 0x22
 801352e:	f04f 0a00 	mov.w	sl, #0
 8013532:	f04f 0b00 	mov.w	fp, #0
 8013536:	6013      	str	r3, [r2, #0]
 8013538:	e768      	b.n	801340c <_strtod_l+0x44c>
 801353a:	bf00      	nop
 801353c:	08016df5 	.word	0x08016df5
 8013540:	0801700c 	.word	0x0801700c
 8013544:	08016ded 	.word	0x08016ded
 8013548:	08016e22 	.word	0x08016e22
 801354c:	080171d0 	.word	0x080171d0
 8013550:	08016f40 	.word	0x08016f40
 8013554:	08016f18 	.word	0x08016f18
 8013558:	7ff00000 	.word	0x7ff00000
 801355c:	7ca00000 	.word	0x7ca00000
 8013560:	7fefffff 	.word	0x7fefffff
 8013564:	f014 0310 	ands.w	r3, r4, #16
 8013568:	bf18      	it	ne
 801356a:	236a      	movne	r3, #106	@ 0x6a
 801356c:	4ea9      	ldr	r6, [pc, #676]	@ (8013814 <_strtod_l+0x854>)
 801356e:	9308      	str	r3, [sp, #32]
 8013570:	4650      	mov	r0, sl
 8013572:	4659      	mov	r1, fp
 8013574:	2300      	movs	r3, #0
 8013576:	07e2      	lsls	r2, r4, #31
 8013578:	d504      	bpl.n	8013584 <_strtod_l+0x5c4>
 801357a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801357e:	f7ed f863 	bl	8000648 <__aeabi_dmul>
 8013582:	2301      	movs	r3, #1
 8013584:	1064      	asrs	r4, r4, #1
 8013586:	f106 0608 	add.w	r6, r6, #8
 801358a:	d1f4      	bne.n	8013576 <_strtod_l+0x5b6>
 801358c:	b10b      	cbz	r3, 8013592 <_strtod_l+0x5d2>
 801358e:	4682      	mov	sl, r0
 8013590:	468b      	mov	fp, r1
 8013592:	9b08      	ldr	r3, [sp, #32]
 8013594:	b1b3      	cbz	r3, 80135c4 <_strtod_l+0x604>
 8013596:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801359a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801359e:	2b00      	cmp	r3, #0
 80135a0:	4659      	mov	r1, fp
 80135a2:	dd0f      	ble.n	80135c4 <_strtod_l+0x604>
 80135a4:	2b1f      	cmp	r3, #31
 80135a6:	dd55      	ble.n	8013654 <_strtod_l+0x694>
 80135a8:	2b34      	cmp	r3, #52	@ 0x34
 80135aa:	bfde      	ittt	le
 80135ac:	f04f 33ff 	movle.w	r3, #4294967295
 80135b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80135b4:	4093      	lslle	r3, r2
 80135b6:	f04f 0a00 	mov.w	sl, #0
 80135ba:	bfcc      	ite	gt
 80135bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80135c0:	ea03 0b01 	andle.w	fp, r3, r1
 80135c4:	2200      	movs	r2, #0
 80135c6:	2300      	movs	r3, #0
 80135c8:	4650      	mov	r0, sl
 80135ca:	4659      	mov	r1, fp
 80135cc:	f7ed faa4 	bl	8000b18 <__aeabi_dcmpeq>
 80135d0:	2800      	cmp	r0, #0
 80135d2:	d1a6      	bne.n	8013522 <_strtod_l+0x562>
 80135d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80135d6:	9300      	str	r3, [sp, #0]
 80135d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80135da:	9805      	ldr	r0, [sp, #20]
 80135dc:	462b      	mov	r3, r5
 80135de:	463a      	mov	r2, r7
 80135e0:	f7ff f8c6 	bl	8012770 <__s2b>
 80135e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80135e6:	2800      	cmp	r0, #0
 80135e8:	f43f af05 	beq.w	80133f6 <_strtod_l+0x436>
 80135ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80135ee:	2a00      	cmp	r2, #0
 80135f0:	eba9 0308 	sub.w	r3, r9, r8
 80135f4:	bfa8      	it	ge
 80135f6:	2300      	movge	r3, #0
 80135f8:	9312      	str	r3, [sp, #72]	@ 0x48
 80135fa:	2400      	movs	r4, #0
 80135fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013600:	9316      	str	r3, [sp, #88]	@ 0x58
 8013602:	46a0      	mov	r8, r4
 8013604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013606:	9805      	ldr	r0, [sp, #20]
 8013608:	6859      	ldr	r1, [r3, #4]
 801360a:	f7ff f809 	bl	8012620 <_Balloc>
 801360e:	4681      	mov	r9, r0
 8013610:	2800      	cmp	r0, #0
 8013612:	f43f aef4 	beq.w	80133fe <_strtod_l+0x43e>
 8013616:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013618:	691a      	ldr	r2, [r3, #16]
 801361a:	3202      	adds	r2, #2
 801361c:	f103 010c 	add.w	r1, r3, #12
 8013620:	0092      	lsls	r2, r2, #2
 8013622:	300c      	adds	r0, #12
 8013624:	f7fe f899 	bl	801175a <memcpy>
 8013628:	ec4b ab10 	vmov	d0, sl, fp
 801362c:	9805      	ldr	r0, [sp, #20]
 801362e:	aa1c      	add	r2, sp, #112	@ 0x70
 8013630:	a91b      	add	r1, sp, #108	@ 0x6c
 8013632:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8013636:	f7ff fbd7 	bl	8012de8 <__d2b>
 801363a:	901a      	str	r0, [sp, #104]	@ 0x68
 801363c:	2800      	cmp	r0, #0
 801363e:	f43f aede 	beq.w	80133fe <_strtod_l+0x43e>
 8013642:	9805      	ldr	r0, [sp, #20]
 8013644:	2101      	movs	r1, #1
 8013646:	f7ff f929 	bl	801289c <__i2b>
 801364a:	4680      	mov	r8, r0
 801364c:	b948      	cbnz	r0, 8013662 <_strtod_l+0x6a2>
 801364e:	f04f 0800 	mov.w	r8, #0
 8013652:	e6d4      	b.n	80133fe <_strtod_l+0x43e>
 8013654:	f04f 32ff 	mov.w	r2, #4294967295
 8013658:	fa02 f303 	lsl.w	r3, r2, r3
 801365c:	ea03 0a0a 	and.w	sl, r3, sl
 8013660:	e7b0      	b.n	80135c4 <_strtod_l+0x604>
 8013662:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013664:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013666:	2d00      	cmp	r5, #0
 8013668:	bfab      	itete	ge
 801366a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801366c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801366e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8013670:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8013672:	bfac      	ite	ge
 8013674:	18ef      	addge	r7, r5, r3
 8013676:	1b5e      	sublt	r6, r3, r5
 8013678:	9b08      	ldr	r3, [sp, #32]
 801367a:	1aed      	subs	r5, r5, r3
 801367c:	4415      	add	r5, r2
 801367e:	4b66      	ldr	r3, [pc, #408]	@ (8013818 <_strtod_l+0x858>)
 8013680:	3d01      	subs	r5, #1
 8013682:	429d      	cmp	r5, r3
 8013684:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013688:	da50      	bge.n	801372c <_strtod_l+0x76c>
 801368a:	1b5b      	subs	r3, r3, r5
 801368c:	2b1f      	cmp	r3, #31
 801368e:	eba2 0203 	sub.w	r2, r2, r3
 8013692:	f04f 0101 	mov.w	r1, #1
 8013696:	dc3d      	bgt.n	8013714 <_strtod_l+0x754>
 8013698:	fa01 f303 	lsl.w	r3, r1, r3
 801369c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801369e:	2300      	movs	r3, #0
 80136a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80136a2:	18bd      	adds	r5, r7, r2
 80136a4:	9b08      	ldr	r3, [sp, #32]
 80136a6:	42af      	cmp	r7, r5
 80136a8:	4416      	add	r6, r2
 80136aa:	441e      	add	r6, r3
 80136ac:	463b      	mov	r3, r7
 80136ae:	bfa8      	it	ge
 80136b0:	462b      	movge	r3, r5
 80136b2:	42b3      	cmp	r3, r6
 80136b4:	bfa8      	it	ge
 80136b6:	4633      	movge	r3, r6
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	bfc2      	ittt	gt
 80136bc:	1aed      	subgt	r5, r5, r3
 80136be:	1af6      	subgt	r6, r6, r3
 80136c0:	1aff      	subgt	r7, r7, r3
 80136c2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	dd16      	ble.n	80136f6 <_strtod_l+0x736>
 80136c8:	4641      	mov	r1, r8
 80136ca:	9805      	ldr	r0, [sp, #20]
 80136cc:	461a      	mov	r2, r3
 80136ce:	f7ff f9a5 	bl	8012a1c <__pow5mult>
 80136d2:	4680      	mov	r8, r0
 80136d4:	2800      	cmp	r0, #0
 80136d6:	d0ba      	beq.n	801364e <_strtod_l+0x68e>
 80136d8:	4601      	mov	r1, r0
 80136da:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80136dc:	9805      	ldr	r0, [sp, #20]
 80136de:	f7ff f8f3 	bl	80128c8 <__multiply>
 80136e2:	900e      	str	r0, [sp, #56]	@ 0x38
 80136e4:	2800      	cmp	r0, #0
 80136e6:	f43f ae8a 	beq.w	80133fe <_strtod_l+0x43e>
 80136ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80136ec:	9805      	ldr	r0, [sp, #20]
 80136ee:	f7fe ffd7 	bl	80126a0 <_Bfree>
 80136f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80136f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80136f6:	2d00      	cmp	r5, #0
 80136f8:	dc1d      	bgt.n	8013736 <_strtod_l+0x776>
 80136fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	dd23      	ble.n	8013748 <_strtod_l+0x788>
 8013700:	4649      	mov	r1, r9
 8013702:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013704:	9805      	ldr	r0, [sp, #20]
 8013706:	f7ff f989 	bl	8012a1c <__pow5mult>
 801370a:	4681      	mov	r9, r0
 801370c:	b9e0      	cbnz	r0, 8013748 <_strtod_l+0x788>
 801370e:	f04f 0900 	mov.w	r9, #0
 8013712:	e674      	b.n	80133fe <_strtod_l+0x43e>
 8013714:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8013718:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801371c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8013720:	35e2      	adds	r5, #226	@ 0xe2
 8013722:	fa01 f305 	lsl.w	r3, r1, r5
 8013726:	9310      	str	r3, [sp, #64]	@ 0x40
 8013728:	9113      	str	r1, [sp, #76]	@ 0x4c
 801372a:	e7ba      	b.n	80136a2 <_strtod_l+0x6e2>
 801372c:	2300      	movs	r3, #0
 801372e:	9310      	str	r3, [sp, #64]	@ 0x40
 8013730:	2301      	movs	r3, #1
 8013732:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013734:	e7b5      	b.n	80136a2 <_strtod_l+0x6e2>
 8013736:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013738:	9805      	ldr	r0, [sp, #20]
 801373a:	462a      	mov	r2, r5
 801373c:	f7ff f9c8 	bl	8012ad0 <__lshift>
 8013740:	901a      	str	r0, [sp, #104]	@ 0x68
 8013742:	2800      	cmp	r0, #0
 8013744:	d1d9      	bne.n	80136fa <_strtod_l+0x73a>
 8013746:	e65a      	b.n	80133fe <_strtod_l+0x43e>
 8013748:	2e00      	cmp	r6, #0
 801374a:	dd07      	ble.n	801375c <_strtod_l+0x79c>
 801374c:	4649      	mov	r1, r9
 801374e:	9805      	ldr	r0, [sp, #20]
 8013750:	4632      	mov	r2, r6
 8013752:	f7ff f9bd 	bl	8012ad0 <__lshift>
 8013756:	4681      	mov	r9, r0
 8013758:	2800      	cmp	r0, #0
 801375a:	d0d8      	beq.n	801370e <_strtod_l+0x74e>
 801375c:	2f00      	cmp	r7, #0
 801375e:	dd08      	ble.n	8013772 <_strtod_l+0x7b2>
 8013760:	4641      	mov	r1, r8
 8013762:	9805      	ldr	r0, [sp, #20]
 8013764:	463a      	mov	r2, r7
 8013766:	f7ff f9b3 	bl	8012ad0 <__lshift>
 801376a:	4680      	mov	r8, r0
 801376c:	2800      	cmp	r0, #0
 801376e:	f43f ae46 	beq.w	80133fe <_strtod_l+0x43e>
 8013772:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013774:	9805      	ldr	r0, [sp, #20]
 8013776:	464a      	mov	r2, r9
 8013778:	f7ff fa32 	bl	8012be0 <__mdiff>
 801377c:	4604      	mov	r4, r0
 801377e:	2800      	cmp	r0, #0
 8013780:	f43f ae3d 	beq.w	80133fe <_strtod_l+0x43e>
 8013784:	68c3      	ldr	r3, [r0, #12]
 8013786:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013788:	2300      	movs	r3, #0
 801378a:	60c3      	str	r3, [r0, #12]
 801378c:	4641      	mov	r1, r8
 801378e:	f7ff fa0b 	bl	8012ba8 <__mcmp>
 8013792:	2800      	cmp	r0, #0
 8013794:	da46      	bge.n	8013824 <_strtod_l+0x864>
 8013796:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013798:	ea53 030a 	orrs.w	r3, r3, sl
 801379c:	d16c      	bne.n	8013878 <_strtod_l+0x8b8>
 801379e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d168      	bne.n	8013878 <_strtod_l+0x8b8>
 80137a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80137aa:	0d1b      	lsrs	r3, r3, #20
 80137ac:	051b      	lsls	r3, r3, #20
 80137ae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80137b2:	d961      	bls.n	8013878 <_strtod_l+0x8b8>
 80137b4:	6963      	ldr	r3, [r4, #20]
 80137b6:	b913      	cbnz	r3, 80137be <_strtod_l+0x7fe>
 80137b8:	6923      	ldr	r3, [r4, #16]
 80137ba:	2b01      	cmp	r3, #1
 80137bc:	dd5c      	ble.n	8013878 <_strtod_l+0x8b8>
 80137be:	4621      	mov	r1, r4
 80137c0:	2201      	movs	r2, #1
 80137c2:	9805      	ldr	r0, [sp, #20]
 80137c4:	f7ff f984 	bl	8012ad0 <__lshift>
 80137c8:	4641      	mov	r1, r8
 80137ca:	4604      	mov	r4, r0
 80137cc:	f7ff f9ec 	bl	8012ba8 <__mcmp>
 80137d0:	2800      	cmp	r0, #0
 80137d2:	dd51      	ble.n	8013878 <_strtod_l+0x8b8>
 80137d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80137d8:	9a08      	ldr	r2, [sp, #32]
 80137da:	0d1b      	lsrs	r3, r3, #20
 80137dc:	051b      	lsls	r3, r3, #20
 80137de:	2a00      	cmp	r2, #0
 80137e0:	d06b      	beq.n	80138ba <_strtod_l+0x8fa>
 80137e2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80137e6:	d868      	bhi.n	80138ba <_strtod_l+0x8fa>
 80137e8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80137ec:	f67f ae9d 	bls.w	801352a <_strtod_l+0x56a>
 80137f0:	4b0a      	ldr	r3, [pc, #40]	@ (801381c <_strtod_l+0x85c>)
 80137f2:	4650      	mov	r0, sl
 80137f4:	4659      	mov	r1, fp
 80137f6:	2200      	movs	r2, #0
 80137f8:	f7ec ff26 	bl	8000648 <__aeabi_dmul>
 80137fc:	4b08      	ldr	r3, [pc, #32]	@ (8013820 <_strtod_l+0x860>)
 80137fe:	400b      	ands	r3, r1
 8013800:	4682      	mov	sl, r0
 8013802:	468b      	mov	fp, r1
 8013804:	2b00      	cmp	r3, #0
 8013806:	f47f ae05 	bne.w	8013414 <_strtod_l+0x454>
 801380a:	9a05      	ldr	r2, [sp, #20]
 801380c:	2322      	movs	r3, #34	@ 0x22
 801380e:	6013      	str	r3, [r2, #0]
 8013810:	e600      	b.n	8013414 <_strtod_l+0x454>
 8013812:	bf00      	nop
 8013814:	08017038 	.word	0x08017038
 8013818:	fffffc02 	.word	0xfffffc02
 801381c:	39500000 	.word	0x39500000
 8013820:	7ff00000 	.word	0x7ff00000
 8013824:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8013828:	d165      	bne.n	80138f6 <_strtod_l+0x936>
 801382a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801382c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013830:	b35a      	cbz	r2, 801388a <_strtod_l+0x8ca>
 8013832:	4a9f      	ldr	r2, [pc, #636]	@ (8013ab0 <_strtod_l+0xaf0>)
 8013834:	4293      	cmp	r3, r2
 8013836:	d12b      	bne.n	8013890 <_strtod_l+0x8d0>
 8013838:	9b08      	ldr	r3, [sp, #32]
 801383a:	4651      	mov	r1, sl
 801383c:	b303      	cbz	r3, 8013880 <_strtod_l+0x8c0>
 801383e:	4b9d      	ldr	r3, [pc, #628]	@ (8013ab4 <_strtod_l+0xaf4>)
 8013840:	465a      	mov	r2, fp
 8013842:	4013      	ands	r3, r2
 8013844:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013848:	f04f 32ff 	mov.w	r2, #4294967295
 801384c:	d81b      	bhi.n	8013886 <_strtod_l+0x8c6>
 801384e:	0d1b      	lsrs	r3, r3, #20
 8013850:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013854:	fa02 f303 	lsl.w	r3, r2, r3
 8013858:	4299      	cmp	r1, r3
 801385a:	d119      	bne.n	8013890 <_strtod_l+0x8d0>
 801385c:	4b96      	ldr	r3, [pc, #600]	@ (8013ab8 <_strtod_l+0xaf8>)
 801385e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013860:	429a      	cmp	r2, r3
 8013862:	d102      	bne.n	801386a <_strtod_l+0x8aa>
 8013864:	3101      	adds	r1, #1
 8013866:	f43f adca 	beq.w	80133fe <_strtod_l+0x43e>
 801386a:	4b92      	ldr	r3, [pc, #584]	@ (8013ab4 <_strtod_l+0xaf4>)
 801386c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801386e:	401a      	ands	r2, r3
 8013870:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8013874:	f04f 0a00 	mov.w	sl, #0
 8013878:	9b08      	ldr	r3, [sp, #32]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d1b8      	bne.n	80137f0 <_strtod_l+0x830>
 801387e:	e5c9      	b.n	8013414 <_strtod_l+0x454>
 8013880:	f04f 33ff 	mov.w	r3, #4294967295
 8013884:	e7e8      	b.n	8013858 <_strtod_l+0x898>
 8013886:	4613      	mov	r3, r2
 8013888:	e7e6      	b.n	8013858 <_strtod_l+0x898>
 801388a:	ea53 030a 	orrs.w	r3, r3, sl
 801388e:	d0a1      	beq.n	80137d4 <_strtod_l+0x814>
 8013890:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013892:	b1db      	cbz	r3, 80138cc <_strtod_l+0x90c>
 8013894:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013896:	4213      	tst	r3, r2
 8013898:	d0ee      	beq.n	8013878 <_strtod_l+0x8b8>
 801389a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801389c:	9a08      	ldr	r2, [sp, #32]
 801389e:	4650      	mov	r0, sl
 80138a0:	4659      	mov	r1, fp
 80138a2:	b1bb      	cbz	r3, 80138d4 <_strtod_l+0x914>
 80138a4:	f7ff fb6e 	bl	8012f84 <sulp>
 80138a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80138ac:	ec53 2b10 	vmov	r2, r3, d0
 80138b0:	f7ec fd14 	bl	80002dc <__adddf3>
 80138b4:	4682      	mov	sl, r0
 80138b6:	468b      	mov	fp, r1
 80138b8:	e7de      	b.n	8013878 <_strtod_l+0x8b8>
 80138ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80138be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80138c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80138c6:	f04f 3aff 	mov.w	sl, #4294967295
 80138ca:	e7d5      	b.n	8013878 <_strtod_l+0x8b8>
 80138cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80138ce:	ea13 0f0a 	tst.w	r3, sl
 80138d2:	e7e1      	b.n	8013898 <_strtod_l+0x8d8>
 80138d4:	f7ff fb56 	bl	8012f84 <sulp>
 80138d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80138dc:	ec53 2b10 	vmov	r2, r3, d0
 80138e0:	f7ec fcfa 	bl	80002d8 <__aeabi_dsub>
 80138e4:	2200      	movs	r2, #0
 80138e6:	2300      	movs	r3, #0
 80138e8:	4682      	mov	sl, r0
 80138ea:	468b      	mov	fp, r1
 80138ec:	f7ed f914 	bl	8000b18 <__aeabi_dcmpeq>
 80138f0:	2800      	cmp	r0, #0
 80138f2:	d0c1      	beq.n	8013878 <_strtod_l+0x8b8>
 80138f4:	e619      	b.n	801352a <_strtod_l+0x56a>
 80138f6:	4641      	mov	r1, r8
 80138f8:	4620      	mov	r0, r4
 80138fa:	f7ff facd 	bl	8012e98 <__ratio>
 80138fe:	ec57 6b10 	vmov	r6, r7, d0
 8013902:	2200      	movs	r2, #0
 8013904:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013908:	4630      	mov	r0, r6
 801390a:	4639      	mov	r1, r7
 801390c:	f7ed f918 	bl	8000b40 <__aeabi_dcmple>
 8013910:	2800      	cmp	r0, #0
 8013912:	d06f      	beq.n	80139f4 <_strtod_l+0xa34>
 8013914:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013916:	2b00      	cmp	r3, #0
 8013918:	d17a      	bne.n	8013a10 <_strtod_l+0xa50>
 801391a:	f1ba 0f00 	cmp.w	sl, #0
 801391e:	d158      	bne.n	80139d2 <_strtod_l+0xa12>
 8013920:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013922:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013926:	2b00      	cmp	r3, #0
 8013928:	d15a      	bne.n	80139e0 <_strtod_l+0xa20>
 801392a:	4b64      	ldr	r3, [pc, #400]	@ (8013abc <_strtod_l+0xafc>)
 801392c:	2200      	movs	r2, #0
 801392e:	4630      	mov	r0, r6
 8013930:	4639      	mov	r1, r7
 8013932:	f7ed f8fb 	bl	8000b2c <__aeabi_dcmplt>
 8013936:	2800      	cmp	r0, #0
 8013938:	d159      	bne.n	80139ee <_strtod_l+0xa2e>
 801393a:	4630      	mov	r0, r6
 801393c:	4639      	mov	r1, r7
 801393e:	4b60      	ldr	r3, [pc, #384]	@ (8013ac0 <_strtod_l+0xb00>)
 8013940:	2200      	movs	r2, #0
 8013942:	f7ec fe81 	bl	8000648 <__aeabi_dmul>
 8013946:	4606      	mov	r6, r0
 8013948:	460f      	mov	r7, r1
 801394a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801394e:	9606      	str	r6, [sp, #24]
 8013950:	9307      	str	r3, [sp, #28]
 8013952:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013956:	4d57      	ldr	r5, [pc, #348]	@ (8013ab4 <_strtod_l+0xaf4>)
 8013958:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801395c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801395e:	401d      	ands	r5, r3
 8013960:	4b58      	ldr	r3, [pc, #352]	@ (8013ac4 <_strtod_l+0xb04>)
 8013962:	429d      	cmp	r5, r3
 8013964:	f040 80b2 	bne.w	8013acc <_strtod_l+0xb0c>
 8013968:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801396a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801396e:	ec4b ab10 	vmov	d0, sl, fp
 8013972:	f7ff f9c9 	bl	8012d08 <__ulp>
 8013976:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801397a:	ec51 0b10 	vmov	r0, r1, d0
 801397e:	f7ec fe63 	bl	8000648 <__aeabi_dmul>
 8013982:	4652      	mov	r2, sl
 8013984:	465b      	mov	r3, fp
 8013986:	f7ec fca9 	bl	80002dc <__adddf3>
 801398a:	460b      	mov	r3, r1
 801398c:	4949      	ldr	r1, [pc, #292]	@ (8013ab4 <_strtod_l+0xaf4>)
 801398e:	4a4e      	ldr	r2, [pc, #312]	@ (8013ac8 <_strtod_l+0xb08>)
 8013990:	4019      	ands	r1, r3
 8013992:	4291      	cmp	r1, r2
 8013994:	4682      	mov	sl, r0
 8013996:	d942      	bls.n	8013a1e <_strtod_l+0xa5e>
 8013998:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801399a:	4b47      	ldr	r3, [pc, #284]	@ (8013ab8 <_strtod_l+0xaf8>)
 801399c:	429a      	cmp	r2, r3
 801399e:	d103      	bne.n	80139a8 <_strtod_l+0x9e8>
 80139a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80139a2:	3301      	adds	r3, #1
 80139a4:	f43f ad2b 	beq.w	80133fe <_strtod_l+0x43e>
 80139a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8013ab8 <_strtod_l+0xaf8>
 80139ac:	f04f 3aff 	mov.w	sl, #4294967295
 80139b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80139b2:	9805      	ldr	r0, [sp, #20]
 80139b4:	f7fe fe74 	bl	80126a0 <_Bfree>
 80139b8:	9805      	ldr	r0, [sp, #20]
 80139ba:	4649      	mov	r1, r9
 80139bc:	f7fe fe70 	bl	80126a0 <_Bfree>
 80139c0:	9805      	ldr	r0, [sp, #20]
 80139c2:	4641      	mov	r1, r8
 80139c4:	f7fe fe6c 	bl	80126a0 <_Bfree>
 80139c8:	9805      	ldr	r0, [sp, #20]
 80139ca:	4621      	mov	r1, r4
 80139cc:	f7fe fe68 	bl	80126a0 <_Bfree>
 80139d0:	e618      	b.n	8013604 <_strtod_l+0x644>
 80139d2:	f1ba 0f01 	cmp.w	sl, #1
 80139d6:	d103      	bne.n	80139e0 <_strtod_l+0xa20>
 80139d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80139da:	2b00      	cmp	r3, #0
 80139dc:	f43f ada5 	beq.w	801352a <_strtod_l+0x56a>
 80139e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8013a90 <_strtod_l+0xad0>
 80139e4:	4f35      	ldr	r7, [pc, #212]	@ (8013abc <_strtod_l+0xafc>)
 80139e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80139ea:	2600      	movs	r6, #0
 80139ec:	e7b1      	b.n	8013952 <_strtod_l+0x992>
 80139ee:	4f34      	ldr	r7, [pc, #208]	@ (8013ac0 <_strtod_l+0xb00>)
 80139f0:	2600      	movs	r6, #0
 80139f2:	e7aa      	b.n	801394a <_strtod_l+0x98a>
 80139f4:	4b32      	ldr	r3, [pc, #200]	@ (8013ac0 <_strtod_l+0xb00>)
 80139f6:	4630      	mov	r0, r6
 80139f8:	4639      	mov	r1, r7
 80139fa:	2200      	movs	r2, #0
 80139fc:	f7ec fe24 	bl	8000648 <__aeabi_dmul>
 8013a00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a02:	4606      	mov	r6, r0
 8013a04:	460f      	mov	r7, r1
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d09f      	beq.n	801394a <_strtod_l+0x98a>
 8013a0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8013a0e:	e7a0      	b.n	8013952 <_strtod_l+0x992>
 8013a10:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8013a98 <_strtod_l+0xad8>
 8013a14:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013a18:	ec57 6b17 	vmov	r6, r7, d7
 8013a1c:	e799      	b.n	8013952 <_strtod_l+0x992>
 8013a1e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8013a22:	9b08      	ldr	r3, [sp, #32]
 8013a24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d1c1      	bne.n	80139b0 <_strtod_l+0x9f0>
 8013a2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013a30:	0d1b      	lsrs	r3, r3, #20
 8013a32:	051b      	lsls	r3, r3, #20
 8013a34:	429d      	cmp	r5, r3
 8013a36:	d1bb      	bne.n	80139b0 <_strtod_l+0x9f0>
 8013a38:	4630      	mov	r0, r6
 8013a3a:	4639      	mov	r1, r7
 8013a3c:	f7ed f964 	bl	8000d08 <__aeabi_d2lz>
 8013a40:	f7ec fdd4 	bl	80005ec <__aeabi_l2d>
 8013a44:	4602      	mov	r2, r0
 8013a46:	460b      	mov	r3, r1
 8013a48:	4630      	mov	r0, r6
 8013a4a:	4639      	mov	r1, r7
 8013a4c:	f7ec fc44 	bl	80002d8 <__aeabi_dsub>
 8013a50:	460b      	mov	r3, r1
 8013a52:	4602      	mov	r2, r0
 8013a54:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8013a58:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8013a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a5e:	ea46 060a 	orr.w	r6, r6, sl
 8013a62:	431e      	orrs	r6, r3
 8013a64:	d06f      	beq.n	8013b46 <_strtod_l+0xb86>
 8013a66:	a30e      	add	r3, pc, #56	@ (adr r3, 8013aa0 <_strtod_l+0xae0>)
 8013a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a6c:	f7ed f85e 	bl	8000b2c <__aeabi_dcmplt>
 8013a70:	2800      	cmp	r0, #0
 8013a72:	f47f accf 	bne.w	8013414 <_strtod_l+0x454>
 8013a76:	a30c      	add	r3, pc, #48	@ (adr r3, 8013aa8 <_strtod_l+0xae8>)
 8013a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013a80:	f7ed f872 	bl	8000b68 <__aeabi_dcmpgt>
 8013a84:	2800      	cmp	r0, #0
 8013a86:	d093      	beq.n	80139b0 <_strtod_l+0x9f0>
 8013a88:	e4c4      	b.n	8013414 <_strtod_l+0x454>
 8013a8a:	bf00      	nop
 8013a8c:	f3af 8000 	nop.w
 8013a90:	00000000 	.word	0x00000000
 8013a94:	bff00000 	.word	0xbff00000
 8013a98:	00000000 	.word	0x00000000
 8013a9c:	3ff00000 	.word	0x3ff00000
 8013aa0:	94a03595 	.word	0x94a03595
 8013aa4:	3fdfffff 	.word	0x3fdfffff
 8013aa8:	35afe535 	.word	0x35afe535
 8013aac:	3fe00000 	.word	0x3fe00000
 8013ab0:	000fffff 	.word	0x000fffff
 8013ab4:	7ff00000 	.word	0x7ff00000
 8013ab8:	7fefffff 	.word	0x7fefffff
 8013abc:	3ff00000 	.word	0x3ff00000
 8013ac0:	3fe00000 	.word	0x3fe00000
 8013ac4:	7fe00000 	.word	0x7fe00000
 8013ac8:	7c9fffff 	.word	0x7c9fffff
 8013acc:	9b08      	ldr	r3, [sp, #32]
 8013ace:	b323      	cbz	r3, 8013b1a <_strtod_l+0xb5a>
 8013ad0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8013ad4:	d821      	bhi.n	8013b1a <_strtod_l+0xb5a>
 8013ad6:	a328      	add	r3, pc, #160	@ (adr r3, 8013b78 <_strtod_l+0xbb8>)
 8013ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013adc:	4630      	mov	r0, r6
 8013ade:	4639      	mov	r1, r7
 8013ae0:	f7ed f82e 	bl	8000b40 <__aeabi_dcmple>
 8013ae4:	b1a0      	cbz	r0, 8013b10 <_strtod_l+0xb50>
 8013ae6:	4639      	mov	r1, r7
 8013ae8:	4630      	mov	r0, r6
 8013aea:	f7ed f885 	bl	8000bf8 <__aeabi_d2uiz>
 8013aee:	2801      	cmp	r0, #1
 8013af0:	bf38      	it	cc
 8013af2:	2001      	movcc	r0, #1
 8013af4:	f7ec fd2e 	bl	8000554 <__aeabi_ui2d>
 8013af8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013afa:	4606      	mov	r6, r0
 8013afc:	460f      	mov	r7, r1
 8013afe:	b9fb      	cbnz	r3, 8013b40 <_strtod_l+0xb80>
 8013b00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013b04:	9014      	str	r0, [sp, #80]	@ 0x50
 8013b06:	9315      	str	r3, [sp, #84]	@ 0x54
 8013b08:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8013b0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013b10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013b12:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8013b16:	1b5b      	subs	r3, r3, r5
 8013b18:	9311      	str	r3, [sp, #68]	@ 0x44
 8013b1a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013b1e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8013b22:	f7ff f8f1 	bl	8012d08 <__ulp>
 8013b26:	4650      	mov	r0, sl
 8013b28:	ec53 2b10 	vmov	r2, r3, d0
 8013b2c:	4659      	mov	r1, fp
 8013b2e:	f7ec fd8b 	bl	8000648 <__aeabi_dmul>
 8013b32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013b36:	f7ec fbd1 	bl	80002dc <__adddf3>
 8013b3a:	4682      	mov	sl, r0
 8013b3c:	468b      	mov	fp, r1
 8013b3e:	e770      	b.n	8013a22 <_strtod_l+0xa62>
 8013b40:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8013b44:	e7e0      	b.n	8013b08 <_strtod_l+0xb48>
 8013b46:	a30e      	add	r3, pc, #56	@ (adr r3, 8013b80 <_strtod_l+0xbc0>)
 8013b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b4c:	f7ec ffee 	bl	8000b2c <__aeabi_dcmplt>
 8013b50:	e798      	b.n	8013a84 <_strtod_l+0xac4>
 8013b52:	2300      	movs	r3, #0
 8013b54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013b56:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013b58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013b5a:	6013      	str	r3, [r2, #0]
 8013b5c:	f7ff ba6d 	b.w	801303a <_strtod_l+0x7a>
 8013b60:	2a65      	cmp	r2, #101	@ 0x65
 8013b62:	f43f ab66 	beq.w	8013232 <_strtod_l+0x272>
 8013b66:	2a45      	cmp	r2, #69	@ 0x45
 8013b68:	f43f ab63 	beq.w	8013232 <_strtod_l+0x272>
 8013b6c:	2301      	movs	r3, #1
 8013b6e:	f7ff bb9e 	b.w	80132ae <_strtod_l+0x2ee>
 8013b72:	bf00      	nop
 8013b74:	f3af 8000 	nop.w
 8013b78:	ffc00000 	.word	0xffc00000
 8013b7c:	41dfffff 	.word	0x41dfffff
 8013b80:	94a03595 	.word	0x94a03595
 8013b84:	3fcfffff 	.word	0x3fcfffff

08013b88 <_strtod_r>:
 8013b88:	4b01      	ldr	r3, [pc, #4]	@ (8013b90 <_strtod_r+0x8>)
 8013b8a:	f7ff ba19 	b.w	8012fc0 <_strtod_l>
 8013b8e:	bf00      	nop
 8013b90:	20000200 	.word	0x20000200

08013b94 <_strtol_l.constprop.0>:
 8013b94:	2b24      	cmp	r3, #36	@ 0x24
 8013b96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b9a:	4686      	mov	lr, r0
 8013b9c:	4690      	mov	r8, r2
 8013b9e:	d801      	bhi.n	8013ba4 <_strtol_l.constprop.0+0x10>
 8013ba0:	2b01      	cmp	r3, #1
 8013ba2:	d106      	bne.n	8013bb2 <_strtol_l.constprop.0+0x1e>
 8013ba4:	f7fd fdac 	bl	8011700 <__errno>
 8013ba8:	2316      	movs	r3, #22
 8013baa:	6003      	str	r3, [r0, #0]
 8013bac:	2000      	movs	r0, #0
 8013bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bb2:	4834      	ldr	r0, [pc, #208]	@ (8013c84 <_strtol_l.constprop.0+0xf0>)
 8013bb4:	460d      	mov	r5, r1
 8013bb6:	462a      	mov	r2, r5
 8013bb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013bbc:	5d06      	ldrb	r6, [r0, r4]
 8013bbe:	f016 0608 	ands.w	r6, r6, #8
 8013bc2:	d1f8      	bne.n	8013bb6 <_strtol_l.constprop.0+0x22>
 8013bc4:	2c2d      	cmp	r4, #45	@ 0x2d
 8013bc6:	d12d      	bne.n	8013c24 <_strtol_l.constprop.0+0x90>
 8013bc8:	782c      	ldrb	r4, [r5, #0]
 8013bca:	2601      	movs	r6, #1
 8013bcc:	1c95      	adds	r5, r2, #2
 8013bce:	f033 0210 	bics.w	r2, r3, #16
 8013bd2:	d109      	bne.n	8013be8 <_strtol_l.constprop.0+0x54>
 8013bd4:	2c30      	cmp	r4, #48	@ 0x30
 8013bd6:	d12a      	bne.n	8013c2e <_strtol_l.constprop.0+0x9a>
 8013bd8:	782a      	ldrb	r2, [r5, #0]
 8013bda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013bde:	2a58      	cmp	r2, #88	@ 0x58
 8013be0:	d125      	bne.n	8013c2e <_strtol_l.constprop.0+0x9a>
 8013be2:	786c      	ldrb	r4, [r5, #1]
 8013be4:	2310      	movs	r3, #16
 8013be6:	3502      	adds	r5, #2
 8013be8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013bec:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013bf0:	2200      	movs	r2, #0
 8013bf2:	fbbc f9f3 	udiv	r9, ip, r3
 8013bf6:	4610      	mov	r0, r2
 8013bf8:	fb03 ca19 	mls	sl, r3, r9, ip
 8013bfc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013c00:	2f09      	cmp	r7, #9
 8013c02:	d81b      	bhi.n	8013c3c <_strtol_l.constprop.0+0xa8>
 8013c04:	463c      	mov	r4, r7
 8013c06:	42a3      	cmp	r3, r4
 8013c08:	dd27      	ble.n	8013c5a <_strtol_l.constprop.0+0xc6>
 8013c0a:	1c57      	adds	r7, r2, #1
 8013c0c:	d007      	beq.n	8013c1e <_strtol_l.constprop.0+0x8a>
 8013c0e:	4581      	cmp	r9, r0
 8013c10:	d320      	bcc.n	8013c54 <_strtol_l.constprop.0+0xc0>
 8013c12:	d101      	bne.n	8013c18 <_strtol_l.constprop.0+0x84>
 8013c14:	45a2      	cmp	sl, r4
 8013c16:	db1d      	blt.n	8013c54 <_strtol_l.constprop.0+0xc0>
 8013c18:	fb00 4003 	mla	r0, r0, r3, r4
 8013c1c:	2201      	movs	r2, #1
 8013c1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013c22:	e7eb      	b.n	8013bfc <_strtol_l.constprop.0+0x68>
 8013c24:	2c2b      	cmp	r4, #43	@ 0x2b
 8013c26:	bf04      	itt	eq
 8013c28:	782c      	ldrbeq	r4, [r5, #0]
 8013c2a:	1c95      	addeq	r5, r2, #2
 8013c2c:	e7cf      	b.n	8013bce <_strtol_l.constprop.0+0x3a>
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d1da      	bne.n	8013be8 <_strtol_l.constprop.0+0x54>
 8013c32:	2c30      	cmp	r4, #48	@ 0x30
 8013c34:	bf0c      	ite	eq
 8013c36:	2308      	moveq	r3, #8
 8013c38:	230a      	movne	r3, #10
 8013c3a:	e7d5      	b.n	8013be8 <_strtol_l.constprop.0+0x54>
 8013c3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013c40:	2f19      	cmp	r7, #25
 8013c42:	d801      	bhi.n	8013c48 <_strtol_l.constprop.0+0xb4>
 8013c44:	3c37      	subs	r4, #55	@ 0x37
 8013c46:	e7de      	b.n	8013c06 <_strtol_l.constprop.0+0x72>
 8013c48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013c4c:	2f19      	cmp	r7, #25
 8013c4e:	d804      	bhi.n	8013c5a <_strtol_l.constprop.0+0xc6>
 8013c50:	3c57      	subs	r4, #87	@ 0x57
 8013c52:	e7d8      	b.n	8013c06 <_strtol_l.constprop.0+0x72>
 8013c54:	f04f 32ff 	mov.w	r2, #4294967295
 8013c58:	e7e1      	b.n	8013c1e <_strtol_l.constprop.0+0x8a>
 8013c5a:	1c53      	adds	r3, r2, #1
 8013c5c:	d108      	bne.n	8013c70 <_strtol_l.constprop.0+0xdc>
 8013c5e:	2322      	movs	r3, #34	@ 0x22
 8013c60:	f8ce 3000 	str.w	r3, [lr]
 8013c64:	4660      	mov	r0, ip
 8013c66:	f1b8 0f00 	cmp.w	r8, #0
 8013c6a:	d0a0      	beq.n	8013bae <_strtol_l.constprop.0+0x1a>
 8013c6c:	1e69      	subs	r1, r5, #1
 8013c6e:	e006      	b.n	8013c7e <_strtol_l.constprop.0+0xea>
 8013c70:	b106      	cbz	r6, 8013c74 <_strtol_l.constprop.0+0xe0>
 8013c72:	4240      	negs	r0, r0
 8013c74:	f1b8 0f00 	cmp.w	r8, #0
 8013c78:	d099      	beq.n	8013bae <_strtol_l.constprop.0+0x1a>
 8013c7a:	2a00      	cmp	r2, #0
 8013c7c:	d1f6      	bne.n	8013c6c <_strtol_l.constprop.0+0xd8>
 8013c7e:	f8c8 1000 	str.w	r1, [r8]
 8013c82:	e794      	b.n	8013bae <_strtol_l.constprop.0+0x1a>
 8013c84:	08017061 	.word	0x08017061

08013c88 <_strtol_r>:
 8013c88:	f7ff bf84 	b.w	8013b94 <_strtol_l.constprop.0>

08013c8c <__ssputs_r>:
 8013c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c90:	688e      	ldr	r6, [r1, #8]
 8013c92:	461f      	mov	r7, r3
 8013c94:	42be      	cmp	r6, r7
 8013c96:	680b      	ldr	r3, [r1, #0]
 8013c98:	4682      	mov	sl, r0
 8013c9a:	460c      	mov	r4, r1
 8013c9c:	4690      	mov	r8, r2
 8013c9e:	d82d      	bhi.n	8013cfc <__ssputs_r+0x70>
 8013ca0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013ca4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013ca8:	d026      	beq.n	8013cf8 <__ssputs_r+0x6c>
 8013caa:	6965      	ldr	r5, [r4, #20]
 8013cac:	6909      	ldr	r1, [r1, #16]
 8013cae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013cb2:	eba3 0901 	sub.w	r9, r3, r1
 8013cb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013cba:	1c7b      	adds	r3, r7, #1
 8013cbc:	444b      	add	r3, r9
 8013cbe:	106d      	asrs	r5, r5, #1
 8013cc0:	429d      	cmp	r5, r3
 8013cc2:	bf38      	it	cc
 8013cc4:	461d      	movcc	r5, r3
 8013cc6:	0553      	lsls	r3, r2, #21
 8013cc8:	d527      	bpl.n	8013d1a <__ssputs_r+0x8e>
 8013cca:	4629      	mov	r1, r5
 8013ccc:	f7fe fc1c 	bl	8012508 <_malloc_r>
 8013cd0:	4606      	mov	r6, r0
 8013cd2:	b360      	cbz	r0, 8013d2e <__ssputs_r+0xa2>
 8013cd4:	6921      	ldr	r1, [r4, #16]
 8013cd6:	464a      	mov	r2, r9
 8013cd8:	f7fd fd3f 	bl	801175a <memcpy>
 8013cdc:	89a3      	ldrh	r3, [r4, #12]
 8013cde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013ce6:	81a3      	strh	r3, [r4, #12]
 8013ce8:	6126      	str	r6, [r4, #16]
 8013cea:	6165      	str	r5, [r4, #20]
 8013cec:	444e      	add	r6, r9
 8013cee:	eba5 0509 	sub.w	r5, r5, r9
 8013cf2:	6026      	str	r6, [r4, #0]
 8013cf4:	60a5      	str	r5, [r4, #8]
 8013cf6:	463e      	mov	r6, r7
 8013cf8:	42be      	cmp	r6, r7
 8013cfa:	d900      	bls.n	8013cfe <__ssputs_r+0x72>
 8013cfc:	463e      	mov	r6, r7
 8013cfe:	6820      	ldr	r0, [r4, #0]
 8013d00:	4632      	mov	r2, r6
 8013d02:	4641      	mov	r1, r8
 8013d04:	f000 fd53 	bl	80147ae <memmove>
 8013d08:	68a3      	ldr	r3, [r4, #8]
 8013d0a:	1b9b      	subs	r3, r3, r6
 8013d0c:	60a3      	str	r3, [r4, #8]
 8013d0e:	6823      	ldr	r3, [r4, #0]
 8013d10:	4433      	add	r3, r6
 8013d12:	6023      	str	r3, [r4, #0]
 8013d14:	2000      	movs	r0, #0
 8013d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d1a:	462a      	mov	r2, r5
 8013d1c:	f001 f8f9 	bl	8014f12 <_realloc_r>
 8013d20:	4606      	mov	r6, r0
 8013d22:	2800      	cmp	r0, #0
 8013d24:	d1e0      	bne.n	8013ce8 <__ssputs_r+0x5c>
 8013d26:	6921      	ldr	r1, [r4, #16]
 8013d28:	4650      	mov	r0, sl
 8013d2a:	f7fe fb79 	bl	8012420 <_free_r>
 8013d2e:	230c      	movs	r3, #12
 8013d30:	f8ca 3000 	str.w	r3, [sl]
 8013d34:	89a3      	ldrh	r3, [r4, #12]
 8013d36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d3a:	81a3      	strh	r3, [r4, #12]
 8013d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8013d40:	e7e9      	b.n	8013d16 <__ssputs_r+0x8a>
	...

08013d44 <_svfiprintf_r>:
 8013d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d48:	4698      	mov	r8, r3
 8013d4a:	898b      	ldrh	r3, [r1, #12]
 8013d4c:	061b      	lsls	r3, r3, #24
 8013d4e:	b09d      	sub	sp, #116	@ 0x74
 8013d50:	4607      	mov	r7, r0
 8013d52:	460d      	mov	r5, r1
 8013d54:	4614      	mov	r4, r2
 8013d56:	d510      	bpl.n	8013d7a <_svfiprintf_r+0x36>
 8013d58:	690b      	ldr	r3, [r1, #16]
 8013d5a:	b973      	cbnz	r3, 8013d7a <_svfiprintf_r+0x36>
 8013d5c:	2140      	movs	r1, #64	@ 0x40
 8013d5e:	f7fe fbd3 	bl	8012508 <_malloc_r>
 8013d62:	6028      	str	r0, [r5, #0]
 8013d64:	6128      	str	r0, [r5, #16]
 8013d66:	b930      	cbnz	r0, 8013d76 <_svfiprintf_r+0x32>
 8013d68:	230c      	movs	r3, #12
 8013d6a:	603b      	str	r3, [r7, #0]
 8013d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8013d70:	b01d      	add	sp, #116	@ 0x74
 8013d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d76:	2340      	movs	r3, #64	@ 0x40
 8013d78:	616b      	str	r3, [r5, #20]
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d7e:	2320      	movs	r3, #32
 8013d80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013d84:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d88:	2330      	movs	r3, #48	@ 0x30
 8013d8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013f28 <_svfiprintf_r+0x1e4>
 8013d8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013d92:	f04f 0901 	mov.w	r9, #1
 8013d96:	4623      	mov	r3, r4
 8013d98:	469a      	mov	sl, r3
 8013d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d9e:	b10a      	cbz	r2, 8013da4 <_svfiprintf_r+0x60>
 8013da0:	2a25      	cmp	r2, #37	@ 0x25
 8013da2:	d1f9      	bne.n	8013d98 <_svfiprintf_r+0x54>
 8013da4:	ebba 0b04 	subs.w	fp, sl, r4
 8013da8:	d00b      	beq.n	8013dc2 <_svfiprintf_r+0x7e>
 8013daa:	465b      	mov	r3, fp
 8013dac:	4622      	mov	r2, r4
 8013dae:	4629      	mov	r1, r5
 8013db0:	4638      	mov	r0, r7
 8013db2:	f7ff ff6b 	bl	8013c8c <__ssputs_r>
 8013db6:	3001      	adds	r0, #1
 8013db8:	f000 80a7 	beq.w	8013f0a <_svfiprintf_r+0x1c6>
 8013dbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013dbe:	445a      	add	r2, fp
 8013dc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8013dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	f000 809f 	beq.w	8013f0a <_svfiprintf_r+0x1c6>
 8013dcc:	2300      	movs	r3, #0
 8013dce:	f04f 32ff 	mov.w	r2, #4294967295
 8013dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013dd6:	f10a 0a01 	add.w	sl, sl, #1
 8013dda:	9304      	str	r3, [sp, #16]
 8013ddc:	9307      	str	r3, [sp, #28]
 8013dde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013de2:	931a      	str	r3, [sp, #104]	@ 0x68
 8013de4:	4654      	mov	r4, sl
 8013de6:	2205      	movs	r2, #5
 8013de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013dec:	484e      	ldr	r0, [pc, #312]	@ (8013f28 <_svfiprintf_r+0x1e4>)
 8013dee:	f7ec fa17 	bl	8000220 <memchr>
 8013df2:	9a04      	ldr	r2, [sp, #16]
 8013df4:	b9d8      	cbnz	r0, 8013e2e <_svfiprintf_r+0xea>
 8013df6:	06d0      	lsls	r0, r2, #27
 8013df8:	bf44      	itt	mi
 8013dfa:	2320      	movmi	r3, #32
 8013dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013e00:	0711      	lsls	r1, r2, #28
 8013e02:	bf44      	itt	mi
 8013e04:	232b      	movmi	r3, #43	@ 0x2b
 8013e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8013e0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013e10:	d015      	beq.n	8013e3e <_svfiprintf_r+0xfa>
 8013e12:	9a07      	ldr	r2, [sp, #28]
 8013e14:	4654      	mov	r4, sl
 8013e16:	2000      	movs	r0, #0
 8013e18:	f04f 0c0a 	mov.w	ip, #10
 8013e1c:	4621      	mov	r1, r4
 8013e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e22:	3b30      	subs	r3, #48	@ 0x30
 8013e24:	2b09      	cmp	r3, #9
 8013e26:	d94b      	bls.n	8013ec0 <_svfiprintf_r+0x17c>
 8013e28:	b1b0      	cbz	r0, 8013e58 <_svfiprintf_r+0x114>
 8013e2a:	9207      	str	r2, [sp, #28]
 8013e2c:	e014      	b.n	8013e58 <_svfiprintf_r+0x114>
 8013e2e:	eba0 0308 	sub.w	r3, r0, r8
 8013e32:	fa09 f303 	lsl.w	r3, r9, r3
 8013e36:	4313      	orrs	r3, r2
 8013e38:	9304      	str	r3, [sp, #16]
 8013e3a:	46a2      	mov	sl, r4
 8013e3c:	e7d2      	b.n	8013de4 <_svfiprintf_r+0xa0>
 8013e3e:	9b03      	ldr	r3, [sp, #12]
 8013e40:	1d19      	adds	r1, r3, #4
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	9103      	str	r1, [sp, #12]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	bfbb      	ittet	lt
 8013e4a:	425b      	neglt	r3, r3
 8013e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8013e50:	9307      	strge	r3, [sp, #28]
 8013e52:	9307      	strlt	r3, [sp, #28]
 8013e54:	bfb8      	it	lt
 8013e56:	9204      	strlt	r2, [sp, #16]
 8013e58:	7823      	ldrb	r3, [r4, #0]
 8013e5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8013e5c:	d10a      	bne.n	8013e74 <_svfiprintf_r+0x130>
 8013e5e:	7863      	ldrb	r3, [r4, #1]
 8013e60:	2b2a      	cmp	r3, #42	@ 0x2a
 8013e62:	d132      	bne.n	8013eca <_svfiprintf_r+0x186>
 8013e64:	9b03      	ldr	r3, [sp, #12]
 8013e66:	1d1a      	adds	r2, r3, #4
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	9203      	str	r2, [sp, #12]
 8013e6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013e70:	3402      	adds	r4, #2
 8013e72:	9305      	str	r3, [sp, #20]
 8013e74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013f38 <_svfiprintf_r+0x1f4>
 8013e78:	7821      	ldrb	r1, [r4, #0]
 8013e7a:	2203      	movs	r2, #3
 8013e7c:	4650      	mov	r0, sl
 8013e7e:	f7ec f9cf 	bl	8000220 <memchr>
 8013e82:	b138      	cbz	r0, 8013e94 <_svfiprintf_r+0x150>
 8013e84:	9b04      	ldr	r3, [sp, #16]
 8013e86:	eba0 000a 	sub.w	r0, r0, sl
 8013e8a:	2240      	movs	r2, #64	@ 0x40
 8013e8c:	4082      	lsls	r2, r0
 8013e8e:	4313      	orrs	r3, r2
 8013e90:	3401      	adds	r4, #1
 8013e92:	9304      	str	r3, [sp, #16]
 8013e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e98:	4824      	ldr	r0, [pc, #144]	@ (8013f2c <_svfiprintf_r+0x1e8>)
 8013e9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013e9e:	2206      	movs	r2, #6
 8013ea0:	f7ec f9be 	bl	8000220 <memchr>
 8013ea4:	2800      	cmp	r0, #0
 8013ea6:	d036      	beq.n	8013f16 <_svfiprintf_r+0x1d2>
 8013ea8:	4b21      	ldr	r3, [pc, #132]	@ (8013f30 <_svfiprintf_r+0x1ec>)
 8013eaa:	bb1b      	cbnz	r3, 8013ef4 <_svfiprintf_r+0x1b0>
 8013eac:	9b03      	ldr	r3, [sp, #12]
 8013eae:	3307      	adds	r3, #7
 8013eb0:	f023 0307 	bic.w	r3, r3, #7
 8013eb4:	3308      	adds	r3, #8
 8013eb6:	9303      	str	r3, [sp, #12]
 8013eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013eba:	4433      	add	r3, r6
 8013ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ebe:	e76a      	b.n	8013d96 <_svfiprintf_r+0x52>
 8013ec0:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ec4:	460c      	mov	r4, r1
 8013ec6:	2001      	movs	r0, #1
 8013ec8:	e7a8      	b.n	8013e1c <_svfiprintf_r+0xd8>
 8013eca:	2300      	movs	r3, #0
 8013ecc:	3401      	adds	r4, #1
 8013ece:	9305      	str	r3, [sp, #20]
 8013ed0:	4619      	mov	r1, r3
 8013ed2:	f04f 0c0a 	mov.w	ip, #10
 8013ed6:	4620      	mov	r0, r4
 8013ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013edc:	3a30      	subs	r2, #48	@ 0x30
 8013ede:	2a09      	cmp	r2, #9
 8013ee0:	d903      	bls.n	8013eea <_svfiprintf_r+0x1a6>
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d0c6      	beq.n	8013e74 <_svfiprintf_r+0x130>
 8013ee6:	9105      	str	r1, [sp, #20]
 8013ee8:	e7c4      	b.n	8013e74 <_svfiprintf_r+0x130>
 8013eea:	fb0c 2101 	mla	r1, ip, r1, r2
 8013eee:	4604      	mov	r4, r0
 8013ef0:	2301      	movs	r3, #1
 8013ef2:	e7f0      	b.n	8013ed6 <_svfiprintf_r+0x192>
 8013ef4:	ab03      	add	r3, sp, #12
 8013ef6:	9300      	str	r3, [sp, #0]
 8013ef8:	462a      	mov	r2, r5
 8013efa:	4b0e      	ldr	r3, [pc, #56]	@ (8013f34 <_svfiprintf_r+0x1f0>)
 8013efc:	a904      	add	r1, sp, #16
 8013efe:	4638      	mov	r0, r7
 8013f00:	f7fc fc7c 	bl	80107fc <_printf_float>
 8013f04:	1c42      	adds	r2, r0, #1
 8013f06:	4606      	mov	r6, r0
 8013f08:	d1d6      	bne.n	8013eb8 <_svfiprintf_r+0x174>
 8013f0a:	89ab      	ldrh	r3, [r5, #12]
 8013f0c:	065b      	lsls	r3, r3, #25
 8013f0e:	f53f af2d 	bmi.w	8013d6c <_svfiprintf_r+0x28>
 8013f12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013f14:	e72c      	b.n	8013d70 <_svfiprintf_r+0x2c>
 8013f16:	ab03      	add	r3, sp, #12
 8013f18:	9300      	str	r3, [sp, #0]
 8013f1a:	462a      	mov	r2, r5
 8013f1c:	4b05      	ldr	r3, [pc, #20]	@ (8013f34 <_svfiprintf_r+0x1f0>)
 8013f1e:	a904      	add	r1, sp, #16
 8013f20:	4638      	mov	r0, r7
 8013f22:	f7fc ff03 	bl	8010d2c <_printf_i>
 8013f26:	e7ed      	b.n	8013f04 <_svfiprintf_r+0x1c0>
 8013f28:	08017161 	.word	0x08017161
 8013f2c:	0801716b 	.word	0x0801716b
 8013f30:	080107fd 	.word	0x080107fd
 8013f34:	08013c8d 	.word	0x08013c8d
 8013f38:	08017167 	.word	0x08017167

08013f3c <_sungetc_r>:
 8013f3c:	b538      	push	{r3, r4, r5, lr}
 8013f3e:	1c4b      	adds	r3, r1, #1
 8013f40:	4614      	mov	r4, r2
 8013f42:	d103      	bne.n	8013f4c <_sungetc_r+0x10>
 8013f44:	f04f 35ff 	mov.w	r5, #4294967295
 8013f48:	4628      	mov	r0, r5
 8013f4a:	bd38      	pop	{r3, r4, r5, pc}
 8013f4c:	8993      	ldrh	r3, [r2, #12]
 8013f4e:	f023 0320 	bic.w	r3, r3, #32
 8013f52:	8193      	strh	r3, [r2, #12]
 8013f54:	6853      	ldr	r3, [r2, #4]
 8013f56:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8013f58:	b2cd      	uxtb	r5, r1
 8013f5a:	b18a      	cbz	r2, 8013f80 <_sungetc_r+0x44>
 8013f5c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8013f5e:	429a      	cmp	r2, r3
 8013f60:	dd08      	ble.n	8013f74 <_sungetc_r+0x38>
 8013f62:	6823      	ldr	r3, [r4, #0]
 8013f64:	1e5a      	subs	r2, r3, #1
 8013f66:	6022      	str	r2, [r4, #0]
 8013f68:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013f6c:	6863      	ldr	r3, [r4, #4]
 8013f6e:	3301      	adds	r3, #1
 8013f70:	6063      	str	r3, [r4, #4]
 8013f72:	e7e9      	b.n	8013f48 <_sungetc_r+0xc>
 8013f74:	4621      	mov	r1, r4
 8013f76:	f000 fbe0 	bl	801473a <__submore>
 8013f7a:	2800      	cmp	r0, #0
 8013f7c:	d0f1      	beq.n	8013f62 <_sungetc_r+0x26>
 8013f7e:	e7e1      	b.n	8013f44 <_sungetc_r+0x8>
 8013f80:	6921      	ldr	r1, [r4, #16]
 8013f82:	6822      	ldr	r2, [r4, #0]
 8013f84:	b141      	cbz	r1, 8013f98 <_sungetc_r+0x5c>
 8013f86:	4291      	cmp	r1, r2
 8013f88:	d206      	bcs.n	8013f98 <_sungetc_r+0x5c>
 8013f8a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8013f8e:	42a9      	cmp	r1, r5
 8013f90:	d102      	bne.n	8013f98 <_sungetc_r+0x5c>
 8013f92:	3a01      	subs	r2, #1
 8013f94:	6022      	str	r2, [r4, #0]
 8013f96:	e7ea      	b.n	8013f6e <_sungetc_r+0x32>
 8013f98:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8013f9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013fa0:	6363      	str	r3, [r4, #52]	@ 0x34
 8013fa2:	2303      	movs	r3, #3
 8013fa4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8013fa6:	4623      	mov	r3, r4
 8013fa8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013fac:	6023      	str	r3, [r4, #0]
 8013fae:	2301      	movs	r3, #1
 8013fb0:	e7de      	b.n	8013f70 <_sungetc_r+0x34>

08013fb2 <__ssrefill_r>:
 8013fb2:	b510      	push	{r4, lr}
 8013fb4:	460c      	mov	r4, r1
 8013fb6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8013fb8:	b169      	cbz	r1, 8013fd6 <__ssrefill_r+0x24>
 8013fba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013fbe:	4299      	cmp	r1, r3
 8013fc0:	d001      	beq.n	8013fc6 <__ssrefill_r+0x14>
 8013fc2:	f7fe fa2d 	bl	8012420 <_free_r>
 8013fc6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013fc8:	6063      	str	r3, [r4, #4]
 8013fca:	2000      	movs	r0, #0
 8013fcc:	6360      	str	r0, [r4, #52]	@ 0x34
 8013fce:	b113      	cbz	r3, 8013fd6 <__ssrefill_r+0x24>
 8013fd0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8013fd2:	6023      	str	r3, [r4, #0]
 8013fd4:	bd10      	pop	{r4, pc}
 8013fd6:	6923      	ldr	r3, [r4, #16]
 8013fd8:	6023      	str	r3, [r4, #0]
 8013fda:	2300      	movs	r3, #0
 8013fdc:	6063      	str	r3, [r4, #4]
 8013fde:	89a3      	ldrh	r3, [r4, #12]
 8013fe0:	f043 0320 	orr.w	r3, r3, #32
 8013fe4:	81a3      	strh	r3, [r4, #12]
 8013fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8013fea:	e7f3      	b.n	8013fd4 <__ssrefill_r+0x22>

08013fec <__ssvfiscanf_r>:
 8013fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ff0:	460c      	mov	r4, r1
 8013ff2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8013ff6:	2100      	movs	r1, #0
 8013ff8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8013ffc:	49a5      	ldr	r1, [pc, #660]	@ (8014294 <__ssvfiscanf_r+0x2a8>)
 8013ffe:	91a0      	str	r1, [sp, #640]	@ 0x280
 8014000:	f10d 0804 	add.w	r8, sp, #4
 8014004:	49a4      	ldr	r1, [pc, #656]	@ (8014298 <__ssvfiscanf_r+0x2ac>)
 8014006:	4fa5      	ldr	r7, [pc, #660]	@ (801429c <__ssvfiscanf_r+0x2b0>)
 8014008:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801400c:	4606      	mov	r6, r0
 801400e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8014010:	9300      	str	r3, [sp, #0]
 8014012:	7813      	ldrb	r3, [r2, #0]
 8014014:	2b00      	cmp	r3, #0
 8014016:	f000 8158 	beq.w	80142ca <__ssvfiscanf_r+0x2de>
 801401a:	5cf9      	ldrb	r1, [r7, r3]
 801401c:	f011 0108 	ands.w	r1, r1, #8
 8014020:	f102 0501 	add.w	r5, r2, #1
 8014024:	d019      	beq.n	801405a <__ssvfiscanf_r+0x6e>
 8014026:	6863      	ldr	r3, [r4, #4]
 8014028:	2b00      	cmp	r3, #0
 801402a:	dd0f      	ble.n	801404c <__ssvfiscanf_r+0x60>
 801402c:	6823      	ldr	r3, [r4, #0]
 801402e:	781a      	ldrb	r2, [r3, #0]
 8014030:	5cba      	ldrb	r2, [r7, r2]
 8014032:	0712      	lsls	r2, r2, #28
 8014034:	d401      	bmi.n	801403a <__ssvfiscanf_r+0x4e>
 8014036:	462a      	mov	r2, r5
 8014038:	e7eb      	b.n	8014012 <__ssvfiscanf_r+0x26>
 801403a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801403c:	3201      	adds	r2, #1
 801403e:	9245      	str	r2, [sp, #276]	@ 0x114
 8014040:	6862      	ldr	r2, [r4, #4]
 8014042:	3301      	adds	r3, #1
 8014044:	3a01      	subs	r2, #1
 8014046:	6062      	str	r2, [r4, #4]
 8014048:	6023      	str	r3, [r4, #0]
 801404a:	e7ec      	b.n	8014026 <__ssvfiscanf_r+0x3a>
 801404c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801404e:	4621      	mov	r1, r4
 8014050:	4630      	mov	r0, r6
 8014052:	4798      	blx	r3
 8014054:	2800      	cmp	r0, #0
 8014056:	d0e9      	beq.n	801402c <__ssvfiscanf_r+0x40>
 8014058:	e7ed      	b.n	8014036 <__ssvfiscanf_r+0x4a>
 801405a:	2b25      	cmp	r3, #37	@ 0x25
 801405c:	d012      	beq.n	8014084 <__ssvfiscanf_r+0x98>
 801405e:	4699      	mov	r9, r3
 8014060:	6863      	ldr	r3, [r4, #4]
 8014062:	2b00      	cmp	r3, #0
 8014064:	f340 8093 	ble.w	801418e <__ssvfiscanf_r+0x1a2>
 8014068:	6822      	ldr	r2, [r4, #0]
 801406a:	7813      	ldrb	r3, [r2, #0]
 801406c:	454b      	cmp	r3, r9
 801406e:	f040 812c 	bne.w	80142ca <__ssvfiscanf_r+0x2de>
 8014072:	6863      	ldr	r3, [r4, #4]
 8014074:	3b01      	subs	r3, #1
 8014076:	6063      	str	r3, [r4, #4]
 8014078:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801407a:	3201      	adds	r2, #1
 801407c:	3301      	adds	r3, #1
 801407e:	6022      	str	r2, [r4, #0]
 8014080:	9345      	str	r3, [sp, #276]	@ 0x114
 8014082:	e7d8      	b.n	8014036 <__ssvfiscanf_r+0x4a>
 8014084:	9141      	str	r1, [sp, #260]	@ 0x104
 8014086:	9143      	str	r1, [sp, #268]	@ 0x10c
 8014088:	7853      	ldrb	r3, [r2, #1]
 801408a:	2b2a      	cmp	r3, #42	@ 0x2a
 801408c:	bf02      	ittt	eq
 801408e:	2310      	moveq	r3, #16
 8014090:	1c95      	addeq	r5, r2, #2
 8014092:	9341      	streq	r3, [sp, #260]	@ 0x104
 8014094:	220a      	movs	r2, #10
 8014096:	46a9      	mov	r9, r5
 8014098:	f819 1b01 	ldrb.w	r1, [r9], #1
 801409c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80140a0:	2b09      	cmp	r3, #9
 80140a2:	d91e      	bls.n	80140e2 <__ssvfiscanf_r+0xf6>
 80140a4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80142a0 <__ssvfiscanf_r+0x2b4>
 80140a8:	2203      	movs	r2, #3
 80140aa:	4650      	mov	r0, sl
 80140ac:	f7ec f8b8 	bl	8000220 <memchr>
 80140b0:	b138      	cbz	r0, 80140c2 <__ssvfiscanf_r+0xd6>
 80140b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80140b4:	eba0 000a 	sub.w	r0, r0, sl
 80140b8:	2301      	movs	r3, #1
 80140ba:	4083      	lsls	r3, r0
 80140bc:	4313      	orrs	r3, r2
 80140be:	9341      	str	r3, [sp, #260]	@ 0x104
 80140c0:	464d      	mov	r5, r9
 80140c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80140c6:	2b78      	cmp	r3, #120	@ 0x78
 80140c8:	d806      	bhi.n	80140d8 <__ssvfiscanf_r+0xec>
 80140ca:	2b57      	cmp	r3, #87	@ 0x57
 80140cc:	d810      	bhi.n	80140f0 <__ssvfiscanf_r+0x104>
 80140ce:	2b25      	cmp	r3, #37	@ 0x25
 80140d0:	d0c5      	beq.n	801405e <__ssvfiscanf_r+0x72>
 80140d2:	d857      	bhi.n	8014184 <__ssvfiscanf_r+0x198>
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d065      	beq.n	80141a4 <__ssvfiscanf_r+0x1b8>
 80140d8:	2303      	movs	r3, #3
 80140da:	9347      	str	r3, [sp, #284]	@ 0x11c
 80140dc:	230a      	movs	r3, #10
 80140de:	9342      	str	r3, [sp, #264]	@ 0x108
 80140e0:	e078      	b.n	80141d4 <__ssvfiscanf_r+0x1e8>
 80140e2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80140e4:	fb02 1103 	mla	r1, r2, r3, r1
 80140e8:	3930      	subs	r1, #48	@ 0x30
 80140ea:	9143      	str	r1, [sp, #268]	@ 0x10c
 80140ec:	464d      	mov	r5, r9
 80140ee:	e7d2      	b.n	8014096 <__ssvfiscanf_r+0xaa>
 80140f0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80140f4:	2a20      	cmp	r2, #32
 80140f6:	d8ef      	bhi.n	80140d8 <__ssvfiscanf_r+0xec>
 80140f8:	a101      	add	r1, pc, #4	@ (adr r1, 8014100 <__ssvfiscanf_r+0x114>)
 80140fa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80140fe:	bf00      	nop
 8014100:	080141b3 	.word	0x080141b3
 8014104:	080140d9 	.word	0x080140d9
 8014108:	080140d9 	.word	0x080140d9
 801410c:	0801420d 	.word	0x0801420d
 8014110:	080140d9 	.word	0x080140d9
 8014114:	080140d9 	.word	0x080140d9
 8014118:	080140d9 	.word	0x080140d9
 801411c:	080140d9 	.word	0x080140d9
 8014120:	080140d9 	.word	0x080140d9
 8014124:	080140d9 	.word	0x080140d9
 8014128:	080140d9 	.word	0x080140d9
 801412c:	08014223 	.word	0x08014223
 8014130:	08014209 	.word	0x08014209
 8014134:	0801418b 	.word	0x0801418b
 8014138:	0801418b 	.word	0x0801418b
 801413c:	0801418b 	.word	0x0801418b
 8014140:	080140d9 	.word	0x080140d9
 8014144:	080141c5 	.word	0x080141c5
 8014148:	080140d9 	.word	0x080140d9
 801414c:	080140d9 	.word	0x080140d9
 8014150:	080140d9 	.word	0x080140d9
 8014154:	080140d9 	.word	0x080140d9
 8014158:	08014233 	.word	0x08014233
 801415c:	080141cd 	.word	0x080141cd
 8014160:	080141ab 	.word	0x080141ab
 8014164:	080140d9 	.word	0x080140d9
 8014168:	080140d9 	.word	0x080140d9
 801416c:	0801422f 	.word	0x0801422f
 8014170:	080140d9 	.word	0x080140d9
 8014174:	08014209 	.word	0x08014209
 8014178:	080140d9 	.word	0x080140d9
 801417c:	080140d9 	.word	0x080140d9
 8014180:	080141b3 	.word	0x080141b3
 8014184:	3b45      	subs	r3, #69	@ 0x45
 8014186:	2b02      	cmp	r3, #2
 8014188:	d8a6      	bhi.n	80140d8 <__ssvfiscanf_r+0xec>
 801418a:	2305      	movs	r3, #5
 801418c:	e021      	b.n	80141d2 <__ssvfiscanf_r+0x1e6>
 801418e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014190:	4621      	mov	r1, r4
 8014192:	4630      	mov	r0, r6
 8014194:	4798      	blx	r3
 8014196:	2800      	cmp	r0, #0
 8014198:	f43f af66 	beq.w	8014068 <__ssvfiscanf_r+0x7c>
 801419c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801419e:	2800      	cmp	r0, #0
 80141a0:	f040 808b 	bne.w	80142ba <__ssvfiscanf_r+0x2ce>
 80141a4:	f04f 30ff 	mov.w	r0, #4294967295
 80141a8:	e08b      	b.n	80142c2 <__ssvfiscanf_r+0x2d6>
 80141aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80141ac:	f042 0220 	orr.w	r2, r2, #32
 80141b0:	9241      	str	r2, [sp, #260]	@ 0x104
 80141b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80141b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80141b8:	9241      	str	r2, [sp, #260]	@ 0x104
 80141ba:	2210      	movs	r2, #16
 80141bc:	2b6e      	cmp	r3, #110	@ 0x6e
 80141be:	9242      	str	r2, [sp, #264]	@ 0x108
 80141c0:	d902      	bls.n	80141c8 <__ssvfiscanf_r+0x1dc>
 80141c2:	e005      	b.n	80141d0 <__ssvfiscanf_r+0x1e4>
 80141c4:	2300      	movs	r3, #0
 80141c6:	9342      	str	r3, [sp, #264]	@ 0x108
 80141c8:	2303      	movs	r3, #3
 80141ca:	e002      	b.n	80141d2 <__ssvfiscanf_r+0x1e6>
 80141cc:	2308      	movs	r3, #8
 80141ce:	9342      	str	r3, [sp, #264]	@ 0x108
 80141d0:	2304      	movs	r3, #4
 80141d2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80141d4:	6863      	ldr	r3, [r4, #4]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	dd39      	ble.n	801424e <__ssvfiscanf_r+0x262>
 80141da:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80141dc:	0659      	lsls	r1, r3, #25
 80141de:	d404      	bmi.n	80141ea <__ssvfiscanf_r+0x1fe>
 80141e0:	6823      	ldr	r3, [r4, #0]
 80141e2:	781a      	ldrb	r2, [r3, #0]
 80141e4:	5cba      	ldrb	r2, [r7, r2]
 80141e6:	0712      	lsls	r2, r2, #28
 80141e8:	d438      	bmi.n	801425c <__ssvfiscanf_r+0x270>
 80141ea:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80141ec:	2b02      	cmp	r3, #2
 80141ee:	dc47      	bgt.n	8014280 <__ssvfiscanf_r+0x294>
 80141f0:	466b      	mov	r3, sp
 80141f2:	4622      	mov	r2, r4
 80141f4:	a941      	add	r1, sp, #260	@ 0x104
 80141f6:	4630      	mov	r0, r6
 80141f8:	f000 f86c 	bl	80142d4 <_scanf_chars>
 80141fc:	2801      	cmp	r0, #1
 80141fe:	d064      	beq.n	80142ca <__ssvfiscanf_r+0x2de>
 8014200:	2802      	cmp	r0, #2
 8014202:	f47f af18 	bne.w	8014036 <__ssvfiscanf_r+0x4a>
 8014206:	e7c9      	b.n	801419c <__ssvfiscanf_r+0x1b0>
 8014208:	220a      	movs	r2, #10
 801420a:	e7d7      	b.n	80141bc <__ssvfiscanf_r+0x1d0>
 801420c:	4629      	mov	r1, r5
 801420e:	4640      	mov	r0, r8
 8014210:	f000 fa5a 	bl	80146c8 <__sccl>
 8014214:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801421a:	9341      	str	r3, [sp, #260]	@ 0x104
 801421c:	4605      	mov	r5, r0
 801421e:	2301      	movs	r3, #1
 8014220:	e7d7      	b.n	80141d2 <__ssvfiscanf_r+0x1e6>
 8014222:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014228:	9341      	str	r3, [sp, #260]	@ 0x104
 801422a:	2300      	movs	r3, #0
 801422c:	e7d1      	b.n	80141d2 <__ssvfiscanf_r+0x1e6>
 801422e:	2302      	movs	r3, #2
 8014230:	e7cf      	b.n	80141d2 <__ssvfiscanf_r+0x1e6>
 8014232:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8014234:	06c3      	lsls	r3, r0, #27
 8014236:	f53f aefe 	bmi.w	8014036 <__ssvfiscanf_r+0x4a>
 801423a:	9b00      	ldr	r3, [sp, #0]
 801423c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801423e:	1d19      	adds	r1, r3, #4
 8014240:	9100      	str	r1, [sp, #0]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	07c0      	lsls	r0, r0, #31
 8014246:	bf4c      	ite	mi
 8014248:	801a      	strhmi	r2, [r3, #0]
 801424a:	601a      	strpl	r2, [r3, #0]
 801424c:	e6f3      	b.n	8014036 <__ssvfiscanf_r+0x4a>
 801424e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014250:	4621      	mov	r1, r4
 8014252:	4630      	mov	r0, r6
 8014254:	4798      	blx	r3
 8014256:	2800      	cmp	r0, #0
 8014258:	d0bf      	beq.n	80141da <__ssvfiscanf_r+0x1ee>
 801425a:	e79f      	b.n	801419c <__ssvfiscanf_r+0x1b0>
 801425c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801425e:	3201      	adds	r2, #1
 8014260:	9245      	str	r2, [sp, #276]	@ 0x114
 8014262:	6862      	ldr	r2, [r4, #4]
 8014264:	3a01      	subs	r2, #1
 8014266:	2a00      	cmp	r2, #0
 8014268:	6062      	str	r2, [r4, #4]
 801426a:	dd02      	ble.n	8014272 <__ssvfiscanf_r+0x286>
 801426c:	3301      	adds	r3, #1
 801426e:	6023      	str	r3, [r4, #0]
 8014270:	e7b6      	b.n	80141e0 <__ssvfiscanf_r+0x1f4>
 8014272:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014274:	4621      	mov	r1, r4
 8014276:	4630      	mov	r0, r6
 8014278:	4798      	blx	r3
 801427a:	2800      	cmp	r0, #0
 801427c:	d0b0      	beq.n	80141e0 <__ssvfiscanf_r+0x1f4>
 801427e:	e78d      	b.n	801419c <__ssvfiscanf_r+0x1b0>
 8014280:	2b04      	cmp	r3, #4
 8014282:	dc0f      	bgt.n	80142a4 <__ssvfiscanf_r+0x2b8>
 8014284:	466b      	mov	r3, sp
 8014286:	4622      	mov	r2, r4
 8014288:	a941      	add	r1, sp, #260	@ 0x104
 801428a:	4630      	mov	r0, r6
 801428c:	f000 f87c 	bl	8014388 <_scanf_i>
 8014290:	e7b4      	b.n	80141fc <__ssvfiscanf_r+0x210>
 8014292:	bf00      	nop
 8014294:	08013f3d 	.word	0x08013f3d
 8014298:	08013fb3 	.word	0x08013fb3
 801429c:	08017061 	.word	0x08017061
 80142a0:	08017167 	.word	0x08017167
 80142a4:	4b0a      	ldr	r3, [pc, #40]	@ (80142d0 <__ssvfiscanf_r+0x2e4>)
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	f43f aec5 	beq.w	8014036 <__ssvfiscanf_r+0x4a>
 80142ac:	466b      	mov	r3, sp
 80142ae:	4622      	mov	r2, r4
 80142b0:	a941      	add	r1, sp, #260	@ 0x104
 80142b2:	4630      	mov	r0, r6
 80142b4:	f7fc fe5a 	bl	8010f6c <_scanf_float>
 80142b8:	e7a0      	b.n	80141fc <__ssvfiscanf_r+0x210>
 80142ba:	89a3      	ldrh	r3, [r4, #12]
 80142bc:	065b      	lsls	r3, r3, #25
 80142be:	f53f af71 	bmi.w	80141a4 <__ssvfiscanf_r+0x1b8>
 80142c2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80142c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142ca:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80142cc:	e7f9      	b.n	80142c2 <__ssvfiscanf_r+0x2d6>
 80142ce:	bf00      	nop
 80142d0:	08010f6d 	.word	0x08010f6d

080142d4 <_scanf_chars>:
 80142d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142d8:	4615      	mov	r5, r2
 80142da:	688a      	ldr	r2, [r1, #8]
 80142dc:	4680      	mov	r8, r0
 80142de:	460c      	mov	r4, r1
 80142e0:	b932      	cbnz	r2, 80142f0 <_scanf_chars+0x1c>
 80142e2:	698a      	ldr	r2, [r1, #24]
 80142e4:	2a00      	cmp	r2, #0
 80142e6:	bf14      	ite	ne
 80142e8:	f04f 32ff 	movne.w	r2, #4294967295
 80142ec:	2201      	moveq	r2, #1
 80142ee:	608a      	str	r2, [r1, #8]
 80142f0:	6822      	ldr	r2, [r4, #0]
 80142f2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8014384 <_scanf_chars+0xb0>
 80142f6:	06d1      	lsls	r1, r2, #27
 80142f8:	bf5f      	itttt	pl
 80142fa:	681a      	ldrpl	r2, [r3, #0]
 80142fc:	1d11      	addpl	r1, r2, #4
 80142fe:	6019      	strpl	r1, [r3, #0]
 8014300:	6816      	ldrpl	r6, [r2, #0]
 8014302:	2700      	movs	r7, #0
 8014304:	69a0      	ldr	r0, [r4, #24]
 8014306:	b188      	cbz	r0, 801432c <_scanf_chars+0x58>
 8014308:	2801      	cmp	r0, #1
 801430a:	d107      	bne.n	801431c <_scanf_chars+0x48>
 801430c:	682b      	ldr	r3, [r5, #0]
 801430e:	781a      	ldrb	r2, [r3, #0]
 8014310:	6963      	ldr	r3, [r4, #20]
 8014312:	5c9b      	ldrb	r3, [r3, r2]
 8014314:	b953      	cbnz	r3, 801432c <_scanf_chars+0x58>
 8014316:	2f00      	cmp	r7, #0
 8014318:	d031      	beq.n	801437e <_scanf_chars+0xaa>
 801431a:	e022      	b.n	8014362 <_scanf_chars+0x8e>
 801431c:	2802      	cmp	r0, #2
 801431e:	d120      	bne.n	8014362 <_scanf_chars+0x8e>
 8014320:	682b      	ldr	r3, [r5, #0]
 8014322:	781b      	ldrb	r3, [r3, #0]
 8014324:	f819 3003 	ldrb.w	r3, [r9, r3]
 8014328:	071b      	lsls	r3, r3, #28
 801432a:	d41a      	bmi.n	8014362 <_scanf_chars+0x8e>
 801432c:	6823      	ldr	r3, [r4, #0]
 801432e:	06da      	lsls	r2, r3, #27
 8014330:	bf5e      	ittt	pl
 8014332:	682b      	ldrpl	r3, [r5, #0]
 8014334:	781b      	ldrbpl	r3, [r3, #0]
 8014336:	f806 3b01 	strbpl.w	r3, [r6], #1
 801433a:	682a      	ldr	r2, [r5, #0]
 801433c:	686b      	ldr	r3, [r5, #4]
 801433e:	3201      	adds	r2, #1
 8014340:	602a      	str	r2, [r5, #0]
 8014342:	68a2      	ldr	r2, [r4, #8]
 8014344:	3b01      	subs	r3, #1
 8014346:	3a01      	subs	r2, #1
 8014348:	606b      	str	r3, [r5, #4]
 801434a:	3701      	adds	r7, #1
 801434c:	60a2      	str	r2, [r4, #8]
 801434e:	b142      	cbz	r2, 8014362 <_scanf_chars+0x8e>
 8014350:	2b00      	cmp	r3, #0
 8014352:	dcd7      	bgt.n	8014304 <_scanf_chars+0x30>
 8014354:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014358:	4629      	mov	r1, r5
 801435a:	4640      	mov	r0, r8
 801435c:	4798      	blx	r3
 801435e:	2800      	cmp	r0, #0
 8014360:	d0d0      	beq.n	8014304 <_scanf_chars+0x30>
 8014362:	6823      	ldr	r3, [r4, #0]
 8014364:	f013 0310 	ands.w	r3, r3, #16
 8014368:	d105      	bne.n	8014376 <_scanf_chars+0xa2>
 801436a:	68e2      	ldr	r2, [r4, #12]
 801436c:	3201      	adds	r2, #1
 801436e:	60e2      	str	r2, [r4, #12]
 8014370:	69a2      	ldr	r2, [r4, #24]
 8014372:	b102      	cbz	r2, 8014376 <_scanf_chars+0xa2>
 8014374:	7033      	strb	r3, [r6, #0]
 8014376:	6923      	ldr	r3, [r4, #16]
 8014378:	443b      	add	r3, r7
 801437a:	6123      	str	r3, [r4, #16]
 801437c:	2000      	movs	r0, #0
 801437e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014382:	bf00      	nop
 8014384:	08017061 	.word	0x08017061

08014388 <_scanf_i>:
 8014388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801438c:	4698      	mov	r8, r3
 801438e:	4b74      	ldr	r3, [pc, #464]	@ (8014560 <_scanf_i+0x1d8>)
 8014390:	460c      	mov	r4, r1
 8014392:	4682      	mov	sl, r0
 8014394:	4616      	mov	r6, r2
 8014396:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801439a:	b087      	sub	sp, #28
 801439c:	ab03      	add	r3, sp, #12
 801439e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80143a2:	4b70      	ldr	r3, [pc, #448]	@ (8014564 <_scanf_i+0x1dc>)
 80143a4:	69a1      	ldr	r1, [r4, #24]
 80143a6:	4a70      	ldr	r2, [pc, #448]	@ (8014568 <_scanf_i+0x1e0>)
 80143a8:	2903      	cmp	r1, #3
 80143aa:	bf08      	it	eq
 80143ac:	461a      	moveq	r2, r3
 80143ae:	68a3      	ldr	r3, [r4, #8]
 80143b0:	9201      	str	r2, [sp, #4]
 80143b2:	1e5a      	subs	r2, r3, #1
 80143b4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80143b8:	bf88      	it	hi
 80143ba:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80143be:	4627      	mov	r7, r4
 80143c0:	bf82      	ittt	hi
 80143c2:	eb03 0905 	addhi.w	r9, r3, r5
 80143c6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80143ca:	60a3      	strhi	r3, [r4, #8]
 80143cc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80143d0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80143d4:	bf98      	it	ls
 80143d6:	f04f 0900 	movls.w	r9, #0
 80143da:	6023      	str	r3, [r4, #0]
 80143dc:	463d      	mov	r5, r7
 80143de:	f04f 0b00 	mov.w	fp, #0
 80143e2:	6831      	ldr	r1, [r6, #0]
 80143e4:	ab03      	add	r3, sp, #12
 80143e6:	7809      	ldrb	r1, [r1, #0]
 80143e8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80143ec:	2202      	movs	r2, #2
 80143ee:	f7eb ff17 	bl	8000220 <memchr>
 80143f2:	b328      	cbz	r0, 8014440 <_scanf_i+0xb8>
 80143f4:	f1bb 0f01 	cmp.w	fp, #1
 80143f8:	d159      	bne.n	80144ae <_scanf_i+0x126>
 80143fa:	6862      	ldr	r2, [r4, #4]
 80143fc:	b92a      	cbnz	r2, 801440a <_scanf_i+0x82>
 80143fe:	6822      	ldr	r2, [r4, #0]
 8014400:	2108      	movs	r1, #8
 8014402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014406:	6061      	str	r1, [r4, #4]
 8014408:	6022      	str	r2, [r4, #0]
 801440a:	6822      	ldr	r2, [r4, #0]
 801440c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8014410:	6022      	str	r2, [r4, #0]
 8014412:	68a2      	ldr	r2, [r4, #8]
 8014414:	1e51      	subs	r1, r2, #1
 8014416:	60a1      	str	r1, [r4, #8]
 8014418:	b192      	cbz	r2, 8014440 <_scanf_i+0xb8>
 801441a:	6832      	ldr	r2, [r6, #0]
 801441c:	1c51      	adds	r1, r2, #1
 801441e:	6031      	str	r1, [r6, #0]
 8014420:	7812      	ldrb	r2, [r2, #0]
 8014422:	f805 2b01 	strb.w	r2, [r5], #1
 8014426:	6872      	ldr	r2, [r6, #4]
 8014428:	3a01      	subs	r2, #1
 801442a:	2a00      	cmp	r2, #0
 801442c:	6072      	str	r2, [r6, #4]
 801442e:	dc07      	bgt.n	8014440 <_scanf_i+0xb8>
 8014430:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8014434:	4631      	mov	r1, r6
 8014436:	4650      	mov	r0, sl
 8014438:	4790      	blx	r2
 801443a:	2800      	cmp	r0, #0
 801443c:	f040 8085 	bne.w	801454a <_scanf_i+0x1c2>
 8014440:	f10b 0b01 	add.w	fp, fp, #1
 8014444:	f1bb 0f03 	cmp.w	fp, #3
 8014448:	d1cb      	bne.n	80143e2 <_scanf_i+0x5a>
 801444a:	6863      	ldr	r3, [r4, #4]
 801444c:	b90b      	cbnz	r3, 8014452 <_scanf_i+0xca>
 801444e:	230a      	movs	r3, #10
 8014450:	6063      	str	r3, [r4, #4]
 8014452:	6863      	ldr	r3, [r4, #4]
 8014454:	4945      	ldr	r1, [pc, #276]	@ (801456c <_scanf_i+0x1e4>)
 8014456:	6960      	ldr	r0, [r4, #20]
 8014458:	1ac9      	subs	r1, r1, r3
 801445a:	f000 f935 	bl	80146c8 <__sccl>
 801445e:	f04f 0b00 	mov.w	fp, #0
 8014462:	68a3      	ldr	r3, [r4, #8]
 8014464:	6822      	ldr	r2, [r4, #0]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d03d      	beq.n	80144e6 <_scanf_i+0x15e>
 801446a:	6831      	ldr	r1, [r6, #0]
 801446c:	6960      	ldr	r0, [r4, #20]
 801446e:	f891 c000 	ldrb.w	ip, [r1]
 8014472:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014476:	2800      	cmp	r0, #0
 8014478:	d035      	beq.n	80144e6 <_scanf_i+0x15e>
 801447a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801447e:	d124      	bne.n	80144ca <_scanf_i+0x142>
 8014480:	0510      	lsls	r0, r2, #20
 8014482:	d522      	bpl.n	80144ca <_scanf_i+0x142>
 8014484:	f10b 0b01 	add.w	fp, fp, #1
 8014488:	f1b9 0f00 	cmp.w	r9, #0
 801448c:	d003      	beq.n	8014496 <_scanf_i+0x10e>
 801448e:	3301      	adds	r3, #1
 8014490:	f109 39ff 	add.w	r9, r9, #4294967295
 8014494:	60a3      	str	r3, [r4, #8]
 8014496:	6873      	ldr	r3, [r6, #4]
 8014498:	3b01      	subs	r3, #1
 801449a:	2b00      	cmp	r3, #0
 801449c:	6073      	str	r3, [r6, #4]
 801449e:	dd1b      	ble.n	80144d8 <_scanf_i+0x150>
 80144a0:	6833      	ldr	r3, [r6, #0]
 80144a2:	3301      	adds	r3, #1
 80144a4:	6033      	str	r3, [r6, #0]
 80144a6:	68a3      	ldr	r3, [r4, #8]
 80144a8:	3b01      	subs	r3, #1
 80144aa:	60a3      	str	r3, [r4, #8]
 80144ac:	e7d9      	b.n	8014462 <_scanf_i+0xda>
 80144ae:	f1bb 0f02 	cmp.w	fp, #2
 80144b2:	d1ae      	bne.n	8014412 <_scanf_i+0x8a>
 80144b4:	6822      	ldr	r2, [r4, #0]
 80144b6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80144ba:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80144be:	d1bf      	bne.n	8014440 <_scanf_i+0xb8>
 80144c0:	2110      	movs	r1, #16
 80144c2:	6061      	str	r1, [r4, #4]
 80144c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80144c8:	e7a2      	b.n	8014410 <_scanf_i+0x88>
 80144ca:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80144ce:	6022      	str	r2, [r4, #0]
 80144d0:	780b      	ldrb	r3, [r1, #0]
 80144d2:	f805 3b01 	strb.w	r3, [r5], #1
 80144d6:	e7de      	b.n	8014496 <_scanf_i+0x10e>
 80144d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80144dc:	4631      	mov	r1, r6
 80144de:	4650      	mov	r0, sl
 80144e0:	4798      	blx	r3
 80144e2:	2800      	cmp	r0, #0
 80144e4:	d0df      	beq.n	80144a6 <_scanf_i+0x11e>
 80144e6:	6823      	ldr	r3, [r4, #0]
 80144e8:	05d9      	lsls	r1, r3, #23
 80144ea:	d50d      	bpl.n	8014508 <_scanf_i+0x180>
 80144ec:	42bd      	cmp	r5, r7
 80144ee:	d909      	bls.n	8014504 <_scanf_i+0x17c>
 80144f0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80144f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80144f8:	4632      	mov	r2, r6
 80144fa:	4650      	mov	r0, sl
 80144fc:	4798      	blx	r3
 80144fe:	f105 39ff 	add.w	r9, r5, #4294967295
 8014502:	464d      	mov	r5, r9
 8014504:	42bd      	cmp	r5, r7
 8014506:	d028      	beq.n	801455a <_scanf_i+0x1d2>
 8014508:	6822      	ldr	r2, [r4, #0]
 801450a:	f012 0210 	ands.w	r2, r2, #16
 801450e:	d113      	bne.n	8014538 <_scanf_i+0x1b0>
 8014510:	702a      	strb	r2, [r5, #0]
 8014512:	6863      	ldr	r3, [r4, #4]
 8014514:	9e01      	ldr	r6, [sp, #4]
 8014516:	4639      	mov	r1, r7
 8014518:	4650      	mov	r0, sl
 801451a:	47b0      	blx	r6
 801451c:	f8d8 3000 	ldr.w	r3, [r8]
 8014520:	6821      	ldr	r1, [r4, #0]
 8014522:	1d1a      	adds	r2, r3, #4
 8014524:	f8c8 2000 	str.w	r2, [r8]
 8014528:	f011 0f20 	tst.w	r1, #32
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	d00f      	beq.n	8014550 <_scanf_i+0x1c8>
 8014530:	6018      	str	r0, [r3, #0]
 8014532:	68e3      	ldr	r3, [r4, #12]
 8014534:	3301      	adds	r3, #1
 8014536:	60e3      	str	r3, [r4, #12]
 8014538:	6923      	ldr	r3, [r4, #16]
 801453a:	1bed      	subs	r5, r5, r7
 801453c:	445d      	add	r5, fp
 801453e:	442b      	add	r3, r5
 8014540:	6123      	str	r3, [r4, #16]
 8014542:	2000      	movs	r0, #0
 8014544:	b007      	add	sp, #28
 8014546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801454a:	f04f 0b00 	mov.w	fp, #0
 801454e:	e7ca      	b.n	80144e6 <_scanf_i+0x15e>
 8014550:	07ca      	lsls	r2, r1, #31
 8014552:	bf4c      	ite	mi
 8014554:	8018      	strhmi	r0, [r3, #0]
 8014556:	6018      	strpl	r0, [r3, #0]
 8014558:	e7eb      	b.n	8014532 <_scanf_i+0x1aa>
 801455a:	2001      	movs	r0, #1
 801455c:	e7f2      	b.n	8014544 <_scanf_i+0x1bc>
 801455e:	bf00      	nop
 8014560:	08016d9c 	.word	0x08016d9c
 8014564:	08013c89 	.word	0x08013c89
 8014568:	0801504d 	.word	0x0801504d
 801456c:	08017182 	.word	0x08017182

08014570 <__sflush_r>:
 8014570:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014578:	0716      	lsls	r6, r2, #28
 801457a:	4605      	mov	r5, r0
 801457c:	460c      	mov	r4, r1
 801457e:	d454      	bmi.n	801462a <__sflush_r+0xba>
 8014580:	684b      	ldr	r3, [r1, #4]
 8014582:	2b00      	cmp	r3, #0
 8014584:	dc02      	bgt.n	801458c <__sflush_r+0x1c>
 8014586:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014588:	2b00      	cmp	r3, #0
 801458a:	dd48      	ble.n	801461e <__sflush_r+0xae>
 801458c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801458e:	2e00      	cmp	r6, #0
 8014590:	d045      	beq.n	801461e <__sflush_r+0xae>
 8014592:	2300      	movs	r3, #0
 8014594:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014598:	682f      	ldr	r7, [r5, #0]
 801459a:	6a21      	ldr	r1, [r4, #32]
 801459c:	602b      	str	r3, [r5, #0]
 801459e:	d030      	beq.n	8014602 <__sflush_r+0x92>
 80145a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80145a2:	89a3      	ldrh	r3, [r4, #12]
 80145a4:	0759      	lsls	r1, r3, #29
 80145a6:	d505      	bpl.n	80145b4 <__sflush_r+0x44>
 80145a8:	6863      	ldr	r3, [r4, #4]
 80145aa:	1ad2      	subs	r2, r2, r3
 80145ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80145ae:	b10b      	cbz	r3, 80145b4 <__sflush_r+0x44>
 80145b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80145b2:	1ad2      	subs	r2, r2, r3
 80145b4:	2300      	movs	r3, #0
 80145b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80145b8:	6a21      	ldr	r1, [r4, #32]
 80145ba:	4628      	mov	r0, r5
 80145bc:	47b0      	blx	r6
 80145be:	1c43      	adds	r3, r0, #1
 80145c0:	89a3      	ldrh	r3, [r4, #12]
 80145c2:	d106      	bne.n	80145d2 <__sflush_r+0x62>
 80145c4:	6829      	ldr	r1, [r5, #0]
 80145c6:	291d      	cmp	r1, #29
 80145c8:	d82b      	bhi.n	8014622 <__sflush_r+0xb2>
 80145ca:	4a2a      	ldr	r2, [pc, #168]	@ (8014674 <__sflush_r+0x104>)
 80145cc:	410a      	asrs	r2, r1
 80145ce:	07d6      	lsls	r6, r2, #31
 80145d0:	d427      	bmi.n	8014622 <__sflush_r+0xb2>
 80145d2:	2200      	movs	r2, #0
 80145d4:	6062      	str	r2, [r4, #4]
 80145d6:	04d9      	lsls	r1, r3, #19
 80145d8:	6922      	ldr	r2, [r4, #16]
 80145da:	6022      	str	r2, [r4, #0]
 80145dc:	d504      	bpl.n	80145e8 <__sflush_r+0x78>
 80145de:	1c42      	adds	r2, r0, #1
 80145e0:	d101      	bne.n	80145e6 <__sflush_r+0x76>
 80145e2:	682b      	ldr	r3, [r5, #0]
 80145e4:	b903      	cbnz	r3, 80145e8 <__sflush_r+0x78>
 80145e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80145e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80145ea:	602f      	str	r7, [r5, #0]
 80145ec:	b1b9      	cbz	r1, 801461e <__sflush_r+0xae>
 80145ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80145f2:	4299      	cmp	r1, r3
 80145f4:	d002      	beq.n	80145fc <__sflush_r+0x8c>
 80145f6:	4628      	mov	r0, r5
 80145f8:	f7fd ff12 	bl	8012420 <_free_r>
 80145fc:	2300      	movs	r3, #0
 80145fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8014600:	e00d      	b.n	801461e <__sflush_r+0xae>
 8014602:	2301      	movs	r3, #1
 8014604:	4628      	mov	r0, r5
 8014606:	47b0      	blx	r6
 8014608:	4602      	mov	r2, r0
 801460a:	1c50      	adds	r0, r2, #1
 801460c:	d1c9      	bne.n	80145a2 <__sflush_r+0x32>
 801460e:	682b      	ldr	r3, [r5, #0]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d0c6      	beq.n	80145a2 <__sflush_r+0x32>
 8014614:	2b1d      	cmp	r3, #29
 8014616:	d001      	beq.n	801461c <__sflush_r+0xac>
 8014618:	2b16      	cmp	r3, #22
 801461a:	d11e      	bne.n	801465a <__sflush_r+0xea>
 801461c:	602f      	str	r7, [r5, #0]
 801461e:	2000      	movs	r0, #0
 8014620:	e022      	b.n	8014668 <__sflush_r+0xf8>
 8014622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014626:	b21b      	sxth	r3, r3
 8014628:	e01b      	b.n	8014662 <__sflush_r+0xf2>
 801462a:	690f      	ldr	r7, [r1, #16]
 801462c:	2f00      	cmp	r7, #0
 801462e:	d0f6      	beq.n	801461e <__sflush_r+0xae>
 8014630:	0793      	lsls	r3, r2, #30
 8014632:	680e      	ldr	r6, [r1, #0]
 8014634:	bf08      	it	eq
 8014636:	694b      	ldreq	r3, [r1, #20]
 8014638:	600f      	str	r7, [r1, #0]
 801463a:	bf18      	it	ne
 801463c:	2300      	movne	r3, #0
 801463e:	eba6 0807 	sub.w	r8, r6, r7
 8014642:	608b      	str	r3, [r1, #8]
 8014644:	f1b8 0f00 	cmp.w	r8, #0
 8014648:	dde9      	ble.n	801461e <__sflush_r+0xae>
 801464a:	6a21      	ldr	r1, [r4, #32]
 801464c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801464e:	4643      	mov	r3, r8
 8014650:	463a      	mov	r2, r7
 8014652:	4628      	mov	r0, r5
 8014654:	47b0      	blx	r6
 8014656:	2800      	cmp	r0, #0
 8014658:	dc08      	bgt.n	801466c <__sflush_r+0xfc>
 801465a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801465e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014662:	81a3      	strh	r3, [r4, #12]
 8014664:	f04f 30ff 	mov.w	r0, #4294967295
 8014668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801466c:	4407      	add	r7, r0
 801466e:	eba8 0800 	sub.w	r8, r8, r0
 8014672:	e7e7      	b.n	8014644 <__sflush_r+0xd4>
 8014674:	dfbffffe 	.word	0xdfbffffe

08014678 <_fflush_r>:
 8014678:	b538      	push	{r3, r4, r5, lr}
 801467a:	690b      	ldr	r3, [r1, #16]
 801467c:	4605      	mov	r5, r0
 801467e:	460c      	mov	r4, r1
 8014680:	b913      	cbnz	r3, 8014688 <_fflush_r+0x10>
 8014682:	2500      	movs	r5, #0
 8014684:	4628      	mov	r0, r5
 8014686:	bd38      	pop	{r3, r4, r5, pc}
 8014688:	b118      	cbz	r0, 8014692 <_fflush_r+0x1a>
 801468a:	6a03      	ldr	r3, [r0, #32]
 801468c:	b90b      	cbnz	r3, 8014692 <_fflush_r+0x1a>
 801468e:	f7fc ff0d 	bl	80114ac <__sinit>
 8014692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d0f3      	beq.n	8014682 <_fflush_r+0xa>
 801469a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801469c:	07d0      	lsls	r0, r2, #31
 801469e:	d404      	bmi.n	80146aa <_fflush_r+0x32>
 80146a0:	0599      	lsls	r1, r3, #22
 80146a2:	d402      	bmi.n	80146aa <_fflush_r+0x32>
 80146a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80146a6:	f7fd f856 	bl	8011756 <__retarget_lock_acquire_recursive>
 80146aa:	4628      	mov	r0, r5
 80146ac:	4621      	mov	r1, r4
 80146ae:	f7ff ff5f 	bl	8014570 <__sflush_r>
 80146b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80146b4:	07da      	lsls	r2, r3, #31
 80146b6:	4605      	mov	r5, r0
 80146b8:	d4e4      	bmi.n	8014684 <_fflush_r+0xc>
 80146ba:	89a3      	ldrh	r3, [r4, #12]
 80146bc:	059b      	lsls	r3, r3, #22
 80146be:	d4e1      	bmi.n	8014684 <_fflush_r+0xc>
 80146c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80146c2:	f7fd f849 	bl	8011758 <__retarget_lock_release_recursive>
 80146c6:	e7dd      	b.n	8014684 <_fflush_r+0xc>

080146c8 <__sccl>:
 80146c8:	b570      	push	{r4, r5, r6, lr}
 80146ca:	780b      	ldrb	r3, [r1, #0]
 80146cc:	4604      	mov	r4, r0
 80146ce:	2b5e      	cmp	r3, #94	@ 0x5e
 80146d0:	bf0b      	itete	eq
 80146d2:	784b      	ldrbeq	r3, [r1, #1]
 80146d4:	1c4a      	addne	r2, r1, #1
 80146d6:	1c8a      	addeq	r2, r1, #2
 80146d8:	2100      	movne	r1, #0
 80146da:	bf08      	it	eq
 80146dc:	2101      	moveq	r1, #1
 80146de:	3801      	subs	r0, #1
 80146e0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80146e4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80146e8:	42a8      	cmp	r0, r5
 80146ea:	d1fb      	bne.n	80146e4 <__sccl+0x1c>
 80146ec:	b90b      	cbnz	r3, 80146f2 <__sccl+0x2a>
 80146ee:	1e50      	subs	r0, r2, #1
 80146f0:	bd70      	pop	{r4, r5, r6, pc}
 80146f2:	f081 0101 	eor.w	r1, r1, #1
 80146f6:	54e1      	strb	r1, [r4, r3]
 80146f8:	4610      	mov	r0, r2
 80146fa:	4602      	mov	r2, r0
 80146fc:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014700:	2d2d      	cmp	r5, #45	@ 0x2d
 8014702:	d005      	beq.n	8014710 <__sccl+0x48>
 8014704:	2d5d      	cmp	r5, #93	@ 0x5d
 8014706:	d016      	beq.n	8014736 <__sccl+0x6e>
 8014708:	2d00      	cmp	r5, #0
 801470a:	d0f1      	beq.n	80146f0 <__sccl+0x28>
 801470c:	462b      	mov	r3, r5
 801470e:	e7f2      	b.n	80146f6 <__sccl+0x2e>
 8014710:	7846      	ldrb	r6, [r0, #1]
 8014712:	2e5d      	cmp	r6, #93	@ 0x5d
 8014714:	d0fa      	beq.n	801470c <__sccl+0x44>
 8014716:	42b3      	cmp	r3, r6
 8014718:	dcf8      	bgt.n	801470c <__sccl+0x44>
 801471a:	3002      	adds	r0, #2
 801471c:	461a      	mov	r2, r3
 801471e:	3201      	adds	r2, #1
 8014720:	4296      	cmp	r6, r2
 8014722:	54a1      	strb	r1, [r4, r2]
 8014724:	dcfb      	bgt.n	801471e <__sccl+0x56>
 8014726:	1af2      	subs	r2, r6, r3
 8014728:	3a01      	subs	r2, #1
 801472a:	1c5d      	adds	r5, r3, #1
 801472c:	42b3      	cmp	r3, r6
 801472e:	bfa8      	it	ge
 8014730:	2200      	movge	r2, #0
 8014732:	18ab      	adds	r3, r5, r2
 8014734:	e7e1      	b.n	80146fa <__sccl+0x32>
 8014736:	4610      	mov	r0, r2
 8014738:	e7da      	b.n	80146f0 <__sccl+0x28>

0801473a <__submore>:
 801473a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801473e:	460c      	mov	r4, r1
 8014740:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8014742:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014746:	4299      	cmp	r1, r3
 8014748:	d11d      	bne.n	8014786 <__submore+0x4c>
 801474a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801474e:	f7fd fedb 	bl	8012508 <_malloc_r>
 8014752:	b918      	cbnz	r0, 801475c <__submore+0x22>
 8014754:	f04f 30ff 	mov.w	r0, #4294967295
 8014758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801475c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014760:	63a3      	str	r3, [r4, #56]	@ 0x38
 8014762:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8014766:	6360      	str	r0, [r4, #52]	@ 0x34
 8014768:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801476c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8014770:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8014774:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014778:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801477c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8014780:	6020      	str	r0, [r4, #0]
 8014782:	2000      	movs	r0, #0
 8014784:	e7e8      	b.n	8014758 <__submore+0x1e>
 8014786:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8014788:	0077      	lsls	r7, r6, #1
 801478a:	463a      	mov	r2, r7
 801478c:	f000 fbc1 	bl	8014f12 <_realloc_r>
 8014790:	4605      	mov	r5, r0
 8014792:	2800      	cmp	r0, #0
 8014794:	d0de      	beq.n	8014754 <__submore+0x1a>
 8014796:	eb00 0806 	add.w	r8, r0, r6
 801479a:	4601      	mov	r1, r0
 801479c:	4632      	mov	r2, r6
 801479e:	4640      	mov	r0, r8
 80147a0:	f7fc ffdb 	bl	801175a <memcpy>
 80147a4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80147a8:	f8c4 8000 	str.w	r8, [r4]
 80147ac:	e7e9      	b.n	8014782 <__submore+0x48>

080147ae <memmove>:
 80147ae:	4288      	cmp	r0, r1
 80147b0:	b510      	push	{r4, lr}
 80147b2:	eb01 0402 	add.w	r4, r1, r2
 80147b6:	d902      	bls.n	80147be <memmove+0x10>
 80147b8:	4284      	cmp	r4, r0
 80147ba:	4623      	mov	r3, r4
 80147bc:	d807      	bhi.n	80147ce <memmove+0x20>
 80147be:	1e43      	subs	r3, r0, #1
 80147c0:	42a1      	cmp	r1, r4
 80147c2:	d008      	beq.n	80147d6 <memmove+0x28>
 80147c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80147c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80147cc:	e7f8      	b.n	80147c0 <memmove+0x12>
 80147ce:	4402      	add	r2, r0
 80147d0:	4601      	mov	r1, r0
 80147d2:	428a      	cmp	r2, r1
 80147d4:	d100      	bne.n	80147d8 <memmove+0x2a>
 80147d6:	bd10      	pop	{r4, pc}
 80147d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80147dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80147e0:	e7f7      	b.n	80147d2 <memmove+0x24>
	...

080147e4 <_sbrk_r>:
 80147e4:	b538      	push	{r3, r4, r5, lr}
 80147e6:	4d06      	ldr	r5, [pc, #24]	@ (8014800 <_sbrk_r+0x1c>)
 80147e8:	2300      	movs	r3, #0
 80147ea:	4604      	mov	r4, r0
 80147ec:	4608      	mov	r0, r1
 80147ee:	602b      	str	r3, [r5, #0]
 80147f0:	f7ef fbb4 	bl	8003f5c <_sbrk>
 80147f4:	1c43      	adds	r3, r0, #1
 80147f6:	d102      	bne.n	80147fe <_sbrk_r+0x1a>
 80147f8:	682b      	ldr	r3, [r5, #0]
 80147fa:	b103      	cbz	r3, 80147fe <_sbrk_r+0x1a>
 80147fc:	6023      	str	r3, [r4, #0]
 80147fe:	bd38      	pop	{r3, r4, r5, pc}
 8014800:	20002670 	.word	0x20002670
 8014804:	00000000 	.word	0x00000000

08014808 <nan>:
 8014808:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014810 <nan+0x8>
 801480c:	4770      	bx	lr
 801480e:	bf00      	nop
 8014810:	00000000 	.word	0x00000000
 8014814:	7ff80000 	.word	0x7ff80000

08014818 <__assert_func>:
 8014818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801481a:	4614      	mov	r4, r2
 801481c:	461a      	mov	r2, r3
 801481e:	4b09      	ldr	r3, [pc, #36]	@ (8014844 <__assert_func+0x2c>)
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	4605      	mov	r5, r0
 8014824:	68d8      	ldr	r0, [r3, #12]
 8014826:	b954      	cbnz	r4, 801483e <__assert_func+0x26>
 8014828:	4b07      	ldr	r3, [pc, #28]	@ (8014848 <__assert_func+0x30>)
 801482a:	461c      	mov	r4, r3
 801482c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014830:	9100      	str	r1, [sp, #0]
 8014832:	462b      	mov	r3, r5
 8014834:	4905      	ldr	r1, [pc, #20]	@ (801484c <__assert_func+0x34>)
 8014836:	f000 fc19 	bl	801506c <fiprintf>
 801483a:	f000 fc29 	bl	8015090 <abort>
 801483e:	4b04      	ldr	r3, [pc, #16]	@ (8014850 <__assert_func+0x38>)
 8014840:	e7f4      	b.n	801482c <__assert_func+0x14>
 8014842:	bf00      	nop
 8014844:	200001b0 	.word	0x200001b0
 8014848:	080171d0 	.word	0x080171d0
 801484c:	080171a2 	.word	0x080171a2
 8014850:	08017195 	.word	0x08017195

08014854 <_calloc_r>:
 8014854:	b570      	push	{r4, r5, r6, lr}
 8014856:	fba1 5402 	umull	r5, r4, r1, r2
 801485a:	b93c      	cbnz	r4, 801486c <_calloc_r+0x18>
 801485c:	4629      	mov	r1, r5
 801485e:	f7fd fe53 	bl	8012508 <_malloc_r>
 8014862:	4606      	mov	r6, r0
 8014864:	b928      	cbnz	r0, 8014872 <_calloc_r+0x1e>
 8014866:	2600      	movs	r6, #0
 8014868:	4630      	mov	r0, r6
 801486a:	bd70      	pop	{r4, r5, r6, pc}
 801486c:	220c      	movs	r2, #12
 801486e:	6002      	str	r2, [r0, #0]
 8014870:	e7f9      	b.n	8014866 <_calloc_r+0x12>
 8014872:	462a      	mov	r2, r5
 8014874:	4621      	mov	r1, r4
 8014876:	f7fc fede 	bl	8011636 <memset>
 801487a:	e7f5      	b.n	8014868 <_calloc_r+0x14>

0801487c <rshift>:
 801487c:	6903      	ldr	r3, [r0, #16]
 801487e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014882:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014886:	ea4f 1261 	mov.w	r2, r1, asr #5
 801488a:	f100 0414 	add.w	r4, r0, #20
 801488e:	dd45      	ble.n	801491c <rshift+0xa0>
 8014890:	f011 011f 	ands.w	r1, r1, #31
 8014894:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014898:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801489c:	d10c      	bne.n	80148b8 <rshift+0x3c>
 801489e:	f100 0710 	add.w	r7, r0, #16
 80148a2:	4629      	mov	r1, r5
 80148a4:	42b1      	cmp	r1, r6
 80148a6:	d334      	bcc.n	8014912 <rshift+0x96>
 80148a8:	1a9b      	subs	r3, r3, r2
 80148aa:	009b      	lsls	r3, r3, #2
 80148ac:	1eea      	subs	r2, r5, #3
 80148ae:	4296      	cmp	r6, r2
 80148b0:	bf38      	it	cc
 80148b2:	2300      	movcc	r3, #0
 80148b4:	4423      	add	r3, r4
 80148b6:	e015      	b.n	80148e4 <rshift+0x68>
 80148b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80148bc:	f1c1 0820 	rsb	r8, r1, #32
 80148c0:	40cf      	lsrs	r7, r1
 80148c2:	f105 0e04 	add.w	lr, r5, #4
 80148c6:	46a1      	mov	r9, r4
 80148c8:	4576      	cmp	r6, lr
 80148ca:	46f4      	mov	ip, lr
 80148cc:	d815      	bhi.n	80148fa <rshift+0x7e>
 80148ce:	1a9a      	subs	r2, r3, r2
 80148d0:	0092      	lsls	r2, r2, #2
 80148d2:	3a04      	subs	r2, #4
 80148d4:	3501      	adds	r5, #1
 80148d6:	42ae      	cmp	r6, r5
 80148d8:	bf38      	it	cc
 80148da:	2200      	movcc	r2, #0
 80148dc:	18a3      	adds	r3, r4, r2
 80148de:	50a7      	str	r7, [r4, r2]
 80148e0:	b107      	cbz	r7, 80148e4 <rshift+0x68>
 80148e2:	3304      	adds	r3, #4
 80148e4:	1b1a      	subs	r2, r3, r4
 80148e6:	42a3      	cmp	r3, r4
 80148e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80148ec:	bf08      	it	eq
 80148ee:	2300      	moveq	r3, #0
 80148f0:	6102      	str	r2, [r0, #16]
 80148f2:	bf08      	it	eq
 80148f4:	6143      	streq	r3, [r0, #20]
 80148f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148fa:	f8dc c000 	ldr.w	ip, [ip]
 80148fe:	fa0c fc08 	lsl.w	ip, ip, r8
 8014902:	ea4c 0707 	orr.w	r7, ip, r7
 8014906:	f849 7b04 	str.w	r7, [r9], #4
 801490a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801490e:	40cf      	lsrs	r7, r1
 8014910:	e7da      	b.n	80148c8 <rshift+0x4c>
 8014912:	f851 cb04 	ldr.w	ip, [r1], #4
 8014916:	f847 cf04 	str.w	ip, [r7, #4]!
 801491a:	e7c3      	b.n	80148a4 <rshift+0x28>
 801491c:	4623      	mov	r3, r4
 801491e:	e7e1      	b.n	80148e4 <rshift+0x68>

08014920 <__hexdig_fun>:
 8014920:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014924:	2b09      	cmp	r3, #9
 8014926:	d802      	bhi.n	801492e <__hexdig_fun+0xe>
 8014928:	3820      	subs	r0, #32
 801492a:	b2c0      	uxtb	r0, r0
 801492c:	4770      	bx	lr
 801492e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014932:	2b05      	cmp	r3, #5
 8014934:	d801      	bhi.n	801493a <__hexdig_fun+0x1a>
 8014936:	3847      	subs	r0, #71	@ 0x47
 8014938:	e7f7      	b.n	801492a <__hexdig_fun+0xa>
 801493a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801493e:	2b05      	cmp	r3, #5
 8014940:	d801      	bhi.n	8014946 <__hexdig_fun+0x26>
 8014942:	3827      	subs	r0, #39	@ 0x27
 8014944:	e7f1      	b.n	801492a <__hexdig_fun+0xa>
 8014946:	2000      	movs	r0, #0
 8014948:	4770      	bx	lr
	...

0801494c <__gethex>:
 801494c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014950:	b085      	sub	sp, #20
 8014952:	468a      	mov	sl, r1
 8014954:	9302      	str	r3, [sp, #8]
 8014956:	680b      	ldr	r3, [r1, #0]
 8014958:	9001      	str	r0, [sp, #4]
 801495a:	4690      	mov	r8, r2
 801495c:	1c9c      	adds	r4, r3, #2
 801495e:	46a1      	mov	r9, r4
 8014960:	f814 0b01 	ldrb.w	r0, [r4], #1
 8014964:	2830      	cmp	r0, #48	@ 0x30
 8014966:	d0fa      	beq.n	801495e <__gethex+0x12>
 8014968:	eba9 0303 	sub.w	r3, r9, r3
 801496c:	f1a3 0b02 	sub.w	fp, r3, #2
 8014970:	f7ff ffd6 	bl	8014920 <__hexdig_fun>
 8014974:	4605      	mov	r5, r0
 8014976:	2800      	cmp	r0, #0
 8014978:	d168      	bne.n	8014a4c <__gethex+0x100>
 801497a:	49a0      	ldr	r1, [pc, #640]	@ (8014bfc <__gethex+0x2b0>)
 801497c:	2201      	movs	r2, #1
 801497e:	4648      	mov	r0, r9
 8014980:	f7fc fe61 	bl	8011646 <strncmp>
 8014984:	4607      	mov	r7, r0
 8014986:	2800      	cmp	r0, #0
 8014988:	d167      	bne.n	8014a5a <__gethex+0x10e>
 801498a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801498e:	4626      	mov	r6, r4
 8014990:	f7ff ffc6 	bl	8014920 <__hexdig_fun>
 8014994:	2800      	cmp	r0, #0
 8014996:	d062      	beq.n	8014a5e <__gethex+0x112>
 8014998:	4623      	mov	r3, r4
 801499a:	7818      	ldrb	r0, [r3, #0]
 801499c:	2830      	cmp	r0, #48	@ 0x30
 801499e:	4699      	mov	r9, r3
 80149a0:	f103 0301 	add.w	r3, r3, #1
 80149a4:	d0f9      	beq.n	801499a <__gethex+0x4e>
 80149a6:	f7ff ffbb 	bl	8014920 <__hexdig_fun>
 80149aa:	fab0 f580 	clz	r5, r0
 80149ae:	096d      	lsrs	r5, r5, #5
 80149b0:	f04f 0b01 	mov.w	fp, #1
 80149b4:	464a      	mov	r2, r9
 80149b6:	4616      	mov	r6, r2
 80149b8:	3201      	adds	r2, #1
 80149ba:	7830      	ldrb	r0, [r6, #0]
 80149bc:	f7ff ffb0 	bl	8014920 <__hexdig_fun>
 80149c0:	2800      	cmp	r0, #0
 80149c2:	d1f8      	bne.n	80149b6 <__gethex+0x6a>
 80149c4:	498d      	ldr	r1, [pc, #564]	@ (8014bfc <__gethex+0x2b0>)
 80149c6:	2201      	movs	r2, #1
 80149c8:	4630      	mov	r0, r6
 80149ca:	f7fc fe3c 	bl	8011646 <strncmp>
 80149ce:	2800      	cmp	r0, #0
 80149d0:	d13f      	bne.n	8014a52 <__gethex+0x106>
 80149d2:	b944      	cbnz	r4, 80149e6 <__gethex+0x9a>
 80149d4:	1c74      	adds	r4, r6, #1
 80149d6:	4622      	mov	r2, r4
 80149d8:	4616      	mov	r6, r2
 80149da:	3201      	adds	r2, #1
 80149dc:	7830      	ldrb	r0, [r6, #0]
 80149de:	f7ff ff9f 	bl	8014920 <__hexdig_fun>
 80149e2:	2800      	cmp	r0, #0
 80149e4:	d1f8      	bne.n	80149d8 <__gethex+0x8c>
 80149e6:	1ba4      	subs	r4, r4, r6
 80149e8:	00a7      	lsls	r7, r4, #2
 80149ea:	7833      	ldrb	r3, [r6, #0]
 80149ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80149f0:	2b50      	cmp	r3, #80	@ 0x50
 80149f2:	d13e      	bne.n	8014a72 <__gethex+0x126>
 80149f4:	7873      	ldrb	r3, [r6, #1]
 80149f6:	2b2b      	cmp	r3, #43	@ 0x2b
 80149f8:	d033      	beq.n	8014a62 <__gethex+0x116>
 80149fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80149fc:	d034      	beq.n	8014a68 <__gethex+0x11c>
 80149fe:	1c71      	adds	r1, r6, #1
 8014a00:	2400      	movs	r4, #0
 8014a02:	7808      	ldrb	r0, [r1, #0]
 8014a04:	f7ff ff8c 	bl	8014920 <__hexdig_fun>
 8014a08:	1e43      	subs	r3, r0, #1
 8014a0a:	b2db      	uxtb	r3, r3
 8014a0c:	2b18      	cmp	r3, #24
 8014a0e:	d830      	bhi.n	8014a72 <__gethex+0x126>
 8014a10:	f1a0 0210 	sub.w	r2, r0, #16
 8014a14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014a18:	f7ff ff82 	bl	8014920 <__hexdig_fun>
 8014a1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8014a20:	fa5f fc8c 	uxtb.w	ip, ip
 8014a24:	f1bc 0f18 	cmp.w	ip, #24
 8014a28:	f04f 030a 	mov.w	r3, #10
 8014a2c:	d91e      	bls.n	8014a6c <__gethex+0x120>
 8014a2e:	b104      	cbz	r4, 8014a32 <__gethex+0xe6>
 8014a30:	4252      	negs	r2, r2
 8014a32:	4417      	add	r7, r2
 8014a34:	f8ca 1000 	str.w	r1, [sl]
 8014a38:	b1ed      	cbz	r5, 8014a76 <__gethex+0x12a>
 8014a3a:	f1bb 0f00 	cmp.w	fp, #0
 8014a3e:	bf0c      	ite	eq
 8014a40:	2506      	moveq	r5, #6
 8014a42:	2500      	movne	r5, #0
 8014a44:	4628      	mov	r0, r5
 8014a46:	b005      	add	sp, #20
 8014a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a4c:	2500      	movs	r5, #0
 8014a4e:	462c      	mov	r4, r5
 8014a50:	e7b0      	b.n	80149b4 <__gethex+0x68>
 8014a52:	2c00      	cmp	r4, #0
 8014a54:	d1c7      	bne.n	80149e6 <__gethex+0x9a>
 8014a56:	4627      	mov	r7, r4
 8014a58:	e7c7      	b.n	80149ea <__gethex+0x9e>
 8014a5a:	464e      	mov	r6, r9
 8014a5c:	462f      	mov	r7, r5
 8014a5e:	2501      	movs	r5, #1
 8014a60:	e7c3      	b.n	80149ea <__gethex+0x9e>
 8014a62:	2400      	movs	r4, #0
 8014a64:	1cb1      	adds	r1, r6, #2
 8014a66:	e7cc      	b.n	8014a02 <__gethex+0xb6>
 8014a68:	2401      	movs	r4, #1
 8014a6a:	e7fb      	b.n	8014a64 <__gethex+0x118>
 8014a6c:	fb03 0002 	mla	r0, r3, r2, r0
 8014a70:	e7ce      	b.n	8014a10 <__gethex+0xc4>
 8014a72:	4631      	mov	r1, r6
 8014a74:	e7de      	b.n	8014a34 <__gethex+0xe8>
 8014a76:	eba6 0309 	sub.w	r3, r6, r9
 8014a7a:	3b01      	subs	r3, #1
 8014a7c:	4629      	mov	r1, r5
 8014a7e:	2b07      	cmp	r3, #7
 8014a80:	dc0a      	bgt.n	8014a98 <__gethex+0x14c>
 8014a82:	9801      	ldr	r0, [sp, #4]
 8014a84:	f7fd fdcc 	bl	8012620 <_Balloc>
 8014a88:	4604      	mov	r4, r0
 8014a8a:	b940      	cbnz	r0, 8014a9e <__gethex+0x152>
 8014a8c:	4b5c      	ldr	r3, [pc, #368]	@ (8014c00 <__gethex+0x2b4>)
 8014a8e:	4602      	mov	r2, r0
 8014a90:	21e4      	movs	r1, #228	@ 0xe4
 8014a92:	485c      	ldr	r0, [pc, #368]	@ (8014c04 <__gethex+0x2b8>)
 8014a94:	f7ff fec0 	bl	8014818 <__assert_func>
 8014a98:	3101      	adds	r1, #1
 8014a9a:	105b      	asrs	r3, r3, #1
 8014a9c:	e7ef      	b.n	8014a7e <__gethex+0x132>
 8014a9e:	f100 0a14 	add.w	sl, r0, #20
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	4655      	mov	r5, sl
 8014aa6:	469b      	mov	fp, r3
 8014aa8:	45b1      	cmp	r9, r6
 8014aaa:	d337      	bcc.n	8014b1c <__gethex+0x1d0>
 8014aac:	f845 bb04 	str.w	fp, [r5], #4
 8014ab0:	eba5 050a 	sub.w	r5, r5, sl
 8014ab4:	10ad      	asrs	r5, r5, #2
 8014ab6:	6125      	str	r5, [r4, #16]
 8014ab8:	4658      	mov	r0, fp
 8014aba:	f7fd fea3 	bl	8012804 <__hi0bits>
 8014abe:	016d      	lsls	r5, r5, #5
 8014ac0:	f8d8 6000 	ldr.w	r6, [r8]
 8014ac4:	1a2d      	subs	r5, r5, r0
 8014ac6:	42b5      	cmp	r5, r6
 8014ac8:	dd54      	ble.n	8014b74 <__gethex+0x228>
 8014aca:	1bad      	subs	r5, r5, r6
 8014acc:	4629      	mov	r1, r5
 8014ace:	4620      	mov	r0, r4
 8014ad0:	f7fe fa37 	bl	8012f42 <__any_on>
 8014ad4:	4681      	mov	r9, r0
 8014ad6:	b178      	cbz	r0, 8014af8 <__gethex+0x1ac>
 8014ad8:	1e6b      	subs	r3, r5, #1
 8014ada:	1159      	asrs	r1, r3, #5
 8014adc:	f003 021f 	and.w	r2, r3, #31
 8014ae0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014ae4:	f04f 0901 	mov.w	r9, #1
 8014ae8:	fa09 f202 	lsl.w	r2, r9, r2
 8014aec:	420a      	tst	r2, r1
 8014aee:	d003      	beq.n	8014af8 <__gethex+0x1ac>
 8014af0:	454b      	cmp	r3, r9
 8014af2:	dc36      	bgt.n	8014b62 <__gethex+0x216>
 8014af4:	f04f 0902 	mov.w	r9, #2
 8014af8:	4629      	mov	r1, r5
 8014afa:	4620      	mov	r0, r4
 8014afc:	f7ff febe 	bl	801487c <rshift>
 8014b00:	442f      	add	r7, r5
 8014b02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014b06:	42bb      	cmp	r3, r7
 8014b08:	da42      	bge.n	8014b90 <__gethex+0x244>
 8014b0a:	9801      	ldr	r0, [sp, #4]
 8014b0c:	4621      	mov	r1, r4
 8014b0e:	f7fd fdc7 	bl	80126a0 <_Bfree>
 8014b12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014b14:	2300      	movs	r3, #0
 8014b16:	6013      	str	r3, [r2, #0]
 8014b18:	25a3      	movs	r5, #163	@ 0xa3
 8014b1a:	e793      	b.n	8014a44 <__gethex+0xf8>
 8014b1c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014b20:	2a2e      	cmp	r2, #46	@ 0x2e
 8014b22:	d012      	beq.n	8014b4a <__gethex+0x1fe>
 8014b24:	2b20      	cmp	r3, #32
 8014b26:	d104      	bne.n	8014b32 <__gethex+0x1e6>
 8014b28:	f845 bb04 	str.w	fp, [r5], #4
 8014b2c:	f04f 0b00 	mov.w	fp, #0
 8014b30:	465b      	mov	r3, fp
 8014b32:	7830      	ldrb	r0, [r6, #0]
 8014b34:	9303      	str	r3, [sp, #12]
 8014b36:	f7ff fef3 	bl	8014920 <__hexdig_fun>
 8014b3a:	9b03      	ldr	r3, [sp, #12]
 8014b3c:	f000 000f 	and.w	r0, r0, #15
 8014b40:	4098      	lsls	r0, r3
 8014b42:	ea4b 0b00 	orr.w	fp, fp, r0
 8014b46:	3304      	adds	r3, #4
 8014b48:	e7ae      	b.n	8014aa8 <__gethex+0x15c>
 8014b4a:	45b1      	cmp	r9, r6
 8014b4c:	d8ea      	bhi.n	8014b24 <__gethex+0x1d8>
 8014b4e:	492b      	ldr	r1, [pc, #172]	@ (8014bfc <__gethex+0x2b0>)
 8014b50:	9303      	str	r3, [sp, #12]
 8014b52:	2201      	movs	r2, #1
 8014b54:	4630      	mov	r0, r6
 8014b56:	f7fc fd76 	bl	8011646 <strncmp>
 8014b5a:	9b03      	ldr	r3, [sp, #12]
 8014b5c:	2800      	cmp	r0, #0
 8014b5e:	d1e1      	bne.n	8014b24 <__gethex+0x1d8>
 8014b60:	e7a2      	b.n	8014aa8 <__gethex+0x15c>
 8014b62:	1ea9      	subs	r1, r5, #2
 8014b64:	4620      	mov	r0, r4
 8014b66:	f7fe f9ec 	bl	8012f42 <__any_on>
 8014b6a:	2800      	cmp	r0, #0
 8014b6c:	d0c2      	beq.n	8014af4 <__gethex+0x1a8>
 8014b6e:	f04f 0903 	mov.w	r9, #3
 8014b72:	e7c1      	b.n	8014af8 <__gethex+0x1ac>
 8014b74:	da09      	bge.n	8014b8a <__gethex+0x23e>
 8014b76:	1b75      	subs	r5, r6, r5
 8014b78:	4621      	mov	r1, r4
 8014b7a:	9801      	ldr	r0, [sp, #4]
 8014b7c:	462a      	mov	r2, r5
 8014b7e:	f7fd ffa7 	bl	8012ad0 <__lshift>
 8014b82:	1b7f      	subs	r7, r7, r5
 8014b84:	4604      	mov	r4, r0
 8014b86:	f100 0a14 	add.w	sl, r0, #20
 8014b8a:	f04f 0900 	mov.w	r9, #0
 8014b8e:	e7b8      	b.n	8014b02 <__gethex+0x1b6>
 8014b90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014b94:	42bd      	cmp	r5, r7
 8014b96:	dd6f      	ble.n	8014c78 <__gethex+0x32c>
 8014b98:	1bed      	subs	r5, r5, r7
 8014b9a:	42ae      	cmp	r6, r5
 8014b9c:	dc34      	bgt.n	8014c08 <__gethex+0x2bc>
 8014b9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014ba2:	2b02      	cmp	r3, #2
 8014ba4:	d022      	beq.n	8014bec <__gethex+0x2a0>
 8014ba6:	2b03      	cmp	r3, #3
 8014ba8:	d024      	beq.n	8014bf4 <__gethex+0x2a8>
 8014baa:	2b01      	cmp	r3, #1
 8014bac:	d115      	bne.n	8014bda <__gethex+0x28e>
 8014bae:	42ae      	cmp	r6, r5
 8014bb0:	d113      	bne.n	8014bda <__gethex+0x28e>
 8014bb2:	2e01      	cmp	r6, #1
 8014bb4:	d10b      	bne.n	8014bce <__gethex+0x282>
 8014bb6:	9a02      	ldr	r2, [sp, #8]
 8014bb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014bbc:	6013      	str	r3, [r2, #0]
 8014bbe:	2301      	movs	r3, #1
 8014bc0:	6123      	str	r3, [r4, #16]
 8014bc2:	f8ca 3000 	str.w	r3, [sl]
 8014bc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014bc8:	2562      	movs	r5, #98	@ 0x62
 8014bca:	601c      	str	r4, [r3, #0]
 8014bcc:	e73a      	b.n	8014a44 <__gethex+0xf8>
 8014bce:	1e71      	subs	r1, r6, #1
 8014bd0:	4620      	mov	r0, r4
 8014bd2:	f7fe f9b6 	bl	8012f42 <__any_on>
 8014bd6:	2800      	cmp	r0, #0
 8014bd8:	d1ed      	bne.n	8014bb6 <__gethex+0x26a>
 8014bda:	9801      	ldr	r0, [sp, #4]
 8014bdc:	4621      	mov	r1, r4
 8014bde:	f7fd fd5f 	bl	80126a0 <_Bfree>
 8014be2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014be4:	2300      	movs	r3, #0
 8014be6:	6013      	str	r3, [r2, #0]
 8014be8:	2550      	movs	r5, #80	@ 0x50
 8014bea:	e72b      	b.n	8014a44 <__gethex+0xf8>
 8014bec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d1f3      	bne.n	8014bda <__gethex+0x28e>
 8014bf2:	e7e0      	b.n	8014bb6 <__gethex+0x26a>
 8014bf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d1dd      	bne.n	8014bb6 <__gethex+0x26a>
 8014bfa:	e7ee      	b.n	8014bda <__gethex+0x28e>
 8014bfc:	08017008 	.word	0x08017008
 8014c00:	08016e9b 	.word	0x08016e9b
 8014c04:	080171d1 	.word	0x080171d1
 8014c08:	1e6f      	subs	r7, r5, #1
 8014c0a:	f1b9 0f00 	cmp.w	r9, #0
 8014c0e:	d130      	bne.n	8014c72 <__gethex+0x326>
 8014c10:	b127      	cbz	r7, 8014c1c <__gethex+0x2d0>
 8014c12:	4639      	mov	r1, r7
 8014c14:	4620      	mov	r0, r4
 8014c16:	f7fe f994 	bl	8012f42 <__any_on>
 8014c1a:	4681      	mov	r9, r0
 8014c1c:	117a      	asrs	r2, r7, #5
 8014c1e:	2301      	movs	r3, #1
 8014c20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014c24:	f007 071f 	and.w	r7, r7, #31
 8014c28:	40bb      	lsls	r3, r7
 8014c2a:	4213      	tst	r3, r2
 8014c2c:	4629      	mov	r1, r5
 8014c2e:	4620      	mov	r0, r4
 8014c30:	bf18      	it	ne
 8014c32:	f049 0902 	orrne.w	r9, r9, #2
 8014c36:	f7ff fe21 	bl	801487c <rshift>
 8014c3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014c3e:	1b76      	subs	r6, r6, r5
 8014c40:	2502      	movs	r5, #2
 8014c42:	f1b9 0f00 	cmp.w	r9, #0
 8014c46:	d047      	beq.n	8014cd8 <__gethex+0x38c>
 8014c48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014c4c:	2b02      	cmp	r3, #2
 8014c4e:	d015      	beq.n	8014c7c <__gethex+0x330>
 8014c50:	2b03      	cmp	r3, #3
 8014c52:	d017      	beq.n	8014c84 <__gethex+0x338>
 8014c54:	2b01      	cmp	r3, #1
 8014c56:	d109      	bne.n	8014c6c <__gethex+0x320>
 8014c58:	f019 0f02 	tst.w	r9, #2
 8014c5c:	d006      	beq.n	8014c6c <__gethex+0x320>
 8014c5e:	f8da 3000 	ldr.w	r3, [sl]
 8014c62:	ea49 0903 	orr.w	r9, r9, r3
 8014c66:	f019 0f01 	tst.w	r9, #1
 8014c6a:	d10e      	bne.n	8014c8a <__gethex+0x33e>
 8014c6c:	f045 0510 	orr.w	r5, r5, #16
 8014c70:	e032      	b.n	8014cd8 <__gethex+0x38c>
 8014c72:	f04f 0901 	mov.w	r9, #1
 8014c76:	e7d1      	b.n	8014c1c <__gethex+0x2d0>
 8014c78:	2501      	movs	r5, #1
 8014c7a:	e7e2      	b.n	8014c42 <__gethex+0x2f6>
 8014c7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c7e:	f1c3 0301 	rsb	r3, r3, #1
 8014c82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014c84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d0f0      	beq.n	8014c6c <__gethex+0x320>
 8014c8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014c8e:	f104 0314 	add.w	r3, r4, #20
 8014c92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014c96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014c9a:	f04f 0c00 	mov.w	ip, #0
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ca4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014ca8:	d01b      	beq.n	8014ce2 <__gethex+0x396>
 8014caa:	3201      	adds	r2, #1
 8014cac:	6002      	str	r2, [r0, #0]
 8014cae:	2d02      	cmp	r5, #2
 8014cb0:	f104 0314 	add.w	r3, r4, #20
 8014cb4:	d13c      	bne.n	8014d30 <__gethex+0x3e4>
 8014cb6:	f8d8 2000 	ldr.w	r2, [r8]
 8014cba:	3a01      	subs	r2, #1
 8014cbc:	42b2      	cmp	r2, r6
 8014cbe:	d109      	bne.n	8014cd4 <__gethex+0x388>
 8014cc0:	1171      	asrs	r1, r6, #5
 8014cc2:	2201      	movs	r2, #1
 8014cc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014cc8:	f006 061f 	and.w	r6, r6, #31
 8014ccc:	fa02 f606 	lsl.w	r6, r2, r6
 8014cd0:	421e      	tst	r6, r3
 8014cd2:	d13a      	bne.n	8014d4a <__gethex+0x3fe>
 8014cd4:	f045 0520 	orr.w	r5, r5, #32
 8014cd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014cda:	601c      	str	r4, [r3, #0]
 8014cdc:	9b02      	ldr	r3, [sp, #8]
 8014cde:	601f      	str	r7, [r3, #0]
 8014ce0:	e6b0      	b.n	8014a44 <__gethex+0xf8>
 8014ce2:	4299      	cmp	r1, r3
 8014ce4:	f843 cc04 	str.w	ip, [r3, #-4]
 8014ce8:	d8d9      	bhi.n	8014c9e <__gethex+0x352>
 8014cea:	68a3      	ldr	r3, [r4, #8]
 8014cec:	459b      	cmp	fp, r3
 8014cee:	db17      	blt.n	8014d20 <__gethex+0x3d4>
 8014cf0:	6861      	ldr	r1, [r4, #4]
 8014cf2:	9801      	ldr	r0, [sp, #4]
 8014cf4:	3101      	adds	r1, #1
 8014cf6:	f7fd fc93 	bl	8012620 <_Balloc>
 8014cfa:	4681      	mov	r9, r0
 8014cfc:	b918      	cbnz	r0, 8014d06 <__gethex+0x3ba>
 8014cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8014d68 <__gethex+0x41c>)
 8014d00:	4602      	mov	r2, r0
 8014d02:	2184      	movs	r1, #132	@ 0x84
 8014d04:	e6c5      	b.n	8014a92 <__gethex+0x146>
 8014d06:	6922      	ldr	r2, [r4, #16]
 8014d08:	3202      	adds	r2, #2
 8014d0a:	f104 010c 	add.w	r1, r4, #12
 8014d0e:	0092      	lsls	r2, r2, #2
 8014d10:	300c      	adds	r0, #12
 8014d12:	f7fc fd22 	bl	801175a <memcpy>
 8014d16:	4621      	mov	r1, r4
 8014d18:	9801      	ldr	r0, [sp, #4]
 8014d1a:	f7fd fcc1 	bl	80126a0 <_Bfree>
 8014d1e:	464c      	mov	r4, r9
 8014d20:	6923      	ldr	r3, [r4, #16]
 8014d22:	1c5a      	adds	r2, r3, #1
 8014d24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014d28:	6122      	str	r2, [r4, #16]
 8014d2a:	2201      	movs	r2, #1
 8014d2c:	615a      	str	r2, [r3, #20]
 8014d2e:	e7be      	b.n	8014cae <__gethex+0x362>
 8014d30:	6922      	ldr	r2, [r4, #16]
 8014d32:	455a      	cmp	r2, fp
 8014d34:	dd0b      	ble.n	8014d4e <__gethex+0x402>
 8014d36:	2101      	movs	r1, #1
 8014d38:	4620      	mov	r0, r4
 8014d3a:	f7ff fd9f 	bl	801487c <rshift>
 8014d3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014d42:	3701      	adds	r7, #1
 8014d44:	42bb      	cmp	r3, r7
 8014d46:	f6ff aee0 	blt.w	8014b0a <__gethex+0x1be>
 8014d4a:	2501      	movs	r5, #1
 8014d4c:	e7c2      	b.n	8014cd4 <__gethex+0x388>
 8014d4e:	f016 061f 	ands.w	r6, r6, #31
 8014d52:	d0fa      	beq.n	8014d4a <__gethex+0x3fe>
 8014d54:	4453      	add	r3, sl
 8014d56:	f1c6 0620 	rsb	r6, r6, #32
 8014d5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014d5e:	f7fd fd51 	bl	8012804 <__hi0bits>
 8014d62:	42b0      	cmp	r0, r6
 8014d64:	dbe7      	blt.n	8014d36 <__gethex+0x3ea>
 8014d66:	e7f0      	b.n	8014d4a <__gethex+0x3fe>
 8014d68:	08016e9b 	.word	0x08016e9b

08014d6c <L_shift>:
 8014d6c:	f1c2 0208 	rsb	r2, r2, #8
 8014d70:	0092      	lsls	r2, r2, #2
 8014d72:	b570      	push	{r4, r5, r6, lr}
 8014d74:	f1c2 0620 	rsb	r6, r2, #32
 8014d78:	6843      	ldr	r3, [r0, #4]
 8014d7a:	6804      	ldr	r4, [r0, #0]
 8014d7c:	fa03 f506 	lsl.w	r5, r3, r6
 8014d80:	432c      	orrs	r4, r5
 8014d82:	40d3      	lsrs	r3, r2
 8014d84:	6004      	str	r4, [r0, #0]
 8014d86:	f840 3f04 	str.w	r3, [r0, #4]!
 8014d8a:	4288      	cmp	r0, r1
 8014d8c:	d3f4      	bcc.n	8014d78 <L_shift+0xc>
 8014d8e:	bd70      	pop	{r4, r5, r6, pc}

08014d90 <__match>:
 8014d90:	b530      	push	{r4, r5, lr}
 8014d92:	6803      	ldr	r3, [r0, #0]
 8014d94:	3301      	adds	r3, #1
 8014d96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d9a:	b914      	cbnz	r4, 8014da2 <__match+0x12>
 8014d9c:	6003      	str	r3, [r0, #0]
 8014d9e:	2001      	movs	r0, #1
 8014da0:	bd30      	pop	{r4, r5, pc}
 8014da2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014da6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8014daa:	2d19      	cmp	r5, #25
 8014dac:	bf98      	it	ls
 8014dae:	3220      	addls	r2, #32
 8014db0:	42a2      	cmp	r2, r4
 8014db2:	d0f0      	beq.n	8014d96 <__match+0x6>
 8014db4:	2000      	movs	r0, #0
 8014db6:	e7f3      	b.n	8014da0 <__match+0x10>

08014db8 <__hexnan>:
 8014db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dbc:	680b      	ldr	r3, [r1, #0]
 8014dbe:	6801      	ldr	r1, [r0, #0]
 8014dc0:	115e      	asrs	r6, r3, #5
 8014dc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014dc6:	f013 031f 	ands.w	r3, r3, #31
 8014dca:	b087      	sub	sp, #28
 8014dcc:	bf18      	it	ne
 8014dce:	3604      	addne	r6, #4
 8014dd0:	2500      	movs	r5, #0
 8014dd2:	1f37      	subs	r7, r6, #4
 8014dd4:	4682      	mov	sl, r0
 8014dd6:	4690      	mov	r8, r2
 8014dd8:	9301      	str	r3, [sp, #4]
 8014dda:	f846 5c04 	str.w	r5, [r6, #-4]
 8014dde:	46b9      	mov	r9, r7
 8014de0:	463c      	mov	r4, r7
 8014de2:	9502      	str	r5, [sp, #8]
 8014de4:	46ab      	mov	fp, r5
 8014de6:	784a      	ldrb	r2, [r1, #1]
 8014de8:	1c4b      	adds	r3, r1, #1
 8014dea:	9303      	str	r3, [sp, #12]
 8014dec:	b342      	cbz	r2, 8014e40 <__hexnan+0x88>
 8014dee:	4610      	mov	r0, r2
 8014df0:	9105      	str	r1, [sp, #20]
 8014df2:	9204      	str	r2, [sp, #16]
 8014df4:	f7ff fd94 	bl	8014920 <__hexdig_fun>
 8014df8:	2800      	cmp	r0, #0
 8014dfa:	d151      	bne.n	8014ea0 <__hexnan+0xe8>
 8014dfc:	9a04      	ldr	r2, [sp, #16]
 8014dfe:	9905      	ldr	r1, [sp, #20]
 8014e00:	2a20      	cmp	r2, #32
 8014e02:	d818      	bhi.n	8014e36 <__hexnan+0x7e>
 8014e04:	9b02      	ldr	r3, [sp, #8]
 8014e06:	459b      	cmp	fp, r3
 8014e08:	dd13      	ble.n	8014e32 <__hexnan+0x7a>
 8014e0a:	454c      	cmp	r4, r9
 8014e0c:	d206      	bcs.n	8014e1c <__hexnan+0x64>
 8014e0e:	2d07      	cmp	r5, #7
 8014e10:	dc04      	bgt.n	8014e1c <__hexnan+0x64>
 8014e12:	462a      	mov	r2, r5
 8014e14:	4649      	mov	r1, r9
 8014e16:	4620      	mov	r0, r4
 8014e18:	f7ff ffa8 	bl	8014d6c <L_shift>
 8014e1c:	4544      	cmp	r4, r8
 8014e1e:	d952      	bls.n	8014ec6 <__hexnan+0x10e>
 8014e20:	2300      	movs	r3, #0
 8014e22:	f1a4 0904 	sub.w	r9, r4, #4
 8014e26:	f844 3c04 	str.w	r3, [r4, #-4]
 8014e2a:	f8cd b008 	str.w	fp, [sp, #8]
 8014e2e:	464c      	mov	r4, r9
 8014e30:	461d      	mov	r5, r3
 8014e32:	9903      	ldr	r1, [sp, #12]
 8014e34:	e7d7      	b.n	8014de6 <__hexnan+0x2e>
 8014e36:	2a29      	cmp	r2, #41	@ 0x29
 8014e38:	d157      	bne.n	8014eea <__hexnan+0x132>
 8014e3a:	3102      	adds	r1, #2
 8014e3c:	f8ca 1000 	str.w	r1, [sl]
 8014e40:	f1bb 0f00 	cmp.w	fp, #0
 8014e44:	d051      	beq.n	8014eea <__hexnan+0x132>
 8014e46:	454c      	cmp	r4, r9
 8014e48:	d206      	bcs.n	8014e58 <__hexnan+0xa0>
 8014e4a:	2d07      	cmp	r5, #7
 8014e4c:	dc04      	bgt.n	8014e58 <__hexnan+0xa0>
 8014e4e:	462a      	mov	r2, r5
 8014e50:	4649      	mov	r1, r9
 8014e52:	4620      	mov	r0, r4
 8014e54:	f7ff ff8a 	bl	8014d6c <L_shift>
 8014e58:	4544      	cmp	r4, r8
 8014e5a:	d936      	bls.n	8014eca <__hexnan+0x112>
 8014e5c:	f1a8 0204 	sub.w	r2, r8, #4
 8014e60:	4623      	mov	r3, r4
 8014e62:	f853 1b04 	ldr.w	r1, [r3], #4
 8014e66:	f842 1f04 	str.w	r1, [r2, #4]!
 8014e6a:	429f      	cmp	r7, r3
 8014e6c:	d2f9      	bcs.n	8014e62 <__hexnan+0xaa>
 8014e6e:	1b3b      	subs	r3, r7, r4
 8014e70:	f023 0303 	bic.w	r3, r3, #3
 8014e74:	3304      	adds	r3, #4
 8014e76:	3401      	adds	r4, #1
 8014e78:	3e03      	subs	r6, #3
 8014e7a:	42b4      	cmp	r4, r6
 8014e7c:	bf88      	it	hi
 8014e7e:	2304      	movhi	r3, #4
 8014e80:	4443      	add	r3, r8
 8014e82:	2200      	movs	r2, #0
 8014e84:	f843 2b04 	str.w	r2, [r3], #4
 8014e88:	429f      	cmp	r7, r3
 8014e8a:	d2fb      	bcs.n	8014e84 <__hexnan+0xcc>
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	b91b      	cbnz	r3, 8014e98 <__hexnan+0xe0>
 8014e90:	4547      	cmp	r7, r8
 8014e92:	d128      	bne.n	8014ee6 <__hexnan+0x12e>
 8014e94:	2301      	movs	r3, #1
 8014e96:	603b      	str	r3, [r7, #0]
 8014e98:	2005      	movs	r0, #5
 8014e9a:	b007      	add	sp, #28
 8014e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ea0:	3501      	adds	r5, #1
 8014ea2:	2d08      	cmp	r5, #8
 8014ea4:	f10b 0b01 	add.w	fp, fp, #1
 8014ea8:	dd06      	ble.n	8014eb8 <__hexnan+0x100>
 8014eaa:	4544      	cmp	r4, r8
 8014eac:	d9c1      	bls.n	8014e32 <__hexnan+0x7a>
 8014eae:	2300      	movs	r3, #0
 8014eb0:	f844 3c04 	str.w	r3, [r4, #-4]
 8014eb4:	2501      	movs	r5, #1
 8014eb6:	3c04      	subs	r4, #4
 8014eb8:	6822      	ldr	r2, [r4, #0]
 8014eba:	f000 000f 	and.w	r0, r0, #15
 8014ebe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014ec2:	6020      	str	r0, [r4, #0]
 8014ec4:	e7b5      	b.n	8014e32 <__hexnan+0x7a>
 8014ec6:	2508      	movs	r5, #8
 8014ec8:	e7b3      	b.n	8014e32 <__hexnan+0x7a>
 8014eca:	9b01      	ldr	r3, [sp, #4]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d0dd      	beq.n	8014e8c <__hexnan+0xd4>
 8014ed0:	f1c3 0320 	rsb	r3, r3, #32
 8014ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8014ed8:	40da      	lsrs	r2, r3
 8014eda:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014ede:	4013      	ands	r3, r2
 8014ee0:	f846 3c04 	str.w	r3, [r6, #-4]
 8014ee4:	e7d2      	b.n	8014e8c <__hexnan+0xd4>
 8014ee6:	3f04      	subs	r7, #4
 8014ee8:	e7d0      	b.n	8014e8c <__hexnan+0xd4>
 8014eea:	2004      	movs	r0, #4
 8014eec:	e7d5      	b.n	8014e9a <__hexnan+0xe2>

08014eee <__ascii_mbtowc>:
 8014eee:	b082      	sub	sp, #8
 8014ef0:	b901      	cbnz	r1, 8014ef4 <__ascii_mbtowc+0x6>
 8014ef2:	a901      	add	r1, sp, #4
 8014ef4:	b142      	cbz	r2, 8014f08 <__ascii_mbtowc+0x1a>
 8014ef6:	b14b      	cbz	r3, 8014f0c <__ascii_mbtowc+0x1e>
 8014ef8:	7813      	ldrb	r3, [r2, #0]
 8014efa:	600b      	str	r3, [r1, #0]
 8014efc:	7812      	ldrb	r2, [r2, #0]
 8014efe:	1e10      	subs	r0, r2, #0
 8014f00:	bf18      	it	ne
 8014f02:	2001      	movne	r0, #1
 8014f04:	b002      	add	sp, #8
 8014f06:	4770      	bx	lr
 8014f08:	4610      	mov	r0, r2
 8014f0a:	e7fb      	b.n	8014f04 <__ascii_mbtowc+0x16>
 8014f0c:	f06f 0001 	mvn.w	r0, #1
 8014f10:	e7f8      	b.n	8014f04 <__ascii_mbtowc+0x16>

08014f12 <_realloc_r>:
 8014f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f16:	4680      	mov	r8, r0
 8014f18:	4615      	mov	r5, r2
 8014f1a:	460c      	mov	r4, r1
 8014f1c:	b921      	cbnz	r1, 8014f28 <_realloc_r+0x16>
 8014f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f22:	4611      	mov	r1, r2
 8014f24:	f7fd baf0 	b.w	8012508 <_malloc_r>
 8014f28:	b92a      	cbnz	r2, 8014f36 <_realloc_r+0x24>
 8014f2a:	f7fd fa79 	bl	8012420 <_free_r>
 8014f2e:	2400      	movs	r4, #0
 8014f30:	4620      	mov	r0, r4
 8014f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f36:	f000 f8b2 	bl	801509e <_malloc_usable_size_r>
 8014f3a:	4285      	cmp	r5, r0
 8014f3c:	4606      	mov	r6, r0
 8014f3e:	d802      	bhi.n	8014f46 <_realloc_r+0x34>
 8014f40:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014f44:	d8f4      	bhi.n	8014f30 <_realloc_r+0x1e>
 8014f46:	4629      	mov	r1, r5
 8014f48:	4640      	mov	r0, r8
 8014f4a:	f7fd fadd 	bl	8012508 <_malloc_r>
 8014f4e:	4607      	mov	r7, r0
 8014f50:	2800      	cmp	r0, #0
 8014f52:	d0ec      	beq.n	8014f2e <_realloc_r+0x1c>
 8014f54:	42b5      	cmp	r5, r6
 8014f56:	462a      	mov	r2, r5
 8014f58:	4621      	mov	r1, r4
 8014f5a:	bf28      	it	cs
 8014f5c:	4632      	movcs	r2, r6
 8014f5e:	f7fc fbfc 	bl	801175a <memcpy>
 8014f62:	4621      	mov	r1, r4
 8014f64:	4640      	mov	r0, r8
 8014f66:	f7fd fa5b 	bl	8012420 <_free_r>
 8014f6a:	463c      	mov	r4, r7
 8014f6c:	e7e0      	b.n	8014f30 <_realloc_r+0x1e>
	...

08014f70 <_strtoul_l.constprop.0>:
 8014f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f74:	4e34      	ldr	r6, [pc, #208]	@ (8015048 <_strtoul_l.constprop.0+0xd8>)
 8014f76:	4686      	mov	lr, r0
 8014f78:	460d      	mov	r5, r1
 8014f7a:	4628      	mov	r0, r5
 8014f7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f80:	5d37      	ldrb	r7, [r6, r4]
 8014f82:	f017 0708 	ands.w	r7, r7, #8
 8014f86:	d1f8      	bne.n	8014f7a <_strtoul_l.constprop.0+0xa>
 8014f88:	2c2d      	cmp	r4, #45	@ 0x2d
 8014f8a:	d12f      	bne.n	8014fec <_strtoul_l.constprop.0+0x7c>
 8014f8c:	782c      	ldrb	r4, [r5, #0]
 8014f8e:	2701      	movs	r7, #1
 8014f90:	1c85      	adds	r5, r0, #2
 8014f92:	f033 0010 	bics.w	r0, r3, #16
 8014f96:	d109      	bne.n	8014fac <_strtoul_l.constprop.0+0x3c>
 8014f98:	2c30      	cmp	r4, #48	@ 0x30
 8014f9a:	d12c      	bne.n	8014ff6 <_strtoul_l.constprop.0+0x86>
 8014f9c:	7828      	ldrb	r0, [r5, #0]
 8014f9e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8014fa2:	2858      	cmp	r0, #88	@ 0x58
 8014fa4:	d127      	bne.n	8014ff6 <_strtoul_l.constprop.0+0x86>
 8014fa6:	786c      	ldrb	r4, [r5, #1]
 8014fa8:	2310      	movs	r3, #16
 8014faa:	3502      	adds	r5, #2
 8014fac:	f04f 38ff 	mov.w	r8, #4294967295
 8014fb0:	2600      	movs	r6, #0
 8014fb2:	fbb8 f8f3 	udiv	r8, r8, r3
 8014fb6:	fb03 f908 	mul.w	r9, r3, r8
 8014fba:	ea6f 0909 	mvn.w	r9, r9
 8014fbe:	4630      	mov	r0, r6
 8014fc0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8014fc4:	f1bc 0f09 	cmp.w	ip, #9
 8014fc8:	d81c      	bhi.n	8015004 <_strtoul_l.constprop.0+0x94>
 8014fca:	4664      	mov	r4, ip
 8014fcc:	42a3      	cmp	r3, r4
 8014fce:	dd2a      	ble.n	8015026 <_strtoul_l.constprop.0+0xb6>
 8014fd0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8014fd4:	d007      	beq.n	8014fe6 <_strtoul_l.constprop.0+0x76>
 8014fd6:	4580      	cmp	r8, r0
 8014fd8:	d322      	bcc.n	8015020 <_strtoul_l.constprop.0+0xb0>
 8014fda:	d101      	bne.n	8014fe0 <_strtoul_l.constprop.0+0x70>
 8014fdc:	45a1      	cmp	r9, r4
 8014fde:	db1f      	blt.n	8015020 <_strtoul_l.constprop.0+0xb0>
 8014fe0:	fb00 4003 	mla	r0, r0, r3, r4
 8014fe4:	2601      	movs	r6, #1
 8014fe6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014fea:	e7e9      	b.n	8014fc0 <_strtoul_l.constprop.0+0x50>
 8014fec:	2c2b      	cmp	r4, #43	@ 0x2b
 8014fee:	bf04      	itt	eq
 8014ff0:	782c      	ldrbeq	r4, [r5, #0]
 8014ff2:	1c85      	addeq	r5, r0, #2
 8014ff4:	e7cd      	b.n	8014f92 <_strtoul_l.constprop.0+0x22>
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d1d8      	bne.n	8014fac <_strtoul_l.constprop.0+0x3c>
 8014ffa:	2c30      	cmp	r4, #48	@ 0x30
 8014ffc:	bf0c      	ite	eq
 8014ffe:	2308      	moveq	r3, #8
 8015000:	230a      	movne	r3, #10
 8015002:	e7d3      	b.n	8014fac <_strtoul_l.constprop.0+0x3c>
 8015004:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8015008:	f1bc 0f19 	cmp.w	ip, #25
 801500c:	d801      	bhi.n	8015012 <_strtoul_l.constprop.0+0xa2>
 801500e:	3c37      	subs	r4, #55	@ 0x37
 8015010:	e7dc      	b.n	8014fcc <_strtoul_l.constprop.0+0x5c>
 8015012:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8015016:	f1bc 0f19 	cmp.w	ip, #25
 801501a:	d804      	bhi.n	8015026 <_strtoul_l.constprop.0+0xb6>
 801501c:	3c57      	subs	r4, #87	@ 0x57
 801501e:	e7d5      	b.n	8014fcc <_strtoul_l.constprop.0+0x5c>
 8015020:	f04f 36ff 	mov.w	r6, #4294967295
 8015024:	e7df      	b.n	8014fe6 <_strtoul_l.constprop.0+0x76>
 8015026:	1c73      	adds	r3, r6, #1
 8015028:	d106      	bne.n	8015038 <_strtoul_l.constprop.0+0xc8>
 801502a:	2322      	movs	r3, #34	@ 0x22
 801502c:	f8ce 3000 	str.w	r3, [lr]
 8015030:	4630      	mov	r0, r6
 8015032:	b932      	cbnz	r2, 8015042 <_strtoul_l.constprop.0+0xd2>
 8015034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015038:	b107      	cbz	r7, 801503c <_strtoul_l.constprop.0+0xcc>
 801503a:	4240      	negs	r0, r0
 801503c:	2a00      	cmp	r2, #0
 801503e:	d0f9      	beq.n	8015034 <_strtoul_l.constprop.0+0xc4>
 8015040:	b106      	cbz	r6, 8015044 <_strtoul_l.constprop.0+0xd4>
 8015042:	1e69      	subs	r1, r5, #1
 8015044:	6011      	str	r1, [r2, #0]
 8015046:	e7f5      	b.n	8015034 <_strtoul_l.constprop.0+0xc4>
 8015048:	08017061 	.word	0x08017061

0801504c <_strtoul_r>:
 801504c:	f7ff bf90 	b.w	8014f70 <_strtoul_l.constprop.0>

08015050 <__ascii_wctomb>:
 8015050:	4603      	mov	r3, r0
 8015052:	4608      	mov	r0, r1
 8015054:	b141      	cbz	r1, 8015068 <__ascii_wctomb+0x18>
 8015056:	2aff      	cmp	r2, #255	@ 0xff
 8015058:	d904      	bls.n	8015064 <__ascii_wctomb+0x14>
 801505a:	228a      	movs	r2, #138	@ 0x8a
 801505c:	601a      	str	r2, [r3, #0]
 801505e:	f04f 30ff 	mov.w	r0, #4294967295
 8015062:	4770      	bx	lr
 8015064:	700a      	strb	r2, [r1, #0]
 8015066:	2001      	movs	r0, #1
 8015068:	4770      	bx	lr
	...

0801506c <fiprintf>:
 801506c:	b40e      	push	{r1, r2, r3}
 801506e:	b503      	push	{r0, r1, lr}
 8015070:	4601      	mov	r1, r0
 8015072:	ab03      	add	r3, sp, #12
 8015074:	4805      	ldr	r0, [pc, #20]	@ (801508c <fiprintf+0x20>)
 8015076:	f853 2b04 	ldr.w	r2, [r3], #4
 801507a:	6800      	ldr	r0, [r0, #0]
 801507c:	9301      	str	r3, [sp, #4]
 801507e:	f000 f83f 	bl	8015100 <_vfiprintf_r>
 8015082:	b002      	add	sp, #8
 8015084:	f85d eb04 	ldr.w	lr, [sp], #4
 8015088:	b003      	add	sp, #12
 801508a:	4770      	bx	lr
 801508c:	200001b0 	.word	0x200001b0

08015090 <abort>:
 8015090:	b508      	push	{r3, lr}
 8015092:	2006      	movs	r0, #6
 8015094:	f000 fa08 	bl	80154a8 <raise>
 8015098:	2001      	movs	r0, #1
 801509a:	f7ee fee7 	bl	8003e6c <_exit>

0801509e <_malloc_usable_size_r>:
 801509e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80150a2:	1f18      	subs	r0, r3, #4
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	bfbc      	itt	lt
 80150a8:	580b      	ldrlt	r3, [r1, r0]
 80150aa:	18c0      	addlt	r0, r0, r3
 80150ac:	4770      	bx	lr

080150ae <__sfputc_r>:
 80150ae:	6893      	ldr	r3, [r2, #8]
 80150b0:	3b01      	subs	r3, #1
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	b410      	push	{r4}
 80150b6:	6093      	str	r3, [r2, #8]
 80150b8:	da08      	bge.n	80150cc <__sfputc_r+0x1e>
 80150ba:	6994      	ldr	r4, [r2, #24]
 80150bc:	42a3      	cmp	r3, r4
 80150be:	db01      	blt.n	80150c4 <__sfputc_r+0x16>
 80150c0:	290a      	cmp	r1, #10
 80150c2:	d103      	bne.n	80150cc <__sfputc_r+0x1e>
 80150c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150c8:	f000 b932 	b.w	8015330 <__swbuf_r>
 80150cc:	6813      	ldr	r3, [r2, #0]
 80150ce:	1c58      	adds	r0, r3, #1
 80150d0:	6010      	str	r0, [r2, #0]
 80150d2:	7019      	strb	r1, [r3, #0]
 80150d4:	4608      	mov	r0, r1
 80150d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150da:	4770      	bx	lr

080150dc <__sfputs_r>:
 80150dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150de:	4606      	mov	r6, r0
 80150e0:	460f      	mov	r7, r1
 80150e2:	4614      	mov	r4, r2
 80150e4:	18d5      	adds	r5, r2, r3
 80150e6:	42ac      	cmp	r4, r5
 80150e8:	d101      	bne.n	80150ee <__sfputs_r+0x12>
 80150ea:	2000      	movs	r0, #0
 80150ec:	e007      	b.n	80150fe <__sfputs_r+0x22>
 80150ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150f2:	463a      	mov	r2, r7
 80150f4:	4630      	mov	r0, r6
 80150f6:	f7ff ffda 	bl	80150ae <__sfputc_r>
 80150fa:	1c43      	adds	r3, r0, #1
 80150fc:	d1f3      	bne.n	80150e6 <__sfputs_r+0xa>
 80150fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015100 <_vfiprintf_r>:
 8015100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015104:	460d      	mov	r5, r1
 8015106:	b09d      	sub	sp, #116	@ 0x74
 8015108:	4614      	mov	r4, r2
 801510a:	4698      	mov	r8, r3
 801510c:	4606      	mov	r6, r0
 801510e:	b118      	cbz	r0, 8015118 <_vfiprintf_r+0x18>
 8015110:	6a03      	ldr	r3, [r0, #32]
 8015112:	b90b      	cbnz	r3, 8015118 <_vfiprintf_r+0x18>
 8015114:	f7fc f9ca 	bl	80114ac <__sinit>
 8015118:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801511a:	07d9      	lsls	r1, r3, #31
 801511c:	d405      	bmi.n	801512a <_vfiprintf_r+0x2a>
 801511e:	89ab      	ldrh	r3, [r5, #12]
 8015120:	059a      	lsls	r2, r3, #22
 8015122:	d402      	bmi.n	801512a <_vfiprintf_r+0x2a>
 8015124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015126:	f7fc fb16 	bl	8011756 <__retarget_lock_acquire_recursive>
 801512a:	89ab      	ldrh	r3, [r5, #12]
 801512c:	071b      	lsls	r3, r3, #28
 801512e:	d501      	bpl.n	8015134 <_vfiprintf_r+0x34>
 8015130:	692b      	ldr	r3, [r5, #16]
 8015132:	b99b      	cbnz	r3, 801515c <_vfiprintf_r+0x5c>
 8015134:	4629      	mov	r1, r5
 8015136:	4630      	mov	r0, r6
 8015138:	f000 f938 	bl	80153ac <__swsetup_r>
 801513c:	b170      	cbz	r0, 801515c <_vfiprintf_r+0x5c>
 801513e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015140:	07dc      	lsls	r4, r3, #31
 8015142:	d504      	bpl.n	801514e <_vfiprintf_r+0x4e>
 8015144:	f04f 30ff 	mov.w	r0, #4294967295
 8015148:	b01d      	add	sp, #116	@ 0x74
 801514a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801514e:	89ab      	ldrh	r3, [r5, #12]
 8015150:	0598      	lsls	r0, r3, #22
 8015152:	d4f7      	bmi.n	8015144 <_vfiprintf_r+0x44>
 8015154:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015156:	f7fc faff 	bl	8011758 <__retarget_lock_release_recursive>
 801515a:	e7f3      	b.n	8015144 <_vfiprintf_r+0x44>
 801515c:	2300      	movs	r3, #0
 801515e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015160:	2320      	movs	r3, #32
 8015162:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015166:	f8cd 800c 	str.w	r8, [sp, #12]
 801516a:	2330      	movs	r3, #48	@ 0x30
 801516c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801531c <_vfiprintf_r+0x21c>
 8015170:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015174:	f04f 0901 	mov.w	r9, #1
 8015178:	4623      	mov	r3, r4
 801517a:	469a      	mov	sl, r3
 801517c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015180:	b10a      	cbz	r2, 8015186 <_vfiprintf_r+0x86>
 8015182:	2a25      	cmp	r2, #37	@ 0x25
 8015184:	d1f9      	bne.n	801517a <_vfiprintf_r+0x7a>
 8015186:	ebba 0b04 	subs.w	fp, sl, r4
 801518a:	d00b      	beq.n	80151a4 <_vfiprintf_r+0xa4>
 801518c:	465b      	mov	r3, fp
 801518e:	4622      	mov	r2, r4
 8015190:	4629      	mov	r1, r5
 8015192:	4630      	mov	r0, r6
 8015194:	f7ff ffa2 	bl	80150dc <__sfputs_r>
 8015198:	3001      	adds	r0, #1
 801519a:	f000 80a7 	beq.w	80152ec <_vfiprintf_r+0x1ec>
 801519e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80151a0:	445a      	add	r2, fp
 80151a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80151a4:	f89a 3000 	ldrb.w	r3, [sl]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	f000 809f 	beq.w	80152ec <_vfiprintf_r+0x1ec>
 80151ae:	2300      	movs	r3, #0
 80151b0:	f04f 32ff 	mov.w	r2, #4294967295
 80151b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151b8:	f10a 0a01 	add.w	sl, sl, #1
 80151bc:	9304      	str	r3, [sp, #16]
 80151be:	9307      	str	r3, [sp, #28]
 80151c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80151c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80151c6:	4654      	mov	r4, sl
 80151c8:	2205      	movs	r2, #5
 80151ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151ce:	4853      	ldr	r0, [pc, #332]	@ (801531c <_vfiprintf_r+0x21c>)
 80151d0:	f7eb f826 	bl	8000220 <memchr>
 80151d4:	9a04      	ldr	r2, [sp, #16]
 80151d6:	b9d8      	cbnz	r0, 8015210 <_vfiprintf_r+0x110>
 80151d8:	06d1      	lsls	r1, r2, #27
 80151da:	bf44      	itt	mi
 80151dc:	2320      	movmi	r3, #32
 80151de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80151e2:	0713      	lsls	r3, r2, #28
 80151e4:	bf44      	itt	mi
 80151e6:	232b      	movmi	r3, #43	@ 0x2b
 80151e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80151ec:	f89a 3000 	ldrb.w	r3, [sl]
 80151f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80151f2:	d015      	beq.n	8015220 <_vfiprintf_r+0x120>
 80151f4:	9a07      	ldr	r2, [sp, #28]
 80151f6:	4654      	mov	r4, sl
 80151f8:	2000      	movs	r0, #0
 80151fa:	f04f 0c0a 	mov.w	ip, #10
 80151fe:	4621      	mov	r1, r4
 8015200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015204:	3b30      	subs	r3, #48	@ 0x30
 8015206:	2b09      	cmp	r3, #9
 8015208:	d94b      	bls.n	80152a2 <_vfiprintf_r+0x1a2>
 801520a:	b1b0      	cbz	r0, 801523a <_vfiprintf_r+0x13a>
 801520c:	9207      	str	r2, [sp, #28]
 801520e:	e014      	b.n	801523a <_vfiprintf_r+0x13a>
 8015210:	eba0 0308 	sub.w	r3, r0, r8
 8015214:	fa09 f303 	lsl.w	r3, r9, r3
 8015218:	4313      	orrs	r3, r2
 801521a:	9304      	str	r3, [sp, #16]
 801521c:	46a2      	mov	sl, r4
 801521e:	e7d2      	b.n	80151c6 <_vfiprintf_r+0xc6>
 8015220:	9b03      	ldr	r3, [sp, #12]
 8015222:	1d19      	adds	r1, r3, #4
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	9103      	str	r1, [sp, #12]
 8015228:	2b00      	cmp	r3, #0
 801522a:	bfbb      	ittet	lt
 801522c:	425b      	neglt	r3, r3
 801522e:	f042 0202 	orrlt.w	r2, r2, #2
 8015232:	9307      	strge	r3, [sp, #28]
 8015234:	9307      	strlt	r3, [sp, #28]
 8015236:	bfb8      	it	lt
 8015238:	9204      	strlt	r2, [sp, #16]
 801523a:	7823      	ldrb	r3, [r4, #0]
 801523c:	2b2e      	cmp	r3, #46	@ 0x2e
 801523e:	d10a      	bne.n	8015256 <_vfiprintf_r+0x156>
 8015240:	7863      	ldrb	r3, [r4, #1]
 8015242:	2b2a      	cmp	r3, #42	@ 0x2a
 8015244:	d132      	bne.n	80152ac <_vfiprintf_r+0x1ac>
 8015246:	9b03      	ldr	r3, [sp, #12]
 8015248:	1d1a      	adds	r2, r3, #4
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	9203      	str	r2, [sp, #12]
 801524e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015252:	3402      	adds	r4, #2
 8015254:	9305      	str	r3, [sp, #20]
 8015256:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801532c <_vfiprintf_r+0x22c>
 801525a:	7821      	ldrb	r1, [r4, #0]
 801525c:	2203      	movs	r2, #3
 801525e:	4650      	mov	r0, sl
 8015260:	f7ea ffde 	bl	8000220 <memchr>
 8015264:	b138      	cbz	r0, 8015276 <_vfiprintf_r+0x176>
 8015266:	9b04      	ldr	r3, [sp, #16]
 8015268:	eba0 000a 	sub.w	r0, r0, sl
 801526c:	2240      	movs	r2, #64	@ 0x40
 801526e:	4082      	lsls	r2, r0
 8015270:	4313      	orrs	r3, r2
 8015272:	3401      	adds	r4, #1
 8015274:	9304      	str	r3, [sp, #16]
 8015276:	f814 1b01 	ldrb.w	r1, [r4], #1
 801527a:	4829      	ldr	r0, [pc, #164]	@ (8015320 <_vfiprintf_r+0x220>)
 801527c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015280:	2206      	movs	r2, #6
 8015282:	f7ea ffcd 	bl	8000220 <memchr>
 8015286:	2800      	cmp	r0, #0
 8015288:	d03f      	beq.n	801530a <_vfiprintf_r+0x20a>
 801528a:	4b26      	ldr	r3, [pc, #152]	@ (8015324 <_vfiprintf_r+0x224>)
 801528c:	bb1b      	cbnz	r3, 80152d6 <_vfiprintf_r+0x1d6>
 801528e:	9b03      	ldr	r3, [sp, #12]
 8015290:	3307      	adds	r3, #7
 8015292:	f023 0307 	bic.w	r3, r3, #7
 8015296:	3308      	adds	r3, #8
 8015298:	9303      	str	r3, [sp, #12]
 801529a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801529c:	443b      	add	r3, r7
 801529e:	9309      	str	r3, [sp, #36]	@ 0x24
 80152a0:	e76a      	b.n	8015178 <_vfiprintf_r+0x78>
 80152a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80152a6:	460c      	mov	r4, r1
 80152a8:	2001      	movs	r0, #1
 80152aa:	e7a8      	b.n	80151fe <_vfiprintf_r+0xfe>
 80152ac:	2300      	movs	r3, #0
 80152ae:	3401      	adds	r4, #1
 80152b0:	9305      	str	r3, [sp, #20]
 80152b2:	4619      	mov	r1, r3
 80152b4:	f04f 0c0a 	mov.w	ip, #10
 80152b8:	4620      	mov	r0, r4
 80152ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152be:	3a30      	subs	r2, #48	@ 0x30
 80152c0:	2a09      	cmp	r2, #9
 80152c2:	d903      	bls.n	80152cc <_vfiprintf_r+0x1cc>
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d0c6      	beq.n	8015256 <_vfiprintf_r+0x156>
 80152c8:	9105      	str	r1, [sp, #20]
 80152ca:	e7c4      	b.n	8015256 <_vfiprintf_r+0x156>
 80152cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80152d0:	4604      	mov	r4, r0
 80152d2:	2301      	movs	r3, #1
 80152d4:	e7f0      	b.n	80152b8 <_vfiprintf_r+0x1b8>
 80152d6:	ab03      	add	r3, sp, #12
 80152d8:	9300      	str	r3, [sp, #0]
 80152da:	462a      	mov	r2, r5
 80152dc:	4b12      	ldr	r3, [pc, #72]	@ (8015328 <_vfiprintf_r+0x228>)
 80152de:	a904      	add	r1, sp, #16
 80152e0:	4630      	mov	r0, r6
 80152e2:	f7fb fa8b 	bl	80107fc <_printf_float>
 80152e6:	4607      	mov	r7, r0
 80152e8:	1c78      	adds	r0, r7, #1
 80152ea:	d1d6      	bne.n	801529a <_vfiprintf_r+0x19a>
 80152ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80152ee:	07d9      	lsls	r1, r3, #31
 80152f0:	d405      	bmi.n	80152fe <_vfiprintf_r+0x1fe>
 80152f2:	89ab      	ldrh	r3, [r5, #12]
 80152f4:	059a      	lsls	r2, r3, #22
 80152f6:	d402      	bmi.n	80152fe <_vfiprintf_r+0x1fe>
 80152f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80152fa:	f7fc fa2d 	bl	8011758 <__retarget_lock_release_recursive>
 80152fe:	89ab      	ldrh	r3, [r5, #12]
 8015300:	065b      	lsls	r3, r3, #25
 8015302:	f53f af1f 	bmi.w	8015144 <_vfiprintf_r+0x44>
 8015306:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015308:	e71e      	b.n	8015148 <_vfiprintf_r+0x48>
 801530a:	ab03      	add	r3, sp, #12
 801530c:	9300      	str	r3, [sp, #0]
 801530e:	462a      	mov	r2, r5
 8015310:	4b05      	ldr	r3, [pc, #20]	@ (8015328 <_vfiprintf_r+0x228>)
 8015312:	a904      	add	r1, sp, #16
 8015314:	4630      	mov	r0, r6
 8015316:	f7fb fd09 	bl	8010d2c <_printf_i>
 801531a:	e7e4      	b.n	80152e6 <_vfiprintf_r+0x1e6>
 801531c:	08017161 	.word	0x08017161
 8015320:	0801716b 	.word	0x0801716b
 8015324:	080107fd 	.word	0x080107fd
 8015328:	080150dd 	.word	0x080150dd
 801532c:	08017167 	.word	0x08017167

08015330 <__swbuf_r>:
 8015330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015332:	460e      	mov	r6, r1
 8015334:	4614      	mov	r4, r2
 8015336:	4605      	mov	r5, r0
 8015338:	b118      	cbz	r0, 8015342 <__swbuf_r+0x12>
 801533a:	6a03      	ldr	r3, [r0, #32]
 801533c:	b90b      	cbnz	r3, 8015342 <__swbuf_r+0x12>
 801533e:	f7fc f8b5 	bl	80114ac <__sinit>
 8015342:	69a3      	ldr	r3, [r4, #24]
 8015344:	60a3      	str	r3, [r4, #8]
 8015346:	89a3      	ldrh	r3, [r4, #12]
 8015348:	071a      	lsls	r2, r3, #28
 801534a:	d501      	bpl.n	8015350 <__swbuf_r+0x20>
 801534c:	6923      	ldr	r3, [r4, #16]
 801534e:	b943      	cbnz	r3, 8015362 <__swbuf_r+0x32>
 8015350:	4621      	mov	r1, r4
 8015352:	4628      	mov	r0, r5
 8015354:	f000 f82a 	bl	80153ac <__swsetup_r>
 8015358:	b118      	cbz	r0, 8015362 <__swbuf_r+0x32>
 801535a:	f04f 37ff 	mov.w	r7, #4294967295
 801535e:	4638      	mov	r0, r7
 8015360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015362:	6823      	ldr	r3, [r4, #0]
 8015364:	6922      	ldr	r2, [r4, #16]
 8015366:	1a98      	subs	r0, r3, r2
 8015368:	6963      	ldr	r3, [r4, #20]
 801536a:	b2f6      	uxtb	r6, r6
 801536c:	4283      	cmp	r3, r0
 801536e:	4637      	mov	r7, r6
 8015370:	dc05      	bgt.n	801537e <__swbuf_r+0x4e>
 8015372:	4621      	mov	r1, r4
 8015374:	4628      	mov	r0, r5
 8015376:	f7ff f97f 	bl	8014678 <_fflush_r>
 801537a:	2800      	cmp	r0, #0
 801537c:	d1ed      	bne.n	801535a <__swbuf_r+0x2a>
 801537e:	68a3      	ldr	r3, [r4, #8]
 8015380:	3b01      	subs	r3, #1
 8015382:	60a3      	str	r3, [r4, #8]
 8015384:	6823      	ldr	r3, [r4, #0]
 8015386:	1c5a      	adds	r2, r3, #1
 8015388:	6022      	str	r2, [r4, #0]
 801538a:	701e      	strb	r6, [r3, #0]
 801538c:	6962      	ldr	r2, [r4, #20]
 801538e:	1c43      	adds	r3, r0, #1
 8015390:	429a      	cmp	r2, r3
 8015392:	d004      	beq.n	801539e <__swbuf_r+0x6e>
 8015394:	89a3      	ldrh	r3, [r4, #12]
 8015396:	07db      	lsls	r3, r3, #31
 8015398:	d5e1      	bpl.n	801535e <__swbuf_r+0x2e>
 801539a:	2e0a      	cmp	r6, #10
 801539c:	d1df      	bne.n	801535e <__swbuf_r+0x2e>
 801539e:	4621      	mov	r1, r4
 80153a0:	4628      	mov	r0, r5
 80153a2:	f7ff f969 	bl	8014678 <_fflush_r>
 80153a6:	2800      	cmp	r0, #0
 80153a8:	d0d9      	beq.n	801535e <__swbuf_r+0x2e>
 80153aa:	e7d6      	b.n	801535a <__swbuf_r+0x2a>

080153ac <__swsetup_r>:
 80153ac:	b538      	push	{r3, r4, r5, lr}
 80153ae:	4b29      	ldr	r3, [pc, #164]	@ (8015454 <__swsetup_r+0xa8>)
 80153b0:	4605      	mov	r5, r0
 80153b2:	6818      	ldr	r0, [r3, #0]
 80153b4:	460c      	mov	r4, r1
 80153b6:	b118      	cbz	r0, 80153c0 <__swsetup_r+0x14>
 80153b8:	6a03      	ldr	r3, [r0, #32]
 80153ba:	b90b      	cbnz	r3, 80153c0 <__swsetup_r+0x14>
 80153bc:	f7fc f876 	bl	80114ac <__sinit>
 80153c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153c4:	0719      	lsls	r1, r3, #28
 80153c6:	d422      	bmi.n	801540e <__swsetup_r+0x62>
 80153c8:	06da      	lsls	r2, r3, #27
 80153ca:	d407      	bmi.n	80153dc <__swsetup_r+0x30>
 80153cc:	2209      	movs	r2, #9
 80153ce:	602a      	str	r2, [r5, #0]
 80153d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80153d4:	81a3      	strh	r3, [r4, #12]
 80153d6:	f04f 30ff 	mov.w	r0, #4294967295
 80153da:	e033      	b.n	8015444 <__swsetup_r+0x98>
 80153dc:	0758      	lsls	r0, r3, #29
 80153de:	d512      	bpl.n	8015406 <__swsetup_r+0x5a>
 80153e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80153e2:	b141      	cbz	r1, 80153f6 <__swsetup_r+0x4a>
 80153e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80153e8:	4299      	cmp	r1, r3
 80153ea:	d002      	beq.n	80153f2 <__swsetup_r+0x46>
 80153ec:	4628      	mov	r0, r5
 80153ee:	f7fd f817 	bl	8012420 <_free_r>
 80153f2:	2300      	movs	r3, #0
 80153f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80153f6:	89a3      	ldrh	r3, [r4, #12]
 80153f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80153fc:	81a3      	strh	r3, [r4, #12]
 80153fe:	2300      	movs	r3, #0
 8015400:	6063      	str	r3, [r4, #4]
 8015402:	6923      	ldr	r3, [r4, #16]
 8015404:	6023      	str	r3, [r4, #0]
 8015406:	89a3      	ldrh	r3, [r4, #12]
 8015408:	f043 0308 	orr.w	r3, r3, #8
 801540c:	81a3      	strh	r3, [r4, #12]
 801540e:	6923      	ldr	r3, [r4, #16]
 8015410:	b94b      	cbnz	r3, 8015426 <__swsetup_r+0x7a>
 8015412:	89a3      	ldrh	r3, [r4, #12]
 8015414:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015418:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801541c:	d003      	beq.n	8015426 <__swsetup_r+0x7a>
 801541e:	4621      	mov	r1, r4
 8015420:	4628      	mov	r0, r5
 8015422:	f000 f883 	bl	801552c <__smakebuf_r>
 8015426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801542a:	f013 0201 	ands.w	r2, r3, #1
 801542e:	d00a      	beq.n	8015446 <__swsetup_r+0x9a>
 8015430:	2200      	movs	r2, #0
 8015432:	60a2      	str	r2, [r4, #8]
 8015434:	6962      	ldr	r2, [r4, #20]
 8015436:	4252      	negs	r2, r2
 8015438:	61a2      	str	r2, [r4, #24]
 801543a:	6922      	ldr	r2, [r4, #16]
 801543c:	b942      	cbnz	r2, 8015450 <__swsetup_r+0xa4>
 801543e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015442:	d1c5      	bne.n	80153d0 <__swsetup_r+0x24>
 8015444:	bd38      	pop	{r3, r4, r5, pc}
 8015446:	0799      	lsls	r1, r3, #30
 8015448:	bf58      	it	pl
 801544a:	6962      	ldrpl	r2, [r4, #20]
 801544c:	60a2      	str	r2, [r4, #8]
 801544e:	e7f4      	b.n	801543a <__swsetup_r+0x8e>
 8015450:	2000      	movs	r0, #0
 8015452:	e7f7      	b.n	8015444 <__swsetup_r+0x98>
 8015454:	200001b0 	.word	0x200001b0

08015458 <_raise_r>:
 8015458:	291f      	cmp	r1, #31
 801545a:	b538      	push	{r3, r4, r5, lr}
 801545c:	4605      	mov	r5, r0
 801545e:	460c      	mov	r4, r1
 8015460:	d904      	bls.n	801546c <_raise_r+0x14>
 8015462:	2316      	movs	r3, #22
 8015464:	6003      	str	r3, [r0, #0]
 8015466:	f04f 30ff 	mov.w	r0, #4294967295
 801546a:	bd38      	pop	{r3, r4, r5, pc}
 801546c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801546e:	b112      	cbz	r2, 8015476 <_raise_r+0x1e>
 8015470:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015474:	b94b      	cbnz	r3, 801548a <_raise_r+0x32>
 8015476:	4628      	mov	r0, r5
 8015478:	f000 f830 	bl	80154dc <_getpid_r>
 801547c:	4622      	mov	r2, r4
 801547e:	4601      	mov	r1, r0
 8015480:	4628      	mov	r0, r5
 8015482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015486:	f000 b817 	b.w	80154b8 <_kill_r>
 801548a:	2b01      	cmp	r3, #1
 801548c:	d00a      	beq.n	80154a4 <_raise_r+0x4c>
 801548e:	1c59      	adds	r1, r3, #1
 8015490:	d103      	bne.n	801549a <_raise_r+0x42>
 8015492:	2316      	movs	r3, #22
 8015494:	6003      	str	r3, [r0, #0]
 8015496:	2001      	movs	r0, #1
 8015498:	e7e7      	b.n	801546a <_raise_r+0x12>
 801549a:	2100      	movs	r1, #0
 801549c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80154a0:	4620      	mov	r0, r4
 80154a2:	4798      	blx	r3
 80154a4:	2000      	movs	r0, #0
 80154a6:	e7e0      	b.n	801546a <_raise_r+0x12>

080154a8 <raise>:
 80154a8:	4b02      	ldr	r3, [pc, #8]	@ (80154b4 <raise+0xc>)
 80154aa:	4601      	mov	r1, r0
 80154ac:	6818      	ldr	r0, [r3, #0]
 80154ae:	f7ff bfd3 	b.w	8015458 <_raise_r>
 80154b2:	bf00      	nop
 80154b4:	200001b0 	.word	0x200001b0

080154b8 <_kill_r>:
 80154b8:	b538      	push	{r3, r4, r5, lr}
 80154ba:	4d07      	ldr	r5, [pc, #28]	@ (80154d8 <_kill_r+0x20>)
 80154bc:	2300      	movs	r3, #0
 80154be:	4604      	mov	r4, r0
 80154c0:	4608      	mov	r0, r1
 80154c2:	4611      	mov	r1, r2
 80154c4:	602b      	str	r3, [r5, #0]
 80154c6:	f7ee fcc1 	bl	8003e4c <_kill>
 80154ca:	1c43      	adds	r3, r0, #1
 80154cc:	d102      	bne.n	80154d4 <_kill_r+0x1c>
 80154ce:	682b      	ldr	r3, [r5, #0]
 80154d0:	b103      	cbz	r3, 80154d4 <_kill_r+0x1c>
 80154d2:	6023      	str	r3, [r4, #0]
 80154d4:	bd38      	pop	{r3, r4, r5, pc}
 80154d6:	bf00      	nop
 80154d8:	20002670 	.word	0x20002670

080154dc <_getpid_r>:
 80154dc:	f7ee bcae 	b.w	8003e3c <_getpid>

080154e0 <__swhatbuf_r>:
 80154e0:	b570      	push	{r4, r5, r6, lr}
 80154e2:	460c      	mov	r4, r1
 80154e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154e8:	2900      	cmp	r1, #0
 80154ea:	b096      	sub	sp, #88	@ 0x58
 80154ec:	4615      	mov	r5, r2
 80154ee:	461e      	mov	r6, r3
 80154f0:	da0d      	bge.n	801550e <__swhatbuf_r+0x2e>
 80154f2:	89a3      	ldrh	r3, [r4, #12]
 80154f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80154f8:	f04f 0100 	mov.w	r1, #0
 80154fc:	bf14      	ite	ne
 80154fe:	2340      	movne	r3, #64	@ 0x40
 8015500:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015504:	2000      	movs	r0, #0
 8015506:	6031      	str	r1, [r6, #0]
 8015508:	602b      	str	r3, [r5, #0]
 801550a:	b016      	add	sp, #88	@ 0x58
 801550c:	bd70      	pop	{r4, r5, r6, pc}
 801550e:	466a      	mov	r2, sp
 8015510:	f000 f848 	bl	80155a4 <_fstat_r>
 8015514:	2800      	cmp	r0, #0
 8015516:	dbec      	blt.n	80154f2 <__swhatbuf_r+0x12>
 8015518:	9901      	ldr	r1, [sp, #4]
 801551a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801551e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015522:	4259      	negs	r1, r3
 8015524:	4159      	adcs	r1, r3
 8015526:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801552a:	e7eb      	b.n	8015504 <__swhatbuf_r+0x24>

0801552c <__smakebuf_r>:
 801552c:	898b      	ldrh	r3, [r1, #12]
 801552e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015530:	079d      	lsls	r5, r3, #30
 8015532:	4606      	mov	r6, r0
 8015534:	460c      	mov	r4, r1
 8015536:	d507      	bpl.n	8015548 <__smakebuf_r+0x1c>
 8015538:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801553c:	6023      	str	r3, [r4, #0]
 801553e:	6123      	str	r3, [r4, #16]
 8015540:	2301      	movs	r3, #1
 8015542:	6163      	str	r3, [r4, #20]
 8015544:	b003      	add	sp, #12
 8015546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015548:	ab01      	add	r3, sp, #4
 801554a:	466a      	mov	r2, sp
 801554c:	f7ff ffc8 	bl	80154e0 <__swhatbuf_r>
 8015550:	9f00      	ldr	r7, [sp, #0]
 8015552:	4605      	mov	r5, r0
 8015554:	4639      	mov	r1, r7
 8015556:	4630      	mov	r0, r6
 8015558:	f7fc ffd6 	bl	8012508 <_malloc_r>
 801555c:	b948      	cbnz	r0, 8015572 <__smakebuf_r+0x46>
 801555e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015562:	059a      	lsls	r2, r3, #22
 8015564:	d4ee      	bmi.n	8015544 <__smakebuf_r+0x18>
 8015566:	f023 0303 	bic.w	r3, r3, #3
 801556a:	f043 0302 	orr.w	r3, r3, #2
 801556e:	81a3      	strh	r3, [r4, #12]
 8015570:	e7e2      	b.n	8015538 <__smakebuf_r+0xc>
 8015572:	89a3      	ldrh	r3, [r4, #12]
 8015574:	6020      	str	r0, [r4, #0]
 8015576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801557a:	81a3      	strh	r3, [r4, #12]
 801557c:	9b01      	ldr	r3, [sp, #4]
 801557e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015582:	b15b      	cbz	r3, 801559c <__smakebuf_r+0x70>
 8015584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015588:	4630      	mov	r0, r6
 801558a:	f000 f81d 	bl	80155c8 <_isatty_r>
 801558e:	b128      	cbz	r0, 801559c <__smakebuf_r+0x70>
 8015590:	89a3      	ldrh	r3, [r4, #12]
 8015592:	f023 0303 	bic.w	r3, r3, #3
 8015596:	f043 0301 	orr.w	r3, r3, #1
 801559a:	81a3      	strh	r3, [r4, #12]
 801559c:	89a3      	ldrh	r3, [r4, #12]
 801559e:	431d      	orrs	r5, r3
 80155a0:	81a5      	strh	r5, [r4, #12]
 80155a2:	e7cf      	b.n	8015544 <__smakebuf_r+0x18>

080155a4 <_fstat_r>:
 80155a4:	b538      	push	{r3, r4, r5, lr}
 80155a6:	4d07      	ldr	r5, [pc, #28]	@ (80155c4 <_fstat_r+0x20>)
 80155a8:	2300      	movs	r3, #0
 80155aa:	4604      	mov	r4, r0
 80155ac:	4608      	mov	r0, r1
 80155ae:	4611      	mov	r1, r2
 80155b0:	602b      	str	r3, [r5, #0]
 80155b2:	f7ee fcab 	bl	8003f0c <_fstat>
 80155b6:	1c43      	adds	r3, r0, #1
 80155b8:	d102      	bne.n	80155c0 <_fstat_r+0x1c>
 80155ba:	682b      	ldr	r3, [r5, #0]
 80155bc:	b103      	cbz	r3, 80155c0 <_fstat_r+0x1c>
 80155be:	6023      	str	r3, [r4, #0]
 80155c0:	bd38      	pop	{r3, r4, r5, pc}
 80155c2:	bf00      	nop
 80155c4:	20002670 	.word	0x20002670

080155c8 <_isatty_r>:
 80155c8:	b538      	push	{r3, r4, r5, lr}
 80155ca:	4d06      	ldr	r5, [pc, #24]	@ (80155e4 <_isatty_r+0x1c>)
 80155cc:	2300      	movs	r3, #0
 80155ce:	4604      	mov	r4, r0
 80155d0:	4608      	mov	r0, r1
 80155d2:	602b      	str	r3, [r5, #0]
 80155d4:	f7ee fcaa 	bl	8003f2c <_isatty>
 80155d8:	1c43      	adds	r3, r0, #1
 80155da:	d102      	bne.n	80155e2 <_isatty_r+0x1a>
 80155dc:	682b      	ldr	r3, [r5, #0]
 80155de:	b103      	cbz	r3, 80155e2 <_isatty_r+0x1a>
 80155e0:	6023      	str	r3, [r4, #0]
 80155e2:	bd38      	pop	{r3, r4, r5, pc}
 80155e4:	20002670 	.word	0x20002670

080155e8 <acos>:
 80155e8:	b538      	push	{r3, r4, r5, lr}
 80155ea:	ed2d 8b02 	vpush	{d8}
 80155ee:	ec55 4b10 	vmov	r4, r5, d0
 80155f2:	f000 f9b9 	bl	8015968 <__ieee754_acos>
 80155f6:	4622      	mov	r2, r4
 80155f8:	462b      	mov	r3, r5
 80155fa:	4620      	mov	r0, r4
 80155fc:	4629      	mov	r1, r5
 80155fe:	eeb0 8a40 	vmov.f32	s16, s0
 8015602:	eef0 8a60 	vmov.f32	s17, s1
 8015606:	f7eb fab9 	bl	8000b7c <__aeabi_dcmpun>
 801560a:	b9a8      	cbnz	r0, 8015638 <acos+0x50>
 801560c:	ec45 4b10 	vmov	d0, r4, r5
 8015610:	f000 f8ba 	bl	8015788 <fabs>
 8015614:	4b0c      	ldr	r3, [pc, #48]	@ (8015648 <acos+0x60>)
 8015616:	ec51 0b10 	vmov	r0, r1, d0
 801561a:	2200      	movs	r2, #0
 801561c:	f7eb faa4 	bl	8000b68 <__aeabi_dcmpgt>
 8015620:	b150      	cbz	r0, 8015638 <acos+0x50>
 8015622:	f7fc f86d 	bl	8011700 <__errno>
 8015626:	ecbd 8b02 	vpop	{d8}
 801562a:	2321      	movs	r3, #33	@ 0x21
 801562c:	6003      	str	r3, [r0, #0]
 801562e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015632:	4806      	ldr	r0, [pc, #24]	@ (801564c <acos+0x64>)
 8015634:	f7ff b8e8 	b.w	8014808 <nan>
 8015638:	eeb0 0a48 	vmov.f32	s0, s16
 801563c:	eef0 0a68 	vmov.f32	s1, s17
 8015640:	ecbd 8b02 	vpop	{d8}
 8015644:	bd38      	pop	{r3, r4, r5, pc}
 8015646:	bf00      	nop
 8015648:	3ff00000 	.word	0x3ff00000
 801564c:	080171d0 	.word	0x080171d0

08015650 <pow>:
 8015650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015652:	ed2d 8b02 	vpush	{d8}
 8015656:	eeb0 8a40 	vmov.f32	s16, s0
 801565a:	eef0 8a60 	vmov.f32	s17, s1
 801565e:	ec55 4b11 	vmov	r4, r5, d1
 8015662:	f000 fbdd 	bl	8015e20 <__ieee754_pow>
 8015666:	4622      	mov	r2, r4
 8015668:	462b      	mov	r3, r5
 801566a:	4620      	mov	r0, r4
 801566c:	4629      	mov	r1, r5
 801566e:	ec57 6b10 	vmov	r6, r7, d0
 8015672:	f7eb fa83 	bl	8000b7c <__aeabi_dcmpun>
 8015676:	2800      	cmp	r0, #0
 8015678:	d13b      	bne.n	80156f2 <pow+0xa2>
 801567a:	ec51 0b18 	vmov	r0, r1, d8
 801567e:	2200      	movs	r2, #0
 8015680:	2300      	movs	r3, #0
 8015682:	f7eb fa49 	bl	8000b18 <__aeabi_dcmpeq>
 8015686:	b1b8      	cbz	r0, 80156b8 <pow+0x68>
 8015688:	2200      	movs	r2, #0
 801568a:	2300      	movs	r3, #0
 801568c:	4620      	mov	r0, r4
 801568e:	4629      	mov	r1, r5
 8015690:	f7eb fa42 	bl	8000b18 <__aeabi_dcmpeq>
 8015694:	2800      	cmp	r0, #0
 8015696:	d146      	bne.n	8015726 <pow+0xd6>
 8015698:	ec45 4b10 	vmov	d0, r4, r5
 801569c:	f000 f87c 	bl	8015798 <finite>
 80156a0:	b338      	cbz	r0, 80156f2 <pow+0xa2>
 80156a2:	2200      	movs	r2, #0
 80156a4:	2300      	movs	r3, #0
 80156a6:	4620      	mov	r0, r4
 80156a8:	4629      	mov	r1, r5
 80156aa:	f7eb fa3f 	bl	8000b2c <__aeabi_dcmplt>
 80156ae:	b300      	cbz	r0, 80156f2 <pow+0xa2>
 80156b0:	f7fc f826 	bl	8011700 <__errno>
 80156b4:	2322      	movs	r3, #34	@ 0x22
 80156b6:	e01b      	b.n	80156f0 <pow+0xa0>
 80156b8:	ec47 6b10 	vmov	d0, r6, r7
 80156bc:	f000 f86c 	bl	8015798 <finite>
 80156c0:	b9e0      	cbnz	r0, 80156fc <pow+0xac>
 80156c2:	eeb0 0a48 	vmov.f32	s0, s16
 80156c6:	eef0 0a68 	vmov.f32	s1, s17
 80156ca:	f000 f865 	bl	8015798 <finite>
 80156ce:	b1a8      	cbz	r0, 80156fc <pow+0xac>
 80156d0:	ec45 4b10 	vmov	d0, r4, r5
 80156d4:	f000 f860 	bl	8015798 <finite>
 80156d8:	b180      	cbz	r0, 80156fc <pow+0xac>
 80156da:	4632      	mov	r2, r6
 80156dc:	463b      	mov	r3, r7
 80156de:	4630      	mov	r0, r6
 80156e0:	4639      	mov	r1, r7
 80156e2:	f7eb fa4b 	bl	8000b7c <__aeabi_dcmpun>
 80156e6:	2800      	cmp	r0, #0
 80156e8:	d0e2      	beq.n	80156b0 <pow+0x60>
 80156ea:	f7fc f809 	bl	8011700 <__errno>
 80156ee:	2321      	movs	r3, #33	@ 0x21
 80156f0:	6003      	str	r3, [r0, #0]
 80156f2:	ecbd 8b02 	vpop	{d8}
 80156f6:	ec47 6b10 	vmov	d0, r6, r7
 80156fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156fc:	2200      	movs	r2, #0
 80156fe:	2300      	movs	r3, #0
 8015700:	4630      	mov	r0, r6
 8015702:	4639      	mov	r1, r7
 8015704:	f7eb fa08 	bl	8000b18 <__aeabi_dcmpeq>
 8015708:	2800      	cmp	r0, #0
 801570a:	d0f2      	beq.n	80156f2 <pow+0xa2>
 801570c:	eeb0 0a48 	vmov.f32	s0, s16
 8015710:	eef0 0a68 	vmov.f32	s1, s17
 8015714:	f000 f840 	bl	8015798 <finite>
 8015718:	2800      	cmp	r0, #0
 801571a:	d0ea      	beq.n	80156f2 <pow+0xa2>
 801571c:	ec45 4b10 	vmov	d0, r4, r5
 8015720:	f000 f83a 	bl	8015798 <finite>
 8015724:	e7c3      	b.n	80156ae <pow+0x5e>
 8015726:	4f01      	ldr	r7, [pc, #4]	@ (801572c <pow+0xdc>)
 8015728:	2600      	movs	r6, #0
 801572a:	e7e2      	b.n	80156f2 <pow+0xa2>
 801572c:	3ff00000 	.word	0x3ff00000

08015730 <sqrt>:
 8015730:	b538      	push	{r3, r4, r5, lr}
 8015732:	ed2d 8b02 	vpush	{d8}
 8015736:	ec55 4b10 	vmov	r4, r5, d0
 801573a:	f000 f839 	bl	80157b0 <__ieee754_sqrt>
 801573e:	4622      	mov	r2, r4
 8015740:	462b      	mov	r3, r5
 8015742:	4620      	mov	r0, r4
 8015744:	4629      	mov	r1, r5
 8015746:	eeb0 8a40 	vmov.f32	s16, s0
 801574a:	eef0 8a60 	vmov.f32	s17, s1
 801574e:	f7eb fa15 	bl	8000b7c <__aeabi_dcmpun>
 8015752:	b990      	cbnz	r0, 801577a <sqrt+0x4a>
 8015754:	2200      	movs	r2, #0
 8015756:	2300      	movs	r3, #0
 8015758:	4620      	mov	r0, r4
 801575a:	4629      	mov	r1, r5
 801575c:	f7eb f9e6 	bl	8000b2c <__aeabi_dcmplt>
 8015760:	b158      	cbz	r0, 801577a <sqrt+0x4a>
 8015762:	f7fb ffcd 	bl	8011700 <__errno>
 8015766:	2321      	movs	r3, #33	@ 0x21
 8015768:	6003      	str	r3, [r0, #0]
 801576a:	2200      	movs	r2, #0
 801576c:	2300      	movs	r3, #0
 801576e:	4610      	mov	r0, r2
 8015770:	4619      	mov	r1, r3
 8015772:	f7eb f893 	bl	800089c <__aeabi_ddiv>
 8015776:	ec41 0b18 	vmov	d8, r0, r1
 801577a:	eeb0 0a48 	vmov.f32	s0, s16
 801577e:	eef0 0a68 	vmov.f32	s1, s17
 8015782:	ecbd 8b02 	vpop	{d8}
 8015786:	bd38      	pop	{r3, r4, r5, pc}

08015788 <fabs>:
 8015788:	ec51 0b10 	vmov	r0, r1, d0
 801578c:	4602      	mov	r2, r0
 801578e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015792:	ec43 2b10 	vmov	d0, r2, r3
 8015796:	4770      	bx	lr

08015798 <finite>:
 8015798:	b082      	sub	sp, #8
 801579a:	ed8d 0b00 	vstr	d0, [sp]
 801579e:	9801      	ldr	r0, [sp, #4]
 80157a0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80157a4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80157a8:	0fc0      	lsrs	r0, r0, #31
 80157aa:	b002      	add	sp, #8
 80157ac:	4770      	bx	lr
	...

080157b0 <__ieee754_sqrt>:
 80157b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157b4:	4a68      	ldr	r2, [pc, #416]	@ (8015958 <__ieee754_sqrt+0x1a8>)
 80157b6:	ec55 4b10 	vmov	r4, r5, d0
 80157ba:	43aa      	bics	r2, r5
 80157bc:	462b      	mov	r3, r5
 80157be:	4621      	mov	r1, r4
 80157c0:	d110      	bne.n	80157e4 <__ieee754_sqrt+0x34>
 80157c2:	4622      	mov	r2, r4
 80157c4:	4620      	mov	r0, r4
 80157c6:	4629      	mov	r1, r5
 80157c8:	f7ea ff3e 	bl	8000648 <__aeabi_dmul>
 80157cc:	4602      	mov	r2, r0
 80157ce:	460b      	mov	r3, r1
 80157d0:	4620      	mov	r0, r4
 80157d2:	4629      	mov	r1, r5
 80157d4:	f7ea fd82 	bl	80002dc <__adddf3>
 80157d8:	4604      	mov	r4, r0
 80157da:	460d      	mov	r5, r1
 80157dc:	ec45 4b10 	vmov	d0, r4, r5
 80157e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157e4:	2d00      	cmp	r5, #0
 80157e6:	dc0e      	bgt.n	8015806 <__ieee754_sqrt+0x56>
 80157e8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80157ec:	4322      	orrs	r2, r4
 80157ee:	d0f5      	beq.n	80157dc <__ieee754_sqrt+0x2c>
 80157f0:	b19d      	cbz	r5, 801581a <__ieee754_sqrt+0x6a>
 80157f2:	4622      	mov	r2, r4
 80157f4:	4620      	mov	r0, r4
 80157f6:	4629      	mov	r1, r5
 80157f8:	f7ea fd6e 	bl	80002d8 <__aeabi_dsub>
 80157fc:	4602      	mov	r2, r0
 80157fe:	460b      	mov	r3, r1
 8015800:	f7eb f84c 	bl	800089c <__aeabi_ddiv>
 8015804:	e7e8      	b.n	80157d8 <__ieee754_sqrt+0x28>
 8015806:	152a      	asrs	r2, r5, #20
 8015808:	d115      	bne.n	8015836 <__ieee754_sqrt+0x86>
 801580a:	2000      	movs	r0, #0
 801580c:	e009      	b.n	8015822 <__ieee754_sqrt+0x72>
 801580e:	0acb      	lsrs	r3, r1, #11
 8015810:	3a15      	subs	r2, #21
 8015812:	0549      	lsls	r1, r1, #21
 8015814:	2b00      	cmp	r3, #0
 8015816:	d0fa      	beq.n	801580e <__ieee754_sqrt+0x5e>
 8015818:	e7f7      	b.n	801580a <__ieee754_sqrt+0x5a>
 801581a:	462a      	mov	r2, r5
 801581c:	e7fa      	b.n	8015814 <__ieee754_sqrt+0x64>
 801581e:	005b      	lsls	r3, r3, #1
 8015820:	3001      	adds	r0, #1
 8015822:	02dc      	lsls	r4, r3, #11
 8015824:	d5fb      	bpl.n	801581e <__ieee754_sqrt+0x6e>
 8015826:	1e44      	subs	r4, r0, #1
 8015828:	1b12      	subs	r2, r2, r4
 801582a:	f1c0 0420 	rsb	r4, r0, #32
 801582e:	fa21 f404 	lsr.w	r4, r1, r4
 8015832:	4323      	orrs	r3, r4
 8015834:	4081      	lsls	r1, r0
 8015836:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801583a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801583e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015842:	07d2      	lsls	r2, r2, #31
 8015844:	bf5c      	itt	pl
 8015846:	005b      	lslpl	r3, r3, #1
 8015848:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801584c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015850:	bf58      	it	pl
 8015852:	0049      	lslpl	r1, r1, #1
 8015854:	2600      	movs	r6, #0
 8015856:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801585a:	106d      	asrs	r5, r5, #1
 801585c:	0049      	lsls	r1, r1, #1
 801585e:	2016      	movs	r0, #22
 8015860:	4632      	mov	r2, r6
 8015862:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8015866:	1917      	adds	r7, r2, r4
 8015868:	429f      	cmp	r7, r3
 801586a:	bfde      	ittt	le
 801586c:	193a      	addle	r2, r7, r4
 801586e:	1bdb      	suble	r3, r3, r7
 8015870:	1936      	addle	r6, r6, r4
 8015872:	0fcf      	lsrs	r7, r1, #31
 8015874:	3801      	subs	r0, #1
 8015876:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801587a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801587e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015882:	d1f0      	bne.n	8015866 <__ieee754_sqrt+0xb6>
 8015884:	4604      	mov	r4, r0
 8015886:	2720      	movs	r7, #32
 8015888:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801588c:	429a      	cmp	r2, r3
 801588e:	eb00 0e0c 	add.w	lr, r0, ip
 8015892:	db02      	blt.n	801589a <__ieee754_sqrt+0xea>
 8015894:	d113      	bne.n	80158be <__ieee754_sqrt+0x10e>
 8015896:	458e      	cmp	lr, r1
 8015898:	d811      	bhi.n	80158be <__ieee754_sqrt+0x10e>
 801589a:	f1be 0f00 	cmp.w	lr, #0
 801589e:	eb0e 000c 	add.w	r0, lr, ip
 80158a2:	da42      	bge.n	801592a <__ieee754_sqrt+0x17a>
 80158a4:	2800      	cmp	r0, #0
 80158a6:	db40      	blt.n	801592a <__ieee754_sqrt+0x17a>
 80158a8:	f102 0801 	add.w	r8, r2, #1
 80158ac:	1a9b      	subs	r3, r3, r2
 80158ae:	458e      	cmp	lr, r1
 80158b0:	bf88      	it	hi
 80158b2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80158b6:	eba1 010e 	sub.w	r1, r1, lr
 80158ba:	4464      	add	r4, ip
 80158bc:	4642      	mov	r2, r8
 80158be:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80158c2:	3f01      	subs	r7, #1
 80158c4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80158c8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80158cc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80158d0:	d1dc      	bne.n	801588c <__ieee754_sqrt+0xdc>
 80158d2:	4319      	orrs	r1, r3
 80158d4:	d01b      	beq.n	801590e <__ieee754_sqrt+0x15e>
 80158d6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801595c <__ieee754_sqrt+0x1ac>
 80158da:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8015960 <__ieee754_sqrt+0x1b0>
 80158de:	e9da 0100 	ldrd	r0, r1, [sl]
 80158e2:	e9db 2300 	ldrd	r2, r3, [fp]
 80158e6:	f7ea fcf7 	bl	80002d8 <__aeabi_dsub>
 80158ea:	e9da 8900 	ldrd	r8, r9, [sl]
 80158ee:	4602      	mov	r2, r0
 80158f0:	460b      	mov	r3, r1
 80158f2:	4640      	mov	r0, r8
 80158f4:	4649      	mov	r1, r9
 80158f6:	f7eb f923 	bl	8000b40 <__aeabi_dcmple>
 80158fa:	b140      	cbz	r0, 801590e <__ieee754_sqrt+0x15e>
 80158fc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8015900:	e9da 0100 	ldrd	r0, r1, [sl]
 8015904:	e9db 2300 	ldrd	r2, r3, [fp]
 8015908:	d111      	bne.n	801592e <__ieee754_sqrt+0x17e>
 801590a:	3601      	adds	r6, #1
 801590c:	463c      	mov	r4, r7
 801590e:	1072      	asrs	r2, r6, #1
 8015910:	0863      	lsrs	r3, r4, #1
 8015912:	07f1      	lsls	r1, r6, #31
 8015914:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8015918:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801591c:	bf48      	it	mi
 801591e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8015922:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8015926:	4618      	mov	r0, r3
 8015928:	e756      	b.n	80157d8 <__ieee754_sqrt+0x28>
 801592a:	4690      	mov	r8, r2
 801592c:	e7be      	b.n	80158ac <__ieee754_sqrt+0xfc>
 801592e:	f7ea fcd5 	bl	80002dc <__adddf3>
 8015932:	e9da 8900 	ldrd	r8, r9, [sl]
 8015936:	4602      	mov	r2, r0
 8015938:	460b      	mov	r3, r1
 801593a:	4640      	mov	r0, r8
 801593c:	4649      	mov	r1, r9
 801593e:	f7eb f8f5 	bl	8000b2c <__aeabi_dcmplt>
 8015942:	b120      	cbz	r0, 801594e <__ieee754_sqrt+0x19e>
 8015944:	1ca0      	adds	r0, r4, #2
 8015946:	bf08      	it	eq
 8015948:	3601      	addeq	r6, #1
 801594a:	3402      	adds	r4, #2
 801594c:	e7df      	b.n	801590e <__ieee754_sqrt+0x15e>
 801594e:	1c63      	adds	r3, r4, #1
 8015950:	f023 0401 	bic.w	r4, r3, #1
 8015954:	e7db      	b.n	801590e <__ieee754_sqrt+0x15e>
 8015956:	bf00      	nop
 8015958:	7ff00000 	.word	0x7ff00000
 801595c:	20000378 	.word	0x20000378
 8015960:	20000370 	.word	0x20000370
 8015964:	00000000 	.word	0x00000000

08015968 <__ieee754_acos>:
 8015968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801596c:	ec55 4b10 	vmov	r4, r5, d0
 8015970:	49b7      	ldr	r1, [pc, #732]	@ (8015c50 <__ieee754_acos+0x2e8>)
 8015972:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8015976:	428b      	cmp	r3, r1
 8015978:	d919      	bls.n	80159ae <__ieee754_acos+0x46>
 801597a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 801597e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8015982:	4323      	orrs	r3, r4
 8015984:	d106      	bne.n	8015994 <__ieee754_acos+0x2c>
 8015986:	2d00      	cmp	r5, #0
 8015988:	f340 8210 	ble.w	8015dac <__ieee754_acos+0x444>
 801598c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8015be0 <__ieee754_acos+0x278>
 8015990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015994:	4622      	mov	r2, r4
 8015996:	462b      	mov	r3, r5
 8015998:	4620      	mov	r0, r4
 801599a:	4629      	mov	r1, r5
 801599c:	f7ea fc9c 	bl	80002d8 <__aeabi_dsub>
 80159a0:	4602      	mov	r2, r0
 80159a2:	460b      	mov	r3, r1
 80159a4:	f7ea ff7a 	bl	800089c <__aeabi_ddiv>
 80159a8:	ec41 0b10 	vmov	d0, r0, r1
 80159ac:	e7f0      	b.n	8015990 <__ieee754_acos+0x28>
 80159ae:	49a9      	ldr	r1, [pc, #676]	@ (8015c54 <__ieee754_acos+0x2ec>)
 80159b0:	428b      	cmp	r3, r1
 80159b2:	f200 8085 	bhi.w	8015ac0 <__ieee754_acos+0x158>
 80159b6:	4aa8      	ldr	r2, [pc, #672]	@ (8015c58 <__ieee754_acos+0x2f0>)
 80159b8:	4293      	cmp	r3, r2
 80159ba:	f240 81fa 	bls.w	8015db2 <__ieee754_acos+0x44a>
 80159be:	4622      	mov	r2, r4
 80159c0:	462b      	mov	r3, r5
 80159c2:	4620      	mov	r0, r4
 80159c4:	4629      	mov	r1, r5
 80159c6:	f7ea fe3f 	bl	8000648 <__aeabi_dmul>
 80159ca:	a387      	add	r3, pc, #540	@ (adr r3, 8015be8 <__ieee754_acos+0x280>)
 80159cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159d0:	4606      	mov	r6, r0
 80159d2:	460f      	mov	r7, r1
 80159d4:	f7ea fe38 	bl	8000648 <__aeabi_dmul>
 80159d8:	a385      	add	r3, pc, #532	@ (adr r3, 8015bf0 <__ieee754_acos+0x288>)
 80159da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159de:	f7ea fc7d 	bl	80002dc <__adddf3>
 80159e2:	4632      	mov	r2, r6
 80159e4:	463b      	mov	r3, r7
 80159e6:	f7ea fe2f 	bl	8000648 <__aeabi_dmul>
 80159ea:	a383      	add	r3, pc, #524	@ (adr r3, 8015bf8 <__ieee754_acos+0x290>)
 80159ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159f0:	f7ea fc72 	bl	80002d8 <__aeabi_dsub>
 80159f4:	4632      	mov	r2, r6
 80159f6:	463b      	mov	r3, r7
 80159f8:	f7ea fe26 	bl	8000648 <__aeabi_dmul>
 80159fc:	a380      	add	r3, pc, #512	@ (adr r3, 8015c00 <__ieee754_acos+0x298>)
 80159fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a02:	f7ea fc6b 	bl	80002dc <__adddf3>
 8015a06:	4632      	mov	r2, r6
 8015a08:	463b      	mov	r3, r7
 8015a0a:	f7ea fe1d 	bl	8000648 <__aeabi_dmul>
 8015a0e:	a37e      	add	r3, pc, #504	@ (adr r3, 8015c08 <__ieee754_acos+0x2a0>)
 8015a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a14:	f7ea fc60 	bl	80002d8 <__aeabi_dsub>
 8015a18:	4632      	mov	r2, r6
 8015a1a:	463b      	mov	r3, r7
 8015a1c:	f7ea fe14 	bl	8000648 <__aeabi_dmul>
 8015a20:	a37b      	add	r3, pc, #492	@ (adr r3, 8015c10 <__ieee754_acos+0x2a8>)
 8015a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a26:	f7ea fc59 	bl	80002dc <__adddf3>
 8015a2a:	4632      	mov	r2, r6
 8015a2c:	463b      	mov	r3, r7
 8015a2e:	f7ea fe0b 	bl	8000648 <__aeabi_dmul>
 8015a32:	a379      	add	r3, pc, #484	@ (adr r3, 8015c18 <__ieee754_acos+0x2b0>)
 8015a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a38:	4680      	mov	r8, r0
 8015a3a:	4689      	mov	r9, r1
 8015a3c:	4630      	mov	r0, r6
 8015a3e:	4639      	mov	r1, r7
 8015a40:	f7ea fe02 	bl	8000648 <__aeabi_dmul>
 8015a44:	a376      	add	r3, pc, #472	@ (adr r3, 8015c20 <__ieee754_acos+0x2b8>)
 8015a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a4a:	f7ea fc45 	bl	80002d8 <__aeabi_dsub>
 8015a4e:	4632      	mov	r2, r6
 8015a50:	463b      	mov	r3, r7
 8015a52:	f7ea fdf9 	bl	8000648 <__aeabi_dmul>
 8015a56:	a374      	add	r3, pc, #464	@ (adr r3, 8015c28 <__ieee754_acos+0x2c0>)
 8015a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a5c:	f7ea fc3e 	bl	80002dc <__adddf3>
 8015a60:	4632      	mov	r2, r6
 8015a62:	463b      	mov	r3, r7
 8015a64:	f7ea fdf0 	bl	8000648 <__aeabi_dmul>
 8015a68:	a371      	add	r3, pc, #452	@ (adr r3, 8015c30 <__ieee754_acos+0x2c8>)
 8015a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a6e:	f7ea fc33 	bl	80002d8 <__aeabi_dsub>
 8015a72:	4632      	mov	r2, r6
 8015a74:	463b      	mov	r3, r7
 8015a76:	f7ea fde7 	bl	8000648 <__aeabi_dmul>
 8015a7a:	4b78      	ldr	r3, [pc, #480]	@ (8015c5c <__ieee754_acos+0x2f4>)
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	f7ea fc2d 	bl	80002dc <__adddf3>
 8015a82:	4602      	mov	r2, r0
 8015a84:	460b      	mov	r3, r1
 8015a86:	4640      	mov	r0, r8
 8015a88:	4649      	mov	r1, r9
 8015a8a:	f7ea ff07 	bl	800089c <__aeabi_ddiv>
 8015a8e:	4622      	mov	r2, r4
 8015a90:	462b      	mov	r3, r5
 8015a92:	f7ea fdd9 	bl	8000648 <__aeabi_dmul>
 8015a96:	4602      	mov	r2, r0
 8015a98:	460b      	mov	r3, r1
 8015a9a:	a167      	add	r1, pc, #412	@ (adr r1, 8015c38 <__ieee754_acos+0x2d0>)
 8015a9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015aa0:	f7ea fc1a 	bl	80002d8 <__aeabi_dsub>
 8015aa4:	4602      	mov	r2, r0
 8015aa6:	460b      	mov	r3, r1
 8015aa8:	4620      	mov	r0, r4
 8015aaa:	4629      	mov	r1, r5
 8015aac:	f7ea fc14 	bl	80002d8 <__aeabi_dsub>
 8015ab0:	4602      	mov	r2, r0
 8015ab2:	460b      	mov	r3, r1
 8015ab4:	a162      	add	r1, pc, #392	@ (adr r1, 8015c40 <__ieee754_acos+0x2d8>)
 8015ab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015aba:	f7ea fc0d 	bl	80002d8 <__aeabi_dsub>
 8015abe:	e773      	b.n	80159a8 <__ieee754_acos+0x40>
 8015ac0:	2d00      	cmp	r5, #0
 8015ac2:	f280 80cf 	bge.w	8015c64 <__ieee754_acos+0x2fc>
 8015ac6:	4b65      	ldr	r3, [pc, #404]	@ (8015c5c <__ieee754_acos+0x2f4>)
 8015ac8:	2200      	movs	r2, #0
 8015aca:	4620      	mov	r0, r4
 8015acc:	4629      	mov	r1, r5
 8015ace:	f7ea fc05 	bl	80002dc <__adddf3>
 8015ad2:	4b63      	ldr	r3, [pc, #396]	@ (8015c60 <__ieee754_acos+0x2f8>)
 8015ad4:	2200      	movs	r2, #0
 8015ad6:	f7ea fdb7 	bl	8000648 <__aeabi_dmul>
 8015ada:	a343      	add	r3, pc, #268	@ (adr r3, 8015be8 <__ieee754_acos+0x280>)
 8015adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ae0:	4604      	mov	r4, r0
 8015ae2:	460d      	mov	r5, r1
 8015ae4:	f7ea fdb0 	bl	8000648 <__aeabi_dmul>
 8015ae8:	a341      	add	r3, pc, #260	@ (adr r3, 8015bf0 <__ieee754_acos+0x288>)
 8015aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aee:	f7ea fbf5 	bl	80002dc <__adddf3>
 8015af2:	4622      	mov	r2, r4
 8015af4:	462b      	mov	r3, r5
 8015af6:	f7ea fda7 	bl	8000648 <__aeabi_dmul>
 8015afa:	a33f      	add	r3, pc, #252	@ (adr r3, 8015bf8 <__ieee754_acos+0x290>)
 8015afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b00:	f7ea fbea 	bl	80002d8 <__aeabi_dsub>
 8015b04:	4622      	mov	r2, r4
 8015b06:	462b      	mov	r3, r5
 8015b08:	f7ea fd9e 	bl	8000648 <__aeabi_dmul>
 8015b0c:	a33c      	add	r3, pc, #240	@ (adr r3, 8015c00 <__ieee754_acos+0x298>)
 8015b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b12:	f7ea fbe3 	bl	80002dc <__adddf3>
 8015b16:	4622      	mov	r2, r4
 8015b18:	462b      	mov	r3, r5
 8015b1a:	f7ea fd95 	bl	8000648 <__aeabi_dmul>
 8015b1e:	a33a      	add	r3, pc, #232	@ (adr r3, 8015c08 <__ieee754_acos+0x2a0>)
 8015b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b24:	f7ea fbd8 	bl	80002d8 <__aeabi_dsub>
 8015b28:	4622      	mov	r2, r4
 8015b2a:	462b      	mov	r3, r5
 8015b2c:	f7ea fd8c 	bl	8000648 <__aeabi_dmul>
 8015b30:	a337      	add	r3, pc, #220	@ (adr r3, 8015c10 <__ieee754_acos+0x2a8>)
 8015b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b36:	f7ea fbd1 	bl	80002dc <__adddf3>
 8015b3a:	4622      	mov	r2, r4
 8015b3c:	462b      	mov	r3, r5
 8015b3e:	f7ea fd83 	bl	8000648 <__aeabi_dmul>
 8015b42:	a335      	add	r3, pc, #212	@ (adr r3, 8015c18 <__ieee754_acos+0x2b0>)
 8015b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b48:	4606      	mov	r6, r0
 8015b4a:	460f      	mov	r7, r1
 8015b4c:	4620      	mov	r0, r4
 8015b4e:	4629      	mov	r1, r5
 8015b50:	f7ea fd7a 	bl	8000648 <__aeabi_dmul>
 8015b54:	a332      	add	r3, pc, #200	@ (adr r3, 8015c20 <__ieee754_acos+0x2b8>)
 8015b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b5a:	f7ea fbbd 	bl	80002d8 <__aeabi_dsub>
 8015b5e:	4622      	mov	r2, r4
 8015b60:	462b      	mov	r3, r5
 8015b62:	f7ea fd71 	bl	8000648 <__aeabi_dmul>
 8015b66:	a330      	add	r3, pc, #192	@ (adr r3, 8015c28 <__ieee754_acos+0x2c0>)
 8015b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b6c:	f7ea fbb6 	bl	80002dc <__adddf3>
 8015b70:	4622      	mov	r2, r4
 8015b72:	462b      	mov	r3, r5
 8015b74:	f7ea fd68 	bl	8000648 <__aeabi_dmul>
 8015b78:	a32d      	add	r3, pc, #180	@ (adr r3, 8015c30 <__ieee754_acos+0x2c8>)
 8015b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b7e:	f7ea fbab 	bl	80002d8 <__aeabi_dsub>
 8015b82:	4622      	mov	r2, r4
 8015b84:	462b      	mov	r3, r5
 8015b86:	f7ea fd5f 	bl	8000648 <__aeabi_dmul>
 8015b8a:	4b34      	ldr	r3, [pc, #208]	@ (8015c5c <__ieee754_acos+0x2f4>)
 8015b8c:	2200      	movs	r2, #0
 8015b8e:	f7ea fba5 	bl	80002dc <__adddf3>
 8015b92:	ec45 4b10 	vmov	d0, r4, r5
 8015b96:	4680      	mov	r8, r0
 8015b98:	4689      	mov	r9, r1
 8015b9a:	f7ff fe09 	bl	80157b0 <__ieee754_sqrt>
 8015b9e:	ec55 4b10 	vmov	r4, r5, d0
 8015ba2:	4642      	mov	r2, r8
 8015ba4:	464b      	mov	r3, r9
 8015ba6:	4630      	mov	r0, r6
 8015ba8:	4639      	mov	r1, r7
 8015baa:	f7ea fe77 	bl	800089c <__aeabi_ddiv>
 8015bae:	4622      	mov	r2, r4
 8015bb0:	462b      	mov	r3, r5
 8015bb2:	f7ea fd49 	bl	8000648 <__aeabi_dmul>
 8015bb6:	a320      	add	r3, pc, #128	@ (adr r3, 8015c38 <__ieee754_acos+0x2d0>)
 8015bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bbc:	f7ea fb8c 	bl	80002d8 <__aeabi_dsub>
 8015bc0:	4622      	mov	r2, r4
 8015bc2:	462b      	mov	r3, r5
 8015bc4:	f7ea fb8a 	bl	80002dc <__adddf3>
 8015bc8:	4602      	mov	r2, r0
 8015bca:	460b      	mov	r3, r1
 8015bcc:	f7ea fb86 	bl	80002dc <__adddf3>
 8015bd0:	4602      	mov	r2, r0
 8015bd2:	460b      	mov	r3, r1
 8015bd4:	a11c      	add	r1, pc, #112	@ (adr r1, 8015c48 <__ieee754_acos+0x2e0>)
 8015bd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015bda:	e76e      	b.n	8015aba <__ieee754_acos+0x152>
 8015bdc:	f3af 8000 	nop.w
	...
 8015be8:	0dfdf709 	.word	0x0dfdf709
 8015bec:	3f023de1 	.word	0x3f023de1
 8015bf0:	7501b288 	.word	0x7501b288
 8015bf4:	3f49efe0 	.word	0x3f49efe0
 8015bf8:	b5688f3b 	.word	0xb5688f3b
 8015bfc:	3fa48228 	.word	0x3fa48228
 8015c00:	0e884455 	.word	0x0e884455
 8015c04:	3fc9c155 	.word	0x3fc9c155
 8015c08:	03eb6f7d 	.word	0x03eb6f7d
 8015c0c:	3fd4d612 	.word	0x3fd4d612
 8015c10:	55555555 	.word	0x55555555
 8015c14:	3fc55555 	.word	0x3fc55555
 8015c18:	b12e9282 	.word	0xb12e9282
 8015c1c:	3fb3b8c5 	.word	0x3fb3b8c5
 8015c20:	1b8d0159 	.word	0x1b8d0159
 8015c24:	3fe6066c 	.word	0x3fe6066c
 8015c28:	9c598ac8 	.word	0x9c598ac8
 8015c2c:	40002ae5 	.word	0x40002ae5
 8015c30:	1c8a2d4b 	.word	0x1c8a2d4b
 8015c34:	40033a27 	.word	0x40033a27
 8015c38:	33145c07 	.word	0x33145c07
 8015c3c:	3c91a626 	.word	0x3c91a626
 8015c40:	54442d18 	.word	0x54442d18
 8015c44:	3ff921fb 	.word	0x3ff921fb
 8015c48:	54442d18 	.word	0x54442d18
 8015c4c:	400921fb 	.word	0x400921fb
 8015c50:	3fefffff 	.word	0x3fefffff
 8015c54:	3fdfffff 	.word	0x3fdfffff
 8015c58:	3c600000 	.word	0x3c600000
 8015c5c:	3ff00000 	.word	0x3ff00000
 8015c60:	3fe00000 	.word	0x3fe00000
 8015c64:	4622      	mov	r2, r4
 8015c66:	462b      	mov	r3, r5
 8015c68:	496b      	ldr	r1, [pc, #428]	@ (8015e18 <__ieee754_acos+0x4b0>)
 8015c6a:	2000      	movs	r0, #0
 8015c6c:	f7ea fb34 	bl	80002d8 <__aeabi_dsub>
 8015c70:	4b6a      	ldr	r3, [pc, #424]	@ (8015e1c <__ieee754_acos+0x4b4>)
 8015c72:	2200      	movs	r2, #0
 8015c74:	f7ea fce8 	bl	8000648 <__aeabi_dmul>
 8015c78:	4604      	mov	r4, r0
 8015c7a:	460d      	mov	r5, r1
 8015c7c:	ec45 4b10 	vmov	d0, r4, r5
 8015c80:	f7ff fd96 	bl	80157b0 <__ieee754_sqrt>
 8015c84:	a34c      	add	r3, pc, #304	@ (adr r3, 8015db8 <__ieee754_acos+0x450>)
 8015c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c8a:	4620      	mov	r0, r4
 8015c8c:	4629      	mov	r1, r5
 8015c8e:	ec59 8b10 	vmov	r8, r9, d0
 8015c92:	f7ea fcd9 	bl	8000648 <__aeabi_dmul>
 8015c96:	a34a      	add	r3, pc, #296	@ (adr r3, 8015dc0 <__ieee754_acos+0x458>)
 8015c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c9c:	f7ea fb1e 	bl	80002dc <__adddf3>
 8015ca0:	4622      	mov	r2, r4
 8015ca2:	462b      	mov	r3, r5
 8015ca4:	f7ea fcd0 	bl	8000648 <__aeabi_dmul>
 8015ca8:	a347      	add	r3, pc, #284	@ (adr r3, 8015dc8 <__ieee754_acos+0x460>)
 8015caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cae:	f7ea fb13 	bl	80002d8 <__aeabi_dsub>
 8015cb2:	4622      	mov	r2, r4
 8015cb4:	462b      	mov	r3, r5
 8015cb6:	f7ea fcc7 	bl	8000648 <__aeabi_dmul>
 8015cba:	a345      	add	r3, pc, #276	@ (adr r3, 8015dd0 <__ieee754_acos+0x468>)
 8015cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cc0:	f7ea fb0c 	bl	80002dc <__adddf3>
 8015cc4:	4622      	mov	r2, r4
 8015cc6:	462b      	mov	r3, r5
 8015cc8:	f7ea fcbe 	bl	8000648 <__aeabi_dmul>
 8015ccc:	a342      	add	r3, pc, #264	@ (adr r3, 8015dd8 <__ieee754_acos+0x470>)
 8015cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cd2:	f7ea fb01 	bl	80002d8 <__aeabi_dsub>
 8015cd6:	4622      	mov	r2, r4
 8015cd8:	462b      	mov	r3, r5
 8015cda:	f7ea fcb5 	bl	8000648 <__aeabi_dmul>
 8015cde:	a340      	add	r3, pc, #256	@ (adr r3, 8015de0 <__ieee754_acos+0x478>)
 8015ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ce4:	f7ea fafa 	bl	80002dc <__adddf3>
 8015ce8:	4622      	mov	r2, r4
 8015cea:	462b      	mov	r3, r5
 8015cec:	f7ea fcac 	bl	8000648 <__aeabi_dmul>
 8015cf0:	a33d      	add	r3, pc, #244	@ (adr r3, 8015de8 <__ieee754_acos+0x480>)
 8015cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cf6:	4682      	mov	sl, r0
 8015cf8:	468b      	mov	fp, r1
 8015cfa:	4620      	mov	r0, r4
 8015cfc:	4629      	mov	r1, r5
 8015cfe:	f7ea fca3 	bl	8000648 <__aeabi_dmul>
 8015d02:	a33b      	add	r3, pc, #236	@ (adr r3, 8015df0 <__ieee754_acos+0x488>)
 8015d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d08:	f7ea fae6 	bl	80002d8 <__aeabi_dsub>
 8015d0c:	4622      	mov	r2, r4
 8015d0e:	462b      	mov	r3, r5
 8015d10:	f7ea fc9a 	bl	8000648 <__aeabi_dmul>
 8015d14:	a338      	add	r3, pc, #224	@ (adr r3, 8015df8 <__ieee754_acos+0x490>)
 8015d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d1a:	f7ea fadf 	bl	80002dc <__adddf3>
 8015d1e:	4622      	mov	r2, r4
 8015d20:	462b      	mov	r3, r5
 8015d22:	f7ea fc91 	bl	8000648 <__aeabi_dmul>
 8015d26:	a336      	add	r3, pc, #216	@ (adr r3, 8015e00 <__ieee754_acos+0x498>)
 8015d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d2c:	f7ea fad4 	bl	80002d8 <__aeabi_dsub>
 8015d30:	4622      	mov	r2, r4
 8015d32:	462b      	mov	r3, r5
 8015d34:	f7ea fc88 	bl	8000648 <__aeabi_dmul>
 8015d38:	4b37      	ldr	r3, [pc, #220]	@ (8015e18 <__ieee754_acos+0x4b0>)
 8015d3a:	2200      	movs	r2, #0
 8015d3c:	f7ea face 	bl	80002dc <__adddf3>
 8015d40:	4602      	mov	r2, r0
 8015d42:	460b      	mov	r3, r1
 8015d44:	4650      	mov	r0, sl
 8015d46:	4659      	mov	r1, fp
 8015d48:	f7ea fda8 	bl	800089c <__aeabi_ddiv>
 8015d4c:	4642      	mov	r2, r8
 8015d4e:	464b      	mov	r3, r9
 8015d50:	f7ea fc7a 	bl	8000648 <__aeabi_dmul>
 8015d54:	2600      	movs	r6, #0
 8015d56:	4682      	mov	sl, r0
 8015d58:	468b      	mov	fp, r1
 8015d5a:	4632      	mov	r2, r6
 8015d5c:	464b      	mov	r3, r9
 8015d5e:	4630      	mov	r0, r6
 8015d60:	4649      	mov	r1, r9
 8015d62:	f7ea fc71 	bl	8000648 <__aeabi_dmul>
 8015d66:	4602      	mov	r2, r0
 8015d68:	460b      	mov	r3, r1
 8015d6a:	4620      	mov	r0, r4
 8015d6c:	4629      	mov	r1, r5
 8015d6e:	f7ea fab3 	bl	80002d8 <__aeabi_dsub>
 8015d72:	4632      	mov	r2, r6
 8015d74:	4604      	mov	r4, r0
 8015d76:	460d      	mov	r5, r1
 8015d78:	464b      	mov	r3, r9
 8015d7a:	4640      	mov	r0, r8
 8015d7c:	4649      	mov	r1, r9
 8015d7e:	f7ea faad 	bl	80002dc <__adddf3>
 8015d82:	4602      	mov	r2, r0
 8015d84:	460b      	mov	r3, r1
 8015d86:	4620      	mov	r0, r4
 8015d88:	4629      	mov	r1, r5
 8015d8a:	f7ea fd87 	bl	800089c <__aeabi_ddiv>
 8015d8e:	4602      	mov	r2, r0
 8015d90:	460b      	mov	r3, r1
 8015d92:	4650      	mov	r0, sl
 8015d94:	4659      	mov	r1, fp
 8015d96:	f7ea faa1 	bl	80002dc <__adddf3>
 8015d9a:	4632      	mov	r2, r6
 8015d9c:	464b      	mov	r3, r9
 8015d9e:	f7ea fa9d 	bl	80002dc <__adddf3>
 8015da2:	4602      	mov	r2, r0
 8015da4:	460b      	mov	r3, r1
 8015da6:	f7ea fa99 	bl	80002dc <__adddf3>
 8015daa:	e5fd      	b.n	80159a8 <__ieee754_acos+0x40>
 8015dac:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8015e08 <__ieee754_acos+0x4a0>
 8015db0:	e5ee      	b.n	8015990 <__ieee754_acos+0x28>
 8015db2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8015e10 <__ieee754_acos+0x4a8>
 8015db6:	e5eb      	b.n	8015990 <__ieee754_acos+0x28>
 8015db8:	0dfdf709 	.word	0x0dfdf709
 8015dbc:	3f023de1 	.word	0x3f023de1
 8015dc0:	7501b288 	.word	0x7501b288
 8015dc4:	3f49efe0 	.word	0x3f49efe0
 8015dc8:	b5688f3b 	.word	0xb5688f3b
 8015dcc:	3fa48228 	.word	0x3fa48228
 8015dd0:	0e884455 	.word	0x0e884455
 8015dd4:	3fc9c155 	.word	0x3fc9c155
 8015dd8:	03eb6f7d 	.word	0x03eb6f7d
 8015ddc:	3fd4d612 	.word	0x3fd4d612
 8015de0:	55555555 	.word	0x55555555
 8015de4:	3fc55555 	.word	0x3fc55555
 8015de8:	b12e9282 	.word	0xb12e9282
 8015dec:	3fb3b8c5 	.word	0x3fb3b8c5
 8015df0:	1b8d0159 	.word	0x1b8d0159
 8015df4:	3fe6066c 	.word	0x3fe6066c
 8015df8:	9c598ac8 	.word	0x9c598ac8
 8015dfc:	40002ae5 	.word	0x40002ae5
 8015e00:	1c8a2d4b 	.word	0x1c8a2d4b
 8015e04:	40033a27 	.word	0x40033a27
 8015e08:	54442d18 	.word	0x54442d18
 8015e0c:	400921fb 	.word	0x400921fb
 8015e10:	54442d18 	.word	0x54442d18
 8015e14:	3ff921fb 	.word	0x3ff921fb
 8015e18:	3ff00000 	.word	0x3ff00000
 8015e1c:	3fe00000 	.word	0x3fe00000

08015e20 <__ieee754_pow>:
 8015e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e24:	b091      	sub	sp, #68	@ 0x44
 8015e26:	ed8d 1b00 	vstr	d1, [sp]
 8015e2a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8015e2e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8015e32:	ea5a 0001 	orrs.w	r0, sl, r1
 8015e36:	ec57 6b10 	vmov	r6, r7, d0
 8015e3a:	d113      	bne.n	8015e64 <__ieee754_pow+0x44>
 8015e3c:	19b3      	adds	r3, r6, r6
 8015e3e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8015e42:	4152      	adcs	r2, r2
 8015e44:	4298      	cmp	r0, r3
 8015e46:	4b98      	ldr	r3, [pc, #608]	@ (80160a8 <__ieee754_pow+0x288>)
 8015e48:	4193      	sbcs	r3, r2
 8015e4a:	f080 84ea 	bcs.w	8016822 <__ieee754_pow+0xa02>
 8015e4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015e52:	4630      	mov	r0, r6
 8015e54:	4639      	mov	r1, r7
 8015e56:	f7ea fa41 	bl	80002dc <__adddf3>
 8015e5a:	ec41 0b10 	vmov	d0, r0, r1
 8015e5e:	b011      	add	sp, #68	@ 0x44
 8015e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e64:	4a91      	ldr	r2, [pc, #580]	@ (80160ac <__ieee754_pow+0x28c>)
 8015e66:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8015e6a:	4590      	cmp	r8, r2
 8015e6c:	463d      	mov	r5, r7
 8015e6e:	4633      	mov	r3, r6
 8015e70:	d806      	bhi.n	8015e80 <__ieee754_pow+0x60>
 8015e72:	d101      	bne.n	8015e78 <__ieee754_pow+0x58>
 8015e74:	2e00      	cmp	r6, #0
 8015e76:	d1ea      	bne.n	8015e4e <__ieee754_pow+0x2e>
 8015e78:	4592      	cmp	sl, r2
 8015e7a:	d801      	bhi.n	8015e80 <__ieee754_pow+0x60>
 8015e7c:	d10e      	bne.n	8015e9c <__ieee754_pow+0x7c>
 8015e7e:	b169      	cbz	r1, 8015e9c <__ieee754_pow+0x7c>
 8015e80:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8015e84:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8015e88:	431d      	orrs	r5, r3
 8015e8a:	d1e0      	bne.n	8015e4e <__ieee754_pow+0x2e>
 8015e8c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015e90:	18db      	adds	r3, r3, r3
 8015e92:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8015e96:	4152      	adcs	r2, r2
 8015e98:	429d      	cmp	r5, r3
 8015e9a:	e7d4      	b.n	8015e46 <__ieee754_pow+0x26>
 8015e9c:	2d00      	cmp	r5, #0
 8015e9e:	46c3      	mov	fp, r8
 8015ea0:	da3a      	bge.n	8015f18 <__ieee754_pow+0xf8>
 8015ea2:	4a83      	ldr	r2, [pc, #524]	@ (80160b0 <__ieee754_pow+0x290>)
 8015ea4:	4592      	cmp	sl, r2
 8015ea6:	d84d      	bhi.n	8015f44 <__ieee754_pow+0x124>
 8015ea8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8015eac:	4592      	cmp	sl, r2
 8015eae:	f240 84c7 	bls.w	8016840 <__ieee754_pow+0xa20>
 8015eb2:	ea4f 522a 	mov.w	r2, sl, asr #20
 8015eb6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8015eba:	2a14      	cmp	r2, #20
 8015ebc:	dd0f      	ble.n	8015ede <__ieee754_pow+0xbe>
 8015ebe:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8015ec2:	fa21 f402 	lsr.w	r4, r1, r2
 8015ec6:	fa04 f202 	lsl.w	r2, r4, r2
 8015eca:	428a      	cmp	r2, r1
 8015ecc:	f040 84b8 	bne.w	8016840 <__ieee754_pow+0xa20>
 8015ed0:	f004 0401 	and.w	r4, r4, #1
 8015ed4:	f1c4 0402 	rsb	r4, r4, #2
 8015ed8:	2900      	cmp	r1, #0
 8015eda:	d158      	bne.n	8015f8e <__ieee754_pow+0x16e>
 8015edc:	e00e      	b.n	8015efc <__ieee754_pow+0xdc>
 8015ede:	2900      	cmp	r1, #0
 8015ee0:	d154      	bne.n	8015f8c <__ieee754_pow+0x16c>
 8015ee2:	f1c2 0214 	rsb	r2, r2, #20
 8015ee6:	fa4a f402 	asr.w	r4, sl, r2
 8015eea:	fa04 f202 	lsl.w	r2, r4, r2
 8015eee:	4552      	cmp	r2, sl
 8015ef0:	f040 84a3 	bne.w	801683a <__ieee754_pow+0xa1a>
 8015ef4:	f004 0401 	and.w	r4, r4, #1
 8015ef8:	f1c4 0402 	rsb	r4, r4, #2
 8015efc:	4a6d      	ldr	r2, [pc, #436]	@ (80160b4 <__ieee754_pow+0x294>)
 8015efe:	4592      	cmp	sl, r2
 8015f00:	d12e      	bne.n	8015f60 <__ieee754_pow+0x140>
 8015f02:	f1b9 0f00 	cmp.w	r9, #0
 8015f06:	f280 8494 	bge.w	8016832 <__ieee754_pow+0xa12>
 8015f0a:	496a      	ldr	r1, [pc, #424]	@ (80160b4 <__ieee754_pow+0x294>)
 8015f0c:	4632      	mov	r2, r6
 8015f0e:	463b      	mov	r3, r7
 8015f10:	2000      	movs	r0, #0
 8015f12:	f7ea fcc3 	bl	800089c <__aeabi_ddiv>
 8015f16:	e7a0      	b.n	8015e5a <__ieee754_pow+0x3a>
 8015f18:	2400      	movs	r4, #0
 8015f1a:	bbc1      	cbnz	r1, 8015f8e <__ieee754_pow+0x16e>
 8015f1c:	4a63      	ldr	r2, [pc, #396]	@ (80160ac <__ieee754_pow+0x28c>)
 8015f1e:	4592      	cmp	sl, r2
 8015f20:	d1ec      	bne.n	8015efc <__ieee754_pow+0xdc>
 8015f22:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8015f26:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8015f2a:	431a      	orrs	r2, r3
 8015f2c:	f000 8479 	beq.w	8016822 <__ieee754_pow+0xa02>
 8015f30:	4b61      	ldr	r3, [pc, #388]	@ (80160b8 <__ieee754_pow+0x298>)
 8015f32:	4598      	cmp	r8, r3
 8015f34:	d908      	bls.n	8015f48 <__ieee754_pow+0x128>
 8015f36:	f1b9 0f00 	cmp.w	r9, #0
 8015f3a:	f2c0 8476 	blt.w	801682a <__ieee754_pow+0xa0a>
 8015f3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015f42:	e78a      	b.n	8015e5a <__ieee754_pow+0x3a>
 8015f44:	2402      	movs	r4, #2
 8015f46:	e7e8      	b.n	8015f1a <__ieee754_pow+0xfa>
 8015f48:	f1b9 0f00 	cmp.w	r9, #0
 8015f4c:	f04f 0000 	mov.w	r0, #0
 8015f50:	f04f 0100 	mov.w	r1, #0
 8015f54:	da81      	bge.n	8015e5a <__ieee754_pow+0x3a>
 8015f56:	e9dd 0300 	ldrd	r0, r3, [sp]
 8015f5a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8015f5e:	e77c      	b.n	8015e5a <__ieee754_pow+0x3a>
 8015f60:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8015f64:	d106      	bne.n	8015f74 <__ieee754_pow+0x154>
 8015f66:	4632      	mov	r2, r6
 8015f68:	463b      	mov	r3, r7
 8015f6a:	4630      	mov	r0, r6
 8015f6c:	4639      	mov	r1, r7
 8015f6e:	f7ea fb6b 	bl	8000648 <__aeabi_dmul>
 8015f72:	e772      	b.n	8015e5a <__ieee754_pow+0x3a>
 8015f74:	4a51      	ldr	r2, [pc, #324]	@ (80160bc <__ieee754_pow+0x29c>)
 8015f76:	4591      	cmp	r9, r2
 8015f78:	d109      	bne.n	8015f8e <__ieee754_pow+0x16e>
 8015f7a:	2d00      	cmp	r5, #0
 8015f7c:	db07      	blt.n	8015f8e <__ieee754_pow+0x16e>
 8015f7e:	ec47 6b10 	vmov	d0, r6, r7
 8015f82:	b011      	add	sp, #68	@ 0x44
 8015f84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f88:	f7ff bc12 	b.w	80157b0 <__ieee754_sqrt>
 8015f8c:	2400      	movs	r4, #0
 8015f8e:	ec47 6b10 	vmov	d0, r6, r7
 8015f92:	9302      	str	r3, [sp, #8]
 8015f94:	f7ff fbf8 	bl	8015788 <fabs>
 8015f98:	9b02      	ldr	r3, [sp, #8]
 8015f9a:	ec51 0b10 	vmov	r0, r1, d0
 8015f9e:	bb53      	cbnz	r3, 8015ff6 <__ieee754_pow+0x1d6>
 8015fa0:	4b44      	ldr	r3, [pc, #272]	@ (80160b4 <__ieee754_pow+0x294>)
 8015fa2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8015fa6:	429a      	cmp	r2, r3
 8015fa8:	d002      	beq.n	8015fb0 <__ieee754_pow+0x190>
 8015faa:	f1b8 0f00 	cmp.w	r8, #0
 8015fae:	d122      	bne.n	8015ff6 <__ieee754_pow+0x1d6>
 8015fb0:	f1b9 0f00 	cmp.w	r9, #0
 8015fb4:	da05      	bge.n	8015fc2 <__ieee754_pow+0x1a2>
 8015fb6:	4602      	mov	r2, r0
 8015fb8:	460b      	mov	r3, r1
 8015fba:	2000      	movs	r0, #0
 8015fbc:	493d      	ldr	r1, [pc, #244]	@ (80160b4 <__ieee754_pow+0x294>)
 8015fbe:	f7ea fc6d 	bl	800089c <__aeabi_ddiv>
 8015fc2:	2d00      	cmp	r5, #0
 8015fc4:	f6bf af49 	bge.w	8015e5a <__ieee754_pow+0x3a>
 8015fc8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8015fcc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8015fd0:	ea58 0804 	orrs.w	r8, r8, r4
 8015fd4:	d108      	bne.n	8015fe8 <__ieee754_pow+0x1c8>
 8015fd6:	4602      	mov	r2, r0
 8015fd8:	460b      	mov	r3, r1
 8015fda:	4610      	mov	r0, r2
 8015fdc:	4619      	mov	r1, r3
 8015fde:	f7ea f97b 	bl	80002d8 <__aeabi_dsub>
 8015fe2:	4602      	mov	r2, r0
 8015fe4:	460b      	mov	r3, r1
 8015fe6:	e794      	b.n	8015f12 <__ieee754_pow+0xf2>
 8015fe8:	2c01      	cmp	r4, #1
 8015fea:	f47f af36 	bne.w	8015e5a <__ieee754_pow+0x3a>
 8015fee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015ff2:	4619      	mov	r1, r3
 8015ff4:	e731      	b.n	8015e5a <__ieee754_pow+0x3a>
 8015ff6:	0feb      	lsrs	r3, r5, #31
 8015ff8:	3b01      	subs	r3, #1
 8015ffa:	ea53 0204 	orrs.w	r2, r3, r4
 8015ffe:	d102      	bne.n	8016006 <__ieee754_pow+0x1e6>
 8016000:	4632      	mov	r2, r6
 8016002:	463b      	mov	r3, r7
 8016004:	e7e9      	b.n	8015fda <__ieee754_pow+0x1ba>
 8016006:	3c01      	subs	r4, #1
 8016008:	431c      	orrs	r4, r3
 801600a:	d016      	beq.n	801603a <__ieee754_pow+0x21a>
 801600c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8016098 <__ieee754_pow+0x278>
 8016010:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8016014:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016018:	f240 8112 	bls.w	8016240 <__ieee754_pow+0x420>
 801601c:	4b28      	ldr	r3, [pc, #160]	@ (80160c0 <__ieee754_pow+0x2a0>)
 801601e:	459a      	cmp	sl, r3
 8016020:	4b25      	ldr	r3, [pc, #148]	@ (80160b8 <__ieee754_pow+0x298>)
 8016022:	d916      	bls.n	8016052 <__ieee754_pow+0x232>
 8016024:	4598      	cmp	r8, r3
 8016026:	d80b      	bhi.n	8016040 <__ieee754_pow+0x220>
 8016028:	f1b9 0f00 	cmp.w	r9, #0
 801602c:	da0b      	bge.n	8016046 <__ieee754_pow+0x226>
 801602e:	2000      	movs	r0, #0
 8016030:	b011      	add	sp, #68	@ 0x44
 8016032:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016036:	f000 bceb 	b.w	8016a10 <__math_oflow>
 801603a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80160a0 <__ieee754_pow+0x280>
 801603e:	e7e7      	b.n	8016010 <__ieee754_pow+0x1f0>
 8016040:	f1b9 0f00 	cmp.w	r9, #0
 8016044:	dcf3      	bgt.n	801602e <__ieee754_pow+0x20e>
 8016046:	2000      	movs	r0, #0
 8016048:	b011      	add	sp, #68	@ 0x44
 801604a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801604e:	f000 bcd7 	b.w	8016a00 <__math_uflow>
 8016052:	4598      	cmp	r8, r3
 8016054:	d20c      	bcs.n	8016070 <__ieee754_pow+0x250>
 8016056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801605a:	2200      	movs	r2, #0
 801605c:	2300      	movs	r3, #0
 801605e:	f7ea fd65 	bl	8000b2c <__aeabi_dcmplt>
 8016062:	3800      	subs	r0, #0
 8016064:	bf18      	it	ne
 8016066:	2001      	movne	r0, #1
 8016068:	f1b9 0f00 	cmp.w	r9, #0
 801606c:	daec      	bge.n	8016048 <__ieee754_pow+0x228>
 801606e:	e7df      	b.n	8016030 <__ieee754_pow+0x210>
 8016070:	4b10      	ldr	r3, [pc, #64]	@ (80160b4 <__ieee754_pow+0x294>)
 8016072:	4598      	cmp	r8, r3
 8016074:	f04f 0200 	mov.w	r2, #0
 8016078:	d924      	bls.n	80160c4 <__ieee754_pow+0x2a4>
 801607a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801607e:	2300      	movs	r3, #0
 8016080:	f7ea fd54 	bl	8000b2c <__aeabi_dcmplt>
 8016084:	3800      	subs	r0, #0
 8016086:	bf18      	it	ne
 8016088:	2001      	movne	r0, #1
 801608a:	f1b9 0f00 	cmp.w	r9, #0
 801608e:	dccf      	bgt.n	8016030 <__ieee754_pow+0x210>
 8016090:	e7da      	b.n	8016048 <__ieee754_pow+0x228>
 8016092:	bf00      	nop
 8016094:	f3af 8000 	nop.w
 8016098:	00000000 	.word	0x00000000
 801609c:	3ff00000 	.word	0x3ff00000
 80160a0:	00000000 	.word	0x00000000
 80160a4:	bff00000 	.word	0xbff00000
 80160a8:	fff00000 	.word	0xfff00000
 80160ac:	7ff00000 	.word	0x7ff00000
 80160b0:	433fffff 	.word	0x433fffff
 80160b4:	3ff00000 	.word	0x3ff00000
 80160b8:	3fefffff 	.word	0x3fefffff
 80160bc:	3fe00000 	.word	0x3fe00000
 80160c0:	43f00000 	.word	0x43f00000
 80160c4:	4b5a      	ldr	r3, [pc, #360]	@ (8016230 <__ieee754_pow+0x410>)
 80160c6:	f7ea f907 	bl	80002d8 <__aeabi_dsub>
 80160ca:	a351      	add	r3, pc, #324	@ (adr r3, 8016210 <__ieee754_pow+0x3f0>)
 80160cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160d0:	4604      	mov	r4, r0
 80160d2:	460d      	mov	r5, r1
 80160d4:	f7ea fab8 	bl	8000648 <__aeabi_dmul>
 80160d8:	a34f      	add	r3, pc, #316	@ (adr r3, 8016218 <__ieee754_pow+0x3f8>)
 80160da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160de:	4606      	mov	r6, r0
 80160e0:	460f      	mov	r7, r1
 80160e2:	4620      	mov	r0, r4
 80160e4:	4629      	mov	r1, r5
 80160e6:	f7ea faaf 	bl	8000648 <__aeabi_dmul>
 80160ea:	4b52      	ldr	r3, [pc, #328]	@ (8016234 <__ieee754_pow+0x414>)
 80160ec:	4682      	mov	sl, r0
 80160ee:	468b      	mov	fp, r1
 80160f0:	2200      	movs	r2, #0
 80160f2:	4620      	mov	r0, r4
 80160f4:	4629      	mov	r1, r5
 80160f6:	f7ea faa7 	bl	8000648 <__aeabi_dmul>
 80160fa:	4602      	mov	r2, r0
 80160fc:	460b      	mov	r3, r1
 80160fe:	a148      	add	r1, pc, #288	@ (adr r1, 8016220 <__ieee754_pow+0x400>)
 8016100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016104:	f7ea f8e8 	bl	80002d8 <__aeabi_dsub>
 8016108:	4622      	mov	r2, r4
 801610a:	462b      	mov	r3, r5
 801610c:	f7ea fa9c 	bl	8000648 <__aeabi_dmul>
 8016110:	4602      	mov	r2, r0
 8016112:	460b      	mov	r3, r1
 8016114:	2000      	movs	r0, #0
 8016116:	4948      	ldr	r1, [pc, #288]	@ (8016238 <__ieee754_pow+0x418>)
 8016118:	f7ea f8de 	bl	80002d8 <__aeabi_dsub>
 801611c:	4622      	mov	r2, r4
 801611e:	4680      	mov	r8, r0
 8016120:	4689      	mov	r9, r1
 8016122:	462b      	mov	r3, r5
 8016124:	4620      	mov	r0, r4
 8016126:	4629      	mov	r1, r5
 8016128:	f7ea fa8e 	bl	8000648 <__aeabi_dmul>
 801612c:	4602      	mov	r2, r0
 801612e:	460b      	mov	r3, r1
 8016130:	4640      	mov	r0, r8
 8016132:	4649      	mov	r1, r9
 8016134:	f7ea fa88 	bl	8000648 <__aeabi_dmul>
 8016138:	a33b      	add	r3, pc, #236	@ (adr r3, 8016228 <__ieee754_pow+0x408>)
 801613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801613e:	f7ea fa83 	bl	8000648 <__aeabi_dmul>
 8016142:	4602      	mov	r2, r0
 8016144:	460b      	mov	r3, r1
 8016146:	4650      	mov	r0, sl
 8016148:	4659      	mov	r1, fp
 801614a:	f7ea f8c5 	bl	80002d8 <__aeabi_dsub>
 801614e:	4602      	mov	r2, r0
 8016150:	460b      	mov	r3, r1
 8016152:	4680      	mov	r8, r0
 8016154:	4689      	mov	r9, r1
 8016156:	4630      	mov	r0, r6
 8016158:	4639      	mov	r1, r7
 801615a:	f7ea f8bf 	bl	80002dc <__adddf3>
 801615e:	2400      	movs	r4, #0
 8016160:	4632      	mov	r2, r6
 8016162:	463b      	mov	r3, r7
 8016164:	4620      	mov	r0, r4
 8016166:	460d      	mov	r5, r1
 8016168:	f7ea f8b6 	bl	80002d8 <__aeabi_dsub>
 801616c:	4602      	mov	r2, r0
 801616e:	460b      	mov	r3, r1
 8016170:	4640      	mov	r0, r8
 8016172:	4649      	mov	r1, r9
 8016174:	f7ea f8b0 	bl	80002d8 <__aeabi_dsub>
 8016178:	e9dd 2300 	ldrd	r2, r3, [sp]
 801617c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016180:	2300      	movs	r3, #0
 8016182:	9304      	str	r3, [sp, #16]
 8016184:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016188:	4606      	mov	r6, r0
 801618a:	460f      	mov	r7, r1
 801618c:	4652      	mov	r2, sl
 801618e:	465b      	mov	r3, fp
 8016190:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016194:	f7ea f8a0 	bl	80002d8 <__aeabi_dsub>
 8016198:	4622      	mov	r2, r4
 801619a:	462b      	mov	r3, r5
 801619c:	f7ea fa54 	bl	8000648 <__aeabi_dmul>
 80161a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80161a4:	4680      	mov	r8, r0
 80161a6:	4689      	mov	r9, r1
 80161a8:	4630      	mov	r0, r6
 80161aa:	4639      	mov	r1, r7
 80161ac:	f7ea fa4c 	bl	8000648 <__aeabi_dmul>
 80161b0:	4602      	mov	r2, r0
 80161b2:	460b      	mov	r3, r1
 80161b4:	4640      	mov	r0, r8
 80161b6:	4649      	mov	r1, r9
 80161b8:	f7ea f890 	bl	80002dc <__adddf3>
 80161bc:	4652      	mov	r2, sl
 80161be:	465b      	mov	r3, fp
 80161c0:	4606      	mov	r6, r0
 80161c2:	460f      	mov	r7, r1
 80161c4:	4620      	mov	r0, r4
 80161c6:	4629      	mov	r1, r5
 80161c8:	f7ea fa3e 	bl	8000648 <__aeabi_dmul>
 80161cc:	460b      	mov	r3, r1
 80161ce:	4602      	mov	r2, r0
 80161d0:	4680      	mov	r8, r0
 80161d2:	4689      	mov	r9, r1
 80161d4:	4630      	mov	r0, r6
 80161d6:	4639      	mov	r1, r7
 80161d8:	f7ea f880 	bl	80002dc <__adddf3>
 80161dc:	4b17      	ldr	r3, [pc, #92]	@ (801623c <__ieee754_pow+0x41c>)
 80161de:	4299      	cmp	r1, r3
 80161e0:	4604      	mov	r4, r0
 80161e2:	460d      	mov	r5, r1
 80161e4:	468a      	mov	sl, r1
 80161e6:	468b      	mov	fp, r1
 80161e8:	f340 82ef 	ble.w	80167ca <__ieee754_pow+0x9aa>
 80161ec:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80161f0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80161f4:	4303      	orrs	r3, r0
 80161f6:	f000 81e8 	beq.w	80165ca <__ieee754_pow+0x7aa>
 80161fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80161fe:	2200      	movs	r2, #0
 8016200:	2300      	movs	r3, #0
 8016202:	f7ea fc93 	bl	8000b2c <__aeabi_dcmplt>
 8016206:	3800      	subs	r0, #0
 8016208:	bf18      	it	ne
 801620a:	2001      	movne	r0, #1
 801620c:	e710      	b.n	8016030 <__ieee754_pow+0x210>
 801620e:	bf00      	nop
 8016210:	60000000 	.word	0x60000000
 8016214:	3ff71547 	.word	0x3ff71547
 8016218:	f85ddf44 	.word	0xf85ddf44
 801621c:	3e54ae0b 	.word	0x3e54ae0b
 8016220:	55555555 	.word	0x55555555
 8016224:	3fd55555 	.word	0x3fd55555
 8016228:	652b82fe 	.word	0x652b82fe
 801622c:	3ff71547 	.word	0x3ff71547
 8016230:	3ff00000 	.word	0x3ff00000
 8016234:	3fd00000 	.word	0x3fd00000
 8016238:	3fe00000 	.word	0x3fe00000
 801623c:	408fffff 	.word	0x408fffff
 8016240:	4bd5      	ldr	r3, [pc, #852]	@ (8016598 <__ieee754_pow+0x778>)
 8016242:	402b      	ands	r3, r5
 8016244:	2200      	movs	r2, #0
 8016246:	b92b      	cbnz	r3, 8016254 <__ieee754_pow+0x434>
 8016248:	4bd4      	ldr	r3, [pc, #848]	@ (801659c <__ieee754_pow+0x77c>)
 801624a:	f7ea f9fd 	bl	8000648 <__aeabi_dmul>
 801624e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8016252:	468b      	mov	fp, r1
 8016254:	ea4f 532b 	mov.w	r3, fp, asr #20
 8016258:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801625c:	4413      	add	r3, r2
 801625e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016260:	4bcf      	ldr	r3, [pc, #828]	@ (80165a0 <__ieee754_pow+0x780>)
 8016262:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8016266:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801626a:	459b      	cmp	fp, r3
 801626c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016270:	dd08      	ble.n	8016284 <__ieee754_pow+0x464>
 8016272:	4bcc      	ldr	r3, [pc, #816]	@ (80165a4 <__ieee754_pow+0x784>)
 8016274:	459b      	cmp	fp, r3
 8016276:	f340 81a5 	ble.w	80165c4 <__ieee754_pow+0x7a4>
 801627a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801627c:	3301      	adds	r3, #1
 801627e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016280:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8016284:	f04f 0a00 	mov.w	sl, #0
 8016288:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801628c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801628e:	4bc6      	ldr	r3, [pc, #792]	@ (80165a8 <__ieee754_pow+0x788>)
 8016290:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016294:	ed93 7b00 	vldr	d7, [r3]
 8016298:	4629      	mov	r1, r5
 801629a:	ec53 2b17 	vmov	r2, r3, d7
 801629e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80162a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80162a6:	f7ea f817 	bl	80002d8 <__aeabi_dsub>
 80162aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80162ae:	4606      	mov	r6, r0
 80162b0:	460f      	mov	r7, r1
 80162b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80162b6:	f7ea f811 	bl	80002dc <__adddf3>
 80162ba:	4602      	mov	r2, r0
 80162bc:	460b      	mov	r3, r1
 80162be:	2000      	movs	r0, #0
 80162c0:	49ba      	ldr	r1, [pc, #744]	@ (80165ac <__ieee754_pow+0x78c>)
 80162c2:	f7ea faeb 	bl	800089c <__aeabi_ddiv>
 80162c6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80162ca:	4602      	mov	r2, r0
 80162cc:	460b      	mov	r3, r1
 80162ce:	4630      	mov	r0, r6
 80162d0:	4639      	mov	r1, r7
 80162d2:	f7ea f9b9 	bl	8000648 <__aeabi_dmul>
 80162d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80162da:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80162de:	106d      	asrs	r5, r5, #1
 80162e0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80162e4:	f04f 0b00 	mov.w	fp, #0
 80162e8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80162ec:	4661      	mov	r1, ip
 80162ee:	2200      	movs	r2, #0
 80162f0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80162f4:	4658      	mov	r0, fp
 80162f6:	46e1      	mov	r9, ip
 80162f8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80162fc:	4614      	mov	r4, r2
 80162fe:	461d      	mov	r5, r3
 8016300:	f7ea f9a2 	bl	8000648 <__aeabi_dmul>
 8016304:	4602      	mov	r2, r0
 8016306:	460b      	mov	r3, r1
 8016308:	4630      	mov	r0, r6
 801630a:	4639      	mov	r1, r7
 801630c:	f7e9 ffe4 	bl	80002d8 <__aeabi_dsub>
 8016310:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016314:	4606      	mov	r6, r0
 8016316:	460f      	mov	r7, r1
 8016318:	4620      	mov	r0, r4
 801631a:	4629      	mov	r1, r5
 801631c:	f7e9 ffdc 	bl	80002d8 <__aeabi_dsub>
 8016320:	4602      	mov	r2, r0
 8016322:	460b      	mov	r3, r1
 8016324:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016328:	f7e9 ffd6 	bl	80002d8 <__aeabi_dsub>
 801632c:	465a      	mov	r2, fp
 801632e:	464b      	mov	r3, r9
 8016330:	f7ea f98a 	bl	8000648 <__aeabi_dmul>
 8016334:	4602      	mov	r2, r0
 8016336:	460b      	mov	r3, r1
 8016338:	4630      	mov	r0, r6
 801633a:	4639      	mov	r1, r7
 801633c:	f7e9 ffcc 	bl	80002d8 <__aeabi_dsub>
 8016340:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8016344:	f7ea f980 	bl	8000648 <__aeabi_dmul>
 8016348:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801634c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016350:	4610      	mov	r0, r2
 8016352:	4619      	mov	r1, r3
 8016354:	f7ea f978 	bl	8000648 <__aeabi_dmul>
 8016358:	a37d      	add	r3, pc, #500	@ (adr r3, 8016550 <__ieee754_pow+0x730>)
 801635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801635e:	4604      	mov	r4, r0
 8016360:	460d      	mov	r5, r1
 8016362:	f7ea f971 	bl	8000648 <__aeabi_dmul>
 8016366:	a37c      	add	r3, pc, #496	@ (adr r3, 8016558 <__ieee754_pow+0x738>)
 8016368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801636c:	f7e9 ffb6 	bl	80002dc <__adddf3>
 8016370:	4622      	mov	r2, r4
 8016372:	462b      	mov	r3, r5
 8016374:	f7ea f968 	bl	8000648 <__aeabi_dmul>
 8016378:	a379      	add	r3, pc, #484	@ (adr r3, 8016560 <__ieee754_pow+0x740>)
 801637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801637e:	f7e9 ffad 	bl	80002dc <__adddf3>
 8016382:	4622      	mov	r2, r4
 8016384:	462b      	mov	r3, r5
 8016386:	f7ea f95f 	bl	8000648 <__aeabi_dmul>
 801638a:	a377      	add	r3, pc, #476	@ (adr r3, 8016568 <__ieee754_pow+0x748>)
 801638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016390:	f7e9 ffa4 	bl	80002dc <__adddf3>
 8016394:	4622      	mov	r2, r4
 8016396:	462b      	mov	r3, r5
 8016398:	f7ea f956 	bl	8000648 <__aeabi_dmul>
 801639c:	a374      	add	r3, pc, #464	@ (adr r3, 8016570 <__ieee754_pow+0x750>)
 801639e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163a2:	f7e9 ff9b 	bl	80002dc <__adddf3>
 80163a6:	4622      	mov	r2, r4
 80163a8:	462b      	mov	r3, r5
 80163aa:	f7ea f94d 	bl	8000648 <__aeabi_dmul>
 80163ae:	a372      	add	r3, pc, #456	@ (adr r3, 8016578 <__ieee754_pow+0x758>)
 80163b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163b4:	f7e9 ff92 	bl	80002dc <__adddf3>
 80163b8:	4622      	mov	r2, r4
 80163ba:	4606      	mov	r6, r0
 80163bc:	460f      	mov	r7, r1
 80163be:	462b      	mov	r3, r5
 80163c0:	4620      	mov	r0, r4
 80163c2:	4629      	mov	r1, r5
 80163c4:	f7ea f940 	bl	8000648 <__aeabi_dmul>
 80163c8:	4602      	mov	r2, r0
 80163ca:	460b      	mov	r3, r1
 80163cc:	4630      	mov	r0, r6
 80163ce:	4639      	mov	r1, r7
 80163d0:	f7ea f93a 	bl	8000648 <__aeabi_dmul>
 80163d4:	465a      	mov	r2, fp
 80163d6:	4604      	mov	r4, r0
 80163d8:	460d      	mov	r5, r1
 80163da:	464b      	mov	r3, r9
 80163dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80163e0:	f7e9 ff7c 	bl	80002dc <__adddf3>
 80163e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80163e8:	f7ea f92e 	bl	8000648 <__aeabi_dmul>
 80163ec:	4622      	mov	r2, r4
 80163ee:	462b      	mov	r3, r5
 80163f0:	f7e9 ff74 	bl	80002dc <__adddf3>
 80163f4:	465a      	mov	r2, fp
 80163f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80163fa:	464b      	mov	r3, r9
 80163fc:	4658      	mov	r0, fp
 80163fe:	4649      	mov	r1, r9
 8016400:	f7ea f922 	bl	8000648 <__aeabi_dmul>
 8016404:	4b6a      	ldr	r3, [pc, #424]	@ (80165b0 <__ieee754_pow+0x790>)
 8016406:	2200      	movs	r2, #0
 8016408:	4606      	mov	r6, r0
 801640a:	460f      	mov	r7, r1
 801640c:	f7e9 ff66 	bl	80002dc <__adddf3>
 8016410:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016414:	f7e9 ff62 	bl	80002dc <__adddf3>
 8016418:	46d8      	mov	r8, fp
 801641a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801641e:	460d      	mov	r5, r1
 8016420:	465a      	mov	r2, fp
 8016422:	460b      	mov	r3, r1
 8016424:	4640      	mov	r0, r8
 8016426:	4649      	mov	r1, r9
 8016428:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801642c:	f7ea f90c 	bl	8000648 <__aeabi_dmul>
 8016430:	465c      	mov	r4, fp
 8016432:	4680      	mov	r8, r0
 8016434:	4689      	mov	r9, r1
 8016436:	4b5e      	ldr	r3, [pc, #376]	@ (80165b0 <__ieee754_pow+0x790>)
 8016438:	2200      	movs	r2, #0
 801643a:	4620      	mov	r0, r4
 801643c:	4629      	mov	r1, r5
 801643e:	f7e9 ff4b 	bl	80002d8 <__aeabi_dsub>
 8016442:	4632      	mov	r2, r6
 8016444:	463b      	mov	r3, r7
 8016446:	f7e9 ff47 	bl	80002d8 <__aeabi_dsub>
 801644a:	4602      	mov	r2, r0
 801644c:	460b      	mov	r3, r1
 801644e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016452:	f7e9 ff41 	bl	80002d8 <__aeabi_dsub>
 8016456:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801645a:	f7ea f8f5 	bl	8000648 <__aeabi_dmul>
 801645e:	4622      	mov	r2, r4
 8016460:	4606      	mov	r6, r0
 8016462:	460f      	mov	r7, r1
 8016464:	462b      	mov	r3, r5
 8016466:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801646a:	f7ea f8ed 	bl	8000648 <__aeabi_dmul>
 801646e:	4602      	mov	r2, r0
 8016470:	460b      	mov	r3, r1
 8016472:	4630      	mov	r0, r6
 8016474:	4639      	mov	r1, r7
 8016476:	f7e9 ff31 	bl	80002dc <__adddf3>
 801647a:	4606      	mov	r6, r0
 801647c:	460f      	mov	r7, r1
 801647e:	4602      	mov	r2, r0
 8016480:	460b      	mov	r3, r1
 8016482:	4640      	mov	r0, r8
 8016484:	4649      	mov	r1, r9
 8016486:	f7e9 ff29 	bl	80002dc <__adddf3>
 801648a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801648e:	a33c      	add	r3, pc, #240	@ (adr r3, 8016580 <__ieee754_pow+0x760>)
 8016490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016494:	4658      	mov	r0, fp
 8016496:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801649a:	460d      	mov	r5, r1
 801649c:	f7ea f8d4 	bl	8000648 <__aeabi_dmul>
 80164a0:	465c      	mov	r4, fp
 80164a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80164a6:	4642      	mov	r2, r8
 80164a8:	464b      	mov	r3, r9
 80164aa:	4620      	mov	r0, r4
 80164ac:	4629      	mov	r1, r5
 80164ae:	f7e9 ff13 	bl	80002d8 <__aeabi_dsub>
 80164b2:	4602      	mov	r2, r0
 80164b4:	460b      	mov	r3, r1
 80164b6:	4630      	mov	r0, r6
 80164b8:	4639      	mov	r1, r7
 80164ba:	f7e9 ff0d 	bl	80002d8 <__aeabi_dsub>
 80164be:	a332      	add	r3, pc, #200	@ (adr r3, 8016588 <__ieee754_pow+0x768>)
 80164c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164c4:	f7ea f8c0 	bl	8000648 <__aeabi_dmul>
 80164c8:	a331      	add	r3, pc, #196	@ (adr r3, 8016590 <__ieee754_pow+0x770>)
 80164ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164ce:	4606      	mov	r6, r0
 80164d0:	460f      	mov	r7, r1
 80164d2:	4620      	mov	r0, r4
 80164d4:	4629      	mov	r1, r5
 80164d6:	f7ea f8b7 	bl	8000648 <__aeabi_dmul>
 80164da:	4602      	mov	r2, r0
 80164dc:	460b      	mov	r3, r1
 80164de:	4630      	mov	r0, r6
 80164e0:	4639      	mov	r1, r7
 80164e2:	f7e9 fefb 	bl	80002dc <__adddf3>
 80164e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80164e8:	4b32      	ldr	r3, [pc, #200]	@ (80165b4 <__ieee754_pow+0x794>)
 80164ea:	4413      	add	r3, r2
 80164ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164f0:	f7e9 fef4 	bl	80002dc <__adddf3>
 80164f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80164f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80164fa:	f7ea f83b 	bl	8000574 <__aeabi_i2d>
 80164fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016500:	4b2d      	ldr	r3, [pc, #180]	@ (80165b8 <__ieee754_pow+0x798>)
 8016502:	4413      	add	r3, r2
 8016504:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016508:	4606      	mov	r6, r0
 801650a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801650e:	460f      	mov	r7, r1
 8016510:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016514:	f7e9 fee2 	bl	80002dc <__adddf3>
 8016518:	4642      	mov	r2, r8
 801651a:	464b      	mov	r3, r9
 801651c:	f7e9 fede 	bl	80002dc <__adddf3>
 8016520:	4632      	mov	r2, r6
 8016522:	463b      	mov	r3, r7
 8016524:	f7e9 feda 	bl	80002dc <__adddf3>
 8016528:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801652c:	4632      	mov	r2, r6
 801652e:	463b      	mov	r3, r7
 8016530:	4658      	mov	r0, fp
 8016532:	460d      	mov	r5, r1
 8016534:	f7e9 fed0 	bl	80002d8 <__aeabi_dsub>
 8016538:	4642      	mov	r2, r8
 801653a:	464b      	mov	r3, r9
 801653c:	f7e9 fecc 	bl	80002d8 <__aeabi_dsub>
 8016540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016544:	f7e9 fec8 	bl	80002d8 <__aeabi_dsub>
 8016548:	465c      	mov	r4, fp
 801654a:	4602      	mov	r2, r0
 801654c:	e036      	b.n	80165bc <__ieee754_pow+0x79c>
 801654e:	bf00      	nop
 8016550:	4a454eef 	.word	0x4a454eef
 8016554:	3fca7e28 	.word	0x3fca7e28
 8016558:	93c9db65 	.word	0x93c9db65
 801655c:	3fcd864a 	.word	0x3fcd864a
 8016560:	a91d4101 	.word	0xa91d4101
 8016564:	3fd17460 	.word	0x3fd17460
 8016568:	518f264d 	.word	0x518f264d
 801656c:	3fd55555 	.word	0x3fd55555
 8016570:	db6fabff 	.word	0xdb6fabff
 8016574:	3fdb6db6 	.word	0x3fdb6db6
 8016578:	33333303 	.word	0x33333303
 801657c:	3fe33333 	.word	0x3fe33333
 8016580:	e0000000 	.word	0xe0000000
 8016584:	3feec709 	.word	0x3feec709
 8016588:	dc3a03fd 	.word	0xdc3a03fd
 801658c:	3feec709 	.word	0x3feec709
 8016590:	145b01f5 	.word	0x145b01f5
 8016594:	be3e2fe0 	.word	0xbe3e2fe0
 8016598:	7ff00000 	.word	0x7ff00000
 801659c:	43400000 	.word	0x43400000
 80165a0:	0003988e 	.word	0x0003988e
 80165a4:	000bb679 	.word	0x000bb679
 80165a8:	08017258 	.word	0x08017258
 80165ac:	3ff00000 	.word	0x3ff00000
 80165b0:	40080000 	.word	0x40080000
 80165b4:	08017238 	.word	0x08017238
 80165b8:	08017248 	.word	0x08017248
 80165bc:	460b      	mov	r3, r1
 80165be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80165c2:	e5d7      	b.n	8016174 <__ieee754_pow+0x354>
 80165c4:	f04f 0a01 	mov.w	sl, #1
 80165c8:	e65e      	b.n	8016288 <__ieee754_pow+0x468>
 80165ca:	a3b4      	add	r3, pc, #720	@ (adr r3, 801689c <__ieee754_pow+0xa7c>)
 80165cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165d0:	4630      	mov	r0, r6
 80165d2:	4639      	mov	r1, r7
 80165d4:	f7e9 fe82 	bl	80002dc <__adddf3>
 80165d8:	4642      	mov	r2, r8
 80165da:	e9cd 0100 	strd	r0, r1, [sp]
 80165de:	464b      	mov	r3, r9
 80165e0:	4620      	mov	r0, r4
 80165e2:	4629      	mov	r1, r5
 80165e4:	f7e9 fe78 	bl	80002d8 <__aeabi_dsub>
 80165e8:	4602      	mov	r2, r0
 80165ea:	460b      	mov	r3, r1
 80165ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80165f0:	f7ea faba 	bl	8000b68 <__aeabi_dcmpgt>
 80165f4:	2800      	cmp	r0, #0
 80165f6:	f47f ae00 	bne.w	80161fa <__ieee754_pow+0x3da>
 80165fa:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80165fe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8016602:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8016606:	fa43 fa0a 	asr.w	sl, r3, sl
 801660a:	44da      	add	sl, fp
 801660c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8016610:	489d      	ldr	r0, [pc, #628]	@ (8016888 <__ieee754_pow+0xa68>)
 8016612:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8016616:	4108      	asrs	r0, r1
 8016618:	ea00 030a 	and.w	r3, r0, sl
 801661c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8016620:	f1c1 0114 	rsb	r1, r1, #20
 8016624:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8016628:	fa4a fa01 	asr.w	sl, sl, r1
 801662c:	f1bb 0f00 	cmp.w	fp, #0
 8016630:	4640      	mov	r0, r8
 8016632:	4649      	mov	r1, r9
 8016634:	f04f 0200 	mov.w	r2, #0
 8016638:	bfb8      	it	lt
 801663a:	f1ca 0a00 	rsblt	sl, sl, #0
 801663e:	f7e9 fe4b 	bl	80002d8 <__aeabi_dsub>
 8016642:	4680      	mov	r8, r0
 8016644:	4689      	mov	r9, r1
 8016646:	4632      	mov	r2, r6
 8016648:	463b      	mov	r3, r7
 801664a:	4640      	mov	r0, r8
 801664c:	4649      	mov	r1, r9
 801664e:	f7e9 fe45 	bl	80002dc <__adddf3>
 8016652:	2400      	movs	r4, #0
 8016654:	a37c      	add	r3, pc, #496	@ (adr r3, 8016848 <__ieee754_pow+0xa28>)
 8016656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801665a:	4620      	mov	r0, r4
 801665c:	460d      	mov	r5, r1
 801665e:	f7e9 fff3 	bl	8000648 <__aeabi_dmul>
 8016662:	4642      	mov	r2, r8
 8016664:	e9cd 0100 	strd	r0, r1, [sp]
 8016668:	464b      	mov	r3, r9
 801666a:	4620      	mov	r0, r4
 801666c:	4629      	mov	r1, r5
 801666e:	f7e9 fe33 	bl	80002d8 <__aeabi_dsub>
 8016672:	4602      	mov	r2, r0
 8016674:	460b      	mov	r3, r1
 8016676:	4630      	mov	r0, r6
 8016678:	4639      	mov	r1, r7
 801667a:	f7e9 fe2d 	bl	80002d8 <__aeabi_dsub>
 801667e:	a374      	add	r3, pc, #464	@ (adr r3, 8016850 <__ieee754_pow+0xa30>)
 8016680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016684:	f7e9 ffe0 	bl	8000648 <__aeabi_dmul>
 8016688:	a373      	add	r3, pc, #460	@ (adr r3, 8016858 <__ieee754_pow+0xa38>)
 801668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801668e:	4680      	mov	r8, r0
 8016690:	4689      	mov	r9, r1
 8016692:	4620      	mov	r0, r4
 8016694:	4629      	mov	r1, r5
 8016696:	f7e9 ffd7 	bl	8000648 <__aeabi_dmul>
 801669a:	4602      	mov	r2, r0
 801669c:	460b      	mov	r3, r1
 801669e:	4640      	mov	r0, r8
 80166a0:	4649      	mov	r1, r9
 80166a2:	f7e9 fe1b 	bl	80002dc <__adddf3>
 80166a6:	4604      	mov	r4, r0
 80166a8:	460d      	mov	r5, r1
 80166aa:	4602      	mov	r2, r0
 80166ac:	460b      	mov	r3, r1
 80166ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80166b2:	f7e9 fe13 	bl	80002dc <__adddf3>
 80166b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80166ba:	4680      	mov	r8, r0
 80166bc:	4689      	mov	r9, r1
 80166be:	f7e9 fe0b 	bl	80002d8 <__aeabi_dsub>
 80166c2:	4602      	mov	r2, r0
 80166c4:	460b      	mov	r3, r1
 80166c6:	4620      	mov	r0, r4
 80166c8:	4629      	mov	r1, r5
 80166ca:	f7e9 fe05 	bl	80002d8 <__aeabi_dsub>
 80166ce:	4642      	mov	r2, r8
 80166d0:	4606      	mov	r6, r0
 80166d2:	460f      	mov	r7, r1
 80166d4:	464b      	mov	r3, r9
 80166d6:	4640      	mov	r0, r8
 80166d8:	4649      	mov	r1, r9
 80166da:	f7e9 ffb5 	bl	8000648 <__aeabi_dmul>
 80166de:	a360      	add	r3, pc, #384	@ (adr r3, 8016860 <__ieee754_pow+0xa40>)
 80166e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166e4:	4604      	mov	r4, r0
 80166e6:	460d      	mov	r5, r1
 80166e8:	f7e9 ffae 	bl	8000648 <__aeabi_dmul>
 80166ec:	a35e      	add	r3, pc, #376	@ (adr r3, 8016868 <__ieee754_pow+0xa48>)
 80166ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166f2:	f7e9 fdf1 	bl	80002d8 <__aeabi_dsub>
 80166f6:	4622      	mov	r2, r4
 80166f8:	462b      	mov	r3, r5
 80166fa:	f7e9 ffa5 	bl	8000648 <__aeabi_dmul>
 80166fe:	a35c      	add	r3, pc, #368	@ (adr r3, 8016870 <__ieee754_pow+0xa50>)
 8016700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016704:	f7e9 fdea 	bl	80002dc <__adddf3>
 8016708:	4622      	mov	r2, r4
 801670a:	462b      	mov	r3, r5
 801670c:	f7e9 ff9c 	bl	8000648 <__aeabi_dmul>
 8016710:	a359      	add	r3, pc, #356	@ (adr r3, 8016878 <__ieee754_pow+0xa58>)
 8016712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016716:	f7e9 fddf 	bl	80002d8 <__aeabi_dsub>
 801671a:	4622      	mov	r2, r4
 801671c:	462b      	mov	r3, r5
 801671e:	f7e9 ff93 	bl	8000648 <__aeabi_dmul>
 8016722:	a357      	add	r3, pc, #348	@ (adr r3, 8016880 <__ieee754_pow+0xa60>)
 8016724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016728:	f7e9 fdd8 	bl	80002dc <__adddf3>
 801672c:	4622      	mov	r2, r4
 801672e:	462b      	mov	r3, r5
 8016730:	f7e9 ff8a 	bl	8000648 <__aeabi_dmul>
 8016734:	4602      	mov	r2, r0
 8016736:	460b      	mov	r3, r1
 8016738:	4640      	mov	r0, r8
 801673a:	4649      	mov	r1, r9
 801673c:	f7e9 fdcc 	bl	80002d8 <__aeabi_dsub>
 8016740:	4604      	mov	r4, r0
 8016742:	460d      	mov	r5, r1
 8016744:	4602      	mov	r2, r0
 8016746:	460b      	mov	r3, r1
 8016748:	4640      	mov	r0, r8
 801674a:	4649      	mov	r1, r9
 801674c:	f7e9 ff7c 	bl	8000648 <__aeabi_dmul>
 8016750:	2200      	movs	r2, #0
 8016752:	e9cd 0100 	strd	r0, r1, [sp]
 8016756:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801675a:	4620      	mov	r0, r4
 801675c:	4629      	mov	r1, r5
 801675e:	f7e9 fdbb 	bl	80002d8 <__aeabi_dsub>
 8016762:	4602      	mov	r2, r0
 8016764:	460b      	mov	r3, r1
 8016766:	e9dd 0100 	ldrd	r0, r1, [sp]
 801676a:	f7ea f897 	bl	800089c <__aeabi_ddiv>
 801676e:	4632      	mov	r2, r6
 8016770:	4604      	mov	r4, r0
 8016772:	460d      	mov	r5, r1
 8016774:	463b      	mov	r3, r7
 8016776:	4640      	mov	r0, r8
 8016778:	4649      	mov	r1, r9
 801677a:	f7e9 ff65 	bl	8000648 <__aeabi_dmul>
 801677e:	4632      	mov	r2, r6
 8016780:	463b      	mov	r3, r7
 8016782:	f7e9 fdab 	bl	80002dc <__adddf3>
 8016786:	4602      	mov	r2, r0
 8016788:	460b      	mov	r3, r1
 801678a:	4620      	mov	r0, r4
 801678c:	4629      	mov	r1, r5
 801678e:	f7e9 fda3 	bl	80002d8 <__aeabi_dsub>
 8016792:	4642      	mov	r2, r8
 8016794:	464b      	mov	r3, r9
 8016796:	f7e9 fd9f 	bl	80002d8 <__aeabi_dsub>
 801679a:	460b      	mov	r3, r1
 801679c:	4602      	mov	r2, r0
 801679e:	493b      	ldr	r1, [pc, #236]	@ (801688c <__ieee754_pow+0xa6c>)
 80167a0:	2000      	movs	r0, #0
 80167a2:	f7e9 fd99 	bl	80002d8 <__aeabi_dsub>
 80167a6:	ec41 0b10 	vmov	d0, r0, r1
 80167aa:	ee10 3a90 	vmov	r3, s1
 80167ae:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80167b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80167b6:	da30      	bge.n	801681a <__ieee754_pow+0x9fa>
 80167b8:	4650      	mov	r0, sl
 80167ba:	f000 f875 	bl	80168a8 <scalbn>
 80167be:	ec51 0b10 	vmov	r0, r1, d0
 80167c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80167c6:	f7ff bbd2 	b.w	8015f6e <__ieee754_pow+0x14e>
 80167ca:	4c31      	ldr	r4, [pc, #196]	@ (8016890 <__ieee754_pow+0xa70>)
 80167cc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80167d0:	42a3      	cmp	r3, r4
 80167d2:	d91a      	bls.n	801680a <__ieee754_pow+0x9ea>
 80167d4:	4b2f      	ldr	r3, [pc, #188]	@ (8016894 <__ieee754_pow+0xa74>)
 80167d6:	440b      	add	r3, r1
 80167d8:	4303      	orrs	r3, r0
 80167da:	d009      	beq.n	80167f0 <__ieee754_pow+0x9d0>
 80167dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80167e0:	2200      	movs	r2, #0
 80167e2:	2300      	movs	r3, #0
 80167e4:	f7ea f9a2 	bl	8000b2c <__aeabi_dcmplt>
 80167e8:	3800      	subs	r0, #0
 80167ea:	bf18      	it	ne
 80167ec:	2001      	movne	r0, #1
 80167ee:	e42b      	b.n	8016048 <__ieee754_pow+0x228>
 80167f0:	4642      	mov	r2, r8
 80167f2:	464b      	mov	r3, r9
 80167f4:	f7e9 fd70 	bl	80002d8 <__aeabi_dsub>
 80167f8:	4632      	mov	r2, r6
 80167fa:	463b      	mov	r3, r7
 80167fc:	f7ea f9aa 	bl	8000b54 <__aeabi_dcmpge>
 8016800:	2800      	cmp	r0, #0
 8016802:	d1eb      	bne.n	80167dc <__ieee754_pow+0x9bc>
 8016804:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80168a4 <__ieee754_pow+0xa84>
 8016808:	e6f7      	b.n	80165fa <__ieee754_pow+0x7da>
 801680a:	469a      	mov	sl, r3
 801680c:	4b22      	ldr	r3, [pc, #136]	@ (8016898 <__ieee754_pow+0xa78>)
 801680e:	459a      	cmp	sl, r3
 8016810:	f63f aef3 	bhi.w	80165fa <__ieee754_pow+0x7da>
 8016814:	f8dd a010 	ldr.w	sl, [sp, #16]
 8016818:	e715      	b.n	8016646 <__ieee754_pow+0x826>
 801681a:	ec51 0b10 	vmov	r0, r1, d0
 801681e:	4619      	mov	r1, r3
 8016820:	e7cf      	b.n	80167c2 <__ieee754_pow+0x9a2>
 8016822:	491a      	ldr	r1, [pc, #104]	@ (801688c <__ieee754_pow+0xa6c>)
 8016824:	2000      	movs	r0, #0
 8016826:	f7ff bb18 	b.w	8015e5a <__ieee754_pow+0x3a>
 801682a:	2000      	movs	r0, #0
 801682c:	2100      	movs	r1, #0
 801682e:	f7ff bb14 	b.w	8015e5a <__ieee754_pow+0x3a>
 8016832:	4630      	mov	r0, r6
 8016834:	4639      	mov	r1, r7
 8016836:	f7ff bb10 	b.w	8015e5a <__ieee754_pow+0x3a>
 801683a:	460c      	mov	r4, r1
 801683c:	f7ff bb5e 	b.w	8015efc <__ieee754_pow+0xdc>
 8016840:	2400      	movs	r4, #0
 8016842:	f7ff bb49 	b.w	8015ed8 <__ieee754_pow+0xb8>
 8016846:	bf00      	nop
 8016848:	00000000 	.word	0x00000000
 801684c:	3fe62e43 	.word	0x3fe62e43
 8016850:	fefa39ef 	.word	0xfefa39ef
 8016854:	3fe62e42 	.word	0x3fe62e42
 8016858:	0ca86c39 	.word	0x0ca86c39
 801685c:	be205c61 	.word	0xbe205c61
 8016860:	72bea4d0 	.word	0x72bea4d0
 8016864:	3e663769 	.word	0x3e663769
 8016868:	c5d26bf1 	.word	0xc5d26bf1
 801686c:	3ebbbd41 	.word	0x3ebbbd41
 8016870:	af25de2c 	.word	0xaf25de2c
 8016874:	3f11566a 	.word	0x3f11566a
 8016878:	16bebd93 	.word	0x16bebd93
 801687c:	3f66c16c 	.word	0x3f66c16c
 8016880:	5555553e 	.word	0x5555553e
 8016884:	3fc55555 	.word	0x3fc55555
 8016888:	fff00000 	.word	0xfff00000
 801688c:	3ff00000 	.word	0x3ff00000
 8016890:	4090cbff 	.word	0x4090cbff
 8016894:	3f6f3400 	.word	0x3f6f3400
 8016898:	3fe00000 	.word	0x3fe00000
 801689c:	652b82fe 	.word	0x652b82fe
 80168a0:	3c971547 	.word	0x3c971547
 80168a4:	4090cc00 	.word	0x4090cc00

080168a8 <scalbn>:
 80168a8:	b570      	push	{r4, r5, r6, lr}
 80168aa:	ec55 4b10 	vmov	r4, r5, d0
 80168ae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80168b2:	4606      	mov	r6, r0
 80168b4:	462b      	mov	r3, r5
 80168b6:	b991      	cbnz	r1, 80168de <scalbn+0x36>
 80168b8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80168bc:	4323      	orrs	r3, r4
 80168be:	d03d      	beq.n	801693c <scalbn+0x94>
 80168c0:	4b35      	ldr	r3, [pc, #212]	@ (8016998 <scalbn+0xf0>)
 80168c2:	4620      	mov	r0, r4
 80168c4:	4629      	mov	r1, r5
 80168c6:	2200      	movs	r2, #0
 80168c8:	f7e9 febe 	bl	8000648 <__aeabi_dmul>
 80168cc:	4b33      	ldr	r3, [pc, #204]	@ (801699c <scalbn+0xf4>)
 80168ce:	429e      	cmp	r6, r3
 80168d0:	4604      	mov	r4, r0
 80168d2:	460d      	mov	r5, r1
 80168d4:	da0f      	bge.n	80168f6 <scalbn+0x4e>
 80168d6:	a328      	add	r3, pc, #160	@ (adr r3, 8016978 <scalbn+0xd0>)
 80168d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168dc:	e01e      	b.n	801691c <scalbn+0x74>
 80168de:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80168e2:	4291      	cmp	r1, r2
 80168e4:	d10b      	bne.n	80168fe <scalbn+0x56>
 80168e6:	4622      	mov	r2, r4
 80168e8:	4620      	mov	r0, r4
 80168ea:	4629      	mov	r1, r5
 80168ec:	f7e9 fcf6 	bl	80002dc <__adddf3>
 80168f0:	4604      	mov	r4, r0
 80168f2:	460d      	mov	r5, r1
 80168f4:	e022      	b.n	801693c <scalbn+0x94>
 80168f6:	460b      	mov	r3, r1
 80168f8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80168fc:	3936      	subs	r1, #54	@ 0x36
 80168fe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8016902:	4296      	cmp	r6, r2
 8016904:	dd0d      	ble.n	8016922 <scalbn+0x7a>
 8016906:	2d00      	cmp	r5, #0
 8016908:	a11d      	add	r1, pc, #116	@ (adr r1, 8016980 <scalbn+0xd8>)
 801690a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801690e:	da02      	bge.n	8016916 <scalbn+0x6e>
 8016910:	a11d      	add	r1, pc, #116	@ (adr r1, 8016988 <scalbn+0xe0>)
 8016912:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016916:	a31a      	add	r3, pc, #104	@ (adr r3, 8016980 <scalbn+0xd8>)
 8016918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801691c:	f7e9 fe94 	bl	8000648 <__aeabi_dmul>
 8016920:	e7e6      	b.n	80168f0 <scalbn+0x48>
 8016922:	1872      	adds	r2, r6, r1
 8016924:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8016928:	428a      	cmp	r2, r1
 801692a:	dcec      	bgt.n	8016906 <scalbn+0x5e>
 801692c:	2a00      	cmp	r2, #0
 801692e:	dd08      	ble.n	8016942 <scalbn+0x9a>
 8016930:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016934:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8016938:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801693c:	ec45 4b10 	vmov	d0, r4, r5
 8016940:	bd70      	pop	{r4, r5, r6, pc}
 8016942:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8016946:	da08      	bge.n	801695a <scalbn+0xb2>
 8016948:	2d00      	cmp	r5, #0
 801694a:	a10b      	add	r1, pc, #44	@ (adr r1, 8016978 <scalbn+0xd0>)
 801694c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016950:	dac1      	bge.n	80168d6 <scalbn+0x2e>
 8016952:	a10f      	add	r1, pc, #60	@ (adr r1, 8016990 <scalbn+0xe8>)
 8016954:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016958:	e7bd      	b.n	80168d6 <scalbn+0x2e>
 801695a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801695e:	3236      	adds	r2, #54	@ 0x36
 8016960:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8016964:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016968:	4620      	mov	r0, r4
 801696a:	4b0d      	ldr	r3, [pc, #52]	@ (80169a0 <scalbn+0xf8>)
 801696c:	4629      	mov	r1, r5
 801696e:	2200      	movs	r2, #0
 8016970:	e7d4      	b.n	801691c <scalbn+0x74>
 8016972:	bf00      	nop
 8016974:	f3af 8000 	nop.w
 8016978:	c2f8f359 	.word	0xc2f8f359
 801697c:	01a56e1f 	.word	0x01a56e1f
 8016980:	8800759c 	.word	0x8800759c
 8016984:	7e37e43c 	.word	0x7e37e43c
 8016988:	8800759c 	.word	0x8800759c
 801698c:	fe37e43c 	.word	0xfe37e43c
 8016990:	c2f8f359 	.word	0xc2f8f359
 8016994:	81a56e1f 	.word	0x81a56e1f
 8016998:	43500000 	.word	0x43500000
 801699c:	ffff3cb0 	.word	0xffff3cb0
 80169a0:	3c900000 	.word	0x3c900000

080169a4 <with_errno>:
 80169a4:	b510      	push	{r4, lr}
 80169a6:	ed2d 8b02 	vpush	{d8}
 80169aa:	eeb0 8a40 	vmov.f32	s16, s0
 80169ae:	eef0 8a60 	vmov.f32	s17, s1
 80169b2:	4604      	mov	r4, r0
 80169b4:	f7fa fea4 	bl	8011700 <__errno>
 80169b8:	eeb0 0a48 	vmov.f32	s0, s16
 80169bc:	eef0 0a68 	vmov.f32	s1, s17
 80169c0:	ecbd 8b02 	vpop	{d8}
 80169c4:	6004      	str	r4, [r0, #0]
 80169c6:	bd10      	pop	{r4, pc}

080169c8 <xflow>:
 80169c8:	4603      	mov	r3, r0
 80169ca:	b507      	push	{r0, r1, r2, lr}
 80169cc:	ec51 0b10 	vmov	r0, r1, d0
 80169d0:	b183      	cbz	r3, 80169f4 <xflow+0x2c>
 80169d2:	4602      	mov	r2, r0
 80169d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80169d8:	e9cd 2300 	strd	r2, r3, [sp]
 80169dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80169e0:	f7e9 fe32 	bl	8000648 <__aeabi_dmul>
 80169e4:	ec41 0b10 	vmov	d0, r0, r1
 80169e8:	2022      	movs	r0, #34	@ 0x22
 80169ea:	b003      	add	sp, #12
 80169ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80169f0:	f7ff bfd8 	b.w	80169a4 <with_errno>
 80169f4:	4602      	mov	r2, r0
 80169f6:	460b      	mov	r3, r1
 80169f8:	e7ee      	b.n	80169d8 <xflow+0x10>
 80169fa:	0000      	movs	r0, r0
 80169fc:	0000      	movs	r0, r0
	...

08016a00 <__math_uflow>:
 8016a00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016a08 <__math_uflow+0x8>
 8016a04:	f7ff bfe0 	b.w	80169c8 <xflow>
 8016a08:	00000000 	.word	0x00000000
 8016a0c:	10000000 	.word	0x10000000

08016a10 <__math_oflow>:
 8016a10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016a18 <__math_oflow+0x8>
 8016a14:	f7ff bfd8 	b.w	80169c8 <xflow>
 8016a18:	00000000 	.word	0x00000000
 8016a1c:	70000000 	.word	0x70000000

08016a20 <_init>:
 8016a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a22:	bf00      	nop
 8016a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a26:	bc08      	pop	{r3}
 8016a28:	469e      	mov	lr, r3
 8016a2a:	4770      	bx	lr

08016a2c <_fini>:
 8016a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a2e:	bf00      	nop
 8016a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a32:	bc08      	pop	{r3}
 8016a34:	469e      	mov	lr, r3
 8016a36:	4770      	bx	lr
